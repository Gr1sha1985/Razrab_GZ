#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КраткоеИмяКлассификатора = Параметры.КраткоеИмяКлассификатора;
	СтроковойКод = Параметры.СтроковойКод;
	ИмяФайлаПоУмолчанию = Параметры.ИмяФайлаПоУмолчанию;
	ДополнительныеПоляДляГрупп = Параметры.ДополнительныеПоляДляГрупп;
	Для Каждого ЭлементСпискаЗначений Из Параметры.ДополнительныеПоля Цикл
		СтрокаПоля = ДополнительныеПоля.Добавить();
		СтрокаПоля.Имя = ЭлементСпискаЗначений.Представление;
		СтрокаПоля.Тип = ЭлементСпискаЗначений.Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьИПрочитатьФайл(Команда)
	
	АдресФайла = Неопределено;
	
	ОчиститьСообщения();
	Попытка
		Оповещение = Новый ОписаниеОповещения("ОткрытьИПрочитатьФайлЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(Оповещение, АдресФайла, , Истина);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При чтении файла возникла ошибка
									 |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение( , ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьОшибкуРаботыСФайлами(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	Если ДеревоГрупп.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не загружены данные из файла'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДеревоГрупп");
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется построение списка загружаемых объектов'"));
	
	КоличествоЭлементов = ПостроитьТаблицуЭлементов();
	
	Если КоличествоЭлементов = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано элементов для загрузки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДеревоГрупп");
		Возврат;
	КонецЕсли;
	
	ТекущийНомер = 0;
	СтрокНаЕдиницуПрогресса = КоличествоЭлементов / 100;
	
	Для Прогресс = 1 По 100 Цикл
		НовыйТекущийНомер = Цел(СтрокНаЕдиницуПрогресса * Прогресс);
		Если НовыйТекущийНомер > ТекущийНомер Тогда
			ШаблонСообщения = НСтр("ru = 'Выполняется загрузка классификатора %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КраткоеИмяКлассификатора);
			Состояние(ТекстСообщения, Прогресс);
			ЗагрузитьСтроки(ТекущийНомер, НовыйТекущийНомер);
			ТекущийНомер = НовыйТекущийНомер;
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'Загрузка классификатора %1 завершена'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КраткоеИмяКлассификатора);
	ПоказатьОповещениеПользователя(ТекстСообщения);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка." + Параметры.ИмяСправочника));
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьЗначениеПометкиВДереве(0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьЗначениеПометкиВДереве(1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДеревоГрупп

&НаКлиенте
Процедура ДеревоГруппПометкаПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоГрупп.ТекущиеДанные;
	Если ТекущаяСтрокаДерева.Пометка = 2 Тогда
		ТекущаяСтрокаДерева.Пометка = 0;
	КонецЕсли;
	УстановитьПометкиВДереве(Элементы.ДеревоГрупп.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьФайлВДерево(Знач АдресФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	ФайлЧтение = Новый ЧтениеXML;
	
	ОшибкаПриОткрытииФайла = Ложь;
	Попытка 
		ФайлЧтение.ОткрытьФайл(ИмяВременногоФайла);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка при открытии файла данных справочника %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КраткоеИмяКлассификатора);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОшибкаПриОткрытииФайла = Истина;
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ОписаниеОшибки));
	КонецПопытки;
	
	Если НЕ ОшибкаПриОткрытииФайла Тогда
		Попытка
			ФайлЧтение.Прочитать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Файла данных справочника %1 поврежден'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КраткоеИмяКлассификатора);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОшибкаПриОткрытииФайла = Истина;
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		КонецПопытки;
	КонецЕсли;
	
	Если ОшибкаПриОткрытииФайла Тогда
		ФайлЧтение = Неопределено;
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось удалить файл
                                    |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ТекстСообщения);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	ДеревоГруппОбъект = РеквизитФормыВЗначение("ДеревоГрупп");
	ДеревоГруппОбъект.Строки.Очистить();
	
	ДеревоПолное = Новый ДеревоЗначений;
	ДеревоПолное.Колонки.Добавить("Код");
	ДеревоПолное.Колонки.Добавить("Представление");
	ДеревоПолное.Колонки.Добавить("Идентификатор");
	ДеревоПолное.Колонки.Добавить("ЭтоГруппа");
	ДеревоПолное.Колонки.Добавить("Наименование");
	ДеревоПолное.Колонки.Добавить("Пометка");
	
	Для Каждого СтрокаПоля Из ДополнительныеПоля Цикл
		ДеревоПолное.Колонки.Добавить(СтрокаПоля.Имя, СтрокаПоля.Тип);
	КонецЦикла;
	
	ФайлЧтение.Прочитать();
	
	ИмяТипаXML = "CatalogObject." + Параметры.ИмяСправочника;
	ТипСсылки = Тип("СправочникСсылка." + Параметры.ИмяСправочника);
	Пока ВозможностьЧтенияXML(ФайлЧтение) Цикл
		ТипXML = ПолучитьXMLТип(ФайлЧтение);
		Если ТипXML.ИмяТипа = ИмяТипаXML Тогда
			// Чтение следующего узла
			ФайлЧтение.Прочитать();
			Ссылка = ПрочитатьXML(ФайлЧтение, ТипСсылки);
			ЭтоГруппа = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
			ПометкаУдаления = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
			Родитель = ПрочитатьXML(ФайлЧтение, ТипСсылки);
			Если СтроковойКод Тогда
				Код = ПрочитатьXML(ФайлЧтение, Тип("Строка"));
			Иначе
				Код = ПрочитатьXML(ФайлЧтение, Тип("Число"));
			КонецЕсли;
			Наименование = ПрочитатьXML(ФайлЧтение, Тип("Строка"));
			
			ЗначенияДополнительныхПолей = Новый Структура;
			Если НЕ ЭтоГруппа ИЛИ ДополнительныеПоляДляГрупп Тогда
				Для Каждого СтрокаПоля Из ДополнительныеПоля Цикл
					ЗначенияДополнительныхПолей.Вставить(СтрокаПоля.Имя, ПрочитатьXML(ФайлЧтение, СтрокаПоля.Тип.Типы()[0]));
				КонецЦикла;
			КонецЕсли;
			
			СвойстваЭлемента = Новый Структура();
			СвойстваЭлемента.Вставить("Ссылка",       Ссылка);
			СвойстваЭлемента.Вставить("ЭтоГруппа",    ЭтоГруппа);
			СвойстваЭлемента.Вставить("Родитель",     Родитель);
			СвойстваЭлемента.Вставить("Код",          Код);
			СвойстваЭлемента.Вставить("Наименование", Наименование);
			СвойстваЭлемента.Вставить("ЗначенияДополнительныхПолей", ЗначенияДополнительныхПолей);
			
			ДобавитьВДерево(ДеревоПолное, СвойстваЭлемента);
			Если ЭтоГруппа Тогда
				ДобавитьВДерево(ДеревоГруппОбъект, СвойстваЭлемента, Ложь);
			КонецЕсли;
			
			// Проверяем, что текущим узлом является КонецЭлемента
			Если ФайлЧтение.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка чтения XML'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			// Чтение следующего узла для завершение чтения элемента
			ФайлЧтение.Прочитать();
		Иначе
			ШаблонСообщения = НСтр("ru = 'Файл данных не является справочником %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КраткоеИмяКлассификатора);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОшибкаПриОткрытииФайла = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	ДеревоГруппОбъект.Строки.Сортировать("Код", Истина);
	
	ЗначениеВРеквизитФормы(ДеревоГруппОбъект, "ДеревоГрупп");
	
	Если ЭтоАдресВременногоХранилища(АдресДерева) Тогда
		УдалитьИзВременногоХранилища(АдресДерева);
		АдресДерева = "";
	КонецЕсли;
	
	АдресДерева = ПоместитьВоВременноеХранилище(ДеревоПолное, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура добавления реквизитов справочника в дерево значений.
//
&НаСервере
Процедура ДобавитьВДерево(Дерево, СвойстваЭлемента, ХранитьРеквизиты = Истина);

	СтрокаРодителя = Дерево.Строки.Найти(Строка(СвойстваЭлемента.Родитель.Ссылка.УникальныйИдентификатор()), "Идентификатор", Истина);
	Если СтрокаРодителя = Неопределено Тогда
		ТекСтрока = Дерево.Строки.Добавить();
	Иначе 
		ТекСтрока = СтрокаРодителя.Строки.Добавить();
	КонецЕсли;
	ТекСтрока.Наименование = СвойстваЭлемента.Наименование;
	ТекСтрока.Представление = Строка(СвойстваЭлемента.Код) + "  " + СвойстваЭлемента.Наименование;
	ТекСтрока.Код = СвойстваЭлемента.Код;
	ТекСтрока.Идентификатор = Строка(СвойстваЭлемента.Ссылка.УникальныйИдентификатор());
	ТекСтрока.Пометка  = Ложь;
	Если ХранитьРеквизиты Тогда
		ТекСтрока.ЭтоГруппа = СвойстваЭлемента.ЭтоГруппа;
		Если НЕ СвойстваЭлемента.ЭтоГруппа ИЛИ ДополнительныеПоляДляГрупп Тогда
			Для Каждого КлючИЗначение Из СвойстваЭлемента.ЗначенияДополнительныхПолей Цикл
				ТекСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПостроитьТаблицуЭлементов()
	
	ДеревоГруппОбъект = РеквизитФормыВЗначение("ДеревоГрупп");
	ДеревоПолное = ПолучитьИзВременногоХранилища(АдресДерева);
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	Если СтроковойКод Тогда
		ОписаниеТиповКода = ОбщегоНазначения.ОписаниеТипаСтрока(10);
	Иначе
		ОписаниеТиповКода = ОбщегоНазначения.ОписаниеТипаЧисло(6, 0);
	КонецЕсли;
	
	ТаблицаЭлементов.Колонки.Добавить("Код", ОписаниеТиповКода);
	ТаблицаЭлементов.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаЭлементов.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаЭлементов.Колонки.Добавить("РодительЭлемента", ОписаниеТиповКода);
	ТаблицаЭлементов.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	СтрокаПолей = "";
	Для Каждого СтрокаПоля Из ДополнительныеПоля Цикл
		ТаблицаЭлементов.Колонки.Добавить(СтрокаПоля.Имя, СтрокаПоля.Тип);
		СтрокаПолей = СтрокаПолей + ",
		|	ТаблицаЭлементов." + СтрокаПоля.Имя + " КАК " + СтрокаПоля.Имя;
	КонецЦикла;
	
	УстановитьПометкиВПолномДереве(ДеревоГруппОбъект.Строки, ДеревоПолное, ТаблицаЭлементов);
	
	КоличествоЭлементов = ТаблицаЭлементов.Количество();
	
	Если КоличествоЭлементов > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаЭлементов", ТаблицаЭлементов);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЭлементов.Код КАК Код,
		|	ТаблицаЭлементов.ЭтоГруппа КАК ЭтоГруппа,
		|	ТаблицаЭлементов.Наименование КАК Наименование,
		|	ТаблицаЭлементов.РодительЭлемента КАК КодРодителя,
		|	ТаблицаЭлементов.Номер КАК Порядок" + СтрокаПолей + "
		|ПОМЕСТИТЬ ТаблицаЭлементов
		|ИЗ
		|	&ТаблицаЭлементов КАК ТаблицаЭлементов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЭлементов.Код КАК Код,
		|	ТаблицаЭлементов.ЭтоГруппа КАК ЭтоГруппа,
		|	ТаблицаЭлементов.Наименование КАК Наименование,
		|	ТаблицаЭлементов.КодРодителя КАК КодРодителя,
		|	КлассификаторРодители.Ссылка КАК Родитель,
		|	ЕСТЬNULL(КлассификаторРодители.ЭтоГруппа, ТаблицаРодителей.ЭтоГруппа) КАК РодительЭтоГруппа,
		|	ТаблицаЭлементов.Порядок КАК Порядок,
		|	ЕСТЬNULL(Классификатор.Ссылка, ЗНАЧЕНИЕ(Справочник." + Параметры.ИмяСправочника + ".ПустаяСсылка)) КАК Ссылка,
		|	Классификатор.ЭтоГруппа КАК СсылкаЭтоГруппа" + СтрокаПолей + "
		|ИЗ
		|	ТаблицаЭлементов КАК ТаблицаЭлементов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭлементов КАК ТаблицаРодителей
		|		ПО ТаблицаЭлементов.КодРодителя = ТаблицаРодителей.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + Параметры.ИмяСправочника + " КАК КлассификаторРодители
		|		ПО ТаблицаЭлементов.КодРодителя = КлассификаторРодители.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + Параметры.ИмяСправочника + " КАК Классификатор
		|		ПО ТаблицаЭлементов.Код = Классификатор.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
		ТаблицаЭлементов.Индексы.Добавить("КодРодителя");
		
		АдресТаблицыЭлементов = ПоместитьВоВременноеХранилище(ТаблицаЭлементов, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат КоличествоЭлементов;
	
КонецФункции

&НаСервере
Процедура УстановитьПометкиВПолномДереве(Строки, ДеревоПолное, ТаблицаЭлементов)
	
	Для Каждого ТекСтрока Из Строки Цикл
		СтрокаПолногоДерева = ДеревоПолное.Строки.Найти(ТекСтрока.Код, "Код", Истина);
		СтрокаПолногоДерева.Пометка = ТекСтрока.Пометка;
		Если ТекСтрока.Пометка > 0 Тогда
			СтрокаЭлемента = ТаблицаЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЭлемента, СтрокаПолногоДерева);
			СтрокаЭлемента.Номер = ТаблицаЭлементов.Количество();
			Если СтрокаПолногоДерева.Родитель <> Неопределено Тогда
				СтрокаЭлемента.РодительЭлемента = СтрокаПолногоДерева.Родитель.Код;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.Строки.Количество() = 0 
			ИЛИ СтрокаПолногоДерева.Строки.Найти(Ложь, "ЭтоГруппа") <> Неопределено Тогда
			Для Каждого ТекСтрокаПолногоДерева Из СтрокаПолногоДерева.Строки Цикл
				ТекСтрокаПолногоДерева.Пометка = ТекСтрока.Пометка;
				Если ТекСтрока.Пометка > 0
					И (Не ТекСтрокаПолногоДерева.ЭтоГруппа
						ИЛИ ТекСтрока.Строки.Количество() = 0
						И Не ТекСтрокаПолногоДерева.ЭтоГруппа) Тогда
					СтрокаЭлемента = ТаблицаЭлементов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЭлемента, ТекСтрокаПолногоДерева);
					СтрокаЭлемента.Номер = ТаблицаЭлементов.Количество();
					Если ТекСтрокаПолногоДерева.Родитель <> Неопределено Тогда
						СтрокаЭлемента.РодительЭлемента = ТекСтрокаПолногоДерева.Родитель.Код;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		УстановитьПометкиВПолномДереве(ТекСтрока.Строки, ДеревоПолное, ТаблицаЭлементов);
	КонецЦикла;
	
КонецПроцедуры

// Процедура загрузки помеченных строк из дерева в справочник.
//
&НаСервере
Процедура ЗагрузитьСтроки(НачальныйНомер, КонечныйНомер)
	
	ТаблицаЭлементов = ПолучитьИзВременногоХранилища(АдресТаблицыЭлементов);
	
	Для Индекс = НачальныйНомер По КонечныйНомер - 1 Цикл
		
		СтрокаЭлемента = ТаблицаЭлементов[Индекс];
		
		Если ЗначениеЗаполнено(СтрокаЭлемента.КодРодителя) Тогда
			Если НЕ СтрокаЭлемента.РодительЭтоГруппа Тогда
				ШаблонСообщения = НСтр("ru = 'Невозможно создать / обновить элемент с кодом %1 т.к. в качестве родителя у него указан элемент (%2)'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаЭлемента.Код,
					СтрокаЭлемента.КодРодителя);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			// Родитель не существовал до загрузки
			Если СтрокаЭлемента.Родитель = NULL Тогда
				Родитель = Справочники[Параметры.ИмяСправочника].НайтиПоКоду(СтрокаЭлемента.КодРодителя);
				СтрокиСТакимЖеРодителем = ТаблицаЭлементов.НайтиСтроки(Новый Структура("КодРодителя", СтрокаЭлемента.КодРодителя));
				Для Каждого СтрокаСРодителем Из СтрокиСТакимЖеРодителем Цикл
					СтрокаСРодителем.Родитель = Родитель;
				КонецЦикла;
			Иначе
				Родитель = СтрокаЭлемента.Родитель;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Родитель) Тогда
				// При загрузке родителя произошла ошибка
				Продолжить;
			КонецЕсли;
		Иначе
			Родитель = Неопределено;
		КонецЕсли;
		
		Объект = Неопределено;
		Ссылка = СтрокаЭлемента.Ссылка;
		Если Ссылка.Пустая() тогда 
			Если СтрокаЭлемента.ЭтоГруппа Тогда
				Объект = Справочники[Параметры.ИмяСправочника].СоздатьГруппу();
			Иначе
				Объект = Справочники[Параметры.ИмяСправочника].СоздатьЭлемент();
			КонецЕсли;
			Объект.Код = СтрокаЭлемента.Код;
		ИначеЕсли СтрокаЭлемента.СсылкаЭтоГруппа = СтрокаЭлемента.ЭтоГруппа тогда
			Если ПереписыватьОбъекты Тогда
				Объект = Ссылка.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			ШаблонСообщения = НСтр("ru = 'Элемент с кодом %1 невозможно обновить'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаЭлемента.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Если Объект <> Неопределено тогда
			Объект.Родитель = Родитель;
			Объект.Наименование = СтрокаЭлемента.Наименование;
			Если НЕ СтрокаЭлемента.ЭтоГруппа ИЛИ ДополнительныеПоляДляГрупп Тогда
				Для Каждого СтрокаПоля Из ДополнительныеПоля Цикл
					Объект[СтрокаПоля.Имя] = СтрокаЭлемента[СтрокаПоля.Имя];
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				Объект.Записать();
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка при записи элемента с кодом %1
				                             |%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.Код,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.Код,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КонечныйНомер = ТаблицаЭлементов.Количество() Тогда
		УдалитьИзВременногоХранилища(АдресТаблицыЭлементов);
		АдресТаблицыЭлементов = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьОшибкуРаботыСФайлами(ПодробноеПредставлениеОшибки)
    ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
    	УровеньЖурналаРегистрации.Ошибка,,,
        ПодробноеПредставлениеОшибки);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПометкиВДереве(Знач ЗначениеПометки)
	
	УстановитьЗначениеПометкиВСтрокахДерева(ДеревоГрупп.ПолучитьЭлементы(), ЗначениеПометки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПометкиВСтрокахДерева(ЭлементыДерева, ЗначениеПометки)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЭлементДерева.Пометка = ЗначениеПометки;
		ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыДерева.Количество() > 0 Тогда
			УстановитьЗначениеПометкиВСтрокахДерева(ПодчиненныеЭлементыДерева, ЗначениеПометки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет значение флага по составу пометок коллекции строк.
//
// Параметры:
//  СтрокаРодитель - КоллекцияСтрокДереваЗначений - строки для определения значения флага.
//
// Возвращаемое значение:
//  Число - значение флага.
// 
&НаКлиенте
Функция ОпределитьЗначениеФлага(СтрокаРодитель)

	НайденыИстина = Ложь;
	НайденыЛожь = Ложь;

	Для Каждого Строка Из СтрокаРодитель.ПолучитьЭлементы() Цикл
		Если Строка.Пометка = 2 Тогда
			Возврат 2;
		КонецЕсли;
		
		Если НЕ НайденыИстина И Строка.Пометка Тогда
			НайденыИстина = Истина;
		КонецЕсли;
		
		Если НЕ НайденыЛожь И НЕ Строка.Пометка Тогда
			НайденыЛожь = Истина;
		КонецЕсли;
	КонецЦикла;

	Если НайденыИстина И НайденыЛожь Тогда
		Возврат 2;
	ИначеЕсли НайденыИстина И НЕ НайденыЛожь Тогда
		Возврат 1;
	ИначеЕсли НЕ НайденыИстина И НайденыЛожь Тогда
		Возврат 0;
	КонецЕсли;

КонецФункции // ОпределитьЗначениеФлага()

// Устанавливает пометку в вышестоящих элементах дерева.
//
&НаКлиенте
Процедура ОбходВерхнихУровней(ТекСтрока)

	ТекСтрока.Пометка = ОпределитьЗначениеФлага(ТекСтрока);
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ОбходВерхнихУровней(Родитель);
	КонецЕсли;
	
КонецПроцедуры // ОбходВерхнихУровней()

// Устанавливает пометку в подчиненных элементах дерева.
//
&НаКлиенте
Процедура ОбходНижнихУровней(ТекСтрока)
	
	Для Каждого Строка Из ТекСтрока.ПолучитьЭлементы() Цикл
		Строка.Пометка = ТекСтрока.Пометка;
		ОбходНижнихУровней(Строка);
	КонецЦикла;
	
КонецПроцедуры // ОбходНижнихУровней()

// Устанавливает пометки в подчиненных строках и устанавливает пометку
// в текущей строке в зависимости от состава пометок в подчиненных строках.
// При значении параметра ИнтерактивнаяУстановкаПометок равным Истина
// возможна установка флага для строки с незаполненным источником.
//
// Параметры:
//  ТекСтрока - СтрокаДереваЗначений.
// 
&НаКлиенте
Процедура УстановитьПометкиВДереве(ТекСтрока)

	ОбходНижнихУровней(ТекСтрока);
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ОбходВерхнихУровней(Родитель);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиВДереве()

&НаКлиенте
Процедура ОткрытьИПрочитатьФайлЗавершение(Результат, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ШаблонСообщения = НСтр("ru = 'Выполняется считывание данных классификатора %1 из файла'");
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КраткоеИмяКлассификатора));
		ПрочитатьФайлВДерево(АдресФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СобытиеЖурналаРегистрации()

	Возврат НСтр("ru = 'Загрузка классификатора ЕНАОФ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции

#КонецОбласти
