////////////////////////////////////////////////////////////////////////////////
// Работа с последовательностями
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регистрирует в последовательности ДокументыОрганизаций переданный документ.
//
// Параметры:
//	Источник - ДокументОбъект.*, Структура - Сведения о документе, который необходимо зарегистрировать в последовательности.
//		При передачи структуры в ней обязательно должны быть ключи:
//			* Ссылка - ДокументСсылка.*
//			* Дата - Дата+Время
//			* ПометкаУдаления - Булево
//			* Проведен - Булево
//			* Организация - СправочникСсылка.Организация
//			* ОбменДанными - Структура - Содержит ключ
//				** Загрузка - Булево
//			* ДополнительныеДанные - Структура
//
//	Отказ - Булево - Если выставить в Истина, то запись не будет произведена.
//	ТолькоКИсключениюИзПоследовательности - Булево - Если Истина, то только для существующих
//		записей последовательности устанавливается состояние "К исключению", новые записи не добавляются.
//
Процедура ЗарегистрироватьВПоследовательности(Источник, Отказ, ТолькоКИсключениюИзПоследовательности) Экспорт

	Если Источник.ДополнительныеСвойства.Свойство("НеИзменятьРегистрациюВПоследовательности")
		И Источник.ДополнительныеСвойства.НеИзменятьРегистрациюВПоследовательности Тогда
		Возврат;
	КонецЕсли;

	ТипИсточника = ТипЗнч(Источник);

	// В качестве Источника может быть передана структура, поэтому определяем тип документа как тип ссылки.
	ТипДокумента = ТипЗнч(Источник.Ссылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		// У документа "Установка цен номенклатуры" нет организации в шапке, 
		// поэтому для него регистрируем по всем организациям с учетной политикой
		// "Розница в продажных ценах".
		ЗарегистрироватьВПоследовательностиУстановкаЦенНоменклатуры(Источник, Отказ);
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина); // Право на регистрацию в последовательности определяется правами на проведение документа, которые проверены раньше

	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
	Если НЕ ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение)
		ИЛИ НЕ ДокументРегистрируетсяВПоследовательности(Источник.Ссылка) Тогда
		// Документ не входит в состав последовательности, его не регистрируем.
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Последовательность.ДокументыОрганизаций.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Источник.Ссылка);
	Блокировка.Заблокировать();

	НаборЗаписей.Прочитать();
	
	Если ТолькоКИсключениюИзПоследовательности Тогда
		ДокументПроведен = Ложь;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОперацияБух") Тогда
		ДокументПроведен = НЕ Источник.ПометкаУдаления;
	Иначе
		ДокументПроведен = Источник.Проведен;
	КонецЕсли;
	
	Если НЕ ДокументПроведен И НаборЗаписей.Количество() = 0 Тогда
		// Документ непроведенный и прошлых записей в последовательности нет, поэтому менять нечего.
		Возврат;
	КонецЕсли;
	
	// Прошлые записи последовательности отметим, как требующие исключения.
	// Дополнительно для каждой организации определим самый ранний период записи.
	МинПериодыПоОрганизациям = Новый Соответствие;
	Для Каждого Движение Из НаборЗаписей Цикл
		
		Если Движение.СостояниеПроведения <> Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности Тогда
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
		КонецЕсли;
		
		МинПериод = МинПериодыПоОрганизациям[Движение.Организация];
		Если МинПериод = Неопределено Тогда
			МинПериод = Движение.Период;
		Иначе
			МинПериод = Мин(МинПериод, Движение.Период);
		КонецЕсли;
		МинПериодыПоОрганизациям.Вставить(Движение.Организация, МинПериод);
		
	КонецЦикла;

	// Оставим по каждой организации запись с наиболее ранним периодом, остальные удалим.
	// Это необходимо в связи с тем, что при записи набора последовательности платформа оставляет
	// по каждой комбинации измерений последовательности только одну запись.
	// Поэтому гарантируем, что это будет самая ранняя запись.
	Сч = НаборЗаписей.Количество();
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		Движение = НаборЗаписей[Сч];
		МинПериод = МинПериодыПоОрганизациям[Движение.Организация];
		Если Движение.Период <> МинПериод Тогда
			НаборЗаписей.Удалить(Сч);
		КонецЕсли;

	КонецЦикла;
	
	Если ДокументПроведен Тогда

		Если Источник.ДополнительныеСвойства.Свойство("ПроведенВХронологическойПоследовательности")
		   И Источник.ДополнительныеСвойства.ПроведенВХронологическойПоследовательности Тогда
			СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности;
		Иначе
			СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
		КонецЕсли;
		
		// Запись по текущей организации.
		Период = Источник.Дата;
		
		// Свойства
		Если ТипДокумента = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда

			Если ТипИсточника = Тип("ДокументОбъект.НачислениеЗарплаты") Тогда
				МесяцНачисления = Источник.МесяцНачисления;
			Иначе
				// В качестве Источника передан не документ-объект, а аналогичная по реквизитам структура,
				// получим дополнительные данные из ссылки.
				МесяцНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "МесяцНачисления");
			КонецЕсли;
			// Зарплатные документы иногда проводятся концом месяца
			Период = УчетЗарплаты.ПолучитьПериодРегистрации(Источник.Ссылка, МесяцНачисления);

		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтражениеЗарплатыВБухучете")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтражениеЗарплатыВУчете")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.Отпуск")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.БольничныйЛист")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.НачислениеОценочныхОбязательствПоОтпускам") Тогда
			
			Если ТипИсточника = Тип("ДокументОбъект.ОтражениеЗарплатыВБухучете")
				ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтражениеЗарплатыВУчете")
				ИЛИ ТипИсточника = Тип("ДокументОбъект.Отпуск")
				ИЛИ ТипИсточника = Тип("ДокументОбъект.БольничныйЛист")
				ИЛИ ТипИсточника = Тип("ДокументОбъект.НачислениеОценочныхОбязательствПоОтпускам") Тогда
				ПериодРегистрации = Источник.ПериодРегистрации;
			Иначе
				// В качестве Источника передан не документ-объект, а аналогичная по реквизитам структура,
				// получим дополнительные данные из ссылки.
				ПериодРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПериодРегистрации");
			КонецЕсли;
			
			// Зарплатные документы иногда проводятся концом месяца
			Период = УчетЗарплаты.ПолучитьПериодРегистрации(Источник.Ссылка, ПериодРегистрации);

		Иначе
			
			Период = ДатаРегистрацииДокументаВПоследовательности(Источник.Ссылка, Источник.Дата, Источник.Организация);
			
		КонецЕсли;
		
		// Удалим из последовательности записи по текущей организации с датами, больше текущей.
		Сч = НаборЗаписей.Количество();
		Пока Сч > 0 Цикл
			
			Сч = Сч - 1;
			Движение = НаборЗаписей[Сч];
			Если Движение.Организация <> Источник.Организация Тогда
				// Относится к другой организации, не трогаем.
				Продолжить;
			КонецЕсли;
			
			Если Движение.Период >= Период Тогда
				НаборЗаписей.Удалить(Сч);
			КонецЕсли;
			
		КонецЦикла;

		// Добавляем новую запись.
		Движение = НаборЗаписей.Добавить();

		// Свойства.
		Движение.Регистратор = Источник.Ссылка;
		Движение.Период      = Период;
		
		// Измерения.
		Движение.Организация         = Источник.Организация;
		Движение.СостояниеПроведения = СостояниеПроведения;
	
	КонецЕсли;
	
	Если НаборЗаписей.Модифицированность() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

// Отменяет регистрацию в последовательности и регистре отложенного проведения.
//
// Параметры:
// 	Источник - ДокументОбъект - Текущий документ.
//	Отказ - Булево - Признак отказа от выполнения отмены.
//
Процедура ОтменитьРегистрациюВПоследовательности(Источник, Отказ) Экспорт
	
	ЗарегистрироватьВПоследовательности(Источник, Отказ, Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Организация") Тогда
		ДатаРегистрации = ДатаРегистрацииДокументаВПоследовательности(Источник.Ссылка, Источник.Дата, Источник.Организация);
		ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Источник.Организация, ДатаРегистрации);
	Иначе
		ИспользуетсяОтложенноеПроведение = Ложь;
	КонецЕсли;
	Если Не ИспользуетсяОтложенноеПроведение Тогда
		Возврат;
	КонецЕсли;

	// Анализируем, влияет ли отмена проведения на наличие записи в регистре отложенных расчетов с контрагентами.
	Если УчетВзаиморасчетовОтложенноеПроведение.ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами(Источник.Ссылка) Тогда
		// Отметим старые записи в регистре отложенных расчетов как неактуальные.
		УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(Источник, Отказ);
	КонецЕсли;

	// Сброс актуальности регламентных операций закрытия месяца.
	ЗарегистрироватьУстареваниеРегламентныхОпераций(Источник, Отказ);
	
КонецПроцедуры

// Удаляет переданный документ из последовательности ДокументыОрганизаций.
//
// Параметры:
//	Регистратор - ДокументСсылка.* - Ссылка на документ.
//
Процедура УдалитьДокументИзПоследовательности(Регистратор) Экспорт

	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	
	// Если тип документа не входит в последовательность, то отбор по нему не устанавливается, 
	// и ничего делать с ним не требуется.
	Если НЕ ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Подготавливает таблицу, содержащую счета учета товаров, используемых в документе.
//
Функция ПодготовитьТаблицуСчетовТоваровДляАнализа(ТаблицаТовары = Неопределено, ТаблицаВозвратнаяТара = Неопределено) Экспорт
	
	Если ТаблицаВозвратнаяТара = Неопределено Или ТаблицаВозвратнаяТара.Количество() = 0 Тогда
		ТаблицаРегистрации = ТаблицаТовары;
	ИначеЕсли ТаблицаТовары = Неопределено Тогда
		ТаблицаРегистрации = ТаблицаВозвратнаяТара;
	ИначеЕсли ТаблицаТовары.Количество() = 0 Тогда
		ТаблицаРегистрации = ТаблицаТовары.СкопироватьКолонки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВозвратнаяТара, ТаблицаРегистрации);
	Иначе
		ТаблицаРегистрации = ТаблицаТовары.Скопировать();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаВозвратнаяТара, ТаблицаРегистрации);
	КонецЕсли;
	
	Возврат ТаблицаРегистрации;
	
КонецФункции

// При использовании отложенного проведения регистрирует в последовательности ДокументыОрганизаций переданный документ.
//
// Параметры:
//	Объект - ДокументОбъект.* - Документ, который необходимо зарегистрировать в последовательности.
//	Отказ  - Булево - Признак отказа от выполнения операции.
//	ТаблицаОтложенныеРасчетыСКонтрагентами - ТаблицаЗначений - Таблица со списком договоров документа,
//		по которым анализируется необходимость регистрации в последовательности для взаиморасчетов.
//		(см. ПодготовитьПараметрыОтложенныеРасчетыВПоследовательности()).
//	ТаблицаТовары - ТаблицаЗначений - Таблица со списком МПЗ из документа, по которым анализируется
//		необходимость регистрации необходимость регистрации в последовательности для МПЗ
//		(см. ПодготовитьПараметрыОтложенныеРасчетыВПоследовательности()).
//	УстаревшаяРегламентнаяОперация - ПеречислениеСсылка.ВидыРегламентныхОпераций - 
//		Регламетная операция закрытия месяца, для которой необходимо сбросить актуальность в результате проведения документа.
//		Если параметр не передан (Неопределено), то при отсутствии данных в ТаблицаОтложенныеРасчетыСКонтрагентами 
//		и в ТаблицаТовары, всегда будет зарегистрировано нарушение последовательности, чтобы в дальнейшем
//		требовалось выполнить повторно все регламетные операции закрытия месяца.
//		Если передана пустая ссылка, то при отсутствии данных и в ТаблицаОтложенныеРасчетыСКонтрагентами
//		и в ТаблицаОтложенныеРасчетыСКонтрагентами ни последовательность, ни актуальность регламентных операций не сбрасывается.
//		Вызывающая процедура может провести дополнительный анализ необходимости сброса актуальности.
//
Функция ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		Объект,
		Отказ,
		ТаблицаОтложенныеРасчетыСКонтрагентами = Неопределено,
		ТаблицаТовары = Неопределено,
		Знач УстаревшаяРегламентнаяОперация = Неопределено) Экспорт

	// Проверим использование отложенного проведения (кроме случаев, когда перед вызовом процедуры это уже проверялось).
	ДатаРегистрации = ДатаРегистрацииДокументаВПоследовательности(Объект.Ссылка, Объект.Дата, Объект.Организация);
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Объект.Организация, ДатаРегистрации);
	
	Если Не ИспользуетсяОтложенноеПроведение Тогда
		// Оперативный расчет остатков.
		ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);
		Возврат Истина;
	КонецЕсли;
	
	// Подготавливаем таблицы в требуемом формате.
	Параметры = ПодготовитьПараметрыОтложенныеРасчетыВПоследовательности(ТаблицаОтложенныеРасчетыСКонтрагентами, ТаблицаТовары);
	ОтложенныеРасчетыСКонтрагентами = Параметры.ОтложенныеРасчетыСКонтрагентами;
	Товары = Параметры.Товары;

	// Регистрируем в последовательности (обеспечиваем актуальные остатки): или если нет данных для анализа,
	// или только для отдельных случаев.
	НужноЗарегистрироватьВПоследовательности =
		ОтложенныеРасчетыСКонтрагентами.Количество() = 0
		И Товары.Количество() = 0
		И УстаревшаяРегламентнаяОперация = Неопределено;
	
	// Сразу регистрируем для взаиморасчётов не в рублях.
	Если Не НужноЗарегистрироватьВПоследовательности И ОтложенныеРасчетыСКонтрагентами.Количество() > 0 Тогда
		
		ОтборРублевыхДоговоров = Новый Структура("ВалютаВзаиморасчетов");
		ОтборРублевыхДоговоров.ВалютаВзаиморасчетов = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

		КоличествоРублевыхДоговоров = ОтложенныеРасчетыСКонтрагентами.НайтиСтроки(ОтборРублевыхДоговоров).Количество();

		Если КоличествоРублевыхДоговоров <> ОтложенныеРасчетыСКонтрагентами.Количество() Тогда
			НужноЗарегистрироватьВПоследовательности = Истина;
		Иначе
			// проверяем наличие договоров с расчетами по комиссионной схеме
			ВидыДоговоров = УчетВзаиморасчетовОтложенноеПроведение.ВидыДоговоровОтложенногоПроведения();
			Для каждого СтрокаТаблицы Из ОтложенныеРасчетыСКонтрагентами Цикл
				Если ВидыДоговоров.Найти(СтрокаТаблицы.ВидДоговора) = Неопределено Тогда
					НужноЗарегистрироватьВПоследовательности = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
 		КонецЕсли;
		
	КонецЕсли;
	
	// Сразу регистрируем для особых видов активов (например, ОС).
	Если Не НужноЗарегистрироватьВПоследовательности И Товары.Количество() > 0 Тогда
		
		СчетаРассчитываемыеОперативно = УчетТоваров.СчетаРассчитываемыеОперативно();
		Для каждого СтрокаТовара Из Товары Цикл
			Если УчетТоваров.ОперативныйРасчетПоСчету(СтрокаТовара, СчетаРассчитываемыеОперативно) Тогда
				НужноЗарегистрироватьВПоследовательности = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Если НужноЗарегистрироватьВПоследовательности Тогда
		// Оперативный расчет остатков.
		ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);
	Иначе
		
		Если ПроведениеСервер.ГрупповоеПерепроведение(Объект) Тогда
			// Ссылка на документ не должна оставаться в последовательности.
			УдалитьДокументИзПоследовательности(Объект.Ссылка);
		Иначе
			// Документ помечается как исключенный из последовательности.
			ЗарегистрироватьВПоследовательности(Объект, Отказ, Истина);
		КонецЕсли;
		
		Если Товары.Количество() > 0 Тогда
			// Если была выполнена рег.операция "Корректировка стоимости", то нужно пометить её как устаревшую.
			УстаревшаяРегламентнаяОперация = МинРегламентнаяОперация(
				УстаревшаяРегламентнаяОперация, Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УстаревшаяРегламентнаяОперация) Тогда
			ЗарегистрироватьУстареваниеОперации(Объект, УстаревшаяРегламентнаяОперация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НужноЗарегистрироватьВПоследовательности;
	
КонецФункции

// Возвращает для документа дату регистрации в последовательности.
//
Функция ДатаРегистрацииДокументаВПоследовательности(ДокументСсылка, Дата, Организация) Экспорт

	Результат = Дата;

	ТипДокумента = ТипЗнч(ДокументСсылка);

	Если (ТипДокумента = Тип("ДокументСсылка.ВводНачальныхОстатков")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОперацияБух") И КонецДня(Дата) = КонецМесяца(Дата))
		И УчетУСН.ДокументСозданПриИзмененииНалоговогоРежима(ДокументСсылка) Тогда
		// При переходе на УСН ввод начальных остатков и служебные операции перехода на учет запасов по ФИФО проводятся в конце месяца,
		// предшествующего началу ведения учета по новой системе налогообложения.
		// В этом случае отражаем документы в последовательности за первое число следующего месяца.
		Результат = КонецМесяца(Дата) + 1;

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		// Ввод начальных остатков может быть проведен в месяце, 
		// за которых еще не заполнена учетная политика, т.к. учет будет только со следующего месяца.
		// В таком случае отражаем документ "Ввод начальных остатков" в последовательности
		// за первое число следующего месяца.
		Если НЕ УчетнаяПолитика.Существует(Организация, Дата) Тогда
			Результат = КонецМесяца(Дата) + 1;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает Истина, если по указанной организации в месяце есть регламентная операция,
// которая не является устаревшей.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация.
//	Период - Дата - Дата месяца.
//	ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций - Вид проверяемой операции.
//
// Возвращаемое значение:
//	Булево
//
Функция ЕстьНеустаревшаяОперация(Организация, Период, ВидОперации) Экспорт
	
	// Сначала проверяем наиболее вероятную ситуацию: уже есть устаревшая операция.
	// Группа в записях регистра всегда 0. Некое число будет только в блокировках.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ВидОперации",   ВидОперации);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьУстаревшая
	|ИЗ
	|	РегистрСведений.НеактуальныеРегламентныеОперации КАК НеактуальныеРегламентныеОперации
	|ГДЕ
	|	НеактуальныеРегламентныеОперации.Организация = &Организация
	|	И НеактуальныеРегламентныеОперации.Группа = 0
	|	И НеактуальныеРегламентныеОперации.Дата = &НачалоПериода
	|	И НеактуальныеРегламентныеОперации.ВидОперации = &ВидОперации";
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим: может быть операция не устарела, потому что нет самой операции.
	
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьНеустаревшая
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации = &ВидОперации
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Помечает указанную регламентную операцию (и следующие за ней) устаревшими.
//
// Параметры:
//  Объект       - ДокументОбъект - его проведение является причиной устаревания операции.
//  УстаревшаяРегламентнаяОперация - Перечисления.ВидыРегламентныхОпераций - устаревающая операция.
//
Процедура ЗарегистрироватьУстареваниеОперации(Объект, УстаревшаяРегламентнаяОперация) Экспорт

	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ДополнительныеСвойства.Свойство("НеИзменятьРегистрациюВПоследовательности")
		И Объект.ДополнительныеСвойства.НеИзменятьРегистрациюВПоследовательности Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(Объект) Тогда
		// При групповом проведении актуальность рег.операций сбрасывается
		// самой обработкой группового перепроведения.
		Возврат;
	КонецЕсли;

	НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(УстаревшаяРегламентнаяОперация);
	
	ДатаРегистрации = ДатаРегистрацииДокументаВПоследовательности(Объект.Ссылка, Объект.Дата, Объект.Организация);
	
	Если ЕстьНеустаревшаяОперация(Объект.Организация, ДатаРегистрации, УстаревшаяРегламентнаяОперация) Тогда
		РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
			Объект.Организация, ДатаРегистрации, НомерГруппы, УстаревшаяРегламентнаяОперация, Истина);
	КонецЕсли;

КонецПроцедуры

// Сбрасывает актуальность регламетных операций закрытия месяца
// в зависимости от счета затрат в табличной части документа.
//
// Параметры:
//	Объект - ДокументОбъект.* - Текущий документ.
//	СчетаЗатрат - Массив, Неопределено - Массив со счетами затрат из табличной части затрат.
//	ИмяТабличнойЧасти - Строка - Имя табличной части документа.
//
Процедура ЗарегистрироватьУстареваниеРегламентныхОперацийПриПоступленииЗатрат(Объект, Знач СчетаЗатрат = Неопределено, ИмяТабличнойЧасти = "Услуги") Экспорт

	Если СчетаЗатрат = Неопределено Тогда
		// Выбираем данные из табличной части.
		СчетаЗатрат = Объект[ИмяТабличнойЧасти].ВыгрузитьКолонку("СчетЗатрат");
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаЗатрат);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетаЗатрат) Тогда
		// Нет данных по услугам, обрабатываем документ в общем порядке.
		Возврат;
	КонецЕсли;

	УстаревшиеРегламентныеОперации = Новый Соответствие;
	
	// Определим по счету затрат вид регламентной операции, которая устарела в результате проведения документа.
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	КешСчетов = Новый Соответствие; // Ключ - Имя группы счетов, Значение - Массив счетов.
	
	Для Каждого Счет Из СчетаЗатрат Цикл
		
		// Начинаем проверку с рег.операций первой группы.
		Если СчетОтноситсяКГруппеСчетов(Счет, "РасходыБудущихПериодов", КешСчетов) Тогда
			УстаревшиеРегламентныеОперации.Вставить(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97);

		ИначеЕсли ПлательщикНалогаНаПрибыль И СчетОтноситсяКГруппеСчетов(Счет, "АрендныеОбязательства", КешСчетов) Тогда
			// Изменение услуг лизинга влияет на регламентную операцию "Признание в НУ лизинговых платежей"
			// только для плательщиков налога на прибыль.
			УстаревшиеРегламентныеОперации.Вставить(Перечисления.ВидыРегламентныхОпераций.ПризнаниеВНУЛизинговыхПлатежей);
			
		Иначе
			// В остальных случаях считаем, что повторно необходимо перевыполнить рег.операции,
			// начиная с расчета долей косвенных расходов.
			УстаревшиеРегламентныеОперации.Вставить(Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если УстаревшиеРегламентныеОперации.Количество() = 0 Тогда
		// Не требуется сбрасывать актуальность рег.операций.
		Возврат;
	КонецЕсли;

	// Определим регламентные операции с наименьшим номером группы и сбросим для них актуальность.
	// Чаще всего в одном документе счета затрат будут совпадать и потому "сбивать" одну и туже регламентную операцию.
	// Для поддержки редкого случая, когда счета различаются в разных строках,
	// ведем массив со списком "сбиваемых" рег.операций.
	НеактуальныеОперации = Новый Массив;
	// Определим номер самой ранней группы операций закрытия месяца, начиная с последней.
	МинНомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91);
	
	Для Каждого КлючИЗначение Из УстаревшиеРегламентныеОперации Цикл
		ВидРегламетнойОперации = КлючИЗначение.Ключ;
		
		НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидРегламетнойОперации);

		Если НомерГруппы = МинНомерГруппы Тогда
			// Входит в текущую группу закрытия месяца, добавляем к списку неактуальных операций.
			НеактуальныеОперации.Добавить(ВидРегламетнойОперации);
		ИначеЕсли НомерГруппы < МинНомерГруппы Тогда
			// Относится к более ранней группе, формируем список заново.
			МинНомерГруппы = НомерГруппы;
			НеактуальныеОперации.Очистить();
			НеактуальныеОперации.Добавить(ВидРегламетнойОперации);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ВидРегламетнойОперации Из НеактуальныеОперации Цикл
		ЗарегистрироватьУстареваниеОперации(Объект, ВидРегламетнойОперации);
	КонецЦикла;

КонецПроцедуры

// Функция возвращает момент времени, с которого последовательность была нарушена в указанном периоде.
// 
// Параметры:
// 	Организация    - СправочникСсылка.Организации, список организаций
//	ДоДаты	       - Дата, до которой необходимо анализировать (включительно). Если пустая дата, то без ограничения.
//
// Возвращаемое значение:
//	 МоментВремени - с которого последовательность нарушена.
//   Неопределено - если нарушения последовательности не обнаружено.
//
Функция МоментНарушенияПоследовательности(Организация, ДоДаты) Экспорт

	Если ЕстьЗаписиВРегистреИсключенныеИзПерепроведенияМесяцы(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаНачала = ДатаНеРанееНачалаУчета(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДоДаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоследовательности.Период КАК Период,
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Организация В(&Организация)
	|	И ТаблицаПоследовательности.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности))
	|	И ТаблицаПоследовательности.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПоследовательности.МоментВремени";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = СоздатьМоментВремени(Выборка.Период, Выборка.Регистратор);
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает наиболее ранний из моментов времени:
//	- начала перепроведения с учетом исключенных месяцев
//	- начала актуализации отложенных расчетов, если для организации используется отложенное проведение.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации
//	ДоДаты 		- Дата, до которого необходимо анализировать (включительно)
//
// Возвращаемое значение:
//	МоментВремени, с которого требуется перепроведение
//		или Неопределено, если перепроведение не требуется.
//
Функция МоментНачалаПерепроведения(Организация, ДоДаты) Экспорт

	Результат = МоментНарушенияПоследовательности(Организация, ДоДаты);
	
	// Состояние отложенных расчетов определяем всегда, вне зависимости от того, 
	// используется ли в месяце ДоДаты отложенное проведение или нет, чтобы
	// при переключении настроек учетной политики, когда происходит переход между
	// разными режимами отложенного проведение, учитывались оба режима.
	МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
		Организация, ДоДаты);
			
	Результат = МинМоментВремени(Результат, МоментАктуальностиОтложенныхРасчетов);

	Возврат Результат;

КонецФункции

// Устанавливает состояние для документа в последовательности в "Проведен с нарушением последовательности".
//
Процедура СброситьСостояниеПоследовательностиДокумента(Регистратор, Период, Организация) Экспорт

	Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
		Возврат;
	КонецЕсли;

	// Если вызывается вне более общей транзакции, то стартуем транзакцию самостоятельно,
	// т.к. управляемая блокировка на набор записей последовательности может производиться 
	// только в рамках транзакции.
	ТранзакцияБылаАктивна = ТранзакцияАктивна();
	Если НЕ ТранзакцияБылаАктивна Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Попытка

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Последовательность.ДокументыОрганизаций.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		Блокировка.Заблокировать();

		НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();

		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Движение Из НаборЗаписей Цикл
				Если Движение.Организация = Организация
				   И (Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности
					Или Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПерепроведениеПропущено) Тогда
					Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Проверим, помечен ли документ на удаление или нет
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "ПометкаУдаления");
		
			Движение = НаборЗаписей.Добавить();
			Движение.Период 		= Период;
			Движение.Регистратор 	= Регистратор;
			Движение.Организация 	= Организация;
			Если РеквизитыДокумента.ПометкаУдаления Тогда
				Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
			Иначе
				Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
		Если НЕ ТранзакцияБылаАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		Если НЕ ТранзакцияБылаАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Регистратор, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)); 
		
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

// Возвращает приблизительное количество документов, подлежащий перепроведению
// в указанном периоде по заданной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется оценка
//	ДатаНачала - Дата+Время - начало периода для оценки количества документов
//	ДатаОкончания - Дата+Время - окончание периода
//	МоментНарушения - МоментВремени - момент нарушения последовательности или Неопределено.
//	
// Возвращаемое значение:
//	Число - оценка количества документов для перепроведения
//
Функция ОценкаКоличестваДокументовДляПерепроведения(Организация, ДатаНачала, ДатаОкончания, МоментНарушения) Экспорт

	// Определим приблизительное число документов, которые попадают в перепроведение.
	// Если используется отложенное проведение, то число документов рассчитываем по данным последовательности,
	// иначе - по данным журнала операций, т.к. при переходе с БП 2.0 в последовательности не регистрировались все документы.
	//
	// Фактически число документов может быть больше, за счет того, что
	// могут быть документы, которые не отражаются в журнале операций.
	//
	// При этом счета-фактуры полученные перепроводятся в групповой обработке
	// не самостоятельно, а при проведении подчиненного документа-основания.
	// Поэтому их исключаем из подсчета, чтобы не получалось 
	// количество документов по отчету группового перепроведения меньше, чем
	// в информационной строке формы закрытия месяца.
	
	МоментНарушенияСсылка = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Если МоментНарушения = Неопределено Тогда
		ДатаНач = ДатаНачала;
	Иначе
		ДатаНач = Макс(ДатаНачала, МоментНарушения.Дата);
		Если ЗначениеЗаполнено(МоментНарушения.Ссылка) Тогда
			МоментНарушенияСсылка = МоментНарушения.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("ДатаНач",               ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",               ДатаОкончания);
	Запрос.УстановитьПараметр("МоментНарушенияСсылка", МоментНарушенияСсылка);

	Если ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, ДатаОкончания) Тогда
		// При отложенном проведении подсчитываем только число документов в последовательности.
		// Документы, которые поддерживают отложенное проведение, не включаются в последовательность.
		Если МоментНарушения = Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ДокументыОрганизаций.Регистратор) КАК КоличествоДокументов
			|ИЗ
			|	Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
			|ГДЕ
			|	ДокументыОрганизаций.Организация = &Организация
			|	И ДокументыОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(Документы.КоличествоДокументов) КАК КоличествоДокументов
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(ДокументыОрганизаций.Регистратор) КАК КоличествоДокументов
			|	ИЗ
			|		Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
			|	ГДЕ
			|		ДокументыОрганизаций.Организация = &Организация
			|		И ДокументыОрганизаций.Период > &ДатаНач
			|		И ДокументыОрганизаций.Период <= &ДатаКон
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КОЛИЧЕСТВО(ДокументыОрганизаций.Регистратор)
			|	ИЗ
			|		Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
			|	ГДЕ
			|		ДокументыОрганизаций.Организация = &Организация
			|		И ДокументыОрганизаций.Период = &ДатаНач
			|		И ДокументыОрганизаций.Регистратор >= &МоментНарушенияСсылка) КАК Документы";
		КонецЕсли;
	Иначе
		Если МоментНарушения = Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоДокументов
			|ИЗ
			|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
			|ГДЕ
			|	ЖурналОпераций.Организация = &Организация
			|	И ЖурналОпераций.Проведен
			|	И ЖурналОпераций.Дата >= &ДатаНач
			|	И ЖурналОпераций.Дата <= &ДатаКон
			|	И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураПолученный
			|	И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураВыданный";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(Журнал.КоличествоДокументов) КАК КоличествоДокументов
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоДокументов
			|	ИЗ
			|		ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
			|	ГДЕ
			|		ЖурналОпераций.Организация = &Организация
			|		И ЖурналОпераций.Проведен
			|		И ЖурналОпераций.Дата > &ДатаНач
			|		И ЖурналОпераций.Дата <= &ДатаКон
			|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураПолученный
			|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураВыданный
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КОЛИЧЕСТВО(ЖурналОпераций.Ссылка)
			|	ИЗ
			|		ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
			|	ГДЕ
			|		ЖурналОпераций.Организация = &Организация
			|		И ЖурналОпераций.Проведен
			|		И ЖурналОпераций.Дата = &ДатаНач
			|		И ЖурналОпераций.Ссылка >= &МоментНарушенияСсылка
			|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураПолученный
			|		И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.СчетФактураВыданный) КАК Журнал";
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоДокументов = 0;

	Если Выборка.Следующий() Тогда
		КоличествоДокументов = ?(Выборка.КоличествоДокументов = NULL, 0, Выборка.КоличествоДокументов);
	КонецЕсли;

	// Округлим в меньшую сторону до "круглых" цифры, чтобы в тексте сообщения можно было написать "более".
	Если КоличествоДокументов > 100 Тогда
		КоличествоДокументов = Цел(КоличествоДокументов / 100) * 100;
	ИначеЕсли КоличествоДокументов > 10 Тогда
		КоличествоДокументов = Цел(КоличествоДокументов / 10) * 10;
	КонецЕсли;

	Возврат КоличествоДокументов;

КонецФункции

// Анализирует, есть ли в последовательности за указанный месяц записи со статусом "Перепроведение пропущено".
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой выполняется анализ.
//  Период       - Дата - начало месяца, в котором выполняется анализ.
//  МоментНарушения - МоментВремени - документы после этого момента не считаются.
//
// Возвращаемое значение:
//   Булево      - Истина, если найден хотя бы один документ со статусом "Перепроведение пропущено"; иначе Ложь.
//
Функция ЕстьДокументыСПропущеннымПерепроведением(Организация, Период, МоментНарушения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Период);
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПропущенные
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|ГДЕ
	|	ДокументыОрганизаций.Организация = &Организация
	|	И ДокументыОрганизаций.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПерепроведениеПропущено)
	|	И ДокументыОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Если МоментНарушения <> Неопределено Тогда
		
		Если ТипЗнч(МоментНарушения) = Тип("Дата") Тогда
			МоментНарушения = Новый МоментВремени(МоментНарушения + 1);
		КонецЕсли;
		Запрос.УстановитьПараметр("МоментНарушения", МоментНарушения);
		ТекстЗапроса = ТекстЗапроса + "
			|	И ДокументыОрганизаций.МоментВремени <= &МоментНарушения";
		
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	ЕстьПропущенные = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьПропущенные;
	
КонецФункции

// Анализирует, есть ли записи в регистре "УдалитьИсключенныеИзПерепроведенияМесяцы".
// Во время работы отложенного обработчика обновления РегистрыСведений.УдалитьИсключенныеИзПерепроведенияМесяцы.ПереместитьГраницуПослеИсключенных()
// в последовательности ДокументыОрганизаций имеются неактуальные данные. В это время пользователю разрешено только
// выполнение регламентных операций закрытия месяца, но не перенос границы при перепроведении.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - отбор по организации.
//
// Возвращаемое значение:
//   Булево      - Истина, если найдена хоть одна запись в регистре; иначе Ложь.
//
Функция ЕстьЗаписиВРегистреИсключенныеИзПерепроведенияМесяцы(Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ОтложенноеОбновление
	|ИЗ
	|	РегистрСведений.УдалитьИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|ГДЕ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает момент времени первого документа, который ближе всех находится
// к указанной дате (в будущее).
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется оценка
//	НачинаяСДаты - Дата+Время - дата, начиная с которой ищется документ
//	
// Возвращаемое значение:
//	Момент времени
//
Функция МоментВремениПервогоДокументаВПоследовательности(Организация, Знач НачинаяСДаты, УчитыватьОтложенноеПроведение = Истина) Экспорт

	// Находим первый документ, который лежит с указанной даты+время.
	
	НачинаяСДаты = ДатаНеРанееНачалаУчета(Организация, НачинаяСДаты);
	
	// Если не используется отложенное проведение, то 
	// при поиске учитываем не только данные из самой последовательности, но и из РБ.Хозрасчетный, 
	// т.к. в последовательность при обновлении с БП 2.0 не пишутся все имеющиеся 
	// в базе документы для сокращения времени обновления, а только фиксируется первый документ, 
	// нарушивший старые последовательности.
	// Поэтому в последовательности ДокументыОрганизаций "в прошлом" могут быть пропуски
	// в документах, которые были изначально введены в БП 2.0.
	
	// При отложенном проведении документы могут не включаться в последовательность,
	// если для них достаточно выполнить только отложенные расчеты без сдвига последовательности.
	
	Если УчитыватьОтложенноеПроведение Тогда 
		ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, НачинаяСДаты);
	Иначе
		ИспользуетсяОтложенноеПроведение = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("НачинаяСДаты", 	НачинаяСДаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор,
	|	ТаблицаПоследовательности.Период КАК Период,
	|	ИСТИНА КАК ЭтоДанныеПоследовательности
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Организация = &Организация
	|	И ТаблицаПоследовательности.Период >= &НачинаяСДаты";
	
	Если НЕ ИспользуетсяОтложенноеПроведение Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Регистратор,
		|	Хозрасчетный.Период,
		|	ЛОЖЬ КАК ЭтоДанныеПоследовательности
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация = &Организация
		|	И Хозрасчетный.Период >= &НачинаяСДаты
		|	И &УсловиеПоРегистратору
		|	И НЕ (Хозрасчетный.Регистратор ССЫЛКА Документ.СчетФактураПолученный)
		|	И НЕ (Хозрасчетный.Регистратор ССЫЛКА Документ.СчетФактураВыданный)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	Если НЕ ИспользуетсяОтложенноеПроведение Тогда
		// Составим перечень типов документов, которые являются регистраторами Хозрасчетного, 
		// но не входят в состав последовательности.
		ТипыРегистраторовХозрасчетного = Метаданные.РегистрыБухгалтерии.Хозрасчетный.СтандартныеРеквизиты.Регистратор.Тип.Типы();
		МетаданныеРегистраторовПоследовательности = Метаданные.Последовательности.ДокументыОрганизаций.Документы;
		
		ТекстИсключения = "";
		
		Для Каждого ТипРегистратора Из ТипыРегистраторовХозрасчетного Цикл
		
			МетаданныеРегистратора = Метаданные.НайтиПоТипу(ТипРегистратора);
			Если МетаданныеРегистратора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ МетаданныеРегистраторовПоследовательности.Содержит(МетаданныеРегистратора) Тогда
				Если НЕ ПустаяСтрока(ТекстИсключения) Тогда
					ТекстИсключения = ТекстИсключения + " И ";
				КонецЕсли;
				ТекстИсключения = ТекстИсключения + " НЕ Хозрасчетный.Регистратор ССЫЛКА Документ." + МетаданныеРегистратора.Имя;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстИсключения) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоРегистратору", "(" + ТекстИсключения + ")");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоРегистратору", "");
		КонецЕсли;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатков")
			И НЕ Выборка.ЭтоДанныеПоследовательности Тогда
			Результат = СоздатьМоментВремени(КонецМесяца(Выборка.Период) + 1, Выборка.Регистратор);
		Иначе
			Результат = СоздатьМоментВремени(Выборка.Период, Выборка.Регистратор);
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;

КонецФункции

// Возвращает момент времени первого документа в последовательности.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется поиск.
// Возвращаемое значение:
//  МоментВремени - Момент времени первого документа в последовательности.
//  Если в последовательности нет ни одного документа, возвращается Неопределено.
//
Функция НачалоПоследовательности(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Результат = МоментВремениПервогоДокументаВПоследовательности(Организация, Дата(1,1,1));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата КАК Дата,
		|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
		|ГДЕ
		|	РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МоментПервогоДокумента = Новый МоментВремени(Выборка.Дата, Выборка.Документ);
			
			Если Результат = Неопределено Тогда
				Результат = МоментПервогоДокумента;
			ИначеЕсли МоментПервогоДокумента.Сравнить(Результат) < 0 Тогда
				Результат = МоментПервогоДокумента;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
		
КонецФункции

// Возвращает момент времени последнего документа в последовательности.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется поиск.
// Возвращаемое значение:
//  МоментВремени - Момент времени первого документа в последовательности.
//  Если в последовательности нет ни одного документа, возвращается Неопределено.
//
Функция КонецПоследовательности(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Тип", Тип("ДокументСсылка.ВводНачальныхОстатков"));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыОрганизаций.Период КАК Период,
	|	ДокументыОрганизаций.Регистратор КАК Регистратор,
	|	ДокументыОрганизаций.МоментВремени КАК МоментВремени
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|ГДЕ
	|	ДокументыОрганизаций.Организация = &Организация
	|	И ТИПЗНАЧЕНИЯ(ДокументыОрганизаций.Регистратор) <> &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Неопределено;
		ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = СоздатьМоментВремени(Выборка.Период, Выборка.Регистратор);
		ДатаОкончания = Выборка.Период;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		// При отложенном проведении не все документы могут быть зарегистрированы в последовательности,
		// учтем еще данные регистра сведений РасчетыСКонтрагентамиОтложенноеПроведение.
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата КАК Дата,
		|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
		|ГДЕ
		|	РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ,
		|	Документ УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();	
		Если Выборка.Следующий() Тогда
			МоментОтложенныхРасчетов = Новый МоментВремени(Выборка.Дата, Выборка.Документ);
			Если Результат = Неопределено Тогда
				Результат = МоментОтложенныхРасчетов;
			Иначе
				Если МоментОтложенныхРасчетов.Сравнить(Результат) > 0 Тогда
					Результат = МоментОтложенныхРасчетов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает более ранний из двух моментов времени.
//
Функция МинМоментВремени(МоментВремени1, МоментВремени2) Экспорт

	Результат = Неопределено;

	Если МоментВремени1 <> Неопределено И МоментВремени2 <> Неопределено Тогда
		Если МоментВремени1.Сравнить(МоментВремени2) < 0 Тогда
			Результат = МоментВремени1;
		Иначе
			Результат = МоментВремени2;
		КонецЕсли;
	ИначеЕсли МоментВремени1 <> Неопределено Тогда
		Результат = МоментВремени1;
	ИначеЕсли МоментВремени2 <> Неопределено Тогда
		Результат = МоментВремени2;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает Истина, если указанный тип документов может быть зарегистрирован в последовательности.
// Используется для исключения из последовательности типов документов, которые ранее могли входить
// в состав документов последовательности, но более не используются.
// Функция проверяет только типы документов, входящих в исключения, 
// а не весь состав типов последовательности по метаданным.
//
// Параметры:
//	ТипИлиСсылка - Тип, ДокументСсылка - Тип или ссылка на проверяемый документ.
//
// Возвращаемое значение:
//	Булево - Истина, если документ может быть зарегистрирован.
//
Функция ДокументРегистрируетсяВПоследовательности(ТипИлиСсылка) Экспорт

	Если ТипЗнч(ТипИлиСсылка) = Тип("Тип") Тогда
		ТипДокумента = ТипИлиСсылка;
	Иначе
		ТипДокумента = ТипЗнч(ТипИлиСсылка);
	КонецЕсли;
	
	// Документы счета-фактуры не меняют последовательность,
	// но в составе типов оставлены, чтобы не делать реструктуризацию при обновлении ИБ.
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Формирует табличный документ со списком документов, проведенных непоследовательно. Пользователю нужно будет принять
// решение: перепроводить эти документы или пропустить.
//
// Параметры:
//  Параметры    - Структура - см. обработку ЗакрытиеМесяца.Форма.ПерепроведениеДокументов.ДекорацияПериодПерепроведенияОбработкаНавигационнойСсылки()
//
// Возвращаемое значение:
//   ТабличныйДокумент - список документов по требуемому критерию.
//
Функция СформироватьСписокДокументовИзмененныхЗаПериод(Параметры) Экспорт

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.СписокДокументов");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_об_измененнных_документах";
	ТабличныйДокумент.ТолькоПросмотр      = Истина;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Заголовок = СтрШаблон(НСтр("ru = 'Отчет о документах, измененных за %1'"),
		ПредставлениеПериода(НачалоМесяца(Параметры.ДатаНарушенияПоследовательности),
			КонецМесяца(Параметры.КонецПериодаКорректности)));
	ОбластьМакета.Параметры.Заголовок = Заголовок;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЗапросИзмененных = Новый Запрос;
	ЗапросИзмененных.Текст =
	"ВЫБРАТЬ
	|	Сводный.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сводный.Ссылка) КАК Представление,
	|	МИНИМУМ(Сводный.Дата) КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыОрганизаций.Регистратор КАК Ссылка,
	|		ДокументыОрганизаций.Период КАК Дата
	|	ИЗ
	|		Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|	ГДЕ
	|		ДокументыОрганизаций.Организация = &Организация
	|		И ДокументыОрганизаций.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности))
	|		И ДокументыОрганизаций.Период МЕЖДУ &ДатаНарушенияПоследовательности И &КонецПериодаКорректности
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСКонтрагентамиОтложенноеПроведение.Документ,
	|		РасчетыСКонтрагентамиОтложенноеПроведение.Дата
	|	ИЗ
	|		РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|	ГДЕ
	|		РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация
	|		И РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов))
	|		И РасчетыСКонтрагентамиОтложенноеПроведение.Дата МЕЖДУ &ДатаНарушенияПоследовательности И &КонецПериодаКорректности) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	ЗапросИзмененных.УстановитьПараметр("Организация",                     Параметры.Организация);
	ЗапросИзмененных.УстановитьПараметр("ДатаНарушенияПоследовательности", Параметры.ДатаНарушенияПоследовательности);
	ЗапросИзмененных.УстановитьПараметр("КонецПериодаКорректности",        Параметры.КонецПериодаКорректности);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	НомерПП = 0;
	Выборка = ЗапросИзмененных.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерПП = НомерПП + 1;
		ОбластьМакета.Параметры.НомерПП       = НомерПП;
		ОбластьМакета.Параметры.Представление = Выборка.Представление;
		ОбластьМакета.Параметры.Ссылка        = Выборка.Ссылка;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'РаботаСПоследовательностями'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция СоздатьМоментВремени(Период, Регистратор)

	Результат = Неопределено;

	// Иногда ссылки на документ в последовательности оказываются "битыми" или необрабатываемых типов. 
	// Если момент нарушения последовательности приходится на такую ссылку, то это может мешать 
	// нормальному восстановлению хронологической последовательности. 
	// Поэтому если обнаруживается такая ссылка, то момент нарушения последовательсти определяем просто по дате,
	// а саму ссылку постараемся удалить из последовательности.
	Если ЗначениеЗаполнено(Регистратор) Тогда
		Если ДокументРегистрируетсяВПоследовательности(Регистратор)
			И ОбщегоНазначения.СсылкаСуществует(Регистратор) Тогда
			Результат = Новый МоментВремени(Период, Регистратор);
		Иначе
			// Если есть права на запись, то удалим битую ссылку из последовательности.
			Если ПравоДоступа("Изменение", Метаданные.Последовательности.ДокументыОрганизаций) Тогда
				Попытка
					УдалитьДокументИзПоследовательности(Регистратор);
				Исключение
					// Из-за ошибки удаления не прервываем выполнение.
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Ошибка при удалении некорректной ссылки на документ из набора последовательности ДокументыОрганизаций.
			                  |%1'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,
						,
						Регистратор, 
						ТекстСообщения); 
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Регистратор в последовательности не задан либо его ссылка некорректная, определяем момент времени только по дате.
	Если Результат = Неопределено Тогда
		Результат = Новый МоментВремени(Период);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// При использовании отложенного проведения отменяет регистрацию
// и помечает регламентные операции закрытия месяца как неактуальные.
//
Процедура ЗарегистрироватьУстареваниеРегламентныхОпераций(Объект, Отказ)
	
	УстаревшаяРегламентнаяОперация = Неопределено;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	ЕстьТаблицаТовары = ЕстьТаблицаТовары(Объект);
	
	// Документы, которые всегда сбрасывают последовательность, в эту процедуру не передаются.
	// Далее обрабатываются только документы, которые сбрасывают актуальность регл.операции по каким-либо условиям.
	// При проведении большинства документов, содержащих ТЧ Товары, устаревает регламентная операция
	// "Корректировка стоимости номенклатуры".
	// Особая логика требуется только для отдельных типов документов.
	Если ТипОбъекта = Тип("ДокументОбъект.АвансовыйОтчет") Тогда

		// Авансовым отчетом могут быть отражены разнообразные проводки,
		// приводящие к неактуальности разных регламентных операций закрытия месяца.
		ЗарегистрироватьУстареваниеРегламентныхОперацийПриПоступленииЗатрат(Объект, , "Прочее");
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг") Тогда
		УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26;
	
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену") Тогда
		
		Если Не ЕстьТаблицаТовары И Объект.Услуги.Количество() > 0 Тогда
			// Если была выполнена рег.операция "Закрытие счетов 20, 23, 25, 26", то нужно пометить её как устаревшую.
			УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		
		Если ТипОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства Тогда
			// Если была выполнена рег.операция "Амортизация ОС", то нужно пометить её как устаревшую.
			УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС;
			
		Иначе
		
			// Поступлением услуг могут быть отражены разнообразные проводки,
			// приводящие к неактуальности разных регламентных операций закрытия месяца.
			ЗарегистрироватьУстареваниеРегламентныхОперацийПриПоступленииЗатрат(Объект);
		КонецЕсли;

	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПоступлениеИзПереработки") Тогда
		УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26;
		
	// При отмене документа реализации необходимо сбросить "Закрытие 90, 91"
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.КорректировкаРеализации")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ОтчетОРозничныхПродажах")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.НачислениеПеней")
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.ОказаниеУслуг") Тогда
		
		УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91;

	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РеализацияУслугПоПереработке") Тогда
	
		Если Объект.МатериалыЗаказчика.Количество() = 0 И Объект.Услуги.Количество() > 0 Тогда
			// Если была выполнена рег.операция "Закрытие счетов 20, 23, 25, 26", то нужно пометить её как устаревшую.
			УстаревшаяРегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26;
		КонецЕсли;
	
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РеализацияОтгруженныхТоваров") Тогда
		
		// Реализация отгруженных товаров на основании "Передачи ОС" всегда регистрируется в последовательности.
		// Здесь проверяем только случай отгрузки товаров.
		ЕстьТаблицаТовары = ЗначениеЗаполнено(Объект.ДокументОтгрузки)
				И ТипЗнч(Объект.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
			
	КонецЕсли;
	
	Если ЕстьТаблицаТовары Тогда
		УстаревшаяРегламентнаяОперация = МинРегламентнаяОперация(
			УстаревшаяРегламентнаяОперация, Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УстаревшаяРегламентнаяОперация) Тогда
		ЗарегистрироватьУстареваниеОперации(Объект, УстаревшаяРегламентнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если у переданного документа есть ТЧ, связанная с МПЗ.
//
Функция ЕстьТаблицаТовары(Объект)

	Результат = Ложь;
	ТипДокумента = ТипЗнч(Объект);
	Если ТипДокумента = Тип("ДокументОбъект.ПередачаМатериаловВЭксплуатацию") Тогда
		
		Результат = Истина;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВводНачальныхОстатков") Тогда
		
		Результат = (Объект.НоменклатураНаСкладе.Количество() > 0
			Или Объект.МПЗОтгруженные.Количество() > 0
			Или Объект.МатериалыПереданныеВПереработку.Количество() > 0);
			
	Иначе
		
		// Проверяем табличные части, связанные с движением ТМЦ.
		ПроверяемыеТаблицы = Новый Массив;
		ПроверяемыеТаблицы.Добавить("Товары");
		ПроверяемыеТаблицы.Добавить("ВозвратнаяТара");
		ПроверяемыеТаблицы.Добавить("Продукция");
		ПроверяемыеТаблицы.Добавить("Оборудование");
		ПроверяемыеТаблицы.Добавить("Материалы");
		ПроверяемыеТаблицы.Добавить("ИспользованныеМатериалы");
		ПроверяемыеТаблицы.Добавить("ВозвращенныеМатериалы");
		ПроверяемыеТаблицы.Добавить("ВозвратныеОтходы");
		ПроверяемыеТаблицы.Добавить("ДанныеПоПартиям");
		ПроверяемыеТаблицы.Добавить("Комплектующие");
		// Остальные табличные части с объектами учёта, не влияющими на себестоимость ТМЦ, игнорируем.
		// Например, ОбъектыСтроительства, МатериалыЗаказчика, ТоварыНаКомиссии, ДенежныеДокументы, ПодарочныеСертификаты.
		
		ТаблицыДокумента = Объект.Метаданные().ТабличныеЧасти;
		Для каждого ПроверяемаяТаблица Из ПроверяемыеТаблицы Цикл
		
			Если ТаблицыДокумента.Найти(ПроверяемаяТаблица) <> Неопределено
				И Объект[ПроверяемаяТаблица].Количество() > 0 Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает более раннюю по порядку выполнения регламентную операцию закрытия месяца.
//
Функция МинРегламентнаяОперация(ВидОперации1, ВидОперации2)

	Если НЕ ЗначениеЗаполнено(ВидОперации1) Тогда
		Возврат ВидОперации2;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации2) Тогда
		Возврат ВидОперации1;
	КонецЕсли;
	
	Индекс1 = Перечисления.ВидыРегламентныхОпераций.Индекс(ВидОперации1);
	Индекс2 = Перечисления.ВидыРегламентныхОпераций.Индекс(ВидОперации2);
	
	Если Индекс1 < Индекс2 Тогда
		Возврат ВидОперации1;
	Иначе
		Возврат ВидОперации2;
	КонецЕсли;

КонецФункции

// У документа "Установка цен номенклатуры" нет организации в шапке, 
// поэтому для него регистрируем в последовательности по всем организациям с учетной политикой
// "Розница в продажных ценах".
//
Процедура ЗарегистрироватьВПоследовательностиУстановкаЦенНоменклатуры(Источник, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", Источник.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаАктуальности, ) КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = Источник.ПринадлежностьПоследовательностям.ДокументыОрганизаций;
	НаборЗаписей.Очистить();
	
	СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
	Если Источник.Проведен Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ПроведенВХронологическойПоследовательности")
		   И Источник.ДополнительныеСвойства.ПроведенВХронологическойПоследовательности Тогда
			СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности;
		Иначе
			СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
	
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период      = НачалоДня(Источник.Дата); // Цены номенклатуры регистрируются с точностью до дня
		Движение.Регистратор = Источник.Ссылка;
		
		// Измерения
		Движение.Организация = Выборка.Организация;
		Движение.СостояниеПроведения = СостояниеПроведения;
	
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ПодготовитьПараметрыОтложенныеРасчетыВПоследовательности(ТаблицаОтложенныеРасчетыСКонтрагентами, ТаблицаТовары)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ОтложенныеРасчетыСКонтрагентами

	СписокОбязательныхКолонок = ""
	+ "ВалютаВзаиморасчетов," // <СправочникСсылка.Валюты> - валюта документа
	+ "ВидДоговора"           // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> - вид договора с контрагентом
	;

	Параметры.Вставить("ОтложенныеРасчетыСКонтрагентами", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОтложенныеРасчетыСКонтрагентами, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Товары

	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"      // <ПланСчетовСсылка.Хозрасчетный> - счет учета материальных ценностей
	+ "КорСчетСписания" // <ПланСчетовСсылка.Хозрасчетный> - кор.счет списания материальных ценностей
	;

	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция СчетОтноситсяКГруппеСчетов(ПроверяемыйСчет, ИмяГруппыСчетов, КешСчетов)

	СчетаИзКеша = КешСчетов[ИмяГруппыСчетов];
	Если СчетаИзКеша = Неопределено Тогда
	
		Если ИмяГруппыСчетов = "РасходыБудущихПериодов" Тогда
			// 76.01.2, 76.01.9, 97
			СчетаИзКеша = БухгалтерскийУчет.СчетаУчетаРасходовБудущихПериодов();
			
		ИначеЕсли ИмяГруппыСчетов = "АрендныеОбязательства" Тогда
			// 76.07, 76.27, 76.37
			СчетаИзКеша = УчетОС.СчетаУчетаАрендныхОбязательств();
			
		КонецЕсли;
	
		КешСчетов.Вставить(ИмяГруппыСчетов, СчетаИзКеша);
		
	КонецЕсли;
	
	Возврат СчетаИзКеша <> Неопределено И СчетаИзКеша.Найти(ПроверяемыйСчет) <> Неопределено;

КонецФункции

// Возвращает либо исходную переданную дату либо дату начала ведения учета по организации в программе,
// в зависимости от того, какая из них позже по времени.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой проверяется дата.
//	ИсходнаяДата - Дата - Исходная проверяемая дата.
//
// Параметры:
//	Дата - Наибольшая из исходной даты и даты начала ведения учета.
//
Функция ДатаНеРанееНачалаУчета(Организация, ИсходнаяДата = '00010101')

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ИсходнаяДата;
	КонецЕсли;

	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		Возврат ИсходнаяДата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитика.Период КАК Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетнаяПолитика.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Период КАК Период
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиСистемыНалогообложения.Период";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	ДатаНачалаВеденияУчета = '0001-01-01';
	
	Для каждого РезультатЗапроса Из РезультатыЗапросов Цикл
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачалаВеденияУчета = Макс(ДатаНачалаВеденияУчета, Выборка.Период);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макс(ИсходнаяДата, ДатаНачалаВеденияУчета);

КонецФункции

#Область ОбновлениеИнформационнойБазы

// Заменяет существующие последовательности "Общая последовательность"
// и "Взаиморасчеты" на последовательность "Документы организаций".
//
Процедура ЗаменитьСтарыеПоследовательностиНаДокументыОрганизаций() Экспорт

	// Гарантированно очищаем последовательность перед записью актуальных данных.
	ОчиститьПоследовательностьДокументыОрганизаций();

	ПараметрыПерехода = ОбновлениеСПредыдущейРедакции.ПараметрыПереходаСРедакции20();

	ЭтоПереходСРедакции20 = ПараметрыПерехода.ВыполнитьЗаполнениеПоследовательностей;

	// Если ранее учитывались последовательности, то находим их границы 
	БылКонтрольПоследовательности = Константы.УдалитьКонтролироватьПоследовательностьПроведения.Получить();
	Если БылКонтрольПоследовательности Тогда
		ЗаменитьСтарыеПоследовательностиРанееИспользовалсяКонтроль();
	Иначе
		ЗаменитьСтарыеПоследовательностиРанееНеИспользовалсяКонтроль();
	КонецЕсли;

	Если ЭтоПереходСРедакции20 Тогда
		// Снимем признак необходимости обновления последовательностей 2.0
		ПараметрыПерехода.ВыполнитьЗаполнениеПоследовательностей = Ложь;
		ОбновлениеСПредыдущейРедакции.УстановитьПараметрыПереходаСРедакции20(ПараметрыПерехода);
	КонецЕсли;

КонецПроцедуры

// Заменяет существующие последовательности "Общая последовательность"
// и "Взаиморасчеты" на последовательность "Документы организаций" для 
// случая, если ранее в базе использовался контроль последовательности проведения.
//
Процедура ЗаменитьСтарыеПоследовательностиРанееИспользовалсяКонтроль()

	ТекстЗапроса = ТекстЗапросаГраницыПоследовательностей20();
	
	Запрос = Новый Запрос;

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
	
		ДатаНачалаПерепроведения = Неопределено;
		Регистратор = Неопределено;
	
		Если Выборка.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
			ДатаНачалаПерепроведения = Выборка.ПериодОбщаяПоследовательность;
			Регистратор = Выборка.РегистраторОбщаяПоследовательность;
		Иначе
			ДатаНачалаПерепроведения = Выборка.ПериодВзаиморасчеты;
			Регистратор = Выборка.РегистраторВзаиморасчеты;
		КонецЕсли;

		Если ДатаНачалаПерепроведения = NULL Тогда
			// За границей нет других документов по организации, т.е. граница находится в самом конце
			// последовательности, поэтому автоматически сбрасывать новую последовательность не требуется.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПерепроведения) Тогда
			ДатаНачалаПерепроведения = НачалоМесяца(Выборка.Период);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Регистратор) Тогда
			// В старых последовательностях и их границах иногда встречаются 
			// ссылки на несуществующие документы, такие учитывать не будем.
			Если НЕ ОбщегоНазначения.СсылкаСуществует(Регистратор) Тогда
				Регистратор = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
		
			МоментПервогоДокументаЗаМесяц = МоментВремениПервогоДокументаВПоследовательности(
				Выборка.Организация, ДатаНачалаПерепроведения);
			
			Если МоментПервогоДокументаЗаМесяц <> Неопределено Тогда
				Регистратор = МоментПервогоДокументаЗаМесяц.Ссылка;
				ДатаНачалаПерепроведения = МоментПервогоДокументаЗаМесяц.Дата;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Регистратор) Тогда
			ОтметитьНарушениеПоследовательности(ДатаНачалаПерепроведения, Регистратор, Выборка.Организация);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Заменяет существующие последовательности "Общая последовательность"
// и "Взаиморасчеты" на последовательность "Документы организаций" для 
// случая, если ранее в базе использовался не контроль последовательности проведения.
//
Процедура ЗаменитьСтарыеПоследовательностиРанееНеИспользовалсяКонтроль()

	// Последовательности "Общая последовательность" или "Взаиморасчеты" не велись в базе,
	// поэтому в качестве первого документа, с которого необходимо перепроводить,
	// возьмем начало последнего месяца из регистра Хозрасчетный.

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Организация,
	|	МАКСИМУМ(Хозрасчетный.Период) КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|";
	
	Запрос = Новый Запрос;

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
	
		ДатаНачалаПерепроведения = Неопределено;
		Регистратор = Неопределено;
	
		ДатаНачалаПерепроведения = НачалоМесяца(Выборка.Период);
		
		МоментПервогоДокументаЗаМесяц = МоментВремениПервогоДокументаВПоследовательности(
			Выборка.Организация, ДатаНачалаПерепроведения);
		
		Если МоментПервогоДокументаЗаМесяц <> Неопределено Тогда
			Регистратор = МоментПервогоДокументаЗаМесяц.Ссылка;
			ДатаНачалаПерепроведения = МоментПервогоДокументаЗаМесяц.Дата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Регистратор) Тогда
			ОтметитьНарушениеПоследовательности(ДатаНачалаПерепроведения, Регистратор, Выборка.Организация);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтметитьНарушениеПоследовательности(Период, Регистратор, Организация)

	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор, Истина);
	
	Попытка
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ПометкаУдаления");
	
		Движение = НаборЗаписей.Добавить();
		
		Движение.Период 		= Период;
		Движение.Регистратор 	= Регистратор;
		Движение.Организация 	= Организация;
		Если ПометкаУдаления Тогда
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
		Иначе
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	Исключение
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Ошибка при записи набора последовательности ДокументыОрганизаций.
                  |%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Регистратор, 
			ТекстСообщения); 
			
	КонецПопытки;

КонецПроцедуры

Функция ТекстЗапросаГраницыПоследовательностей20()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Организация,
	|	УчетнаяПолитика.СпособОценкиМПЗ
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаГоловныхОрганизаций
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(, ) КАК УчетнаяПолитика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяПолитика.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрОрганизации.Ссылка КАК Организация,
	|	ЕСТЬNULL(УПГоловной.СпособОценкиМПЗ, УПСобственная.СпособОценкиМПЗ) КАК СпособОценкиМПЗ
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаГоловныхОрганизаций КАК УПГоловной
	|		ПО СпрОрганизации.ГоловнаяОрганизация = УПГоловной.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаГоловныхОрганизаций КАК УПСобственная
	|		ПО СпрОрганизации.Ссылка = УПСобственная.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьВзаиморасчеты20.Период КАК Период,
	|	УдалитьВзаиморасчеты20.Регистратор КАК Регистратор,
	|	УдалитьВзаиморасчеты20.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_УдалитьВзаиморасчеты20Границы
	|ИЗ
	|	Последовательность.УдалитьВзаиморасчеты20.Границы КАК УдалитьВзаиморасчеты20Границы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.УдалитьВзаиморасчеты20 КАК УдалитьВзаиморасчеты20
	|		ПО УдалитьВзаиморасчеты20Границы.Организация = УдалитьВзаиморасчеты20.Организация
	|			И УдалитьВзаиморасчеты20.МоментВремени > УдалитьВзаиморасчеты20Границы.МоментВремени
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьОбщаяПоследовательность20Границы.Период КАК Период,
	|	УдалитьОбщаяПоследовательность20Границы.Регистратор КАК Регистратор,
	|	УдалитьОбщаяПоследовательность20Границы.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_УдалитьОбщаяПоследовательность20Границы
	|ИЗ
	|	Последовательность.УдалитьОбщаяПоследовательность20.Границы КАК УдалитьОбщаяПоследовательность20Границы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.УдалитьОбщаяПоследовательность20 КАК УдалитьОбщаяПоследовательность20
	|		ПО УдалитьОбщаяПоследовательность20Границы.Организация = УдалитьОбщаяПоследовательность20.Организация
	|			И УдалитьОбщаяПоследовательность20.МоментВремени > УдалитьОбщаяПоследовательность20Границы.МоментВремени
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Организация,
	|	МАКСИМУМ(Хозрасчетный.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыПроводок
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Хозрасчетный.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеДатыПроводок.Организация,
	|	ВТ_ПоследниеДатыПроводок.Период,
	|	ВТ_УчетнаяПолитика.СпособОценкиМПЗ,
	|	УдалитьВзаиморасчеты20.Период КАК ПериодВзаиморасчеты,
	|	УдалитьВзаиморасчеты20.Регистратор КАК РегистраторВзаиморасчеты,
	|	УдалитьОбщаяПоследовательность.Период КАК ПериодОбщаяПоследовательность,
	|	УдалитьОбщаяПоследовательность.Регистратор КАК РегистраторОбщаяПоследовательность
	|ИЗ
	|	ВТ_ПоследниеДатыПроводок КАК ВТ_ПоследниеДатыПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = ВТ_УчетнаяПолитика.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УдалитьВзаиморасчеты20Границы КАК УдалитьВзаиморасчеты20
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = УдалитьВзаиморасчеты20.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УдалитьОбщаяПоследовательность20Границы КАК УдалитьОбщаяПоследовательность
	|		ПО ВТ_ПоследниеДатыПроводок.Организация = УдалитьОбщаяПоследовательность.Организация";

	Возврат ТекстЗапроса;

КонецФункции

Процедура ОчиститьПоследовательностьДокументыОрганизаций()

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистратор
	|ИЗ
	|	Последовательность.ДокументыОрганизаций
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Записать();
	
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьПоследовательностьВзаиморасчеты20Отложенно(Параметры) Экспорт

	ОчиститьПоследовательностьОтложенно("УдалитьВзаиморасчеты20", Параметры);

КонецПроцедуры

Процедура ОчиститьОбщуюПоследовательность20Отложенно(Параметры) Экспорт

	ОчиститьПоследовательностьОтложенно("УдалитьОбщаяПоследовательность20", Параметры);

КонецПроцедуры

Процедура ОчиститьПоследовательностьОтложенно(ИмяПоследовательности, Параметры)

	Запрос = Новый Запрос;
	
	// Старые последовательности 2.0 и 3.0 очищаем полностью, чтобы не занимать 
	// под них место в базе. Т.к. эти последовательности в новом релизе после
	// выполнения монопольной процедуры обновления не используются совсем, 
	// то порядок обработки неважен. Отбираем порцию по 1000 записей по регистратору. 
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор
	|ИЗ
	|	Последовательность." + ИмяПоследовательности + " КАК ТаблицаПоследовательности
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";

	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	НаборЗаписей = Последовательности[ИмяПоследовательности].СоздатьНаборЗаписей();

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Попытка
		
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Если ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
				// В старых последовательностях могут присутствовать сбойные записи с пустыми регистратором,
				// их игнорируем при обработке.
				НаборЗаписей.Записать();
		
				ОбъектовОбработано = ОбъектовОбработано + 1;
			КонецЕсли;
			
		Исключение

			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось очистить последовательность ""%1"" по причине:
					|%3'"), 
					ИмяПоследовательности,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				, 
				Выборка.Регистратор, 
				ТекстСообщения);
			
			ВызватьИсключение;

		КонецПопытки;	
	
	КонецЦикла;

	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре РаботаСПоследовательностями.ОчиститьПоследовательностьОтложенно
					|не удалось очистить в последовательности ""%1"" %2 документов.'"), 
					ИмяПоследовательности,
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура РаботаСПоследовательностями.ОчиститьПоследовательностьОтложенно
						|обработала очередную порцию записей в последовательности ""%1"": %2 документов'"), 
						ИмяПоследовательности,
						ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СброситьГраницыПоследовательностьВзаиморасчеты20Отложенно(Параметры) Экспорт

	СброситьГраницыПоследовательностиОтложенно("УдалитьВзаиморасчеты20", "Организация", Параметры);

КонецПроцедуры

Процедура СброситьГраницыПоследовательностьОбщаяПоследовательность20Отложенно(Параметры) Экспорт

	СброситьГраницыПоследовательностиОтложенно("УдалитьОбщаяПоследовательность20", "Организация", Параметры);

КонецПроцедуры

Процедура СброситьГраницыПоследовательностиОтложенно(ИмяПоследовательности, ИмяИзмерения, Параметры)

	Запрос = Новый Запрос;
	
	// Границы старых последовательностей 2.0 и 3.0 сбрасываем на пустую дату.
	// Т.к. эти последовательности в новом релизе после
	// выполнения монопольной процедуры обновления не используются совсем, 
	// то порядок обработки неважен. 
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаГраницыПоследовательности." + ИмяИзмерения + " КАК ЗначениеИзмерения
	|ИЗ
	|	Последовательность." + ИмяПоследовательности + ".Границы КАК ТаблицаГраницыПоследовательности
	|ГДЕ
	|	ТаблицаГраницыПоследовательности.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеИзмерения";

	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	ПоследовательностьМенеджер = Последовательности[ИмяПоследовательности];

	Выборка = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура(ИмяИзмерения);
	
	Пока Выборка.Следующий() Цикл

		Попытка
		
			Отбор[ИмяИзмерения] = Выборка.ЗначениеИзмерения;
		
			ПоследовательностьМенеджер.УстановитьГраницу('0001-01-01', Отбор);
		
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение

			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось очистить границы последовательность ""%1"" по причине:
					|%3'"), 
					ИмяПоследовательности,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				, 
				Выборка.ЗначениеИзмерения, 
				ТекстСообщения);
			
			ВызватьИсключение;

		КонецПопытки;	
	
	КонецЦикла;

	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре РаботаСПоследовательностями.ОчиститьГраницыПоследовательностиОтложенно
					|не удалось очистить в последовательности ""%1"" %2 документов.'"), 
					ИмяПоследовательности,
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура РаботаСПоследовательностями.ОчиститьГраницыПоследовательностиОтложенно
						|обработала очередную порцию записей в последовательности ""%1"": %2 документов'"), 
						ИмяПоследовательности,
						ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
