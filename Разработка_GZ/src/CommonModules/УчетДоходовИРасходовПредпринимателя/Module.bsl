////////////////////////////////////////////////////////////////////////////////
// Подсистема "Индивидуальный предприниматель"
////////////////////////////////////////////////////////////////////////////////

#Область ПоступлениеМПЗ

Функция ПодготовитьТаблицуПоступленияМПЗ(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПоступленияМПЗ(ТаблицаМПЗ, ТаблицаРеквизитов);
		
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	
	СтруктураПараметров = Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Если Реквизиты.ТипПоступления = "ПоступлениеИзПереработки" Тогда
			ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
		Иначе
			ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ.СчетУчета, МПЗ.СтатьяЗатрат, МПЗ.ВидРасходовНУ, МПЗ.ПринятиеКналоговомуУчету);
		КонецЕсли;
		
		Если Реквизиты.ТипПоступления = "ПоступлениеДопРасходов" Тогда
			Если ВидМПЗ <> Перечисления.ВидыМПЗ.ОС И ВидМПЗ <> Перечисления.ВидыМПЗ.НМА И ВидМПЗ <> Перечисления.ВидыМПЗ.КапитальныеВложения Тогда
				ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидМПЗ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
		СтруктураПараметров.ВидМПЗ = ВидМПЗ;
		
		МПЗ.ВидМПЗ               = ВидМПЗ;
		МПЗ.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		МПЗ.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		МПЗ.СтатьяЗатрат         = ПолучитьСтатьюЗатрат(СтруктураПараметров);
		
		Если Реквизиты.УчетАгентскогоНДС Тогда
			МПЗ.Сумма = МПЗ.Сумма - МПЗ.НДС;
			МПЗ.НДС   = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыПоступленияМПЗ(ТаблицаМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок	= ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"		// <СправочникСсылка.Организации> - организация
		+ "ВидОперации,"		// <ПеречислениеСсылка.*> - вид операции
		+ "УчетАгентскогоНДС,"	// <Булево> - Налоговый агент
		+ "ТипПоступления";		// <Строка> - "ПоступлениеТоваровУслуг", "ПоступлениеДопРасходов", "КорректировкаПоступления" - тип поступления
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок	= ""
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура,"							// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"									// <ДокументСсылка.*> - документ оприходования
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Сумма,"									// <Число,15,2> - сумма в рублях с НДС
		+ "НДС,"									// <Число,15,2> - сумма НДС в рублях
		+ "Количество";								// <Число,15,3> - количество
	
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаОстатковОСНМА = Неопределено, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	Если Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
	   И УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период) =
			Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;	
	
	Параметры = ПодготовитьПараметрыПоступлениеМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаОстатковОСНМА, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ОстаткиОСНМА.Количество() > 0 Тогда
		ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(Параметры.ОстаткиОСНМА, "НомерСтроки");
		Параметры.ОстаткиОСНМА.Индексы.Добавить("НомерСтроки");
		Параметры.ОстаткиОСНМА.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	КонецЕсли;
	
	Параметры.Реквизиты.Колонки.Добавить("ЭтоДокументОплаты", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(ЭтоДокументОплаты(Реквизиты.Регистратор), "ЭтоДокументОплаты");
	
	ВыполнитьДвиженияПоступление(Параметры.ТаблицаТоваров, Параметры.Взаиморасчеты, Параметры.ОстаткиОСНМА, Реквизиты, Движения, Отказ);
	ВыполнитьДвиженияПоступление(Параметры.ТаблицаУслуг, Параметры.Взаиморасчеты, Параметры.ОстаткиОСНМА, Реквизиты, Движения, Отказ);
	ВыполнитьДвиженияПоступление(Параметры.ТаблицаОборудования, Параметры.Взаиморасчеты, Параметры.ОстаткиОСНМА, Реквизиты, Движения, Отказ);
	ВыполнитьДвиженияПоступление(Параметры.ТаблицаПрочее, Параметры.Взаиморасчеты, Параметры.ОстаткиОСНМА, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаОстатковОСНМА, ТаблицаРеквизитов)
	Перем ТаблицаТоваров, ТаблицаУслуг, ТаблицаОборудования, ТаблицаПрочее;
	
	СтруктураТаблицМПЗ.Свойство("ТаблицаТоваров",		ТаблицаТоваров);
	СтруктураТаблицМПЗ.Свойство("ТаблицаУслуг",			ТаблицаУслуг);
	СтруктураТаблицМПЗ.Свойство("ТаблицаОборудования",	ТаблицаОборудования);
	СтруктураТаблицМПЗ.Свойство("ТаблицаПрочее",		ТаблицаПрочее);
	
	Параметры	= Новый Структура;
	
	// Подготовка таблиц Параметры.ТаблицаТоваров, Параметры.ТаблицаУслуг, Параметры.ТаблицаОборудования
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"						// <ДокументСсылка.*> -документ оприходования
		+ "СтатьяЗатрат,"				// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "Сумма,"						// <Число,15,2> - сумма в рублях с НДС
		+ "НДС,"						// <Число,15,2> - сумма НДС в рублях
		+ "Количество";					// <Число,15,3> - количество
		
	Параметры.Вставить("ТаблицаТоваров", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоваров, СписокОбязательныхКолонок));
		
	Параметры.Вставить("ТаблицаУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуг, СписокОбязательныхКолонок));
		
	Параметры.Вставить("ТаблицаОборудования", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОборудования, СписокОбязательныхКолонок));
		
	Параметры.Вставить("ТаблицаПрочее", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПрочее, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Взаиморасчеты
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"			// <ДокументСсылка.*> - документ оплаты
		+ "СуммаРуб";					// <Число,15,2> - сумма оплаты в рублях с НДС
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ОстаткиОСНМА
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"						// <ДокументСсылка.*> - документ оприходования
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "ДатаДокументаОплаты,"		// <Дата> - дата документа оплаты
		+ "КоличествоОстаток,"			// <Число,15,3>
		+ "СуммаСНДСОстаток";			// <Число,15,2>
		
	Параметры.Вставить("ОстаткиОСНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОстатковОСНМА, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"				// <СправочникСсылка.Организации>
		+ "ТипПоступления,"				// <Строка> - "ПоступлениеТоваровУслуг", "ПоступлениеДопРасходов" - тип поступления
		+ "ТипСклада,"					// <ПеречислениеСсылка.ТипыСкладов> - тип склада
		+ "НДСВключенВСтоимость";		// <Булево>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура ВыполнитьДвиженияПоступление(ТаблицаМПЗ, ТаблицаВзаиморасчетов, ТаблицаОстатковОСНМА, Реквизиты, Движения, Отказ)
	
	Для каждого МПЗ из ТаблицаМПЗ Цикл
		
		Если НЕ ЗначениеЗаполнено(МПЗ.ВидМПЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МПЗ.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизиты.ТипПоступления = "ПоступлениеДопРасходов" Тогда
			МПЗ.Количество = 0;
		КонецЕсли;
		
		Если МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
			
			ВыполнитьДвиженияПоступлениеИМР(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
			
		ИначеЕсли МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
			
			ВыполнитьДвиженияПоступлениеПрочиеРасходы(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
			
		ИначеЕсли МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ОС
				ИЛИ МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.НМА
				ИЛИ МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.КапитальныеВложения Тогда
			
			ВыполнитьДвиженияПоступлениеОСНМА(МПЗ, ТаблицаВзаиморасчетов, ТаблицаОстатковОСНМА, Реквизиты, Движения, Отказ);
			
		ИначеЕсли МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.РБП Тогда
			
			ВыполнитьДвиженияПоступлениеРБП(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
			
		Иначе
			
			ВыполнитьДвиженияПоступлениеМПЗ(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоступлениеМПЗ(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ)
	
	Для Каждого ДокументОплаты Из ТаблицаВзаиморасчетов Цикл
		
		Если ДокументОплаты.СуммаРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Реквизиты.ЭтоДокументОплаты И ДокументОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаЗачета = Мин(МПЗ.Сумма, ДокументОплаты.СуммаРуб);
		
		Если МПЗ.Сумма = СуммаЗачета Тогда
			КоличествоЗачета = МПЗ.Количество;
		Иначе
			КоличествоЗачета = Окр(МПЗ.Количество * СуммаЗачета / МПЗ.Сумма, 3);
		КонецЕсли;
		
		ДокументОплаты.СуммаРуб = ДокументОплаты.СуммаРуб - СуммаЗачета;
		
		Движения.ИПМПЗ.Записывать = Истина;
		
		Движение = Движения.ИПМПЗ.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.Организация          = Реквизиты.Организация;
		Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
		Движение.ДокументОплаты       = ДокументОплаты.ДокументРасчетов;
		
		Движение.Номенклатура = МПЗ.Номенклатура;
		Движение.Партия       = Реквизиты.Регистратор;
		Движение.ВидМПЗ       = МПЗ.ВидМПЗ;
		
		Если МПЗ.Сумма = СуммаЗачета Тогда
			Движение.Количество = МПЗ.Количество;
			Движение.Сумма      = МПЗ.Сумма - МПЗ.НДС;
			Движение.НДС        = МПЗ.НДС;
		Иначе
			Движение.Количество = КоличествоЗачета;
			Движение.НДС        = МПЗ.НДС * СуммаЗачета / МПЗ.Сумма;
			Движение.Сумма      = СуммаЗачета - Движение.НДС;
		КонецЕсли;
		
		МПЗ.Количество = МПЗ.Количество - Движение.Количество;
		МПЗ.НДС        = МПЗ.НДС - Движение.НДС;
		МПЗ.Сумма      = МПЗ.Сумма - СуммаЗачета;
		
		Если МПЗ.Сумма = 0 Тогда
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.ИПМПЗ.Записывать = Истина;
	
	Движение = Движения.ИПМПЗ.Добавить();
	Движение.Период               = Реквизиты.Период;
	Движение.Организация          = Реквизиты.Организация;
	Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
	Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
	
	Движение.Номенклатура = МПЗ.Номенклатура;
	Движение.Партия       = Реквизиты.Регистратор;
	Движение.ВидМПЗ       = МПЗ.ВидМПЗ;
	
	Движение.Количество = МПЗ.Количество;
	Движение.Сумма      = МПЗ.Сумма - МПЗ.НДС;
	Движение.НДС        = МПЗ.НДС;

КонецПроцедуры

Процедура ВыполнитьДвиженияПоступлениеИМР(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ)
	
	Для Каждого ДокументОплаты Из ТаблицаВзаиморасчетов Цикл
		
		Если ДокументОплаты.СуммаРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Реквизиты.ЭтоДокументОплаты И ДокументОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаЗачета = Мин(МПЗ.Сумма, ДокументОплаты.СуммаРуб);
		
		Если МПЗ.Сумма = СуммаЗачета Тогда
			КоличествоЗачета = МПЗ.Количество;
		Иначе
			КоличествоЗачета = Окр(МПЗ.Количество * СуммаЗачета / МПЗ.Сумма, 3);
		КонецЕсли;
		
		ДокументОплаты.СуммаРуб = ДокументОплаты.СуммаРуб - СуммаЗачета;
		
		Движения.ИПИныеМатериальныеРасходы.Записывать = Истина;
		
		Движение = Движения.ИПИныеМатериальныеРасходы.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.Организация          = Реквизиты.Организация;
		Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
		Движение.ДокументОплаты       = ДокументОплаты.ДокументРасчетов;
		
		Движение.СтатьяЗатрат = МПЗ.СтатьяЗатрат;
		Движение.Партия       = Реквизиты.Регистратор;
		
		Если Реквизиты.ТипПоступления = "ПоступлениеДопРасходов" Тогда
			Движение.МПЗ       = МПЗ.Номенклатура;
			Движение.ПартияМПЗ = МПЗ.Партия;
		КонецЕсли;
		
		Если МПЗ.Сумма = СуммаЗачета Тогда
			Движение.Количество = МПЗ.Количество;
			Движение.НДС        = МПЗ.НДС;
			Движение.Сумма      = МПЗ.Сумма - МПЗ.НДС;
		Иначе
			Движение.Количество = КоличествоЗачета;
			Движение.НДС        = МПЗ.НДС * СуммаЗачета / МПЗ.Сумма;
			Движение.Сумма      = СуммаЗачета - Движение.НДС;
		КонецЕсли;
		
		МПЗ.Количество = МПЗ.Количество - Движение.Количество;
		МПЗ.НДС        = МПЗ.НДС - Движение.НДС;
		МПЗ.Сумма      = МПЗ.Сумма - СуммаЗачета;
		
		Если МПЗ.Сумма = 0 Тогда
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.ИПИныеМатериальныеРасходы.Записывать = Истина;
	
	Движение = Движения.ИПИныеМатериальныеРасходы.Добавить();
	Движение.Период               = Реквизиты.Период;
	Движение.Организация          = Реквизиты.Организация;
	Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
	Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
	
	Движение.СтатьяЗатрат = МПЗ.СтатьяЗатрат;
	Движение.Партия       = Реквизиты.Регистратор;
	
	Если Реквизиты.ТипПоступления = "ПоступлениеДопРасходов" Тогда
		Движение.МПЗ       = МПЗ.Номенклатура;
		Движение.ПартияМПЗ = МПЗ.Партия;
	КонецЕсли;
	
	Движение.Количество = МПЗ.Количество;
	Движение.Сумма      = МПЗ.Сумма - МПЗ.НДС;
	Движение.НДС        = МПЗ.НДС;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоступлениеПрочиеРасходы(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ)
	
	Если НЕ ЗначениеЗаполнено(МПЗ.СтатьяЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДокументОплаты Из ТаблицаВзаиморасчетов Цикл
		
		Если ДокументОплаты.СуммаРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Реквизиты.ЭтоДокументОплаты И ДокументОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаЗачета = Мин(МПЗ.Сумма, ДокументОплаты.СуммаРуб);
		
		ДокументОплаты.СуммаРуб = ДокументОплаты.СуммаРуб - СуммаЗачета;
		
		Движения.ИППрочиеРасходы.Записывать = Истина;
		
		Движение = Движения.ИППрочиеРасходы.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.Организация          = Реквизиты.Организация;
		Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
		Движение.ДокументОплаты       = ДокументОплаты.ДокументРасчетов;
		
		Движение.СтатьяЗатрат      = МПЗ.СтатьяЗатрат;
		Движение.РасчетныйДокумент = Реквизиты.Регистратор;
		
		Если МПЗ.Сумма = СуммаЗачета Тогда
			Движение.НДС   = МПЗ.НДС;
			Движение.Сумма = МПЗ.Сумма - МПЗ.НДС;
		Иначе
			Движение.НДС   = МПЗ.НДС * СуммаЗачета / МПЗ.Сумма;
			Движение.Сумма = СуммаЗачета - Движение.НДС;
		КонецЕсли;
		
		МПЗ.Количество = МПЗ.Количество - (МПЗ.Количество * СуммаЗачета / МПЗ.Сумма);
		МПЗ.НДС        = МПЗ.НДС - Движение.НДС;
		МПЗ.Сумма      = МПЗ.Сумма - СуммаЗачета;
		
		Если МПЗ.Сумма = 0 Тогда
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.ИППрочиеРасходы.Записывать = Истина;
	
	Движение = Движения.ИППрочиеРасходы.Добавить();
	Движение.Период               = Реквизиты.Период;
	Движение.Организация          = Реквизиты.Организация;
	Движение.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
	Движение.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
	
	Движение.СтатьяЗатрат      = МПЗ.СтатьяЗатрат;
	Движение.РасчетныйДокумент = Реквизиты.Регистратор;
	Движение.Сумма             = МПЗ.Сумма - МПЗ.НДС;
	Движение.НДС               = МПЗ.НДС;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоступлениеОСНМА(МПЗ, ТаблицаВзаиморасчетов, ТаблицаОстатковОСНМА, Реквизиты, Движения, Отказ)
	
	Если Реквизиты.ТипПоступления = "ПоступлениеДопРасходов" Тогда
		МПЗ.Количество = ВыполнитьСторноКоличестваИсходнойПартииОСНМА(
			МПЗ, ТаблицаОстатковОСНМА, МПЗ.Сумма, Реквизиты, Движения, Отказ);
	Иначе
		МПЗ.Партия = Реквизиты.Регистратор;
	КонецЕсли;
	
	// Зачет авансов поставщику
	Для Каждого ДокументОплаты Из ТаблицаВзаиморасчетов Цикл
		
		Если ДокументОплаты.СуммаРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Реквизиты.ЭтоДокументОплаты И ДокументОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
			Продолжить;
		КонецЕсли;
		
		ОплаченнаяСумма = Мин(МПЗ.Сумма, ДокументОплаты.СуммаРуб);
		
		Если МПЗ.Сумма = ОплаченнаяСумма Тогда
			ОплаченноеКоличество = МПЗ.Количество;
			ОплаченныйНДС        = МПЗ.НДС;
		Иначе
			КоэффициентОплаты = ОплаченнаяСумма / МПЗ.Сумма;
			ОплаченноеКоличество = МПЗ.Количество * КоэффициентОплаты;
			ОплаченныйНДС        = ОплаченнаяСумма - Окр((МПЗ.Сумма - МПЗ.НДС) * КоэффициентОплаты, 2, 1);
		КонецЕсли;
		
		Движения.ИПМПЗ.Записывать = Истина;
		
		Движение = Движения.ИПМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.ДокументОплаты = ДокументОплаты.ДокументРасчетов;
		
		Движение.Количество = ОплаченноеКоличество;
		Если Реквизиты.НДСВключенВСтоимость Тогда
			Движение.Сумма = ОплаченнаяСумма;
			Движение.НДС   = 0;
		Иначе
			Движение.Сумма = ОплаченнаяСумма - ОплаченныйНДС;
			Движение.НДС   = ОплаченныйНДС;
		КонецЕсли;
		
		МПЗ.Количество = МПЗ.Количество - ОплаченноеКоличество;
		МПЗ.Сумма      = МПЗ.Сумма - ОплаченнаяСумма;
		МПЗ.НДС        = МПЗ.НДС - ОплаченныйНДС;
		
		ДокументОплаты.СуммаРуб = ДокументОплаты.СуммаРуб - ОплаченнаяСумма;
		
		Если МПЗ.Сумма = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Поступление неоплаченных МПЗ
	Если МПЗ.Сумма = 0 И МПЗ.Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ИПМПЗ.Записывать = Истина;
	
	Движение = Движения.ИПМПЗ.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, МПЗ);
	ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	
	Движение.Количество = МПЗ.Количество;
	Если Реквизиты.НДСВключенВСтоимость Тогда
		Движение.Сумма = МПЗ.Сумма;
		Движение.НДС   = 0;
	Иначе
		Движение.Сумма = МПЗ.Сумма - МПЗ.НДС;
		Движение.НДС   = МПЗ.НДС;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет частичное сторнирование количества исходной партии ОС или НМА
// при поступлении дополнительных расходов на указанную сумму
//
// Параметры:
//  МПЗ - СтрокаТаблицыЗначений - строка списка МПЗ
//  ТаблицаОстатковОСНМА - ТаблицыЗначений - таблица остатков партий МПЗ
//  СуммаДопРасходов - Число,15,2 - сумма дополнительных расходов в рублях с НДС
//  Реквизиты
//  Движения
//  Отказ
// 
// Возвращаемое значение:
//  Число - количество ОС или НМА, соответствующее сумме дополнительных расходов
//
Функция ВыполнитьСторноКоличестваИсходнойПартииОСНМА(МПЗ, ТаблицаОстатковОСНМА, СуммаДопРасходов, Реквизиты, Движения, Отказ)
	
	КоличествоДопРасхода = 0;
	Если СуммаДопРасходов = 0 ИЛИ Реквизиты.ТипПоступления <> "ПоступлениеДопРасходов" Тогда
		Возврат КоличествоДопРасхода;
	КонецЕсли;
	
	ОтборОСНМА = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	ЗаполнитьЗначенияСвойств(ОтборОСНМА, МПЗ);
	
	НайденныеСтроки = ТаблицаОстатковОСНМА.Скопировать(ОтборОСНМА);
	НайденныеСтроки.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
	
	КоличествоОстаток = НайденныеСтроки.Итог("КоличествоОстаток");
	СуммаСНДСОстаток  = НайденныеСтроки.Итог("СуммаСНДСОстаток");
	
	Если СуммаСНДСОстаток <> 0 Тогда
		КоличествоДопРасхода = КоличествоОстаток * Мин(СуммаДопРасходов/СуммаСНДСОстаток, 1);
	КонецЕсли;
	
	РаспределенноеКоличество = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
		КоличествоДопРасхода, НайденныеСтроки.ВыгрузитьКолонку("СуммаСНДСОстаток"), 3);
	
	Если РаспределенноеКоличество <> Неопределено Тогда
		
		Для Индекс = 0 По РаспределенноеКоличество.ВГраница() Цикл
			
			Количество = РаспределенноеКоличество[Индекс];
			Если Количество = 0 Или НайденныеСтроки[Индекс].КоличествоОстаток <= Количество Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПартии = НайденныеСтроки[Индекс];
			
			Движения.ИПМПЗ.Записывать = Истина;
			
			Движение = Движения.ИПМПЗ.Добавить();
			
			ЗаполнитьЗначенияСвойств(Движение, СтрокаПартии);
			
			Движение.Период      = Реквизиты.Период;
			Движение.Организация = Реквизиты.Организация;
			
			Движение.Сумма      = 0;
			Движение.НДС        = 0;
			Движение.Количество = - Количество;
			
			СтрокаПартии.КоличествоОстаток = СтрокаПартии.КоличествоОстаток - Количество;
			ЗаполнитьЗначенияСвойств(ТаблицаОстатковОСНМА.Найти(СтрокаПартии.НомерСтроки, "НомерСтроки"), СтрокаПартии);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат КоличествоДопРасхода;
	
КонецФункции

Процедура ВыполнитьДвиженияПоступлениеРБП(МПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ)
	
	Если НЕ ЗначениеЗаполнено(МПЗ.СтатьяЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДокументОплаты Из ТаблицаВзаиморасчетов Цикл
		
		Если ДокументОплаты.СуммаРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Реквизиты.ЭтоДокументОплаты И ДокументОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаЗачета	= Мин(МПЗ.Сумма, ДокументОплаты.СуммаРуб);
		
		ДокументОплаты.СуммаРуб	= ДокументОплаты.СуммаРуб - СуммаЗачета;
		
		Движения.ИПРБП.Записывать = Истина;
		
		Движение	= Движения.ИПРБП.Добавить();
		Движение.Период					= Реквизиты.Период;
		Движение.Организация			= Реквизиты.Организация;
		Движение.ХарактерДеятельности	= МПЗ.ХарактерДеятельности;
		Движение.НоменклатурнаяГруппа	= МПЗ.НоменклатурнаяГруппа;
		Движение.ДокументОплаты			= ДокументОплаты.ДокументРасчетов;
		
		Движение.ВидРасхода	= МПЗ.СтатьяЗатрат;
		Движение.Партия		= Реквизиты.Регистратор;
		
		Если МПЗ.Сумма = СуммаЗачета Тогда
			Движение.Сумма	= МПЗ.Сумма - МПЗ.НДС;
			Движение.НДС	= МПЗ.НДС;
		Иначе
			Движение.НДС	= МПЗ.НДС * СуммаЗачета / МПЗ.Сумма;
			Движение.Сумма	= СуммаЗачета - Движение.НДС;
		КонецЕсли;
		
		МПЗ.Количество	= МПЗ.Количество - (МПЗ.Количество * СуммаЗачета / МПЗ.Сумма);
		МПЗ.НДС			= МПЗ.НДС - Движение.НДС;
		МПЗ.Сумма		= МПЗ.Сумма - СуммаЗачета;
		
		Если МПЗ.Сумма = 0 Тогда
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.ИПРБП.Записывать = Истина;
	
	Движение	= Движения.ИПРБП.Добавить();
	Движение.Период					= Реквизиты.Период;
	Движение.Организация			= Реквизиты.Организация;
	Движение.ХарактерДеятельности	= МПЗ.ХарактерДеятельности;
	Движение.НоменклатурнаяГруппа	= МПЗ.НоменклатурнаяГруппа;
	
	Движение.ВидРасхода	= МПЗ.СтатьяЗатрат;
	Движение.Партия		= Реквизиты.Регистратор;

	Движение.Сумма	= МПЗ.Сумма - МПЗ.НДС;
	Движение.НДС	= МПЗ.НДС;
	
КонецПроцедуры

// Возвращает остатки ОС и НМА для сорнирования количества при поступлении доп. расходов
// Перед считыванием остатков устанавливается исключительная блокировка
//
Функция ПодготовитьТаблицуОстатковОСНМА(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов)  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыОстатковОСНМА(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	СписокВидовМПЗ = Новый Массив;
	СписокВидовМПЗ.Добавить(Перечисления.ВидыМПЗ.ОС);
	СписокВидовМПЗ.Добавить(Перечисления.ВидыМПЗ.НМА);
	СписокВидовМПЗ.Добавить(Перечисления.ВидыМПЗ.КапитальныеВложения);
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("Партия",       "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",             Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",     СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "Номенклатура", Истина));
	Запрос.УстановитьПараметр("СписокПартий",       ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "Партия", Истина));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.ВидМПЗ,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ИПМПЗОстатки.КоличествоОстаток,
	|	ИПМПЗОстатки.СуммаОстаток,
	|	ИПМПЗОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТИПМПЗОстатки
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Партия В (&СписокПартий)) КАК ИПМПЗОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.ВидМПЗ,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ИПМПЗОстатки.КоличествоОстаток,
	|	ИПМПЗОстатки.СуммаОстаток + ИПМПЗОстатки.НДСОстаток КАК СуммаСНДСОстаток
	|ИЗ
	|	ВТИПМПЗОстатки КАК ИПМПЗОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПМПЗОстатки.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОстатковОСНМА = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатковОСНМА;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыОстатковОСНМА(ТаблицаМПЗ, ТаблицаРеквизитов)
 	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок	= ""
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия";					// <ДокументСсылка.*> - документ оприходования
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок	= ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьТаблицуПоступленияУслугПереработки(ТаблицаУслуг, ТаблицаРеквизитов) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаУслуг)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПоступленияУслугПереработки(ТаблицаУслуг, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокУслуг	= Параметры.СписокУслуг;
	СписокУслуг.Колонки.Добавить("ВидПоступившегоМПЗ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета");
	
	Для каждого Услуга из СписокУслуг Цикл
		
		Если Услуга.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидМПЗ	= ВидМПЗПоСчетуУчета(Услуга.СчетУчетаПродукции);
		
		СтруктураПараметров.НоменклатурнаяГруппа	= Услуга.НоменклатурнаяГруппа;
		СтруктураПараметров.ВидМПЗ					= ВидМПЗ;
		СтруктураПараметров.СчетУчета				= Услуга.СчетУчетаПродукции;
		
		Услуга.ВидПоступившегоМПЗ	= ВидМПЗ;
		Услуга.НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		Услуга.ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат СписокУслуг;

КонецФункции

Функция ПодготовитьПараметрыТаблицыПоступленияУслугПереработки(ТаблицаУслуг, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СписокУслуг
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Продукция,"				// <СправочникСсылка.*> - продукция
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "СчетУчетаПродукции";		// <ПланСчетовСсылка.Хозрасчетный> - счет учета продукции
	
		
	Параметры.Вставить("СписокУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуг, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияПоступлениеУслугПереработки(ТаблицаУслуг, ТаблицаИМР, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаУслуг)
		И Не ЗначениеЗаполнено(ТаблицаИМР)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеУслугПереработки(ТаблицаУслуг, ТаблицаИМР, ТаблицаРеквизитов);	
	Реквизиты = Параметры.Реквизиты[0];
		
	СписокУслуг = Параметры.СписокУслуг;
	СписокИМР   = Параметры.СписокИМР;
	
	Если СписокУслуг.Количество() > 0 Тогда
		Движения.ИПМПЗ.Записывать        = Истина;
		Движения.ИПМПЗОбороты.Записывать = Истина;
	КонецЕсли;
	
	Для каждого Услуга из СписокУслуг Цикл
		
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, Услуга);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение = Движения.ИПМПЗ.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Услуга);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение = Движения.ИПМПЗОбороты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Услуга);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.ВидСписанногоМПЗ            = Услуга.ВидМПЗ;
		Движение.НоменклатураСписанная       = Услуга.Номенклатура;
		Движение.ПартияСписаннойНоменклатуры = Реквизиты.Регистратор;
		
		Движение.ВидПоступившегоМПЗ            = Услуга.ВидПоступившегоМПЗ;
		Движение.НоменклатураПоступившая       = Услуга.Продукция;
		Движение.ПартияПоступившейНоменклатуры = Реквизиты.Регистратор;
		
	КонецЦикла;
	
	Если СписокИМР.Количество() > 0 Тогда
		Движения.ИПИныеМатериальныеРасходы.Записывать = Истина;
	КонецЕсли;
	
	Для каждого ИМР из СписокИМР Цикл
		Движение = Движения.ИПИныеМатериальныеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ИМР);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеУслугПереработки(ТаблицаУслуг, ТаблицаИМР, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокУслуг
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - списанная номенклатура
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "ВидПоступившегоМПЗ,"		// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ продукции
		+ "Продукция,"				// <СправочникСсылка.*> - продукция
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС";					// <Число,15,2> - сумма НДС в рублях
		
	Параметры.Вставить("СписокУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуг, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокИМР
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "СтатьяЗатрат,"			// <СправочникСсылка.*> - статья затрат
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления номенклатуры (партия) 
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "МПЗ,"					// <СправочникСсылка.*>
		+ "ПартияМПЗ,"				// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС";					// <Число,15,2> - сумма НДС в рублях
		
	Параметры.Вставить("СписокИМР", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаИМР, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область КорректировкаПоступленияМПЗ

Функция ПодготовитьТаблицыКорректировкиПоступленияМПЗ(ТаблицаТоваров, ТаблицаУслуг, ТаблицаРеквизитов, Отказ) Экспорт
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаМПЗ");				// Таблица корректировки регистра ИПМПЗ
	СтруктураТаблиц.Вставить("ТаблицаИМР");				// Таблица корректировки регистра ИПИныеМатериальныеРасходы
	СтруктураТаблиц.Вставить("ТаблицаПрочиеРасходы");	// Таблица корректировки регистра ИППрочиеРасходы
	СтруктураТаблиц.Вставить("ТаблицаРБП");				// Таблица корректировки регистра ИПРБП
	СтруктураТаблиц.Вставить("ТаблицаМПЗОтгруженные");	// Таблица корректировки регистра ИПМПЗОтгруженные
	СтруктураТаблиц.Вставить("ТаблицаДоходы");			// Таблица корректировки регистра ИПДоходы
	
	Если Не ЗначениеЗаполнено(ТаблицаУслуг)
		И Не ЗначениеЗаполнено(ТаблицаТоваров)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыКорректировкиПоступленияМПЗ(ТаблицаТоваров, ТаблицаУслуг, ТаблицаРеквизитов);
	Реквизиты     = Параметры.Реквизиты[0];
	СписокТоваров = Параметры.СписокТоваров;
	СписокУслуг   = Параметры.СписокУслуг;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		// Все исправления выполняются в одном налоговом периоде
		Реквизиты.Период = Мин(КонецГода(Реквизиты.ПартияДата), Реквизиты.Период);
	КонецЕсли;
	
	СписокТоваров.Колонки.Добавить("ВидМПЗ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокУслуг.Колонки.Добавить("ВидМПЗ",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	
	Для каждого МПЗ Из СписокТоваров Цикл
		МПЗ.ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ.СчетУчета, МПЗ.СтатьяЗатрат, МПЗ.ВидРасходовНУ, МПЗ.ПринятиеКналоговомуУчету);
	КонецЦикла;
	
	Для каждого МПЗ Из СписокУслуг Цикл
		МПЗ.ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ.СчетУчета, МПЗ.СтатьяЗатрат, МПЗ.ВидРасходовНУ, МПЗ.ПринятиеКналоговомуУчету);
	КонецЦикла;
	
	// Таблица изменений МПЗ отгруженных
	СписокМПЗОтгруженные = Новый ТаблицаЗначений;
	СписокМПЗОтгруженные.Колонки.Добавить("ИмяСписка",            ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокМПЗОтгруженные.Колонки.Добавить("НомерСтроки",          ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	СписокМПЗОтгруженные.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗОтгруженные.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗОтгруженные.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗОтгруженные.Колонки.Добавить("Номенклатура",         Справочники.ТипВсеСсылки());
	СписокМПЗОтгруженные.Колонки.Добавить("ДокументОплаты",       Документы.ТипВсеСсылки());
	СписокМПЗОтгруженные.Колонки.Добавить("ИзменениеКоличества",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СписокМПЗОтгруженные.Колонки.Добавить("ИзменениеСуммы",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗОтгруженные.Колонки.Добавить("ИзменениеНДС",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Таблица изменений МПЗ отгруженных и оплаченных
	СписокМПЗОплаченные = Новый ТаблицаЗначений;
	СписокМПЗОплаченные.Колонки.Добавить("ИмяСписка",            ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокМПЗОплаченные.Колонки.Добавить("НомерСтроки",          ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	СписокМПЗОплаченные.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗОплаченные.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗОплаченные.Колонки.Добавить("Номенклатура",         Справочники.ТипВсеСсылки());
	СписокМПЗОплаченные.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗОплаченные.Колонки.Добавить("ДокументОтгрузки",     Документы.ТипВсеСсылки());
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеКоличества",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеСуммы",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеНДС",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СписокУслуг.Индексы.Добавить("ВидМПЗ");
	ОтборИМР           = Новый Структура("ВидМПЗ", Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы);
	ОтборПрочиеРасходы = Новый Структура("ВидМПЗ", Перечисления.ВидыМПЗ.ПрочиеРасходы);
	ОтборРБП           = Новый Структура("ВидМПЗ", Перечисления.ВидыМПЗ.РБП);
	
	ТаблицаМПЗ = ПодготовитьТаблицуКорретировкиПоступленияМПЗ(СписокТоваров, СписокМПЗОтгруженные, Реквизиты);
	
	ТаблицаОбороты = ПодготовитьТаблицуКорретировкиПоступленияОбороты(СписокМПЗОтгруженные.Скопировать(), Реквизиты);
	Если ТаблицаОбороты <> Неопределено И ТаблицаОбороты.Количество() > 0 Тогда
		
		Для Каждого ОборотМПЗ Из ТаблицаОбороты Цикл
			
			СообщениеОбОшибке = 
				НСтр("ru = 'Невозможно скорректировать стоимость списанных на расходы материалов'");
			Поле = ОборотМПЗ.ИмяСписка + "[" + Формат(ОборотМПЗ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Номенклатура";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Реквизиты.Регистратор, Поле, "Объект", Отказ);
			
		КонецЦикла;
		
		Возврат СтруктураТаблиц;
		
	КонецЕсли;
	
	ТаблицаМПЗОтгруженные = ПодготовитьТаблицуКорретировкиПоступленияМПЗОтгруженные(СписокМПЗОтгруженные, СписокМПЗОплаченные, Реквизиты);
	ТаблицаДоходы         = ПодготовитьТаблицуКорретировкиПоступленияДоходов(СписокМПЗОплаченные, Реквизиты);
	
	ТаблицаИМР           = ПодготовитьТаблицуКорретировкиПоступленияИМР(СписокУслуг.Скопировать(ОтборИМР), Реквизиты);
	ТаблицаПрочиеРасходы = ПодготовитьТаблицуКорретировкиПоступленияПрочихРасходов(СписокУслуг.Скопировать(ОтборПрочиеРасходы), Реквизиты);
	ТаблицаРБП           = ПодготовитьТаблицуКорретировкиПоступленияРБП(СписокУслуг.Скопировать(ОтборРБП), Реквизиты);
	
	СтруктураТаблиц.ТаблицаМПЗ            = ТаблицаМПЗ;
	СтруктураТаблиц.ТаблицаИМР            = ТаблицаИМР;
	СтруктураТаблиц.ТаблицаПрочиеРасходы  = ТаблицаПрочиеРасходы;
	СтруктураТаблиц.ТаблицаРБП            = ТаблицаРБП;
	СтруктураТаблиц.ТаблицаМПЗОтгруженные = ТаблицаМПЗОтгруженные;
	СтруктураТаблиц.ТаблицаДоходы         = ТаблицаДоходы;
	
	Возврат СтруктураТаблиц;

КонецФункции

Функция ПодготовитьПараметрыТаблицыКорректировкиПоступленияМПЗ(ТаблицаТоваров, ТаблицаУслуг, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокТоваров
	
	СписокОбязательныхКолонок	= ""
		+ "ИмяСписка,"								// <Строка> - имя списка регистратора
		+ "НомерСтроки,"							// <Число> - номер строки списка
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура,"							// <СправочникСсылка.*> - номенклатура МПЗ
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Количество,"								// <Число,15,3> - изменение количества
		+ "Сумма,"									// <Число,15,2> - изменение суммы в рублях без НДС
		+ "НДС";									// <Число,15,2> - изменение НДС в рублях
		
	Параметры.Вставить("СписокТоваров", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоваров, СписокОбязательныхКолонок));
	
	Параметры.Вставить("СписокУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуг, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок	= ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"	// <СправочникСсылка.Организации> - организация
		+ "ВидОперации,"	// <ПеречислениеСсылка.*> - вид операции
		+ "Партия,"			// <ДокументСсылка.*> - первоначальный документ поступления (партия)
		+ "ПартияДата";		// <Дата> - дата первоначального документа поступления (партии)
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиПоступленияМПЗ(СписокМПЗ, СписокМПЗОтгруженные, Реквизиты)
	
	Если СписокМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("ВидМПЗ",       "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(Реквизиты.ПартияДата, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Партия",      Реквизиты.Партия);
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();	
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ПартияДата, Реквизиты.Партия), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	СписокВидовМПЗ     = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "ВидМПЗ", Истина);
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "Номенклатура", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       КонецПериода);
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",     СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Партия",             Реквизиты.Партия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидМПЗ,
	|	ИПМПЗОбороты.Номенклатура,
	|	ИПМПЗОбороты.Партия,
	|	ИПМПЗОбороты.ДокументОплаты,
	|	ИПМПЗОбороты.КоличествоПриход,
	|	ИПМПЗОбороты.КоличествоРасход,
	|	ИПМПЗОбороты.СуммаПриход,
	|	ИПМПЗОбороты.СуммаРасход,
	|	ИПМПЗОбороты.НДСПриход,
	|	ИПМПЗОбороты.НДСРасход
	|ПОМЕСТИТЬ ВТИПМПЗОбороты
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Партия = &Партия) КАК ИПМПЗОбороты
	|ГДЕ
	|	ИПМПЗОбороты.СуммаПриход + ИПМПЗОбороты.НДСПриход <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОбороты.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидМПЗ,
	|	ИПМПЗОбороты.Номенклатура,
	|	ИПМПЗОбороты.Партия,
	|	ИПМПЗОбороты.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПМПЗОбороты.СуммаПриход + ИПМПЗОбороты.НДСПриход КАК СуммаСНДСПриход,
	|	ИПМПЗОбороты.СуммаРасход + ИПМПЗОбороты.НДСРасход КАК СуммаСНДСРасход,
	|	ИПМПЗОбороты.КоличествоПриход,
	|	ИПМПЗОбороты.КоличествоРасход,
	|	ИПМПЗОбороты.СуммаПриход,
	|	ИПМПЗОбороты.СуммаРасход,
	|	ИПМПЗОбороты.НДСПриход,
	|	ИПМПЗОбороты.НДСРасход
	|ИЗ
	|	ВТИПМПЗОбороты КАК ИПМПЗОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПМПЗОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаМПЗ = ПолучитьТаблицуКорретировкиПоступления(Неопределено, ТаблицаОборотов, СписокМПЗ, СписокМПЗОтгруженные, Реквизиты);
	
	Возврат ТаблицаМПЗ;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиПоступленияИМР(СписокМПЗ, Реквизиты)
	
	Если СписокМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокСтатейЗатрат = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "СтатьяЗатрат", Истина);
	
	// Установка управляемой блокировки
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("СтатьяЗатрат",
		Метаданные.РегистрыНакопления.ИПИныеМатериальныеРасходы.Измерения.СтатьяЗатрат.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокСтатейЗатрат, "СтатьяЗатрат");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПИныеМатериальныеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(Реквизиты.ПартияДата, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Партия",      Реквизиты.Партия);
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатьяЗатрат", "СтатьяЗатрат");
	Блокировка.Заблокировать();
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ПартияДата, Реквизиты.Партия), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       КонецПериода);
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСтатейЗатрат", СписокСтатейЗатрат);
	Запрос.УстановитьПараметр("Партия",             Реквизиты.Партия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОбороты.Партия,
	|	ИПИныеМатериальныеРасходыОбороты.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОбороты.МПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.КоличествоПриход,
	|	ИПИныеМатериальныеРасходыОбороты.КоличествоРасход,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаПриход,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаРасход,
	|	ИПИныеМатериальныеРасходыОбороты.НДСПриход,
	|	ИПИныеМатериальныеРасходыОбороты.НДСРасход
	|ПОМЕСТИТЬ ВТИПИныеМатериальныеРасходыОбороты
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СтатьяЗатрат В (&СписокСтатейЗатрат)
	|				И Партия = &Партия) КАК ИПИныеМатериальныеРасходыОбороты
	|ГДЕ
	|	ИПИныеМатериальныеРасходыОбороты.СуммаПриход + ИПИныеМатериальныеРасходыОбороты.НДСПриход <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОбороты.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОбороты.Партия,
	|	ИПИныеМатериальныеРасходыОбороты.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПИныеМатериальныеРасходыОбороты.МПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаПриход + ИПИныеМатериальныеРасходыОбороты.НДСПриход КАК СуммаСНДСПриход,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаРасход + ИПИныеМатериальныеРасходыОбороты.НДСРасход КАК СуммаСНДСРасход,
	|	ИПИныеМатериальныеРасходыОбороты.КоличествоПриход,
	|	ИПИныеМатериальныеРасходыОбороты.КоличествоРасход,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаПриход,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаРасход,
	|	ИПИныеМатериальныеРасходыОбороты.НДСПриход,
	|	ИПИныеМатериальныеРасходыОбороты.НДСРасход
	|ИЗ
	|	ВТИПИныеМатериальныеРасходыОбороты КАК ИПИныеМатериальныеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПИныеМатериальныеРасходыОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаМПЗ = ПолучитьТаблицуКорретировкиПоступления(Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы, ТаблицаОборотов, СписокМПЗ, Неопределено, Реквизиты);
	
	Возврат ТаблицаМПЗ;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиПоступленияРБП(СписокМПЗ, Реквизиты)
	
	Если СписокМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокМПЗ.Колонки.СтатьяЗатрат.Имя = "ВидРасхода";
	СписокМПЗ.ЗаполнитьЗначения(0, "Количество");	// Количественный учет РБП не ведется
	
	ТаблицаМПЗ = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПРБП");
	ТаблицаМПЗ.Колонки.Удалить("Организация");
	ТаблицаМПЗ.Колонки.Добавить("Списание", Новый ОписаниеТипов("Булево"));
	
	СписокВидовРасхода = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "ВидРасхода", Истина);
	
	// Установка управляемой блокировки
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("ВидРасхода",
		Метаданные.РегистрыНакопления.ИПРБП.Измерения.ВидРасхода.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокВидовРасхода, "ВидРасхода");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПРБП");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(Реквизиты.ПартияДата, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Партия",      Реквизиты.Партия);
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидРасхода", "ВидРасхода");
	Блокировка.Заблокировать();
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ПартияДата, Реквизиты.Партия), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       КонецПериода);
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовРасхода", СписокВидовРасхода);
	Запрос.УстановитьПараметр("Партия",             Реквизиты.Партия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПРБПОбороты.НоменклатурнаяГруппа,
	|	ИПРБПОбороты.ХарактерДеятельности,
	|	ИПРБПОбороты.ВидРасхода,
	|	ИПРБПОбороты.Партия,
	|	ИПРБПОбороты.ДокументОплаты,
	|	ИПРБПОбороты.СуммаПриход,
	|	ИПРБПОбороты.СуммаРасход,
	|	ИПРБПОбороты.НДСПриход,
	|	ИПРБПОбороты.НДСРасход
	|ПОМЕСТИТЬ ВТИПРБПОбороты
	|ИЗ
	|	РегистрНакопления.ИПРБП.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ВидРасхода В (&СписокВидовРасхода)
	|				И Партия = &Партия) КАК ИПРБПОбороты
	|ГДЕ
	|	ИПРБПОбороты.СуммаПриход + ИПРБПОбороты.НДСПриход <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПРБПОбороты.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПРБПОбороты.НоменклатурнаяГруппа,
	|	ИПРБПОбороты.ХарактерДеятельности,
	|	ИПРБПОбороты.ВидРасхода,
	|	ИПРБПОбороты.Партия,
	|	ИПРБПОбороты.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПРБПОбороты.СуммаПриход + ИПРБПОбороты.НДСПриход КАК СуммаСНДСПриход,
	|	0 КАК СуммаСНДСРасход,
	|	0 КАК КоличествоПриход,
	|	0 КАК КоличествоРасход,
	|	ИПРБПОбороты.СуммаПриход,
	|	0 КАК СуммаРасход,
	|	ИПРБПОбороты.НДСПриход,
	|	0 КАК НДСРасход
	|ИЗ
	|	ВТИПРБПОбороты КАК ИПРБПОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПРБПОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаМПЗ = ПолучитьТаблицуКорретировкиПоступления(Перечисления.ВидыМПЗ.РБП, ТаблицаОборотов, СписокМПЗ, Неопределено, Реквизиты);
	
	Возврат ТаблицаМПЗ;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиПоступленияПрочихРасходов(СписокМПЗ, Реквизиты)
	
	Если СписокМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокСтатейЗатрат = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "СтатьяЗатрат", Истина);
	
	// Установка управляемой блокировки
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("СтатьяЗатрат",
		Метаданные.РегистрыНакопления.ИППрочиеРасходы.Измерения.СтатьяЗатрат.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокСтатейЗатрат, "СтатьяЗатрат");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИППрочиеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация",       Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",            Новый Диапазон(Реквизиты.ПартияДата, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("РасчетныйДокумент", Реквизиты.Партия);
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатьяЗатрат", "СтатьяЗатрат");
	Блокировка.Заблокировать();
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ПартияДата, Реквизиты.Партия), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       КонецПериода);
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСтатейЗатрат", СписокСтатейЗатрат);
	Запрос.УстановитьПараметр("РасчетныйДокумент",  Реквизиты.Партия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ИППрочиеРасходыОбороты.СуммаОборот,
	|	ИППрочиеРасходыОбороты.НДСОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОбороты
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СтатьяЗатрат В (&СписокСтатейЗатрат)
	|				И РасчетныйДокумент = &РасчетныйДокумент) КАК ИППрочиеРасходыОбороты
	|ГДЕ
	|	ИППрочиеРасходыОбороты.СуммаОборот + ИППрочиеРасходыОбороты.НДСОборот <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИППрочиеРасходыОбороты.СуммаОборот + ИППрочиеРасходыОбороты.НДСОборот КАК СуммаСНДСОборот,
	|	ИППрочиеРасходыОбороты.СуммаОборот,
	|	ИППрочиеРасходыОбороты.НДСОборот
	|ИЗ
	|	ВТИППрочиеРасходыОбороты КАК ИППрочиеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИППрочиеРасходыОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаМПЗ = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы");
	ТаблицаМПЗ.Колонки.Удалить("Организация");
	
	ТаблицаОборотов.Индексы.Добавить("СтатьяЗатрат");
	Отбор = Новый Структура("СтатьяЗатрат");
	
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СтруктураПараметров = Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		ИзменениеСуммы = МПЗ.Сумма;
		ИзменениеНДС   = МПЗ.НДС;
		
		// Корректировка стоимости
		Если ИзменениеСуммы + ИзменениеНДС > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
			
			ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, МПЗ);
			ПоступлениеМПЗ.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			ПоступлениеМПЗ.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			ПоступлениеМПЗ.РасчетныйДокумент    = Реквизиты.Партия;
			ПоступлениеМПЗ.Сумма                = ИзменениеСуммы;
			ПоступлениеМПЗ.НДС                  = ИзменениеНДС;
			
			НовыйОборот = ТаблицаОборотов.Добавить();
			НовыйОборот.НомерСтроки = ТаблицаОборотов.Количество();
			ЗаполнитьЗначенияСвойств(НовыйОборот, ПоступлениеМПЗ);
			НовыйОборот.СуммаОборот     = ИзменениеСуммы;
			НовыйОборот.НДСОборот       = ИзменениеНДС;
			НовыйОборот.СуммаСНДСОборот = ИзменениеСуммы + ИзменениеНДС;
			
		ИначеЕсли ИзменениеСуммы + ИзменениеНДС < 0 Тогда
			
			// Уменьшаем в первую очередь неоплаченные расходы
			ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
			ОборотыМПЗ = ТаблицаОборотов.Скопировать(Отбор);
			ОборотыМПЗ.Сортировать("ДатаДокументаОплаты Убыв, ДокументОплаты Убыв, ХарактерДеятельности Убыв, НоменклатурнаяГруппа Убыв",
				Новый СравнениеЗначений);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.СуммаСНДСОборот = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаСНДВСтроке = Мин(-(ИзменениеСуммы + ИзменениеНДС), Оборот.СуммаСНДСОборот);
				Если СуммаСНДВСтроке = Оборот.СуммаСНДСОборот Тогда
					СуммаВСтроке = Оборот.СуммаОборот;
					НДСВСтроке   = Оборот.НДСОборот;
				Иначе
					СуммаВСтроке = Окр(Оборот.СуммаОборот * СуммаСНДВСтроке/Оборот.СуммаСНДСОборот, 2, 1);
					НДСВСтроке   = СуммаСНДВСтроке - СуммаВСтроке;
				КонецЕсли;
				
				ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
				ПоступлениеМПЗ.Сумма = -СуммаВСтроке;
				ПоступлениеМПЗ.НДС   = -НДСВСтроке;
				
				Оборот.СуммаОборот     = Оборот.СуммаОборот - СуммаВСтроке;
				Оборот.НДСОборот       = Оборот.НДСОборот - НДСВСтроке;
				Оборот.СуммаСНДСОборот = Оборот.СуммаСНДСОборот - СуммаВСтроке - НДСВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
				ИзменениеСуммы = ИзменениеСуммы + СуммаВСтроке;
				ИзменениеНДС   = ИзменениеНДС + НДСВСтроке;
				
				Если  ИзменениеСуммы + ИзменениеНДС = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМПЗ;
	
КонецФункции

Функция ПолучитьТаблицуКорретировкиПоступления(ВидМПЗ, ТаблицаОборотов, СписокМПЗ, СписокМПЗОтгруженные, Реквизиты)
	
	Если СписокМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Для зачета оплаты сначала корректируем в сторону уменьшения стоимости, затем увеличения
	СписокМПЗ.Колонки.Добавить("ЭтоУвеличениеСтоимости", Новый ОписаниеТипов("Булево"));
	Для Каждого МПЗ Из СписокМПЗ Цикл
		МПЗ.ЭтоУвеличениеСтоимости = (МПЗ.Сумма + МПЗ.НДС) > 0
	КонецЦикла;
	СписокМПЗ.Сортировать("ЭтоУвеличениеСтоимости, НомерСтроки");
	
	Если ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
		ТаблицаМПЗ = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПИныеМатериальныеРасходы");
		ТаблицаМПЗ.Колонки.Удалить("Организация");
		ТаблицаМПЗ.Колонки.Добавить("Списание", Новый ОписаниеТипов("Булево"));
		
		ТаблицаОборотов.Индексы.Добавить("СтатьяЗатрат");
		Отбор = Новый Структура("СтатьяЗатрат");
	ИначеЕсли ВидМПЗ = Перечисления.ВидыМПЗ.РБП Тогда
		ТаблицаМПЗ = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПРБП");
		ТаблицаМПЗ.Колонки.Удалить("Организация");
		ТаблицаМПЗ.Колонки.Добавить("Списание",   Новый ОписаниеТипов("Булево"));
		ТаблицаМПЗ.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		
		ТаблицаОборотов.Индексы.Добавить("ВидРасхода");
		Отбор = Новый Структура("ВидРасхода");
	Иначе
		ТаблицаМПЗ = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗ");
		ТаблицаМПЗ.Колонки.Удалить("Организация");
		ТаблицаМПЗ.Колонки.Добавить("Списание", Новый ОписаниеТипов("Булево"));
		
		ТаблицаОборотов.Индексы.Добавить("ВидМПЗ, Номенклатура");
		Отбор = Новый Структура("ВидМПЗ, Номенклатура");
	КонецЕсли;
	
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СтруктураПараметров = Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	// Таблица зачета оплаты при пересортице или симметричном изменении стоимости
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сумма",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		ИзменениеСуммы      = МПЗ.Сумма;
		ИзменениеНДС        = МПЗ.НДС;
		
		ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
		ОборотыМПЗ = ТаблицаОборотов.Скопировать(Отбор);
		ОборотыМПЗ.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
		
		КоличествоПриход = ОборотыМПЗ.Итог("КоличествоПриход");
		СуммаПриход      = ОборотыМПЗ.Итог("СуммаПриход");
		
		СуммаСНДСПриход = ОборотыМПЗ.Итог("СуммаСНДСПриход");
		СуммаСНДСРасход = ОборотыМПЗ.Итог("СуммаСНДСРасход");
		
		// Корректировка количества
		ИзменениеКоличества = МПЗ.Количество;
		Если ИзменениеКоличества > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
			
			// Выделение стоимости, увеличение которой не связано с изменением цены
			
			НеОплаченноеКоличество= ИзменениеКоличества;
			НеОплаченнаяСумма     = Окр((СуммаПриход + ИзменениеСуммы) * ИзменениеКоличества / (КоличествоПриход + ИзменениеКоличества), 2, 1);
			НеОплаченнаяСуммаСНДС = Окр((СуммаСНДСПриход + ИзменениеСуммы + ИзменениеНДС) * ИзменениеКоличества / (КоличествоПриход + ИзменениеКоличества), 2, 1);
			НеОплаченныйНДС       = НеОплаченнаяСуммаСНДС - НеОплаченнаяСумма;
			
			ИзменениеКоличества = ИзменениеКоличества - НеОплаченноеКоличество;
			ИзменениеСуммы      = ИзменениеСуммы - НеОплаченнаяСумма;
			ИзменениеНДС        = ИзменениеНДС - НеОплаченныйНДС;
			
			НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			
			// Зачет оплаты 
			Для каждого Оплата Из ТаблицаВзаиморасчетов Цикл
				
				Если Оплата.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Оплата.Сумма >= (НеОплаченнаяСумма + НеОплаченныйНДС) Тогда
					Количество = НеОплаченноеКоличество;
					Сумма      = НеОплаченнаяСумма;
					НДС        = НеОплаченныйНДС;
				Иначе
					КоэффициентОплаты = Оплата.Сумма / (НеОплаченнаяСумма + НеОплаченныйНДС);
					Количество = Окр(НеОплаченноеКоличество * КоэффициентОплаты, 3, 1);
					Сумма      = Окр(НеОплаченнаяСумма * КоэффициентОплаты, 2, 1);
					СуммаСНДС  = Окр((НеОплаченнаяСумма + НеОплаченныйНДС) * КоэффициентОплаты, 2, 1);
					НДС        = СуммаСНДС - Сумма;
				КонецЕсли;
				
				ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, МПЗ);
				ПоступлениеМПЗ.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				ПоступлениеМПЗ.ХарактерДеятельности = ХарактерДеятельности;
				ПоступлениеМПЗ.Партия               = Реквизиты.Партия;
				ПоступлениеМПЗ.ДокументОплаты       = Оплата.ДокументОплаты;
				ПоступлениеМПЗ.Количество           = Количество;
				ПоступлениеМПЗ.Сумма                = Сумма;
				ПоступлениеМПЗ.НДС                  = НДС;
				
				НовыйОборот = ТаблицаОборотов.Добавить();
				НовыйОборот.НомерСтроки = ТаблицаОборотов.Количество();
				ЗаполнитьЗначенияСвойств(НовыйОборот, ПоступлениеМПЗ);
				НовыйОборот.КоличествоПриход = Количество;
				НовыйОборот.СуммаПриход      = Сумма;
				НовыйОборот.НДСПриход        = НДС;
				НовыйОборот.СуммаСНДСПриход  = Сумма + НДС;
				НовыйОборот.КоличествоРасход = 0;
				НовыйОборот.СуммаРасход      = 0;
				НовыйОборот.НДСРасход        = 0;
				НовыйОборот.СуммаСНДСРасход  = 0;
				
				НеОплаченноеКоличество = НеОплаченноеКоличество - Количество;
				НеОплаченнаяСумма      = НеОплаченнаяСумма - Сумма;
				НеОплаченныйНДС        = НеОплаченныйНДС - НДС;
				
				Оплата.Сумма = Оплата.Сумма - (Сумма + НДС);
				
				Если НеОплаченноеКоличество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Неоплаченная часть
			Если НеОплаченноеКоличество <> 0 Тогда
				ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, МПЗ);
				ПоступлениеМПЗ.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				ПоступлениеМПЗ.ХарактерДеятельности = ХарактерДеятельности;
				ПоступлениеМПЗ.Партия               = Реквизиты.Партия;
				ПоступлениеМПЗ.Количество           = НеОплаченноеКоличество;
				ПоступлениеМПЗ.Сумма                = НеОплаченнаяСумма;
				ПоступлениеМПЗ.НДС                  = НеОплаченныйНДС;
				
				НовыйОборот = ТаблицаОборотов.Добавить();
				НовыйОборот.НомерСтроки = ТаблицаОборотов.Количество();
				ЗаполнитьЗначенияСвойств(НовыйОборот, ПоступлениеМПЗ);
				НовыйОборот.КоличествоПриход = НеОплаченноеКоличество;
				НовыйОборот.СуммаПриход      = НеОплаченнаяСумма;
				НовыйОборот.НДСПриход        = НеОплаченныйНДС;
				НовыйОборот.СуммаСНДСПриход  = НеОплаченнаяСумма + НеОплаченныйНДС;
				НовыйОборот.КоличествоРасход = 0;
				НовыйОборот.СуммаРасход      = 0;
				НовыйОборот.НДСРасход        = 0;
				НовыйОборот.СуммаСНДСРасход  = 0;
				
			КонецЕсли;
			
		ИначеЕсли ИзменениеКоличества < 0 Тогда
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[ОборотыМПЗ.Количество() - Индекс - 1];
				Если Оборот.КоличествоПриход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоВСтроке = Мин(Оборот.КоличествоПриход, -ИзменениеКоличества);
				Если КоличествоВСтроке = Оборот.КоличествоПриход Тогда
					СуммаВСтроке = Оборот.СуммаПриход;
					НДСВСтроке   = Оборот.НДСПриход;
				Иначе
					СуммаВСтроке = Окр(Оборот.СуммаПриход * КоличествоВСтроке/Оборот.КоличествоПриход, 2, 1);
					НДСВСтроке   = Окр(Оборот.СуммаСНДСПриход * КоличествоВСтроке/Оборот.КоличествоПриход, 2, 1) - СуммаВСтроке;
				КонецЕсли;
				
				ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
				ПоступлениеМПЗ.Корректировка = Истина;
				ПоступлениеМПЗ.Количество    = -КоличествоВСтроке;
				ПоступлениеМПЗ.Сумма         = -СуммаВСтроке;
				ПоступлениеМПЗ.НДС           = -НДСВСтроке;
				
				Оборот.КоличествоПриход = Оборот.КоличествоПриход - КоличествоВСтроке;
				Оборот.СуммаПриход      = Оборот.СуммаПриход - СуммаВСтроке;
				Оборот.НДСПриход        = Оборот.НДСПриход - НДСВСтроке;
				Оборот.СуммаСНДСПриход  = Оборот.СуммаСНДСПриход - СуммаВСтроке - СуммаВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
				ИзменениеКоличества = ИзменениеКоличества + КоличествоВСтроке;
				ИзменениеСуммы      = ИзменениеСуммы + СуммаВСтроке;
				ИзменениеНДС        = ИзменениеНДС + НДСВСтроке;
				
				Если ЗначениеЗаполнено(Оборот.ДокументОплаты) И (СуммаВСтроке + НДСВСтроке) > 0 Тогда
					Оплата = ТаблицаВзаиморасчетов.Добавить();
					Оплата.ДокументОплаты = Оборот.ДокументОплаты;
					Оплата.Сумма          = СуммаВСтроке + НДСВСтроке;
				КонецЕсли;
				
				Если ИзменениеКоличества = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Корректировка стоимости поступления
		Если ИзменениеСуммы + ИзменениеНДС <> 0 Тогда
			
			МассивКоэффициентов = ОборотыМПЗ.ВыгрузитьКолонку("СуммаСНДСПриход");
			
			РаспределеннаяСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеСуммы, МассивКоэффициентов, 2);
			
			РаспределенныйНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеНДС, МассивКоэффициентов, 2);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.СуммаСНДСПриход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеСуммыВСтроке      = ?(РаспределеннаяСумма <> Неопределено, РаспределеннаяСумма[Индекс], 0);
				ИзменениеНДСВСтроке        = ?(РаспределенныйНДС <> Неопределено, РаспределенныйНДС[Индекс], 0);
				ИзменениеСуммыСНДСВСтроке  = ИзменениеСуммыВСтроке + ИзменениеНДСВСтроке;
				
				Если ИзменениеСуммыСНДСВСтроке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Изменилась цена, сторнируем старую запись
				ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
				ПоступлениеМПЗ.Корректировка = Истина;
				ПоступлениеМПЗ.Количество    = -Оборот.КоличествоПриход;
				ПоступлениеМПЗ.Сумма         = -Оборот.СуммаПриход;
				ПоступлениеМПЗ.НДС           = -Оборот.НДСПриход;
				
				//Новую запись делаем с учетом изменений
				Если Оборот.КоличествоПриход > 0 И ИзменениеСуммыСНДСВСтроке > 0 И ЗначениеЗаполнено(Оборот.ДокументОплаты) Тогда
					
					КоэффициентОплаты = Оборот.СуммаСНДСПриход / (Оборот.СуммаСНДСПриход + ИзменениеСуммыСНДСВСтроке);
					ОплаченноеКоличество   = Окр(Оборот.КоличествоПриход * КоэффициентОплаты, 3, 1);
					НеОплаченноеКоличество = Оборот.КоличествоПриход - ОплаченноеКоличество;
					НеОплаченнаяСумма      = ИзменениеСуммыВСтроке;
					НеОплаченныйНДС        = ИзменениеНДСВСтроке;
					
					// Оплаченная часть МПЗ
					ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
					ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
					ПоступлениеМПЗ.Количество = ОплаченноеКоличество;
					ПоступлениеМПЗ.Сумма      = Оборот.СуммаПриход;
					ПоступлениеМПЗ.НДС        = Оборот.НДСПриход;
					
					Оборот.КоличествоПриход = ПоступлениеМПЗ.Количество;
					ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
					
					// Зачет оплаты 
					Для каждого Оплата Из ТаблицаВзаиморасчетов Цикл
						
						Если Оплата.Сумма = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если Оплата.Сумма >= (НеОплаченнаяСумма + НеОплаченныйНДС) Тогда
							Количество = НеОплаченноеКоличество;
							Сумма      = НеОплаченнаяСумма;
							НДС        = НеОплаченныйНДС;
						Иначе
							КоэффициентОплаты = Оплата.Сумма / (НеОплаченнаяСумма + НеОплаченныйНДС);
							Количество = Окр(НеОплаченноеКоличество * КоэффициентОплаты, 3, 1);
							Сумма      = Окр(НеОплаченнаяСумма * КоэффициентОплаты, 2, 1);
							СуммаСНДС  = Окр((НеОплаченнаяСумма + НеОплаченныйНДС) * КоэффициентОплаты, 2, 1);
							НДС        = СуммаСНДС - Сумма;
						КонецЕсли;
						
						ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот, , "ДокументОплаты");
						ПоступлениеМПЗ.ДокументОплаты = Оплата.ДокументОплаты;
						ПоступлениеМПЗ.Количество     = Количество;
						ПоступлениеМПЗ.Сумма          = Сумма;
						ПоступлениеМПЗ.НДС            = НДС;
						
						НовыйОборот = ТаблицаОборотов.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйОборот, ПоступлениеМПЗ);
						НовыйОборот.НомерСтроки = ТаблицаОборотов.Количество() + 1;
						НовыйОборот.КоличествоПриход = Количество;
						НовыйОборот.СуммаПриход      = Сумма;
						НовыйОборот.НДСПриход        = НДС;
						НовыйОборот.СуммаСНДСПриход  = Сумма + НДС;
						НовыйОборот.КоличествоРасход = 0;
						НовыйОборот.СуммаРасход      = 0;
						НовыйОборот.НДСРасход        = 0;
						НовыйОборот.СуммаСНДСРасход  = 0;
						
						Оборот = ОборотыМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(Оборот, НовыйОборот);
						
						НеОплаченноеКоличество = НеОплаченноеКоличество - Количество;
						НеОплаченнаяСумма      = НеОплаченнаяСумма - Сумма;
						НеОплаченныйНДС        = НеОплаченныйНДС - НДС;
						
						Оплата.Сумма = Оплата.Сумма - (Сумма + НДС);
						
						Если НеОплаченнаяСумма + НеОплаченныйНДС = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Неоплаченная часть
					Если НеОплаченнаяСумма+ НеОплаченныйНДС <> 0 Тогда
						
						ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот, , "ДокументОплаты");
						ПоступлениеМПЗ.Количество = НеОплаченноеКоличество;
						ПоступлениеМПЗ.Сумма      = НеОплаченнаяСумма;
						ПоступлениеМПЗ.НДС        = НеОплаченныйНДС;
						
						НовыйОборот = ТаблицаОборотов.Добавить();
						НовыйОборот.НомерСтроки = ТаблицаОборотов.Количество();
						ЗаполнитьЗначенияСвойств(НовыйОборот, ПоступлениеМПЗ);
						НовыйОборот.КоличествоПриход = НеОплаченноеКоличество;
						НовыйОборот.СуммаПриход      = НеОплаченнаяСумма;
						НовыйОборот.НДСПриход        = НеОплаченныйНДС;
						НовыйОборот.СуммаСНДСПриход  = НеОплаченнаяСумма + НеОплаченныйНДС;
						НовыйОборот.КоличествоРасход = 0;
						НовыйОборот.СуммаРасход      = 0;
						НовыйОборот.НДСРасход        = 0;
						НовыйОборот.СуммаСНДСРасход  = 0;
						
						Оборот = ОборотыМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(Оборот, НовыйОборот);
						
					КонецЕсли;
					
				Иначе
					
					ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
					ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
					ПоступлениеМПЗ.Количество = Оборот.КоличествоПриход;
					ПоступлениеМПЗ.Сумма      = Оборот.СуммаПриход + ИзменениеСуммыВСтроке;
					ПоступлениеМПЗ.НДС        = Оборот.НДСПриход + ИзменениеНДСВСтроке;
					
					Оборот.СуммаПриход     = ПоступлениеМПЗ.Сумма;
					Оборот.НДСПриход       = ПоступлениеМПЗ.НДС;
					Оборот.СуммаСНДСПриход = ПоступлениеМПЗ.Сумма + ПоступлениеМПЗ.НДС;
					ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
					
					Если ЗначениеЗаполнено(Оборот.ДокументОплаты) И ИзменениеСуммыСНДСВСтроке < 0 Тогда
						Оплата = ТаблицаВзаиморасчетов.Добавить();
						Оплата.ДокументОплаты = Оборот.ДокументОплаты;
						Оплата.Сумма          =-ИзменениеСуммыСНДСВСтроке;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Корректировка стоимости списания
		
		ИзменениеСуммыСписания     = 0;
		ИзменениеСуммыСписанияСНДС = 0;
		ИзменениеНДССписания       = 0;
		
		КоличествоПриходСкорректированное = ОборотыМПЗ.Итог("КоличествоПриход");
		
		Если СуммаСНДСПриход <> 0 И СуммаСНДСРасход <> 0 И КоличествоПриходСкорректированное <> 0 Тогда
			
			// Коэффициент степень влияния изменения количества на изменение стоимости
			Коэффициент = КоличествоПриход/КоличествоПриходСкорректированное;
			
			ИзменениеСуммыСписания     = Окр(ИзменениеСуммы * Коэффициент * СуммаСНДСРасход / СуммаСНДСПриход, 2, 1);
			ИзменениеСуммыСписанияСНДС = Окр((ИзменениеСуммы + ИзменениеНДС) * Коэффициент * СуммаСНДСРасход / СуммаСНДСПриход, 2, 1);
			ИзменениеНДССписания       = ИзменениеСуммыСписанияСНДС - ИзменениеСуммыСписания;
			
		КонецЕслИ;
		
		Если ИзменениеСуммыСписанияСНДС <> 0 Тогда
			
			МассивКоэффициентов = ОборотыМПЗ.ВыгрузитьКолонку("СуммаСНДСРасход");
			
			РаспределеннаяСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеСуммыСписания, МассивКоэффициентов, 2);
			
			РаспределенныйНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеНДССписания, МассивКоэффициентов, 2);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.СуммаСНДСРасход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеСуммыСписанияВСтроке      = ?(РаспределеннаяСумма <> Неопределено, РаспределеннаяСумма[Индекс], 0);
				ИзменениеНДССписанияВСтроке        = ?(РаспределенныйНДС <> Неопределено, РаспределенныйНДС[Индекс], 0);
				ИзменениеСуммыСписанияСНДСВСтроке  = ИзменениеСуммыСписанияВСтроке + ИзменениеНДССписанияВСтроке;
				
				Если ИзменениеСуммыСписанияСНДСВСтроке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Изменилась цена, сторнируем старую запись
				ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
				ПоступлениеМПЗ.Корректировка = Истина;
				ПоступлениеМПЗ.Списание      = Истина;
				ПоступлениеМПЗ.Сумма         = -Оборот.СуммаРасход;
				ПоступлениеМПЗ.НДС           = -Оборот.НДСРасход;
				ПоступлениеМПЗ.Количество    = -Оборот.КоличествоРасход;
				
				//Новую запись делаем с учетом изменений
				Если Оборот.КоличествоРасход > 0 И ИзменениеСуммыСписанияСНДСВСтроке > 0 И ЗначениеЗаполнено(Оборот.ДокументОплаты) Тогда
					
					ОплаченноеКоличество = Мин(Оборот.КоличествоРасход, Оборот.КоличествоПриход);
					
					Если ОплаченноеКоличество = Оборот.КоличествоРасход Тогда
						// весь товар оплачен поставщику
						ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
						ПоступлениеМПЗ.Списание   = Истина;
						ПоступлениеМПЗ.Сумма      = Оборот.СуммаРасход + ИзменениеСуммыСписанияВСтроке;
						ПоступлениеМПЗ.НДС        = Оборот.НДСРасход + ИзменениеНДССписанияВСтроке;
						ПоступлениеМПЗ.Количество = Оборот.КоличествоРасход;
						
						Если СписокМПЗОтгруженные <> Неопределено Тогда
							// Заполнение таблицы корректировки МПЗ отгруженных
							МПЗОтгруженные = СписокМПЗОтгруженные.Добавить();
							ЗаполнитьЗначенияСвойств(МПЗОтгруженные, Оборот);
							ЗаполнитьЗначенияСвойств(МПЗОтгруженные, МПЗ, "ИмяСписка, НомерСтроки");
							МПЗОтгруженные.ИзменениеСуммы = ИзменениеСуммыСписанияВСтроке;
							МПЗОтгруженные.ИзменениеНДС   = ИзменениеНДССписанияВСтроке;
						КонецЕсли;
						
					Иначе
						
						// Оплаченная часть МПЗ
						ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
						ПоступлениеМПЗ.Списание   = Истина;
						ПоступлениеМПЗ.Сумма      = Оборот.СуммаПриход;
						ПоступлениеМПЗ.НДС        = Оборот.НДСПриход;
						ПоступлениеМПЗ.Количество = Оборот.КоличествоПриход;
						
						// Неоплаченная часть МПЗ
						ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот, , "ДокументОплаты");
						ПоступлениеМПЗ.Списание   = Истина;
						ПоступлениеМПЗ.Сумма      = Оборот.СуммаРасход - Оборот.СуммаПриход + ИзменениеСуммыСписанияВСтроке;
						ПоступлениеМПЗ.НДС        = Оборот.НДСРасход - Оборот.НДСПриход + ИзменениеНДССписанияВСтроке;
						ПоступлениеМПЗ.Количество = Оборот.КоличествоРасход - Оборот.КоличествоПриход;
						
						Если СписокМПЗОтгруженные <> Неопределено Тогда
							// Заполнение таблицы корректировки МПЗ отгруженных
							МПЗОтгруженные = СписокМПЗОтгруженные.Добавить();
							ЗаполнитьЗначенияСвойств(МПЗОтгруженные, Оборот);
							ЗаполнитьЗначенияСвойств(МПЗОтгруженные, МПЗ, "ИмяСписка, НомерСтроки");
							МПЗОтгруженные.ИзменениеКоличества = Оборот.КоличествоПриход - Оборот.КоличествоРасход;
							МПЗОтгруженные.ИзменениеСуммы      = Оборот.СуммаПриход - Оборот.СуммаРасход;
							МПЗОтгруженные.ИзменениеНДС        = Оборот.НДСПриход - Оборот.НДСРасход;
							
							МПЗОтгруженные = СписокМПЗОтгруженные.Добавить();
							ЗаполнитьЗначенияСвойств(МПЗОтгруженные, Оборот, , "ДокументОплаты");
							ЗаполнитьЗначенияСвойств(МПЗОтгруженные, МПЗ, "ИмяСписка, НомерСтроки");
							МПЗОтгруженные.ИзменениеСуммы      = Оборот.СуммаРасход - Оборот.СуммаПриход + ИзменениеСуммыСписанияВСтроке;
							МПЗОтгруженные.ИзменениеНДС        = Оборот.НДСРасход - Оборот.НДСПриход + ИзменениеНДССписанияВСтроке;
							МПЗОтгруженные.ИзменениеКоличества = Оборот.КоличествоРасход - Оборот.КоличествоПриход;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ПоступлениеМПЗ = ТаблицаМПЗ.Добавить();
					ЗаполнитьЗначенияСвойств(ПоступлениеМПЗ, Оборот);
					ПоступлениеМПЗ.Списание   = Истина;
					ПоступлениеМПЗ.Сумма      = Оборот.СуммаРасход + ИзменениеСуммыСписанияВСтроке;
					ПоступлениеМПЗ.НДС        = Оборот.НДСРасход + ИзменениеНДССписанияВСтроке;
					ПоступлениеМПЗ.Количество = Оборот.КоличествоРасход;
					
					Если СписокМПЗОтгруженные <> Неопределено Тогда
						// Заполнение таблицы корректировки МПЗ отгруженных
						МПЗОтгруженные = СписокМПЗОтгруженные.Добавить();
						ЗаполнитьЗначенияСвойств(МПЗОтгруженные, Оборот);
						ЗаполнитьЗначенияСвойств(МПЗОтгруженные, МПЗ, "ИмяСписка, НомерСтроки");
						МПЗОтгруженные.ИзменениеСуммы = ИзменениеСуммыСписанияВСтроке;
						МПЗОтгруженные.ИзменениеНДС   = ИзменениеНДССписанияВСтроке;
					КонецЕсли;
					
				КонецЕсли;
				
				Оборот.СуммаРасход     = Оборот.СуммаРасход + ИзменениеСуммыСписанияВСтроке;
				Оборот.НДСРасход       = Оборот.НДСРасход + ИзменениеНДССписанияВСтроке;
				Оборот.СуммаСНДСРасход = Оборот.СуммаСНДСРасход + ИзменениеСуммыСписанияВСтроке + ИзменениеНДССписанияВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМПЗ;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиПоступленияОбороты(СписокМПЗСписанные, Реквизиты)
	
	Если СписокМПЗСписанные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокМПЗСписанные.Колонки.ВидМПЗ.Имя       = "ВидСписанногоМПЗ";
	СписокМПЗСписанные.Колонки.Номенклатура.Имя = "НоменклатураСписанная";
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ПартияДата, Реквизиты.Партия), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	СписокНоменклатурныхГрупп    = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗСписанные, "НоменклатурнаяГруппа", Истина);
	СписокХарактеровДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗСписанные, "ХарактерДеятельности", Истина);
	СписокВидовСписанныхМПЗ      = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗСписанные, "ВидСписанногоМПЗ", Истина);
	СписокНоменклатурыСписанной  = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗСписанные, "НоменклатураСписанная", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецПериода);
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп",    СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("СписокХарактеровДеятельности", СписокХарактеровДеятельности);
	Запрос.УстановитьПараметр("СписокВидовСписанныхМПЗ",      СписокВидовСписанныхМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатурыСписанной",  СписокНоменклатурыСписанной);
	Запрос.УстановитьПараметр("ПартияСписаннойНоменклатуры",  Реквизиты.Партия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОборотыОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОборотыОбороты.ХарактерДеятельности,
	|	ИПМПЗОборотыОбороты.ДокументОплаты,
	|	ИПМПЗОборотыОбороты.ВидСписанногоМПЗ,
	|	ИПМПЗОборотыОбороты.НоменклатураСписанная,
	|	ИПМПЗОборотыОбороты.ПартияСписаннойНоменклатуры,
	|	ИПМПЗОборотыОбороты.ВидПоступившегоМПЗ,
	|	ИПМПЗОборотыОбороты.НоменклатураПоступившая,
	|	ИПМПЗОборотыОбороты.ПартияПоступившейНоменклатуры,
	|	ИПМПЗОборотыОбороты.КоличествоОборот,
	|	ИПМПЗОборотыОбороты.СуммаОборот,
	|	ИПМПЗОборотыОбороты.НДСОборот
	|ИЗ
	|	РегистрНакопления.ИПМПЗОбороты.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И ВидСписанногоМПЗ В (&СписокВидовСписанныхМПЗ)
	|				И НоменклатураСписанная В (&СписокНоменклатурыСписанной)
	|				И ПартияСписаннойНоменклатуры = &ПартияСписаннойНоменклатуры) КАК ИПМПЗОборотыОбороты";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОборотов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидСписанногоМПЗ, НоменклатураСписанная");
	Отбор = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидСписанногоМПЗ, НоменклатураСписанная");
	
	ТаблицаМПЗОбороты = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗОбороты");
	ТаблицаМПЗОбороты.Колонки.Удалить("Организация");
	ТаблицаМПЗОбороты.Колонки.Добавить("ИмяСписка", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для каждого МПЗ Из СписокМПЗСписанные Цикл
		
		Если  МПЗ.ИзменениеСуммы +  МПЗ.ИзменениеНДС <> 0 Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
			НайденныеСтроки = ТаблицаОборотов.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОборотМПЗ = ТаблицаМПЗОбороты.Добавить();
				ЗаполнитьЗначенияСвойств(ОборотМПЗ, МПЗ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМПЗОбороты;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиПоступленияМПЗОтгруженные(СписокМПЗОтгруженные, СписокМПЗОплаченные, Реквизиты)
	
	ТаблицаМПЗОтгруженные = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные");
	ТаблицаМПЗОтгруженные.Колонки.Удалить("Организация");
	ТаблицаМПЗОтгруженные.Колонки.Добавить("Списание",      Новый ОписаниеТипов("Булево"));
	
	Если СписокМПЗОтгруженные.Количество() = 0 Тогда
		Возврат ТаблицаМПЗОтгруженные;
	КонецЕсли;
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОтгруженные");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("ВидМПЗ",               "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура",         "Номенклатура");
	ОписаниеИсточника.Вставить("ДокументОплаты",       "ДокументОплаты");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(Реквизиты.ПартияДата, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Партия", Реквизиты.Партия);
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗОтгруженные, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ПартияДата, Реквизиты.Партия), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	СписокНоменклатурныхГрупп    = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОтгруженные, "НоменклатурнаяГруппа", Истина);
	СписокХарактеровДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОтгруженные, "ХарактерДеятельности", Истина);
	СписокВидовМПЗ               = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОтгруженные, "ВидМПЗ", Истина);
	СписокНоменклатуры           = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОтгруженные, "Номенклатура", Истина);
	СписокДокументовОплаты       = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОтгруженные, "ДокументОплаты", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецПериода);
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп",    СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("СписокХарактеровДеятельности", СписокХарактеровДеятельности);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",               СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатуры",           СписокНоменклатуры);
	Запрос.УстановитьПараметр("Партия",                       Реквизиты.Партия);
	Запрос.УстановитьПараметр("СписокДокументовОплаты",       СписокДокументовОплаты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.ДокументОплаты,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
	|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСРасход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
	|ПОМЕСТИТЬ ВТИПМПЗОтгруженныеОбороты
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Партия = &Партия
	|				И ДокументОплаты В (&СписокДокументовОплаты)) КАК ИПМПЗОтгруженныеОбороты
	|ГДЕ
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход + ИПМПЗОтгруженныеОбороты.НДСПриход <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.ДокументОплаты,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	ЕСТЬNULL(РеквизитыДокументовОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОтгрузки,
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход + ИПМПЗОтгруженныеОбороты.НДСПриход КАК СуммаСНДСПриход,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход + ИПМПЗОтгруженныеОбороты.НДСРасход КАК СуммаСНДСРасход,
	|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
	|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСРасход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
	|ИЗ
	|	ВТИПМПЗОтгруженныеОбороты КАК ИПМПЗОтгруженныеОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОтгрузки
	|		ПО (РеквизитыДокументовОтгрузки.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОбороты.ДокументОтгрузки = РеквизитыДокументовОтгрузки.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОборотов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОплаты");
	Отбор = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОплаты");
	
	СписокМПЗОплаченные.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОтгрузки");
	ОтборМПЗОплаченные = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОтгрузки");
	
	Для каждого МПЗ Из СписокМПЗОтгруженные Цикл
		
		ИзменениеКоличества = МПЗ.ИзменениеКоличества;
		ИзменениеСуммы      = МПЗ.ИзменениеСуммы;
		ИзменениеНДС        = МПЗ.ИзменениеНДС;
		
		ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
		ОборотыМПЗ = ТаблицаОборотов.Скопировать(Отбор);
		
		КоличествоПриход = ОборотыМПЗ.Итог("КоличествоПриход");
		КоличествоРасход = ОборотыМПЗ.Итог("КоличествоРасход");
		СуммаСНДСПриход  = ОборотыМПЗ.Итог("СуммаСНДСПриход");
		СуммаСНДСРасход  = ОборотыМПЗ.Итог("СуммаСНДСРасход");
		
		Если КоличествоПриход + МПЗ.ИзменениеКоличества < КоличествоРасход Тогда
			ИзменениеКоличестваСписания = КоличествоРасход - КоличествоПриход + МПЗ.ИзменениеКоличества;
		Иначе
			ИзменениеКоличестваСписания = 0;
		КонецЕсли;
		ИзменениеСуммыСписания      = 0;
		ИзменениеНДССписания        = 0;
		
		Если ИзменениеКоличестваСписания = ИзменениеКоличества Тогда
			ИзменениеСуммыСписания = ИзменениеСуммы;
			ИзменениеНДССписания   = ИзменениеНДС;
		ИначеЕсли КоличествоРасход <> 0 И КоличествоПриход <> 0 Тогда
			Коэффициент = КоличествоРасход / КоличествоПриход;
			ИзменениеСуммыСписания     = Окр(ИзменениеСуммы * Коэффициент, 2, 1);
			ИзменениеСуммыСписанияСНДС = Окр((ИзменениеСуммы +  ИзменениеНДС) * Коэффициент, 2, 1);
			ИзменениеНДССписания       = ИзменениеСуммыСписанияСНДС - ИзменениеСуммыСписания;
		КонецЕсли;
		
		// Корректировка количества
		Если ИзменениеКоличества < 0 Тогда
			
			ОборотыМПЗ.Сортировать("ДатаДокументаОтгрузки Убыв, ДокументОтгрузки Убыв", Новый СравнениеЗначений);
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.КоличествоПриход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеКоличестваВСтроке = Мин(Оборот.КоличествоПриход, -ИзменениеКоличества);
				Если ИзменениеКоличестваВСтроке = Оборот.КоличествоПриход Тогда
					ИзменениеСуммыВСтроке           = Оборот.СуммаПриход;
					ИзменениеНДСВСтроке             = Оборот.НДСПриход;
				Иначе
					Коэффициент = ИзменениеКоличестваВСтроке/Оборот.КоличествоПриход;
					ИзменениеСуммыВСтроке           = Окр(Оборот.СуммаПриход * Коэффициент, 2, 1);
					ИзменениеСуммыСНДСВСтроке       = Окр((Оборот.СуммаПриход + Оборот.НДСПриход) * Коэффициент, 2, 1);
					ИзменениеНДСВСтроке             = ИзменениеСуммыСНДСВСтроке - ИзменениеСуммыВСтроке;
				КонецЕсли;
				
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Корректировка = Истина;
				ОтгрузкаМПЗ.Количество    = -ИзменениеКоличестваВСтроке;
				ОтгрузкаМПЗ.Сумма         = -ИзменениеСуммыВСтроке;
				ОтгрузкаМПЗ.НДС           = -ИзменениеНДСВСтроке;
				
				Оборот.КоличествоПриход = Оборот.КоличествоПриход - ИзменениеКоличестваВСтроке;
				Оборот.СуммаПриход      = Оборот.СуммаПриход - ИзменениеСуммыВСтроке;
				Оборот.НДСПриход        = Оборот.НДСПриход - ИзменениеНДСВСтроке;
				Оборот.СуммаСНДСПриход  = Оборот.СуммаСНДСПриход - ИзменениеСуммыВСтроке - ИзменениеНДСВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
				ИзменениеКоличества = ИзменениеКоличества + ИзменениеКоличестваВСтроке;
				ИзменениеСуммы      = ИзменениеСуммы + ИзменениеСуммыВСтроке;
				ИзменениеНДС        = ИзменениеНДС + ИзменениеНДСВСтроке;
				
				Если ИзменениеКоличества = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ИзменениеКоличества > 0 Тогда
			
			ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
			ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, МПЗ);
			ОтгрузкаМПЗ.Партия         = Реквизиты.Партия;
			ОтгрузкаМПЗ.Количество     = ИзменениеКоличества;
			ОтгрузкаМПЗ.Сумма          = ИзменениеСуммы;
			ОтгрузкаМПЗ.НДС            = ИзменениеНДС;
			
			НовыйОборот = ТаблицаОборотов.Добавить();
			НовыйОборот.НомерСтроки = ТаблицаОборотов.Количество();
			ЗаполнитьЗначенияСвойств(НовыйОборот, ОтгрузкаМПЗ);
			НовыйОборот.КоличествоПриход     = ИзменениеКоличества;
			НовыйОборот.СуммаПриход          = ИзменениеСуммы;
			НовыйОборот.НДСПриход            = ИзменениеНДС;
			НовыйОборот.СуммаСНДСПриход      = ИзменениеСуммы + ИзменениеНДС;
			НовыйОборот.ВыручкаПриход        = 0;
			НовыйОборот.НДСНачисленныйПриход = 0;
			НовыйОборот.КоличествоРасход     = 0;
			НовыйОборот.СуммаРасход          = 0;
			НовыйОборот.НДСРасход            = 0;
			НовыйОборот.СуммаСНДСРасход      = 0;
			НовыйОборот.ВыручкаРасход        = 0;
			НовыйОборот.НДСНачисленныйРасход = 0;
			
			ИзменениеКоличества = 0;
			ИзменениеСуммы      = 0;
			ИзменениеНДС        = 0;
			
		КонецЕсли;
		
		Если ИзменениеСуммы + ИзменениеНДС <> 0 Тогда
			
			ОборотыМПЗ.Сортировать("ДатаДокументаОтгрузки, ДокументОтгрузки", Новый СравнениеЗначений);
			
			МассивКоэффициентов = ОборотыМПЗ.ВыгрузитьКолонку("СуммаСНДСПриход");
			
			РаспределеннаяСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеСуммы, МассивКоэффициентов, 2);
			
			РаспределенныйНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеНДС, МассивКоэффициентов, 2);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.СуммаСНДСПриход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеСуммыВСтроке     = ?(РаспределеннаяСумма <> Неопределено, РаспределеннаяСумма[Индекс], 0);
				ИзменениеНДСВСтроке       = ?(РаспределенныйНДС <> Неопределено, РаспределенныйНДС[Индекс], 0);
				ИзменениеСуммыСНДСВСтроке = ИзменениеСуммыВСтроке + ИзменениеНДСВСтроке;
				
				Если ИзменениеСуммыСНДСВСтроке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Изменилась цена, сторнируем старую запись
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Корректировка  = Истина;
				ОтгрузкаМПЗ.Количество     = -Оборот.КоличествоПриход;
				ОтгрузкаМПЗ.Сумма          = -Оборот.СуммаПриход;
				ОтгрузкаМПЗ.НДС            = -Оборот.НДСПриход;
				ОтгрузкаМПЗ.Выручка        = -Оборот.ВыручкаПриход;
				ОтгрузкаМПЗ.НДСНачисленный = -Оборот.НДСНачисленныйПриход;
				
				//Новую запись делаем с учетом изменений
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Количество     = Оборот.КоличествоПриход;
				ОтгрузкаМПЗ.Сумма          = Оборот.СуммаПриход + ИзменениеСуммыВСтроке;
				ОтгрузкаМПЗ.НДС            = Оборот.НДСПриход + ИзменениеНДСВСтроке;
				ОтгрузкаМПЗ.Выручка        = Оборот.ВыручкаПриход;
				ОтгрузкаМПЗ.НДСНачисленный = Оборот.НДСНачисленныйПриход;
				
				Оборот.СуммаПриход      = Оборот.СуммаПриход + ИзменениеСуммыВСтроке;
				Оборот.НДСПриход        = Оборот.НДСПриход + ИзменениеНДСВСтроке;
				Оборот.СуммаСНДСПриход  = Оборот.СуммаСНДСПриход + ИзменениеСуммыВСтроке + ИзменениеНДСВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
			КонецЦикла;
			
			ИзменениеСуммы = 0;
			ИзменениеНДС   = 0;
			
		КонецЕсли;
		
		Если ИзменениеКоличестваСписания < 0 Тогда
			
			ОборотыМПЗ.Сортировать("ДатаДокументаОтгрузки Убыв, ДокументОтгрузки Убыв", Новый СравнениеЗначений);
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.КоличествоРасход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеКоличестваСписанияВСтроке = Мин(Оборот.КоличествоРасход, -ИзменениеКоличестваСписания);
				Если ИзменениеКоличестваСписанияВСтроке = Оборот.КоличествоРасход Тогда
					ИзменениеСуммыСписанияВСтроке = Оборот.СуммаРасход;
					ИзменениеНДССписанияВСтроке   = Оборот.НДСРасход;
				Иначе
					Коэффициент = ИзменениеКоличестваСписанияВСтроке/Оборот.КоличествоРасход;
					ИзменениеСуммыСписанияВСтроке     = Окр(Оборот.СуммаРасход * Коэффициент, 2, 1);
					ИзменениеСуммыСписанияСНДСВСтроке = Окр((Оборот.СуммаРасход + Оборот.НДСРасход) * Коэффициент, 2, 1);
					ИзменениеНДССписанияВСтроке       = ИзменениеСуммыСписанияСНДСВСтроке - ИзменениеСуммыСписанияВСтроке;
				КонецЕсли;
				
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Списание      = Истина;
				ОтгрузкаМПЗ.Корректировка = Истина;
				ОтгрузкаМПЗ.Количество    = -ИзменениеКоличестваСписанияВСтроке;
				ОтгрузкаМПЗ.Сумма         = -ИзменениеСуммыСписанияВСтроке;
				ОтгрузкаМПЗ.НДС           = -ИзменениеНДССписанияВСтроке;
				
				Оборот.КоличествоРасход = Оборот.КоличествоРасход - ИзменениеКоличестваСписанияВСтроке;
				Оборот.СуммаРасход      = Оборот.СуммаРасход - ИзменениеСуммыСписанияВСтроке;
				Оборот.НДСРасход        = Оборот.НДСРасход - ИзменениеНДССписанияВСтроке;
				Оборот.СуммаСНДСРасход  = Оборот.СуммаСНДСРасход - ИзменениеСуммыСписанияВСтроке - ИзменениеНДССписанияВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
				Если ЗначениеЗаполнено(Оборот.ДокументОплаты) Тогда
					// Заполнение таблицы корректировки доходов
					ЗаполнитьЗначенияСвойств(ОтборМПЗОплаченные, Оборот);
					НайденныеСтроки = СписокМПЗОплаченные.НайтиСтроки(ОтборМПЗОплаченные);
					Если НайденныеСтроки.Количество() > 0 Тогда
						МПЗОплаченные = НайденныеСтроки[0];
					Иначе
						МПЗОплаченные = СписокМПЗОплаченные.Добавить();
						ЗаполнитьЗначенияСвойств(МПЗОплаченные, Оборот);
					КонецЕсли;
					МПЗОплаченные.ИзменениеКоличества = МПЗОплаченные.ИзменениеКоличества - ИзменениеКоличестваСписанияВСтроке;
					МПЗОплаченные.ИзменениеСуммы      = МПЗОплаченные.ИзменениеСуммы - ИзменениеСуммыСписанияВСтроке;
					МПЗОплаченные.ИзменениеНДС        = МПЗОплаченные.ИзменениеНДС - ИзменениеНДССписанияВСтроке;
				КонецЕсли;
				
				ИзменениеКоличестваСписания = ИзменениеКоличестваСписания + ИзменениеКоличестваСписанияВСтроке;
				ИзменениеСуммыСписания      = ИзменениеСуммыСписания + ИзменениеСуммыСписанияВСтроке;
				ИзменениеНДССписания        = ИзменениеНДССписания + ИзменениеНДССписанияВСтроке;
				
				Если ИзменениеКоличестваСписания = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ИзменениеКоличестваСписания > 0 Тогда
			
			ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
			ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, МПЗ);
			ОтгрузкаМПЗ.Списание       = Истина;
			ОтгрузкаМПЗ.Партия         = Реквизиты.Партия;
			ОтгрузкаМПЗ.Количество     = ИзменениеКоличестваСписания;
			ОтгрузкаМПЗ.Сумма          = ИзменениеСуммыСписания;
			ОтгрузкаМПЗ.НДС            = ИзменениеНДССписания;
			
			НовыйОборот = ТаблицаОборотов.Добавить();
			НовыйОборот.НомерСтроки = ТаблицаОборотов.Количество();
			ЗаполнитьЗначенияСвойств(НовыйОборот, ОтгрузкаМПЗ);
			НовыйОборот.КоличествоПриход     = 0;
			НовыйОборот.СуммаПриход          = 0;
			НовыйОборот.НДСПриход            = 0;
			НовыйОборот.СуммаСНДСПриход      = 0;
			НовыйОборот.ВыручкаПриход        = 0;
			НовыйОборот.НДСНачисленныйПриход = 0;
			НовыйОборот.КоличествоРасход     = ИзменениеКоличестваСписания;
			НовыйОборот.СуммаРасход          = ИзменениеСуммыСписания;
			НовыйОборот.НДСРасход            = ИзменениеНДССписания;
			НовыйОборот.СуммаСНДСРасход      = ИзменениеСуммыСписания + ИзменениеНДССписания;
			НовыйОборот.ВыручкаРасход        = 0;
			НовыйОборот.НДСНачисленныйРасход = 0;
			
			Если ЗначениеЗаполнено(МПЗ.ДокументОплаты) Тогда
				// Заполнение таблицы корректировки доходов
				ЗаполнитьЗначенияСвойств(ОтборМПЗОплаченные, МПЗ);
				НайденныеСтроки = СписокМПЗОплаченные.НайтиСтроки(ОтборМПЗОплаченные);
				Если НайденныеСтроки.Количество() > 0 Тогда
					МПЗОплаченные = НайденныеСтроки[0];
				Иначе
					МПЗОплаченные = СписокМПЗОплаченные.Добавить();
					ЗаполнитьЗначенияСвойств(МПЗОплаченные, МПЗ);
				КонецЕсли;
				МПЗОплаченные.ИзменениеКоличества = МПЗОплаченные.ИзменениеКоличества + ИзменениеКоличестваСписания;
				МПЗОплаченные.ИзменениеСуммы      = МПЗОплаченные.ИзменениеСуммы + ИзменениеСуммыСписания;
				МПЗОплаченные.ИзменениеНДС        = МПЗОплаченные.ИзменениеНДС + ИзменениеНДССписания;
			КонецЕсли;
			
			ИзменениеКоличестваСписания = 0;
			ИзменениеСуммыСписания      = 0;
			ИзменениеНДССписания        = 0;
			
		КонецЕсли;
		
		// Корректировка стоимости списания
		Если ИзменениеСуммыСписания + ИзменениеНДССписания <> 0 Тогда
			
			ОборотыМПЗ.Сортировать("ДатаДокументаОтгрузки, ДокументОтгрузки", Новый СравнениеЗначений);
			
			МассивКоэффициентов = ОборотыМПЗ.ВыгрузитьКолонку("СуммаСНДСРасход");
			
			РаспределеннаяСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеСуммыСписания, МассивКоэффициентов, 2);
			
			РаспределенныйНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеНДССписания, МассивКоэффициентов, 2);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.СуммаСНДСРасход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеСуммыСписанияВСтроке     = ?(РаспределеннаяСумма <> Неопределено, РаспределеннаяСумма[Индекс], 0);
				ИзменениеНДССписанияВСтроке       = ?(РаспределенныйНДС <> Неопределено, РаспределенныйНДС[Индекс], 0);
				ИзменениеСуммыСписанияСНДСВСтроке = ИзменениеСуммыСписанияВСтроке + ИзменениеНДССписанияВСтроке;
				
				Если ИзменениеСуммыСписанияСНДСВСтроке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Изменилась цена, сторнируем старую запись
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Корректировка  = Истина;
				ОтгрузкаМПЗ.Списание       = Истина;
				ОтгрузкаМПЗ.Количество     = -Оборот.КоличествоРасход;
				ОтгрузкаМПЗ.Сумма          = -Оборот.СуммаРасход;
				ОтгрузкаМПЗ.НДС            = -Оборот.НДСРасход;
				ОтгрузкаМПЗ.Выручка        = -Оборот.ВыручкаРасход;
				ОтгрузкаМПЗ.НДСНачисленный = -Оборот.НДСНачисленныйРасход;
				
				//Новую запись делаем с учетом изменений
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Списание       = Истина;
				ОтгрузкаМПЗ.Количество     = Оборот.КоличествоРасход;
				ОтгрузкаМПЗ.Сумма          = Оборот.СуммаРасход + ИзменениеСуммыСписанияВСтроке;
				ОтгрузкаМПЗ.НДС            = Оборот.НДСРасход + ИзменениеНДССписанияВСтроке;
				ОтгрузкаМПЗ.Выручка        = Оборот.ВыручкаРасход;
				ОтгрузкаМПЗ.НДСНачисленный = Оборот.НДСНачисленныйРасход;
				
				Оборот.СуммаРасход      = Оборот.СуммаРасход + ИзменениеСуммыСписанияВСтроке;
				Оборот.НДСРасход        = Оборот.НДСРасход + ИзменениеНДССписанияВСтроке;
				Оборот.СуммаСНДСРасход  = Оборот.СуммаСНДСРасход + ИзменениеСуммыСписанияВСтроке + ИзменениеНДССписанияВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
				Если ЗначениеЗаполнено(Оборот.ДокументОплаты) Тогда
					// Заполнение таблицы корректировки доходов
					ЗаполнитьЗначенияСвойств(ОтборМПЗОплаченные, Оборот);
					НайденныеСтроки = СписокМПЗОплаченные.НайтиСтроки(ОтборМПЗОплаченные);
					Если НайденныеСтроки.Количество() > 0 Тогда
						МПЗОплаченные = НайденныеСтроки[0];
					Иначе
						МПЗОплаченные = СписокМПЗОплаченные.Добавить();
						ЗаполнитьЗначенияСвойств(МПЗОплаченные, Оборот);
					КонецЕсли;
					МПЗОплаченные.ИзменениеСуммы = МПЗОплаченные.ИзменениеСуммы + ИзменениеСуммыСписанияВСтроке;
					МПЗОплаченные.ИзменениеНДС   = МПЗОплаченные.ИзменениеНДС + ИзменениеНДССписанияВСтроке;
				КонецЕсли;
				
			КонецЦикла;
			
			ИзменениеСуммыСписания = 0;
			ИзменениеНДССписания   = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМПЗОтгруженные;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиПоступленияДоходов(СписокМПЗОплаченные, Реквизиты)
	
	ТаблицаДоходы = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПДоходы");
	ТаблицаДоходы.Колонки.Удалить("Организация");
	
	Если СписокМПЗОплаченные.Количество() = 0 Тогда
		Возврат ТаблицаДоходы;
	КонецЕсли;

	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПДоходы");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("ВидМПЗ",               "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура",         "Номенклатура");
	ОписаниеИсточника.Вставить("ДокументОтгрузки",     "ДокументОтгрузки");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПДоходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(Реквизиты.ПартияДата, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Партия", Реквизиты.Партия);
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗОплаченные, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ПартияДата, Реквизиты.Партия), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	СписокНоменклатурныхГрупп    = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "НоменклатурнаяГруппа", Истина);
	СписокХарактеровДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "ХарактерДеятельности", Истина);
	СписокВидовМПЗ               = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "ВидМПЗ", Истина);
	СписокНоменклатуры           = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "Номенклатура", Истина);
	СписокДокументовОтгрузки     = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "ДокументОтгрузки", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецПериода);
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп",    СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("СписокХарактеровДеятельности", СписокХарактеровДеятельности);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",               СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатуры",           СписокНоменклатуры);
	Запрос.УстановитьПараметр("Партия",                       Реквизиты.Партия);
	Запрос.УстановитьПараметр("СписокДокументовОтгрузки",     СписокДокументовОтгрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПДоходыОбороты.НоменклатурнаяГруппа,
	|	ИПДоходыОбороты.ХарактерДеятельности,
	|	ИПДоходыОбороты.ВидМПЗ,
	|	ИПДоходыОбороты.Номенклатура,
	|	ИПДоходыОбороты.ДокументОтгрузки,
	|	ИПДоходыОбороты.Партия,
	|	ИПДоходыОбороты.ДокументОплаты,
	|	ИПДоходыОбороты.КоличествоОборот,
	|	ИПДоходыОбороты.ВыручкаОборот,
	|	ИПДоходыОбороты.НДСНачисленныйОборот,
	|	ИПДоходыОбороты.СуммаОборот,
	|	ИПДоходыОбороты.НДСОборот,
	|	ИПДоходыОбороты.КоличествоОплаченоПоставщикуОборот
	|ПОМЕСТИТЬ ВТИПДоходыОбороты
	|ИЗ
	|	РегистрНакопления.ИПДоходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Партия = &Партия
	|				И ДокументОтгрузки В (&СписокДокументовОтгрузки)) КАК ИПДоходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПДоходыОбороты.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПДоходыОбороты.НоменклатурнаяГруппа,
	|	ИПДоходыОбороты.ХарактерДеятельности,
	|	ИПДоходыОбороты.ВидМПЗ,
	|	ИПДоходыОбороты.Номенклатура,
	|	ИПДоходыОбороты.Партия,
	|	ИПДоходыОбороты.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПДоходыОбороты.ДокументОтгрузки,
	|	ИПДоходыОбороты.КоличествоОборот,
	|	ИПДоходыОбороты.ВыручкаОборот,
	|	ИПДоходыОбороты.НДСНачисленныйОборот,
	|	ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот КАК ВыручкаБезНДСОборот,
	|	ИПДоходыОбороты.СуммаОборот,
	|	ИПДоходыОбороты.НДСОборот,
	|	ИПДоходыОбороты.СуммаОборот + ИПДоходыОбороты.НДСОборот КАК СуммаСНДСОборот,
	|	ИПДоходыОбороты.КоличествоОплаченоПоставщикуОборот
	|ИЗ
	|	ВТИПДоходыОбороты КАК ИПДоходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПДоходыОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОборотов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОтгрузки");
	Отбор = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОтгрузки");
	
	Для каждого МПЗ Из СписокМПЗОплаченные Цикл
		
		ИзменениеКоличества = МПЗ.ИзменениеКоличества;
		ИзменениеСуммы      = МПЗ.ИзменениеСуммы;
		ИзменениеНДС        = МПЗ.ИзменениеНДС;
		
		Если ИзменениеКоличества < 0 Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
			ОборотыМПЗ = ТаблицаОборотов.Скопировать(Отбор);
			ОборотыМПЗ.Сортировать("ДатаДокументаОплаты Убыв, ДокументОплаты Убыв", Новый СравнениеЗначений);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.КоличествоОплаченоПоставщикуОборот = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеКоличестваОплаченоПоставщикуВСтроке = Мин(Оборот.КоличествоОплаченоПоставщикуОборот, -ИзменениеКоличества);
				Если ИзменениеКоличестваОплаченоПоставщикуВСтроке = Оборот.КоличествоОплаченоПоставщикуОборот Тогда
					ИзменениеКоличестваВСтроке      = Оборот.КоличествоОборот;
					ИзменениеВыручкиВСтроке         = Оборот.ВыручкаОборот;
					ИзменениеНДСНачисленногоВСтроке = Оборот.НДСНачисленныйОборот;
				Иначе
					КоэффициентОплаты = ИзменениеКоличестваОплаченоПоставщикуВСтроке/Оборот.КоличествоОплаченоПоставщикуОборот;
					ИзменениеКоличестваВСтроке      = Окр(Оборот.КоличествоОборот * КоэффициентОплаты, 3, 1);
					ИзменениеВыручкиВСтроке         = Окр(Оборот.ВыручкаОборот * КоэффициентОплаты, 2, 1);
					ИзменениеНДСНачисленногоВСтроке = ИзменениеВыручкиВСтроке - Окр(Оборот.ВыручкаБезНДСОборот * КоэффициентОплаты, 2, 1);
				КонецЕсли;
				
				// Изменилась цена, сторнируем старую запись
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Корректировка  = Истина;
				Доход.Количество     = -Оборот.КоличествоОборот;
				Доход.Выручка        = -Оборот.ВыручкаОборот;
				Доход.НДСНачисленный = -Оборот.НДСНачисленныйОборот;
				Доход.Сумма          = -Оборот.СуммаОборот;
				Доход.НДС            = -Оборот.НДСОборот;
				Доход.КоличествоОплаченоПоставщику = -Оборот.КоличествоОплаченоПоставщикуОборот;
				
				//Новую запись делаем с учетом изменений
				
				// Оплаченная часть МПЗ
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Количество     = Оборот.КоличествоОборот - ИзменениеКоличестваВСтроке;
				Доход.Выручка        = Оборот.ВыручкаОборот - ИзменениеВыручкиВСтроке;
				Доход.НДСНачисленный = Оборот.НДСНачисленныйОборот - ИзменениеНДСНачисленногоВСтроке;
				Доход.Сумма          = Оборот.СуммаОборот;
				Доход.НДС            = Оборот.НДСОборот;
				Доход.КоличествоОплаченоПоставщику = Оборот.КоличествоОплаченоПоставщикуОборот - ИзменениеКоличестваОплаченоПоставщикуВСтроке;
				
				// Неоплаченная часть МПЗ
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Количество     = ИзменениеКоличестваВСтроке;
				Доход.Выручка        = ИзменениеВыручкиВСтроке;
				Доход.НДСНачисленный = ИзменениеНДСНачисленногоВСтроке;
				
				Оборот.КоличествоОплаченоПоставщикуОборот = Оборот.КоличествоОплаченоПоставщикуОборот - ИзменениеКоличестваОплаченоПоставщикуВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
				ИзменениеКоличества = ИзменениеКоличества + ИзменениеКоличестваОплаченоПоставщикуВСтроке;
				
				Если ИзменениеКоличества = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИзменениеСуммы + ИзменениеНДС <> 0 Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
			ОборотыМПЗ = ТаблицаОборотов.Скопировать(Отбор);
			ОборотыМПЗ.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
			
			МассивКоэффициентов = ОборотыМПЗ.ВыгрузитьКолонку("СуммаСНДСОборот");
			
			РаспределеннаяСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеСуммы, МассивКоэффициентов, 2);
			РаспределенныйНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеНДС, МассивКоэффициентов, 2);
				
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.СуммаСНДСОборот = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеСуммыВСтроке      = ?(РаспределеннаяСумма <> Неопределено, РаспределеннаяСумма[Индекс], 0);
				ИзменениеНДСВСтроке        = ?(РаспределенныйНДС <> Неопределено, РаспределенныйНДС[Индекс], 0);
				ИзменениеСуммыСНДСВСтроке  = ИзменениеСуммыВСтроке + ИзменениеНДСВСтроке;
				
				Если ИзменениеСуммыСНДСВСтроке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Сторно
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Корректировка  = Истина;
				Доход.Количество     = -Оборот.КоличествоОборот;
				Доход.Выручка        = -Оборот.ВыручкаОборот;
				Доход.НДСНачисленный = -Оборот.НДСНачисленныйОборот;
				Доход.Сумма          = -Оборот.СуммаОборот;
				Доход.НДС            = -Оборот.НДСОборот;
				Доход.КоличествоОплаченоПоставщику = -Оборот.КоличествоОплаченоПоставщикуОборот;
				
				// Оборот с учетом изменений
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Количество     = Оборот.КоличествоОборот;
				Доход.Выручка        = Оборот.ВыручкаОборот;
				Доход.НДСНачисленный = Оборот.НДСНачисленныйОборот;
				Доход.Сумма          = Оборот.СуммаОборот + ИзменениеСуммыВСтроке;
				Доход.НДС            = Оборот.НДСОборот + ИзменениеНДСВСтроке;
				Доход.КоличествоОплаченоПоставщику = Оборот.КоличествоОплаченоПоставщикуОборот;
				
				Оборот.СуммаОборот     = Оборот.СуммаОборот + ИзменениеСуммыВСтроке;
				Оборот.НДСОборот       = Оборот.НДСОборот + ИзменениеНДСВСтроке;
				Оборот.СуммаСНДСОборот = Оборот.СуммаОборот + Оборот.НДСОборот;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДоходы;
	
КонецФункции

Процедура СформироватьДвиженияКорректировкиПоступленияМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкиПоступленияМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ДляПризнанияРасходовТребуетсяПолучениеДоходаИП = УчетнаяПолитика.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП(Реквизиты.Организация, Реквизиты.Период);
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		// Все исправления выполняются в одном налоговом периоде
		Реквизиты.Период = Мин(КонецГода(Реквизиты.ДокументПоступленияДата), Реквизиты.Период);
		МожноПризнатьРасход = Истина;
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		ПризнаватьРасходыПоОперациямПрошлогоГодаИП =
			УчетнаяПолитика.ПризнаватьРасходыПоОперациямПрошлогоГодаИП(Реквизиты.Организация, Реквизиты.Период);
		НалоговыйПериод = НалоговыйПериод(Реквизиты.Организация, Реквизиты.Период);
		МожноПризнатьРасход = МожноПризнатьРасходы(ПризнаватьРасходыПоОперациямПрошлогоГодаИП, Реквизиты.ДокументПоступленияДата, НалоговыйПериод)
			ИЛИ НЕ ДляПризнанияРасходовТребуетсяПолучениеДоходаИП;
	КонецЕсли;
	
	
	Параметры.ТаблицаПрочиеРасходы.Колонки.Добавить("Списание", Новый ОписаниеТипов("Булево"));
	Параметры.ТаблицаПрочиеРасходы.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Параметры.ТаблицаРБП.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ТаблицаМПЗОплаченные = ВыполнитьДвиженияКорректировкиПоступленияМПЗ("ИПМПЗ", Параметры.ТаблицаМПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
	ВыполнитьДвиженияКорректировкиПоступленияМПЗ("ИПИныеМатериальныеРасходы", Параметры.ТаблицаИМР, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
	ВыполнитьДвиженияКорректировкиПоступленияМПЗ("ИППрочиеРасходы", Параметры.ТаблицаПрочиеРасходы, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
	ВыполнитьДвиженияКорректировкиПоступленияМПЗ("ИПРБП", Параметры.ТаблицаРБП, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ);
	
	ТаблицаМПЗОплаченные.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	Отбор = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	ТаблицаМПЗОплаченныеСписанные = ТаблицаМПЗОплаченные.СкопироватьКолонки();
	
	// Первый проход - корректировка поступления
	Для Каждого МПЗ Из Параметры.ТаблицаМПЗОтгруженные Цикл
		
		Если МПЗ.Списание Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МПЗ.Корректировка И НЕ ЗначениеЗаполнено(МПЗ.ДокументОплаты) И МПЗ.Сумма + МПЗ.НДС > 0 Тогда
			// Зачет аванса
			ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
			НайденныеСтроки = ТаблицаМПЗОплаченные.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаВзаиморасчетов Из НайденныеСтроки Цикл
				
				Если СтрокаВзаиморасчетов.Сумма + СтрокаВзаиморасчетов.НДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОплаченноСНДС = Мин(МПЗ.Сумма + МПЗ.НДС, СтрокаВзаиморасчетов.Сумма + СтрокаВзаиморасчетов.НДС);
				
				Если ОплаченноСНДС = МПЗ.Сумма + МПЗ.НДС Тогда
					ОплаченноеКоличество     = МПЗ.Количество;
					ОплаченнаяСумма          = МПЗ.Сумма;
					ОплаченныйНДС            = МПЗ.НДС;
					ОплаченнаяВыручка        = МПЗ.Выручка;
					ОплаченныйНДСНачисленный = МПЗ.НДСНачисленный;
				Иначе
					ОплаченноеКоличество     = Окр(МПЗ.Количество * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 3);
					ОплаченнаяСумма          = Окр(МПЗ.Сумма * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 2);
					ОплаченныйНДС            = ОплаченноСНДС - ОплаченнаяСумма;
					ОплаченнаяВыручка        = Окр(МПЗ.Выручка * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 3);
					ОплаченнаяВыручкаБезНДС  = Окр((МПЗ.Выручка - МПЗ.НДСНачисленный) * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 3);
					ОплаченныйНДСНачисленный = ОплаченнаяВыручка - ОплаченнаяВыручкаБезНДС;
				КонецЕсли;
				
				СтрокаВзаиморасчетов.Сумма = СтрокаВзаиморасчетов.Сумма - ОплаченнаяСумма;
				СтрокаВзаиморасчетов.НДС   = СтрокаВзаиморасчетов.НДС - ОплаченныйНДС;
				
				Движения.ИПМПЗОтгруженные.Записывать = Истина;
				
				Движение = Движения.ИПМПЗОтгруженные.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				ЗаполнитьЗначенияСвойств(Движение, МПЗ);
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				
				Движение.ДокументОплаты = СтрокаВзаиморасчетов.ДокументОплаты;
				Движение.Количество     = ОплаченноеКоличество;
				Движение.Сумма          = ОплаченнаяСумма;
				Движение.НДС            = ОплаченныйНДС;
				Движение.Выручка        = ОплаченнаяВыручка;
				Движение.НДСНачисленный = ОплаченныйНДСНачисленный;
				
				НоваяСтрока = ТаблицаМПЗОплаченныеСписанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
				
				МПЗ.Количество     = МПЗ.Количество - ОплаченноеКоличество;
				МПЗ.Сумма          = МПЗ.Сумма - ОплаченнаяСумма;
				МПЗ.НДС            = МПЗ.НДС - ОплаченныйНДС;
				МПЗ.Выручка        = МПЗ.Выручка - ОплаченнаяВыручка;
				МПЗ.НДСНачисленный = МПЗ.НДСНачисленный - ОплаченныйНДСНачисленный;
				
				Если МПЗ.Сумма + МПЗ.НДС = 0 Тогда
					Прервать;
				Конецесли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если МПЗ.Количество <> 0 ИЛИ МПЗ.Сумма <> 0 ИЛИ МПЗ.НДС <> 0 ИЛИ МПЗ.Выручка <> 0 ИЛИ МПЗ.НДСНачисленный <> 0 Тогда
			Движения.ИПМПЗОтгруженные.Записывать = Истина;
			
			Движение = Движения.ИПМПЗОтгруженные.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
	// Второй проход - корректировка списания
	ТаблицаМПЗОплаченныеСписанные.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	Отбор = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	ТаблицаВыручки = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные");
	
	Для Каждого МПЗ Из Параметры.ТаблицаМПЗОтгруженные Цикл
		
		Если НЕ МПЗ.Списание Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МПЗ.Корректировка И НЕ ЗначениеЗаполнено(МПЗ.ДокументОплаты) И МПЗ.Сумма + МПЗ.НДС > 0 Тогда
			// Зачет аванса
			ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
			НайденныеСтроки = ТаблицаМПЗОплаченныеСписанные.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаВзаиморасчетов Из НайденныеСтроки Цикл
				
				Если СтрокаВзаиморасчетов.Сумма + СтрокаВзаиморасчетов.НДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОплаченноСНДС = Мин(МПЗ.Сумма + МПЗ.НДС, СтрокаВзаиморасчетов.Сумма + СтрокаВзаиморасчетов.НДС);
				
				Если ОплаченноСНДС = МПЗ.Сумма + МПЗ.НДС Тогда
					ОплаченноеКоличество     = МПЗ.Количество;
					ОплаченнаяСумма          = МПЗ.Сумма;
					ОплаченныйНДС            = МПЗ.НДС;
					ОплаченнаяВыручка        = МПЗ.Выручка;
					ОплаченныйНДСНачисленный = МПЗ.НДСНачисленный;
				Иначе
					ОплаченноеКоличество     = Окр(МПЗ.Количество * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 3);
					ОплаченнаяСумма          = Окр(МПЗ.Сумма * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 2, 1);
					ОплаченныйНДС            = ОплаченноСНДС - ОплаченнаяСумма;
					ОплаченнаяВыручка        = Окр(МПЗ.Выручка * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 2, 1);
					ОплаченнаяВыручкаБезНДС  = Окр((МПЗ.Выручка - МПЗ.НДСНачисленный) * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 2, 1);
					ОплаченныйНДСНачисленный = ОплаченнаяВыручка - ОплаченнаяВыручкаБезНДС;
				КонецЕсли;
				
				СтрокаВзаиморасчетов.Сумма = СтрокаВзаиморасчетов.Сумма - ОплаченнаяСумма;
				СтрокаВзаиморасчетов.НДС   = СтрокаВзаиморасчетов.НДС - ОплаченныйНДС;
				
				Движения.ИПМПЗОтгруженные.Записывать = Истина;
				
				Движение = Движения.ИПМПЗОтгруженные.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				ЗаполнитьЗначенияСвойств(Движение, МПЗ);
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				
				Движение.ДокументОплаты = СтрокаВзаиморасчетов.ДокументОплаты;
				Движение.Количество     = ОплаченноеКоличество;
				Движение.Сумма          = ОплаченнаяСумма;
				Движение.НДС            = ОплаченныйНДС;
				Движение.Выручка        = ОплаченнаяВыручка;
				Движение.НДСНачисленный = ОплаченныйНДСНачисленный;
				
				НоваяСтрока = ТаблицаВыручки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
				
				МПЗ.Количество     = МПЗ.Количество - ОплаченноеКоличество;
				МПЗ.Сумма          = МПЗ.Сумма - ОплаченнаяСумма;
				МПЗ.НДС            = МПЗ.НДС - ОплаченныйНДС;
				МПЗ.Выручка        = МПЗ.Выручка - ОплаченнаяВыручка;
				МПЗ.НДСНачисленный = МПЗ.НДСНачисленный - ОплаченныйНДСНачисленный;
				
				Если МПЗ.Сумма + МПЗ.НДС = 0 Тогда
					Прервать;
				Конецесли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если МПЗ.Количество <> 0 ИЛИ МПЗ.Сумма <> 0 ИЛИ МПЗ.НДС <> 0 ИЛИ МПЗ.Выручка <> 0 ИЛИ МПЗ.НДСНачисленный <> 0 Тогда
			Движения.ИПМПЗОтгруженные.Записывать = Истина;
			
			Движение = Движения.ИПМПЗОтгруженные.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МожноПризнатьРасход Тогда
		// Если для признания расходов требуется получение доходов,
		// корректировка расходов отражается по регистру ИПДоходы,
		// иначе - по регистру ИПМПЗ
		ИсключаяСвойстваДоходов = ?(ДляПризнанияРасходовТребуетсяПолучениеДоходаИП, "", "Корректировка");
		
		ТаблицаВыручки.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия, ДокументОтгрузки");
		Отбор = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия, ДокументОтгрузки");
		
		Для Каждого Доход Из Параметры.ТаблицаДоходы Цикл
			
			Если НЕ Доход.Корректировка И Доход.Количество > 0 И Доход.КоличествоОплаченоПоставщику = 0 Тогда
				// Зачет аванса
				ЗаполнитьЗначенияСвойств(Отбор, Доход);
				НайденныеСтроки = ТаблицаВыручки.НайтиСтроки(Отбор);
				
				Для Каждого СтрокаВзаиморасчетов Из НайденныеСтроки Цикл
					
					Если СтрокаВзаиморасчетов.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОплаченноеКоличество = Мин(Доход.Количество, СтрокаВзаиморасчетов.Количество);
					
					Если ОплаченноеКоличество = Доход.Количество Тогда
						ОплаченнаяВыручка        = Доход.Выручка;
						ОплаченныйНДСНачисленный = Доход.НДСНачисленный;
					Иначе
						КоэффициентОплаты = ОплаченноеКоличество / Доход.Количество;
						ОплаченнаяВыручка        = Окр(Доход.Выручка * КоэффициентОплаты, 2, 1);
						ОплаченнаяВыручкаБезНДС  = Окр((Доход.Выручка - Доход.НДСНачисленный) * КоэффициентОплаты, 2, 1);
						ОплаченныйНДСНачисленный = ОплаченнаяВыручка - ОплаченнаяВыручкаБезНДС;
					КонецЕсли;
					
					Если ОплаченноеКоличество = СтрокаВзаиморасчетов.Количество Тогда
						ОплаченнаяСумма = СтрокаВзаиморасчетов.Сумма;
						ОплаченныйНДС   = СтрокаВзаиморасчетов.НДС;
					Иначе
						КоэффициентОплаты = ОплаченноеКоличество / СтрокаВзаиморасчетов.Количество;
						ОплаченнаяСумма = Окр(СтрокаВзаиморасчетов.Сумма * КоэффициентОплаты, 2, 1);
						ОплаченныйНДС   = ОплаченноСНДС - ОплаченнаяСумма;
					КонецЕсли;
					
					СтрокаВзаиморасчетов.Количество     = СтрокаВзаиморасчетов.Количество - ОплаченноеКоличество;
					СтрокаВзаиморасчетов.Сумма          = СтрокаВзаиморасчетов.Сумма - ОплаченнаяСумма;
					СтрокаВзаиморасчетов.НДС            = СтрокаВзаиморасчетов.НДС - ОплаченныйНДС;
					СтрокаВзаиморасчетов.Выручка        = СтрокаВзаиморасчетов.Выручка - ОплаченнаяВыручка;
					СтрокаВзаиморасчетов.НДСНачисленный = СтрокаВзаиморасчетов.НДСНачисленный - ОплаченныйНДСНачисленный;
					
					Движения.ИПДоходы.Записывать = Истина;
					
					Движение = Движения.ИПДоходы.Добавить();
					ЗаполнитьЗначенияСвойств(Движение, Доход, , ИсключаяСвойстваДоходов);
					ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
					
					Движение.Количество                   = ОплаченноеКоличество;
					Движение.Выручка                      = ОплаченнаяВыручка;
					Движение.НДСНачисленный               = ОплаченныйНДСНачисленный;
					Движение.Сумма                        = ОплаченнаяСумма;
					Движение.НДС                          = ОплаченныйНДС;
					Движение.КоличествоОплаченоПоставщику = ОплаченноеКоличество;
					
					Доход.Количество     = Доход.Количество - ОплаченноеКоличество;
					Доход.Выручка        = Доход.Выручка - ОплаченнаяВыручка;
					Доход.НДСНачисленный = Доход.НДСНачисленный - ОплаченныйНДСНачисленный;
					
					Если Доход.Количество = 0 Тогда
						Прервать;
					Конецесли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Доход.Количество <> 0 ИЛИ Доход.Выручка <> 0 ИЛИ Доход.НДСНачисленный <> 0
				ИЛИ Доход.Сумма <> 0 ИЛИ Доход.НДС <> 0 ИЛИ Доход.КоличествоОплаченоПоставщику <> 0 Тогда
				
				Движения.ИПДоходы.Записывать = Истина;
				
				Движение = Движения.ИПДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Доход, , ИсключаяСвойстваДоходов);
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкиПоступленияМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаРеквизитов)
	Перем ТаблицаМПЗ, ТаблицаИМР, ТаблицаПрочиеРасходы, ТаблицаРБП, ТаблицаМПЗОтгруженные, ТаблицаДоходы;
	
	СтруктураТаблицМПЗ.Свойство("ТаблицаМПЗ",            ТаблицаМПЗ);
	СтруктураТаблицМПЗ.Свойство("ТаблицаИМР",            ТаблицаИМР);
	СтруктураТаблицМПЗ.Свойство("ТаблицаПрочиеРасходы",  ТаблицаПрочиеРасходы);
	СтруктураТаблицМПЗ.Свойство("ТаблицаРБП",            ТаблицаРБП);
	СтруктураТаблицМПЗ.Свойство("ТаблицаМПЗОтгруженные", ТаблицаМПЗОтгруженные);
	СтруктураТаблицМПЗ.Свойство("ТаблицаДоходы",         ТаблицаДоходы);
	
	Параметры = Новый Структура;
	
	// Подготовка таблиц Параметры.ТаблицаМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"					// <ДокументСсылка.*> -документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> -документ оплаты
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Корректировка,"			// <Булево> - признак сторно
		+ "Списание";				// <Булево> - признак корректировки стоимости списания
	
	Параметры.Вставить("ТаблицаМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
	
	// Подготовка таблиц Параметры.ТаблицаИМР
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "СтатьяЗатрат,"			// <СправочникСсылка.*> - статья затрат
		+ "Партия,"					// <ДокументСсылка.*> -документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> -документ оплаты
		+ "МПЗ,"					// <СправочникСсылка.*> - номенклатура доп. расходов
		+ "ПартияМПЗ,"				// <ДокументСсылка.*> - партия доп. расходов
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Корректировка,"			// <Булево> - признак сторно
		+ "Списание";				// <Булево> - признак корректировки стоимости списания
	
	Параметры.Вставить("ТаблицаИМР", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаИМР, СписокОбязательныхКолонок));
	
	// Подготовка таблиц Параметры.ТаблицаПрочиеРасходы
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "СтатьяЗатрат,"			// <СправочникСсылка.*> - статья затрат
		+ "РасчетныйДокумент,"		// <ДокументСсылка.*> -документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> -документ оплаты
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "Корректировка,"			// <Булево> - признак сторно
		+ "НДС";					// <Число,15,2> - сумма НДС в рублях
	
	Параметры.Вставить("ТаблицаПрочиеРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПрочиеРасходы, СписокОбязательныхКолонок));
	
	// Подготовка таблиц Параметры.ТаблицаРБП
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидРасхода,"				// <СправочникСсылка.*> - статья затрат
		+ "Партия,"					// <ДокументСсылка.*> -документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> -документ оплаты
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Корректировка,"			// <Булево> - признак сторно
		+ "Списание";				// <Булево> - признак корректировки стоимости списания
	
	Параметры.Вставить("ТаблицаРБП", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРБП, СписокОбязательныхКолонок));
	
	// Подготовка таблиц Параметры.ТаблицаМПЗОтгруженные
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"					// <ДокументСсылка.*> -документ оприходования
		+ "ДокументОплаты,"			// <ДокументСсылка.*> -документ оплаты
		+ "ДокументОтгрузки,"		// <ДокументСсылка.*> -документ отгрузки
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Выручка,"				// <Число,15,2> - выручка в рублях
		+ "НДСНачисленный,"			// <Число,15,2> - НДС начисленный в рублях
		+ "Корректировка,"			// <Булево> - признак сторно
		+ "Списание";				// <Булево> - признак корректировки стоимости списания
	
	Параметры.Вставить("ТаблицаМПЗОтгруженные", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗОтгруженные, СписокОбязательныхКолонок));
	
	// Подготовка таблиц Параметры.ТаблицаДоходы
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"							// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"					// <СправочникСсылка.*> - номенклатура МПЗ
		+ "ДокументОтгрузки,"				// <ДокументСсылка.*> -документ отгрузки
		+ "Партия,"							// <ДокументСсылка.*> -документ оприходования
		+ "ДокументОплаты,"					// <ДокументСсылка.*> -документ оплаты
		+ "Количество,"						// <Число,15,3> - количество
		+ "Выручка,"						// <Число,15,2> - выручка в рублях
		+ "НДСНачисленный,"					// <Число,15,2> - НДС начисленный в рублях
		+ "Сумма,"							// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"							// <Число,15,2> - сумма НДС в рублях
		+ "КоличествоОплаченоПоставщику,"	// <Число,15,3> - количество оплаченное поставщику
		+ "Корректировка";					// <Булево> - признак сторно
	
	Параметры.Вставить("ТаблицаДоходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДоходы, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"	// <ДокументСсылка.*> - документ оплаты
		+ "СуммаРуб";			// <Число,15,2> - сумма оплаты в рублях с НДС
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"				// <Булево> - организация
		+ "ВидОперации,"				// <ПеречислениеСсылка.ВидыОперацийИсправленияПоступленияРеализации> - вид операции
		+ "ДокументПоступленияСсылка,"	// <ДокументСсылка.*> - первоначальный документ поступления
		+ "ДокументПоступленияДата";	// <Дата> - дата первоначального документа поступления
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ВыполнитьДвиженияКорректировкиПоступленияМПЗ(ИмяРегистра, ТаблицаМПЗ, ТаблицаВзаиморасчетов, Реквизиты, Движения, Отказ)
	
	КоллекцияДвижений = Движения[ИмяРегистра];
	
	ТаблицаМПЗОплаченные = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления(ИмяРегистра);
	ТаблицаМПЗОплаченныеОтгруженные = ТаблицаМПЗОплаченные.СкопироватьКолонки();
	
	ЕстьКоличество = (ИмяРегистра = "ИПМПЗ" ИЛИ ИмяРегистра = "ИПИныеМатериальныеРасходы");
	
	// Первый проход - корректировка поступления
	Для Каждого МПЗ Из ТаблицаМПЗ Цикл
		
		Если МПЗ.Списание Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МПЗ.Корректировка И НЕ ЗначениеЗаполнено(МПЗ.ДокументОплаты) И МПЗ.Сумма + МПЗ.НДС > 0 Тогда
			// Зачет аванса
			Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
				
				Если СтрокаВзаиморасчетов.СуммаРуб = 0
					ИЛИ СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ОплаченноСНДС = Мин(МПЗ.Сумма + МПЗ.НДС, СтрокаВзаиморасчетов.СуммаРуб);
				
				Если ОплаченноСНДС = МПЗ.Сумма + МПЗ.НДС Тогда
					ОплаченноеКоличество = МПЗ.Количество;
					ОплаченнаяСумма      = МПЗ.Сумма;
					ОплаченныйНДС        = МПЗ.НДС;
				Иначе
					ОплаченноеКоличество = Окр(МПЗ.Количество * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 3);
					ОплаченнаяСумма      = Окр(МПЗ.Сумма * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 2);
					ОплаченныйНДС        = ОплаченноСНДС - ОплаченнаяСумма;
				КонецЕсли;
				
				СтрокаВзаиморасчетов.СуммаРуб = СтрокаВзаиморасчетов.СуммаРуб - ОплаченноСНДС;
				
				КоллекцияДвижений.Записывать = Истина;
				
				Движение = КоллекцияДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, МПЗ);
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				Движение.ДокументОплаты = СтрокаВзаиморасчетов.ДокументРасчетов;
				Движение.Сумма      = ОплаченнаяСумма;
				Движение.НДС        = ОплаченныйНДС;
				Если ЕстьКоличество Тогда
					Движение.Количество = ОплаченноеКоличество;
				КонецЕсли;
				
				НовыеМПЗОплаченные = ТаблицаМПЗОплаченные.Добавить();
				ЗаполнитьЗначенияСвойств(НовыеМПЗОплаченные, Движение);
				
				МПЗ.Количество = МПЗ.Количество - ОплаченноеКоличество;
				МПЗ.Сумма      = МПЗ.Сумма - ОплаченнаяСумма;
				МПЗ.НДС        = МПЗ.НДС - ОплаченныйНДС;
				
				Если МПЗ.Сумма + МПЗ.НДС = 0 Тогда
					Прервать;
				Конецесли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если МПЗ.Количество <> 0 ИЛИ МПЗ.Сумма <> 0 ИЛИ МПЗ.НДС <> 0 Тогда
			
			КоллекцияДвижений.Записывать = Истина;
			
			Движение = КоллекцияДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяРегистра = "ИППрочиеРасходы" Тогда
		Возврат ТаблицаМПЗОплаченныеОтгруженные;
	КонецЕсли;
	
	// Второй проход - корректировка списания
	Отбор = Новый Структура;
	Если ТаблицаМПЗОплаченные.Количество() > 0 Тогда
		
		ПоляОтбора = "";
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если Измерение.Имя = "Организация" ИЛИ Измерение.Имя = "ДокументОплаты" Тогда
				Продолжить;
			КонецЕсли;
			ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ", ") + Измерение.Имя;
			Отбор.Вставить(Измерение.Имя);
		КонецЦикла;
		
		ТаблицаМПЗОплаченные.Индексы.Добавить(ПоляОтбора);
		
	КонецЕсли;
	
	Для Каждого МПЗ Из ТаблицаМПЗ Цикл
		
		Если НЕ МПЗ.Списание Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МПЗ.ДокументОплаты) И МПЗ.Сумма + МПЗ.НДС > 0 Тогда
			// Зачет аванса
			ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
			НайденныеСтроки = ТаблицаМПЗОплаченные.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаВзаиморасчетов Из НайденныеСтроки Цикл
				
				Если СтрокаВзаиморасчетов.Сумма + СтрокаВзаиморасчетов.НДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОплаченноСНДС = Мин(МПЗ.Сумма + МПЗ.НДС, СтрокаВзаиморасчетов.Сумма + СтрокаВзаиморасчетов.НДС);
				
				Если ОплаченноСНДС = МПЗ.Сумма + МПЗ.НДС Тогда
					ОплаченноеКоличество = МПЗ.Количество;
					ОплаченнаяСумма      = МПЗ.Сумма;
					ОплаченныйНДС        = МПЗ.НДС;
				Иначе
					ОплаченноеКоличество = Окр(МПЗ.Количество * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 3);
					ОплаченнаяСумма      = Окр(МПЗ.Сумма * ОплаченноСНДС / (МПЗ.Сумма + МПЗ.НДС), 2);
					ОплаченныйНДС        = ОплаченноСНДС - ОплаченнаяСумма;
				КонецЕсли;
				
				СтрокаВзаиморасчетов.Сумма = СтрокаВзаиморасчетов.Сумма - ОплаченнаяСумма;
				СтрокаВзаиморасчетов.НДС   = СтрокаВзаиморасчетов.НДС - ОплаченныйНДС;
				
				КоллекцияДвижений.Записывать = Истина;
				
				Движение = КоллекцияДвижений.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				ЗаполнитьЗначенияСвойств(Движение, МПЗ);
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				Движение.ДокументОплаты = СтрокаВзаиморасчетов.ДокументОплаты;
				Движение.Количество = ОплаченноеКоличество;
				Движение.Сумма      = ОплаченнаяСумма;
				Движение.НДС        = ОплаченныйНДС;
				
				НовыеМПЗОплаченные = ТаблицаМПЗОплаченныеОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(НовыеМПЗОплаченные, Движение);
				
				МПЗ.Количество = МПЗ.Количество - ОплаченноеКоличество;
				МПЗ.Сумма      = МПЗ.Сумма - ОплаченнаяСумма;
				МПЗ.НДС        = МПЗ.НДС - ОплаченныйНДС;
				
				Если МПЗ.Сумма + МПЗ.НДС = 0 Тогда
					Прервать;
				Конецесли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если МПЗ.Количество <> 0 ИЛИ МПЗ.Сумма <> 0 ИЛИ МПЗ.НДС <> 0 Тогда
			
			КоллекцияДвижений.Записывать = Истина;
			
			Движение = КоллекцияДвижений.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМПЗОплаченныеОтгруженные;

КонецФункции

#КонецОбласти

#Область ВыпускПродукции

Функция ПодготовитьТаблицуПоступлениеПродукции(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПоступлениеПродукции(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокПродукции	= Параметры.СписокПродукции;
	СписокПродукции.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокПродукции.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокПродукции.Колонки.Продукция.Имя           = "Номенклатура";
	СписокПродукции.Колонки.КоличествоПродукции.Имя = "Количество";
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, СчетУчета");
	
	Для каждого Продукция Из СписокПродукции Цикл
		
		ВидМПЗ = ВидМПЗПоСчетуУчета(Продукция.СчетУчетаПродукции);
		Если ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы ИЛИ ВидМПЗ = Неопределено Тогда
			ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
		КонецЕсли;
		
		СтруктураПараметров.НоменклатурнаяГруппа = Продукция.НоменклатурнаяГруппа;
		СтруктураПараметров.СчетУчета            = Продукция.СчетУчетаПродукции;
		
		Продукция.ВидМПЗ				= ВидМПЗ;
		Продукция.НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		Продукция.ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат СписокПродукции;

КонецФункции

Функция ПодготовитьПараметрыТаблицыПоступлениеПродукции(ТаблицаМПЗ, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокПродукции
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа продукции
		+ "Продукция,"				// <СправочникСсылка.*> - продукция
		+ "СчетУчетаПродукции,"		// <ПланСчетовСсылка.Хозрасчетный> - счет учета продукции
		+ "КоличествоПродукции";	// <Число,15,3> - количество продукции
		
	Параметры.Вставить("СписокПродукции", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоступлениеПродукции(ТаблицаПродукция, ТаблицаСтоимость, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПродукция)
		И Не ЗначениеЗаполнено(ТаблицаСтоимость)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеПродукции(ТаблицаПродукция, ТаблицаСтоимость, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокПродукции    = Параметры.СписокПродукции;
	СтоимостьПродукции = Параметры.СтоимостьПродукции;
	
	СписокПродукции.Свернуть("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура", "Количество");
	
	// Распределение количества продукции по документам оплаты
	СтоимостьПродукции.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ОтборПродукции = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура");
	СтоимостьПродукции.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура");
	
	МассивКоэффициентов = Новый Массив;
	
	Для каждого МПЗ из СписокПродукции Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПродукции, МПЗ);
		ДокументыОплаты = СтоимостьПродукции.НайтиСтроки(ОтборПродукции);
		
		МассивКоэффициентов.Очистить();
		Для каждого ДокументОплаты из ДокументыОплаты Цикл
			МассивКоэффициентов.Добавить(ДокументОплаты.Сумма + ДокументОплаты.НДС);
		КонецЦикла;
		
		РаспределенноеКоличество = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(МПЗ.Количество, МассивКоэффициентов, 3);
		Если РаспределенноеКоличество <> Неопределено Тогда
			Для Индекс = 0 По ДокументыОплаты.ВГраница() Цикл
				ДокументыОплаты[Индекс].Количество = РаспределенноеКоличество[Индекс];
			КонецЦикла;
		Иначе
			// Поступление продукции по нулевой себестоимости
			НоваяСтрока = СтоимостьПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, МПЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в результате распределения стоимости материалов по продукции количество в результате округления
	// бедут нулевым, такую стоимость необходимо "перебросить" на другую подходящую продукцию
	
	СтоимостьПродукции.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, ДокументОплаты");
	СтоимостьПродукции.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ");
	ОтборДокументОплаты = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, ДокументОплаты");
	Отбор               = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ");
	
	Для каждого МПЗ из СтоимостьПродукции Цикл
		
		Если МПЗ.Количество <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МПЗ.Сумма = 0 И МПЗ.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ОС
				ИЛИ МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.НМА
				ИЛИ МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.КапитальныеВложения Тогда
			Продолжить;
		КонецЕсли;
		
		// Перенос стоимости на другую продукцию с не нулевым количеством
		// 1. Ищем строки с тем же документом оплаты
		ЗаполнитьЗначенияСвойств(ОтборДокументОплаты, МПЗ);
		НайденныеСтроки	= СтоимостьПродукции.НайтиСтроки(ОтборДокументОплаты);
		
		Для каждого Продукция из НайденныеСтроки Цикл
			
			Если Продукция.Количество > 0 Тогда
				Продукция.Сумма	= Продукция.Сумма + МПЗ.Сумма;
				Продукция.НДС	= Продукция.НДС + МПЗ.НДС;
				МПЗ.Сумма	= 0;
				МПЗ.НДС		= 0;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МПЗ.Сумма = 0 И МПЗ.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// 2. Ищем строки с любым документом оплаты
		ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
		НайденныеСтроки	= СтоимостьПродукции.НайтиСтроки(Отбор);
		
		Для каждого Продукция из НайденныеСтроки Цикл
			
			Если НЕ ЗначениеЗаполнено(МПЗ.ДокументОплаты) = ЗначениеЗаполнено(Продукция.ДокументОплаты) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Продукция.Количество > 0 Тогда
				Продукция.Сумма	= Продукция.Сумма + МПЗ.Сумма;
				Продукция.НДС	= Продукция.НДС + МПЗ.НДС;
				МПЗ.Сумма	= 0;
				МПЗ.НДС		= 0;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МПЗ.Сумма = 0 И МПЗ.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Продукция из НайденныеСтроки Цикл
			
			Если Продукция.Количество > 0 Тогда
				Продукция.Сумма	= Продукция.Сумма + МПЗ.Сумма;
				Продукция.НДС	= Продукция.НДС + МПЗ.НДС;
				МПЗ.Сумма	= 0;
				МПЗ.НДС		= 0;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
	Для каждого МПЗ из СтоимостьПродукции Цикл
		
		Если (МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы)
			ИЛИ (МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы) Тогда 
			
			Если МПЗ.КоличествоСписано = 0 И МПЗ.Сумма = 0 И МПЗ.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Прочие расходы относим на ИМР, потому что списанные МПЗ
			// не могут относиться к прочим расходам
			
			Движения.ИПИныеМатериальныеРасходы.Записывать	= Истина;
			
			Движение	= Движения.ИПИныеМатериальныеРасходы.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
			Движение.СтатьяЗатрат	= МПЗ.Номенклатура;
			Движение.Партия			= Реквизиты.Регистратор;
			Движение.Количество		= МПЗ.КоличествоСписано;
			
		Иначе
			
			Если МПЗ.Количество = 0 И МПЗ.Сумма = 0 И МПЗ.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если МПЗ.Количество = 0
					И МПЗ.ВидМПЗ <> Перечисления.ВидыМПЗ.ОС
					И МПЗ.ВидМПЗ <> Перечисления.ВидыМПЗ.НМА
					И МПЗ.ВидМПЗ <> Перечисления.ВидыМПЗ.КапитальныеВложения Тогда
				Продолжить;
			КонецЕсли;
			
			Движения.ИПМПЗ.Записывать	= Истина;
			
			Движение	= Движения.ИПМПЗ.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
			Движение.ВидМПЗ			= МПЗ.ВидМПЗ;
			Движение.Номенклатура	= МПЗ.Номенклатура;
			Движение.Партия			= Реквизиты.Регистратор;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеПродукции(ТаблицаПродукция, ТаблицаСтоимость, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокПродукции
	
	СписокОбязательныхКолонок = ""
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура продукции
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "Количество";					// <Число,15,3> - количество продукции
		
	Параметры.Вставить("СписокПродукции", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПродукция, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СтоимостьПродукции
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"				// <СправочникСсылка.*>
		+ "ДокументОплаты,"				// <ДокументСсылка> - документ оплаты
		+ "КоличествоСписано,"			// <Число,15,3> - количество списанных материалов
		+ "Сумма,"						// <Число,15,2> - стоимость продукции в рублях без НДС
		+ "НДС";						// <Число,15,2> - сумма НДС в рублях 
		
	Параметры.Вставить("СтоимостьПродукции", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтоимость, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область БезвозмезднаяПередача

Функция ПодготовитьТаблицуБезвозмезднаяПередачаМПЗ(ТаблицаТоваров, ТаблицаРеквизитов, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыБезвозмезднаяПередачаМПЗ(ТаблицаТоваров, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаБезвозмезднойПередачиМПЗ = ПодготовитьТаблицуСторноПоступлениеМПЗ(Реквизиты, СписокМПЗ, Отказ);
	
	Возврат ТаблицаБезвозмезднойПередачиМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыБезвозмезднаяПередачаМПЗ(ТаблицаТоваров, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"			// <Строка> - имя списка в документе
		+ "НомерСтроки,"		// <Число> - номер строки в списка 
		+ "Номенклатура,"		// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"				// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
		+ "Количество";			// <Число,15,3> - возвращаемое количество
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоваров, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"		// <СправочникСсылка.Организации>
		+ "ВидОперации";		// <Перечисления.БезвозмезднаяПередача> - Вид операции документа "Передача товаров"
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияБезвозмезднаяПередачаМПЗ(ТаблицаМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыБезвозмезднаяПередачаМПЗ(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПередачаТоваров.БезвозмезднаяПередача Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвиженияСторноПоступлениеМПЗ(СписокМПЗ, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыБезвозмезднаяПередачаМПЗ(ТаблицаМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС";					// <Число,15,2> - сумма НДС в рублях
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации> - организация
		+ "ВидОперации";			// <Перечисления.БезвозмезднаяПередача> - Вид операции документа "Передача товаров"
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ВозвратМПЗПоставщику

Функция ПодготовитьТаблицуВозвратаМПЗПоставщику(ТаблицаВозврата, ТаблицаРеквизитов, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВозврата)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВозвратаМПЗПоставщику(ТаблицаВозврата, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	ТаблицаВозвратаМПЗПоставщику = ПодготовитьТаблицуСторноПоступлениеМПЗ(Реквизиты, СписокМПЗ, Отказ);
	
	Возврат ТаблицаВозвратаМПЗПоставщику;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыВозвратаМПЗПоставщику(ТаблицаВозврата, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"			// <Строка> - имя списка в документе
		+ "НомерСтроки,"		// <Число> - номер строки в списка 
		+ "Номенклатура,"		// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"				// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный> - счет учета, с которого списывается номенклатура
		+ "Количество";			// <Число,15,3> - возвращаемое количество
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозврата, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";		// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВозвратМПЗПоставщику(ТаблицаМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыВозвратМПЗПоставщику(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;

	СформироватьДвиженияСторноПоступлениеМПЗ(СписокМПЗ, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратМПЗПоставщику(ТаблицаМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС";					// <Число,15,2> - сумма НДС в рублях
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСторноПоступлениеМПЗ(СписокМПЗ, Реквизиты, Движения, Отказ)

	Движения.ИПМПЗ.Записывать = Истина;
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма      = - МПЗ.Сумма;
		Движение.НДС        = - МПЗ.НДС;
		Движение.Количество = - МПЗ.Количество;
		
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуСторноПоступлениеМПЗ(Реквизиты, СписокМПЗ, Отказ) 
	
	СписокМПЗ.Колонки.Добавить("ВидМПЗ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	
	ВГраница = СписокМПЗ.Количество() - 1;
	Для Индекс = 0 По ВГраница Цикл
		
		ТекущийИндекс = ВГраница - Индекс;
		
		ВидМПЗ = ВидМПЗПоСчетуУчета(СписокМПЗ[ТекущийИндекс].СчетУчета);
		
		Если ЗначениеЗаполнено(ВидМПЗ) Тогда
			СписокМПЗ[ТекущийИндекс].ВидМПЗ = ВидМПЗ;
		Иначе
			СписокМПЗ.Удалить(ТекущийИндекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокМПЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("ВидМПЗ",       "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("Партия",       "Партия");
		
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",     ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "ВидМПЗ", Истина));
	Запрос.УстановитьПараметр("СписокНоменклатуры", ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "Номенклатура", Истина));
	Запрос.УстановитьПараметр("СписокПартий",       ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "Партия", Истина));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.ВидМПЗ,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ИПМПЗОстатки.КоличествоОстаток,
	|	ИПМПЗОстатки.СуммаОстаток,
	|	ИПМПЗОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТИПМПЗОстатки
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&Период,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И Организация = &Организация
	|				И Партия В (&СписокПартий)
	|				И ВидМПЗ В (&СписокВидовМПЗ)) КАК ИПМПЗОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗ.НоменклатурнаяГруппа,
	|	ПРЕДСТАВЛЕНИЕ(ИПМПЗ.НоменклатурнаяГруппа.Представление) КАК НоменклатурнаяГруппаПредставление,
	|	ИПМПЗ.ХарактерДеятельности,
	|	ПРЕДСТАВЛЕНИЕ(ИПМПЗ.ХарактерДеятельности) КАК ХарактерДеятельностиПредставление,
	|	ИПМПЗ.ВидМПЗ,
	|	ИПМПЗ.Номенклатура,
	|	ИПМПЗ.Партия,
	|	ИПМПЗ.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ИПМПЗ.КоличествоОстаток КАК Количество,
	|	ИПМПЗ.СуммаОстаток КАК Сумма,
	|	ИПМПЗ.НДСОстаток КАК НДС
	|ИЗ
	|	ВТИПМПЗОстатки КАК ИПМПЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПМПЗ.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	СписокМПЗ.Индексы.Добавить("ВидМПЗ, Номенклатура, Партия");
	
	ТаблицаВозвратаМПЗПоставщику = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗ");
	ТаблицаВозвратаМПЗПоставщику.Колонки.Удалить("Организация");
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОстатков, "НомерСтроки");
	ТаблицаОстатков.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОстатков.Индексы.Добавить("ВидМПЗ, Номенклатура, Партия");
	Отбор = Новый Структура("ВидМПЗ, Номенклатура, Партия");
	
	КонтролироватьОстаток = НЕ БухгалтерскийУчетПереопределяемый.ОтключитьКонтрольОтрицательныхОстатков();
	
	ОсновнаяНоменклатурнаяГруппа = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойХарактерДеятельности = УчетнаяПолитика.ОсновнойХарактерДеятельности(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Количество = МПЗ.Количество;
		Если Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
		
		НайденныеСтроки = ТаблицаОстатков.Скопировать(Отбор);
		НайденныеСтроки.Сортировать("ДатаДокументаОплаты, ДокументОплаты, НоменклатурнаяГруппаПредставление, ХарактерДеятельностиПредставление",
			Новый СравнениеЗначений);
		
		Для Каждого Остаток Из НайденныеСтроки Цикл
			
			Количество = Мин(МПЗ.Количество, Остаток.Количество);
			Если Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаВозвратаМПЗПоставщику.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Остаток);
			НоваяСтрока.Количество = Количество;
			
			Если Количество = Остаток.Количество Тогда
				НоваяСтрока.Сумма = Остаток.Сумма;
				НоваяСтрока.НДС   = Остаток.НДС;
			Иначе
				Коэффициент = Количество / Остаток.Количество;
				НоваяСтрока.Сумма = Окр(Остаток.Сумма * Коэффициент, 2, 1);
				НоваяСтрока.НДС   = Окр((Остаток.Сумма + Остаток.НДС) * Коэффициент, 2, 1) - НоваяСтрока.Сумма;
			КонецЕсли;
			
			Остаток.Количество = Остаток.Количество - НоваяСтрока.Количество;
			Остаток.Сумма      = Остаток.Сумма - НоваяСтрока.Сумма;
			Остаток.НДС        = Остаток.НДС - НоваяСтрока.НДС;
			ЗаполнитьЗначенияСвойств(ТаблицаОстатков.Найти(Остаток.НомерСтроки, "НомерСтроки"), Остаток, "Количество, Сумма, НДС");
			
			МПЗ.Количество = МПЗ.Количество - НоваяСтрока.Количество;
			Если МПЗ.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МПЗ.Количество > 0 Тогда
			// Часть возвращаемого количества не распределилась по партиям
			Если ЗначениеЗаполнено(МПЗ.Партия) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не списано ""%1"" ед. по номенклатуре ""%2"", так как в учете индивидуального предпринимателя не найдены остатки по партии ""%3""'"), 
					МПЗ.Количество, МПЗ.Номенклатура, МПЗ.Партия);
				Поле = МПЗ.ИмяСписка + "[" + Формат(МПЗ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Реквизиты.Регистратор, Поле, "Объект", Отказ);
			Иначе
				// Партия по данным бухгалтерского учета не определена
				Если НЕ КонтролироватьОстаток Тогда
					НоваяСтрока = ТаблицаВозвратаМПЗПоставщику.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, МПЗ);
					НоваяСтрока.НоменклатурнаяГруппа = ОсновнаяНоменклатурнаяГруппа;
					НоваяСтрока.ХарактерДеятельности = ОсновнойХарактерДеятельности;
					НоваяСтрока.Количество           = Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;


	Возврат ТаблицаВозвратаМПЗПоставщику;
КонецФункции

#КонецОбласти

#Область ОприходованиеТоваров

Функция ПодготовитьТаблицуОприходованияТоваров(ТаблицаТоваров, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не Реквизиты.ПринятиеКналоговомуУчету Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыОприходованияТоваров(ТаблицаТоваров, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокТоваров = Параметры.СписокТоваров;
	СписокТоваров.Колонки.Добавить("ВидМПЗ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокТоваров.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокТоваров.Колонки.Добавить("РеквизитыДокументаОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СтруктураПараметров = Новый Структура("НоменклатурнаяГруппа, СчетУчета");
	СтруктураПараметров.Вставить("ТипСклада", Реквизиты.ТипСклада);
	СтруктураПараметров.Вставить("СтатьяЗатрат", Реквизиты.СтатьяДоходов);
	СтруктураПараметров.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", Реквизиты.ВидДеятельностиДляНалоговогоУчетаЗатрат);
	
	Для каждого МПЗ Из СписокТоваров Цикл
		
		ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
		Если ВидМПЗ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
		
		МПЗ.ВидМПЗ = ВидМПЗ;
		МПЗ.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		МПЗ.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат СписокТоваров;
КонецФункции

Функция ПодготовитьПараметрыТаблицыОприходованияТоваров(ТаблицаТоваров, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокТоваров
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа," // <СправочникСсылка.НоменклатурныеГруппы>
		+ "Номенклатура,"         // <СправочникСсылка.*> - номенклатура
		+ "Партия,"               // <ДокументСсылка.*> - документ поступления МПЗ
		+ "ДокументОплаты,"       // <ДокументСсылка.*> - документ оплаты
		+ "Количество,"           // <Число,15,3> - количество
		+ "Сумма,"                // <Число,15,2> - сумма в рублях без НДС
		+ "СчетУчета";            // <ПланСчетовСсылка.Хозрасчетный> - счет учета номенклатуры
		
	Параметры.Вставить("СписокТоваров", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоваров, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"        // <Дата> - период движений - дата документа
		+ "Регистратор,"   // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"   // <СправочникСсылка.Организации> - организация
		+ "ТипСклада,"     // <ПеречислениеСсылка.ТипыСкладов> - тип склада
		+ "СтатьяДоходов," // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья доходов
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат," // <ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат>
		+ "ПринятиеКналоговомуУчету";                // <Булево> - признак принятия к НУ
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияОприходованиеТоваров(ТаблицаТоваров, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	 
	Параметры = ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТоваров, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокТоваров = Параметры.СписокТоваров;
	
	Если ЗначениеЗаполнено(Реквизиты.СтатьяДоходов) Тогда
		Движения.ИППрочиеДоходы.Записывать = Истина;
	КонецЕсли;
	
	Движения.ИПМПЗ.Записывать = Истина;
	
	Для каждого Товар Из СписокТоваров Цикл
		
		Если Товар.Количество = 0 И Товар.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.СтатьяДоходов) Тогда
			Движение = Движения.ИППрочиеДоходы.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Товар);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		КонецЕсли;
		
		Движение = Движения.ИПМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Товар);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОприходованиеТоваров(ТаблицаТоваров, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокТоваров
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура
		+ "Партия,"						// <ДокументСсылка.*> - документ поступления МПЗ
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"					// <Число,15,3>
		+ "Сумма";						// <Число,15,2>
		
	Параметры.Вставить("СписокТоваров", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоваров, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"				// <СправочникСсылка.Организации> - организация
		+ "СтатьяДоходов";				// <СправочникСсылка.ПрочиеДоходыИРасходы> - статья доходов
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СписаниеМПЗ

Функция ПодготовитьТаблицуСписанныеМПЗ(ТаблицаСписанныеМПЗ, ТаблицаВыручка, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не (ЗначениеЗаполнено(ТаблицаСписанныеМПЗ) Или ЗначениеЗаполнено(ТаблицаВыручка)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСписанныеМПЗ(ТаблицаСписанныеМПЗ, ТаблицаВыручка, ТаблицаРеквизитов);
	Реквизиты     = Параметры.Реквизиты[0];
	СписокМПЗ     = Параметры.СписокМПЗ;
	СписокВыручки = Параметры.СписокВыручки; // Таблица выручки от реализации
	
	ВестиУчетПоВидамДеятельностиИП = УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период);
	ОсновнаяНоменклатурнаяГруппа   = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",     Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗ.Колонки.Добавить("Продукция",                Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокМПЗ.Колонки.Добавить("СчетЗатрат",               Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СписокМПЗ.Колонки.Добавить("ПринятиеКналоговомуУчету", Новый ОписаниеТипов("Булево"));
	СписокМПЗ.Колонки.Добавить("СтатьяЗатрат",             Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	СписокМПЗ.Колонки.Добавить("ВидРасходовНУ",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	СписокМПЗ.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	СписокМПЗ.Колонки.Добавить("Выручка",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗ.Колонки.Добавить("НДСНачисленный",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СписокМПЗ.Колонки.КорСчетСписания.Имя = "СчетДоходов";
	
	СписокВыручки.Колонки.Субконто.Имя    = "Субконто1";
	СписокВыручки.Колонки.СуммаРуб.Имя    = "Выручка";
	СписокВыручки.Колонки.СуммаНДСРуб.Имя = "НДСНачисленный";
	
	// Распределяем выручку по партиям, база распределения - Количество
	СписокМПЗ.Индексы.Добавить("НомерСтроки, Номенклатура");
	ОтборМПЗ = Новый Структура("НомерСтроки, Номенклатура");
	
	Для каждого СтрокаВыручки из СписокВыручки Цикл
		
		Если СтрокаВыручки.ЭтоКомиссия ИЛИ СтрокаВыручки.ЭтоУслуга Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборМПЗ, СтрокаВыручки);
		
		СписокПартий = СписокМПЗ.НайтиСтроки(ОтборМПЗ);
		
		Если СписокПартий.Количество() > 0 Тогда
		
			МассивДляРаспределения = Новый Массив;
			Для каждого Партия из СписокПартий Цикл
				МассивДляРаспределения.Добавить(Партия.Количество);
			КонецЦикла;
			
			РаспредВыручка        = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаВыручки.Выручка, МассивДляРаспределения);
			РаспредНДСНачисленный = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаВыручки.НДСНачисленный, МассивДляРаспределения);
			
			Для Индекс = 0 По СписокПартий.ВГраница() Цикл
				
				СписокПартий[Индекс].СчетДоходов = СтрокаВыручки.СчетДоходов;
				
				Если РаспредВыручка <> Неопределено Тогда
					СписокПартий[Индекс].Выручка = СписокПартий[Индекс].Выручка + РаспредВыручка[Индекс];
				КонецЕсли;
				
				Если РаспредНДСНачисленный <> Неопределено Тогда
					СписокПартий[Индекс].НДСНачисленный = СписокПартий[Индекс].НДСНачисленный + РаспредНДСНачисленный[Индекс];
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// При корректировке стоимости - нет списанной партии
			МПЗ = СписокМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(МПЗ, СтрокаВыручки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВестиУчетПоВидамДеятельностиИП Тогда
		Для Каждого МПЗ Из СписокМПЗ Цикл
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(МПЗ.СчетДоходов);
			Для Индекс = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Индекс] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
					МПЗ.НоменклатурнаяГруппа = МПЗ["КорСубконто" + Индекс];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		СписокМПЗ.ЗаполнитьЗначения(ОсновнаяНоменклатурнаяГруппа, "НоменклатурнаяГруппа");
	КонецЕсли;
	
	СписокМПЗ.ЗагрузитьКолонку(СписокМПЗ.ВыгрузитьКолонку("СчетУчета"), "СчетЗатрат");
	СписокМПЗ.ЗаполнитьЗначения(Истина, "ПринятиеКналоговомуУчету");
	
	СписокМПЗ.Колонки.Удалить("КорСубконто1");
	СписокМПЗ.Колонки.Удалить("КорСубконто2");
	СписокМПЗ.Колонки.Удалить("КорСубконто3");
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанныеМПЗ(ТаблицаСписанныеМПЗ, ТаблицаВыручка, ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"			        // <Строка> - имя списка в документе
		+ "НомерСтроки,"		        // <Число> - номер строки в списка 
		+ "Номенклатура,"		        // <СправочникСсылка.*> - списанная номенклатура
		+ "Партия,"				        // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "СчетУчета,"			        // <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "КорСчетСписания,"	        // <ПланСчетовСсылка.Хозрасчетный> - кор.счет списания МПЗ
		+ "КорСубконто1,"		        // <Характеристика.ВидыСубконтоХозрасчетные> - кор.субконто списания МПЗ
		+ "КорСубконто2,"		        // <Характеристика.ВидыСубконтоХозрасчетные> - кор.субконто списания МПЗ
		+ "КорСубконто3,"		        // <Характеристика.ВидыСубконтоХозрасчетные> - кор.субконто списания МПЗ
		+ "Количество," 		        // <Число,15,3> - количество списанной номенклатуры
		+ "ВозвратПоТекущемуДокументу"; // <Булево> - признак, что партия списана по текущему документу
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеМПЗ, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокВыручки
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"			// <Строка> - имя списка в документе
		+ "НомерСтроки,"		// номер строки документа
		+ "Номенклатура,"		// <СправочникСсылка.*>
		+ "ЭтоУслуга,"			// <Булево>
		+ "ЭтоКомиссия,"		// <Булево>
		+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "СчетДоходов,"		// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "Субконто,"			// <Характеристика.ВидыСубконтоХозрасчетные> - субконто доходов
		+ "Количество,"			// <Число,15,3> - количество номенклатуры
		+ "СуммаРуб,"			// <Число,15,2> - сумма выручки с НДС в рублях
		+ "СуммаНДСРуб";		// <Число,15,2> - сумма НДС начисленного в рублях
		
	Параметры.Вставить("СписокВыручки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыручка, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Организация";		// <ПеречислениеСсылка.*> - вид операции
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

// Функция дополняет таблицу реквизитами статей затрат
// необходимыми для списания МПЗ
//
Функция ДополнитьТаблицуСписанияМатериалов(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСписанияМатериалов(ТаблицаМПЗ, ТаблицаРеквизитов);

	СписокМПЗ = ДополнитьТаблицуРекизитамиСтатейЗатрат(Параметры.СписокМПЗ);
	СписокМПЗ.Колонки.Добавить("Выручка",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗ.Колонки.Добавить("НДСНачисленный",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанияМатериалов(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"				// <Строка> - имя списка в документе
		+ "НомерСтроки,"			// <Число> - номер строки в списка 
		+ "Продукция,"				// <СправочникСсылка.*> - номенклатуа получаемой продукции
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура,"			// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетЗатрат,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетДоходов,"			// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "СтатьяЗатрат,"			// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "Количество,"				// <Число,15,3> - количество списываемой номенклатуры
		+ "КоличествоПродукции";	// <Число,15,3> - количество выпускаемой продукции
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Организация";	// <СправочникСсылка.Организации>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьТаблицыСписанияМПЗ(Параметры, Отказ)

	ТаблицыСписанияМПЗ = Новый Структура("СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Материалы");
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокМПЗ = Параметры.СписокМПЗ; // Таблица cписанных партий по данным БУ
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("ВидПоступившегоМПЗ",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	
	// Заполняем виды МПЗ, номенклатурные группы и характеры деятельности
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
		
	СтруктураПараметров = Новый Структура("ВидОперации, ТипСклада, ДеятельностьНаПатенте, НоменклатурнаяГруппа, ВидМПЗ,
		|СчетУчета, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат, СчетДоходов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	Для каждого МПЗ из СписокМПЗ Цикл
		
		МПЗ.ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
		
		Если НЕ ЗначениеЗаполнено(МПЗ.ВидМПЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
		
		Если Реквизиты.ТипСписания = "Списание" Тогда 
			
			// Вид полученного МПЗ при выпуске продукции
			МПЗ.ВидПоступившегоМПЗ = ВидМПЗПоСчетуУчета(МПЗ.СчетЗатрат, МПЗ.Продукция, МПЗ.ВидРасходовНУ, МПЗ.ПринятиеКналоговомуУчету);
			Если МПЗ.ВидПоступившегоМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
				// Списание МПЗ не может формировать прочих расходов
				МПЗ.ВидПоступившегоМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
			КонецЕсли;
			
			СтруктураПараметров.СчетУчета = МПЗ.СчетЗатрат;
			СтруктураПараметров.ВидМПЗ    = МПЗ.ВидПоступившегоМПЗ;
			
		КонецЕсли;
		
		МПЗ.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		МПЗ.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	//Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	ОписаниеИсточника.Вставить("ВидМПЗ",       "ВидМПЗ");
	ОписаниеИсточника.Вставить("Партия",       "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Формирование запроса по остаткам МПЗ в НУ
	// При помощи данного запроса мы получим распределение списанных партий
	// по видам деятельности и документам оплаты
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКон",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатуры", ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "Номенклатура", Истина));
	Запрос.УстановитьПараметр("СписокВидовМПЗ",     ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "ВидМПЗ", Истина));
	Запрос.УстановитьПараметр("СписокПартий",       ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗ, "Партия", Истина));
	Запрос.УстановитьПараметр("СписокВозвраты",     Параметры.СписокВозвраты);
	
	ЕстьВозвраты = (Параметры.СписокВозвраты.Количество() > 0);
	
	ТекстЗапроса = "";
	
	Если ЕстьВозвраты Тогда
		// Возвращаемые тем же документом МПЗ
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	СписокВозвраты.НоменклатурнаяГруппа,
		|	СписокВозвраты.ХарактерДеятельности,
		|	СписокВозвраты.ВидМПЗ,
		|	СписокВозвраты.Номенклатура,
		|	СписокВозвраты.Партия,
		|	СписокВозвраты.ДокументОплаты,
		|	СписокВозвраты.Количество,
		|	СписокВозвраты.Сумма,
		|	СписокВозвраты.НДС
		|ПОМЕСТИТЬ ИПМПЗВозвраты
		|ИЗ
		|	&СписокВозвраты КАК СписокВозвраты" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты КАК ДокументОплаты,
		|	ИПМПЗОстатки.КоличествоОстаток,
		|	ИПМПЗОстатки.СуммаОстаток,
		|	ИПМПЗОстатки.НДСОстаток
		|ПОМЕСТИТЬ ВТИПМПЗОстатки
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И ВидМПЗ В (&СписокВидовМПЗ)
		|				И Номенклатура В (&СписокНоменклатуры)
		|				И Партия В (&СписокПартий)) КАК ИПМПЗОстатки";
	
	Если ЕстьВозвраты Тогда
		
		// Добавляем МПЗ возвращаемые тем же документом
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ИПМПЗВозвраты.НоменклатурнаяГруппа,
		|	ИПМПЗВозвраты.ХарактерДеятельности,
		|	ИПМПЗВозвраты.ВидМПЗ,
		|	ИПМПЗВозвраты.Номенклатура,
		|	ИПМПЗВозвраты.Партия,
		|	ИПМПЗВозвраты.ДокументОплаты,
		|	ИПМПЗВозвраты.Количество,
		|	ИПМПЗВозвраты.Сумма,
		|	ИПМПЗВозвраты.НДС
		|ИЗ
		|	ИПМПЗВозвраты КАК ИПМПЗВозвраты";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОплаты" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
		|	СУММА(ИПМПЗОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(ИПМПЗОстатки.СуммаОстаток) КАК Сумма,
		|	СУММА(ИПМПЗОстатки.НДСОстаток) КАК НДС
		|ИЗ
		|	ВТИПМПЗОстатки КАК ИПМПЗОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
		|			И ИПМПЗОстатки.ДокументОплаты = РеквизитыДокументовОплаты.Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПМПЗОстатки.ДокументОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)),
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.НоменклатурнаяГруппа";
		
	Запрос.Текст  = ТекстЗапроса;
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаПартий, "НомерСтроки");
	ТаблицаПартий.Индексы.Добавить("НомерСтроки");
	
	ТаблицаПартий.Индексы.Добавить("ВидМПЗ, Номенклатура, Партия, НоменклатурнаяГруппа, ХарактерДеятельности");
	ТаблицаПартий.Индексы.Добавить("ВидМПЗ, Номенклатура, Партия, ХарактерДеятельности");
	
	ОтборПартийПоВидуДеятельности      = Новый Структура("ВидМПЗ, Номенклатура, Партия, НоменклатурнаяГруппа, ХарактерДеятельности");
	ОтборПартийПоНоменклатурнойГруппе  = Новый Структура("ВидМПЗ, Номенклатура, Партия, НоменклатурнаяГруппа");
	ОтборПартийПоХарактеруДеятельности = Новый Структура("ВидМПЗ, Номенклатура, Партия, ХарактерДеятельности");
	ОтборПартий                        = Новый Структура("ВидМПЗ, Номенклатура, Партия");
	
	СписанныеМПЗ              = ПолучитьПустуюТаблицуСписанныеМПЗ();
	СтоимостьПродукции        = ПолучитьПустуюТаблицуСтоимостьПродукции();
	ИзмененияВидаДеятельности = ПолучитьПустуюТаблицуИзмененияВидаДеятельности();
	
	КонтролироватьОстаток = НЕ БухгалтерскийУчетПереопределяемый.ОтключитьКонтрольОтрицательныхОстатков();
	
	// Подбор партий из запроса
	Для каждого МПЗ из СписокМПЗ Цикл
		
		Если НЕ ЗначениеЗаполнено(МПЗ.ВидМПЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МПЗ.Партия) Тогда
			
			// Партия по данным бухгалтерского учета не определена
			Если НЕ КонтролироватьОстаток Тогда
				
				НайденныеПартии = ТаблицаПартий.СкопироватьКолонки();
				Партия = НайденныеПартии.Добавить();
				ЗаполнитьЗначенияСвойств(Партия, МПЗ);
				Партия.Количество = МПЗ.Количество;
				Партия.Сумма      = 0;
				Партия.НДС        = 0;
				
				ЗаполнитьСтрокуСписанияМПЗ(МПЗ, Партия, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ОС ИЛИ МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.НМА Тогда
			
			ЗаполнитьЗначенияСвойств(ОтборПартий, МПЗ);
			
			Если РаспределитьПартииОСилиНМА(ОтборПартий, МПЗ, ТаблицаПартий, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты) Тогда
			Иначе
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не списана номенклатура ""%1"", так как в учете индивидуального предпринимателя не найдены остатки по партии ""%2""'"), 
					МПЗ.Номенклатура, МПЗ.Партия);
				Поле = МПЗ.ИмяСписка + "[" + Формат(МПЗ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Реквизиты.Регистратор, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		ИначеЕсли МПЗ.Количество > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ОтборПартийПоВидуДеятельности, МПЗ);
			ЗаполнитьЗначенияСвойств(ОтборПартийПоНоменклатурнойГруппе, МПЗ);
			ЗаполнитьЗначенияСвойств(ОтборПартийПоХарактеруДеятельности, МПЗ);
			ЗаполнитьЗначенияСвойств(ОтборПартий, МПЗ);
			
			// Распределение партий с отбором от частного к общему
			Если      РаспределитьПартииМПЗ(ОтборПартийПоВидуДеятельности,      МПЗ, ТаблицаПартий, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты) Тогда
			ИначеЕсли РаспределитьПартииМПЗ(ОтборПартийПоНоменклатурнойГруппе,  МПЗ, ТаблицаПартий, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты) Тогда
			ИначеЕсли РаспределитьПартииМПЗ(ОтборПартийПоХарактеруДеятельности, МПЗ, ТаблицаПартий, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты) Тогда
			ИначеЕсли РаспределитьПартииМПЗ(ОтборПартий,                        МПЗ, ТаблицаПартий, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты) Тогда
			Иначе
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не списано ""%1"" ед. по номенклатуре ""%2"", так как в учете индивидуального предпринимателя не найдены остатки по партии ""%3""'"), 
					МПЗ.Количество, МПЗ.Номенклатура, МПЗ.Партия);
				Поле = МПЗ.ИмяСписка + "[" + Формат(МПЗ.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Реквизиты.Регистратор, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Материалы = СтоимостьПродукции.Скопировать(, "НоменклатураПоступившая, НоменклатураСписанная, ПартияСписаннойНоменклатуры, Сумма");
	Материалы.Свернуть("НоменклатураПоступившая, НоменклатураСписанная, ПартияСписаннойНоменклатуры", "Сумма");
	
	СтоимостьПродукции.Колонки.ВидПоступившегоМПЗ.Имя      = "ВидМПЗ";
	СтоимостьПродукции.Колонки.НоменклатураПоступившая.Имя = "Номенклатура";
	СтоимостьПродукции.Свернуть("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОплаты",
		"КоличествоСписано, Сумма, НДС");
	
	ТаблицыСписанияМПЗ.СписанныеМПЗ              = СписанныеМПЗ;
	ТаблицыСписанияМПЗ.ИзмененияВидаДеятельности = ИзмененияВидаДеятельности;
	ТаблицыСписанияМПЗ.СтоимостьПродукции        = СтоимостьПродукции;
	ТаблицыСписанияМПЗ.Материалы                 = Материалы;
	
	Возврат ТаблицыСписанияМПЗ;
	
КонецФункции

Функция РаспределитьПартииОСилиНМА(ОтборПартий, МПЗ, ТаблицаПартий, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты)
	
	НайденныеПартии = ТаблицаПартий.Скопировать(ОтборПартий);
	НайденныеПартии.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
	
	Результат = Ложь;
	
	Если НайденныеПартии.Количество() > 0 Тогда
		
		// Количественный учет не ведется, списываются все остатки партии
		Для каждого Партия Из НайденныеПартии Цикл
			ЗаполнитьСтрокуСписанияМПЗ(МПЗ, Партия, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты);
			ЗаполнитьЗначенияСвойств(ТаблицаПартий.Найти(Партия.НомерСтроки, "НомерСтроки"), Партия, "Количество, Сумма, НДС");
		КонецЦикла;
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РаспределитьПартииМПЗ(ОтборПартий, МПЗ, ТаблицаПартий, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты)
	
	ЗаполнитьЗначенияСвойств(ОтборПартий, МПЗ);
	НайденныеПартии = ТаблицаПартий.Скопировать(ОтборПартий);
	НайденныеПартии.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
	
	КоличествоНачальныйОстаток = НайденныеПартии.Итог("Количество");
	
	ВырожденныеПартии = Новый Массив;
	
	СтоимостьВырожденныхПартий = 0;
	
	Для каждого Партия Из НайденныеПартии Цикл
		
		Если Партия.Количество = 0 Тогда
			
			Если Партия.Сумма + Партия.НДС <> 0 Тогда
				ВырожденныеПартии.Добавить(Партия);
				СтоимостьВырожденныхПартий = СтоимостьВырожденныхПартий + Партия.Сумма + Партия.НДС;
			КонецЕсли;
			
		ИначеЕсли МПЗ.Количество > 0 И Партия.Количество > 0 Тогда
			
			ЗаполнитьСтрокуСписанияМПЗ(МПЗ, Партия, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты);
			ЗаполнитьЗначенияСвойств(ТаблицаПартий.Найти(Партия.НомерСтроки, "НомерСтроки"), Партия, "Количество, Сумма, НДС");
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Списание вырожденных партий
	Если СтоимостьВырожденныхПартий <> 0 Тогда
		
		РаспределенноеКоличество = КоличествоНачальныйОстаток - НайденныеПартии.Итог("Количество");
		
		Если РаспределенноеКоличество <> 0 И КоличествоНачальныйОстаток <> 0 Тогда
			
			СтоимостьКРаспределению = Окр(СтоимостьВырожденныхПартий * РаспределенноеКоличество/КоличествоНачальныйОстаток, 2, 1);
			
			Для каждого Партия Из ВырожденныеПартии Цикл
				
				Если Партия.Сумма + Партия.НДС = 0 Тогда
					Продолжить
				КонецЕсли;
				
				Если (Партия.Сумма + Партия.НДС) <= СтоимостьКРаспределению Тогда
					
					Сумма = Партия.Сумма;
					НДС = Партия.НДС;
					
				Иначе
					
					Коэффициент = СтоимостьКРаспределению / (Партия.Сумма + Партия.НДС);
					
					Сумма = Окр(Партия.Сумма * Коэффициент, 2, 1);
					НДС   = Окр((Партия.Сумма + Партия.НДС) * Коэффициент, 2, 1) - Сумма;
					
				КонецЕсли;
				
				ЗаполнитьСтрокуСписанияМПЗ(МПЗ, Партия, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты, Сумма, НДС);
				ЗаполнитьЗначенияСвойств(ТаблицаПартий.Найти(Партия.НомерСтроки, "НомерСтроки"), Партия, "Сумма, НДС");
				
				СтоимостьКРаспределению = СтоимостьКРаспределению - Сумма - НДС;
				Если СтоимостьКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = (МПЗ.Количество = 0);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицыСписанияМПЗСУчетомВозврата(ТаблицаМПЗ, ТаблицаРеквизитов, ТаблицаВозвраты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаМПЗ) Тогда
		Возврат Новый Структура("СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Материалы");
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Новый Структура("СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Материалы");
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицСписанияМПЗ(ТаблицаМПЗ, ТаблицаВозвраты, ТаблицаРеквизитов);
	
	Возврат ПолучитьТаблицыСписанияМПЗ(Параметры, Отказ)
	
КонецФункции

Функция ПодготовитьТаблицыСписанияМПЗ(ТаблицаМПЗ, ТаблицаРеквизитов, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаМПЗ) Тогда
		Возврат Новый Структура("СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Материалы");
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Новый Структура("СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Материалы");
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицСписанияМПЗ(ТаблицаМПЗ, Неопределено, ТаблицаРеквизитов);
	
	Возврат ПолучитьТаблицыСписанияМПЗ(Параметры, Отказ)
	
КонецФункции

Функция ПодготовитьПараметрыТаблицСписанияМПЗ(ТаблицаМПЗ, ТаблицаВозвраты, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"								// <Строка> - имя списка в документе
		+ "НомерСтроки,"							// <Число> - номер строки в списка 
		+ "Продукция,"								// <СправочникСсылка.*> - номенклатуа получаемой продукции
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура,"							// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"									// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетЗатрат,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетДоходов,"							// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Количество,"								// <Число,15,3> - количество списываемой номенклатуры
		+ "Выручка,"								// <Число,15,2> - сумма выручки с НДС в рублях
		+ "НДСНачисленный";							// <Число,15,2> - сумма НДС начисленного в рублях
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокВозврата таблица возвращенных МПЗ, по структуре регистра ИПМПЗ
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"					// <ПеречислениеСсылка.ХарактерДеятельности> - характер деятельности
		+ "ВидМПЗ,"									// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"							// <СправочникСсылка.Номенклатура> - возвращенная номенклатура
		+ "Партия,"									// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"							// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"								// <Число 15,5> - Количество
		+ "Сумма,"									// <Число 15,2> - Сумма
		+ "НДС";									// <Число,15,2> - Сумма НДС
		
	Параметры.Вставить("СписокВозвраты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозвраты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ТипСклада,"				// <ПеречислениеСсылка.ТипыСкладов> - тип склада
		+ "ДеятельностьНаПатенте,"	// <Булево> - признак деятельности на патенте
		+ "ТипСписания,"			// <Строка> - "Реализация", "Списание", "Перемещение" - тип списания
		+ "ВидОперации";			// <ПеречислениеСсылка.*> - вид операции
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура ЗаполнитьСтрокуСписанияМПЗ(МПЗ, Партия, СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Реквизиты, Знач СуммаСписано = 0, Знач НДССписано = 0)
	
	Если СуммаСписано <> 0 Или НДССписано <> 0 Тогда
		
		// Списание вырожденной партии
		КоличествоСписано     = 0;
		ВыручкаСписано        = 0;
		НДСНачисленныйСписано = 0;
		
	ИначеЕсли МПЗ.Количество = Партия.Количество Тогда
		
		КоличествоСписано     = Партия.Количество;
		СуммаСписано          = Партия.Сумма;
		НДССписано            = Партия.НДС;
		ВыручкаСписано        = МПЗ.Выручка;
		НДСНачисленныйСписано = МПЗ.НДСНачисленный;
		
	Иначе
		
		КоличествоСписано = Мин(МПЗ.Количество, Партия.Количество);
		Если КоличествоСписано <= 0 Тогда
			Возврат;
		КонецЕсли;
		
		КоэффициентСтоимости = КоличествоСписано / Партия.Количество;
		СуммаСписано          = Окр(Партия.Сумма * КоэффициентСтоимости, 2, 1);
		НДССписано            = Окр((Партия.Сумма + Партия.НДС) * КоэффициентСтоимости, 2, 1) - СуммаСписано;
		
		КоэффициентВыручки = КоличествоСписано / МПЗ.Количество;
		ВыручкаСписано        = Окр(МПЗ.Выручка * КоэффициентВыручки, 2, 1);
		НДСНачисленныйСписано = ВыручкаСписано - Окр((МПЗ.Выручка - МПЗ.НДСНачисленный) * КоэффициентВыручки, 2, 1);
		
	КонецЕсли;
	
	МПЗ.Количество     = МПЗ.Количество - КоличествоСписано;
	МПЗ.Выручка        = МПЗ.Выручка - ВыручкаСписано;
	МПЗ.НДСНачисленный = МПЗ.НДСНачисленный - НДСНачисленныйСписано;
	
	ПоТекущейПродажеБылВозвратВТекущемДокументе = Ложь;
	// Если это отчет комиссионера и по проданной строке был возврат по текущему документу,
	// то не уменьшаем партию
	Если Реквизиты.ВидОперации = "ОтчетКомиссионераОПродажах" Тогда
		
		ПоТекущейПродажеБылВозвратВТекущемДокументе = МПЗ.ВозвратПоТекущемуДокументу;
		
	КонецЕсли;
	
	Если Не ПоТекущейПродажеБылВозвратВТекущемДокументе Тогда
		
		Партия.Количество = Партия.Количество - КоличествоСписано;
		Партия.Сумма      = Партия.Сумма - СуммаСписано;
		Партия.НДС        = Партия.НДС - НДССписано;
	
	КонецЕсли;
	
	// Особенность реализации амортизируемого имущества
	Если (Реквизиты.ТипСписания = "Реализация")
		И (МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ОС) ИЛИ (МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.НМА) Тогда
		
		// Сумма убытка будет признаваться расходами в течение оставшегося срока полезного использования
		// и отражаться в таблице 6-2 вручную. Сумма, подлежащая таким образом списанию, остается
		// в регистре "ИП МПЗ", но без количества.
		
		Если СуммаСписано > (ВыручкаСписано - НДСНачисленныйСписано) Тогда
			СуммаСписано = ВыручкаСписано - НДСНачисленныйСписано;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаСписанныхМПЗ = СписанныеМПЗ.Добавить();
	СтрокаСписанныхМПЗ.ВидМПЗ               = Партия.ВидМПЗ;
	СтрокаСписанныхМПЗ.Номенклатура         = Партия.Номенклатура;
	СтрокаСписанныхМПЗ.ХарактерДеятельности = МПЗ.ХарактерДеятельности;
	СтрокаСписанныхМПЗ.НоменклатурнаяГруппа = МПЗ.НоменклатурнаяГруппа;
	СтрокаСписанныхМПЗ.Партия               = Партия.Партия;
	СтрокаСписанныхМПЗ.ДокументОплаты       = Партия.ДокументОплаты;
	
	Если ПоТекущейПродажеБылВозвратВТекущемДокументе Тогда
		СтрокаСписанныхМПЗ.ВозвратПоТекущемуДокументу = Истина; 
	КонецЕсли;
	
	СтрокаСписанныхМПЗ.ВидПоступившегоМПЗ = МПЗ.ВидПоступившегоМПЗ;
	// При списании МПЗ на иные материальные расходы вместо статей ИМР подставляется номенклатура списанных МПЗ
	СтрокаСписанныхМПЗ.НоменклатураПоступившая = ?(МПЗ.ВидПоступившегоМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы, МПЗ.Номенклатура, МПЗ.Продукция);
	
	СтрокаСписанныхМПЗ.Количество     = КоличествоСписано;
	СтрокаСписанныхМПЗ.Сумма          = СуммаСписано;
	СтрокаСписанныхМПЗ.НДС            = НДССписано;
	СтрокаСписанныхМПЗ.Выручка        = ВыручкаСписано;
	СтрокаСписанныхМПЗ.НДСНачисленный = НДСНачисленныйСписано;
	
	Если Реквизиты.ТипСписания = "Списание"
		ИЛИ Реквизиты.ТипСписания = "Перемещение" // Перемещение в НТТ
		ИЛИ (Реквизиты.ТипСписания = "Реализация" И ЗначениеЗаполнено(МПЗ.НоменклатурнаяГруппа)) Тогда
		
		Если Партия.НоменклатурнаяГруппа <> МПЗ.НоменклатурнаяГруппа
			ИЛИ Партия.ХарактерДеятельности <> МПЗ.ХарактерДеятельности Тогда
			
			НоваяСтрока = ИзмененияВидаДеятельности.Добавить();
			НоваяСтрока.ХарактерДеятельности1 = Партия.ХарактерДеятельности;
			НоваяСтрока.НоменклатурнаяГруппа1 = Партия.НоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности2 = МПЗ.ХарактерДеятельности;
			НоваяСтрока.НоменклатурнаяГруппа2 = МПЗ.НоменклатурнаяГруппа;
			НоваяСтрока.Номенклатура          = Партия.Номенклатура;
			НоваяСтрока.Партия                = Партия.Партия;
			НоваяСтрока.ДокументОплаты        = Партия.ДокументОплаты;
			НоваяСтрока.ВидМПЗ                = Партия.ВидМПЗ;
			НоваяСтрока.Количество            = КоличествоСписано;
			НоваяСтрока.Сумма                 = СуммаСписано;
			НоваяСтрока.НДС                   = НДССписано;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Реквизиты.ТипСписания = "Списание" И ЗначениеЗаполнено(МПЗ.ВидПоступившегоМПЗ) Тогда
		
		НоваяСтрока = СтоимостьПродукции.Добавить();
		НоваяСтрока.ВидСписанногоМПЗ            = Партия.ВидМПЗ;
		НоваяСтрока.ВидПоступившегоМПЗ          = МПЗ.ВидПоступившегоМПЗ;
		НоваяСтрока.ХарактерДеятельности        = МПЗ.ХарактерДеятельности;
		НоваяСтрока.НоменклатурнаяГруппа        = МПЗ.НоменклатурнаяГруппа;
		НоваяСтрока.НоменклатураПоступившая     = ?(МПЗ.ВидПоступившегоМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы, МПЗ.Номенклатура, МПЗ.Продукция);
		НоваяСтрока.НоменклатураСписанная       = Партия.Номенклатура;
		НоваяСтрока.ПартияСписаннойНоменклатуры = Партия.Партия;
		НоваяСтрока.ДокументОплаты              = Партия.ДокументОплаты;
		НоваяСтрока.КоличествоСписано           = КоличествоСписано;
		НоваяСтрока.Сумма                       = СуммаСписано;
		НоваяСтрока.НДС                         = НДССписано;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает Таблицу выполненных движений по регистру "ИПМПЗОтгруженные"
//
Функция СформироватьДвиженияСписаниеМПЗ(СтруктураТаблицСписаннияМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	Перем ТаблицаИПМПЗОтгруженные;
	
	ТаблицаИПМПЗОтгруженные = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные");
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(СтруктураТаблицСписаннияМПЗ.СписанныеМПЗ) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеМПЗ(СтруктураТаблицСписаннияМПЗ.СписанныеМПЗ, ТаблицаРеквизитов);
	
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	СформироватьДвиженияИзменениеВидаДеятельности(СтруктураТаблицСписаннияМПЗ.ИзмененияВидаДеятельности,
		ТаблицаРеквизитов, , Движения, Отказ);
	
	Если Отказ Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	СформироватьДвиженияИзменениеПартииМПЗДляИМР(СтруктураТаблицСписаннияМПЗ.Материалы,
		ТаблицаРеквизитов, Движения, Отказ);
	
	Если Отказ Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Движения.ИПМПЗ.Записывать = Истина;
	Для каждого МПЗ из СписокМПЗ Цикл
		Движение = Движения.ИПМПЗ.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
	Если Реквизиты.ТипСписания = "Реализация" Тогда
		
		Движения.ИПМПЗОтгруженные.Записывать = Истина;
		Для каждого МПЗ из СписокМПЗ Цикл
			
			Если НЕ ЗначениеЗаполнено(МПЗ.НоменклатурнаяГруппа) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.ИПМПЗОтгруженные.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
			Движение.ДокументОтгрузки = ?(ЗначениеЗаполнено(Реквизиты.ДокументРеализации), Реквизиты.ДокументРеализации, Реквизиты.Регистратор);
			
			НоваяСтрока = ТаблицаИПМПЗОтгруженные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
			
		КонецЦикла;
		
	ИначеЕсли Реквизиты.ТипСписания = "Списание" Тогда
		
		Движения.ИПМПЗОбороты.Записывать = Истина;
		Для каждого МПЗ из СписокМПЗ Цикл
		
			Если НЕ ЗначениеЗаполнено(МПЗ.ВидПоступившегоМПЗ) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.ИПМПЗОбороты.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
			Движение.ВидСписанногоМПЗ              = МПЗ.ВидМПЗ;
			Движение.НоменклатураСписанная         = МПЗ.Номенклатура;
			Движение.ПартияСписаннойНоменклатуры   = МПЗ.Партия;
			Движение.ПартияПоступившейНоменклатуры = Реквизиты.Регистратор;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаИПМПЗОтгруженные;
	
КонецФункции

Функция ПодготовитьПараметрыСписаниеМПЗ(ТаблицаСписанныеМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ВидМПЗ,"								// <ПеречислениеСсылка.ВидыМПЗ> - вид списанного МПЗ
		+ "Номенклатура,"						// <СправочникСсылка.*> - номенклатура списанного МПЗ
		+ "ХарактерДеятельности,"				// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности списанного МПЗ
		+ "НоменклатурнаяГруппа,"				// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа списанного МПЗ
		+ "ВидПоступившегоМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид продукции
		+ "НоменклатураПоступившая,"			// <СправочникСсылка.*>  - номенклатура продукции
		+ "Партия,"								// <ДокументСсылка.*> - документ поставки списанного МПЗ
		+ "ДокументОплаты,"						// <ДокументСсылка.*> - документ оплаты списанного МПЗ
		+ "Количество,"							// <Число,15,3>
		+ "Сумма,"								// <Число,15,2>
		+ "НДС,"								// <Число,15,2>
		+ "Выручка,"							// <Число,15,2>
		+ "НДСНачисленный";						// <Число,15,2>
	
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "ДокументРеализации,"		// <ДокументСсылка.*> - документ отгрузки
		+ "ТипСписания,"			// <Строка> - "Реализация", "Списание", "Перемещение" - тип списания
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияИзменениеВидаДеятельности(ТаблицаИзмененияВидаДеятельности, ТаблицаРеквизитов, СторнироватьРасход = Ложь, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаИзмененияВидаДеятельности)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли; 

	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	 
	Параметры = ПодготовитьПараметрыИзменениеВидаДеятельности(ТаблицаИзмененияВидаДеятельности, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Изменение вида деятельности у товаров из таблицы ИзмененияВидаДеятельности
	Для Каждого Изменение Из Параметры.ИзмененияВидаДеятельности Цикл
		
		Если ТипЗнч(Изменение.ВидМПЗ) = Тип("ПеречислениеСсылка.ИПВидыНачисленийУдержаний") Тогда
			
			Движения.ИПРасходыНаОплатуТруда.Записывать	= Истина;
			
			// Сторнирование
			Обороты	= Движения.ИПРасходыНаОплатуТруда.Добавить();
			ЗаполнитьЗначенияСвойств(Обороты, Реквизиты);
			
			Обороты.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа1;
			Обороты.ХарактерДеятельности	= Изменение.ХарактерДеятельности1;
			Обороты.СтатьяЗатрат			= Изменение.Номенклатура;
			Обороты.ВидНачисленияУдержания	= Изменение.ВидМПЗ;
			Обороты.ФизЛицо					= Изменение.МПЗ;
			Обороты.РасчетныйДокумент		= Изменение.Партия;
			Обороты.ДокументОплаты			= Изменение.ДокументОплаты;
			Обороты.Контрагент				= Изменение.ПартияМПЗ;
			Обороты.Сумма					=-Изменение.Сумма;
			
			// Восстановление
			Обороты = Движения.ИПРасходыНаОплатуТруда.Добавить();
			ЗаполнитьЗначенияСвойств(Обороты, Реквизиты);
			
			Обороты.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа2;
			Обороты.ХарактерДеятельности	= Изменение.ХарактерДеятельности2;
			Обороты.СтатьяЗатрат			= Изменение.Номенклатура;
			Обороты.ВидНачисленияУдержания	= Изменение.ВидМПЗ;
			Обороты.ФизЛицо					= Изменение.МПЗ;
			Обороты.РасчетныйДокумент		= Изменение.Партия;
			Обороты.ДокументОплаты			= Изменение.ДокументОплаты;
			Обороты.Контрагент				= Изменение.ПартияМПЗ;
			Обороты.Сумма					= Изменение.Сумма;
			
		ИначеЕсли Изменение.ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
			
			Движения.ИППрочиеРасходы.Записывать	= Истина;
			
			// Сторнирование
			Обороты	= Движения.ИППрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(Обороты, Реквизиты);
			
			Обороты.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа1;
			Обороты.ХарактерДеятельности	= Изменение.ХарактерДеятельности1;
			Обороты.СтатьяЗатрат			= Изменение.Номенклатура;
			Обороты.РасчетныйДокумент		= Изменение.Партия;
			Обороты.ДокументОплаты			= Изменение.ДокументОплаты;
			Обороты.СчетУчета				= Изменение.МПЗ;
			Обороты.Сумма					=-Изменение.Сумма;
			Обороты.НДС						=-Изменение.НДС;
			
			// Восстановление
			Обороты	= Движения.ИППрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(Обороты, Реквизиты);
			
			Обороты.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа2;
			Обороты.ХарактерДеятельности	= Изменение.ХарактерДеятельности2;
			Обороты.СтатьяЗатрат			= Изменение.Номенклатура;
			Обороты.РасчетныйДокумент		= Изменение.Партия;
			Обороты.ДокументОплаты			= Изменение.ДокументОплаты;
			Обороты.СчетУчета				= Изменение.МПЗ;
			Обороты.Сумма					= Изменение.Сумма;
			Обороты.НДС						= Изменение.НДС;
			
		ИначеЕсли Изменение.ВидМПЗ = Неопределено Тогда
			
			Движения.ИПРБП.Записывать	= Истина;
			
			// Сторнирование
			Остатки	= Движения.ИПРБП.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
			
			Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа1;
			Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности1;
			Остатки.ВидРасхода				= Изменение.Номенклатура;
			Остатки.Партия					= Изменение.Партия;
			Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
			Остатки.Сумма					=-Изменение.Сумма;
			Остатки.НДС						=-Изменение.НДС;
			
			// Восстановление
			Остатки	= Движения.ИПРБП.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
			
			Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа2;
			Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности2;
			Остатки.ВидРасхода				= Изменение.Номенклатура;
			Остатки.Партия					= Изменение.Партия;
			Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
			Остатки.Сумма					= Изменение.Сумма;
			Остатки.НДС						= Изменение.НДС;
			
		Иначе
			
			// Сторнирование
			Если Изменение.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
				
				Движения.ИПИныеМатериальныеРасходы.Записывать	= Истина;
				
				Остатки = Движения.ИПИныеМатериальныеРасходы.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
				
				Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа1;
				Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности1;
				Остатки.СтатьяЗатрат			= Изменение.Номенклатура;
				Остатки.Партия					= Изменение.Партия;
				Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
				Остатки.МПЗ						= Изменение.МПЗ;
				Остатки.ПартияМПЗ				= Изменение.ПартияМПЗ;
				Остатки.Количество				=-Изменение.Количество;
				Остатки.Сумма					=-Изменение.Сумма;
				Остатки.НДС						=-Изменение.НДС;
				
			Иначе
				
				Движения.ИПМПЗ.Записывать	= Истина;
				
				Остатки	= Движения.ИПМПЗ.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
				
				Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа1;
				Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности1;
				Остатки.ВидМПЗ					= Изменение.ВидМПЗ; 
				Остатки.Номенклатура			= Изменение.Номенклатура;
				Остатки.Партия					= Изменение.Партия;
				Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
				Остатки.Количество				=-Изменение.Количество;
				Остатки.Сумма					=-Изменение.Сумма;
				Остатки.НДС						=-Изменение.НДС;
			КонецЕсли;
			
			// Восстановление
			Если Изменение.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
				
				Остатки = Движения.ИПИныеМатериальныеРасходы.ДобавитьПриход();
				
				ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
				Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа2;
				Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности2;
				Остатки.СтатьяЗатрат			= Изменение.Номенклатура;
				Остатки.Партия					= Изменение.Партия;
				Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
				Остатки.МПЗ						= Изменение.МПЗ;
				Остатки.ПартияМПЗ				= Изменение.ПартияМПЗ;
				Остатки.Количество				= Изменение.Количество;
				Остатки.Сумма					= Изменение.Сумма;
				Остатки.НДС						= Изменение.НДС;

			Иначе
				
				Остатки	= Движения.ИПМПЗ.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
				
				Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа2;
				Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности2;
				Остатки.ВидМПЗ					= Изменение.ВидМПЗ; 
				Остатки.Номенклатура			= Изменение.Номенклатура;
				Остатки.Партия					= Изменение.Партия;
				Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
				Остатки.Количество				= Изменение.Количество;
				Остатки.Сумма					= Изменение.Сумма;
				Остатки.НДС						= Изменение.НДС;

			КонецЕсли;
			
			Если СторнироватьРасход Тогда
				
				Движения.ИПМПЗ.Записывать	= Истина;
				
				// Сторнирование
				Остатки	= Движения.ИПМПЗ.ДобавитьРасход();
				ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
				
				Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа1;
				Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности1;
				Остатки.ВидМПЗ					= Изменение.ВидМПЗ; 
				Остатки.Номенклатура			= Изменение.Номенклатура;
				Остатки.Партия					= Изменение.Партия;
				Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
				Остатки.Количество				=-Изменение.Количество;
				Остатки.Сумма					=-Изменение.Сумма;
				Остатки.НДС						=-Изменение.НДС;
				
				// Восстановление
				Остатки	= Движения.ИПМПЗ.ДобавитьРасход();
				ЗаполнитьЗначенияСвойств(Остатки, Реквизиты);
				
				Остатки.НоменклатурнаяГруппа	= Изменение.НоменклатурнаяГруппа2;
				Остатки.ХарактерДеятельности	= Изменение.ХарактерДеятельности2;
				Остатки.ВидМПЗ					= Изменение.ВидМПЗ; 
				Остатки.Номенклатура			= Изменение.Номенклатура;
				Остатки.Партия					= Изменение.Партия;
				Остатки.ДокументОплаты			= Изменение.ДокументОплаты;
				Остатки.Количество				= Изменение.Количество;
				Остатки.Сумма					= Изменение.Сумма;
				Остатки.НДС						= Изменение.НДС;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Изменение вида деятельности материалов, из которых были изготовлены товары, вид деятельности которых изменен
	СформироватьДвиженияИзменениеВидовДеятельностиОборотовМПЗ(ТаблицаИзмененияВидаДеятельности, ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияИзменениеВидовДеятельностиОборотовМПЗ(ТаблицаИзмененияВидаДеятельности, ТаблицаРеквизитов, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаИзмененияВидаДеятельности)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеВидаДеятельности(ТаблицаИзмененияВидаДеятельности, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	ИзмененияВидаДеятельностиПродукции = Параметры.ИзмененияВидаДеятельности;
	
	ПартииОтгруженныхМПЗ = ОбщегоНазначения.ВыгрузитьКолонку(ИзмененияВидаДеятельностиПродукции, "Партия", Истина);
	
	ДатаПервойПартии = ДатаПервогоДокумента(ПартииОтгруженныхМПЗ);
	
	Если ТранзакцияАктивна() Тогда
		
		// Установка управляемой блокировки
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОбороты");
		ОписаниеИсточника = Новый Структура;
		ОписаниеИсточника.Вставить("НоменклатураПоступившая",       "Номенклатура");
		ОписаниеИсточника.Вставить("ПартияПоступившейНоменклатуры", "Партия");
		ОписаниеИсточника.Вставить("ДокументОплаты",                "ДокументОплаты");
		ОписаниеИсточника.Вставить("ВидПоступившегоМПЗ",            "ВидМПЗ");
		ОписаниеИсточника.Вставить("НоменклатурнаяГруппа",          "НоменклатурнаяГруппа1");
		ОписаниеИсточника.Вставить("ХарактерДеятельности",          "ХарактерДеятельности1");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОбороты");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
		ЭлементБлокировки.ИсточникДанных =
			ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ИзмененияВидаДеятельностиПродукции, ОписаниеИсточника);
		Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
		КонецЦикла;
		Блокировка.Заблокировать();

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",             ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаРегистратора",       Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",            Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОтгруженныеМПЗ",         ОбщегоНазначения.ВыгрузитьКолонку(ИзмененияВидаДеятельностиПродукции, "Номенклатура", Истина));
	Запрос.УстановитьПараметр("ПартииОтгруженныхМПЗ",   ПартииОтгруженныхМПЗ);
	Запрос.УстановитьПараметр("ДокументыОплаты",        ОбщегоНазначения.ВыгрузитьКолонку(ИзмененияВидаДеятельностиПродукции, "ДокументОплаты", Истина));
	Запрос.УстановитьПараметр("ВидыПоступившегоМПЗ",    ОбщегоНазначения.ВыгрузитьКолонку(ИзмененияВидаДеятельностиПродукции, "ВидМПЗ", Истина));
	Запрос.УстановитьПараметр("НоменклатурныеГруппы1",  ОбщегоНазначения.ВыгрузитьКолонку(ИзмененияВидаДеятельностиПродукции, "НоменклатурнаяГруппа1", Истина));
	Запрос.УстановитьПараметр("ХарактерыДеятельности1", ОбщегоНазначения.ВыгрузитьКолонку(ИзмененияВидаДеятельностиПродукции, "ХарактерДеятельности1", Истина));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОборотыОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОборотыОбороты.ХарактерДеятельности,
	|	ИПМПЗОборотыОбороты.ДокументОплаты,
	|	ИПМПЗОборотыОбороты.ВидСписанногоМПЗ,
	|	ИПМПЗОборотыОбороты.НоменклатураСписанная,
	|	ИПМПЗОборотыОбороты.ПартияСписаннойНоменклатуры,
	|	ИПМПЗОборотыОбороты.ВидПоступившегоМПЗ,
	|	ИПМПЗОборотыОбороты.НоменклатураПоступившая,
	|	ИПМПЗОборотыОбороты.ПартияПоступившейНоменклатуры,
	|	ИПМПЗОборотыОбороты.КоличествоОборот КАК Количество,
	|	ИПМПЗОборотыОбороты.СуммаОборот КАК Сумма,
	|	ИПМПЗОборотыОбороты.НДСОборот КАК НДС
	|ИЗ
	|	РегистрНакопления.ИПМПЗОбороты.Обороты(
	|			&ДатаНачала,
	|			&ДатаРегистратора,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы1)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности1)
	|				И НоменклатураПоступившая В (&ОтгруженныеМПЗ)
	|				И ВидПоступившегоМПЗ В (&ВидыПоступившегоМПЗ)
	|				И ПартияПоступившейНоменклатуры В (&ПартииОтгруженныхМПЗ)
	|				И ДокументОплаты В (&ДокументыОплаты)) КАК ИПМПЗОборотыОбороты";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	ПоляОтбора = "ХарактерДеятельности,НоменклатурнаяГруппа,ВидПоступившегоМПЗ,НоменклатураПоступившая,ПартияПоступившейНоменклатуры,ДокументОплаты";
	ТаблицаОборотов.Индексы.Добавить(ПоляОтбора);
	ОтборОборотов = Новый Структура(ПоляОтбора);
	
	ИзмененияВидаДеятельностиМатериалов = Новый ТаблицаЗначений;
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("ХарактерДеятельности1",         Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("ХарактерДеятельности2",         Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("НоменклатурнаяГруппа1",         Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("НоменклатурнаяГруппа2",         Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("ВидСписанногоМПЗ",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("ВидПоступившегоМПЗ",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("НоменклатураСписанная",         Справочники.ТипВсеСсылки());
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("НоменклатураПоступившая",       Справочники.ТипВсеСсылки());
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("ПартияСписаннойНоменклатуры",   Документы.ТипВсеСсылки());
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("ПартияПоступившейНоменклатуры", Документы.ТипВсеСсылки());
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("ДокументОплаты",                Документы.ТипВсеСсылки());
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("Количество",                    ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("Сумма",                         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ИзмененияВидаДеятельностиМатериалов.Колонки.Добавить("НДС",                           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого ИзменениеВидаДеятельности Из ИзмененияВидаДеятельностиПродукции Цикл
		
		СуммаИзменения = ИзменениеВидаДеятельности.Сумма;
		Если СуммаИзменения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборОборотов.ХарактерДеятельности          = ИзменениеВидаДеятельности.ХарактерДеятельности1;
		ОтборОборотов.НоменклатурнаяГруппа          = ИзменениеВидаДеятельности.НоменклатурнаяГруппа1;
		ОтборОборотов.ВидПоступившегоМПЗ            = ИзменениеВидаДеятельности.ВидМПЗ;
		ОтборОборотов.НоменклатураПоступившая       = ИзменениеВидаДеятельности.Номенклатура;
		ОтборОборотов.ПартияПоступившейНоменклатуры = ИзменениеВидаДеятельности.Партия;
		ОтборОборотов.ДокументОплаты                = ИзменениеВидаДеятельности.ДокументОплаты;
		
		НайденныеОбороты = ТаблицаОборотов.Скопировать(ОтборОборотов);
		НайденныеОбороты.Сортировать(ПоляОтбора, Новый СравнениеЗначений);
		
		Для Каждого Оборот Из НайденныеОбороты Цикл
			
			Если Оборот.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаИзменения >= Оборот.Сумма Тогда
				
				Количество = Оборот.Количество;
				Сумма      = Оборот.Сумма;
				НДС        = Оборот.НДС;
				
			Иначе
				
				Коэффициент = СуммаИзменения/Оборот.Сумма;
				
				Количество = Окр(Оборот.Количество * Коэффициент, 3, 1);
				Сумма      = Окр(Оборот.Сумма * Коэффициент, 2, 1);
				НДС        = Окр((Оборот.Сумма + Оборот.НДС) * Коэффициент, 2, 1) - Сумма;
				
			КонецЕсли;
			
			НоваяСтрока = ИзмененияВидаДеятельностиМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
			НоваяСтрока.ХарактерДеятельности1 = ИзменениеВидаДеятельности.ХарактерДеятельности1;
			НоваяСтрока.НоменклатурнаяГруппа1 = ИзменениеВидаДеятельности.НоменклатурнаяГруппа1;
			НоваяСтрока.ХарактерДеятельности2 = ИзменениеВидаДеятельности.ХарактерДеятельности2;
			НоваяСтрока.НоменклатурнаяГруппа2 = ИзменениеВидаДеятельности.НоменклатурнаяГруппа2;
			
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Сумма      = Сумма;
			НоваяСтрока.НДС        = НДС;
			
			Оборот.Количество = Оборот.Количество - Количество;
			Оборот.Сумма      = Оборот.Сумма - Сумма;
			Оборот.НДС        = Оборот.НДС - НДС;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
			
			СуммаИзменения = СуммаИзменения - Сумма;
			Если СуммаИзменения = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НовыеИзмененияВидаДеятельности = ПолучитьПустуюТаблицуИзмененияВидаДеятельности();
	
	Если ИзмененияВидаДеятельностиМатериалов.Количество() > 0 Тогда
		Движения.ИПМПЗОбороты.Записывать = Истина;
	КонецЕсли;
	
	Для Каждого ИзменениеВидаДеятельности Из ИзмененияВидаДеятельностиМатериалов Цикл
		
		//Сторнирование
		Обороты = Движения.ИПМПЗОбороты.Добавить();
		ЗаполнитьЗначенияСвойств(Обороты, Реквизиты);
		ЗаполнитьЗначенияСвойств(Обороты, ИзменениеВидаДеятельности, , "Количество,Сумма,НДС");
		Обороты.НоменклатурнаяГруппа = ИзменениеВидаДеятельности.НоменклатурнаяГруппа1;
		Обороты.ХарактерДеятельности = ИзменениеВидаДеятельности.ХарактерДеятельности1;
		Обороты.Количество           =-ИзменениеВидаДеятельности.Количество;
		Обороты.Сумма                =-ИзменениеВидаДеятельности.Сумма;
		Обороты.НДС                  =-ИзменениеВидаДеятельности.НДС;
		
		// Восстановление
		Обороты = Движения.ИПМПЗОбороты.Добавить();
		ЗаполнитьЗначенияСвойств(Обороты, Реквизиты);
		ЗаполнитьЗначенияСвойств(Обороты, ИзменениеВидаДеятельности, , "Количество,Сумма,НДС");
		Обороты.НоменклатурнаяГруппа = ИзменениеВидаДеятельности.НоменклатурнаяГруппа2;
		Обороты.ХарактерДеятельности = ИзменениеВидаДеятельности.ХарактерДеятельности2;
		Обороты.Количество           = ИзменениеВидаДеятельности.Количество;
		Обороты.Сумма                = ИзменениеВидаДеятельности.Сумма;
		Обороты.НДС                  = ИзменениеВидаДеятельности.НДС;
		
		НоваяЗапись = НовыеИзмененияВидаДеятельности.Добавить();
		НоваяЗапись.ХарактерДеятельности1 = ИзменениеВидаДеятельности.ХарактерДеятельности1;
		НоваяЗапись.НоменклатурнаяГруппа1 = ИзменениеВидаДеятельности.НоменклатурнаяГруппа1;
		НоваяЗапись.ХарактерДеятельности2 = ИзменениеВидаДеятельности.ХарактерДеятельности2;
		НоваяЗапись.НоменклатурнаяГруппа2 = ИзменениеВидаДеятельности.НоменклатурнаяГруппа2;
		НоваяЗапись.Номенклатура          = ИзменениеВидаДеятельности.НоменклатураСписанная;
		НоваяЗапись.Партия                = ИзменениеВидаДеятельности.ПартияСписаннойНоменклатуры;
		НоваяЗапись.ДокументОплаты        = ИзменениеВидаДеятельности.ДокументОплаты;
		НоваяЗапись.ВидМПЗ                = ИзменениеВидаДеятельности.ВидСписанногоМПЗ;
		НоваяЗапись.Количество            = ИзменениеВидаДеятельности.Количество;
		НоваяЗапись.Сумма                 = ИзменениеВидаДеятельности.Сумма;
		НоваяЗапись.НДС                   = ИзменениеВидаДеятельности.НДС;
		
	КонецЦикла;
	
	Если НовыеИзмененияВидаДеятельности.Количество() > 0 Тогда
		СформироватьДвиженияИзменениеВидаДеятельности(НовыеИзмененияВидаДеятельности, ТаблицаРеквизитов, Истина, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеВидаДеятельности(ТаблицаИзмененияВидаДеятельности, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ИзмененияВидаДеятельности
	
	СписокОбязательныхКолонок = ""
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.*> - вид МПЗ
		+ "ХарактерДеятельности1,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - начальный характер деятельности
		+ "НоменклатурнаяГруппа1,"	// <СправочникСсылка.НоменклатурныеГруппы> - начальная номенклатурная группа
		+ "ХарактерДеятельности2,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - конечный характер деятельности
		+ "НоменклатурнаяГруппа2,"	// <СправочникСсылка.НоменклатурныеГруппы> - конечная номенклатурная группа
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"					// <ДокументСсылка.*> - документ поставки МПЗ
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты МПЗ
		+ "МПЗ,"					// <СправочникСсылка.*,ПланСчетовСсылка.Хозрасчетный> - МПЗ ИМР, счет учета Прочих расходов, физ. лицо Расходов на оплату труда
		+ "ПартияМПЗ,"				// <ДокументСсылка.*,СправочникСсылка.*> - ПартияМПЗ ИМР, контрагент Расходов на оплату труда
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС";					// <Число,15,2> - сумма НДС в рублях
		
	Параметры.Вставить("ИзмененияВидаДеятельности", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаИзмененияВидаДеятельности, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Если материал списывается на себестоимость продукции, но, при этом, в регистре
// "ИП Иные материальные расходы" отражены затраты, связанные с приобретением
// данного материала (ссылка на материал в измерении МПЗ), то необходимо "перекинуть"
// данные затраты с партии материала на партию продукции.
//
Процедура СформироватьДвиженияИзменениеПартииМПЗДляИМР(ТаблицаМатериалы, ТаблицаРеквизитов, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаМатериалы) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеПартииМПЗДляИМР(ТаблицаМатериалы, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	Материалы = Параметры.Материалы;

	СписокМПЗ		= Материалы.ВыгрузитьКолонку("НоменклатураСписанная");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокМПЗ);
	
	СписокПартийМПЗ	= Материалы.ВыгрузитьКолонку("ПартияСписаннойНоменклатуры");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокПартийМПЗ);
	
	// Установка управляемой блокировки
	СтруктураПараметров	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПИныеМатериальныеРасходы");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("МПЗ",		"НоменклатураСписанная");
	ОписаниеИсточника.Вставить("ПартияМПЗ",	"ПартияСписаннойНоменклатуры");
		
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПИныеМатериальныеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, Материалы, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",	Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",	Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокМПЗ",		СписокМПЗ);
	Запрос.УстановитьПараметр("СписокПартийМПЗ",СписокПартийМПЗ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток,
		|	ИПИныеМатериальныеРасходыОстатки.СуммаОстаток,
		|	ИПИныеМатериальныеРасходыОстатки.НДСОстаток
		|ПОМЕСТИТЬ ВТ_ИПИныеМатериальныеРасходыОстатки
		|ИЗ
		|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И МПЗ В (&СписокМПЗ)
		|				И ПартияМПЗ В (&СписокПартийМПЗ)) КАК ИПИныеМатериальныеРасходыОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.СуммаОстаток
		|ПОМЕСТИТЬ ВТ_ИПМПЗОстатки
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И (Номенклатура, Партия) В
		|					(ВЫБРАТЬ
		|						ВТ_ИПИныеМатериальныеРасходыОстатки.МПЗ КАК Номенклатура,
		|						ВТ_ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ КАК Партия
		|					ИЗ
		|						ВТ_ИПИныеМатериальныеРасходыОстатки)) КАК ИПМПЗОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ КАК МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ КАК ПартияМПЗ,
		|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартииМПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток КАК Количество,
		|	ИПИныеМатериальныеРасходыОстатки.СуммаОстаток КАК Сумма,
		|	ИПИныеМатериальныеРасходыОстатки.НДСОстаток КАК НДС,
		|	ИПМПЗОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	ВТ_ИПИныеМатериальныеРасходыОстатки КАК ИПИныеМатериальныеРасходыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИПМПЗОстатки КАК ИПМПЗОстатки
		|		ПО ИПИныеМатериальныеРасходыОстатки.МПЗ = ИПМПЗОстатки.Номенклатура
		|			И ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ = ИПМПЗОстатки.Партия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
		|		ПО (РеквизитыПартий.Организация = &Организация)
		|			И ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ = РеквизитыПартий.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	МПЗ,
		|	ДатаПартииМПЗ,
		|	ПартияМПЗ";
	
	Материалы.Свернуть("НоменклатураПоступившая, НоменклатураСписанная, ПартияСписаннойНоменклатуры", "Сумма");
	Материалы.Сортировать("НоменклатураПоступившая Возр, Сумма Убыв", Новый СравнениеЗначений);
	
	Материалы.Колонки.Добавить("КоличествоИМР",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Материалы.Колонки.Добавить("СуммаИМР",		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Материалы.Колонки.Добавить("НДСИМР",		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СтруктураОтбора = Новый Структура("НоменклатураСписанная, ПартияСписаннойНоменклатуры");
	Материалы.Индексы.Добавить("НоменклатураСписанная, ПартияСписаннойНоменклатуры");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Если на стоимость списанного материала относятся ИМР, то у этих ИМР необходимо заменить партию списанного материала
		// на партию полученной продукции.
		
		ОстатокМатериала = Выборка.СуммаОстаток;
		Если ОстатокМатериала =  0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.НоменклатураСписанная		= Выборка.МПЗ; 
		СтруктураОтбора.ПартияСписаннойНоменклатуры	= Выборка.ПартияМПЗ;
		
		СтрокиВыбМатериала	= Материалы.НайтиСтроки(СтруктураОтбора);
		
		ТабМатериала = Материалы.Скопировать(СтрокиВыбМатериала);
		
		СписаноМатриала = ТабМатериала.Итог("Сумма");
		Если СписаноМатриала = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписаноМатриала = ОстатокМатериала Тогда
			
			Сумма		= Выборка.Сумма;
			НДС			= Выборка.НДС;
			Количество	= Выборка.Количество;
			
		Иначе
			
			Коэффициент = СписаноМатриала/ОстатокМатериала;
			
			СуммаСНДС	= Окр((Выборка.Сумма + Выборка.НДС) * Коэффициент, 2, 1);
			Сумма		= Окр(Выборка.Сумма * Коэффициент, 2, 1);
			НДС			= СуммаСНДС - Сумма;
			Количество	= Окр(Выборка.Количество * Коэффициент, 3, 1);
			
		КонецЕсли;
		
		МассивКоэф = ТабМатериала.ВыгрузитьКолонку("Сумма");
		
		РаспредСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Сумма, МассивКоэф);
		Если РаспредСумма <> Неопределено Тогда
			ТабМатериала.ЗагрузитьКолонку(РаспредСумма, "СуммаИМР");
		КонецЕсли;
		
		РаспредСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДС, МассивКоэф);
		Если РаспредСумма <> Неопределено Тогда
			ТабМатериала.ЗагрузитьКолонку(РаспредСумма, "НДСИМР");
		КонецЕсли;
		
		РаспредСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Количество, МассивКоэф, 3);
		Если РаспредСумма <> Неопределено Тогда
			ТабМатериала.ЗагрузитьКолонку(РаспредСумма, "КоличествоИМР");
		КонецЕсли;
		
		Движения.ИПИныеМатериальныеРасходы.Записывать	= Истина;
		
		Движение	= Движения.ИПИныеМатериальныеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.НоменклатурнаяГруппа	= Выборка.НоменклатурнаяГруппа;
		Движение.ХарактерДеятельности	= Выборка.ХарактерДеятельности;
		Движение.СтатьяЗатрат			= Выборка.СтатьяЗатрат;
		Движение.Партия					= Выборка.Партия;
		Движение.ДокументОплаты			= Выборка.ДокументОплаты;
		Движение.МПЗ					= Выборка.МПЗ;
		Движение.ПартияМПЗ				= Выборка.ПартияМПЗ;
		Движение.Количество				=-Количество;
		Движение.Сумма					=-Сумма;
		Движение.НДС					=-НДС;
		
		Для Каждого НоменклатураПолуч Из ТабМатериала Цикл
			Движение = Движения.ИПИныеМатериальныеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
			Движение.НоменклатурнаяГруппа	= Выборка.НоменклатурнаяГруппа;
			Движение.ХарактерДеятельности	= Выборка.ХарактерДеятельности;
			Движение.СтатьяЗатрат			= Выборка.СтатьяЗатрат;
			Движение.Партия					= Выборка.Партия;
			Движение.ДокументОплаты			= Выборка.ДокументОплаты;
			Движение.МПЗ					= НоменклатураПолуч.НоменклатураПоступившая;
			Движение.ПартияМПЗ				= Реквизиты.Регистратор;
			Движение.Количество				= НоменклатураПолуч.КоличествоИМР;
			Движение.Сумма					= НоменклатураПолуч.СуммаИМР;
			Движение.НДС					= НоменклатураПолуч.НДСИМР;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПартииМПЗДляИМР(ТаблицаМатериалы, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Материалы
	СписокОбязательныхКолонок = ""
		+ "НоменклатураПоступившая,"		// <СправочникСсылка.*> - поступившая номенклатура 
		+ "НоменклатураСписанная,"			// <СправочникСсылка.*> - списанная номенклатура
		+ "ПартияСписаннойНоменклатуры,"	// <ДокументСсылка.*> - документ поставки списанной номенклатуры
		+ "Сумма";							// <Число,15,2>
		
	Параметры.Вставить("Материалы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМатериалы, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуСписанияТоваровНТТ(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСписанияТоваровНТТ(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ = Параметры.СписокМПЗ;
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",				Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ.КорСчетСписания, МПЗ.СтатьяЗатрат, МПЗ.ВидРасходовНУ, МПЗ.ПринятиеКналоговомуУчету);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
		СтруктураПараметров.ВидМПЗ	= ВидМПЗ;
		
		МПЗ.ВидМПЗ					= ВидМПЗ;
		МПЗ.НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		МПЗ.ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанияТоваровНТТ(ТаблицаСписанныеМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "КорСчетСписания,"						// <ПланСчетовСсылка.Хозрасчетный> - счет списания
		+ "Номенклатура,"							// <СправочникСсылка.*> - номенклатура списанного МПЗ
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа списанного МПЗ
		+ "СтавкаНДСВРознице,"						// <ПеречислениеСсылка.СтавкиНДС>
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Сумма,"									// <Число,15,2>
		+ "Количество";								// <Число,15,2>
	
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"		// <СправочникСсылка.Организации>
		+ "ВидОперации";		// <ПеречислениеСсылка.*> - вид операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияСписаниеТоваровНТТ(ТаблицаСписанныеМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаСписанныеМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеТоваровНТТ(ТаблицаСписанныеМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделятьПоСтавкамНДС = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	СтруктураПараметровТорговаяНаценкаНТТ = Новый Структура;
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Регистратор",	Реквизиты.Регистратор);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Период",		Реквизиты.Период);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Организация",	Реквизиты.Организация);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Подразделение",	Реквизиты.Подразделение);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("Склад",			Реквизиты.Склад);
	СтруктураПараметровТорговаяНаценкаНТТ.Вставить("ТаблицаТовары",	СписокМПЗ);
	
	ТаблицаТорговойНаценки = ПодготовитьТаблицуТорговойНаценкиНТТ(СтруктураПараметровТорговаяНаценкаНТТ);
	Если РазделятьПоСтавкамНДС Тогда
		ТаблицаТорговойНаценки.Индексы.Добавить("СтавкаНДС");
	КонецЕсли;
	
	Движения.ИПМПЗ.Записывать	= Истина;
	
	Для каждого МПЗ из СписокМПЗ Цикл
	
		Если РазделятьПоСтавкамНДС Тогда
			СтрокаТорговойНаценки = ТаблицаТорговойНаценки.Найти(МПЗ.СтавкаНДСВРознице, "СтавкаНДС");
		Иначе
			СтрокаТорговойНаценки = ?(ТаблицаТорговойНаценки.Количество() > 0, ТаблицаТорговойНаценки[0], Неопределено);
		КонецЕсли;

		Если СтрокаТорговойНаценки = Неопределено Тогда
			СуммаНаценки   = 0;
		ИначеЕсли СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца <> 0 Тогда
			СуммаНаценки   = СтрокаТорговойНаценки.ТорговаяНаценка * МПЗ.Сумма / (СтрокаТорговойНаценки.ПродажнаяСтоимость + СтрокаТорговойНаценки.СписаннаяНаценкаСНачалаМесяца);
		Иначе
			СуммаНаценки   = МПЗ.Сумма;
		КонецЕсли;
		
		Движение = Движения.ИПМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.НоменклатурнаяГруппа	= МПЗ.НоменклатурнаяГруппа;
		Движение.ХарактерДеятельности	= МПЗ.ХарактерДеятельности;
		Движение.ВидМПЗ					= МПЗ.ВидМПЗ;
		Движение.Номенклатура			= МПЗ.Номенклатура;
		Движение.Партия					= Реквизиты.Регистратор;
		Движение.Сумма					= МПЗ.Сумма - СуммаНаценки;
		Движение.Количество				= МПЗ.Количество;

	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеТоваровНТТ(ТаблицаСписанныеМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ВидМПЗ,"							// <ПеречислениеСсылка.ВидыМПЗ> - вид списанного МПЗ
		+ "Номенклатура,"					// <СправочникСсылка.*> - номенклатура списанного МПЗ
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности списанного МПЗ
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа списанного МПЗ
		+ "СтавкаНДСВРознице,"				// <ПеречислениеСсылка.СтавкиНДС>
		+ "Сумма,"							// <Число,15,2>
		+ "Количество";						// <Число,15,2>
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"		// <СправочникСсылка.Организации>
		+ "Подразделение,"		// <СправочникСсылка.*>
		+ "Склад";				// <СправочникСсылка.*>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьТаблицуТорговойНаценкиНТТ(СтруктураПараметров)

	Регистратор		= СтруктураПараметров.Регистратор;
	Период			= СтруктураПараметров.Период;
	Организация		= СтруктураПараметров.Организация;
	Подразделение	= СтруктураПараметров.Подразделение;
	Склад			= СтруктураПараметров.Склад;

	СчетНТТ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетНТТ);

	РазделятьПоСтавкамНДС = СвойстваСчета.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", 		      НачалоМесяца(Период));
	Запрос.УстановитьПараметр("МоментВремениДокумента",   Новый МоментВремени(Период, Регистратор));
	Запрос.УстановитьПараметр("Организация", 		      Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
	Запрос.УстановитьПараметр("Склад", 		              Склад);
	Запрос.УстановитьПараметр("ВидыСубконто", 		      ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаСебестоимостьПродаж", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиТН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениДокумента,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаНТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение = &ПодразделениеОрганизации
	|					ИЛИ Подразделение ЕСТЬ NULL )
	|				И Субконто1 = &Склад) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиПС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениДокумента,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (Подразделение = &ПодразделениеОрганизации
	|					ИЛИ Подразделение ЕСТЬ NULL )
	|				И Субконто1 = &Склад) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ПОМЕСТИТЬ ХозрасчетныйОборотыНТТ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоМесяца,
	|			&МоментВремениДокумента,
	|			,
	|			СчетДт В (&СчетаСебестоимостьПродаж),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И (ПодразделениеКт = &ПодразделениеОрганизации
	|					ИЛИ ПодразделениеКт ЕСТЬ NULL )) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Склад,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаОстатокКт, 0)) КАК ТорговаяНаценка,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаНУОстатокКт, 0)) КАК ТорговаяНаценкаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаПРОстатокКт, 0)) КАК ТорговаяНаценкаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиТН.СуммаВРОстатокКт, 0)) КАК ТорговаяНаценкаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимость,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыНТТ.СуммаОборот, 0)) КАК СписаннаяНаценкаСНачалаМесяца
	|ИЗ
	|	ХозрасчетныйОстаткиТН КАК ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиПС КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОборотыНТТ КАК ХозрасчетныйОборотыНТТ
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыНТТ.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыНТТ.СубконтоКт2
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1
	|	,ХозрасчетныйОстаткиТН.Субконто2";

	Если НЕ РазделятьПоСтавкамНДС Тогда // Исключение третьего субконто (партии) из запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстатки.Субконто2,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОборотыДтКт.СубконтоКт2,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкаНДС,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыНТТ.СубконтоКт2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",ХозрасчетныйОстаткиТН.Субконто2", "");
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьПустуюТаблицуСписанныеМПЗ()

	СписанныеМПЗ = Новый ТаблицаЗначений;
	СписанныеМПЗ.Колонки.Добавить("ВидМПЗ",                 Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписанныеМПЗ.Колонки.Добавить("Номенклатура",            Справочники.ТипВсеСсылки());
	СписанныеМПЗ.Колонки.Добавить("ХарактерДеятельности",    Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписанныеМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",    Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписанныеМПЗ.Колонки.Добавить("ВидПоступившегоМПЗ",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписанныеМПЗ.Колонки.Добавить("НоменклатураПоступившая", Справочники.ТипВсеСсылки());
	СписанныеМПЗ.Колонки.Добавить("Партия",                  Документы.ТипВсеСсылки());
	СписанныеМПЗ.Колонки.Добавить("ДокументОплаты",          Документы.ТипВсеСсылки());
	СписанныеМПЗ.Колонки.Добавить("Количество",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СписанныеМПЗ.Колонки.Добавить("Сумма",                   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписанныеМПЗ.Колонки.Добавить("НДС",                     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписанныеМПЗ.Колонки.Добавить("Выручка",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписанныеМПЗ.Колонки.Добавить("НДСНачисленный",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписанныеМПЗ.Колонки.Добавить("ВозвратПоТекущемуДокументу", Новый ОписаниеТипов("Булево"));
	
	Возврат СписанныеМПЗ;
	
КонецФункции

Функция ПолучитьПустуюТаблицуСтоимостьПродукции()

	СтоимостьПродукции = Новый ТаблицаЗначений;
	СтоимостьПродукции.Колонки.Добавить("ВидСписанногоМПЗ",				Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СтоимостьПродукции.Колонки.Добавить("ВидПоступившегоМПЗ",			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СтоимостьПродукции.Колонки.Добавить("ХарактерДеятельности",			Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СтоимостьПродукции.Колонки.Добавить("НоменклатурнаяГруппа",			Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СтоимостьПродукции.Колонки.Добавить("НоменклатураПоступившая",		Справочники.ТипВсеСсылки());
	СтоимостьПродукции.Колонки.Добавить("НоменклатураСписанная",		Справочники.ТипВсеСсылки());
	СтоимостьПродукции.Колонки.Добавить("ПартияСписаннойНоменклатуры",	Документы.ТипВсеСсылки());
	СтоимостьПродукции.Колонки.Добавить("ДокументОплаты",				Документы.ТипВсеСсылки());
	СтоимостьПродукции.Колонки.Добавить("КоличествоСписано",			ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СтоимостьПродукции.Колонки.Добавить("Сумма",						ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СтоимостьПродукции.Колонки.Добавить("НДС",							ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат СтоимостьПродукции;
	
КонецФункции

Функция ПолучитьПустуюТаблицуИзмененияВидаДеятельности() Экспорт

	ИзмененияВидаДеятельности = Новый ТаблицаЗначений;
	ИзмененияВидаДеятельности.Колонки.Добавить("ВидМПЗ",				Перечисления.ТипВсеСсылки());
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности1",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа1",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ИзмененияВидаДеятельности.Колонки.Добавить("ХарактерДеятельности2",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ИзмененияВидаДеятельности.Колонки.Добавить("НоменклатурнаяГруппа2",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ИзмененияВидаДеятельности.Колонки.Добавить("Номенклатура",			Справочники.ТипВсеСсылки());
	ИзмененияВидаДеятельности.Колонки.Добавить("Партия",				Документы.ТипВсеСсылки());
	ИзмененияВидаДеятельности.Колонки.Добавить("ДокументОплаты",		Документы.ТипВсеСсылки());
	ИзмененияВидаДеятельности.Колонки.Добавить("МПЗ",					Новый ОписаниеТипов(Справочники.ТипВсеСсылки(), "ПланСчетовСсылка.Хозрасчетный"));
	ИзмененияВидаДеятельности.Колонки.Добавить("ПартияМПЗ",				Новый ОписаниеТипов(Справочники.ТипВсеСсылки(), Документы.ТипВсеСсылки().Типы()));
	ИзмененияВидаДеятельности.Колонки.Добавить("Количество",			ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ИзмененияВидаДеятельности.Колонки.Добавить("Сумма",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ИзмененияВидаДеятельности.Колонки.Добавить("НДС",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	Возврат ИзмененияВидаДеятельности;
	
КонецФункции

Функция ПодготовитьТаблицыСписанияМПЗСУчетомВозвратаОтчетКомиссионера(ТаблицаМПЗ, ТаблицаРеквизитов, ТаблицаВозвраты, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
		Или Не ЗначениеЗаполнено(ТаблицаМПЗ) Тогда
		Возврат Новый Структура("СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Материалы");
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Новый Структура("СписанныеМПЗ, ИзмененияВидаДеятельности, СтоимостьПродукции, Материалы");
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицСписанияМПЗОтчетКомиссионера(ТаблицаМПЗ, ТаблицаВозвраты, ТаблицаРеквизитов);
	
	ТаблицыСписанияТоваровИП = ПолучитьТаблицыСписанияМПЗ(Параметры, Отказ);
	
	// Учет доходов и расходов, добавим строки сторно по признаку ВозвратПоТекущемуДокументу
	СписатьВозвратыПоТекущемуДокументуИП(ТаблицыСписанияТоваровИП);
	
	Возврат ТаблицыСписанияТоваровИП;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицСписанияМПЗОтчетКомиссионера(ТаблицаМПЗ, ТаблицаВозвраты, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"								// <Строка> - имя списка в документе
		+ "НомерСтроки,"							// <Число> - номер строки в списка 
		+ "Продукция,"								// <СправочникСсылка.*> - номенклатуа получаемой продукции
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура,"							// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"									// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетЗатрат,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетДоходов,"							// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Количество,"								// <Число,15,3> - количество списываемой номенклатуры
		+ "Выручка,"								// <Число,15,2> - сумма выручки с НДС в рублях
		+ "ВозвратПоТекущемуДокументу,"				// <Число,15,2> - сумма выручки с НДС в рублях
		+ "НДСНачисленный";							// <Число,15,2> - сумма НДС начисленного в рублях
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокВозврата таблица возвращенных МПЗ, по структуре регистра ИПМПЗ
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"					// <ПеречислениеСсылка.ХарактерДеятельности> - характер деятельности
		+ "ВидМПЗ,"									// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"							// <СправочникСсылка.Номенклатура> - возвращенная номенклатура
		+ "Партия,"									// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"							// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"								// <Число 15,5> - Количество
		+ "Сумма,"									// <Число 15,2> - Сумма
		+ "НДС";									// <Число,15,2> - Сумма НДС
		
	Параметры.Вставить("СписокВозвраты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозвраты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ТипСклада,"				// <ПеречислениеСсылка.ТипыСкладов> - тип склада
		+ "ДеятельностьНаПатенте,"	// <Булево> - признак деятельности на патенте
		+ "ТипСписания,"			// <Строка> - "Реализация", "Списание", "Перемещение" - тип списания
		+ "ВидОперации";			// <ПеречислениеСсылка.*> - вид операции
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Процедура сторнирует возвраты по текущему документу
// 
// Параметры:
// СтруктураТаблицСписаннияМПЗ - таблица значений - таблица списанных МПЗ
Процедура СписатьВозвратыПоТекущемуДокументуИП(СтруктураТаблицСписаннияМПЗ) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураТаблицСписаннияМПЗ.СписанныеМПЗ) Тогда
		Возврат;
	КонецЕсли;
	
	СписанныеМПЗ = СтруктураТаблицСписаннияМПЗ.СписанныеМПЗ;
	
	ТаблицаПродажСВозвратами = СписанныеМПЗ.Скопировать(
		Новый Структура("ВозвратПоТекущемуДокументу", Истина));
	
	Для каждого ТекущаяСтрока Из ТаблицаПродажСВозвратами Цикл
		
		НоваяСтрока = СписанныеМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.Количество = - НоваяСтрока.Количество;
		НоваяСтрока.Сумма = - НоваяСтрока.Сумма;
		НоваяСтрока.НДС = - НоваяСтрока.НДС;
		НоваяСтрока.НДСНачисленный = - НоваяСтрока.НДСНачисленный;
		НоваяСтрока.Выручка = - НоваяСтрока.Выручка;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаСписанияМПЗ

Функция ПодготовитьТаблицыКорректировкиСписанияМПЗ(СписанныеМПЗ, ВозвращенныеМПЗ, ТаблицаРеквизитов) Экспорт
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаМПЗ");				// Таблица корректировки регистра ИПМПЗ
	СтруктураТаблиц.Вставить("ТаблицаМПЗОтгруженные");	// Таблица корректировки регистра ИПМПЗОтгруженные
	СтруктураТаблиц.Вставить("ТаблицаДоходы");			// Таблица корректировки регистра ИПДоходы
	СтруктураТаблиц.Вставить("СписанныеМПЗ");			// таблица подготовленная для стандартного алгоритма списания МПЗ
	СтруктураТаблиц.Вставить("ОказанныеУслуги");		// таблица подготовленная для стандартного алгоритма оказания услуг
	
	Если Не ЗначениеЗаполнено(СписанныеМПЗ)
		И Не ЗначениеЗаполнено(ВозвращенныеМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыКорректировкиСписанияМПЗ(СписанныеМПЗ, ВозвращенныеМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗОтгруженные = Параметры.СписокМПЗСписанные;
	
	Для Каждого МПЗ Из Параметры.СписокМПЗВозвращенные Цикл
		МПЗОтгруженные = СписокМПЗОтгруженные.Добавить();
		ЗаполнитьЗначенияСвойств(МПЗОтгруженные, МПЗ, , "Количество, Выручка, НДСНачисленный");
		МПЗОтгруженные.Количество     = -МПЗ.Количество;
		МПЗОтгруженные.Выручка        = -МПЗ.Выручка;
		МПЗОтгруженные.НДСНачисленный = -МПЗ.НДСНачисленный;
	КонецЦикла;
	СписокМПЗОтгруженные.Сортировать("ИмяСписка, НомерСтроки");
	
	СписокМПЗОтгруженные.Колонки.Добавить("ВидМПЗ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	
	Для каждого МПЗ из СписокМПЗОтгруженные Цикл
		МПЗ.ВидМПЗ = ?(МПЗ.ЭтоУслуга, Перечисления.ВидыМПЗ.Продукция, ВидМПЗПоСчетуУчета(МПЗ.СчетУчета));
	КонецЦикла;
	
	// Таблица изменений остатков МПЗ
	СписокМПЗ = Новый ТаблицаЗначений;
	СписокМПЗ.Колонки.Добавить("ИмяСписка",            ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокМПЗ.Колонки.Добавить("НомерСтроки",          ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	СписокМПЗ.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("Номенклатура",         Справочники.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("Партия",               Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("ДокументОплаты",       Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("ИзменениеКоличества",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СписокМПЗ.Колонки.Добавить("ИзменениеСуммы",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗ.Колонки.Добавить("ИзменениеНДС",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Таблица изменений доходов
	СписокМПЗОплаченные = Новый ТаблицаЗначений;
	СписокМПЗОплаченные.Колонки.Добавить("НоменклатурнаяГруппа",     Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗОплаченные.Колонки.Добавить("ХарактерДеятельности",     Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗОплаченные.Колонки.Добавить("ВидМПЗ",                   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗОплаченные.Колонки.Добавить("Номенклатура",             Справочники.ТипВсеСсылки());
	СписокМПЗОплаченные.Колонки.Добавить("ДокументОтгрузки",         Документы.ТипВсеСсылки());
	СписокМПЗОплаченные.Колонки.Добавить("Партия",                   Документы.ТипВсеСсылки());
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеКоличества",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеВыручки",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеНДСНачисленного", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеСуммы",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗОплаченные.Колонки.Добавить("ИзменениеНДС",             ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗОплаченные.Колонки.Добавить("КорректировкаВыручки",     Новый ОписаниеТипов("Булево"));
	
	СписанныеМПЗ = СписокМПЗОтгруженные.СкопироватьКолонки();
	СписанныеМПЗ.Колонки.Добавить("ХарактерДеятельности",  Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписанныеМПЗ.Индексы.Добавить("ЭтоУслуга");
	
	ТаблицаМПЗОтгруженные = ПодготовитьТаблицуКорретировкиСписанияМПЗОтгруженные(СписокМПЗОтгруженные, СписокМПЗ, СписокМПЗОплаченные, СписанныеМПЗ, Реквизиты);
	ТаблицаСписанияМПЗ    = ПодготовитьТаблицуКорретировкиСписанияМПЗ(СписокМПЗ, ТаблицаМПЗОтгруженные, Реквизиты);
	ТаблицаДоходы         = ПодготовитьТаблицуКорретировкиСписанияДоходов(СписокМПЗОплаченные, Реквизиты);
	
	СтруктураТаблиц.ТаблицаМПЗ            = ТаблицаСписанияМПЗ;
	СтруктураТаблиц.ТаблицаМПЗОтгруженные = ТаблицаМПЗОтгруженные;
	СтруктураТаблиц.ТаблицаДоходы         = ТаблицаДоходы;
	СтруктураТаблиц.СписанныеМПЗ          = СписанныеМПЗ.Скопировать(Новый Структура("ЭтоУслуга", Ложь));
	СтруктураТаблиц.ОказанныеУслуги       = СписанныеМПЗ.Скопировать(Новый Структура("ЭтоУслуга", Истина));
	
	Возврат СтруктураТаблиц;

КонецФункции

Функция ПодготовитьПараметрыТаблицыКорректировкиСписанияМПЗ(СписанныеМПЗ, ВозвращенныеМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗСписанные, Параметры.СписокМПЗВозвращенные
	
	СписокОбязательныхКолонок	= ""
		+ "ИмяСписка,"								// <Строка> - имя списка в документе
		+ "НомерСтроки,"							// <Число> - номер строки в списка 
		+ "Продукция,"								// <СправочникСсылка.*> - номенклатуа получаемой продукции
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура,"							// <СправочникСсылка.*> - списываемая номенклатура
		+ "ЭтоУслуга,"								// <Булево>
		+ "Партия,"									// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетЗатрат,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета МПЗ
		+ "СчетДоходов,"							// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Количество,"								// <Число,15,3> - количество списываемой номенклатуры
		+ "Выручка,"								// <Число,15,2> - сумма выручки с НДС в рублях
		+ "НДСНачисленный";							// <Число,15,2> - сумма НДС начисленного в рублях
		
	Параметры.Вставить("СписокМПЗСписанные", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		СписанныеМПЗ, СписокОбязательныхКолонок));
		
	Параметры.Вставить("СписокМПЗВозвращенные", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ВозвращенныеМПЗ, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок	= ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"				// <СправочникСсылка.Организации> - организация
		+ "ВидОперации,"				// <ПеречислениеСсылка.ВидыОперацийИсправленияПоступленияРеализации> - вид операции
		+ "ДеятельностьНаПатенте,"		// <Булево> - признак деятельности на патенте
		+ "ДокументРеализации,"			// <ДокументСсылка.*> - первоначальный документ отгрузки
		+ "ДатаДокументаРеализации";	// <Дата> - дата первоначального документа отгрузки
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуКорретировкиСписанияМПЗОтгруженные(СписокМПЗОтгруженные, СписокМПЗ, СписокМПЗОплаченные, СписанныеМПЗ, Реквизиты)
	
	Если СписокМПЗОтгруженные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОтгруженные");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("ВидМПЗ",       "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура", "Номенклатура");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(Реквизиты.ДатаДокументаРеализации, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("ДокументОтгрузки", Реквизиты.ДокументРеализации);
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();

	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ДатаДокументаРеализации, Реквизиты.ДокументРеализации), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	СписокВидовМПЗ     = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОтгруженные, "ВидМПЗ", Истина);
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОтгруженные, "Номенклатура", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       КонецПериода);
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",     СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ДокументОтгрузки",   Реквизиты.ДокументРеализации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.ДокументОплаты,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
	|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСРасход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
	|ПОМЕСТИТЬ ВТИПМПЗОтгруженныеОбороты
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И ДокументОтгрузки = &ДокументОтгрузки) КАК ИПМПЗОтгруженныеОбороты
	|ГДЕ
	|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОбороты.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаПартии,
	|	ИПМПЗОтгруженныеОбороты.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
	|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСРасход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
	|ИЗ
	|	ВТИПМПЗОтгруженныеОбороты КАК ИПМПЗОтгруженныеОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОбороты.Партия = РеквизитыПартий.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОборотов.Индексы.Добавить("ВидМПЗ, Номенклатура, Партия");
	
	ТаблицаМПЗОтгруженные = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные");
	ТаблицаМПЗОтгруженные.Колонки.Удалить("Организация");
	ТаблицаМПЗОтгруженные.Колонки.Добавить("Списание", Новый ОписаниеТипов("Булево"));
	
	Отбор         = Новый Структура("ВидМПЗ, Номенклатура");
	ОтборПоПартии = Новый Структура("ВидМПЗ, Номенклатура, Партия");
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СтруктураПараметров = Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат,
		|СчетДоходов, ДеятельностьНаПатенте");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	СписокМПЗОплаченные.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОтгрузки, Партия, КорректировкаВыручки");
	ОтборМПЗОплаченные = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, ДокументОтгрузки, Партия, КорректировкаВыручки");
	
	Для каждого МПЗ Из СписокМПЗОтгруженные Цикл
		
		ИзменениеКоличества      = МПЗ.Количество;
		ИзменениеВыручки         = МПЗ.Выручка;
		ИзменениеНДСНачисленного = МПЗ.НДСНачисленный;
		
		Если ИзменениеКоличества > 0 Тогда
			// Увеличено количество отгруженного товара, списание производится общим алгоритмом списания МПЗ
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
			
			СписаниеМПЗ = СписанныеМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(СписаниеМПЗ, МПЗ);
			СписаниеМПЗ.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			СписаниеМПЗ.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			
			Продолжить;
			
		КонецЕсли;
		
		// Корректировка количества
		Если ИзменениеКоличества < 0 Тогда
			
			// При уменьшении количества отгруженного товара известна партия
			ЗаполнитьЗначенияСвойств(ОтборПоПартии, МПЗ);
			ОборотыПоПартииМПЗ = ТаблицаОборотов.Скопировать(ОтборПоПартии);
			ОборотыПоПартииМПЗ.Сортировать("ДатаДокументаОплаты Убыв, ДокументОплаты Убыв", Новый СравнениеЗначений);
			
			Для каждого ОборотПоПартии Из ОборотыПоПартииМПЗ Цикл
				
				КоличествоОтгружено = Мин(-ИзменениеКоличества, ОборотПоПартии.КоличествоПриход);
				Если КоличествоОтгружено = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоНеоплачено = Макс(ОборотПоПартии.КоличествоПриход - ОборотПоПартии.КоличествоРасход, 0);
				
				Если КоличествоОтгружено = ОборотПоПартии.КоличествоПриход Тогда
					КоличествоВСтроке     = ОборотПоПартии.КоличествоПриход;
					СуммаВСтроке          = ОборотПоПартии.СуммаПриход;
					НДСВСтроке            = ОборотПоПартии.НДСПриход;
					ВыручкаВСтроке        = ОборотПоПартии.ВыручкаПриход;
					НДСНачисленныйВСтроке = ОборотПоПартии.НДСНачисленныйПриход;
				Иначе
					КоличествоВСтроке     = КоличествоОтгружено;
					СуммаВСтроке          = Окр(ОборотПоПартии.СуммаПриход * КоличествоОтгружено / ОборотПоПартии.КоличествоПриход, 2, 1);
					СуммаСНДСВСтроке      = Окр((ОборотПоПартии.СуммаПриход + ОборотПоПартии.НДСПриход) * КоличествоОтгружено / ОборотПоПартии.КоличествоПриход, 2, 1);
					НДСВСтроке            = СуммаСНДСВСтроке - СуммаВСтроке;
					ВыручкаВСтроке        = Окр(ОборотПоПартии.ВыручкаПриход * КоличествоОтгружено / ОборотПоПартии.КоличествоПриход, 2, 1);
					ВыручкаБезНДСВСтроке  = Окр((ОборотПоПартии.ВыручкаПриход - ОборотПоПартии.НДСНачисленныйПриход) * КоличествоОтгружено / ОборотПоПартии.КоличествоПриход, 2, 1);
					НДСНачисленныйВСтроке = ВыручкаВСтроке - ВыручкаБезНДСВСтроке;
				КонецЕсли;
				
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, ОборотПоПартии);
				ОтгрузкаМПЗ.Корректировка  = Истина;
				ОтгрузкаМПЗ.Количество     = -КоличествоВСтроке;
				ОтгрузкаМПЗ.Сумма          = -СуммаВСтроке;
				ОтгрузкаМПЗ.НДС            = -НДСВСтроке;
				ОтгрузкаМПЗ.Выручка        = -ВыручкаВСтроке;
				ОтгрузкаМПЗ.НДСНачисленный = -НДСНачисленныйВСтроке;
				
				// Данные для корректировки регистра ИПМПЗ
				СписаниеМПЗ = СписокМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СписаниеМПЗ, ОборотПоПартии);
				СписаниеМПЗ.ИзменениеКоличества = -КоличествоВСтроке;
				СписаниеМПЗ.ИзменениеСуммы      = -СуммаВСтроке;
				СписаниеМПЗ.ИзменениеНДС        = -НДСВСтроке;
				
				ОборотПоПартии.КоличествоПриход     = ОборотПоПартии.КоличествоПриход - КоличествоВСтроке;
				ОборотПоПартии.СуммаПриход          = ОборотПоПартии.СуммаПриход - СуммаВСтроке;
				ОборотПоПартии.НДСПриход            = ОборотПоПартии.НДСПриход - НДСВСтроке;
				ОборотПоПартии.ВыручкаПриход        = ОборотПоПартии.ВыручкаПриход - ВыручкаВСтроке;
				ОборотПоПартии.НДСНачисленныйПриход = ОборотПоПартии.НДСНачисленныйПриход - НДСНачисленныйВСтроке;
				
				// В первую очередь корректируем неоплаченную часть отгруженного товара
				КорректировкаОплаченного = Макс(КоличествоВСтроке - КоличествоНеоплачено, 0);
				
				Если КорректировкаОплаченного > 0 Тогда
					
					// Корретировка оплаченной отгрузки
					
					Если КорректировкаОплаченного >= ОборотПоПартии.КоличествоРасход Тогда
						ОплаченноеКоличествоВСтроке     = ОборотПоПартии.КоличествоРасход;
						ОплаченнаяСуммаВСтроке          = ОборотПоПартии.СуммаРасход;
						ОплаченныйНДСВСтроке            = ОборотПоПартии.НДСРасход;
						ОплаченнаяВыручкаВСтроке        = ОборотПоПартии.ВыручкаРасход;
						ОплаченныйНДСНачисленныйВСтроке = ОборотПоПартии.НДСНачисленныйРасход;
					Иначе
						Коэффициент = КорректировкаОплаченного / ОборотПоПартии.КоличествоРасход;
						ОплаченноеКоличествоВСтроке     = КорректировкаОплаченного;
						ОплаченнаяСуммаВСтроке          = Окр(ОборотПоПартии.СуммаРасход * Коэффициент, 2, 1);
						ОплаченнаяСуммаСНДСВСтроке      = Окр((ОборотПоПартии.СуммаРасход + ОборотПоПартии.НДСРасход) * Коэффициент, 2, 1);
						ОплаченныйНДСВСтроке            = ОплаченнаяСуммаСНДСВСтроке - ОплаченнаяСуммаВСтроке;
						ОплаченнаяВыручкаВСтроке        = Окр(ОборотПоПартии.ВыручкаРасход * Коэффициент, 2, 1);
						ОплаченнаяВыручкаБезНДСВСтроке  = Окр((ОборотПоПартии.ВыручкаРасход - ОборотПоПартии.НДСНачисленныйРасход) * Коэффициент, 2, 1);
						ОплаченныйНДСНачисленныйВСтроке = ОплаченнаяВыручкаВСтроке - ОплаченнаяВыручкаБезНДСВСтроке;
					КонецЕсли;
					
					ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
					ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, ОборотПоПартии);
					ОтгрузкаМПЗ.Корректировка       = Истина;
					ОтгрузкаМПЗ.Списание            = Истина;
					ОтгрузкаМПЗ.Количество          = -ОплаченноеКоличествоВСтроке;
					ОтгрузкаМПЗ.Сумма               = -ОплаченнаяСуммаВСтроке;
					ОтгрузкаМПЗ.НДС                 = -ОплаченныйНДСВСтроке;
					ОтгрузкаМПЗ.Выручка             = -ОплаченнаяВыручкаВСтроке;
					ОтгрузкаМПЗ.НДСНачисленный      = -ОплаченныйНДСНачисленныйВСтроке;
					
					// Данные для корректировки ИПДоходы
					ЗаполнитьЗначенияСвойств(ОтборМПЗОплаченные, ОборотПоПартии);
					НайденныеСтроки = СписокМПЗОплаченные.НайтиСтроки(ОтборМПЗОплаченные);
					Если НайденныеСтроки.Количество() > 0 Тогда
						МПЗОплаченные = НайденныеСтроки[0];
					Иначе
						МПЗОплаченные = СписокМПЗОплаченные.Добавить();
						ЗаполнитьЗначенияСвойств(МПЗОплаченные, ОборотПоПартии);
					КонецЕсли;
					МПЗОплаченные.ИзменениеКоличества      = МПЗОплаченные.ИзменениеКоличества - ОплаченноеКоличествоВСтроке;
					МПЗОплаченные.ИзменениеСуммы           = МПЗОплаченные.ИзменениеСуммы - ОплаченнаяСуммаВСтроке;
					МПЗОплаченные.ИзменениеНДС             = МПЗОплаченные.ИзменениеНДС - ОплаченныйНДСВСтроке;
					МПЗОплаченные.ИзменениеВыручки         = МПЗОплаченные.ИзменениеВыручки - ОплаченнаяВыручкаВСтроке;
					МПЗОплаченные.ИзменениеНДСНачисленного = МПЗОплаченные.ИзменениеНДСНачисленного - ОплаченныйНДСНачисленныйВСтроке;
					
					ОборотПоПартии.КоличествоРасход     = ОборотПоПартии.КоличествоРасход - ОплаченноеКоличествоВСтроке;
					ОборотПоПартии.СуммаРасход          = ОборотПоПартии.СуммаРасход - ОплаченнаяСуммаВСтроке;
					ОборотПоПартии.НДСРасход            = ОборотПоПартии.НДСРасход - ОплаченныйНДСВСтроке;
					ОборотПоПартии.ВыручкаРасход        = ОборотПоПартии.ВыручкаРасход - ОплаченнаяВыручкаВСтроке;
					ОборотПоПартии.НДСНачисленныйРасход = ОборотПоПартии.НДСНачисленныйРасход - ОплаченныйНДСНачисленныйВСтроке;
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(ОборотПоПартии.НомерСтроки, "НомерСтроки"), ОборотПоПартии);
				
				ИзменениеКоличества      = ИзменениеКоличества + КоличествоВСтроке;
				ИзменениеВыручки         = ИзменениеВыручки + ВыручкаВСтроке;
				ИзменениеНДСНачисленного = ИзменениеНДСНачисленного + НДСНачисленныйВСтроке;
				
				Если ИзменениеКоличества = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИзменениеВыручки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
		ОборотыМПЗ = ТаблицаОборотов.Скопировать(Отбор);
		ОборотыМПЗ.Сортировать("ДатаДокументаОплаты, ДокументОплаты, ДатаПартии, Партия", Новый СравнениеЗначений);
		
		ВыручкаПриход = ОборотыМПЗ.Итог("ВыручкаПриход");
		ВыручкаРасход = ОборотыМПЗ.Итог("ВыручкаРасход");
		
		КоличествоРасход = ОборотыМПЗ.Итог("КоличествоРасход");
		
		Если ИзменениеВыручки <> 0 Тогда
			
			// Распределение изменений выручки по партиям и документам оплаты
			// База распределения - выручка
			
			МассивКоэффициентов = ОборотыМПЗ.ВыгрузитьКолонку("ВыручкаПриход");
			
			РаспределеннаяВыручка = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеВыручки, МассивКоэффициентов, 2);
			
			РаспределенныйНДСНачисленный = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеНДСНачисленного, МассивКоэффициентов, 2);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.ВыручкаПриход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеВыручкиВСтроке         = ?(РаспределеннаяВыручка <> Неопределено, РаспределеннаяВыручка[Индекс], 0);
				ИзменениеНДСНачисленногоВСтроке = ?(РаспределенныйНДСНачисленный <> Неопределено, РаспределенныйНДСНачисленный[Индекс], 0);
				
				Если ИзменениеВыручкиВСтроке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Изменилась цена отгрузки, сторнируем старую запись
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Корректировка  = Истина;
				ОтгрузкаМПЗ.Количество     = -Оборот.КоличествоПриход;
				ОтгрузкаМПЗ.Сумма          = -Оборот.СуммаПриход;
				ОтгрузкаМПЗ.НДС            = -Оборот.НДСПриход;
				ОтгрузкаМПЗ.Выручка        = -Оборот.ВыручкаПриход;
				ОтгрузкаМПЗ.НДСНачисленный = -Оборот.НДСНачисленныйПриход;
				
				//Новую запись делаем с учетом изменений
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Количество     = Оборот.КоличествоПриход;
				ОтгрузкаМПЗ.Сумма          = Оборот.СуммаПриход;
				ОтгрузкаМПЗ.НДС            = Оборот.НДСПриход;
				ОтгрузкаМПЗ.Выручка        = Оборот.ВыручкаПриход + ИзменениеВыручкиВСтроке;
				ОтгрузкаМПЗ.НДСНачисленный = Оборот.НДСНачисленныйПриход + ИзменениеНДСНачисленногоВСтроке;
				
				Оборот.ВыручкаПриход        = Оборот.ВыручкаПриход + ИзменениеВыручкиВСтроке;
				Оборот.НДСНачисленныйПриход = Оборот.НДСНачисленныйПриход + ИзменениеНДСНачисленногоВСтроке;
				ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
				
			КонецЦикла;
			
		КонецЕсли;
			
		// Корректировка оплаченной выручки
		ИзменениеОплаченнойВыручки          = 0;
		ИзменениеОплаченногоНДСНачисленного = 0;
		Если ВыручкаПриход <> 0 Тогда
			ИзменениеОплаченнойВыручки          = Окр(ИзменениеВыручки * ВыручкаРасход / ВыручкаПриход, 2, 1);
			ИзменениеОплаченнойВыручкиБезНДС    = Окр((ИзменениеВыручки - ИзменениеНДСНачисленного) * ВыручкаРасход / ВыручкаПриход, 2, 1);
			ИзменениеОплаченногоНДСНачисленного = ИзменениеОплаченнойВыручки - ИзменениеОплаченнойВыручкиБезНДС;
		КонецЕсли;
		
		Если ИзменениеОплаченнойВыручки <> 0 Тогда
			
			МассивКоэффициентов = ОборотыМПЗ.ВыгрузитьКолонку("ВыручкаРасход");
			
			РаспределеннаяВыручка = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеОплаченнойВыручки, МассивКоэффициентов, 2);
			
			РаспределенныйНДСНачисленный = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				ИзменениеОплаченногоНДСНачисленного, МассивКоэффициентов, 2);
			
			Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
				
				Оборот = ОборотыМПЗ[Индекс];
				Если Оборот.ВыручкаРасход = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеВыручкиВСтроке         = ?(РаспределеннаяВыручка <> Неопределено, РаспределеннаяВыручка[Индекс], 0);
				ИзменениеНДСНачисленногоВСтроке = ?(РаспределенныйНДСНачисленный <> Неопределено, РаспределенныйНДСНачисленный[Индекс], 0);
				
				Если ИзменениеВыручкиВСтроке = 0 И ИзменениеНДСНачисленногоВСтроке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Изменилась цена, сторнируем старую запись
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Корректировка  = Истина;
				ОтгрузкаМПЗ.Списание       = Истина;
				ОтгрузкаМПЗ.Количество     = -Оборот.КоличествоРасход;
				ОтгрузкаМПЗ.Сумма          = -Оборот.СуммаРасход;
				ОтгрузкаМПЗ.НДС            = -Оборот.НДСРасход;
				ОтгрузкаМПЗ.Выручка        = -Оборот.ВыручкаРасход;
				ОтгрузкаМПЗ.НДСНачисленный = -Оборот.НДСНачисленныйРасход;
				
				//Новую запись делаем с учетом изменений
				ОтгрузкаМПЗ = ТаблицаМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(ОтгрузкаМПЗ, Оборот);
				ОтгрузкаМПЗ.Списание       = Истина;
				ОтгрузкаМПЗ.Количество     = Оборот.КоличествоРасход;
				ОтгрузкаМПЗ.Сумма          = Оборот.СуммаРасход;
				ОтгрузкаМПЗ.НДС            = Оборот.НДСРасход;
				ОтгрузкаМПЗ.Выручка        = Оборот.ВыручкаРасход + ИзменениеВыручкиВСтроке;
				ОтгрузкаМПЗ.НДСНачисленный = Оборот.НДСНачисленныйРасход + ИзменениеНДСНачисленногоВСтроке;
				
				// Данные для корректировки ИПДоходы
				ЗаполнитьЗначенияСвойств(ОтборМПЗОплаченные, Оборот);
				ОтборМПЗОплаченные.КорректировкаВыручки = Истина;
				НайденныеСтроки = СписокМПЗОплаченные.НайтиСтроки(ОтборМПЗОплаченные);
				Если НайденныеСтроки.Количество() > 0 Тогда
					МПЗОплаченные = НайденныеСтроки[0];
				Иначе
					МПЗОплаченные = СписокМПЗОплаченные.Добавить();
					ЗаполнитьЗначенияСвойств(МПЗОплаченные, Оборот);
					МПЗОплаченные.КорректировкаВыручки = Истина;
				КонецЕсли;
				МПЗОплаченные.ИзменениеВыручки         = МПЗОплаченные.ИзменениеВыручки + ИзменениеВыручкиВСтроке;
				МПЗОплаченные.ИзменениеНДСНачисленного = МПЗОплаченные.ИзменениеНДСНачисленного + ИзменениеНДСНачисленногоВСтроке;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМПЗОтгруженные;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиСписанияМПЗ(СписокМПЗ, ТаблицаКорретировкиСписанияМПЗОтгруженные, Реквизиты)

	Если СписокМПЗ.Количество() = 0 Или ТаблицаКорретировкиСписанияМПЗОтгруженные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КолонкиГруппировок  = "НоменклатурнаяГруппа,ХарактерДеятельности,ВидМПЗ,Номенклатура,Партия,ДокументОплаты";
	КолонкиСуммирования = "Количество,Сумма,НДС";
	СтрокиКорректировкиОтгрузки = ТаблицаКорретировкиСписанияМПЗОтгруженные.НайтиСтроки(Новый Структура("Списание", Ложь));
	МПЗОтгруженные = ТаблицаКорретировкиСписанияМПЗОтгруженные.Скопировать(СтрокиКорректировкиОтгрузки, КолонкиГруппировок + "," + КолонкиСуммирования);
	МПЗОтгруженные.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	МПЗОтгруженные.Индексы.Добавить(КолонкиГруппировок);
	
	ОтборМПЗОтгруженные = Новый Структура(КолонкиГруппировок);
	
	ТаблицаКорретировкиМПЗ = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗ");
	ТаблицаКорретировкиМПЗ.Колонки.Удалить("Организация");
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		ИзменениеКоличества = МПЗ.ИзменениеКоличества;
		Если ИзменениеКоличества >= 0 Тогда
			// Увеличение количества отгруженных производится общим алгоритмом списания МПЗ
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборМПЗОтгруженные, МПЗ);
		НайденныеСтроки = МПЗОтгруженные.НайтиСтроки(ОтборМПЗОтгруженные);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КорректировкаМПЗОтгруженные = НайденныеСтроки[0];
		Если КорректировкаМПЗОтгруженные.Количество >= 0 Тогда
			// Увеличение количества отгруженных производится общим алгоритмом списания МПЗ
			Продолжить;
		КонецЕсли;
		
		Если ИзменениеКоличества <= КорректировкаМПЗОтгруженные.Количество Тогда // Сравниваем отрицательные величины
			КоличествоВСтроке = КорректировкаМПЗОтгруженные.Количество;
			СуммаВСтроке      = КорректировкаМПЗОтгруженные.Сумма;
			НДСВСтроке        = КорректировкаМПЗОтгруженные.НДС;
		Иначе
			Коэффициент = ИзменениеКоличества / КорректировкаМПЗОтгруженные.Количество;
			КоличествоВСтроке = ИзменениеКоличества;
			СуммаВСтроке      = Окр(КорректировкаМПЗОтгруженные.Сумма * Коэффициент, 2, 1);
			СуммаСНДСВСтроке  = Окр((КорректировкаМПЗОтгруженные.Сумма + КорректировкаМПЗОтгруженные.НДС) * Коэффициент, 2, 1);
			НДСВСтроке        = СуммаСНДСВСтроке - СуммаВСтроке;
		КонецЕсли;
		
		КорректировкаМПЗ = ТаблицаКорретировкиМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(КорректировкаМПЗ, КорректировкаМПЗОтгруженные);
		КорректировкаМПЗ.Корректировка = Истина;
		КорректировкаМПЗ.Количество = КоличествоВСтроке;
		КорректировкаМПЗ.Сумма      = СуммаВСтроке;
		КорректировкаМПЗ.НДС        = НДСВСтроке;
		
	КонецЦикла;
	
	Возврат ТаблицаКорретировкиМПЗ;
	
КонецФункции

Функция ПодготовитьТаблицуКорретировкиСписанияДоходов(СписокМПЗОплаченные, Реквизиты)
	
	Если Не ЗначениеЗаполнено(СписокМПЗОплаченные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПДоходы");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("ВидМПЗ",               "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура",         "Номенклатура");
	ОписаниеИсточника.Вставить("Партия",               "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПДоходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(Реквизиты.ДатаДокументаРеализации, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("ДокументОтгрузки", Реквизиты.ДокументРеализации);
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗОплаченные, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НачалоПериода = Новый Граница(Новый МоментВремени(Реквизиты.ДатаДокументаРеализации, Реквизиты.ДокументРеализации), ВидГраницы.Включая);
	КонецПериода  = Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая);
	
	СписокНоменклатурныхГрупп    = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "НоменклатурнаяГруппа", Истина);
	СписокХарактеровДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "ХарактерДеятельности", Истина);
	СписокВидовМПЗ               = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "ВидМПЗ", Истина);
	СписокНоменклатуры           = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "Номенклатура", Истина);
	СписокПартий                 = ОбщегоНазначения.ВыгрузитьКолонку(СписокМПЗОплаченные, "Партия", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецПериода);
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп",    СписокНоменклатурныхГрупп);
	Запрос.УстановитьПараметр("СписокХарактеровДеятельности", СписокХарактеровДеятельности);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",               СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатуры",           СписокНоменклатуры);
	Запрос.УстановитьПараметр("ДокументОтгрузки",             Реквизиты.ДокументРеализации);
	Запрос.УстановитьПараметр("СписокПартий",                 СписокПартий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПДоходыОбороты.НоменклатурнаяГруппа,
	|	ИПДоходыОбороты.ХарактерДеятельности,
	|	ИПДоходыОбороты.ВидМПЗ,
	|	ИПДоходыОбороты.Номенклатура,
	|	ИПДоходыОбороты.ДокументОтгрузки,
	|	ИПДоходыОбороты.Партия,
	|	ИПДоходыОбороты.ДокументОплаты,
	|	ИПДоходыОбороты.КоличествоОборот,
	|	ИПДоходыОбороты.ВыручкаОборот,
	|	ИПДоходыОбороты.НДСНачисленныйОборот,
	|	ИПДоходыОбороты.СуммаОборот,
	|	ИПДоходыОбороты.НДСОборот,
	|	ИПДоходыОбороты.КоличествоОплаченоПоставщикуОборот
	|ПОМЕСТИТЬ ВТИПДоходыОбороты
	|ИЗ
	|	РегистрНакопления.ИПДоходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&СписокНоменклатурныхГрупп)
	|				И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|				И ВидМПЗ В (&СписокВидовМПЗ)
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И ДокументОтгрузки = &ДокументОтгрузки
	|				И Партия В (&СписокПартий)) КАК ИПДоходыОбороты
	|ГДЕ ИПДоходыОбороты.ВыручкаОборот <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПДоходыОбороты.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПДоходыОбороты.НоменклатурнаяГруппа,
	|	ИПДоходыОбороты.ХарактерДеятельности,
	|	ИПДоходыОбороты.ВидМПЗ,
	|	ИПДоходыОбороты.Номенклатура,
	|	ИПДоходыОбороты.ДокументОтгрузки,
	|	ИПДоходыОбороты.Партия,
	|	ИПДоходыОбороты.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПДоходыОбороты.КоличествоОборот,
	|	ИПДоходыОбороты.ВыручкаОборот,
	|	ИПДоходыОбороты.НДСНачисленныйОборот,
	|	ИПДоходыОбороты.СуммаОборот,
	|	ИПДоходыОбороты.НДСОборот,
	|	ИПДоходыОбороты.КоличествоОплаченоПоставщикуОборот
	|ИЗ
	|	ВТИПДоходыОбороты КАК ИПДоходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПДоходыОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	ТаблицаДоходы = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПДоходы");
	ТаблицаДоходы.Колонки.Удалить("Организация");
	
	ТаблицаОборотов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	Отбор = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	Для каждого МПЗ Из СписокМПЗОплаченные Цикл
		
		ИзменениеКоличества      = МПЗ.ИзменениеКоличества;
		ИзменениеСуммы           = МПЗ.ИзменениеСуммы;
		ИзменениеНДС             = МПЗ.ИзменениеНДС;
		ИзменениеВыручки         = МПЗ.ИзменениеВыручки;
		ИзменениеНДСНачисленного = МПЗ.ИзменениеНДСНачисленного;
		
		ЗаполнитьЗначенияСвойств(Отбор, МПЗ);
		
		ОборотыМПЗ = ТаблицаОборотов.Скопировать(Отбор);
		ОборотыМПЗ.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
		
		МассивКоэффициентовСумма = ОборотыМПЗ.ВыгрузитьКолонку("СуммаОборот");
		
		РаспределенноеКоличествоОплаченоПоставщику = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ИзменениеКоличества, МассивКоэффициентовСумма, 3);
		
		РаспределеннаяСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ИзменениеСуммы, МассивКоэффициентовСумма, 2);
		
		РаспределенныйНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ИзменениеНДС, МассивКоэффициентовСумма, 2);
		
		МассивКоэффициентовВыручка = ОборотыМПЗ.ВыгрузитьКолонку("ВыручкаОборот");
		
		РаспределенноеКоличество = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ИзменениеКоличества, МассивКоэффициентовВыручка, 3);
		
		РаспределеннаяВыручка = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ИзменениеВыручки, МассивКоэффициентовВыручка, 2);
		
		РаспределенныйНДСНачисленный = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			ИзменениеНДСНачисленного, МассивКоэффициентовВыручка, 2);
		
		Для Индекс = 0 По ОборотыМПЗ.Количество() - 1 Цикл
			
			Оборот = ОборотыМПЗ[Индекс];
			
			КоличествоВСтроке     = ?(РаспределенноеКоличество <> Неопределено, РаспределенноеКоличество[Индекс], 0);
			СуммаВСтроке          = ?(РаспределеннаяСумма <> Неопределено, РаспределеннаяСумма[Индекс], 0);
			НДСВСтроке            = ?(РаспределенныйНДС <> Неопределено, РаспределенныйНДС[Индекс], 0);
			ВыручкаВСтроке        = ?(РаспределеннаяВыручка <> Неопределено, РаспределеннаяВыручка[Индекс], 0);
			НДСНачисленныйВСтроке = ?(РаспределенныйНДСНачисленный <> Неопределено, РаспределенныйНДСНачисленный[Индекс], 0);
			КоличествоОплаченоПоставщикуВСтроке =
				?(РаспределенноеКоличествоОплаченоПоставщику <> Неопределено, РаспределенноеКоличествоОплаченоПоставщику[Индекс], 0);
			
			Если КоличествоОплаченоПоставщикуВСтроке = 0 И СуммаВСтроке = 0 И НДСВСтроке = 0 
				И КоличествоВСтроке = 0 И ВыручкаВСтроке = 0 И НДСНачисленныйВСтроке = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если МПЗ.КорректировкаВыручки Тогда
				// Изменилась цена, сторнируем старую запись
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Корректировка                = Истина;
				Доход.Количество                   = -Оборот.КоличествоОборот;
				Доход.Выручка                      = -Оборот.ВыручкаОборот;
				Доход.НДСНачисленный               = -Оборот.НДСНачисленныйОборот;
				Доход.Сумма                        = -Оборот.СуммаОборот;
				Доход.НДС                          = -Оборот.НДСОборот;
				Доход.КоличествоОплаченоПоставщику = -Оборот.КоличествоОплаченоПоставщикуОборот;
				
				//Новую запись делаем с учетом изменений
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Количество                   = Оборот.КоличествоОборот + КоличествоВСтроке;
				Доход.Выручка                      = Оборот.ВыручкаОборот + ВыручкаВСтроке;
				Доход.НДСНачисленный               = Оборот.НДСНачисленныйОборот + НДСНачисленныйВСтроке;
				Доход.Сумма                        = Оборот.СуммаОборот + СуммаВСтроке;
				Доход.НДС                          = Оборот.НДСОборот + НДСВСтроке;
				Доход.КоличествоОплаченоПоставщику = Оборот.КоличествоОплаченоПоставщикуОборот + КоличествоОплаченоПоставщикуВСтроке;
			Иначе
				Доход = ТаблицаДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оборот);
				Доход.Корректировка                = Истина;
				Доход.Количество                   = КоличествоВСтроке;
				Доход.Выручка                      = ВыручкаВСтроке;
				Доход.НДСНачисленный               = НДСНачисленныйВСтроке;
				Доход.Сумма                        = СуммаВСтроке;
				Доход.НДС                          = НДСВСтроке;
				Доход.КоличествоОплаченоПоставщику = КоличествоОплаченоПоставщикуВСтроке;
			КонецЕсли;
			
			Оборот.КоличествоОборот                   = Оборот.КоличествоОборот + КоличествоВСтроке;
			Оборот.ВыручкаОборот                      = Оборот.ВыручкаОборот + ВыручкаВСтроке;
			Оборот.НДСНачисленныйОборот               = Оборот.НДСНачисленныйОборот + НДСНачисленныйВСтроке;
			Оборот.СуммаОборот                        = Оборот.СуммаОборот + СуммаВСтроке;
			Оборот.НДСОборот                          = Оборот.НДСОборот + НДСВСтроке;
			Оборот.КоличествоОплаченоПоставщикуОборот = Оборот.КоличествоОплаченоПоставщикуОборот + КоличествоОплаченоПоставщикуВСтроке;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДоходы;
	
КонецФункции

// Возвращает Таблицу новых движений по регистру "ИПМПЗОтгруженные"
//
Функция СформироватьДвиженияКорректировкиСписанияМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	ТаблицаИПМПЗОтгруженные = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные");
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкиСписанияМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеСобственнойОшибки Тогда
		МожноПризнатьРасход = Истина;
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		ДляПризнанияРасходовТребуетсяПолучениеДоходаИП =
			УчетнаяПолитика.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП(Реквизиты.Организация, Реквизиты.Период);
		ПризнаватьРасходыПоОперациямПрошлогоГодаИП =
			УчетнаяПолитика.ПризнаватьРасходыПоОперациямПрошлогоГодаИП(Реквизиты.Организация, Реквизиты.Период);
		НалоговыйПериод = НалоговыйПериод(Реквизиты.Организация, Реквизиты.Период);
		МожноПризнатьРасход = МожноПризнатьРасходы(ПризнаватьРасходыПоОперациямПрошлогоГодаИП, Реквизиты.ДатаДокументаРеализации, НалоговыйПериод)
			ИЛИ НЕ ДляПризнанияРасходовТребуетсяПолучениеДоходаИП;
	КонецЕсли;
	
	Для каждого МПЗ из Параметры.ТаблицаМПЗ Цикл
		
		Движения.ИПМПЗ.Записывать = Истина;
		
		Движение = Движения.ИПМПЗ.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
	Для каждого МПЗОтгруженные из Параметры.ТаблицаМПЗОтгруженные Цикл
		
		Движения.ИПМПЗОтгруженные.Записывать = Истина;
		
		Движение = Движения.ИПМПЗОтгруженные.Добавить();
		Движение.ВидДвижения = ?(МПЗОтгруженные.Списание, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
		ЗаполнитьЗначенияСвойств(Движение, МПЗОтгруженные);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		ЗнакДвижения = ?(МПЗОтгруженные.Списание, -1, 1);
		
		// Данные для зачета аванса
		НоваяСтрока = ТаблицаИПМПЗОтгруженные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, МПЗОтгруженные);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
		НоваяСтрока.Количество     = ЗнакДвижения * МПЗОтгруженные.Количество;
		НоваяСтрока.Сумма          = ЗнакДвижения * МПЗОтгруженные.Сумма;
		НоваяСтрока.НДС            = ЗнакДвижения * МПЗОтгруженные.НДС;
		НоваяСтрока.Выручка        = ЗнакДвижения * МПЗОтгруженные.Выручка;
		НоваяСтрока.НДСНачисленный = ЗнакДвижения * МПЗОтгруженные.НДСНачисленный;
		
	КонецЦикла;
	
	ТаблицаИПМПЗОтгруженные.Свернуть(
		"НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия, ДокументОплаты, ДокументОтгрузки",
		"Количество, Выручка, НДСНачисленный, Сумма, НДС");
		
	Если МожноПризнатьРасход Тогда
		
		Для каждого Доход из Параметры.ТаблицаДоходы Цикл
			
			Движения.ИПДоходы.Записывать = Истина;
			
			Движение = Движения.ИПДоходы.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Доход);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаИПМПЗОтгруженные;
	
КонецФункции

Функция ПодготовитьПараметрыКорректировкиСписанияМПЗ(СтруктураТаблицМПЗ, ТаблицаВзаиморасчетов, ТаблицаРеквизитов)
	Перем ТаблицаМПЗ, ТаблицаМПЗОтгруженные, ТаблицаДоходы;
	
	СтруктураТаблицМПЗ.Свойство("ТаблицаМПЗ",            ТаблицаМПЗ);
	СтруктураТаблицМПЗ.Свойство("ТаблицаМПЗОтгруженные", ТаблицаМПЗОтгруженные);
	СтруктураТаблицМПЗ.Свойство("ТаблицаДоходы",         ТаблицаДоходы);
	
	Параметры = Новый Структура;
	
	// Подготовка таблиц Параметры.ТаблицаМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"					// <ДокументСсылка.*> -документ оприходования
		+ "ДокументОплаты,"			// <ДокументСсылка.*> -документ оплаты
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Корректировка";			// <Булево> - признак сторно
	
	Параметры.Вставить("ТаблицаМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
	
	// Подготовка таблиц Параметры.ТаблицаМПЗОтгруженные
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"					// <ДокументСсылка.*> -документ оприходования
		+ "ДокументОплаты,"			// <ДокументСсылка.*> -документ оплаты
		+ "ДокументОтгрузки,"		// <ДокументСсылка.*> -документ отгрузки
		+ "Количество,"				// <Число,15,3> - количество
		+ "Сумма,"					// <Число,15,2> - стоимость в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Выручка,"				// <Число,15,2> - сумма выручки с НДС в рублях
		+ "НДСНачисленный,"			// <Число,15,2> - сумма НДС начисленного в рублях
		+ "Корректировка,"			// <Булево> - признак сторно
		+ "Списание";				// <Булево> - признак корректировки оплаты
		
	Параметры.Вставить("ТаблицаМПЗОтгруженные", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗОтгруженные, СписокОбязательныхКолонок));
	
	// Подготовка таблиц Параметры.ТаблицаДоходы
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"							// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"					// <СправочникСсылка.*> - номенклатура МПЗ
		+ "ДокументОтгрузки,"				// <ДокументСсылка.*> -документ отгрузки
		+ "Партия,"							// <ДокументСсылка.*> -документ оприходования
		+ "ДокументОплаты,"					// <ДокументСсылка.*> -документ оплаты
		+ "Количество,"						// <Число,15,3> - количество
		+ "Выручка,"						// <Число,15,2> - сумма выручки с НДС в рублях
		+ "НДСНачисленный,"					// <Число,15,2> - сумма НДС начисленного в рублях
		+ "Сумма,"							// <Число,15,2> - стоимость в рублях без НДС
		+ "НДС,"							// <Число,15,2> - сумма НДС в рублях
		+ "КоличествоОплаченоПоставщику,"	// <Число,15,3> - количество
		+ "Корректировка";					// <Булево> - признак сторно
	
	Параметры.Вставить("ТаблицаДоходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДоходы, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Взаиморасчеты
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"	// <ДокументСсылка.*> - документ оплаты
		+ "СуммаРуб";			// <Число,15,2> - сумма оплаты в рублях с НДС
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"				// <СправочникСсылка.Организации> - организация
		+ "ВидОперации,"				// <ПеречислениеСсылка.ВидыОперацийИсправленияПоступленияРеализации> - вид операции
		+ "ДокументРеализации,"			// <ДокументСсылка.*> - первоначальный документ отгрузки
		+ "ДатаДокументаРеализации";	// <Дата> - дата первоначального документа отгрузки
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ОказаниеУслуг

Функция ПодготовитьТаблицуОказаниеУслуг(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаСобственныеТоварыУслуги) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыОказаниеУслуг(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокСобственныхТоваровУслуг = Параметры.СписокСобственныхТоваровУслуг;
	// Отбираем услуги
	СписокСобственныхТоваровУслуг.Индексы.Добавить("ЭтоУслуга");
	
	Отбор	= Новый Структура("ЭтоУслуга", Истина);
	СписокУслуг = СписокСобственныхТоваровУслуг.Скопировать(Отбор);
	СписокСобственныхТоваровУслуг	= Неопределено;
	
	СписокУслуг.Колонки.Добавить("ВидМПЗ",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокУслуг.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокУслуг.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	
	СписокУслуг.Колонки.СуммаРуб.Имя	= "Выручка";
	СписокУслуг.Колонки.СуммаНДСРуб.Имя	= "НДСНачисленный";
	
	СтруктураПараметров	= Новый Структура("ДеятельностьНаПатенте, НоменклатурнаяГруппа, СчетУчета");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	Для каждого Услуга Из СписокУслуг Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Услуга);
		СтруктураПараметров.НоменклатурнаяГруппа = Услуга.Субконто;
		
		Услуга.ВидМПЗ				= Перечисления.ВидыМПЗ.Продукция;
		Услуга.НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		Услуга.ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат СписокУслуг;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыОказаниеУслуг(ТаблицаСобственныеТоварыУслуги, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокСобственныхТоваровУслуг
	
	СписокОбязательныхКолонок = ""
		+ "ЭтоУслуга,"				// <Булево> - признак услуги: Истина - услуга, Ложь - товар
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета услуги
		+ "Субконто,"				// <Характеристика.ВидыСубконтоХозрасчетные> - субконто счета доходов
		+ "Количество,"				// <Число,15,3> - количество оказанных услуг
		+ "СуммаРуб,"				// <Число,15,2> - сумма выручки в рублях с НДС
		+ "СуммаНДСРуб";			// <Число,15,2> - НДС начисленный в рублях
		
	Параметры.Вставить("СписокСобственныхТоваровУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСобственныеТоварыУслуги, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Организация,"			// <СправочникСсылка.Организации> - оранизация
		+ "ДеятельностьНаПатенте";	// <Булево> - признак деятельности на патенте
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции // ПодготовитьПараметрыТаблицыОказанияУслуг()

// Функция возвращает Таблицу выполненных движений по регистру "ИПМПЗОтгруженные"
//
Функция СформироватьДвиженияОказаниеУслуг(ТаблицаСобственныеУслуги, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	Перем ТаблицаИПМПЗОтгруженные;
	
	Если Движения.Найти("ИПМПЗОтгруженные") <> Неопределено Тогда
		// Таблица для сохранения результатов проведения по регистру ИПМПЗОтгруженные
		ТаблицаИПМПЗОтгруженные	= Движения.ИПМПЗОтгруженные.ВыгрузитьКолонки();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаСобственныеУслуги) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОказаниеУслуг(ТаблицаСобственныеУслуги, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокСписокСобственныхУслуг = Параметры.СписокСписокСобственныхУслуг;
	
	Движения.ИПМПЗОтгруженные.Записывать = Истина;
	
	Для каждого Услуга из СписокСписокСобственныхУслуг Цикл
		
		Движение = Движения.ИПМПЗОтгруженные.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, Услуга);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.ДокументОтгрузки	= Реквизиты.Регистратор;
		
		// Сохраняем движение в таблицу
		НоваяСтрока	= ТаблицаИПМПЗОтгруженные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
		
	КонецЦикла;
	
	Возврат ТаблицаИПМПЗОтгруженные;
	
КонецФункции

Функция ПодготовитьПараметрыОказаниеУслуг(ТаблицаСобственныеУслуги, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокСписокСобственныхУслуг
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура услуги
		+ "Количество,"					// <Число,15,3> - количество оказанных услуг
		+ "Выручка,"					// <Число,15,2> - сумма выручки в рублях с НДС
		+ "НДСНачисленный";				// <Число,15,2> - НДС начисленный в рублях
		
	Параметры.Вставить("СписокСписокСобственныхУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСобственныеУслуги, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ВозвратМПЗОтПокупателя

Функция ПолучитьТаблицыВозвратаМПЗ(Параметры) Экспорт
	ТаблицыВозвратаМПЗОтПокупателя = Новый Структура("СписокМПЗ ,СписокМПЗОтгруженные, СписокДоходов");
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ (Параметры.СписокВыручки.Количество() = 0 
		И Параметры.СписокПартий.Количество() = 0) Тогда
		Возврат ТаблицыВозвратаМПЗОтПокупателя;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокВыручки        = Параметры.СписокВыручки;
	СписокПартий         = Параметры.СписокПартий;
	СписокВзаиморасчетов = Параметры.СписокВзаиморасчетов;
	
	УказанДокументОтгрузки = ЗначениеЗаполнено(Реквизиты.Сделка)
		И ТипЗнч(Реквизиты.Сделка) <> Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
		И ТипЗнч(Реквизиты.Сделка) <> Тип("ДокументСсылка.ОтражениеНачисленияНДС");
	
	НеоплаченныеДокументыОтгрузки = Новый Массив;
	УникальныеЗначенияДокументовОтгрузки = Новый Соответствие;
	
	Для каждого СтрокаВзаиморасчетов из СписокВзаиморасчетов Цикл
		Если СтрокаВзаиморасчетов.ДокументРасчетов <> Реквизиты.Регистратор
			И УникальныеЗначенияДокументовОтгрузки[СтрокаВзаиморасчетов.ДокументРасчетов] = Неопределено Тогда
			
			НеоплаченныеДокументыОтгрузки.Добавить(СтрокаВзаиморасчетов.ДокументРасчетов);
			УникальныеЗначенияДокументовОтгрузки.Вставить(СтрокаВзаиморасчетов.ДокументРасчетов, Истина);
			
		КонецЕсли;
	КонецЦикла;
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	// Распределение выручки по списанным партиям
	СписокВыручки.Свернуть("СчетДоходов, НоменклатурнаяГруппа, Номенклатура,СчетУчета", "Количество, Сумма, НДС");
	
	ВозвращенныеПартии = СписокПартий.СкопироватьКолонки();
	ВозвращенныеПартии.Колонки.Добавить("Выручка",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ВозвращенныеПартии.Колонки.Добавить("НДСНачисленный",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ВозвращенныеПартии.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	ВозвращенныеПартии.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ВозвращенныеПартии.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	
	ОтборПартий = Новый Структура("СчетУчета, Номенклатура");
	СписокПартий.Индексы.Добавить("СчетУчета, Номенклатура");
	
	СтруктураПараметров = Новый Структура(
	"ДеятельностьНаПатенте, НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, ТипСклада, СчетДоходов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары
		И ЗначениеЗаполнено(Реквизиты.Сделка)
		И ТипЗнч(Реквизиты.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		СтруктураПараметров.ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Сделка, "ВидОперации");
	КонецЕсли;
	
	Для каждого МПЗ из СписокВыручки Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПартий, МПЗ);
		СписокСписанныхПартий = СписокПартий.НайтиСтроки(ОтборПартий);
		
		МассивДляРаспределения = Новый Массив;
		Для каждого Партия из СписокСписанныхПартий Цикл
			МассивДляРаспределения.Добавить(Партия.Количество);
		КонецЦикла;
		
		РаспредВыручка        = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(МПЗ.Сумма, МассивДляРаспределения);
		РаспредНДСНачисленный = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(МПЗ.НДС, МассивДляРаспределения);
		
		Для Индекс = 0 по СписокСписанныхПартий.ВГраница() Цикл
			
			НоваяСтрока = ВозвращенныеПартии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, МПЗ);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СписокСписанныхПартий[Индекс]);
			
			Если РаспредВыручка <> Неопределено Тогда
				НоваяСтрока.Выручка = РаспредВыручка[Индекс];
			КонецЕсли;
			
			Если РаспредНДСНачисленный <> Неопределено Тогда
				НоваяСтрока.НДСНачисленный = РаспредНДСНачисленный[Индекс];
			КонецЕсли;
			
			ВидМПЗ = ВидМПЗПоСчетуУчета(МПЗ.СчетУчета);
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
			СтруктураПараметров.ВидМПЗ = ВидМПЗ;
			
			НоваяСтрока.ВидМПЗ               = ВидМПЗ;
			НоваяСтрока.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			НоваяСтрока.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НЕ УказанДокументОтгрузки Тогда
		ЗаполнитьТаблицыВозвратаМПЗОтПокупателяБезУказанияДокументаОтгрузки(
			ТаблицыВозвратаМПЗОтПокупателя, ВозвращенныеПартии, НеоплаченныеДокументыОтгрузки, Реквизиты);
	Иначе
		ЗаполнитьТаблицыВозвратаМПЗОтПокупателяПоДокументуОтгрузки(
			ТаблицыВозвратаМПЗОтПокупателя, ВозвращенныеПартии, Реквизиты);
	КонецЕсли;
	
	Возврат ТаблицыВозвратаМПЗОтПокупателя;

КонецФункции 

Функция ПодготовитьТаблицыВозвратаМПЗОтПокупателя(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизитов) Экспорт
	Перем ТаблицыВозвратаМПЗОтПокупателя;
	
	ТаблицыВозвратаМПЗОтПокупателя = Новый Структура("СписокМПЗ,СписокМПЗОтгруженные,СписокДоходов");
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручки)
		И Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат ТаблицыВозвратаМПЗОтПокупателя;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыВозвратаМПЗОтПокупателя;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицВозвратаМПЗОтПокупателя(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизитов);

	Возврат ПолучитьТаблицыВозвратаМПЗ(Параметры);
	
КонецФункции

Функция ПодготовитьПараметрыТаблицВозвратаМПЗОтПокупателя(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"				// <Строка> - имя списка документа
		+ "НомерСтроки,"			// <Число> - номер строки документа
		+ "Номенклатура,"			// <СправочникСсылка.*> - списываемая номенклатура
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета номенклатуры
		+ "СчетДоходов,"			// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы>  - номенклатурная группа
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Количество,"				// <Число,15,3> 
		+ "Сумма,"					// <Число,15,2> - сумма выручки
		+ "НДС";					// <Число,15,2> - сумма НДС начисленного
		
	Параметры.Вставить("СписокВыручки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыручки, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"				// <Строка> - имя списка документа
		+ "НомерСтроки,"			// <Число> - номер строки документа
		+ "Номенклатура,"			// <СправочникСсылка.*> - списываемая номенклатура
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета номенклатуры
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления номенклатуры
		+ "Количество,"				// <Число,15,3>
		+ "СуммаСписания";			// <Число,15,2>
		
	Параметры.Вставить("СписокПартий", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокВзаиморасчетов
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов";		// <ДокументСсылка.*> - документ оплаты
		
	Параметры.Вставить("СписокВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ДеятельностьНаПатенте,"	// <Булево> - признак деятельности на патенте
		+ "ВидОперации,"			// <ПеречислениеСсылка.*> - вид операции
		+ "ТипСклада,"				// <ПеречислениеСсылка.ТипыСкладов> - тип склада
		+ "Сделка";					// <ПеречислениеСсылка.*> - вид операции сделки
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицыВозвратаМПЗКомиссионеру(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизитов) Экспорт

	ТаблицыВозвратаМПЗОтПокупателя = Новый Структура("СписокМПЗ,СписокМПЗОтгруженные,СписокДоходов");
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручки)
		И Не ЗначениеЗаполнено(ТаблицаСписанныеТовары)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат ТаблицыВозвратаМПЗОтПокупателя;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыВозвратаМПЗОтПокупателя;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицВозвратаМПЗКомиссионеру(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизитов);
	Параметры.СписокВыручки.Индексы.Добавить("Сделка");
	Параметры.СписокПартий.Индексы.Добавить("Сделка");
	Параметры.СписокВзаиморасчетов.Индексы.Добавить("ДокументРасчетов");
	Реквизиты = Параметры.Реквизиты[0];
	
	ПараметрыПоСделке = Новый Структура("СписокВыручки, СписокПартий, СписокВзаиморасчетов, Реквизиты");
	
	Для каждого РеквизитыПоСделке Из Параметры.Реквизиты Цикл
		
		Отбор = Новый Структура("Сделка", РеквизитыПоСделке.Сделка);
		ОтборВзаиморасчеты = Новый Структура("ДокументРасчетов", РеквизитыПоСделке.Сделка);
		
		ПараметрыПоСделке.Вставить("СписокВыручки", 		Параметры.СписокВыручки.Скопировать(Отбор));
		ПараметрыПоСделке.Вставить("СписокПартий", 			Параметры.СписокПартий.Скопировать(Отбор));
		ПараметрыПоСделке.Вставить("СписокВзаиморасчетов", 	Параметры.СписокВзаиморасчетов.Скопировать(ОтборВзаиморасчеты));
		ПараметрыПоСделке.Вставить("Реквизиты", 			Параметры.Реквизиты.Скопировать(Отбор));
		
		ТаблицыВозвратаМПЗПоСделке = ПолучитьТаблицыВозвратаМПЗ(ПараметрыПоСделке);
		
		
		Для каждого КлючИЗначение Из ТаблицыВозвратаМПЗОтПокупателя Цикл
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			
			Если ЗначениеЗаполнено(ТаблицыВозвратаМПЗОтПокупателя[ИмяТаблицы]) Тогда
			
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицыВозвратаМПЗПоСделке[ИмяТаблицы], ТаблицыВозвратаМПЗОтПокупателя[ИмяТаблицы]);
			
			Иначе
			
				ТаблицыВозвратаМПЗОтПокупателя[ИмяТаблицы] = ТаблицыВозвратаМПЗПоСделке[ИмяТаблицы];
			
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат ТаблицыВозвратаМПЗОтПокупателя;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицВозвратаМПЗКомиссионеру(ТаблицаВыручки, ТаблицаСписанныеТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"								// <Строка> - имя списка документа
		+ "НомерСтроки,"							// <Число> - номер строки документа
		+ "Номенклатура,"							// <СправочникСсылка.*> - списываемая номенклатура
		+ "Сделка,"									// <ДокументСсылка.ОтчетКомиссионераПродажах> - документ по которому производится возврат
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета номенклатуры
		+ "СчетДоходов,"							// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы>  - номенклатурная группа
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Количество,"								// <Число,15,3> 
		+ "Сумма,"									// <Число,15,2> - сумма выручки
		+ "НДС";									// <Число,15,2> - сумма НДС начисленного
		
	Параметры.Вставить("СписокВыручки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыручки, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
		+ "ИмяСписка,"				// <Строка> - имя списка документа
		+ "НомерСтроки,"			// <Число> - номер строки документа
		+ "Номенклатура,"			// <СправочникСсылка.*> - списываемая номенклатура
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета номенклатуры
		+ "Партия,"					// <ДокументСсылка.*> - партия возвращаемых МПЗ
		+ "Сделка,"					// <ДокументСсылка.ОтчетКомиссионераПродажах> - документ по которому производится возврат
		+ "Количество,"				// <Число,15,3>
		+ "СуммаСписания";			// <Число,15,2>
		
	Параметры.Вставить("СписокПартий", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокВзаиморасчетов
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов";		// <ДокументСсылка.*> - документ оплаты
		
	Параметры.Вставить("СписокВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ДеятельностьНаПатенте,"	// <Булево> - признак деятельности на патенте
		+ "ВидОперации,"			// <ПеречислениеСсылка.*> - вид операции
		+ "ТипСклада,"				// <ПеречислениеСсылка.ТипыСкладов> - тип склада
		+ "Партия,"					// <ДокументСсылка.ОтчетКомиссионераПродажах> - документ по которому производится возврат
		+ "ПартияДата,"				// <Дата> - дата документа по которому производится возврат
		+ "Сделка";					// <ДокументСсылка.ОтчетКомиссионераПродажах> - документ по которому производится возврат
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ВыполнитьДвиженияВозвратМПЗОтПокупателя(Параметры, Движения, Отказ)

	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ (Параметры.СписокМПЗ.Количество() = 0 
			И Параметры.СписокМПЗОтгруженные.Количество() = 0
			И Параметры.СписокДоходов.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	
	СписокМПЗ				= Параметры.СписокМПЗ;
	СписокМПЗОтгруженные	= Параметры.СписокМПЗОтгруженные;
	СписокДоходов			= Параметры.СписокДоходов;
	
	// Сторнируем партии
	Если СписокМПЗ.Количество() > 0 Тогда
		Движения.ИПМПЗ.Записывать = Истина;
	КонецЕсли;
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Движение = Движения.ИПМПЗ.Добавить();
		
		Если ЗначениеЗаполнено(МПЗ.Партия) Тогда
			// сторно указанной партии
			Движение.ВидДвижения	= ВидДвиженияНакопления.Расход;
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
			Движение.Количество =-МПЗ.Количество;
			Движение.Сумма		=-МПЗ.Сумма;
			Движение.НДС		=-МПЗ.НДС;
			
		Иначе
			// новая партия
			Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
			Движение.Партия		= Реквизиты.Регистратор;
			
			Движение.Количество = МПЗ.Количество;
			Движение.Сумма		= МПЗ.Сумма;
			Движение.НДС		= МПЗ.НДС;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Сторнируем отгрузки
	Если СписокМПЗОтгруженные.Количество() > 0 Тогда
		Движения.ИПМПЗОтгруженные.Записывать	= Истина;
	КонецЕсли;
	
	Для каждого МПЗОтгруженные Из СписокМПЗОтгруженные Цикл
		
		Движение = Движения.ИПМПЗОтгруженные.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, МПЗОтгруженные);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество		=-МПЗОтгруженные.Количество;
		Движение.Сумма			=-МПЗОтгруженные.Сумма;
		Движение.НДС			=-МПЗОтгруженные.НДС;
		Движение.Выручка		=-МПЗОтгруженные.Выручка;
		Движение.НДСНачисленный	=-МПЗОтгруженные.НДСНачисленный;
		
	КонецЦикла;	
	
	// Сторнируем доходы
	Если СписокДоходов.Количество() > 0 Тогда
		Движения.ИПДоходы.Записывать	= Истина;
	КонецЕсли;
	
	Для каждого Доход Из СписокДоходов Цикл
		
		Движение	= Движения.ИПДоходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Доход);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество						=-Доход.Количество;
		Движение.НДСНачисленный					=-Доход.НДСНачисленный;
		Движение.Выручка						=-Доход.Выручка;
		Движение.Сумма							=-Доход.Сумма;
		Движение.НДС							=-Доход.НДС;
		Движение.КоличествоОплаченоПоставщику	=-Доход.КоличествоОплаченоПоставщику;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияВозвратМПЗОтПокупателя(ТаблицаМПЗ, ТаблицаМПЗОтгруженные, ТаблицаДоходы, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Параметры	= ПодготовитьПараметрыВозвратМПЗОтПокупателя(ТаблицаМПЗ, ТаблицаМПЗОтгруженные, ТаблицаДоходы,  ТаблицаРеквизитов);
	
	ВыполнитьДвиженияВозвратМПЗОтПокупателя(Параметры, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияВозвратМПЗКомиссионеру(ТаблицаМПЗ, ТаблицаМПЗОтгруженные, ТаблицаДоходы,  ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Параметры	= ПодготовитьПараметрыВозвратМПЗОтПокупателя(ТаблицаМПЗ, ТаблицаМПЗОтгруженные, ТаблицаДоходы,  ТаблицаРеквизитов);
	
	ВыполнитьДвиженияВозвратМПЗОтПокупателя(Параметры, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыВозвратМПЗОтПокупателя(ТаблицаМПЗ, ТаблицаМПЗОтгруженные, ТаблицаДоходы, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"				// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"						// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"					// <Число,15,3>
		+ "Сумма,"						// <Число,15,2>
		+ "НДС";						// <Число,15,2>
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокМПЗОтгруженные
	
	СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"				// <ВидДвиженияНакопления>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"				// <СправочникСсылка.*> - списываемая номенклатура
		+ "Партия,"						// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "ДокументОтгрузки,"			// <ДокументСсылка.*> - документ отгрузки
		+ "Количество,"					// <Число,15,3>
		+ "Сумма,"						// <Число,15,2>
		+ "НДС,"						// <Число,15,2>
		+ "Выручка,"					// <Число,15,2>
		+ "НДСНачисленный";				// <Число,15,2>
		
	Параметры.Вставить("СписокМПЗОтгруженные", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗОтгруженные, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокДоходов
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидМПЗ,"							// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"					// <СправочникСсылка.*> - списываемая номенклатура
		+ "ДокументОтгрузки,"				// <ДокументСсылка.*> - документ отгрузки
		+ "Партия,"							// <ДокументСсылка.*> - документ поступления номенклатуры (партия)
		+ "ДокументОплаты,"					// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"						// <Число,15,3>
		+ "Выручка,"						// <Число,15,2>
		+ "НДСНачисленный,"					// <Число,15,2>
		+ "Сумма,"							// <Число,15,2>
		+ "НДС,"							// <Число,15,2>
		+ "КоличествоОплаченоПоставщику";	// <Число,15,3>
		
	Параметры.Вставить("СписокДоходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДоходы, СписокОбязательныхКолонок));
		
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ОплатаПоставщику

Функция ПодготовитьТаблицыОплатыПоставщику(ТаблицаВзаиморасчеты, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.Прочее
		И Реквизиты.ВидОперации <> "АвансовыйОтчет" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицОплатыПоставщику(ТаблицаВзаиморасчеты, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаспределениеОплаты = Новый Структура;
	РаспределениеОплаты.Вставить("МПЗ", ПустаяТаблицаРегистраНакопления("ИПМПЗ", Ложь, Истина));
	РаспределениеОплаты.МПЗ.Индексы.Добавить("ВидДвижения");
	
	РаспределениеОплаты.Вставить("ИныеМатериальныеРасходы", ПустаяТаблицаРегистраНакопления("ИПИныеМатериальныеРасходы", Ложь, Истина));
	РаспределениеОплаты.ИныеМатериальныеРасходы.Индексы.Добавить("ВидДвижения");
	
	РаспределениеОплаты.Вставить("МПЗОбороты", ПустаяТаблицаРегистраНакопления("ИПМПЗОбороты", Ложь, Ложь));
	
	РаспределениеОплаты.Вставить("РБП", ПустаяТаблицаРегистраНакопления("ИПРБП", Ложь, Истина));
	РаспределениеОплаты.РБП.Индексы.Добавить("ВидДвижения");
	
	РаспределениеОплаты.Вставить("ПрочиеРасходы", ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы", Ложь, Ложь));
	РаспределениеОплаты.Вставить("МПЗОтгруженные");
	
	СписокВзаиморасчетов = Параметры.СписокВзаиморасчетов;
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		ПодобратьПартииДопРасходов(Реквизиты, СписокВзаиморасчетов);
	КонецЕсли;
	
	ОплаченныеПартии = ПодготовитьТаблицуОплаченныеПартии(СписокВзаиморасчетов, Реквизиты, "Партия");
	ОплаченныеПартии.Индексы.Добавить("Партия");
	
	СписокПартий = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Партия", Истина);
	ДатаПервойПартии = ДатаПервогоДокумента(СписокПартий);
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("Партия", Метаданные.РегистрыНакопления.ИПМПЗ.Измерения.Партия.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокПартий, "Партия");
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПИныеМатериальныеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("Партия",
		Метаданные.РегистрыНакопления.ИПИныеМатериальныеРасходы.Измерения.Партия.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокПартий, "Партия");
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИППрочиеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("РасчетныйДокумент",
		Метаданные.РегистрыНакопления.ИППрочиеРасходы.Измерения.РасчетныйДокумент.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокПартий, "РасчетныйДокумент");
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РасчетныйДокумент", "РасчетныйДокумент");
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПРБП");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("Партия", Метаданные.РегистрыНакопления.ИПРБП.Измерения.Партия.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокПартий, "Партия");
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
	
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	Запрос.УстановитьПараметр("ДатаНач",      ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаКон",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОбороты.Номенклатура КАК Номенклатура,
	|	ИПМПЗОбороты.Партия КАК Партия,
	|	ИПМПЗОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ИПМПЗОбороты.КоличествоРасход КАК КоличествоРасход,
	|	ИПМПЗОбороты.СуммаПриход КАК СуммаПриход,
	|	ИПМПЗОбороты.СуммаРасход КАК СуммаРасход,
	|	ИПМПЗОбороты.НДСПриход КАК НДСПриход,
	|	ИПМПЗОбороты.НДСРасход КАК НДСРасход
	|ПОМЕСТИТЬ ВТИПМПЗОбороты
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО
	|				И ВидМПЗ <> ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.Продукция)) КАК ИПМПЗОбороты
	|ГДЕ
	|	ИПМПЗОбороты.СуммаПриход + ИПМПЗОбороты.НДСПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОбороты.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОбороты.Партия КАК Партия,
	|	ИПИныеМатериальныеРасходыОбороты.МПЗ КАК МПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.ПартияМПЗ КАК ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ИПИныеМатериальныеРасходыОбороты.КоличествоРасход КАК КоличествоРасход,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаПриход КАК СуммаПриход,
	|	ИПИныеМатериальныеРасходыОбороты.СуммаРасход КАК СуммаРасход,
	|	ИПИныеМатериальныеРасходыОбороты.НДСПриход КАК НДСПриход,
	|	ИПИныеМатериальныеРасходыОбороты.НДСРасход КАК НДСРасход
	|ПОМЕСТИТЬ ВТИПИныеМатериальныеРасходыОбороты
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОбороты
	|ГДЕ
	|	ИПИныеМатериальныеРасходыОбороты.СуммаПриход + ИПИныеМатериальныеРасходыОбороты.НДСПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОбороты.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.СуммаОборот КАК СуммаОборот,
	|	ИППрочиеРасходыОбороты.НДСОборот КАК НДСОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОбороты
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И РасчетныйДокумент В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИППрочиеРасходыОбороты
	|ГДЕ
	|	ИППрочиеРасходыОбороты.СуммаОборот + ИППрочиеРасходыОбороты.НДСОборот > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПРБПОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПРБПОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПРБПОбороты.ВидРасхода КАК ВидРасхода,
	|	ИПРБПОбороты.Партия КАК Партия,
	|	ИПРБПОбороты.СуммаПриход КАК СуммаПриход,
	|	ИПРБПОбороты.СуммаРасход КАК СуммаРасход,
	|	ИПРБПОбороты.НДСПриход КАК НДСПриход,
	|	ИПРБПОбороты.НДСРасход КАК НДСРасход
	|ПОМЕСТИТЬ ВТИПРБПОбороты
	|ИЗ
	|	РегистрНакопления.ИПРБП.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И Партия В (&СписокПартий)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРБПОбороты
	|ГДЕ
	|	ИПРБПОбороты.СуммаПриход + ИПРБПОбороты.НДСПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПРБПОбороты.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИПМПЗОбороты.СуммаРасход + ИПМПЗОбороты.НДСРасход > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Списано,
	|	""МПЗ"" КАК СтатьяРасчетов,
	|	ИПМПЗОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОбороты.Номенклатура КАК Номенклатура,
	|	ИПМПЗОбороты.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК МПЗ,
	|	НЕОПРЕДЕЛЕНО КАК ПартияМПЗ,
	|	ИПМПЗОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ИПМПЗОбороты.КоличествоРасход КАК КоличествоРасход,
	|	ИПМПЗОбороты.СуммаПриход КАК СуммаПриход,
	|	ИПМПЗОбороты.СуммаРасход КАК СуммаРасход,
	|	ИПМПЗОбороты.НДСПриход КАК НДСПриход,
	|	ИПМПЗОбороты.НДСРасход КАК НДСРасход,
	|	ИПМПЗОбороты.ВидМПЗ КАК ВидМПЗ,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	NULL КАК ДатаПартииМПЗ
	|ИЗ
	|	ВТИПМПЗОбороты КАК ИПМПЗОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПМПЗОбороты.Партия = РеквизитыПартий.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИПИМРОбороты.СуммаРасход + ИПИМРОбороты.НДСРасход > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	""ИныеМатериальныеРасходы"",
	|	ИПИМРОбороты.НоменклатурнаяГруппа,
	|	ИПИМРОбороты.ХарактерДеятельности,
	|	ИПИМРОбороты.СтатьяЗатрат,
	|	ИПИМРОбороты.Партия,
	|	ИПИМРОбороты.МПЗ,
	|	ИПИМРОбороты.ПартияМПЗ,
	|	ИПИМРОбороты.КоличествоПриход,
	|	ИПИМРОбороты.КоличествоРасход,
	|	ИПИМРОбороты.СуммаПриход,
	|	ИПИМРОбороты.СуммаРасход,
	|	ИПИМРОбороты.НДСПриход,
	|	ИПИМРОбороты.НДСРасход,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(РеквизитыПартийМПЗ.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1))
	|ИЗ
	|	ВТИПИныеМатериальныеРасходыОбороты КАК ИПИМРОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПИМРОбороты.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартийМПЗ
	|		ПО (РеквизитыПартийМПЗ.Организация = &Организация)
	|			И ИПИМРОбороты.ПартияМПЗ = РеквизитыПартийМПЗ.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	""ПрочиеРасходы"",
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	ИППрочиеРасходыОбороты.СуммаОборот,
	|	0,
	|	ИППрочиеРасходыОбороты.НДСОборот,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТИППрочиеРасходыОбороты КАК ИППрочиеРасходыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИППрочиеРасходыОбороты.РасчетныйДокумент = РеквизитыПартий.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИПРБПОбороты.СуммаРасход + ИПРБПОбороты.НДСРасход > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	""РБП"",
	|	ИПРБПОбороты.НоменклатурнаяГруппа,
	|	ИПРБПОбороты.ХарактерДеятельности,
	|	ИПРБПОбороты.ВидРасхода,
	|	ИПРБПОбороты.Партия,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	ИПРБПОбороты.СуммаПриход,
	|	ИПРБПОбороты.СуммаРасход,
	|	ИПРБПОбороты.НДСПриход,
	|	ИПРБПОбороты.НДСРасход,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТИПРБПОбороты КАК ИПРБПОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПРБПОбороты.Партия = РеквизитыПартий.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПартии,
	|	Партия,
	|	Списано УБЫВ,
	|	Номенклатура,
	|	СтатьяРасчетов,
	|	ДатаПартииМПЗ,
	|	ПартияМПЗ,
	|	МПЗ,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	ВидМПЗ
	|ИТОГИ
	|	МАКСИМУМ(ДатаПартии)
	|ПО
	|	Партия";
	
	Результат = Запрос.Выполнить();
	
	Ресурсы = Новый Структура("ВидДвижения, Количество, Сумма, НДС");
	Ресурсы.Вставить("СтатьяЗатрат");
	Ресурсы.Вставить("ВидРасхода");
	Ресурсы.Вставить("РасчетныйДокумент");
	
	ВыборкаПартия = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партия");
	Пока ВыборкаПартия.Следующий() Цикл
		
		Оплата = ОплаченныеПартии.Найти(ВыборкаПартия.Партия, "Партия");
		Если Оплата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПартия.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Ресурсы.СтатьяЗатрат      = Выборка.Номенклатура;
			Ресурсы.ВидРасхода        = Выборка.Номенклатура;
			Ресурсы.РасчетныйДокумент = Выборка.Партия;
			
			СуммаОплатыПриход = Мин(Оплата.СуммаРуб, Выборка.СуммаПриход + Выборка.НДСПриход);
			
			Если СуммаОплатыПриход > 0 Тогда
				
				Ресурсы.ВидДвижения = ВидДвиженияНакопления.Приход;
				Если СуммаОплатыПриход = (Выборка.СуммаПриход + Выборка.НДСПриход) Тогда
					Ресурсы.Количество = Выборка.КоличествоПриход;
					Ресурсы.Сумма      = Выборка.СуммаПриход;
					Ресурсы.НДС        = Выборка.НДСПриход;
				Иначе
					Коэффициент = СуммаОплатыПриход / (Выборка.СуммаПриход + Выборка.НДСПриход);
					Ресурсы.Количество = Окр(Выборка.КоличествоПриход * Коэффициент, 3, 1);
					Ресурсы.Сумма      = Окр(Выборка.СуммаПриход * Коэффициент, 2, 1);
					Ресурсы.НДС        = СуммаОплатыПриход - Ресурсы.Сумма;
				КонецЕсли;
				
				ТаблицаРаспределения = РаспределениеОплаты[Выборка.СтатьяРасчетов];
				НоваяСтрока = ТаблицаРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Ресурсы);
				НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
				
			КонецЕсли;
			
			СуммаОплатыРасход = Мин(СуммаОплатыПриход, Выборка.СуммаРасход + Выборка.НДСРасход);
			
			Если СуммаОплатыРасход > 0 Тогда
				
				Ресурсы.ВидДвижения = ВидДвиженияНакопления.Расход;
				Если СуммаОплатыРасход = (Выборка.СуммаРасход + Выборка.НДСРасход) Тогда
					Ресурсы.Количество = Выборка.КоличествоРасход;
					Ресурсы.Сумма      = Выборка.СуммаРасход;
					Ресурсы.НДС        = Выборка.НДСРасход;
				Иначе
					Коэффициент = СуммаОплатыРасход / (Выборка.СуммаРасход + Выборка.НДСРасход);
					Ресурсы.Количество = Окр(Выборка.КоличествоРасход * Коэффициент, 3, 1);
					Ресурсы.Сумма      = Окр(Выборка.СуммаРасход * Коэффициент, 2, 1);
					Ресурсы.НДС        = СуммаОплатыРасход - Ресурсы.Сумма;
				КонецЕсли;
				
				ТаблицаРаспределения = РаспределениеОплаты[Выборка.СтатьяРасчетов];
				НоваяСтрока = ТаблицаРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Ресурсы);
				НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
				
			КонецЕсли;
			
			Оплата.СуммаРуб = Оплата.СуммаРуб - СуммаОплатыПриход;
			Если Оплата.СуммаРуб = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписанныеМПЗ = РаспределениеОплаты.МПЗ.Скопировать(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход));
	
	Если СписанныеМПЗ.Количество() > 0 Тогда
		
		ОплаченныеПартии = Новый ТаблицаЗначений;
		ОплаченныеПартии.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		ОплаченныеПартии.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
		ОплаченныеПартии.Колонки.Добавить("ВидМПЗ",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
		ОплаченныеПартии.Колонки.Добавить("Номенклатура",         Справочники.ТипВсеСсылки());
		ОплаченныеПартии.Колонки.Добавить("Партия",               Документы.ТипВсеСсылки());
		ОплаченныеПартии.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ОплаченныеПартии.Колонки.Добавить("НДС",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		ВыбытиеМПЗ = Новый Структура;
		
		// Выпущенная продукция и полуфабрикаты из оплаченных материалов
		ВыбытиеМПЗ.Вставить("ПоступившиеМПЗ", ОплаченныеПартии); 
		
		// Иные материальные расходы, на которые были списаны МПЗ
		ВыбытиеМПЗ.Вставить("ИныеМатериальныеРасходы", ОплаченныеПартии.СкопироватьКолонки());
		
		// Прочие расходы, на которые были списаны МПЗ
		ВыбытиеМПЗ.Вставить("ПрочиеРасходы", ОплаченныеПартии.СкопироватьКолонки());
		
		// МПЗ отгруженные покупателям (не найденные в оборотах)
		ВыбытиеМПЗ.Вставить("МПЗОтгруженные", ОплаченныеПартии.СкопироватьКолонки());
		
		РаспределитьОплатуПоОборотам(СписанныеМПЗ, РаспределениеОплаты, ВыбытиеМПЗ, Реквизиты);
		
		ПоступившиеМПЗ = ПодготовитьТаблицуОплатыПоставщикуПоступившихМПЗ(ВыбытиеМПЗ.ПоступившиеМПЗ, Реквизиты);
		Если ПоступившиеМПЗ <> Неопределено Тогда
			Для Каждого МПЗ Из ПоступившиеМПЗ Цикл
				НоваяСтрока = РаспределениеОплаты.МПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, МПЗ);
			КонецЦикла;
		КонецЕсли;
		
		ИныеМатериальныеРасходы = ПодготовитьТаблицуОплатыПоставщикуИныхМатериальныхРасходов(ВыбытиеМПЗ.ИныеМатериальныеРасходы, Реквизиты);
		Если ИныеМатериальныеРасходы <> Неопределено Тогда
			Для Каждого ИМР Из ИныеМатериальныеРасходы Цикл
				НоваяСтрока = РаспределениеОплаты.ИныеМатериальныеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИМР);
			КонецЦикла;
		КонецЕсли;
		
		ПрочиеРасходы = ПодготовитьТаблицуОплатыПоставщикуПрочихРасходов(ВыбытиеМПЗ.ПрочиеРасходы, Реквизиты);
		Если ПрочиеРасходы <> Неопределено Тогда
			Для Каждого Расход Из ПрочиеРасходы Цикл
				НоваяСтрока = РаспределениеОплаты.ПрочиеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Расход);
			КонецЦикла;
		КонецЕсли;
		
		РаспределениеОплаты.МПЗОтгруженные = ПодготовитьТаблицуОплатыПоставщикуМПЗОтгруженных(ВыбытиеМПЗ.МПЗОтгруженные, Реквизиты);
		
	КонецЕсли;
	
	Возврат РаспределениеОплаты;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицОплатыПоставщику(ТаблицаВзаиморасчеты, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВзаиморасчетов
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"	// <ДокументСсылка> - документ расчетов, задолженность по которому погашается
		+ "СуммаБУ";			// <Число,15,2> - сумма оплаты в рублях
		
	Параметры.Вставить("СписокВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"		// <СправочникСсылка.Организации> - организация
		+ "ВидОперации";		// <ПеречислениеСсылка.*> - вид операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ПодобратьПартииДопРасходов(Реквизиты, ОплаченныеПартии)
	
	СписокПартий = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ДокументРасчетов", Истина);
	
	// Установка управляемой блокировки
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("Партия", Метаданные.РегистрыНакопления.ИПМПЗ.Измерения.Партия.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокПартий, "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",		Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокПартий",		СписокПартий);
	Запрос.УстановитьПараметр("НачалоПериода",		ДатаПервогоДокумента(СписокПартий));
	Запрос.УстановитьПараметр("КонецПериода",		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеДопРасходовТовары.Ссылка КАК ДопРасходы,
	|	ПоступлениеДопРасходовТовары.ДокументПартии КАК Партия
	|ПОМЕСТИТЬ ВТПоступлениеДопРасходов
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка В(&СписокПартий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОбороты.Регистратор КАК ДопРасходы,
	|	ИПМПЗОбороты.Партия КАК Партия,
	|	СУММА(ИПМПЗОбороты.СуммаПриход + ИПМПЗОбороты.НДСПриход) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Партия В
	|					(ВЫБРАТЬ
	|						ВТПоступлениеДопРасходов.Партия
	|					ИЗ
	|						ВТПоступлениеДопРасходов)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОбороты
	|ГДЕ
	|	ИПМПЗОбороты.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТПоступлениеДопРасходов.ДопРасходы
	|			ИЗ
	|				ВТПоступлениеДопРасходов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОбороты.Регистратор,
	|	ИПМПЗОбороты.Партия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ИПМПЗОбороты.СуммаПриход + ИПМПЗОбороты.НДСПриход) > 0";
	
	РезультатЗапроса	= Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПартий = Новый Структура("ДокументРасчетов");
	ОплаченныеПартии.Индексы.Добавить("ДокументРасчетов");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтборПартий.ДокументРасчетов	= Выборка.ДопРасходы;
		НайденныеПартии	= ОплаченныеПартии.НайтиСтроки(ОтборПартий);
		
		СуммаДопРасходов	= Выборка.СуммаСНДС;
		
		Для каждого СтрокаОплаченныхПартий Из НайденныеПартии Цикл
			
			Если СтрокаОплаченныхПартий.СуммаБУ = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяПартия	= ОплаченныеПартии.Добавить();
			НоваяПартия.ДокументРасчетов	= Выборка.Партия;
			НоваяПартия.СуммаБУ				= Мин(СуммаДопРасходов,  СтрокаОплаченныхПартий.СуммаБУ);
			
			СуммаДопРасходов	= СуммаДопРасходов - НоваяПартия.СуммаБУ;
			СтрокаОплаченныхПартий.СуммаБУ	= СтрокаОплаченныхПартий.СуммаБУ - НоваяПартия.СуммаБУ;
			
			Если СуммаДопРасходов = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьОплатуПоОборотам(ОплаченныеПартии, РаспределениеОплаты, ВыбытиеМПЗ, Реквизиты)
	
	// Таблица созданных партий из оплаченного материала для рекурсивного вызова процедуры
	НовыеОплаченныеПартии = ОплаченныеПартии.СкопироватьКолонки();
	НовыеОплаченныеПартии.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	ОтборПартий = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	НоменклатурныеГруппы        = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "НоменклатурнаяГруппа", Истина);
	ХарактерыДеятельности       = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ХарактерДеятельности", Истина);
	ВидыСписанныхМПЗ            = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ВидМПЗ", Истина);
	НоменклатураСписанная       = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Номенклатура", Истина);
	ПартииСписаннойНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Партия", Истина);
	
	ДатаПервойПартии = ДатаПервогоДокумента(ПартииСписаннойНоменклатуры);
	
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОбороты");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа",        "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности",        "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("ВидСписанногоМПЗ",            "ВидМПЗ");
	ОписаниеИсточника.Вставить("НоменклатураСписанная",       "Номенклатура");
	ОписаниеИсточника.Вставить("ПартияСписаннойНоменклатуры", "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОбороты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ОплаченныеПартии, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаНач",     ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаКон",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НоменклатурныеГруппы",        НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ХарактерыДеятельности",       ХарактерыДеятельности);
	Запрос.УстановитьПараметр("ВидыСписанныхМПЗ",            ВидыСписанныхМПЗ);
	Запрос.УстановитьПараметр("НоменклатураСписанная",       НоменклатураСписанная);
	Запрос.УстановитьПараметр("ПартииСписаннойНоменклатуры", ПартииСписаннойНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидСписанногоМПЗ,
	|	ИПМПЗОбороты.НоменклатураСписанная,
	|	ИПМПЗОбороты.ПартияСписаннойНоменклатуры,
	|	ИПМПЗОбороты.ВидПоступившегоМПЗ,
	|	ИПМПЗОбороты.НоменклатураПоступившая,
	|	ИПМПЗОбороты.ПартияПоступившейНоменклатуры,
	|	ИПМПЗОбороты.КоличествоОборот,
	|	ИПМПЗОбороты.СуммаОборот,
	|	ИПМПЗОбороты.НДСОборот
	|ПОМЕСТИТЬ ВТ_ИПМПЗОбороты
	|ИЗ
	|	РегистрНакопления.ИПМПЗОбороты.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности)
	|				И ВидСписанногоМПЗ В (&ВидыСписанныхМПЗ)
	|				И НоменклатураСписанная В (&НоменклатураСписанная)
	|				И ПартияСписаннойНоменклатуры В (&ПартииСписаннойНоменклатуры)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОбороты
	|ГДЕ
	|	ИПМПЗОбороты.СуммаОборот + ИПМПЗОбороты.НДСОборот > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидСписанногоМПЗ,
	|	ИПМПЗОбороты.НоменклатураСписанная,
	|	ИПМПЗОбороты.ПартияСписаннойНоменклатуры,
	|	ИПМПЗОбороты.ВидПоступившегоМПЗ КАК ВидПоступившегоМПЗ,
	|	ИПМПЗОбороты.НоменклатураПоступившая КАК НоменклатураПоступившая,
	|	ИПМПЗОбороты.ПартияПоступившейНоменклатуры,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартииПоступившейНоменклатуры,
	|	ИПМПЗОбороты.КоличествоОборот КАК Количество,
	|	ИПМПЗОбороты.СуммаОборот КАК Сумма,
	|	ИПМПЗОбороты.НДСОборот КАК НДС,
	|	ИПМПЗОбороты.СуммаОборот + ИПМПЗОбороты.НДСОборот КАК СуммаСНДС
	|ИЗ
	|	ВТ_ИПМПЗОбороты КАК ИПМПЗОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПМПЗОбороты.ПартияПоступившейНоменклатуры = РеквизитыПартий.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидСписанногоМПЗ,
	|	ИПМПЗОбороты.НоменклатураСписанная,
	|	ИПМПЗОбороты.ПартияСписаннойНоменклатуры,
	|	СУММА(ИПМПЗОбороты.КоличествоОборот) КАК Количество,
	|	СУММА(ИПМПЗОбороты.СуммаОборот) КАК Сумма,
	|	СУММА(ИПМПЗОбороты.НДСОборот) КАК НДС
	|ИЗ
	|	ВТ_ИПМПЗОбороты КАК ИПМПЗОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидСписанногоМПЗ,
	|	ИПМПЗОбороты.НоменклатураСписанная,
	|	ИПМПЗОбороты.ПартияСписаннойНоменклатуры";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаПродукции  = Результат[1].Выгрузить();
	ТаблицаМатериалов = Результат[2].Выгрузить();
	
	ТаблицаПродукции.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидСписанногоМПЗ, НоменклатураСписанная, ПартияСписаннойНоменклатуры");
	ТаблицаМатериалов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидСписанногоМПЗ, НоменклатураСписанная, ПартияСписаннойНоменклатуры");
	
	ОтборМатериалов = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидСписанногоМПЗ, НоменклатураСписанная, ПартияСписаннойНоменклатуры");
	
	Для Каждого Оплата Из ОплаченныеПартии Цикл
		
		// Распределение суммы оплаты материалов на продукци
		ОтборМатериалов.НоменклатурнаяГруппа        = Оплата.НоменклатурнаяГруппа;
		ОтборМатериалов.ХарактерДеятельности        = Оплата.ХарактерДеятельности;
		ОтборМатериалов.ВидСписанногоМПЗ            = Оплата.ВидМПЗ;
		ОтборМатериалов.НоменклатураСписанная       = Оплата.Номенклатура;
		ОтборМатериалов.ПартияСписаннойНоменклатуры = Оплата.Партия;
		
		НайденныеСтроки = ТаблицаМатериалов.НайтиСтроки(ОтборМатериалов);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Материал = НайденныеСтроки[0];
			
			ВыпущеннаяПродукция = ТаблицаПродукции.Скопировать(ОтборМатериалов);
			ВыпущеннаяПродукция.Сортировать("ДатаПартииПоступившейНоменклатуры, ПартияПоступившейНоменклатуры, НоменклатураПоступившая, ВидПоступившегоМПЗ",
				Новый СравнениеЗначений);
			
			СуммаОплаты = Мин(Оплата.Сумма + Оплата.НДС, Материал.Сумма + Материал.НДС);
			
			Если СуммаОплаты = Материал.Сумма + Материал.НДС Тогда
				Количество = Материал.Количество;
				Сумма      = Материал.Сумма;
				НДС        = Материал.НДС;
			Иначе
				Коэффициент = СуммаОплаты / (Материал.Сумма + Материал.НДС);
				Количество = Окр(Материал.Количество * Коэффициент, 3, 1);
				Сумма      = Окр(Материал.Сумма * Коэффициент, 2, 1);
				НДС        = СуммаОплаты - Сумма;
			КонецЕсли;
			
			МассивКоэффициентов = ВыпущеннаяПродукция.ВыгрузитьКолонку("СуммаСНДС");
			РаспределенноеКоличество = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Количество, МассивКоэффициентов, 3);
			РаспределеннаяСумма      = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Сумма, МассивКоэффициентов, 2);
			РаспределенныйНДС        = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДС, МассивКоэффициентов, 2);
			Для Индекс = 0 По ВыпущеннаяПродукция.Количество() - 1 Цикл
				ВыпущеннаяПродукция[Индекс].Количество = ?(РаспределенноеКоличество <> Неопределено, РаспределенноеКоличество[Индекс], 0);
				ВыпущеннаяПродукция[Индекс].Сумма      = ?(РаспределеннаяСумма <> Неопределено, РаспределеннаяСумма[Индекс], 0);
				ВыпущеннаяПродукция[Индекс].НДС        = ?(РаспределенныйНДС <> Неопределено, РаспределенныйНДС[Индекс], 0);
			КонецЦикла;
			
			Оплата.Сумма = Оплата.Сумма - Сумма;
			Оплата.НДС   = Оплата.НДС - НДС;
			
			// Обработка результата распределения
			Для Каждого Продукция Из ВыпущеннаяПродукция Цикл
				
				НоваяСтрока = РаспределениеОплаты.МПЗОбороты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Продукция);
				НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
				
				ОтборПартий.НоменклатурнаяГруппа = Продукция.НоменклатурнаяГруппа;
				ОтборПартий.ХарактерДеятельности = Продукция.ХарактерДеятельности;
				ОтборПартий.ВидМПЗ               = Продукция.ВидПоступившегоМПЗ;
				ОтборПартий.Номенклатура         = Продукция.НоменклатураПоступившая;
				ОтборПартий.Партия               = Продукция.ПартияПоступившейНоменклатуры;
				
				Если Продукция.ВидПоступившегоМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
					
					// Материал списан на ИМР
					НайденныеСтроки = ВыбытиеМПЗ.ИныеМатериальныеРасходы.НайтиСтроки(ОтборПартий);
					Если НайденныеСтроки.Количество() = 0 Тогда
						СтрокаВыбытияМПЗ = ВыбытиеМПЗ.ИныеМатериальныеРасходы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаВыбытияМПЗ, ОтборПартий);
					Иначе
						СтрокаВыбытияМПЗ = НайденныеСтроки[0];
					КонецЕсли;
					
				ИначеЕсли Продукция.ВидПоступившегоМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
					
					// Материал списан на прочие расходы
					НайденныеСтроки =  ВыбытиеМПЗ.ПрочиеРасходы.НайтиСтроки(ОтборПартий);
					Если НайденныеСтроки.Количество() = 0 Тогда
						СтрокаВыбытияМПЗ = ВыбытиеМПЗ.ПрочиеРасходы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаВыбытияМПЗ, ОтборПартий);
					Иначе
						СтрокаВыбытияМПЗ = НайденныеСтроки[0];
					КонецЕсли;
					
				Иначе
					
					// Материал списан на выпуск продукции или полуфабриката
					НайденныеСтроки = ВыбытиеМПЗ.ПоступившиеМПЗ.НайтиСтроки(ОтборПартий);
					Если НайденныеСтроки.Количество() = 0 Тогда
						СтрокаВыбытияМПЗ = ВыбытиеМПЗ.ПоступившиеМПЗ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаВыбытияМПЗ, ОтборПартий);
					Иначе
						СтрокаВыбытияМПЗ = НайденныеСтроки[0];
					КонецЕсли;
					
					// Сохраняем сведения о выпущеной продукции или полуфабриката для рекурсивного вызова метода
					Если ОплаченныеПартии.НайтиСтроки(ОтборПартий).Количество() = 0 Тогда
						НайденныеСтроки = НовыеОплаченныеПартии.НайтиСтроки(ОтборПартий);
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяОплаченнаяПартия = НовыеОплаченныеПартии.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяОплаченнаяПартия, ОтборПартий);
						Иначе
							НоваяОплаченнаяПартия = НайденныеСтроки[0];
						КонецЕсли;
						НоваяОплаченнаяПартия.Количество = НоваяОплаченнаяПартия.Количество + Продукция.Количество;
						НоваяОплаченнаяПартия.Сумма      = НоваяОплаченнаяПартия.Сумма + Продукция.Сумма;
						НоваяОплаченнаяПартия.НДС        = НоваяОплаченнаяПартия.НДС + Продукция.НДС;
					Иначе
						// Встречный выпуск
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаВыбытияМПЗ.Сумма = СтрокаВыбытияМПЗ.Сумма + Продукция.Сумма;
				СтрокаВыбытияМПЗ.НДС   = СтрокаВыбытияМПЗ.НДС + Продукция.НДС;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Оплата.Сумма + Оплата.НДС > 0 Тогда
			// Списанные МПЗ частично или полностью отгружены покупателям
			МПЗОтгруженные = ВыбытиеМПЗ.МПЗОтгруженные.Добавить();
			ЗаполнитьЗначенияСвойств(МПЗОтгруженные, Оплата);
		КонецЕсли;
		
	КонецЦикла;
	
	// Учет оплаты материалов в стоимости выпущеной продукции или полуфабрикатов
	Если НовыеОплаченныеПартии.Количество() > 0 Тогда
		РаспределитьОплатуПоОборотам(НовыеОплаченныеПартии, РаспределениеОплаты, ВыбытиеМПЗ, Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу оплаты поставщику материалов 
//
Функция ПодготовитьТаблицуОплатыПоставщикуПоступившихМПЗ(ОплаченныеПартии, Реквизиты)
	
	Если Не ЗначениеЗаполнено(ОплаченныеПартии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаОплатыПоставщику = ПустаяТаблицаРегистраНакопления("ИПМПЗ", Ложь, Истина);
	
	НоменклатурныеГруппы  = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "НоменклатурнаяГруппа", Истина);
	ХарактерыДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ХарактерДеятельности", Истина);
	ВидыМПЗ               = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ВидМПЗ", Истина);
	Номенклатура          = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Номенклатура", Истина);
	Партии                = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Партия", Истина);
	
	ДатаПервойПартии = ДатаПервогоДокумента(Партии);
	
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗ");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("ВидМПЗ",               "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура",         "Номенклатура");
	ОписаниеИсточника.Вставить("Партия",               "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ОплаченныеПартии, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаНач",     ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаКон",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НоменклатурныеГруппы",  НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ХарактерыДеятельности", ХарактерыДеятельности);
	Запрос.УстановитьПараметр("ВидыМПЗ",               ВидыМПЗ);
	Запрос.УстановитьПараметр("Номенклатура",          Номенклатура);
	Запрос.УстановитьПараметр("Партии",                Партии);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОбороты.ХарактерДеятельности,
	|	ИПМПЗОбороты.ВидМПЗ,
	|	ИПМПЗОбороты.Номенклатура,
	|	ИПМПЗОбороты.Партия,
	|	ИПМПЗОбороты.КоличествоПриход,
	|	ИПМПЗОбороты.КоличествоРасход,
	|	ИПМПЗОбороты.СуммаПриход,
	|	ИПМПЗОбороты.СуммаРасход,
	|	ИПМПЗОбороты.НДСПриход,
	|	ИПМПЗОбороты.НДСРасход
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности)
	|				И ВидМПЗ В (&ВидыМПЗ)
	|				И Номенклатура В (&Номенклатура)
	|				И Партия В (&Партии)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОбороты";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОборотов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	СтруктураОтбора = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	Для Каждого Оплата Из ОплаченныеПартии Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Оплата);
		
		НайденныеОбороты = ТаблицаОборотов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеОбороты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Оборот = НайденныеОбороты[0];
		
		СуммаОплатыПриход = Мин(Оплата.Сумма + Оплата.НДС, Оборот.СуммаПриход + Оборот.НДСПриход);
		
		Если СуммаОплатыПриход > 0 Тогда
			
			Если СуммаОплатыПриход = Оборот.СуммаПриход + Оборот.НДСПриход Тогда
				КоличествоПриход = Оборот.КоличествоПриход;
				СуммаПриход      = Оборот.СуммаПриход;
				НДСПриход        = Оборот.НДСПриход;
			Иначе
				Коэффициент = СуммаОплатыПриход / (Оборот.СуммаПриход + Оборот.НДСПриход);
				СуммаСНДСПриход  = Окр((Оборот.СуммаПриход + Оборот.НДСПриход) * Коэффициент, 2, 1);
				КоличествоПриход = Окр(Оборот.КоличествоПриход * Коэффициент, 3, 1);
				СуммаПриход      = Окр(Оборот.СуммаПриход * Коэффициент, 2, 1);
				НДСПриход        = СуммаСНДСПриход - СуммаПриход;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаОплатыПоставщику.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
			НоваяСтрока.ВидДвижения    = ВидДвиженияНакопления.Приход;
			НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
			НоваяСтрока.Количество     = КоличествоПриход;
			НоваяСтрока.Сумма          = СуммаПриход;
			НоваяСтрока.НДС            = НДСПриход;
			
			Оплата.Сумма = Оплата.Сумма - СуммаПриход;
			Оплата.НДС   = Оплата.НДС - НДСПриход;
			
			Оборот.КоличествоПриход = Оборот.КоличествоПриход - КоличествоПриход;
			Оборот.СуммаПриход      = Оборот.СуммаПриход - СуммаПриход;
			Оборот.НДСПриход        = Оборот.НДСПриход - НДСПриход;
			
		КонецЕсли;
		
		СуммаОплатыРасход = Мин(СуммаОплатыПриход, Оборот.СуммаРасход + Оборот.НДСРасход);
		
		Если СуммаОплатыРасход > 0 Тогда

			Если СуммаОплатыРасход = Оборот.СуммаРасход + Оборот.НДСРасход Тогда
				КоличествоРасход = Оборот.КоличествоРасход;
				СуммаРасход      = Оборот.СуммаРасход;
				НДСРасход        = Оборот.НДСРасход;
			Иначе
				Коэффициент = СуммаОплатыРасход / (Оборот.СуммаРасход + Оборот.НДСРасход);
				СуммаСНДСРасход  = Окр((Оборот.СуммаРасход + Оборот.НДСРасход) * Коэффициент, 2, 1);
				КоличествоРасход = Окр(Оборот.КоличествоРасход * Коэффициент, 3, 1);
				СуммаРасход      = Окр(Оборот.СуммаРасход * Коэффициент, 2, 1);
				НДСРасход        = СуммаСНДСРасход - СуммаРасход;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаОплатыПоставщику.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
			НоваяСтрока.ВидДвижения    = ВидДвиженияНакопления.Расход;
			НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
			НоваяСтрока.Количество     = КоличествоРасход;
			НоваяСтрока.Сумма          = СуммаРасход;
			НоваяСтрока.НДС            = НДСРасход;
			
			Оборот.КоличествоРасход = Оборот.КоличествоРасход - КоличествоРасход;
			Оборот.СуммаРасход      = Оборот.СуммаРасход - СуммаРасход;
			Оборот.НДСРасход        = Оборот.НДСРасход - НДСРасход;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОплатыПоставщику;
	
КонецФункции

// Формирует таблицу оплаты поставщику МПЗ отгруженных покупателю
//
Функция ПодготовитьТаблицуОплатыПоставщикуМПЗОтгруженных(ОплаченныеПартии, Реквизиты)
	
	Если Не ЗначениеЗаполнено(ОплаченныеПартии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаОплатыПоставщику = ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные", Ложь, Истина);
	ТаблицаОплатыПоставщику.Колонки.Добавить("ДатаДокументаОтгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	НоменклатурныеГруппы  = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "НоменклатурнаяГруппа", Истина);
	ХарактерыДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ХарактерДеятельности", Истина);
	ВидыМПЗ               = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ВидМПЗ", Истина);
	Номенклатура          = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Номенклатура", Истина);
	Партии                = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Партия", Истина);
	
	ДатаПервойПартии = ДатаПервогоДокумента(Партии);
	
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОтгруженные");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("ВидМПЗ",               "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура",         "Номенклатура");
	ОписаниеИсточника.Вставить("Партия",               "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ОплаченныеПартии, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаНач",     ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаКон",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НоменклатурныеГруппы",  НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ХарактерыДеятельности", ХарактерыДеятельности);
	Запрос.УстановитьПараметр("ВидыМПЗ",               ВидыМПЗ);
	Запрос.УстановитьПараметр("Номенклатура",          Номенклатура);
	Запрос.УстановитьПараметр("Партии",                Партии);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
	|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСРасход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
	|ПОМЕСТИТЬ ВТИПМПЗОтгруженныеОбороты
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности)
	|				И Номенклатура В (&Номенклатура)
	|				И Партия В (&Партии)
	|				И ВидМПЗ В (&ВидыМПЗ)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОтгруженныеОбороты
	|ГДЕ
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход + ИПМПЗОтгруженныеОбороты.НДСПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
	|	ИПМПЗОтгруженныеОбороты.Номенклатура,
	|	ИПМПЗОтгруженныеОбороты.Партия,
	|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
	|	ЕСТЬNULL(РеквизитыДокументовОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОтгрузки,
	|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
	|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
	|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
	|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСРасход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
	|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
	|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
	|ИЗ
	|	ВТИПМПЗОтгруженныеОбороты КАК ИПМПЗОтгруженныеОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОтгрузки
	|		ПО (РеквизитыДокументовОтгрузки.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОбороты.ДокументОтгрузки = РеквизитыДокументовОтгрузки.Документ";
	
	ТаблицаОтгруженных = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОтгруженных, "НомерСтроки");
	ТаблицаОтгруженных.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОтгруженных.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	СтруктураОтбора = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	Для Каждого Оплата Из ОплаченныеПартии Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Оплата);
		
		НайденныеОбороты = ТаблицаОтгруженных.Скопировать(СтруктураОтбора);
		НайденныеОбороты.Сортировать("ДатаДокументаОтгрузки, ДокументОтгрузки", Новый СравнениеЗначений);
		
		Для каждого Оборот Из НайденныеОбороты Цикл
			
			СуммаОплатыПриход = Мин(Оплата.Сумма + Оплата.НДС, Оборот.СуммаПриход + Оборот.НДСПриход);
			
			Если СуммаОплатыПриход > 0 Тогда
				
				Если СуммаОплатыПриход = Оборот.СуммаПриход + Оборот.НДСПриход Тогда
					КоличествоПриход     = Оборот.КоличествоПриход;
					СуммаПриход          = Оборот.СуммаПриход;
					НДСПриход            = Оборот.НДСПриход;
					ВыручкаПриход        = Оборот.ВыручкаПриход;
					НДСНачисленныйПриход = Оборот.НДСНачисленныйПриход;
				Иначе
					Коэффициент = СуммаОплатыПриход / (Оборот.СуммаПриход + Оборот.НДСПриход);
					СуммаСНДСПриход      = Окр((Оборот.СуммаПриход + Оборот.НДСПриход) * Коэффициент, 2, 1);
					ВыручкаБезНДСПриход  = Окр((Оборот.ВыручкаПриход - Оборот.НДСНачисленныйПриход) * Коэффициент, 2, 1);
					КоличествоПриход     = Окр(Оборот.КоличествоПриход * Коэффициент, 3, 1);
					СуммаПриход          = Окр(Оборот.СуммаПриход * Коэффициент, 2, 1);
					НДСПриход            = СуммаСНДСПриход - СуммаПриход;
					ВыручкаПриход        = Окр(Оборот.ВыручкаПриход * Коэффициент, 2, 1);
					НДСНачисленныйПриход = ВыручкаПриход - ВыручкаБезНДСПриход;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаОплатыПоставщику.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
				НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Приход;
				НоваяСтрока.ДокументОплаты    = Реквизиты.Регистратор;
				НоваяСтрока.Количество        = КоличествоПриход;
				НоваяСтрока.Сумма             = СуммаПриход;
				НоваяСтрока.НДС               = НДСПриход;
				НоваяСтрока.Выручка           = ВыручкаПриход;
				НоваяСтрока.НДСНачисленный    = НДСНачисленныйПриход;
				
				Оплата.Сумма = Оплата.Сумма - СуммаПриход;
				Оплата.НДС   = Оплата.НДС - НДСПриход;
				
				Оборот.КоличествоПриход     = Оборот.КоличествоПриход - КоличествоПриход;
				Оборот.СуммаПриход          = Оборот.СуммаПриход - СуммаПриход;
				Оборот.НДСПриход            = Оборот.НДСПриход - НДСПриход;
				Оборот.ВыручкаПриход        = Оборот.ВыручкаПриход - ВыручкаПриход;
				Оборот.НДСНачисленныйПриход = Оборот.НДСНачисленныйПриход - НДСНачисленныйПриход;
				
			КонецЕсли;
			
			СуммаОплатыРасход = Мин(СуммаОплатыПриход, Оборот.СуммаРасход + Оборот.НДСРасход);
			
			Если СуммаОплатыРасход > 0 Тогда
				
				Если СуммаОплатыРасход = Оборот.СуммаРасход + Оборот.НДСРасход Тогда
					КоличествоРасход     = Оборот.КоличествоРасход;
					СуммаРасход          = Оборот.СуммаРасход;
					НДСРасход            = Оборот.НДСРасход;
					ВыручкаРасход        = Оборот.ВыручкаРасход;
					НДСНачисленныйРасход = Оборот.НДСНачисленныйРасход;
				Иначе
					Коэффициент = СуммаОплатыРасход / (Оборот.СуммаРасход + Оборот.НДСРасход);
					СуммаСНДСРасход      = Окр((Оборот.СуммаРасход + Оборот.НДСРасход) * Коэффициент, 2, 1);
					ВыручкаБезНДСРасход  = Окр((Оборот.ВыручкаРасход - Оборот.НДСНачисленныйРасход) * Коэффициент, 2, 1);
					КоличествоРасход     = Окр(Оборот.КоличествоРасход * Коэффициент, 3, 1);
					СуммаРасход          = Окр(Оборот.СуммаРасход * Коэффициент, 2, 1);
					НДСРасход            = СуммаСНДСРасход - СуммаРасход;
					ВыручкаРасход        = Окр(Оборот.ВыручкаРасход * Коэффициент, 2, 1);
					НДСНачисленныйРасход = ВыручкаРасход - ВыручкаБезНДСРасход;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаОплатыПоставщику.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
				НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
				НоваяСтрока.ДокументОплаты    = Реквизиты.Регистратор;
				НоваяСтрока.Количество        = КоличествоРасход;
				НоваяСтрока.Сумма             = СуммаРасход;
				НоваяСтрока.НДС               = НДСРасход;
				НоваяСтрока.Выручка           = ВыручкаРасход;
				НоваяСтрока.НДСНачисленный    = НДСНачисленныйРасход;
				
				Оборот.КоличествоРасход     = Оборот.КоличествоРасход - КоличествоРасход;
				Оборот.СуммаРасход          = Оборот.СуммаРасход - СуммаРасход;
				Оборот.НДСРасход            = Оборот.НДСРасход - НДСРасход;
				Оборот.ВыручкаРасход        = Оборот.ВыручкаРасход - ВыручкаРасход;
				Оборот.НДСНачисленныйРасход = Оборот.НДСНачисленныйРасход - НДСНачисленныйРасход;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОтгруженных.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
			
			Если Оплата.Сумма + Оплата.НДС = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОплатыПоставщику;
	
КонецФункции

// Формирует таблицу оплаты поставщику МПЗ списанных на Иные материальные расходы
//
Функция ПодготовитьТаблицуОплатыПоставщикуИныхМатериальныхРасходов(ОплаченныеПартии, Реквизиты)
	
	Если Не ЗначениеЗаполнено(ОплаченныеПартии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаОплатыПоставщику = ПустаяТаблицаРегистраНакопления("ИПИныеМатериальныеРасходы", Ложь, Истина);
	
	ОплаченныеПартии.Колонки.Номенклатура.Имя = "СтатьяЗатрат";
	
	НоменклатурныеГруппы  = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "НоменклатурнаяГруппа", Истина);
	ХарактерыДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ХарактерДеятельности", Истина);
	СтатьиЗатрат          = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "СтатьяЗатрат", Истина);
	Партии                = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "Партия", Истина);
	
	ДатаПервойПартии = ДатаПервогоДокумента(Партии);
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПИныеМатериальныеРасходы");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("СтатьяЗатрат",         "СтатьяЗатрат");
	ОписаниеИсточника.Вставить("Партия",               "Партия");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПИныеМатериальныеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ОплаченныеПартии, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаНач",     ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаКон",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НоменклатурныеГруппы",  НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ХарактерыДеятельности", ХарактерыДеятельности);
	Запрос.УстановитьПараметр("СтатьиЗатрат",          СтатьиЗатрат);
	Запрос.УстановитьПараметр("Партии",                Партии);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПИМРОбороты.НоменклатурнаяГруппа,
	|	ИПИМРОбороты.ХарактерДеятельности,
	|	ИПИМРОбороты.СтатьяЗатрат,
	|	ИПИМРОбороты.Партия,
	|	ИПИМРОбороты.МПЗ,
	|	ИПИМРОбороты.ПартияМПЗ,
	|	ИПИМРОбороты.КоличествоПриход,
	|	ИПИМРОбороты.КоличествоРасход,
	|	ИПИМРОбороты.СуммаПриход,
	|	ИПИМРОбороты.СуммаРасход,
	|	ИПИМРОбороты.НДСПриход,
	|	ИПИМРОбороты.НДСРасход
	|ПОМЕСТИТЬ ВТИПИМРОбороты
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности)
	|				И СтатьяЗатрат В (&СтатьиЗатрат)
	|				И Партия В (&Партии)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПИМРОбороты
	|ГДЕ
	|	ИПИМРОбороты.СуммаПриход + ИПИМРОбороты.НДСПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПИМРОбороты.ПартияМПЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПИМРОбороты.НоменклатурнаяГруппа,
	|	ИПИМРОбороты.ХарактерДеятельности,
	|	ИПИМРОбороты.СтатьяЗатрат,
	|	ИПИМРОбороты.Партия,
	|	ИПИМРОбороты.МПЗ,
	|	ИПИМРОбороты.ПартияМПЗ,
	|	ЕСТЬNULL(РеквизитыПартийМПЗ.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартииМПЗ,
	|	ИПИМРОбороты.КоличествоПриход,
	|	ИПИМРОбороты.КоличествоРасход,
	|	ИПИМРОбороты.СуммаПриход,
	|	ИПИМРОбороты.СуммаРасход,
	|	ИПИМРОбороты.НДСПриход,
	|	ИПИМРОбороты.НДСРасход
	|ИЗ
	|	ВТИПИМРОбороты КАК ИПИМРОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартийМПЗ
	|		ПО (РеквизитыПартийМПЗ.Организация = &Организация)
	|			И ИПИМРОбороты.ПартияМПЗ = РеквизитыПартийМПЗ.Документ";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОборотов, "НомерСтроки");
	ТаблицаОборотов.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОборотов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, СтатьяЗатрат, Партия");
	СтруктураОтбора = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, СтатьяЗатрат, Партия");
	
	Для Каждого Оплата Из ОплаченныеПартии Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Оплата);
		
		НайденныеОбороты = ТаблицаОборотов.Скопировать(СтруктураОтбора);
		НайденныеОбороты.Сортировать("ДатаПартииМПЗ, ПартияМПЗ", Новый СравнениеЗначений);
		
		Для каждого Оборот Из НайденныеОбороты Цикл
			
			СуммаОплатыПриход = Мин(Оплата.Сумма + Оплата.НДС, Оборот.СуммаПриход + Оборот.НДСПриход);
			
			Если СуммаОплатыПриход > 0 Тогда

				Если СуммаОплатыПриход = Оборот.СуммаПриход + Оборот.НДСПриход Тогда
					КоличествоПриход = Оборот.КоличествоПриход;
					СуммаПриход      = Оборот.СуммаПриход;
					НДСПриход        = Оборот.НДСПриход;
				Иначе
					Коэффициент = СуммаОплатыПриход / (Оборот.СуммаПриход + Оборот.НДСПриход);
					СуммаСНДСПриход  = Окр((Оборот.СуммаПриход + Оборот.НДСПриход) * Коэффициент, 2, 1);
					КоличествоПриход = Окр(Оборот.КоличествоПриход * Коэффициент, 3, 1);
					СуммаПриход      = Окр(Оборот.СуммаПриход * Коэффициент, 2, 1);
					НДСПриход        = СуммаСНДСПриход - СуммаПриход;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаОплатыПоставщику.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
				НоваяСтрока.ВидДвижения    = ВидДвиженияНакопления.Приход;
				НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
				НоваяСтрока.Количество     = КоличествоПриход;
				НоваяСтрока.Сумма          = СуммаПриход;
				НоваяСтрока.НДС            = НДСПриход;
				
				Оплата.Сумма = Оплата.Сумма - СуммаПриход;
				Оплата.НДС   = Оплата.НДС - НДСПриход;
				
				Оборот.КоличествоПриход = Оборот.КоличествоПриход - КоличествоПриход;
				Оборот.СуммаПриход      = Оборот.СуммаПриход - СуммаПриход;
				Оборот.НДСПриход        = Оборот.НДСПриход - НДСПриход;
				
			КонецЕсли;
			
			СуммаОплатыРасход = Мин(СуммаОплатыПриход, Оборот.СуммаРасход + Оборот.НДСРасход);
			
			Если СуммаОплатыРасход > 0 Тогда

				Если СуммаОплатыРасход = Оборот.СуммаРасход + Оборот.НДСРасход Тогда
					КоличествоРасход = Оборот.КоличествоРасход;
					СуммаРасход      = Оборот.СуммаРасход;
					НДСРасход        = Оборот.НДСРасход;
				Иначе
					Коэффициент = СуммаОплатыРасход / (Оборот.СуммаРасход + Оборот.НДСРасход);
					СуммаСНДСРасход  = Окр((Оборот.СуммаРасход + Оборот.НДСРасход) * Коэффициент, 2, 1);
					КоличествоРасход = Окр(Оборот.КоличествоРасход * Коэффициент, 3, 1);
					СуммаРасход      = Окр(Оборот.СуммаРасход * Коэффициент, 2, 1);
					НДСРасход        = СуммаСНДСРасход - СуммаРасход;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаОплатыПоставщику.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
				НоваяСтрока.ВидДвижения    = ВидДвиженияНакопления.Расход;
				НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
				НоваяСтрока.Количество     = КоличествоРасход;
				НоваяСтрока.Сумма          = СуммаРасход;
				НоваяСтрока.НДС            = НДСРасход;
				
				Оборот.КоличествоРасход = Оборот.КоличествоРасход - КоличествоРасход;
				Оборот.СуммаРасход      = Оборот.СуммаРасход - СуммаРасход;
				Оборот.НДСРасход        = Оборот.НДСРасход - НДСРасход;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОборотов.Найти(Оборот.НомерСтроки, "НомерСтроки"), Оборот);
			
			Если Оплата.Сумма + Оплата.НДС = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОплатыПоставщику;
	
КонецФункции

// Формирует таблицу оплаты поставщику МПЗ списанных на Прочие расходы
//
Функция ПодготовитьТаблицуОплатыПоставщикуПрочихРасходов(ОплаченныеПартии, Реквизиты)
	
	Если Не ЗначениеЗаполнено(ОплаченныеПартии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаОплатыПоставщику = ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы", Ложь, Ложь);
	
	ОплаченныеПартии.Колонки.Номенклатура.Имя = "СтатьяЗатрат";
	ОплаченныеПартии.Колонки.Партия.Имя       = "РасчетныйДокумент";
	
	НоменклатурныеГруппы  = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "НоменклатурнаяГруппа", Истина);
	ХарактерыДеятельности = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "ХарактерДеятельности", Истина);
	СтатьиЗатрат          = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "СтатьяЗатрат", Истина);
	РасчетныеДокументы    = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеПартии, "РасчетныйДокумент", Истина);
	
	ДатаПервойПартии = ДатаПервогоДокумента(РасчетныеДокументы);
	
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИППрочиеРасходы");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("СтатьяЗатрат",         "СтатьяЗатрат");
	ОписаниеИсточника.Вставить("РасчетныйДокумент",    "РасчетныйДокумент");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИППрочиеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(ДатаПервойПартии, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ОплаченныеПартии, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаНач",               ДатаПервойПартии);
	Запрос.УстановитьПараметр("ДатаКон",               Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НоменклатурныеГруппы",  НоменклатурныеГруппы);
	Запрос.УстановитьПараметр("ХарактерыДеятельности", ХарактерыДеятельности);
	Запрос.УстановитьПараметр("СтатьиЗатрат",          СтатьиЗатрат);
	Запрос.УстановитьПараметр("РасчетныеДокументы",    РасчетныеДокументы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.СчетУчета,
	|	ИППрочиеРасходыОбороты.СуммаОборот,
	|	ИППрочиеРасходыОбороты.НДСОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОбороты
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В (&НоменклатурныеГруппы)
	|				И ХарактерДеятельности В (&ХарактерыДеятельности)
	|				И СтатьяЗатрат В (&СтатьиЗатрат)
	|				И РасчетныйДокумент В (&РасчетныеДокументы)
	|				И СчетУчета = НЕОПРЕДЕЛЕНО
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИППрочиеРасходыОбороты
	|ГДЕ
	|	ИППрочиеРасходыОбороты.СуммаОборот + ИППрочиеРасходыОбороты.НДСОборот > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.СуммаОборот,
	|	ИППрочиеРасходыОбороты.НДСОборот
	|ИЗ
	|	ВТИППрочиеРасходыОборотыКАК КАК ИППрочиеРасходыОбороты";
	
	ТаблицаОборотов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОборотов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, СтатьяЗатрат, РасчетныйДокумент");
	СтруктураОтбора = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, СтатьяЗатрат, РасчетныйДокумент");
	
	Для Каждого Оплата Из ОплаченныеПартии Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Оплата);
		
		НайденныеОбороты = ТаблицаОборотов.НайтиСтроки(СтруктураОтбора);
		Если НайденныеОбороты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Оборот = НайденныеОбороты[0];
		
		СуммаОплаты = Мин(Оплата.Сумма + Оплата.НДС, Оборот.Сумма + Оборот.НДС);
		
		Если СуммаОплаты = Оборот.Сумма + Оборот.НДС Тогда
			Сумма     = Оборот.Сумма;
			НДС       = Оборот.НДС;
		Иначе
			Коэффициент = СуммаОплаты / (Оборот.Сумма + Оборот.НДС);
			СуммаСНДС = Окр((Оборот.Сумма + Оборот.НДС) * Коэффициент, 2, 1);
			Сумма     = Окр(Оборот.Сумма * Коэффициент, 2, 1);
			НДС       = СуммаСНДС - Сумма;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОплатыПоставщику.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Оборот);
		НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
		НоваяСтрока.Сумма          = Сумма;
		НоваяСтрока.НДС            = НДС;
		
		Оборот.Сумма = Оборот.Сумма - Сумма;
		Оборот.НДС   = Оборот.НДС - НДС;
		
	КонецЦикла;
	
	Возврат ТаблицаОплатыПоставщику;
	
КонецФункции

Процедура СформироватьДвиженияОплатаПоставщику(ТаблицыОплатыПоставщику, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицыОплатыПоставщику)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОплатаПоставщику(ТаблицыОплатыПоставщику, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого Оплата Из Параметры.МПЗ Цикл
		
		Движения.ИПМПЗ.Записывать = Истина;
		
		// Сторно
		Движение = Движения.ИПМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество =-Оплата.Количество;
		Движение.Сумма      =-Оплата.Сумма;
		Движение.НДС        =-Оплата.НДС;
		
		// Отражение
		Движение = Движения.ИПМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество = Оплата.Количество;
		Движение.Сумма      = Оплата.Сумма;
		Движение.НДС        = Оплата.НДС;
		
	КонецЦикла;
	
	Для Каждого Оплата Из Параметры.ИныеМатериальныеРасходы Цикл
		
		Движения.ИПИныеМатериальныеРасходы.Записывать = Истина;
		
		// Сторно
		Движение = Движения.ИПИныеМатериальныеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество =-Оплата.Количество;
		Движение.Сумма      =-Оплата.Сумма;
		Движение.НДС        =-Оплата.НДС;
		
		// Отражение
		Движение = Движения.ИПИныеМатериальныеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество = Оплата.Количество;
		Движение.Сумма      = Оплата.Сумма;
		Движение.НДС        = Оплата.НДС;
		
	КонецЦикла;
	
	Для Каждого Оплата Из Параметры.ПрочиеРасходы Цикл
		
		Движения.ИППрочиеРасходы.Записывать = Истина;
		
		// Сторно
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма      =-Оплата.Сумма;
		Движение.НДС        =-Оплата.НДС;
		
		// Отражение
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма      = Оплата.Сумма;
		Движение.НДС        = Оплата.НДС;
		
	КонецЦикла;
	
	Для Каждого Оплата Из Параметры.РБП Цикл
		
		Движения.ИПРБП.Записывать = Истина;
		
		// Сторно
		Движение = Движения.ИПРБП.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма      =-Оплата.Сумма;
		Движение.НДС        =-Оплата.НДС;
		
		// Отражение
		Движение = Движения.ИПРБП.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма      = Оплата.Сумма;
		Движение.НДС        = Оплата.НДС;
		
	КонецЦикла;
	
	Для Каждого Оплата Из Параметры.МПЗОбороты Цикл
		
		Движения.ИПМПЗОбороты.Записывать = Истина;
		
		// Сторно
		Движение = Движения.ИПМПЗОбороты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество =-Оплата.Количество;
		Движение.Сумма      =-Оплата.Сумма;
		Движение.НДС        =-Оплата.НДС;
		
		// Отражение
		Движение = Движения.ИПМПЗОбороты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество = Оплата.Количество;
		Движение.Сумма      = Оплата.Сумма;
		Движение.НДС        = Оплата.НДС;
		
	КонецЦикла;
	
	ДляПризнанияРасходовТребуетсяПолучениеДоходаИП = 
		УчетнаяПолитика.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП(Реквизиты.Организация, Реквизиты.Период);
	
	ПризнаватьРасходыПоОперациямПрошлогоГодаИП =
		УчетнаяПолитика.ПризнаватьРасходыПоОперациямПрошлогоГодаИП(Реквизиты.Организация, Реквизиты.Период);
	
	НалоговыйПериод = НалоговыйПериод(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого Оплата Из Параметры.МПЗОтгруженные Цикл
		
		Движения.ИПМПЗОтгруженные.Записывать = Истина;
		
		// Сторно
		Движение = Движения.ИПМПЗОтгруженные.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество     =-Оплата.Количество;
		Движение.Сумма          =-Оплата.Сумма;
		Движение.НДС            =-Оплата.НДС;
		Движение.Выручка        =-Оплата.Выручка;
		Движение.НДСНачисленный =-Оплата.НДСНачисленный;
		
		// Отражение
		Движение = Движения.ИПМПЗОтгруженные.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество     = Оплата.Количество;
		Движение.Сумма          = Оплата.Сумма;
		Движение.НДС            = Оплата.НДС;
		Движение.Выручка        = Оплата.Выручка;
		Движение.НДСНачисленный = Оплата.НДСНачисленный;
		
		Если Оплата.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			
			Если НЕ ДляПризнанияРасходовТребуетсяПолучениеДоходаИП
				ИЛИ МожноПризнатьРасходы(ПризнаватьРасходыПоОперациямПрошлогоГодаИП, Оплата.ДатаДокументаОтгрузки, НалоговыйПериод) Тогда
				// уменьшение дохода на сумму новых расходов
				Движения.ИПДоходы.Записывать = Истина;
				
				Доходы = Движения.ИПДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доходы, Оплата, , "ВидДвижения");
				ЗаполнитьЗначенияСвойств(Доходы, Реквизиты);
				
				Доходы.Количество                   = 0;
				Доходы.Выручка                      = 0;
				Доходы.НДСНачисленный               = 0;
				Доходы.Сумма                        = Оплата.Сумма;
				Доходы.НДС                          = Оплата.НДС;
				Доходы.КоличествоОплаченоПоставщику = Оплата.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОплатаПоставщику(ТаблицыОплатыПоставщику, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.МПЗ
	СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"					// <ВидДвиженияНакопления> - вид движения
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "ВидМПЗ,"							// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"					// <СправочникСсылка.*> - номенклатура
		+ "Партия,"							// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"					// <ДокументСсылка.*> - документ оплаты
		+ "Количество,"						// <Число,15,3>
		+ "Сумма,"							// <Число,15,2>
		+ "НДС";							// <Число,15,2>
		
	Параметры.Вставить("МПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыОплатыПоставщику.МПЗ, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ИныеМатериальныеРасходы
	СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"					// <ВидДвиженияНакопления> - вид движения
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "СтатьяЗатрат,"					// <СправочникСсылка.*> - статья затрат
		+ "Партия,"							// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"					// <ДокументСсылка.*> - документ оплаты
		+ "МПЗ,"							// <ДокументСсылка.*> - документ поступления
		+ "ПартияМПЗ,"						// <ДокументСсылка.*> - документ отгрузки
		+ "Количество,"						// <Число,15,3>
		+ "Сумма,"							// <Число,15,2>
		+ "НДС";							// <Число,15,2>
	
	Параметры.Вставить("ИныеМатериальныеРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыОплатыПоставщику.ИныеМатериальныеРасходы, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ПрочиеРасходы
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "СтатьяЗатрат,"					// <СправочникСсылка.*> - статья затрат
		+ "РасчетныйДокумент,"				// <ДокументСсылка.*> - расчетный документ
		+ "ДокументОплаты,"					// <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"							// <Число,15,2>
		+ "НДС";							// <Число,15,2>
		
	Параметры.Вставить("ПрочиеРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыОплатыПоставщику.ПрочиеРасходы, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.РБП
	СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"					// <ВидДвиженияНакопления> - вид движения
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "ВидРасхода,"						// <СправочникСсылка.*> - вид расхода
		+ "Партия,"							// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"					// <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"							// <Число,15,2>
		+ "НДС";							// <Число,15,2>
	
	Параметры.Вставить("РБП", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыОплатыПоставщику.РБП, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.МПЗОбороты
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "ДокументОплаты,"					// <ДокументСсылка.*> - документ оплаты
		+ "ВидСписанногоМПЗ,"				// <ПеречислениеСсылка.ВидыМПЗ>
		+ "НоменклатураСписанная,"			// <СправочникСсылка.*> - номенклатура
		+ "ПартияСписаннойНоменклатуры,"	// <ДокументСсылка.*> - документ поступления
		+ "ВидПоступившегоМПЗ,"				// <ПеречислениеСсылка.ВидыМПЗ>
		+ "НоменклатураПоступившая,"		// <СправочникСсылка.*> - номенклатура
		+ "ПартияПоступившейНоменклатуры,"	// <ДокументСсылка.*> - документ поступления
		+ "Количество,"						// <Число,15,3>
		+ "Сумма,"							// <Число,15,2>
		+ "НДС";							// <Число,15,2>
	
	Параметры.Вставить("МПЗОбороты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыОплатыПоставщику.МПЗОбороты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.МПЗОтгруженные
	СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"					// <ВидДвиженияНакопления> - вид движения
		+ "НоменклатурнаяГруппа,"			// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"			// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "ВидМПЗ,"							// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"					// <СправочникСсылка.*> - номенклатура
		+ "Партия,"							// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"					// <ДокументСсылка.*> - документ оплаты
		+ "ДокументОтгрузки,"				// <ДокументСсылка.*> - документ отгрузки
		+ "ДатаДокументаОтгрузки,"			// <Дата> - дата документа отгрузки
		+ "Количество,"						// <Число,15,3>
		+ "Сумма,"							// <Число,15,2>
		+ "НДС,"							// <Число,15,2>
		+ "Выручка,"						// <Число,15,2>
		+ "НДСНачисленный";					// <Число,15,2>
		
	Параметры.Вставить("МПЗОтгруженные", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицыОплатыПоставщику.МПЗОтгруженные, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"							// <Дата> - период движений - дата документа
		+ "Регистратор,"					// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";					// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;		

КонецФункции

#КонецОбласти

#Область ОплатаПокупателя

Функция НачалоВключенияАвансовПокупателейВДоходыПоквартально() Экспорт
	
	Возврат '20200101';
	
КонецФункции

Функция ПодготовитьТаблицуОплатыПокупателя(ТаблицаВзаиморасчетов, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя 
		И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности
		И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее
		И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыОплатыПокупателя(ТаблицаВзаиморасчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	ОплаченныеОтгрузки = ПодготовитьТаблицуОплаченныеПартии(Параметры.СписокВзаиморасчетов, Реквизиты, "ДокументОтгрузки");
	СписокДокументовОтгрузки = ОбщегоНазначения.ВыгрузитьКолонку(ОплаченныеОтгрузки, "ДокументОтгрузки", Истина);
	ТаблицаБлокировки = Новый ТаблицаЗначений;
	ТаблицаБлокировки.Колонки.Добавить("ДокументОтгрузки",
		Метаданные.РегистрыНакопления.ИПМПЗОтгруженные.Измерения.ДокументОтгрузки.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаБлокировки, СписокДокументовОтгрузки, "ДокументОтгрузки");
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОтгрузки", "ДокументОтгрузки");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",              Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокДокументовОтгрузки", СписокДокументовОтгрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток,
	|	ИПМПЗОтгруженныеОстатки.СуммаОстаток,
	|	ИПМПЗОтгруженныеОстатки.НДСОстаток,
	|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток,
	|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток
	|ПОМЕСТИТЬ ВТМПЗОтгруженныеОстатки
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(&Период, ДокументОтгрузки В (&СписокДокументовОтгрузки)) КАК ИПМПЗОтгруженныеОстатки
	|ГДЕ
	|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток >= 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ЕСТЬNULL(РеквизитыДокументовОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток КАК Количество,
	|	ИПМПЗОтгруженныеОстатки.СуммаОстаток КАК Сумма,
	|	ИПМПЗОтгруженныеОстатки.НДСОстаток КАК НДС,
	|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток КАК Выручка,
	|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток КАК НДСНачисленный
	|ИЗ
	|	ВТМПЗОтгруженныеОстатки КАК ИПМПЗОтгруженныеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОтгрузки
	|		ПО (РеквизитыДокументовОтгрузки.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.ДокументОтгрузки = РеквизитыДокументовОтгрузки.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ТаблицаОтгрузок = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОтгрузок, "НомерСтроки");
	ТаблицаОтгрузок.Индексы.Добавить("НомерСтроки");
	ТаблицаОтгрузок.Индексы.Добавить("ДокументОтгрузки");
	
	СписокОплат = ПолучитьПустуюТаблицуСписокОплатПокупателя();
	
	ОтборОтгрузок = Новый Структура("ДокументОтгрузки");
	
	Для Каждого Оплата Из ОплаченныеОтгрузки Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборОтгрузок, Оплата);
		НайденныеОтгрузки = ТаблицаОтгрузок.Скопировать(ОтборОтгрузок);
		НайденныеОтгрузки.Сортировать("ДатаДокументаОплаты, ДокументОплаты, ДатаПартии, Партия, Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ", Новый СравнениеЗначений);
		
		ВыручкаНачальныйОстаток = НайденныеОтгрузки.Итог("Выручка");
		
		ВырожденныеОтгрузки = Новый Массив;
		
		СтоимостьВырожденныхОтгрузок = 0;
		
		Для каждого Отгрузка Из НайденныеОтгрузки Цикл
			
			Если Отгрузка.Выручка = 0 Тогда
				
				Если Отгрузка.Сумма + Отгрузка.НДС <> 0 Тогда
					ВырожденныеОтгрузки.Добавить(Отгрузка);
					СтоимостьВырожденныхОтгрузок = СтоимостьВырожденныхОтгрузок + Отгрузка.Сумма + Отгрузка.НДС;
				КонецЕсли;
				
			ИначеЕсли Оплата.СуммаРуб > 0 И Отгрузка.Выручка > 0 Тогда
				
				Если Отгрузка.Выручка <= Оплата.СуммаРуб Тогда
					
					Количество     = Отгрузка.Количество;
					Сумма          = Отгрузка.Сумма;
					НДС            = Отгрузка.НДС;
					Выручка        = Отгрузка.Выручка;
					НДСНачисленный = Отгрузка.НДСНачисленный;
					
				Иначе
					
					Коэффициент = Оплата.СуммаРуб / Отгрузка.Выручка;
					
					Количество     = Окр(Отгрузка.Количество * Коэффициент, 3, 1);
					Сумма          = Окр(Отгрузка.Сумма * Коэффициент, 2, 1);
					НДС            = Окр((Отгрузка.Сумма + Отгрузка.НДС) * Коэффициент, 2, 1) - Сумма;
					Выручка        = Окр(Отгрузка.Выручка * Коэффициент, 2, 1);
					НДСНачисленный = Окр(Отгрузка.НДСНачисленный * Коэффициент, 2, 1);
					
				КонецЕсли;
				
				НоваяСтрока = СписокОплат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отгрузка);
				НоваяСтрока.Количество     = Количество;
				НоваяСтрока.Сумма          = Сумма;
				НоваяСтрока.НДС            = НДС;
				НоваяСтрока.Выручка        = Выручка;
				НоваяСтрока.НДСНачисленный = НДСНачисленный;
				
				Отгрузка.Количество     = Отгрузка.Количество - Количество;
				Отгрузка.Сумма          = Отгрузка.Сумма - Сумма;
				Отгрузка.НДС            = Отгрузка.НДС - НДС;
				Отгрузка.Выручка        = Отгрузка.Выручка - Выручка;
				Отгрузка.НДСНачисленный = Отгрузка.НДСНачисленный - НДСНачисленный;
				
				ЗаполнитьЗначенияСвойств(ТаблицаОтгрузок.Найти(Отгрузка.НомерСтроки, "НомерСтроки"), Отгрузка, "Количество, Сумма, НДС, Выручка, НДСНачисленный");
				
				Оплата.СуммаРуб = Оплата.СуммаРуб - Выручка;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Оплата вырожденных отгрузок
		Если СтоимостьВырожденныхОтгрузок <> 0 Тогда
			
			РаспределеннаяВыручка = ВыручкаНачальныйОстаток - НайденныеОтгрузки.Итог("Выручка");
			
			Если РаспределеннаяВыручка <> 0 И ВыручкаНачальныйОстаток <> 0 Тогда
				
				СтоимостьКРаспределению = Окр(СтоимостьВырожденныхОтгрузок * РаспределеннаяВыручка/ВыручкаНачальныйОстаток, 2, 1);
				
				Для каждого Отгрузка Из ВырожденныеОтгрузки Цикл
					
					Если Отгрузка.Сумма + Отгрузка.НДС = 0 Тогда
						Продолжить
					КонецЕсли;
					
					Если (Отгрузка.Сумма + Отгрузка.НДС) <= СтоимостьКРаспределению Тогда
						
						Количество = Отгрузка.Количество;
						Сумма      = Отгрузка.Сумма;
						НДС        = Отгрузка.НДС;
						
					Иначе
						
						Коэффициент = СтоимостьКРаспределению / (Отгрузка.Сумма + Отгрузка.НДС);
						
						Количество = Окр(Отгрузка.Количество * Коэффициент, 3, 1);
						Сумма      = Окр(Отгрузка.Сумма * Коэффициент, 2, 1);
						НДС        = Окр((Отгрузка.Сумма + Отгрузка.НДС) * Коэффициент, 2, 1) - Сумма;
						
					КонецЕсли;
					
					НоваяСтрока = СписокОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Отгрузка);
					НоваяСтрока.Количество     = Количество;
					НоваяСтрока.Сумма          = Сумма;
					НоваяСтрока.НДС            = НДС;
					НоваяСтрока.Выручка        = 0;
					НоваяСтрока.НДСНачисленный = 0;
					
					Отгрузка.Количество = Отгрузка.Количество - Количество;
					Отгрузка.Сумма      = Отгрузка.Сумма - Сумма;
					Отгрузка.НДС        = Отгрузка.НДС - НДС;
					
					ЗаполнитьЗначенияСвойств(ТаблицаОтгрузок.Найти(Отгрузка.НомерСтроки, "НомерСтроки"), Отгрузка, "Количество, Сумма, НДС");
					
					СтоимостьКРаспределению = СтоимостьКРаспределению - Сумма - НДС;
					Если СтоимостьКРаспределению = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокОплат;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыОплатыПокупателя(ТаблицаВзаиморасчетов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВзаиморасчетов
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"			// <ДокументСсылка> - документ расчетов, задолженность по которому погашается
		+ "СуммаБУ";					// <Число,15,2> - сумма оплаты в рублях
		
	Параметры.Вставить("СписокВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ВидОперации";			// <ПеречислениеСсылка.*> - вид операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОплатаПокупателя(ТаблицаОплаты, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыОплатаПокупателя(ТаблицаОплаты, ТаблицаРеквизитов);		
	Реквизиты = Параметры.Реквизиты[0];

	СписокОплат = Параметры.СписокОплат;
	
	СтатьяДоходовПринимаетсяКналоговомуУчету = Новый Соответствие;
	
	Движения.ИПМПЗОтгруженные.Записывать = Истина;
	
	Для каждого Оплата Из СписокОплат Цикл
		
		Движение = Движения.ИПМПЗОтгруженные.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Если Оплата.ВидМПЗ <> Перечисления.ВидыМПЗ.ОС И Оплата.ВидМПЗ <> Перечисления.ВидыМПЗ.НМА Тогда
			
			Если ЗначениеЗаполнено(Оплата.ДокументОплаты) Тогда
				
				// Товар оплачен поставщику
				
				Движение = Движения.ИПДоходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение, Оплата);
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				
				Движение.ДокументОплаты = Реквизиты.Регистратор;
				Движение.Сумма = Оплата.Сумма;
				Движение.НДС = Оплата.НДС;
				Движение.КоличествоОплаченоПоставщику = Оплата.Количество;
				
				Движения.ИПДоходы.Записывать = Истина;
				
			ИначеЕсли Оплата.Количество <> 0 Или Оплата.Выручка <> 0 Или Оплата.НДСНачисленный <> 0 Тогда
				
				// Товар не оплачен поставщику, но оплачен покупателем
				
				Движение = Движения.ИПДоходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(Движение, Оплата);
				ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
				
				Движение.ДокументОплаты = Реквизиты.Регистратор;
				Движение.Сумма = 0;
				Движение.НДС = 0;
				Движение.КоличествоОплаченоПоставщику = 0;
				
				Движения.ИПДоходы.Записывать = Истина;
				
			КонецЕсли;
			
		Иначе
			
			// Доход от реализации ОС и НМА определяется, как разница между ценой реализации остаточной стоимостью
			СуммаДохода = Оплата.Выручка - Оплата.НДСНачисленный - Оплата.Сумма;
			
			Если Оплата.ВидМПЗ = Перечисления.ВидыМПЗ.ОС Тогда
				СтатьяДоходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияОсновныхСредств");
			Иначе
				СтатьяДоходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияПрочегоИмущества");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтатьяДоходов) Тогда
				ПринимаетсяКналоговомуУчету = СтатьяДоходовПринимаетсяКналоговомуУчету[СтатьяДоходов];
				Если ПринимаетсяКналоговомуУчету = Неопределено Тогда
					ПринимаетсяКналоговомуУчету = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДоходов, "ПринятиеКналоговомуУчету");
					СтатьяДоходовПринимаетсяКналоговомуУчету.Вставить(СтатьяДоходов, ПринимаетсяКналоговомуУчету);
				КонецЕсли;
			Иначе
				ПринимаетсяКналоговомуУчету = Ложь;
			КонецЕсли;
			
			Если СуммаДохода > 0 И ПринимаетсяКналоговомуУчету Тогда
				
				Движения.ИППрочиеДоходы.Записывать = Истина;
				
				Доход = Движения.ИППрочиеДоходы.Добавить();
				ЗаполнитьЗначенияСвойств(Доход, Оплата, , "Сумма");
				ЗаполнитьЗначенияСвойств(Доход, Реквизиты);
				Доход.СтатьяДоходов = СтатьяДоходов;
				Доход.Сумма         = СуммаДохода;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОплатаПокупателя(ТаблицаОплаты, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокОплат
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "ДокументОтгрузки,"		// <ДокументСсылка.*> - документ отгрузки
		+ "Количество,"				// <Число,15,3> - количество отгруженной номенклатуры
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Выручка,"				// <Число,15,2> - сумма выручки в рублях с НДС
		+ "НДСНачисленный";			// <Число,15,2> - НДС начисленный в рублях
		
	Параметры.Вставить("СписокОплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплаты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ВидОперации";			// <ПеречислениеСсылка.*> - вид операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция СформироватьДвиженияЗачетОплатыПокупателя(ТаблицаМПЗ, ТаблицаПлатежей, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаПлатежей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетОплатыПокупателя(ТаблицаМПЗ, ТаблицаПлатежей, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СписокМПЗ      = Параметры.СписокМПЗ;
	СписокПлатежей = Параметры.СписокПлатежей;
	СписокПлатежей.Колонки.ДокументРасчетов.Имя = "ДокументОплаты";
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		
		// Погашение розничной выручки НТТ
		
		Движения.ПрочиеРасчеты.Записывать = Истина;
		
		Для Каждого Платеж Из СписокПлатежей Цикл
			
			НовоеДвижение = Движения.ПрочиеРасчеты.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Реквизиты);
			НовоеДвижение.Контрагент            = Платеж.Контрагент;
			НовоеДвижение.РасчетныйДокумент     = Платеж.ДокументОплаты;
			НовоеДвижение.Сумма                 = Платеж.СуммаРуб;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокМПЗ.Количество() > 0 Тогда
		
		// Установка управляемой блокировки
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОтгруженные");
		ОписаниеИсточника = Новый Структура;
		ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
		ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
		ОписаниеИсточника.Вставить("ВидМПЗ",               "ВидМПЗ");
		ОписаниеИсточника.Вставить("Номенклатура",         "Номенклатура");
		ОписаниеИсточника.Вставить("Партия",               "Партия");
		ОписаниеИсточника.Вставить("ДокументОтгрузки",     "ДокументОтгрузки");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.ИсточникДанных =
			ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
		Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		ЭтоПоступлениеОтЭквайера = 
			(ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") 
				И Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
				
		ЭтоПоступлениеОтФакторинговойКомпании = 
			(ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") 
				И Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании)
			ИЛИ (ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
				И Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга);
		
		ЭтоДокументОплаты = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
			ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ЭтоПоступлениеОтЭквайера
			ИЛИ ЭтоПоступлениеОтФакторинговойКомпании;
		
		// Зачет авансов покупателей в прочих доходах
		ЗачетАвансаПокупателейИППрочиеДоходы(СписокПлатежей, Реквизиты, Движения, Отказ);
		
		// Сначала, зачет оплаты за оплаченные поставщику
		ЗачетОплатыОтПокупателяДвижения(Истина, ЭтоДокументОплаты, СписокМПЗ, СписокПлатежей, Реквизиты, Движения, Отказ);
		
		// Затем, зачет оплаты за неоплаченные поставщику
		ЗачетОплатыОтПокупателяДвижения(Ложь, ЭтоДокументОплаты, СписокМПЗ, СписокПлатежей, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетОплатыПокупателя(ТаблицаМПЗ, ТаблицаПлатежей, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура
		+ "Партия,"					// <ДокументСсылка> - документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка> - документ оплаты
		+ "ДокументОтгрузки,"		// <ДокументСсылка> - документ отгрузки
		+ "Количество,"				// <Число,15,3> - количество отгруженной номенклатуры
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Выручка,"				// <Число,15,2> - сумма выручки в рублях с НДС
		+ "НДСНачисленный";			// <Число,15,2> - НДС начисленный в рублях
	
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокПлатежей
	
	СписокОбязательныхКолонок = ""
		+ "Контрагент,"				// <СправочникСсылка> - контрагент или торговая точка (склад)
		+ "ДокументРасчетов,"		// <ДокументСсылка> - документ оплаты
		+ "ДатаДокументаРасчетов,"	// <Дата> - дата документа расчетов
		+ "СуммаРуб";				// <Число,15,2> - сумма оплаты с НДС
	
	Параметры.Вставить("СписокПлатежей", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПлатежей, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ВидОперации";			// <ПеречислениеСсылка.*> - вид операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция СформироватьДвиженияЗачетКомиссионногоВознаграждения(ТаблицаМПЗ, ТаблицаПлатежей, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетКомиссионногоВознаграждения(ТаблицаМПЗ, ТаблицаПлатежей, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ      = Параметры.СписокМПЗ;
	СписокПлатежей = Параметры.СписокПлатежей;
	СписокПлатежей.Колонки.ДокументРасчетов.Имя = "ДокументОплаты";
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОтгруженные");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	ОписаниеИсточника.Вставить("ХарактерДеятельности", "ХарактерДеятельности");
	ОписаниеИсточника.Вставить("ВидМПЗ",               "ВидМПЗ");
	ОписаниеИсточника.Вставить("Номенклатура",         "Номенклатура");
	ОписаниеИсточника.Вставить("Партия",               "Партия");
	ОписаниеИсточника.Вставить("ДокументОтгрузки",     "ДокументОтгрузки");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Сначала, зачет оплаты за оплаченные поставщику
	ЗачетОплатыОтПокупателяДвижения(Истина, Истина, СписокМПЗ, СписокПлатежей, Реквизиты, Движения, Отказ);
	
	// Затем, зачет оплаты за неоплаченные поставщику
	ЗачетОплатыОтПокупателяДвижения(Ложь, Истина, СписокМПЗ, СписокПлатежей, Реквизиты, Движения, Отказ);
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыЗачетКомиссионногоВознаграждения(ТаблицаМПЗ, ТаблицаПлатежей, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура
		+ "Партия,"					// <ДокументСсылка> - документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка> - документ оплаты
		+ "ДокументОтгрузки,"		// <ДокументСсылка> - документ отгрузки
		+ "Количество,"				// <Число,15,3> - количество отгруженной номенклатуры
		+ "Сумма,"					// <Число,15,2> - сумма в рублях без НДС
		+ "НДС,"					// <Число,15,2> - сумма НДС в рублях
		+ "Выручка,"				// <Число,15,2> - сумма выручки в рублях с НДС
		+ "НДСНачисленный";			// <Число,15,2> - НДС начисленный в рублях
	
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокПлатежей
	
	СписокОбязательныхКолонок = ""
		+ "Контрагент,"				// <СправочникСсылка> - контрагент или торговая точка (склад)
		+ "ДокументРасчетов,"		// <ДокументСсылка> - документ оплаты
		+ "ДатаДокументаРасчетов,"	// <Дата> - дата документа расчетов
		+ "СуммаРуб";				// <Число,15,2> - сумма оплаты с НДС
	
	Параметры.Вставить("СписокПлатежей", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПлатежей, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура ЗачетОплатыОтПокупателяДвижения(СтатусОплаты, ЭтоДокументОплаты, СписокМПЗ, СписокПлатежей, Реквизиты, Движения, Отказ)
	
	АвансыВключаютсяВДоходыВПериодеПолученияИП =
		УчетнаяПолитика.АвансыВключаютсяВДоходыВПериодеПолученияИП(Реквизиты.Организация, Реквизиты.Период);
	
	ПризнаватьРасходыПоОперациямПрошлогоГодаИП =
		УчетнаяПолитика.ПризнаватьРасходыПоОперациямПрошлогоГодаИП(Реквизиты.Организация, Реквизиты.Период);
	
	НалоговыйПериод = НалоговыйПериод(Реквизиты.Организация, Реквизиты.Период);
	
	СтатьяДоходовПринимаетсяКналоговомуУчету = Новый Соответствие;
	
	Для каждого МПЗ из СписокМПЗ Цикл
		
		Если МПЗ.Выручка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтатусОплаты = ЗначениеЗаполнено(МПЗ.ДокументОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		НеполученнаяВыручка = МПЗ.Выручка;
		
		Движения.ИПМПЗОтгруженные.Записывать = Истина;
		
		Для Каждого ДокументОплаты Из СписокПлатежей Цикл
			
			Если ДокументОплаты.СуммаРуб = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументОплаты.ДокументОплаты = Реквизиты.Регистратор И НЕ ЭтоДокументОплаты Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаЗачета = Мин(НеполученнаяВыручка, ДокументОплаты.СуммаРуб);
			
			НеполученнаяВыручка     = НеполученнаяВыручка - СуммаЗачета;
			ДокументОплаты.СуммаРуб = ДокументОплаты.СуммаРуб - СуммаЗачета;
			
			Оплачено = Движения.ИПМПЗОтгруженные.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Оплачено, МПЗ, , "Количество, Сумма, НДС, Выручка, НДСНачисленный");
			ЗаполнитьЗначенияСвойств(Оплачено, Реквизиты);
			
			Если НеполученнаяВыручка = 0 Тогда // отгрузка полностью оплачена
				
				Оплачено.Количество     = МПЗ.Количество;
				Оплачено.Сумма          = МПЗ.Сумма;
				Оплачено.НДС            = МПЗ.НДС;
				Оплачено.Выручка        = МПЗ.Выручка;
				Оплачено.НДСНачисленный = МПЗ.НДСНачисленный;
				
			Иначе
				
				Коэффициент = СуммаЗачета / МПЗ.Выручка;
				
				Оплачено.Количество     = Окр(МПЗ.Количество * Коэффициент, 3, 1);
				Оплачено.Сумма          = Окр(МПЗ.Сумма * Коэффициент, 2, 1);
				Оплачено.НДС            = Окр((МПЗ.Сумма + МПЗ.НДС) * Коэффициент, 2, 1) - Оплачено.Сумма;
				Оплачено.Выручка        = СуммаЗачета;
				Оплачено.НДСНачисленный = СуммаЗачета - Окр((МПЗ.Выручка - МПЗ.НДСНачисленный) * Коэффициент, 2, 1);
				
			КонецЕсли;
			
			Если МПЗ.ВидМПЗ <> Перечисления.ВидыМПЗ.ОС И МПЗ.ВидМПЗ <> Перечисления.ВидыМПЗ.НМА Тогда
				
				МожноПризнатьДоходы  = МожноПризнатьДоходы(АвансыВключаютсяВДоходыВПериодеПолученияИП, ДокументОплаты.ДатаДокументаРасчетов, НалоговыйПериод);
				МожноПризнатьРасходы = МожноПризнатьРасходы(ПризнаватьРасходыПоОперациямПрошлогоГодаИП, ДокументОплаты.ДатаДокументаРасчетов, НалоговыйПериод);
				
				Если МожноПризнатьДоходы
					ИЛИ (МожноПризнатьРасходы И ЗначениеЗаполнено(МПЗ.ДокументОплаты)) Тогда
					
					Движения.ИПДоходы.Записывать = Истина;
					
					Доход = Движения.ИПДоходы.Добавить();
					ЗаполнитьЗначенияСвойств(Доход, МПЗ, , "Количество, Выручка, НДСНачисленный, Сумма, НДС");
					ЗаполнитьЗначенияСвойств(Доход, Реквизиты);
					
					Доход.ДокументОплаты = ДокументОплаты.ДокументОплаты;
					
					Если МожноПризнатьДоходы Тогда
						Доход.Выручка        = Оплачено.Выручка;
						Доход.НДСНачисленный = Оплачено.НДСНачисленный;
						Доход.Количество     = Оплачено.Количество;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(МПЗ.ДокументОплаты) Тогда
						
						Доход.КоличествоОплаченоПоставщику = Оплачено.Количество;
						Доход.Сумма = Оплачено.Сумма;
						Доход.НДС   = Оплачено.НДС;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// Доход от реализации ОС и НМА определяется, как разница между ценой реализации остаточной стоимостью
				СуммаДохода = Оплачено.Выручка - Оплачено.НДСНачисленный - Оплачено.Сумма;
				
				Если МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ОС Тогда
					СтатьяДоходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияОсновныхСредств");
				Иначе
					СтатьяДоходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияПрочегоИмущества");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтатьяДоходов) Тогда
					ПринимаетсяКналоговомуУчету = СтатьяДоходовПринимаетсяКналоговомуУчету[СтатьяДоходов];
					Если ПринимаетсяКналоговомуУчету = Неопределено Тогда
						ПринимаетсяКналоговомуУчету = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяДоходов, "ПринятиеКналоговомуУчету");
						СтатьяДоходовПринимаетсяКналоговомуУчету.Вставить(СтатьяДоходов, ПринимаетсяКналоговомуУчету);
					КонецЕсли;
				Иначе
					ПринимаетсяКналоговомуУчету = Ложь;
				КонецЕсли;
				
				Если СуммаДохода > 0 И ПринимаетсяКналоговомуУчету Тогда
					
					Движения.ИППрочиеДоходы.Записывать = Истина;
					
					Доход = Движения.ИППрочиеДоходы.Добавить();
					ЗаполнитьЗначенияСвойств(Доход, МПЗ, , "Сумма");
					ЗаполнитьЗначенияСвойств(Доход, Реквизиты);
					Доход.СтатьяДоходов = СтатьяДоходов;
					Доход.Сумма         = СуммаДохода;
					
				КонецЕсли;
				
			КонецЕсли;
			
			МПЗ.Количество     = МПЗ.Количество - Оплачено.Количество;
			МПЗ.Сумма          = МПЗ.Сумма - Оплачено.Сумма;
			МПЗ.НДС            = МПЗ.НДС - Оплачено.НДС;
			МПЗ.Выручка        = МПЗ.Выручка - Оплачено.Выручка;
			МПЗ.НДСНачисленный = МПЗ.НДСНачисленный - Оплачено.НДСНачисленный;
			
			Если НеполученнаяВыручка = 0 Тогда
				// Отгрузка полностью оплачена
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗачетАвансаПокупателейИППрочиеДоходы(Платежи, Реквизиты, Движения, Отказ)
	
	Если Движения.Найти("ИППрочиеДоходы") = Неопределено Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Платежи.Итог("СуммаРуб") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АвансыПокупателей = Платежи.Скопировать();
	АвансыПокупателей.Свернуть("ДокументОплаты", "СуммаРуб");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВТ.ДокументОплаты КАК ДокументОплаты,
	|	ВТ.СуммаРуб КАК Сумма
	|ПОМЕСТИТЬ ЗачтенныеАвансы
	|ИЗ
	|	&Платежи КАК ВТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеДоходыОбороты.Организация КАК Организация,
	|	ИППрочиеДоходыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИППрочиеДоходыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИППрочиеДоходыОбороты.СтатьяДоходов КАК СтатьяДоходов,
	|	ИППрочиеДоходыОбороты.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ИППрочиеДоходыОбороты.СуммаОборот) КАК Сумма
	|ПОМЕСТИТЬ НезачтенныеАвансы
	|ИЗ
	|	РегистрНакопления.ИППрочиеДоходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И ДокументОплаты В
	|					(ВЫБРАТЬ
	|						ЗачтенныеАвансы.ДокументОплаты
	|					ИЗ
	|						ЗачтенныеАвансы КАК ЗачтенныеАвансы)) КАК ИППрочиеДоходыОбороты
	|ГДЕ
	|	ИППрочиеДоходыОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ИППрочиеДоходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеДоходыОбороты.ХарактерДеятельности,
	|	ИППрочиеДоходыОбороты.СтатьяДоходов,
	|	ИППрочиеДоходыОбороты.Организация,
	|	ИППрочиеДоходыОбороты.ДокументОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ИППрочиеДоходыОбороты.СуммаОборот) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НезачтенныеАвансы.Организация КАК Организация,
	|	НезачтенныеАвансы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	НезачтенныеАвансы.ХарактерДеятельности КАК ХарактерДеятельности,
	|	НезачтенныеАвансы.СтатьяДоходов КАК СтатьяДоходов,
	|	НезачтенныеАвансы.ДокументОплаты КАК ДокументОплаты,
	|	-ВЫБОР
	|		КОГДА НезачтенныеАвансы.Сумма < ЗачтенныеАвансы.Сумма
	|			ТОГДА НезачтенныеАвансы.Сумма
	|		ИНАЧЕ ЗачтенныеАвансы.Сумма
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	НезачтенныеАвансы КАК НезачтенныеАвансы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗачтенныеАвансы КАК ЗачтенныеАвансы
	|		ПО НезачтенныеАвансы.ДокументОплаты = ЗачтенныеАвансы.ДокументОплаты");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор",   Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Платежи",       АвансыПокупателей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Доход = Движения.ИППрочиеДоходы.Добавить();
		ЗаполнитьЗначенияСвойств(Доход, Выборка);
		Доход.Период = Реквизиты.Период;
		
	КонецЦикла;
	
	Движения.ИППрочиеДоходы.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьТаблицуСписанияЗадолженностиПредпринимателю(ТаблицаОплаченныеПартии, ТаблицаРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОплаченныеПартии)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат Неопределено;
	КонецЕсли; 

	Реквизиты = ТаблицаРеквизиты[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности 
	 Или ТипЗнч(Реквизиты.ВидОперации) <> Тип("ПеречислениеСписок.ВидыОперацийКорректировкаДолга") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыСписанияЗадолженностиПредпринимателю(ТаблицаОплаченныеПартии, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СчетаДтКт = Реквизиты.СчетДт = Реквизиты.СчетКт;
	
	ЕстьСубконтоКонтрагентыПоДт = Ложь;
	Если ТипЗнч(Реквизиты.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты")
		или ТипЗнч(Реквизиты.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты")
		или ТипЗнч(Реквизиты.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЕстьСубконтоКонтрагентыПоДт = Истина;
	КонецЕсли;
	
	ЕстьСубконтоДоговорыКонтрагентовПоДт = Ложь;
	Если ТипЗнч(Реквизиты.СубконтоДт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		или ТипЗнч(Реквизиты.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		или ТипЗнч(Реквизиты.СубконтоДт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЕстьСубконтоДоговорыКонтрагентовПоДт = Истина;
	КонецЕсли;
	
	ЕстьСубконтоКонтрагентыПоКт = Ложь;
	Если ТипЗнч(Реквизиты.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты")
		или ТипЗнч(Реквизиты.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты")
		или ТипЗнч(Реквизиты.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЕстьСубконтоКонтрагентыПоКт = Истина;
	КонецЕсли;
	
	ЕстьСубконтоДоговорыКонтрагентовПоКт = Ложь;
	Если ТипЗнч(Реквизиты.СубконтоКт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		или ТипЗнч(Реквизиты.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		или ТипЗнч(Реквизиты.СубконтоКт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЕстьСубконтоДоговорыКонтрагентовПоКт = Истина;
	КонецЕсли;
	
	Субконто1ДтКт = Реквизиты.СубконтоДт1 = Реквизиты.СубконтоКт1;
	Субконто2ДтКт = Реквизиты.СубконтоДт2 = Реквизиты.СубконтоКт2;
	Субконто3ДтКт = Реквизиты.СубконтоДт3 = Реквизиты.СубконтоКт3;
	
	СуммаДтКт = Реквизиты.СуммаДтЗадолженности = Реквизиты.СуммаКтЗадолженности;
	
	СчетДтПустой = Реквизиты.СчетДт = Планысчетов.Хозрасчетный.ПустаяСсылка();
	СчетКтПустой = Реквизиты.СчетКт = Планысчетов.Хозрасчетный.ПустаяСсылка();
	
	Если НЕ (Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее
		и ((НЕ СчетаДтКт и Не СчетДтПустой и (НЕ ЕстьСубконтоКонтрагентыПоДт или НЕ ЕстьСубконтоДоговорыКонтрагентовПоДт))
		или (НЕ СчетаДтКт и НЕ СчетКтПустой и (НЕ ЕстьСубконтоКонтрагентыПоКт или НЕ ЕстьСубконтоДоговорыКонтрагентовПоКт))
		или (СчетаДтКт и Субконто1ДтКт и Субконто2ДтКт и Субконто3ДтКт и 
		(НЕ ЕстьСубконтоКонтрагентыПоКт или НЕ ЕстьСубконтоДоговорыКонтрагентовПоКт) и НЕ СуммаДтКт))) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОплаченныеПартии = Параметры.ОплаченныеПартии;
	ОплаченныеПартии.Колонки.ДокументРасчетов.Имя	= "ДокументОтгрузки";
	ОплаченныеПартии.Колонки.СуммаБУ.Имя			= "Выручка";
	ОплаченныеПартии.Свернуть("ДокументОтгрузки", "Выручка");
	
	СписокДокументовОтгрузки	= ОплаченныеПартии.ВыгрузитьКолонку("ДокументОтгрузки");
	
	// Установка управляемой блокировки
	СтруктураПараметров	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПМПЗОтгруженные");
	ОписаниеИсточника	= Новый Структура("ДокументОтгрузки",	"ДокументОтгрузки");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ОплаченныеПартии, ОписаниеИсточника);
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОтгрузки", "ДокументОтгрузки");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",				Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокДокументовОтгрузки",	СписокДокументовОтгрузки);
	Запрос.УстановитьПараметр("ДатаРегистратора",			Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
		|	ИПМПЗОтгруженныеОстатки.ВидМПЗ,
		|	ИПМПЗОтгруженныеОстатки.Номенклатура,
		|	ИПМПЗОтгруженныеОстатки.Партия,
		|	ИПМПЗОтгруженныеОстатки.ДокументОплаты,
		|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
		|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток,
		|	ИПМПЗОтгруженныеОстатки.СуммаОстаток,
		|	ИПМПЗОтгруженныеОстатки.НДСОстаток,
		|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток,
		|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток
		|ПОМЕСТИТЬ ВТИПМПЗОтгруженныеОстатки
		|ИЗ
		|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(
		|			&ДатаРегистратора,
		|			Организация = &Организация
		|				И ДокументОтгрузки В (&СписокДокументовОтгрузки)) КАК ИПМПЗОтгруженныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
		|	ИПМПЗОтгруженныеОстатки.Партия,
		|	ИПМПЗОтгруженныеОстатки.ДокументОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПМПЗОтгруженные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИПМПЗОтгруженные.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ИПМПЗОтгруженные.ВидМПЗ КАК ВидМПЗ,
		|	ИПМПЗОтгруженные.Номенклатура КАК Номенклатура,
		|	ИПМПЗОтгруженные.Партия КАК Партия,
		|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
		|	ИПМПЗОтгруженные.ДокументОплаты КАК ДокументОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
		|	ИПМПЗОтгруженные.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ЕСТЬNULL(РеквизитыДокументовОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОтгрузки,
		|	ИПМПЗОтгруженные.КоличествоОстаток КАК Количество,
		|	ИПМПЗОтгруженные.СуммаОстаток КАК Сумма,
		|	ИПМПЗОтгруженные.НДСОстаток КАК НДС,
		|	ИПМПЗОтгруженные.ВыручкаОстаток КАК Выручка,
		|	ИПМПЗОтгруженные.НДСНачисленныйОстаток КАК НДСНачисленный
		|ИЗ
		|	ВТИПМПЗОтгруженныеОстатки КАК ИПМПЗОтгруженные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
		|		ПО (РеквизитыПартий.Организация = &Организация)
		|			И ИПМПЗОтгруженные.Партия = РеквизитыПартий.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
		|			И ИПМПЗОтгруженные.ДокументОплаты = РеквизитыДокументовОплаты.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОтгрузки
		|		ПО (РеквизитыДокументовОтгрузки.Организация = &Организация)
		|			И ИПМПЗОтгруженные.ДокументОтгрузки = РеквизитыДокументовОтгрузки.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокументаОтгрузки,
		|	ДокументОтгрузки,
		|	ДатаПартии,
		|	Партия,
		|	ДатаДокументаОплаты,
		|	ДокументОплаты
		|ИТОГИ ПО
		|	ДокументОтгрузки";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокОплат = ПолучитьПустуюТаблицуСписокОплатПокупателя();
	
	ОтборПартий = Новый Структура("ДокументОтгрузки");
	
	ОплаченныеПартии.Индексы.Добавить("ДокументОтгрузки");
	
	ВыборкаДокументОтгрузки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументОтгрузки");
	Пока ВыборкаДокументОтгрузки.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПартий, ВыборкаДокументОтгрузки);

		НайденныеПартии = ОплаченныеПартии.НайтиСтроки(ОтборПартий);
		Если НайденныеПартии.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОплаченнаяПартия = НайденныеПартии[0];
		Если ОплаченнаяПартия.Выручка = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		Выборка = ВыборкаДокументОтгрузки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Выручка = Мин(Выборка.Выручка, ОплаченнаяПартия.Выручка);
			Если Выручка <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОплаченнаяПартия.Выручка	= ОплаченнаяПартия.Выручка - Выручка;
			
			НоваяСтрока = СписокОплат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Выручка = Выручка;
			Если Выручка = Выборка.Выручка Тогда
				НоваяСтрока.Количество     = Выборка.Количество;
				НоваяСтрока.Сумма          = Выборка.Сумма;
				НоваяСтрока.НДС            = Выборка.НДС;
				НоваяСтрока.НДСНачисленный = Выборка.НДСНачисленный;
			Иначе
				НоваяСтрока.Количество     = Окр(Выборка.Количество * Выручка / Выборка.Выручка, 3, 1);
				НоваяСтрока.Сумма          = Окр(Выборка.Сумма * Выручка / Выборка.Выручка, 2, 1);
				НоваяСтрока.НДС            = Окр(Выборка.НДС * Выручка / Выборка.Выручка, 2, 1);
				НоваяСтрока.НДСНачисленный = Окр(Выборка.НДСНачисленный * Выручка / Выборка.Выручка, 2, 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокОплат;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСписанияЗадолженностиПредпринимателю(ТаблицаОплаченныеПартии, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ОплаченныеПартии
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"		// <ДокументСсылка> - документ расчетов, задолженность по которому погашается
		+ "СуммаБУ";				// <Число,15,2> - сумма выручки в рублях
		
	Параметры.Вставить("ОплаченныеПартии", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплаченныеПартии, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ВидОперации";			// <ПеречислениеСсылка.ВидыОперацийКорректировкаДолга>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвижениеСписаниеЗадолженностиПредпринимателю(ТаблицаОплат, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОплат)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписаниеЗадолженностиПредпринимателю(ТаблицаОплат, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокОплат	= Параметры.СписокОплат;
	
	Движения.ИПМПЗОтгруженные.Записывать	= Истина;
	
	Для каждого Оплата Из СписокОплат Цикл
		
		Движение	= Движения.ИПМПЗОтгруженные.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, Оплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Количество		=-Движение.Количество;
		Движение.Сумма			=-Движение.Сумма;
		Движение.НДС			=-Движение.НДС;
		Движение.Выручка		=-Движение.Выручка;
		Движение.НДСНачисленный	=-Движение.НДСНачисленный;
		
	КонецЦикла;	
		
КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеЗадолженностиПредпринимателю(ТаблицаОплат, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокОплат
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ>	
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура
		+ "Партия,"						// <ДокументСсылка> - документ поступления
		+ "ДокументОплаты,"				// <ДокументСсылка> - документ оплаты
		+ "ДокументОтгрузки,"			// <ДокументСсылка> - документ отгрузки
		+ "Количество,"					// <Число,15,3>
		+ "Сумма,"						// <Число,15,2>
		+ "НДС,"						// <Число,15,2>
		+ "Выручка,"					// <Число,15,2>
		+ "НДСНачисленный";				// <Число,15,2>
		
	Параметры.Вставить("СписокОплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплат, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПустуюТаблицуСписокОплатПокупателя()

	СписокОплат	= Новый ТаблицаЗначений;
	СписокОплат.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокОплат.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокОплат.Колонки.Добавить("ВидМПЗ",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокОплат.Колонки.Добавить("Номенклатура",			Справочники.ТипВсеСсылки());
	СписокОплат.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	СписокОплат.Колонки.Добавить("ДокументОплаты",			Документы.ТипВсеСсылки());
	СписокОплат.Колонки.Добавить("ДокументОтгрузки",		Документы.ТипВсеСсылки());
	СписокОплат.Колонки.Добавить("Количество",				ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	СписокОплат.Колонки.Добавить("Сумма",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокОплат.Колонки.Добавить("НДС",						ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокОплат.Колонки.Добавить("Выручка",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокОплат.Колонки.Добавить("НДСНачисленный",			ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат СписокОплат;
	
КонецФункции

Функция ПодготовитьТаблицыПоступленияОтПродажПоПлатежнымКартам(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	ТаблицаВзаиморасчеты = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчеты.Колонки.Добавить("Контрагент",            Справочники.ТипВсеСсылки());
	ТаблицаВзаиморасчеты.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчеты.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчеты.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ТаблицаИПМПЗОтгруженные = Движения.ИПМПЗОтгруженные.ВыгрузитьКолонки();
	
	ТаблицаПрочиеРасчеты = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаВзаиморасчеты",    ТаблицаВзаиморасчеты);
	Результат.Вставить("ТаблицаИПМПЗОтгруженные", ТаблицаИПМПЗОтгруженные);
	Результат.Вставить("ТаблицаПрочиеРасчеты",    ТаблицаПрочиеРасчеты);
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаРасшифровкаПлатежа) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Результат;
	КонецЕсли;
	Если НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Возврат Результат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПоступленияОтПродажПоПлатежнымКартам(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	
	РасшифровкаПлатежа = Параметры.РасшифровкаПлатежа;
	РасшифровкаПлатежа.Колонки.СчетРасчетов.Имя = "СчетУчета";
	РасшифровкаПлатежа.Колонки.СуммаРуб.Имя     = "Сумма";
	РасшифровкаПлатежа.Свернуть("Контрагент, ДоговорКонтрагента, СчетУчета", "Сумма"); // Сумма комиссии приходит отдельной строкой
	РасшифровкаПлатежа.Сортировать("Контрагент, ДоговорКонтрагента, СчетУчета", Новый СравнениеЗначений);
	
	Блокировка = Новый БлокировкаДанных;
	
	// Установка управляемой блокировки РегистрНакопления.ИПМПЗОтгруженные
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("Контрагент",         "Контрагент");
	ОписаниеИсточника.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	ОписаниеИсточника.Вставить("СчетУчета",          "СчетУчета");
	ЭлементБлокировки.ИсточникДанных = 
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, РасшифровкаПлатежа, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Запрос.УстановитьПараметр("СписокКонтрагентов",
		ОбщегоНазначения.ВыгрузитьКолонку(РасшифровкаПлатежа, "Контрагент", Истина));
	
	Запрос.УстановитьПараметр("СписокДоговоровКонтрагентов",
		ОбщегоНазначения.ВыгрузитьКолонку(РасшифровкаПлатежа, "ДоговорКонтрагента", Истина));
	
	Запрос.УстановитьПараметр("СписокСчетовУчета",
		ОбщегоНазначения.ВыгрузитьКолонку(РасшифровкаПлатежа, "СчетУчета", Истина));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТ_ПрочиеРасчетыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Контрагент В (&СписокКонтрагентов)
	|				И ДоговорКонтрагента В (&СписокДоговоровКонтрагентов)
	|				И СчетУчета В (&СписокСчетовУчета)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК Сумма,
	|	ЕСТЬNULL(ОплатаПлатежнойКартой.Контрагент, НЕОПРЕДЕЛЕНО) КАК Покупатель,
	|	ЕСТЬNULL(ОплатаПлатежнойКартой.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО) КАК ДоговорПокупателя,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ОплатаПлатежнойКартой.Контрагент КАК Справочник.Склады).ТипСклада, НЕОПРЕДЕЛЕНО) КАК ТипСклада,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОплатаПлатежнойКартой.ВидОперации, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВОзвратПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат
	|ПОМЕСТИТЬ ВТ_ПрочиеРасчетыОбщие
	|ИЗ
	|	ВТ_ПрочиеРасчетыОстатки КАК ПрочиеРасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
	|			И (РеквизитыРасчетныхДокументов.Документ = ПрочиеРасчетыОстатки.РасчетныйДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|		ПО (ОплатаПлатежнойКартой.Организация = &Организация)
	|			И (ОплатаПлатежнойКартой.Ссылка = ПрочиеРасчетыОстатки.РасчетныйДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПрочиеРасчетыОбщие.СчетУчета КАК СчетУчета,
	|	ВТ_ПрочиеРасчетыОбщие.Контрагент КАК Контрагент,
	|	ВТ_ПрочиеРасчетыОбщие.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТ_ПрочиеРасчетыОбщие.ДатаРасчетногоДокумента КАК ДатаРасчетногоДокумента,
	|	ВТ_ПрочиеРасчетыОбщие.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ПрочиеРасчетыОбщие.Сумма КАК Сумма,
	|	ВТ_ПрочиеРасчетыОбщие.Покупатель КАК Покупатель,
	|	ВТ_ПрочиеРасчетыОбщие.ДоговорПокупателя КАК ДоговорПокупателя,
	|	ВТ_ПрочиеРасчетыОбщие.ТипСклада КАК ТипСклада
	|ИЗ
	|	ВТ_ПрочиеРасчетыОбщие КАК ВТ_ПрочиеРасчетыОбщие
	|ГДЕ
	|	ВТ_ПрочиеРасчетыОбщие.ЭтоВозврат = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПрочиеРасчетыОбщие.СчетУчета КАК СчетУчета,
	|	ВТ_ПрочиеРасчетыОбщие.Контрагент КАК Контрагент,
	|	ВТ_ПрочиеРасчетыОбщие.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТ_ПрочиеРасчетыОбщие.ДатаРасчетногоДокумента КАК ДатаРасчетногоДокумента,
	|	ВТ_ПрочиеРасчетыОбщие.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	-ВТ_ПрочиеРасчетыОбщие.Сумма КАК Сумма,
	|	ВТ_ПрочиеРасчетыОбщие.Покупатель КАК Покупатель,
	|	ВТ_ПрочиеРасчетыОбщие.ДоговорПокупателя КАК ДоговорПокупателя,
	|	ВТ_ПрочиеРасчетыОбщие.ТипСклада КАК ТипСклада
	|ИЗ
	|	ВТ_ПрочиеРасчетыОбщие КАК ВТ_ПрочиеРасчетыОбщие
	|ГДЕ
	|	ВТ_ПрочиеРасчетыОбщие.ЭтоВозврат = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ИПМПЗОтгруженныеОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ИПМПЗОтгруженныеОстатки.НДСОстаток КАК НДСОстаток,
	|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток КАК ВыручкаОстаток,
	|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток КАК НДСНачисленныйОстаток
	|ПОМЕСТИТЬ ВТМПЗОтгруженныеОстатки
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ДокументОтгрузки В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ПрочиеРасчетыОстатки.РасчетныйДокумент КАК ДокументОтгрузки
	|					ИЗ
	|						ВТ_ПрочиеРасчетыОстатки КАК ВТ_ПрочиеРасчетыОстатки)) КАК ИПМПЗОтгруженныеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ЕСТЬNULL(РеквизитыДокументовОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток КАК Количество,
	|	ИПМПЗОтгруженныеОстатки.СуммаОстаток КАК Сумма,
	|	ИПМПЗОтгруженныеОстатки.НДСОстаток КАК НДС,
	|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток КАК Выручка,
	|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток КАК НДСНачисленный
	|ИЗ
	|	ВТМПЗОтгруженныеОстатки КАК ИПМПЗОтгруженныеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОтгрузки
	|		ПО (РеквизитыДокументовОтгрузки.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.ДокументОтгрузки = РеквизитыДокументовОтгрузки.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	Результаты = Запрос.ВыполнитьПакет();
	ОстаткиПрочихРасчетов = Результаты[2].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ОстаткиПрочихРасчетов, "НомерСтроки");
	ОстаткиПрочихРасчетов.Индексы.Добавить("НомерСтроки");
	ОстаткиПрочихРасчетов.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета");
	ОтборПрочихРасчетов = Новый Структура("Контрагент, ДоговорКонтрагента, СчетУчета");
	
	ВозвратыПрочихРасчетов = Результаты[3].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ВозвратыПрочихРасчетов, "НомерСтроки");
	ВозвратыПрочихРасчетов.Индексы.Добавить("НомерСтроки");
	ВозвратыПрочихРасчетов.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета");
	
	ОстаткиОтгруженныхМПЗ = Результаты[5].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ОстаткиОтгруженныхМПЗ, "НомерСтроки");
	ОстаткиОтгруженныхМПЗ.Индексы.Добавить("НомерСтроки");
	ОстаткиОтгруженныхМПЗ.Индексы.Добавить("ДокументОтгрузки");
	ОтборОтгруженныхМПЗ = Новый Структура("ДокументОтгрузки");
	
	// Зачет возвратов в счет реализаций
	Для Каждого СтрокаВозврата Из ВозвратыПрочихРасчетов Цикл
		ЗаполнитьЗначенияСвойств(ОтборПрочихРасчетов, СтрокаВозврата);
		НайденныеОплаты = ОстаткиПрочихРасчетов.НайтиСтроки(ОтборПрочихРасчетов);
		Для Каждого СтрокаОплаты Из НайденныеОплаты Цикл
			
			// Если зачли весь возврат, то выходим из цикла.
			Если СтрокаВозврата.Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
			// Если зачли эту оплату, то переходим к следующей.
			// Удаление зачтенных оплат выполняется в конце процедуры.
			Если СтрокаОплаты.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаЗачета = Мин(СтрокаВозврата.Сумма, СтрокаОплаты.Сумма);
			СтрокаОплаты.Сумма   = СтрокаОплаты.Сумма - СуммаЗачета;
			СтрокаВозврата.Сумма = СтрокаВозврата.Сумма - СуммаЗачета;
			
			// Добавим записи в таблицу прочих расчетов для формирования движений по зачету возврата.
			// 1. Списываем возврат из прочих расчетов
			НоваяСтрока = ТаблицаПрочиеРасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Сумма       = СуммаЗачета;
			
			// 2. Зачитываем сумму возврата в прочих расчетах
			НоваяСтрока = ТаблицаПрочиеРасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Сумма       = СуммаЗачета;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удалим реализации, которые были зачтены возвратами.
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПрочихРасчетов Из ОстаткиПрочихРасчетов Цикл
		Если СтрокаПрочихРасчетов.Сумма = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаПрочихРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЭлементов = СтрокиКУдалению.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		ОстаткиПрочихРасчетов.Удалить(СтрокиКУдалению[КоличествоЭлементов - Индекс]);
	КонецЦикла;
	СтрокиКУдалению = Неопределено;
	
	РасшифровкаПлатежа.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета");
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПрочихРасчетов, Платеж);
		НайденныеПрочиеРасчеты = ОстаткиПрочихРасчетов.Скопировать(ОтборПрочихРасчетов);
		НайденныеПрочиеРасчеты.Сортировать("ДатаРасчетногоДокумента, РасчетныйДокумент", Новый СравнениеЗначений);
		
		Для Каждого ПрочиеРасчеты Из НайденныеПрочиеРасчеты Цикл
			
			СуммаОплаты = Мин(Платеж.Сумма, ПрочиеРасчеты.Сумма);
			Если СуммаОплаты = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ПрочиеРасчеты.РасчетныйДокумент) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
				
				// Если документ оплаты "Оплата платежной картой", значит реализации по этому документу не было
				// а значит по этому объекту не должно возникать доходов ИП
				// но т.к. мы когда-нибудь закроем этот аванс отгрузкой, то в регистр прочих расчетов
				// нужно записать поступление на р/с
				
				НоваяСтрока = ТаблицаПрочиеРасчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПрочиеРасчеты);
				НоваяСтрока.Сумма       = СуммаОплаты;
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				Если (ПрочиеРасчеты.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
					Или СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
					
					НоваяСтрока = ТаблицаПрочиеРасчеты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
					
					НоваяСтрока.Контрагент         = ПрочиеРасчеты.Покупатель;
					НоваяСтрока.ДоговорКонтрагента = ПрочиеРасчеты.ДоговорПокупателя;
					НоваяСтрока.СчетУчета          = ПрочиеРасчеты.СчетУчета;
					НоваяСтрока.РасчетныйДокумент  = Реквизиты.Регистратор;
					НоваяСтрока.ВидДвижения        = ВидДвиженияНакопления.Приход;
					НоваяСтрока.Сумма              = СуммаОплаты;
					
				КонецЕсли;
				
				ПрочиеРасчеты.Сумма = ПрочиеРасчеты.Сумма - СуммаОплаты;
				ЗаполнитьЗначенияСвойств(ОстаткиПрочихРасчетов.Найти(ПрочиеРасчеты.НомерСтроки, "НомерСтроки"), ПрочиеРасчеты, "Сумма");
				Платеж.Сумма = Платеж.Сумма - СуммаОплаты;
				
			Иначе
				
				ОтборОтгруженныхМПЗ.ДокументОтгрузки = ПрочиеРасчеты.РасчетныйДокумент;
				НайденныеОтгруженныеМПЗ = ОстаткиОтгруженныхМПЗ.Скопировать(ОтборОтгруженныхМПЗ);
				НайденныеОтгруженныеМПЗ.Сортировать("ДатаДокументаОплаты, ДокументОплаты, ДатаПартии, Партия, Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ", Новый СравнениеЗначений);
				
				СуммаОплаченныхМПЗ = Мин(СуммаОплаты, НайденныеОтгруженныеМПЗ.Итог("Выручка"));
				Если СуммаОплаченныхМПЗ = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаПрочиеРасчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПрочиеРасчеты);
				НоваяСтрока.Сумма       = СуммаОплаченныхМПЗ;
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				
				НоваяСтрока = ТаблицаВзаиморасчеты.Добавить();
				НоваяСтрока.Контрагент            = ПрочиеРасчеты.Контрагент;
				НоваяСтрока.ДокументРасчетов      = Реквизиты.Регистратор;
				НоваяСтрока.ДатаДокументаРасчетов = Реквизиты.Период;
				НоваяСтрока.СуммаРуб              = СуммаОплаченныхМПЗ;
				
				ПрочиеРасчеты.Сумма = ПрочиеРасчеты.Сумма - СуммаОплаченныхМПЗ;
				ЗаполнитьЗначенияСвойств(ОстаткиПрочихРасчетов.Найти(ПрочиеРасчеты.НомерСтроки, "НомерСтроки"), ПрочиеРасчеты, "Сумма");
				Платеж.Сумма = Платеж.Сумма - СуммаОплаченныхМПЗ;
				
				Для Каждого ОтгруженныеМПЗ Из НайденныеОтгруженныеМПЗ Цикл
					
					Если ОтгруженныеМПЗ.Выручка = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если СуммаОплаченныхМПЗ >= ОтгруженныеМПЗ.Выручка Тогда
						
						Количество     = ОтгруженныеМПЗ.Количество;
						Сумма          = ОтгруженныеМПЗ.Сумма;
						НДС            = ОтгруженныеМПЗ.НДС;
						Выручка        = ОтгруженныеМПЗ.Выручка;
						НДСНачисленный = ОтгруженныеМПЗ.НДСНачисленный;
						
					Иначе
						
						Коэффициент = СуммаОплаченныхМПЗ/ОтгруженныеМПЗ.Выручка;
						
						Количество     = Окр(ОтгруженныеМПЗ.Количество * Коэффициент, 3, 1);
						Сумма          = Окр(ОтгруженныеМПЗ.Сумма * Коэффициент, 2, 1);
						НДС            = Окр((ОтгруженныеМПЗ.Сумма + ОтгруженныеМПЗ.НДС ) * Коэффициент, 2, 1) - Сумма;
						Выручка        = СуммаОплаченныхМПЗ;
						НДСНачисленный = Выручка - Окр((ОтгруженныеМПЗ.Выручка - ОтгруженныеМПЗ.НДСНачисленный) * Коэффициент, 2, 1);
						
					КонецЕсли;
					
					НоваяСтрока = ТаблицаИПМПЗОтгруженные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтгруженныеМПЗ);
					НоваяСтрока.Количество     = Количество;
					НоваяСтрока.Сумма          = Сумма;
					НоваяСтрока.НДС            = НДС;
					НоваяСтрока.Выручка        = Выручка;
					НоваяСтрока.НДСНачисленный = НДСНачисленный;
					
					СуммаОплаченныхМПЗ = СуммаОплаченныхМПЗ - Выручка;
					
					ОтгруженныеМПЗ.Количество     = ОтгруженныеМПЗ.Количество - Количество;
					ОтгруженныеМПЗ.Сумма          = ОтгруженныеМПЗ.Сумма - Сумма;
					ОтгруженныеМПЗ.НДС            = ОтгруженныеМПЗ.НДС - НДС;
					ОтгруженныеМПЗ.Выручка        = ОтгруженныеМПЗ.Выручка - Выручка;
					ОтгруженныеМПЗ.НДСНачисленный = ОтгруженныеМПЗ.НДСНачисленный - НДСНачисленный;
					
					ЗаполнитьЗначенияСвойств(ОстаткиОтгруженныхМПЗ.Найти(ОтгруженныеМПЗ.НомерСтроки, "НомерСтроки"), ОтгруженныеМПЗ, "Количество, Сумма, НДС, Выручка, НДСНачисленный");
					
					Если СуммаОплаченныхМПЗ = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Платеж.Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Вставить("ТаблицаВзаиморасчеты",    ТаблицаВзаиморасчеты);
	Результат.Вставить("ТаблицаИПМПЗОтгруженные", ТаблицаИПМПЗОтгруженные);
	Результат.Вставить("ТаблицаПрочиеРасчеты",    ТаблицаПрочиеРасчеты);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыПоступленияОтПродажПоПлатежнымКартам(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РасшифровкаПлатежа
	
	СписокОбязательныхКолонок = ""
		+ "Контрагент,"				// <СправочникСсылка.Контрагенты> - контрагент
		+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> - договор
		+ "СчетРасчетов,"			// <ПланСчетовСсылка.Хозрасчетный> - счет расчетов с банком
		+ "СуммаРуб";				// <Число, 15, 2> - сумма оплаты в рублях
		
	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасшифровкаПлатежа, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации> - организация
		+ "ВидОперации";			// <ПеречислениеСсылка.ВидОперации> - вид опеации
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияПрочиеРасчетыОтПродажПоПлатежнымКартамИБанковскимКредитам(ТаблицаПрочихРасчетов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПрочихРасчетов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	 
	Параметры = ПодготовитьПараметрыПрочиеРасчетыОтПродажПоПлатежнымКартамИБанковскимКредитам(ТаблицаПрочихРасчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокПрочихРасчетов = Параметры.СписокПрочихРасчетов;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		ИЛИ Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		
		Если СписокПрочихРасчетов.Количество() > 0 Тогда
			Движения.ПрочиеРасчеты.Записывать = Истина;
		КонецЕсли;
		
		Для Каждого Оплата Из СписокПрочихРасчетов Цикл
			
			Движение = Движения.ПрочиеРасчеты.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Движение, Оплата);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
		КонецЦикла;
		
	ИначеЕсли Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		
		Если СписокПрочихРасчетов.Количество() > 0 Тогда
			Движения.ПрочиеРасчеты.Записывать = Истина;
		КонецЕсли;
		
		Для Каждого Оплата Из СписокПрочихРасчетов Цикл
			
			Движение = Движения.ПрочиеРасчеты.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, Оплата);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПрочиеРасчетыОтПродажПоПлатежнымКартамИБанковскимКредитам(ТаблицаПрочихРасчетов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокПрочихРасчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
		+ "Контрагент,"			// <СправочникСсылка.Контрагенты> - контрагент
		+ "ДоговорКонтрагента,"	// <СправочникСсылка.ДоговорыКонтрагентов> - договор контрагента
		+ "РасчетныйДокумент,"	// <ДокументСсылка.*> - расчетный документ
		+ "Сумма";				// <Число, 15, 2> - сума оплаты в рублях
		
	Параметры.Вставить("СписокПрочихРасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПрочихРасчетов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"		// <СправочникСсылка.Организации> - организация
		+ "ВидОперации";		// <ПеречислениеСсылка.*> - вид операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьТаблицыПоступленияОтФакторинговойКомпании(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	ТаблицаВзаиморасчеты = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчеты.Колонки.Добавить("Контрагент",            Справочники.ТипВсеСсылки());
	ТаблицаВзаиморасчеты.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчеты.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчеты.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ТаблицаИПМПЗОтгруженные = Движения.ИПМПЗОтгруженные.ВыгрузитьКолонки();
	
	ТаблицаПрочиеРасчеты = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаВзаиморасчеты",    ТаблицаВзаиморасчеты);
	Результат.Вставить("ТаблицаИПМПЗОтгруженные", ТаблицаИПМПЗОтгруженные);
	Результат.Вставить("ТаблицаПрочиеРасчеты",    ТаблицаПрочиеРасчеты);
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаРасшифровкаПлатежа) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
	   И Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга Тогда
		Возврат Результат;
	КонецЕсли;
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПоступленияОтПродажПоПлатежнымКартам(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	РасшифровкаПлатежа = Параметры.РасшифровкаПлатежа;
	РасшифровкаПлатежа.Колонки.СчетРасчетов.Имя = "СчетУчета";
	РасшифровкаПлатежа.Колонки.СуммаРуб.Имя     = "Сумма";
	
	Блокировка = Новый БлокировкаДанных;
	
	// Установка управляемой блокировки РегистрНакопления.ИПМПЗОтгруженные
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗОтгруженные");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("Контрагент",         "Контрагент");
	ОписаниеИсточника.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	ОписаниеИсточника.Вставить("СчетУчета",          "СчетУчета");
	ЭлементБлокировки.ИсточникДанных = 
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, РасшифровкаПлатежа, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Запрос.УстановитьПараметр("СписокКонтрагентов",
		ОбщегоНазначения.ВыгрузитьКолонку(РасшифровкаПлатежа, "Контрагент", Истина));
	
	Запрос.УстановитьПараметр("СписокДоговоровКонтрагентов",
		ОбщегоНазначения.ВыгрузитьКолонку(РасшифровкаПлатежа, "ДоговорКонтрагента", Истина));
	
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.РасчетыСФакторинговымиКомпаниями);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТ_ПрочиеРасчетыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Контрагент В (&СписокКонтрагентов)
	|				И ДоговорКонтрагента В (&СписокДоговоровКонтрагентов)
	|				И СчетУчета = &СчетУчета) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	ВТ_ПрочиеРасчетыОстатки КАК ПрочиеРасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
	|			И (РеквизитыРасчетныхДокументов.Документ = ПрочиеРасчетыОстатки.РасчетныйДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ИПМПЗОтгруженныеОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ИПМПЗОтгруженныеОстатки.НДСОстаток КАК НДСОстаток,
	|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток КАК ВыручкаОстаток,
	|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток КАК НДСНачисленныйОстаток
	|ПОМЕСТИТЬ ВТМПЗОтгруженныеОстатки
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ДокументОтгрузки В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ПрочиеРасчетыОстатки.РасчетныйДокумент КАК ДокументОтгрузки
	|					ИЗ
	|						ВТ_ПрочиеРасчетыОстатки КАК ВТ_ПрочиеРасчетыОстатки)) КАК ИПМПЗОтгруженныеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОтгруженныеОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОтгруженныеОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОтгруженныеОстатки.Партия КАК Партия,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
	|	ИПМПЗОтгруженныеОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ЕСТЬNULL(РеквизитыДокументовОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОтгрузки,
	|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток КАК Количество,
	|	ИПМПЗОтгруженныеОстатки.СуммаОстаток КАК Сумма,
	|	ИПМПЗОтгруженныеОстатки.НДСОстаток КАК НДС,
	|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток КАК Выручка,
	|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток КАК НДСНачисленный
	|ИЗ
	|	ВТМПЗОтгруженныеОстатки КАК ИПМПЗОтгруженныеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОтгрузки
	|		ПО (РеквизитыДокументовОтгрузки.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.ДокументОтгрузки = РеквизитыДокументовОтгрузки.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПМПЗОтгруженныеОстатки.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	Результаты = Запрос.ВыполнитьПакет();
	ОстаткиПрочихРасчетов = Результаты[1].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ОстаткиПрочихРасчетов, "НомерСтроки");
	ОстаткиПрочихРасчетов.Индексы.Добавить("НомерСтроки");
	ОстаткиПрочихРасчетов.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета");
	ОтборПрочихРасчетов = Новый Структура("Контрагент, ДоговорКонтрагента, СчетУчета");
	
	ОстаткиОтгруженныхМПЗ = Результаты[3].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ОстаткиОтгруженныхМПЗ, "НомерСтроки");
	ОстаткиОтгруженныхМПЗ.Индексы.Добавить("НомерСтроки");
	ОстаткиОтгруженныхМПЗ.Индексы.Добавить("ДокументОтгрузки");
	ОтборОтгруженныхМПЗ = Новый Структура("ДокументОтгрузки");
	
	РасшифровкаПлатежа.Индексы.Добавить("Контрагент, ДоговорКонтрагента, СчетУчета");
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПрочихРасчетов, Платеж);
		НайденныеПрочиеРасчеты = ОстаткиПрочихРасчетов.Скопировать(ОтборПрочихРасчетов);
		НайденныеПрочиеРасчеты.Сортировать("ДатаРасчетногоДокумента, РасчетныйДокумент", Новый СравнениеЗначений);
		
		Для Каждого ПрочиеРасчеты Из НайденныеПрочиеРасчеты Цикл
			
			СуммаОплаты = Мин(Платеж.Сумма, ПрочиеРасчеты.Сумма);
			Если СуммаОплаты = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборОтгруженныхМПЗ.ДокументОтгрузки = ПрочиеРасчеты.РасчетныйДокумент;
			НайденныеОтгруженныеМПЗ = ОстаткиОтгруженныхМПЗ.Скопировать(ОтборОтгруженныхМПЗ);
			НайденныеОтгруженныеМПЗ.Сортировать("ДатаДокументаОплаты, ДокументОплаты, ДатаПартии, Партия, Номенклатура, НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ", Новый СравнениеЗначений);
			
			СуммаОплаченныхМПЗ = Мин(СуммаОплаты, НайденныеОтгруженныеМПЗ.Итог("Выручка"));
			Если СуммаОплаченныхМПЗ = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрочиеРасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПрочиеРасчеты);
			НоваяСтрока.Сумма       = СуммаОплаченныхМПЗ;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			НоваяСтрока = ТаблицаВзаиморасчеты.Добавить();
			НоваяСтрока.Контрагент            = ПрочиеРасчеты.Контрагент;
			НоваяСтрока.ДокументРасчетов      = Реквизиты.Регистратор;
			НоваяСтрока.ДатаДокументаРасчетов = Реквизиты.Период;
			НоваяСтрока.СуммаРуб              = СуммаОплаченныхМПЗ;
			
			ПрочиеРасчеты.Сумма = ПрочиеРасчеты.Сумма - СуммаОплаченныхМПЗ;
			ЗаполнитьЗначенияСвойств(ОстаткиПрочихРасчетов.Найти(ПрочиеРасчеты.НомерСтроки, "НомерСтроки"), ПрочиеРасчеты, "Сумма");
			
			Для Каждого ОтгруженныеМПЗ Из НайденныеОтгруженныеМПЗ Цикл
				
				Если ОтгруженныеМПЗ.Выручка = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СуммаОплаченныхМПЗ >= ОтгруженныеМПЗ.Выручка Тогда
					
					Количество     = ОтгруженныеМПЗ.Количество;
					Сумма          = ОтгруженныеМПЗ.Сумма;
					НДС            = ОтгруженныеМПЗ.НДС;
					Выручка        = ОтгруженныеМПЗ.Выручка;
					НДСНачисленный = ОтгруженныеМПЗ.НДСНачисленный;
					
				Иначе
					
					Коэффициент = СуммаОплаченныхМПЗ/ОтгруженныеМПЗ.Выручка;
					
					Количество     = Окр(ОтгруженныеМПЗ.Количество * Коэффициент, 3, 1);
					Сумма          = Окр(ОтгруженныеМПЗ.Сумма * Коэффициент, 2, 1);
					НДС            = Окр((ОтгруженныеМПЗ.Сумма + ОтгруженныеМПЗ.НДС ) * Коэффициент, 2, 1) - Сумма;
					Выручка        = СуммаОплаченныхМПЗ;
					НДСНачисленный = Выручка - Окр((ОтгруженныеМПЗ.Выручка - ОтгруженныеМПЗ.НДСНачисленный) * Коэффициент, 2, 1);
					
				КонецЕсли;
				
				НоваяСтрока = ТаблицаИПМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтгруженныеМПЗ);
				НоваяСтрока.Количество     = Количество;
				НоваяСтрока.Сумма          = Сумма;
				НоваяСтрока.НДС            = НДС;
				НоваяСтрока.Выручка        = Выручка;
				НоваяСтрока.НДСНачисленный = НДСНачисленный;
				
				СуммаОплаченныхМПЗ = СуммаОплаченныхМПЗ - Выручка;
				
				ОтгруженныеМПЗ.Количество     = ОтгруженныеМПЗ.Количество - Количество;
				ОтгруженныеМПЗ.Сумма          = ОтгруженныеМПЗ.Сумма - Сумма;
				ОтгруженныеМПЗ.НДС            = ОтгруженныеМПЗ.НДС - НДС;
				ОтгруженныеМПЗ.Выручка        = ОтгруженныеМПЗ.Выручка - Выручка;
				ОтгруженныеМПЗ.НДСНачисленный = ОтгруженныеМПЗ.НДСНачисленный - НДСНачисленный;
				
				ЗаполнитьЗначенияСвойств(ОстаткиОтгруженныхМПЗ.Найти(ОтгруженныеМПЗ.НомерСтроки, "НомерСтроки"), ОтгруженныеМПЗ, "Количество, Сумма, НДС, Выручка, НДСНачисленный");
				
				Если СуммаОплаченныхМПЗ = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Результат.ТаблицаВзаиморасчеты    = ТаблицаВзаиморасчеты;
	Результат.ТаблицаИПМПЗОтгруженные = ТаблицаИПМПЗОтгруженные;
	Результат.ТаблицаПрочиеРасчеты    = ТаблицаПрочиеРасчеты;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыручкаНТТ

Процедура СформироватьДвиженияВыручкаНТТ(ТаблицаВыручки, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыручки)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	СуммаВыручки = ТаблицаВыручки.Итог("СуммаРуб");
	Если СуммаВыручки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкаНТТ(ТаблицаВыручки, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокВыручки = Параметры.СписокВыручки;
	
	Движения.ПрочиеРасчеты.Записывать = Истина;

	Движение = Движения.ПрочиеРасчеты.ДобавитьПриход();
	ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	
	Движение.РасчетныйДокумент = Реквизиты.Регистратор;
	Движение.Сумма             = СуммаВыручки;

КонецПроцедуры

Функция ПодготовитьПараметрыВыручкаНТТ(ТаблицаВыручки, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВыручки
	
	СписокОбязательныхКолонок = ""
		+ "НомерСтроки,"		// <Число> - номер строки документа
		+ "СуммаРуб";			// <Число,15,2> - сумма выручки в рублях
		
	Параметры.Вставить("СписокВыручки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыручки, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"		// <СправочникСсылка.Организации> - организация
		+ "Контрагент";			// <СправочникСсылка.*> - контрагент расчетов
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область Комиссия

Функция ПодготовитьТаблицуКомиссионногоВознаграждения(ТаблицаВознаграждение, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВознаграждение)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	 
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыКомиссионногоВознаграждения(ТаблицаВознаграждение, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокВознаграждений = Параметры.СписокВознаграждений;
	СписокВознаграждений.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокВознаграждений.Колонки.Добавить("ДокументОплаты",			Документы.ТипВсеСсылки());
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат, СчетДоходов");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
	
	Для каждого Вознаграждение из СписокВознаграждений Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Вознаграждение);
		
		Вознаграждение.НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		Вознаграждение.ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		Вознаграждение.ДокументОплаты		= Реквизиты.Регистратор;
		
	КонецЦикла;
	
	Возврат СписокВознаграждений;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыКомиссионногоВознаграждения(ТаблицаВознаграждение, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВознаграждений
	
	СписокОбязательныхКолонок = ""  
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы>
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета
		+ "СчетДоходов,"							// <ПланСчетовСсылка.Хозрасчетный> - счет учета доходов
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "Партия,"									// <ДокументСсылка.*>
		+ "Количество,"				// <Число,15,3> 
		+ "Сумма,"					// <Число,15,2> - сумма вознаграждения
		+ "НДС";					// <Число,15,2> - сумма НДС
		
	Параметры.Вставить("СписокВознаграждений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВознаграждение, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ВидОперации";			// <ПеречислениеСсылка.*> - вид операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияУдержатьКомиссионноеВознаграждение(ТаблицаВознаграждение, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВознаграждение)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыУдержатьКомиссионноеВознаграждение(ТаблицаВознаграждение, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокВознаграждений = Параметры.СписокВознаграждений;
	
	Движения.ИПИныеМатериальныеРасходы.Записывать	= Истина;
	
	Для каждого Вознаграждение из СписокВознаграждений Цикл

		Если Вознаграждение.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, Вознаграждение);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Вознаграждение);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыУдержатьКомиссионноеВознаграждение(ТаблицаВознаграждение, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВознаграждений
	
	СписокОбязательныхКолонок = ""
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "СтатьяЗатрат,"				// <СправочникСсылка.*> - статья затрат ИМР
		+ "Партия,"						// <ДокументСсылка.*>
		+ "ДокументОплаты,"				// <ДокументСсылка.*>
		+ "Количество,"					// <Число,15,3> - количество
		+ "Сумма,"						// <Число,15,2> - сума комиссионного вознаграждения в рублях без НДС
		+ "НДС";						// <Число,15,2> - сумма НДС в рублях
		
	Параметры.Вставить("СписокВознаграждений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВознаграждение, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;		

КонецФункции

Функция ПодготовитьТаблицуОтчетаКомитентуОПродажах(ТаблицаСобственныеУслуги, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаСобственныеУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыОтчетаКомитентуОПродажах(ТаблицаСобственныеУслуги, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокУслуг = Параметры.СписокУслуг;
	СписокУслуг.Свернуть("Номенклатура", "Количество, СуммаБУ, СуммаРуб, СуммаНДСРуб");
	
	СписокУслуг.Колонки.Добавить("ВидМПЗ", 					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокУслуг.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокУслуг.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	
	СтруктураПараметров	= Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, СчетДоходов");
	
	ВидМПЗ	= Перечисления.ВидыМПЗ.Продукция;
	
	СтруктураПараметров.НоменклатурнаяГруппа	= Реквизиты.Субконто;
	СтруктураПараметров.ВидМПЗ					= ВидМПЗ;
	СтруктураПараметров.СчетУчета				= Реквизиты.СчетДоходов;
	СтруктураПараметров.СчетДоходов				= Реквизиты.СчетДоходов;
	
	НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
	ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
	
	СписокУслуг.ЗаполнитьЗначения(ВидМПЗ,				"ВидМПЗ");
	СписокУслуг.ЗаполнитьЗначения(НоменклатурнаяГруппа,	"НоменклатурнаяГруппа");
	СписокУслуг.ЗаполнитьЗначения(ХарактерДеятельности,	"ХарактерДеятельности");
	
	Возврат СписокУслуг;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыОтчетаКомитентуОПродажах(ТаблицаСобственныеУслуги, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокУслуг
	
	СписокОбязательныхКолонок = ""
		+ "Номенклатура,"	// <СправочникСсылка.*> - номенклатура услуги
		+ "Количество,"		// <Число,15,3> - количество
		+ "СуммаБУ,"		// <Число,15,2> - сума выручки БУ
		+ "СуммаРуб,"		// <Число,15,2> - сума с НДС
		+ "СуммаНДСРуб";	// <Число,15,2> - НДС
		
	Параметры.Вставить("СписокУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСобственныеУслуги, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"	// <СправочникСсылка.Организации> - организация
		+ "СчетДоходов,"	// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
		+ "Субконто";		// <Характеристика.ВидыСубконтоХозрасчетные> - субконто счета доходов
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Функция возвращает Таблицу выполненных движений по регистру "ИПМПЗОтгруженные"
//
Функция СформироватьДвиженияОтчетКомитентуОПродажах(ТаблицаСобственныеУслуги, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	Перем ТаблицаИПМПЗОтгруженные;
	
	Если Движения.Найти("ИПМПЗОтгруженные") <> Неопределено Тогда
		// Таблица для сохранения результатов проведения по регистру ИПМПЗОтгруженные
		ТаблицаИПМПЗОтгруженные	= Движения.ИПМПЗОтгруженные.ВыгрузитьКолонки();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаСобственныеУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Если ТаблицаСобственныеУслуги.Итог("СуммаБУ") = 0 Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтчетКомитентуОПродажах(ТаблицаСобственныеУслуги, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокУслуг	= Параметры.СписокУслуг;	
	
	СписокУслуг.Колонки.СуммаРуб.Имя	= "Выручка";
	СписокУслуг.Колонки.СуммаНДСРуб.Имя	= "НДСНачисленный";
	
	СписокУслуг.Колонки.Добавить("ДокументОтгрузки",	Документы.ТипВсеСсылки());
	СписокУслуг.ЗаполнитьЗначения(Реквизиты.Регистратор, "ДокументОтгрузки");
	
	Движения.ИПМПЗОтгруженные.Записывать	= Истина;
	
	Для каждого Услуга Из СписокУслуг Цикл
		
		// Отражение оказанной услуги.
		Движение = Движения.ИПМПЗОтгруженные.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, Услуга);
		
		НоваяСтрока	= ТаблицаИПМПЗОтгруженные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
		
	КонецЦикла;
	
	Возврат ТаблицаИПМПЗОтгруженные;
	
КонецФункции

Функция ПодготовитьПараметрыОтчетКомитентуОПродажах(ТаблицаСобственныеУслуги, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокУслуг
	
	СписокОбязательныхКолонок = ""
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерДеятельности> - характер деятельности
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.*> - номенклатура услуги
		+ "Количество,"				// <Число,15,3> - количество
		+ "СуммаБУ,"				// <Число,15,2> - сума выручки БУ
		+ "СуммаРуб,"				// <Число,15,2> - сума выручки без НДС
		+ "СуммаНДСРуб";			// <Число,15,2> - НДС
		
	Параметры.Вставить("СписокУслуг", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСобственныеУслуги, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПоступлениеОсновныхСредств

Функция ПодготовитьТаблицуПоступленияОС(ТаблицаОС, ТаблицаВзаиморасчетов, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства
		И НЕ Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПоступленияОС(ТаблицаОС, ТаблицаВзаиморасчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаОС = Параметры.ТаблицаОС.СкопироватьКолонки();
	ТаблицаОС.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	
	Для каждого ОС из Параметры.ТаблицаОС Цикл
		
		Если НЕ ЗначениеЗаполнено(ОС.ВидМПЗ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОС.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОС.Партия = Реквизиты.Регистратор;
		
		// Зачет авансов поставщику
		Для Каждого ДокументОплаты Из Параметры.Взаиморасчеты Цикл
			
			Если ДокументОплаты.СуммаРуб = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
				Продолжить;
			КонецЕсли;
			
			ОплаченнаяСумма = Мин(ОС.Сумма, ДокументОплаты.СуммаРуб);
			
			Если ОС.Сумма = ОплаченнаяСумма Тогда
				ОплаченноеКоличество = ОС.Количество;
				ОплаченныйНДС        = ОС.НДС;
			Иначе
				КоэффициентОплаты = ОплаченнаяСумма / ОС.Сумма;
				ОплаченноеКоличество = ОС.Количество * КоэффициентОплаты;
				ОплаченныйНДС        = ОплаченнаяСумма - Окр((ОС.Сумма - ОС.НДС) * КоэффициентОплаты, 2, 1);
			КонецЕсли;
			
			СтрокаОС = ТаблицаОС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОС, ОС);
			СтрокаОС.ДокументОплаты = ДокументОплаты.ДокументРасчетов;
			
			СтрокаОС.Количество = ОплаченноеКоличество;
			Если Реквизиты.НДСВключенВСтоимость Тогда
				СтрокаОС.Сумма = ОплаченнаяСумма;
				СтрокаОС.НДС   = 0;
			Иначе
				СтрокаОС.Сумма = ОплаченнаяСумма - ОплаченныйНДС;
				СтрокаОС.НДС   = ОплаченныйНДС;
			КонецЕсли;
			
			ОС.Количество = ОС.Количество - ОплаченноеКоличество;
			ОС.Сумма      = ОС.Сумма - ОплаченнаяСумма;
			ОС.НДС        = ОС.НДС - ОплаченныйНДС;
			
			ДокументОплаты.СуммаРуб = ДокументОплаты.СуммаРуб - ОплаченнаяСумма;
			
			Если ОС.Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Поступление неоплаченных ОС
		Если ОС.Сумма = 0 И ОС.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОС = ТаблицаОС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОС, ОС);
		
		СтрокаОС.Количество = ОС.Количество;
		Если Реквизиты.НДСВключенВСтоимость Тогда
			СтрокаОС.Сумма = ОС.Сумма;
			СтрокаОС.НДС   = 0;
		Иначе
			СтрокаОС.Сумма = ОС.Сумма - ОС.НДС;
			СтрокаОС.НДС   = ОС.НДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОС;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыПоступленияОС(ТаблицаОС, ТаблицаВзаиморасчетов, ТаблицаРеквизитов)
	
	Параметры	= Новый Структура;
	
	// Подготовка таблиц Параметры.ТаблицаТоваров, Параметры.ТаблицаУслуг, Параметры.ТаблицаОборудования
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"						// <ДокументСсылка.*> -документ оприходования
		+ "Сумма,"						// <Число,15,2> - сумма в рублях с НДС
		+ "НДС,"						// <Число,15,2> - сумма НДС в рублях
		+ "Количество";					// <Число,15,3> - количество
		
	Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Взаиморасчеты
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасчетов,"			// <ДокументСсылка.*> - документ оплаты
		+ "СуммаРуб";					// <Число,15,2> - сумма оплаты в рублях с НДС
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"				// <СправочникСсылка.Организации>
		+ "ВидОперации,"				// <ПеречислениеСсылка.*> - вид операции
		+ "НДСВключенВСтоимость";		// <Булево>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияПоступлениеОС(ТаблицаОС, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеОС(ТаблицаОС, ТаблицаРеквизитов);	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого ОС Из Параметры.ТаблицаОС Цикл
	
		Движение = Движения.ИПМПЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ОС);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	
	КонецЦикла;
	
	Движения.ИПМПЗ.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОС(ТаблицаОС, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.*> - номенклатура МПЗ
		+ "Партия,"						// <ДокументСсылка.*> -документ оприходования
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"						// <Число,15,2> - сумма в рублях с НДС
		+ "НДС,"						// <Число,15,2> - сумма НДС в рублях
		+ "Количество";					// <Число,15,3> - количество
		
	Параметры.Вставить("ТаблицаОС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ПринятиеКУчетуОС

Функция ПодготовитьТаблицуПринятияКУчетуОС(ТаблицаМПЗ, ТаблицаСтоимость, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПринятияКУчетуОС(ТаблицаМПЗ, ТаблицаСтоимость, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ    = Параметры.СписокМПЗ;
	СтоимостьМПЗ = Параметры.СтоимостьМПЗ;
	
	СписокМПЗ.Колонки.ОсновноеСредство.Имя = "Номенклатура";
	
	СписокМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",       Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности",       Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",                     Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("Партия",                     Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("ДокументОплаты",             Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("НомерДокументаОплаты",       ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокМПЗ.Колонки.Добавить("ДатаДокументаОплаты",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокМПЗ.Колонки.Добавить("Сумма",                      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗ.Колонки.Добавить("СтатьяЗатрат",               Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы"));
	СписокМПЗ.Колонки.Добавить("РасчетныйДокумент",          Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("НоменклатурнаяГруппаЗатрат", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельностиЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	
	СтруктураПараметровОС = Новый Структура("СчетУчета");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОС, Реквизиты);
	
	НоменклатурнаяГруппаОС = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметровОС);
	ХарактерДеятельностиОС = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметровОС);
	
	СтруктураПараметровЗатрат = Новый Структура("НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат");
	
	ВидМПЗЗатрат = ВидМПЗПоСчетуУчета(Реквизиты.СчетЗатрат, Реквизиты.СтатьяЗатрат, Реквизиты.ВидРасходовНУ, Реквизиты.ПринятиеКналоговомуУчету);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметровЗатрат, Реквизиты);
	СтруктураПараметровЗатрат.ВидМПЗ    = ВидМПЗЗатрат;
	СтруктураПараметровЗатрат.СчетУчета = Реквизиты.СчетЗатрат;
	
	НоменклатурнаяГруппаЗатрат = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметровЗатрат);
	ХарактерДеятельностиЗатрат = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметровЗатрат);
	
	Если Реквизиты.УказатьПервоначальнуюСтоимость Тогда
		
		Для каждого МПЗ Из СписокМПЗ Цикл
			
			МПЗ.НоменклатурнаяГруппа = НоменклатурнаяГруппаОС;
			МПЗ.ХарактерДеятельности = ХарактерДеятельностиОС;
			МПЗ.ВидМПЗ               = Перечисления.ВидыМПЗ.ОС;
			МПЗ.Партия               = Реквизиты.Регистратор;
			МПЗ.ДокументОплаты       = Реквизиты.Регистратор;
			МПЗ.НомерДокументаОплаты = Реквизиты.РеквизитыДокументаОплаты;
			МПЗ.Сумма                = Реквизиты.ПервоначальнаяСтоимостьНУ;
			
			МПЗ.СтатьяЗатрат               = Реквизиты.СтатьяЗатрат;
			МПЗ.РасчетныйДокумент          = Реквизиты.Регистратор;
			МПЗ.НоменклатурнаяГруппаЗатрат = НоменклатурнаяГруппаЗатрат;
			МПЗ.ХарактерДеятельностиЗатрат = ХарактерДеятельностиЗатрат;
			
		КонецЦикла;
		
	Иначе
		
		СписокМПЗ.Очистить();
		
		СтоимостьМПЗ.Свернуть("Номенклатура, ДокументОплаты", "Сумма");
		СтоимостьМПЗ.Сортировать("Номенклатура, ДокументОплаты", Новый СравнениеЗначений);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументыОплаты", ОбщегоНазначения.ВыгрузитьКолонку(СтоимостьМПЗ, "ДокументОплаты", Истина));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПервичныхДокументов.Документ,
		|	ДанныеПервичныхДокументов.Номер,
		|	ДанныеПервичныхДокументов.Дата
		|ИЗ
		|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	ДанныеПервичныхДокументов.Документ В(&ДокументыОплаты)";
		
		ДанныеПервичныхДокументов = Запрос.Выполнить().Выгрузить();
		ДанныеПервичныхДокументов.Индексы.Добавить("Документ");
		
		Для каждого Стоимость Из СтоимостьМПЗ Цикл
			
			МПЗ = СписокМПЗ.Добавить();
			МПЗ.НоменклатурнаяГруппа = НоменклатурнаяГруппаОС;
			МПЗ.ХарактерДеятельности = ХарактерДеятельностиОС;
			МПЗ.ВидМПЗ               = Перечисления.ВидыМПЗ.ОС;
			МПЗ.Партия               = Реквизиты.Регистратор;
			МПЗ.Номенклатура         = Стоимость.Номенклатура;
			
			Если ЗначениеЗаполнено(Стоимость.ДокументОплаты) Тогда
				
				МПЗ.ДокументОплаты = Стоимость.ДокументОплаты;
				
				НайденнаяСтрока = ДанныеПервичныхДокументов.Найти(Стоимость.ДокументОплаты, "Документ");
				Если НайденнаяСтрока <> Неопределено Тогда
					МПЗ.НомерДокументаОплаты = НайденнаяСтрока.Номер;
					МПЗ.ДатаДокументаОплаты  = НайденнаяСтрока.Дата;
				КонецЕсли;
				
			КонецЕсли;
			
			МПЗ.Сумма = Стоимость.Сумма;
			
			МПЗ.СтатьяЗатрат               = Реквизиты.СтатьяЗатрат;
			МПЗ.РасчетныйДокумент          = Реквизиты.Регистратор;
			МПЗ.НоменклатурнаяГруппаЗатрат = НоменклатурнаяГруппаЗатрат;
			МПЗ.ХарактерДеятельностиЗатрат = ХарактерДеятельностиЗатрат;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыПринятияКУчетуОС(ТаблицаМПЗ, ТаблицаСтоимость, ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство";				// <СправочникСсылка.ОсновныеСредства> - объект учета
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
		
	// Подготовка таблицы Параметры.СтоимостьМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ>
		+ "Номенклатура,"				// <СправочникСсылка.*> - объект учета
		+ "ДокументОплаты,"				// <ДокументСсылка> - документ оплаты
		+ "Сумма,"						// <Число,15,2> - стоимость в рублях без НДС
		+ "НДС";						// <Число,15,2> - сумма НДС в рублях 
		
	Параметры.Вставить("СтоимостьМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтоимость, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"									// <Дата> - период движений - дата документа
		+ "Организация,"							// <СправочникСсылка.Организации> - организация
		+ "Регистратор,"							// <ДокументСсылка.*> - документ-регистратор движений
		+ "ВидОперации,"							// <ПеречислениеСсылка.*> - вид операции
		+ "НоменклатурнаяГруппа,"					// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура,"							// <СправочникСсылка.*> - номенклатура МПЗ
		+ "СчетУчета,"								// <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта
		+ "УказатьПервоначальнуюСтоимость,"			// <Булево> - первоначальная стоимость указана в документе
		+ "ПервоначальнаяСтоимостьНУ,"				// <Сумма,15,2> - первоначальная стоимость по налоговому учету
		+ "СчетЗатрат,"								// <ПланСчетовСсылка.Хозрасчетный> - счет затрат
		+ "СтатьяЗатрат,"							// <Справочник.ПрочиеДоходыИРасходы> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "РеквизитыДокументаОплаты";				// <Строка> - реквизиты документа оплаты
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияПринятиеКУчетуОС(ТаблицаМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПринятиеКУчетуОС(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;

	ВключениеВРасходыПриПринятииКУчету	= Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовНУ =
		Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету
		И Реквизиты.ПринятиеКналоговомуУчету;
		
	НачислениеАмортизации	= Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовНУ =
		Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
		
	Движения.ИПМПЗ.Записывать	= Истина;
	Если ВключениеВРасходыПриПринятииКУчету Тогда
		Движения.ИППрочиеРасходы.Записывать	= Истина;
	КонецЕсли;
		
	Для Каждого МПЗ Из СписокМПЗ Цикл
		
		Если Реквизиты.УказатьПервоначальнуюСтоимость Тогда
			
			Движение = Движения.ИПМПЗ.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			
		КонецЕсли;
		
		Если ВключениеВРасходыПриПринятииКУчету Тогда
			
			Движение = Движения.ИППрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, МПЗ);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			Движение.НоменклатурнаяГруппа	= МПЗ.НоменклатурнаяГруппаЗатрат;
			Движение.ХарактерДеятельности	= МПЗ.ХарактерДеятельностиЗатрат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокМПЗ.Свернуть("Номенклатура", "Сумма");
	СписокМПЗ.Колонки.Номенклатура.Имя	= "ОсновноеСредство";
	СписокМПЗ.Колонки.Сумма.Имя			= "ПервоначальнаяСтоимостьНУ";
	
	Движения.ПервоначальныеСведенияОСНалоговыйУчет.Записывать	= Истина;
	Если НачислениеАмортизации Тогда
		Движения.НачислениеАмортизацииОСНалоговыйУчет.Записывать	= Истина;
		Движения.ПараметрыАмортизацииОСНалоговыйУчет.Записывать		= Истина;
		Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Записывать	= Истина;
	КонецЕсли;
	
	Для Каждого МПЗ Из СписокМПЗ Цикл

		ПервоначальныеСведенияОС	= Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
		ЗаполнитьЗначенияСвойств(ПервоначальныеСведенияОС, Реквизиты);
		Если НачислениеАмортизации Тогда
			ПервоначальныеСведенияОС.МетодНачисленияАмортизации	= Реквизиты.СпособНачисленияАмортизации;
		КонецЕсли;

		ПервоначальныеСведенияОС.ПорядокВключенияСтоимостиВСоставРасходов	= Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		ЗаполнитьЗначенияСвойств(ПервоначальныеСведенияОС, МПЗ);
		
		Если НачислениеАмортизации Тогда
			НачислениеАмортизацииОС	= Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(НачислениеАмортизацииОС, Реквизиты);
			ЗаполнитьЗначенияСвойств(НачислениеАмортизацииОС, МПЗ);
			
			ПараметрыАмортизацииОС	= Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(ПараметрыАмортизацииОС, Реквизиты);
			ЗаполнитьЗначенияСвойств(ПараметрыАмортизацииОС, МПЗ);
			
			НачислениеАмортизацииОССпециальныйКоэффициент	= Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(НачислениеАмортизацииОССпециальныйКоэффициент, Реквизиты);
			ЗаполнитьЗначенияСвойств(НачислениеАмортизацииОССпециальныйКоэффициент, МПЗ);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОС(ТаблицаМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.ОсновныеСредства> - объект учета
		+ "Партия,"						// <ДокументСсылка.*> - документ поступления ОС
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты ОС
		+ "Сумма,"						// <Число, 15, 2> - первоначальная стоимость ОС
		+ "СтатьяЗатрат,"				// <СправочникСсылка.ПрочиеДоходыИРасходы> - статья прочих расходов
		+ "РасчетныйДокумент,"			// <ДокументСсылка.*>
		+ "НоменклатурнаяГруппаЗатрат,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа затрат
		+ "ХарактерДеятельностиЗатрат";	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности затрат
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"										// <Дата> - период движений - дата документа
		+ "Регистратор,"								// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"								// <СправочникСсылка.Организации>
		+ "УказатьПервоначальнуюСтоимость,"				// <Булево> - первоначальная стоимость указана в документе
		+ "ПорядокВключенияСтоимостиВСоставРасходовНУ,"	// <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
		+ "НачислятьАмортизацию,"						// <Булево> - признак начисления амортизации
		+ "СрокПолезногоИспользования,"					// <Булево> - срок полезного использования по налоговому учету
		+ "СпособНачисленияАмортизации,"				// <ПеречислениеСсылка.МетодыНачисленияАмортизации> - метод начисления амортизации по налоговому учету
		+ "КоэффициентАмортизации,"						// <Число> - коэффициент амортизации по налоговому учету
		+ "СпециальныйКоэффициент,"						// <Число> - специальный коэффициент по налоговому учету
		+ "ПринятиеКналоговомуУчету";					// <Булево> - принимать затраты к налоговому учету
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ПринятиеКУчетуНМА

Функция ПодготовитьТаблицуПринятияКУчетуНМА(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПринятияКУчетуНМА(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности",		Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("Номенклатура",				Справочники.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("ДокументОплаты",			Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("Сумма",						ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СписокМПЗ.Колонки.Добавить("НомерДокументаОплаты",		ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокМПЗ.Колонки.Добавить("ДатаДокументаОплаты",		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	СтруктураПараметров	= Новый Структура("СчетУчета");
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
		
		МПЗ.НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		МПЗ.ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		МПЗ.ВидМПЗ					= Перечисления.ВидыМПЗ.НМА;
		МПЗ.Номенклатура			= МПЗ.НематериальныйАктив;
		МПЗ.Партия					= Реквизиты.Регистратор;
		МПЗ.ДокументОплаты			= Реквизиты.Регистратор;
		МПЗ.НомерДокументаОплаты	= МПЗ.РеквизитыДокументаОплаты;
		МПЗ.Сумма					= МПЗ.ПервоначальнаяСтоимостьНУ;
	
	КонецЦикла;
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыПринятияКУчетуНМА(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НематериальныйАктив,"		// <СправочникСсылка.НематериальныеАктивы> - объект учета
		+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта
		+ "ПервоначальнаяСтоимостьНУ,"	// <Число,15,2> - стоимость актива в рублях
		+ "ДатаПриобретения,"			// <Дата> - дата приобретения
		+ "СрокПолезногоИспользования,"	// <Число,4,0> - срок полезного использования, мес.
		+ "НачислятьАмортизацию,"		// <Булево> - начислять амортизацию
		+ "МетодНачисленияАмортизации,"	// <ПеречислениеСсылка.МетодыНачисленияАмортизации> - метод начисления амортизации
		+ "СпециальныйКоэффициент,"		// <Число,5,2> - значение специального коэффициента
		+ "РеквизитыДокументаОплаты";	// <Строка> - реквизиты документа оплаты
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Организация,"				// <СправочникСсылка.Организации> - организация
		+ "Регистратор";				// <ДокументСсылка.*> - документ-регистратор движений
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияПринятиеКУчетуНМА(ТаблицаМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	Движения.ИПМПЗ.Записывать	= Истина;
	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Записывать	= Истина;
	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Записывать	= Истина;
	
	Для Каждого МПЗ Из СписокМПЗ Цикл
		
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		ПервоначальныеСведенияНМА	= Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
		ЗаполнитьЗначенияСвойств(ПервоначальныеСведенияНМА, МПЗ);
		ЗаполнитьЗначенияСвойств(ПервоначальныеСведенияНМА, Реквизиты);
		
		НачислениеАмортизацииНМАСпециальныйКоэффициент = Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
		ЗаполнитьЗначенияСвойств(НачислениеАмортизацииНМАСпециальныйКоэффициент, МПЗ);
		ЗаполнитьЗначенияСвойств(НачислениеАмортизацииНМАСпециальныйКоэффициент, Реквизиты);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"						// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"				// <СправочникСсылка.НематериальныеАктивы> - объект учета
		+ "Партия,"						// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"						// <Число, 15, 2> - стоимость актива в рублях
		+ "НематериальныйАктив,"		// <СправочникСсылка.НематериальныеАктивы> - объект учета
		+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта
		+ "ПервоначальнаяСтоимостьНУ,"	// <Число,15,2> - стоимость актива в рублях
		+ "ДатаПриобретения,"			// <Дата> - дата приобретения
		+ "СрокПолезногоИспользования,"	// <Число,4,0> - срок полезного использования, мес.
		+ "НачислятьАмортизацию,"		// <Булево> - начислять амортизацию
		+ "МетодНачисленияАмортизации,"	// <ПеречислениеСсылка.МетодыНачисленияАмортизации> - метод начисления амортизации
		+ "СпециальныйКоэффициент,"		// <Число,5,2> - значение специального коэффициента
		+ "РеквизитыДокументаОплаты";	// <Строка> - реквизиты документа оплаты
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,";				// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область МодернизацияОС

Функция ПодготовитьТаблицуМодернизацииОС(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыМодернизацииОС(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ = Параметры.СписокМПЗ;
	СписокМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",				Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("Партия",				Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("ДокументОплаты",		Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("НомерДокументаОплаты",	ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокМПЗ.Колонки.Добавить("ДатаДокументаОплаты",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	СписокМПЗ.Колонки.ОсновноеСредство.Имя			= "Номенклатура";
	СписокМПЗ.Колонки.СуммаМодернизацииНУ.Имя		= "Сумма";
	
	СтруктураПараметров	= Новый Структура;
	
	НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
	ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
	
	Для каждого МПЗ Из СписокМПЗ Цикл
	
		МПЗ.НоменклатурнаяГруппа	= НоменклатурнаяГруппа;
		МПЗ.ХарактерДеятельности	= ХарактерДеятельности;
		МПЗ.ВидМПЗ					= Перечисления.ВидыМПЗ.ОС;
		МПЗ.ДокументОплаты			= Реквизиты.Регистратор;
		МПЗ.НомерДокументаОплаты	= Реквизиты.РеквизитыДокументаОплаты;
	
	КонецЦикла;
	
	// Установка управляемой блокировки
	СтруктураПараметров	= Новый Структура("ТипТаблицы, ИмяТаблицы, РежимБлокировки",
		"РегистрНакопления", "ИПМПЗ", РежимБлокировкиДанных.Разделяемый);
	ОписаниеИсточника = Новый Структура("Номенклатура, ВидМПЗ", "Номенклатура", "ВидМПЗ");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = 
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	СписокНоменклатуры	= СписокМПЗ.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",		Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатуры",	СписокНоменклатуры);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
		|	ИПМПЗОстатки.Партия КАК Партия
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ОС)
		|				И Номенклатура В (&СписокНоменклатуры)) КАК ИПМПЗОстатки";
		
	Результат	= Запрос.Выполнить();
		
	Если НЕ Результат.Пустой() Тогда
		ТаблицаПартий	= Результат.Выгрузить();
		
		ОтборПартий	= Новый Структура("Номенклатура");
		ТаблицаПартий.Индексы.Добавить("Номенклатура");
		
		Для Каждого МПЗ Из СписокМПЗ Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборПартий, МПЗ);
			
			НайденныеСтроки = ТаблицаПартий.НайтиСтроки(ОтборПартий);
			Для каждого СтрокаПартий Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(СтрокаПартий) Тогда
					МПЗ.Партия					= СтрокаПартий.Партия;
					МПЗ.НоменклатурнаяГруппа	= СтрокаПартий.НоменклатурнаяГруппа;
					МПЗ.ХарактерДеятельности	= СтрокаПартий.ХарактерДеятельности;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокМПЗ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыМодернизацииОС(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство,"			// <СправочникСсылка.ОсновныеСредства> - объект учета
		+ "СуммаМодернизацииНУ";		// <Число, 15, 2> - сумма модернизации
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"				// <СправочникСсылка.Организации> - организация
		+ "РеквизитыДокументаОплаты";	// <Строка> - реквизиты документа оплаты
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияМодернизацияОС(ТаблицаМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыМодернизацияОС(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	Движения.ИПМПЗ.Записывать	= Истина;
	
	Для Каждого МПЗ Из СписокМПЗ Цикл
	
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыМодернизацияОС(ТаблицаМПЗ, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.ОсновныеСредства> - объект учета
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления ОС
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты ОС
		+ "Сумма";					// <Число, 15, 2> - сумма модернизации
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область РегистрацииСведенийОбОплатеОСиНМА

Функция ПодготовитьТаблицуРегистрацияОплатыОСиНМА(ТаблицаОС, ТаблицаНМА, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС)
		И Не ЗначениеЗаполнено(ТаблицаНМА)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыРегистрацияОплатыОСиНМА(ТаблицаОС, ТаблицаНМА, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокОС  = Параметры.СписокОС;
	СписокНМА = Параметры.СписокНМА;
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ = Новый ТаблицаЗначений;
	СписокМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокМПЗ.Колонки.Добавить("ХарактерДеятельности",		Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокМПЗ.Колонки.Добавить("ВидМПЗ",					Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	СписокМПЗ.Колонки.Добавить("Номенклатура",				Справочники.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("Партия",					Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("ДокументОплаты",			Документы.ТипВсеСсылки());
	СписокМПЗ.Колонки.Добавить("НомерДокументаОплаты",		ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокМПЗ.Колонки.Добавить("ДатаДокументаОплаты",		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокМПЗ.Колонки.Добавить("Сумма",						ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СтруктураПараметров	= Новый Структура;
	
	НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
	ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
	
	Для Каждого ОС Из СписокОС Цикл
		
		Если ОС.СуммаОплаты <> 0 Тогда
			НоваяСтрока	= СписокМПЗ.Добавить();
			НоваяСтрока.НоменклатурнаяГруппа	= НоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности	= ХарактерДеятельности;
			НоваяСтрока.ВидМПЗ					= Перечисления.ВидыМПЗ.ОС;
			НоваяСтрока.Номенклатура			= ОС.ОсновноеСредство;
			НоваяСтрока.Партия					= Реквизиты.Регистратор;
			НоваяСтрока.ДокументОплаты			= Реквизиты.Регистратор;
			НоваяСтрока.НомерДокументаОплаты	= ОС.НомерДокументаОплаты;
			НоваяСтрока.ДатаДокументаОплаты		= ОС.ДатаОплаты;
			НоваяСтрока.Сумма					= ОС.СуммаОплаты;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого НМА Из СписокНМА Цикл
		
		Если НМА.СуммаОплаты <> 0 Тогда
			НоваяСтрока	= СписокМПЗ.Добавить();
			НоваяСтрока.НоменклатурнаяГруппа	= НоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности	= ХарактерДеятельности;
			НоваяСтрока.ВидМПЗ					= Перечисления.ВидыМПЗ.НМА;
			НоваяСтрока.Номенклатура			= НМА.НематериальныйАктив;
			НоваяСтрока.Партия					= Реквизиты.Регистратор;
			НоваяСтрока.ДокументОплаты			= Реквизиты.Регистратор;
			НоваяСтрока.НомерДокументаОплаты	= НМА.НомерДокументаОплаты;
			НоваяСтрока.ДатаДокументаОплаты		= НМА.ДатаОплаты;
			НоваяСтрока.Сумма					= НМА.СуммаОплаты;
		КонецЕсли;
		
	КонецЦикла;
	
	// Установка управляемой блокировки
	СтруктураПараметров	= Новый Структура("ТипТаблицы, ИмяТаблицы, РежимБлокировки",
		"РегистрНакопления", "ИПМПЗ", РежимБлокировкиДанных.Разделяемый);
	ОписаниеИсточника = Новый Структура("Номенклатура, ВидМПЗ", "Номенклатура", "ВидМПЗ");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = 
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокМПЗ, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	СписокВидовМПЗ	= СписокМПЗ.ВыгрузитьКолонку("ВидМПЗ");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокВидовМПЗ);
	
	СписокНоменклатуры	= СписокМПЗ.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",		Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовМПЗ",		СписокВидовМПЗ);
	Запрос.УстановитьПараметр("СписокНоменклатуры",	СписокНоменклатуры);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
		|	ИПМПЗОстатки.Партия КАК Партия
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ВидМПЗ В (&СписокВидовМПЗ)
		|				И Номенклатура В (&СписокНоменклатуры)) КАК ИПМПЗОстатки";
		
	Результат	= Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
			
		ТаблицаПартий	= Результат.Выгрузить();
		
		ОтборПартий	= Новый Структура("ВидМПЗ, Номенклатура");
		ТаблицаПартий.Индексы.Добавить("ВидМПЗ, Номенклатура");
		
		Для Каждого МПЗ Из СписокМПЗ Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборПартий, МПЗ);
			
			НайденныеСтроки = ТаблицаПартий.НайтиСтроки(ОтборПартий);
			Для каждого СтрокаПартий Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(СтрокаПартий) Тогда
					МПЗ.Партия					= СтрокаПартий.Партия;
					МПЗ.НоменклатурнаяГруппа	= СтрокаПартий.НоменклатурнаяГруппа;
					МПЗ.ХарактерДеятельности	= СтрокаПартий.ХарактерДеятельности;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат	СписокМПЗ;

КонецФункции

Функция ПодготовитьПараметрыТаблицыРегистрацияОплатыОСиНМА(ТаблицаОС, ТаблицаНМА, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокОС
	
	СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство,"		// <СправочникСсылка.ОсновныеСредства> - основное средство
		+ "ДатаОплаты,"				// <Дата> - дата документа оплаты
		+ "НомерДокументаОплаты,"	// <Строка> - номер документа оплаты
		+ "СуммаОплаты";			// <Число, 15, 2> - сумма оплаты
		
	Параметры.Вставить("СписокОС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокНМА
	
	СписокОбязательныхКолонок = ""
		+ "НематериальныйАктив,"	// <СправочникСсылка.НематериальныеАктивы> - нематериальный актив
		+ "ДатаОплаты,"				// <Дата> - дата документа оплаты
		+ "НомерДокументаОплаты,"	// <Строка> - номер документа оплаты
		+ "СуммаОплаты";			// <Число, 15, 2> - сумма оплаты
		
	Параметры.Вставить("СписокНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНМА, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияРегистрацияОплатыОСиНМА(ТаблицаМПЗ, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли; 

	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияОплатыОСиНМА(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	Движения.ИПМПЗ.Записывать = Истина;
	
	Для Каждого МПЗ Из СписокМПЗ Цикл
	
		Движение = Движения.ИПМПЗ.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияОплатыОСиНМА(ТаблицаМПЗ, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.ОсновныеСредства> - объект учета
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Сумма";					// <Число, 15, 2> - сумма оплаты
	
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура РегистрацияСведенийОбОплатеОСиНМА(ТаблицаОСиНМА, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаОСиНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыРегистрацииСведенийОбОплатеОСиНМА(ТаблицаОСиНМА, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	СписокСведений = Параметры.СписокСведений;
	СписокСведений.Колонки.Номенклатура.Имя = "ВнеоборотныйАктив";
	
	СписокСведений.Свернуть("ВнеоборотныйАктив, ДокументОплаты, ДатаДокументаОплаты, НомерДокументаОплаты",);
	СписокСведений.Сортировать("ВнеоборотныйАктив, ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
	
	// Установка управляемой блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "ИПСведенияОбОплатеОСиНМА");
	ОписаниеИсточника = Новый Структура("ВнеоборотныйАктив, ДокументОплаты", "ВнеоборотныйАктив", "ДокументОплаты");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИПСведенияОбОплатеОСиНМА");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокСведений, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	Движения.ИПСведенияОбОплатеОСиНМА.Записывать = Истина;
	
	Для Каждого СведенияОбОплате ИЗ СписокСведений Цикл
		
		Если ЗначениеЗаполнено(СведенияОбОплате.ДокументОплаты) Тогда
			
			Движение = Движения.ИПСведенияОбОплатеОСиНМА.Добавить();
			Движение.Организация              = Реквизиты.Организация;
			Движение.ВнеоборотныйАктив        = СведенияОбОплате.ВнеоборотныйАктив;
			Движение.ДокументОплаты           = СведенияОбОплате.ДокументОплаты;
			
			Движение.РеквизитыДокументаОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1; %2", 
				СведенияОбОплате.НомерДокументаОплаты, Формат(СведенияОбОплате.ДатаДокументаОплаты, "ДЛФ=D"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацииСведенийОбОплатеОСиНМА(ТаблицаРегистрации, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокСведений
	
	СписокОбязательныхКолонок = ""
		+ "Номенклатура,"			// <СправочникСсылка.*> - объект учета
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "НомерДокументаОплаты,"	// <Строка> - номер/реквизиты документа оплаты
		+ "ДатаДокументаОплаты";	// <Дата> -дата документа оплаты
		
	Параметры.Вставить("СписокСведений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРегистрации, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьТаблицуОплатыОСиНМА(ТаблицыМПЗ, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицыМПЗ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаОСиНМА = ТаблицыМПЗ.МПЗ;
	Если Не ЗначениеЗаполнено(ТаблицаОСиНМА)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОплатыОСиНМА(ТаблицаОСиНМА, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МПЗ", Параметры.СписокСведений);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МПЗ.Номенклатура КАК Номенклатура,
	|	МПЗ.ВидМПЗ КАК ВидМПЗ,
	|	МПЗ.ДокументОплаты КАК ДокументОплаты
	|ПОМЕСТИТЬ ВТ_МПЗ
	|ИЗ
	|	&МПЗ КАК МПЗ
	|ГДЕ
	|	(МПЗ.ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ОС)
	|			ИЛИ МПЗ.ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.НМА))
	|	И МПЗ.ДокументОплаты <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МПЗ.Номенклатура КАК Номенклатура,
	|	ВТ_МПЗ.ДокументОплаты КАК ДокументОплаты,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокументаОплаты,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокументаОплаты
	|ИЗ
	|	ВТ_МПЗ КАК ВТ_МПЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ВТ_МПЗ.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МПЗ.Номенклатура,
	|	ВТ_МПЗ.ДокументОплаты,
	|	ДанныеПервичныхДокументов.Дата,
	|	ДанныеПервичныхДокументов.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ДатаДокументаОплаты,
	|	ДокументОплаты";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыОплатыОСиНМА(ТаблицаРегистрации, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокСведений
	
	СписокОбязательныхКолонок = ""
		+ "Номенклатура,"			// <СправочникСсылка.*> - объект учета
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "ВидМПЗ";					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		
	Параметры.Вставить("СписокСведений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРегистрации, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СписаниеОСиНМА

Функция ПодготовитьТаблицыСписанияОСиНМА(ТаблицаМПЗ, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	ТаблицыСписанияОСиНМА = Новый Структура("СписанныеМПЗ, СписокАмортизации, ИзмененияВидаДеятельности, ПрочиеДоходы");
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ТаблицыСписанияОСиНМА;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыСписанияОСиНМА;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицСписанияОСиНМА(ТаблицаМПЗ, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СписокМПЗ = Параметры.СписокМПЗ;
	
	СписокНоменклатуры = СписокМПЗ.ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокНоменклатуры);
	
	ТаблицаЗатрат = Новый ТаблицаЗначений;
	ТаблицаЗатрат.Колонки.Добавить("ОбъектУчета", Метаданные.РегистрыНакопления.ИПМПЗ.Измерения.Номенклатура.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаЗатрат, СписокНоменклатуры, "ОбъектУчета");
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПМПЗ");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = ТаблицаЗатрат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "ОбъектУчета");
	Блокировка.Заблокировать();
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокАмортизации = ПодготовитьТаблицуНачисленияАмортизацииОС(ТаблицаЗатрат, ТаблицаРеквизиты, Отказ);
	СписокАмортизацииНМА = ПодготовитьТаблицуНачисленияАмортизацииНМА(ТаблицаЗатрат, ТаблицаРеквизиты, Отказ);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СписокАмортизацииНМА, СписокАмортизации);
	СписокАмортизации.Свернуть("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, ОбъектУчета, РасчетныйДокумент, ДокументОплаты",
		"СуммаАмортизацииБУ, АмортизацияКонечныйОстаток");
	
	СписокАмортизации.Колонки.ОбъектУчета.Имя = "Номенклатура";
	СписокАмортизации.Колонки.РасчетныйДокумент.Имя = "Партия";
	СписокАмортизации.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	Для каждого Амортизация Из СписокАмортизации Цикл
		Амортизация.Сумма = Амортизация.СуммаАмортизацииБУ + Амортизация.АмортизацияКонечныйОстаток;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ТаблицаАмортизации", СписокАмортизации);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты,
		|	ИПМПЗОстатки.СуммаОстаток,
		|	ИПМПЗОстатки.НДСОстаток
		|ПОМЕСТИТЬ ВТИПМПЗОстатки
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(
		|			&Период,
		|			Организация = &Организация
		|				И (ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ОС)
		|					ИЛИ ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.НМА))
		|				И Номенклатура В (&СписокНоменклатуры)) КАК ИПМПЗОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАмортизации.НоменклатурнаяГруппа,
		|	ТаблицаАмортизации.ХарактерДеятельности,
		|	ТаблицаАмортизации.ВидМПЗ,
		|	ТаблицаАмортизации.Номенклатура,
		|	ТаблицаАмортизации.Партия,
		|	ТаблицаАмортизации.ДокументОплаты,
		|	ТаблицаАмортизации.Сумма
		|ПОМЕСТИТЬ ВТТаблицаАмортизации
		|ИЗ
		|	&ТаблицаАмортизации КАК ТаблицаАмортизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаАмортизации.Номенклатура,
		|	ТаблицаАмортизации.НоменклатурнаяГруппа,
		|	ТаблицаАмортизации.ХарактерДеятельности,
		|	ТаблицаАмортизации.ВидМПЗ,
		|	ТаблицаАмортизации.Партия,
		|	ТаблицаАмортизации.ДокументОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство,
		|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.НачислятьАмортизацию
		|ПОМЕСТИТЬ ВТНачислениеАмортизацииОС
		|ИЗ
		|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В (&СписокНоменклатуры)) КАК НачислениеАмортизацииОСНалоговыйУчетСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
		|	ИПМПЗОстатки.Партия КАК Партия,
		|	ИПМПЗОстатки.ДокументОплаты КАК ДокументОплаты,
		|	ИПМПЗОстатки.СуммаОстаток - ЕСТЬNULL(ТаблицаАмортизации.Сумма, 0) КАК Сумма,
		|	ИПМПЗОстатки.НДСОстаток КАК НДС,
		|	ЕСТЬNULL(НачислениеАмортизацииОС.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизацию
		|ИЗ
		|	ВТИПМПЗОстатки КАК ИПМПЗОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаАмортизации КАК ТаблицаАмортизации
		|		ПО ИПМПЗОстатки.Номенклатура = ТаблицаАмортизации.Номенклатура
		|			И ИПМПЗОстатки.НоменклатурнаяГруппа = ТаблицаАмортизации.НоменклатурнаяГруппа
		|			И ИПМПЗОстатки.ХарактерДеятельности = ТаблицаАмортизации.ХарактерДеятельности
		|			И ИПМПЗОстатки.ВидМПЗ = ТаблицаАмортизации.ВидМПЗ
		|			И ИПМПЗОстатки.Партия = ТаблицаАмортизации.Партия
		|			И ИПМПЗОстатки.ДокументОплаты = ТаблицаАмортизации.ДокументОплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеАмортизацииОС КАК НачислениеАмортизацииОС
		|		ПО ИПМПЗОстатки.Номенклатура = НачислениеАмортизацииОС.ОсновноеСредство";
	
	Результат = Запрос.Выполнить();
	
	СписанныеМПЗ = ПолучитьПустуюТаблицуСписанныеМПЗ();
	СписанныеМПЗ.Колонки.Добавить("НачислятьАмортизацию", Новый ОписаниеТипов("Булево"));

	ИзмененияВидаДеятельности = ПолучитьПустуюТаблицуИзмененияВидаДеятельности();
	
	Если НЕ Результат.Пустой() Тогда
		
		ТаблицаПартий = Результат.Выгрузить();
		
		ОтборПартий = Новый Структура("Номенклатура");
		ТаблицаПартий.Индексы.Добавить("Номенклатура");
		
		СтруктураПараметров = Новый Структура("НоменклатурнаяГруппа, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат, СчетДоходов");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Реквизиты);
		
		МассивКоэф = Новый Массив;
		Для каждого МПЗ Из СписокМПЗ Цикл
		
			ЗаполнитьЗначенияСвойств(ОтборПартий, МПЗ);
			НайденныеПартии = ТаблицаПартий.НайтиСтроки(ОтборПартий);
			Если НайденныеПартии.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивКоэф.Очистить();
			Для каждого Партия Из НайденныеПартии Цикл
				МассивКоэф.Добавить(Партия.Сумма + Партия.НДС);
			КонецЦикла;
			
			МассивВыручки = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(МПЗ.Выручка, МассивКоэф, 2);
			МассивНДСНачисленного = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(МПЗ.НДСНачисленный, МассивКоэф, 2);
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
			НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			
			Для Индекс = 0 По НайденныеПартии.ВГраница() Цикл
				
				Партия = НайденныеПартии[Индекс];
				Если НЕ Партия.ХарактерДеятельности = ХарактерДеятельности
					ИЛИ НЕ Партия.НоменклатурнаяГруппа = НоменклатурнаяГруппа Тогда
					
					НоваяСтрока = ИзмененияВидаДеятельности.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия);
					
					НоваяСтрока.ХарактерДеятельности1 = Партия.ХарактерДеятельности;
					НоваяСтрока.НоменклатурнаяГруппа1 = Партия.НоменклатурнаяГруппа;
					НоваяСтрока.ХарактерДеятельности2 = ХарактерДеятельности;
					НоваяСтрока.НоменклатурнаяГруппа2 = НоменклатурнаяГруппа;
				КонецЕсли;
				
				НоваяСтрока = СписанныеМПЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия);
				НоваяСтрока.ХарактерДеятельности = ХарактерДеятельности;
				НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
				
				Если МассивВыручки <> Неопределено Тогда
					НоваяСтрока.Выручка = МассивВыручки[Индекс];
				КонецЕсли;
				
				Если МассивНДСНачисленного <> Неопределено Тогда
					НоваяСтрока.НДСНачисленный = МассивНДСНачисленного[Индекс];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицыСписанияОСиНМА.СписанныеМПЗ = СписанныеМПЗ;
	ТаблицыСписанияОСиНМА.СписокАмортизации = СписокАмортизации;
	ТаблицыСписанияОСиНМА.ИзмененияВидаДеятельности = ИзмененияВидаДеятельности;
	
	Возврат ТаблицыСписанияОСиНМА;

КонецФункции

Функция ПодготовитьПараметрыТаблицСписанияОСиНМА(ТаблицаМПЗ, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "Номенклатура," 			// <СправочникСсылка.*> - объект учета
		+ "СчетУчета,"				// <ПланыСчетов.Хозрасчетный>  - счет учета 
		+ "СтатьяЗатрат,"							// <Справочник.СтатьиЗатрат,Справочник.ПрочиеДоходыИРасходы,Справочник.РасходыБудущихПериодов> - статья затрат
		+ "ВидРасходовНУ,"							// <Перечисления.ВидыРасходовНУ> - вид расхода статьи затрат
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат,"// <Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат> - вид деятельности
		+ "ПринятиеКналоговомуУчету,"				// <Булево> - признак принятия к НУ прочих расходов
		+ "СчетДоходов,"			// <ПланыСчетов.Хозрасчетный>  - счет списания 
		+ "Выручка,"				// <Число,15,2> - сумма выручки
		+ "НДСНачисленный";			// <Число,15,2> - сумма НДС начисленного
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации>
		+ "ВидОперации";			// <ПеречислениеСсылка.*>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеОСиНМА(СтруктураТаблицСписанияОСиНМА, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	СформироватьДвиженияИзменениеВидаДеятельности(
		СтруктураТаблицСписанияОСиНМА.ИзмененияВидаДеятельности,
		ТаблицаРеквизитов, , Движения, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураТаблицСписанияОСиНМА.СписанныеМПЗ)
		И Не ЗначениеЗаполнено(СтруктураТаблицСписанияОСиНМА.СписокАмортизации)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли; 
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	 
	Параметры = ПодготовитьПараметрыСписаниеОСиНМА(СтруктураТаблицСписанияОСиНМА.СписанныеМПЗ, СтруктураТаблицСписанияОСиНМА.СписокАмортизации, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ         = Параметры.СписокМПЗ;
	СписокАмортизации = Параметры.СписокАмортизации;
	
	Движения.ИПМПЗ.Записывать = Истина;
	
	Для каждого Амортизация Из СписокАмортизации Цикл
		
		Если НЕ Амортизация.Сумма = 0 Тогда
			
			Движение = Движения.ИПМПЗ.ДобавитьПриход(); 
			ЗаполнитьЗначенияСвойств(Движение, Амортизация);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			Движение.Сумма =-Амортизация.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Движение = Движения.ИПМПЗ.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
	СписокМПЗ.Свернуть("НачислятьАмортизацию, Номенклатура, ВидМПЗ", "");
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Если МПЗ.НачислятьАмортизацию И МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.ОС Тогда
			
			Движения.НачислениеАмортизацииОСНалоговыйУчет.Записывать = Истина;
			
			Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			Движение.ОсновноеСредство = МПЗ.Номенклатура;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеОСиНМА(ТаблицаМПЗ, ТаблицаАмортизации, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.ОсновныеСредства> - объект учета
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"					// <Число, 15, 2> - сумма
		+ "НДС,"					// <Число, 15, 2> - сумма НДС
		+ "НачислятьАмортизацию";	// <Булево> - амортизация начисляется
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокАмортизации
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.ОсновныеСредства> - объект учета
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Сумма";					// <Число, 15, 2> - сумма амортизации
		
	Параметры.Вставить("СписокАмортизации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАмортизации, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПередачаОСиНМА

Функция ПодготовкаТаблицыПодготовкиКПередачеОС(ТаблицаОС, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОС)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	 
	Параметры = ПодготовитьПараметрыТаблицыПодготовкиКПередачеОС(ТаблицаОС, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];	
	СписокОС = Параметры.СписокОС;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("Период",			Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",	Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС",		СписокОС);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство
		|ПОМЕСТИТЬ ВТТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаОС.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство,
		|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.НачислятьАмортизацию
		|ПОМЕСТИТЬ ВТНачислениеАмортизацииОС
		|ИЗ
		|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ВТТаблицаОС КАК ТаблицаОС)) КАК НачислениеАмортизацииОСНалоговыйУчетСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЕСТЬNULL(НачислениеАмортизацииОС.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизацию
		|ИЗ
		|	ВТТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеАмортизацииОС КАК НачислениеАмортизацииОС
		|		ПО ТаблицаОС.ОсновноеСредство = НачислениеАмортизацииОС.ОсновноеСредство";
		
	Результат	= Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыПодготовкиКПередачеОС(ТаблицаОС, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СписокОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство";	// <СправочникСсылка.ОсновныеСредства> - основное средство

	Параметры.Вставить("СписокОС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПодготовкаКПередачеОС(ТаблицаОС, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОС)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПодготовкаКПередачеОС(ТаблицаОС, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокОС = Параметры.СписокОС;
	СписокОС.Свернуть("НачислятьАмортизацию, ОсновноеСредство", "");
	
	Для каждого ОС Из СписокОС Цикл
		
		Если ОС.НачислятьАмортизацию Тогда
			
			Движения.НачислениеАмортизацииОСНалоговыйУчет.Записывать = Истина;
			
			Движение	= Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			Движение.ОсновноеСредство	= ОС.ОсновноеСредство;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПодготовкаКПередачеОС(ТаблицаОС, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СписокОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"		// <СправочникСсылка.ОсновныеСредства> - основное средство
	+ "НачислятьАмортизацию";	// <Булево> - амортизация начисляется
	
	Параметры.Вставить("СписокОС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";		// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция СформироватьДвиженияПередачаОСиНМА(СтруктураТаблицСписанияОС, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	Перем ТаблицаИПМПЗОтгруженные;
	
	// Таблица для сохранения результатов проведения по регистру ИПМПЗОтгруженные
	ТаблицаИПМПЗОтгруженные = Движения.ИПМПЗОтгруженные.ВыгрузитьКолонки();
	
	Если Не ЗначениеЗаполнено(СтруктураТаблицСписанияОС)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаИПМПЗОтгруженные;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПередачаОСиНМА(СтруктураТаблицСписанияОС.СписанныеМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	Движения.ИПМПЗОтгруженные.Записывать = Истина;
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Движение = Движения.ИПМПЗОтгруженные.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, МПЗ);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.ДокументОтгрузки = Реквизиты.Регистратор;
		
		ЗаполнитьЗначенияСвойств(ТаблицаИПМПЗОтгруженные.Добавить(), Движение);
		
	КонецЦикла;
	
	Возврат ТаблицаИПМПЗОтгруженные;
	
КонецФункции

Функция ПодготовитьПараметрыПередачаОСиНМА(ТаблицаМПЗ, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "ВидМПЗ,"					// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "Номенклатура,"			// <СправочникСсылка.ОсновныеСредства> - объект учета
		+ "Партия,"					// <ДокументСсылка.*> - документ поступления
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"					// <Число, 15, 2> - остаточная стоимость
		+ "Выручка,"				// <Число, 15, 2> - сумма выручки
		+ "НДСНачисленный";			// <Число, 15, 2> - сумма НДС начисленного
		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ОтражениеАмортизации

Функция ПодготовитьТаблицуНачисленияАмортизацииОС(ТаблицаЗатрат, ТаблицаРеквизитов, Отказ) Экспорт
	
	ТаблицаАмортизации = ПолучитьПустуютаблицуАмортизации();
	
	Если Не ЗначениеЗаполнено(ТаблицаЗатрат)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат ТаблицаАмортизации;
	КонецЕсли;
	 
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаАмортизации;
	КонецЕсли;
	
	Если ТаблицаРеквизитов.Колонки.Найти("ВыдаватьСообщения") = Неопределено Тогда
		ТаблицаРеквизитов.Колонки.Добавить("ВыдаватьСообщения",	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияАмортизацииОС(ТаблицаЗатрат, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокЗатрат = Параметры.СписокЗатрат;
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	СписокОС	= СписокЗатрат.ВыгрузитьКолонку("ОбъектУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокОС);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",	Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период",			Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СписокОС",		СписокОС);
	
	Запрос.УстановитьПараметр("НачалоМесяца",	НачалоМесяца(Реквизиты.Период));
	Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(Реквизиты.Регистратор) Тогда
		Запрос.УстановитьПараметр("КонецМесяца",	КонецМесяца(Реквизиты.Период));
	Иначе
		Запрос.УстановитьПараметр("КонецМесяца",	Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ИПМПЗОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТИПМПЗОстаткиКон
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ОС)
	|				И Номенклатура В (&СписокОС)
	|				И НЕ ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ИПМПЗОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТИПМПЗОстаткиНач
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ОС)
	|				И Номенклатура В (&СписокОС)
	|				И НЕ ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.Период,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов
	|ПОМЕСТИТЬ ВТПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство,
	|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.НачислятьАмортизацию
	|ПОМЕСТИТЬ ВТНачислениеАмортизацииОС
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОСНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ ВТСпособыОтраженияРасходовПоАмортизацииОС
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.ОсновноеСредство,
	|	НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент
	|ПОМЕСТИТЬ ВТНачислениеАмортизацииОССпециальныйКоэффициент
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТСписаныеОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|				И ОсновноеСредство В (&СписокОС)) КАК СостоянияОСОрганизацийСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.КоэффициентАмортизации
	|ПОМЕСТИТЬ ВТПараметрыАмортизацииОС
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ИППрочиеРасходыОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОборотыМесяц
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Организация = &Организация
	|				И СтатьяЗатрат В (&СписокОС)) КАК ИППрочиеРасходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ИППрочиеРасходыОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОборотыНачалоМесяца
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			,
	|			&НачалоМесяца,
	|			,
	|			Организация = &Организация
	|				И СтатьяЗатрат В (&СписокОС)) КАК ИППрочиеРасходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ИППрочиеРасходыОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОборотыКонецМесяца
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			,
	|			&КонецМесяца,
	|			,
	|			Организация = &Организация
	|				И СтатьяЗатрат В (&СписокОС)) КАК ИППрочиеРасходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОстаткиКон.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОстаткиКон.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ОС) КАК ВидМПЗ,
	|	ИПМПЗОстаткиКон.Номенклатура КАК ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СправочникОсновныеСредства.Ссылка) КАК ОсновноеСредствоПредставление,
	|	СправочникОсновныеСредства.Код КАК ОсновноеСредствоКод,
	|	ИПМПЗОстаткиКон.Партия КАК РасчетныйДокумент,
	|	ИПМПЗОстаткиКон.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(ИПМПЗОстаткиКон.СуммаОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(ИПМПЗОстаткиНач.СуммаОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(ИППрочиеРасходыОборотыМесяц.СуммаОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ИППрочиеРасходыОборотыНачалоМесяца.СуммаОборот, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(ИППрочиеРасходыОборотыКонецМесяца.СуммаОборот, 0) КАК АмортизацияКонечныйОстаток,
	|	ПервоначальныеСведенияОС.Период КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведенияОС.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОС.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	НачислениеАмортизацииОС.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ЕСТЬNULL(ПараметрыАмортизацииОС.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПараметрыАмортизацииОС.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициент.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	СпособыОтраженияРасходовПоАмортизацииОС.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации
	|ИЗ
	|	ВТИПМПЗОстаткиКон КАК ИПМПЗОстаткиКон
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ПервоначальныеСведенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеАмортизацииОС КАК НачислениеАмортизацииОС
	|		ПО ИПМПЗОстаткиКон.Номенклатура = НачислениеАмортизацииОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыАмортизацииОС КАК ПараметрыАмортизацииОС
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ПараметрыАмортизацииОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыОтраженияРасходовПоАмортизацииОС КАК СпособыОтраженияРасходовПоАмортизацииОС
	|		ПО ИПМПЗОстаткиКон.Номенклатура = СпособыОтраженияРасходовПоАмортизацииОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеАмортизацииОССпециальныйКоэффициент КАК НачислениеАмортизацииОССпециальныйКоэффициент
	|		ПО ИПМПЗОстаткиКон.Номенклатура = НачислениеАмортизацииОССпециальныйКоэффициент.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИПМПЗОстаткиНач КАК ИПМПЗОстаткиНач
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ИПМПЗОстаткиНач.Номенклатура
	|			И ИПМПЗОстаткиКон.Партия = ИПМПЗОстаткиНач.Партия
	|			И ИПМПЗОстаткиКон.ДокументОплаты = ИПМПЗОстаткиНач.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИППрочиеРасходыОборотыМесяц КАК ИППрочиеРасходыОборотыМесяц
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ИППрочиеРасходыОборотыМесяц.СтатьяЗатрат
	|			И ИПМПЗОстаткиКон.Партия = ИППрочиеРасходыОборотыМесяц.РасчетныйДокумент
	|			И ИПМПЗОстаткиКон.ДокументОплаты = ИППрочиеРасходыОборотыМесяц.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИППрочиеРасходыОборотыНачалоМесяца КАК ИППрочиеРасходыОборотыНачалоМесяца
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ИППрочиеРасходыОборотыНачалоМесяца.СтатьяЗатрат
	|			И ИПМПЗОстаткиКон.Партия = ИППрочиеРасходыОборотыНачалоМесяца.РасчетныйДокумент
	|			И ИПМПЗОстаткиКон.ДокументОплаты = ИППрочиеРасходыОборотыНачалоМесяца.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИППрочиеРасходыОборотыКонецМесяца КАК ИППрочиеРасходыОборотыКонецМесяца
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ИППрочиеРасходыОборотыКонецМесяца.СтатьяЗатрат
	|			И ИПМПЗОстаткиКон.Партия = ИППрочиеРасходыОборотыКонецМесяца.РасчетныйДокумент
	|			И ИПМПЗОстаткиКон.ДокументОплаты = ИППрочиеРасходыОборотыКонецМесяца.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК СправочникОсновныеСредства
	|		ПО ИПМПЗОстаткиКон.Номенклатура = СправочникОсновныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписаныеОС КАК СписаныеОС
	|		ПО ИПМПЗОстаткиКон.Номенклатура = СписаныеОС.ОсновноеСредство
	|ГДЕ
	|	ПервоначальныеСведенияОС.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|	И НачислениеАмортизацииОС.НачислятьАмортизацию
	|	И СписаныеОС.ОсновноеСредство ЕСТЬ NULL 
	|ИТОГИ
	|	СУММА(СтоимостьКонечныйОстаток),
	|	СУММА(СтоимостьНачальныйОстаток),
	|	СУММА(АмортизацияОборот),
	|	СУММА(АмортизацияНачальныйОстаток),
	|	СУММА(АмортизацияКонечныйОстаток)
	|ПО
	|	ОсновноеСредство";

	ВыборкаПоОС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОсновноеСредство");
	
	МассивКоэфф = Новый Массив;
	
	Пока ВыборкаПоОС.Следующий() Цикл

		ВыборкаСтрокиЗапроса = ВыборкаПоОС.Выбрать();
		ВыборкаСтрокиЗапроса.Следующий();
		
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Учет индивидуального предпринимателя: для основного средства %1 (%2)'"),
			ВыборкаСтрокиЗапроса.ОсновноеСредствоПредставление,
			СокрЛП(ВыборкаСтрокиЗапроса.ОсновноеСредствоКод));
		
		Если (ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток) = 0 Тогда
			Продолжить; // остаточная стоимость на начало месяца равна 0
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + НСтр("ru = ' не указан метод начисления амортизации'"));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьНачальныйОстаток) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.СрокПолезногоИспользования) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения +  НСтр("ru = 'срок использования равен 0'"));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		СтоимостьДляВычисления	= ВыборкаПоОС.СтоимостьНачальныйОстаток;
		СрокИспользованияДляВычисления	= Макс(1, ВыборкаСтрокиЗапроса.СрокПолезногоИспользования);
		
		СуммаАмортизации		= 0;
		
		Если ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
			
			СуммаАмортизации = Окр(СтоимостьДляВычисления / СрокИспользованияДляВычисления, 2, 1);
		
		ИначеЕсли ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ Тогда
			
			СуммаАмортизации = Окр(СтоимостьДляВычисления * ВыборкаСтрокиЗапроса.КоэффициентАмортизации / 1200 * ?((ВыборкаСтрокиЗапроса.СпециальныйКоэффициент = 0 ), 1, ВыборкаСтрокиЗапроса.СпециальныйКоэффициент), 2, 1);
			
		КонецЕсли;
		
		СуммаАмортизации	= Макс(0,
			Мин(ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток,
				СуммаАмортизации - ВыборкаПоОС.АмортизацияОборот));
		
		МассивКоэфф.Очистить();
		НачКоличСтрокТабАмортизации	= ТаблицаАмортизации.Количество();
		
		ВыборкаСтрокиЗапроса.Сбросить();
		Пока ВыборкаСтрокиЗапроса.Следующий() Цикл
		
			МассивКоэфф.Добавить(ВыборкаСтрокиЗапроса.СтоимостьНачальныйОстаток);
			
			СтрокаАмортизации = ТаблицаАмортизации.Добавить();
			СтрокаАмортизации.ОбъектУчета					= ВыборкаСтрокиЗапроса.ОсновноеСредство;
			СтрокаАмортизации.НаправлениеАмортизации		= ВыборкаСтрокиЗапроса.НаправлениеАмортизации;
			СтрокаАмортизации.РасчетныйДокумент				= ВыборкаСтрокиЗапроса.РасчетныйДокумент;
			СтрокаАмортизации.ДокументОплаты				= ВыборкаСтрокиЗапроса.ДокументОплаты;
			СтрокаАмортизации.НоменклатурнаяГруппа			= ВыборкаСтрокиЗапроса.НоменклатурнаяГруппа;
			СтрокаАмортизации.ХарактерДеятельности			= ВыборкаСтрокиЗапроса.ХарактерДеятельности;
			СтрокаАмортизации.ВидМПЗ						= ВыборкаСтрокиЗапроса.ВидМПЗ;
			СтрокаАмортизации.АмортизацияКонечныйОстаток	= ВыборкаСтрокиЗапроса.АмортизацияКонечныйОстаток;
		КонецЦикла;
		
		МассивСуммАмортизации	= ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаАмортизации, МассивКоэфф, 2);
		
		Если МассивСуммАмортизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСуммАмортизации.Количество() > 0 Тогда
			Для Индекс = 0 По МассивСуммАмортизации.Количество() - 1 Цикл
				ТаблицаАмортизации[НачКоличСтрокТабАмортизации + Индекс].СуммаАмортизацииБУ = МассивСуммАмортизации[Индекс];
				ТаблицаАмортизации[НачКоличСтрокТабАмортизации + Индекс].СуммаАмортизацииНУ = МассивСуммАмортизации[Индекс];
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции

Функция ПодготовитьПараметрыТаблицыНачисленияАмортизацииОС(ТаблицаЗатрат, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокЗатрат
	
	СписокОбязательныхКолонок = ""
		+ "ОбъектУчета";			// <СправочникСсылка.*> - объект учета
		
	Параметры.Вставить("СписокЗатрат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаЗатрат, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации> - организация
		+ "ВыдаватьСообщения";		// <Булево>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
		
КонецФункции

Функция ПодготовитьТаблицуНачисленияАмортизацииНМА(ТаблицаЗатрат, ТаблицаРеквизитов, Отказ) Экспорт

	ТаблицаАмортизации	= ПолучитьПустуютаблицуАмортизации();
	
	Если Не ЗначениеЗаполнено(ТаблицаЗатрат)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат ТаблицаАмортизации;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаАмортизации;
	КонецЕсли;
	
	Если ТаблицаРеквизитов.Колонки.Найти("ВыдаватьСообщения") = Неопределено Тогда
		ТаблицаРеквизитов.Колонки.Добавить("ВыдаватьСообщения",	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияАмортизацииНМА(ТаблицаЗатрат, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	СписокЗатрат = Параметры.СписокЗатрат;
	СписокНМА    = СписокЗатрат.ВыгрузитьКолонку("ОбъектУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокНМА);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",	Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период",			Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СписокНМА",		СписокНМА);
	
	Запрос.УстановитьПараметр("НачалоМесяца",	НачалоМесяца(Реквизиты.Период));
	Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(Реквизиты.Регистратор) Тогда
		Запрос.УстановитьПараметр("КонецМесяца",	КонецМесяца(Реквизиты.Период));
	Иначе
		Запрос.УстановитьПараметр("КонецМесяца",	Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ИПМПЗОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТИПМПЗОстаткиКон
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.НМА)
	|				И Номенклатура В (&СписокНМА)
	|				И НЕ ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОстатки.НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности,
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты,
	|	ИПМПЗОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТИПМПЗОстаткиНач
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И ВидМПЗ = ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.НМА)
	|				И Номенклатура В (&СписокНМА)
	|				И НЕ ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПМПЗОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПМПЗОстатки.Номенклатура,
	|	ИПМПЗОстатки.Партия,
	|	ИПМПЗОстатки.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию
	|ПОМЕСТИТЬ ВТПервоначальныеСведенияНМА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов
	|ПОМЕСТИТЬ ВТСпособыОтраженияРасходовПоАмортизацииНМА
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ВТСписаныеНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан)
	|				И НематериальныйАктив В (&СписокНМА)) КАК СостоянияНМАОрганизацийСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ИППрочиеРасходыОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОборотыМесяц
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Организация = &Организация
	|				И СтатьяЗатрат В (&СписокНМА)) КАК ИППрочиеРасходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ИППрочиеРасходыОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТИППрочиеРасходыОборотыКонецМесяца
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			,
	|			&КонецМесяца,
	|			,
	|			Организация = &Организация
	|				И СтатьяЗатрат В (&СписокНМА)) КАК ИППрочиеРасходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПМПЗОстаткиКон.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОстаткиКон.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.НМА) КАК ВидМПЗ,
	|	ИПМПЗОстаткиКон.Номенклатура КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНематериальныеАктивы.Ссылка) КАК НематериальныйАктивПредставление,
	|	СправочникНематериальныеАктивы.Код КАК НематериальныйАктивКод,
	|	ИПМПЗОстаткиКон.Партия КАК РасчетныйДокумент,
	|	ИПМПЗОстаткиКон.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(ИПМПЗОстаткиКон.СуммаОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(ИПМПЗОстаткиНач.СуммаОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(ИППрочиеРасходыОборотыМесяц.СуммаОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ИППрочиеРасходыОборотыКонецМесяца.СуммаОборот, 0) КАК АмортизацияКонечныйОстаток,
	|	ПервоначальныеСведенияНМА.Период КАК ДатаПринятияКУчету,
	|	ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный) КАК МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияНМА.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМА.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	СпособыОтраженияРасходовПоАмортизацииНМА.СпособОтраженияРасходов КАК НаправлениеАмортизации
	|ИЗ
	|	ВТИПМПЗОстаткиКон КАК ИПМПЗОстаткиКон
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ПервоначальныеСведенияНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИПМПЗОстаткиНач КАК ИПМПЗОстаткиНач
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ИПМПЗОстаткиНач.Номенклатура
	|			И ИПМПЗОстаткиКон.Партия = ИПМПЗОстаткиНач.Партия
	|			И ИПМПЗОстаткиКон.ДокументОплаты = ИПМПЗОстаткиНач.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИППрочиеРасходыОборотыМесяц КАК ИППрочиеРасходыОборотыМесяц
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ИППрочиеРасходыОборотыМесяц.СтатьяЗатрат
	|			И ИПМПЗОстаткиКон.Партия = ИППрочиеРасходыОборотыМесяц.РасчетныйДокумент
	|			И ИПМПЗОстаткиКон.ДокументОплаты = ИППрочиеРасходыОборотыМесяц.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИППрочиеРасходыОборотыКонецМесяца КАК ИППрочиеРасходыОборотыКонецМесяца
	|		ПО ИПМПЗОстаткиКон.Номенклатура = ИППрочиеРасходыОборотыКонецМесяца.СтатьяЗатрат
	|			И ИПМПЗОстаткиКон.Партия = ИППрочиеРасходыОборотыКонецМесяца.РасчетныйДокумент
	|			И ИПМПЗОстаткиКон.ДокументОплаты = ИППрочиеРасходыОборотыКонецМесяца.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыОтраженияРасходовПоАмортизацииНМА КАК СпособыОтраженияРасходовПоАмортизацииНМА
	|		ПО ИПМПЗОстаткиКон.Номенклатура = СпособыОтраженияРасходовПоАмортизацииНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК СправочникНематериальныеАктивы
	|		ПО ИПМПЗОстаткиКон.Номенклатура = СправочникНематериальныеАктивы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписаныеНМА КАК СписаныеНМА
	|		ПО ИПМПЗОстаткиКон.Номенклатура = СписаныеНМА.НематериальныйАктив
	|ГДЕ
	|	ПервоначальныеСведенияНМА.НачислятьАмортизацию
	|	И СписаныеНМА.НематериальныйАктив ЕСТЬ NULL 
	|ИТОГИ
	|	СУММА(СтоимостьКонечныйОстаток),
	|	СУММА(СтоимостьНачальныйОстаток),
	|	СУММА(АмортизацияОборот),
	|	СУММА(АмортизацияКонечныйОстаток)
	|ПО
	|	НематериальныйАктив";
	
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НематериальныйАктив");
	
	МассивКоэфф = Новый Массив;
	
	Пока ВыборкаПоНМА.Следующий() Цикл
		
		ВыборкаСтрокиЗапроса = ВыборкаПоНМА.Выбрать();
		ВыборкаСтрокиЗапроса.Следующий();
		
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Учет индивидуального предпринимателя: для нематериального актива %1 (%2)'"),
			ВыборкаСтрокиЗапроса.НематериальныйАктивПредставление,
			СокрЛП(ВыборкаСтрокиЗапроса.НематериальныйАктивКод));
					
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + НСтр("ru = ' не указан метод начисления амортизации'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНачальныйОстаток) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.СрокПолезногоИспользования) Тогда
			Если Реквизиты.ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения +  НСтр("ru = срок использования равен 0'"));
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		СуммаАмортизации	= ВыборкаПоНМА.СтоимостьНачальныйОстаток / Макс(1, ВыборкаСтрокиЗапроса.СрокПолезногоИспользования);
		
		СуммаАмортизации	= Макс(0,
			Мин(ВыборкаПоНМА.СтоимостьКонечныйОстаток - ВыборкаПоНМА.АмортизацияКонечныйОстаток,
				СуммаАмортизации - ВыборкаПоНМА.АмортизацияОборот));
		
		МассивКоэфф.Очистить();
		НачКоличСтрокТабАмортизации	= ТаблицаАмортизации.Количество();
		
		ВыборкаСтрокиЗапроса.Сбросить();
		Пока ВыборкаСтрокиЗапроса.Следующий() Цикл
		
			МассивКоэфф.Добавить(ВыборкаСтрокиЗапроса.СтоимостьНачальныйОстаток);
			
			СтрокаАмортизации = ТаблицаАмортизации.Добавить();
			СтрокаАмортизации.ОбъектУчета					= ВыборкаСтрокиЗапроса.НематериальныйАктив;
			СтрокаАмортизации.НаправлениеАмортизации		= ВыборкаСтрокиЗапроса.НаправлениеАмортизации;
			СтрокаАмортизации.РасчетныйДокумент				= ВыборкаСтрокиЗапроса.РасчетныйДокумент;
			СтрокаАмортизации.ДокументОплаты				= ВыборкаСтрокиЗапроса.ДокументОплаты;
			СтрокаАмортизации.НоменклатурнаяГруппа			= ВыборкаСтрокиЗапроса.НоменклатурнаяГруппа;
			СтрокаАмортизации.ХарактерДеятельности			= ВыборкаСтрокиЗапроса.ХарактерДеятельности;
			СтрокаАмортизации.ВидМПЗ						= ВыборкаСтрокиЗапроса.ВидМПЗ;
			СтрокаАмортизации.АмортизацияКонечныйОстаток	= ВыборкаСтрокиЗапроса.АмортизацияКонечныйОстаток;
		КонецЦикла;
		
		МассивСуммАмортизации	= ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаАмортизации, МассивКоэфф, 2);
		
		Если МассивСуммАмортизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСуммАмортизации.Количество() > 0 Тогда
			Для Индекс = 0 По МассивСуммАмортизации.Количество() - 1 Цикл
				ТаблицаАмортизации[НачКоличСтрокТабАмортизации + Индекс].СуммаАмортизацииБУ = МассивСуммАмортизации[Индекс];
				ТаблицаАмортизации[НачКоличСтрокТабАмортизации + Индекс].СуммаАмортизацииНУ = МассивСуммАмортизации[Индекс];
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции

Функция ПодготовитьПараметрыТаблицыНачисленияАмортизацииНМА(ТаблицаЗатрат, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокЗатрат
	
	СписокОбязательныхКолонок = ""
		+ "ОбъектУчета";			// <СправочникСсылка.*> - объект учета
		
	Параметры.Вставить("СписокЗатрат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаЗатрат, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"			// <СправочникСсылка.Организации> - организация
		+ "ВыдаватьСообщения";		// <Булево>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
		
КонецФункции

Функция ПолучитьПустуютаблицуАмортизации()
	Перем ТаблицаАмортизации;
	
	ТаблицаАмортизации	= Новый ТаблицаЗначений;
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки",					ОбщегоНазначения.ОписаниеТипаЧисло(5,0));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета",					Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы,"));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение",				БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииБУ",			ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ",			ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР",			ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР",			ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("РасчетныйДокумент",			Документы.ТипВсеСсылки());
	ТаблицаАмортизации.Колонки.Добавить("ДокументОплаты",				Документы.ТипВсеСсылки());
	ТаблицаАмортизации.Колонки.Добавить("НоменклатурнаяГруппа",			Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаАмортизации.Колонки.Добавить("ХарактерДеятельности",			Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияКонечныйОстаток",	ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("ВидМПЗ",						Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаЗатрат)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);

	ПрочиеРасходы = ПолучитьТаблицуРасходовПоАмортизации(Параметры.СписокЗатрат, УчетнаяПолитикаНУ);
	
	Движения.ИППрочиеРасходы.Записывать = Истина;
	
	Для Каждого Расходы Из ПрочиеРасходы Цикл
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Расходы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокЗатрат
	
	СписокОбязательныхКолонок = ""
		+ "ОбъектУчета,"			// <СправочникСсылка.*> - объект учета
		+ "РасчетныйДокумент,"		// <ДокументСсылка.*> - расчетный документ
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "СуммаБУ,"				// <Число,15,2> - сумма амортизации
		+ "СчетЗатрат,"				// <ПланСчетовСсылка.Хозрасчетный> - счет затрат по амортизации
		+ "Субконто1,"				// <Характеристика.ВидыСубконтоХозрасчетные> - субконто затрат по амортизации
		+ "Субконто2,"				// <Характеристика.ВидыСубконтоХозрасчетные> - субконто затрат по амортизации
		+ "Субконто3,";				// <Характеристика.ВидыСубконтоХозрасчетные> - субконто затрат по амортизации
		
	Параметры.Вставить("СписокЗатрат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаЗатрат, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область СписаниеРБП

Функция ПодготовитьТаблицыСписанияРБП(ТаблицаРасчетСписанияРБП, ТаблицаРеквизитов, Отказ) Экспорт
	
	ТаблицыСписанияРБП = Новый Структура("РБП, ПрочиеРасходы");
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат ТаблицыСписанияРБП;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыСписанияРБП;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицСписанияРБП(ТаблицаРасчетСписанияРБП, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.РасчетСписанияРБП.Колонки.СчетСписания.Имя = "СчетУчета";
	Параметры.РасчетСписанияРБП.Колонки.Добавить("СтатьяЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат, СправочникСсылка.ПрочиеДоходыИРасходы"));
	
	Для каждого СтрокаСписания Из Параметры.РасчетСписанияРБП Цикл
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(СтрокаСписания.СчетУчета,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтатьиЗатрат"]);
		Если НомерСубконто <> 0 Тогда
			СтрокаСписания.СтатьяЗатрат = СтрокаСписания["СубконтоЗатрат" + НомерСубконто];
		Иначе
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(СтрокаСписания.СчетУчета,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ПрочиеДоходыИРасходы"]);
			Если НомерСубконто <> 0 Тогда
				СтрокаСписания.СтатьяЗатрат = СтрокаСписания["СубконтоЗатрат" + НомерСубконто];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Параметры.РасчетСписанияРБП.Колонки.Удалить("СубконтоЗатрат1");
	Параметры.РасчетСписанияРБП.Колонки.Удалить("СубконтоЗатрат2");
	Параметры.РасчетСписанияРБП.Колонки.Удалить("СубконтоЗатрат3");
	
	РасчетСписанияРБП = ДополнитьТаблицуРекизитамиСтатейЗатрат(Параметры.РасчетСписанияРБП);
	
	Если ТранзакцияАктивна() Тогда
		//Установка управляемой блокировки
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПРБП");
		ОписаниеИсточника = Новый Структура("ВидРасхода", "Статья");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПРБП");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.ИсточникДанных = 
			ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, РасчетСписанияРБП, ОписаниеИсточника);
		Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
		КонецЦикла;
		Блокировка.Заблокировать();

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца",            Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",            Реквизиты.Организация);
	Запрос.УстановитьПараметр("РасходыБудущихПериодов", ОбщегоНазначения.ВыгрузитьКолонку(РасчетСписанияРБП, "Статья", Истина));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПРБПОстатки.НоменклатурнаяГруппа,
	|	ИПРБПОстатки.ХарактерДеятельности,
	|	ИПРБПОстатки.ВидРасхода,
	|	ИПРБПОстатки.Партия,
	|	ИПРБПОстатки.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПРБПОстатки.СуммаОстаток,
	|	ИПРБПОстатки.НДСОстаток
	|ИЗ
	|	РегистрНакопления.ИПРБП.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ВидРасхода В (&РасходыБудущихПериодов)) КАК ИПРБПОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПРБПОстатки.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	ОстаткиРБП = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ОстаткиРБП, "НомерСтроки");
	ОстаткиРБП.Индексы.Добавить("НомерСтроки");
	ОстаткиРБП.Индексы.Добавить("ВидРасхода");
	
	РБП           = ПустаяТаблицаРегистраНакопления("ИПРБП", Ложь);
	ПрочиеРасходы = ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы", Ложь);
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СтруктураПараметров = Новый Структура("ВидМПЗ, СчетУчета, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат, НоменклатурнаяГруппа");
	СтруктураПараметров.ВидМПЗ = Перечисления.ВидыМПЗ.РБП;
	
	Для каждого СтрокаРасчета Из РасчетСписанияРБП Цикл
		
		Если СтрокаРасчета.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаРасчета);
		
		НайденныеСтроки = ОстаткиРБП.Скопировать(Новый Структура("ВидРасхода", СтрокаРасчета.Статья));
		НайденныеСтроки.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
		
		Для каждого СтрокаОстатка Из НайденныеСтроки Цикл
			
			Если СтрокаОстатка.СуммаОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОстатка.СуммаОстаток > СтрокаРасчета.Сумма Тогда
				Сумма = СтрокаРасчета.Сумма;
				НДС   = Окр(СтрокаОстатка.НДСОстаток * СтрокаРасчета.Сумма/СтрокаОстатка.СуммаОстаток, 2, 1);
			Иначе
				Сумма = СтрокаОстатка.СуммаОстаток;
				НДС   = СтрокаОстатка.НДСОстаток;
			КонецЕсли;
			
			НоваяСтрока = РБП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.Сумма = Сумма;
			НоваяСтрока.НДС   = НДС;
			
			Если СтрокаРасчета.ПринятиеКналоговомуУчету Тогда
				
				СтруктураПараметров.НоменклатурнаяГруппа = СтрокаОстатка.НоменклатурнаяГруппа;
				
				НоваяСтрока = ПрочиеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
				НоваяСтрока.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
				НоваяСтрока.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
				НоваяСтрока.СтатьяЗатрат         = СтрокаРасчета.СтатьяЗатрат;
				НоваяСтрока.РасчетныйДокумент    = СтрокаОстатка.Партия;
				НоваяСтрока.Сумма                = Сумма;
				НоваяСтрока.НДС                  = НДС;
				
			КонецЕсли;
			
			СтрокаОстатка.СуммаОстаток = СтрокаОстатка.СуммаОстаток - Сумма;
			СтрокаОстатка.НДСОстаток   = СтрокаОстатка.НДСОстаток - НДС;
			
			ЗаполнитьЗначенияСвойств(ОстаткиРБП.Найти(СтрокаОстатка.НомерСтроки, "НомерСтроки"), СтрокаОстатка, "СуммаОстаток, НДСОстаток");
			
			СтрокаРасчета.Сумма = СтрокаРасчета.Сумма - Сумма;
			Если СтрокаРасчета.Сумма <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицыСписанияРБП.РБП           = РБП;
	ТаблицыСписанияРБП.ПрочиеРасходы = ПрочиеРасходы;
	
	Возврат ТаблицыСписанияРБП;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицСписанияРБП(ТаблицаРасчетСписанияРБП, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Статья,"           // <СправочникСсылка.РасходыБудущихПериодов>
	+ "СчетСписания,"     // <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоЗатрат1,"  // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоЗатрат2,"  // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоЗатрат3,"  // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Сумма";            // <Число, 15, 2>
	
	Параметры.Вставить("РасчетСписанияРБП", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетСписанияРБП, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Организация," // <СправочникСсылка.Организации> - организация
		+ "Регистратор"; // <ДокументСсылка.*> - документ-регистратор движений
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияСписанияРБП(ТаблицаРБП, ТаблицаПрочихРасходов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРБП)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСписанияРБП(ТаблицаРБП, ТаблицаПрочихРасходов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	Движения.ИПРБП.Записывать = Истина;
	
	Для каждого РБП Из Параметры.СписокРБП Цикл
		
		Движение = Движения.ИПРБП.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, РБП);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
	Если Параметры.СписокПрочихРасходов.Количество() > 0 Тогда
		Движения.ИППрочиеРасходы.Записывать = Истина;
	КонецЕсли;
	
	Для каждого ПрочиеРасходы Из Параметры.СписокПрочихРасходов Цикл
		
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ПрочиеРасходы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСписанияРБП(ТаблицаРБП, ТаблицаПрочихРасходов, Реквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РБП
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа," // <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности," // <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидРасхода,"           // <СправочникСсылка.РасходыБудущихПериодов>
		+ "Партия,"               // <ДокументСсылка.*> - документ поставки
		+ "ДокументОплаты,"       // <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"                // <Число,15,2> - сумма в рублях без НДС
		+ "НДС";                  // <Число,15,2> - сумма НДС в рублях
		
	Параметры.Вставить("СписокРБП", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРБП, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ПрочиеРасходы
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа," // <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности," // <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "СтатьяЗатрат,"         // <СправочникСсылка.СтатьиЗатрат, СправочникСсылка.ПрочиеДоходыИРасходы> - статья затрат
		+ "РасчетныйДокумент,"    // <ДокументСсылка.*> - документ поставки
		+ "ДокументОплаты,"       // <ДокументСсылка.*> - документ оплаты
		+ "Сумма,"                // <Число,15,2> - сумма в рублях без НДС
		+ "НДС";                  // <Число,15,2> - сумма НДС в рублях
	
	Параметры.Вставить("СписокПрочихРасходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПрочихРасходов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		Реквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область РасходыНаОплатуТруда

Процедура СформироватьДвиженияРасходовНаОплатуТруда(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыПроведения.ТаблицаНачисленияУдержания)
	 Или Не ЗначениеЗаполнено(ПараметрыПроведения.Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРасходовНаОплатуТруда(ПараметрыПроведения.ТаблицаНачисленияУдержания, ПараметрыПроведения.Реквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	Параметры.Реквизиты.Колонки.Ссылка.Имя = "Регистратор";
	Реквизиты.Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Регистратор, "Дата");
	
	СписокНачисленийУдержаний = Параметры.СписокНачисленийУдержаний;
	
	СтруктураРасходовНаОплатуТруда = ПодготовитьСтруктуруРасходовНаОплатуТруда(СписокНачисленийУдержаний, Реквизиты, Движения, Отказ);
	
	ВыполнитьДвиженияРасходовНаОплатуТруда(СтруктураРасходовНаОплатуТруда, Реквизиты, Движения, Отказ);
	
	ПараметрыПроведения.Вставить("ТаблицаПрочиеРасходы", СтруктураРасходовНаОплатуТруда.ПрочиеРасходы);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРасходовНаОплатуТруда(ТаблицаНачисленияУдержания, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокНачисленийУдержаний
	
	СписокОбязательныхКолонок = ""
		+ "Счет,"						// <ПланСчетовСсылка.Хозрасчетный>
		+ "Субконто1,"					// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто2,"					// <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "Субконто3,"					// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСчет,"					// <ПланСчетовСсылка.Хозрасчетный> 
		+ "КорСубконто1,"				// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСубконто2,"				// <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "КорСубконто3,"				// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "ВидНачисленияУдержания,"		// <ПеречислениеСсылка.ИПВидыНачисленийУдержаний> - вид начисления/удержания
		+ "Сумма";						// <Сумма, 15, 2> - сумма начисления/удержания в рублях
		
	Параметры.Вставить("СписокНачисленийУдержаний", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачисленияУдержания, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Ссылка,"						// <ДокументСсылка.*> - документ-регистратор движений
		+ "Удержания,"					// <Булево> - указатель на отражение в учете только удержаний
		+ "Организация";				// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияРасходовНаОплатуТруда_Удержания(ПараметрыПроведения, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыПроведения.ТаблицаНачисленияУдержания)
	 Или Не ЗначениеЗаполнено(ПараметрыПроведения.Реквизиты) Тогда
		Возврат;
	КонецЕсли;
	 
	Реквизиты = ПараметрыПроведения.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	 
	Параметры = ПодготовитьПараметрыРасходовНаОплатуТруда_Удержания(ПараметрыПроведения.ТаблицаНачисленияУдержания, ПараметрыПроведения.Реквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	Параметры.Реквизиты.Колонки.Добавить("Удержания");
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "Удержания");
	Параметры.Реквизиты.Колонки.Ссылка.Имя = "Регистратор";
	Реквизиты.Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Регистратор, "Дата");
	
	СписокУдержаний = Параметры.СписокУдержаний;
	
	СписокУдержаний.Колонки.КорСчет.Имя      = "ВремСчет";
	СписокУдержаний.Колонки.КорСубконто1.Имя = "ВремСубконто1";
	СписокУдержаний.Колонки.КорСубконто2.Имя = "ВремСубконто2";
	СписокУдержаний.Колонки.КорСубконто3.Имя = "ВремСубконто3";
	
	СписокУдержаний.Колонки.Счет.Имя      = "КорСчет";
	СписокУдержаний.Колонки.Субконто1.Имя = "КорСубконто1";
	СписокУдержаний.Колонки.Субконто2.Имя = "КорСубконто2";
	СписокУдержаний.Колонки.Субконто3.Имя = "КорСубконто3";
	
	СписокУдержаний.Колонки.ВремСчет.Имя      = "Счет";
	СписокУдержаний.Колонки.ВремСубконто1.Имя = "Субконто1";
	СписокУдержаний.Колонки.ВремСубконто2.Имя = "Субконто2";
	СписокУдержаний.Колонки.ВремСубконто3.Имя = "Субконто3";
	
	СтруктураРасходовНаОплатуТруда = ПодготовитьСтруктуруРасходовНаОплатуТруда(СписокУдержаний, Реквизиты, Движения, Отказ);
	
	ВыполнитьДвиженияРасходовНаОплатуТруда(СтруктураРасходовНаОплатуТруда, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРасходовНаОплатуТруда_Удержания(ТаблицаУдержания, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокУдержаний
	
	СписокОбязательныхКолонок = ""
		+ "Счет,"						// <ПланСчетовСсылка.Хозрасчетный>
		+ "Субконто1,"					// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто2,"					// <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "Субконто3,"					// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСчет,"					// <ПланСчетовСсылка.Хозрасчетный> 
		+ "КорСубконто1,"				// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСубконто2,"				// <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "КорСубконто3,"				// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "ВидНачисленияУдержания,"		// <ПеречислениеСсылка.ИПВидыНачисленийУдержаний> - вид начисления/удержания
		+ "Сумма";						// <Сумма, 15, 2> - сумма начисления/удержания в рублях
		
	Параметры.Вставить("СписокУдержаний", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУдержания, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Ссылка,"						// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьСтруктуруРасходовНаОплатуТруда(СписокНачисленийУдержаний, Реквизиты, Движения, Отказ)
	
	СтруктураРасходовНаОплатуТруда = Новый Структура();
	СтруктураРасходовНаОплатуТруда.Вставить("РасходыНаОплатуТруда", ПустаяТаблицаРегистраНакопления("ИПРасходыНаОплатуТруда", Ложь));
	СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда.Колонки.Добавить("СчетУчета",         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	СтруктураРасходовНаОплатуТруда.Вставить("ПрочиеРасходы", ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы", Ложь));
	СтруктураРасходовНаОплатуТруда.Вставить("ПрочиеРасчеты", ПустаяТаблицаРегистраНакопления("ПрочиеРасчеты", Ложь));
	
	МассивТиповЗатрат = Новый Массив;
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	МассивТиповЗатрат.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	
	МассивТиповКонтрагентов = Новый Массив;
	МассивТиповКонтрагентов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	МассивТиповКонтрагентов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	
	ТаблицаОплатыТруда = Новый ТаблицаЗначений;
	ТаблицаОплатыТруда.Колонки.Добавить("ФизЛицо",                Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаОплатыТруда.Колонки.Добавить("ВидНачисленияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
	ТаблицаОплатыТруда.Колонки.Добавить("СтатьяЗатрат",           Новый ОписаниеТипов(МассивТиповЗатрат));
	ТаблицаОплатыТруда.Колонки.Добавить("ХарактерДеятельности",   Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ТаблицаОплатыТруда.Колонки.Добавить("НоменклатурнаяГруппа",   Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаОплатыТруда.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОплатыТруда.Индексы.Добавить("ФизЛицо, ВидНачисленияУдержания, СтатьяЗатрат, ХарактерДеятельности, НоменклатурнаяГруппа");
	ОтборОплатыТруда  = Новый Структура("ФизЛицо, ВидНачисленияУдержания, СтатьяЗатрат, ХарактерДеятельности, НоменклатурнаяГруппа");
	
	ВремТаблицаУдержаний = Новый ТаблицаЗначений;
	ВремТаблицаУдержаний.Колонки.Добавить("СчетУчета",              Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ВремТаблицаУдержаний.Колонки.Добавить("ФизЛицо",                Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ВремТаблицаУдержаний.Колонки.Добавить("Контрагент",             Новый ОписаниеТипов(МассивТиповКонтрагентов));
	ВремТаблицаУдержаний.Колонки.Добавить("ВидНачисленияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
	ВремТаблицаУдержаний.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ВремТаблицаУдержаний.Индексы.Добавить("ФизЛицо, СчетУчета, Контрагент, ВидНачисленияУдержания");
	ОтборУдержаний  = Новый Структура("ФизЛицо, СчетУчета, Контрагент, ВидНачисленияУдержания");
	
	ТаблицаВзносов = Новый ТаблицаЗначений;
	ТаблицаВзносов.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаВзносов.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ТаблицаВзносов.Колонки.Добавить("СчетУчета",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВзносов.Колонки.Добавить("СтатьяЗатрат",         Новый ОписаниеТипов(МассивТиповЗатрат));
	ТаблицаВзносов.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВзносов.Индексы.Добавить("СчетУчета, СтатьяЗатрат, НоменклатурнаяГруппа, ХарактерДеятельности");
	ОтборВзносов  = Новый Структура("СчетУчета, СтатьяЗатрат, НоменклатурнаяГруппа, ХарактерДеятельности");
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокНачисленийУдержаний.Колонки.Добавить("СчетУчета",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СписокНачисленийУдержаний.Колонки.Добавить("ФизЛицо",              Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	СписокНачисленийУдержаний.Колонки.Добавить("Контрагент",           Новый ОписаниеТипов(МассивТиповКонтрагентов));
	СписокНачисленийУдержаний.Колонки.Добавить("СтатьяЗатрат",         Новый ОписаниеТипов(МассивТиповЗатрат));
	СписокНачисленийУдержаний.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	
	Для каждого Начисление Из СписокНачисленийУдержаний Цикл
		
		Если Начисление.КорСчет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
			
			// Начислена заработная плата
			Начисление.СчетУчета  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Начисление.ФизЛицо    = Начисление.КорСубконто1;
			Начисление.Контрагент = Начисление.КорСубконто1;
			
		ИначеЕсли Начисление.КорСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами
				И ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
			
			// Начислены расходы по договору подряда
			Начисление.СчетУчета  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Начисление.ФизЛицо    = Начисление.КорСубконто1;
			Начисление.Контрагент = Начисление.КорСубконто1;
			
		ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(
				Начисление.КорСчет, ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию) Тогда
			
			// Начислены страховые взносы
			Начисление.СчетУчета  = Начисление.КорСчет;
			Начисление.ФизЛицо    = Справочники.ФизическиеЛица.ПустаяСсылка();
			Начисление.Контрагент = Неопределено;
			
		ИначеЕсли (Начисление.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда
				Или (Начисление.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами
					И ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")))
			И (Начисление.КорСчет = ПланыСчетов.Хозрасчетный.НДФЛ
				Или Начисление.КорСчет = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины) Тогда
			
			// Удержан НДФЛ
			Начисление.СчетУчета  = Начисление.КорСчет;
			Начисление.ФизЛицо    = Начисление.Субконто1;
			Начисление.Контрагент = Неопределено;
			
		ИначеЕсли Начисление.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда
			И ТипЗнч(Начисление.КорСубконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			// Прочие удержания
			Начисление.СчетУчета  = Начисление.КорСчет;
			Начисление.ФизЛицо    = Начисление.Субконто1;
			Начисление.Контрагент = Начисление.КорСубконто1;
			
		КонецЕсли;
		
		Для НомерСубконто = 1 По 3 Цикл
			
			ЗначениеСубконто = Начисление["Субконто" + НомерСубконто];
			Если Не ЗначениеЗаполнено(ЗначениеСубконто) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипСубконто = ТипЗнч(ЗначениеСубконто);
			Если ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Начисление.НоменклатурнаяГруппа = ЗначениеСубконто;
			ИначеЕсли МассивТиповЗатрат.Найти(ТипСубконто) <> Неопределено Тогда
				Начисление.СтатьяЗатрат = ЗначениеСубконто;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНачисленийУдержаний = ДополнитьТаблицуРекизитамиСтатейЗатрат(СписокНачисленийУдержаний);
	
	Для каждого Начисление Из ТаблицаНачисленийУдержаний Цикл
		
		Если Начисление.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НоменклатурнаяГруппа", Начисление.НоменклатурнаяГруппа);
		СтруктураПараметров.Вставить("ВидМПЗ", ВидМПЗПоСчетуУчета(Начисление.Счет, Начисление.СтатьяЗатрат, Начисление.ВидРасходовНУ, Начисление.ПринятиеКналоговомуУчету));
		СтруктураПараметров.Вставить("СчетУчета", Начисление.Счет);
		СтруктураПараметров.Вставить("СтатьяЗатрат", Начисление.СтатьяЗатрат);
		СтруктураПараметров.Вставить("ВидДеятельностиДляНалоговогоУчетаЗатрат", Начисление.ВидДеятельностиДляНалоговогоУчетаЗатрат);
		
		Если Начисление.КорСчет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
			
			// Начислена заработная плата
			ЗаполнитьЗначенияСвойств(ОтборОплатыТруда, Начисление);
			
			ОтборОплатыТруда.НоменклатурнаяГруппа   = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			ОтборОплатыТруда.ХарактерДеятельности   = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			
			НайденныеСтроки = ТаблицаОплатыТруда.НайтиСтроки(ОтборОплатыТруда);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаОплаты = ТаблицаОплатыТруда.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОплаты, ОтборОплатыТруда);
			Иначе
				СтрокаОплаты = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаОплаты.Сумма = СтрокаОплаты.Сумма + Начисление.Сумма;
			
		ИначеЕсли Начисление.КорСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами
				И ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
			
			// Начислены расходы по договору подряда
			ЗаполнитьЗначенияСвойств(ОтборОплатыТруда, Начисление);
			
			ОтборОплатыТруда.НоменклатурнаяГруппа   = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			ОтборОплатыТруда.ХарактерДеятельности   = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			
			НайденныеСтроки = ТаблицаОплатыТруда.НайтиСтроки(ОтборОплатыТруда);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаОплаты = ТаблицаОплатыТруда.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОплаты, ОтборОплатыТруда);
			Иначе
				СтрокаОплаты = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаОплаты.Сумма = СтрокаОплаты.Сумма + Начисление.Сумма;
			
		ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(
				Начисление.КорСчет, ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию) Тогда
			
			// Начислены страховые взносы
			ЗаполнитьЗначенияСвойств(ОтборВзносов, Начисление);
			
			ОтборВзносов.НоменклатурнаяГруппа   = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
			ОтборВзносов.ХарактерДеятельности   = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
			
			НайденныеСтроки = ТаблицаВзносов.НайтиСтроки(ОтборВзносов);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаВзносов = ТаблицаВзносов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВзносов, ОтборВзносов);
			Иначе
				СтрокаВзносов = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаВзносов.Сумма = СтрокаВзносов.Сумма + Начисление.Сумма;
			
		ИначеЕсли (Начисление.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда
				Или (Начисление.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами
					И ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")))
			И (Начисление.КорСчет = ПланыСчетов.Хозрасчетный.НДФЛ
				Или Начисление.КорСчет = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины) Тогда
			
			// Удержан НДФЛ
			ЗаполнитьЗначенияСвойств(ОтборУдержаний, Начисление);
			
			НайденныеСтроки = ВремТаблицаУдержаний.НайтиСтроки(ОтборУдержаний);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаУдержаний = ВремТаблицаУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУдержаний, ОтборУдержаний);
			Иначе
				СтрокаУдержаний = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаУдержаний.Сумма = СтрокаУдержаний.Сумма + Начисление.Сумма;
			
		ИначеЕсли Начисление.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда
			И ТипЗнч(Начисление.КорСубконто1) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			// Прочие удержания
			ЗаполнитьЗначенияСвойств(ОтборУдержаний, Начисление);
			
			НайденныеСтроки = ВремТаблицаУдержаний.НайтиСтроки(ОтборУдержаний);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаУдержаний = ВремТаблицаУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУдержаний, ОтборУдержаний);
			Иначе
				СтрокаУдержаний = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаУдержаний.Сумма = СтрокаУдержаний.Сумма + Начисление.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополняем удержания видами деятельности и статьями затрат из таблицы начислений
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОплатыТруда);
	ТаблицаОплатыТруда.Индексы.Добавить("НомерСтроки");
	
	ТаблицаУдержаний = ВремТаблицаУдержаний.СкопироватьКолонки();
	ТаблицаУдержаний.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаУдержаний.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ТаблицаУдержаний.Колонки.Добавить("СтатьяЗатрат",         Новый ОписаниеТипов(МассивТиповЗатрат));
	
	Для каждого СтрокаУдержаний Из ВремТаблицаУдержаний Цикл
		
		НайденныеСтроки = ТаблицаОплатыТруда.Скопировать(Новый Структура("ФизЛицо", СтрокаУдержаний.ФизЛицо));
		НайденныеСтроки.Сортировать("НомерСтроки");
		МассивКоэффициентов = НайденныеСтроки.ВыгрузитьКолонку("Сумма");
		
		РаспределеннаяСумма = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаУдержаний.Сумма, МассивКоэффициентов, 2);
		
		Если РаспределеннаяСумма = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Для Индекс = 0 По РаспределеннаяСумма.ВГраница() Цикл
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.НоменклатурнаяГруппа = НайденныеСтроки[Индекс].НоменклатурнаяГруппа;
			НоваяСтрока.ХарактерДеятельности = НайденныеСтроки[Индекс].ХарактерДеятельности;
			НоваяСтрока.СтатьяЗатрат         = НайденныеСтроки[Индекс].СтатьяЗатрат;
			НоваяСтрока.Сумма                = РаспределеннаяСумма[Индекс];
		КонецЦикла;
		
	КонецЦикла;
	
	ВремТаблицаУдержаний = Неопределено;
	
	// Установка управляемой блокировки
	НоваяСтрока = ТаблицаНачисленийУдержаний.Добавить();
	
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
	ОписаниеИсточника = Новый Структура("СчетУчета, Контрагент",  "СчетУчета", "Контрагент");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ТаблицаНачисленийУдержаний, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	МассивКонтрагентов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНачисленийУдержаний, "Контрагент", Истина);
	МассивКонтрагентов.Добавить(Неопределено);
	
	МассивСчетовУчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНачисленийУдержаний, "СчетУчета", Истина);
	МассивСчетовУчета.Добавить(ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагенты",  МассивКонтрагентов);
	Запрос.УстановитьПараметр("СчетаУчета",   МассивСчетовУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТ_ПрочиеРасчетыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатков,
	|			Контрагент В (&Контрагенты)
	|				И СчетУчета В (&СчетаУчета)
	|				И Организация = &Организация) КАК ПрочиеРасчетыОстатки
	|ГДЕ
	|	ПрочиеРасчетыОстатки.СуммаОстаток < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
	|	-ПрочиеРасчетыОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	ВТ_ПрочиеРасчетыОстатки КАК ПрочиеРасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
	|			И ПрочиеРасчетыОстатки.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ";
	
	ТаблицаАвансов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаАвансов);
	ТаблицаАвансов.Индексы.Добавить("НомерСтроки");
	ТаблицаАвансов.Индексы.Добавить("СчетУчета, Контрагент");
	
	ПараметрыОтбора = Новый Структура("СчетУчета, Контрагент");
	
	ТаблицаОплаченныхУдержаний = ТаблицаАвансов.СкопироватьКолонки();
	ТаблицаОплаченныхУдержаний.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	// Удержания
	Для каждого СтрокаУдержаний Из ТаблицаУдержаний Цикл
		
		// Зачет аванса
		ПараметрыОтбора.СчетУчета  = СтрокаУдержаний.СчетУчета;
		ПараметрыОтбора.Контрагент = ?(ЗначениеЗаполнено(СтрокаУдержаний.Контрагент), СтрокаУдержаний.Контрагент, Неопределено);
		НайденныеСтроки = ТаблицаАвансов.Скопировать(ПараметрыОтбора);
		НайденныеСтроки.Сортировать("ДатаРасчетногоДокумента, РасчетныйДокумент", Новый СравнениеЗначений);
		
		Для Каждого СтрокаАванса Из НайденныеСтроки Цикл
			
			СуммаАванса = Мин(СтрокаАванса.Сумма, СтрокаУдержаний.Сумма);
			
			Если СуммаАванса > 0 Тогда
				
				НоваяСтрока = СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				НоваяСтрока.РасчетныйДокумент = СтрокаАванса.РасчетныйДокумент;
				НоваяСтрока.ДокументОплаты    = СтрокаАванса.РасчетныйДокумент;
				НоваяСтрока.Сумма             = СуммаАванса;
				
				НоваяСтрокаОплаченныхУдержаний = ТаблицаОплаченныхУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаченныхУдержаний, НоваяСтрока);
				
				СтрокаУдержаний.Сумма = СтрокаУдержаний.Сумма - СуммаАванса;
				СтрокаАванса.Сумма    = СтрокаАванса.Сумма - СуммаАванса;
				ЗаполнитьЗначенияСвойств(ТаблицаАвансов.Найти(СтрокаАванса.НомерСтроки, "НомерСтроки"), СтрокаАванса);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Неоплаченная часть
		Если СтрокаУдержаний.Сумма > 0 Тогда
			НоваяСтрока = СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОплаченныхУдержаний);
	ТаблицаОплаченныхУдержаний.Индексы.Добавить("НомерСтроки");
	ТаблицаОплаченныхУдержаний.Индексы.Добавить("ФизЛицо");
	
	// Оплата труда
	Если НЕ Реквизиты.Удержания Тогда
		
		Для каждого СтрокаОплатыТруда Из ТаблицаОплатыТруда Цикл
			
			// Зачет аванса
			ПараметрыОтбора.СчетУчета  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			ПараметрыОтбора.Контрагент = СтрокаОплатыТруда.ФизЛицо;
			НайденныеСтроки = ТаблицаАвансов.Скопировать(ПараметрыОтбора);
			НайденныеСтроки.Сортировать("ДатаРасчетногоДокумента, РасчетныйДокумент", Новый СравнениеЗначений);
			
			Для Каждого СтрокаАванса Из НайденныеСтроки Цикл
				
				СуммаАванса = Мин(СтрокаАванса.Сумма, СтрокаОплатыТруда.Сумма);
				
				Если СуммаАванса > 0 Тогда
					
					НоваяСтрока = СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыТруда);
					НоваяСтрока.РасчетныйДокумент = СтрокаАванса.РасчетныйДокумент;
					НоваяСтрока.ДокументОплаты    = СтрокаАванса.РасчетныйДокумент;
					НоваяСтрока.Сумма             = СуммаАванса;
					
					СтрокаОплатыТруда.Сумма = СтрокаОплатыТруда.Сумма - СуммаАванса;
					СтрокаАванса.Сумма      = СтрокаАванса.Сумма - СуммаАванса;
					ЗаполнитьЗначенияСвойств(ТаблицаАвансов.Найти(СтрокаАванса.НомерСтроки, "НомерСтроки"), СтрокаАванса);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Зачет оплаченного НДФЛ
			Если СтрокаОплатыТруда.Сумма > 0 Тогда
				
				НайденныеСтроки = ТаблицаОплаченныхУдержаний.Скопировать(Новый Структура("ФизЛицо", СтрокаОплатыТруда.ФизЛицо));
				НайденныеСтроки.Сортировать("ДатаРасчетногоДокумента, РасчетныйДокумент", Новый СравнениеЗначений);
				
				Для Каждого СтрокаАванса Из НайденныеСтроки Цикл
					
					СуммаАванса = Мин(СтрокаАванса.Сумма, СтрокаОплатыТруда.Сумма);
					
					Если СуммаАванса > 0 Тогда
						
						НоваяСтрока = СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыТруда);
						НоваяСтрока.РасчетныйДокумент = СтрокаАванса.РасчетныйДокумент;
						НоваяСтрока.ДокументОплаты    = СтрокаАванса.РасчетныйДокумент;
						НоваяСтрока.Сумма             = СуммаАванса;
						
						НоваяСтрока = СтруктураРасходовНаОплатуТруда.ПрочиеРасчеты.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыТруда);
						НоваяСтрока.РасчетныйДокумент = СтрокаАванса.РасчетныйДокумент;;
						НоваяСтрока.Контрагент        = СтрокаОплатыТруда.ФизЛицо;
						НоваяСтрока.Сумма             = СуммаАванса;
						
						СтрокаОплатыТруда.Сумма = СтрокаОплатыТруда.Сумма - СуммаАванса;
						СтрокаАванса.Сумма      = СтрокаАванса.Сумма - СуммаАванса;
						ЗаполнитьЗначенияСвойств(ТаблицаОплаченныхУдержаний.Найти(СтрокаАванса.НомерСтроки, "НомерСтроки"), СтрокаАванса);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Неоплаченная часть
			Если СтрокаОплатыТруда.Сумма > 0 Тогда
				НоваяСтрока = СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплатыТруда);
				НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Страховые взносы
	Для каждого СтрокаВзносов Из ТаблицаВзносов Цикл
		
		ПараметрыОтбора.СчетУчета  = СтрокаВзносов.СчетУчета;
		ПараметрыОтбора.Контрагент = Неопределено;
		
		НайденныеСтроки = ТаблицаАвансов.Скопировать(ПараметрыОтбора);
		НайденныеСтроки.Сортировать("ДатаРасчетногоДокумента, РасчетныйДокумент", Новый СравнениеЗначений);
		
		// Зачет аванса
		Для Каждого СтрокаАванса Из НайденныеСтроки Цикл
			
			СуммаАванса = Мин(СтрокаАванса.Сумма, СтрокаВзносов.Сумма);
			
			Если СуммаАванса > 0 Тогда
				
				НоваяСтрока = СтруктураРасходовНаОплатуТруда.ПрочиеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВзносов);
				НоваяСтрока.РасчетныйДокумент = СтрокаАванса.РасчетныйДокумент;
				НоваяСтрока.ДокументОплаты    = СтрокаАванса.РасчетныйДокумент;
				НоваяСтрока.Сумма             = СуммаАванса;
				
				СтрокаВзносов.Сумма = СтрокаВзносов.Сумма - СуммаАванса;
				СтрокаАванса.Сумма  = СтрокаАванса.Сумма - СуммаАванса;
				ЗаполнитьЗначенияСвойств(ТаблицаАвансов.Найти(СтрокаАванса.НомерСтроки, "НомерСтроки"), СтрокаАванса);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Неоплаченная часть взноса
		Если СтрокаВзносов.Сумма > 0 Тогда
			НоваяСтрока = СтруктураРасходовНаОплатуТруда.ПрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВзносов);
			НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРасходовНаОплатуТруда;
	
КонецФункции

Процедура ВыполнитьДвиженияРасходовНаОплатуТруда(СтруктураРасходовНаОплатуТруда, Реквизиты, Движения, Отказ)
	
	ТаблицаПрочихРасчетов = ПустаяТаблицаРегистраНакопления("ПрочиеРасчеты", Ложь);
	ТаблицаПрочихРасчетов.Индексы.Добавить("СчетУчета, Контрагент, РасчетныйДокумент");
	ОтборПрочихРасчетов = Новый Структура("СчетУчета, Контрагент, РасчетныйДокумент");
	
	// Оплата труда
	
	Если СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда.Количество() > 0 Тогда
		Движения.ИПРасходыНаОплатуТруда.Записывать = Истина;
	КонецЕсли;
	
	Для Каждого РасходыНаОплатуТруда Из СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда Цикл
		
		Если ЗначениеЗаполнено(РасходыНаОплатуТруда.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РасходыНаОплатуТруда.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, РасходыНаОплатуТруда);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.РасчетныйДокумент = Реквизиты.Регистратор;
		
		ОтборПрочихРасчетов.СчетУчета         = РасходыНаОплатуТруда.СчетУчета;
		ОтборПрочихРасчетов.Контрагент        = ?(ЗначениеЗаполнено(РасходыНаОплатуТруда.СчетУчета), Неопределено, РасходыНаОплатуТруда.ФизЛицо);
		ОтборПрочихРасчетов.РасчетныйДокумент = ?(ЗначениеЗаполнено(РасходыНаОплатуТруда.ДокументОплаты),
			РасходыНаОплатуТруда.ДокументОплаты, Реквизиты.Регистратор);
		
		НайденныеСтроки = ТаблицаПрочихРасчетов.НайтиСтроки(ОтборПрочихРасчетов);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПрочихРасчетов = НайденныеСтроки[0];
		Иначе
			СтрокаПрочихРасчетов = ТаблицаПрочихРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПрочихРасчетов, ОтборПрочихРасчетов);
		КонецЕсли;
		
		СтрокаПрочихРасчетов.Сумма = СтрокаПрочихРасчетов.Сумма + РасходыНаОплатуТруда.Сумма;
		
	КонецЦикла;
	
	// Удержания
	Для Каждого РасходыНаОплатуТруда Из СтруктураРасходовНаОплатуТруда.РасходыНаОплатуТруда Цикл
		
		Если Не ЗначениеЗаполнено(РасходыНаОплатуТруда.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РасходыНаОплатуТруда.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, РасходыНаОплатуТруда);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.РасчетныйДокумент = Реквизиты.Регистратор;
		
		ОтборПрочихРасчетов.СчетУчета         = РасходыНаОплатуТруда.СчетУчета;
		ОтборПрочихРасчетов.РасчетныйДокумент = ?(ЗначениеЗаполнено(РасходыНаОплатуТруда.ДокументОплаты),
			РасходыНаОплатуТруда.ДокументОплаты, Реквизиты.Регистратор);
		Если РасходыНаОплатуТруда.ВидНачисленияУдержания = Перечисления.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист Тогда
			ОтборПрочихРасчетов.Контрагент = РасходыНаОплатуТруда.Контрагент;
		Иначе
			ОтборПрочихРасчетов.Контрагент = ?(ЗначениеЗаполнено(РасходыНаОплатуТруда.СчетУчета), Неопределено, РасходыНаОплатуТруда.ФизЛицо);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаПрочихРасчетов.НайтиСтроки(ОтборПрочихРасчетов);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПрочихРасчетов = НайденныеСтроки[0];
		Иначе
			СтрокаПрочихРасчетов = ТаблицаПрочихРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПрочихРасчетов, ОтборПрочихРасчетов);
		КонецЕсли;
		
		СтрокаПрочихРасчетов.Сумма = СтрокаПрочихРасчетов.Сумма + РасходыНаОплатуТруда.Сумма;
		
	КонецЦикла;
	
	// Страховые взносы
	Если СтруктураРасходовНаОплатуТруда.ПрочиеРасходы.Количество() > 0 Тогда
		Движения.ИППрочиеРасходы.Записывать = Истина;
	КонецЕсли;
	
	Для Каждого ПрочиеРасходы Из СтруктураРасходовНаОплатуТруда.ПрочиеРасходы Цикл
		
		Если ПрочиеРасходы.Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ПрочиеРасходы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.РасчетныйДокумент = Реквизиты.Регистратор;
		
		ОтборПрочихРасчетов.СчетУчета         = ПрочиеРасходы.СчетУчета;
		ОтборПрочихРасчетов.Контрагент        = Неопределено;
		ОтборПрочихРасчетов.РасчетныйДокумент = ПрочиеРасходы.РасчетныйДокумент;
		
		НайденныеСтроки = ТаблицаПрочихРасчетов.НайтиСтроки(ОтборПрочихРасчетов);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПрочихРасчетов = НайденныеСтроки[0];
		Иначе
			СтрокаПрочихРасчетов = ТаблицаПрочихРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПрочихРасчетов, ОтборПрочихРасчетов);
		КонецЕсли;
		
		СтрокаПрочихРасчетов.Сумма = СтрокаПрочихРасчетов.Сумма + ПрочиеРасходы.Сумма;
		
	КонецЦикла;
	
	// Прочие расчеты по оплате труда и взносам
	
	Если ТаблицаПрочихРасчетов.Количество() > 0 Или СтруктураРасходовНаОплатуТруда.ПрочиеРасчеты.Количество() > 0 Тогда
		Движения.ПрочиеРасчеты.Записывать = Истина;
	КонецЕсли;
	
	Для Каждого ПрочиеРасчеты Из ТаблицаПрочихРасчетов Цикл
		Движение = Движения.ПрочиеРасчеты.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, ПрочиеРасчеты);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
	// Зачет оплаченного НДФЛ
	Для Каждого ПрочиеРасчеты Из СтруктураРасходовНаОплатуТруда.ПрочиеРасчеты Цикл
		Движение = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, ПрочиеРасчеты);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыплатыЗарплаты

Функция ПодготовитьТаблицыВыплатыЗарплаты(ТаблицаВыплаты, ТаблицаРеквизитов) Экспорт
	Перем ТаблицыВыплатыЗарплаты;
	
	ТаблицыВыплатыЗарплаты = Новый Структура("СписокВыплат, СписокПереплат");
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаВыплаты) Тогда
		Возврат ТаблицыВыплатыЗарплаты;
	КонецЕсли;
	
	Если Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить()
	   И Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		Возврат ТаблицыВыплатыЗарплаты;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыВыплатыЗарплаты;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицВыплатыЗарплаты(ТаблицаВыплаты, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	СписокОплат = Параметры.СписокОплат;
	СписокОплат.Колонки.ФизическоеЛицо.Имя = "ФизЛицо";
	СписокОплат.Колонки.СуммаКВыплате.Имя  = "Сумма";
	
	СписокОплат.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	СписокОплат.ЗаполнитьЗначения(Реквизиты.Регистратор, "ДокументОплаты");
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ПрочиеРасчеты");
	ОписаниеИсточника = Новый Структура("Контрагент", "ФизЛицо");
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, СписокОплат, ОписаниеИсточника);
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "ФизЛицо");
	
	Блокировка.Заблокировать();
	
	СписокРаботников = ОбщегоНазначения.ВыгрузитьКолонку(СписокОплат, "ФизЛицо", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокРаботников", СписокРаботников);
	Запрос.УстановитьПараметр("ДатаОстатков",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И Контрагент В (&СписокРаботников)) КАК ПрочиеРасчетыОстатки";
	
	СписокРасчетныхДокументов =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РасчетныйДокумент");
	
	НачалоПериода = НачалоМесяца(ДатаПервогоДокумента(СписокРасчетныхДокументов));
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПРасходыНаОплатуТруда");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(НачалоПериода, Реквизиты.Период));
	
	ИзмеренияРегистра = Метаданные.РегистрыНакопления.ИПРасходыНаОплатуТруда.Измерения;
	СписокДляБлокировки = Новый ТаблицаЗначений;
	СписокДляБлокировки.Колонки.Добавить("ФизЛицо", ИзмеренияРегистра.ФизЛицо.Тип);
	СписокДляБлокировки.Колонки.Добавить("РасчетныйДокумент", ИзмеренияРегистра.РасчетныйДокумент.Тип);
	Для Каждого ФизЛицо Из СписокРаботников Цикл
		Для Каждого РасчетныйДокумент Из СписокРасчетныхДокументов Цикл
			НоваяСтрока = СписокДляБлокировки.Добавить();
			НоваяСтрока.ФизЛицо = ФизЛицо;
			НоваяСтрока.РасчетныйДокумент = РасчетныйДокумент;
		КонецЦикла;
	КонецЦикла;
	ЭлементБлокировки.ИсточникДанных = СписокДляБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизЛицо", "ФизЛицо");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РасчетныйДокумент", "РасчетныйДокумент");
	
	Блокировка.Заблокировать();
	
	СписокВидовНачислений = Новый Массив;
	СписокВидовНачислений.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
	СписокВидовНачислений.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
	СписокВидовНачислений.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно);
	
	СписокВидовУдержаний = Новый Массив;
	СписокВидовУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ);
	СписокВидовУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист);
	СписокВидовУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокРаботников",          СписокРаботников);
	Запрос.УстановитьПараметр("СписокРасчетныхДокументов", СписокРасчетныхДокументов);
	Запрос.УстановитьПараметр("СписокВидовНачислений",     СписокВидовНачислений);
	Запрос.УстановитьПараметр("СписокВидовУдержаний",      СписокВидовУдержаний);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
	|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
	|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
	|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
	|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
	|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
	|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТИПРасходыНаОплатуТрудаОбороты
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			ФизЛицо В (&СписокРаботников)
	|				И РасчетныйДокумент В (&СписокРасчетныхДокументов)
	|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРасходыНаОплатуТрудаОбороты
	|ГДЕ
	|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.НоменклатурнаяГруппа,
	|	Удержания.ХарактерДеятельности,
	|	Удержания.СтатьяЗатрат,
	|	Удержания.ФизЛицо,
	|	Удержания.РасчетныйДокумент,
	|	СУММА(Удержания.СуммаОборот) КАК Сумма
	|ИЗ
	|	ВТИПРасходыНаОплатуТрудаОбороты КАК Удержания
	|ГДЕ
	|	Удержания.ВидНачисленияУдержания В (&СписокВидовУдержаний)
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.НоменклатурнаяГруппа,
	|	Удержания.ХарактерДеятельности,
	|	Удержания.СтатьяЗатрат,
	|	Удержания.ФизЛицо,
	|	Удержания.РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.НоменклатурнаяГруппа,
	|	Начисления.ХарактерДеятельности,
	|	Начисления.СтатьяЗатрат,
	|	Начисления.ВидНачисленияУдержания,
	|	Начисления.ФизЛицо,
	|	Начисления.РасчетныйДокумент,
	|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
	|	Начисления.СуммаОборот КАК Сумма
	|ИЗ
	|	ВТИПРасходыНаОплатуТрудаОбороты КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
	|			И Начисления.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
	|ГДЕ
	|	Начисления.ВидНачисленияУдержания В(&СписокВидовНачислений)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаУдержаний  = Результат[1].Выгрузить();
	
	ТаблицаНачислений = Результат[2].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаНачислений, "НомерСтроки");
	ТаблицаНачислений.Индексы.Добавить("НомерСтроки");
	
	ТаблицаНачислений.Индексы.Добавить("ФизЛицо, СтатьяЗатрат, РасчетныйДокумент, НоменклатурнаяГруппа, ХарактерДеятельности");
	
	СтруктураОтбора = Новый Структура("ФизЛицо, СтатьяЗатрат, РасчетныйДокумент, НоменклатурнаяГруппа, ХарактерДеятельности");
	
	// Распределение удержаний по начислениям
	Для Каждого Удержание ИЗ ТаблицаУдержаний Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Удержание);
		НайденныеНачисления = ТаблицаНачислений.НайтиСтроки(СтруктураОтбора);
		Если НайденныеНачисления.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКоэффициентов = Новый Массив;
		Для Каждого Начисление Из НайденныеНачисления Цикл
			МассивКоэффициентов.Добавить(Начисление.Сумма);
		КонецЦикла;
		
		РаспределеннаяСуммаУдержания = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
			Удержание.Сумма, МассивКоэффициентов, 2);
			
		Если РаспределеннаяСуммаУдержания <> Неопределено Тогда
			Для Индекс = 0 По НайденныеНачисления.ВГраница() Цикл
				НайденныеНачисления[Индекс].Сумма = НайденныеНачисления[Индекс].Сумма - РаспределеннаяСуммаУдержания[Индекс];
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение таблиц движений
	СписокВыплат   = ПустаяТаблицаРегистраНакопления("ИПРасходыНаОплатуТруда", Ложь);
	СписокПереплат = ПустаяТаблицаРегистраНакопления("ПрочиеРасчеты", Ложь);
	
	СтруктураОтбора = Новый Структура("ФизЛицо");
	
	Для Каждого Оплата Из СписокОплат Цикл
		
		СтруктураОтбора.ФизЛицо = Оплата.ФизЛицо;
		
		НайденныеНачисления = ТаблицаНачислений.Скопировать(СтруктураОтбора);
		НайденныеНачисления.Сортировать(
			"ДатаРасчетногоДокумента, РасчетныйДокумент, ВидНачисленияУдержания, СтатьяЗатрат, НоменклатурнаяГруппа, ХарактерДеятельности",
			Новый СравнениеЗначений);
		
		Для Каждого Начисление Из НайденныеНачисления Цикл
			
			Сумма = Мин(Оплата.Сумма, Начисление.Сумма);
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Выплата = СписокВыплат.Добавить();
			ЗаполнитьЗначенияСвойств(Выплата, Начисление);
			Выплата.ДокументОплаты = Оплата.ДокументОплаты;
			Выплата.Сумма          = Сумма;
			
			Оплата.Сумма = Оплата.Сумма - Сумма;
			
			Начисление.Сумма = Начисление.Сумма - Сумма;
			ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Найти(Начисление.НомерСтроки, "НомерСтроки"), Начисление);
			
		КонецЦикла;
		
		Если Оплата.Сумма > 0 Тогда
			Переплата = СписокПереплат.Добавить();
			Переплата.Контрагент        = Оплата.ФизЛицо;
			Переплата.РасчетныйДокумент = Реквизиты.Регистратор;
			Переплата.Сумма             = Оплата.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицыВыплатыЗарплаты.СписокВыплат   = СписокВыплат;
	ТаблицыВыплатыЗарплаты.СписокПереплат = СписокПереплат;
	
	Возврат ТаблицыВыплатыЗарплаты;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицВыплатыЗарплаты(ТаблицаВыплаты, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокОплат
	
	СписокОбязательныхКолонок = ""
		+ "ФизическоеЛицо,"		// <СправочникСсылка.ФизическиеЛица>
		+ "СуммаКВыплате";		// <Число,15,2> - сумма к выплате
		
	Параметры.Вставить("СписокОплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплаты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"				// <Дата> - период движений - дата документа
		+ "Регистратор,"		// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";		// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияВыплатаЗарплаты(ТаблицаВыплаты, ТаблицаПереплаты, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыплатаЗарплаты(ТаблицаВыплаты, ТаблицаПереплаты, ТаблицаРеквизитов);	
	Реквизиты = Параметры.Реквизиты[0];

	СписокВыплат   = Параметры.СписокВыплат;
	СписокПереплат = Параметры.СписокПереплат;
	
	Если СписокВыплат.Количество() > 0 Тогда
		Движения.ИПРасходыНаОплатуТруда.Записывать = Истина;
		Движения.ПрочиеРасчеты.Записывать          = Истина;
	КонецЕсли;
		
	Для Каждого Выплата Из СписокВыплат Цикл
		
		// Сторнирование неоплаченных расходов на оплату труда
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выплата, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.Сумма =-Выплата.Сумма;
		
		// Отражение оплаченных расходов на оплату труда
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.Сумма = Выплата.Сумма;
		
		// Погашение задолженности
		Движение = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.Контрагент        = Выплата.ФизЛицо;
		Движение.РасчетныйДокумент = Выплата.РасчетныйДокумент;
		Движение.Сумма             = Выплата.Сумма;
		
	КонецЦикла;
	
	Если СписокПереплат.Количество() > 0 Тогда
		Движения.ПрочиеРасчеты.Записывать = Истина;
	КонецЕсли;
	
	// Отражение переплаты
	Для Каждого Переплата Из СписокПереплат Цикл
		Движение = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Переплата);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыплатаЗарплаты(ТаблицаВыплаты, ТаблицаПереплаты, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВыплат
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "ВидНачисленияУдержания,"		// <ПеречислениеСсылка.ИПВидыНачисленийУдержаний> - вид начисления/удержания
		+ "ФизЛицо,"					// <СправочникСсылка.ФизическиеЛица>
		+ "СтатьяЗатрат,"				// <СправочникСсылка.*> - статья затрат Расходов на оплату труда
		+ "РасчетныйДокумент,"			// <ДокументСсылка.*> - расчетный документ
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "Сумма";						// <Число,15,2>
		
	Параметры.Вставить("СписокВыплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплаты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СписокПереплат
	
	СписокОбязательныхКолонок = ""
		+ "Контрагент,"					// <СправочникСсылка.*> - контрагент прочих расчетов
		+ "РасчетныйДокумент,"			// <ДокументСсылка.*> - расчетный документ
		+ "Сумма";						// <Число,15,2> - сумма переплаты
		
	Параметры.Вставить("СписокПереплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПереплаты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПустуюТаблицуСписокПереплат() Экспорт

	СписокПереплат	= Новый ТаблицаЗначений;
	СписокПереплат.Колонки.Добавить("СчетУчета",	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СписокПереплат.Колонки.Добавить("Контрагент",	Справочники.ТипВсеСсылки());
	СписокПереплат.Колонки.Добавить("Сумма",		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	Возврат СписокПереплат;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеНалоговВзносовФОТ

Процедура СформироватьДвиженияУплатаНДФЛ(ТаблицаНалогов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	Если Реквизиты.СчетУчета <> ПланыСчетов.Хозрасчетный.НДФЛ
			и Реквизиты.СчетУчета <> ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПринимаемыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	СуммаПринимаемая = 0;
	Для Каждого Налог Из ТаблицаНалогов Цикл
		Если Налог.СчетДт = Реквизиты.СчетУчета
		   И ВидыПринимаемыхПлатежей.Найти(Налог.СубконтоДт1) <> Неопределено Тогда
			СуммаПринимаемая = СуммаПринимаемая + Налог.СуммаРуб;
		КонецЕсли;
	КонецЦикла;
	Если СуммаПринимаемая = 0 Тогда
		// Уплата налоговых санкций в расходы не включается
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыУплатаНДФЛ(ТаблицаНалогов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("СчетУчета",   Реквизиты.СчетУчета);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетУчета",    Реквизиты.СчетУчета);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И СчетУчета = &СчетУчета) КАК ПрочиеРасчетыОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокНДФЛУдержано = ПолучитьПустуюТаблицуСписокНДФЛ();
	СписокНДФЛОплачено = ПолучитьПустуюТаблицуСписокНДФЛ();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ТаблицаРезультатаЗапроса  = РезультатЗапроса.Выгрузить();
		СписокРасчетныхДокументов = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("РасчетныйДокумент");
		
		СписокВидовНачисленийУдержаний = Новый Массив;
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ);
		
		// Установка управляемой блокировки
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПРасходыНаОплатуТруда");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
		
		ИзмеренияРегистра = Метаданные.РегистрыНакопления.ИПРасходыНаОплатуТруда.Измерения;
		СписокДляБлокировки = Новый ТаблицаЗначений;
		СписокДляБлокировки.Колонки.Добавить("ВидНачисленияУдержания", ИзмеренияРегистра.ВидНачисленияУдержания.Тип);
		СписокДляБлокировки.Колонки.Добавить("РасчетныйДокумент", ИзмеренияРегистра.РасчетныйДокумент.Тип);
		Для Каждого ВидНачисленияУдержания Из СписокВидовНачисленийУдержаний Цикл
			Для Каждого РасчетныйДокумент Из СписокРасчетныхДокументов Цикл
				НоваяСтрока = СписокДляБлокировки.Добавить();
				НоваяСтрока.ВидНачисленияУдержания = ВидНачисленияУдержания;
				НоваяСтрока.РасчетныйДокумент      = РасчетныйДокумент;
			КонецЦикла;
		КонецЦикла;
		ЭлементБлокировки.ИсточникДанных = СписокДляБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидНачисленияУдержания", "ВидНачисленияУдержания");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РасчетныйДокумент", "РасчетныйДокумент");
		
		Блокировка.Заблокировать();
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(СписокРасчетныхДокументов));
		Запрос.УстановитьПараметр("СписокРасчетныхДокументов", СписокРасчетныхДокументов);
		Запрос.УстановитьПараметр("СписокВидовНачисленийУдержаний", СписокВидовНачисленийУдержаний);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
		|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
		|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
		|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
		|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
		|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот
		|ПОМЕСТИТЬ ВТИПРасходыНаОплатуТрудаОбороты
		|ИЗ
		|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
		|			&ДатаНач,
		|			&ДатаОстатков,
		|			,
		|			РасчетныйДокумент В (&СписокРасчетныхДокументов)
		|				И ВидНачисленияУдержания В (&СписокВидовНачисленийУдержаний)
		|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРасходыНаОплатуТрудаОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаТруда.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ОплатаТруда.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ОплатаТруда.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ОплатаТруда.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
		|	ОплатаТруда.ФизЛицо КАК ФизЛицо,
		|	ОплатаТруда.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
		|	ОплатаТруда.СуммаОборот КАК Сумма
		|ИЗ
		|	ВТИПРасходыНаОплатуТрудаОбороты КАК ОплатаТруда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
		|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
		|			И ОплатаТруда.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
		|ГДЕ
		|	ОплатаТруда.ВидНачисленияУдержания = ЗНАЧЕНИЕ(Перечисление.ИПВидыНачисленийУдержаний.УдержаноНДФЛ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРасчетногоДокумента,
		|	РасчетныйДокумент,
		|	ФизЛицо,
		|	ВидНачисленияУдержания,
		|	СтатьяЗатрат,
		|	НоменклатурнаяГруппа,
		|	ХарактерДеятельности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаТруда.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ОплатаТруда.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ОплатаТруда.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ОплатаТруда.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
		|	ОплатаТруда.ФизЛицо КАК ФизЛицо,
		|	ОплатаТруда.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
		|	ОплатаТруда.СуммаОборот КАК Сумма
		|ИЗ
		|	ВТИПРасходыНаОплатуТрудаОбороты КАК ОплатаТруда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
		|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
		|			И ОплатаТруда.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
		|ГДЕ
		|	ОплатаТруда.ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Перечисление.ИПВидыНачисленийУдержаний.УдержаноНДФЛ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРасчетногоДокумента,
		|	РасчетныйДокумент,
		|	ФизЛицо,
		|	ВидНачисленияУдержания,
		|	СтатьяЗатрат,
		|	НоменклатурнаяГруппа,
		|	ХарактерДеятельности";
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ТаблицаУдержаний  = Результаты[1].Выгрузить();
		ТаблицаНачислений = Результаты[2].Выгрузить();
		
		// Распределение НДФЛ по данным регистра РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
		ПеречисленныйНалог = УчетЗарплаты.ПеречисленныйНалогРегистратораПоФизическимЛицам(Реквизиты.Регистратор);
		
		Если ПеречисленныйНалог <> Неопределено И ПеречисленныйНалог.Количество() > 0 Тогда
			
			ПеречисленныйНалог.Индексы.Добавить("ФизическоеЛицо");
			
			Для Каждого Удержание ИЗ ТаблицаУдержаний Цикл
				
				НайденныеСтроки = ПеречисленныйНалог.НайтиСтроки(Новый Структура("ФизическоеЛицо", Удержание.ФизЛицо));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаОплаты = Мин(СуммаПринимаемая, Удержание.Сумма, НайденныеСтроки[0].Сумма);
				
				Если СуммаОплаты > 0 Тогда
					
					НоваяСтрока = СписокНДФЛУдержано.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Удержание);
					НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
					НоваяСтрока.СуммаОплаты    = СуммаОплаты;
					
					СуммаПринимаемая = СуммаПринимаемая - СуммаОплаты;
					Удержание = Удержание.Сумма - СуммаОплаты;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СуммаПринимаемая > 0 Тогда
			
			// Не удалось сопоставить все удержания строкам распределения.
			// В этом случае действуем по старому алгоритму, погашая остатки по ФИФО.
			Для Каждого Удержание ИЗ ТаблицаУдержаний Цикл
				
				СуммаОплаты = Мин(СуммаПринимаемая, Удержание.Сумма);
				
				Если СуммаОплаты > 0 Тогда
					
					НоваяСтрока = СписокНДФЛУдержано.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Удержание);
					НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
					НоваяСтрока.СуммаОплаты    = СуммаОплаты;
					
					СуммаПринимаемая = СуммаПринимаемая - СуммаОплаты;
					Удержание = Удержание.Сумма - СуммаОплаты;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВремСписокНДФЛУдержано = СписокНДФЛУдержано.Скопировать();
		
		СтруктураОтбора = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, СтатьяЗатрат, ФизЛицо, РасчетныйДокумент");
		ВремСписокНДФЛУдержано.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, СтатьяЗатрат, ФизЛицо, РасчетныйДокумент");
		
		Для Каждого Задолженность ИЗ ТаблицаНачислений Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Задолженность);
			ДокументыОплаты = ВремСписокНДФЛУдержано.НайтиСтроки(СтруктураОтбора);
			Если ДокументыОплаты.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОплаты = ДокументыОплаты[0];
			СуммаОплаты = Мин(ДокументОплаты.СуммаОплаты, Задолженность.Сумма);
			
			Если СуммаОплаты > 0 Тогда
				
				НоваяСтрока = СписокНДФЛОплачено.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Задолженность);
				НоваяСтрока.ДокументОплаты = ДокументОплаты.ДокументОплаты;
				НоваяСтрока.СуммаОплаты    = СуммаОплаты;
				ДокументОплаты.СуммаОплаты = ДокументОплаты.СуммаОплаты - СуммаОплаты;
				
				Задолженность = Задолженность.Сумма - СуммаОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВремСписокНДФЛУдержано = Неопределено;
		
	КонецЕсли;
	
	Если СписокНДФЛУдержано.Количество() > 0 Или СписокНДФЛОплачено.Количество() > 0 Тогда
		Движения.ИПРасходыНаОплатуТруда.Записывать = Истина;
		Движения.ПрочиеРасчеты.Записывать          = Истина;
	КонецЕсли;
	
	Для Каждого НДФЛУдержано Из СписокНДФЛУдержано Цикл
		// Сторнирование неоплаченных прочих расходов
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, НДФЛУдержано, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма =-НДФЛУдержано.СуммаОплаты;
		
		// Отражение оплаченных прочих расходов
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, НДФЛУдержано);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма = НДФЛУдержано.СуммаОплаты;
		
		// Погашение задолженности
		Расчет = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Расчет, Реквизиты, "Период,Организация,СчетУчета");
		
		Расчет.РасчетныйДокумент = НДФЛУдержано.РасчетныйДокумент;
		Расчет.Сумма             = НДФЛУдержано.СуммаОплаты;
		
		Расчет = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Расчет, Реквизиты, "Период,Организация");
		Расчет.Контрагент        = НДФЛУдержано.ФизЛицо;
		Расчет.РасчетныйДокумент = НДФЛУдержано.РасчетныйДокумент;
		Расчет.Сумма             = НДФЛУдержано.СуммаОплаты;
		
	КонецЦикла;
	
	Для Каждого НДФЛОплачено Из СписокНДФЛОплачено Цикл
		
		// Сторнирование неоплаченных расходов на оплату труда
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, НДФЛОплачено, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма =-НДФЛОплачено.СуммаОплаты;
		
		// Отражение оплаченных расходов на оплату труда
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, НДФЛОплачено);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма = НДФЛОплачено.СуммаОплаты;
		
	КонецЦикла;
	
	// Отражение переплаты
	Если СуммаПринимаемая > 0 Тогда
		
		Движения.ПрочиеРасчеты.Записывать = Истина;
		
		Расчет = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Расчет, Реквизиты);
		Расчет.РасчетныйДокумент = Реквизиты.Регистратор;
		Расчет.СчетУчета         = Реквизиты.СчетУчета;
		Расчет.Сумма             = СуммаПринимаемая;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыУплатаНДФЛ(ТаблицаНалогов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокНалогов
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"      // <ПланСчетовСсылка.Хозрасчетный>
		+ "СубконтоДт1," // <Характеристика.ВидыСубконтоХозрасчетные>
		+ "СуммаРуб";    // <Число,15,2> - сумма перечисляемого налога
		
	Параметры.Вставить("СписокНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалогов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации>
		+ "ВидОперации," // <ПеречислениеСсылка.*> - вид операции документа
		+ "СчетУчета";   // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПустуюТаблицуСписокНДФЛ()
	
	СписокНДФЛ = Новый ТаблицаЗначений;
	СписокНДФЛ.Колонки.Добавить("НоменклатурнаяГруппа",   Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокНДФЛ.Колонки.Добавить("ХарактерДеятельности",   Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокНДФЛ.Колонки.Добавить("СтатьяЗатрат",           Справочники.ТипВсеСсылки());
	СписокНДФЛ.Колонки.Добавить("ФизЛицо",                Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	СписокНДФЛ.Колонки.Добавить("ВидНачисленияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
	СписокНДФЛ.Колонки.Добавить("РасчетныйДокумент",      Документы.ТипВсеСсылки());
	СписокНДФЛ.Колонки.Добавить("ДокументОплаты",         Документы.ТипВсеСсылки());
	СписокНДФЛ.Колонки.Добавить("СуммаОплаты",            ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат СписокНДФЛ;
	
КонецФункции

Функция ПодготовитьТаблицыУплатыВзносовФОТ(ТаблицаВзносов, ТаблицаРеквизитов) Экспорт
	
	СписокВзносов   = ПолучитьПустуюТаблицуСписокВзносов();
	СписокПереплат = ПолучитьПустуюТаблицуСписокПереплат();

	ТаблицыВзносовФОТ = Новый Структура("СписокВзносов, СписокПереплат", СписокВзносов, СписокПереплат);
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаВзносов) Тогда
	    Возврат ТаблицыВзносовФОТ;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыВзносовФОТ;
	КонецЕсли;
	
	Счета69    = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	Счета69_06 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Взносы_СтраховойГод);
	Если Счета69.Найти(Реквизиты.СчетУчета) = Неопределено Тогда
		// Это не взносы
		Возврат ТаблицыВзносовФОТ;
	ИначеЕсли Счета69_06.Найти(Реквизиты.СчетУчета) <> Неопределено Тогда
		// Фиксированные страховые взносы
		Возврат ТаблицыВзносовФОТ;
	КонецЕсли;
	
	ВидыПринимаемыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	СуммаПринимаемая = 0;
	Для Каждого Взнос Из ТаблицаВзносов Цикл
		Если Взнос.СчетДт = Реквизиты.СчетУчета
		   И ВидыПринимаемыхПлатежей.Найти(Взнос.СубконтоДт1) <> Неопределено Тогда
			СуммаПринимаемая = СуммаПринимаемая + Взнос.СуммаРуб;
		КонецЕсли;
	КонецЦикла;
	Если СуммаПринимаемая = 0 Тогда
		// Уплата налоговых санкций в расходы не включается
		Возврат ТаблицыВзносовФОТ;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицУплатыВзносовФОТ(ТаблицаВзносов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("СчетУчета",   Реквизиты.СчетУчета);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетУчета",    Реквизиты.СчетУчета);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И СчетУчета = &СчетУчета) КАК ПрочиеРасчетыОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		// Установка управляемой блокировки
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИППрочиеРасходы");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("СчетУчета",   Реквизиты.СчетУчета);
		
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИППрочиеРасходы");
		ОписаниеИсточника = Новый Структура("РасчетныйДокумент", "РасчетныйДокумент");
		ТаблицаРезультатаЗапроса = ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, РезультатЗапроса, ОписаниеИсточника);
		ЭлементБлокировки.ИсточникДанных = ТаблицаРезультатаЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РасчетныйДокумент", "РасчетныйДокумент");
		
		Блокировка.Заблокировать();
		
		СписокРасчетныхДокументов = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("РасчетныйДокумент");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
		Запрос.УстановитьПараметр("СчетУчета",    Реквизиты.СчетУчета);
		Запрос.УстановитьПараметр("ДатаНач", ДатаПервогоДокумента(СписокРасчетныхДокументов));
		Запрос.УстановитьПараметр("СписокРасчетныхДокументов", СписокРасчетныхДокументов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
		|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
		|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
		|	ИППрочиеРасходыОбороты.СуммаОборот
		|ПОМЕСТИТЬ ВТИППрочиеРасходыОбороты
		|ИЗ
		|	РегистрНакопления.ИППрочиеРасходы.Обороты(
		|			&ДатаНач,
		|			&ДатаОстатков,
		|			,
		|			РасчетныйДокумент В (&СписокРасчетныхДокументов)
		|				И ДокументОплаты = НЕОПРЕДЕЛЕНО
		|				И СчетУчета = &СчетУчета) КАК ИППрочиеРасходыОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИППрочиеРасходыОбороты.РасчетныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаТруда.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ОплатаТруда.ХарактерДеятельности КАК ХарактерДеятельности,
		|	ОплатаТруда.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ОплатаТруда.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
		|	ОплатаТруда.СуммаОборот КАК Сумма
		|ИЗ
		|	ВТИППрочиеРасходыОбороты КАК ОплатаТруда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
		|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
		|			И ОплатаТруда.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРасчетногоДокумента,
		|	РасчетныйДокумент,
		|	СтатьяЗатрат,
		|	НоменклатурнаяГруппа,
		|	ХарактерДеятельности";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СуммаОплаты = Мин(СуммаПринимаемая, Выборка.Сумма);
			
			Если СуммаОплаты > 0 Тогда
				
				НоваяСтрока = СписокВзносов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ДокументОплаты = Реквизиты.Регистратор;
				НоваяСтрока.СуммаОплаты    = СуммаОплаты;
				
				СуммаПринимаемая = СуммаПринимаемая - СуммаОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отражение переплаты
	Если СуммаПринимаемая > 0 Тогда
		Переплата = СписокПереплат.Добавить();
		Переплата.СчетУчета = Реквизиты.СчетУчета;
		Переплата.Сумма     = СуммаПринимаемая;
	КонецЕсли;
	
	ТаблицыВзносовФОТ.СписокВзносов  = СписокВзносов;
	ТаблицыВзносовФОТ.СписокПереплат = СписокПереплат;
	
	Возврат ТаблицыВзносовФОТ;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицУплатыВзносовФОТ(ТаблицаВзносов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВзносов
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"      // <ПланСчетовСсылка.Хозрасчетный>
		+ "СубконтоДт1," // <Характеристика.ВидыСубконтоХозрасчетные>
		+ "СуммаРуб";    // <Число,15,2> - сумма перечисляемого налога
		
	Параметры.Вставить("СписокВзносов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзносов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации>
		+ "ВидОперации," // <ПеречислениеСсылка.*> - вид операции документа
		+ "СчетУчета";   // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияУплатаВзносовФОТ(ТаблицаВзносов, ТаблицаПереплат, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыУплатаВзносовФОТ(ТаблицаВзносов, ТаблицаПереплат, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	СписокВзносов  = Параметры.СписокВзносов;
	СписокПереплат = Параметры.СписокПереплат;
	
	Если СписокВзносов.Количество() > 0 Тогда
		Движения.ИППрочиеРасходы.Записывать = Истина;
		Движения.ПрочиеРасчеты.Записывать   = Истина;
	ИначеЕсли СписокПереплат.Количество() > 0 Тогда
		Движения.ПрочиеРасчеты.Записывать = Истина;
	КонецЕсли;
	
	Для Каждого Взнос Из СписокВзносов Цикл
		
		// Сторнирование неоплаченных прочих расходов
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Взнос, , "ДокументОплаты");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.Сумма =-Взнос.СуммаОплаты;
		
		// Отражение оплаченных прочих расходов
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Взнос);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.Сумма = Взнос.СуммаОплаты;
		
		// Погашение задолженности
		Расчет = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Расчет, Реквизиты);
		Расчет.РасчетныйДокумент = Взнос.РасчетныйДокумент;
		Расчет.Сумма             = Взнос.СуммаОплаты;
		
	КонецЦикла;
	
	Для Каждого Переплата Из СписокПереплат Цикл
		
		// Отражение переплаты
		Расчет = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Расчет, Переплата);
		ЗаполнитьЗначенияСвойств(Расчет, Реквизиты);
		Расчет.РасчетныйДокумент = Реквизиты.Регистратор;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыУплатаВзносовФОТ(ТаблицаВзносов, ТаблицаПереплат, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокВзносов
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа," // <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности," // <ПеречислениеСсылка.ХарактерыДеятельности>
		+ "РасчетныйДокумент,"    // <ДокументСсылка.*> - расчетный документ
		+ "ДокументОплаты,"       // <ДокументСсылка.*> - документ оплаты
		+ "СтатьяЗатрат,"         // <СправочникСсылка.*> - статья затрат Прочих расходов
		+ "СуммаОплаты";          // <Число, 15, 2>
	
	Параметры.Вставить("СписокВзносов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзносов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокПереплат
	
	СписокОбязательныхКолонок = ""
		+ "СчетУчета," // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов 
		+ "Сумма";     // <Число, 15, 2> - сумма переплаты
	
	Параметры.Вставить("СписокПереплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПереплат, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - организация
		+ "СчетУчета";   // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов 
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПустуюТаблицуСписокВзносов() Экспорт

	СписокВзносов = Новый ТаблицаЗначений;
	СписокВзносов.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокВзносов.Колонки.Добавить("ХарактерДеятельности", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокВзносов.Колонки.Добавить("СтатьяЗатрат",         Справочники.ТипВсеСсылки());
	СписокВзносов.Колонки.Добавить("РасчетныйДокумент",    Документы.ТипВсеСсылки());
	СписокВзносов.Колонки.Добавить("ДокументОплаты",       Документы.ТипВсеСсылки());
	СписокВзносов.Колонки.Добавить("СуммаОплаты",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат СписокВзносов;

КонецФункции

#КонецОбласти

#Область ПеречислениеПрочихУдержаний

Функция ПодготовитьТаблицыПеречислениеПрочихУдержаний(РасшифровкаПлатежаПрочее, ТаблицаРеквизитов) Экспорт
	
	ТаблицыПеречислениеПрочихУдержаний = Новый Структура("СписокОплаченныхРасчетов, СписокОплаченныхУдержаний");
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(РасшифровкаПлатежаПрочее) Тогда
		Возврат ТаблицыПеречислениеПрочихУдержаний;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицыПеречислениеПрочихУдержаний;
	КонецЕсли;	

	Параметры = ПодготовитьПараметрыТаблицПеречислениеПрочихУдержаний(РасшифровкаПлатежаПрочее, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	СубсчетаРасчетыПоИсполнительнымДокументамРаботников = 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);
	
	СписокОплат = Новый ТаблицаЗначений;
	СписокОплат.Колонки.Добавить("СчетУчета",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СписокОплат.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	СписокОплат.Колонки.Добавить("Сумма",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого Оплата Из Параметры.СписокОплат Цикл
		
		Если СубсчетаРасчетыПоИсполнительнымДокументамРаботников.Найти(Оплата.СчетДт) = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Для Индекс = 1 По 3 Цикл
			Если ТипЗнч(Оплата["СубконтоДт" + Индекс]) = Тип("СправочникСсылка.Контрагенты") Тогда
				НоваяСтрока = СписокОплат.Добавить();
				НоваяСтрока.СчетУчета  = Оплата.СчетДт;
				НоваяСтрока.Контрагент = Оплата["СубконтоДт" + Индекс];
				НоваяСтрока.Сумма      = Оплата.СуммаРуб;
				Прервать
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СписокОплат.Количество() = 0 Тогда
		Возврат ТаблицыПеречислениеПрочихУдержаний;
	КонецЕсли;
	
	// Установка управляемой блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = СписокОплат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета", "СчетУчета");
	Блокировка.Заблокировать();
	
	СписокСчетовУчета  = ОбщегоНазначения.ВыгрузитьКолонку(СписокОплат, "СчетУчета", Истина);
	СписокКонтрагентов = ОбщегоНазначения.ВыгрузитьКолонку(СписокОплат, "Контрагент", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков",       Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетовУчета",  СписокСчетовУчета);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТПрочиеРасчетыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И СчетУчета В (&СписокСчетовУчета)
	|				И Контрагент В (&СписокКонтрагентов)
	|				И ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ПрочиеРасчетыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ЕСТЬNULL(РеквизитыРасчетныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРасчетногоДокумента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток
	|ИЗ
	|	ВТПрочиеРасчетыОстатки КАК ПрочиеРасчетыОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|		ПО (РеквизитыРасчетныхДокументов.Организация = &Организация)
	|			И ПрочиеРасчетыОстатки.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРасчетногоДокумента,
	|	РасчетныйДокумент";
	
	ТаблицаОстатковРасчетов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОстатковРасчетов, "НомерСтроки");
	ТаблицаОстатковРасчетов.Индексы.Добавить("НомерСтроки");
	
	СписокОплаченныхРасчетов = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ПрочиеРасчеты");
	СписокОплаченныхРасчетов.Колонки.Удалить("Организация");
	
	СписокОплаченныхУдержаний = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("ИПРасходыНаОплатуТруда");
	СписокОплаченныхУдержаний.Колонки.Удалить("Организация");
	
	Если ТаблицаОстатковРасчетов.Количество() > 0 Тогда
		
		// Установка управляемой блокировки
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "ИПРасходыНаОплатуТруда");
		ОписаниеИсточника = Новый Структура("Контрагент, РасчетныйДокумент", "Контрагент", "РасчетныйДокумент");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПРасходыНаОплатуТруда");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.ИсточникДанных =
			ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ТаблицаОстатковРасчетов, ОписаниеИсточника);
		Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		СписокРасчетныхДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОстатковРасчетов, "РасчетныйДокумент", Истина);
		СписокКонтрагентов        = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаОстатковРасчетов, "Контрагент", Истина);
		
		СписокВидовНачисленийУдержаний = Новый Массив;
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно);
		СписокВидовНачисленийУдержаний.Добавить(Перечисления.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист);
		
		Запрос.УстановитьПараметр("ДатаНач",                        ТаблицаОстатковРасчетов[0].ДатаРасчетногоДокумента);
		Запрос.УстановитьПараметр("СписокРасчетныхДокументов",      СписокРасчетныхДокументов);
		Запрос.УстановитьПараметр("СписокКонтрагентов",             СписокКонтрагентов);
		Запрос.УстановитьПараметр("СписокВидовНачисленийУдержаний", СписокВидовНачисленийУдержаний);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
		|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
		|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
		|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
		|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
		|	ИПРасходыНаОплатуТрудаОбороты.Контрагент,
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
		|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот
		|ПОМЕСТИТЬ ВТИПРасходыНаОплатуТрудаОбороты
		|ИЗ
		|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
		|			&ДатаНач,
		|			&ДатаОстатков,
		|			,
		|				РасчетныйДокумент В (&СписокРасчетныхДокументов)
		|				И ВидНачисленияУдержания В (&СписокВидовНачисленийУдержаний)
		|				И ДокументОплаты = НЕОПРЕДЕЛЕНО) КАК ИПРасходыНаОплатуТрудаОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа) КАК ПредставлениеНоменклатурнойГруппы,
		|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности) КАК ПредставлениеХарактераДеятельности,
		|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат) КАК ПредставлениеСтатьиЗатрат,
		|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
		|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.ФизЛицо) КАК ПредставлениеФизЛица,
		|	ИПРасходыНаОплатуТрудаОбороты.Контрагент,
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
		|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот
		|ИЗ
		|	ВТИПРасходыНаОплатуТрудаОбороты КАК ИПРасходыНаОплатуТрудаОбороты
		|ГДЕ ВидНачисленияУдержания = ЗНАЧЕНИЕ(Перечисление.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист)
		|	И Контрагент В (&СписокКонтрагентов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа) КАК ПредставлениеНоменклатурнойГруппы,
		|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности) КАК ПредставлениеХарактераДеятельности,
		|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат) КАК ПредставлениеСтатьиЗатрат,
		|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
		|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
		|	ПРЕДСТАВЛЕНИЕ(ИПРасходыНаОплатуТрудаОбороты.ФизЛицо) КАК ПредставлениеФизЛица,
		|	ИПРасходыНаОплатуТрудаОбороты.Контрагент,
		|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
		|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот
		|ИЗ
		|	ВТИПРасходыНаОплатуТрудаОбороты КАК ИПРасходыНаОплатуТрудаОбороты
		|ГДЕ ВидНачисленияУдержания <> ЗНАЧЕНИЕ(Перечисление.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист)";
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаНеоплаченныхУдержаний = Результат[1].Выгрузить();
		ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаНеоплаченныхУдержаний, "НомерСтроки");
		ТаблицаНеоплаченныхУдержаний.Индексы.Добавить("НомерСтроки");
		
		ТаблицаНеоплаченныхНачислений = Результат[2].Выгрузить();
		ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаНеоплаченныхНачислений, "НомерСтроки");
		ТаблицаНеоплаченныхНачислений.Индексы.Добавить("НомерСтроки");
		
		ТаблицаОстатковРасчетов.Индексы.Добавить("СчетУчета, Контрагент");
		ОтборПрочихРасчетов = Новый Структура("СчетУчета, Контрагент");
		
		ТаблицаНеоплаченныхУдержаний.Индексы.Добавить("Контрагент, РасчетныйДокумент");
		ОтборУдержаний = Новый Структура("Контрагент, РасчетныйДокумент");
		
		ТаблицаНеоплаченныхНачислений.Индексы.Добавить("ФизЛицо, РасчетныйДокумент");
		ОтборНачислений = Новый Структура("ФизЛицо, РасчетныйДокумент");
		
		Для Каждого Оплата Из СписокОплат Цикл
			
			Если Оплата.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборПрочихРасчетов, Оплата);
			
			НайденныеОстаткиРасчетов = ТаблицаОстатковРасчетов.Скопировать(ОтборПрочихРасчетов);
			НайденныеОстаткиРасчетов.Сортировать("ДатаРасчетногоДокумента, РасчетныйДокумент", Новый СравнениеЗначений);
			Для Каждого ОстатокРасчетов Из НайденныеОстаткиРасчетов Цикл
				
				Если ОстатокРасчетов.СуммаОстаток = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаОплатыПоДокументу = Мин(ОстатокРасчетов.СуммаОстаток, Оплата.Сумма);
				
				ОплатаРасчетов = СписокОплаченныхРасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(ОплатаРасчетов, ОстатокРасчетов);
				ОплатаРасчетов.Сумма = СуммаОплатыПоДокументу;
				
				Оплата.Сумма = Оплата.Сумма - ОплатаРасчетов.Сумма;
				
				ОстатокРасчетов.СуммаОстаток = ОстатокРасчетов.СуммаОстаток - ОплатаРасчетов.Сумма;
				ЗаполнитьЗначенияСвойств(ТаблицаОстатковРасчетов.Найти(ОстатокРасчетов.НомерСтроки, "НомерСтроки"), ОстатокРасчетов);
				
				// Признание оплаченной суммы, которая удержана
				
				ЗаполнитьЗначенияСвойств(ОтборУдержаний, ОстатокРасчетов);
				НайденныеУдержания = ТаблицаНеоплаченныхУдержаний.Скопировать(ОтборУдержаний);
				НайденныеУдержания.Сортировать(
					"ПредставлениеФизЛица, ПредставлениеСтатьиЗатрат, ПредставлениеНоменклатурнойГруппы, ПредставлениеХарактераДеятельности",
					Новый СравнениеЗначений);
					
				Для Каждого Удержание Из НайденныеУдержания Цикл
					
					Если Удержание.СуммаОборот = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаУдержанияПоДокументу = Мин(Удержание.СуммаОборот, СуммаОплатыПоДокументу);
					
					ОплатаУдержания = СписокОплаченныхУдержаний.Добавить();
					ЗаполнитьЗначенияСвойств(ОплатаУдержания, Удержание);
					ОплатаУдержания.ДокументОплаты = Реквизиты.Регистратор;
					ОплатаУдержания.Сумма = СуммаУдержанияПоДокументу;
					
					СуммаОплатыПоДокументу = СуммаОплатыПоДокументу - ОплатаУдержания.Сумма;
					
					Удержание.СуммаОборот = Удержание.СуммаОборот - ОплатаУдержания.Сумма;
					ЗаполнитьЗначенияСвойств(ТаблицаНеоплаченныхУдержаний.Найти(Удержание.НомерСтроки, "НомерСтроки"), Удержание);
					
					// Признание оплаченной суммы, которая удержана
					ЗаполнитьЗначенияСвойств(ОтборНачислений, Удержание);
					НайденныеНачисления = ТаблицаНеоплаченныхНачислений.Скопировать(ОтборНачислений);
					НайденныеНачисления.Сортировать(
						"ПредставлениеФизЛица, ПредставлениеСтатьиЗатрат, ПредставлениеНоменклатурнойГруппы, ПредставлениеХарактераДеятельности",
						Новый СравнениеЗначений);
						
					Для Каждого Начисление Из НайденныеНачисления Цикл
						
						Если Начисление.СуммаОборот = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СуммаНачисленияПоДокументу = Мин(Начисление.СуммаОборот, СуммаУдержанияПоДокументу);
						
						ОплатаНачисления = СписокОплаченныхУдержаний.Добавить();
						ЗаполнитьЗначенияСвойств(ОплатаНачисления, Начисление);
						ОплатаНачисления.ДокументОплаты = Реквизиты.Регистратор;
						ОплатаНачисления.Сумма = СуммаНачисленияПоДокументу;
						
						ОплатаРасчетов = СписокОплаченныхРасчетов.Добавить();
						ОплатаРасчетов.Контрагент        = Начисление.ФизЛицо;
						ОплатаРасчетов.РасчетныйДокумент = Начисление.РасчетныйДокумент;
						ОплатаРасчетов.Сумма = СуммаНачисленияПоДокументу;
						
						СуммаУдержанияПоДокументу = СуммаУдержанияПоДокументу - ОплатаНачисления.Сумма;
						
						Начисление.СуммаОборот = Начисление.СуммаОборот - ОплатаНачисления.Сумма;
						ЗаполнитьЗначенияСвойств(ТаблицаНеоплаченныхНачислений.Найти(Начисление.НомерСтроки, "НомерСтроки"), Начисление);
						
						Если СуммаУдержанияПоДокументу = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если СуммаОплатыПоДокументу = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Оплата.Сумма = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отражение переплаты
	Для Каждого Оплата Из СписокОплат Цикл
		
		СуммаОплаты = Оплата.Сумма;
		Если СуммаОплаты > 0 Тогда
			ОплатаРасчетов = СписокОплаченныхРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(ОплатаРасчетов, Оплата);
			ОплатаРасчетов.РасчетныйДокумент = Реквизиты.Регистратор;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицыПеречислениеПрочихУдержаний.СписокОплаченныхРасчетов  = СписокОплаченныхРасчетов;
	ТаблицыПеречислениеПрочихУдержаний.СписокОплаченныхУдержаний = СписокОплаченныхУдержаний;
	
	Возврат ТаблицыПеречислениеПрочихУдержаний;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицПеречислениеПрочихУдержаний(РасшифровкаПлатежаПрочее, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокОплат
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"			// <ПланСчетовСсылка.Хозрасчетный> - счет взаиморасчетов
		+ "СубконтоДт1,"	// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "СубконтоДт2,"	// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "СубконтоДт3,"	// <Характеристика.ВидыСубконтоХозрасчетные>
		+ "СуммаРуб";		// <Число, 15, 2> - сумма оплаты
		
	Параметры.Вставить("СписокОплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		РасшифровкаПлатежаПрочее, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияПеречислениеПрочихУдержаний(ТаблицаОплаченныхРасчетов, ТаблицаОплаченныхУдержаний, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПеречислениеПрочихУдержаний(ТаблицаОплаченныхРасчетов, ТаблицаОплаченныхУдержаний, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого ОплатаРасчетов Из Параметры.СписокОплаченныхРасчетов Цикл
		
		Движения.ПрочиеРасчеты.Записывать = Истина;
		
		Движение = Движения.ПрочиеРасчеты.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, ОплатаРасчетов);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
	Для Каждого ОплатаУдержания Из Параметры.СписокОплаченныхУдержаний Цикл
		
		Движения.ИПРасходыНаОплатуТруда.Записывать = Истина;
		
		// Сторнирование неоплаченных расходов на оплату труда
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ОплатаУдержания, , "ДокументОплаты, Сумма");
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.Сумма = -ОплатаУдержания.Сумма;
		
		// Отражение оплаченных расходов на оплату труда
		Движение = Движения.ИПРасходыНаОплатуТруда.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ОплатаУдержания);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПеречислениеПрочихУдержаний(ТаблицаОплаченныхРасчетов, ТаблицаОплаченныхУдержаний, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокОплаченныхРасчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет взаиморасчетов
		+ "Контрагент,"				// <СправочникСсылка.Контрагенты> - контрагент
		+ "РасчетныйДокумент,"		// <ДокументСсылка.*> - расчетный документ
		+ "Сумма";					// <Число, 15, 2> - сумма оплаты
	
	Параметры.Вставить("СписокОплаченныхРасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплаченныхРасчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.СписокОплаченныхУдержаний
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"	// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "СтатьяЗатрат,"			// <СправочникСсылка.*> - статья затрат расходов на оплату труда
		+ "ВидНачисленияУдержания,"	// <ПеречислениеСсылка.ИПВидыНачисленийУдержаний> - вид удержания
		+ "ФизЛицо,"				// <СправочникСсылка.ФизическиеЛица> - сотрудник
		+ "Контрагент,"				// <СправочникСсылка.Контрагенты> - контрагент
		+ "РасчетныйДокумент,"		// <ДокументСсылка.*> - расчетный документ
		+ "ДокументОплаты,"			// <ДокументСсылка.*> - документ оплаты
		+ "Сумма";					// <Число, 15, 2> - сумма оплат
		
	Параметры.Вставить("СписокОплаченныхУдержаний", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплаченныхУдержаний, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период движений - дата документа
		+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";			// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ВключениеАвансовВПрочиеДоходы

// Возвращает признак необходимости включения авансов покупателей в прочие доходы поквартально.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо проверить настройку
//   Период      - Дата - Дата, на которую нужно проверить возможность включения авансов покупателей в доходы
//
// Возвращаемое значение:
//   Булево
//
Функция ВключатьАвансыПокупателейВДоходыПоквартально(Организация, Период) Экспорт
	
	Если Период >= НачалоВключенияАвансовПокупателейВДоходыПоквартально()
		И УчетнаяПолитика.АвансыВключаютсяВДоходыВПериодеПолученияИП(Организация, Период) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру параметров, необходимых для расчета Авансов покупателей
//
// Возвращаемое значение:
//   Структура
//     * Организация               - СправочникСсылка.Организации - Организация, для которой вычисляются незакрытые авансы покупателей
//     * Период                    - Дата - Дата, на которую вычисляются незакрытые авансы покупателей
//     * ПоказыватьУдаленныеСтроки - Булево - Показывать в том числе удаленные пользователем ранее строки
//     * ЗаполнитьПоДаннымУчета    - Булево - Истина - заполняет таблицу авансов по данным учета, иначе с учетом редактирования данных пользователем
//     * ВидДеятельности           - СправочникСсылка.ВидыДеятельностиПредпринимателей - если указан, то возвращает авансы с отбором по указанному виду деятельности
//
Функция НовыйПараметрыРасчетаАвансовПокупателей() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Период");
	Результат.Вставить("ПоказыватьУдаленныеСтроки", Ложь);
	Результат.Вставить("ЗаполнитьПоДаннымУчета", Ложь);
	Результат.Вставить("ВидДеятельности");
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу незакрытых авансов покупателей на дату
//
// Параметры:
//   ПараметрыВыполнения - Структура - см. НовыйПараметрыРасчетаАвансовПокупателей()
//
// Возвращаемое значение:
//   - Неопределено
//   - ТаблицаЗначений
//       * СтатьяДоходов        - СправочникСсылка.ПрочиеДоходыИРасходы - статья, аванс по которой включен в прочий доход
//       * ВидДеятельности      - СправочникСсылка.ВидыДеятельностиПредпринимателей - вид деятельности, аванс по которому включен в прочий доход
//       * НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - Номенклатурная группа аванса
//       * ХарактерДеятельности - ПеречислениеСсылка.ХарактерДеятельности - Характер деятельности для включения аванса в прочий доход
//       * Сумма                - Число - Сумма аванса, включенная в прочий доход
//       * СуммаПоБУ            - Число - Сумма аванса по данным учета
//       * Контрагент           - СправочникСсылка.Контрагенты - Контрагент, который перечислил аванс
//       * ДокументОплаты       - ДокументСсылка.ПоступлениеНаРасчетныйСчет, ДокументСсылка.ПриходныйКассовыйОрдер - Документ оплаты
//       * НомерДокументаОплаты - Строка - Входящий номер документа оплаты
//       * ДатаДокументаОплаты  - Дата - Входящая дата документы оплаты
//       * НазначениеПлатежа    - Строка - Назначение платежа документа оплаты
//       * ДатаДокумента        - Дата - Дата документа оплаты
//       * НомерДокумента       - Строка - Номер документа оплаты
//
Функция АвансыПокупателей(ПараметрыВыполнения) Экспорт
	
	Организация = ПараметрыВыполнения.Организация;
	Период = ПараметрыВыполнения.Период;
	
	ДатаИзменения = Неопределено;
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, КонецМесяца(Период), ДатаИзменения);
	Если Не ПлательщикНДФЛ И ДатаИзменения < НачалоМесяца(Период) Тогда
		Возврат Неопределено; // Прекращена уплата НДФЛ в прошлых периодах
	КонецЕсли;
	
	ПлательщикНДФЛвПрошлом = УчетнаяПолитика.ПлательщикНДФЛ(Организация, НачалоДня(ДатаИзменения) - 1);
	
	Если Не ПлательщикНДФЛ И Не ПлательщикНДФЛвПрошлом Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.АвансыВключаютсяВДоходыВПериодеПолученияИП(Организация, Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрекращенаУплатаНДФЛ = Не ПлательщикНДФЛ И ПлательщикНДФЛвПрошлом;
	
	Если Не (Месяц(Период) = Месяц(КонецКвартала(Период)) Или ПрекращенаУплатаНДФЛ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент(
		"ДоходыПоАвансамПрошлогоНалоговогоПериодаИП");
	
	Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период) Тогда
		ХарактерДеятельности = УчетнаяПолитика.ХарактерДеятельностиДоходовПоАвансамИП(Организация, Период);
		НоменклатурнаяГруппа = УчетнаяПолитика.НоменклатурнаяГруппаДоходовПоАвансамИП(Организация, Период);
		ВидДеятельности = УчетнаяПолитика.ВидДеятельностиДоходовПоАвансамИП(Организация, Период);
	Иначе
		ХарактерДеятельности = УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Период);
		НоменклатурнаяГруппа = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Организация, Период);
		ВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, Период);
	КонецЕсли;
	
	СчетаРасчетыПоАвансам = Новый Массив;
	СчетаРасчетыПоАвансам.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	СчетаРасчетыПоАвансам.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);
	СчетаРасчетыПоАвансам.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	
	ВидыСубконтоРасчетыПоАвансам = Новый Массив;
	ВидыСубконтоРасчетыПоАвансам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетыПоАвансам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	СчетаРасчетыПоАвансамПатент = Новый Массив;
	СчетаРасчетыПоАвансамПатент.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	СчетаРасчетыПоАвансамПатент.Добавить(ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент);
	
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период);
	
	ВидыСубконтоНДСпоАвансам = Новый Массив;
	ВидыСубконтоНДСпоАвансам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоНДСпоАвансам.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	
	НалоговыйПериод = НалоговыйПериод(Организация, Период);
	Если ПрекращенаУплатаНДФЛ Тогда
		КонецПериода = Мин(НалоговыйПериод.Конец, НачалоДня(ДатаИзменения) - 1);
	Иначе
		КонецПериода = КонецКвартала(Период);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоПериода",                НалоговыйПериод.Начало);
	Запрос.УстановитьПараметр("КонецПериода",                 Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоКвартала",               НачалоКвартала(КонецПериода));
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("СчетаРасчетыПоАвансам",        СчетаРасчетыПоАвансам);
	Запрос.УстановитьПараметр("СчетаРасчетыПоАвансамПатент",  СчетаРасчетыПоАвансамПатент);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",         ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетыПоАвансам", ВидыСубконтоРасчетыПоАвансам);
	Запрос.УстановитьПараметр("СчетНДСпоАвансам",             ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	Запрос.УстановитьПараметр("ВидыСубконтоНДСпоАвансам",     ВидыСубконтоНДСпоАвансам);
	Запрос.УстановитьПараметр("СтатьяДоходов",                СтатьяДоходов);
	Запрос.УстановитьПараметр("ХарактерДеятельности",         ХарактерДеятельности);
	Запрос.УстановитьПараметр("ВидДеятельности",              ВидДеятельности);
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",         НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ЗаполнитьПоДаннымУчета",       ПараметрыВыполнения.ЗаполнитьПоДаннымУчета);
	Запрос.УстановитьПараметр("ПоказыватьУдаленныеСтроки",    ПараметрыВыполнения.ПоказыватьУдаленныеСтроки);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ДокументОплаты,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОстаткиАвансовБУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&СчетаРасчетыПоАвансам), &ВидыСубконтоРасчетыПоАвансам, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт > 0
	|	И ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОборотыПатент.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОборотыПатент.Субконто2 КАК ДокументОплаты,
	|	ХозрасчетныйОстаткиИОборотыПатент.СуммаКонечныйОстатокКт КАК Сумма
	|ПОМЕСТИТЬ ВТ_ОстаткиАвансовПатент
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет В (&СчетаРасчетыПоАвансамПатент),
	|			&ВидыСубконтоРасчетыПоАвансам,
	|			&ПрименяетсяУСНПатент
	|				И Организация = &Организация) КАК ХозрасчетныйОстаткиИОборотыПатент
	|ГДЕ
	|	ХозрасчетныйОстаткиИОборотыПатент.СуммаКонечныйОстатокКт > 0
	|	И ХозрасчетныйОстаткиИОборотыПатент.СуммаНачальныйОстатокКт = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументОплаты,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК НДС
	|ПОМЕСТИТЬ ВТ_НДСПредъявленный
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет = &СчетНДСпоАвансам,
	|			&ВидыСубконтоНДСпоАвансам,
	|			Организация = &Организация
	|				И Субконто2 В
	|					(ВЫБРАТЬ
	|						ВТ_ОстаткиАвансовБУ.ДокументОплаты КАК ДокументОплаты
	|					ИЗ
	|						ВТ_ОстаткиАвансовБУ КАК ВТ_ОстаткиАвансовБУ)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СтатьяДоходов КАК СтатьяДоходов,
	|	&ВидДеятельности КАК ВидДеятельности,
	|	ВТ_ОстаткиАвансовБУ.Сумма - ЕСТЬNULL(ВТ_ОстаткиАвансовПатент.Сумма, 0) - ЕСТЬNULL(ВТ_НДСПредъявленный.НДС, 0) КАК Сумма,
	|	ВТ_ОстаткиАвансовБУ.Контрагент КАК Контрагент,
	|	ВТ_ОстаткиАвансовБУ.ДокументОплаты КАК ДокументОплаты
	|ПОМЕСТИТЬ ДанныеПоБУ
	|ИЗ
	|	ВТ_ОстаткиАвансовБУ КАК ВТ_ОстаткиАвансовБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НДСПредъявленный КАК ВТ_НДСПредъявленный
	|		ПО ВТ_ОстаткиАвансовБУ.Контрагент = ВТ_НДСПредъявленный.Контрагент
	|			И ВТ_ОстаткиАвансовБУ.ДокументОплаты = ВТ_НДСПредъявленный.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиАвансовПатент КАК ВТ_ОстаткиАвансовПатент
	|		ПО ВТ_ОстаткиАвансовБУ.Контрагент = ВТ_ОстаткиАвансовПатент.Контрагент
	|			И ВТ_ОстаткиАвансовБУ.ДокументОплаты = ВТ_ОстаткиАвансовПатент.ДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НДСПредъявленный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОстаткиАвансовПатент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПАвансыПокупателейСрезПоследних.Контрагент КАК Контрагент,
	|	ИПАвансыПокупателейСрезПоследних.ДокументОплаты КАК ДокументОплаты,
	|	ИПАвансыПокупателейСрезПоследних.ВидДеятельности КАК ВидДеятельности,
	|	ИПАвансыПокупателейСрезПоследних.СтатьяДоходов КАК СтатьяДоходов,
	|	ИПАвансыПокупателейСрезПоследних.Сумма КАК Сумма
	|ПОМЕСТИТЬ ИПАвансыПокупателей
	|ИЗ
	|	РегистрСведений.ИПАвансыПокупателей.СрезПоследних(
	|			&НачалоКвартала,
	|			Организация = &Организация
	|				И НЕ &ЗаполнитьПоДаннымУчета) КАК ИПАвансыПокупателейСрезПоследних
	|ГДЕ
	|	(ИПАвансыПокупателейСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ ИПАвансыПокупателейСрезПоследних.ДействуетДо > &НачалоКвартала)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИПАвансыПокупателей.СтатьяДоходов, &СтатьяДоходов) КАК СтатьяДоходов,
	|	ИПАвансыПокупателей.ВидДеятельности КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА ИПАвансыПокупателей.ВидДеятельности ЕСТЬ NULL
	|			ТОГДА &НоменклатурнаяГруппа
	|		ИНАЧЕ ИПАвансыПокупателей.ВидДеятельности.НоменклатурнаяГруппа
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА ИПАвансыПокупателей.ВидДеятельности ЕСТЬ NULL
	|			ТОГДА &ХарактерДеятельности
	|		ИНАЧЕ ИПАвансыПокупателей.ВидДеятельности.ХарактерДеятельности
	|	КОНЕЦ КАК ХарактерДеятельности,
	|	ДанныеПоБУ.Сумма + ЕСТЬNULL(ИПАвансыПокупателей.Сумма, 0) КАК Сумма,
	|	ДанныеПоБУ.Сумма КАК СуммаПоБУ,
	|	ДанныеПоБУ.Контрагент КАК Контрагент,
	|	ДанныеПоБУ.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.Номер, """") КАК НомерДокументаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.Дата, """") КАК ДатаДокументаОплаты,
	|	ВЫРАЗИТЬ(ДанныеПоБУ.ДокументОплаты КАК Документ.ПоступлениеНаРасчетныйСчет).НазначениеПлатежа КАК НазначениеПлатежа,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, """") КАК ДатаДокумента,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.НомерРегистратора, """") КАК НомерДокумента
	|ИЗ
	|	ДанныеПоБУ КАК ДанныеПоБУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИПАвансыПокупателей КАК ИПАвансыПокупателей
	|		ПО ДанныеПоБУ.Контрагент = ИПАвансыПокупателей.Контрагент
	|			И ДанныеПоБУ.ДокументОплаты = ИПАвансыПокупателей.ДокументОплаты
	|			И (ИПАвансыПокупателей.ВидДеятельности = &ВидДеятельности)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ДанныеПоБУ.ДокументОплаты = РеквизитыДокументовОплаты.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоказыватьУдаленныеСтроки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ДанныеПоБУ.Сумма + ЕСТЬNULL(ИПАвансыПокупателей.Сумма, 0) > 0
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИПАвансыПокупателей.СтатьяДоходов, &СтатьяДоходов),
	|	ЕСТЬNULL(ИПАвансыПокупателей.ВидДеятельности, &ВидДеятельности),
	|	ВЫБОР
	|		КОГДА ИПАвансыПокупателей.ВидДеятельности ЕСТЬ NULL
	|			ТОГДА &НоменклатурнаяГруппа
	|		ИНАЧЕ ИПАвансыПокупателей.ВидДеятельности.НоменклатурнаяГруппа
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИПАвансыПокупателей.ВидДеятельности ЕСТЬ NULL
	|			ТОГДА &ХарактерДеятельности
	|		ИНАЧЕ ИПАвансыПокупателей.ВидДеятельности.ХарактерДеятельности
	|	КОНЕЦ,
	|	ДанныеПоБУ.Сумма + ЕСТЬNULL(ИПАвансыПокупателей.Сумма, 0),
	|	ДанныеПоБУ.Сумма,
	|	ДанныеПоБУ.Контрагент,
	|	ДанныеПоБУ.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.Номер, """"),
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.Дата, """"),
	|	ВЫРАЗИТЬ(ДанныеПоБУ.ДокументОплаты КАК Документ.ПоступлениеНаРасчетныйСчет).НазначениеПлатежа,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, """"),
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.НомерРегистратора, """")
	|ИЗ
	|	ДанныеПоБУ КАК ДанныеПоБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИПАвансыПокупателей КАК ИПАвансыПокупателей
	|		ПО ДанныеПоБУ.Контрагент = ИПАвансыПокупателей.Контрагент
	|			И ДанныеПоБУ.ДокументОплаты = ИПАвансыПокупателей.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ДанныеПоБУ.ДокументОплаты = РеквизитыДокументовОплаты.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ИПАвансыПокупателей.ВидДеятельности ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ИПАвансыПокупателей.ВидДеятельности <> &ВидДеятельности
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПоказыватьУдаленныеСтроки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ДанныеПоБУ.Сумма + ЕСТЬNULL(ИПАвансыПокупателей.Сумма, 0) > 0
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОплаты");
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.ВидДеятельности) Тогда
		
		Для Каждого ТекущийПакет Из СхемаЗапроса.ПакетЗапросов Цикл
			
			Если ТипЗнч(ТекущийПакет) <> Тип("ЗапросВыбораСхемыЗапроса")
				Или ЗначениеЗаполнено(ТекущийПакет.ТаблицаДляПомещения) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого ТекущийОператор Из ТекущийПакет.Операторы Цикл
				ТекущийОператор.Отбор.Добавить(
					"ЕСТЬNULL(ИПАвансыПокупателей.ВидДеятельности, &ВидДеятельности) = &ВидДеятельностиОтбор");
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ВидДеятельностиОтбор", ПараметрыВыполнения.ВидДеятельности);
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАвансов = Неопределено;
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаАвансов = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаАвансов;
	
КонецФункции

Функция ПодготовитьТаблицуВключенияАвансовВПрочиеДоходы(ТаблицаРеквизитов, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВключенияАвансовВПрочиеДоходы(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ПараметрыРасчетаАвансов = НовыйПараметрыРасчетаАвансовПокупателей();
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаАвансов, Реквизиты);
	
	АвансыПокупателей = АвансыПокупателей(ПараметрыРасчетаАвансов);
	
	Если АвансыПокупателей = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АвансыПокупателей.Свернуть("НоменклатурнаяГруппа, ХарактерДеятельности, СтатьяДоходов, ДокументОплаты", "Сумма");
	
	Если Не ВключатьАвансыПокупателейВДоходыПоквартально(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат АвансыПокупателей;
	КонецЕсли;
	
	// Скорректируем таблицу на ранее записанные в регистр данные
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	АвансыПокупателей.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	АвансыПокупателей.ХарактерДеятельности КАК ХарактерДеятельности,
	|	АвансыПокупателей.СтатьяДоходов КАК СтатьяДоходов,
	|	АвансыПокупателей.ДокументОплаты КАК ДокументОплаты,
	|	АвансыПокупателей.Сумма КАК Сумма
	|ПОМЕСТИТЬ АвансыПокупателей
	|ИЗ
	|	&АвансыПокупателей КАК АвансыПокупателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныеДанные.Организация КАК Организация,
	|	ПредварительныеДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПредварительныеДанные.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ПредварительныеДанные.СтатьяДоходов КАК СтатьяДоходов,
	|	ПредварительныеДанные.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ПредварительныеДанные.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИППрочиеДоходыОбороты.Организация КАК Организация,
	|		ИППрочиеДоходыОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		ИППрочиеДоходыОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|		ИППрочиеДоходыОбороты.СтатьяДоходов КАК СтатьяДоходов,
	|		ИППрочиеДоходыОбороты.ДокументОплаты КАК ДокументОплаты,
	|		-ИППрочиеДоходыОбороты.СуммаОборот КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ИППрочиеДоходы.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИППрочиеДоходыОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Организация,
	|		АвансыПокупателей.НоменклатурнаяГруппа,
	|		АвансыПокупателей.ХарактерДеятельности,
	|		АвансыПокупателей.СтатьяДоходов,
	|		АвансыПокупателей.ДокументОплаты,
	|		АвансыПокупателей.Сумма
	|	ИЗ
	|		АвансыПокупателей КАК АвансыПокупателей) КАК ПредварительныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныеДанные.Организация,
	|	ПредварительныеДанные.НоменклатурнаяГруппа,
	|	ПредварительныеДанные.ХарактерДеятельности,
	|	ПредварительныеДанные.СтатьяДоходов,
	|	ПредварительныеДанные.ДокументОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПредварительныеДанные.Сумма) <> 0");
	
	Запрос.УстановитьПараметр("НачалоПериода", НалоговыйПериод(Реквизиты.Организация, Реквизиты.Период).Начало);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("АвансыПокупателей", АвансыПокупателей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыВключенияАвансовВПрочиеДоходы(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВключениеАвансовВПрочиеДоходы(ТаблицаАвансов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаАвансов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Реквизиты.Организация, НачалоМесяца(Реквизиты.Период), КонецМесяца(Реквизиты.Период)) Тогда
		Возврат;
	КонецЕсли;
	 
	Параметры = ПодготовитьПараметрыВключениеАвансовВПрочиеДоходы(ТаблицаАвансов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокАвансов = Параметры.СписокАвансов;
	
	Для каждого ПрочийДоход Из СписокАвансов Цикл
		
		Движение = Движения.ИППрочиеДоходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ПрочийДоход);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
	Движения.ИППрочиеДоходы.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВключениеАвансовВПрочиеДоходы(ТаблицаАвансов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокАвансов
	
	СписокОбязательныхКолонок = ""
		+ "СтатьяДоходов,"			// <СправочникСсылка.ПрочиеДоходыИРасходы> - статья прочих доходов
		+ "ХарактерДеятельности,"	// <СправочникСсылка.ХарактерДеятельности> - характер деятельности
		+ "НоменклатурнаяГруппа,"	// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ДокументОплаты,"         // <ДокументСсылка.ПоступлениеНаРасчетныйСчет, ДокументСсылка.ПриходныйКассовыйОрдер> - документ оплаты
		+ "Сумма";					// <Число, 15, 2> - сумма аванса
		
	Параметры.Вставить("СписокАвансов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область РаспределениеРасходовПоВидамДеятельности

Процедура СформироватьДвиженияРаспределениеРасходовЕНВД(ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Перем ДатаИзменения;
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	НачалоПериода = ОбщегоНазначенияБПКлиентСервер.НачалоПериода(Реквизиты.Период, Реквизиты.Периодичность);
	КонецПериода = ОбщегоНазначенияБПКлиентСервер.КонецПериода(Реквизиты.Период, Реквизиты.Периодичность);
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, КонецПериода, ДатаИзменения);
	Если Не ПлательщикНДФЛ И ДатаИзменения <= НачалоПериода Тогда
		Возврат; // ОСНО не применяется с прошлых периодов
	КонецЕсли;
	
	Если Не ПлательщикНДФЛ И Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, НачалоДня(ДатаИзменения) - 1) Тогда
		Возврат; // Учетная политика изменился в текущем периоде, но применять ОСНО не начали
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРаспределениеРасходовЕНВД(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Распределенные ИМР списываем, нераспределенные ИМР списываются после распределения
	УчестьРаспределенныеИныеМатериальныеРасходы(Реквизиты, Движения, Отказ);
	
	Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период) Тогда
		// Нераспределенные расходы распределяем
		РаспределитьРасходыПоВидамДеятельности(ТаблицаРеквизитов, Движения, Отказ);
	КонецЕсли;
	
	Если Движения.ИПИныеМатериальныеРасходы.Записывать Тогда
		Движения.ИПИныеМатериальныеРасходы.УстановитьАктивность(Истина);
		Движения.ИПИныеМатериальныеРасходы.Записать(Ложь);
		Движения.ИПИныеМатериальныеРасходы.Записывать = Ложь
	КонецЕсли;
	
	// Распределение ИМР по стоимости партий МПЗ
	РаспределитьИныеМатериальныеРасходыПоПартиямМПЗ(ТаблицаРеквизитов, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРаспределениеРасходовЕНВД(ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура УчестьРаспределенныеИныеМатериальныеРасходы(Реквизиты, Движения, Отказ)
	
	КонГраница = Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("НедопустимыеХарактерыДеятельности", РаспределяемыеХарактерыДеятельности());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток,
	|	ИПИныеМатериальныеРасходыОстатки.СуммаОстаток,
	|	ИПИныеМатериальныеРасходыОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТ_ИПИныеМатериальныеРасходыОстатки
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И МПЗ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ПартияМПЗ = НЕОПРЕДЕЛЕНО
	|				И &УсловиеПоНоменклатурнойГруппе
	|				И &УсловиеПоХарактеруДеятельности) КАК ИПИныеМатериальныеРасходыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.Партия КАК Партия,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаПартии,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ КАК МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ КАК ПартияМПЗ,
	|	ЕСТЬNULL(РеквизитыПартийМПЗ.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаПартииМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток КАК Количество,
	|	ИПИныеМатериальныеРасходыОстатки.СуммаОстаток КАК Сумма,
	|	ИПИныеМатериальныеРасходыОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	ВТ_ИПИныеМатериальныеРасходыОстатки КАК ИПИныеМатериальныеРасходыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПИныеМатериальныеРасходыОстатки.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПИныеМатериальныеРасходыОстатки.Партия = РеквизитыДокументовОплаты.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартийМПЗ
	|		ПО (РеквизитыПартийМПЗ.Организация = &Организация)
	|			И ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ = РеквизитыПартийМПЗ.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПартии,
	|	Партия,
	|	ДатаДокументаОплаты,
	|	ДокументОплаты,
	|	МПЗ,
	|	ДатаПартииМПЗ,
	|	ПартияМПЗ,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	СтатьяЗатрат";
	
	Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНоменклатурнойГруппе",  "НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоХарактеруДеятельности", "НЕ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности)");
	Иначе
		// Если не ведется учет по видам деятельности, все расходы относятся к основному виду деятельности
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНоменклатурнойГруппе",  "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоХарактеруДеятельности", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Движения.ИПИныеМатериальныеРасходы.Записывать = Истина;
		
		Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьРасходыПоВидамДеятельности(ТаблицаРеквизитов, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРаспределениеРасходовЕНВД(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	НачДата    = НачалоМесяца(Реквизиты.Период);
	КонДата    = КонецМесяца (Реквизиты.Период);
	НачГраница = Новый Граница(НачДата, ВидГраницы.Включая);
	КонГраница = Новый Граница(КонДата, ВидГраницы.Включая);
	
	// Базой распределения являются доходы, полученные в этом месяце, отдельно по каждой
	// номенклатурной группе и характеру деятельности. Доходы должны быть фактически получены,
	// то есть база распределения формируется на основании погашенной задолженности покупателей
	// в текущем месяце.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  КонГраница);
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПДоходыОбороты.ХарактерДеятельности,
	|	ИПДоходыОбороты.НоменклатурнаяГруппа,
	|	ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот КАК Доход
	|ИЗ
	|	РегистрНакопления.ИПДоходы.Обороты(&НачалоМесяца, &КонецМесяца, , Организация = &Организация) КАК ИПДоходыОбороты
	|ГДЕ
	|	ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот <> 0";
	
	БазаРаспределенияРасходов = Запрос.Выполнить().Выгрузить();
	Если БазаРаспределенияРасходов.Количество() = 0 Тогда
		Возврат; // Распределить без базы не получится
	КонецЕсли;
	
	// Распределение МПЗ и ИМР, распределяемых по всем вида деятельности
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  КонГраница);
	Запрос.УстановитьПараметр("Период",       НачДата);
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("НедопустимыеХарактерыДеятельности", РаспределяемыеХарактерыДеятельности());
	Запрос.УстановитьПараметр("РаспределяемыеВидыМПЗ",             РаспределяемыеВидыМПЗ());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПМПЗОстатки.ВидМПЗ КАК ВидМПЗ,
	|	ИПМПЗОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ИПМПЗОстатки.ХарактерДеятельности КАК ХарактерДеятельности,
	|	ИПМПЗОстатки.Номенклатура КАК Номенклатура,
	|	ИПМПЗОстатки.Партия КАК Партия,
	|	ИПМПЗОстатки.ДокументОплаты КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО КАК МПЗ,
	|	НЕОПРЕДЕЛЕНО КАК ПартияМПЗ,
	|	ИПМПЗОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ИПМПЗОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ИПМПЗОстатки.НДСОстаток КАК НДСОстаток,
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТ_РаспределяемыеРасходы
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ВидМПЗ В (&РаспределяемыеВидыМПЗ)
	|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПМПЗОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ИныеМатериальныеРасходы),
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток,
	|	ИПИныеМатериальныеРасходыОстатки.СуммаОстаток,
	|	ИПИныеМатериальныеРасходыОстатки.НДСОстаток,
	|	&Период
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И МПЗ = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ПартияМПЗ = НЕОПРЕДЕЛЕНО
	|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПИныеМатериальныеРасходыОстатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ПрочиеРасходы),
	|	ИППрочиеРасходыОбороты.НоменклатурнаяГруппа,
	|	ИППрочиеРасходыОбороты.ХарактерДеятельности,
	|	ИППрочиеРасходыОбороты.СтатьяЗатрат,
	|	ИППрочиеРасходыОбороты.РасчетныйДокумент,
	|	ИППрочиеРасходыОбороты.ДокументОплаты,
	|	ИППрочиеРасходыОбороты.СчетУчета,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ИППрочиеРасходыОбороты.СуммаОборот,
	|	ИППрочиеРасходыОбороты.НДСОборот,
	|	ИППрочиеРасходыОбороты.Период
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Месяц,
	|			Организация = &Организация
	|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИППрочиеРасходыОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИПРасходыНаОплатуТрудаОбороты.ВидНачисленияУдержания,
	|	ИПРасходыНаОплатуТрудаОбороты.НоменклатурнаяГруппа,
	|	ИПРасходыНаОплатуТрудаОбороты.ХарактерДеятельности,
	|	ИПРасходыНаОплатуТрудаОбороты.СтатьяЗатрат,
	|	ИПРасходыНаОплатуТрудаОбороты.РасчетныйДокумент,
	|	ИПРасходыНаОплатуТрудаОбороты.ДокументОплаты,
	|	ИПРасходыНаОплатуТрудаОбороты.ФизЛицо,
	|	ИПРасходыНаОплатуТрудаОбороты.Контрагент,
	|	0,
	|	ИПРасходыНаОплатуТрудаОбороты.СуммаОборот,
	|	0,
	|	ИПРасходыНаОплатуТрудаОбороты.Период
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Месяц,
	|			Организация = &Организация
	|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))) КАК ИПРасходыНаОплатуТрудаОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	ИПРБПОбороты.НоменклатурнаяГруппа,
	|	ИПРБПОбороты.ХарактерДеятельности,
	|	ИПРБПОбороты.ВидРасхода,
	|	ИПРБПОбороты.Партия,
	|	ИПРБПОбороты.ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ИПРБПОбороты.СуммаРасход,
	|	ИПРБПОбороты.НДСРасход,
	|	&Период
	|ИЗ
	|	РегистрНакопления.ИПРБП.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Месяц,
	|			Организация = &Организация
	|				И (НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|					ИЛИ ХарактерДеятельности В (&НедопустимыеХарактерыДеятельности))
	|				И Партия <> НЕОПРЕДЕЛЕНО) КАК ИПРБПОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределяемыеРасходы.ВидМПЗ КАК ВидМПЗ,
	|	РаспределяемыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РаспределяемыеРасходы.ХарактерДеятельности КАК ХарактерДеятельности,
	|	РаспределяемыеРасходы.Номенклатура КАК Номенклатура,
	|	РаспределяемыеРасходы.Партия КАК Партия,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаПартии,
	|	РаспределяемыеРасходы.ДокументОплаты КАК ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	РаспределяемыеРасходы.МПЗ КАК МПЗ,
	|	РаспределяемыеРасходы.ПартияМПЗ КАК ПартияМПЗ,
	|	ЕСТЬNULL(РеквизитыПартийМПЗ.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаПартииМПЗ,
	|	РаспределяемыеРасходы.КоличествоОстаток КАК Количество,
	|	РаспределяемыеРасходы.СуммаОстаток КАК Сумма,
	|	РаспределяемыеРасходы.НДСОстаток КАК НДС,
	|	РаспределяемыеРасходы.Период КАК Период
	|ИЗ
	|	ВТ_РаспределяемыеРасходы КАК РаспределяемыеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И РаспределяемыеРасходы.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И РаспределяемыеРасходы.Партия = РеквизитыДокументовОплаты.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартийМПЗ
	|		ПО (РеквизитыПартийМПЗ.Организация = &Организация)
	|			И РаспределяемыеРасходы.ПартияМПЗ = РеквизитыПартийМПЗ.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидМПЗ,
	|	ДатаПартии,
	|	Партия,
	|	ДатаДокументаОплаты,
	|	ДокументОплаты,
	|	МПЗ,
	|	ДатаПартииМПЗ,
	|	ПартияМПЗ,
	|	НоменклатурнаяГруппа,
	|	ХарактерДеятельности,
	|	Номенклатура";
	
	РаспределяемыеРасходы = Запрос.Выполнить().Выгрузить();
	
	РаспределяемыеРасходы.Колонки.ХарактерДеятельности.Имя = "ХарактерДеятельности1";
	РаспределяемыеРасходы.Колонки.НоменклатурнаяГруппа.Имя = "НоменклатурнаяГруппа1";
	РаспределяемыеРасходы.Колонки.Добавить("ХарактерДеятельности2", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	РаспределяемыеРасходы.Колонки.Добавить("НоменклатурнаяГруппа2", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	
	ИзмененияВидаДеятельности = ПолучитьПустуюТаблицуИзмененияВидаДеятельности();
	
	Для каждого Расход Из РаспределяемыеРасходы Цикл
	
		// Если известна номенклатурная группа или характер деятельности,
		// то необходимо уточнить базу распределения.
		УточненнаяБазаРаспределенияРасходов = БазаРаспределенияРасходовУточненнаяПоХарактеруИГруппе(
			БазаРаспределенияРасходов, Расход.НоменклатурнаяГруппа1, Расход.ХарактерДеятельности1);
		
		Если УточненнаяБазаРаспределенияРасходов.Количество() > 0 Тогда
			
			РасходРаспределенныйПоБазе = РаспределениеПоБазе(Расход, "Сумма", 2, "НДС", 2, "Количество", 3, УточненнаяБазаРаспределенияРасходов, "Доход");
			Для Каждого СтрокаРасходаПоБазе Из РасходРаспределенныйПоБазе Цикл
				НоваяСтрока = ИзмененияВидаДеятельности.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасходаПоБазе);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьДвиженияИзменениеВидаДеятельности(ИзмененияВидаДеятельности, ТаблицаРеквизитов, , Движения, Отказ);
	
	Для Каждого СтрокаИзмененияВидаДеятельности Из ИзмененияВидаДеятельности Цикл
		
		Если СтрокаИзмененияВидаДеятельности.ВидМПЗ <> Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
			Продолжить;
		КонецЕсли;
		
		Движения.ИПИныеМатериальныеРасходы.Записывать = Истина;
		
		Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаИзмененияВидаДеятельности);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.ХарактерДеятельности = СтрокаИзмененияВидаДеятельности.ХарактерДеятельности2;
		Движение.НоменклатурнаяГруппа = СтрокаИзмененияВидаДеятельности.НоменклатурнаяГруппа2;
		Движение.СтатьяЗатрат         = СтрокаИзмененияВидаДеятельности.Номенклатура;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьИныеМатериальныеРасходыПоПартиямМПЗ(ТаблицаРеквизитов, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРаспределениеРасходовЕНВД(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	НачДата    = НачалоМесяца(Реквизиты.Период);
	КонДата    = КонецМесяца (Реквизиты.Период);
	НачГраница = Новый Граница(НачДата, ВидГраницы.Включая);
	КонГраница = Новый Граница(КонДата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецМесяца", КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток,
	|	ИПИныеМатериальныеРасходыОстатки.СуммаОстаток,
	|	ИПИныеМатериальныеРасходыОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТ_ИПИныеМатериальныеРасходыОстатки
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И МПЗ <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И ПартияМПЗ <> НЕОПРЕДЕЛЕНО) КАК ИПИныеМатериальныеРасходыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПИныеМатериальныеРасходыОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа1,
	|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности КАК ХарактерДеятельности1,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатурнаяГруппа2,
	|	НЕОПРЕДЕЛЕНО КАК ХарактерДеятельности2,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыМПЗ.ИныеМатериальныеРасходы) КАК ВидМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат КАК Номенклатура,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаПартии,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаДокументаОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
	|	ЕСТЬNULL(РеквизитыПартийМПЗ.ДатаРегистратора, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаПартииМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток КАК Количество,
	|	ИПИныеМатериальныеРасходыОстатки.СуммаОстаток КАК Сумма,
	|	ИПИныеМатериальныеРасходыОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	ВТ_ИПИныеМатериальныеРасходыОстатки КАК ИПИныеМатериальныеРасходыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО (РеквизитыПартий.Организация = &Организация)
	|			И ИПИныеМатериальныеРасходыОстатки.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И ИПИныеМатериальныеРасходыОстатки.Партия = РеквизитыДокументовОплаты.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартийМПЗ
	|		ПО (РеквизитыПартийМПЗ.Организация = &Организация)
	|			И ИПИныеМатериальныеРасходыОстатки.Партия = РеквизитыПартийМПЗ.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПартии,
	|	ИПИныеМатериальныеРасходыОстатки.Партия,
	|	ДатаДокументаОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
	|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
	|	ДатаПартииМПЗ,
	|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
	|	НоменклатурнаяГруппа1,
	|	ХарактерДеятельности1,
	|	Номенклатура";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НераспределенныеИМР = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачГраница);
	Запрос.УстановитьПараметр("КонецМесяца",  КонГраница);
	Запрос.УстановитьПараметр("Номенклатура", ОбщегоНазначения.ВыгрузитьКолонку(НераспределенныеИМР, "МПЗ" , Истина));
	Запрос.УстановитьПараметр("Партии",       ОбщегоНазначения.ВыгрузитьКолонку(НераспределенныеИМР, "ПартияМПЗ" , Истина));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ХарактерДеятельности,
	|	ВложенныйЗапрос.Партия,
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.Расход) КАК Расход,
	|	СУММА(ВложенныйЗапрос.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПМПЗОстаткиИОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|		ИПМПЗОстаткиИОбороты.ХарактерДеятельности КАК ХарактерДеятельности,
	|		ИПМПЗОстаткиИОбороты.Партия КАК Партия,
	|		ИПМПЗОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|		0 КАК Расход,
	|		ИПМПЗОстаткиИОбороты.СуммаКонечныйОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ИПМПЗ.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И Номенклатура В (&Номенклатура)
	|					И Партия В (&Партии)) КАК ИПМПЗОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ИПМПЗОтгруженныеОстаткиИОбороты.НоменклатурнаяГруппа,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.ХарактерДеятельности,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.Партия,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.Номенклатура,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.СуммаРасход,
	|		ИПМПЗОтгруженныеОстаткиИОбороты.СуммаКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ИПМПЗОтгруженные.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И Номенклатура В (&Номенклатура)
	|					И Партия В (&Партии)) КАК ИПМПЗОтгруженныеОстаткиИОбороты
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.НоменклатурнаяГруппа,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.ХарактерДеятельности,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.Партия,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СтатьяЗатрат,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СуммаРасход,
	|		ИПИныеМатериальныеРасходыОстаткиИОбороты.СуммаКонечныйОстаток
	|	ИЗ
	|		РегистрНакопления.ИПИныеМатериальныеРасходы.ОстаткиИОбороты(
	|				&НачалоМесяца,
	|				&КонецМесяца,
	|				,
	|				Движения,
	|				Организация = &Организация
	|					И СтатьяЗатрат В (&Номенклатура)
	|					И Партия В (&Партии)) КАК ИПИныеМатериальныеРасходыОстаткиИОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.ХарактерДеятельности,
	|	ВложенныйЗапрос.Партия,
	|	ВложенныйЗапрос.Номенклатура";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	БазаРаспределенияДопРасходов = Результат.Выгрузить();
	БазаРаспределенияДопРасходов.Индексы.Добавить("НоменклатурнаяГруппа");
	
	ИзмененияВидаДеятельности = ПолучитьПустуюТаблицуИзмененияВидаДеятельности();
	
	Отбор	= Новый Структура("Партия,Номенклатура ");
	
	Для Каждого ИМР Из НераспределенныеИМР Цикл
		Отбор.Партия		= ИМР.ПартияМПЗ;
		Отбор.Номенклатура	= ИМР.МПЗ;
		
		УточненнаяБазаРаспределенияДопРасходов	= БазаРаспределенияДопРасходов.Скопировать(БазаРаспределенияДопРасходов.НайтиСтроки(Отбор));
		
		Если УточненнаяБазаРаспределенияДопРасходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Расход	= УточненнаяБазаРаспределенияДопРасходов.Итог("Расход");
		Остаток	= УточненнаяБазаРаспределенияДопРасходов.Итог("Остаток");
		
		Если (Остаток <> 0) И ((Остаток + Расход) <> 0) Тогда
			ИМР.Сумма		= Окр(ИМР.Сумма * Расход / (Остаток + Расход), 2, 1); 
			ИМР.Количество	= Окр(ИМР.Количество * Расход / (Остаток + Расход), 3, 1);
			ИМР.НДС			= Окр(ИМР.НДС * Расход / (Остаток + Расход), 2, 1);
		КонецЕсли;
		
		Если ИМР.Сумма <> 0 Тогда
			ТабВрем	= РаспределениеПоБазе(ИМР, "Сумма", 2, "НДС", 2, "Количество", 3, УточненнаяБазаРаспределенияДопРасходов, "Расход");
			Для Каждого ТабСтрока Из ТабВрем Цикл
				НоваяСтрока = ИзмененияВидаДеятельности.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТабСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьДвиженияИзменениеВидаДеятельности(ИзмененияВидаДеятельности, ТаблицаРеквизитов, Ложь, Движения, Отказ);
	
	ТаблицаИМР	= Новый ТаблицаЗначений;
	ТаблицаИМР.Колонки.Добавить("ХарактерДеятельности",	Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	ТаблицаИМР.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаИМР.Колонки.Добавить("СтатьяЗатрат",			Справочники.ТипВсеСсылки());
	ТаблицаИМР.Колонки.Добавить("Партия",				Документы.ТипВсеСсылки());
	ТаблицаИМР.Колонки.Добавить("ДокументОплаты",		Документы.ТипВсеСсылки());
	ТаблицаИМР.Колонки.Добавить("МПЗ",					Новый ОписаниеТипов(Справочники.ТипВсеСсылки(), "ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаИМР.Колонки.Добавить("ПартияМПЗ",			Новый ОписаниеТипов(Справочники.ТипВсеСсылки(), Документы.ТипВсеСсылки().Типы()));
	ТаблицаИМР.Колонки.Добавить("Количество",			ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаИМР.Колонки.Добавить("Сумма",				ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаИМР.Колонки.Добавить("НДС",					ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого СтрокаИзмененияВидаДеятельности Из ИзмененияВидаДеятельности Цикл
		
		Если НЕ СтрокаИзмененияВидаДеятельности.ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы Тогда
			Продолжить;
		КонецЕсли;
		
		ИМР	= ТаблицаИМР.Добавить();
		ЗаполнитьЗначенияСвойств(ИМР, Реквизиты);
		ИМР.НоменклатурнаяГруппа	= СтрокаИзмененияВидаДеятельности.НоменклатурнаяГруппа2;
		ИМР.ХарактерДеятельности	= СтрокаИзмененияВидаДеятельности.ХарактерДеятельности2;
		ИМР.СтатьяЗатрат			= СтрокаИзмененияВидаДеятельности.Номенклатура;
		ИМР.Партия					= СтрокаИзмененияВидаДеятельности.Партия;
		ИМР.ДокументОплаты			= СтрокаИзмененияВидаДеятельности.ДокументОплаты;
		ИМР.МПЗ						= СтрокаИзмененияВидаДеятельности.МПЗ;
		ИМР.ПартияМПЗ				= СтрокаИзмененияВидаДеятельности.ПартияМПЗ;
		ИМР.Количество				= СтрокаИзмененияВидаДеятельности.Количество;
		ИМР.Сумма					= СтрокаИзмененияВидаДеятельности.Сумма;
		ИМР.НДС						= СтрокаИзмененияВидаДеятельности.НДС;
		
	КонецЦикла;
	
	Если ТаблицаИМР.Количество() > 0 Тогда
		
		Движения.ИПИныеМатериальныеРасходы.Записывать = Истина;
		
		Для Каждого ИМР Из ТаблицаИМР Цикл
			Движение = Движения.ИПИныеМатериальныеРасходы.ДобавитьРасход();
			ЗаполнитьЗначенияСвойств(Движение, ИМР);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Движения.ИПИныеМатериальныеРасходы.Записывать Тогда
		Движения.ИПИныеМатериальныеРасходы.УстановитьАктивность(Истина);
		Движения.ИПИныеМатериальныеРасходы.Записать(Ложь);
		Движения.ИПИныеМатериальныеРасходы.Записывать = Ложь
	КонецЕсли;
	
	Если Движения.ИППрочиеРасходы.Записывать Тогда
		Движения.ИППрочиеРасходы.УстановитьАктивность(Истина);
		Движения.ИППрочиеРасходы.Записать(Ложь);
		Движения.ИППрочиеРасходы.Записывать = Ложь
	КонецЕсли;
	
КонецПроцедуры

Функция БазаРаспределенияРасходовУточненнаяПоХарактеруИГруппе(БазаРаспределенияРасходов, НоменклатурнаяГруппа, ХарактерДеятельности)
	
	Если НЕ ЗначениеЗаполнено(ХарактерДеятельности) И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		// Нечего уточнять
		Возврат БазаРаспределенияРасходов.Скопировать();
	КонецЕсли;
	
	УточненнаяБазаРаспределенияРасходов = БазаРаспределенияРасходов.СкопироватьКолонки();
	
	Для Каждого ВидДеятельности Из БазаРаспределенияРасходов Цикл
		
		Если ЗначениеЗаполнено(НоменклатурнаяГруппа) И ВидДеятельности.НоменклатурнаяГруппа <> НоменклатурнаяГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ХарактерДеятельности) Тогда
			
			Если ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсеВидыТорговли Тогда
				
				Если  ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ОптоваяТорговля
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД Тогда
				
				Если  ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ОптоваяТорговля
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг Тогда
				
				Если  ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.УслугиЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД Тогда
				
				Если  ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ОптоваяТорговля
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД Тогда
				
				Если  ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.УслугиЕНВД
					И ВидДеятельности.ХарактерДеятельности <> Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ХарактерДеятельности <> ВидДеятельности.ХарактерДеятельности Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = УточненнаяБазаРаспределенияРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидДеятельности);
		
	КонецЦикла;
	
	Возврат УточненнаяБазаРаспределенияРасходов;
	
КонецФункции

Функция РаспределениеПоБазе(ТабИсточникСтрока, Поле1="", ТочностьПоля1 = 2, Поле2="", ТочностьПоля2 = 2, Поле3="", ТочностьПоля3 = 3, База, ПолеБазы)
	
	ТабПолучатель = ТабИсточникСтрока.Владелец().СкопироватьКолонки();
	
	Если НЕ База = Неопределено И База.Количество() > 0 Тогда
		
		МассивКоэф = Новый Массив;
		
		Для каждого СтрокаБазы Из База Цикл
			Коэффициент = СтрокаБазы[ПолеБазы];
			Если Коэффициент <> 0 Тогда
				ТабНоваяСтрока = ТабПолучатель.Добавить();
				ЗаполнитьЗначенияСвойств(ТабНоваяСтрока, ТабИсточникСтрока);
				ТабНоваяСтрока.НоменклатурнаяГруппа2 = СтрокаБазы.НоменклатурнаяГруппа;
				ТабНоваяСтрока.ХарактерДеятельности2 = СтрокаБазы.ХарактерДеятельности;
				МассивКоэф.Добавить(Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Поле1) Тогда
			РаспределенноеПоле1 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ТабИсточникСтрока[Поле1], МассивКоэф, ТочностьПоля1);
			Если ЗначениеЗаполнено(РаспределенноеПоле1) Тогда
				ТабПолучатель.ЗагрузитьКолонку(РаспределенноеПоле1, Поле1);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Поле2) Тогда
			РаспределенноеПоле2 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ТабИсточникСтрока[Поле2], МассивКоэф, ТочностьПоля2);
			Если ЗначениеЗаполнено(РаспределенноеПоле2) Тогда
				ТабПолучатель.ЗагрузитьКолонку(РаспределенноеПоле2, Поле2);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Поле3) Тогда
			РаспределенноеПоле3 = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ТабИсточникСтрока[Поле3], МассивКоэф, ТочностьПоля3);
			Если ЗначениеЗаполнено(РаспределенноеПоле3) Тогда
				ТабПолучатель.ЗагрузитьКолонку(РаспределенноеПоле3, Поле3);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ТабНоваяСтрока = ТабПолучатель.Добавить();
		ЗаполнитьЗначенияСвойств(ТабНоваяСтрока, ТабИсточникСтрока);
		ТабНоваяСтрока.НоменклатурнаяГруппа2 = ТабИсточникСтрока.НоменклатурнаяГруппа1;
		ТабНоваяСтрока.ХарактерДеятельности2 = ТабИсточникСтрока.ХарактерДеятельности1;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп") Тогда
		ТабПолучатель.ЗаполнитьЗначения(БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа(), "НоменклатурнаяГруппа2");
	КонецЕсли;
	
	Возврат ТабПолучатель;
	
КонецФункции

// Возвращает долю доходов по деятельности на ЕНВД в общем объеме доходов за период.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - индивидуальный предприниматель, доходы которого анализируются.
//  НачалоПериода - Дата - Начало периода, за который рассчитывается доля доходов.
//  КонецПериода  - Дата - Конец периода, за который рассчитывается доля доходов.
//
// Возвращаемое значение:
//  Число – коэффициент-доля доходов ЕНВД в общем объеме доходов.
//
Функция ДоляДоходовЕНВД(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Перем ДатаИзменения;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация, КонецПериода, ДатаИзменения);
	Если Не ПлательщикЕНВД И ДатаИзменения <= НачалоПериода Тогда
		Возврат 0; // Не уплачивается ЕНВД с прошлых периодов
	КонецЕсли;
	
	Если Не ПлательщикЕНВД И Не УчетнаяПолитика.ПлательщикЕНВД(Организация, НачалоДня(ДатаИзменения) - 1) Тогда
		Возврат 0; // Учетная политика изменилась за период, но статус плательщика ЕНВД не поменялся
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("ОблагаетсяНДС", Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, КонецПериода));
	Запрос.УстановитьПараметр("ХарактерыДеятельностиЕНВД", ХарактерыДеятельностиЕНВД());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВсеДоходы.ДоходыВсего), 0) КАК ДоходыВсего,
	|	ЕСТЬNULL(СУММА(ВсеДоходы.ДоходыЕНВД), 0) КАК ДоходыЕНВД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &ОблагаетсяНДС
	|				ТОГДА ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот
	|			ИНАЧЕ ИПДоходыОбороты.ВыручкаОборот
	|		КОНЕЦ КАК ДоходыВсего,
	|		ВЫБОР
	|			КОГДА НЕ ИПДоходыОбороты.ХарактерДеятельности В (&ХарактерыДеятельностиЕНВД)
	|				ТОГДА 0
	|			КОГДА &ОблагаетсяНДС
	|				ТОГДА ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот
	|			ИНАЧЕ ИПДоходыОбороты.ВыручкаОборот
	|		КОНЕЦ КАК ДоходыЕНВД
	|	ИЗ
	|		РегистрНакопления.ИПДоходы.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИПДоходыОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИППрочиеДоходыОбороты.СуммаОборот,
	|		ВЫБОР
	|			КОГДА НЕ ИППрочиеДоходыОбороты.ХарактерДеятельности В (&ХарактерыДеятельностиЕНВД)
	|				ТОГДА 0
	|			ИНАЧЕ ИППрочиеДоходыОбороты.СуммаОборот
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ИППрочиеДоходы.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ВЫРАЗИТЬ(СтатьяДоходов КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету) КАК ИППрочиеДоходыОбороты) КАК ВсеДоходы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ДоходыВсего <> 0 Тогда
		Возврат Выборка.ДоходыЕНВД / Выборка.ДоходыВсего;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОтражениеРасходовНаУплатуСтраховыхВзносовЗаСебя

Функция ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Перем ДатаИзменения;
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	Если УчетСтраховыхВзносовИП.ПериодичностьНачисления(Реквизиты.Организация, Реквизиты.Период) = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Реквизиты.Период);
	Иначе
		НачалоПериода = УчетСтраховыхВзносовИП.НачалоСтраховогоПериода(Реквизиты.Период);
	КонецЕсли;
	КонецПериода = КонецМесяца(Реквизиты.Период);
	
	Если Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Реквизиты.Организация, НачалоПериода, КонецПериода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, КонецПериода, ДатаИзменения);
	Если Не ПлательщикНДФЛ И ДатаИзменения > НачалоПериода Тогда // Учетная политика изменилась в текущем периоде
		ПлательщикНДФЛвПрошлом = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе // В текущем периоде учетная политика не менялась, статус плательщика не изменился
		ПлательщикНДФЛвПрошлом = ПлательщикНДФЛ;
	КонецЕсли;
	
	Если ПлательщикНДФЛ И ПлательщикНДФЛвПрошлом Тогда // Режим налогообложения не изменился
		НачалоПериодаАнализаРасходов = НачалоПериода;
		КонецПериодаАнализаРасходов = КонецПериода;
	ИначеЕсли ПлательщикНДФЛвПрошлом Тогда // ИП перешел с ОСНО на иной режим налогообложения
		НачалоПериодаАнализаРасходов = НачалоПериода;
		КонецПериодаАнализаРасходов = НачалоДня(ДатаИзменения) - 1;
	Иначе // ИП перешел на ОСНО
		НачалоПериодаАнализаРасходов = Макс(НачалоПериода, НачалоДня(ДатаИзменения));
		КонецПериодаАнализаРасходов = КонецПериода;
	КонецЕсли;
	
	ТаблицаРасходов = УчетСтраховыхВзносовИП.ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(
		Реквизиты.Организация, НачалоПериодаАнализаРасходов, КонецПериодаАнализаРасходов);
	
	СтатьиЗатрат = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасходов, "СтатьяЗатрат", Истина);
	ПринятиеКналоговомуУчетуСтатейЗатрат = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СтатьиЗатрат, "ПринятиеКналоговомуУчету");
	
	ВестиУчетПоВидамДеятельностиИП = УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период);
	ОсновнаяНоменклатурнаяГруппа   = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойХарактерДеятельности   = УчетнаяПолитика.ОсновнойХарактерДеятельности(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикЕНВД                 = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, КонецПериода, ДатаИзменения);
	
	ПлательщикЕНВДвПрошлом = (ДатаИзменения > НачалоПериода)
		И УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, НачалоДня(ДатаИзменения) - 1);
	
	УменьшениеЕНВДПослеОтмены = УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(Реквизиты.Организация, Реквизиты.Период);
	
	ЕНВДУменьшаетсяНаФиксированныеВзносы = (ПлательщикЕНВД Или ПлательщикЕНВДвПрошлом Или УменьшениеЕНВДПослеОтмены)
		И (УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Реквизиты.Период)
			Или Не УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Реквизиты.Организация,
								НачалоКвартала(Реквизиты.Период),
								КонецКвартала(Реквизиты.Период)));
	
	Если ЕНВДУменьшаетсяНаФиксированныеВзносы Тогда
		КоэффициентЕНВД = ДоляДоходовЕНВД(Реквизиты.Организация, НачалоПериода, КонецПериода);
	Иначе
		КоэффициентЕНВД = 0;
	КонецЕсли;
	
	Если УменьшениеЕНВДПослеОтмены Тогда
		ПоследнийДеньЕНВД = УчетЕНВДКлиентСервер.ПоследнийДеньДействияЕНВД();
		КоэффициентЕНВДПередОтменой = ДоляДоходовЕНВД(Реквизиты.Организация, НачалоГода(ПоследнийДеньЕНВД), КонецГода(ПоследнийДеньЕНВД));
	Иначе
		КоэффициентЕНВДПередОтменой = 0;
	КонецЕсли;
	
	ТаблицаПрочихРасходов = ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы", Ложь);
	
	Для каждого СтраховойВзнос Из ТаблицаРасходов Цикл
		
		Если Не ЗначениеЗаполнено(СтраховойВзнос.ДокументОплаты) Тогда
			// Не уплачен
			Продолжить;
		КонецЕсли;
		
		Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, СтраховойВзнос.ДатаДокументаОплаты) Тогда
			// Не уплачен
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтраховойВзнос.СтатьяЗатрат)
			Или НЕ ПринятиеКналоговомуУчетуСтатейЗатрат.Получить(СтраховойВзнос.СтатьяЗатрат) Тогда
			// Не принимается
			Продолжить;
		КонецЕсли;
		
		Если ВестиУчетПоВидамДеятельностиИП И (ПлательщикЕНВД Или ПлательщикЕНВДвПрошлом Или УменьшениеЕНВДПослеОтмены) Тогда
			
			Если УменьшениеЕНВДПослеОтмены
				И Год(СтраховойВзнос.СтраховойПериод) = Год(ПоследнийДеньЕНВД) Тогда
				ПрименяемыйКоэффициентЕНВД = КоэффициентЕНВДПередОтменой;
			Иначе
				ПрименяемыйКоэффициентЕНВД = КоэффициентЕНВД;
			КонецЕсли;
			
			// Сумма взносов, учтенная в расчете ЕНВД
			СтраховойВзносЕНВД = Окр(СтраховойВзнос.Сумма * ПрименяемыйКоэффициентЕНВД, 2);
			
			Если СтраховойВзнос.Сумма - СтраховойВзносЕНВД <> 0 Тогда
				ПрочийРасход = ТаблицаПрочихРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(ПрочийРасход, СтраховойВзнос);
				ПрочийРасход.РасчетныйДокумент    = СтраховойВзнос.ДокументОплаты;
				ПрочийРасход.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
				ПрочийРасход.ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД;
				ПрочийРасход.Сумма                = СтраховойВзнос.Сумма - СтраховойВзносЕНВД;
			КонецЕсли;
			
			Если СтраховойВзносЕНВД <> 0 Тогда
				ПрочийРасход = ТаблицаПрочихРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(ПрочийРасход, СтраховойВзнос);
				ПрочийРасход.РасчетныйДокумент    = СтраховойВзнос.ДокументОплаты;
				ПрочийРасход.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
				ПрочийРасход.ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД;
				ПрочийРасход.Сумма                = СтраховойВзносЕНВД;
			КонецЕсли;
			
		ИначеЕсли ВестиУчетПоВидамДеятельностиИП И Не (ПлательщикЕНВД Или ПлательщикЕНВДвПрошлом Или УменьшениеЕНВДПослеОтмены) Тогда
			
			// Распределяем по всем видам деятельности
			ПрочиеРасходы = ТаблицаПрочихРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочиеРасходы, СтраховойВзнос);
			ПрочиеРасходы.РасчетныйДокумент    = СтраховойВзнос.ДокументОплаты;
			ПрочиеРасходы.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
			ПрочиеРасходы.ХарактерДеятельности = Перечисления.ХарактерДеятельности.ПустаяСсылка();
			
		Иначе
			
			ПрочиеРасходы = ТаблицаПрочихРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочиеРасходы, СтраховойВзнос);
			ПрочиеРасходы.РасчетныйДокумент    = СтраховойВзнос.ДокументОплаты;
			ПрочиеРасходы.НоменклатурнаяГруппа = ОсновнаяНоменклатурнаяГруппа;
			ПрочиеРасходы.ХарактерДеятельности = ОсновнойХарактерДеятельности;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПрочихРасходов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРасходов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ВестиУчетПоВидамДеятельностиИП = УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВестиУчетПоВидамДеятельностиИП Тогда
		
		Если УчетСтраховыхВзносовИП.ПериодичностьНачисления(Реквизиты.Организация, Реквизиты.Период) = Перечисления.Периодичность.Квартал Тогда
			НачалоПериода = НачалоКвартала(Реквизиты.Период);
		Иначе
			НачалоПериода = УчетСтраховыхВзносовИП.НачалоСтраховогоПериода(Реквизиты.Период);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИПДоходыОбороты.ХарактерДеятельности,
		|	ИПДоходыОбороты.НоменклатурнаяГруппа,
		|	ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот КАК Доход
		|ИЗ
		|	РегистрНакопления.ИПДоходы.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК ИПДоходыОбороты
		|ГДЕ
		|	ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот <> 0";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		БазаРаспределенияРасходов = Результат.Выгрузить();
		
		ПрочиеРасходы = Параметры.ПрочиеРасходы.СкопироватьКолонки();
		
		Параметры.ПрочиеРасходы.Колонки.НоменклатурнаяГруппа.Имя = "НоменклатурнаяГруппа1";
		Параметры.ПрочиеРасходы.Колонки.ХарактерДеятельности.Имя = "ХарактерДеятельности1";
		Параметры.ПрочиеРасходы.Колонки.Добавить("НоменклатурнаяГруппа2", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
		Параметры.ПрочиеРасходы.Колонки.Добавить("ХарактерДеятельности2", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
		
		Для каждого СтрокаРасходов Из  Параметры.ПрочиеРасходы Цикл
			
			УточненнаяБазаРаспределенияРасходов = БазаРаспределенияРасходовУточненнаяПоХарактеруИГруппе(
				БазаРаспределенияРасходов, СтрокаРасходов.НоменклатурнаяГруппа1, СтрокаРасходов.ХарактерДеятельности1);
			
			РаспределенныйРасход = РаспределениеПоБазе(СтрокаРасходов, "Сумма", 2, , , , , УточненнаяБазаРаспределенияРасходов, "Доход");
			
			Для Каждого СтрокаРаспределения Из РаспределенныйРасход Цикл
				СтрокаРасходов = ПрочиеРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасходов, СтрокаРаспределения);
				СтрокаРасходов.НоменклатурнаяГруппа = СтрокаРаспределения.НоменклатурнаяГруппа2;
				СтрокаРасходов.ХарактерДеятельности = СтрокаРаспределения.ХарактерДеятельности2;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		ПрочиеРасходы = Параметры.ПрочиеРасходы;
	КонецЕсли;
	
	Движения.ИППрочиеРасходы.Записывать = Истина;
	Для Каждого СтрокаРасходов Из ПрочиеРасходы Цикл
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРасходов);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ПрочиеРасходы
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы>
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерДеятельности>
		+ "СтатьяЗатрат,"				// <СправочникСсылка.*>
		+ "РасчетныйДокумент,"			// <ДокументСсылка.*> - расчетный документ
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
		+ "Сумма";						// <Число,15,2>
	
	Параметры.Вставить("ПрочиеРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Функция СуммаДоходаДляРасчетаСтраховыхВзносов(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	Если Не УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат 0;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("НачалоПериода", УчетСтраховыхВзносовИП.НачалоСтраховогоПериода(ДатаНачала));
	СтруктураПараметров.Вставить("КонецПериода",  КонецМесяца(ДатаОкончания));
	СтруктураПараметров.Вставить("ОблагаетсяНДС", Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, ДатаОкончания));
	СтруктураПараметров.Вставить("СписокТаблиц", ЗаполнитьСписокТаблиц3НДФЛ(Новый УникальныйИдентификатор));
	
	Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ПодготовитьДанныеОтчета(СтруктураПараметров);
	
	Выборка = СтруктураПараметров.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	
	Если Выборка.Следующий() Тогда
		
		СуммаДохода = Выборка.Доходы + Выборка.ПрочиеДоходы;
		
		Если УчетСтраховыхВзносовИП.УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, ДатаНачала) Тогда
			СуммаДохода = СуммаДохода
				- Выборка.МатериальныеРасходы
				- Выборка.Амортизация
				- Выборка.РасходыНаОплатуТруда
				- Выборка.ПрочиеРасходы;
		КонецЕсли;
		
	Иначе
		
		СуммаДохода = 0;
		
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

// Возвращает разницу, которую нужно убрать или добавить к сумме расходов для расчета страховых взносов.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для расчета взносов.
//  Период      - Дата - день в пределах последнего квартала периода, за который рассчитываются взносы.
//
// Возвращаемое значение:
//   Число - положительное значение - взносы уже были начислены, их следует убрать из суммы расходов
//           отрицательное значение - были уплачены взносы за прошлый страховой период, их следует добавить к сумме расходов
//
Функция РасходыНаУплатуСтраховыхВзносовЗаТекущийПериод(Организация, Период) Экспорт
	
	Расходы = 0;
	
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
		Возврат Расходы;
	КонецЕсли;
	
	СтатьяЗатрат = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносовИП");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОблагаетсяНДС", Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, Период));
	Запрос.УстановитьПараметр("НачалоСтраховогоПериода", УчетСтраховыхВзносовИП.НачалоСтраховогоПериода(Период));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецКвартала(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СтатьяЗатрат", СтатьяЗатрат);
	Запрос.УстановитьПараметр("СписокХарактеровДеятельности", ХарактерыДеятельностиОСН());
	
	// Первая часть запроса получает все начисленные по НУ взносы на уплату страховых взносов за себя.
	// Вторая - получает все уплаченные страховые взносы, исчисленные с суммы доходов, за прошлые страховые периоды по данным БУ.
	// Используется допущение - все уплаченные страховые взносы, исчисленные с суммы доходов, при закрытии года будут или
	// уже были учтены в составе расходов.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.Сумма), 0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА &ОблагаетсяНДС
	|				ТОГДА ИППрочиеРасходыОбороты.СуммаОборот
	|			ИНАЧЕ ИППрочиеРасходыОбороты.СуммаОборот + ИППрочиеРасходыОбороты.НДСОборот
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ИППрочиеРасходы.Обороты(
	|				&НачалоСтраховогоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ХарактерДеятельности В (&СписокХарактеровДеятельности)
	|					И СтатьяЗатрат = &СтатьяЗатрат
	|					И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИППрочиеРасходыОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ХозрасчетныйОборотыДтКт.СуммаОборот
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоСтраховогоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|				,
	|				,
	|				Организация = &Организация
	|					И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)) КАК ХозрасчетныйОборотыДтКт
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|					ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|				КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|					ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|				ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
	|			КОНЕЦ < &НачалоСтраховогоПериода) КАК ВложенныйЗапрос";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Расходы = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Расходы;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДекларации3НДФЛ

Процедура ПолучитьСведенияОПоказателяхОтчета3НДФЛ(ИДРедакцииОтчета, ПоказателиОтчета) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2015кв1"
		Или ИДРедакцииОтчета = "ФормаОтчета2016кв1"
		Или ИДРедакцииОтчета = "ФормаОтчета2017кв1"
		Или ИДРедакцииОтчета = "ФормаОтчета2018кв1" Тогда
		КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации2018();
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019кв1" Тогда
		КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации2019();
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2020кв1" Тогда
		КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации2020();
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2021кв1" Тогда
		КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации2021();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("ПризнакУплатыВозврата", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("ОКТМО", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("СуммаНалога", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("СуммаВозвратаНалога", ПоказателиОтчета, КлючиПоказателей);
	
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("КодВидаДеятельностиИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("ОКВЭДИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("СуммаДоходаИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("СуммаРасходовИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("МатериальныеРасходыИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("АмортизацияИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("ЗарплатаИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("ЗарплатаПоТрудовымДоговорамИП", ПоказателиОтчета, КлючиПоказателей);
	ДобавитьСведенияОПоказателеОтчета3НДФЛ("ПрочиеРасходыИП", ПоказателиОтчета, КлючиПоказателей);
	
КонецПроцедуры

Процедура ДобавитьСведенияОПоказателеОтчета3НДФЛ(ИмяПоказателя, ПоказателиОтчета, КлючиПоказателей, ПризнакАвтозаполнения = Истина, ПризнакРасшифровки = Ложь)
	
	Если КлючиПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоказателя = КлючиПоказателей.Найти(ИмяПоказателя, "Ключ");
	Если КлючПоказателя <> Неопределено Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(
			ПоказателиОтчета,
			КлючПоказателя.ИмяПоля,
			ПризнакАвтозаполнения,
			ПризнакРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтчет3НДФЛ(ИДРедакцииОтчета, Знач ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2011кв1" Или ИДРедакцииОтчета = "ФормаОтчета2014кв1" Тогда
		ЗаполнитьРегламентированныйОтчет3НДФЛ2011(ПараметрыОтчета, Контейнер);
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015кв1" Тогда
		КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации2018();
		ЗаполнитьРегламентированныйОтчет3НДФЛ2015(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей);
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2016кв1"
		Или ИДРедакцииОтчета = "ФормаОтчета2017кв1" Тогда
		КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации2018();
		ЗаполнитьРегламентированныйОтчет3НДФЛ2016(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей);
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2018кв1"
		Или ИДРедакцииОтчета = "ФормаОтчета2019кв1"
		Или ИДРедакцииОтчета = "ФормаОтчета2020кв1" 
		Или ИДРедакцииОтчета = "ФормаОтчета2021кв1" Тогда
		КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации(ИДРедакцииОтчета);
		ЗаполнитьРегламентированныйОтчет3НДФЛ2018(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчет3НДФЛ2011(ПараметрыОтчета, Контейнер)
	
	ПараметрыЗаполненияОтчета = ПодготовитьПараметрыОтчета3НДФЛ(ПараметрыОтчета);
	Если ПараметрыЗаполненияОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 1;
	
	Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДеятельностиПредпринимателей.Ссылка КАК ВидДеятельности
		|ИЗ
		|	Справочник.ВидыДеятельностиПредпринимателей КАК ВидыДеятельностиПредпринимателей";
		
		ВыборкаВидов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаВидов.Следующий() Цикл 
			
			ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности", ВыборкаВидов.ВидДеятельности); 
			ЗаполнитьЛистВ3НДФЛ2011(НомерСтроки, Контейнер, ПараметрыЗаполненияОтчета);
			
	 КонецЦикла;

	Иначе
		
		ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности" ,УчетнаяПолитика.ОсновнойВидДеятельности(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета)); 
		
		ЗаполнитьЛистВ3НДФЛ2011(НомерСтроки, Контейнер, ПараметрыЗаполненияОтчета);
		
	КонецЕсли;
	
	ЗаполнитьРаздел63НДФЛ(Контейнер, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчет3НДФЛ2015(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей)
	
	ПараметрыОтчета.Вставить("ОсновнойКодОКВЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодОКВЭД"));
	ЗаполнитьКонтейнер3НДФЛ2015(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчет3НДФЛ2016(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей)
	
	ПараметрыОтчета.Вставить("ОсновнойКодОКВЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодОКВЭД"));
	ЗаполнитьКонтейнер3НДФЛ2015(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей);
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчет3НДФЛ2018(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей)
	
	ПараметрыОтчета.Вставить("ОсновнойКодОКВЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "КодОКВЭД2"));
	ЗаполнитьКонтейнер3НДФЛ2015(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей);
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ЗаполнитьКонтейнер3НДФЛ2015(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер, КлючиПоказателей)
	Перем КодВидаДеятельности;
	
	Если КлючиПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоказателя = КлючиПоказателей.Найти("КодВидаДеятельностиИП", "Ключ");
	Если КлючПоказателя <> Неопределено Тогда
		ИмяРаздела = КлючПоказателя.ИмяСтраницы;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не определен раздел для заполнения'");
	КонецЕсли;
	
	ЗаполняемыеПоказатели = Новый Структура;
	ПолучитьСведенияОПоказателяхОтчета3НДФЛ(ИДРедакцииОтчета, ЗаполняемыеПоказатели);
	
	ТаблицаДоходовРасходов = ТаблицаДоходовРасходовПоВидамПредпринимательскойДеятельности3НДФЛ(ПараметрыОтчета);
	ТаблицаДоходовРасходов.Колонки.Добавить("СуммаРасходовВПределахНорматива", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Если Отчеты.РегламентированныйОтчет3НДФЛ.ПрофессиональныйВычетРассчитываетсяПострочно(ИДРедакцииОтчета) Тогда
		РассчитатьПрофессиональныйВычетВПределахНорматива(ТаблицаДоходовРасходов, ИДРедакцииОтчета);
	КонецЕсли;
	
	ЗаполнитьПриложение3Расчет(ПараметрыОтчета, Контейнер, КлючиПоказателей);
	
	// Код вида деятельности
	КодыВидовПредпринимательскойДеятельности = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовПредпринимательскойДеятельности(ИДРедакцииОтчета);
	КодыВидовПредпринимательскойДеятельности.Свойство("ПредпринимательскаяДеятельность", КодВидаДеятельности);
	
	// Код основного вида экономической деятельности
	КодыОКВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоходовРасходов, "ВидДеятельности"),
		"КодОКВЭД");
	
	РазделДекларации = Контейнер[ИмяРаздела];
	ОчиститьРазделДекларации(РазделДекларации, ЗаполняемыеПоказатели, ТаблицаДоходовРасходов.Количество());
	
	Для Индекс = 0 По ТаблицаДоходовРасходов.Количество() - 1 Цикл
		
		ДоходыРасходы = ТаблицаДоходовРасходов[Индекс];
		
		КодОКВЭД = КодыОКВЭД[ДоходыРасходы.ВидДеятельности];
		Если Не ЗначениеЗаполнено(КодОКВЭД) Тогда
			КодОКВЭД = ПараметрыОтчета.ОсновнойКодОКВЭД;
		КонецЕсли;
		
		ЗаполнитьПредпринимательскуюДеятельностьДекларации(
			РазделДекларации[Индекс].Данные[0].Значение,
			КлючиПоказателей,
			ДоходыРасходы,
			Новый Структура("Код, ОКВЭД", КодВидаДеятельности, КодОКВЭД));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПриложение3Расчет(ПараметрыОтчета, Контейнер, КлючиПоказателей)
	
	Если Не Контейнер.Свойство("Приложение3Расчет") Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет к приложению 3 заполняется нарастающим итогом.
	// Поэтому подготовим имена периодов и будем запрашивать данные последовательно.
	МассивИменПериодов = Новый Массив;
	МассивИменПериодов.Добавить("1Квартал"); // ДоходыИП1Квартал
	МассивИменПериодов.Добавить("Полугодие"); // ДоходыИППолугодие
	МассивИменПериодов.Добавить("9Месяцев"); // ДоходыИП9Месяцев
	
	НомерПериода = 1;
	
	Для Каждого ИмяПериода Из МассивИменПериодов Цикл
		КоличествоМесяцевПериода = 3 * НомерПериода;
		Показатели = Обработки.ПомощникЗаполнения3НДФЛ.НачальныеПоказатели(
			ПараметрыОтчета.Организация,
			ДобавитьМесяц(ПараметрыОтчета.мДатаНачалаПериодаОтчета, КоличествоМесяцевПериода)-1);
		
		Доходы = Окр(Показатели.Доходы + Показатели.ПрочиеДоходы + Показатели.АвансыПокупателей, 0);
		СтандартныйВычет = Окр(Показатели.СтандартныйВычетНаДетей + Показатели.СтандартныйВычетНаНалогоплательщика, 0);
		ПрофессиональныйВычет = Окр(Показатели.ПрофессиональныйВычет, 0);
		НалоговаяБаза = Окр(Показатели.НалоговаяБаза, 0);
		
		ЗаполнитьПоказательЛистаДекларации("ДоходыИП" + ИмяПериода, Доходы, Контейнер["Приложение3Расчет"], КлючиПоказателей);
		ЗаполнитьПоказательЛистаДекларации("ПрофВычетИП" + ИмяПериода, ПрофессиональныйВычет, Контейнер["Приложение3Расчет"], КлючиПоказателей);
		ЗаполнитьПоказательЛистаДекларации("СтандартныйВычетИП" + ИмяПериода, СтандартныйВычет, Контейнер["Приложение3Расчет"], КлючиПоказателей);
		ЗаполнитьПоказательЛистаДекларации("НалоговаяБазаИП" + ИмяПериода, НалоговаяБаза, Контейнер["Приложение3Расчет"], КлючиПоказателей);
		ЗаполнитьПоказательЛистаДекларации("АвансовыйПлатежИП" + ИмяПериода, Показатели.НалогИсчисленныйВсего, Контейнер["Приложение3Расчет"], КлючиПоказателей);
		НомерПериода = НомерПериода + 1;
	КонецЦикла;

КонецПроцедуры

Процедура РассчитатьПрофессиональныйВычетВПределахНорматива(ТаблицаДоходовРасходов, ИДРедакцииОтчета)
	
	Если ТаблицаДоходовРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентПрофессиональногоВычета = Отчеты.РегламентированныйОтчет3НДФЛ.ПроцентПрофессиональногоВычета(ИДРедакцииОтчета);
	
	МассивРасходов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоходовРасходов, "ИтогоРасходов", Истина);
	Если МассивРасходов.Количество() = 1 И МассивРасходов[0] = 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДоходовРасходов Цикл
			СтрокаТаблицы.СуммаРасходовВПределахНорматива = Окр(СтрокаТаблицы.ИтогоДоходов * ПроцентПрофессиональногоВычета / 100, 2);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРазделДекларации(РазделДекларации, ЗаполняемыеПоказатели, Знач КоличествоЛистов = 0)
	
	Если РазделДекларации.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Контейнер раздела не инициализирован'");
	КонецЕсли;
	
	Если КоличествоЛистов = 0 Тогда
		КоличествоЛистов = 1; // Один лист должен быть всегда
	КонецЕсли;
	
	ШаблонЛиста = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РазделДекларации[0].Данные[0].Значение);
	Для Каждого Показатель Из ШаблонЛиста Цикл
		Если ЗаполняемыеПоказатели.Свойство(Показатель.Ключ) Тогда
			ТипПоказателя = ТипЗнч(Показатель.Значение);
			ШаблонЛиста[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	РазделДекларации.Очистить();
	Для НомерЛиста = 1 По КоличествоЛистов Цикл
		НоваяСтрока = РазделДекларации.Добавить();
		НоваяСтрока.Данные = Новый СписокЗначений;
		НоваяСтрока.Данные.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ШаблонЛиста));
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОтчета3НДФЛ(ПараметрыОтчета)
	
	НалоговыйПериод = НалоговыйПериод(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НалоговыйПериодПропущен = (ПараметрыОтчета.мДатаКонцаПериодаОтчета <= НалоговыйПериод.Период);
	
	Если Не НалоговыйПериодПропущен Тогда
		ПараметрыЗаполненияОтчета = Новый Структура(
			"Организация, НачалоПериода, КонецПериода, 
			|ВидДеятельности, ОблагаетсяНДС, ВыводитьРеквизиты, СписокТаблиц",
			ПараметрыОтчета.Организация,
			НалоговыйПериод.Начало,
			ПараметрыОтчета.мДатаКонцаПериодаОтчета,
			,
			Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета),
			Ложь,
			ЗаполнитьСписокТаблиц3НДФЛ(ПараметрыОтчета.УникальныйИдентификаторФормы));
	КонецЕсли;
	
	Возврат ПараметрыЗаполненияОтчета;
	
КонецФункции

Функция ЗаполнитьСписокТаблиц3НДФЛ(УникальныйИдентификатор)
	
	СписокТаблиц = Новый ТаблицаЗначений;
	СписокТаблиц.Колонки.Добавить("КодТаблицы",         ОбщегоНазначения.ОписаниеТипаЧисло(2));
	СписокТаблиц.Колонки.Добавить("Формировать",        Новый ОписаниеТипов("Булево"));
	СписокТаблиц.Колонки.Добавить("АдресХранилища",     Новый ОписаниеТипов("Строка"));
	СписокТаблиц.Колонки.Добавить("ИмяМакета",          ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СписокТаблиц.Колонки.Добавить("ЗаголовокТаблицы",   ОбщегоНазначения.ОписаниеТипаСтрока(15));
	СписокТаблиц.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокТаблиц.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = СписокТаблиц.Добавить();
	НоваяСтрока.КодТаблицы         = 61;
	НоваяСтрока.Формировать        = Истина;
	НоваяСтрока.АдресХранилища     = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	НоваяСтрока.ИмяМакета          = "Т61";
	НоваяСтрока.ЗаголовокТаблицы   = НСтр("ru='Таблица № 6-1'");
	НоваяСтрока.Наименование       = НСтр("ru='Налоговая база'");
	НоваяСтрока.НаименованиеПолное = НСтр("ru='Определение налоговой базы по налогу на доходы физических лиц'");
	
	Возврат СписокТаблиц;
	
КонецФункции

Процедура ЗаполнитьРаздел63НДФЛ(Контейнер, ПараметрыОтчета)
	
	Раздел6 = Контейнер.Раздел6;
	ЛистВ = Контейнер.ЛистВ;
	
	ТаблицаБлокаРаздел6 = Раздел6[0].Данные[0].Значение;
	
	Для Каждого Показатель Из ТаблицаБлокаРаздел6 Цикл
		ТаблицаБлокаРаздел6[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел6.Количество()>1 Цикл
		Раздел6.Удалить(1);
	КонецЦикла;
	
	ТаблицаБлокаРаздел6.П000060002003 = ?(Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) > 2011 , "18210102020011000110", "18210102022011000110");
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.Организация, "РегистрацияВНалоговомОргане");
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РеквизитКода = ?(Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) > 2012 , "КодПоОКТМО", "КодПоОКАТО");
		ТаблицаБлокаРаздел6.П000060003003 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, РеквизитКода);
	Иначе
		ТаблицаБлокаРаздел6.П000060003003 = "";
	КонецЕсли;
	
	ИтогоДоходов = 0;
	ИтогоРасходов = 0;
	
	Для Каждого СтраницаЛистаВ Из ЛистВ Цикл
		
		ТаблицаБлока = СтраницаЛистаВ.Данные[0].Значение;
		ИтогоДоходов = ИтогоДоходов + ТаблицаБлока.П000090001003;
		ИтогоРасходов = ИтогоРасходов + ТаблицаБлока.П000090001004;
		
	КонецЦикла;
	
	Налог = Окр(УчетНДФЛПредпринимателяКлиентСервер.СуммаНалога(
		ИтогоДоходов - ИтогоРасходов,
		ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	ТаблицаБлокаРаздел6.П000060004003 = ?(Налог > 0 , Налог, 0);
	
	ТаблицаБлокаРаздел6.П000060001001 = ?(Налог > 0 , 1, 3);
	
КонецПроцедуры

Процедура ЗаполнитьЛистВ3НДФЛ2011(НомерСтроки, Контейнер, ПараметрыОтчета)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	
	СтруктураДанныхЛистаВ = Новый Структура("Доходы, ПрочиеДоходы, МатериальныеРасходы, Амортизация, РасходыНаОплатуТруда, ПрочиеРасходы");
	
	ВыборкаОбщие = ПараметрыОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если ВыборкаОбщие.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныхЛистаВ, ВыборкаОбщие);
	Иначе
		Возврат
	КонецЕсли;
	
	СтруктураДанныхЛистаВ.Вставить("КодОКВЭД",      ПараметрыОтчета.ВидДеятельности.КодОКВЭД);
	СтруктураДанныхЛистаВ.Вставить("ИтогоДоходов",  СтруктураДанныхЛистаВ.Доходы + СтруктураДанныхЛистаВ.ПрочиеДоходы);
	СтруктураДанныхЛистаВ.Вставить("ИтогоРасходов", СтруктураДанныхЛистаВ.МатериальныеРасходы 
	+ СтруктураДанныхЛистаВ.Амортизация + СтруктураДанныхЛистаВ.РасходыНаОплатуТруда + СтруктураДанныхЛистаВ.ПрочиеРасходы);
	
	Если СтруктураДанныхЛистаВ.ИтогоДоходов <> 0 ИЛИ СтруктураДанныхЛистаВ.ИтогоРасходов <> 0 Тогда
		
		ЛистВ = Контейнер.ЛистВ;
		
		ТаблицаБлока = ЛистВ[0].Данные[0].Значение;
		
		// В старых версиях отчета Фаимилия Имя Отчество и ИНН указывались в заголовке каждого листа
		// Сохраним их во временной структуре, и вставим обратно после очистки контейнера
		СтруктураШапкиЛистаВ = Новый Структура();
		
		СтруктураШапкиЛистаВ.Вставить("Фамилия", "");
		СтруктураШапкиЛистаВ.Вставить("Имя1", "");
		СтруктураШапкиЛистаВ.Вставить("Отчество1", "");
		СтруктураШапкиЛистаВ.Вставить("Инн1", "");
		
		ЗаполнитьЗначенияСвойств(СтруктураШапкиЛистаВ, ТаблицаБлока);
		
		Если НомерСтроки <> 1 Тогда //Добавляем строку
			
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из ТаблицаБлока Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			ЛистВ.Добавить().Данные = Новый СписокЗначений();
			ЛистВ[ЛистВ.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы);
			
			ТаблицаБлока = ЛистВ[ЛистВ.Количество()-1].Данные[0].Значение;
			
		Иначе
			
			Для Каждого Показатель Из ТаблицаБлока Цикл
				ТаблицаБлока[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
			КонецЦикла;
			
			Пока ЛистВ.Количество()>1 Цикл
				ЛистВ.Удалить(1);
			КонецЦикла;
			
		КонецЕсли;
		
		//ЛистВ
		// заполняем реквизиты шапки, если они имеются
		ЗаполнитьЗначенияСвойств(ТаблицаБлока, СтруктураШапкиЛистаВ);
		
		ТаблицаБлока.П000090001001 = "1";
		ТаблицаБлока.П000090001002 = СтруктураДанныхЛистаВ.КодОКВЭД;
		ТаблицаБлока.П000090001003 = СтруктураДанныхЛистаВ.ИтогоДоходов;
		ТаблицаБлока.П000090001004 = СтруктураДанныхЛистаВ.ИтогоРасходов;
		ТаблицаБлока.П000090001005 = СтруктураДанныхЛистаВ.МатериальныеРасходы;
		ТаблицаБлока.П000090001006 = СтруктураДанныхЛистаВ.Амортизация;
		ТаблицаБлока.П000090001007 = СтруктураДанныхЛистаВ.РасходыНаОплатуТруда;
		ТаблицаБлока.П000090001009 = СтруктураДанныхЛистаВ.ПрочиеРасходы;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредпринимательскуюДеятельностьДекларации(ПоказателиЛиста, КлючиПоказателей, ДоходыРасходы, ВидДеятельности)
	
	ЗаполнитьПоказательЛистаДекларации("КодВидаДеятельностиИП", ВидДеятельности.Код, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("ОКВЭДИП", ВидДеятельности.ОКВЭД, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("СуммаДоходаИП", ДоходыРасходы.ИтогоДоходов, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("СуммаРасходовИП", ДоходыРасходы.ИтогоРасходов, ПоказателиЛиста, КлючиПоказателей);
	
	ЗаполнитьПоказательЛистаДекларации("МатериальныеРасходыИП", ДоходыРасходы.МатериальныеРасходы, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("АмортизацияИП", ДоходыРасходы.Амортизация, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("ЗарплатаИП", ДоходыРасходы.РасходыНаОплатуТруда, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("ЗарплатаПоТрудовымДоговорамИП", ДоходыРасходы.РасходыНаОплатуТруда, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("ПрочиеРасходыИП", ДоходыРасходы.ПрочиеРасходы, ПоказателиЛиста, КлючиПоказателей);
	ЗаполнитьПоказательЛистаДекларации("СуммаРасходовВПределахНормативаИП", ДоходыРасходы.СуммаРасходовВПределахНорматива, ПоказателиЛиста, КлючиПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьПоказательЛистаДекларации(ИмяПоказателя, Значение, ПоказателиЛиста, КлючиПоказателей)
	
	КлючПоказателя = КлючиПоказателей.Найти(ИмяПоказателя, "Ключ");
	Если КлючПоказателя <> Неопределено Тогда
		ПоказателиЛиста[КлючПоказателя.ИмяПоля] = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаДанныхРаздела61()
	
	Число15_2 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ВидДеятельности", 	Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельностиПредпринимателей"));
	Таблица.Колонки.Добавить("ИтогоДоходов", 		Число15_2);
	Таблица.Колонки.Добавить("ИтогоРасходов", 		Число15_2);
	Таблица.Колонки.Добавить("Доходы", 				Число15_2);
	Таблица.Колонки.Добавить("ПрочиеДоходы", 		Число15_2);
	Таблица.Колонки.Добавить("МатериальныеРасходы", Число15_2);
	Таблица.Колонки.Добавить("Амортизация", 		Число15_2);
	Таблица.Колонки.Добавить("РасходыНаОплатуТруда",Число15_2);
	Таблица.Колонки.Добавить("ПрочиеРасходы", 		Число15_2);
	
	Возврат Таблица;
	
КонецФункции 

Функция ТаблицаДоходовРасходовПоВидамПредпринимательскойДеятельности3НДФЛ(ПараметрыОтчета) Экспорт
	
	ТаблицаДанныхРаздела61 = ТаблицаДанныхРаздела61();
	
	ПараметрыЗаполненияОтчета = ПодготовитьПараметрыОтчета3НДФЛ(ПараметрыОтчета);
	Если ПараметрыЗаполненияОтчета = Неопределено Тогда
		Возврат ТаблицаДанныхРаздела61;
	КонецЕсли;
	Если ПараметрыЗаполненияОтчета.НачалоПериода > ПараметрыЗаполненияОтчета.КонецПериода Тогда
		Возврат ТаблицаДанныхРаздела61;
	КонецЕсли;
	
	ОсновнойВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	
	Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыДеятельностиПредпринимателей.Ссылка КАК ВидДеятельности
		|ИЗ
		|	Справочник.ВидыДеятельностиПредпринимателей КАК ВидыДеятельностиПредпринимателей
		|ГДЕ
		|	ВидыДеятельностиПредпринимателей.Ссылка <> &ОсновнойВидДеятельности";
		
		Запрос.УстановитьПараметр("ОсновнойВидДеятельности", ОсновнойВидДеятельности);
		ВыборкаВидов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаВидов.Следующий() Цикл
			
			ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности", ВыборкаВидов.ВидДеятельности);
			
			Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ПодготовитьДанныеОтчета(ПараметрыЗаполненияОтчета);
			
			ВыборкаОбщие = ПараметрыЗаполненияОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
			Если Не ВыборкаОбщие.Следующий() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаОбщие.Доходы = 0
				И ВыборкаОбщие.ПрочиеДоходы = 0
				И ВыборкаОбщие.МатериальныеРасходы = 0
				И ВыборкаОбщие.Амортизация = 0
				И ВыборкаОбщие.РасходыНаОплатуТруда = 0
				И ВыборкаОбщие.ПрочиеРасходы = 0 Тогда
				Продолжить
			КонецЕсли;
			
			ДанныеРаздела61 = ТаблицаДанныхРаздела61.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеРаздела61, ВыборкаОбщие);
			ДанныеРаздела61.ВидДеятельности = ВыборкаВидов.ВидДеятельности;
			
		КонецЦикла;
		
		// Отдельно обрабатываем основной вид деятельности.
		ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности", Неопределено);
		
		Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ПодготовитьДанныеОтчета(ПараметрыЗаполненияОтчета);
		
		ВыборкаОбщие = ПараметрыЗаполненияОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		Если ВыборкаОбщие.Следующий() Тогда
			
			ДанныеРаздела61 = ТаблицаДанныхРаздела61.Добавить();
			
			ДанныеРаздела61.ВидДеятельности      = ОсновнойВидДеятельности;
			ДанныеРаздела61.ИтогоДоходов         = ВыборкаОбщие.ИтогоДоходов - ТаблицаДанныхРаздела61.Итог("ИтогоДоходов");
			ДанныеРаздела61.ИтогоРасходов        = ВыборкаОбщие.ИтогоРасходов - ТаблицаДанныхРаздела61.Итог("ИтогоРасходов");
			ДанныеРаздела61.Доходы               = ВыборкаОбщие.Доходы - ТаблицаДанныхРаздела61.Итог("Доходы");
			ДанныеРаздела61.ПрочиеДоходы         = ВыборкаОбщие.ПрочиеДоходы - ТаблицаДанныхРаздела61.Итог("ПрочиеДоходы");
			ДанныеРаздела61.МатериальныеРасходы  = ВыборкаОбщие.МатериальныеРасходы - ТаблицаДанныхРаздела61.Итог("МатериальныеРасходы");
			ДанныеРаздела61.Амортизация          = ВыборкаОбщие.Амортизация - ТаблицаДанныхРаздела61.Итог("Амортизация");
			ДанныеРаздела61.РасходыНаОплатуТруда = ВыборкаОбщие.РасходыНаОплатуТруда - ТаблицаДанныхРаздела61.Итог("РасходыНаОплатуТруда");
			ДанныеРаздела61.ПрочиеРасходы        = ВыборкаОбщие.ПрочиеРасходы - ТаблицаДанныхРаздела61.Итог("ПрочиеРасходы");
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыЗаполненияОтчета.Вставить("ВидДеятельности", Неопределено);
		
		Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ПодготовитьДанныеОтчета(ПараметрыЗаполненияОтчета);
		
		ВыборкаОбщие = ПараметрыЗаполненияОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		
		Если ВыборкаОбщие.Следующий() Тогда
			ДанныеРаздела61 = ТаблицаДанныхРаздела61.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеРаздела61, ВыборкаОбщие);
			ДанныеРаздела61.ВидДеятельности = ОсновнойВидДеятельности;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДанныхРаздела61;
	
КонецФункции

Функция ДоходыРасходыОтПредпринимательскойДеятельностиЗаПериод3НДФЛ(ПараметрыОтчета) Экспорт
	
	ПараметрыЗаполненияОтчета = Новый Структура(
		"Организация, НачалоПериода, КонецПериода, 
		|ВидДеятельности, ОблагаетсяНДС, ВыводитьРеквизиты, СписокТаблиц, НалоговаяБазаПоПериодам",
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.НачалоПериода,
		ПараметрыОтчета.КонецПериода,
		?(ПараметрыОтчета.Свойство("ВидДеятельности"), ПараметрыОтчета.ВидДеятельности, Неопределено),
		НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода),
		Ложь,
		ЗаполнитьСписокТаблиц3НДФЛ(ПараметрыОтчета.УникальныйИдентификаторФормы),
		Истина);
	
	Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ПодготовитьДанныеОтчета(ПараметрыЗаполненияОтчета);
	
	ТаблицаДоходовРасходов = НоваяТаблицаДоходовРасходов();
	
	ВыборкаНалоговаяБаза = ПараметрыЗаполненияОтчета.НалоговаяБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
	Пока ВыборкаНалоговаяБаза.Следующий() Цикл
		
		Если ВыборкаНалоговаяБаза.ИтогоДоходов = 0 И ВыборкаНалоговаяБаза.ИтогоРасходов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаДоходовРасходов.Добавить(), ВыборкаНалоговаяБаза);
		
	КонецЦикла;
	
	Возврат ТаблицаДоходовРасходов;
	
КонецФункции

Функция НоваяТаблицаДоходовРасходов()
	
	ТипЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаДоходовРасходов = Новый ТаблицаЗначений;
	ТаблицаДоходовРасходов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДоходовРасходов.Колонки.Добавить("ИтогоДоходов",  ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("ИтогоРасходов", ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("ПрочиеДоходы",  ТипЧисло15_2);
	
	Возврат ТаблицаДоходовРасходов;
	
КонецФункции

#КонецОбласти

#Область ОтражениеДоходов

// Возвращает список вариантов отражения доходов, допустимых для предпринимателя-плательщика НДФЛ на переданную дату
// с учетом совмещения с другими режимами и настроек функциональности.
// Для организаций, не являющихся предпринимателями-плательщиками НДФЛ, возвращает пустой список.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация.
//  Период       - Дата - дата, на которую требуются сведения.
//
// Возвращаемое значение:
//   СписокЗначений   - список с перечнем допустимых вариантов отражения доходов, содержимое:
//                       * значения - порядок отражения доходов, указывается в документах поступления денежных средств;
//                       * представления - представления вариантов отражения доходов для отображения в списках выбора.
//
Функция ДопустимыеВариантыОтраженияДоходов(Организация, Период) Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период)
		И УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Период) = Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	СписокВариантов.Добавить(Перечисления.ПорядокОтраженияАвансов.ДоходИП, НСтр("ru = 'Доход ИП'"));
	
	Возврат СписокВариантов;
	
КонецФункции

#КонецОбласти

#Область БаннерУчетБилетовИПнаОСНО

// Возвращает признак видимости баннера про особенности учета билетов для ИП на ОСНО
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо проверить видимость баннера
//   Период      - Дата - период, для которого требуется проверить видимость баннера
//   КлючФормы   - Строка - позволяет уточнить ключ настроек для получения признака видимости в конкретной форме
//
// Возвращаемое значение:
//   Булево
//
Функция ВидимостьБаннераУчетБилетовИПнаОСНО(Организация, Период, КлючФормы = "") Экспорт 

	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧастиКлюча = Новый Массив;
	ЧастиКлюча.Добавить(Организация.УникальныйИдентификатор());
	
	Если Не ПустаяСтрока(КлючФормы) Тогда
		ЧастиКлюча.Добавить(КлючФормы);
	КонецЕсли;	
	
	КлючНастроек = СтрСоединить(ЧастиКлюча, "_");
		
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ВидимостьБаннераУчетБилетовИПнаОСНО",
		КлючНастроек,
		Истина);

КонецФункции

// Сохраняет признак видимости баннера про особенности учета билетов для ИП на ОСНО
//
// Параметры:
//   ЗначениеНастройки - Булево - признак видимости баннера
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо сохранить признак
//   КлючФормы   - Строка - позволяет уточнить ключ настроек для сохранения признака видимости по конкретной форме
//
Процедура СохранитьНастройкуБаннераУчетБилетовИПнаОСНО(ЗначениеНастройки, Организация, КлючФормы = "") Экспорт
	
	ЧастиКлюча = Новый Массив;
	ЧастиКлюча.Добавить(Организация.УникальныйИдентификатор());
	
	Если Не ПустаяСтрока(КлючФормы) Тогда
		ЧастиКлюча.Добавить(КлючФормы);
	КонецЕсли;	
	
	КлючНастроек = СтрСоединить(ЧастиКлюча, "_");
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ВидимостьБаннераУчетБилетовИПнаОСНО",
		КлючНастроек,
		ЗначениеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив организаций, для которых в учетной политике
// на выбранную дату задан признак "Плательщик НДФЛ"
//
// Параметры:
//	НаДату		- <Дата>
//
// Возвращаемое значение:
//	<Массив>	- массив организаций, пустой массив, если не найдено
//				ни одной организации.
//
Функция ПолучитьМассивПлательщиковНДФЛ(НаДату = Неопределено) Экспорт
	Перем МассивПлательщиковНДФЛ;
	
	МассивПлательщиковНДФЛ	= Новый Массив;
	
	Если НаДату = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкиСистемыНалогообложения.Организация
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
		|ГДЕ
		|	НастройкиСистемыНалогообложения.ПлательщикНДФЛ";
	Иначе		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиСистемыНалогообложенияСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&НаДату, ) КАК НастройкиСистемыНалогообложенияСрезПоследних
		|ГДЕ
		|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНДФЛ";
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.Текст	= ТекстЗапроса;
	
	Результат	=  Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТаблицаОрганизаций	= Результат.Выгрузить();
		МассивПлательщиковНДФЛ	= ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	КонецЕсли;
	
	Возврат МассивПлательщиковНДФЛ;
	
КонецФункции

// Проверяет заполнение в табличной части документа субконто выбранного счета в том случае, если
// субконто имеет вид "ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"
//
// Параметры:
//	ДокументОбъект	- <ДокументОбъект.*>
//	ИмяСчета		- <Строка> имя реквизита счета
//	ИмяСубконто		- <Строка> имя реквизита субконто
//	СинонимСубконто	- <Строка> синоним реквизита субконто
//	ИмяСписка		- <Строка> имя табличной части документа
//	СинонимСписка	- <Строка> синоним табличной части документа
//	Отказ			- <Будево>
//
Процедура ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(ДокументОбъект, ИмяСчета, ИмяСубконто, СинонимСубконто, ИмяСписка = "", СинонимСписка = "", Отказ = Неопределено) Экспорт
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяСписка) Тогда
		
		Счет		= ДокументОбъект[ИмяСчета];
		Субконто	= ДокументОбъект[ИмяСубконто];
		
		Если ЗначениеЗаполнено(Счет) И НЕ ЗначениеЗаполнено(Субконто)
			И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Счет) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", СинонимСубконто);
				
			Поле = ИмяСубконто;
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	Иначе
		
		Для каждого СтрокаДокумента Из ДокументОбъект[ИмяСписка] Цикл
			
			Счет		= СтрокаДокумента[ИмяСчета];
			Субконто	= СтрокаДокумента[ИмяСубконто];
			
			Если ЗначениеЗаполнено(Счет) И НЕ ЗначениеЗаполнено(Субконто)
				И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоНоменклатурнымГруппам(Счет) Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", СинонимСубконто,
					СтрокаДокумента.НомерСтроки, СинонимСписка);
					
				Поле = ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "]." + ИмяСубконто;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет типы значений полей источника данных на соответствие типам
//	полей пространства блокировки, если тип не соответствует, замещает значение
//	пустым значением (Неопределено).
//
// Параметры
//	СтруктураПараметров			- <Структура> - Структура параметров блокировки.
//	ИсточникДанных				- <МенеджерВременныхТаблиц,РезультатЗапроса,
//		ТаблицаЗначений,ТабличнаяЧасть>	- источник данных для блокировки.
//	КоллекцияОписанияИсточника	- <Структура или Соответствие> - описывает
//		источник данных для блокировки:
//			Ключ - <Строка> - поле пространства блокировки
//			Значение  - <Строка>- поле таблицы источника данных.
//
// Возвращаемое значение:
//	<ТаблицаЗначений или ТипЗнч(ИсточникДанных)> - подготовленная таблица источника
//		данных или исходное значение источника данных, если подготовка не требуется.
//
Функция ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, ИсточникДанных, КоллекцияОписанияИсточника)
	
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	ИспользоватьИсточникДанных     = КоллекцияОписанияИсточника <> Неопределено 
		И (ТипЗнч(КоллекцияОписанияИсточника) = Тип("Структура") 
			ИЛИ ТипЗнч(КоллекцияОписанияИсточника) = Тип("Соответствие"))
		И КоллекцияОписанияИсточника.Количество() > 0
		И ЗначениеЗаполнено(ИсточникДанных);
	
	Если НЕ ИспользоватьИсточникДанных Тогда
		Возврат ИсточникДанных;
	КонецЕсли;
	
	ТипТаблицы = ?(СтруктураПараметров.Свойство("ТипТаблицы"), СтруктураПараметров.ТипТаблицы, "РегистрНакопления");
	ИмяТаблицы = СтруктураПараметров.ИмяТаблицы;
	
	Если ТипТаблицы = "РегистрНакопления" Тогда
		МетаданныеРегистра	= Метаданные.РегистрыНакопления[ИмяТаблицы];
	ИначеЕсли ТипТаблицы = "РегистрСведений" Тогда
		МетаданныеРегистра	= Метаданные.РегистрыСведений[ИмяТаблицы];
	Иначе
		Возврат ИсточникДанных;
	КонецЕсли;
	
	// Приведение источника данных к Таблице значений
	Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
		ТекстЗапроса = "";
		Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
			ТекстЗапроса = ТекстЗапроса + ",
			|	Таб." + ЭлементКоллекции.Значение;
		КонецЦикла;
		ТекстЗапроса = Сред(ТекстЗапроса, 2);
		ТекстЗапроса = 			
		"ВЫБРАТЬ РАЗЛИЧНЫЕ"
		+ ТекстЗапроса + "
		|ИЗ
		|	" + СтруктураПараметров.ИмяВременнойТаблицы + " КАК Таб";
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса	= Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат ИсточникДанных;
		КонецЕсли;
		
		ПодготовленныйИсточник = РезультатЗапроса.Выгрузить();
		
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("РезультатЗапроса") Тогда
		
		ПодготовленныйИсточник = ИсточникДанных.Выгрузить();
		
	Иначе	// Таблица значений или Табличная часть
		
		КолонкиИсточника			= "";
		Для каждого ОписаниеПоляИсточника Из КоллекцияОписанияИсточника Цикл
			КолонкиИсточника		= КолонкиИсточника + ?(ПустаяСтрока(КолонкиИсточника), "", ",") + ОписаниеПоляИсточника.Значение;
		КонецЦикла;
		
		Если ТипЗнч(ИсточникДанных) = Тип("ТаблицаЗначений") Тогда
			ПодготовленныйИсточник = ИсточникДанных.Скопировать(, КолонкиИсточника);
		Иначе
			ПодготовленныйИсточник = ИсточникДанных.Выгрузить(, КолонкиИсточника);
		КонецЕсли;
		
	КонецЕсли;
	
	КоллекцияОписанийТипов	= Новый Структура;
	Для каждого ОписаниеПоляИсточника Из КоллекцияОписанияИсточника Цикл
		ИмяПоляПространстваБлокировок	= ОписаниеПоляИсточника.Ключ;
		КоллекцияОписанийТипов.Вставить(ИмяПоляПространстваБлокировок, МетаданныеРегистра.Измерения[ИмяПоляПространстваБлокировок].Тип);
	КонецЦикла; 
	
	Для каждого СтрокаИсточника Из ПодготовленныйИсточник Цикл
		
		Для каждого ОписаниеПоляИсточника Из КоллекцияОписанияИсточника Цикл
			ИмяПоляИсточникаДанных			= ОписаниеПоляИсточника.Значение;
			ИмяПоляПространстваБлокировок	= ОписаниеПоляИсточника.Ключ;
			
			ТипЗначенияПоля		= ТипЗнч(СтрокаИсточника[ИмяПоляИсточникаДанных]);
			Если НЕ КоллекцияОписанийТипов[ИмяПоляПространстваБлокировок].СодержитТип(ТипЗначенияПоля) Тогда
				СтрокаИсточника[ИмяПоляИсточникаДанных]	= Неопределено;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла; 
	
	Возврат ПодготовленныйИсточник;
	
КонецФункции

Функция МожноПризнатьДоходы(АвансыВключаютсяВДоходыВПериодеПолученияИП, ДатаАванса, НалоговыйПериод)
	
	// Если АвансыВключаютсяВДоходыВПериодеПолученияИП = Истина, тогда
	// авансы включаются в доходы только в периоде фактического получения.
	Результат = Не АвансыВключаютсяВДоходыВПериодеПолученияИП
		Или (НалоговыйПериод.Начало <= ДатаАванса И ДатаАванса <= НалоговыйПериод.Конец);
	
	Возврат Результат;
	
КонецФункции

Функция МожноПризнатьРасходы(ПризнаватьРасходыПоОперациямПрошлогоГодаИП, ДатаОплаты, НалоговыйПериод)
	
	// Если ПризнаватьРасходыПоОперациямПрошлогоГодаИП = Ложь, тогда
	// в текущем налоговом периоде не отражаются расходы, связанные с:
	// - реализацией товаров и продукции в счет авансов, полученных в прошлом периоде
	// - приобретением товаров, отгруженных и оплаченных покупателями в прошлом периоде.
	
	Результат = ПризнаватьРасходыПоОперациямПрошлогоГодаИП Или НалоговыйПериод.Начало <= ДатаОплаты;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуОплаченныеПартии(СписокВзаиморасчетов, Реквизиты, ИмяДокументаРасчетов)
	
	ОплаченныеПартии = СписокВзаиморасчетов.Скопировать(, "ДокументРасчетов, СуммаБУ");
	ОплаченныеПартии.Свернуть("ДокументРасчетов", "СуммаБУ");
	
	КоличествоСтрок = ОплаченныеПартии.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		ТекущаяСтрока = ОплаченныеПартии[КоличествоСтрок - Счетчик];
		Если (ТекущаяСтрока.СуммаБУ = 0) ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДокументРасчетов) Тогда
			ОплаченныеПартии.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ОплаченныеПартии.Колонки.ДокументРасчетов.Имя	= ИмяДокументаРасчетов;
	ОплаченныеПартии.Колонки.СуммаБУ.Имя			= "СуммаРуб";
	
	Возврат ОплаченныеПартии;
	
КонецФункции

// Возвращает дату первого документа из переданного массива
// Параметры:
//	МассивДокументов - <Массив> - массив документов
//
Функция ДатаПервогоДокумента(МассивДокументов)
	
	Если МассивДокументов = Неопределено ИЛИ МассивДокументов.Количество() = 0 Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	МинимальнаяДата = Дата(3999, 12, 31);
	
	МассивТаблиц = Новый Массив;
	Для Каждого Документ Из МассивДокументов Цикл
		Если ЗначениеЗаполнено(Документ) Тогда
			МассивТаблиц.Добавить(Документ.Метаданные().ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Если МассивТаблиц.Количество() = 0 Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	МассивТаблиц = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивТаблиц);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(ВложенныйЗапрос.Дата) КАК Дата
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПсевдонимТаблицы.Дата КАК Дата
		|	ИЗ
		|		" + МассивТаблиц[0] + " КАК ПсевдонимТаблицы
		|	ГДЕ
		|		ПсевдонимТаблицы.Ссылка В (&МассивДокументов)
		|";
	
	Для Индекс = 1 По МассивТаблиц.ВГраница() Цикл
		
		ТекстЗапроса = ТекстЗапроса + 
			"	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		ПсевдонимТаблицы.Дата КАК Дата
			|	ИЗ
			|		" + МассивТаблиц[Индекс] + " КАК ПсевдонимТаблицы
			|	ГДЕ
			|		ПсевдонимТаблицы.Ссылка В (&МассивДокументов)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ") КАК ВложенныйЗапрос";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МинимальнаяДата = Выборка.Дата;
	КонецЕсли;
	
	Возврат МинимальнаяДата;
	
КонецФункции

// Определяет вид МПЗ по счету учета
//
// Параметры
//	<СчетУчета>		- <ПланСчетовСсылка.Хозрасчетный> - счет учета
//	<СтатьяЗатрат> 	- <СправочникСсылка.СтатьиЗатрат, СправочникСсылка.ПрочиеДоходыИРасходы> - статья затрат
//
// Возвращаемое значение:
//   <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
//
Функция ВидМПЗПоСчетуУчета(СчетУчета, СтатьяЗатрат = Неопределено, ВидРасходовНУ = Неопределено, ПринятиеКналоговомуУчету = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.НематериальныеАктивы) Тогда
		
		Возврат Перечисления.ВидыМПЗ.НМА;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновныеСредства)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ) Тогда
		
		Возврат Перечисления.ВидыМПЗ.ОС;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов) Тогда
		
		Возврат Перечисления.ВидыМПЗ.КапитальныеВложения;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Товары)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные) Тогда
		
		Возврат Перечисления.ВидыМПЗ.Товары;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Материалы) Тогда
		
		Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СырьеИМатериалы)
			ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку) Тогда
			
			Возврат Перечисления.ВидыМПЗ.Материалы;
			
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТопливоВБаке Тогда
			
			Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
			
		Иначе
			
			Возврат Перечисления.ВидыМПЗ.ВспомогательныеМатериалы;
			
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукция)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная) Тогда
			  
		Возврат Перечисления.ВидыМПЗ.Продукция;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья) Тогда
		
		// Продукция из давальческого сырья не отражается в НУ ИП
		Возврат Неопределено;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.БракВПроизводстве)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
			
			Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			
				Если НЕ ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					Возврат Неопределено;
				ИначеЕсли ВидРасходовНУ = Перечисления.ВидыРасходовНУ.МатериальныеРасходы
					ИЛИ ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
					
					Возврат Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
						
				ИначеЕсли ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
					Возврат Неопределено;
				Иначе
					Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
				КонецЕсли;
				
			Иначе
				
				Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
				
			КонецЕсли;
			
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) Тогда
		
		Возврат Перечисления.ВидыМПЗ.РБП;
				
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
		
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			
			Если НЕ ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				Возврат Неопределено;
			Иначе
				
				Если ПринятиеКналоговомуУчету Тогда
					Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
			
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Полуфабрикаты) Тогда
		
		Возврат Перечисления.ВидыМПЗ.Полуфабрикаты;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) Тогда
		
		Возврат Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ДенежныеДокументы) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал) Тогда
		
		Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Взносы_СтраховойГод) Тогда
		
		Если НЕ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод) Тогда
			Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендныеОбязательства) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ) Тогда
		
		Возврат Перечисления.ВидыМПЗ.ПрочиеРасходы;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНоменклатурнуюГруппу(УчетнаяПолитика, СтруктураПараметров) Экспорт
	Перем НоменклатурнаяГруппа, ВидМПЗ;
	
	Если НЕ УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП Тогда
		Возврат УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
	КонецЕсли;
	
	СтруктураПараметров.Свойство("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	СтруктураПараметров.Свойство("ВидМПЗ",               ВидМПЗ);
	
	Если НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа)
		И НЕ ВидМПЗ = Перечисления.ВидыМПЗ.ИныеМатериальныеРасходы
		И НЕ ВидМПЗ = Перечисления.ВидыМПЗ.ПрочиеРасходы Тогда
		
		// Если номенклатурная группа не определена, для материальных
		// ценностей подставляем основную номенклатурную группу.
		// ИМР и Прочие расходы распределяются по номенклатурным группам
		// регламентной операцией.
		НоменклатурнаяГруппа = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа;
		
	КонецЕсли;
	
	Возврат НоменклатурнаяГруппа;
	
КонецФункции

// Определяет Характер деятельности
//
// Параметры
//	<Реквизиты>			- <Структура("ВидОперации")> - вид операции
//	<СчетУчета>			- <ПланСчетовСсылка.Хозрасчетный> - счет учета
//	<СтатьяЗатрат>		- <СправочникСсылка.СтатьиЗатрат, СправочникСсылка.ПрочиеДоходыИРасходы> - статья затрат
//	<СчетДоходов>		- <ПланСчетовСсылка.Хозрасчетный> - счет доходов
//	<УчетнаяПолитика>	- <Структура("ОсновнойХарактерДеятельности, ПлательщикЕНВД, ПрименяетсяУСНПатент")>
//
// Возвращаемое значение:
//	<ПеречислениеСсылка.ХарактерДеятельности> - характер деятельности
//
Функция ПолучитьХарактерДеятельности(УчетнаяПолитика, СтруктураПараметров) Экспорт
	Перем СчетУчета, ВидОперации, ТипСклада;
	Перем СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат, СчетДоходов, ДеятельностьНаПатенте;
	
	СтруктураПараметров.Свойство("СчетУчета",    СчетУчета);
	СтруктураПараметров.Свойство("ВидОперации",  ВидОперации);
	СтруктураПараметров.Свойство("ТипСклада",    ТипСклада);
	СтруктураПараметров.Свойство("СтатьяЗатрат", СтатьяЗатрат);
	СтруктураПараметров.Свойство("СчетДоходов",  СчетДоходов);
	СтруктураПараметров.Свойство("ВидДеятельностиДляНалоговогоУчетаЗатрат", ВидДеятельностиДляНалоговогоУчетаЗатрат);
	Если НЕ СтруктураПараметров.Свойство("ДеятельностьНаПатенте", ДеятельностьНаПатенте) Тогда
		ДеятельностьНаПатенте = Ложь;
	КонецЕсли;
	
	ОсновнойХарактерДеятельности = УчетнаяПолитика.ОсновнойХарактерДеятельности;

	Если НЕ УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП ИЛИ НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат ОсновнойХарактерДеятельности;
	КонецЕсли;
	
	Если ДеятельностьНаПатенте Тогда
		Возврат Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте;
	КонецЕсли;
	
	ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПлательщикЕНВД Или УчетнаяПолитика.ПрименяетсяУСНПатент;
	
	ОптовыйСклад = (ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад);
	РозничныйСклад = (ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
		Или ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	Если    БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Товары)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные) Тогда
		
		Если    (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары)
			ИЛИ (ВидОперации = "ОтчетКомиссионераОПродажах")
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование) Тогда
			
			Если БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетДоходов) И ПрименяетсяОсобыйПорядокНалогообложения Тогда
				
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
			ИначеЕсли РозничныйСклад Тогда
				
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД;
			Иначе
				
				Возврат Перечисления.ХарактерДеятельности.ОптоваяТорговля;
			КонецЕсли;
			
		ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах)
			ИЛИ   (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)
			ИЛИ   (ВидОперации = "ПеремещениеТоваров") Тогда
			
			// Отчет о розничных продажах или перемещение в НТТ
			Если БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетДоходов) И ПрименяетсяОсобыйПорядокНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
			Иначе
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД;
			КонецЕсли;
			
		Иначе
			
			Если ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения И ПрименяетсяОсобыйПорядокНалогообложения Тогда
				
				Если ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
					ХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте;
				Иначе
					ХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
				КонецЕсли;
				
			ИначеЕсли ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
				
				ХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля;
				
			ИначеЕсли ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля
				Или ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД
				Или ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД
				Или ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
				
				ХарактерДеятельности = ОсновнойХарактерДеятельности;
				
			Иначе
				ХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля;
			КонецЕсли;
			
			// Проверка по типу склада
			Если ХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля И РозничныйСклад Тогда
				ХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД;
			ИначеЕсли ХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД И ОптовыйСклад Тогда
				ХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля;
			КонецЕсли;
			
			Возврат ХарактерДеятельности;
			
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукция)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Полуфабрикаты)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная) Тогда
		
		Если    (ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары)
			ИЛИ (ВидОперации = "ОтчетКомиссионераОПродажах")
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах)
			ИЛИ (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах) Тогда
			
			Если БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетДоходов) И ПрименяетсяОсобыйПорядокНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД;
			Иначе
				Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
			КонецЕсли;
			
		Иначе
			
		Если НЕ ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги
			И НЕ ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.УслугиЕНВД Тогда
				
				Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
				
			Иначе
				Возврат ОсновнойХарактерДеятельности;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СебестоимостьПродаж) Тогда
		
		Если БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетУчета) И ПрименяетсяОсобыйПорядокНалогообложения Тогда
			Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД;
		Иначе
			Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ИздержкиОбращения) Тогда
		
		Если НЕ СтатьяЗатрат = Неопределено Тогда
			
			Если ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения И ПрименяетсяОсобыйПорядокНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
			ИначеЕсли ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
			Возврат Перечисления.ХарактерДеятельности.ВсеВидыТорговли;
		Иначе
			Возврат Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД;
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.БракВПроизводстве)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
			
		Если НЕ СтатьяЗатрат = Неопределено Тогда
			
			Если ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения И ПрименяетсяОсобыйПорядокНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД;
			ИначеЕсли ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
			Возврат Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг;
		Иначе
			Возврат Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги;
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
		
		Если СтатьяЗатрат <> Неопределено Тогда
			
			Если ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения И ПрименяетсяОсобыйПорядокНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД;
			ИначеЕсли ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
				Возврат Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Перечисления.ХарактерДеятельности.ПустаяСсылка();
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) Тогда
		
		Возврат ОсновнойХарактерДеятельности;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей) Тогда
		
		ХарактерДеятельности = ОсновнойХарактерДеятельности;
		Если РозничныйСклад Тогда
			ХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД;
		ИначеЕсли ОптовыйСклад Тогда
			ХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля;
		КонецЕсли;
		
		Возврат ХарактерДеятельности;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Взносы_СтраховойГод) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Реализации прочего имущества, когда пользователь явно указал, что операция относится к ЕНВД.
	Если НЕ СчетДоходов = Неопределено И ПрименяетсяОсобыйПорядокНалогообложения Тогда
		Если БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетДоходов) Тогда
			
			Если ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля
				ИЛИ ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
					
					Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
					
			ИначеЕсли ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги Тогда
				Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД
			КонецЕсли;
			
		ИначеЕсли СтатьяЗатрат <> Неопределено
			И ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
			И ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
			
			Если ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля
				ИЛИ ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД Тогда
				
				Возврат Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД;
				
			ИначеЕсли ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги Тогда
				Возврат Перечисления.ХарактерДеятельности.УслугиЕНВД
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительная проверка по типу склада
	Если ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля И РозничныйСклад Тогда
		
		ХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД;
	ИначеЕсли ОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД И ОптовыйСклад Тогда
		
		ХарактерДеятельности = Перечисления.ХарактерДеятельности.ОптоваяТорговля;
	Иначе
		ХарактерДеятельности = ОсновнойХарактерДеятельности;
	КонецЕсли;
	
	Возврат ХарактерДеятельности;
	
КонецФункции

Функция ХарактерыДеятельностиОСН() Экспорт

	ХарактерыДеятельности	= Новый Массив;
	ХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ОптоваяТорговля);
	ХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.РозничнаяТорговляНеЕНВД);
	ХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ПроизводствоРаботыУслуги);
	
	Возврат ХарактерыДеятельности;

КонецФункции

Функция ХарактерыДеятельностиЕНВД() Экспорт

	ХарактерыДеятельности	= Новый Массив;
	ХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.РозничнаяТорговляЕНВД);
	ХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.УслугиЕНВД);
	
	Возврат ХарактерыДеятельности;

КонецФункции

Функция ХарактерыДеятельностиУСНПатент() Экспорт

	ХарактерыДеятельности	= Новый Массив;
	ХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте);
	
	Возврат ХарактерыДеятельности;

КонецФункции

Функция РаспределяемыеХарактерыДеятельности() Экспорт
	
	РаспределяемыеХарактерыДеятельности = Новый Массив;
	РаспределяемыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ПустаяСсылка()); // распред. на все виды деятельности
	РаспределяемыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговли); // распред. на опт, розницу и розницу (ЕНВД)
	РаспределяемыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыПроизводстваРаботУслуг); // распред. на прочее и прочее (ЕНВД)
	РаспределяемыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьНеЕНВД); // распред. на опт, розницу и прочее
	РаспределяемыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсяДеятельностьЕНВД); // распред. на розницу (ЕНВД) и прочее (ЕНВД)
	РаспределяемыеХарактерыДеятельности.Добавить(Перечисления.ХарактерДеятельности.ВсеВидыТорговлиНеЕНВД); // распред. на опт и розницу
	
	Возврат РаспределяемыеХарактерыДеятельности;
	
КонецФункции

Функция РаспределяемыеВидыМПЗ() Экспорт
	
	РаспределяемыеВидыМПЗ = Новый Массив;
	РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.ВспомогательныеМатериалы);
	РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Материалы);
	РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Полуфабрикаты);
	РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Продукция);
	РаспределяемыеВидыМПЗ.Добавить(Перечисления.ВидыМПЗ.Товары);
	
	Возврат РаспределяемыеВидыМПЗ;
	
КонецФункции

// Функция возвращает таблицу, содержащую периоды и организации, по которым
// были движения
//
// Параметры
//	ВидДеятельности - <СправочникСсылк.ВидыДеятельностиПредпринимателей> - вид деятельности
//
// Возвращаемое значение:
//	<ТаблицаЗначений, Неопределено> - таблица периодов движений
Функция ПериодыДвиженийПоВидуДеятельности(ВидДеятельности) Экспорт

	ТаблицаОрганизаций	= Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ВидДеятельности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидДеятельности",	ВидДеятельности);
	Запрос.УстановитьПараметр("КонецГода",			КонецГода(ТекущаяДатаСеанса()));
	
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	НастройкиУчетаНДФЛ.Период КАК НачалоПериода,
	|	НастройкиУчетаНДФЛ.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаВидДеятельности
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДФЛ КАК НастройкиУчетаНДФЛ
	|ГДЕ
	|	НастройкиУчетаНДФЛ.ОсновнойВидДеятельности = &ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НачалоПериода,
	|	МИНИМУМ(ВложенныйЗапрос.КонецПериода) КАК КонецПериода,
	|	ВложенныйЗапрос.Организация
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_УчетнаяПолитикаВидДеятельности.НачалоПериода КАК НачалоПериода,
	|		ЕСТЬNULL(ДОБАВИТЬКДАТЕ(НастройкиУчетаНДФЛ.Период, СЕКУНДА, -1), &КонецГода) КАК КонецПериода,
	|		ВТ_УчетнаяПолитикаВидДеятельности.Организация КАК Организация
	|	ИЗ
	|		ВТ_УчетнаяПолитикаВидДеятельности КАК ВТ_УчетнаяПолитикаВидДеятельности
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДФЛ КАК НастройкиУчетаНДФЛ
	|			ПО ВТ_УчетнаяПолитикаВидДеятельности.Организация = НастройкиУчетаНДФЛ.Организация
	|				И ВТ_УчетнаяПолитикаВидДеятельности.НачалоПериода < НастройкиУчетаНДФЛ.Период) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_УчетнаяПолитикаВидДеятельности.НачалоПериода КАК НачалоПериода,
	|	ВТ_ПериодыУчетнойПолитики.КонецПериода КАК КонецПериода,
	|	ВТ_УчетнаяПолитикаВидДеятельности.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_УчетнаяПолитикаВидДеятельности КАК ВТ_УчетнаяПолитикаВидДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ВТ_ПериодыУчетнойПолитики
	|		ПО ВТ_УчетнаяПолитикаВидДеятельности.Организация = ВТ_ПериодыУчетнойПолитики.Организация
	|			И ВТ_УчетнаяПолитикаВидДеятельности.НачалоПериода = ВТ_ПериодыУчетнойПолитики.НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_УчетнаяПолитика.НачалоПериода) КАК МинимальныйПериод
	|ИЗ
	|	ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_УчетнаяПолитика.КонецПериода) КАК МаксимальныйПериод
	|ИЗ
	|	ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика";
	
	Результаты	= Запрос.ВыполнитьПакет();
	
	Если НЕ Результаты[3].Пустой() И НЕ Результаты[4].Пустой() Тогда
		
		ВыборкаМинимальныйПериод	= Результаты[3].Выбрать();
		ВыборкаМинимальныйПериод.Следующий();
		
		ВыборкаМаксимальныйПериод	= Результаты[4].Выбрать();
		ВыборкаМаксимальныйПериод.Следующий();
		
		Если ЗначениеЗаполнено(ВыборкаМинимальныйПериод.МинимальныйПериод) И ЗначениеЗаполнено(ВыборкаМаксимальныйПериод.МаксимальныйПериод) Тогда
		
			Запрос.УстановитьПараметр("НачалоПериода",	НачалоМесяца(ВыборкаМинимальныйПериод.МинимальныйПериод));
			Запрос.УстановитьПараметр("КонецПериода",	КонецМесяца(ВыборкаМаксимальныйПериод.МаксимальныйПериод));
			
			Запрос.Текст	=
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХозрасчетныйОбороты.Период КАК Период,
			|	ХозрасчетныйОбороты.Организация КАК Организация
			|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Месяц,
			|			,
			|			,
			|			Организация В
			|				(ВЫБРАТЬ
			|					УчетнаяПолитика.Организация
			|				ИЗ
			|					ВТ_УчетнаяПолитика КАК УчетнаяПолитика),
			|			,
			|			) КАК ХозрасчетныйОбороты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ВложенныйЗапрос.ПериодДвижений) КАК НачалоПериодаДвижений,
			|	ВложенныйЗапрос.НачалоУчетнойПолитики КАК НачалоУчетнойПолитики,
			|	ВложенныйЗапрос.Организация КАК Организация
			|ПОМЕСТИТЬ ВТ_ХозрасчетныйНачалоДвижений
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_УчетнаяПолитика.Организация КАК Организация,
			|		ВТ_УчетнаяПолитика.НачалоПериода КАК НачалоУчетнойПолитики,
			|		ВТ_ХозрасчетныйОбороты.Период КАК ПериодДвижений
			|	ИЗ
			|		ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОбороты КАК ВТ_ХозрасчетныйОбороты
			|			ПО ВТ_УчетнаяПолитика.Организация = ВТ_ХозрасчетныйОбороты.Организация
			|				И ВТ_УчетнаяПолитика.НачалоПериода <= ВТ_ХозрасчетныйОбороты.Период
			|				И ВТ_УчетнаяПолитика.КонецПериода >= ВТ_ХозрасчетныйОбороты.Период) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Организация,
			|	ВложенныйЗапрос.НачалоУчетнойПолитики
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_УчетнаяПолитика.Организация КАК Организация,
			|	ВТ_УчетнаяПолитика.НачалоПериода КАК НачалоПериода,
			|	ВТ_УчетнаяПолитика.КонецПериода КАК КонецПериода
			|ИЗ
			|	ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйНачалоДвижений КАК ВТ_ХозрасчетныйНачалоДвижений
			|		ПО ВТ_УчетнаяПолитика.Организация = ВТ_ХозрасчетныйНачалоДвижений.Организация
			|			И ВТ_УчетнаяПолитика.НачалоПериода = ВТ_ХозрасчетныйНачалоДвижений.НачалоУчетнойПолитики";
			
			Результат	= Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				
				ТаблицаОрганизаций	= Результат.Выгрузить();
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ТаблицаОрганизаций;

КонецФункции

Функция ДополнитьТаблицуНоменклатурнымиГруппами(ТаблицаМПЗБезНоменклатурныхГрупп, ТаблицаРеквизиты) Экспорт

	Реквизиты	= ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаМПЗ	= ТаблицаМПЗБезНоменклатурныхГрупп.Скопировать();
	ТаблицаМПЗ.Колонки.Добавить("НоменклатурнаяГруппа",	Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	
	ВестиУчетПоВидамДеятельностиИП	= УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВестиУчетПоВидамДеятельностиИП Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивМПЗ", ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаМПЗ, "Номенклатура", Истина));
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивМПЗ)
			|	И Номенклатура.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)";
		
		ТаблицаНоменклатурныхГрупп = Запрос.Выполнить().Выгрузить();
		ТаблицаНоменклатурныхГрупп.Индексы.Добавить();
		
		Для Каждого МПЗ Из ТаблицаМПЗ Цикл
			
			НайденнаяСтрока	= ТаблицаНоменклатурныхГрупп.Найти(МПЗ.Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				МПЗ.НоменклатурнаяГруппа	= НайденнаяСтрока.НоменклатурнаяГруппа;
			Иначе
				МПЗ.НоменклатурнаяГруппа	= Справочники.НоменклатурныеГруппы.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОсновнаяНоменклатурнаяГруппа	= УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Реквизиты.Организация, Реквизиты.Период);
		ТаблицаМПЗ.ЗаполнитьЗначения(ОсновнаяНоменклатурнаяГруппа, "НоменклатурнаяГруппа");
		
	КонецЕсли;
	
	Возврат ТаблицаМПЗ;

КонецФункции

Функция ЭтоДокументОплаты(ДокументСсылка)

	ВидыДокументовДокументовОплаты = Новый Массив();
	ВидыДокументовДокументовОплаты.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	ВидыДокументовДокументовОплаты.Добавить(Тип("ДокументСсылка.РасходыПредпринимателя"));
	ВидыДокументовДокументовОплаты.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ВидыДокументовДокументовОплаты.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ВидыДокументовДокументовОплаты.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	ВидыДокументовДокументовОплаты.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	ВидыДокументовДокументовОплаты.Добавить(Тип("ДокументСсылка.ПутевойЛист"));
	
	Возврат ВидыДокументовДокументовОплаты.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено;

КонецФункции

Функция ПустаяТаблицаРегистраНакопления(ИмяРегистра, ЕстьОрганизация = Истина, ЕстьВидДвижения = Ложь) Экспорт

	ПустаяТаблица = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПустаяТаблица.Колонки.Удалить("Регистратор");
	ПустаяТаблица.Колонки.Удалить("МоментВремени");
	ПустаяТаблица.Колонки.Удалить("Активность");
	Если НЕ ЕстьОрганизация Тогда
		ПустаяТаблица.Колонки.Удалить("Организация");
	КонецЕсли;
	Если НЕ ЕстьВидДвижения И ПустаяТаблица.Колонки.Найти("ВидДвижения") <> Неопределено Тогда
		ПустаяТаблица.Колонки.Удалить("ВидДвижения");
	КонецЕсли;
	
	Возврат ПустаяТаблица;

КонецФункции

Процедура ЗаполнитьТаблицыВозвратаМПЗОтПокупателяБезУказанияДокументаОтгрузки(СтруктураТаблиц, ВозвращенныеПартии, НеоплаченныеДокументыОтгрузки, Реквизиты)
	
	СписокМПЗ            = ПустаяТаблицаРегистраНакопления("ИПМПЗ", Ложь);
	СписокМПЗОтгруженные = ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные", Ложь, Истина);
	
	Если НеоплаченныеДокументыОтгрузки.Количество() = 0 Тогда
		Для каждого Партия Из ВозвращенныеПартии Цикл
			НоваяСтрока = СписокМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия);
			НоваяСтрока.Количество = Партия.Количество;
			НоваяСтрока.Сумма      = Партия.Выручка - Партия.НДСНачисленный;
			НоваяСтрока.НДС        = Партия.НДСНачисленный;
		КонецЦикла;
		СтруктураТаблиц.СписокМПЗ = СписокМПЗ;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовМПЗ", ОбщегоНазначения.ВыгрузитьКолонку(ВозвращенныеПартии, "ВидМПЗ", Истина));
	Запрос.УстановитьПараметр("СписокТоваров",  ОбщегоНазначения.ВыгрузитьКолонку(ВозвращенныеПартии, "Номенклатура", Истина));
	Запрос.УстановитьПараметр("НеоплаченныеДокументыОтгрузки", НеоплаченныеДокументыОтгрузки);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
		|	ИПМПЗОтгруженныеОстатки.ВидМПЗ,
		|	ИПМПЗОтгруженныеОстатки.Номенклатура,
		|	ИПМПЗОтгруженныеОстатки.Партия,
		|	ИПМПЗОтгруженныеОстатки.ДокументОплаты,
		|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
		|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток,
		|	ИПМПЗОтгруженныеОстатки.СуммаОстаток,
		|	ИПМПЗОтгруженныеОстатки.НДСОстаток,
		|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток,
		|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток
		|ПОМЕСТИТЬ ВТИПМПЗОтгруженные
		|ИЗ
		|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ВидМПЗ В (&СписокВидовМПЗ)
		|				И Номенклатура В (&СписокТоваров)
		|				И ДокументОтгрузки В (&НеоплаченныеДокументыОтгрузки)) КАК ИПМПЗОтгруженныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПМПЗОтгруженныеОстатки.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
		|	ИПМПЗОтгруженныеОстатки.ВидМПЗ,
		|	ИПМПЗОтгруженныеОстатки.Номенклатура,
		|	ИПМПЗОтгруженныеОстатки.Партия,
		|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
		|	ИПМПЗОтгруженныеОстатки.ДокументОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
		|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
		|	ЕСТЬNULL(РеквизитыДокументовОтгрузки.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОтгрузки,
		|	ИПМПЗОтгруженныеОстатки.КоличествоОстаток КАК Количество,
		|	ИПМПЗОтгруженныеОстатки.СуммаОстаток КАК Сумма,
		|	ИПМПЗОтгруженныеОстатки.НДСОстаток КАК НДС,
		|	ИПМПЗОтгруженныеОстатки.ВыручкаОстаток КАК Выручка,
		|	ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток КАК НДСНачисленный
		|ИЗ
		|	ВТИПМПЗОтгруженные КАК ИПМПЗОтгруженныеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
		|		ПО (РеквизитыПартий.Организация = &Организация)
		|			И ИПМПЗОтгруженныеОстатки.Партия = РеквизитыПартий.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
		|			И ИПМПЗОтгруженныеОстатки.ДокументОплаты = РеквизитыДокументовОплаты.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОтгрузки
		|		ПО (РеквизитыДокументовОтгрузки.Организация = &Организация)
		|			И ИПМПЗОтгруженныеОстатки.ДокументОтгрузки = РеквизитыДокументовОтгрузки.Документ";
	
	ТаблицаОтгрузок = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОтгрузок, "НомерСтроки");
	ТаблицаОтгрузок.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОтгрузок.Индексы.Добавить("ВидМПЗ, Номенклатура");
	ОтборПартий = Новый Структура("ВидМПЗ, Номенклатура");
	
	Для каждого Партия Из ВозвращенныеПартии Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПартий, Партия);
		
		НайденныеОтгрузки = ТаблицаОтгрузок.Скопировать(ОтборПартий);
		НайденныеОтгрузки.Сортировать("ДатаДокументаОтгрузки, ДокументОтгрузки, ДатаПартии, Партия, ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
		
		Для Каждого Отгрузка Из НайденныеОтгрузки Цикл
			
			Если Партия.Количество >= Отгрузка.Количество Тогда
				КоличествоОтгружено     = Отгрузка.Количество;
				СуммаОтгружено          = Отгрузка.Сумма;
				НДСОтгружено            = Отгрузка.НДС;
				ВыручкаОтгружено        = Отгрузка.Выручка;
				НДСНачисленныйОтгружено = Отгрузка.НДСНачисленный;
			Иначе
				Коэффициент = Партия.Количество / Отгрузка.Количество;
				КоличествоОтгружено     = Партия.Количество;
				СуммаОтгружено          = Окр(Отгрузка.Сумма * Коэффициент, 2, 1);
				НДСОтгружено            = Окр(Отгрузка.Сумма + Отгрузка.НДС * Коэффициент, 2, 1) - СуммаОтгружено;
				ВыручкаОтгружено        = Окр(Отгрузка.Выручка * Коэффициент, 2, 1);
				НДСНачисленныйОтгружено = ВыручкаОтгружено - Окр(Отгрузка.Выручка - Отгрузка.НДСНачисленный *Коэффициент, 2, 1);
			КонецЕсли;
			
			НоваяСтрока = СписокМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отгрузка);
			НоваяСтрока.Количество = КоличествоОтгружено;
			НоваяСтрока.Сумма      = СуммаОтгружено;
			НоваяСтрока.НДС        = НДСОтгружено;
			
			НоваяСтрока = СписокМПЗОтгруженные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отгрузка);
			НоваяСтрока.ВидДвижения    = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Количество     = КоличествоОтгружено;
			НоваяСтрока.Сумма          = СуммаОтгружено;
			НоваяСтрока.НДС            = НДСОтгружено;
			НоваяСтрока.Выручка        = ВыручкаОтгружено;
			НоваяСтрока.НДСНачисленный = НДСНачисленныйОтгружено;
			
			Отгрузка.Количество     = Отгрузка.Количество - КоличествоОтгружено;
			Отгрузка.Сумма          = Отгрузка.Сумма - СуммаОтгружено;
			Отгрузка.НДС            = Отгрузка.НДС - НДСОтгружено;
			Отгрузка.Выручка        = Отгрузка.Выручка - ВыручкаОтгружено;
			Отгрузка.НДСНачисленный = Отгрузка.НДСНачисленный - НДСНачисленныйОтгружено;
			
			Партия.Количество     = Партия.Количество - КоличествоОтгружено;
			Партия.Выручка        = Партия.Выручка - ВыручкаОтгружено;
			Партия.НДСНачисленный = Партия.НДСНачисленный - НДСНачисленныйОтгружено;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОтгрузок.Найти(Отгрузка.НомерСтроки, "НомерСтроки"), Отгрузка);
			
		КонецЦикла;
		
		Если Партия.Количество <> 0 Тогда
			// Возвраты, по которым не удалось сторнировать записи регистров, образуют новую партию
			НоваяСтрока = СписокМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия);
			НоваяСтрока.Количество = Партия.Количество;
			НоваяСтрока.Сумма      = Партия.Выручка - Партия.НДСНачисленный;
			НоваяСтрока.НДС        = Партия.НДСНачисленный;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТаблиц.СписокМПЗ            = СписокМПЗ;
	СтруктураТаблиц.СписокМПЗОтгруженные = СписокМПЗОтгруженные;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыВозвратаМПЗОтПокупателяПоДокументуОтгрузки(СтруктураТаблиц, ВозвращенныеПартии, Реквизиты)
	
	СписокМПЗ            = ПустаяТаблицаРегистраНакопления("ИПМПЗ", Ложь);
	СписокМПЗОтгруженные = ПустаяТаблицаРегистраНакопления("ИПМПЗОтгруженные", Ложь, Истина);
	СписокДоходов        = ПустаяТаблицаРегистраНакопления("ИПДоходы", Ложь);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокВидовМПЗ", ОбщегоНазначения.ВыгрузитьКолонку(ВозвращенныеПартии, "ВидМПЗ", Истина));
	Запрос.УстановитьПараметр("СписокТоваров",  ОбщегоНазначения.ВыгрузитьКолонку(ВозвращенныеПартии, "Номенклатура", Истина));
	Запрос.УстановитьПараметр("СписокПартий",   ОбщегоНазначения.ВыгрузитьКолонку(ВозвращенныеПартии, "Партия", Истина));
	Запрос.УстановитьПараметр("ДокументОтгрузки", Реквизиты.Сделка);
	Запрос.УстановитьПараметр("НачалоПериода",    ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Сделка, "Дата"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
		|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
		|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
		|	ИПМПЗОтгруженныеОбороты.Номенклатура,
		|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
		|	ИПМПЗОтгруженныеОбороты.Партия,
		|	ИПМПЗОтгруженныеОбороты.ДокументОплаты,
		|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
		|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
		|	ИПМПЗОтгруженныеОбороты.НДСПриход,
		|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
		|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
		|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
		|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
		|	ИПМПЗОтгруженныеОбороты.НДСРасход,
		|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
		|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
		|ПОМЕСТИТЬ ВТИПМПЗОтгруженныеОбороты
		|ИЗ
		|	РегистрНакопления.ИПМПЗОтгруженные.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И ВидМПЗ В (&СписокВидовМПЗ)
		|				И Номенклатура В (&СписокТоваров)
		|				И Партия В (&СписокПартий)
		|				И ДокументОтгрузки = &ДокументОтгрузки) КАК ИПМПЗОтгруженныеОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПМПЗОтгруженныеОбороты.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПДоходыОбороты.НоменклатурнаяГруппа,
		|	ИПДоходыОбороты.ХарактерДеятельности,
		|	ИПДоходыОбороты.ВидМПЗ,
		|	ИПДоходыОбороты.Номенклатура,
		|	ИПДоходыОбороты.ДокументОтгрузки,
		|	ИПДоходыОбороты.Партия,
		|	ИПДоходыОбороты.ДокументОплаты,
		|	ИПДоходыОбороты.КоличествоОборот,
		|	ИПДоходыОбороты.ВыручкаОборот,
		|	ИПДоходыОбороты.НДСНачисленныйОборот,
		|	ИПДоходыОбороты.СуммаОборот,
		|	ИПДоходыОбороты.НДСОборот,
		|	ИПДоходыОбороты.КоличествоОплаченоПоставщикуОборот
		|ПОМЕСТИТЬ ВТИПДоходыОбороты
		|ИЗ
		|	РегистрНакопления.ИПДоходы.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И ВидМПЗ В (&СписокВидовМПЗ)
		|				И Номенклатура В (&СписокТоваров)
		|				И ДокументОтгрузки = &ДокументОтгрузки
		|				И Партия В (&СписокПартий)) КАК ИПДоходыОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПДоходыОбороты.Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПМПЗОтгруженныеОбороты.НоменклатурнаяГруппа,
		|	ИПМПЗОтгруженныеОбороты.ХарактерДеятельности,
		|	ИПМПЗОтгруженныеОбороты.ВидМПЗ,
		|	ИПМПЗОтгруженныеОбороты.Номенклатура,
		|	ИПМПЗОтгруженныеОбороты.Партия,
		|	ЕСТЬNULL(РеквизитыПартий.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии,
		|	ИПМПЗОтгруженныеОбороты.ДокументОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
		|	ИПМПЗОтгруженныеОбороты.ДокументОтгрузки,
		|	ИПМПЗОтгруженныеОбороты.КоличествоПриход,
		|	ИПМПЗОтгруженныеОбороты.СуммаПриход,
		|	ИПМПЗОтгруженныеОбороты.НДСПриход,
		|	ИПМПЗОтгруженныеОбороты.ВыручкаПриход,
		|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйПриход,
		|	ИПМПЗОтгруженныеОбороты.КоличествоРасход,
		|	ИПМПЗОтгруженныеОбороты.СуммаРасход,
		|	ИПМПЗОтгруженныеОбороты.НДСРасход,
		|	ИПМПЗОтгруженныеОбороты.ВыручкаРасход,
		|	ИПМПЗОтгруженныеОбороты.НДСНачисленныйРасход
		|ИЗ
		|	ВТИПМПЗОтгруженныеОбороты КАК ИПМПЗОтгруженныеОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
		|		ПО (РеквизитыПартий.Организация = &Организация)
		|			И ИПМПЗОтгруженныеОбороты.Партия = РеквизитыПартий.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
		|			И ИПМПЗОтгруженныеОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПДоходыОбороты.НоменклатурнаяГруппа,
		|	ИПДоходыОбороты.ХарактерДеятельности,
		|	ИПДоходыОбороты.ВидМПЗ,
		|	ИПДоходыОбороты.Номенклатура,
		|	ИПДоходыОбороты.ДокументОтгрузки,
		|	ИПДоходыОбороты.Партия,
		|	ИПДоходыОбороты.ДокументОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
		|	ИПДоходыОбороты.КоличествоОборот КАК КоличествоОборот,
		|	ИПДоходыОбороты.ВыручкаОборот КАК ВыручкаОборот,
		|	ИПДоходыОбороты.НДСНачисленныйОборот КАК НДСНачисленныйОборот,
		|	ИПДоходыОбороты.СуммаОборот КАК СуммаОборот,
		|	ИПДоходыОбороты.НДСОборот КАК НДСОборот,
		|	ИПДоходыОбороты.КоличествоОплаченоПоставщикуОборот КАК КоличествоОплаченоПоставщикуОборот
		|ИЗ
		|	ВТИПДоходыОбороты КАК ИПДоходыОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
		|			И ИПДоходыОбороты.ДокументОплаты = РеквизитыДокументовОплаты.Документ";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОтгрузок = Результат[2].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаОтгрузок, "НомерСтроки");
	ТаблицаОтгрузок.Индексы.Добавить("НомерСтроки");
	
	ТаблицаДоходов = Результат[3].Выгрузить();
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицаДоходов, "НомерСтроки");
	ТаблицаДоходов.Индексы.Добавить("НомерСтроки");
	
	ТаблицаОтгрузок.Индексы.Добавить("ВидМПЗ, Номенклатура, Партия");
	ОтборОтгрузок = Новый Структура("ВидМПЗ, Номенклатура, Партия");
	
	ТаблицаДоходов.Индексы.Добавить("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	ОтборДоходов = Новый Структура("НоменклатурнаяГруппа, ХарактерДеятельности, ВидМПЗ, Номенклатура, Партия");
	
	Для каждого Партия Из ВозвращенныеПартии Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборОтгрузок, Партия);
		
		НайденныеОтгрузки = ТаблицаОтгрузок.Скопировать(ОтборОтгрузок);
		НайденныеОтгрузки.Сортировать("ДатаДокументаОплаты, ДокументОплаты, ДатаПартии, Партия", Новый СравнениеЗначений);
		
		Для Каждого Отгрузка Из НайденныеОтгрузки Цикл
			
			Если Отгрузка.КоличествоПриход = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоНеоплачено = Макс(Отгрузка.КоличествоПриход - Отгрузка.КоличествоРасход, 0);
			
			// Сторно отгрузки
			
			Если Партия.Количество >= Отгрузка.КоличествоПриход Тогда
				КоличествоОтгружено     = Отгрузка.КоличествоПриход;
				СуммаОтгружено          = Отгрузка.СуммаПриход;
				НДСОтгружено            = Отгрузка.НДСПриход;
				ВыручкаОтгружено        = Отгрузка.ВыручкаПриход;
				НДСНачисленныйОтгружено = Отгрузка.НДСНачисленныйПриход;
			Иначе
				Коэффициент = Партия.Количество / Отгрузка.КоличествоПриход;
				КоличествоОтгружено     = Партия.Количество;
				СуммаОтгружено          = Окр(Отгрузка.СуммаПриход * Коэффициент, 2, 1);
				НДСОтгружено            = Окр((Отгрузка.СуммаПриход + Отгрузка.НДСПриход) * Коэффициент, 2, 1) - СуммаОтгружено;
				ВыручкаОтгружено        = Окр(Отгрузка.ВыручкаПриход * Коэффициент, 2, 1);
				НДСНачисленныйОтгружено = ВыручкаОтгружено - Окр((Отгрузка.ВыручкаПриход - Отгрузка.НДСНачисленныйПриход) *Коэффициент, 2, 1);
			КонецЕсли;
			
			НоваяСтрока = СписокМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отгрузка);
			НоваяСтрока.Количество = КоличествоОтгружено;
			НоваяСтрока.Сумма      = СуммаОтгружено;
			НоваяСтрока.НДС        = НДСОтгружено;
			
			НоваяСтрока = СписокМПЗОтгруженные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Отгрузка);
			НоваяСтрока.ВидДвижения    = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Количество     = КоличествоОтгружено;
			НоваяСтрока.Сумма          = СуммаОтгружено;
			НоваяСтрока.НДС            = НДСОтгружено;
			НоваяСтрока.Выручка        = ВыручкаОтгружено;
			НоваяСтрока.НДСНачисленный = НДСНачисленныйОтгружено;
			
			Отгрузка.КоличествоПриход     = Отгрузка.КоличествоПриход - КоличествоОтгружено;
			Отгрузка.СуммаПриход          = Отгрузка.СуммаПриход - СуммаОтгружено;
			Отгрузка.НДСПриход            = Отгрузка.НДСПриход - НДСОтгружено;
			Отгрузка.ВыручкаПриход        = Отгрузка.ВыручкаПриход - ВыручкаОтгружено;
			Отгрузка.НДСНачисленныйПриход = Отгрузка.НДСНачисленныйПриход - НДСНачисленныйОтгружено;
			
			Партия.Количество     = Партия.Количество - КоличествоОтгружено;
			Партия.Выручка        = Партия.Выручка - ВыручкаОтгружено;
			Партия.НДСНачисленный = Партия.НДСНачисленный - НДСНачисленныйОтгружено;
			
			// В первую очередь возвращаем неоплаченную часть отгруженного товара
			ВозвращеноОплаченного = Макс(КоличествоОтгружено - КоличествоНеоплачено, 0);
			
			Если ВозвращеноОплаченного > 0 Тогда
				
				// Сторно оплаты
				
				Если ВозвращеноОплаченного >= Отгрузка.КоличествоРасход Тогда
					КоличествоОплачено     = Отгрузка.КоличествоРасход;
					СуммаОплачено          = Отгрузка.СуммаРасход;
					НДСОплачено            = Отгрузка.НДСРасход;
					ВыручкаОплачено        = Отгрузка.ВыручкаРасход;
					НДСНачисленныйОплачено = Отгрузка.НДСНачисленныйРасход;
				Иначе
					Коэффициент = ВозвращеноОплаченного / Отгрузка.КоличествоРасход;
					КоличествоОплачено     = ВозвращеноОплаченного;
					СуммаОплачено          = Окр(Отгрузка.СуммаРасход * Коэффициент, 2, 1);
					НДСОплачено            = Окр((Отгрузка.СуммаРасход + Отгрузка.НДСРасход) * Коэффициент, 2, 1) - СуммаОплачено;
					ВыручкаОплачено        = Окр(Отгрузка.ВыручкаРасход * Коэффициент, 2, 1);
					НДСНачисленныйОплачено = ВыручкаОплачено - Окр((Отгрузка.ВыручкаРасход - Отгрузка.НДСНачисленныйРасход) *Коэффициент, 2, 1);
				КонецЕсли;
				
				КоличествоОтгруженоОплаченоПоставщику = ?(ЗначениеЗаполнено(Отгрузка.ДокументОплаты), КоличествоОплачено, 0);
				
				НоваяСтрока = СписокМПЗОтгруженные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отгрузка);
				НоваяСтрока.ВидДвижения    = ВидДвиженияНакопления.Расход;
				НоваяСтрока.Количество     = КоличествоОплачено;
				НоваяСтрока.Сумма          = СуммаОплачено;
				НоваяСтрока.НДС            = НДСОплачено;
				НоваяСтрока.Выручка        = ВыручкаОплачено;
				НоваяСтрока.НДСНачисленный = НДСНачисленныйОплачено;
				
				Отгрузка.КоличествоРасход     = Отгрузка.КоличествоРасход - КоличествоОплачено;
				Отгрузка.СуммаРасход          = Отгрузка.СуммаРасход - СуммаОплачено;
				Отгрузка.НДСРасход            = Отгрузка.НДСРасход - НДСОплачено;
				Отгрузка.ВыручкаРасход        = Отгрузка.ВыручкаРасход - ВыручкаОплачено;
				Отгрузка.НДСНачисленныйРасход = Отгрузка.НДСНачисленныйРасход - НДСНачисленныйОплачено;
				
				ЗаполнитьЗначенияСвойств(ОтборДоходов, Отгрузка);
				НайденныеДоходы = ТаблицаДоходов.Скопировать(ОтборДоходов);
				НайденныеДоходы.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
				
				Для Каждого Доход Из НайденныеДоходы Цикл
					
					Если Доход.КоличествоОборот <> 0 Тогда
						
						Если КоличествоОплачено >= Доход.КоличествоОборот Тогда
							Количество     = Доход.КоличествоОборот;
							Выручка        = Доход.ВыручкаОборот;
							НДСНачисленный = Доход.НДСНачисленныйОборот;
						Иначе
							Коэффициент = КоличествоОплачено / Доход.КоличествоОборот;
							Количество     = КоличествоОплачено;
							Выручка        = Окр(Доход.ВыручкаОборот * Коэффициент, 2, 1);
							НДСНачисленный = Выручка - Окр((Доход.ВыручкаОборот - Доход.НДСНачисленныйОборот) * Коэффициент, 2, 1);
						КонецЕсли;
						
					Иначе
						Количество     = 0;
						Выручка        = 0;
						НДСНачисленный = 0
					КонецЕсли;
					
					Если Доход.КоличествоОплаченоПоставщикуОборот <> 0 Тогда
						
						Если КоличествоОтгруженоОплаченоПоставщику >= Доход.КоличествоОплаченоПоставщикуОборот Тогда
							КоличествоОплаченоПоставщику = Доход.КоличествоОплаченоПоставщикуОборот;
							Сумма = Доход.СуммаОборот;
							НДС   = Доход.НДСОборот;
						Иначе
							Коэффициент = КоличествоОтгруженоОплаченоПоставщику / Доход.КоличествоОплаченоПоставщикуОборот;
							КоличествоОплаченоПоставщику  = КоличествоОтгруженоОплаченоПоставщику;
							СуммаСНДС = Окр((Доход.СуммаОборот + Доход.НДСОборот) * Коэффициент, 2, 1);
							Сумма     = Окр(Доход.СуммаОборот * Коэффициент, 2, 1);
							НДС       = СуммаСНДС - Сумма;
						КонецЕсли;
						
					Иначе
						Сумма = 0;
						НДС   = 0;
						КоличествоОплаченоПоставщику = 0;
					КонецЕсли;
					
					НоваяСтрока = СписокДоходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Доход);
					НоваяСтрока.Количество     = Количество;
					НоваяСтрока.Выручка        = Выручка;
					НоваяСтрока.НДСНачисленный = НДСНачисленный;
					НоваяСтрока.Сумма          = Сумма;
					НоваяСтрока.НДС            = НДС;
					НоваяСтрока.КоличествоОплаченоПоставщику = КоличествоОплаченоПоставщику;
					
					Доход.КоличествоОборот     = Доход.КоличествоОборот - Количество;
					Доход.ВыручкаОборот        = Доход.ВыручкаОборот - Выручка;
					Доход.НДСНачисленныйОборот = Доход.НДСНачисленныйОборот - НДСНачисленный;
					Доход.СуммаОборот          = Доход.СуммаОборот - Сумма;
					Доход.НДСОборот            = Доход.НДСОборот - НДС;
					Доход.КоличествоОплаченоПоставщикуОборот =
						Доход.КоличествоОплаченоПоставщикуОборот - КоличествоОплаченоПоставщику;
					
					ЗаполнитьЗначенияСвойств(ТаблицаДоходов.Найти(Доход.НомерСтроки, "НомерСтроки"), Доход);
					
					КоличествоОплачено     = КоличествоОплачено - Количество;
					СуммаОплачено          = СуммаОплачено - Сумма;
					НДСОплачено            = НДСОплачено - НДС;
					ВыручкаОплачено        = ВыручкаОплачено - Выручка;
					НДСНачисленныйОплачено = НДСНачисленныйОплачено - НДСНачисленный;
					
					КоличествоОтгруженоОплаченоПоставщику = КоличествоОтгруженоОплаченоПоставщику - КоличествоОплаченоПоставщику;
					
					Если КоличествоОплачено = 0 И КоличествоОтгруженоОплаченоПоставщику = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОтгрузок.Найти(Отгрузка.НомерСтроки, "НомерСтроки"), Отгрузка);
			
			Если Партия.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Партия.Количество <> 0 Тогда
			// Возвраты, по которым не удалось сторнировать записи регистров, образуют новую партию
			НоваяСтрока = СписокМПЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Партия);
			НоваяСтрока.Количество = Партия.Количество;
			НоваяСтрока.Сумма      = Партия.Выручка - Партия.НДСНачисленный;
			НоваяСтрока.НДС        = Партия.НДСНачисленный;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТаблиц.СписокМПЗ            = СписокМПЗ;
	СтруктураТаблиц.СписокМПЗОтгруженные = СписокМПЗОтгруженные;
	СтруктураТаблиц.СписокДоходов        = СписокДоходов;
	
КонецПроцедуры

Функция ПолучитьТаблицуРасходовПоАмортизации(ТаблицаЗатрат, УчетнаяПолитикаНУ) Экспорт
	
	ПрочиеРасходы = ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗатрат", ТаблицаЗатрат);
	
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	ТаблицаЗатрат.ОбъектУчета,
	|	ТаблицаЗатрат.РасчетныйДокумент,
	|	ТаблицаЗатрат.ДокументОплаты,
	|	ТаблицаЗатрат.СуммаБУ,
	|	ТаблицаЗатрат.СчетЗатрат,
	|	ТаблицаЗатрат.Субконто1,
	|	ТаблицаЗатрат.Субконто2,
	|	ТаблицаЗатрат.Субконто3
	|ПОМЕСТИТЬ ВТТаблицаЗатрат
	|ИЗ
	|	&ТаблицаЗатрат КАК ТаблицаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗатрат.ОбъектУчета КАК ОбъектУчета,
	|	ТаблицаЗатрат.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ТаблицаЗатрат.ДокументОплаты КАК ДокументОплаты,
	|	ТаблицаЗатрат.СуммаБУ КАК Сумма,
	|	ТаблицаЗатрат.СчетЗатрат КАК СчетЗатрат,
	|	ВЫБОР
	|		КОГДА ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА ТаблицаЗатрат.Субконто1
	|		КОГДА ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА ТаблицаЗатрат.Субконто2
	|		КОГДА ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.НоменклатурныеГруппы
	|			ТОГДА ТаблицаЗатрат.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ТаблицаЗатрат.Субконто1
	|		КОГДА ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ТаблицаЗатрат.Субконто2
	|		КОГДА ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|				ИЛИ ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|				ИЛИ ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ТаблицаЗатрат.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто1 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто2 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		КОГДА ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто3 КАК Справочник.СтатьиЗатрат).ВидРасходовНУ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		КОГДА ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКналоговомуУчету
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятиеКналоговомуУчету,
	|	ВЫБОР
	|		КОГДА ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТаблицаЗатрат.Субконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТаблицаЗатрат.Субконто2 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто2 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА ТаблицаЗатрат.Субконто3 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаЗатрат.Субконто3 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ИЗ
	|	ВТТаблицаЗатрат КАК ТаблицаЗатрат";
	
	СтруктураПараметров = Новый Структура(
		"НоменклатурнаяГруппа, ВидМПЗ, СчетУчета, ВидОперации, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.СтатьяЗатрат = Выборка.ОбъектУчета;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		СтруктураПараметров.ВидМПЗ      = Перечисления.ВидыМПЗ.ПрочиеРасходы;
		СтруктураПараметров.ВидОперации = "Амортизация";
		СтруктураПараметров.СчетУчета   = Выборка.СчетЗатрат;
		
		НоваяСтрока.НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		НоваяСтрока.ХарактерДеятельности = ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат ПрочиеРасходы;
	
КонецФункции

// Функция дополняет таблицу реквизитами статей затрат
//
Функция ДополнитьТаблицуРекизитамиСтатейЗатрат(Знач ИсходнаяТаблица)
	
	ИсходнаяТаблица.Колонки.Добавить("ПринятиеКналоговомуУчету", Новый ОписаниеТипов("Булево"));
	ИсходнаяТаблица.Колонки.Добавить("ВидРасходовНУ",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ИсходнаяТаблица.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	
	Если ИсходнаяТаблица.Количество() = 0 Тогда
		Возврат ИсходнаяТаблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСтатейЗатрат", ОбщегоНазначения.ВыгрузитьКолонку(ИсходнаяТаблица, "СтатьяЗатрат", Истина));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
	|	ИСТИНА КАК ПринятиеКналоговомуУчету,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.Ссылка В (&СписокСтатейЗатрат)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка,
	|	ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету,
	|	НЕОПРЕДЕЛЕНО,
	|	ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.Ссылка В (&СписокСтатейЗатрат)";
	
	ТаблицаСтатейЗатрат = Запрос.Выполнить().Выгрузить();
	ТаблицаСтатейЗатрат.Индексы.Добавить("СтатьяЗатрат");
	
	Для Каждого СтрокаИсходнойТаблицы Из ИсходнаяТаблица Цикл
		
		НайденнаяСтрока = ТаблицаСтатейЗатрат.Найти(СтрокаИсходнойТаблицы.СтатьяЗатрат, "СтатьяЗатрат");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаИсходнойТаблицы, НайденнаяСтрока, "ПринятиеКналоговомуУчету, ВидРасходовНУ, ВидДеятельностиДляНалоговогоУчетаЗатрат");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсходнаяТаблица;
	
КонецФункции

Функция ПолучитьСтатьюЗатрат(СтруктураПараметров)
	
	СтатьяЗатрат = СтруктураПараметров.СтатьяЗатрат;
	
	СчетУчета = СтруктураПараметров.СчетУчета;
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат СтатьяЗатрат;
	КонецЕсли;
	
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендныеОбязательства) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ) Тогда
		
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ПредопределенныйЭлемент("ПрочиеЗатраты");
		
	КонецЕсли;
	
	Возврат СтатьяЗатрат;
	
КонецФункции

Функция УчетнаяПолитикаНалоговогоУчета(Организация, Период) Экспорт
	
	УчетнаяПолитикаНУ = Новый Структура;
	УчетнаяПолитикаНУ.Вставить("ВестиУчетПоВидамДеятельностиИП", УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Период));
	УчетнаяПолитикаНУ.Вставить("ОсновнойХарактерДеятельности",   УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Период));
	УчетнаяПолитикаНУ.Вставить("ОсновнаяНоменклатурнаяГруппа",   УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Организация, Период));
	УчетнаяПолитикаНУ.Вставить("ПлательщикЕНВД",                 УчетнаяПолитика.ПлательщикЕНВД(Организация, Период));
	УчетнаяПолитикаНУ.Вставить("ПрименяетсяУСНПатент",           УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период));
	
	Возврат УчетнаяПолитикаНУ;
	
КонецФункции

Функция ПодготовитьТаблицуВключенияСтоимостиНМАВСоставРасходовИП(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМПЗ)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовНУ <> 
		Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВключенияСтоимостиНМАВСоставРасходовИП(ТаблицаМПЗ, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	СписокМПЗ = Параметры.СписокМПЗ;
	
	УчетнаяПолитикаНУ = УчетнаяПолитикаНалоговогоУчета(Реквизиты.Организация, Реквизиты.Период);
	
	СписокМПЗ.Колонки.СчетЗатрат.Имя = "СчетУчета";
	
	СписокРасходов = СписокМПЗ.СкопироватьКолонки();
	
	СписокРасходов.Колонки.Добавить("НоменклатурнаяГруппа",		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	СписокРасходов.Колонки.Добавить("ХарактерДеятельности",		Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерДеятельности"));
	СписокРасходов.Колонки.Добавить("РасчетныйДокумент",			Документы.ТипВсеСсылки());
	СписокРасходов.Колонки.Добавить("ДокументОплаты",			Документы.ТипВсеСсылки());
	СписокРасходов.Колонки.Добавить("Сумма",						ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СтруктураПараметров = Новый Структура("СчетУчета, СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат");
	
	Для каждого МПЗ Из СписокМПЗ Цикл
		
		Если НЕ МПЗ.ПринятиеКналоговомуУчету Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, МПЗ);
		
		НовыйРасход = СписокРасходов.Добавить();
		
		НовыйРасход.НоменклатурнаяГруппа	= ПолучитьНоменклатурнуюГруппу(УчетнаяПолитикаНУ, СтруктураПараметров);
		НовыйРасход.ХарактерДеятельности	= ПолучитьХарактерДеятельности(УчетнаяПолитикаНУ, СтруктураПараметров);
		НовыйРасход.СтатьяЗатрат			= МПЗ.СтатьяЗатрат;
		НовыйРасход.РасчетныйДокумент		= Реквизиты.Регистратор;
		НовыйРасход.ДокументОплаты			= Реквизиты.Регистратор;
		НовыйРасход.Сумма					= МПЗ.ПервоначальнаяСтоимостьНУ;
	
	КонецЦикла;
	
	Возврат СписокРасходов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыВключенияСтоимостиНМАВСоставРасходовИП(ТаблицаМПЗ, ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "ПервоначальнаяСтоимостьНУ,"					// <Число,15,2> - стоимость актива в рублях
		+ "СчетЗатрат,"									// <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат
		+ "СтатьяЗатрат,"								// <СправочникСсылка.ПрочиеДоходыИРасходы>
		+ "ПринятиеКналоговомуУчету,"					// <Булево>
		+ "ВидДеятельностиДляНалоговогоУчетаЗатрат";	// <ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат>

		
	Параметры.Вставить("СписокМПЗ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаМПЗ, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"											// <Дата> - период движений - дата документа
		+ "Организация,"									// <СправочникСсылка.Организации> - организация
		+ "Регистратор,"									// <ДокументСсылка.*> - документ-регистратор движений
		+ "ПорядокВключенияСтоимостиВСоставРасходовНУ,";	// <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияВключенияСтоимостиНМАВСоставРасходовИП(ТаблицаРасходов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРасходов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВключенияСтоимостиНМАВСоставРасходовИП(ТаблицаРасходов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаРасходов = Параметры.ТаблицаРасходов;
	
	Для Каждого Расход Из ТаблицаРасходов Цикл
		
		Движение = Движения.ИППрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Расход);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
	КонецЦикла;
	
	Движения.ИППрочиеРасходы.Записывать	= Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВключенияСтоимостиНМАВСоставРасходовИП(ТаблицаРасходов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СписокМПЗ
	
	СписокОбязательныхКолонок = ""
		+ "НоменклатурнаяГруппа,"		// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа
		+ "ХарактерДеятельности,"		// <ПеречислениеСсылка.ХарактерыДеятельности> - характер деятельности
		+ "СтатьяЗатрат,"				// <ПеречислениеСсылка.ВидыМПЗ> - вид МПЗ
		+ "РасчетныйДокумент,"			// <ДокументСсылка.*> - расчетный документ
		+ "ДокументОплаты,"				// <ДокументСсылка.*> - документ оплаты
		+ "Сумма";						// <Строка> - реквизиты документа оплаты
		
	Параметры.Вставить("ТаблицаРасходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Регистратор,"				// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область НалоговыйПериод

// Определяет границы ближайшего налогового периода с учетом даты регистрации организации (требований ст. 55 НК РФ).
//
// Параметры:
//  Организация                              - СправочникСсылка.Организации - организация, для которой определяются
//                                             границы ближайшего налогового периода;
//  Период                                   - Дата - дата в периоде, границы которого определяются;
//
// Возвращаемое значение:
//  Структура - границы периода
//    * Период - Дата - стандартное начало налогового периода (например, 01 июля для третьего квартала);
//    * Начало - Дата - фактическое начало налогового периода (может совпадать со стандартным началом или
//               датой регистрации организации;
//    * Конец  - Дата - дата с указанием времени.
//
Функция НалоговыйПериод(Организация, Период) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
	
КонецФункции

// Определяет, что требуется ли сдавать отчетность и уплачивать налог за переданный период (год)
// по причине регистрации организации в декабре этого года (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - проверяемая организация
//  Период          - Дата - проверяемый период
//  ДатаРегистрации - Дата - Дата регистрации 
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это пропущенный период
//              (организация зарегистрирована в декабре переданного года, и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодПропущен(Организация, Период, ДатаРегистрации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НалоговыйПериодПропущен = ИнтерфейсыВзаимодействияБРО.НалоговыйПериодПропущен(
		Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		ДатаРегистрации);
	
	Возврат НалоговыйПериодПропущен;
	
КонецФункции

#КонецОбласти
