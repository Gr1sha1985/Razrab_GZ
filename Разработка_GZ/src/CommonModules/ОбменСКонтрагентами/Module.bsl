
//////////////////////////////////////////////////////////////////////////////////
//// ОбменСКонтрагентами: механизм обмена электронными документами.
////
//////////////////////////////////////////////////////////////////////////////////

//#Область ПрограммныйИнтерфейс

//#Область ОбработкаЭлектронныхДокументов

//// Получает представление (текст либо структура) состояний электронных документов по владельцам.
////
//// Параметры:
////  МассивСсылокНаВладельцев - Массив - Массив ссылок на владельцев электронных документов, данные которых необходимо получить.
////  ПомещатьВСтруктуру - Булево - если истина, то представления состояний электронных документов
////                      (СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника),
////                      будут помещены в структуру, для возможности последующего разбора на клиенте.
////
//// Возвращаемое значение:
////  Соответствие - соответствие ссылок на документы ИБ состояниям ЭД. Ключ - ссылка на документ ИБ,
////                Значение - текст (состояние ЭД), либо структура - в зависимости от параметра ПомещатьВСтруктуру.
////
//Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев, ПомещатьВСтруктуру = Ложь) Экспорт
//		
//	ТаблицаДанных = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
//	Соответствие = Новый Соответствие;
//	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
//		
//		Если ПомещатьВСтруктуру Тогда
//			СостояниеВерсииЭД = Новый Структура("СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника");
//			ЗаполнитьЗначенияСвойств(СостояниеВерсииЭД, ТекСтрока);
//		Иначе
//			СостояниеВерсииЭД = Строка(ТекСтрока.СостояниеВерсииЭД);
//		КонецЕсли;
//		Соответствие.Вставить(ТекСтрока.ВладелецЭД, СостояниеВерсииЭД);
//	КонецЦикла;
//	
//	Возврат Соответствие;
//	
//КонецФункции

//// Получает дату выставления счет-фактуры в электронном виде.
////
//// Параметры:
////  СчетФактура - ДокументСсылка - ссылка на счет-фактуру исходящую в прикладном решении.
//// 
//// Возвращаемое значение:
////  Дата - дата выставления электронной счет-фактуры.
////
//Функция ДатаВыставленияСчетФактуры(СчетФактура) Экспорт
//	
//	ДатаВыставления = Неопределено;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|ГДЕ
//	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
//	Запрос.УстановитьПараметр("СсылкаНаОбъект", СчетФактура);
//	
//	Результат = Запрос.Выполнить().Выбрать();
//	Результат.Следующий();
//	
//	Если ЗначениеЗаполнено(Результат.ЭлектронныйДокумент) Тогда
//		
//		Если ТипЗнч(Результат.ЭлектронныйДокумент) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
//			Запрос = Новый Запрос;
//			Запрос.Текст =
//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ЭДПрисоединенныеФайлы.ВладелецФайла.ДатаДокументаОтправителя КАК ВладелецФайлаДатаДокументаОтправителя
//			|ИЗ
//			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//			|ГДЕ
//			|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
//			|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПДПЭСФ)";
//			Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Результат.ЭлектронныйДокумент);
//			
//			Результат = Запрос.Выполнить().Выбрать();
//			Результат.Следующий();
//			ДатаВыставления = Результат.ДатаДокументаОтправителя;
//		Иначе
//			ДатаВыставления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ЭлектронныйДокумент, "ДатаДокументаОтправителя", Истина);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат ДатаВыставления
//	
//КонецФункции

//// Определяет, существует ли актуальный электронный документ Счет-фактура для переданного владельца.
////
//// Параметры:
////  СсылкаНаВладельца - ДокументСсылка,- владелец электронного документа.
////
//// Возвращаемое значение:
////  Булево - Истина - существует актуальный электронный документ, в противном случае Ложь.
////
//Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
//	
//	Возврат ОбменСКонтрагентамиСлужебный.ЕстьРабочийЭСФ(СсылкаНаВладельца);
//	
//КонецФункции

//// Возвращает текст запроса для электронных документов на подписи.
//// Варианты - для рабочего места документов на подпись, или для показателя на рабочем столе (УТ 11).
////
//// Параметры:
////  Запрос - Запрос - объект запроса, который нужно инициализировать.
////  ДляРабочегоСтола - Булево - признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11).
////  СтруктураДопОтборов - Структура - дополнительные отборы. 
////
//// Возвращаемое значение:
////  Строка - текст запроса.
////
//Процедура ИнициализироватьЗапросЭлектронныхДокументовНаПодписи(Запрос, ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

//	// Запрос придется выполнять в несколько этапов, поскольку есть таблицы, к которым нужно обращаться
//	// в привилегированном режиме.
//	
//	// Этап 1. Определим список документов на подписи.
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	Запрос.УстановитьПараметр("ПустаяОрганизация", Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
//	Запрос.УстановитьПараметр("ИспользоватьИнтеркампани", ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДМеждуОрганизациями"));
//	Запрос.УстановитьПараметр("ИспользоватьВнутренниеДокументы", ПолучитьФункциональнуюОпцию("ИспользоватьВнутренниеДокументыЭДО"));
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ЭлектронныйДокументВходящий.ВидЭД КАК ВидЭД,
//	|	ЭлектронныйДокументВходящий.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
//	|	ЭлектронныйДокументВходящий.ТипДокумента КАК ТипДокумента,
//	|	ЭлектронныйДокументВходящий.СуммаДокумента КАК СуммаДокумента,
//	|	ЭлектронныйДокументВходящий.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
//	|	ЭлектронныйДокументВходящий.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
//	|	ЭлектронныйДокументВходящий.Организация КАК Организация,
//	|	ЭлектронныйДокументВходящий.Контрагент КАК Контрагент,
//	|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка,
//	|	ЭлектронныйДокументВходящий.НомерВерсииЭД КАК НомерВерсииЭД,
//	|	ЭлектронныйДокументВходящий.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
//	|	ЭлектронныйДокументВходящий.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
//	|	ЭлектронныйДокументВходящий.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	|	ЭлектронныйДокументВходящий.СпособОбменаЭД КАК СпособОбменаЭД,
//	|	ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументовЭДО.ПустаяСсылка) КАК ВидВнутреннегоДокумента,
//	|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи
//	|ПОМЕСТИТЬ втДокументыНаПодписи
//	|ИЗ
//	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
//	|ГДЕ
//	|	ЭлектронныйДокументВходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
//	|	И НЕ ЭлектронныйДокументВходящий.ПометкаУдаления
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЭлектронныйДокументИсходящий.ВидЭД,
//	|	ЭлектронныйДокументИсходящий.ПрикладнойВидЭД,
//	|	ЭлектронныйДокументИсходящий.ТипДокумента,
//	|	ЭлектронныйДокументИсходящий.СуммаДокумента,
//	|	ЭлектронныйДокументИсходящий.НомерДокументаОтправителя,
//	|	ЭлектронныйДокументИсходящий.ДатаДокументаОтправителя,
//	|	ЭлектронныйДокументИсходящий.Организация,
//	|	ЭлектронныйДокументИсходящий.Контрагент,
//	|	ЭлектронныйДокументИсходящий.Ссылка,
//	|	ЭлектронныйДокументИсходящий.НомерВерсииЭД,
//	|	ЭлектронныйДокументИсходящий.ИдентификаторКонтрагента,
//	|	ЭлектронныйДокументИсходящий.ИдентификаторОрганизации,
//	|	ЭлектронныйДокументИсходящий.ДоговорКонтрагента,
//	|	ЭлектронныйДокументИсходящий.СпособОбменаЭД,
//	|	ЭлектронныйДокументИсходящий.ВидВнутреннегоДокумента,
//	|	ЭлектронныйДокументИсходящий.ВидПодписи
//	|ИЗ
//	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
//	|ГДЕ
//	|	ЭлектронныйДокументИсходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
//	|	И НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	втДокументыНаПодписи.ВидЭД КАК ВидЭД,
//	|	втДокументыНаПодписи.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
//	|	втДокументыНаПодписи.ВидВнутреннегоДокумента КАК ВидВнутреннегоДокумента,
//	|	втДокументыНаПодписи.ТипДокумента КАК ТипДокумента,
//	|	втДокументыНаПодписи.СуммаДокумента КАК СуммаДокумента,
//	|	втДокументыНаПодписи.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
//	|	втДокументыНаПодписи.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
//	|	втДокументыНаПодписи.Организация КАК Организация,
//	|	втДокументыНаПодписи.Контрагент КАК Контрагент,
//	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
//	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
//	|	втДокументыНаПодписи.НомерВерсииЭД КАК Версия,
//	|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
//	|	ЭДПрисоединенныеФайлы.Изменил КАК Изменил,
//	|	ЭДПрисоединенныеФайлы.ПодписанЭП КАК ПодписанЭП,
//	|	втДокументыНаПодписи.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
//	|	втДокументыНаПодписи.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
//	|	втДокументыНаПодписи.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	|	втДокументыНаПодписи.СпособОбменаЭД КАК СпособОбменаЭД
//	|ПОМЕСТИТЬ ЭДНаПодпись
//	|ИЗ
//	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыНаПодписи КАК втДокументыНаПодписи
//	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = втДокументыНаПодписи.Ссылка
//	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.АктЗаказчик), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД)))
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
//	|		ПО (НастройкиОтправкиЭлектронныхДокументов.Отправитель = втДокументыНаПодписи.Организация)
//	|			И (НастройкиОтправкиЭлектронныхДокументов.Получатель = втДокументыНаПодписи.Контрагент)
//	|			И (НастройкиОтправкиЭлектронныхДокументов.Договор = втДокументыНаПодписи.ДоговорКонтрагента)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
//	|		ПО втДокументыНаПодписи.ИдентификаторКонтрагента = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
//	|			И втДокументыНаПодписи.ИдентификаторОрганизации = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
//	|ГДЕ
//	|	втДокументыНаПодписи.ВидПодписи <> ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.Простая)
//	|	И ((НЕ НастройкиОтправкиЭлектронныхДокументов.Отправитель ЕСТЬ NULL
//	|			И НЕ ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации ЕСТЬ NULL)
//	|		ИЛИ &ИспользоватьИнтеркампани
//	|			И ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
//	|		ИЛИ &ИспользоватьВнутренниеДокументы
//	|			И ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Внутренний))
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	втДокументыНаПодписи.Организация,
//	|	втДокументыНаПодписи.ВидЭД";
//	Запрос.Выполнить();
//	
//	// Этап 2. Считаем таблицу уже установленных электронных подписей по нужным документам.
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЭД_ЭП.ПодписанныйОбъект,
//	|	ЭД_ЭП.Отпечаток
//	|ПОМЕСТИТЬ УстановленныеЭП
//	|ИЗ
//	|	ЭДНаПодпись КАК ЭДНаПодпись
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭД_ЭП
//	|		ПО ЭДНаПодпись.ЭД = ЭД_ЭП.ПодписанныйОбъект";
//	УстановитьПривилегированныйРежим(Истина);
//	Запрос.Выполнить();
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	// Этап 3. Подготовим финальный запрос, используя уже собранные временные таблицы
//	ТекстЗапроса =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	ЕСТЬNULL(СертификатыУчетныхЗаписейЭДО.Сертификат, ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)) КАК Сертификат,
//	|	ЭДНаПодпись.ЭД КАК ЭД,
//	|	ЭДНаПодпись.ВидЭД КАК ВидЭД
//	|ПОМЕСТИТЬ СертификатыПодписиДляЭД
//	|ИЗ
//	|	ЭДНаПодпись КАК ЭДНаПодпись
//	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
//	|		ПО ЭДНаПодпись.ИдентификаторОрганизации = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	Сертификаты.Ссылка,
//	|	ЭДНаПодпись.ЭД,
//	|	ВЫБОР
//	|		КОГДА ЭДНаПодпись.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Внутренний)
//	|			ТОГДА ЭДНаПодпись.ВидВнутреннегоДокумента
//	|		ИНАЧЕ ЭДНаПодпись.ВидЭД
//	|	КОНЕЦ
//	|ИЗ
//	|	ЭДНаПодпись КАК ЭДНаПодпись
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
//	|		ПО (ЭДНаПодпись.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Внутренний))
//	|		И Сертификаты.Организация = ЭДНаПодпись.Организация
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	СертификатыПодписиДляЭД.Сертификат КАК Сертификат,
//	|	СертификатыПодписиДляЭД.ЭД КАК ЭД
//	|ПОМЕСТИТЬ ВТ_СертификатыИзНастроекИПрофилей
//	|ИЗ
//	|	СертификатыПодписиДляЭД КАК СертификатыПодписиДляЭД
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
//	|		ПО СертификатыПодписиДляЭД.Сертификат = СертификатыЭП.Ссылка
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
//	|		ПО (СертификатыЭП.Ссылка = ПодписываемыеВидыЭД.СертификатЭП)
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
//	|		ПО СертификатыПодписиДляЭД.ЭД = СостояниеПодписанияЭД.Объект
//	|			И (СостояниеПодписанияЭД.Текущий)
//	|			И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)))
//	|			И (СостояниеПодписанияЭД.Сертификат = СертификатыПодписиДляЭД.Сертификат
//	|				ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка))
//	|			И (СостояниеПодписанияЭД.Организация = СертификатыЭП.Организация
//	|				ИЛИ СостояниеПодписанияЭД.Организация = &ПустаяОрганизация)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ УстановленныеЭП КАК ЭД_ЭП
//	|		ПО СертификатыПодписиДляЭД.ЭД = ЭД_ЭП.ПодписанныйОбъект
//	|			И (ЭД_ЭП.Отпечаток = СертификатыЭП.Отпечаток)
//	|ГДЕ
//	|	СертификатыЭП.Пользователь В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
//	|	И НЕ СертификатыЭП.Отозван
//	|	И НЕ СертификатыЭП.ПометкаУдаления
//	|	И ПодписываемыеВидыЭД.Использовать
//	|	И ПодписываемыеВидыЭД.ВидЭД = СертификатыПодписиДляЭД.ВидЭД
//	|	И ЭД_ЭП.Отпечаток ЕСТЬ NULL
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	&ПоляВыбора
//	|ИЗ
//	|	ЭДНаПодпись КАК ЭДНаПодпись
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СертификатыИзНастроекИПрофилей КАК СертификатыЭП
//	|		ПО ЭДНаПодпись.ЭД = СертификатыЭП.ЭД";
//	Если ДляРабочегоСтола Тогда
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбора", "
//			|	СертификатыЭП.Сертификат.Отпечаток КАК Отпечаток,
//			|	СертификатыЭП.Сертификат.Представление КАК Сертификат,
//			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыЭП.Сертификат) КАК ЗначениеПоказателя
//			|");
//		
//		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
//			И СтруктураДопОтборов.Количество() > 0 И СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
//			ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
//		КонецЕсли;
//		ТекстЗапроса = ТекстЗапроса + "
//			|СГРУППИРОВАТЬ ПО
//			|	СертификатыЭП.Сертификат.Отпечаток,
//			|	СертификатыЭП.Сертификат.Представление";
//	Иначе
//		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбора", "
//			|	ЭДНаПодпись.ЭД КАК ЭлектронныйДокумент,
//			|	ЭДНаПодпись.СуммаДокумента,
//			|	ЭДНаПодпись.Версия,
//			|	ЭДНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента,
//			|	ЭДНаПодпись.ВидЭД КАК ВидЭД,
//			|	ВЫБОР
//			|		КОГДА ЭДНаПодпись.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
//			|			ТОГДА ЭДНаПодпись.ТипДокумента
//			|		КОГДА ЭДНаПодпись.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрикладнойЭД)
//			|			ТОГДА ЭДНаПодпись.ПрикладнойВидЭД
//			|		КОГДА ЭДНаПодпись.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Внутренний)
//			|			ТОГДА ЭДНаПодпись.ВидВнутреннегоДокумента
//			|		ИНАЧЕ
//			|			ЭДНаПодпись.ВидЭД
//			|	КОНЕЦ КАК ВидДокумента,
//			|	ЭДНаПодпись.НомерДокументаОтправителя КАК НомерДокумента,
//			|	СертификатыЭП.Сертификат КАК Сертификат
//			|");
//		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
//			И СтруктураДопОтборов.Количество() > 0 Тогда
//			
//			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
//				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Изменил В (&СоставИсполнителей)";
//			КонецЕсли;
//			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
//				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.Контрагент = &Контрагент";
//			КонецЕсли;
//			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
//				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ВидЭД = &ВидЭД";
//			КонецЕсли;
//			Если СтруктураДопОтборов.Свойство("ВидЭДИлиТипЭД") Тогда
//				ТекстЗапроса = ТекстЗапроса + " И (ЭДНаПодпись.ВидЭД = &ВидЭД ИЛИ ЭДНаПодпись.ТипДокумента = &ТипДокумента)";
//			КонецЕсли;
//			Если СтруктураДопОтборов.Свойство("ПрикладнойВидЭД") Тогда
//				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ПрикладнойВидЭД = &ПрикладнойВидЭД";
//			КонецЕсли;
//			Если СтруктураДопОтборов.Свойство("ТипДокумента") Тогда
//				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.ТипДокумента = &ТипДокумента";
//			КонецЕсли;
//			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
//				ТекстЗапроса = ТекстЗапроса + " И ЭДНаПодпись.НаправлениеЭД = &НаправлениеЭД";
//			КонецЕсли;
//		КонецЕсли;
//		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО ДатаДокумента";
//	КонецЕсли;
//	
//	Запрос.Текст = ТекстЗапроса;
//	
//КонецПроцедуры

//// Возвращает упрощенный статус электронного документооборота по документу (учетному или электронному).
////
//// Параметры:
////  Документ - ДокументСсылка - ссылка на объект ИБ или на электронный документ, по которому нужно получить статус.
//// 
//// Возвращаемое значение:
////  Структура - описание статуса электронного документооборота:
////   * Статус - Строка - возможные значения:
////     "ЭДОНеИспользуется"     - переданный в параметре "Документ" объект метаданных, не участвует в ЭДО.
////     "ЭДОНеНастроен"         - между участниками не завершена процедура настройки ЭДО.
////     "НеНачат"               - электронный документ по учетному не обнаружен.
////     "ВОбработке"            - охватывает время жизни исходящего электронного документа от создания до получения от
////                               контрагента решения (утверждения или отклонения).
////     "Получен"               - входящий электронный документ получен.
////     "ОтклонениеВОбработке"  - для входящих: документ отклонен, но уведомление не подписано или не отправлено.
////                               при аннулировании (и исходящих, и входящих): ответ по предложению об аннулированию
////                               еще не получен.
////     "Отклонен"              - документооборот завершен с отклонением.
////     "УтверждениеВОбработке" - входящий электронный документ утвержден, но ответный титул (ответная подпись)
////                               не подписан или не отправлен.
////     "Утвержден"             - документооборот успешно завершен.
////     "Ошибка"                - при проведении ЭДО произошла ошибка.
////   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящий, 
////                           ДокументСсылка.ЭлектронныйДокументВходящий - ссылка на электронный документ. Если в
////                                          параметре "Документ" передан учетный документ, возвращается актуальный
////                                          для него электронный. Если передан электронный - возвращается та же ссылка.
////                           Неопределено - возвращается, если актуальный электронный документ отсутствует.
////
//Функция СтатусДокументооборота(Документ) Экспорт

//	Результат = Новый Структура;
//	Результат.Вставить("Статус",              "НеНачат");
//	Результат.Вставить("ЭлектронныйДокумент", Неопределено);
//	
//	ТекстСообщенияОбОшибкеВоВходящихПараметрах = НСтр("ru = 'Неверный первый параметр ""Документ"": 
//		|- Значение должно быть непустой ссылкой на электронный документ или документ, входящий в состав определяемого типа ""ОснованияЭлектронныхДокументов"".'");
//	
//	Если Не ЗначениеЗаполнено(Документ) Тогда
//		ВызватьИсключение ТекстСообщенияОбОшибкеВоВходящихПараметрах;
//	КонецЕсли;
//	
//	СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
//	Направление = Перечисления.НаправленияЭД.Исходящий;
//	
//	// Определим внутренний статус по классификации подсистемы.
//	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)) Тогда
//		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
//			ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
//			
//			// Передана ссылка на электронный документ.
//			Результат.ЭлектронныйДокумент = Документ;
//			СостояниеВерсииЭлектронногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СостояниеЭДО");
//			Направление = ?(ТипЗнч(Документ) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий"),
//				Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
//		ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументов.Тип.ПривестиЗначение(Документ) = Документ Тогда
//			// Передана ссылка на учетный документ.
//			ДанныеОВладельцах = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеЭДПоВладельцам(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ));
//			Если ДанныеОВладельцах.Количество() Тогда
//				СтрокаДанныхОВладельце = ДанныеОВладельцах[0];
//				
//				СостояниеВерсииЭлектронногоДокумента = СтрокаДанныхОВладельце.СостояниеВерсииЭД;
//				Направление = ?(ТипЗнч(СтрокаДанныхОВладельце.ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий"),
//					Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
//				Результат.ЭлектронныйДокумент = СтрокаДанныхОВладельце.ЭлектронныйДокумент;
//			КонецЕсли;
//		Иначе
//			Результат.Статус = "ЭДОНеИспользуется";
//		КонецЕсли;
//	Иначе 
//		ВызватьИсключение ТекстСообщенияОбОшибкеВоВходящихПараметрах;
//	КонецЕсли;
//	
//	Если Результат.Статус <> "ЭДОНеИспользуется" Тогда
//		// Если не удалось получить статус по документу, это может означать, что обмен не настроен - проверим это.
//		Если Не ЗначениеЗаполнено(СостояниеВерсииЭлектронногоДокумента) Тогда
//			ПараметрыОпределенияНастройки = Новый Структура("ВыводитьСообщения", Ложь);
//			НастройкиОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Документ, ПараметрыОпределенияНастройки);
//			
//			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
//				СостояниеВерсииЭлектронногоДокумента = ?(НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий,
//					Перечисления.СостоянияВерсийЭД.НеСформирован, Перечисления.СостоянияВерсийЭД.НеПолучен);
//				Направление = НастройкиОбмена.НаправлениеЭД;
//			КонецЕсли;
//		КонецЕсли;
//		
//		// Переведем статус в "простую" классификацию.
//		Если СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.Аннулирован
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.Отклонен
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент Тогда
//			
//			Результат.Статус = "Отклонен";
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения Тогда
//			
//			Результат.Статус = "Утвержден";
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.НаПодписи
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору Тогда
//			
//			Результат.Статус = ?(Направление = Перечисления.НаправленияЭД.Входящий, "УтверждениеВОбработке", "ВОбработке");
//			
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю Тогда
//			
//			Результат.Статус = "ВОбработке";
//			
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение Тогда
//			
//			Результат.Статус = ?(Направление = Перечисления.НаправленияЭД.Входящий, "Утвержден", "ВОбработке");
//			
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
//			
//			Результат.Статус = "Получен";
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.НеПолучен
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
//			
//			Результат.Статус = "НеНачат";
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
//			ИЛИ СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать Тогда
//			
//			Результат.Статус = "ОтклонениеВОбработке";
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
//			
//			Результат.Статус = "Ошибка";
//		ИначеЕсли СостояниеВерсииЭлектронногоДокумента = Перечисления.СостоянияВерсийЭД.ПустаяСсылка() Тогда
//			
//			Результат.Статус = "ЭДОНеНастроен";
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Результат;

//КонецФункции

//// В процедуре выполняются действия по служебным ЭД (извещение о получении, уведомление об уточнении):
//// формирование, утверждение, подписание, отправка.
////
//// Параметры:
////  МассивЭД - массив - содержит ссылки на ЭД, по которым требуется сформировать служебные ЭД (электронные
////    документы, владельцы обрабатываемых служебных ЭД).
////  ВидЭД - перечисление - вид ЭД, которые надо обработать (может принимать значения: Извещение о получении
////    и уведомление об уточнении).
////  ТекстУведомления - строка - текст уведомления, введенный пользователем, отклонившим ЭД (имеет смысл,
////    только для ВидЭД = УведомлениеОбУточнении).
////  ДопПараметры - структура - структура дополнительных параметров.
////  ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое после выполнения метода.
////
//Процедура СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД,
//	ВидЭД, ТекстУведомления = "", ДопПараметры = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
//	
//	КолСформированных = 0;
//	КолУтвержденных   = 0;
//	КолПодписанных    = 0;
//	КолПодготовленных = 0;
//	КолОтправленных   = 0;
//	// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
//	// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
//	// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
//	// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
//	НемедленнаяОтправкаЭД = Неопределено;
//	ВыполнятьКриптооперацииНаСервере = Неопределено;
//	ОбменСКонтрагентамиСлужебныйВызовСервера.ИнициализироватьПеременные(
//		ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД);
//	ВыполнитьОповещение = (ОписаниеОповещения <> Неопределено);
//	Если МассивЭД.Количество() > 0 Тогда
//		МассивСлужебныхЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУведомления);
//		Если ЗначениеЗаполнено(МассивСлужебныхЭД) Тогда
//			СтМассивовСтруктурСертификатов = Новый Структура;
//			Действия = "ПодписатьОтправить";
//			СтруктураСоответствий = Неопределено;
//			СтСоотвСоглашенийИМассивовЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВыполнитьДействияПоЭД(Новый Массив,
//				Новый Массив, Действия, ДопПараметры, МассивСлужебныхЭД, СтруктураСоответствий);
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Добавляет вид электронного документа в коллекцию актуальных видов электронных документов.
////
//// Параметры:
////  АктуальныеВидыЭД		 - Соответствие - Коллекция видов актуальных электронных документов.
////  ВидЭД					 - ПеречислениеСсылка.ВидыЭД - Вид электронного документа, добавляемый в коллекцию.
////  ИспользоватьДляВходящих	 - Булево - Использовать вид документа для входящих документов.
////  ИспользоватьДляИсходящих - Булево - Использовать вид документа для исходящих документов.
////
//Процедура ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, ВидЭД, ИспользоватьДляВходящих = Истина, ИспользоватьДляИсходящих = Истина) Экспорт
//	
//	Если Не ИспользоватьДляВходящих И Не ИспользоватьДляИсходящих Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СвойстваВидаЭД = ОбменСКонтрагентамиСлужебный.НовыеСвойстваЭД();
//	СвойстваВидаЭД.ИспользоватьДляВходящих = ИспользоватьДляВходящих;
//	СвойстваВидаЭД.ИспользоватьДляИсходящих = ИспользоватьДляИсходящих;
//	
//	АктуальныеВидыЭД.Вставить(ВидЭД, СвойстваВидаЭД);
//	
//КонецПроцедуры

//// Возвращает сведения об электронном документе.
////
//// Параметры:
////   - ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящий
////                         - ДокументСсылка.ЭлектронныйДокументВходящий - ссылка на электронный документ.
//// Возвращаемое значение:
////  Структура - описание:
////   * ОписаниеВидаДокумента - Структура - описание:
////     * ТипДокумента - ПеречислениеСсылка.ВидыЭД - тип электронного документа.
////     * ПрикладнойТипДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - тип прикладного электронного документа.
////     * ИдентификаторКомандыПечати - Строка - идентификатор команды печати.
////   * Подписи- ТаблицаЗначений - таблица подписей с колонками:
////     * Подписант - СправочникСсылка.Пользователи - пользователь, установивший подпись.
////     * Дата - ДатаВремя - дата установки подписи.
////     * Владелец - Строка - владелец подписи.
////   * ОбъектыУчета - массив - массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументов - массив ссылок на учетные объекты.
////   * Актуальный - Булево - признак того, что электронный документ является актуальным для указанных объектов учета.
//Функция СведенияОбЭлектронномДокументе(ЭлектронныйДокумент) Экспорт
//	
//	Подписи = Новый ТаблицаЗначений;
//	Подписи.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
//	Подписи.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
//	Подписи.Колонки.Добавить("Владелец", Новый ОписаниеТипов("Строка",
//		Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
//	
//	Сведения = Новый Структура;
//	Сведения.Вставить("ОписаниеВидаДокумента", Новый Структура);
//	Сведения.ОписаниеВидаДокумента.Вставить("ТипДокумента", Перечисления.ВидыЭД.ПустаяСсылка());
//	Сведения.ОписаниеВидаДокумента.Вставить("ПрикладнойТипДокумента", Неопределено);
//	Сведения.ОписаниеВидаДокумента.Вставить("ИдентификаторКомандыПечати", "");
//	Сведения.Вставить("Подписи", Подписи);
//	Сведения.Вставить("ОбъектыУчета", Новый Массив);
//	Сведения.Вставить("Актуальный", Ложь);
//	
//	ТекстыЗапросов = Новый Массив;
//	
//	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
//		ТекстыЗапросов.Добавить(
//			"ВЫБРАТЬ
//			|	ЭлектронныйДокументВходящий.ВидЭД КАК ТипДокумента,
//			|	ЭлектронныйДокументВходящий.ПрикладнойВидЭД КАК ПрикладнойТипДокумента,
//			|	"""" КАК ИдентификаторКомандыПечати,
//			|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная) КАК ВидПодписи
//			|ИЗ
//			|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
//			|ГДЕ
//			|	ЭлектронныйДокументВходящий.Ссылка = &ЭлектронныйДокумент
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ОбъектУчета
//			|ИЗ
//			|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
//			|ГДЕ
//			|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ЭлектронныйДокумент");
//	Иначе
//		ТекстыЗапросов.Добавить(
//			"ВЫБРАТЬ
//			|	ЭлектронныйДокументИсходящий.ВидЭД КАК ТипДокумента,
//			|	ЭлектронныйДокументИсходящий.ПрикладнойВидЭД КАК ПрикладнойТипДокумента,
//			|	ЕСТЬNULL(ЭлектронныйДокументИсходящий.ВидВнутреннегоДокумента.ИдентификаторКомандыПечати,"""") КАК ИдентификаторКомандыПечати,
//			|	ЭлектронныйДокументИсходящий.ВидПодписи КАК ВидПодписи
//			|ИЗ
//			|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
//			|ГДЕ
//			|	ЭлектронныйДокументИсходящий.Ссылка = &ЭлектронныйДокумент
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК ОбъектУчета
//			|ИЗ
//			|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
//			|ГДЕ
//			|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &ЭлектронныйДокумент");
//	КонецЕсли;
//	
//	ТекстыЗапросов.Добавить(
//		"ВЫБРАТЬ
//		|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
//		|ИЗ
//		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//		|ГДЕ
//		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
//		|ИЗ
//		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//		|ГДЕ
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ЭлектронныйДокумент
//		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыЭД)");
//	
//	ТипыЭД = ОбменСКонтрагентамиСлужебный.ОсновныеТипыЭД();
//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыЭД, ОбменСКонтрагентамиСлужебный.ТипыОтветныхТитулов());
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
//	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
//	Запрос.УстановитьПараметр("ТипыЭД", ТипыЭД);
//	РезультатыЗапроса = Запрос.ВыполнитьПакет();
//	Если РезультатыЗапроса[0].Пустой() Тогда
//		Возврат Сведения;
//	КонецЕсли;
//	
//	ВыборкаОписанияВида = РезультатыЗапроса[0].Выбрать();
//	ВыборкаОписанияВида.Следующий();
//	ЗаполнитьЗначенияСвойств(Сведения.ОписаниеВидаДокумента, ВыборкаОписанияВида);
//	
//	ВыборкаОбъектовУчета = РезультатыЗапроса[1].Выбрать();
//	Пока ВыборкаОбъектовУчета.Следующий() Цикл
//		Сведения.ОбъектыУчета.Добавить(ВыборкаОбъектовУчета.ОбъектУчета);
//	КонецЦикла;
//	
//	Сведения.Актуальный = Не РезультатыЗапроса[2].Пустой();
//	
//	ВыборкаФайлов = РезультатыЗапроса[3].Выбрать();
//	Пока ВыборкаФайлов.Следующий() Цикл
//		Если ВыборкаОписанияВида.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
//			ПростыеПодписи = ОбменСКонтрагентамиСлужебный.УстановленныеПростыеПодписи(ВыборкаФайлов.Ссылка);
//			Для Каждого СвойстваПодписи Из ПростыеПодписи Цикл
//				СтрокаПодписи = Сведения.Подписи.Добавить();
//				СтрокаПодписи.Подписант = СвойстваПодписи.Пользователь;
//				СтрокаПодписи.Дата = СвойстваПодписи.ДатаПодписи;
//				СтрокаПодписи.Владелец = СвойстваПодписи.ВладелецПодписи;
//			КонецЦикла;
//		Иначе
//			ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаФайлов.Ссылка);
//			Для Каждого СвойстваПодписи Из ЭлектронныеПодписи Цикл
//				СтрокаПодписи = Сведения.Подписи.Добавить();
//				СтрокаПодписи.Подписант = СвойстваПодписи.УстановившийПодпись;
//				СтрокаПодписи.Дата = СвойстваПодписи.ДатаПодписи;
//				СтрокаПодписи.Владелец = СвойстваПодписи.КомуВыданСертификат;
//			КонецЦикла;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Сведения;
//	
//КонецФункции

//#КонецОбласти

//#Область ЗаполнениеОбъектов

//// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
////
//// Параметры:
////  СтруктураПараметров - Структура - параметры добавления дополнительных данных.
////  СтруктураДанных - Структура - параметры добавляемых данных.
////  ИмяЭлементаВладельца - Строка - название реквизита.
////  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
////  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
////    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
////    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
////    расположенной в первой строке таблицы-владельца. (подробнее см. схему XDTO "АктТитулИсполнителя",
////    список "ОписьРабот", вложенный список "Работа").
////
//Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
//	
//	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
//	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
//		ЭлементТЧ = (НомерСтроки <> Неопределено);
//		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
//		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
//		
//		Если СтрокиДерева.Количество() = 0 Тогда
//			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
//			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
//			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
//			СтрокаДерева.ТЧ = ЭлементТЧ;
//		Иначе
//			СтрокаДерева = СтрокиДерева[0];
//		КонецЕсли;
//		
//		Если ЭлементТЧ Тогда
//			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
//			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
//			Если СтрокиСписка.Количество() = 0 Тогда
//				СтрокаДерева = СтрокаДерева.Строки.Добавить();
//				СтрокаДерева.ИмяРеквизита = "Нпп";
//				СтрокаДерева.ТЧ = ЭлементТЧ;
//				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
//			Иначе
//				СтрокаДерева = СтрокиСписка[0];
//			КонецЕсли;
//		КонецЕсли;
//		
//		ДоступноСимволов = 0;
//		Если ЮридическиЗначимый Тогда
//			Если НомерСтроки = Неопределено Тогда
//				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
//			Иначе
//				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
//			КонецЕсли;
//		КонецЕсли;
//		
//		ДобавитьДанныеРекурсивно(СтрокаДерева,
//								 СтруктураДанных,
//								 ДоступноСимволов,
//								 ЮридическиЗначимый,
//								 ЭлементТЧ,
//								 НомерСтроки);
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиСобытийФорм

//// Функция - Параметры "ПриСозданииНаСервере" формы документа.
//// 
//// Возвращаемое значение:
////  Структура - параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента.
////    * Форма - ФормаКлиентскогоПриложения - форма документа.
////    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
////    * ДекорацияСостояниеЭДО - ЭлементФормы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО.
////    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать ДекорацияСостояниеЭДО, необязательный параметр.
////    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
////    * Направление - ПеречислениеСсылка.НаправленияЭД - указывает направление электронного документа для документа ИБ.
////
//Функция ПараметрыПриСозданииНаСервере_ФормаДокумента() Экспорт
//	
//	ПараметрыПриСоздании = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО, МестоРазмещенияКоманд, Направление");
//	
//	Возврат ПараметрыПриСоздании;
//	
//КонецФункции

//// Обработчик события "ПриСозданииНаСервере" формы документа.
////
//// Параметры:
////  ПараметрыПриСозданииНаСервере - Структура - см. ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента.
////   
//Процедура ПриСозданииНаСервере_ФормаДокумента(ПараметрыПриСозданииНаСервере) Экспорт
//	
//	Если ПараметрыПриСозданииНаСервере.ДекорацияСостояниеЭДО <> Неопределено Тогда 
//		ЗаполнитьСостояниеЭДО(ПараметрыПриСозданииНаСервере);
//	КонецЕсли;
//	
//	//РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
//	
//	Реквизиты = Новый Массив;
//	
//	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
//		ПараметрыПриСозданииНаСервере.Форма, "ПараметрыОбменаСКонтрагентами") Тогда
//		
//		Реквизиты.Добавить(Новый РеквизитФормы("ПараметрыОбменаСКонтрагентами", Новый ОписаниеТипов()));
//		
//		ПараметрыПриСозданииНаСервере.Форма.ИзменитьРеквизиты(Реквизиты);
//		
//	КонецЕсли;
//	
//	ПараметрыДокумента = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(ПараметрыПриСозданииНаСервере.ДокументСсылка);
//	
//	ЗначениеРеквизита = Новый Структура;
//	ЗначениеРеквизита.Вставить("Организация",        ПараметрыДокумента.Организация);
//	ЗначениеРеквизита.Вставить("Контрагент",         ПараметрыДокумента.Контрагент);
//	ЗначениеРеквизита.Вставить("ДоговорКонтрагента", ПараметрыДокумента.ДоговорКонтрагента);
//	ЗначениеРеквизита.Вставить("ТекстСостоянияЭДО",  "");
//	ЗначениеРеквизита.Вставить("КонтекстОперации",   Неопределено);
//	
//	ПараметрыПриСозданииНаСервере.Форма.ПараметрыОбменаСКонтрагентами = ЗначениеРеквизита;
//	
//КонецПроцедуры

//// Функция - Параметры "ПриСозданииНаСервере" формы списка справочников и документов.
//// 
//// Возвращаемое значение:
////  Структура - параметры, которые необходимо передать в метод ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка.
////    * Форма - ФормаКлиентскогоПриложения - форма списка документа.
////    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
////    * Направление - ПеречислениеСсылка.НаправленияЭД - указывает направление электронного документа для документа ИБ.
////    * КолонкаСостоянияЭДО - ЭлементФормы - колонка состояния ЭДО.
////
//Функция ПараметрыПриСозданииНаСервере_ФормаСписка() Экспорт
//	
//	ПараметрыПриСоздании = Новый Структура("Форма, МестоРазмещенияКоманд, Направление");
//	ПараметрыПриСоздании.Вставить("КолонкаСостоянияЭДО", Неопределено);
//	Возврат ПараметрыПриСоздании;
//	
//КонецФункции

//// Обработчик события "ПриСозданииНаСервере" формы списка справочников и документов
////
//// Параметры:
////  ПараметрыПриСозданииНаСервере - структура - см. ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка.
////
//Процедура ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере) Экспорт
//	
//	//РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере); 
//	
//	СоставКоманд = КомандыЭДО();
//	ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКоманд);
//	
//	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПараметрыПриСозданииНаСервере.Форма.ИмяФормы);
//	Если ОбъектМетаданных <> Неопределено 
//		И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
//		ОбъектМетаданных = ОбъектМетаданных.Родитель();
//	КонецЕсли; 
//	
//	Если ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО <> Неопределено Тогда
//		
//		КолонкаСостоянияЭДО = ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО;
//		
//		КолонкаСостоянияЭДО.ГиперссылкаЯчейки = Истина;
//		
//		ЭлементОформления = ПараметрыПриСозданииНаСервере.Форма.УсловноеОформление.Элементы.Добавить();
//		ЭлементОформления.Использование = Истина;
//		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не начат'"));
//	  		
//		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
//		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.Имя);
//		
//		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.ПутьКДанным);
//		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
//		
//		ЭлементОформления = ПараметрыПриСозданииНаСервере.Форма.УсловноеОформление.Элементы.Добавить();
//		ЭлементОформления.Использование = Истина;
//	    ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
//		
//		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
//		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаСостоянияЭДО.Имя);
//		
//		Если СоставКоманд.Внутренние.Найти(ОбъектМетаданных.ПолноеИмя()) <> Неопределено Тогда
//			ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
//			ИспользоватьВнутренниеДокументыЭДО = ПолучитьФункциональнуюОпцию("ИспользоватьВнутренниеДокументыЭДО");
//			ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО.Видимость = ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО;
//		КонецЕсли;
//		
//	КонецЕсли;

//КонецПроцедуры

//// Функция - Параметры "ПриСозданииНаСервере" формы справочника.
//// 
//// Возвращаемое значение:
////  Структура - параметры, которые необходимо передать в метод ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника.
////    * Форма - ФормаКлиентскогоПриложения - форма списка документа.
////    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
////    * Направление - ПеречислениеСсылка.НаправленияЭД - указывает направление электронного документа для документа ИБ.
////
//Функция ПараметрыПриСозданииНаСервере_ФормаСправочника() Экспорт
//	
//	ПараметрыПриСоздании = Новый Структура("Форма, МестоРазмещенияКоманд, Направление");
//	
//	Возврат ПараметрыПриСоздании;
//	
//КонецФункции

//// Обработчик события "ПриСозданииНаСервере" формы справочника
////
//// Параметры:
////  ПараметрыПриСозданииНаСервере - структура - см. ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника.
////
//Процедура ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере) Экспорт
//	
//	//РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере);
//	
//КонецПроцедуры

//// Функция - Параметры "ПослеЗаписиНаСервере" формы документа.
//// 
//// Возвращаемое значение:
////  Структура - Параметры, которые нужно передавать в метод ОбменСКонтрагентами.ПослеЗаписиНаСервере.
////    * Форма - ФормаКлиентскогоПриложения - форма документа.
////    * ДокументСсылка - ДокументСсылка - ссылка на документ.
////    * ДекорацияСостояниеЭДО - ЭлементФормы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО, необязательный параметр.
////    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать ДекорацияСостояниеЭДО, необязательный параметр.
////
//Функция ПараметрыПослеЗаписиНаСервере() Экспорт
//	
//	ПараметрыПослеЗаписи = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО");
//	Возврат ПараметрыПослеЗаписи;
//	
//КонецФункции

//// Обработчик события "ПослеЗаписиНаСервере" формы документа
////
//// Параметры:
////  ДокументОбъект - ДокументОбъект - Записываемый объект.
////  СтандартнаяОбработка - Структура - Структура, содержащая параметры записи.
////  ПараметрыПослеЗаписи - Структура - см. ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере.
////
//Процедура ПослеЗаписиНаСервере(ДокументОбъект, СтандартнаяОбработка, ПараметрыПослеЗаписи) Экспорт
//	
//	ЗаполнитьСостояниеЭДО(ПараметрыПослеЗаписи);
//	
//	ДокументОбъект.ДополнительныеСвойства.Свойство("КонтекстОперации", ПараметрыПослеЗаписи.Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
//	
//КонецПроцедуры

//// Параметры для процедуры ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении
////
//// Возвращаемое значение:
////  Структура - параметры, которые нужно передать в процедуру ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении
////    * Форма                 - ФормаКлиентскогоПриложения - Форма учетного документа.
////    * ДокументСсылка        - ДокументСсылка   - Ссылка на документ.
////    * ДекорацияСостояниеЭДО - ДекорацияФормы   - Текст состояния ЭДО в виде гиперссылки.
////    * ГруппаСостояниеЭДО    - ГруппаФормы      - Группа, в которую входит "ДекорацияСостояниеЭДО".
////    * Организация           - СправочникСсылка - Ссылка на организацию.
////    * Контрагент            - СправочникСсылка - Ссылка на Контрагента.
////    * Договор               - СправочникСсылка - Ссылка на договор контрагента.
////
//Функция ПараметрыКлючевыеРеквизитыТекстСостоянияЭДОПриИзменении() Экспорт
//	
//	Возврат Новый Структура(
//		"Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО, Организация, Контрагент, Договор");
//	
//КонецФункции

//// Обработчик события "ПриИзменении" для полей документов,
//// которые содержат значения "Организация", "Контрагент", "ДоговорКонтрагента".
////
//// Параметры:
////  ПараметрыПриИзменении - Структура - см. ОбменСКонтрагентами.ПараметрыКлючевыеРеквизитыТекстСостоянияЭДОПриИзменении.
////
//Процедура КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении(ПараметрыПриИзменении) Экспорт
//	
//	//Если ПараметрыПриИзменении.ДекорацияСостояниеЭДО = Неопределено Тогда
//	//	Возврат;
//	//КонецЕсли; 
//	//
//	//Реквизит = ПараметрыПриИзменении.Форма.ПараметрыОбменаСКонтрагентами;
//	//
//	//Если ПараметрыПриИзменении.Организация <> Реквизит.Организация
//	//	Или ПараметрыПриИзменении.Контрагент <> Реквизит.Контрагент
//	//	Или ПараметрыПриИзменении.Договор <> Реквизит.ДоговорКонтрагента Тогда
//	//	
//	//	ЗаполнитьЗначенияСвойств(Реквизит, ПараметрыПриИзменении);
//	//	
//	//	// Изменили ключевой реквизит, относящийся к состоянию ЭДО, нужно сформировать текст состояния без учета данных документа.
//	//	
//	//	// 1) Если ЭДО полностью настроен между организацией и контрагентом, то значение надписи будет "ЭДО не начат".
//	//	// 2) Если нет настройки ЭДО для контрагента, то значение надписи будет "Пригласить контрагента к обмену".
//	//	// 3) Если же для организации не создан профиль настроек, то значение надписи будет "Подключить организацию".
//	//	
//	//	Запрос = Новый Запрос(
//	//	"ВЫБРАТЬ
//	//	|	УчетныеЗаписиЭДО.Организация КАК Организация,
//	//	|	ЕстьNULL(ВложенныйЗапрос.ЭДОНастроен, ЛОЖЬ) КАК ЭДОНастроен,
//	//	|	ВЫБОР
//	//	|		КОГДА НастройкиОтправкиЭлектронныхДокументов.Договор = &Договор
//	//	|			ТОГДА 0
//	//	|		ИНАЧЕ 1
//	//	|	КОНЕЦ КАК Порядок
//	//	|ИЗ
//	//	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
//	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
//	//	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	//	|				НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель,
//	//	|				НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Получатель,
//	//	|				НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК Договор,
//	//	|				МАКСИМУМ(ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)) КАК ЭДОНастроен
//	//	|			ИЗ
//	//	|				РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
//	//	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
//	//	|					ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
//	//	|						И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
//	//	|			
//	//	|			СГРУППИРОВАТЬ ПО
//	//	|				НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель,
//	//	|				НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель,
//	//	|				НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор) КАК ВложенныйЗапрос
//	//	|			ПО НастройкиОтправкиЭлектронныхДокументов.Отправитель = ВложенныйЗапрос.Отправитель
//	//	|				И НастройкиОтправкиЭлектронныхДокументов.Получатель = ВложенныйЗапрос.Получатель
//	//	|				И НастройкиОтправкиЭлектронныхДокументов.Договор = ВложенныйЗапрос.Договор
//	//	|		ПО УчетныеЗаписиЭДО.Организация = НастройкиОтправкиЭлектронныхДокументов.Отправитель
//	//	|			И (НастройкиОтправкиЭлектронныхДокументов.Получатель = &Контрагент)
//	//	|ГДЕ
//	//	|	УчетныеЗаписиЭДО.Организация = &Организация
//	//	|
//	//	|УПОРЯДОЧИТЬ ПО
//	//	|	Порядок
//	//	|;
//	//	|
//	//	|////////////////////////////////////////////////////////////////////////////////
//	//	|ВЫБРАТЬ
//	//	|	СостоянияКонтрагентовБЭД.Состояние КАК Состояние
//	//	|ИЗ
//	//	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
//	//	|ГДЕ
//	//	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент");
//	//	
//	//	Запрос.УстановитьПараметр("Организация", ПараметрыПриИзменении.Организация);
//	//	Запрос.УстановитьПараметр("Контрагент",  ПараметрыПриИзменении.Контрагент);
//	//	Запрос.УстановитьПараметр("Договор",     ПараметрыПриИзменении.Договор);
//	//	
//	//	ТекстСостоянияЭДО        = ""; // для вывода на форму документа
//	//	ТекстСводноеСостояниеЭДО = ""; // для формирования диалога с пользователем в форме документа
//	//	
//	//	УстановитьПривилегированныйРежим(Истина);
//	//	Результат = Запрос.ВыполнитьПакет();
//	//	УстановитьПривилегированныйРежим(Ложь);
//	//	Выборка = Результат[0].Выбрать();
//	//	
//	//	Если Выборка.Следующий() Тогда
//	//		
//	//		// Организация подключена к ЭДО.
//	//		ЭДОНастроен = Выборка.ЭДОНастроен;
//	//		
//	//		Если ЭДОНастроен Тогда
//	//			Если ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(ПараметрыПриИзменении.ДокументСсылка) Тогда
//	//				ТекстСостоянияЭДО = НСтр("ru='Требуются действия с нашей стороны'");
//	//			Иначе
//	//				ТекстСостоянияЭДО = НСтр("ru='ЭДО не начат'");
//	//			КонецЕсли;
//	//			
//	//			ТекстСводноеСостояниеЭДО = "ЭДОНеНачат";
//	//			
//	//		Иначе
//	//			Шаблон = НСтр("ru='Пригласить %1 к обмену электронными документами в 1С-ЭДО'");
//	//			ТекстСостоянияЭДО = СтрШаблон(Шаблон, ПараметрыПриИзменении.Контрагент);
//	//			
//	//			ТекстСводноеСостояниеЭДО = "ПригласитьКонтрагента";
//	//			
//	//		КонецЕсли;
//	//		
//	//	Иначе
//	//		
//	//		// Организация не подключена к ЭДО.
//	//		Выборка = Результат[1].Выбрать();
//	//		
//	//		Шаблон = НСтр("ru = 'Подключить ""%1"" к ЭДО'");
//	//		ТекстСостоянияЭДО = СтрШаблон(Шаблон, ПараметрыПриИзменении.Организация);
//	//		
//	//		ТекстСводноеСостояниеЭДО = "ПодключитьОрганизацию";
//	//		
//	//		Если Выборка.Следующий()
//	//			И (Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НеПодключен
//	//			И Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка()) Тогда
//	//			
//	//			// Только контрагент подключен к ЭДО.
//	//			ОбменСКонтрагентамиСлужебный.ЗаполнитьТекстПриглашенияКонтрагентаКЭДО(
//	//				ТекстСостоянияЭДО, ПараметрыПриИзменении.ДокументСсылка, ПараметрыПриИзменении.Контрагент);
//	//			
//	//		КонецЕсли;
//	//		
//	//	КонецЕсли;
//	//	
//	//	ПараметрыПриИзменении.ДекорацияСостояниеЭДО.Заголовок   = ТекстСостоянияЭДО;
//	//	ПараметрыПриИзменении.ДекорацияСостояниеЭДО.Доступность = Истина;
//	//	
//	//Иначе
//	//	
//	//	// Можно сначала изменить ключевой реквизит на значение отличающееся от значения в БД,
//	//	// потом изменить на значение совпадающее со значением в БД.
//	//	// В таком случае заново сформируем текст состояния с учетом данных документа.
//	//	ЗаполнитьСостояниеЭДО(ПараметрыПриИзменении);
//	//	ТекстСводноеСостояниеЭДО = "ЕстьДействующийДокумент";
//	//	
//	//КонецЕсли;
//	//
//	//Реквизит.ТекстСостоянияЭДО = ТекстСводноеСостояниеЭДО;
//	//
//КонецПроцедуры

//#КонецОбласти

//#Область ПодменюКомандЭДО

//// Формирование команд ЭДО.
////
//// Параметры:
////  ПолноеИмя - Строка - имя объекта, например "Документ.РеализацияТоваровУслуг".
////  КомандыЭДО - ТаблицаЗначений - подготавливаемый список команд ЭДО.
////  НаправлениеЭД - Перечисление.НаправлениеЭД - параметр отбора входящих или исходящих документов.
////  ТолькоВМенюЕще - Булево - признак размещения команд в меню "Еще".
////
//Процедура СформироватьКомандыЭДО(ПолноеИмя, КомандыЭДО, НаправлениеЭД = Неопределено, ТолькоВМенюЕще = Ложь) Экспорт
//	
//	СоставКоманд = КомандыЭДО();
//	
//	ОбменСКонтрагентамиПереопределяемый.ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКоманд);
//	
//	КоммерческоеПредложениеКлиенту =
//		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту";
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеКлиенту) Тогда
//		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
//		МодульПодсистемы.ПриОпределенииСоставаКомандЭДО(СоставКоманд);
//	КонецЕсли;
//	
//	КоммерческоеПредложениеПоставщика =
//		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика";
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеПоставщика) Тогда
//		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
//		МодульПодсистемы.ПриОпределенииСоставаКомандЭДО(СоставКоманд);
//	КонецЕсли;
//	
//	ЗапросКоммерческогоПредложенияОтКлиента =
//		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента";
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует(ЗапросКоммерческогоПредложенияОтКлиента) Тогда
//		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
//		МодульПодсистемы.ПриОпределенииСоставаКомандЭДО(СоставКоманд);
//	КонецЕсли;
//	
//	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСоставаКомандЭДООснованияПрикладногоЭлектронногоДокумента(
//		СоставКоманд);
//	
//	ЗначениеФОИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
//	ЗначениеФОИспользоватьИнтеркампани = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДМеждуОрганизациями");
//	
//	ЕстьПодсистемаБизнесСеть  = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть");
//	ЕстьПравоОбменаБизнесСеть = Ложь;
//	ИспользоватьОбменEDI      = Ложь;
//	Если ЕстьПодсистемаБизнесСеть Тогда
//		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
//		ЗначениеФОИспользоватьОбменБизнесСеть = МодульБизнесСеть.ИспользоватьОбменБизнесСеть();
//		ЕстьПравоОбменаБизнесСеть = МодульБизнесСеть.ПравоВыполненияОбменаДокументами();
//		Если ЗначениеФОИспользоватьОбменБизнесСеть
//			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.EDI") Тогда
//			
//			МодульСервисEDI = ОбщегоНазначения.ОбщийМодуль("EDIСервер");
//			ИспользоватьОбменEDI = МодульСервисEDI.ИспользуетсяФункциональностьПодсистемы();
//			
//		КонецЕсли;
//		
//	Иначе
//		ЗначениеФОИспользоватьОбменБизнесСеть = Ложь;
//	КонецЕсли;
//	
//	ЕстьПравоПросмотраЭД           = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД();
//	ЕстьПравоОбработкиЭД           = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД();
//	ЕстьПравоНастройкиОбмена       = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
//	ЕстьПравоЧтенияНастройкиОбмена = ОбменСКонтрагентамиСлужебный.ЕстьПравоЧтенияНастройкиОбмена();
//	ЕстьПравоОбменаЭД              = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена();
//	
//	ЕстьПравоВывода = ПравоДоступа("Вывод", Метаданные);
//	
//	Если СоставКоманд.Договоры.Найти(ПолноеИмя) <> Неопределено
//		И ЗначениеФОИспользоватьОбменЭД Тогда
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьНастройкиОтправкиДокументовПоДоговору";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
//		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
//		КомандаЭДО.Порядок       = 10;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
//		
//	КонецЕсли;

//	Если СоставКоманд.Контрагенты.Найти(ПолноеИмя) <> Неопределено
//		И ЗначениеФОИспользоватьОбменЭД Тогда
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ПригласитьКОбменуЭДО";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "ПригласитьКОбменуЭДО";
//		КомандаЭДО.Представление = НСтр("ru = 'Пригласить к обмену электронными документами'");
//		КомандаЭДО.Порядок       = 10;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьКонтрагентыБЭД;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьНастройкиОтраженияВУчете";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "НастройкиОтраженияВУчете";
//		КомандаЭДО.Представление = НСтр("ru = 'Настройки отражения в учете'");
//		КомандаЭДО.Порядок       = 20;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
//		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяРеквизитаУсловия", "ЕстьСвязь");
//		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ОбменСКонтрагентамиСлужебный.ЕстьНастройкиСКонтрагентом");
//		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
//		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьНастройкиОтправкиДокументовКонтрагента";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументов";
//		КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
//		КомандаЭДО.Порядок       = 30;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
//		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяРеквизитаУсловия", "ЕстьСвязь");
//		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ОбменСКонтрагентамиСлужебный.ЕстьНастройкиСКонтрагентом");
//		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
//		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
//		
//	КонецЕсли;
//	
//	Если СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено
//		И ЗначениеФОИспользоватьОбменЭД Тогда
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ПодключитьКЭДО";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "ПодключитьКЭДО";
//		КомандаЭДО.Представление = НСтр("ru = 'Подключить организацию'");
//		КомандаЭДО.Порядок       = 10;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодключениеБЭД;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
//		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ОбменСКонтрагентамиСлужебный.ЕстьУчетныеЗаписи");
//		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Ложь);
//		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСписокУчетныхЗаписей";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "УчетныеЗаписиЭДО";
//		КомандаЭДО.Представление = НСтр("ru = 'Учетные записи'");
//		КомандаЭДО.Порядок       = 20;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗаявлениеНаВыпускСертификатаКлюча;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.УправлениеВидимостью.Вставить("Использовать", Истина);
//		КомандаЭДО.УправлениеВидимостью.Вставить("ИмяАлгоритмаПроверкиУсловия", "ОбменСКонтрагентамиСлужебный.ЕстьУчетныеЗаписи");
//		КомандаЭДО.УправлениеВидимостью.Вставить("ЗначениеУсловия", Истина);
//		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;
//		
//		Если ЗначениеФОИспользоватьИнтеркампани Тогда
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.НастройкиОтправкиДокументовИнтеркампани";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "НастройкиОтправкиДокументовИнтеркампани";
//			КомандаЭДО.Представление = НСтр("ru = 'Настройки отправки документов'");
//			КомандаЭДО.Порядок       = 30;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.СохранитьФайлКак;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоНастройкиОбмена;
//		КонецЕсли;
//		
//	КонецЕсли;

//	Если СоставКоманд.Исходящие.Найти(ПолноеИмя) <> Неопределено 
//			И НаправлениеЭД <> Перечисления.НаправленияЭД.Входящий Тогда
//		
//		Если ЗначениеФОИспользоватьОбменЭД Тогда
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
//			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
//			КомандаЭДО.Порядок       = 10;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
//			КомандаЭДО.Представление = НСтр("ru = 'Отправить электронный документ'");
//			КомандаЭДО.Порядок       = 20;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
//			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
//			КомандаЭДО.Порядок       = 50;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОбщее";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьТекущиеДелаЭДО";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
//			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
//			КомандаЭДО.Порядок       = 30;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ДеревоЭД";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ДеревоЭД";
//			КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
//			КомандаЭДО.Порядок       = 25;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
//			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//			
//		КонецЕсли;
//		
//		Если ЕстьПравоВывода И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
//			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ВыгрузитьДанныеВФайл";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ВыгрузитьДанныеВФайл";
//			КомандаЭДО.Представление = НСтр("ru = 'Выгрузить документ в файл'");
//			КомандаЭДО.Порядок       = 50;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ВыгрузитьДанныеИзИнформационнойБазыВXMLФайл;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
//			КомандаЭДО.Недоступна    = Ложь;
//		КонецЕсли;
//		
//		Если ЕстьПравоВывода И ЗначениеФОИспользоватьОбменБизнесСеть И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "БизнесСетьСлужебныйКлиент.ОтправитьЧерезБизнесСеть";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ОтправитьЧерезБизнесСеть";
//			КомандаЭДО.Представление = НСтр("ru = 'Отправить документ без электронной подписи'");
//			КомандаЭДО.Порядок       = 61;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок["БизнесСетьОтправка"];
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОСервис";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаБизнесСеть;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если СоставКоманд.Входящие.Найти(ПолноеИмя) <> Неопределено 
//		И НаправлениеЭД <> Перечисления.НаправленияЭД.Исходящий Тогда
//		
//		Если ЗначениеФОИспользоватьОбменЭД Тогда
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйВходящийЭД";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
//			КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
//			КомандаЭДО.Порядок       = 10;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ДеревоЭД";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ДеревоЭД";
//			КомандаЭДО.Представление = НСтр("ru = 'Открыть электронные документы'");
//			КомандаЭДО.Порядок       = 20;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
//			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ПерезаполнитьДокумент";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ПерезаполнитьДокумент";
//			КомандаЭДО.Представление = НСтр("ru = 'Перезаполнить по электронному документу'");
//			КомандаЭДО.Порядок       = 30;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ДобавитьДопСвойствоВНабор;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
//			КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "СоздатьПроизвольныйДокумент";
//			КомандаЭДО.Представление = НСтр("ru = 'Создать произвольный документ'");
//			КомандаЭДО.Порядок       = 50;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.Скрепка;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
//			
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьТекущиеДелаЭДО";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
//			КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
//			КомандаЭДО.Порядок       = 30;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//			
//		КонецЕсли;
//		
//		Если ЕстьПравоОбменаЭД Тогда
//			
//			// Команды из механизма однократных сделок не завязаны на ФО и роли БЭД.
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ЗагрузитьДанныеИзФайла";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ЗагрузитьДанныеИзФайла";
//			КомандаЭДО.Представление = НСтр("ru = 'Загрузить документ из файла'");
//			КомандаЭДО.Порядок       = 50;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЗагрузитьXMLФайлВИнформационнуюБазу;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//			КомандаЭДО.ТолькоВоВсехДействиях = Истина;
//			КомандаЭДО.Недоступна    = Ложь;
//			
//			Если ЗначениеФОИспользоватьОбменБизнесСеть И СоставКоманд.БезПодписи.Найти(ПолноеИмя) <> Неопределено Тогда
//				КомандаЭДО = КомандыЭДО.Добавить();
//				КомандаЭДО.Обработчик    = "БизнесСетьСлужебныйКлиент.ЗагрузитьЧерезБизнесСеть";
//				КомандаЭДО.СписокФорм    = "";
//				КомандаЭДО.Идентификатор = "ЗагрузитьЧерезБизнесСеть";
//				КомандаЭДО.Представление = НСтр("ru = 'Загрузить документ без электронной подписи'");
//				КомандаЭДО.Порядок       = 62;
//				КомандаЭДО.Картинка      = БиблиотекаКартинок["БизнесСетьЗагрузка"];
//				КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//				КомандаЭДО.МестоРазмещения = "КомандыЭДОСервис";
//				КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаБизнесСеть;
//				
//				КомандаЭДО = КомандыЭДО.Добавить();
//				КомандаЭДО.Обработчик    = "БизнесСетьСлужебныйКлиент.ОткрытьФормуПоискаДокументаПоQRКоду";
//				КомандаЭДО.СписокФорм    = "";
//				КомандаЭДО.Идентификатор = "НайтиПоQRКоду";
//				КомандаЭДО.Представление = НСтр("ru = 'Найти по QR-коду электронный документ'");
//				КомандаЭДО.Порядок       = 62;
//				КомандаЭДО.Картинка      = БиблиотекаКартинок["БизнесСетьQRКод"];
//				КомандаЭДО.МестоРазмещения = "КомандыЭДОСервис";
//				КомандаЭДО.Недоступна      = Не ЕстьПравоОбменаБизнесСеть;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если ЗначениеФОИспользоватьОбменЭД И ЗначениеФОИспользоватьИнтеркампани И СоставКоманд.Интеркампани.Найти(ПолноеИмя) <> Неопределено Тогда
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
//		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
//		КомандаЭДО.Порядок       = 10;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
//		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
//		КомандаЭДО.Порядок       = 12;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭлектронныйДокументИсходящий;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоОбменаЭД;
//			
//	КонецЕсли;
//	
//	ИспользоватьВнутренниеДокументыЭДО = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
//		"ИспользоватьВнутренниеДокументыЭДО");
//	
//	Если ЗначениеФОИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
//		И СоставКоманд.Внутренние.Найти(ПолноеИмя) <> Неопределено Тогда
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "ОткрытьАктуальныйЭД";
//		КомандаЭДО.Представление = НСтр("ru = 'Просмотреть электронный документ'");
//		КомандаЭДО.Порядок       = 10;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.СформироватьПодписатьОтправитьЭД";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "СформироватьПодписатьОтправитьЭД";
//		КомандаЭДО.Представление = НСтр("ru = 'Подписать электронный документ'");
//		КомандаЭДО.Порядок       = 20;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоОбработкиЭД;
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьТекущиеДелаЭДО";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "ОткрытьТекущиеДелаЭДО";
//		КомандаЭДО.Представление = НСтр("ru = 'Текущие дела ЭДО'");
//		КомандаЭДО.Порядок       = 30;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ДеревоЭД";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "ДеревоЭД";
//		КомандаЭДО.Представление = НСтр("ru = 'Список электронных документов'");
//		КомандаЭДО.Порядок       = 25;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.Подсистема;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОДополнительное";
//		КомандаЭДО.ТолькоВоВсехДействиях = Истина;
//		КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//		
//	КонецЕсли;
//	
//	Если ЗначениеФОИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО
//		И СоставКоманд.Организации.Найти(ПолноеИмя) <> Неопределено Тогда
//		
//		КомандаЭДО = КомандыЭДО.Добавить();
//		КомандаЭДО.Обработчик = "ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьНастройкиВнутреннегоЭДО";
//		КомандаЭДО.СписокФорм    = "";
//		КомандаЭДО.Идентификатор = "НастройкиВнутреннегоЭДО";
//		КомандаЭДО.Представление = НСтр("ru = 'Настройки внутреннего ЭДО'");
//		КомандаЭДО.Порядок       = 40;
//		КомандаЭДО.Картинка      = БиблиотекаКартинок.ПодписанЭП;
//		КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//		КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//		КомандаЭДО.Недоступна    = Не ЕстьПравоЧтенияНастройкиОбмена;

//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
//	    МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
//		Если УправлениеПечатью.ИсточникиКомандПечати().Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмя)) <> Неопределено
//			И СоставКоманд.Внутренние.Найти(ПолноеИмя) = Неопределено
//			И СоставКоманд.Исходящие.Найти(ПолноеИмя) = Неопределено 
//			И СоставКоманд.Входящие.Найти(ПолноеИмя) = Неопределено
//			И СоставКоманд.Интеркампани.Найти(ПолноеИмя) = Неопределено
//			И СоставКоманд.Контрагенты.Найти(ПолноеИмя) = Неопределено 
//			И СоставКоманд.Организации.Найти(ПолноеИмя) = Неопределено
//			И СоставКоманд.Договоры.Найти(ПолноеИмя) = Неопределено Тогда
//		
//			КомандаЭДО = КомандыЭДО.Добавить();
//			КомандаЭДО.Обработчик    = "ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьПечатнуюФормуПоЭДОКоманда";
//			КомандаЭДО.СписокФорм    = "";
//			КомандаЭДО.Идентификатор = "ОтправитьПечатнуюФорму";
//			КомандаЭДО.Представление = НСтр("ru = 'ЭДО'");
//			КомандаЭДО.Порядок       = 10;
//			КомандаЭДО.Картинка      = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
//			КомандаЭДО.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Одиночный;
//			КомандаЭДО.МестоРазмещения = "КомандыЭДОВажное";
//			КомандаЭДО.Недоступна    = Не ЕстьПравоПросмотраЭД;
//			КомандаЭДО.Отображение   = ОтображениеКнопки.КартинкаИТекст;
//			
//		КонецЕсли;
//	 КонецЕсли;
//КонецПроцедуры

//// Возвращает структуру используемых команд ЭДО.
////
//// Возвращаемое значение:
////  Структура - пустая структура массивов:
////    * Исходящие    - Массив.
////    * Входящие     - Массив.
////    * БезПодписи   - Массив.
////    * Интеркампани - Массив.
////    * Внутренние   - Массив.
////    * Контрагенты  - Массив.
////    * Организации  - Массив.
////    * Договоры     - Массив.
////
//Функция КомандыЭДО() Экспорт
//	
//	Команды = Новый Структура;
//	Команды.Вставить("Исходящие",    Новый Массив);
//	Команды.Вставить("Входящие",     Новый Массив);
//	Команды.Вставить("БезПодписи",   Новый Массив);
//	Команды.Вставить("Интеркампани", Новый Массив);
//	Команды.Вставить("Внутренние",   Новый Массив);
//	Команды.Вставить("Контрагенты",  Новый Массив);
//	Команды.Вставить("Организации",  Новый Массив);
//	Команды.Вставить("Договоры",     Новый Массив);
//	
//	Возврат Команды;
//	
//КонецФункции

//#КонецОбласти

//#Область Интеграция1СЭДОИ1СОтчетности

//// В процедуре заполняются данные по организации для мастера 1С-Отчетности.
////
//// Параметры:
////   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
////   ДополнительныеПараметры - Структура - может иметь следующий набор свойств:
////     * ЕстьПодключениеЭДО - Булево - признак подключения переданной организации к сервису 1С-ЭДО;
////     * МассивОператоровЭДО - Массив - перечень актуальных операторов ЭДО в сервисе 1С-ЭДО;
////     * СсылкаОписаниеСервиса - Строка - ссылка на актуальную информацию о сервисе 1С-ЭДО.
////
//Процедура ЗаполнитьДанныеПо1СЭДОДляМастера1СОтчетности(Организация, ДополнительныеПараметры = Неопределено) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
//	|ИЗ
//	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
//	|ГДЕ
//	|	УчетныеЗаписиЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
//	|	И УчетныеЗаписиЭДО.Организация = &Организация";
//	Запрос.УстановитьПараметр("Организация", Организация);
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Результат = Запрос.Выполнить();
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Если Результат.Пустой() Тогда
//		ДополнительныеПараметры.Вставить("ЕстьПодключениеЭДО", Ложь);
//		
//		ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
//		Если ИмяФайлаОтвета <> Неопределено Тогда
//			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
//			
//			// ОператорыЭДОПодключенныеК1СЭДО
//			МассивОператоровЭДО = Новый Массив;
//			Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
//				
//				ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
//				Если ДеревоXML <> Неопределено Тогда
//					
//					УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
//					Если УзелОператорыЭДО <> Неопределено Тогда
//						Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
//							
//							УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
//							Если СтрНайти(УзелОператорЭДОНаимОрг.Значение, "тест") = 0 Тогда
//								МассивОператоровЭДО.Добавить(УзелОператорЭДОНаимОрг.Значение);
//							КонецЕсли;
//							
//						КонецЦикла;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(МассивОператоровЭДО) Тогда
//				ДополнительныеПараметры.Вставить("МассивОператоровЭДО", МассивОператоровЭДО);
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ДополнительныеПараметры.Вставить("СсылкаОписаниеСервиса", "https://portal.1c.ru/applications/30/#conditions");
//	
//КонецПроцедуры

//// Статус подключения организации.
////
//// Параметры:
////   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
////
//// Возвращаемое значение:
////   Булево - признак подключения организации.
////
//Функция ОрганизацияПодключена(Организация) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
//	|ИЗ
//	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
//	|ГДЕ
//	|	УчетныеЗаписиЭДО.Организация = &Организация";
//	
//	Запрос.УстановитьПараметр("Организация", Организация);
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Возврат Не Запрос.Выполнить().Пустой();
//	
//КонецФункции

//// Статус подключения организации в сервисе 1С-ЭДО.
////
//// Параметры:
////   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
////
//// Возвращаемое значение:
////   Булево - признак подключения организации в сервисе 1С-ЭДО.
////
//Функция ОрганизацияПодключенаВ1СЭДО(Организация) Экспорт
//	
//	Результат = Ложь;
//	ОбменСКонтрагентамиСлужебный.ПроверитьОрганизациюВ1СЭДО(Организация, Результат);
//	
//	Возврат Результат;
//	
//КонецФункции

//// Включает/выключает функционал ЭДО с контрагентами.
////
//// Параметры:
////   Включить - Булево - выключить или выключить функционал ЭДО.
////
//Процедура УстановитьЗначенияКонстантЭДО(Включить = Истина) Экспорт
//	
//	ИспользуютсяОбменЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
//		"ИспользоватьОбменЭД");
//	Если Не ИспользуютсяОбменЭД Тогда
//		Константы.ИспользоватьОбменЭД.Установить(Включить);
//	КонецЕсли;
//	
//	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
//		"ИспользоватьЭлектронныеПодписиЭД");
//	Если Не ИспользуютсяЭП Тогда
//		Константы.ИспользоватьЭлектронныеПодписи.Установить(Включить);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Определяет отсутствие учетных записей ЭДО для переданной организации.
////
//// Параметры:
////  Организация - ОпределяемыйТип.Организация - организация для проверки.
////  ТребуетсяПодключение - Булево - признак отсутствия учетных записей ЭДО.
////
//Процедура ТребуетсяПодключениеЭДО(Знач Организация, ТребуетсяПодключение) Экспорт
//	
//	ТребуетсяПодключение = Не ОрганизацияПодключена(Организация);
//	
//КонецПроцедуры

//// Проверяет необходимость переиздания указанного сертификата для использования в ЭДО.
////
//// Параметры:
////  Организация - ОпределяемыйТип.Организация - организация для проверки.
////  Сертификат - СертификатКриптографии - сертификат для проверки.
////  ТребуетсяПереиздание - Булево - признак необходимости переиздать сертификат для ЭДО.
////
//Процедура ТребуетсяПереизданиеСертификатаЭДО(Знач Организация, Знач Сертификат, ТребуетсяПереиздание) Экспорт
//	
//	СсылкаНаСертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(Сертификат);
//	Если ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
//		ТребуетсяПереиздание = ОбменСКонтрагентамиСлужебный.СертификатИспользуетсяВЭДО(Организация, СсылкаНаСертификат);
//	Иначе
//		ТребуетсяПереиздание = Ложь;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Инициализирует настройки подключения ЭДО.
////
//// Параметры:
////  Организация - ОпределяемыйТип.Организация - организация для подключения ЭДО.
////  КодФНС - Строка - код налогового органа организации.
////  Настройки - Строка - инициализированные настройки.
////
//Процедура ИнициализироватьНастройкиПодключенияЭДО(Знач Организация, Знач КодФНС, Настройки) Экспорт
//	
//	Параметры = ОбменСКонтрагентамиСлужебныйКлиентСервер.НовыеПараметрыПодключенияЭДО();
//	Параметры.Организация = Организация;
//	Параметры.КодНалоговогоОргана = КодФНС;
//	Параметры.ОператорЭДО = "2AE"; // Калуга Астрал.
//	Параметры.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
//	Параметры.НаименованиеУчетнойЗаписи = СтрШаблон(НСтр("ru = '%1, %2'"), Параметры.Организация, Параметры.СпособОбменаЭД);
//	Параметры.НазначениеУчетнойЗаписи = НСтр("ru = 'Основная'");
//	Параметры.ПринятыУсловияИспользования = Истина;
//	
//	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//		Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса(), Ложь);
//							
//	НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(
//		Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
//	
//	Если НайденныеСтроки.Количество() > 0 Тогда
//		Параметры.АдресОрганизации = НайденныеСтроки[0].Представление;
//		Параметры.АдресОрганизацииЗначение = НайденныеСтроки[0].Значение;
//	КонецЕсли;
//		
//	Операция = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияПодключенияЭДО(Параметры);
//	
//	Настройки = ОбменСКонтрагентамиСлужебный.ОперацияЭДОВСтроку(Операция);
//	
//КонецПроцедуры

//// Инициализирует настройки переиздания сертификата криптографии.
////
//// Параметры:
////  Организация - ОпределяемыйТип.Организация - организация для переиздания сертификата.
////  КодФНС - Строка - код налогового органа организации.
////  Сертификат - СертификатКриптографии - сертификат для переиздания.
////  Настройки - Строка - инициализированные настройки.
////
//Процедура ИнициализироватьНастройкиПереизданияСертификатаЭДО(Знач Организация, Знач КодФНС, Знач Сертификат, Настройки) Экспорт
//	
//	СсылкаНаСертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(Сертификат);
//	
//	Параметры = ОбменСКонтрагентамиСлужебныйКлиентСервер.НовыеПараметрыОбновленияСертификата();
//	Параметры.Организация = Организация;
//	Параметры.Сертификат = СсылкаНаСертификат;
//	
//	Операция = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияОбновленияСертификата(Параметры);
//	
//	Настройки = ОбменСКонтрагентамиСлужебный.ОперацияЭДОВСтроку(Операция);
//	
//КонецПроцедуры

//// Проверяет корректность настроек операции ЭДО (подключение ЭДО, переиздание сертификата).
////
//// Параметры:
////  Настройки - Строка - настройки для проверки.
////                       См. ИнициализироватьНастройкиПодключенияЭДО.
////                       См. ИнициализироватьНастройкиПереизданияСертификатаЭДО.
////  НастройкиКорректны - Булево - результат проверки настроек.
////
//Процедура ПроверитьНастройкиРегистрацииЭДО(Знач Настройки, НастройкиКорректны) Экспорт
//	
//	Операция = ОбменСКонтрагентамиСлужебный.ОперацияЭДОИзСтроки(Настройки);
//	
//	НастройкиКорректны = ОбменСКонтрагентамиСлужебный.ОперацияЭДОКорректна(Операция);
//	
//КонецПроцедуры

//// Заполняет адрес страницы с пользовательским соглашением.
////
//// Параметры:
////  Адрес - Строка - строка для заполнения адреса.
////
//Процедура АдресСтраницыСУсловиямиПодключения(Адрес) Экспорт
//	
//	Адрес = "https://portal.1c.ru/applications/30/#conditions";
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

//// Метод запускает проверку состояния контрагента в сервисе 1С-ЭДО.
////
//// Параметры:
////  СсылкаНаКонтрагента - СправочникСсылка - ссылка на справочник контрагента,
////   которого необходимо проверить по подключению к 1С-ЭДО.
////
//Процедура ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(СсылкаНаКонтрагента) Экспорт
//	
//	//Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
//	//	Возврат;
//	//КонецЕсли;
//	//
//	//// Проверим необходимость запуска фонового задания
//	//Запрос = Новый Запрос;
//	//Запрос.Текст =
//	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	//|	СостоянияКонтрагентовБЭД.Состояние
//	//|ИЗ
//	//|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
//	//|ГДЕ
//	//|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
//	//|	И СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НеПодключен)";
//	//
//	//Запрос.УстановитьПараметр("Контрагент", СсылкаНаКонтрагента);
//	//
//	//УстановитьПривилегированныйРежим(Истина);
//	//Если Запрос.Выполнить().Пустой() Тогда
//	//	Возврат;
//	//КонецЕсли;
//	//УстановитьПривилегированныйРежим(Ложь);
//	//
//	//// Запуск фонового задания для проверки контрагента
//	//ПараметрыЗапуска = Новый Структура;
//	//ПараметрыЗапуска.Вставить("Контрагент",     СсылкаНаКонтрагента);
//	//ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки", Истина);
//	//ПараметрыЗапуска.Вставить("АдресХранилища", Неопределено);
//	//
//	//ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
//	//ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
//	//
//	//ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаКонтрагента,
//	//	ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
//	//	
//	//ПараметрыЗапуска.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
//	//ПараметрыЗапуска.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
//	//
//	//Попытка
//	//
//	//	Параметры = Новый Массив;
//	//	Параметры.Добавить(ПараметрыЗапуска);
//	//	
//	//	ФоновыеЗадания.Выполнить("ОбменСКонтрагентамиСлужебный.ПроверитьКонтрагентаФоновоеЗадание", 
//	//		Параметры, ПараметрыЗапуска.ИНН + " " + ПараметрыЗапуска.КПП, НСтр("ru = 'Проверка подключения'"));
//	//
//	//Исключение
//	//	
//	//	// Исключение возникнет в случае запуска фонового задания с таким же ключем
//	//	// Специальной обработки не требуется.
//	//		
//	//	Операция = НСтр("ru = 'Проверка подключения контрагента к 1С-ЭДО в фоновом задании.'");
//	//	ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//	//	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки,,, СсылкаНаКонтрагента);
//	//	
//	//КонецПопытки;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ПередачаЭДВФНС

//// Получает соответствие документам информационной базы и актуальных электронных документов.
//// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
////
//// Параметры:
////  ДокументыИБ - Массив - массив ссылок на документы информационной базы.
////  УникальныйИдентификатор - УникальныйИдентификатор - признак уникальности для формы выбора документов.
////
//// Возвращаемое значение:
////  Соответствие - соответствие документов ИБ:
////    * Ключ     - ДокументСсылка - ссылка на документ-Владелец ЭД.
////    * Значение - Массив         - массив структур параметров ЭД, с ключами:
////                 ТипФайла - Строка - возможные значения: ФайлВыгрузки, ЭЦП, ФайлПодтверждения, ЭЦППодтверждения.
////                 КНД      - Строка - КНД выгружаемого ЭД, заполняется только для файла выгрузки и файла подтверждения.
////                 ИмяФайла - Строка - Имя выгружаемого файла.
////                 АдресВременногоХранилища - Строка.
////
//Функция ПолучитьСоответствиеДокументамИБКомплектыЭлектронныхДокументов(ДокументыИБ, УникальныйИдентификатор) Экспорт
//	
//	Соответствие = Новый Соответствие;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	СостоянияЭД.СсылкаНаОбъект КАК ДокументИБ,
//	|	ЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
//	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК поле3,
//	|	СостоянияЭД.ЭлектронныйДокумент.ВидЭД КАК ВидЭД,
//	|	СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
//	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
//	|	ОтветныеТитулы.Ссылка КАК ПодтверждениеСсылка,
//	|	ОтветныеТитулы.ТипЭлементаВерсииЭД КАК ВидЭДПодтверждения,
//	|	ОтветныеТитулы.УникальныйИД КАК УникальныйИДПодтверждения
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ОтветныеТитулы
//	|			ПО ЭДПрисоединенныеФайлы.Ссылка = ОтветныеТитулы.ЭлектронныйДокументВладелец
//	|				И (ОтветныеТитулы.ТипЭлементаВерсииЭД В (&ТипыЭлементовОтветныхТитулов))
//	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
//	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыЭлементовЭД))
//	|ГДЕ
//	|	СостоянияЭД.СсылкаНаОбъект В(&ВладелецФайла)
//	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В(&ВидыПервичныхТитулов)
//	|	И СостоянияЭД.СостояниеВерсииЭД В(&ОбменЗавершен)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДокументИБ,
//	|	ПрисоединенныйФайл";
//	
//	Запрос.УстановитьПараметр("ВладелецФайла", ДокументыИБ);
//	
//	ОбменЗавершен = Новый Массив;
//	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
//	ОбменЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
//	Запрос.УстановитьПараметр("ОбменЗавершен", ОбменЗавершен);
//	
//	ВидыПервичныхТитулов = Новый Массив;
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СчетФактура);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.УПД);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.УКД);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
//	ВидыПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктОРасхождениях);
//	Запрос.УстановитьПараметр("ВидыПервичныхТитулов", ВидыПервичныхТитулов);
//	
//	ТипыЭлементовЭД = Новый Массив;
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
//	ТипыЭлементовЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
//	
//	Запрос.УстановитьПараметр("ТипыЭлементовЭД", ТипыЭлементовЭД);
//	
//	ТипыЭлементовОтветныхТитулов = Новый Массив;
//	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
//	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
//	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
//	ТипыЭлементовОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
//	Запрос.УстановитьПараметр("ТипыЭлементовОтветныхТитулов", ТипыЭлементовОтветныхТитулов);
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Результат = Запрос.Выполнить().Выбрать();
//	УстановитьПривилегированныйРежим(Ложь);
//	Пока Результат.СледующийПоЗначениюПоля("ДокументИБ") Цикл
//		МассивФайловЭД = Новый Массив;
//		Пока Результат.СледующийПоЗначениюПоля("ПрисоединенныйФайл") Цикл
//			
//			СвойстваДокумента = Новый Структура;
//			СвойстваДокумента.Вставить("ВидЭД", Результат.ВидЭД);
//			СвойстваДокумента.Вставить("ТипЭлементаВерсииЭД", Результат.ТипЭлементаВерсииЭД);
//			Если ЗначениеЗаполнено(Результат.ПрисоединенныйФайл) Тогда
//				ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(Результат.ПрисоединенныйФайл);
//				СвойстваДокумента.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
//			КонецЕсли;
//			ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПрисоединенныйФайл,
//				СвойстваДокумента, Результат.УникальныйИД, "ФайлВыгрузки", УникальныйИдентификатор);
//			Если ЗначениеЗаполнено(Результат.ПодтверждениеСсылка) Тогда
//				
//				СвойстваДокумента.Вставить("Подтверждение", Истина);
//				
//				ЗаполнитьДанныеЭД(МассивФайловЭД, Результат.ПодтверждениеСсылка,
//					СвойстваДокумента, Результат.УникальныйИДПодтверждения, "ФайлПодтверждения", УникальныйИдентификатор);
//			КонецЕсли;
//		КонецЦикла;
//		Соответствие.Вставить(Результат.ДокументИБ, МассивФайловЭД);
//	КонецЦикла;
//	
//	Возврат Соответствие;
//	
//КонецФункции

//// Формирует сведения об ЭД, которые будут отражаться в едином списке документов,
//// представляемых по требованию ФНС. Включает документы по завершенным обменам,
//// не помеченным на удаление и принадлежащим следующим видам ЭД: 
//// УПД, СчетФактура, ТОРГ12Продавец, АктИсполнитель, АктНаПередачуПрав,
//// УКД, КорректировочныйСчетФактура, СоглашениеОбИзмененииСтоимостиОтправитель,
//// АктОРасхождениях.
////
//// Параметры:
////  СвойстваЭД - Соответствие - содержит следующие поля:
////     * Ключ     - СправочникСсылка.ЭДПрисоединенныеФайлы.
////     * Значение - Структура - Поля структуры:
////        ** ЭД              - СправочникСсылка.ЭДПрисоединенныеФайлы
////        ** ВладелецЭД      - ДокументСсылка - ссылка на объект метаданных - владельца файла.
////        ** ВидДокументаФНС - Строка - вид электронного документа преобразованный
////                             к строковому представлению определенного формата. 
////                             Возможные значения: 
////                             УПД, СчетФактура, ТоварнаяНакладнаяТОРГ12, АктПриемкиСдачиРабот, АктНаПередачуПрав,
////                             УКД, КорректировочныйСчетФактура, ДокументОбИзмененииСтоимости,
////                             ПередачаТоваров, ПередачаУслуг, АктОРасхождениях.
////  ДокументыИБ - Массив - массив ссылок на документы информационной базы.
////             Если массив заполнен, требуется заполнить свойства ЭД из массива.
////             Если массив пустой, тогда требуется заполнить свойства для всех ЭД,
////             удовлетворяющих свойствам, указанным выше.
////
//Процедура ОпределитьСвойстваЭДДляЖурналаДокументовПредставляемыхПоТребованиюФНС(СвойстваЭД, ДокументыИБ) Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	ТекстЗапроса = 
//	"ВЫБРАТЬ
//	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
//	|	ВЫБОР
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УПД)
//	|			ТОГДА ""УПД""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД)
//	|						ТОГДА ""УПД""
//	|					ИНАЧЕ ""СчетФактура""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УКД)
//	|			ТОГДА ""УКД""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)
//	|						ТОГДА ""УКД""
//	|					ИНАЧЕ ""КорректировочныйСчетФактура""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП)
//	|						ТОГДА ""ПередачаУслуг""
//	|					ИНАЧЕ ""АктПриемкиСдачиРабот""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП)
//	|						ТОГДА ""ПередачаТоваров""
//	|					ИНАЧЕ ""ТоварнаяНакладнаяТОРГ12""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктНаПередачуПрав)
//	|			ТОГДА ""АктНаПередачуПрав""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
//	|			ТОГДА ""ДокументОбИзмененииСтоимости""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктОРасхождениях)
//	|			ТОГДА ""АктОРасхождениях""
//	|		ИНАЧЕ """"
//	|	КОНЕЦ КАК ВидДокументаФНС,
//	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
//	|			И (СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД В (&ТипыЭД))
//	|ГДЕ
//	|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
//	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В(&ВидыЭД)
//	|	И НЕ СостоянияЭД.ЭлектронныйДокумент.ПометкаУдаления
//	|	И ЭДПрисоединенныеФайлы.ПодписанЭП";
//	
//	Если ЗначениеЗаполнено(ДокументыИБ) Тогда
//		ТекстЗапроса = ТекстЗапроса + " И СостоянияЭД.СсылкаНаОбъект В(&ДокументыИБ) ";
//		Запрос.УстановитьПараметр("ДокументыИБ", ДокументыИБ);
//	КонецЕсли;
//	
//	МассивВидовЭД = Новый Массив;
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.УПД);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.УКД);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктОРасхождениях);
//	Запрос.УстановитьПараметр("ВидыЭД", МассивВидовЭД);
//	
//	МассивТиповЭД = Новый Массив;
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
//	
//	Запрос.УстановитьПараметр("ТипыЭД", МассивТиповЭД);
//	
//	Запрос.Текст = ТекстЗапроса;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Результат = Запрос.Выполнить();
//	УстановитьПривилегированныйРежим(Ложь);
//	Выборка = Результат.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		СтруктураСвойств = Новый Структура;
//		СтруктураСвойств.Вставить("ВидДокументаФНС", Выборка.ВидДокументаФНС);
//		СтруктураСвойств.Вставить("ВладелецЭД", Выборка.ВладелецЭД);
//		СтруктураСвойств.Вставить("ЭД", Выборка.ЭД);
//		
//		СвойстваЭД.Вставить(Выборка.ЭД, СтруктураСвойств);
//	КонецЦикла;
//	
//КонецПроцедуры

//// Определяет владельца электронного документа.
////
//// Параметры:
////   ЭлектронныйДокумент - СправочникСсылка - ссылка на  электронный документ.
////   ВладелецЭД - ДокументСсылка - ссылка на владельца электронного документа.
////
//Процедура ОпределитьВладельцаЭлектронногоДокумента(ЭлектронныйДокумент, ВладелецЭД) Экспорт
//	
//	ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВладелецФайла");
//	
//КонецПроцедуры

//// Заполнение вида документа ФНС для владельцев электронных документов,
//// которые будут отражаться в едином списке документов, представляемых по требованию ФНС.
//// Выполняется для выбранных владельцев ЭД с завершенным обменом,
//// не помеченным на удаление и принадлежащим следующим видам ЭД:
//// УПД, СчетФактура, ТОРГ12Продавец, АктИсполнитель, АктНаПередачуПрав,
//// УКД, КорректировочныйСчетФактура, СоглашениеОбИзмененииСтоимостиОтправитель,
//// АктОРасхождениях.
////
//// Параметры:
////  СвойстваВладельцевЭД - Соответствие - Соответствие документов владельцев ЭД и видов ЭД:
////    * Ключ     - ДокументСсылка - ссылка на владельца электронного документа.
////    * Значение - Строка - вид электронного документа, преобразованный
////                 к строковому представлению определенного формата.
////                 Возможные значения:
////                 УПД, СчетФактура, ТоварнаяНакладнаяТОРГ12, АктПриемкиСдачиРабот, АктНаПередачуПрав,
////                 УКД, КорректировочныйСчетФактура, ДокументОбИзмененииСтоимости,
////                 ПередачаТоваров, ПередачаУслуг, АктОРасхождениях.
////  ВладельцыЭД - Массив - (необязательный) массив ссылок на владельцев электронные документы.
////                Если параметр указан, требуется заполнить свойства владельцев ЭД из массива.
////                Если параметр не указан или массив пустой, тогда требуется заполнить свойства
////                для всех владельцев ЭД, по которым ЭДО завершен.
////
//Процедура ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, ВладельцыЭД = Неопределено) Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	ТекстЗапроса = 
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
//	|	ВЫБОР
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УПД)
//	|			ТОГДА ""УПД""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД)
//	|						ТОГДА ""УПД""
//	|					ИНАЧЕ ""СчетФактура""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УКД)
//	|			ТОГДА ""УКД""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)
//	|						ТОГДА ""УКД""
//	|					ИНАЧЕ ""КорректировочныйСчетФактура""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП)
//	|						ТОГДА ""ПередачаУслуг""
//	|					ИНАЧЕ ""АктПриемкиСдачиРабот""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
//	|			ТОГДА ВЫБОР
//	|					КОГДА СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП)
//	|						ТОГДА ""ПередачаТоваров""
//	|					ИНАЧЕ ""ТоварнаяНакладнаяТОРГ12""
//	|				КОНЕЦ
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктНаПередачуПрав)
//	|			ТОГДА ""АктНаПередачуПрав""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
//	|			ТОГДА ""ДокументОбИзмененииСтоимости""
//	|		КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктОРасхождениях)
//	|			ТОГДА ""АктОРасхождениях""
//	|		ИНАЧЕ """"
//	|	КОНЕЦ КАК ПредставлениеЭД
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
//	|			И (СостоянияЭД.ЭлектронныйДокумент.ТипЭлементаВерсииЭД В (&ТипыЭД))
//	|ГДЕ
//	|	СостоянияЭД.СостояниеВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершенСИсправлением))
//	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В(&ВидыЭД)
//	|	И НЕ СостоянияЭД.ЭлектронныйДокумент.ПометкаУдаления
//	|	И ЭДПрисоединенныеФайлы.ПодписанЭП";
//		
//	Если ЗначениеЗаполнено(ВладельцыЭД) Тогда
//		ТекстЗапроса = ТекстЗапроса + " И СостоянияЭД.СсылкаНаОбъект В(&ВладельцыЭД) ";
//		Запрос.УстановитьПараметр("ВладельцыЭД", ВладельцыЭД);
//	КонецЕсли;
//	
//	МассивВидовЭД = Новый Массив;
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.УПД);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.УКД);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
//	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.АктОРасхождениях);
//	Запрос.УстановитьПараметр("ВидыЭД", МассивВидовЭД);
//	
//	МассивТиповЭД = Новый Массив;
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
//	МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
//	Запрос.УстановитьПараметр("ТипыЭД", МассивТиповЭД);
//	
//	Запрос.Текст = ТекстЗапроса;
//	
//	УстановитьПривилегированныйРежим(Истина);
//	Результат = Запрос.Выполнить();
//	УстановитьПривилегированныйРежим(Ложь);
//	Выборка = Результат.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		СвойстваВладельцевЭД.Вставить(Выборка.ВладелецЭД, Выборка.ПредставлениеЭД);
//	КонецЦикла;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ПроверкаИспользованияУниверсальныхДокументов

//// Получает признак использования универсального передаточного документа между участниками ЭДО.
////
//// Параметры:
////   Организация - Ссылка - элемент справочника Организации.
////   Контрагент - Ссылка - элемент справочника Контрагенты;
////   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
////
//// Возвращаемое значение:
////   Результат - Булево - признак использования универсального передаточного документа.
////
//Функция ИспользованиеУниверсальногоПередаточногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Результат = Ложь;
//	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	НастройкаЭДО.ИспользоватьУПД КАК ИспользоватьУПД,
//		|	ВЫБОР
//		|		КОГДА НастройкаЭДО.Договор = &ДоговорКонтрагента
//		|			ТОГДА 0
//		|		КОГДА НастройкаЭДО.Договор = &ПустойДоговорКонтрагента
//		|			ТОГДА 1
//		|		ИНАЧЕ 2
//		|	КОНЕЦ КАК Порядок
//		|ИЗ
//		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкаЭДО
//		|ГДЕ
//		|	НастройкаЭДО.Получатель = &Контрагент
//		|	И НастройкаЭДО.Отправитель = &Организация
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок";
//		
//		Запрос.УстановитьПараметр("Контрагент",               Контрагент);
//		Запрос.УстановитьПараметр("ДоговорКонтрагента",       ДоговорКонтрагента);
//		Запрос.УстановитьПараметр("ПустойДоговорКонтрагента", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип.ПривестиЗначение());
//		Запрос.УстановитьПараметр("Организация",              Организация);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		Если Не РезультатЗапроса.Пустой() Тогда
//			
//			Выборка = РезультатЗапроса.Выбрать();
//			Выборка.Следующий();
//			
//			Результат = Выборка.ИспользоватьУПД;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//// Получает признак использования универсального корректировочного документа между участниками ЭДО.
////
//// Параметры:
////   Организация - Ссылка - элемент справочника Организации.
////   Контрагент - Ссылка - элемент справочника Контрагенты;
////   ДоговорКонтрагента - Ссылка - элемент справочника ДоговораКонтрагентов.
////
//// Возвращаемое значение:
////   Результат - Булево - признак использования универсального корректировочного документа.
////
//Функция ИспользованиеУниверсальногоКорректировочногоДокумента(Организация, Контрагент, ДоговорКонтрагента = Неопределено) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Результат = Ложь;
//	Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Организация) Тогда
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	НастройкаЭДО.ИспользоватьУКД КАК ИспользоватьУКД,
//		|	ВЫБОР
//		|		КОГДА НастройкаЭДО.Договор = &ДоговорКонтрагента
//		|			ТОГДА 0
//		|		КОГДА НастройкаЭДО.Договор = &ПустойДоговорКонтрагента
//		|			ТОГДА 1
//		|		ИНАЧЕ 2
//		|	КОНЕЦ КАК Порядок
//		|ИЗ
//		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкаЭДО
//		|ГДЕ
//		|	НастройкаЭДО.Получатель = &Контрагент
//		|	И НастройкаЭДО.Отправитель = &Организация
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Порядок";
//		
//		Запрос.УстановитьПараметр("Контрагент",               Контрагент);
//		Запрос.УстановитьПараметр("ДоговорКонтрагента",       ДоговорКонтрагента);
//		Запрос.УстановитьПараметр("ПустойДоговорКонтрагента", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип.ПривестиЗначение());
//		Запрос.УстановитьПараметр("Организация",              Организация);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		Если Не РезультатЗапроса.Пустой() Тогда
//			
//			Выборка = РезультатЗапроса.Выбрать();
//			Выборка.Следующий();
//			
//			Результат = Выборка.ИспользоватьУКД;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

//#КонецОбласти

//#Область ПроверкаПравДоступа

//// Возвращает признак наличия у пользователя прав на чтение настройки ЭДО.
////
//// Возвращаемое значение:
////  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
////
//Функция ЕстьПравоЧтенияНастройкиОбмена() Экспорт
//	
//	Возврат ОбменСКонтрагентамиСлужебный.ЕстьПравоЧтенияНастройкиОбмена();
//	
//КонецФункции

//// Возвращает признак наличия у пользователя прав на настройку ЭДО.
////
//// Возвращаемое значение:
////  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
////
//Функция ЕстьПравоНастройкиОбмена() Экспорт
//	
//	Возврат ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
//	
//КонецФункции

//// Возвращает признак наличия у пользователя прав на выполнение ЭДО.
////
//// Возвращаемое значение:
////  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
////
//Функция ЕстьПравоВыполненияОбмена() Экспорт
//	
//	Возврат ОбменСКонтрагентамиСлужебный.ЕстьПравоВыполненияОбмена();
//	
//КонецФункции

//// Возвращает признак наличия у пользователя прав на добавление и изменение электронных документов.
////
//// Возвращаемое значение:
////  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
////
//Функция ЕстьПравоОбработкиЭД() Экспорт
//	
//	Возврат ОбменСКонтрагентамиСлужебный.ЕстьПравоОбработкиЭД();
//	
//КонецФункции

//#КонецОбласти

//// Возвращает способ обмена абонента ЭДО из сервиса настроек по его идентификатору.
////
//// Параметры:
////  ИдентификаторЭДО - Строка - идентификатор абонента.
////  Отказ - Булево - признак ошибки в процессе запроса сервиса. По умолчанию Ложь.
////
//// Возвращаемое значение:
////  ПеречислениеСсылка.СпособыОбменаЭД - способ обмена абонента.
////
//Функция СпособОбменаАбонентаЭДО(Знач ИдентификаторЭДО, Отказ = Ложь) Экспорт
//	
//	Возврат ОбменСКонтрагентамиСлужебный.СпособОбменаАбонентаЭДО(ИдентификаторЭДО, Отказ);
//	
//КонецФункции

//#Область ДляВызоваИзДругихПодсистем

//// СтандартныеПодсистемы.ОбновлениеКонфигурации

//#Область ОбработчикиОбновления

//// Обработчик обновления БЭД 1.2.2.1
//// Появился новый справочник ПрофилиНастроекЭДО.
//Процедура ЗаполнитьДанныеОПрофиляхНастроекЭДО() Экспорт
//	
//	НачатьТранзакцию();
//	
//	Попытка
//		// Пометим на удаление не действующие настройки ЭДО
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
//		|ИЗ
//		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//		|ГДЕ
//		|	НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
//		|	И УдалитьСоглашенияОбИспользованииЭД.СтатусСоглашения <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
//		|	И УдалитьСоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ПустаяСсылка)";
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
//			НастройкаЭДО.УстановитьПометкуУдаления(Истина);
//			НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
//		КонецЦикла;
//		
//		// Создаем элементы справочника ПрофилиНастроекЭДО.
//		// Проверим не было ли обновления.
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УдалитьПрофилиНастроекЭДО.Ссылка
//		|ИЗ
//		|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО";
//		
//		Результат = Запрос.Выполнить();
//		Если Результат.Пустой() Тогда
//			
//			ИспользуютсяЭП = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
//			
//			Запрос = Новый Запрос;
//			Запрос.Текст =
//			"ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	УдалитьСоглашенияОбИспользованииЭД.Организация,
//			|	ВЫРАЗИТЬ(УдалитьСоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
//			|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД,
//			|	ВЫБОР
//			|		КОГДА УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
//			|			ТОГДА УдалитьСоглашенияОбИспользованииЭД.Ссылка
//			|		ИНАЧЕ ИСТИНА
//			|	КОНЕЦ КАК Ссылка,
//			|	УдалитьСоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
//			|	УдалитьСоглашенияОбИспользованииЭД.УдалитьАдресСервера КАК АдресСервера,
//			|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПользователь КАК Пользователь,
//			|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПароль КАК Пароль,
//			|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПортFTP КАК Порт,
//			|	УдалитьСоглашенияОбИспользованииЭД.УдалитьПассивноеСоединениеFTP КАК ПассивноеСоединение
//			|ИЗ
//			|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//			|ГДЕ
//			|	УдалитьСоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
//			|	И УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
//			|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
//			|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
//			
//		СпособыОбменаЭД = Новый Массив;
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
//		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//			Пока Выборка.Следующий() Цикл
//				
//				НовыйПрофильНастроек = Справочники.УдалитьПрофилиНастроекЭДО.СоздатьЭлемент();
//				
//				ШаблонНаименование = НСтр("ru = '%1, %2'");
//				НовыйПрофильНастроек.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
//					Выборка.Организация, Выборка.СпособОбменаЭД);
//				
//				НовыйПрофильНастроек.Организация = Выборка.Организация;
//				НовыйПрофильНастроек.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
//				НовыйПрофильНастроек.СпособОбменаЭД = Выборка.СпособОбменаЭД;
//				
//				АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
//				
//				Для Каждого КлючИЗначение Из АктуальныеВидыЭД Цикл
//					ЗначениеПеречисления = КлючИЗначение.Ключ;
//					Если ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
//						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
//						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
//						И ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
//						И ЗначениеПеречисления <> Перечисления.ВидыЭД.УведомлениеОбУточнении
//						И ЗначениеПеречисления <> Перечисления.ВидыЭД.УдалитьОшибка
//						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ИзвещениеОПолучении
//						И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПрикладнойЭД Тогда
//						
//						НоваяСтрока = НовыйПрофильНастроек.ИсходящиеДокументы.Добавить();
//						НоваяСтрока.Формировать = Истина;
//						НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
//						
//						Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
//							НоваяСтрока.ИспользоватьЭП = Истина;
//						КонецЕсли;
//						
//						Если (ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
//							И Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
//							
//							НоваяСтрока.Формировать = Ложь;
//							НоваяСтрока.ИспользоватьЭП = Ложь;
//							
//						КонецЕсли;
//						// Проставим в новые соглашения прямого обмена версию формата обмена.
//						ВерсияФормата = "CML 4.02";
//						Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
//							ВерсияФормата = "";
//						ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктЗаказчик
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.АктИсполнитель
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Покупатель
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Продавец
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
//							ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
//							ВерсияФормата = НСтр("ru = 'ФНС 5.01'");
//						ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
//							ВерсияФормата = "CML 2.08";
//						КонецЕсли;
//						НоваяСтрока.ВерсияФормата = ВерсияФормата;
//						
//						Если НоваяСтрока.ИспользоватьЭП Тогда
//							НоваяСтрока.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
//						КонецЕсли;
//					КонецЕсли;
//				КонецЦикла;
//				
//				НовыйПрофильНастроек.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
//				
//				Если Выборка.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
//					И ИспользуютсяЭП Тогда
//					Запрос = Новый Запрос;
//					Запрос.Текст =
//					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//					|	СертификатыЭП.Ссылка
//					|ИЗ
//					|	Справочник.УдалитьСертификатыЭП КАК СертификатыЭП
//					|ГДЕ
//					|	НЕ СертификатыЭП.ПометкаУдаления
//					|	И НЕ СертификатыЭП.Отозван
//					|	И СертификатыЭП.Организация = &Организация";
//					Запрос.УстановитьПараметр("Организация", Выборка.Организация);
//					ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
//					Пока ВыборкаСертификатов.Следующий() Цикл
//						НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
//						НоваяСтрока.УдалитьСертификат = ВыборкаСертификатов.Ссылка;
//					КонецЦикла;
//				КонецЕсли;
//				
//				// Настройки обмена ЭД
//				Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
//					ПутьКаталога = Выборка.РесурсВходящихДокументов;
//					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
//					
//					Если СтрокиПути.Количество() >= 1 Тогда
//						НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
//					КонецЕсли;
//					ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
//					НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
//				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
//					НовыйПрофильНастроек.РесурсВходящихДокументов = Выборка.РесурсВходящихДокументов;
//				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
//					НовыйПрофильНастроек.АдресСервера             = Выборка.АдресСервера;
//					НовыйПрофильНастроек.Порт                     = Выборка.Порт;
//					НовыйПрофильНастроек.ПассивноеСоединение      = Выборка.ПассивноеСоединение;
//					НовыйПрофильНастроек.Логин                    = Выборка.Пользователь;
//					НовыйПрофильНастроек.Пароль                   = Выборка.Пароль;
//					ПутьКаталога = Выборка.РесурсВходящихДокументов;
//					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
//					Если СтрокиПути.Количество() >= 1 Тогда
//						НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
//					КонецЕсли;
//					ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
//					НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
//				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
//					// Настройки сертификатов - переносим в профиль.
//					Для каждого Строка Из Выборка.Ссылка.СертификатыПодписейОрганизации Цикл
//						НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
//						НоваяСтрока.Сертификат = Строка.Сертификат;
//					КонецЦикла;
//				КонецЕсли;
//				
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйПрофильНастроек);

//			КонецЦикла;
//		КонецЕсли;
//		
//		// Обновляем р/с СостоянияОбменовЭДЧерезОператоровЭДО
//		НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
//		НаборЗаписей.Прочитать();
//		
//		Для каждого Запись Из НаборЗаписей Цикл
//			Запрос = Новый Запрос;
//			Запрос.Текст =
//			"ВЫБРАТЬ
//			|	УдалитьПрофилиНастроекЭДО.Ссылка
//			|ИЗ
//			|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
//			|ГДЕ
//			|	УдалитьПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
//			|	И УдалитьПрофилиНастроекЭДО.Организация = &Организация";
//			Запрос.УстановитьПараметр("Организация", Запись.УдалитьСоглашениеОбИспользованииЭД.Организация);
//			Запрос.УстановитьПараметр("СпособОбменаЭД", Запись.УдалитьСоглашениеОбИспользованииЭД.СпособОбменаЭД);
//			Выборка = Запрос.Выполнить().Выбрать();
//			Если Выборка.Следующий() Тогда
//				Запись.УдалитьПрофильНастроекЭДО = Выборка.Ссылка;
//			КонецЕсли;
//		КонецЦикла;
//		
//		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
//		
//		// Обновляем соглашения прямого обмена.
//		// Проверим на уникальность настроек прямого обмена.
//		// Лишние настройки пометим на удаление.
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	КОЛИЧЕСТВО(УдалитьСоглашенияОбИспользованииЭД.Ссылка) КАК Ссылка,
//		|	УдалитьСоглашенияОбИспользованииЭД.Контрагент КАК Контрагент
//		|ПОМЕСТИТЬ КонтрагентыДубли
//		|ИЗ
//		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//		|ГДЕ
//		|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
//		|	И УдалитьСоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
//		|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	УдалитьСоглашенияОбИспользованииЭД.Контрагент
//		|
//		|ИМЕЮЩИЕ
//		|	КОЛИЧЕСТВО(УдалитьСоглашенияОбИспользованииЭД.Ссылка) > 1
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК Ссылка,
//		|	УдалитьСоглашенияОбИспользованииЭД.Контрагент КАК Контрагент
//		|ИЗ
//		|	КонтрагентыДубли КАК КонтрагентыДубли
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//		|		ПО КонтрагентыДубли.Контрагент = УдалитьСоглашенияОбИспользованииЭД.Контрагент
//		|ГДЕ
//		|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
//		|	И УдалитьСоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
//		|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Контрагент";
//		
//		СпособыОбменаЭД = Новый Массив;
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
//		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		ИскомыйКонтрагент = "";
//		Пока Выборка.Следующий() Цикл
//			Если ИскомыйКонтрагент = Выборка.Контрагент Тогда
//				НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
//				НастройкаЭДО.УстановитьПометкуУдаления(Истина);
//				НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
//			Иначе
//				ИскомыйКонтрагент = Выборка.Контрагент;
//			КонецЕсли;
//		КонецЦикла;
//		
//		// Заполним недостающую информацию в настройках ЭДО.
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка,
//		|	УдалитьПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
//		|	ВЫРАЗИТЬ(УдалитьСоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(100)) КАК ИдентификаторКонтрагента,
//		|	ВЫРАЗИТЬ(УдалитьСоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
//		|	УдалитьСоглашенияОбИспользованииЭД.Контрагент,
//		|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД,
//		|	УдалитьСоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
//		|	УдалитьСоглашенияОбИспользованииЭД.РесурсИсходящихДокументов
//		|ИЗ
//		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
//		|		ПО УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД = УдалитьПрофилиНастроекЭДО.СпособОбменаЭД
//		|			И УдалитьСоглашенияОбИспользованииЭД.Организация = УдалитьПрофилиНастроекЭДО.Организация
//		|ГДЕ
//		|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
//		|	И УдалитьСоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
//		|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
//		|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
//		
//		СпособыОбменаЭД = Новый Массив;
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
//		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			
//			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
//			
//			НастройкаЭДО.Наименование       = Строка(Выборка.Контрагент);
//			НастройкаЭДО.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;

//			ИсходнаяТаблицаЭД = НастройкаЭДО.ИсходящиеДокументы.Выгрузить();
//			
//			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ПрофильНастроекЭДО,       "ПрофильНастроекЭДО");
//			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.СпособОбменаЭД,           "СпособОбменаЭД");
//			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторОрганизации, "ИдентификаторОрганизации");
//			ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторКонтрагента, "ИдентификаторКонтрагента");
//			
//			НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
//			
//			// Добавим недостающие документы в ТЧ исходящие документы для прямого обмена.
//			Отбор = Новый Структура;
//			Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
//			НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
//			Если НайденныеСтроки.Количество() = 0 Тогда
//				Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
//				Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.СчетФактура;
//				Строка.Формировать              = Ложь;
//				Строка.ИспользоватьЭП           = Ложь;
//				Строка.ВерсияФормата            = НСтр("ru = 'ФНС 5.01'");
//				Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
//				Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
//				Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
//				Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
//				
//				Если Строка.ИспользоватьЭП Тогда
//					Строка.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
//				КонецЕсли;
//			КонецЕсли;
//			Отбор = Новый Структура;
//			Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
//			НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
//			Если НайденныеСтроки.Количество() = 0 Тогда
//				Строка = НастройкаЭДО.ИсходящиеДокументы.Добавить();
//				Строка.ИсходящийДокумент        = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//				Строка.Формировать              = Ложь;
//				Строка.ИспользоватьЭП           = Ложь;
//				Строка.ВерсияФормата            = НСтр("ru = 'ФНС 5.01'");
//				Строка.ПрофильНастроекЭДО       = Выборка.ПрофильНастроекЭДО;
//				Строка.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
//				Строка.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
//				Строка.ИдентификаторКонтрагента = Выборка.ИдентификаторКонтрагента;
//				
//				Если Строка.ИспользоватьЭП Тогда
//					Строка.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
//				КонецЕсли;
//			КонецЕсли;
//			
//			НастройкаЭДО.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
//			
//			НастройкаЭДО.СтатусПодключения   = Перечисления.СтатусыПриглашений.Принято;
//			НастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
//			
//			Если ЗначениеЗаполнено(НастройкаЭДО.СертификатОрганизацииДляРасшифровки) Тогда
//				ШифроватьДанныеПакетаЭД = Истина;
//			КонецЕсли;
//			Если НастройкаЭДО.СертификатыПодписейКонтрагента.Количество() > 0 Тогда
//				ПроверятьСертификатыПодписей = Истина;
//			КонецЕсли;
//			
//			// Настройки обмена ЭД
//			Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
//				ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
//				ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
//				СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
//				СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
//				
//				Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
//					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество() - 1];
//				КонецЕсли;
//				Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
//					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество() - 1];
//				КонецЕсли;
//				НастройкаЭДО.КаталогВходящихДокументов = НовоеИмяВходящегоКаталога;
//				НастройкаЭДО.КаталогИсходящихДокументов = НовоеИмяИсходящегоКаталога;
//				
//			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
//				НастройкаЭДО.ЭлектроннаяПочтаКонтрагента = Выборка.РесурсИсходящихДокументов;
//			
//			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
//				ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
//				ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
//				СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
//				СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
//				
//				Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
//					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество()-1];
//					
//				ИначеЕсли СтрокиПутиВходящегоКаталога.Количество() = 1 Тогда
//					НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[0];
//				КонецЕсли;
//				Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
//					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество()-1];
//					
//				ИначеЕсли СтрокиПутиИсходящегоКаталога.Количество() = 1 Тогда
//					НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[0];
//				КонецЕсли;
//				НастройкаЭДО.КаталогВходящихДокументовFTP = НовоеИмяВходящегоКаталога;
//				НастройкаЭДО.КаталогИсходящихДокументовFTP = НовоеИмяИсходящегоКаталога;
//			КонецЕсли;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);

//		КонецЦикла;
//		
//		// Обновляем соглашения обмена через оператора.
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ДатаИзмененияСтатуса,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Статус,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ФорматФайловОбменаЭД,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ОписаниеОшибки,
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.Организация КАК Организация
//		|ИЗ
//		|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
//		|ГДЕ
//		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
//		|	И НЕ УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.ПометкаУдаления";
//		
//		ВыборкаУчастников = Запрос.Выполнить().Выбрать();
//		Пока ВыборкаУчастников.Следующий() Цикл
//			
//			Если Не ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПометкаУдаления Тогда
//				НастройкаЭДО = ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПолучитьОбъект();
//				НастройкаЭДО.УстановитьПометкуУдаления(Истина);
//				НастройкаЭДО.Наименование = НСтр("ru = 'Не использовать'") + " - " + НастройкаЭДО.Наименование;
//				НастройкаЭДО.Комментарий = НСтр("ru = '##Настройка ЭДО помечена на удаление автоматически при обновлении.'");
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
//			КонецЕсли;
//			
//			Запрос = Новый Запрос;
//			Запрос.Текст =
//			"ВЫБРАТЬ
//			|	УдалитьПрофилиНастроекЭДО.Ссылка
//			|ИЗ
//			|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
//			|ГДЕ
//			|	УдалитьПрофилиНастроекЭДО.СпособОбменаЭД = Значение(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
//			|	И УдалитьПрофилиНастроекЭДО.Организация = &Организация";
//			Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
//			ВыборкаПрофилейНастроекЭДО = Запрос.Выполнить().Выбрать();
//			ВыборкаПрофилейНастроекЭДО.Следующий();
//			ПрофильНастроекЭДО = ВыборкаПрофилейНастроекЭДО.Ссылка;
//			
//			Запрос = Новый Запрос;
//			Запрос.Текст =
//			"ВЫБРАТЬ
//			|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО,
//			|	УдалитьСоглашенияОбИспользованииЭД.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
//			|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД КАК СпособОбменаЭД,
//			|	УдалитьСоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК Идентификатор,
//			|	УдалитьСоглашенияОбИспользованииЭД.СтатусПодключения
//			|ИЗ
//			|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//			|ГДЕ
//			|	НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
//			|	И УдалитьСоглашенияОбИспользованииЭД.Контрагент = &Контрагент
//			|	И УдалитьСоглашенияОбИспользованииЭД.Организация = &Организация";
//			
//			Запрос.УстановитьПараметр("Контрагент",  ВыборкаУчастников.Участник);
//			Запрос.УстановитьПараметр("Организация", ВыборкаУчастников.Организация);
//			ВыборкаНастроек = Запрос.Выполнить().Выбрать();
//			
//			Если ВыборкаНастроек.Следующий() Тогда
//				НастройкаЭДО = ВыборкаНастроек.НастройкаЭДО.ПолучитьОбъект();

//				Если Не ВыборкаНастроек.РасширенныйРежимНастройки
//					И ВыборкаНастроек.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
//					
//					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
//					
//					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
//						"ИдентификаторОрганизации, СпособОбменаЭД");
//					
//					Отбор = Новый Структура;
//					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.СчетФактура);
//					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
//					Для каждого Строка Из НайденныеСтроки Цикл
//						Строка.Формировать              = Истина;
//						Строка.ИспользоватьЭП           = Истина;
//						Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
//						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
//						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
//						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
//					КонецЦикла;
//					
//					Отбор = Новый Структура;
//					Отбор.Вставить("ИсходящийДокумент", Перечисления.ВидыЭД.КорректировочныйСчетФактура);
//					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
//					Для каждого Строка Из НайденныеСтроки Цикл
//						Строка.Формировать              = Истина;
//						Строка.ИспользоватьЭП           = Истина;
//						Строка.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
//						Строка.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
//						Строка.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
//						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
//					КонецЦикла;
//				Иначе
//					Отбор = Новый Структура;
//					Отбор.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
//					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
//					Для каждого Строка Из НайденныеСтроки Цикл
//						Строка.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
//					КонецЦикла;
//				КонецЕсли;
//			Иначе
//				НастройкаЭДО = Справочники.УдалитьСоглашенияОбИспользованииЭД.СоздатьЭлемент();
//				НастройкаЭДО.Контрагент = ВыборкаУчастников.Участник;
//				НастройкаЭДО.Наименование = Строка(ВыборкаУчастников.Участник);
//				
//				НастройкаЭДО.ПрофильНастроекЭДО = ПрофильНастроекЭДО;
//				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
//				"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
//				
//				НастройкаЭДО.Организация              = ПараметрыПрофиляНастроек.Организация;
//				НастройкаЭДО.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
//				НастройкаЭДО.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
//				НастройкаЭДО.ВерсияФорматаПакета      = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
//				
//				// Загружаем ТЧ из профиля настроек ЭДО.
//				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
//				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
//				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
//				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
//				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");
//				
//				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПрофильНастроекЭДО,                                "ПрофильНастроекЭДО");
//				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД,           "СпособОбменаЭД");
//				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
//				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ВыборкаУчастников.Идентификатор,                   "ИдентификаторКонтрагента");
//				
//				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
//			КонецЕсли;
//			
//			НастройкаЭДО.ИдентификаторКонтрагента = ВыборкаУчастников.Идентификатор;
//			НастройкаЭДО.СтатусПодключения = ВыборкаУчастников.Статус;
//			СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
//			Если ВыборкаУчастников.Статус = Перечисления.СтатусыПриглашений.Принято Тогда
//				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
//			ИначеЕсли ВыборкаУчастников.Статус = Перечисления.СтатусыПриглашений.Отклонено Тогда
//				СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
//			КонецЕсли;
//			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
//			
//			НастройкаЭДО.ОписаниеОшибки = ВыборкаУчастников.ОписаниеОшибки;
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);

//		КонецЦикла;
//		
//		// Определим и заполним в электронных документах реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
//		
//		СправочникКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент,
//		|	ЭДПрисоединенныеФайлы.УдалитьКонтрагент,
//		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация,
//		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
//		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО
//		|ИЗ
//		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
//		|		ПО ЭДПрисоединенныеФайлы.УдалитьКонтрагент = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент
//		|			И ЭДПрисоединенныеФайлы.УдалитьОрганизация = СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО.Организация
//		|ГДЕ
//		|	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
//		|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
//		|	И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД <> ЗНАЧЕНИЕ(Справочник.УдалитьСоглашенияОбИспользованииЭД.ПустаяСсылка)
//		|	И &ПроверкаТипаКонтрагенты
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО,
//		|	ЭДПрисоединенныеФайлы.Ссылка,
//		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
//		|	ЭДПрисоединенныеФайлы.УдалитьКонтрагент,
//		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация";
//		
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаТипаКонтрагенты",
//			"ЭДПрисоединенныеФайлы.УдалитьКонтрагент ССЫЛКА Справочник." + СправочникКонтрагенты);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//			
//		Пока Выборка.Следующий() Цикл
//			ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент.ПолучитьОбъект();
//			ЭлектронныйДокумент.УдалитьПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
//			ЭлектронныйДокумент.УдалитьСоглашениеЭД       = Выборка.НастройкаЭДО;
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлектронныйДокумент);
//		КонецЦикла;
//		
//		// Определим и заполним в незавершенных пакетахЭД реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ПакетЭД.Ссылка КАК ПакетЭД,
//		|	ПакетЭД.Отправитель,
//		|	ПакетЭД.Получатель,
//		|	ПакетЭД.УдалитьПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
//		|	ПакетЭД.Направление
//		|ИЗ
//		|	Документ.ПакетЭД КАК ПакетЭД
//		|ГДЕ
//		|	ПакетЭД.СтатусПакета В(&СтатусыПакетаЭД)
//		|	И НЕ ПакетЭД.ПометкаУдаления";
//		
//		СтатусыПакетаЭД = Новый Массив;
//		СтатусыПакетаЭД.Добавить(Перечисления.СтатусыПакетовЭД.КРаспаковке);
//		СтатусыПакетаЭД.Добавить(Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
//		Запрос.УстановитьПараметр("СтатусыПакетаЭД", СтатусыПакетаЭД);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			Если ЗначениеЗаполнено(Выборка.Отправитель) И ЗначениеЗаполнено(Выборка.Получатель)
//				И Не ЗначениеЗаполнено(Выборка.ПрофильНастроекЭДО) Тогда
//				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
//					ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Получатель, Выборка.Отправитель);
//				ИначеЕсли Выборка.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
//					ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Отправитель, Выборка.Получатель);
//				КонецЕсли;
//				Если ПараметрыНастройкиЭДО <> Неопределено Тогда
//					ПакетЭД = Выборка.ПакетЭД.ПолучитьОбъект();
//					ПакетЭД.УдалитьПрофильНастроекЭДО = ПараметрыНастройкиЭДО.ПрофильНастроекЭДО;
//					ПакетЭД.УдалитьНастройкаЭДО       = ПараметрыНастройкиЭДО.НастройкаЭДО;
//					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетЭД);
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//		
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.2.20
//// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
////
//Процедура НастроитьАвтоПереходНаНовыеВерсииФорматовЭД() Экспорт
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО
//		|ИЗ
//		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//		|ГДЕ
//		|	НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
//			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
//		КонецЦикла;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		
//		ОтменитьТранзакцию();
//		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
//		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
//		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения);
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.4.8
//// Добавляет новые виды ЭД в справочники БЭД.
////
//Процедура ДобавитьНовыеВидыЭДУПД_УКД() Экспорт
//	
//	ОбменСКонтрагентамиСлужебный.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца);
//	ОбменСКонтрагентамиСлужебный.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
//	
//	ОбменСКонтрагентамиСлужебный.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца);
//	ОбменСКонтрагентамиСлужебный.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.4
//// Заполняет в справочнике СоглашенияОбИспользованииЭД табличную часть ВходящиеДокументы
//// способами по умолчанию.
////
//Процедура ЗаполнитьВходящиеДокументыНастроек() Экспорт 
//	
//	НачатьТранзакцию();
//	
//	Попытка
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
//		|ИЗ
//		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД";
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			
//			Настройка = Выборка.Ссылка.ПолучитьОбъект();
//			Настройка.ВходящиеДокументы.Очистить();
//			Настройка.ВходящиеДокументы.Загрузить(ОбменСКонтрагентамиСлужебный.ТаблицаПредопределенногоПрофиля("Автоматически"));
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Настройка);
//			
//		КонецЦикла;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		
//		ОтменитьТранзакцию();
//		Операция = НСтр("ru = 'Обновление подсистемы обмена с контрагентами'");
//		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ТекстСообщения = НСтр("ru = 'При обновлении подсистемы обмена с контрагентами произошла ошибка'");
//		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения);
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.4.
//// Создает входящие и исходящие электронные документы и привязывает к ним существующие в базе присоединенные файлы.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////
//Процедура ПеревестиНаНовуюАрхитектуруЭДО(Параметры) Экспорт
//	
//	Параметры.ОбработкаЗавершена = Ложь;
//	
//	ТипыЭлементовВерсийЭД = Новый Массив;
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
//	ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
//	
//	ВидыИсключаемыхЭД = Новый Массив;
//	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
//	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
//	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
//	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
//	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
//	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
//	ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПустаяСсылка());
//	
//	Если НЕ Параметры.Свойство("ВсегоДокументовЭДО") Тогда
//		
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Файлы.Ссылка) КАК КоличествоДокументов
//		|ИЗ
//		|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
//		|ГДЕ
//		|	Файлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
//		|	И НЕ Файлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//		|	И НЕ Файлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
//		|	И НЕ Файлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)");
//		
//		Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД", ТипыЭлементовВерсийЭД);
//		Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",     ВидыИсключаемыхЭД);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Параметры.Вставить("ВсегоДокументовЭДО", Выборка.КоличествоДокументов);
//		Иначе
//			Параметры.Вставить("ВсегоДокументовЭДО", 0);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1000
//	|	ЭДПрисоединенныеФайлы.УдалитьВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
//	|	ЭДПрисоединенныеФайлы.УдалитьВидЭД КАК ВидЭД,
//	|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаВыпискиБанка,
//	|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
//	|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатусаЭД,
//	|	ЭДПрисоединенныеФайлы.УдалитьКонтрагент КАК Контрагент,
//	|	ЭДПрисоединенныеФайлы.УдалитьНомерВерсииЭД КАК НомерВерсииЭД,
//	|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
//	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
//	|	ЭДПрисоединенныеФайлы.УдалитьОрганизация КАК Организация,
//	|	ЭДПрисоединенныеФайлы.УдалитьОтветственный КАК Ответственный,
//	|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
//	|	ЭДПрисоединенныеФайлы.УдалитьПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
//	|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД КАК НастройкаЭДО,
//	|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
//	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
//	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
//	|	ЭДПрисоединенныеФайлы.УдалитьВладелецФайла КАК ВладелецФайла,
//	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
//	|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
//	|	ЭДПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
//	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, НЕОПРЕДЕЛЕНО) КАК СостояниеВерсииЭД,
//	|	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий,
//	|	ЭДПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
//	|	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
//	|		ИдентификаторДокументаОснования КАК ИдентификаторДокументаОснования,
//	|		ИдентификаторЭДДокументаОснования КАК ИдентификаторЭДДокументаОснования
//	|	) КАК Основания,
//	|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ) КАК ИспользоватьЭП
//	|ИЗ
//	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
//	|			И (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.УдалитьВладелецФайла)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
//	|		ПО ЭДПрисоединенныеФайлы.УдалитьВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
//	|			И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
//	|ГДЕ
//	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
//	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
//	|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДатаСоздания УБЫВ");
//	
//	Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД", ТипыЭлементовВерсийЭД);
//	Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",     ВидыИсключаемыхЭД);
//	
//	Результат = Запрос.Выполнить();
//	
//	Пока НЕ Результат.Пустой() Цикл
//		
//		НачатьТранзакцию();
//		
//		Попытка
//			
//			Выборка = Результат.Выбрать();
//			
//			Если Параметры.Свойство("ОбработаноДокументовЭДО") Тогда
//				Параметры.ОбработаноДокументовЭДО = Параметры.ОбработаноДокументовЭДО + Выборка.Количество();
//			Иначе
//				Параметры.Вставить("ОбработаноДокументовЭДО", Выборка.Количество());
//			КонецЕсли;
//			
//			Параметры.ПрогрессВыполнения.ВсегоОбъектов      = Параметры.ВсегоДокументовЭДО;
//			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументовЭДО;
//			
//			Пока Выборка.Следующий() Цикл
//				
//				Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
//					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
//					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
//					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
//					Если ЗначениеЗаполнено(Выборка.ВладелецФайла) Тогда
//						НоваяСтрока.СпособОбработки = Выборка.ВладелецФайла.Метаданные().Имя;
//					КонецЕсли;
//				Иначе
//					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
//					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
//					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
//				КонецЕсли;
//				
//				ВыборкаОснований = Выборка.Основания.Выбрать();
//				
//				Пока ВыборкаОснований.Следующий() Цикл
//					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
//					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
//				КонецЦикла;
//				
//				ТребуетсяИзвещение = Истина;
//				
//				Если (Выборка.ВидЭД = Перечисления.ВидыЭД.СчетФактура Или Выборка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
//					И Не (Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД 
//						Или Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
//						Или Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД) Тогда
//					ТребуетсяПодтверждение = Ложь;
//					
//				Иначе
//					Если Выборка.ИспользоватьЭП Тогда
//						
//						ТребуетсяПодтверждение = Истина;
//						Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
//							ТребуетсяПодтверждение = Ложь;
//						КонецЕсли;
//						
//					Иначе
//						ТребуетсяПодтверждение = Ложь;
//						
//					КонецЕсли;
//				КонецЕсли;
//				
//				ДокументОбъект.ТребуетсяИзвещение     = ТребуетсяИзвещение;
//				ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
//				
//				ДокументОбъект.Дата = Выборка.ДатаСоздания;
//				ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
//				
//				ДокументОбъект.УстановитьНовыйНомер();
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//				
//				// Запишем поле "ВладелецФайла".
//				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
//				СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
//				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
//				
//				// Определим "Состояние" и "Комментарий".
//				СостояниеВерсииЭД = Выборка.СостояниеВерсииЭД;
//				Комментарий       = Выборка.Комментарий;
//				Если Не ЗначениеЗаполнено(СостояниеВерсииЭД) Тогда
//					
//					// В регистре состояний в поле "ЭлектронныйДокумент" указан вторичный титул.
//					// Получим информацию через владельца.
//					
//					Набор = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
//					Набор.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла);
//					Набор.Прочитать();
//					
//					Если Набор.Количество() Тогда
//						СостояниеВерсииЭД = Набор[0].СостояниеВерсииЭД;
//						Комментарий       = Набор[0].Комментарий;
//					КонецЕсли;
//					
//				КонецЕсли;
//				
//				// Запишем поле "СостояниеЭДО".
//				Если СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
//					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
//					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента
//					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
//					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
//					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
//					ИЛИ СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
//					
//					ДокументОбъект.СостояниеЭДО = СостояниеВерсииЭД;
//					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения) И НЕ ПустаяСтрока(Комментарий) Тогда
//						ДокументОбъект.ПричинаОтклонения = Комментарий;
//					КонецЕсли;
//				Иначе
//					ДокументОбъект.СостояниеЭДО = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.Ссылка);
//					Если Не ЗначениеЗаполнено(ДокументОбъект.СостояниеЭДО) Тогда
//						ДокументОбъект.СостояниеЭДО = СостояниеВерсииЭД
//					КонецЕсли;
//				КонецЕсли;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//				
//				// Обработка подчиненных ЭД по цепочке.
//				ВыборкаЭД = ПолучитьВыборкуЭД(Выборка.УникальныйИД, Выборка.ВладелецФайла);
//				ВторойТитул = Неопределено;
//				Пока ВыборкаЭД.Следующий() Цикл
//					
//					СправочникОбъект = ВыборкаЭД.Ссылка.ПолучитьОбъект();
//					СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
//					
//					Если СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
//						СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
//						ВторойТитул = ВыборкаЭД.Ссылка;
//					ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
//						СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
//						ВторойТитул = ВыборкаЭД.Ссылка;
//					ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
//						СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
//						ВторойТитул = ВыборкаЭД.Ссылка;
//					КонецЕсли;
//					
//					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
//					
//				КонецЦикла;
//				
//				// Скорректируем записи регистра состояний.
//				ЗапросСостояние = Новый Запрос(
//				"ВЫБРАТЬ
//				|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
//				|ИЗ
//				|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//				|ГДЕ
//				|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	СостоянияЭД.СсылкаНаОбъект
//				|ИЗ
//				|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//				|ГДЕ
//				|	ВЫБОР
//				|		КОГДА &ВторойТитул <> НЕОПРЕДЕЛЕНО
//				|			ТОГДА СостоянияЭД.ЭлектронныйДокумент = &ВторойТитул
//				|		ИНАЧЕ ЛОЖЬ
//				|	КОНЕЦ");
//				
//				ЗапросСостояние.УстановитьПараметр("ЭлектронныйДокумент", Выборка.Ссылка);
//				ЗапросСостояние.УстановитьПараметр("ВторойТитул",         ВторойТитул);
//				
//				ВыборкаСостояние = ЗапросСостояние.Выполнить().Выбрать();
//				Пока ВыборкаСостояние.Следующий() Цикл
//					
//					НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
//					НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаСостояние.СсылкаНаОбъект, Истина);
//					НаборЗаписей.Прочитать();
//					
//					НаборЗаписей[0].ЭлектронныйДокумент = ДокументОбъект.Ссылка;
//					НаборЗаписей.Записать();
//					
//					// Для УПД необходимо добавить первичный документ в документы основания.
//					Если ДокументОбъект.ДокументыОснования.Найти(ВыборкаСостояние.СсылкаНаОбъект, "ДокументОснование") = Неопределено Тогда
//						СтрокаОснование = ДокументОбъект.ДокументыОснования.Добавить();
//						СтрокаОснование.ДокументОснование = ВыборкаСостояние.СсылкаНаОбъект;
//						Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
//							СтрокаОснование.СпособОбработки = ВыборкаСостояние.СсылкаНаОбъект.Метаданные().Имя;
//						КонецЕсли;
//						ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
//					КонецЕсли;
//					
//				КонецЦикла;
//				
//			КонецЦикла;
//			
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			
//			Операция = НСтр("ru = 'Перенос данных электронных документов на новую архитектуру'");
//			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки);
//			
//			ВызватьИсключение;
//			
//		КонецПопытки;
//		
//		Результат = Запрос.Выполнить();
//		
//	КонецЦикла;
//	
//	Параметры.ОбработкаЗавершена = Истина;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.4.
//// Переводит на новую архитектуру произвольные документы.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////
//Процедура ПеревестиНаНовуюАрхитектуруПроизвольныхЭД(Параметры) Экспорт 
//	
//	Параметры.ОбработкаЗавершена = Ложь;
//	
//	Если НЕ Параметры.Свойство("ВсегоПроизвольныхЭД") Тогда
//		
//		Запрос = Новый Запрос(
//		"ВЫБРАТЬ
//		|	КОЛИЧЕСТВО(ПроизвольныйЭД.Ссылка) КАК КоличествоДокументов
//		|ИЗ
//		|	Документ.УдалитьПроизвольныйЭД КАК ПроизвольныйЭД
//		|ГДЕ
//		|	НЕ ПроизвольныйЭД.ПометкаУдаления");
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Параметры.Вставить("ВсегоПроизвольныхЭД", Выборка.КоличествоДокументов);
//		Иначе
//			Параметры.Вставить("ВсегоПроизвольныхЭД", 0);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1000
//	|	ПроизвольныйЭД.Направление КАК Направление,
//	|	ПроизвольныйЭД.Прочитан КАК Прочитан,
//	|	ПроизвольныйЭД.СтатусДокумента КАК СтатусДокумента,
//	|	ВЫРАЗИТЬ(ПроизвольныйЭД.Текст КАК СТРОКА(1000)) КАК Текст,
//	|	ПроизвольныйЭД.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
//	|	ПроизвольныйЭД.ТипДокумента КАК ТипДокумента,
//	|	ПроизвольныйЭД.ДокументОснование КАК ДокументОснование,
//	|	ПроизвольныйЭД.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	|	ЭДПрисоединенныеФайлы.УдалитьВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
//	|	ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД) КАК ВидЭД,
//	|	ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД) КАК ТипЭлементаВерсииЭД,
//	|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаВыпискиБанка,
//	|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
//	|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатусаЭД,
//	|	ЭДПрисоединенныеФайлы.УдалитьНомерВерсииЭД КАК НомерВерсииЭД,
//	|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
//	|	ЭДПрисоединенныеФайлы.УдалитьОтветственный КАК Ответственный,
//	|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
//	|	ЭДПрисоединенныеФайлы.УдалитьПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
//	|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД КАК НастройкаЭДО,
//	|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
//	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
//	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК УникальныйИДВнешний,
//	|	ПроизвольныйЭД.Организация КАК Организация,
//	|	ПроизвольныйЭД.Контрагент КАК Контрагент,
//	|	ПроизвольныйЭД.Дата КАК Дата,
//	|	ПроизвольныйЭД.Ссылка КАК Ссылка,
//	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
//	|	ПроизвольныйЭД.Номер КАК НомерПЭД,
//	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
//	|	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
//	|		ИдентификаторДокументаОснования КАК ИдентификаторДокументаОснования,
//	|		ИдентификаторЭДДокументаОснования КАК ИдентификаторЭДДокументаОснования
//	|	) КАК Основания,
//	|	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий
//	|ИЗ
//	|	Документ.УдалитьПроизвольныйЭД КАК ПроизвольныйЭД
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	|		ПО ПроизвольныйЭД.Ссылка = ЭДПрисоединенныеФайлы.УдалитьВладелецФайла
//	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД))
//	|			И (ЭДПрисоединенныеФайлы.ВладелецФайла = НЕОПРЕДЕЛЕНО)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|		ПО (СостоянияЭД.СсылкаНаОбъект = ПроизвольныйЭД.Ссылка)
//	|ГДЕ
//	|	НЕ ПроизвольныйЭД.ПометкаУдаления
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ПроизвольныйЭД.Дата УБЫВ");
//	
//	Результат = Запрос.Выполнить();
//	
//	Пока НЕ Результат.Пустой() Цикл
//		
//		НачатьТранзакцию();
//		
//		Попытка
//			
//			Выборка = Результат.Выбрать();
//			
//			Если Параметры.Свойство("ОбработаноПроизвольныхЭД") Тогда
//				Параметры.ОбработаноПроизвольныхЭД = Параметры.ОбработаноПроизвольныхЭД + Выборка.Количество();
//			Иначе
//				Параметры.Вставить("ОбработаноПроизвольныхЭД", Выборка.Количество());
//			КонецЕсли;
//			
//			Параметры.ПрогрессВыполнения.ВсегоОбъектов      = Параметры.ВсегоПроизвольныхЭД;
//			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноПроизвольныхЭД;
//			
//			Пока Выборка.Следующий() Цикл
//				
//				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
//					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
//					Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
//						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
//						НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
//					КонецЕсли;
//				Иначе
//					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
//					Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
//						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
//						НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
//					КонецЕсли;
//				КонецЕсли;
//				
//				ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
//				
//				ДокументОбъект.НомерДокументаОтправителя = Выборка.НомерПЭД;
//				Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
//					ДокументОбъект.ДатаДокументаОтправителя = Выборка.Дата;
//				КонецЕсли;
//				
//				Если ДокументОбъект.УдалитьПрофильНастроекЭДО.Пустая() Тогда
//					ПараметрыОпределенияНастройки = Новый Структура("ВидЭД", ДокументОбъект.ВидЭД);
//					НастройкиЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ДокументОбъект, ПараметрыОпределенияНастройки); 
//					Если ЗначениеЗаполнено(НастройкиЭД) Тогда
//						ДокументОбъект.УдалитьНастройкаЭДО = НастройкиЭД.СоглашениеЭД;
//						ДокументОбъект.УдалитьПрофильНастроекЭДО = НастройкиЭД.ПрофильНастроекЭДО;
//					КонецЕсли;
//				КонецЕсли;
//				
//				Если ДокументОбъект.ВерсияРегламентаЭДО.Пустая() Тогда
//					ДокументОбъект.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
//				КонецЕсли;
//				
//				Если ПустаяСтрока(ДокументОбъект.УникальныйИД) Тогда
//					ДокументОбъект.УникальныйИД = Новый УникальныйИдентификатор;
//				КонецЕсли;
//				
//				ВыборкаОснований = Выборка.Основания.Выбрать();
//				
//				Пока ВыборкаОснований.Следующий() Цикл
//					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
//					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
//				КонецЦикла;
//				
//				ДокументОбъект.УстановитьНовыйНомер();
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//				
//				ФайлОбъект = Выборка.ЭД.ПолучитьОбъект();
//				ФайлОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
//				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФайлОбъект);
//				
//				ВыборкаЭД = ПолучитьВыборкуЭД(Выборка.УникальныйИД, Выборка.Ссылка);
//				
//				Пока ВыборкаЭД.Следующий() Цикл
//					СправочникОбъект = ВыборкаЭД.Ссылка.ПолучитьОбъект();
//					СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
//					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
//				КонецЦикла;
//				
//				Если Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
//					
//					ДокументОбъект.СостояниеЭДО = Выборка.СостояниеВерсииЭД;
//					
//					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения) 
//						И НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
//						
//						ДокументОбъект.ПричинаОтклонения = Выборка.Комментарий;
//					КонецЕсли;
//					
//					НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
//					НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.Ссылка,Истина);
//					НаборЗаписей.Записать();
//				Иначе
//					
//					Если ЗначениеЗаполнено(Выборка.ЭД) Тогда
//						ДокументОбъект.СостояниеЭДО = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.ЭД);
//					Иначе
//						ДокументОбъект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован;
//					КонецЕсли;
//					
//				КонецЕсли;
//				
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//				
//				ПроизвольныйДокумент = Выборка.Ссылка.ПолучитьОбъект();
//				ПроизвольныйДокумент.ПометкаУдаления = Истина;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПроизвольныйДокумент);
//				
//			КонецЦикла;
//			
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			
//			Операция = НСтр("ru = 'Перенос данных произвольных электронных документов на новую архитектуру'");
//			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки);
//			
//			ВызватьИсключение;
//			
//		КонецПопытки;
//		
//		Результат = Запрос.Выполнить();
//		
//	КонецЦикла;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	ИсходящийДокументыОснования.Ссылка КАК Ссылка,
//	|	ИсходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
//	|	ВЫРАЗИТЬ(ИсходящийДокументыОснования.ДокументОснование КАК Документ.УдалитьПроизвольныйЭД).Направление КАК НаправлениеЭД,
//	|	ИсходящийИдентификаторыОснований.ИдентификаторДокументаОснования КАК ИдентификаторДокументаОснования,
//	|	ИсходящийИдентификаторыОснований.ИдентификаторЭДДокументаОснования КАК ИдентификаторЭДДокументаОснования
//	|ПОМЕСТИТЬ вт_Документы
//	|ИЗ
//	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ИсходящийДокументыОснования
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ИсходящийИдентификаторыОснований
//	|		ПО ИсходящийДокументыОснования.Ссылка = ИсходящийИдентификаторыОснований.Ссылка
//	|ГДЕ
//	|	ИсходящийДокументыОснования.Ссылка.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
//	|	И ИсходящийДокументыОснования.ДокументОснование ССЫЛКА Документ.УдалитьПроизвольныйЭД
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ВходящийДокументыОснования.Ссылка,
//	|	ВходящийДокументыОснования.ДокументОснование,
//	|	ВЫРАЗИТЬ(ВходящийДокументыОснования.ДокументОснование КАК Документ.УдалитьПроизвольныйЭД).Направление,
//	|	ВходящийИдентификаторыОснований.ИдентификаторДокументаОснования,
//	|	ВходящийИдентификаторыОснований.ИдентификаторЭДДокументаОснования
//	|ИЗ
//	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ВходящийДокументыОснования
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ВходящийИдентификаторыОснований
//	|		ПО (ВходящийИдентификаторыОснований.Ссылка = ВходящийДокументыОснования.Ссылка)
//	|ГДЕ
//	|	ВходящийДокументыОснования.Ссылка.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
//	|	И ВходящийДокументыОснования.ДокументОснование ССЫЛКА Документ.УдалитьПроизвольныйЭД
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	вт_Документы.Ссылка КАК Ссылка,
//	|	вт_Документы.ДокументОснование КАК ДокументОснование,
//	|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
//	|ИЗ
//	|	вт_Документы КАК вт_Документы
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
//	|		ПО вт_Документы.ИдентификаторДокументаОснования = ПрисоединенныеФайлы.НомерЭД
//	|			И (ПрисоединенныеФайлы.НаправлениеЭД = вт_Документы.НаправлениеЭД)");
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Если ЗначениеЗаполнено(Выборка.ВладелецФайла) Тогда
//			
//			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			
//			СтрокаОснования = ДокументОбъект.ДокументыОснования.Найти(Выборка.ДокументОснование, "ДокументОснование");
//			
//			Если СтрокаОснования = Неопределено Тогда
//				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
//				НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
//			Иначе
//				СтрокаОснования.ДокументОснование = Выборка.ВладелецФайла;
//			КонецЕсли;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Параметры.ОбработкаЗавершена = Истина;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.4
//// Удаляет распакованные пакеты ЭД и переводит на новую архитектуру нераспакованные.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////
//Процедура ПеревестиНаНовуюАрхитектуруПакетыЭД(Параметры) Экспорт 
//	
//	Параметры.ОбработкаЗавершена = Ложь;
//	
//	УдаляемыеСтатусы = Новый Массив;
//	УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Отправлен);
//	УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Распакован);
//	УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Отменен);
//	УдаляемыеСтатусы.Добавить(Перечисления.СтатусыПакетовЭД.Неизвестный);
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("УдаляемыеСтатусы", УдаляемыеСтатусы);
//	
//	// Пометка на удаление пакетов.
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1000
//	|	ПакетЭД.Ссылка КАК Ссылка
//	|ИЗ
//	|	Документ.ПакетЭД КАК ПакетЭД
//	|ГДЕ
//	|	ПакетЭД.СтатусПакета В(&УдаляемыеСтатусы)
//	|	И НЕ ПакетЭД.ПометкаУдаления";
//	
//	Результат = Запрос.Выполнить();
//	Пока Не Результат.Пустой() Цикл
//		
//		НачатьТранзакцию();
//		
//		Попытка
//			
//			Выборка = Результат.Выбрать();
//			Пока Выборка.Следующий() Цикл
//				ПакетОбъект = Выборка.Ссылка.ПолучитьОбъект();
//				ПакетОбъект.УстановитьПометкуУдаления(Истина);
//			КонецЦикла;
//			
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			
//			Операция = НСтр("ru = 'Пометка на удаление пакетов электронных документов'");
//			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки);
//			
//			ВызватьИсключение;
//			
//		КонецПопытки;
//		
//		Результат = Запрос.Выполнить();
//		
//	КонецЦикла;
//	
//	// Перевод на новую архитектуру.
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ПакетЭД.Ссылка КАК Ссылка
//	|ИЗ
//	|	Документ.ПакетЭД КАК ПакетЭД
//	|ГДЕ
//	|	НЕ ПакетЭД.СтатусПакета В (&УдаляемыеСтатусы)";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ЗапросФайлов = Новый Запрос(
//	"ВЫБРАТЬ
//	|	Файлы.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
//	|ГДЕ
//	|	Файлы.УдалитьВладелецФайла = &ВладелецФайла");
//	
//	Пока Выборка.Следующий() Цикл
//		
//		НачатьТранзакцию();
//		
//		Попытка
//			
//			ЗапросФайлов.УстановитьПараметр("ВладелецФайла", Выборка.Ссылка);
//			
//			ВыборкаФайлов = ЗапросФайлов.Выполнить().Выбрать();
//			Пока ВыборкаФайлов.Следующий() Цикл
//				
//				ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВыборкаФайлов.Ссылка,, Истина);
//				
//				ПараметрыФайла = Новый Структура;
//				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
//				ПараметрыФайла.Вставить("ВладелецФайлов",     Выборка.Ссылка);
//				ПараметрыФайла.Вставить("ИмяБезРасширения",   ДанныеФайла.ИмяФайла);
//				ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеФайла.Расширение);
//				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
//				
//				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
//				
//				ФайлОбъект = ВыборкаФайлов.Ссылка.ПолучитьОбъект();
//				ФайлОбъект.ПометкаУдаления = Истина;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ФайлОбъект);
//				
//			КонецЦикла;
//			
//			ПакетОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			
//			Для Каждого СтрокаВладельца Из ПакетОбъект.ЭлектронныеДокументы Цикл
//				Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВладельца.ЭлектронныйДокумент, "ВладелецФайла");
//				СтрокаВладельца.ОбъектВладелец = Владелец;
//			КонецЦикла;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетОбъект);
//			
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			
//			Операция = НСтр("ru = 'Перенос данных пакетов электронных документов на новую архитектуру'");
//			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки);
//			
//			ВызватьИсключение;
//			
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Параметры.ОбработкаЗавершена = Истина;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.7
//// Добавляет новые виды ЭД в справочники БЭД.
////
//Процедура УдалитьНовыеВидыЭДУПД_УКД() Экспорт
//	
//	НачатьТранзакцию();
//	
//	Попытка
//		// Обновим элементы справочника Профили настроек ЭДО.
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УдалитьПрофилиНастроекЭДО.Ссылка
//		|ИЗ
//		|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО";
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		Пока Результат.Следующий() Цикл
//			
//			ИскомыйПрофильНастроек = Результат.Ссылка.ПолучитьОбъект();
//			ЗаписатьОбъект = Истина;
//			
//			СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца, "ИсходящийДокумент");
//			Если СтрокаВидЭД <> Неопределено Тогда
//				ИскомыйПрофильНастроек.ИспользоватьУПД = СтрокаВидЭД.Формировать;
//				ИскомыйПрофильНастроек.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
//			КонецЕсли;
//			
//			СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца, "ИсходящийДокумент");
//			Если СтрокаВидЭД <> Неопределено Тогда
//				ИскомыйПрофильНастроек.ИспользоватьУКД = СтрокаВидЭД.Формировать;
//				ИскомыйПрофильНастроек.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
//			КонецЕсли;
//			
//			Для каждого Строка Из ИскомыйПрофильНастроек.ИсходящиеДокументы Цикл
//				
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
//					Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУПД;
//					Строка.Приоритет = 1;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
//					Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУПД;
//					Строка.Приоритет = 2;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
//					Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУПД;
//					Строка.Приоритет = 3;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
//					Строка.ВерсияФормата = ?(ИскомыйПрофильНастроек.ИспользоватьУПД, НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
//					Строка.Приоритет = 4;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
//					Строка.Формировать = Не ИскомыйПрофильНастроек.ИспользоватьУКД;
//					Строка.Приоритет = 5;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
//					Строка.ВерсияФормата = ?(ИскомыйПрофильНастроек.ИспользоватьУКД, НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
//					Строка.Приоритет = 6;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
//					Строка.Приоритет = 7;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
//					Строка.Приоритет = 10;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетНаОплату Тогда
//					Строка.Приоритет = 11;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПрайсЛист Тогда
//					Строка.Приоритет = 12;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ЗаказТовара Тогда
//					Строка.Приоритет = 13;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
//					Строка.Приоритет = 14;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
//					Строка.Приоритет = 15;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
//					Строка.Приоритет = 16;
//				КонецЕсли;
//				
//				Если Не ЗначениеЗаполнено(Строка.ДокументУчета) Тогда
//					Строка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(Строка.ИсходящийДокумент);
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			ИскомыйПрофильНастроек.ИсходящиеДокументы.Сортировать("Приоритет Возр");
//			
//			Если ЗаписатьОбъект Тогда
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомыйПрофильНастроек);
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		// Обновим элементы справочника Настройки ЭДО.
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка
//		|ИЗ
//		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//		|ГДЕ
//		|	УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
//		
//		СпособыОбменаЭД = Новый Массив;
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
//		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		Пока Результат.Следующий() Цикл
//			
//			ИскомаяНастройка = Результат.Ссылка.ПолучитьОбъект();
//			ЗаписатьОбъект = Истина;
//			
//			СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца, "ИсходящийДокумент");
//			Если СтрокаВидЭД <> Неопределено Тогда
//				ИскомаяНастройка.ИспользоватьУПД = СтрокаВидЭД.Формировать;
//				ИскомаяНастройка.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
//			КонецЕсли;
//			
//			СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца, "ИсходящийДокумент");
//			Если СтрокаВидЭД <> Неопределено Тогда
//				ИскомаяНастройка.ИспользоватьУКД = СтрокаВидЭД.Формировать;
//				ИскомаяНастройка.ИсходящиеДокументы.Удалить(СтрокаВидЭД);
//			КонецЕсли;
//			
//			Для каждого Строка Из ИскомаяНастройка.ИсходящиеДокументы Цикл
//				
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
//					Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУПД;
//					Строка.Приоритет = 1;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
//					Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУПД;
//					Строка.Приоритет = 2;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
//					Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУПД;
//					Строка.Приоритет = 3;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
//					Строка.ВерсияФормата = ?(ИскомаяНастройка.ИспользоватьУПД, НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
//					Строка.Приоритет = 4;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
//					Строка.Формировать = Не ИскомаяНастройка.ИспользоватьУКД;
//					Строка.Приоритет = 5;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
//					Строка.ВерсияФормата = ?(ИскомаяНастройка.ИспользоватьУКД, НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.02'"));
//					Строка.Приоритет = 6;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
//					Строка.Приоритет = 7;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
//					Строка.Приоритет = 10;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетНаОплату Тогда
//					Строка.Приоритет = 11;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ПрайсЛист Тогда
//					Строка.Приоритет = 12;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ЗаказТовара Тогда
//					Строка.Приоритет = 13;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
//					Строка.Приоритет = 14;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
//					Строка.Приоритет = 15;
//				КонецЕсли;
//				Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
//					Строка.Приоритет = 16;
//				КонецЕсли;
//				
//				Если Не ЗначениеЗаполнено(Строка.ДокументУчета) Тогда
//					Строка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(Строка.ИсходящийДокумент);
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			ИскомаяНастройка.ИсходящиеДокументы.Сортировать("Приоритет Возр");
//			
//			Если ЗаписатьОбъект Тогда
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомаяНастройка);
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		// Обновим элементы справочника Сертификаты ЭП.
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
//		|ПОМЕСТИТЬ Сертификаты
//		|ИЗ
//		|	Справочник.УдалитьПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
//		|		ПО (УдалитьСоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка)
//		|ГДЕ
//		|	НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.ПометкаУдаления
//		|	И НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.Отозван
//		|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
//		|	И УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Сертификаты.Сертификат КАК СертификатЭП,
//		|	ПодписываемыеВидыЭД.ВидЭД,
//		|	ПодписываемыеВидыЭД.Использовать
//		|ИЗ
//		|	Сертификаты КАК Сертификаты
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
//		|		ПО Сертификаты.Сертификат.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Сертификаты.Сертификат КАК СертификатЭП
//		|ИЗ
//		|	Сертификаты КАК Сертификаты";
//		
//		СпособыОбменаЭД = Новый Массив;
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
//		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
//		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
//		
//		Результат = Запрос.ВыполнитьПакет();
//		Выборка = Результат[2].Выбрать();
//		ТЗ = Результат[1].Выгрузить();
//	
//		Пока Выборка.Следующий() Цикл
//			Отбор = Новый Структура("СертификатЭП", Выборка.СертификатЭП);
//			КопияТЗ = ТЗ.Скопировать(Отбор);
//			ЗаписатьОбъект = Ложь;
//			
//			СтрокаВидЭД = КопияТЗ.Найти(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца, "ВидЭД");
//			Если СтрокаВидЭД <> Неопределено Тогда
//				КопияТЗ.Удалить(СтрокаВидЭД);
//				ЗаписатьОбъект = Истина;
//			КонецЕсли;
//			
//			СтрокаВидЭД = КопияТЗ.Найти(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца, "ВидЭД");
//			Если СтрокаВидЭД <> Неопределено Тогда
//				КопияТЗ.Удалить(СтрокаВидЭД);
//				ЗаписатьОбъект = Истина;
//			КонецЕсли;
//			
//			Если ЗаписатьОбъект Тогда
//				ОбменСКонтрагентамиСлужебный.СохранитьПодписываемыеВидыЭД(Выборка.СертификатЭП, КопияТЗ);
//			КонецЕсли;
//		КонецЦикла;
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВидОперации = НСтр("ru = 'Обновление информационной базы'");
//		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.25
//// Устанавливает актуальные состояния для ЭД.
////
//Процедура УстановитьАктуальныеСостоянияЭД() Экспорт
//	
//	// Во входящих и исходящих документах изменяется состояние если есть расхождения с р.с. СостоянияЭД.
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЭлектронныйДокументИсходящий.Ссылка КАК ЭД,
//	|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД,
//	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеДокументаИБ,
//	|	ЭлектронныйДокументИсходящий.СостояниеЭДО КАК СостояниеДокументаЭД,
//	|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ) КАК ИспользоватьЭП
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
//	|			ПО ЭлектронныйДокументИсходящий.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
//	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭлектронныйДокументИсходящий.Ссылка
//	|ГДЕ
//	|	НЕ СостоянияЭД.СостояниеВерсииЭД = ЭлектронныйДокументИсходящий.СостояниеЭДО
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЭлектронныйДокументВходящий.Ссылка,
//	|	ЭлектронныйДокументВходящий.ВидЭД,
//	|	СостоянияЭД.СостояниеВерсииЭД,
//	|	ЭлектронныйДокументВходящий.СостояниеЭДО,
//	|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ)
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
//	|			ПО ЭлектронныйДокументВходящий.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
//	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭлектронныйДокументВходящий.Ссылка
//	|ГДЕ
//	|	НЕ СостоянияЭД.СостояниеВерсииЭД = ЭлектронныйДокументВходящий.СостояниеЭДО";
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		ТребуетсяИзвещение = Истина;
//		
//		Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
//			Или Выборка.ВидЭД = Перечисления.ВидыЭД.УПД
//			Или Выборка.ВидЭД = Перечисления.ВидыЭД.УКД
//			Или Выборка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
//			ТребуетсяПодтверждение = Ложь;
//			
//		Иначе
//			Если Выборка.ИспользоватьЭП Тогда
//				
//				ТребуетсяПодтверждение = Истина;
//				
//				Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
//					ТребуетсяПодтверждение = Ложь;
//				КонецЕсли;
//				
//			Иначе
//				
//				ТребуетсяПодтверждение = Ложь;
//			КонецЕсли;
//		КонецЕсли;
//		
//		ДокументОбъект = Выборка.ЭД.ПолучитьОбъект();
//		ДокументОбъект.ТребуетсяИзвещение = ТребуетсяИзвещение;
//		ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
//		ДокументОбъект.СостояниеЭДО = Выборка.СостояниеДокументаИБ;
//		
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.31
//// Добавляет новые виды ЭД в справочники БЭД на основании "УПДУКД" документов.
////
//Процедура ПеревестиНаНовуюАрхитектуруСтарыеУПДУКД() Экспорт
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК ВладелецЭД,
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД,
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла.СостояниеЭДО,
//		|	СостоянияЭД.СсылкаНаОбъект,
//		|	ЭДПрисоединенныеФайлыВладельцы.Ссылка КАК ВторойТитул
//		|ИЗ
//		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
//		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлыВладельцы
//		|		ПО (ЭДПрисоединенныеФайлыВладельцы.ЭлектронныйДокументВладелец = ЭДПрисоединенныеФайлы.Ссылка)
//		|ГДЕ
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидЭД)
//		|	И ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидЭД)
//		|	И ЭДПрисоединенныеФайлыВладельцы.УдалитьВидЭД В (&ВидЭДВторыхТитулов)";
//		
//		ВидЭДДляПоиска = Новый Массив;
//		ВидЭДДляПоиска.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца);
//		ВидЭДДляПоиска.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца);
//		
//		ВидЭДДляПоискаВторыхТитулов = Новый Массив;
//		ВидЭДДляПоискаВторыхТитулов.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
//		ВидЭДДляПоискаВторыхТитулов.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
//		
//		Запрос.УстановитьПараметр("ВидЭД", ВидЭДДляПоиска);
//		Запрос.УстановитьПараметр("ВидЭДВторыхТитулов", ВидЭДДляПоискаВторыхТитулов);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Пока Выборка.Следующий() Цикл
//			ИсходныйОбъект = Выборка.ВторойТитул.ПолучитьОбъект();
//			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
//			Если ИсходныйОбъект.ТипЭлементаВерсииЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
//				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
//			КонецЕсли;
//			ИсходныйОбъект.ТипЭлементаВерсииЭД = ТипЭлементаВерсииЭД;
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИсходныйОбъект);
//			
//			ИсходныйОбъект = Выборка.ВладелецЭД.ПолучитьОбъект();
//			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
//			Если Выборка.ВладелецФайлаВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
//				ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//			КонецЕсли;
//			ИсходныйОбъект.ВидЭД = ВидЭД;
//			
//			НоваяСтрока = ИсходныйОбъект.ДокументыОснования.Добавить();
//			НоваяСтрока.ДокументОснование = Выборка.СсылкаНаОбъект;
//			
//			
//			Если ЗначениеЗаполнено(Выборка.СсылкаНаОбъект) Тогда
//				
//				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
//				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект, Истина);
//				НаборЗаписей.Прочитать();
//				Если НаборЗаписей.Количество() > 0 Тогда
//					
//					НаборЗаписей[0].ЭлектронныйДокумент = Выборка.ВладелецЭД;
//					НаборЗаписей[0].СостояниеВерсииЭД = Выборка.ВладелецФайлаСостояниеЭДО;
//					НаборЗаписей.Записать();
//					
//				КонецЕсли;
//			КонецЕсли;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИсходныйОбъект);
//			
//			
//		КонецЦикла;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.31
//// Добавляет новые виды ЭД в справочники БЭД на основании "старых" CML документов.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////
//Процедура ПеревестиНаНовуюАрхитектуруЭДОСтарыеCML(Параметры) Экспорт
//	
//	НачатьТранзакцию();
//	Попытка
//	
//		ТипыЭлементовВерсийЭД = Новый Массив;
//		ТипыЭлементовВерсийЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПустаяСсылка());
//		
//		ВидыИсключаемыхЭД = Новый Массив;
//		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
//		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
//		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
//		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя);
//		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя);
//		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
//		ВидыИсключаемыхЭД.Добавить(Перечисления.ВидыЭД.ПустаяСсылка());
//		
//		Если НЕ Параметры.Свойство("ВсегоДокументовЭДО") Тогда
//			Запрос = Новый Запрос;
//			Запрос.Текст = "ВЫБРАТЬ
//			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭДПрисоединенныеФайлы.Ссылка) КАК КоличествоДокументов
//			|ИЗ
//			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//			|ГДЕ
//			|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
//			|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//			|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
//			|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)";
//			Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД",ТипыЭлементовВерсийЭД);
//			Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",ВидыИсключаемыхЭД);
//			Выборка = Запрос.Выполнить().Выбрать();
//			Если Выборка.Следующий() Тогда
//				Параметры.Вставить("ВсегоДокументовЭДО", Выборка.КоличествоДокументов);
//			Иначе
//				Параметры.Вставить("ВсегоДокументовЭДО", 0);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ ПЕРВЫЕ 1000
//		|	ЭДПрисоединенныеФайлы.УдалитьВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
//		|	ЭДПрисоединенныеФайлы.УдалитьВидЭД КАК ВидЭД,
//		|	ЭДПрисоединенныеФайлы.УдалитьДатаВыпискиБанка КАК ДатаВыпискиБанка,
//		|	ЭДПрисоединенныеФайлы.УдалитьДатаДокументаОтправителя КАК ДатаДокументаОтправителя,
//		|	ЭДПрисоединенныеФайлы.УдалитьДатаИзмененияВнешнегоСтатусаЭД КАК ДатаИзмененияВнешнегоСтатусаЭД,
//		|	ЭДПрисоединенныеФайлы.УдалитьКонтрагент КАК Контрагент,
//		|	ЭДПрисоединенныеФайлы.УдалитьНомерВерсииЭД КАК НомерВерсииЭД,
//		|	ЭДПрисоединенныеФайлы.УдалитьНомерДокументаОтправителя КАК НомерДокументаОтправителя,
//		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
//		|	ЭДПрисоединенныеФайлы.УдалитьОрганизация КАК Организация,
//		|	ЭДПрисоединенныеФайлы.УдалитьОтветственный КАК Ответственный,
//		|	ЭДПрисоединенныеФайлы.УдалитьПричинаОтклонения КАК ПричинаОтклонения,
//		|	ЭДПрисоединенныеФайлы.УдалитьПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
//		|	ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД КАК НастройкаЭДО,
//		|	ЭДПрисоединенныеФайлы.УдалитьСуммаДокумента КАК СуммаДокумента,
//		|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
//		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
//		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
//		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
//		|	ЭДПрисоединенныеФайлы.ДатаСоздания,
//		|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, НЕОПРЕДЕЛЕНО) КАК СостояниеВерсииЭД,
//		|	ЕСТЬNULL(СостоянияЭД.Комментарий, """") КАК Комментарий,
//		|	ЭДПрисоединенныеФайлы.ПометкаУдаления,
//		|	ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла.(
//		|		ИдентификаторДокументаОснования,
//		|		ИдентификаторЭДДокументаОснования
//		|	) КАК Основания,
//		|	ЕСТЬNULL(СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП, ЛОЖЬ) КАК ИспользоватьЭП
//		|ИЗ
//		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
//		|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
//		|			И (СостоянияЭД.СсылкаНаОбъект = ЭДПрисоединенныеФайлы.ВладелецФайла)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
//		|		ПО ЭДПрисоединенныеФайлы.УдалитьВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
//		|			И ЭДПрисоединенныеФайлы.УдалитьСоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
//		|ГДЕ
//		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыЭлементовВерсийЭД)
//		|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//		|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
//		|	И НЕ ЭДПрисоединенныеФайлы.УдалитьВидЭД В (&ВидыИсключаемыхЭД)";
//		
//		Запрос.УстановитьПараметр("ТипыЭлементовВерсийЭД", ТипыЭлементовВерсийЭД);
//		Запрос.УстановитьПараметр("ВидыИсключаемыхЭД",     ВидыИсключаемыхЭД);
//		Результат = Запрос.Выполнить();
//		
//		Если НЕ Результат.Пустой() Тогда
//			
//			Выборка = Результат.Выбрать();
//			
//			Если Параметры.Свойство("ОбработаноДокументовЭДО") Тогда
//				Параметры.ОбработаноДокументовЭДО = Параметры.ОбработаноДокументовЭДО + Выборка.Количество();
//			Иначе
//				Параметры.Вставить("ОбработаноДокументовЭДО", Выборка.Количество());
//			КонецЕсли;
//			
//			Параметры.ОбработкаЗавершена = Ложь;
//			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоДокументовЭДО;
//			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументовЭДО;
//			
//			Пока Выборка.Следующий() Цикл
//				
//				Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
//					ДокументОбъект = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
//					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
//					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
//				Иначе
//					ДокументОбъект = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
//					НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
//					НоваяСтрока.ДокументОснование = Выборка.ВладелецФайла;
//				КонецЕсли;
//				
//				ВыборкаОснований = Выборка.Основания.Выбрать();
//				
//				Пока ВыборкаОснований.Следующий() Цикл
//					НоваяСтрока = ДокументОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
//					ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаОснований);
//				КонецЦикла;
//				
//				ТребуетсяИзвещение = Истина;
//				
//				Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
//					Или Выборка.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
//					ТребуетсяПодтверждение = Ложь;
//					
//				Иначе
//					Если Выборка.ИспользоватьЭП Тогда
//						
//						ТребуетсяПодтверждение = Истина;
//						Если Выборка.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
//							ТребуетсяПодтверждение = Ложь;
//						КонецЕсли;
//					Иначе
//						ТребуетсяПодтверждение = Ложь;
//					КонецЕсли;
//				КонецЕсли;
//				
//				ДокументОбъект.ТребуетсяИзвещение = ТребуетсяИзвещение;
//				ДокументОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
//				
//				ДокументОбъект.Дата = Выборка.ДатаСоздания;
//				ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
//				Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
//					ДокументОбъект.Дата = ТекущаяДатаСеанса();
//				КонецЕсли;
//				
//				Если Не ЗначениеЗаполнено(ДокументОбъект.ТипЭлементаВерсииЭД) Тогда
//					ДокументОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
//				КонецЕсли;
//				
//				ДокументОбъект.УстановитьНовыйНомер();
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//				
//				
//				ВторойТитул = Неопределено;
//				
//				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
//				СправочникОбъект.ВладелецФайла = ДокументОбъект.Ссылка;
//				Если Не ЗначениеЗаполнено(СправочникОбъект.ТипЭлементаВерсииЭД) Тогда
//					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
//				КонецЕсли;
//				
//				Если СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
//					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
//					ВторойТитул = Выборка.Ссылка;
//				ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
//					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
//					ВторойТитул = Выборка.Ссылка;
//				ИначеЕсли СправочникОбъект.УдалитьВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
//					СправочникОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
//					ВторойТитул = Выборка.Ссылка;
//				КонецЕсли;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
//				
//				Если Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен
//					ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи Тогда
//					
//					ДокументОбъект.СостояниеЭДО = Выборка.СостояниеВерсииЭД;
//					
//					Если ПустаяСтрока(ДокументОбъект.ПричинаОтклонения)
//						И НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
//						
//						ДокументОбъект.ПричинаОтклонения = Выборка.Комментарий;
//					КонецЕсли;
//					
//				Иначе
//					ДокументОбъект.СостояниеЭДО = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Выборка.Ссылка);
//				КонецЕсли;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//				
//				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
//				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.ВладелецФайла,Истина);
//				НаборЗаписей.Прочитать();
//				Если НаборЗаписей.Количество() > 0 Тогда
//					Если (НаборЗаписей[0].ЭлектронныйДокумент = Выборка.Ссылка 
//						ИЛИ НаборЗаписей[0].ЭлектронныйДокумент = ВторойТитул) Тогда
//						
//						НаборЗаписей[0].ЭлектронныйДокумент = ДокументОбъект.Ссылка;
//						НаборЗаписей.Записать();
//					Иначе
//						ДокументОбъект.ПометкаУдаления = Истина;
//						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//					КонецЕсли;
//				КонецЕсли;
//				
//			КонецЦикла;
//		Иначе
//			Параметры.ОбработкаЗавершена = Истина;
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.34
//// Заполняет дату последнего изменения состояния в рамках ЭДО.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////
//Процедура ЗаполнитьДатуПоследнегоИзмененияСостоянияЭДО(Параметры) Экспорт
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		Если НЕ Параметры.Свойство("ВсегоДокументовЭДО") Тогда
//			Запрос = Новый Запрос;
//			Запрос.Текст =
//			"ВЫБРАТЬ
//			|	КОЛИЧЕСТВО(ЭДПрисоединенныеФайлы.ВладелецФайла) КАК КоличествоДокументов
//			|ИЗ
//			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//			|ГДЕ
//			|	(ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//			|			ИЛИ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)";
//			
//			Выборка = Запрос.Выполнить().Выбрать();
//			Если Выборка.Следующий() Тогда
//				Параметры.Вставить("ВсегоДокументовЭДО", Выборка.КоличествоДокументов);
//			Иначе
//				Параметры.Вставить("ВсегоДокументовЭДО", 0);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ ПЕРВЫЕ 1000
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
//		|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ДатаИзмененияСтатусаЭД) КАК ДатаИзмененияСтатусаЭД
//		|ИЗ
//		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//		|ГДЕ
//		|	(ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//		|			ИЛИ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)
//		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
//		|	И ЭДПрисоединенныеФайлы.ВладелецФайла.ДатаИзмененияСостоянияЭДО = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ЭДПрисоединенныеФайлы.ВладелецФайла
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ДатаИзмененияСтатусаЭД";

//		Результат = Запрос.Выполнить();
//		
//		Если НЕ Результат.Пустой() Тогда
//			
//			Выборка = Результат.Выбрать();
//			
//			Если Параметры.Свойство("ОбработаноДокументовЭДО") Тогда
//				Параметры.ОбработаноДокументовЭДО = Параметры.ОбработаноДокументовЭДО + Выборка.Количество();
//			Иначе
//				Параметры.Вставить("ОбработаноДокументовЭДО", Выборка.Количество());
//			КонецЕсли;
//			
//			Параметры.ОбработкаЗавершена = Ложь;
//			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоДокументовЭДО;
//			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументовЭДО;
//			
//			Пока Выборка.Следующий() Цикл
//				
//				ДокументОбъект = Выборка.ВладелецФайла.ПолучитьОбъект();
//				ДатаИзмененияСостоянияЭДО = Выборка.ДатаИзмененияСтатусаЭД;
//				Если Не ЗначениеЗаполнено(ДатаИзмененияСостоянияЭДО) Тогда
//					ДатаИзмененияСостоянияЭДО = Выборка.ВладелецФайла.Дата;
//				КонецЕсли;
//				ДокументОбъект.ДатаИзмененияСостоянияЭДО = ДатаИзмененияСостоянияЭДО;
//				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//				
//			КонецЦикла;
//		Иначе
//			Параметры.ОбработкаЗавершена = Истина;
//		КонецЕсли;
//		
//		ЗафиксироватьТранзакцию();
//	Исключение
//		ОтменитьТранзакцию();
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.38
//// Заменяет виды ЭД помеченные префиксом Удалить на используемые.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////
//Процедура ЗаменитьУстаревшиеВидыЭД(Параметры) Экспорт
//	
//	Если НЕ Параметры.Свойство("ВсегоДокументов") Тогда
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	СУММА(1) КАК Количество
//		|ПОМЕСТИТЬ втДокументы
//		|ИЗ
//		|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
//		|ГДЕ
//		|	ЭлектронныйДокументИсходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	СУММА(1)
//		|ИЗ
//		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
//		|ГДЕ
//		|	ЭлектронныйДокументВходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	СУММА(втДокументы.Количество) КАК Количество
//		|ИЗ
//		|	втДокументы КАК втДокументы";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Параметры.Вставить("ВсегоДокументов", Выборка.Количество);
//		Иначе
//			Параметры.Вставить("ВсегоДокументов", 0);
//		КонецЕсли;
//	КонецЕсли;

//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ЭлектронныйДокументИсходящий.Ссылка КАК Ссылка,
//	|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД
//	|ИЗ
//	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
//	|ГДЕ
//	|	ЭлектронныйДокументИсходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЭлектронныйДокументВходящий.Ссылка,
//	|	ЭлектронныйДокументВходящий.ВидЭД
//	|ИЗ
//	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
//	|ГДЕ
//	|	ЭлектронныйДокументВходящий.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУПД_ИнформацияПродавца), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УдалитьУКД_ИнформацияПродавца))";
//	Результат = Запрос.Выполнить();
//	
//	
//	Если НЕ Результат.Пустой() Тогда
//		
//		Выборка = Результат.Выбрать();
//		
//		Если Параметры.Свойство("ОбработаноДокументов") Тогда
//			Параметры.ОбработаноДокументов = Параметры.ОбработаноДокументов + Выборка.Количество();
//		Иначе
//			Параметры.Вставить("ОбработаноДокументов", Выборка.Количество());
//		КонецЕсли;
//		
//		Параметры.ОбработкаЗавершена = Ложь;
//		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоДокументов;
//		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноДокументов;
//		
//		Пока Выборка.Следующий() Цикл
//			
//			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
//			Если Выборка.ВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
//				ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//			КонецЕсли;
//			
//			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			ДокументОбъект.ВидЭД = ВидЭД;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
//			
//		КонецЦикла;
//		
//	Иначе
//		Параметры.ОбработкаЗавершена = Истина;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.6.38
//// Заменяет виды ЭД помеченные префиксом Удалить на используемые.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////
//Процедура ЗаполнитьСостоянияСтарыхУПДУКД(Параметры) Экспорт
//	
//	Если НЕ Параметры.Свойство("ВсегоЗаписей") Тогда
//		Запрос = Новый Запрос;
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	СостоянияЭД.СсылкаНаОбъект КАК Основание,
//		|	СУММА(1) КАК Количество
//		|ИЗ
//		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//		|ГДЕ
//		|	СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Справочник.ЭДПрисоединенныеФайлы
//		|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)
//		|	И (СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//		|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	СостоянияЭД.СсылкаНаОбъект";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Параметры.Вставить("ВсегоЗаписей", Выборка.Количество);
//		Иначе
//			Параметры.Вставить("ВсегоЗаписей", 0);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	СостоянияЭД.СсылкаНаОбъект КАК Основание,
//	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла, НЕОПРЕДЕЛЕНО) КАК ВладелецФайла
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|ГДЕ
//	|	СостоянияЭД.ЭлектронныйДокумент ССЫЛКА Справочник.ЭДПрисоединенныеФайлы
//	|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)
//	|	И (СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
//	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий)";
//	
//	Результат = Запрос.Выполнить();
//		
//	Если НЕ Результат.Пустой() Тогда
//		
//		Выборка = Результат.Выбрать();
//		
//		Если Параметры.Свойство("ОбработаноЗаписей") Тогда
//			Параметры.ОбработаноЗаписей = Параметры.ОбработаноЗаписей + Выборка.Количество();
//		Иначе
//			Параметры.Вставить("ОбработаноЗаписей", Выборка.Количество());
//		КонецЕсли;
//		
//		Параметры.ОбработкаЗавершена = Ложь;
//		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ВсегоЗаписей;
//		Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ОбработаноЗаписей;
//		
//		Пока Выборка.Следующий() Цикл
//			
//			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.Основание);
//			НаборЗаписей.Прочитать();
//			Если НаборЗаписей.Количество()>0 Тогда
//				
//				СостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ВладелецФайла, "СостояниеЭДО");
//				НаборЗаписей[0].СостояниеВерсииЭД = СостояниеЭДО;
//				НаборЗаписей[0].ЭлектронныйДокумент = Выборка.ВладелецФайла;
//				
//				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
//				
//				ЭлектронныйДокументОбъект = Выборка.ВладелецФайла.ПолучитьОбъект();
//				ДокументыОснования = ЭлектронныйДокументОбъект.ДокументыОснования;
//				Если ДокументыОснования.Найти(Выборка.Основание, "ДокументОснование") = Неопределено Тогда
//					НоваяСтрока = ДокументыОснования.Добавить();
//					НоваяСтрока.ДокументОснование = Выборка.Основание;
//					ЭлектронныйДокументОбъект.Записать();
//				КонецЕсли;
//				
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	Иначе
//		
//		Параметры.ОбработкаЗавершена = Истина;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.1.5.1
//// Добавился новый вид ЭД - корректировочный счет фактура.
//Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ЭДПрисоединенныеФайлы.Ссылка
//	               |ИЗ
//	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	               |ГДЕ
//	               |	ЭДПрисоединенныеФайлы.Наименование ПОДОБНО ""ON_KORSFAKT%""
//	               |	И ЭДПрисоединенныеФайлы.УдалитьВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Объект = Выборка.Ссылка.ПолучитьОбъект();
//		Объект.УдалитьВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
//	КонецЦикла;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	СертификатыЭПВидыДокументов.Ссылка
//	               |ПОМЕСТИТЬ СертификатыИсключения
//	               |ИЗ
//	               |	Справочник.УдалитьСертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
//	               |ГДЕ
//	               |	СертификатыЭПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
//	               |	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
//	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
//	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ
//	               |	СертификатыЭПВидыДокументов.Ссылка
//	               |ИЗ
//	               |	Справочник.УдалитьСертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
//	               |ГДЕ
//	               |	СертификатыЭПВидыДокументов.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
//	               |	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
//	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
//	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
//	               |	И НЕ СертификатыЭПВидыДокументов.Ссылка В
//	               |				(ВЫБРАТЬ
//	               |					СертификатыИсключения.Ссылка
//	               |				ИЗ
//	               |					СертификатыИсключения)";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Сертификат = Выборка.Ссылка.ПолучитьОбъект();
//		СтрокаКорСчФ = Сертификат.ВидыДокументов.Найти(Перечисления.ВидыЭД.КорректировочныйСчетФактура, "ВидДокумента");
//		Если СтрокаКорСчФ = Неопределено Тогда
//			СтрокаКорСчФ = Сертификат.ВидыДокументов.Добавить();
//			СтрокаКорСчФ.ВидДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//		КонецЕсли;
//		СтрокаКорСчФ.ИспользоватьДляПодписи = Истина;
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Сертификат);
//	КонецЦикла;
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.3.1.9
//// Процедура - Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
//// 		Заполнение выполняется:
//// 		1. После ручного включения проверки фоновым заданием.
//// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
////
//// Параметры:
////  Параметры	 - Структура,Неопределено - Параметры очереди заданий в модели сервиса.
////		В локальной версии - Неопределено.
//Процедура ПроверитьКонтрагентовБЭД(Параметры = Неопределено) Экспорт
//	
//	ЭтоОбновлениеИБВМоделиСервиса = ОбщегоНазначения.РазделениеВключено();
//	
//	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме,
//	// либо в модели сервисов в отложенном обновлении из областей данных.
//	Если НЕ ЭтоОбновлениеИБВМоделиСервиса
//		ИЛИ ЭтоОбновлениеИБВМоделиСервиса И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
//		
//		ОбменСКонтрагентамиСлужебный.ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Включает использование механизма ознакомления с электронными документами.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
////
//Процедура ВключитьИспользованиеОзнакомленийСЭД(Параметры) Экспорт
//	
//	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
//	
//	МетаданныеОбъекта = Метаданные.Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами;
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
//	ОбработанныхОбъектов = 0;
//	ПроблемныхОбъектов = 0;
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		Блокировка = Новый БлокировкаДанных;
//		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//		Блокировка.Заблокировать();
//		
//		Записать = Ложь;
//		
//		Менеджер = Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.СоздатьМенеджерЗначения();
//		Менеджер.Прочитать();
//		
//		Если Не Менеджер.Значение Тогда
//			Менеджер.Значение = Истина;
//			Записать = Истина;
//		КонецЕсли;
//		
//		Если Записать Тогда
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
//		Иначе
//			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
//		КонецЕсли;
//		
//		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
//		
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		
//		ОтменитьТранзакцию();
//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать ознакомление с электронными документами"" по причине:'") 
//			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
//			МетаданныеОбъекта,, ТекстСообщения);
//		
//	КонецПопытки;
//		
//	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать ознакомление с электронными документами"".'");
//		ВызватьИсключение ТекстСообщения;
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Обработана константа ""Использовать ознакомление с электронными документами"".'");
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
//			МетаданныеОбъекта,, ТекстСообщения);
//	КонецЕсли;
//	
//	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
//	
//	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.6.1
//// Процедура - Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
//// 		Заполнение выполняется:
//// 		1. После ручного включения проверки фоновым заданием.
//// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
////
//// Параметры:
////  Параметры	 - Структура,Неопределено - Параметры очереди заданий в модели сервиса.
////		В локальной версии - Неопределено.
//Процедура УстановкаЗначенияКонстантыСоздаватьКонтрагентовАвтоматическиБЭД(Параметры) Экспорт
//	
//	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
//	
//	МетаданныеОбъекта = Метаданные.Константы.СоздаватьКонтрагентовАвтоматическиБЭД;
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
//	ОбработанныхОбъектов = 0;
//	ПроблемныхОбъектов = 0;
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		Блокировка = Новый БлокировкаДанных;
//		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//		Блокировка.Заблокировать();
//		
//		Записать = Ложь;
//		
//		Менеджер = Константы.СоздаватьКонтрагентовАвтоматическиБЭД.СоздатьМенеджерЗначения();
//		Менеджер.Прочитать();
//		
//		Если Не Менеджер.Значение Тогда
//			Менеджер.Значение = Истина;
//			Записать = Истина;
//		КонецЕсли;
//		
//		Если Записать Тогда
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
//		Иначе
//			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
//		КонецЕсли;
//		
//		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
//		
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		
//		ОтменитьТранзакцию();
//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Создавать контрагентов автоматически БЭД"" по причине:'") 
//			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
//			МетаданныеОбъекта,, ТекстСообщения);
//		
//	КонецПопытки;
//		
//	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Создавать контрагентов автоматически БЭД"".'");
//		ВызватьИсключение ТекстСообщения;
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Обработана константа ""Создавать контрагентов автоматически БЭД"".'");
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
//			МетаданныеОбъекта,, ТекстСообщения);
//	КонецЕсли;
//	
//	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
//	
//	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);

//	
//КонецПроцедуры

//// Выполняет первоначальное заполнение кеша операторов ЭДО и форматов.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
////
//Процедура ЗаполнитьКешиОператоровЭДОИФорматов(Параметры) Экспорт
//	
//	ОбработкаЗавершена = Ложь;
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		ТаблицаВерсийФорматов = ОбменСКонтрагентамиПовтИсп.СведенияОФорматахЭлектронныхДокументовИзМакета();
//		ТаблицаВерсийФорматов.Индексы.Добавить("ИдентификаторФормата");
//		ТаблицаВерсийФорматов.Индексы.Добавить("ВидЭлектронногоДокумента");
//		
//		НаборЗаписей = РегистрыСведений.ФорматыЭлектронныхДокументов.СоздатьНаборЗаписей();
//		НаборЗаписей.Прочитать();
//		
//		ОбновитьФорматы = Истина;
//		
//		Если ОбновитьФорматы Тогда
//			
//			НаборЗаписей.Очистить();
//			
//			ТаблицаФорматовЭДО = ТаблицаВерсийФорматов.Скопировать(,"ИдентификаторФормата");
//			ТаблицаФорматовЭДО.Свернуть("ИдентификаторФормата");
//			
//			Для Каждого ФорматЭДО Из ТаблицаФорматовЭДО Цикл
//				
//				ФорматЭДО = Новый Структура("ИдентификаторФормата", ФорматЭДО.ИдентификаторФормата);
//				ФорматыЭДО = ТаблицаВерсийФорматов.Скопировать(ФорматЭДО);
//				ФорматыЭДО.Сортировать("Отключен Возр");
//				
//				НовыйФормат = НаборЗаписей.Добавить();
//				ТекущийФормат = ФорматыЭДО[0];
//				
//				НовыйФормат.Формат                                       = ТекущийФормат.ИдентификаторФормата;
//				НовыйФормат.ИдентификаторСервиса                         = ТекущийФормат.ИдентификаторФормата;
//				НовыйФормат.Представление                                = ТекущийФормат.ПредставлениеФормата;
//				НовыйФормат.ДатаНачалаДействия                           = ТекущийФормат.ДатаНачалаДействия;
//				НовыйФормат.ДатаОкончанияДействия                        = ТекущийФормат.ДатаОкончанияДействия;
//				НовыйФормат.Регламентированный                           = СтрНайти(ТекущийФормат.УдалитьИдентификаторФормата, "ФНС") <> 0;
//				НовыйФормат.ЭтоУПД                                       = СтрНайти(ТекущийФормат.УдалитьИдентификаторФормата, "УПД") <> 0;
//				НовыйФормат.ПриказОВведенииФормата                       = ТекущийФормат.ПриказОВведенииФормата;
//				НовыйФормат.ПространстваИмен                             = СтрСоединить(ТекущийФормат.ПространстваИмен, ", ");
//				НовыйФормат.ТекстПредупрежденияДляВходящегоДокумента     = ТекущийФормат.ТекстПредупрежденияДляВходящегоДокумента;
//				НовыйФормат.ПараметрыПредупрежденияДляВходящегоДокумента = ТекущийФормат.ПараметрыПредупрежденияДляВходящегоДокумента;
//				НовыйФормат.УсловиеВыводаПредупреждения                  = ТекущийФормат.УсловиеВыводаПредупреждения;
//				НовыйФормат.ПоддерживаетсяКонфигурацией                  = Истина;
//				НовыйФормат.СсылкаНаПриказОВведенииФормата               = ТекущийФормат.СсылкаНаПриказОВведенииФормата;
//				
//				Если ТекущийФормат.Отключен И Не ЗначениеЗаполнено(НовыйФормат.ДатаОкончанияДействия) Тогда
//					НовыйФормат.ДатаОкончанияДействия = Дата(1900, 1, 1);
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
//			
//		КонецЕсли;
//		
//		НаборЗаписей = РегистрыСведений.СвязьВидовИФорматовЭД.СоздатьНаборЗаписей();
//		НаборЗаписей.Прочитать();
//		СвязьВидовИФорматовЭД = НаборЗаписей.Выгрузить();
//		
//		Если НаборЗаписей.Количество() = 0 Тогда
//			
//			ТаблицаВидыЭлектронногоДокумента = ТаблицаВерсийФорматов.Скопировать(,"ВидЭлектронногоДокумента");
//			ТаблицаВидыЭлектронногоДокумента.Свернуть("ВидЭлектронногоДокумента");
//			
//			
//			Для Каждого СтрокаВидЭД Из ТаблицаВидыЭлектронногоДокумента Цикл
//				
//				ВидЭлектронногоДокумента = Новый Структура("ВидЭлектронногоДокумента", СтрокаВидЭД.ВидЭлектронногоДокумента);
//				НайденныеСтроки = ТаблицаВерсийФорматов.НайтиСтроки(ВидЭлектронногоДокумента);
//				Ранг = 0;
//				
//				Для Каждого СтрокаСвязи Из НайденныеСтроки Цикл
//					
//					Если СтрокаСвязи.Отключен Тогда
//						Продолжить;
//					КонецЕсли;
//					ПараметрыОтбора = Новый Структура("ВидЭлектронногоДокумента, ФорматЭлектронногоДокумента",
//						СтрокаСвязи.ВидЭлектронногоДокумента, СтрокаСвязи.ИдентификаторФормата);
//						
//					Если СвязьВидовИФорматовЭД.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
//						НоваяСвязь = СвязьВидовИФорматовЭД.Добавить();
//						НоваяСвязь.ВидЭлектронногоДокумента    = СтрокаСвязи.ВидЭлектронногоДокумента;
//						НоваяСвязь.ФорматЭлектронногоДокумента = СтрокаСвязи.ИдентификаторФормата;
//						НоваяСвязь.Приоритет                   = Ранг;
//						
//						Ранг = Ранг + 1;
//					КонецЕсли;
//				
//				КонецЦикла;
//				
//			КонецЦикла;
//			
//			НаборЗаписей.Загрузить(СвязьВидовИФорматовЭД);
//			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
//			
//		КонецЕсли;
//		
//		ОператорыЭДО = ОбменСКонтрагентамиПовтИсп.СведенияОбОператорахЭДО();
//		
//		НаборЗаписей = РегистрыСведений.ОператорыЭДО.СоздатьНаборЗаписей();
//		ТаблицаОператорыЭДО = НаборЗаписей.ВыгрузитьКолонки();
//		
//		Для Каждого СтрокаОператор Из ОператорыЭДО Цикл
//			
//			НоваяСтрока = ТаблицаОператорыЭДО.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОператор);
//			
//		КонецЦикла;
//		
//		НаборЗаписей.Загрузить(ТаблицаОператорыЭДО);
//		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
//		
//		НаборЗаписей = РегистрыСведений.СовместимостьОператоровЭДО.СоздатьНаборЗаписей();
//		НаборЗаписей.Прочитать();
//		ТаблицаСовместимостьОператоровЭДО = НаборЗаписей.Выгрузить();
//		
//		Если НаборЗаписей.Количество() = 0 Тогда
//			
//			Для Каждого СтрокаОператор Из ОператорыЭДО Цикл
//				
//				Для Каждого СтрокаСовместимость Из СтрокаОператор.СовместимостьОператоровЭДО Цикл
//					
//					Оператор2     = СтрокаСовместимость;
//					СвязьДоступна = Ложь;
//					ПозицияСтроки = СтрНайти(Оператор2, "_link");
//					
//					Если ЗначениеЗаполнено(ПозицияСтроки) Тогда
//						
//						Оператор2     = Сред(Оператор2, 1, ПозицияСтроки - 1);
//						СвязьДоступна = Истина;
//						
//					КонецЕсли;
//					
//					ПараметрыОтбора = Новый Структура("Оператор1, Оператор2",
//						СтрокаОператор.ИдентификаторОператора, Оператор2);
//						
//					Если ТаблицаСовместимостьОператоровЭДО.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
//						НоваяСвязь = ТаблицаСовместимостьОператоровЭДО.Добавить();
//						НоваяСвязь.Оператор1    = СтрокаОператор.ИдентификаторОператора;
//						НоваяСвязь.Оператор2    = Оператор2;
//						НоваяСвязь.СвязьДоступна = СвязьДоступна;
//					КонецЕсли;
//					
//				КонецЦикла;
//				
//			КонецЦикла;
//			
//			НаборЗаписей.Загрузить(ТаблицаСовместимостьОператоровЭДО);
//			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
//			
//		КонецЕсли;
//		
//		Набор = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьНаборЗаписей();
//		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
//		
//		ОбработкаЗавершена = Истина;
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		
//		ОтменитьТранзакцию();
//		ТекстСообщения = НСтр("ru = 'Не удалось заполнить кеши операторов ЭДО и форматов по причине:'") + Символы.ПС 
//			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ЗаписьЖурналаРегистрации(
//			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
//		
//	КонецПопытки;
//		
//	Если ОбработкаЗавершена Тогда
//		
//		ОбновитьПовторноИспользуемыеЗначения();
//		
//		ТекстСообщения = НСтр("ru = 'Заполнены кеши операторов ЭДО и форматов.'");
//		ЗаписьЖурналаРегистрации(
//			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Не удалось заполнить кеши операторов ЭДО и форматов.'");
//		ВызватьИсключение ТекстСообщения;
//	КонецЕсли;
//	
//	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
//	
//КонецПроцедуры

//// Выполняет первоначальное заполнение кеша операторов ЭДО и форматов.
//// Для обработчика начального заполнения.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
////
//Процедура ЗаполнитьКешиОператоровЭДОИФорматовНачальноеЗаполнение(Параметры) Экспорт
//	
//	ЗаполнитьКешиОператоровЭДОИФорматов(Параметры);
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.6.4
//// Включает константу ОтправлятьВходящиеДокументыНаУтверждение.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
////
//Процедура ВключитьУтверждениеВходящихДокументов(Параметры) Экспорт
//	
//	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
//	
//	МетаданныеОбъекта = Метаданные.Константы.ОтправлятьВходящиеДокументыНаУтверждение;
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
//	ОбработанныхОбъектов = 0;
//	ПроблемныхОбъектов = 0;
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		Блокировка = Новый БлокировкаДанных;
//		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//		Блокировка.Заблокировать();
//		
//		Записать = Ложь;
//		
//		Менеджер = Константы.ОтправлятьВходящиеДокументыНаУтверждение.СоздатьМенеджерЗначения();
//		Менеджер.Прочитать();
//		
//		Если Не Менеджер.Значение И Константы.ИспользоватьОбменЭД.Получить() Тогда
//			Менеджер.Значение = Истина;
//			Записать = Истина;
//		КонецЕсли;
//		
//		Если Записать Тогда
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
//		Иначе
//			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
//		КонецЕсли;
//		
//		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
//		
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		
//		ОтменитьТранзакцию();
//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Отправлять входящие документы на утверждение"" по причине:'") 
//			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
//			МетаданныеОбъекта,, ТекстСообщения);
//		
//	КонецПопытки;
//		
//	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Отправлять входящие документы на утверждение"".'");
//		ВызватьИсключение ТекстСообщения;
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Обработана константа ""Отправлять входящие документы на утверждение"".'");
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
//			МетаданныеОбъекта,, ТекстСообщения);
//	КонецЕсли;
//	
//	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
//	
//	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
//	
//КонецПроцедуры

//// Обработчик обновления БЭД 1.7.2
//// Включает константу ИспользоватьВнутренниеДокументыЭДО.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
////
//Процедура ВключитьИспользованиеВнутреннихДокументов(Параметры) Экспорт
//	
//	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
//	
//	МетаданныеОбъекта = Метаданные.Константы.ИспользоватьВнутренниеДокументыЭДО;
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
//	ОбработанныхОбъектов = 0;
//	ПроблемныхОбъектов = 0;
//	
//	НачатьТранзакцию();
//	Попытка
//		
//		Блокировка = Новый БлокировкаДанных;
//		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//		Блокировка.Заблокировать();
//		
//		Записать = Ложь;
//		
//		Менеджер = Константы.ИспользоватьВнутренниеДокументыЭДО.СоздатьМенеджерЗначения();
//		Менеджер.Прочитать();
//		
//		ВключатьФункциональнуюОпцию = Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
//		ОбменСКонтрагентамиПереопределяемый.ВключатьФункциональнуюОпциюИспользоватьВнутренниеДокументыЭДО(ВключатьФункциональнуюОпцию);
//		Если Не Менеджер.Значение И ВключатьФункциональнуюОпцию = Истина И Константы.ИспользоватьОбменЭД.Получить() Тогда
//			Менеджер.Значение = Истина;
//			Записать = Истина;
//		КонецЕсли;
//		
//		Если Записать Тогда
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Менеджер);
//		Иначе
//			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Менеджер, ПараметрыОтметкиВыполнения);
//		КонецЕсли;
//		
//		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
//		
//		ЗафиксироватьТранзакцию();
//		
//	Исключение
//		
//		ОтменитьТранзакцию();
//		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать внутренние документы"" по причине:'") 
//			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
//			МетаданныеОбъекта,, ТекстСообщения);
//		
//	КонецПопытки;
//		
//	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать внутренние документы"".'");
//		ВызватьИсключение ТекстСообщения;
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Обработана константа ""Использовать внутренние документы"".'");
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
//			МетаданныеОбъекта,, ТекстСообщения);
//	КонецЕсли;
//	
//	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработанныхОбъектов;
//	
//	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
//	
//КонецПроцедуры

//// Обработчик обновления. Изменяет расписание предопределенного регламентного задания ПроверкаКонтрагентовБЭД.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
////
//Процедура ИзменитьРасписаниеПроверкиКонтрагентов(Параметры) Экспорт
//	
//	МетаданныеОбъекта = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД;
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	ОбработанныхОбъектов = 0;
//	ПроблемныхОбъектов = 0;
//	
//	ОтборЗаданий = Новый Структура;
//	ОтборЗаданий.Вставить("Метаданные", МетаданныеОбъекта);
//	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
//	
//	ЗаданияКОбработке = Новый Массив;
//	Для каждого Задание Из НайденныеЗадания Цикл
//		// Если задание не стандартное, то оставляем как есть.
//		// Стандартным считается задание, которое повторяется раз в 7 дней.
//		Если Задание.Расписание.ПериодПовтораДней = 7 Тогда
//			ЗаданияКОбработке.Добавить(Задание);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если Не ЗначениеЗаполнено(Параметры.ПрогрессВыполнения.ВсегоОбъектов) Тогда
//		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ЗаданияКОбработке.Количество();
//	КонецЕсли;
//	
//	Для каждого Задание Из ЗаданияКОбработке Цикл
//		
//		НачатьТранзакцию();
//		Попытка
//			
//			Расписание = Новый РасписаниеРегламентногоЗадания;
//			Расписание.ПериодПовтораДней = 1;
//			
//			Изменения = Новый Структура;
//			Изменения.Вставить("Расписание", Расписание);
//			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, Изменения);
//			
//			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить расписание регламентного задания: %1'"), Задание.УникальныйИдентификатор)  
//				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
//				МетаданныеОбъекта, Задание.УникальныйИдентификатор, ТекстСообщения);
//			
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Не удалось обновить расписание регламентного задания проверки контрагента на подключение к 1С-ЭДО.'");
//		ВызватьИсключение ТекстСообщения;
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Обновлено расписание регламентного задания проверки контрагента на подключение к 1С-ЭДО.'");
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
//			МетаданныеОбъекта,, ТекстСообщения);
//	КонецЕсли;
//	
//	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = ОбработанныхОбъектов;
//	
//	Параметры.ОбработкаЗавершена = (ПроблемныхОбъектов = 0);
//	
//КонецПроцедуры

//// Обработчик обновления. Заполняет пустые представления состояния ЭД.
////
//// Параметры:
////  Параметры - Структура - параметры обработчика обновления.
////                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
////
//Процедура ЗаполнитьПустыеПредставленияСостоянияЭД(Параметры) Экспорт
//	
//	МетаданныеОбъекта = Метаданные.РегистрыСведений.СостоянияЭД;
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	ОбработанныхОбъектов = 0;
//	ПроблемныхОбъектов = 0;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ ПЕРВЫЕ 1000
//	|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
//	|ИЗ
//	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
//	|ГДЕ
//	|	СостоянияЭД.ПредставлениеСостояния = """"
//	|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)";

//	Результат = Запрос.Выполнить();
//		
//	Если НЕ Результат.Пустой() Тогда
//		
//		Выборка = Результат.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			
//			НачатьТранзакцию();
//			Попытка
//				
//				Блокировка = Новый БлокировкаДанных;
//				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
//				ЭлементБлокировки.УстановитьЗначение("СсылкаНаОбъект", Выборка.СсылкаНаОбъект);
//				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//				Блокировка.Заблокировать();
//				
//				Набор = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
//				Набор.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект);
//				Набор.Прочитать();
//				
//				Для Каждого СтрокаНабора Из Набор Цикл
//					
//					СтрокаНабора.ПредставлениеСостояния = Строка(СтрокаНабора.СостояниеВерсииЭД);
//					
//				КонецЦикла;
//				
//				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор); 
//		
//				ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
//				ЗафиксироватьТранзакцию();
//				
//			Исключение
//		
//				ОтменитьТранзакцию();
//				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать представление состояния %1'"), Выборка.СсылкаНаОбъект)  
//					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
//					МетаданныеОбъекта, , ТекстСообщения);
//					
//			КонецПопытки; 
//		КонецЦикла;
//		
//	Иначе
//		Параметры.ОбработкаЗавершена = Истина;
//	КонецЕсли;  	

//	
//	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Не удалось заполнить представление состояния электронных документов'");
//		ВызватьИсключение ТекстСообщения;
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Обновлены представления состояний электронных документов'");
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
//			МетаданныеОбъекта,, ТекстСообщения);
//	КонецЕсли;
//	
//	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = ОбработанныхОбъектов;
//	
//	Параметры.ОбработкаЗавершена = (ПроблемныхОбъектов = 0);
//	
//КонецПроцедуры

//#КонецОбласти

//// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации

//// СтандартныеПодсистемы.РаботаВМодулиСервиса.ПоставляемыеДанные

//#Область ПоставляемыеДанные

//// Вызывается при получении уведомления о новых данных.
//// В теле следует проверить, необходимы ли эти данные приложению,
//// и если да - установить флажок Загружать.
//// 
//// Параметры:
////   Дескриптор - ОбъектXDTO - Descriptor.
////   Загружать  - Булево - возвращаемое.
////
//Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
//	
//	Если Дескриптор.DataType = "ПравилаПреобразованияФорматовЭлектронныхДокументов" Тогда
//		
//		ДатаЗагрузки = Константы.ДатаЗагрузкиОписанияФорматовДляПреобразования.Получить();
//		
//		ДатаОбновления = XMLЗначение(Тип("Дата"), Дескриптор.Properties.Property.Получить(0).Value);
//		
//		Если ДатаОбновления > ДатаЗагрузки Тогда
//			Загружать = Истина;
//		КонецЕсли;
//		
//	ИначеЕсли Дескриптор.DataType = "КлассификаторОшибокКриптографии" Тогда
//		
//		ДатаПоследнегоИзменения = ОбменСКонтрагентамиДиагностика.ДатаПоследнегоИзмененияКлассификатораОшибокКриптографии();
//		
//		ДатаОбновления = XMLЗначение(Тип("Дата"), Дескриптор.Properties.Property.Получить(0).Value);
//		
//		Если ДатаОбновления > ДатаПоследнегоИзменения Тогда
//			Загружать = Истина;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
////
//// Параметры:
////   Дескриптор - ОбъектXDTO - Дескриптор.
////   ПутьКФайлу - Строка - Полное имя извлеченного файла. Файл будет автоматически удален
////                  после завершения процедуры.
////
//Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
//	
//	Если Дескриптор.DataType = "ПравилаПреобразованияФорматовЭлектронныхДокументов" Тогда
//		
//		ЗагруженоБезОшибок = Истина;
//		ТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();
//		
//		ВременныйКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
//		
//		ЧтениеZipФайла = Новый ЧтениеZipФайла(ПутьКФайлу);
//		ЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог);
//		ЧтениеZipФайла.Закрыть();
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ФорматыДляПреобразования.ИсходныйФормат КАК ИсходныйФормат,
//		|	ФорматыДляПреобразования.ДатаОбновленияПравил КАК ДатаОбновленияПравил,
//		|	ФорматыДляПреобразования.СсылкаНаРесурс КАК СсылкаНаРесурс
//		|ИЗ
//		|	РегистрСведений.ФорматыДляПреобразования КАК ФорматыДляПреобразования";
//		
//		ТаблицаФорматов = Запрос.Выполнить().Выгрузить();
//		ТаблицаФорматов.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
//		
//		ПутьКФайлуОписанияФорматов = ВременныйКаталог + "supported_formats.csv";
//		
//		ОписаниеФорматовДляПреобразования = Новый ЧтениеТекста(ПутьКФайлуОписанияФорматов, "UTF-8");
//		ОписаниеФормата = ОписаниеФорматовДляПреобразования.ПрочитатьСтроку();
//		Пока ОписаниеФормата <> Неопределено Цикл
//			
//			МассивСвойствФормата = СтрРазделить(ОписаниеФормата,",");
//			НайденныйФормат = ТаблицаФорматов.Найти(МассивСвойствФормата[0], "ИсходныйФормат");
//			Если НайденныйФормат = Неопределено
//				ИЛИ Дата(МассивСвойствФормата[1]) > НайденныйФормат.ДатаОбновленияПравил
//				ИЛИ МассивСвойствФормата[2] <> НайденныйФормат.СсылкаНаРесурс Тогда
//				
//				НачатьТранзакцию();
//				
//				Попытка
//					
//					НаборПравилПреобразования = РегистрыСведений.ПравилаПреобразованияФорматов.СоздатьНаборЗаписей();
//					НаборПравилПреобразования.Отбор.ИсходныйФормат.Установить(МассивСвойствФормата[0]);
//					
//					ОписаниеПравилПреобразования = Новый ЧтениеТекста(ВременныйКаталог + МассивСвойствФормата[2], "UTF-8");
//					ОписаниеПравила = ОписаниеПравилПреобразования.ПрочитатьСтроку();
//					Пока ОписаниеПравила <> Неопределено Цикл
//						МассивСвойствПравила = СтрРазделить(ОписаниеПравила,",");
//						
//						ЧтениеТекстаПравил = Новый ЧтениеТекста(ВременныйКаталог + МассивСвойствПравила[4], "UTF-8");
//						ТекстПравила = ЧтениеТекстаПравил.Прочитать();
//						ЧтениеТекстаПравил.Закрыть();
//						Правило = Новый ХранилищеЗначения(ТекстПравила, Новый СжатиеДанных());
//						
//						НоваяЗапись = НаборПравилПреобразования.Добавить();
//						НоваяЗапись.ИсходныйФормат         = МассивСвойствПравила[0];
//						НоваяЗапись.ВариантЗаполнения      = МассивСвойствПравила[1];
//						НоваяЗапись.ИтоговыйФормат         = МассивСвойствПравила[2];
//						НоваяЗапись.ВерсияИтоговогоФормата = МассивСвойствПравила[3];
//						НоваяЗапись.ДатаЗагрузки           = ТекущаяУниверсальнаяДата;
//						НоваяЗапись.Правило                = Правило;
//						
//						ОписаниеПравила = ОписаниеПравилПреобразования.ПрочитатьСтроку();
//					КонецЦикла;
//					
//					НаборПравилПреобразования.Записать();
//					
//					ОписаниеПравилПреобразования.Закрыть();
//					
//					МенеджерЗаписи = РегистрыСведений.ФорматыДляПреобразования.СоздатьМенеджерЗаписи();
//					МенеджерЗаписи.ИсходныйФормат       = МассивСвойствФормата[0];
//					МенеджерЗаписи.ДатаОбновленияПравил = Дата(МассивСвойствФормата[1]);
//					МенеджерЗаписи.СсылкаНаРесурс       = МассивСвойствФормата[2];
//					МенеджерЗаписи.Записать();
//					
//					ЗафиксироватьТранзакцию();
//				Исключение
//					ОтменитьТранзакцию();
//					
//					ЗагруженоБезОшибок = Ложь;
//					
//					ВидОперации = НСтр("ru = 'Загрузка правил преобразования форматов электронных документов.'");
//					ТекстОшибки = СтрШаблон(
//					НСтр("ru = 'Не удалось загрузить правила преобразования формата %1.'"),
//					МассивСвойствФормата[0])
//					+ Символы.ПС + НСтр("ru = 'По причине:'")
//					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//					ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
//				КонецПопытки;
//				
//			КонецЕсли;
//			
//			Если НайденныйФормат <> Неопределено Тогда
//				НайденныйФормат.Обработан = Истина;
//			КонецЕсли;
//			
//			ОписаниеФормата = ОписаниеФорматовДляПреобразования.ПрочитатьСтроку();
//		КонецЦикла;
//		
//		ОписаниеФорматовДляПреобразования.Закрыть();
//		
//		ПараметрыОтбора = Новый Структура("Обработан", Ложь);
//		ФорматыКУдалению = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
//		Если ФорматыКУдалению.Количество() Тогда
//			Для Каждого СвойстваФормата Из ФорматыКУдалению Цикл
//				
//				НачатьТранзакцию();
//				Попытка
//					МенеджерЗаписи = РегистрыСведений.ФорматыДляПреобразования.СоздатьМенеджерЗаписи();
//					МенеджерЗаписи.ИсходныйФормат = СвойстваФормата.ИсходныйФормат;
//					МенеджерЗаписи.Удалить();
//					
//					НаборЗаписей = РегистрыСведений.ПравилаПреобразованияФорматов.СоздатьНаборЗаписей();
//					НаборЗаписей.Отбор.ИсходныйФормат.Установить(СвойстваФормата.ИсходныйФормат);
//					НаборЗаписей.Записать();
//					
//					ЗафиксироватьТранзакцию();
//				Исключение
//					ОтменитьТранзакцию();
//					
//					ЗагруженоБезОшибок = Ложь;
//					
//					ВидОперации = НСтр("ru = 'Загрузка правил преобразования форматов электронных документов.'");
//					ТекстОшибки = СтрШаблон(
//					НСтр("ru = 'Не удалось удалить неиспользуемые правила преобразования формата %1 из информационной базы.'"),
//					СвойстваФормата.ИсходныйФормат)
//					+ Символы.ПС + НСтр("ru = 'По причине:'")
//					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//					ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
//				КонецПопытки;
//				
//			КонецЦикла;
//		КонецЕсли;
//		
//		Если ЗагруженоБезОшибок Тогда
//			Константы.ДатаЗагрузкиОписанияФорматовДляПреобразования.Установить(ТекущаяУниверсальнаяДата);
//		КонецЕсли;
//		
//		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВременныйКаталог);
//		
//	ИначеЕсли Дескриптор.DataType = "КлассификаторОшибокКриптографии" Тогда
//		
//		ОбменСКонтрагентамиДиагностика.ОбновитьКлассификаторОшибокКриптографии(ПутьКФайлу);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//// Вызывается при отмене обработки данных в случае сбоя.
////
//// Параметры:
////   Дескриптор - ОбъектXDTO - Descriptor.
////
//Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт

//КонецПроцедуры

//#КонецОбласти

//// Конец СтандартныеПодсистемы.РаботаВМодулиСервиса.ПоставляемыеДанные

//// СтандартныеПодсистемы.Печать

//#Область ПереопределениеМеханизмаПечатиБСП

//// см. УправлениеПечатьюПереопределяемый.ПриПечати
//Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
//	
//	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД")
//			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьВнутренниеДокументыЭДО") 
//			Или ПараметрыПечати.Свойство("ИсключитьШтампы")
//			Или Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
//		Возврат;
//	КонецЕсли;
//		
//	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
//		
//		ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(ОбъектПечати.Значение);
//		
//		Если ЗначениеЗаполнено(ПараметрыЭД) И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Внутренний Тогда
//			
//			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
//				
//				ОбластьДокумента  = ПечатнаяФорма.ТабличныйДокумент.Области.Найти(ОбъектПечати.Представление);
//				
//				Если ОбластьДокумента <> Неопределено Тогда  
//					
//					Идентификатор = ОбменСКонтрагентамиСлужебныйВызовСервера.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектПечати.Значение));
//		            КомандыПечати = УправлениеПечатью.КомандыПечатиОбъекта(ОбъектПечати.Значение.Метаданные());
//					НайденнаяКоманда = КомандыПечати.Найти(ПечатнаяФорма.ИмяМакета, "Идентификатор"); 

//					Если Не ЗначениеЗаполнено(НайденнаяКоманда) Тогда
//						Возврат;
//					КонецЕсли;
//					
//					ВидВнутреннегоДокумента = ОбменСКонтрагентамиСлужебный.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, НайденнаяКоманда);

//					АктуальныйЭД = ОбменСКонтрагентамиСлужебный.АктуальныйВнутреннийЭД(ОбъектПечати.Значение, ВидВнутреннегоДокумента);
//					
//					Если Не ЗначениеЗаполнено(АктуальныйЭД) Тогда
//						Продолжить;
//					КонецЕсли;
//					
//					ВидПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальныйЭД, "ВидПодписи");
//					ПараметрыЭД =  ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(АктуальныйЭД);
//					
//					Организация = ПараметрыЭД.Организация;
//					
//					ЭД = ОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(АктуальныйЭД);
//					
//					Если Не ЗначениеЗаполнено(ЭД) Тогда
//						Продолжить;
//					КонецЕсли;
//					
//					Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда 
//						ЭлектронныеПодписиЭД = ОбменСКонтрагентамиСлужебный.УстановленныеПростыеПодписи(ЭД);
//					Иначе
//						ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(ЭД);
//					КонецЕсли;
//					
//					Если ЭлектронныеПодписиЭД.Количество() = 0 Тогда
//						Продолжить;
//					КонецЕсли;
//					
//					ИмяМакета = ?(ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая, "ШтампПЭП_%1", "ШтампЭП_%1");
//					
//					Штамп = Новый ТабличныйДокумент;
//					
//					МакетЭП = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(
//					СтрШаблон(ИмяМакета, ОбщегоНазначения.КодОсновногоЯзыка()));
//					МакетЭП.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
//					
//					КоличествоПодписей = ЭлектронныеПодписиЭД.Количество(); 
//					
//					Если КоличествоПодписей = 1 Тогда 
//						
//						ОбластьШтамп = МакетЭП.ПолучитьОбласть("ШтампОдинарныйСтрока|ШтампОдинарный");
//						
//						Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда 
//							ОбменСКонтрагентамиВнутренний.ЗаполнитьОбластьШтампаПЭП(ОбластьШтамп, ЭлектронныеПодписиЭД[0], Организация); 
//						Иначе
//							ОбменСКонтрагентамиВнутренний.ЗаполнитьОбластьШтампа(ОбластьШтамп, ЭлектронныеПодписиЭД[0]);
//						КонецЕсли;
//						
//						ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШтамп, "ШтампЭП");
//						
//						Штамп.Область().СоздатьФорматСтрок();
//						
//						ВысотаШтампа = Штамп.ВысотаТаблицы;
//						
//						ИндексНачалаОбласти = ОбластьДокумента.Низ + 1;
//						ИндексКонцаОбласти = ИндексНачалаОбласти + ВысотаШтампа;
//						
//						Шаблон = "R%1:R%2";
//						ИдентификаторОбласти = СтрШаблон(Шаблон, Формат(ИндексНачалаОбласти, "ЧГ="), Формат(ИндексКонцаОбласти, "ЧГ="));
//						
//						ОбластьВставки = ПечатнаяФорма.ТабличныйДокумент.Область(ИдентификаторОбласти);
//						
//						ПечатнаяФорма.ТабличныйДокумент.ВставитьОбласть(Штамп.Область(), ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
//						
//						
//					Иначе
//						
//						ОбластьШапка = МакетЭП.ПолучитьОбласть("ШтампТабличныйШапка|ОбластьШтампТабличный");
//						ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШапка, "ШтампТабличныйШапка");
//						
//						Разделитель = МакетЭП.ПолучитьОбласть("ШтампТабличныйРазделитель|ОбластьШтампТабличный");
//						
//						Счетчик = 0;
//						
//						Для Каждого Подпись Из ЭлектронныеПодписиЭД Цикл
//							
//							Счетчик = Счетчик + 1;
//							
//							ОбластьШтамп = МакетЭП.ПолучитьОбласть("ШтампТабличныйСтрока|ОбластьШтампТабличный");
//							
//							Если ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда 
//								ОбменСКонтрагентамиВнутренний.ЗаполнитьОбластьШтампаПЭП(ОбластьШтамп, Подпись, Организация); 
//							Иначе
//								ОбменСКонтрагентамиВнутренний.ЗаполнитьОбластьШтампа(ОбластьШтамп, Подпись);
//							КонецЕсли;
//							
//							ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьШтамп, "ШтампТабличныйСтрока");
//							
//							Если Счетчик <> КоличествоПодписей Тогда
//								ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(Штамп, Разделитель, "ШтампТабличныйРазделитель");
//							КонецЕсли;
//							
//						КонецЦикла;
//						
//						ОбластьПодвал = МакетЭП.ПолучитьОбласть("ШтампТабличныйПодвал|ОбластьШтампТабличный");
//						ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(Штамп, ОбластьПодвал, "ШтампТабличныйПодвал");
//						
//						Штамп.Область().СоздатьФорматСтрок();
//						
//						ВысотаШтампа = Штамп.ВысотаТаблицы;
//						
//						ИндексНачалаОбласти = ОбластьДокумента.Низ + 1;
//						ИндексКонцаОбласти = ИндексНачалаОбласти + ВысотаШтампа;
//						
//						Шаблон = "R%1:R%2";
//						ИдентификаторОбласти = СтрШаблон(Шаблон, Формат(ИндексНачалаОбласти, "ЧГ="), Формат(ИндексКонцаОбласти, "ЧГ="));
//						
//						ОбластьВставки = ПечатнаяФорма.ТабличныйДокумент.Область(ИдентификаторОбласти);
//						
//						ПечатнаяФорма.ТабличныйДокумент.ВставитьОбласть(Штамп.Область(), ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
//						
//					КонецЕсли;
//					
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//// см. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере
//Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

//	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") 
//		Или Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
//	
//	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
//		 Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
//		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
//	КонецЕсли;

//	ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(ОбъектыУчета[0]);
//	
//	Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Внутренний Тогда  
//		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутренниеДокументыЭДО") Тогда 
//			ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка);
//		КонецЕсли; 
//	ИначеЕсли ОбъектыУчета.Количество() = 1 Тогда
//		ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка);
//	КонецЕсли; 
//		
//КонецПроцедуры

//#КонецОбласти

//// Конец СтандартныеПодсистемы.Печать

//#КонецОбласти

//// Устанавливает признак использования функционала внутренних электронных документов.
////
//// Параметры:
////  Использовать - Булево - признак использования.
////
//Процедура УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать) Экспорт

//	ОбменСКонтрагентамиСлужебный.УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать);
//	
//КонецПроцедуры

//#Область УстаревшиеПроцедурыИФункции 

//// Устарела: начиная с версии 1.6 новые поддержанные виды электронных документов добавляются в настройки автоматически.
//// Обработчик обновления видов ЭД актуальными.
//// Используется при необходимости добавить новый вид ЭД в справочники БЭД в сторонних прикладных решениях.
////
//// Параметры:
////  ВидЭД - ЗначениеПеречисления - значение перечисления ВидыЭД.
////
//Процедура ОбновитьНастройкиЭДО(ВидЭД) Экспорт
//	
//	ОбменСКонтрагентамиСлужебный.ОбновитьНастройкиЭДО(ВидЭД);
//	
//КонецПроцедуры

//// Устарела: начиная с версии 1.6 новые поддержанные виды электронных документов добавляются в настройки автоматически.
//// Добавляет обработчики обновления настроек ЭДО.
//// Используется при необходимости добавить новый вид электронного документа в справочники БЭД в сторонних прикладных решениях.
////
//// Параметры:
////  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
////  Версия      - Строка - Версия прикладного решения.
////
//Процедура ДобавитьОбработчикиОбновленияНастроекЭДО(Обработчики, Версия) Экспорт
//	
//	Возврат;
//	
//КонецПроцедуры

//#Область СопоставлениеНоменклатуры

//// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры.
//// Сохраняет данные о номенклатуре контрагента и устанавливает их соответствие номенклатуре информационной базы.
////
//// Параметры:
////  НоменклатураКонтрагента - Структура - номенклатура контрагента. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
////  НоменклатураИБ - Структура - номенклатура ИБ. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
////                               Если Неопределено, то данные о номенклатуре контрагента сохраняются
////                               без сопоставления с номенклатурой информационной базы.
////  ИспользоватьХарактеристики - Булево - признак использования характеристик.
////  Замещать - Булево - признак замещения записей.
////
//Процедура УстановитьСоответствиеНоменклатуры(Знач НоменклатураКонтрагента, Знач НоменклатураИБ = Неопределено, 
//			Знач ИспользоватьХарактеристики = Неопределено, Замещать = Истина) Экспорт
//			
//	СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(
//		НоменклатураКонтрагента, НоменклатураИБ, ИспользоватьХарактеристики, Замещать);
//		
//КонецПроцедуры

//// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентов.УдалитьСоответствиеНоменклатуры.
//// Удаляет данные о номенклатуре контрагента из информационной базы.
////
//// Параметры:
////  НоменклатураКонтрагента - Структура - номенклатура контрагента для удаления. 
////                                        Обязательно должны быть заданы свойства "Владелец" и "Идентификатор". 
////                                        См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
////
//Процедура УдалитьСоответствиеНоменклатуры(Знач НоменклатураКонтрагента) Экспорт
//	
//	СопоставлениеНоменклатурыКонтрагентов.УдалитьСоответствиеНоменклатуры(НоменклатураКонтрагента);
//	
//КонецПроцедуры

//// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры.
//// Возвращает соответствие номенклатуры контрагента и информационной базы, удовлетворяющие отбору.
////
//// Параметры:
////  Отбор - Структура - критерий отбора, который может содержать следующие свойства:
////   * НоменклатураКонтрагента - Структура - поиск по номенклатуре контрагента.
////                                           Используется только поиск по свойствам "Владелец" и "Идентификатор".
////                                           См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
////   * НоменклатураИБ - Структура - поиск по номенклатуре информационной базы. 
////                                           См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
////   * Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД - отбор по владельцу номенклатуры. Актуально, если задан только отбор по номенклатуре ИБ.
////  ТолькоСопоставленные - Булево - возвращаются только такие элементы, у которых заполнена номенклатура информационной базы.
////
//// Возвращаемое значение:
////  Массив - соответствия номенклатуры, удовлетворяющие отбору. Элементы массива представлены структурой:
////   * НоменклатураКонтрагента - См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
////   * НоменклатураИБ - См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
////
//Функция НайтиСоответствиеНоменклатуры(Знач Отбор = Неопределено, Знач ТолькоСопоставленные = Ложь) Экспорт
//	
//	Возврат СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор, ТолькоСопоставленные);
//	
//КонецФункции

//// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры.
//// Создает временную таблицу соответствия номенклатуры контрагентов и информационной базы.
//// Колонки:
////  * Идентификатор              - Строка - идентификатор номенклатуры.
////  * Наименование               - Строка - наименование номенклатуры.
////  * НаименованиеХарактеристики - Строка - наименование характеристики.
////  * ЕдиницаИзмерения           - Строка - наименование единицы измерения.
////  * ЕдиницаИзмеренияКод        - Строка - код единицы измерения.
////  * Артикул                    - Строка - артикул номенклатуры.
////  * СтавкаНДС                  - Строка - ставка НДС номенклатуры.
////  * ШтрихкодКомбинации         - Строка - штрихкод комбинации: номенклатура, характеристика, упаковка.
////  * ШтрихкодыНоменклатуры      - Строка - штрихкоды номенклатуры через запятую.
////  * ИдентификаторНоменклатурыСервиса   - Строка - идентификатор номенклатуры в сервисе 1С:Номенклатура.
////  * ИдентификаторХарактеристикиСервиса - Строка - идентификатор характеристики в сервисе 1С:Номенклатура.
////  * Владелец       - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры информационной базы.
////  * Номенклатура   - ОпределяемыйТип.НоменклатураБЭД               - номенклатура информационной базы.
////  * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
////  * Упаковка       - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - упаковка информационной базы.
////
//// Параметры:
////  ТаблицаОтбора - ТаблицаЗначений - таблица для отбора записей сопоставления.
////                                    Отбор производиться по следующему сочетанию полей:
////                                    (Владелец, Идентификатор), если идентификатор не равен пустой строке.
////                                    (Владелец, Номенклатура, Характеристика, Упаковка), если идентификатор равен пустой строке.
////   * Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры.
////   * Идентификатор - Строка - идентификатор номенклатуры.
////   * Номенклатура - ОпределяемыйТип.НоменклатураБЭД - номенклатура информационной базы.
////   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - характеристика информационной базы.
////   * Упаковка - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - упаковка информационной базы.
////  ИмяВременнойТаблицы - Строка - имя временной таблицы, в которую нужно поместить отобранные данные.
////  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, в котором будет создана временная таблица.
////
//Процедура СоздатьВременнуюТаблицуСоответствияНоменклатуры(Знач ТаблицаОтбора, Знач ИмяВременнойТаблицы, МенеджерВременныхТаблиц) Экспорт
//	
//	СопоставлениеНоменклатурыКонтрагентов.СоздатьВременнуюТаблицуСоответствияНоменклатуры(
//			ТаблицаОтбора, ИмяВременнойТаблицы, МенеджерВременныхТаблиц);
//	
//КонецПроцедуры

//// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры.
//// Обрабатывает форму номенклатуры при ее создании.
//// Если в параметрах формы присутствует данные о номенклатуре контрагента,
//// то вызывает переопределяемый метод, инициализирующий данные формы.
//// Следует вызвать в обработчике события ПриСозданииНаСервере формы элемента номенклатуры.
//// См. также ОбменСКонтрагентамиПереопределяемый.ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента.
////
//// Параметры:
////  Форма - ФормаКлиентскогоПриложения - форма элемента номенклатуры.
////
//Процедура ПриСозданииФормыНоменклатуры(Форма) Экспорт
//	
//	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры(Форма);
//	
//КонецПроцедуры

//// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыХарактеристики.
//// Обрабатывает форму характеристики при ее создании.
//// Если в параметрах формы присутствует данные о номенклатуре контрагента,
//// то вызывает переопределяемый метод, инициализирующий данные формы.
//// Следует вызвать в обработчике события ПриСозданииНаСервере формы элемента характеристики.
//// См. также ОбменСКонтрагентамиПереопределяемый.ПриЗаполненииФормыХарактеристикиПоДаннымКонтрагента.
////
//// Параметры:
////  Форма - ФормаКлиентскогоПриложения - форма элемента номенклатуры.
////
//Процедура ПриСозданииФормыХарактеристики(Форма) Экспорт
//	
//	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыХарактеристики(Форма);
//	
//КонецПроцедуры

//#КонецОбласти

//#КонецОбласти

//#КонецОбласти

//#Область СлужебныйПрограммныйИнтерфейс

//// См. ЭлектронноеВзаимодействие.ПриФормированииСпискаУслуг
//Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
//	
//	ПоставщикПортал1СИТС = Неопределено;
//	ИдентификаторПоставщикаУслугПортал1СИТС =
//		ЭлектронноеВзаимодействиеКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
//	Для Каждого ТекПоставщик Из ПоставщикиУслуг Цикл
//		Если ТекПоставщик.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
//			ПоставщикПортал1СИТС = ТекПоставщик;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если ПоставщикПортал1СИТС = Неопределено Тогда
//		ПоставщикПортал1СИТС = Новый Структура;
//		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
//		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
//		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
//		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
//	КонецЕсли;
//	
//	Услуги = ПоставщикПортал1СИТС.Услуги;
//	
//	// Оператор [] используется для исключения ошибки компиляции,
//	// если не внедрена Библиотека "Технология сервиса".
//	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
//	
//	НоваяУслуга = Новый Структура;
//	НоваяУслуга.Вставить("Идентификатор", ОбменСКонтрагентамиКлиентСервер.ИдентификаторУслугиОбменаЭлектроннымиДокументами());
//	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Обмен электронными документами'"));
//	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
//	Услуги.Добавить(НоваяУслуга);
//	
//КонецПроцедуры

//// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов.
////
//Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
//	
//	Если ТипВладелецФайла = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
//			ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
//			ИЛИ ТипВладелецФайла = Тип("СправочникСсылка.НастройкиЭДО")
//			ИЛИ ТипВладелецФайла = Тип("СправочникСсылка.УдалитьСоглашенияОбИспользованииЭД")
//			ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.УдалитьПроизвольныйЭД") Тогда
//			
//		ИменаСправочников.Вставить("ЭДПрисоединенныеФайлы", Истина);
//	КонецЕсли;
//	
//КонецПроцедуры

//// См. ЭлектронноеВзаимодействие.ПриЗаполненииСписковСОграничениемДоступа
//Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
//	
//	Списки.Вставить(Метаданные.Справочники.ПакетЭДПрисоединенныеФайлы, Истина);
//	Списки.Вставить(Метаданные.Справочники.ЭДПрисоединенныеФайлы, Истина);
//	Списки.Вставить(Метаданные.Документы.ПакетЭД, Истина);
//	Списки.Вставить(Метаданные.Документы.ЭлектронныйДокументВходящий, Истина);
//	Списки.Вставить(Метаданные.Документы.ЭлектронныйДокументИсходящий, Истина);
//	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияЭД, Истина);
//	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиВнутреннегоЭДО, Истина);
//	
//КонецПроцедуры

//// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
//Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
//	
//	Описание = Описание + "
//	|Справочник.ПакетЭДПрисоединенныеФайлы.Чтение.Организации
//	|Справочник.ЭДПрисоединенныеФайлы.Чтение.Организации
//	|Документ.ПакетЭД.Чтение.Организации
//	|Документ.ЭлектронныйДокументВходящий.Чтение.Организации
//	|Документ.ЭлектронныйДокументИсходящий.Чтение.Организации
//	|РегистрСведений.СостоянияЭД.Чтение.Организации
//	|РегистрСведений.НастройкиВнутреннегоЭДО.Чтение.Организации
//	|";
//	
//КонецПроцедуры

//// См. ЭлектронноеВзаимодействие.ПриДобавленииОбработчиковОбновления.
//Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

//#Область НачальноеЗаполнение

//#Область ОбменСКонтрагентами_ЗаполнитьКешиОператоровЭДОИФорматовНачальноеЗаполнение

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "";
//	Обработчик.НачальноеЗаполнение = Истина;
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаполнитьКешиОператоровЭДОИФорматовНачальноеЗаполнение";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("25fa11b7-471f-44e5-8d27-4a4858983b43");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление данных по операторам ЭДО и форматам электронных документов (начальное заполнение).'");

//#КонецОбласти

//#КонецОбласти

//#Область Монопольно

//#Область Версия_1_0_4

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбновитьВидыДокументов

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.4.0";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбновитьВидыДокументов";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_0_5

//#Область РегистрыСведений_УдалитьУчастникиОбменовЭДЧерезОператоровЭДО_ОбновитьВерсиюРегламентаЭДО

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.5.0";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "РегистрыСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ОбновитьВерсиюРегламентаЭДО";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_1_3

//#Область РегистрыСведений_ЖурналСобытийЭД_ОбновитьСтатусыЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.3.7";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "РегистрыСведений.ЖурналСобытийЭД.ОбновитьСтатусыЭД";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_1_5

//#Область ОбменСКонтрагентами_ОбработатьКорректировочныеСчетаФактуры

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.5.1";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ОбработатьКорректировочныеСчетаФактуры";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_1_6

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ЗаполнитьВерсииФорматов

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.6.3";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ЗаполнитьВерсииФорматов";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_1_7

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ПеренестиСертификатАвторизацииВТЧ

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.7.1";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ПеренестиСертификатАвторизацииВТЧ";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ЗаполнитьВерсииФорматовИсходящихЭДИПакета

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.7.4";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ЗаполнитьВерсииФорматовИсходящихЭДИПакета";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_1_9

//#Область Справочники_УдалитьСертификатыЭП_ЗаполнитьСрокДействия

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.9.1";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСертификатыЭП.ЗаполнитьСрокДействия";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_1_13

//#Область РегистрыСведений_УдалитьУчастникиОбменовЭДЧерезОператоровЭДО_ЗаменитьС1На2ВерсиюРегламентаЭДО

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.13.2";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "РегистрыСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ЗаменитьС1На2ВерсиюРегламентаЭДО";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_ЭДПрисоединенныеФайлы_ЗаполнитьНаименованиеФайла

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.13.4";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.ЭДПрисоединенныеФайлы.ЗаполнитьНаименованиеФайла";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбновитьВерсииФорматовИсходящихЭДИПакета

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.13.6";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбновитьВерсииФорматовИсходящихЭДИПакета";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_1_14

//#Область Документы_УдалитьПроизвольныйЭД_ЗаполнитьТипДокумента

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.14.2";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Документы.УдалитьПроизвольныйЭД.ЗаполнитьТипДокумента";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ЗаполнитьИспользованиеКриптографии

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.1.14.2";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ЗаполнитьИспользованиеКриптографии";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_2_2

//#Область ОбменСКонтрагентами_ЗаполнитьДанныеОПрофиляхНастроекЭДО

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.2.2.1";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаполнитьДанныеОПрофиляхНастроекЭДО";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбновитьВерсиюФорматаИсходящихЭД207_208

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.2.2.2";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбновитьВерсиюФорматаИсходящихЭД207_208";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_2_4

//#Область Справочники_УдалитьСертификатыЭП_ПеренестиНастройкиСертификатов

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.2.4.4";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСертификатыЭП.ПеренестиНастройкиСертификатов";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_ЭДПрисоединенныеФайлы_ИзменитьСтатусыПроизвольныхЭДСНеОтправленНаСформирован

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.2.4.4";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.ЭДПрисоединенныеФайлы.ИзменитьСтатусыПроизвольныхЭДСНеОтправленНаСформирован";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_2_7

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбновитьВерсиюФорматаИсходящихЭД501_502

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.2.7.2";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбновитьВерсиюФорматаИсходящихЭД501_502";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_3_2

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_УдалитьОтветныеТитулы

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.2.4";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.УдалитьОтветныеТитулы";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область ОбменСКонтрагентами_НастроитьАвтоПереходНаНовыеВерсииФорматовЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.2.20";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.НастроитьАвтоПереходНаНовыеВерсииФорматовЭД";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_3_4

//#Область ОбменСКонтрагентами_ДобавитьНовыеВидыЭДУПД_УКД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.4.8";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ДобавитьНовыеВидыЭДУПД_УКД";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_3_6

//#Область ОбменСКонтрагентами_ЗаполнитьВходящиеДокументыНастроек

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.4";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаполнитьВходящиеДокументыНастроек";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область ОбменСКонтрагентами_УдалитьНовыеВидыЭДУПД_УКД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.7";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.УдалитьНовыеВидыЭДУПД_УКД";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_УдалитьПрофилиНастроекЭДО_ЗаполнитьРегламентЭДО

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.7";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.ЗаполнитьРегламентЭДО";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область ОбменСКонтрагентами_УстановитьАктуальныеСостоянияЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.25";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.УстановитьАктуальныеСостоянияЭД";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область Справочники_УдалитьПрофилиНастроекЭДО_СнятьФлагОтветнойПодписиУСчетаНаОплату

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.25";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "Справочники.УдалитьПрофилиНастроекЭДО.СнятьФлагОтветнойПодписиУСчетаНаОплату";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ПеревестиНаНовуюАрхитектуруСтарыеУПДУКД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.31";
//	Обработчик.РежимВыполнения = "Монопольно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ПеревестиНаНовуюАрхитектуруСтарыеУПДУКД";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = ''");

//#КонецОбласти

//#КонецОбласти

//#КонецОбласти

//#Область Отложенно

//#Область Версия_1_2_7

//#Область РегистрыСведений_СостоянияЭД_УдалитьСостояниеУдалитьОжидаетсяИзвещение

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.2.7.8";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "РегистрыСведений.СостоянияЭД.УдалитьСостояниеУдалитьОжидаетсяИзвещение";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a351a845-1550-45d5-af0f-b3a5739a90ee");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Изменяет состояние документов с ""Ожидается извещение"" на ""Ожидается извещение о получении""'");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_3_1

//#Область ОбменСКонтрагентами_ПроверитьКонтрагентовБЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.1.9";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ПроверитьКонтрагентовБЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("28ce9ce8-fd89-44ed-9016-a904d4ff0990");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Проверяет контрагентов на подключение к сервису 1С-ЭДО.'");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_3_6

//#Область ОбменСКонтрагентами_ПеревестиНаНовуюАрхитектуруПакетыЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.4";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ПеревестиНаНовуюАрхитектуруПакетыЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2bf49f3-cca8-4a44-9dad-21b0f1d153f3");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Удаляет полученные и отправленные пакеты ЭД'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ПеревестиНаНовуюАрхитектуруПроизвольныхЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.4";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ПеревестиНаНовуюАрхитектуруПроизвольныхЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2bf49f3-cca8-4a44-9dad-21b0f1d153f2");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Создает входящие и исходящие ЭД для произвольных ЭД'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ПеревестиНаНовуюАрхитектуруЭДО

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.4";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ПеревестиНаНовуюАрхитектуруЭДО";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2bf49f3-cca8-4a44-9dad-21b0f1d153f1");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Создает входящие и исходящие ЭД'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ПеревестиНаНовуюАрхитектуруЭДОСтарыеCML

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.31";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ПеревестиНаНовуюАрхитектуруЭДОСтарыеCML";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2bf49f3-cca8-4a44-9dad-21b0f1d153f4");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Создает входящие и исходящие ЭД для старых CML документов'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ЗаполнитьДатуПоследнегоИзмененияСостоянияЭДО

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.34";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаполнитьДатуПоследнегоИзмененияСостоянияЭДО";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2bf49f3-cca8-4a44-9dad-21b0f1d153f5");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Заполняет дату последнего изменения состояния ЭДО'");

//#КонецОбласти

//#Область РегистрыСведений_ЖурналСобытийЭД_ЗаполнитьРесурсВладелецЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.35";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "РегистрыСведений.ЖурналСобытийЭД.ЗаполнитьРесурсВладелецЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea7baa79-5233-402b-93b5-02c740e8f200");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Заполнение регистра сведений Журнал событий ЭДО'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ЗаменитьУстаревшиеВидыЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.38";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаменитьУстаревшиеВидыЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("100bcc56-1ab2-40a0-974c-b07c1b32e779");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Обновление устаревших видов ЭД'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ЗаполнитьСостоянияСтарыхУПДУКД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.6.38";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаполнитьСостоянияСтарыхУПДУКД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1516e625-bc4d-4e63-8f57-43c981f4ef52");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "";
//	Обработчик.ОчередьОтложеннойОбработки = 0;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "";
//	Обработчик.ИзменяемыеОбъекты = "";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обмен с контрагентами: Обновление регистра сведений Состояния электронных документов'");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_3_9

//#Область ЭлектронноеВзаимодействие_Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.9.54";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d34ac738-363e-4eb7-be07-7c6d472bcc34");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 4;
//	Обработчик.ПроцедураПроверки = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "Документ.ПакетЭД,"
//		+ "Документ.ЭлектронныйДокументВходящий,"
//		+ "Документ.ЭлектронныйДокументИсходящий,"
//		+ "РегистрСведений.СостояниеПодписанияЭД,"
//		+ "РегистрСведений.СостоянияЭД,"
//		+ "РегистрСведений.ЭлектронныеПодписи,"
//		+ "Справочник.МаршрутыПодписания,"
//		+ "Справочник.УдалитьПрофилиНастроекЭДО,"
//		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД,"
//		+ "Справочник.ЭДПрисоединенныеФайлы";
//	Обработчик.ИзменяемыеОбъекты = "Документ.ЭлектронныйДокументВходящий,"
//		+ "Документ.ЭлектронныйДокументИсходящий,"
//		+ "РегистрСведений.СостояниеПодписанияЭД,"
//		+ "РегистрСведений.СостоянияЭД,"
//		+ "Справочник.ЭДПрисоединенныеФайлы";
//	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументВходящий,"
//		+ "Документ.ЭлектронныйДокументИсходящий,"
//		+ "Справочник.ЭДПрисоединенныеФайлы";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника Присоединенные файлы (Электронные документы).
//	|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
//		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//		НоваяСтрока.Порядок = "Любой";
//	КонецЕсли;

//	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
//		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//		НоваяСтрока.Порядок = "Любой";
//	КонецЕсли;

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_3_10

//#Область ОбменСКонтрагентами_ВключитьИспользованиеОзнакомленийСЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.10.25";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ВключитьИспользованиеОзнакомленийСЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("362ddf11-9595-418f-b695-436b7c60794d");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьОзнакомлениеСЭлектроннымиДокументами";
//	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьОзнакомлениеСЭлектроннымиДокументами";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: включение отправки на ознакомление электронных документов.
//	|Отправка электронных документов на ознакомление временно не производится.'");

//#КонецОбласти

//#Область РегистрыСведений_СостоянияЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.3.10.25";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "РегистрыСведений.СостоянияЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ae79ed6b-7ebb-4ce0-a4d5-3c72b033e6a1");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияЭД";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияЭД";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление описания оснований электронных документов.
//	|Раздел ""Создать"" в текущих делах ЭДО может содержать незаполненные данные.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_4_1

//#Область РегистрыСведений_КонтрольОтраженияВУчетеЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.4.1.23";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("09e42776-c28d-4877-bd17-47346f568300");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 5;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументВходящий,"
//		+ "РегистрСведений.КонтрольОтраженияВУчетеЭДО,"
//		+ "Справочник.ЭДПрисоединенныеФайлы";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.КонтрольОтраженияВУчетеЭДО";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление контроля отражения в учете электронных документов.
//	|Раздел """"Отразить в учете"""" в текущих делах ЭДО может быть заполнен не полностью.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_6_1

//#Область ОбменСКонтрагентами_УстановкаЗначенияКонстантыСоздаватьКонтрагентовАвтоматическиБЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.1.4";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.УстановкаЗначенияКонстантыСоздаватьКонтрагентовАвтоматическиБЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("45562b2d-f775-4a8e-a881-5b8029f1779d");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "Константа.СоздаватьКонтрагентовАвтоматическиБЭД";
//	Обработчик.ИзменяемыеОбъекты = "Константа.СоздаватьКонтрагентовАвтоматическиБЭД";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: Установка константы разрешающей автоматическое создание контрагентов при работе с ЭДО'");

//#КонецОбласти

//#Область РегистрыСведений_СостоянияОбменовЭДЧерезОператоровЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.1.4";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2ef1f269-596d-4e60-bcb8-eea3bdecd689");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО,"
//		+ "Справочник.УдалитьПрофилиНастроекЭДО";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление состояний обменов электронными документами.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//#КонецОбласти

//#Область РегистрыСведений_НастройкиЗаполненияДополнительныхПолей_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.1.17";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2d100b86-11d6-4990-9ef2-7883f5bb792f");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.НастройкиЗаполненияДополнительныхПолей,"
//		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.НастройкиЗаполненияДополнительныхПолей";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление настроек заполнения дополнительных полей.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_6_2

//#Область ОбменСКонтрагентами_ЗаполнитьКешиОператоровЭДОИФорматов

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.2.11";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаполнитьКешиОператоровЭДОИФорматов";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("75877a88-2d4b-4e79-93dd-4b25d493e6ad");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ОператорыЭДО,"
//		+ "РегистрСведений.СвязьВидовИФорматовЭД,"
//		+ "РегистрСведений.СовместимостьОператоровЭДО,"
//		+ "РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО,"
//		+ "РегистрСведений.ФорматыЭлектронныхДокументов";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ОператорыЭДО,"
//		+ "РегистрСведений.СвязьВидовИФорматовЭД,"
//		+ "РегистрСведений.СовместимостьОператоровЭДО,"
//		+ "РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО,"
//		+ "РегистрСведений.ФорматыЭлектронныхДокументов";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление данных по операторам ЭДО и форматам электронных документов.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_6_3

//#Область Документы_ЭлектронныйДокументВходящий_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.3.5";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "Документы.ЭлектронныйДокументВходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dcafb44d-22d0-431a-aa23-995aa699a07b");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭлектронныйДокументВходящий.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 3;
//	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументВходящий,"
//		+ "РегистрСведений.ЖурналСобытийЭД,"
//		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД,"
//		+ "Справочник.ЭДПрисоединенныеФайлы";
//	Обработчик.ИзменяемыеОбъекты = "Документ.ЭлектронныйДокументВходящий";
//	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументВходящий";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление входящих электронных документов.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РегистрыСведений.КонтрольОтраженияВУчетеЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//#КонецОбласти

//#Область РегистрыСведений_АбонентыЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.3.16";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "РегистрыСведений.АбонентыЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1c593855-f0c1-4a3b-9362-22f4e1ce9058");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.АбонентыЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.АбонентыЭДО";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.АбонентыЭДО";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление абонентов ЭДО.'");

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_6_4

//#Область ОбменСКонтрагентами_ВключитьУтверждениеВходящихДокументов

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.4.10";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ВключитьУтверждениеВходящихДокументов";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("928d2a7d-c7d1-43ae-bfdd-eddabc6f01a8");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьОбменЭД,"
//		+ "Константа.ОтправлятьВходящиеДокументыНаУтверждение";
//	Обработчик.ИзменяемыеОбъекты = "Константа.ОтправлятьВходящиеДокументыНаУтверждение";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Включает необходимость утверждения входящих документов, если включен обмен с контрагентами'");

//#КонецОбласти

//#Область Документы_ЭлектронныйДокументИсходящий_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.4.28";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "Документы.ЭлектронныйДокументИсходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a98bca9f-e5d2-42b9-9f0f-29a1aa2d4108");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЭлектронныйДокументИсходящий.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 3;
//	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументИсходящий,"
//		+ "РегистрСведений.ЖурналСобытийЭД,"
//		+ "РегистрСведений.ОператорыЭДО,"
//		+ "Справочник.УдалитьПрофилиНастроекЭДО,"
//		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД,"
//		+ "Справочник.ЭДПрисоединенныеФайлы";
//	Обработчик.ИзменяемыеОбъекты = "Документ.ЭлектронныйДокументИсходящий";
//	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументИсходящий";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление исходящих электронных документов.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ОбменСКонтрагентами.ЗаполнитьКешиОператоровЭДОИФорматов";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РаботаСФайлами.ПеренестиЭлектронныеПодписиИСертификатыШифрованияВРегистрыСведений";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//#КонецОбласти

//#Область ЭлектронноеВзаимодействие_Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.4.28";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e7bb05a-2a3a-4031-bddf-a71990eeb03b");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 2;
//	Обработчик.ПроцедураПроверки = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ПодписываемыеВидыЭД,"
//		+ "РегистрСведений.СертификатыУчетныхЗаписейЭДО,"
//		+ "Справочник.МаршрутыПодписания,"
//		+ "Справочник.УдалитьПрофилиНастроекЭДО";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПодписываемыеВидыЭД,"
//		+ "РегистрСведений.СертификатыУчетныхЗаписейЭДО,"
//		+ "Справочник.УдалитьПрофилиНастроекЭДО";
//	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументВходящий,"
//		+ "Документ.ЭлектронныйДокументИсходящий,"
//		+ "Справочник.УдалитьПрофилиНастроекЭДО";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника профили настроек ЭДО.
//	|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
//		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//		НоваяСтрока.Порядок = "Любой";
//	КонецЕсли;

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//#КонецОбласти

//#Область Справочники_УдалитьСоглашенияОбИспользованииЭД_ОбработатьДанныеДляПереходаНаНовуюВерсию

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.6.4.33";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b46394ef-478c-49bd-a670-c508adb73281");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
//	Обработчик.ОчередьОтложеннойОбработки = 2;
//	Обработчик.ПроцедураПроверки = "Справочники.УдалитьСоглашенияОбИспользованииЭД.ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "Документ.ЭлектронныйДокументИсходящий,"
//		+ "Константа.ИспользоватьПрямойОбменЭлектроннымиДокументами,"
//		+ "РегистрСведений.НастройкиОтправкиЭлектронныхДокументов,"
//		+ "РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам,"
//		+ "РегистрСведений.НастройкиПолученияЭлектронныхДокументов,"
//		+ "РегистрСведений.ОператорыЭДО,"
//		+ "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами,"
//		+ "РегистрСведений.СостояниеОрганизацийБЭД,"
//		+ "РегистрСведений.СостоянияКонтрагентовБЭД,"
//		+ "РегистрСведений.УчетныеЗаписиЭДО,"
//		+ "Справочник.УдалитьПрофилиНастроекЭДО,"
//		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД";
//	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьПрямойОбменЭлектроннымиДокументами,"
//		+ "РегистрСведений.НастройкиОтправкиЭлектронныхДокументов,"
//		+ "РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам,"
//		+ "РегистрСведений.НастройкиПолученияЭлектронныхДокументов,"
//		+ "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами,"
//		+ "РегистрСведений.СостояниеОрганизацийБЭД,"
//		+ "РегистрСведений.СостоянияКонтрагентовБЭД,"
//		+ "РегистрСведений.УчетныеЗаписиЭДО,"
//		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД";
//	Обработчик.БлокируемыеОбъекты = "Документ.ЭлектронныйДокументВходящий,"
//		+ "Документ.ЭлектронныйДокументИсходящий,"
//		+ "Справочник.УдалитьСоглашенияОбИспользованииЭД";
//	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: изменение параметров справочника """"Настройки ЭДО"""". 
//	|Настройка и обмен электронными документами с контрагентами временно невозможен.'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ОбменСКонтрагентами.ЗаполнитьКешиОператоровЭДОИФорматов";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументИсходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "Документы.ЭлектронныйДокументВходящий.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "До";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "Любой";

//#КонецОбласти

//#КонецОбласти

//#Область Версия_1_7_2

//#Область ОбменСКонтрагентами_ВключитьИспользованиеВнутреннихДокументов

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.7.2.12";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ВключитьИспользованиеВнутреннихДокументов";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("32da4d73-c06d-4d01-9724-4cf44f9dc717");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
//	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьВнутренниеДокументыЭДО";
//	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьВнутренниеДокументыЭДО";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = '1С:БЭД: Включает использование внутренних электронных документов'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ИзменитьРасписаниеПроверкиКонтрагентов

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.7.2.40";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ИзменитьРасписаниеПроверкиКонтрагентов";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eb2d8c82-aba7-46a7-b4ad-2b54aafa8d88");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 1;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "РегламентноеЗадание.ПроверкаКонтрагентовБЭД";
//	Обработчик.ИзменяемыеОбъекты = "РегламентноеЗадание.ПроверкаКонтрагентовБЭД";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Обновление расписания регламентного задания проверки контрагентов на подключение к 1С-ЭДО.'");

//#КонецОбласти

//#Область ОбменСКонтрагентами_ЗаполнитьПустыеПредставленияСостоянияЭД

//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.7.2.54";
//	Обработчик.РежимВыполнения = "Отложенно";
//	Обработчик.Процедура = "ОбменСКонтрагентами.ЗаполнитьПустыеПредставленияСостоянияЭД";
//	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f976ae16-e2b5-45a3-8551-7274d04864c1");
//	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
//	Обработчик.ОчередьОтложеннойОбработки = 6;
//	Обработчик.ПроцедураПроверки = "";
//	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.СостоянияЭД";
//	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.СостоянияЭД";
//	Обработчик.БлокируемыеОбъекты = "";
//	Обработчик.Комментарий = НСтр("ru = 'Заполнение пустого представления состояния электронных документов'");
//	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//	НоваяСтрока.Процедура = "РегистрыСведений.СостоянияЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//	НоваяСтрока.Порядок = "После";

//#КонецОбласти

//#КонецОбласти

//#Область КорректировкаОбработчиков

//	ВерсияБСП_Больше_3_1_3 = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыСервер.ВерсияБиблиотеки(), "3.1.3.0") > 0);
//	
//	Для каждого Обработчик Из Обработчики Цикл
//		
//		// Для БСП, начиная с 3.1.3, нужно описать приоритет с обработчиком "РегистрыСведений.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию".
//		Если Обработчик.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию"
//			И ВерсияБСП_Больше_3_1_3 Тогда
//			
//			ПроцедураОбработкиЭлектронныеПодписи = "РегистрыСведений.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию";
//			ЕстьПриоритетПоЭлектронныеПодписи = Ложь;
//			Для каждого Приоритет Из Обработчик.ПриоритетыВыполнения Цикл
//				Если Приоритет.Процедура = ПроцедураОбработкиЭлектронныеПодписи Тогда
//					ЕстьПриоритетПоЭлектронныеПодписи = Истина;
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//			Если Не ЕстьПриоритетПоЭлектронныеПодписи Тогда
//				НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
//				НоваяСтрока.Процедура = ПроцедураОбработкиЭлектронныеПодписи;
//				НоваяСтрока.Порядок = "После";
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;

//#КонецОбласти

//#КонецОбласти

//КонецПроцедуры

//// Создает новые электронные документы.
////
//// Параметры:
////  ДокументыОснования - Массив - ссылки на учетные документы, на основании которых надо сформировать электронные документы.
////
//// Возвращаемое значение:
////  Массив - массив структур с ошибками заполнения, возникшими при создании электронных документов, с ключами:
////    ДанныеДляОбработкиОшибок - Структура - данные для обработки ошибки, см. ОбменСКонтрагентамиСлужебный.ВыполнитьДействияПоЭД. 
////    ОшибкиЗаполнения - Структура - ошибки заполнения, см. ОбменСКонтрагентамиСлужебный.ВыполнитьДействияПоЭД.
////
//Функция НовыеЭлектронныеДокументы(ДокументыОснования) Экспорт
//	
//	Результат = Новый Массив;
//	
//	Действие = "Сформировать";
//	ОтпечаткиСертификатов = Новый Массив(1);
//	
//	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыйКонтекстОперации();
//	КонтекстОперации.Вставить("ДатаНачалаОперации", ТекущаяДатаСеанса());
//	
//	ДопПараметры = Новый Структура;
//	ДопПараметры.Вставить("КонтекстОперации", КонтекстОперации);
//	
//	СертификатыИПароли = Новый Соответствие;
//	
//	СтруктураВозврата = ОбменСКонтрагентамиСлужебный.ВыполнитьДействияПоЭД(
//		ДокументыОснования, ОтпечаткиСертификатов, Действие, ДопПараметры, Неопределено, СертификатыИПароли);
//		
//	Если СтруктураВозврата.Свойство("ОшибкиПриФормированииДокументов") Тогда
//		Ошибки = ПолучитьИзВременногоХранилища(СтруктураВозврата.ОшибкиПриФормированииДокументов);
//		Для Каждого Ошибка Из Ошибки Цикл
//			
//			ОписаниеОшибки = Новый Структура;
//			ОписаниеОшибки.Вставить("ДанныеДляОбработкиОшибок", Ошибка.ДанныеДляОбработкиОшибок);
//			ОписаниеОшибки.Вставить("ОшибкиЗаполнения", Ошибка.ОшибкиЗаполнения);
//			Результат.Добавить(ОписаниеОшибки);
//			
//		КонецЦикла;
//	КонецЕсли;
//		
//	Возврат Результат;
//	
//КонецФункции

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//Процедура РазместитьНаФормеКомандыЭДО(ПараметрыПриСозданииНаСервере)
//	
//	Форма = ПараметрыПриСозданииНаСервере.Форма;
//	МестоРазмещенияКомандПоУмолчанию = ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд;
//	НаправлениеЭД = ПараметрыПриСозданииНаСервере.Направление;
//	
//	//ЭлектронноеВзаимодействиеСлужебный.РазместитьНаФормеКомандыЭДО(Форма, МестоРазмещенияКомандПоУмолчанию, "ОбменСКонтрагентами", НаправлениеЭД);
//	
//КонецПроцедуры

//Процедура ЗаполнитьСостояниеЭДО(ПараметрыПриСозданииНаСервере)
//	
//	Форма = ПараметрыПриСозданииНаСервере.Форма;
//	ДокументСсылка = ПараметрыПриСозданииНаСервере.ДокументСсылка;
//	ДекорацияСостояниеЭДО = ПараметрыПриСозданииНаСервере.ДекорацияСостояниеЭДО;
//	ГруппаСостояниеЭДО = ПараметрыПриСозданииНаСервере.ГруппаСостояниеЭДО;
//	
//	Если ДекорацияСостояниеЭДО = Неопределено Тогда
//		Возврат;
//	КонецЕсли;   
//	
//	ОбменСКонтрагентамиКлиентСервер.ЗаполнитьСостояниеЭДО(Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО);
//	
//КонецПроцедуры

//// Процедура используется для формирования дерева доп.данных.
//// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
////
//// Параметры:
////  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
////  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
////    простым типом, массивы значений, вложенные структуры данных.
////  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
////  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
////    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
////  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
////  НомерСтроки - Строка - номер строки табличной части документа ИБ.
////
//Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
//								   СтруктураДанных,
//								   ДоступноСимволов,
//								   ЮридическиЗначимый,
//								   ЭлементТЧ,
//								   НомерСтроки)
//	
//	Для Каждого Элемент Из СтруктураДанных Цикл
//		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
//			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
//				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
//				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
//				Если СтрокиДерева.Количество() = 0 Тогда
//					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
//					СтрокаДерева.ИмяРеквизита = "Набор";
//					
//					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
//					СтрокаДерева.ТЧ = ЭлементТЧ;
//					
//					
//					
//				Иначе
//					СтрокаДерева = СтрокиДерева[0];
//				КонецЕсли;
//				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ,
//					НомерСтроки);
//			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
//				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
//				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
//				Если СтрокиДерева.Количество() = 0 Тогда
//					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
//					СтрокаДерева.ИмяРеквизита = "Список";
//					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
//					СтрокаДерева.ТЧ = Истина;
//					
//					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Список", Элемент.Ключ, ДоступноСимволов);
//					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
//						ЮридическиЗначимый = Ложь;
//					КонецЕсли;
//					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;

//					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, "", ДоступноСимволов);
//					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
//						ЮридическиЗначимый = Ложь;
//					КонецЕсли;
//					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый ;
//					
//				Иначе
//					СтрокаДерева = СтрокиДерева[0];
//				КонецЕсли;
//				ТЗ = Элемент.Значение;
//				ПоляСтруктурыТЗ = "";
//				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
//					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
//				КонецЦикла;
//				ЮридическийДо = ЮридическиЗначимый;
//				Для Каждого СтрокаТЗ Из ТЗ Цикл
//					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
//					
//					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
//					СтрокаДереваНпп.ТЧ = Истина;
//					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
//					
//					ВозможноРазмещение = ВозможноРазмещениеВОсновномФайле("Нпп", "", ДоступноСимволов);
//					Если ЮридическиЗначимый И Не ВозможноРазмещение Тогда
//						ЮридическиЗначимый = Ложь;
//					КонецЕсли;
//					СтрокаДереваНпп.ЮридическиЗначимый = ЮридическиЗначимый;
//					
//					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
//					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
//					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый,
//						ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
//					
//				КонецЦикла;
//				Если Не ЮридическийДо = ЮридическиЗначимый Тогда
//					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
//					ОбновитьСтрокиДерева(СтрокаДерева,ЮридическиЗначимый);
//				КонецЕсли;
//				
//			Иначе
//				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
//				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
//																					Элемент.Значение,
//																					ДоступноСимволов);
//				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
//					ЮридическиЗначимый = Ложь;
//				КонецЕсли;
//				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
//				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
//					НоваяСтрока.ИмяРеквизита = "Массив";
//					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
//					НоваяСтрока.ТЧ = ЭлементТЧ;
//					Для Каждого Значение Из Элемент.Значение Цикл
//						СтрокаЗначения = НоваяСтрока.Строки.Добавить();
//						СтрокаЗначения.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
//						СтрокаЗначения.ТЧ = ЭлементТЧ;
//						СтрокаЗначения.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
//						Если ТипЗнч(Значение) = Тип("Структура") Тогда
//							СтрокаЗначения.ЗначениеРеквизита = "Структура";
//							ДобавитьДанныеРекурсивно(СтрокаЗначения, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
//						Иначе
//							
//							СтрокаЗначения.ЗначениеРеквизита = XMLСтрока(Значение);
//						КонецЕсли
//					КонецЦикла;
//				Иначе
//					НоваяСтрока.ИмяРеквизита      = Элемент.Ключ;
//					НоваяСтрока.ЗначениеРеквизита = XMLСтрока(Элемент.Значение);
//					НоваяСтрока.ТЧ = ЭлементТЧ;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
//// символов), не должна превышать количества доступных символов.
////
//// Параметры:
////  СтруктураДанных - Структура - заполняемая структура.
////  Ключ - Строка - ключ добавляемого элемента.
////  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
////  ДоступноСимволов - Число - количество доступных символов результирующей строки.
////
//// Возвращаемое значение:
////  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
////
//Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
//	
//	РазмещениеВозможно = Ложь;
//	
//	СлужебныеСимволы = 0;
//	ДлинаСтрЗначения = 0;
//	
//	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
//	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
//	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
//	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
//	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
//	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
//	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
//	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
//	
//	Если ТипЗнч(Значение) = Тип("Массив") Тогда
//		Для Каждого Элемент Из Значение Цикл
//			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
//		КонецЦикла;
//		
//		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
//	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
//		Для Каждого Элемент Из Значение Цикл
//			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
//			Если НЕ РазмещениеВозможно Тогда
//				Возврат Ложь;
//			КонецЕсли;
//		КонецЦикла;
//		
//		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
//	Иначе // простой тип.
//		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
//	КонецЕсли;
//	
//	Если ДоступноСимволов >= СлужебныеСимволы Тогда
//		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
//		РазмещениеВозможно = Истина;
//	КонецЕсли;
//	
//	Возврат РазмещениеВозможно;
//	
//КонецФункции

//Процедура ЗаполнитьДанныеЭД(МассивФайловЭД, ЭД, СвойстваДокумента, СтрокаУИД, ТипФайла, УникальныйИдентификатор)
//	
//	ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭД, УникальныйИдентификатор);
//	
//	ВидЭД = СвойстваДокумента.ВидЭД;
//	
//	// Правка имени файла для КОРЭСФ - убрать после правки размерности в наименовании 150.
//	Если ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
//		Наименование = ДанныеФайла.Наименование;
//		ПозицияУИД = СтрНайти(Наименование, "_" + Лев(СтрокаУИД, 35));
//		Если ПозицияУИД > 0 Тогда
//			ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
//			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
//		КонецЕсли;
//	КонецЕсли;
//	
//	СтруктураПараметровЭД = Новый Структура;
//	СтруктураПараметровЭД.Вставить("ТипФайла", ТипФайла);
//	СтруктураПараметровЭД.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
//	СтруктураПараметровЭД.Вставить("КНД", ОбменСКонтрагентамиПовтИсп.КНДПоВидуЭД(СвойстваДокумента));
//	СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
//	
//	МассивФайловЭД.Добавить(СтруктураПараметровЭД);
//	
//	МассивСтруктурПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ЭД);
//	
//	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
//		Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
//			ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
//			Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
//				ИмяФайлаПодписи = ДанныеФайла.Наименование + ".p7s";
//			КонецЕсли;
//			
//			СтруктураПараметровЭД = Новый Структура;
//			СтруктураПараметровЭД.Вставить("ТипФайла", ?(ТипФайла = "ФайлВыгрузки", "ЭЦП", "ЭЦППодтверждения"));
//			СтруктураПараметровЭД.Вставить("ИмяФайла", ИмяФайлаПодписи);
//			СтруктураПараметровЭД.Вставить("КНД", "");
//			СтруктураПараметровЭД.Вставить("АдресВременногоХранилища",
//				ПоместитьВоВременноеХранилище(СтруктураПодписи.Подпись, УникальныйИдентификатор));
//			
//			МассивФайловЭД.Добавить(СтруктураПараметровЭД);
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ОбновитьСтрокиДерева(СтрокаДерева, ЮридическиЗначимый)
//	
//	Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
//		
//		ТекСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
//		Если ТекСтрока.Строки.Количество()> 0 Тогда
//			ОбновитьСтрокиДерева(ТекСтрока, ЮридическиЗначимый);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ДополнитьЭлементамиВнешнегоЭДО(Форма, Отказ, СтандартнаяОбработка)
//	
//	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ЭДОСформироватьПроизвольныйДокумент");
//	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'ЭДО'");
//	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
//	
//	ОтправитьЧерезЭДОКнопкаФормы = Форма.Элементы.Добавить(
//	"СформироватьПроизвольныйДокументКнопкаФормы", 
//	Тип("КнопкаФормы"),
//	Форма.Элементы.ГруппаСохранитьОтправить);
//	
//	ОтправитьЧерезЭДОКнопкаФормы.ИмяКоманды = "ЭДОСформироватьПроизвольныйДокумент";
//	ОтправитьЧерезЭДОКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
//	ОтправитьЧерезЭДОКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
//	ОтправитьЧерезЭДОКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
//	ОтправитьЧерезЭДОКнопкаФормы.Видимость = Истина;

//КонецПроцедуры

//Процедура ДополнитьЭлементамиВнутреннегоЭДО(Форма, Отказ, СтандартнаяОбработка)
//	
//	ГруппаЭлементовВнутреннегоЭДО = Форма.Элементы.Вставить(
//		"ГруппаЭлементовВнутреннегоЭДО", 
//		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
//		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
//		
//	ГруппаЭлементовВнутреннегоЭДО.Вид = ВидГруппыФормы.ОбычнаяГруппа;
//	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоВертикали = Ложь;
//	ГруппаЭлементовВнутреннегоЭДО.РастягиватьПоГоризонтали = Ложь;
//	ГруппаЭлементовВнутреннегоЭДО.ОтображатьЗаголовок = Ложь;
//	ГруппаЭлементовВнутреннегоЭДО.Отображение = ОтображениеОбычнойГруппы.Нет;
//	
//	ЭмблемаСервиса1СЭДОКартинкаПодписание = Форма.Элементы.Добавить(
//	"ЭмблемаСервиса1СЭДОПодписаниеКартинка", 
//	Тип("ДекорацияФормы"),
//	ГруппаЭлементовВнутреннегоЭДО);
//	
//	ЭмблемаСервиса1СЭДОКартинкаПодписание.Вид = ВидДекорацииФормы.Картинка;
//	ЭмблемаСервиса1СЭДОКартинкаПодписание.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
//	ЭмблемаСервиса1СЭДОКартинкаПодписание.Видимость = Ложь;
//	
//	ПредставлениеПрогрессаПодписанияДекорация = Форма.Элементы.Добавить(
//	"ПредставлениеПрогрессаПодписанияДекорация", 
//	Тип("ДекорацияФормы"), ГруппаЭлементовВнутреннегоЭДО);
//	
//	ПредставлениеПрогрессаПодписанияДекорация.Вид = ВидДекорацииФормы.Надпись;
//	ПредставлениеПрогрессаПодписанияДекорация.РастягиватьПоГоризонтали = Истина;
//	ПредставлениеПрогрессаПодписанияДекорация.АвтоМаксимальнаяШирина = Ложь;
//	ПредставлениеПрогрессаПодписанияДекорация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
//	ПредставлениеПрогрессаПодписанияДекорация.Видимость = Ложь;
//	
//	ОтправитьНаПодписьКоманда = Форма.Команды.Добавить("ВнутреннийЭДООтправитьНаПодпись");
//	ОтправитьНаПодписьКоманда.Заголовок = НСтр("ru = 'Отправить на подпись'");
//	ОтправитьНаПодписьКоманда.Действие  = "Подключаемый_ВыполнитьКоманду";	
//	
//	ОтправитьНаПодписьКнопкаФормы = Форма.Элементы.Добавить(
//	"ОтправитьНаПодписьКнопкаФормы", 
//	Тип("КнопкаФормы"),
//	ГруппаЭлементовВнутреннегоЭДО);
//	
//	ГруппаРекламыВнутреннегоЭДО = Форма.Элементы.Вставить(
//		"ГруппаРекламыВнутреннегоЭДО", 
//		Тип("ГруппаФормы"), Форма.Элементы.ГруппаКоманднаяПанель, 
//		Форма.Элементы.КоманднаяПанельЛеваяЧасть);
//		
//	Форма.Элементы.ДополнительнаяИнформация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");

//	ОтправитьНаПодписьКнопкаФормы.ИмяКоманды = "ВнутреннийЭДООтправитьНаПодпись";
//	ОтправитьНаПодписьКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
//	ОтправитьНаПодписьКнопкаФормы.Картинка = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО;
//	ОтправитьНаПодписьКнопкаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
//	ОтправитьНаПодписьКнопкаФормы.ЦветФона = ЦветаСтиля.ЦветВажного;
//	ОтправитьНаПодписьКнопкаФормы.Видимость = Ложь;
//	
//	ОбменСКонтрагентамиСлужебныйКлиентСервер.ОбновитьФормуПечатиДокументовБСП(Форма);

//КонецПроцедуры

//#Область ОбновлениеИнформационнойБазы

//Функция ПолучитьВыборкуЭД(УникальныйИД, ВладелецФайла)
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = "ВЫБРАТЬ
//	|	ЭДПрисоединенныеФайлы.Ссылка
//	|ИЗ
//	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
//	|ГДЕ
//	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
//	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
//	
//	Запрос.УстановитьПараметр("УникальныйИД",УникальныйИД);
//	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
//	
//	Возврат Запрос.Выполнить().Выбрать();
//	
//КонецФункции

//#КонецОбласти

//#КонецОбласти
