#Область СлужебныеПроцедурыИФункции

Процедура РедактированиеЗарплатыСтрокиНастроитьЭлементы(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ЗарплатаСтатьяРасходов", 
		"Видимость", 
		Ложь);
	
КонецПроцедуры

Процедура РедактированиеНДФЛСтрокиНастроитьЭлементы(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НДФЛСтатьяРасходов",
		"Видимость",
		Ложь);
	
КонецПроцедуры

Функция ПредставлениеОплаты(ЕстьОплаты, СписокОплат) Экспорт
	
	Если Не ЕстьОплаты Тогда
		
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(НСтр("ru = 'Выплаты по ведомости не выполнялись'"));
		
	ИначеЕсли ЕстьОплаты И СписокОплат.Количество() = 0 Тогда
		
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(НСтр("ru = 'По ведомости выполнялись выплаты'"));
		
	ИначеЕсли СписокОплат.Количество() = 1 Тогда
		
		ПредставлениеДокумента = Лев(СписокОплат[0].Представление, СтрНайти(СписокОплат[0].Представление, " - ")-1);
		ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, " № ", " ");
		
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(ПредставлениеДокумента, , , , "ссылка");
		
	Иначе
		
		ПредставлениеДокумента = Лев(СписокОплат[0].Представление, СтрНайти(СписокОплат[0].Представление, "№")-2);
		
		ПредставлениеКоличества = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(%1 %2)'"),
				СписокОплат.Количество(),
				СтрокаСЧислом("; документ; ; документа; документов; документа",
					СписокОплат.Количество(),
					ВидЧисловогоЗначения.Количественное,
					"L=ru_RU"));
					
		ПредставлениеДокументов  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			ПредставлениеДокумента,
			ПредставлениеКоличества);
			
			Для Каждого Оплата ИЗ СписокОплат Цикл
				Оплата.Представление = СтрЗаменить(Оплата.Представление, " № ", " ");
			КонецЦикла;
			
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(ПредставлениеДокументов,, , , "ссылка");
		
	КонецЕсли;
	
	Возврат ПредставлениеОплаты
	
КонецФункции

Процедура ПриПолученииДанныхСтрокиСоставаКВыплате(Форма, СтрокаСостава) Экспорт
	
	ПериодРегистрацииВедомости = Форма.Объект.ПериодРегистрации;
	
	СтрокиЗарплатыРаботника = Форма.Объект.Зарплата.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	
	СтрокаСостава.КВыплатеСумма = Форма.Объект.Зарплата.Выгрузить(СтрокиЗарплатыРаботника, "КВыплате").Итог("КВыплате");;
	
	ПериодыВзаиморасчетов = Форма.Объект.Зарплата.Выгрузить(СтрокиЗарплатыРаботника, "ПериодВзаиморасчетов");
	ПериодыВзаиморасчетов.Свернуть("ПериодВзаиморасчетов");
	РасшифровкаПериодов = "";
	Если ПериодыВзаиморасчетов.Количество() = 1 И ПериодыВзаиморасчетов.Найти(ПериодРегистрацииВедомости) <> Неопределено Тогда
		// Единственный период, совпадающий с периодом ведомости - комментировать нечего
	ИначеЕсли ПериодыВзаиморасчетов.Количество() = 1 Тогда
		// Единственный период, не совпадающий с периодом ведомости
		ПредставлениеПериода = НРег(ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыВзаиморасчетов[0].ПериодВзаиморасчетов));
		РасшифровкаПериодов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'за %1'"), ПредставлениеПериода);
	Иначе
		// Периодов несколько, есть отличающиеся от периода ведомости
		ПериодыВзаиморасчетов.Сортировать("ПериодВзаиморасчетов");
		ПредставлениеПериодов = "";
		Для Индекс = 0 По ПериодыВзаиморасчетов.Количество()-1 Цикл
			
			// период ведомости в комментарий не включаем
			Если ПериодыВзаиморасчетов[Индекс].ПериодВзаиморасчетов = ПериодРегистрацииВедомости Тогда
				Продолжить
			КонецЕсли;
			
			Если Индекс = 3 Тогда
				ПредставлениеПериодов = ПредставлениеПериодов + "...";
				Прервать
			ИначеЕсли Индекс > 0 Тогда
				ПредставлениеПериодов = ПредставлениеПериодов + ", ";
			КонецЕсли;

			ПредставлениеПериодов = ПредставлениеПериодов + НРег(ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(ПериодыВзаиморасчетов[Индекс].ПериодВзаиморасчетов));
			
		КонецЦикла;	
		
		РасшифровкаПериодов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В т.ч. долг за %1'"), ПредставлениеПериодов);
		
	КонецЕсли;	
	
	СтрокаСостава.КВыплатеРасшифровка = "";
	Если ЗначениеЗаполнено(РасшифровкаПериодов) Тогда
		СтрокаСостава.КВыплатеРасшифровка = СтрокаСостава.КВыплатеРасшифровка + РасшифровкаПериодов
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПриПолученииДанныхСтрокиСоставаНДФЛ(Форма, СтрокаСостава) Экспорт
	
	ВыплачиваетсяАванс = Форма.СпособВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
	ВыплачиваетсяЗарплата = Форма.СпособВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	
	ОсновныеКатегории = Новый Массив;
	ОснованияАванса = Новый Соответствие;
	Если ВыплачиваетсяАванс Тогда
		ОсновныеКатегории = Перечисления.КатегорииДоходовНДФЛ.ОплатаТруда();
		ОснованияАванса = РасчетЗарплаты.ТипыДокументовНачисленияАванса();
	ИначеЕсли ВыплачиваетсяЗарплата Тогда
		ОсновныеКатегории = Перечисления.КатегорииДоходовНДФЛ.ОплатаТруда();
	Иначе	
		ОсновныеКатегории = Перечисления.КатегорииДоходовНДФЛ.Прочие();
	КонецЕсли;	
		
	СтрокиНДФЛРаботника = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	
	СтрокаСостава.НДФЛСумма = 0;
	СтрокаСостава.НДФЛРасшифровка = "";
	
	ТипыОснований    = Новый Массив;
	КатегорииДоходов = Новый Массив;
	Для Каждого СтрокаНДФЛРаботника Из СтрокиНДФЛРаботника Цикл
		
		СтрокаСостава.НДФЛСумма = СтрокаСостава.НДФЛСумма + СтрокаНДФЛРаботника.Сумма + СтрокаНДФЛРаботника.СуммаСПревышения;
		
		ТипОснования = ТипЗнч(СтрокаНДФЛРаботника.ДокументОснование);
		Если ВыплачиваетсяАванс И ЗначениеЗаполнено(СтрокаНДФЛРаботника.ДокументОснование) И ОснованияАванса[ТипОснования] = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ТипыОснований,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОснования),
				Истина);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаНДФЛРаботника.КатегорияДохода) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				КатегорииДоходов,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНДФЛРаботника.КатегорияДохода),
				Истина);
		КонецЕсли	
		
	КонецЦикла;
	
	РасшифровкаКатегорий = "";
	РасшифровкаОснований = "";
	
	ПрочиеКатегории = ОбщегоНазначенияКлиентСервер.РазностьМассивов(КатегорииДоходов, ОсновныеКатегории);
	Если ПрочиеКатегории.Количество() > 3 Тогда
		ВыводимыеКатегории = ОбщегоНазначенияБЗККлиентСервер.СрезМассива(ПрочиеКатегории, 0, 2);
		РасшифровкаКатегорий = СтрШаблон(НСтр("ru = 'в т.ч. %1 ...'"), СтрСоединить(ВыводимыеКатегории, ", "));
	ИначеЕсли ПрочиеКатегории.Количество() > 0 Тогда	
		Шаблон = ?(КатегорииДоходов.Количество() > ПрочиеКатегории.Количество(), НСтр("ru = 'в т.ч. %1'"), НСтр("ru = '%1'")); 
		РасшифровкаКатегорий = СтрШаблон(Шаблон, СтрСоединить(ПрочиеКатегории, ", "));
	КонецЕсли;
	
	Если ВыплачиваетсяАванс И ТипыОснований.Количество() > 0 Тогда
		
		ВыводимыеОснования = Новый Массив;
		Для Каждого ТипОснования Из ОбщегоНазначенияБЗККлиентСервер.СрезМассива(ТипыОснований, 0, 2) Цикл
			МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
			ПредставлениеОснования = МетаданныеОснования.ПредставлениеОбъекта;
			Если ПустаяСтрока(ПредставлениеОснования) Тогда
				ПредставлениеОснования = МетаданныеОснования.Представление();
			КонецЕсли;
			ВыводимыеОснования.Добавить(ПредставлениеОснования);
		КонецЦикла;	
			
		Если ТипыОснований.Количество() > 3 Тогда
			ШаблонОснований = НСтр("ru = 'за %1 ...'");
		Иначе
			ШаблонОснований = НСтр("ru = 'за %1.'");
		КонецЕсли;
		
		РасшифровкаОснований = СтрШаблон(ШаблонОснований, СтрСоединить(ВыводимыеОснования, ", "));
		
	КонецЕсли;	
	
	НДФЛРасшифровка = Новый Массив;
	Если ЗначениеЗаполнено(РасшифровкаКатегорий) Тогда
		НДФЛРасшифровка.Добавить(НРег(РасшифровкаКатегорий))
	КонецЕсли;
	Если ЗначениеЗаполнено(РасшифровкаОснований) Тогда
		НДФЛРасшифровка.Добавить(НРег(РасшифровкаОснований))
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасшифровкаОснований)
		ИЛИ ЗначениеЗаполнено(РасшифровкаКатегорий) Тогда
		СтрокаСостава.НДФЛРасшифровка = СтрСоединить(НДФЛРасшифровка, "; "+Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры	

// Устанавливает доступность элементов формы ведомости.
// 	Документ ввода начальных остатков, или по ведомость, по которой есть выплаты
//	доступны только для просмотра.
//
// Параметры:
// 	Форма - УправляемаяФорма.
//
Процедура УстановитьДоступностьЭлементов(Форма) Экспорт
	
	Форма.ТолькоПросмотр = 
		ЗначениеЗаполнено(Форма.Объект.Ссылка) 
		И (ДатыЗапретаИзменения.ИзменениеЗапрещено(Форма.Объект.Ссылка.Метаданные().ПолноеИмя(), Форма.Объект.Ссылка) 
			ИЛИ Форма.Объект.ВводНачальныхДанных 
			ИЛИ Не ОбменСБанкамиПоЗарплатнымПроектам.ДоступностьПлатежногоДокумента(Форма.Объект.Ссылка));
	
КонецПроцедуры

#КонецОбласти
