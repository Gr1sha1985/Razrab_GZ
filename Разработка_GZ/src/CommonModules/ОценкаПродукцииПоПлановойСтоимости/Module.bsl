// Содержимое модуля отличается в версиях ПРОФ и КОРП

#Область ПрограммныйИнтерфейс

// Определяет, поддерживается ли функциональность модуля.
//
// Параметры:
//  Поддерживается - Булево - будет установлен в Истина, если поддерживается
//
Процедура ОпределитьФункциональностьПоддерживается(Поддерживается) Экспорт
	
	Поддерживается = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецПроцедуры

// Модифицирует текст запроса правила распределения, подставляя в поля Субконто1..Субконто3 выражения полей,
// соответствующие порядку (и наличию) субконто на счете.
//
// Параметры:
//  ТекстЗапроса  - Строка - текст запроса правила распределения с действием РаспределитьНаСубконто,
//                  см. ПравилаРаспределенияРасходов.НовыеПравилаРаспределения
//  ИмяТаблицы    - Строка - имя (псевдоним) таблицы, из которой выбираются данные базы распределения.
//                  Это имя идентифицирует основной запрос базы.
//  ПоляАналитики - Соответствие - имена полей, содержащих значения субконто на счете.
//                  Ключ - вид субконто, Значение - имя поля запроса.
//
Процедура НастроитьАналитикуПоСчетуТекстаЗапроса(ТекстЗапроса, ИмяТаблицы, ПоляАналитики) Экспорт
	
	Если Не ЗначениеЗаполнено(ПоляАналитики) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(СхемаЗапроса, ИмяТаблицы);
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ОператорЗапроса <> Неопределено,
		НСтр("ru = 'Неверный текст запроса правила распределения'"),
		ТекстЗапроса);
	
	ВыражениеСчет = СхемыЗапросов.ВыражениеПоля(ОператорЗапроса, "Счет");
	
	Счет = СхемыЗапросов.ЗначениеКонстантыТекстаЗапроса(ВыражениеСчет);
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Для Каждого ПолеАналитики Из ПоляАналитики Цикл
		
		ИдентификаторСубконто = СвойстваСчета.ИдентификаторыСубконто[ПолеАналитики.Ключ];
		Если ИдентификаторСубконто = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоляАналитики = ПолеАналитики.Значение;
		Выражение = СхемыЗапросов.ВыражениеПоля(ОператорЗапроса, ИмяПоляАналитики);
		
		ИмяСубконто = СтрШаблон("Субконто%1", ИдентификаторСубконто);
		СхемыЗапросов.УстановитьВыражение(ОператорЗапроса, ИмяСубконто, Выражение);
		
	КонецЦикла;
		
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти
