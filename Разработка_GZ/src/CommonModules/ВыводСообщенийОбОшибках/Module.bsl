////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Перед выполнением регламентных операций выполняется поиск ошибок в данных,
// препятствующих выполнению.
// В отдельных случаях ошибки ищутся в ходе выполнения операций, а не перед ним.
// Информация о найденных ошибках сохраняется в документе.

// РАБОТА С КОЛЛЕКЦИЕЙ ОПИСАНИЙ ОШИБОК

Функция НовыйДетальнаяИнформацияОбОшибках() Экспорт
	
	// Каждый элемент коллекции - строка верхнего уровня - описывает одну ошибку.
	//
	// Описание ошибки может быть
	// - простым     - содержит фиксированный набор полей.
	// - комплексным - содержит произвольный набор полей в заданном порядке,
	//                 может содержать несколько уровней вложенности
	//
	// Простое представление содержится на первом уровне дерева и детально описано в ДобавитьПростоеОписаниеОшибки()
	// Комплексное представление содержится ниже первого уровня дерева и описано ниже.
	//
	// Технически описание одной ошибки может содержать и простое и комплексное представление.
	// В этом случае простое представление игнорируется.
	//
	// Простое представление можно привести к комплексному. Комплексное представление нельзя свести к простому.
	// 
	// Комплексное представление описания ошибки включает одну или несколько секций.
	// Список секций содержится в строках второго уровня дерева.
	// 
	// Секция представлена видом секции (Вид) и ее содержимым (Данные).
	// Тип содержимого секции определяется видом секции. В частности, секция может содержать:
	// - строку: текст для пользователя
	// - строку: навигационную ссылку
	// - ссылку на объект информационной базы
	// - массив ссылок
	// - структуру, которая содержит ссылку и ее представление
	// - таблицу значений, которая содержит набор ссылок и представление
	// - другие типы (произвольную структуру, произвольную таблицу значений)
	//
	// Отдельные виды секций предусматривают возможность вложенных секций.
	// Они содержатся на третьем уровне дерева и далее.
	//
	// Виды секций и соответствующие им значения описаны в ...
	//
	
	ДетальнаяИнформацияОбОшибках = Новый ДеревоЗначений;
	ДетальнаяИнформацияОбОшибках.Колонки.Добавить("Вид",    Новый ОписаниеТипов("Строка")); // Колонка "Вид" на верхнем уровне дерева никакой семантики не несет - не должна заполняться.
	ДетальнаяИнформацияОбОшибках.Колонки.Добавить("Данные"); // На верхнем уровне дерева Данные может содержать типы Неопределено или Структура. На нижних уровнях тип значения определяется значением поля "Вид"
	
	Возврат ДетальнаяИнформацияОбОшибках;
	
КонецФункции

Функция ЕстьОшибки(Ошибки) Экспорт
	
	Возврат Ошибки.Строки.Количество() > 0;
	
КонецФункции

Функция ДобавитьОписаниеОшибки(Ошибки) Экспорт
	
	Ошибка = Ошибки.Строки.Добавить(); // См. НовыйДетальнаяИнформацияОбОшибках
	Возврат Ошибка;
	
КонецФункции

Функция ДобавитьПростоеОписаниеОшибки(Ошибки, Описание = "", Ссылка = Неопределено) Экспорт
			
	Ошибка = ДобавитьОписаниеОшибки(Ошибки);
	Ошибка.Данные = Новый Структура;
	Ошибка.Данные.Вставить("Описание",            Описание); // Строка: "Случилась ошибка."
	Ошибка.Данные.Вставить("Локализация");                   // Строка: "Ошибка в следующих местах: 1, 2, 3."
	Ошибка.Данные.Вставить("Рекомендация");                  // Строка: "Исправьте."
	Ошибка.Данные.Вставить("Ссылка",              Ссылка);   // Ссылка или НавигационнаяСсылка или Структура с ключами "Представление, Ссылка". Переход по ссылке - первый шаг к исправлению
	Ошибка.Данные.Вставить("ЛокализацияДетально", Новый ТаблицаЗначений);
	
	Локализация = Ошибка.Данные.ЛокализацияДетально;
	Локализация.Колонки.Добавить("Локализация", Новый ОписаниеТипов("Строка")); // "Ошибка в следующем месте"
	Локализация.Колонки.Добавить("Ссылка");                                     // <переход по ссылке - первый шаг к исправлению>
	
	Возврат Ошибка.Данные;
	
КонецФункции

Функция ДобавитьСекцию(Описание, ВидСекции, Данные) Экспорт
	
	// Описание - любая строку коллекции описаний: описание ошибки или его часть
	
	Секция = Описание.Строки.Добавить();
	Секция.Вид    = ВидСекции;
	Секция.Данные = Данные;
	
	Возврат Секция;
		
КонецФункции

Функция НовыйОписаниеРасшифровки(СпособРасшифровки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СпособРасшифровки", СпособРасшифровки);
	
	Если СпособРасшифровки = "ФормаСписка" Тогда
		
		Результат.Вставить("Объект");
		Результат.Вставить("Заголовок");
		Результат.Вставить("Отбор", Новый Структура);
		
	ИначеЕсли СпособРасшифровки = "ОтчетПоПроводкам" Тогда
		
		Результат.Вставить("Заголовок");
		Результат.Вставить("Отбор", Новый Структура);
		
	ИначеЕсли СпособРасшифровки = "КарточкаСчета" 
		Или СпособРасшифровки = "ВедомостьПоСчету" Тогда
		
		Результат.Вставить("Счет");
		Результат.Вставить("Подразделение");
		Результат.Вставить("Отбор", Новый Структура);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ВЕРСТКА ТАБЛИЧНОГО ДОКУМЕНТА

Функция ОписаниеОшибок(Ошибки, Макет, ДанныеДляВывода) Экспорт
	
	Если Не ЕстьОшибки(Ошибки) Тогда
		Возврат Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	
	// Шапка
	
	Область = Макет.ПолучитьОбласть("Шапка");
	
	Область.Параметры.Заполнить(ДанныеДляВывода);
	
	Результат.Вывести(Область);
	
	Результат.НачатьАвтогруппировкуСтрок();
	
	// Ошибки
	
	ОписаниеМакета = Новый Структура;
	ОписаниеМакета.Вставить("Макет",   Макет);
	ОписаниеМакета.Вставить("Области", Новый Соответствие); // В разных ошибках могут использоваться одни и те же области. Получение областей из макета - ресурсоемко
	
	Для Каждого Ошибка Из Ошибки.Строки Цикл
		
		ЗаполнитьКомплексноеОписаниеОшибки(Ошибка);
		
		ВывестиСтроки(Результат, ОписаниеМакета, Ошибка.Строки);
		
	КонецЦикла;
	
	Результат.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Вывод данных

Функция ЕстьДанные(ВсеДанные, Ключ) 
	
	Если Не ВсеДанные.Свойство(Ключ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Данные = ВсеДанные[Ключ];
	
	ТипДанных = ТипЗнч(Данные);
	
	Если ТипДанных = Тип("ТаблицаЗначений") Или ТипДанных = Тип("Массив") Или ТипДанных = Тип("ФиксированныйМассив") Тогда
		Возврат Данные.Количество() > 0;
	Иначе
		Возврат ЗначениеЗаполнено(Данные);
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСсылки(Ссылка)
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(Строка(Ссылка));
	Представления = ПолучитьПредставленияНавигационныхСсылок(Ссылки);
	Возврат Представления[0].Представление();
	
КонецФункции

Функция ДанныеДляВыводаСсылки(Ссылка)
	
	ДанныеДляВывода = Новый Структура("Представление, Ссылка");
	
	Если ТипЗнч(Ссылка) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ДанныеДляВывода, Ссылка);
	Иначе
		ДанныеДляВывода.Представление = ПредставлениеСсылки(Ссылка);
		ДанныеДляВывода.Ссылка = Ссылка;
	КонецЕсли;
	
	Возврат ДанныеДляВывода;
	
КонецФункции

Функция ДобавитьРаздел(Ошибка, ИмяРаздела, Текст) Экспорт
	
	Если ИмяРаздела = "Описание" Или ИмяРаздела = "ЧтоСлучилось" Тогда
		
		Возврат ДобавитьСекцию(Ошибка, "Текст", Текст);
		
	ИначеЕсли ИмяРаздела = "ЧтоНадоЗнать" Тогда
		
		// Заголовок раздела
		Секция = ДобавитьСекцию(Ошибка, "Раздел", НСтр("ru = 'Как правильно'"));
		// Текст раздела
		ДобавитьСекцию(Секция, "Текст", Текст);
		
		Возврат Секция;
		
	ИначеЕсли ИмяРаздела = "ГдеПроблема" Тогда 
		
		// Заголовок раздела
		Секция = ДобавитьСекцию(Ошибка, "Раздел", НСтр("ru = 'Где проблема и что делать'"));
		// Текст раздела
		ДобавитьСекцию(Секция, "Текст", Текст);
		
		Возврат Секция;
		
	КонецЕсли;
	
КонецФункции

Функция СкомпоноватьТекст(Шаблон, ПараметрыТекста) Экспорт
	
	// Шаблон может быть представлен строкой или массивом строк
	
	Если ТипЗнч(Шаблон) = Тип("Строка") Тогда
		Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыТекста);
	ИначеЕсли ТипЗнч(Шаблон) = Тип("Массив") Тогда
		Текст = Новый Массив;
		Для Каждого ШаблонСтроки Из Шаблон Цикл
			Текст.Добавить(СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, ПараметрыТекста));
		КонецЦикла;
		Возврат Текст;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Работа с простыми представлениями описаний ошибок

Процедура ЗаполнитьКомплексноеОписаниеОшибки(Ошибка)
	
	Если ТипЗнч(Ошибка.Данные) <> Тип("Структура") Тогда
		// Данных для заполнения нет
		Возврат;
	КонецЕсли;
	
	Если Ошибка.Строки.Количество() > 0 Тогда
		// Комплексное описание уже заполнено
		Возврат;
	КонецЕсли;
	
	ДобавитьСекциюЕслиЕстьДанные(Ошибка, "Текст",  Ошибка.Данные, "Описание");
	ДобавитьСекциюЕслиЕстьДанные(Ошибка, "Текст",  Ошибка.Данные, "Локализация");
	ДобавитьСекциюЕслиЕстьДанные(Ошибка, "Ссылки", Ошибка.Данные, "ЛокализацияДетально");
	ДобавитьСекциюЕслиЕстьДанные(Ошибка, "Текст",  Ошибка.Данные, "Рекомендация");
	ДобавитьСекциюЕслиЕстьДанные(Ошибка, "Ссылка", Ошибка.Данные, "Ссылка");
	
	Ошибка.Данные = Неопределено;
		
КонецПроцедуры

Процедура ДобавитьСекциюЕслиЕстьДанные(Ошибка, ВидСекции, ВсеДанные, Ключ)
	
	Если Не ЕстьДанные(ВсеДанные, Ключ) Тогда
		Возврат;
	КонецЕсли;
		
	ДобавитьСекцию(Ошибка, ВидСекции, ВсеДанные[Ключ]);
		
КонецПроцедуры

// Верстка табличного документа

Процедура ВывестиСтроки(Результат, ОписаниеМакета, ОписаниеОшибки)
	
	Для Каждого Секция Из ОписаниеОшибки Цикл
		
		ПерваяСтрокаСекции = (ОписаниеОшибки.Индекс(Секция) = 0);
		ПерваяСтрокаОшибки = ПерваяСтрокаСекции И (Секция.Уровень() = 1);
		
		Если ПерваяСтрокаОшибки Тогда
			Уровень  = 0;
		Иначе
			Уровень  = Секция.Уровень();
		КонецЕсли;
		
		Если ПерваяСтрокаОшибки Тогда
			
			// Выводится порядковый номер ошибки
			Ошибка          = ОписаниеОшибки.Родитель;
			ВсеОшибки       = Секция.Владелец().Строки;
			ПорядковыйНомер = ВсеОшибки.Индекс(Ошибка) + 1;
			
			// Первой строкой ошибки всегда должна идти секция с видом Текст и содержать только одну строку (не массив строк!)
			ДанныеДляВывода = Новый Структура();
			ДанныеДляВывода.Вставить("ПорядковыйНомер", ПорядковыйНомер);
			ДанныеДляВывода.Вставить("Текст",           Секция.Данные); 
			
			ВывестиСтроку(Результат, ОписаниеМакета, "Заголовок", ДанныеДляВывода, Уровень);
			
		ИначеЕсли Секция.Вид = "Раздел" Тогда
			
			ИмяОбласти = "Раздел";
			ДанныеДляВывода = Новый Структура();
			ДанныеДляВывода.Вставить("Текст", Секция.Данные);
			
			ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
			
		ИначеЕсли Секция.Вид = "Текст" Тогда
				
			// Данные - Строка (текст для вывода)
			//  или Массив строк
			
			ИмяОбласти = "Текст";
			
			Если ТипЗнч(Секция.Данные) = Тип("Массив") Тогда
				
				Для Каждого Текст Из Секция.Данные Цикл
					
					ДанныеДляВывода = Новый Структура();
					ДанныеДляВывода.Вставить("Текст", Текст); 
					
					ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
					
				КонецЦикла;
				
			Иначе // Строка
				
				ДанныеДляВывода = Новый Структура();
				ДанныеДляВывода.Вставить("Текст", Секция.Данные); 
				
				ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
				
			КонецЕсли;
				
		ИначеЕсли Секция.Вид = "Ссылка" Тогда
				
			ИмяОбласти = "Ссылка";
			ДанныеДляВывода = ДанныеДляВыводаСсылки(Секция.Данные); // Данные - Ссылка или НавигационнаяСсылка
			ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
				
		ИначеЕсли Секция.Вид = "Ссылки" Тогда
				
			// Данные - ТаблицаЗначений с колонками Локализация, Ссылка
			//  или Массив ссылок
			
			
			Если ТипЗнч(Секция.Данные) = Тип("Массив") Тогда
				
				ИмяОбласти = "Ссылка";
				Для Каждого Ссылка Из Секция.Данные Цикл
					ДанныеДляВывода = ДанныеДляВыводаСсылки(Ссылка);
					ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Секция.Данные) = Тип("ТаблицаЗначений") 
				И Секция.Данные.Колонки.Найти("Локализация") <> Неопределено 
				И Секция.Данные.Колонки.Найти("Ссылка") <> Неопределено Тогда
				
				Для Каждого СтрокаДанных Из Секция.Данные Цикл
					
					СтандартноеПредставление = ДанныеДляВыводаСсылки(СтрокаДанных.Ссылка);
					
					Если ЗначениеЗаполнено(СтрокаДанных.Локализация) 
						И СтрокаДанных.Локализация <> СтандартноеПредставление.Представление Тогда
						ИмяОбласти = "Текст";
						ДанныеДляВывода = Новый Структура();
						ДанныеДляВывода.Вставить("Текст", СтрокаДанных.Локализация); 
						ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДанных.Ссылка) Тогда
						ИмяОбласти = "Ссылка";
						ДанныеДляВывода = СтандартноеПредставление;
						ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли НайденаОбласть(Секция.Вид, ОписаниеМакета) Тогда
			
			// Произвольная область макета ОписаниеОшибок
			// Порядок вывода определяется типом данных
			
			ИмяОбласти = Секция.Вид;
			
			Если ТипЗнч(Секция.Данные) = Тип("ТаблицаЗначений")
				Или ТипЗнч(Секция.Данные) = Тип("Массив")
				Или ТипЗнч(Секция.Данные) = Тип("ФиксированныйМассив")
				Или ТипЗнч(Секция.Данные) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				
				Для Каждого СтрокаДанных Из Секция.Данные Цикл
					
					ДанныеДляВывода = СтрокаДанных;
					ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
					
				КонецЦикла;
				
			Иначе
				
				ДанныеДляВывода = Секция.Данные;
				ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень);
				
			КонецЕсли;
			
		Иначе
			
			// Не умеем это выводить
			Продолжить;
			
		КонецЕсли;
		
		ВывестиСтроки(Результат, ОписаниеМакета, Секция.Строки);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ВывестиСтроку(Результат, ОписаниеМакета, ИмяОбласти, ДанныеДляВывода, Уровень)
	
	Область = ОписаниеМакета.Области[ИмяОбласти];
	Если Область = Неопределено Тогда
		Область = ОписаниеМакета.Макет.ПолучитьОбласть(ИмяОбласти);
		ОписаниеМакета.Области.Вставить(ИмяОбласти, Область);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ДанныеДляВывода);
	// Пользователь увидит только заголовки ошибок (уровень = 1). 
	// Но если развернет любую группу, то получит сразу детальную картину (уровень > 2)
	Открыта = (Уровень <> 2); 
	
	Результат.Вывести(Область, Уровень, , Открыта);
		
КонецПроцедуры

Функция НайденаОбласть(ИмяОбласти, ОписаниеМакета) 
			
	Область = ОписаниеМакета.Области[ИмяОбласти];
	Если Область <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Область = ОписаниеМакета.Макет.Области.Найти(ИмяОбласти);
	Если Область = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Область = ОписаниеМакета.Макет.ПолучитьОбласть(ИмяОбласти);
	ОписаниеМакета.Области.Вставить(ИмяОбласти, Область);
	
	Возврат Истина;
	
КонецФункции
