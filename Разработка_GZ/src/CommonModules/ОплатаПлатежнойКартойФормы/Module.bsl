
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере(Форма);
		
		// Если документ скопирован и есть расчеты в у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов(Форма);
		КонецЕсли;
		
		УстановитьДеятельностьНаТорговомСборе(Форма);
		
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета(Форма);
	УстановитьУсловноеОформление(Форма);
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		Форма,
		"БП.Документ.ОплатаПлатежнойКартой",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Оплата платежной картой'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере(Форма);
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	УстановитьСостояниеДокумента(Форма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета(Форма));
	КонецЕсли;
	
	Если Форма.ПлательщикНПД Тогда
		ЧекиНПД.СохранитьЦенуУслугиНПД(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Объект = Форма.Объект;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ПроверкаЗаполнения(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма), Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыПриИзменении

Процедура ВидОперацииПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.ЭтоРасчетыСКонтрагентом = ОплатаПлатежнойКартойКлиентСервер.ЭтоРасчетыСКонтрагентом(Объект.ВидОперации);
	
	Если ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации) Тогда
		
		Если Объект.БезЗакрывающихДокументов Тогда
			Объект.Контрагент = Неопределено;
		ИначеЕсли УчетКассовымМетодом.УчетБезЗакрывающихДокументовВозможен(Объект.Организация, Объект.Дата)
			И Не ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля") Тогда
			Объект.БезЗакрывающихДокументов = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма);
	ПодготовитьФормуНаСервере(Форма);
	УстановитьОтражениеДоходов(Форма);
	
	ОплатаПлатежнойКартойКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ДатаПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	Если Не Форма.ПлательщикНДС Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Форма);
		Форма.СвойстваПлатежа.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	ПересчитатьСуммыВзаиморасчетов(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		ОплатаПлатежнойКартойКлиентСервер.ИменаЭлементовОтраженияДохода());
	НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма);
	
	УстановитьОтражениеДоходов(Форма, Истина);
	
	ЗаполнитьОтражениеВУСН(Форма);
	УправлениеЭлементамиОтраженияВУСН(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ДеятельностьНаПатентеПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			Объект.Патент = УчетПСН.ПатентПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
	Иначе
		
		УстановитьДеятельностьНаТорговомСборе(Форма);
		ЗаполнитьОтражениеВУСН(Форма);
		
	КонецЕсли;
	
	УправлениеЭлементамиОтраженияВУСН(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьПатентОбработкаВыбора(Форма, ВыбранныйПатент) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не УчетПСН.ПатентДоступенДляВыбора(ВыбранныйПатент, Объект.Организация, Объект.Дата) Тогда
		ВыбранныйПатент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйПатент) Тогда
		Объект.ДеятельностьНаТорговомСборе = Ложь;
		Объект.ДеятельностьНаПатенте       = Истина;
		Объект.Патент                      = ВыбранныйПатент;
		
		Форма.Модифицированность = Истина;
		
		БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
			ОплатаПлатежнойКартойКлиентСервер.ИменаЭлементовОтраженияДохода());
		
		ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Форма, СтрокаПлатеж) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = ОплатаПлатежнойКартойКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа  = ОплатаПлатежнойКартойКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	ПерезаполнитьСчетаУчета(Форма, СтрокаПлатеж);
	
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСН(Форма);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	Иначе
		ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииСервер(Форма) Экспорт
	
	ИнициализироватьСвойстваПлатежаПоПараметрам(Форма);
	
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСН(Форма);
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
	УправлениеЭлементамиОтраженияВУСН(Форма);
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не УчетКассовымМетодом.УчетБезЗакрывающихДокументовВозможен(Объект.Организация, Объект.Дата) Тогда
		Объект.БезЗакрывающихДокументов = Ложь;
	КонецЕсли;
	ОтборВидовОпераций = Новый Структура;
	ОтборВидовОпераций.Вставить("Организация", Объект.Организация);
	ОтборВидовОпераций.Вставить("Дата", Объект.Дата);
	ДопустимыеВидыОпераций = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ДопустимыеЗначения(
		ОтборВидовОпераций);
	Если ДопустимыеВидыОпераций.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		Если ЗначениеЗаполнено(ДопустимыеВидыОпераций) Тогда
			Объект.ВидОперации = ДопустимыеВидыОпераций[0].Значение;
		Иначе
			Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	ПараметрыОбъекта = ОплатаПлатежнойКартойКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПодразделениеОрганизации");
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма);
	ПодготовитьФормуНаСервере(Форма);
	УстановитьОтражениеДоходов(Форма);
	
	ОплатаПлатежнойКартойКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура НомерЧекаНПДПриИзменении(Форма) Экспорт
	
	ДокументОснование = РегистрыСведений.ЧекиНПД.НайтиДокументПоНомеруЧека(
		Форма.Объект.НомерЧекаНПД, Форма.Объект.Организация);
	ОбработкаВыбораДокументаОснования(Форма, ДокументОснование);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработкаВыбораДокументаОснования(Форма, Основание) Экспорт
	
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Основание);
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если ЗначениеЗаполнено(Форма.Объект.РасшифровкаПлатежа) Тогда
		ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(
			Форма, Истина, Форма.Объект.РасшифровкаПлатежа[0]);
	КонецЕсли;
	
	Если Форма.ПлательщикНПД Тогда
		СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Основание);
		Форма.СведенияОЧекеНПД = СведенияОЧекеНПД;
	КонецЕсли;
	
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПолеВУсловноеОформление(ИмяПоля, ЭлементОформления, ВсеЭлементы, УсловноеОформление)
	
	Если ВсеЭлементы.Найти(ИмяПоля) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементОформления = Неопределено Тогда
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементОформления.Поля, ИмяПоля);
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма) Экспорт
	
	РасшифровкаПлатежа = ОплатаПлатежнойКартойКлиентСервер.РеквизитДокумента(
		Форма, ОплатаПлатежнойКартойКлиентСервер.НаименованиеТабличнойЧасти());
	
	Если Не ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
		СтрокаПлатеж.ОтражениеАвансаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
			СтрокаПлатеж.ПорядокОтраженияАванса,
			БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
	КонецЦикла;
	
	ОплатаПлатежнойКартойКлиентСервер.ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма);
	
	Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьСвойстваПлатежаПоПараметрам(Форма)
	
	ПараметрыОбъекта = ОплатаПлатежнойКартойКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта);
	
	Если Форма.ЭтоРасчетыСКонтрагентом Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		Форма.СвойстваПлатежа.СчетНаОплату = ПараметрыОбъекта.СчетНаОплату;
		Форма.СвойстваПлатежа.СчетУчетаРасчетовПоАвансам     = ПараметрыОбъекта.СчетУчетаРасчетовПоАвансам;
		Форма.СвойстваПлатежа.СчетУчетаРасчетовСКонтрагентом = ПараметрыОбъекта.СчетУчетаРасчетовСКонтрагентом;
		ОплатаПлатежнойКартойКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	Иначе
		ЗаполнитьЗначенияСвойств(Форма.Объект, НовыеПараметры, "ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "КурсДокумента, КратностьДокумента, НТТНаЕНВД");
		ОплатаПлатежнойКартойКлиентСервер.УстановитьПараметрыВыбораКонтрагентаКакСклада(Форма);
		УстановитьДеятельностьНаТорговомСборе(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьСвойстваПлатежаНаСервере(Форма, ТолькоСоздатьКлючи = Ложь)
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.НоваяСтруктураСвойстваПлатежа();
		Иначе
			ИмяТабличнойЧасти = ОплатаПлатежнойКартойКлиентСервер.НаименованиеТабличнойЧасти();
			ПараметрыОбъекта = ОплатаПлатежнойКартойКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			Если ЗначениеЗаполнено(Форма.Объект[ИмяТабличнойЧасти]) Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Форма.Объект[ИмяТабличнойЧасти][0].ДоговорКонтрагента);
			КонецЕсли;
			Форма.СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(
				ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяПодключаемоеОборудование(ТипыПО, ПроверятьФункциональнуюОпцию = Ложь)

	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование) 
		И (Не ПроверятьФункциональнуюОпцию Или ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор"))
		И Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам(ТипыПО).Количество() > 0;

КонецФункции

Функция НовыеПараметрыПриИзмененииВидаОперации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	Если ПараметрыОбъекта.ЭтоРасчетыСКонтрагентом Тогда
		
		СвойстваПлатежа = ОплатаПлатежнойКартойВызовСервера.СвойстваСтрокРасшифровкиПлатежа(
			ПараметрыОбъекта, Истина);
		Для Каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	Иначе
		
		НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		НовыеПараметры.Вставить("КурсДокумента",      1);
		НовыеПараметры.Вставить("КратностьДокумента", 1);
		Если ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			ЕНВД = Ложь;
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			ЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
				И ПараметрыОбъекта.ПлательщикЕНВД;
			НовыеПараметры.Вставить("НТТНаЕНВД", ЕНВД);
		Иначе
			НовыеПараметры.Вставить("НТТНаЕНВД", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(
		ОсновноеПодразделение, ПараметрыОбъекта.Организация) Тогда
		
		НовыеПараметры.Вставить("ПодразделениеОрганизации", ОсновноеПодразделение);
		
	Иначе
		
		НовыеПараметры.Вставить("ПодразделениеОрганизации", Неопределено);
		
	КонецЕсли;
	
	Если Не ПараметрыОбъекта.ПлательщикНДС Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	Если ПараметрыОбъекта.ЭтоРасчетыСКонтрагентом Тогда
		
		СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		Для Каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

Процедура ОбновитьРасчетыПриОплате(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	РежимыРасчетовПриОплате = Документы.ОплатаПлатежнойКартой.РежимыРасчетовПриОплате(Объект.ВидОперации);
	Элементы.РасчетыПриОплате.СписокВыбора.Очистить();
	Для Каждого ТекРежим Из РежимыРасчетовПриОплате Цикл
		Элементы.РасчетыПриОплате.СписокВыбора.Добавить(ТекРежим.Значение, ТекРежим.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ОплаченныеСчета(Форма)
	
	Объект = Форма.Объект;
	
	ОплаченныеСчета = Новый Массив;
	
	Если ОплатаПлатежнойКартойКлиентСервер.ЭтоРасчетыСКонтрагентом(Объект.ВидОперации) Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

Процедура ПерезаполнитьРасшифровкуПлатежа(Форма, ЭтоИзменениеОрганизации = Ложь)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СворачиватьТЧПриИзмененииОрганизации = ОплатаПлатежнойКартойКлиентСервер.ЭтоРасчетыСКонтрагентом(Объект.ВидОперации);
	
	Если ЭтоИзменениеОрганизации И Не СворачиватьТЧПриИзмененииОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = ОплатаПлатежнойКартойКлиентСервер.НаименованиеТабличнойЧасти();
	ИнициализироватьСвойстваПлатежаПоПараметрам(Форма);
	
	// При изменении ключевых реквизитов не всегда требуется очищать информацию об услугах НПД.
	// Поэтому перед перезаполнением Расшифровки платежа запомним указанные услуги НПД и восстановим их.
	ШаблонЗаполнения = БанкИКассаФормы.ЭталонРасшифровкиПлатежа(
		Форма,
		Объект[ИмяТабличнойЧасти],
		ОплатаПлатежнойКартойКлиентСервер.ВидимостьУслугНПД(Форма));
	
	Объект[ИмяТабличнойЧасти].Очистить();
	
	Для Каждого СтрокаШаблон Из ШаблонЗаполнения Цикл
		
		СтрокаПлатеж = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СтрокаШаблон);
		
		Если Форма.ЭтоРасчетыСКонтрагентом Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа, , "УслугаНПД");
			ПерезаполнитьСчетаУчета(Форма, СтрокаПлатеж);
			
			Если Элементы.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
			КонецЕсли;
			
		Иначе
			СтрокаПлатеж.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, Форма.ПлательщикНДС);
			ОплатаПлатежнойКартойКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
КонецПроцедуры

Процедура ПерезаполнитьСчетаУчета(Форма, СтрокаПлатеж)
	
	Объект = Форма.Объект;
	
	ПараметрыЗаполненияСчетовУчета = ОплатаПлатежнойКартойКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ОплатаПлатежнойКартой,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Изменения);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Изменения);
	
	ОплатаПлатежнойКартойКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ОплатаПлатежнойКартойКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	ОплатаПлатежнойКартойКлиентСервер.ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма);
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммыВзаиморасчетов(Форма)
	
	Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
	ПлатежиВУсловныхЕдиницах = Форма.Объект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
	Для Каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьФормуНаСервере(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	ОбновитьРасчетыПриОплате(Форма);
	
	Форма.ТекущаяДатаДокумента           = Объект.Дата;
	Форма.ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Не ОплатаПлатежнойКартойКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, ПроверятьПатент(Форма));
	КонецЕсли;
	
	Форма.СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	
	ПоддерживаемыеТипыВО = Новый Массив();
	
	ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
	ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
	ПоддерживаемыеТипыВО.Добавить("ККТ");
	ПоддерживаемыеТипыВО.Добавить("ЭквайринговыйТерминал");
	
	Форма.ЕстьПравоПодключаемоеОборудование = ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование)
		И Не ПараметрыСеанса.РабочееМестоКлиента.Пустая() 
		И ИспользуетсяПодключаемоеОборудование(ПоддерживаемыеТипыВО);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		ОплатаПлатежнойКартойКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма);
	
	УправлениеЭлементамиОтраженияВУСН(Форма);
	
	УстановитьСостояниеДокумента(Форма);
	
	Форма.ЭтоРасчетыСКонтрагентом = ОплатаПлатежнойКартойКлиентСервер.ЭтоРасчетыСКонтрагентом(Объект.ВидОперации);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	УстановитьОграничениеТипаКонтрагента(Форма);
	ИнициализироватьСвойстваПлатежаПоПараметрам(Форма);
	
	БанкИКассаФормы.ПодготовитьРасчетыПриОплате(Форма);
	ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "Дата, Номер");
		ДокументОснование = СтрШаблон("%1 № %2 от %3",
			Объект.ДокументОснование.Метаданные().Представление(),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокументаОснования.Номер, Истина, Истина),
			Формат(РеквизитыДокументаОснования.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли; 
	
	Если Форма.ПлательщикНПД Тогда
		
		Форма.СведенияОЧекеНПД = ОплатаПлатежнойКартойВызовСервера.СведенияОЧекеНПД(Объект.Ссылка);
		
	КонецЕсли;
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПодготовитьФормуНаСервере(Форма);
	
	УстановитьПараметрыВыбораВидаОплаты(Форма);
	ОплатаПлатежнойКартойКлиентСервер.СформироватьПредставлениеВидаОплаты(Форма);
	УстановитьВидимостьСтраниц(Форма);
	
	Форма.ИспользоватьВалютныйУчет = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	
	
	
КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатежа)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, Форма.Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	ОплатаПлатежнойКартойКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, Форма);
	
КонецПроцедуры

// Заполняет данные по УСН в платежных документах.
//
// Параметры:
//
// Форма - Управляемая форма.
//
Процедура ЗаполнитьОтражениеВУСН(Форма) Экспорт
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Форма.Объект, ПараметрыУСН);
	
КонецПроцедуры

Процедура УправлениеЭлементамиОтраженияВУСН(Форма) Экспорт
	
	// Видимость элементов настройки отражения в НУ (патент и КУДиР):
	// 
	// - Если выключена ФО "ПрименениеУСН", то элементы настройки КУДиР не отображаются
	// - Если применяется УСН, элементы настройки КУДиР отображаются,
	//   состав отображаемых элементов зависит от вида операции и ФО формы
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = Ложь;
	
	Если ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации) И Форма.УчетВПродажныхЦенах Тогда
		
		Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = Форма.ПрименяетсяУСНПатент Или Форма.ПрименениеУСН;
		
		Элементы.ДеятельностьНаПатенте.Видимость = Не Форма.ПрименяетсяТолькоУСНПатент;
		Элементы.ГруппаПатент.Видимость          = Форма.ПрименяетсяНесколькоПатентов 
			Или Не Форма.ПрименяетсяТолькоУСНПатент;
		
		Если Форма.ПрименяетсяТолькоУСНПатент Тогда
			Элементы.Патент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Иначе
			Элементы.Патент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		
		Элементы.ДеятельностьНаТорговомСборе.Видимость = Форма.РаздельныйУчетУСНТорговыйСбор И Не Форма.НТТНаЕНВД;
		
		Элементы.ГруппаРозничнаяВыручкаРасходыУСН.Видимость = Форма.ПрименениеУСН И Не Форма.НТТНаЕНВД 
			И Не Форма.Объект.ДеятельностьНаПатенте;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма)
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	ПоказыватьОтражениеАванса = Форма.ОтражениеАвансаВидимость;
	
	Элементы.РасшифровкаПлатежаОтражениеАвансаСчетУчета.Видимость = ПользовательУправляетСчетамиУчета
		И ПоказыватьОтражениеАванса;
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = ПользовательУправляетСчетамиУчета
		И Не ПоказыватьОтражениеАванса;
	
	ПоказыватьГруппуАвансов = ПользовательУправляетСчетамиУчета И ПоказыватьОтражениеАванса;
	// Если счет авансов и порядок отражения выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок поля с порядком отражения.
	Элементы.РасшифровкаПлатежаОтражениеАвансаПредставление.ОтображатьВШапке = Не ПоказыватьГруппуАвансов;
	Элементы.РасшифровкаПлатежаГруппаОтражениеАванса.ОтображатьВШапке = ПоказыватьГруппуАвансов;
	
	ПоказыватьГруппуСчетов = ПользовательУправляетСчетамиУчета И Не ПоказыватьГруппуАвансов;
	// Если счет расчетов и счет аванса выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок счета.
	Элементы.РасшифровкаПлатежаГруппаСчетаРасчетов.ОтображатьВШапке            = ПоказыватьГруппуСчетов;
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ОтображатьВШапке = Не ПоказыватьГруппуСчетов;
	
КонецПроцедуры 

Процедура УстановитьВидимостьСчетовУчета(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаОтражениеАвансаСчетУчета");
	ЭлементыСчетов.Добавить("ПредставлениеВидОплаты");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	НастроитьСчетаУчетаАвансаВТабличнойЧасти(Форма);
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраниц(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоРозничнаяВыручка = ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации);
	
	Если Элементы.Найти("ГруппаСтраницы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРозничнаяВыручка);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	
	Если ЭтоРозничнаяВыручка Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Для Каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если Не ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДеятельностьНаТорговомСборе(Форма) Экспорт
	
	Документы.ОплатаПлатежнойКартой.УстановитьДеятельностьНаТорговомСборе(Форма.Объект);
	
КонецПроцедуры

Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ЭтоРасчетыСКонтрагентом Тогда 
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок = "Контрагент";
	ИначеЕсли ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации) Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Контрагент.Заголовок = "Склад";
	КонецЕсли;
	
	Форма.Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Форма.Объект.Контрагент);
	
КонецПроцедуры

Процедура УстановитьОтражениеДоходов(Форма, ИзменениеДаты = Ложь)
	
	Объект = Форма.Объект;
	
	Если ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации) И Форма.УчетВПродажныхЦенах Тогда
		
		Если ИзменениеДаты Тогда
			УчетПСН.ДатаПриИзменении(Объект);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект, УчетПСН.ДеятельностьНаПатентеПоУмолчанию(
				Объект.Организация, Объект.Дата));
			КонецЕсли;
		
		УстановитьДеятельностьНаТорговомСборе(Форма);
		
	Иначе
		
		Если Объект.ДеятельностьНаТорговомСборе Тогда
			Объект.ДеятельностьНаТорговомСборе = Ложь;
		КонецЕсли;
		
		Если Объект.ДеятельностьНаПатенте Тогда
			Объект.ДеятельностьНаПатенте = Ложь;
			Объект.Патент                = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораВидаОплаты(Форма)

	ТипыОплатБезналичныеОплаты = Новый Массив;
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	
	Организации = Справочники.ВидыОплатОрганизаций.ОрганизацииДляОтбораВидовОплат(Форма.Объект.Организация);
	
	ПараметрыБезналичныхОплат = Новый Массив;
	
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты",
		Новый ФиксированныйМассив(ТипыОплатБезналичныеОплаты)));
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.Организация",
		Новый ФиксированныйМассив(Организации)));
	
	Форма.Элементы.ВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыБезналичныхОплат);

КонецПроцедуры

Процедура УстановитьСостояниеДокумента(Форма)
	
	Форма.СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Форма.Объект);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) Экспорт

	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	УсловноеОформление.Элементы.Очистить();

	ИмяТабличнойЧасти = ОплатаПлатежнойКартойКлиентСервер.НаименованиеТабличнойЧасти();
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	Иначе
		НачалоПутиКДаннымТЧ = "Объект.";
	КонецЕсли;
	
	ИмяПоляСтавка = СтрШаблон("%1%2.СтавкаНДС", НачалоПутиКДаннымТЧ, ИмяТабличнойЧасти);
	ИмяПоляСделка = СтрШаблон("%1%2.Сделка", НачалоПутиКДаннымТЧ, ИмяТабличнойЧасти);
	ИмяПоляСпособПогашения  = СтрШаблон("%1%2.СпособПогашенияЗадолженности", НачалоПутиКДаннымТЧ, ИмяТабличнойЧасти);
	ИмяПоляСчетРасчетов     = СтрШаблон("%1%2.СчетУчетаРасчетовСКонтрагентом", НачалоПутиКДаннымТЧ, ИмяТабличнойЧасти);
	ПутьКРеквизитуСделка    = СтрШаблон("%1Сделка", ИмяТабличнойЧасти);
	ПутьКРеквизитуСчет      = СтрШаблон("%1СчетУчетаРасчетовСКонтрагентом", ИмяТабличнойЧасти);
	ВидСравненияРавно       = ВидСравненияКомпоновкиДанных.Равно;
	ВидСравненияНеРавно     = ВидСравненияКомпоновкиДанных.НеРавно;
	ВидСравненияНеЗаполнено = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	СпособыПогашенияПоДокументу = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
	ГруппаИли = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	// РасшифровкаПлатежаСуммаНДС

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСуммаНДС", ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ГруппаИли);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ИмяПоляСтавка,
			ВидСравненияРавно,Перечисления.СтавкиНДС.НДС0);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ИмяПоляСтавка,
			ВидСравненияРавно, Перечисления.СтавкиНДС.БезНДС);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;

	// Используются только при расчетах в валюте и у.е.

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаНадписьВалюта", ЭлементУО, Элементы, УсловноеОформление);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаНадписьКурс", ЭлементУО, Элементы, УсловноеОформление);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаНадписьСумма", ЭлементУО, Элементы, УсловноеОформление);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаКурсВзаиморасчетов", ЭлементУО, Элементы, УсловноеОформление);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСуммаВзаиморасчетов", ЭлементУО, Элементы, УсловноеОформление);

	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ЕстьРасчетыВУсловныхЕдиницах", ВидСравненияРавно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;
	
	// РасшифровкаПлатежаСчетНаОплату
	
	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(СтрШаблон("%1СчетНаОплату", ИмяТабличнойЧасти),
		ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			НачалоПутиКДаннымТЧ + "ВидОперации",
			ВидСравненияНеРавно,
			Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаКурсВзаиморасчетов", ЭлементУО, Элементы, УсловноеОформление);
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСуммаВзаиморасчетов", ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			СтрШаблон("%1%2.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", НачалоПутиКДаннымТЧ, ИмяТабличнойЧасти),
			ВидСравненияРавно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;

	// ПредставлениеВидОплаты

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление("ПредставлениеВидОплаты", ЭлементУО, Элементы, УсловноеОформление);
	
	Если ЭлементУО <> Неопределено Тогда
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ГруппаИли);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			"Объект.СчетКасса", ВидСравненияНеЗаполнено);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			"Объект.Эквайер", ВидСравненияНеЗаполнено);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			"Объект.ДоговорЭквайринга", ВидСравненияНеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	КонецЕсли;
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление("РасшифровкаПлатежаСпособПогашенияЗадолженности",
		ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			ИмяПоляСпособПогашения, ВидСравненияНеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Способ погашения>'"));
	КонецЕсли;
	
	// РасшифровкаПлатежаСделка

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(ПутьКРеквизитуСделка, ЭлементУО, Элементы, УсловноеОформление);
	
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, ИмяПоляСделка, ВидСравненияНеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Документ>'"));
	КонецЕсли;
	
	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(ПутьКРеквизитуСделка, ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ИмяПоляСпособПогашения,
			ВидСравненияРавно, СпособыПогашенияПоДокументу);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, ИмяПоляСделка, ВидСравненияНеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	КонецЕсли;
	
	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(ПутьКРеквизитуСделка, ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, ИмяПоляСпособПогашения,
			ВидСравненияНеРавно, СпособыПогашенияПоДокументу);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;

	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(ПутьКРеквизитуСчет, ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			ИмяПоляСчетРасчетов, ВидСравненияНеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	КонецЕсли;
	
	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(ПутьКРеквизитуСчет, ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			ИмяПоляСпособПогашения, ВидСравненияРавно,
			Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	КонецЕсли;

	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам

	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(СтрШаблон("%1СчетУчетаРасчетовПоАвансам", ИмяТабличнойЧасти),
		ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			СтрШаблон("%1%2.СчетУчетаРасчетовПоАвансам", НачалоПутиКДаннымТЧ, ИмяТабличнойЧасти), ВидСравненияНеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	КонецЕсли;
	
	// РасшифровкаПлатежаОтражениеАвансаПредставление
	
	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(СтрШаблон("%1ОтражениеАвансаПредставление", ИмяТабличнойЧасти),
		ЭлементУО, Элементы, УсловноеОформление);
	
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			СтрШаблон("%1%2.ОтражениеАвансаПредставление", НачалоПутиКДаннымТЧ, ИмяТабличнойЧасти), ВидСравненияНеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Аванс в НУ>'"));
	КонецЕсли;
	
	ЭлементУО = Неопределено;
	ДобавитьПолеВУсловноеОформление(СтрШаблон("%1ОтражениеАвансаПредставление", ИмяТабличнойЧасти),
		ЭлементУО, Элементы, УсловноеОформление);
	Если ЭлементУО <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ОтражениеАвансаВидимость", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	КонецЕсли;
	
	БанкИКассаФормы.УстановитьУсловноеОформлениеБезЗакрывающихДокументов(Форма, НачалоПутиКДаннымТЧ);
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы(Форма)
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
	Объект = Форма.Объект;
	
	Форма.ПрименениеУСН        = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	Форма.ПрименениеУСНДоходы  = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	Форма.ПлательщикЕНВД       = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация,       Объект.Дата);
	Форма.ПлательщикНПД        = УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Объект.Организация, Объект.Дата);
	Форма.ПлательщикНДС        = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяОсобыйПорядокНалогообложения =
		УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяТолькоУСНПатент    = УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	Форма.РаздельныйУчетУСНТорговыйСбор = УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(
		Объект.Организация, Объект.Дата);
	
	Форма.УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	Форма.РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(
		Объект.Организация, Объект.Дата);
	Форма.ВестиУчетПоДоговорам            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Если Форма.ПрименяетсяУСНПатент Тогда
		Форма.ПрименяетсяНесколькоПатентов = Справочники.Патенты.ИспользуетсяНесколькоПатентов(
			Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	Форма.НТТНаЕНВД = Ложь;
	Если Форма.ПлательщикЕНВД И Форма.УчетВПродажныхЦенах Тогда
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация,
			Объект.Контрагент, Объект.Дата,
			Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", Форма.РозничнаяТорговляОблагаетсяЕНВД));
		Форма.НТТНаЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(
			СчетаДоходовРасходов.СчетДоходовОтРеализации);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверятьПатент(Форма)
	
	Объект = Форма.Объект;
	
	Возврат ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации) И Форма.УчетВПродажныхЦенах;
	
КонецФункции

#Область ЧекиНПД

Функция ОбработатьРезультатАннулированияЧекаВФоне(Форма, АдресРезультата) Экспорт
	
	ЧекАннулирован = Ложь;
	Объект = Форма.Объект;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка аннулирования чека в фоне: пустой результат.'");
	КонецЕсли;
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	Если Результат.Ошибка Или Результат.СтатусЗапроса = СтатусыЗапросов.Ошибка
		Или Результат.СтатусЗапроса = СтатусыЗапросов.Отменено Тогда
		
		Форма.ПараметрыОжиданияРезультата = Неопределено;
		
		УстановитьСведенияОЧекеНПД(Форма);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		
	ИначеЕсли Результат.СтатусЗапроса = СтатусыЗапросов.Выполняется Тогда
		
		Если ЗначениеЗаполнено(Результат.ПараметрыОжиданияРезультата) Тогда
			Форма.ПараметрыОжиданияРезультата = Результат.ПараметрыОжиданияРезультата;
		КонецЕсли;
		
	ИначеЕсли Результат.СтатусЗапроса = СтатусыЗапросов.Выполнено Тогда
		
		Форма.ПараметрыОжиданияРезультата = Неопределено;
		
		УстановитьСведенияОЧекеНПД(Форма);
		
		Если ЗначениеЗаполнено(Форма.СведенияОЧекеНПД) Тогда
			
			Если Не ЗначениеЗаполнено(Объект.Комментарий) Тогда
				Объект.Комментарий = Форма.СведенияОЧекеНПД.ПредставлениеПричиныОтменыЧека;
			КонецЕсли;
			Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			ЧекАннулирован = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЧекАннулирован;
	
КонецФункции

Процедура УстановитьСведенияОЧекеНПД(Форма, НовыеСведенияОЧекеНПД = Неопределено)
	
	Объект = Форма.Объект;
	
	Форма.СведенияОЧекеНПД = Неопределено;
	Если ЗначениеЗаполнено(НовыеСведенияОЧекеНПД) Тогда
		Форма.СведенияОЧекеНПД = НовыеСведенияОЧекеНПД;
	ИначеЕсли Форма.ПлательщикНПД Тогда
		Форма.СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Объект.Ссылка);
	КонецЕсли;
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

