
#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Форма.РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере(Форма);
		
		// Если документ скопирован и есть расчеты в у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ПериодСобытия") Тогда
		
		Если ТипЗнч(Форма.Параметры.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")
			ИЛИ ТипЗнч(Форма.Параметры.Правило) = Тип("СправочникСсылка.Патенты") Тогда
			Форма.ПравилоУплатыНалогов   = Форма.Параметры.Правило;
			Форма.ПериодСобытияКалендаря = Форма.Параметры.ПериодСобытия;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	УстановитьВидимостьКомандПечати(Форма);
	
	УстановитьУсловноеОформление(Форма);
	
	ВидимостьДоступностьЭлементовОднострочнойФормы(Форма);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		Форма,
		"БП.Документ.РасходныйКассовыйОрдер",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Выдача наличных'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере(Форма);
	
	// Инициализируем свойства платежа
	ИнициализироватьСвойстваПлатежаНаСервере(Форма, Истина);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(
		ТекущийОбъект,
		Форма.ПравилоУплатыНалогов,
		Форма.ПериодСобытияКалендаря);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
			Объект.Организация,
			Объект.СчетОрганизации,
			Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации,
			Отказ,
			ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	УстановитьСостояниеДокумента(Форма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета(Форма));
		
		ПроверитьИзменитьНастройкуПлатежаВБюджет(Форма);
	КонецЕсли;
	
	Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(
			ТекущийОбъект.РасшифровкаПлатежа, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура УправлениеФормой(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		Элементы.ГруппаРасшифровкаПлатежаРасчеты.Видимость = Форма.ЕстьРасчетыВУсловныхЕдиницах;
		Возврат;
	КонецЕсли;
	
	ЭлементРасчетыПриОплате = Элементы.Найти("РасчетыПриОплате");
	Если ЭлементРасчетыПриОплате <> Неопределено Тогда
		ЭлементРасчетыПриОплате.Видимость = Форма.РасчетыПриОплатеВидимость;
	КонецЕсли;
	
	ЭлементПредупреждениеОЗаполненииРеквизитовСчета = Элементы.Найти("ПредупреждениеОЗаполненииРеквизитовСчета");
	Если ЭлементПредупреждениеОЗаполненииРеквизитовСчета <> Неопределено Тогда
		ЭлементПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
			Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			И ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ИзменитьПараметрыВыбораСчетаБанка(Форма);
	КонецЕсли;
	
	ЭтоУплатаНалога = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
	ЭтоУплатаНДФЛ   = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога);
	ЭтоУплатаФиксированныхВзносов  = ЭтоУплатаНалога И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Форма.ВидНалога);
	
	Элементы.Налог.Видимость = ЭтоУплатаНалога;
	Если ЭтоУплатаНалога Тогда
		Если ЗначениеЗаполнено(Объект.Налог)
			И Форма.Параметры.Свойство("ВидыНалогов")
			И ЗначениеЗаполнено(Форма.Параметры.ВидыНалогов)
			И Форма.Параметры.ВидыНалогов.Количество() = 1 Тогда
			Элементы.Налог.Вид = ВидПоляФормы.ПолеНадписи;
		Иначе
			Элементы.Налог.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементВидНалоговогоОбязательства = Элементы.Найти("ВидНалоговогоОбязательства");
	Если ЭлементВидНалоговогоОбязательства <> Неопределено Тогда
		ЭлементВидНалоговогоОбязательства.Видимость   = ЭтоУплатаНалога;
		ЭлементВидНалоговогоОбязательства.Доступность = ЗначениеЗаполнено(Объект.Налог);
		ЭлементВидНалоговогоОбязательства.Ширина      = ?(ЭтоУплатаФиксированныхВзносов, 21, 18);
	КонецЕсли;
	
	ЭлементНалоговыйПериод = Элементы.Найти("НалоговыйПериод");
	Если ЭлементНалоговыйПериод <> Неопределено Тогда
		ЭлементНалоговыйПериод.Видимость   = ВидимостьНалоговогоПериода(Форма);
		ЭлементНалоговыйПериод.Доступность = ЗначениеЗаполнено(Объект.Налог);
	КонецЕсли;
	
	Элементы.СтраховойПериод.Видимость   = ЭтоУплатаФиксированныхВзносов;
	Элементы.СтраховойПериод.Доступность = ЗначениеЗаполнено(Объект.Налог);
	
	ЭлементРеестрУплатыНДФЛ = Элементы.Найти("РеестрУплатыНДФЛ");
	Если ЭлементРеестрУплатыНДФЛ <> Неопределено Тогда
		ЭлементРеестрУплатыНДФЛ.Видимость = Форма.ИспользоватьНачислениеЗарплаты И ЭтоУплатаНДФЛ;
	КонецЕсли;
	
	ЭлементФормаПрочиеПлатежиВБюджет = Элементы.Найти("ФормаПрочиеПлатежиВБюджет");
	Если ЭлементФормаПрочиеПлатежиВБюджет <> Неопределено Тогда
		ЭлементФормаПрочиеПлатежиВБюджет.Видимость = ЭтоУплатаНалога;
	КонецЕсли;
	
	Элементы.НомерВходящегоДокумента.Видимость = ЭтоУплатаНалога;
	
	ЭлементНадписьРеквизитыПлатежейВБюджет = Элементы.Найти("НадписьРеквизитыПлатежейВБюджет");
	Если ЭлементНадписьРеквизитыПлатежейВБюджет <> Неопределено Тогда
		ЭлементНадписьРеквизитыПлатежейВБюджет.Видимость = ЭтоУплатаНалога;
	КонецЕсли;
	
	ЭлементКонтрагент = Элементы.Найти("Контрагент");
	Если ЭлементКонтрагент <> Неопределено Тогда
		ВидимостьКонтрагента =
			Объект.ВидОперации   <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.Инкассация
			И Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.ПрочийРасход;
		
		ЭлементКонтрагент.Видимость = ВидимостьКонтрагента;
		
		Если ВидимостьКонтрагента Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
				ЭлементКонтрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
				Элементы.Контрагент.МаксимальнаяШирина = 24;
			Иначе
				ЭлементКонтрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
				Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементСчетКонтрагента = Элементы.Найти("СчетКонтрагента");
	Если ЭлементСчетКонтрагента <> Неопределено Тогда
		ЭлементСчетКонтрагента.Видимость   = ЭтоУплатаНалога;
		ЭлементСчетКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	КонецЕсли;
	
	ЭлементТипКонтрагента = Элементы.Найти("ТипКонтрагента");
	Если ЭлементТипКонтрагента <> Неопределено Тогда
		ЭлементТипКонтрагента.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов;
	КонецЕсли;
	
	ЭлементГруппаПорядокОтраженияБУ = Элементы.Найти("ГруппаПорядокОтраженияБУ");
	Если ЭлементГруппаПорядокОтраженияБУ <> Неопределено Тогда
		ЭлементГруппаПорядокОтраженияБУ.Видимость = Форма.ПользовательУправляетСчетамиУчета И ЭтоУплатаНалога;
	КонецЕсли;
	
	ЭлементВалютаДокумента = Элементы.Найти("ВалютаДокумента");
	Если ЭлементВалютаДокумента <> Неопределено Тогда
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			ЭлементВалютаДокумента.Доступность = Форма.ОплатаВВалюте И РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
		Иначе
			ЭлементВалютаДокумента.Доступность = РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементГруппаВзносНаличнымиВБанк = Элементы.Найти("ГруппаВзносНаличнымиВБанк");
	Если ЭлементГруппаВзносНаличнымиВБанк <> Неопределено Тогда
		ЭлементГруппаВзносНаличнымиВБанк.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
	КонецЕсли;
	
	ЭлементСтатьяДвиженияДенежныхСредств = Элементы.Найти("СтатьяДвиженияДенежныхСредств");
	Если ЭлементСтатьяДвиженияДенежныхСредств <> Неопределено Тогда
		ЭлементСтатьяДвиженияДенежныхСредств.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
				И НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	КонецЕсли;
	
	УстановитьВидимостьКнопкиПечатиЧека(Форма);
	
	ЭлементДокументОснование = Элементы.Найти("ДокументОснование");
	Если ЭлементДокументОснование <> Неопределено Тогда
		ЭлементДокументОснование.Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю) 
			И ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаРеквизитыПечатнойФормы", "Видимость", ПолучитьФункциональнуюОпцию("ИспользуетсяКассоваяКнига"));
	
	Если Не БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма) Тогда
	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю И Форма.ПлательщикНПД Тогда
			
			ЧекАннулирован = Ложь;
			
			Если ЗначениеЗаполнено(Форма.СведенияОЧекеНПД) Тогда
				
				ЧекАннулирован = Форма.СведенияОЧекеНПД.Состояние = Перечисления.СостоянияЧековНПД.Аннулирован;
				
			КонецЕсли;
			
			Элементы.ГруппаЧекНПД.Видимость = ЧекАннулирован Или ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые");
			
			Элементы.ОжиданиеДанных.Видимость = Ложь;
			Элементы.ДекорацияЧекНаВозврат.Видимость = ЧекАннулирован;
			Элементы.АннулироватьЧекНПД.Видимость = НЕ ЧекАннулирован;
			Элементы.АннулироватьЧекНПД.Доступность = Не Форма.ТолькоПросмотр;
			
			Если ЧекАннулирован Тогда
				
				Элементы.ДекорацияЧекНаВозврат.Заголовок = Форма.СведенияОЧекеНПД.ОписаниеЧека;
				
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаЧекНПД.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для видов операций "Выплата зарплаты", "Выплата зарплаты работнику"
	// сумму документа править нельзя, необходимо редактировать исходные ведомости на выплату.
	ЗапрещеноРедактироватьСуммуДокумента = Ложь;
	Если НЕ УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			ЗапрещеноРедактироватьСуммуДокумента = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Для вида операции "Выплата сотруднику по договору подряда", если выбрана ведомость, то
	// сумму документа править нельзя, необходимо редактировать исходные ведомости на выплату.
	Если Не Форма.УчетЗарплатыИКадровВоВнешнейПрограмме
		И Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		ЗапрещеноРедактироватьСуммуДокумента = ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	КонецЕсли;
	
	Элементы.СуммаДокумента.ТолькоПросмотр = ЗапрещеноРедактироватьСуммуДокумента;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
	
	ВидимостьДоступностьЭлементовОднострочнойФормы(Форма);
	
КонецПроцедуры

Процедура УстановитьВидимостьКнопкиПечатиЧека(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭлементНапечататьЧек = Элементы.Найти("НапечататьЧек");
	Если ЭлементНапечататьЧек <> Неопределено Тогда
		НапечататьЧекВидимость = ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование)
			И Не Форма.ПлательщикНПД;
		ЭлементНапечататьЧек.Видимость     = НапечататьЧекВидимость;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидимостьДоступностьЭлементовОднострочнойФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Найти("ГруппаАналитика") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьГиперссылкуПерейтиВТаблицу(Форма);
	
	// Реквизиты не используются при расчетах по кредитам и займам.
	РасчетыПоКредитамИЗаймам        = ЭтоРасчетыПоКредитамИЗаймам(Объект.ВидОперации);
	Элементы.РасшифровкаПлатежаСпособПогашенияЗадолженности.Видимость = НЕ РасчетыПоКредитамИЗаймам;
	Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость                    = НЕ РасчетыПоКредитамИЗаймам;
	Элементы.РасшифровкаПлатежаСуммаНДС.Видимость                     = НЕ РасчетыПоКредитамИЗаймам;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = НЕ РасчетыПоКредитамИЗаймам;
	КонецЕсли;
	
	// Реквизиты используются только при возврате займа.
	ЭтоВозвратЗайма = ЭтоВозвратЗайма(Объект.ВидОперации);
	Элементы.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам.Видимость = ЭтоВозвратЗайма;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
		НазваниеТабличнойЧасти = РасходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
		БанкИКассаФормыКлиентСервер.УстановитьВидимостьПолейГруппыБезЗакрывающихДокументов(Форма, НазваниеТабличнойЧасти);
	КонецЕсли;
	
	Элементы.ГруппаРасчетыВУЕ.Видимость = Форма.ЕстьРасчетыВУсловныхЕдиницах;
	Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		И НЕ Объект.БезЗакрывающихДокументов;
	
	// Реквизиты используются только при расчетах в у.е.
	Элементы.РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов.Видимость = Форма.ЕстьРасчетыВУсловныхЕдиницах;
	Элементы.РасшифровкаПлатежаКурсВзаиморасчетов.Видимость = Форма.ЕстьРасчетыВУсловныхЕдиницах;
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Форма.ЕстьРасчетыВУсловныхЕдиницах;
	
	// Контрагент
	Элементы.Контрагент.ОтметкаНезаполненного = Не (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя);
	
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ТолькоПросмотр = 
		Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
		
	РасходныйКассовыйОрдерФормыКлиентСервер.ДоступностьСтавкиНДС(Форма);
	
КонецПроцедуры

Процедура ОтобразитьГиперссылкуПерейтиВТаблицу(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти("НадписьРазбитьПлатеж") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
		ВключитьВидимостьСсылкиНаПлатеж(Элементы, Ложь, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда 
		КоличествоСтрок          = Объект.РасшифровкаПлатежа.Количество();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		КоличествоСтрок          = Объект.ВыплатаЗаработнойПлаты.Количество();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		КоличествоСтрок          = Объект.ВыплатаДепонентов.Количество();
	КонецЕсли;
	
	ГруппаТЧ = Элементы[ИмяГруппыАналитики(Форма)];
	Если КоличествоСтрок > 1 Тогда
		Если ГруппаТЧ = Элементы.ГруппаВыплатаЗарплаты Тогда
			Элементы.ВыплатаЗарплатыВедомость.Видимость   = Ложь;
			Элементы.ВедомостьЗарплатаРаботнику.Видимость = Ложь;
		Иначе
			ГруппаТЧ.Видимость = Ложь;
		КонецЕсли;
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"),
			Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, ПараметрыПредметаИсчисления));
		ВключитьВидимостьСсылкиНаПлатеж(Элементы, Истина, Истина);
	Иначе
		Если ГруппаТЧ = Элементы.ГруппаВыплатаЗарплаты Тогда
			Элементы.ВыплатаЗарплатыВедомость.Видимость   = Истина;
			Элементы.ВедомостьЗарплатаРаботнику.Видимость = Истина;
		Иначе
			ГруппаТЧ.Видимость = Истина;
		КонецЕсли;
		Если Объект.БезЗакрывающихДокументов 
			И НЕ (Форма.ОтражениеДоходаВидимость
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств")) Тогда
			ВключитьВидимостьСсылкиНаПлатеж(Элементы, Ложь, Ложь);
		Иначе
			ВключитьВидимостьСсылкиНаПлатеж(Элементы, Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВключитьВидимостьСсылкиНаПлатеж(Элементы, ЕстьНесколькоСтрок, ЭтоВидыОперацииСТЧ)
	
	Элементы.НадписьРазбитьПлатеж.Видимость  = Не ЕстьНесколькоСтрок И ЭтоВидыОперацииСТЧ;
	Элементы.НадписьСуммаДокумента.Видимость = ЕстьНесколькоСтрок;
	Элементы.СуммаДокумента.Видимость        = Не ЕстьНесколькоСтрок;
	
КонецФункции

Функция ИмяГруппыАналитики(Форма)
	
	Объект = Форма.Объект;
	
	ИмяГруппыАналитики = "ГруппаРасчетыСКонтрагентами";
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаПрочее";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ИмяГруппыАналитики = "ВыплатаДепонентовВедомость";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ИмяГруппыАналитики = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ИмяГруппыАналитики = "ГруппаВыплатаЗарплаты";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда 
		ИмяГруппыАналитики = "ГруппаРозничнаяВыручка";
	ИначеЕсли Объект.БезЗакрывающихДокументов Тогда
		ИмяГруппыАналитики = "ГруппаБезЗакрывающихДокументов";
	КонецЕсли;
	
	Возврат ИмяГруппыАналитики;
	
КонецФункции

Функция ЭтоРасчетыПоКредитамИЗаймам(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту;
	
КонецФункции

Функция ЭтоВозвратЗайма(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита;
	
КонецФункции

Процедура ИзменитьПараметрыВыбораСчетаУчета(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НовыйМассивПараметров = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Форма.МассивСчетовИнкассации));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
		
	Иначе
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура ОбработатьИзмененияВОрганизацииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И
		ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПрочиеИзменениеДляУСН(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(РасходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"СтатьяДвиженияДенежныхСредств", Объект));
		
	ЗаполнитьОтражениеВУСННаСервере(Форма, Ложь, Истина);
	
КонецПроцедуры

Процедура ПодготовитьФормуНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	Форма.ПроверятьСоответствиеСуммыДокументаИВедомости = Форма.ИспользоватьНачислениеЗарплаты
		ИЛИ Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ЕстьУчетПоРаботникам;
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	УстановитьСостояниеДокумента(Форма);
	
	// Заполнение реквизитов формы
	Форма.ТекущаяДатаДокумента           = Объект.Дата;
	Форма.ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(Объект.ПлатежнаяВедомость,
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
	
	Форма.НалоговыйПериодСтрока = Объект.НалоговыйПериод;
	
	Форма.ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	УстановитьЗаголовкиКолонокРасшифровкаПлатежа(Форма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		Если ЗначениеЗаполнено(Объект.Налог) Тогда
			Форма.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		КонецЕсли;
		
		ЗначениеПериодаУплаты = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.НалоговыйПериод");
		
		Если Форма.Параметры.Ключ.Пустая() Тогда
			ЗначениеПериодаУплаты = ?(ЗначениеЗаполнено(ЗначениеПериодаУплаты), ЗначениеПериодаУплаты, НачалоМесяца(Объект.Дата));
		КонецЕсли;
		
		Форма.НалоговыйПериодСтрока = РасходныйКассовыйОрдерФормыКлиентСервер.ПредставлениеПериодаУплатыНалога(
			Объект.НалоговыйПериод, Форма.ВидНалога);
	ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "Номер, Дата");
		
			Форма.ДокументОснование = СтрШаблон("%1 № %2 от %3",
				Объект.ДокументОснование.Метаданные().Представление(),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокументаОснования.Номер, Истина, Истина),
				Формат(РеквизитыДокументаОснования.Дата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
		Если Форма.ПлательщикНПД Тогда
			Форма.СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Если Элементы.Найти("НадписьРеквизитыПлатежейВБюджет") <> Неопределено Тогда
		Форма.НадписьРеквизитыПлатежейВБюджет = РасходныйКассовыйОрдерФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Форма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Форма.ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетКасса).Валютный;
	Иначе
		Форма.ОплатаВВалюте = ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	УстановитьКурсДокумента(Форма);
	
	БанкИКассаФормы.ПодготовитьРасчетыПриОплате(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		РасходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	// Заполнение свойств элементов формы
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораВалютыДокумента(Форма);
	ОпределитьЮрФизЛицо(Форма);
	УстановитьОграничениеТипаКонтрагента(Форма);
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
	ПодготовитьОднострочнуюФорму(Форма);
	
	// Управление внешним видом формы
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, Истина);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	УстановитьВидимостьСтраницНаСервере(Форма);
	
	БанкИКассаФормы.НастроитьФормуДокументаДляРежимаИнтеграцииСБанком(Форма);
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПодготовитьФормуНаСервере(Форма);
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПодготовитьОднострочнуюФорму(Форма)
	
	Объект = Форма.Объект;
	
	Если Не РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
	
		Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
				РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Если Объект.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
			Форма.ВыплатаЗаработнойПлатыВедомость = Объект.ВыплатаЗаработнойПлаты[0].Ведомость;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		Если Объект.ВыплатаДепонентов.Количество() > 0 Тогда
			Форма.ВыплатаДепонентовВедомость    = Объект.ВыплатаДепонентов[0].Ведомость;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ВыплатаЗаработнойПлатыВедомость) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(
			Форма.ВыплатаЗаработнойПлатыВедомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Форма.ВыплатаДепонентовВедомость) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПустоеЗначениеВыплатаДепонентовВедомость(
			Форма.ВыплатаДепонентовВедомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокРасшифровкаПлатежа(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НазваниеТабличнойЧасти = РасходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	// Установим заголовки табличных частей
	Если НазваниеТабличнойЧасти = "РасшифровкаПлатежа" И Элементы.Найти(НазваниеТабличнойЧасти) <> Неопределено Тогда
		Если Объект.БезЗакрывающихДокументов Тогда
			ТекстЗаголовка = НСтр("ru = 'Статья расходов'");
		ИначеЕсли Форма.ВестиУчетПоДоговорам И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
			ТекстЗаголовка = НСтр("ru = 'Договор / Статья расходов'");
		ИначеЕсли Форма.ВестиУчетПоДоговорам Тогда
			ТекстЗаголовка = НСтр("ru = 'Договор'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Статья расходов'");
		КонецЕсли;
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидОперацииСТабличнойЧастью(ВидОперации) Экспорт
	
	Возврат Документы.РасходныйКассовыйОрдер.ЕстьРасшифровкаПлатежа(ВидОперации)
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		Или ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов;
	
КонецФункции

Процедура УстановитьСостояниеДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Форма.СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраницНаСервере(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭлементГруппаСтатьяДвиженияДенежныхСредств = Элементы.Найти("ГруппаСтатьяДвиженияДенежныхСредств");
	ЭлементГруппаВыплатаЗарплаты = Элементы.Найти("ГруппаВыплатаЗарплаты");
	ЭлементГруппаВыплатаЗарплатыПоВедомостям = Элементы.Найти("ГруппаВыплатаЗарплатыПоВедомостям");
	ЭлементГруппаВыплатаЗарплатыПоОдномуРаботнику = Элементы.Найти("ГруппаВыплатаЗарплатыПоОдномуРаботнику");
	
	Если ЭлементГруппаСтатьяДвиженияДенежныхСредств <> Неопределено
		И ЭлементГруппаВыплатаЗарплаты <> Неопределено
		И ЭлементГруппаВыплатаЗарплатыПоВедомостям <> Неопределено
		И ЭлементГруппаВыплатаЗарплатыПоОдномуРаботнику <> Неопределено Тогда
			
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
				ЭлементГруппаСтатьяДвиженияДенежныхСредств.Видимость    = Истина;
				ЭлементГруппаВыплатаЗарплаты.Видимость                  = Ложь;
			Иначе
				ЭлементГруппаСтатьяДвиженияДенежныхСредств.Видимость    = Ложь;
				ЭлементГруппаВыплатаЗарплаты.Видимость                  = Истина;
				ЭлементГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Истина;
				ЭлементГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
				ЭлементГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Истина;
				ЭлементГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
			Иначе
				ЭлементГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Ложь;
				ЭлементГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Истина;
			КонецЕсли;
		Иначе
			ЭлементГруппаСтатьяДвиженияДенежныхСредств.Видимость    = Ложь;
			ЭлементГруппаВыплатаЗарплаты.Видимость                  = Ложь;
			ЭлементГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Ложь;
			ЭлементГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементГруппаЗадержкаЗарплаты = Элементы.Найти("ГруппаЗадержкаЗарплаты");
	Если ЭлементГруппаЗадержкаЗарплаты <> Неопределено Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			ЭлементГруппаЗадержкаЗарплаты.Видимость = Форма.УчетЗарплатыИКадровВоВнешнейПрограмме
				И Форма.ИспользоватьФорматОбменаЗУП25;
		Иначе
			ЭлементГруппаЗадержкаЗарплаты.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		УстановитьВидимостьГрупп(Форма);
	Иначе
		УстановитьВидимостьСтраниц(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраниц(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭлементГруппаСтраницы = Элементы.Найти("ГруппаСтраницы");
	Если ЭлементГруппаСтраницы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьАналитики = ВидимостьАналитики(Объект.ВидОперации);
	
	ЭлементГруппаСтраницы.Видимость = ВидимостьАналитики;
	
	Если НЕ ВидимостьАналитики Тогда
		Возврат;
	КонецЕсли;
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаСтатьяДвиженияДенежныхСредств);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаДепонентов);
	МассивСтраниц.Добавить(Элементы.ГруппаПрочее);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаДивидендов);
	МассивСтраниц.Добавить(Элементы.ГруппаРозничнаяВыручка);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаПоДоговоруПодряда);
	
	ТекущаяСтраница = Неопределено;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Элементы.ГруппаВыплатаЗарплатыСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыОперации;
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница        = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			ТекущаяСтраница        = Элементы.ГруппаВыплатаЗарплаты;
			Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыОперации;
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплаты;
			Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентов;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		ТекущаяСтраница = Элементы.ГруппаВыплатаДивидендов;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		ТекущаяСтраница = Элементы.ГруппаПрочее;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда
		ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		ТекущаяСтраница = Элементы.ГруппаВыплатаПоДоговоруПодряда;
		Элементы.ВедомостьПоДоговоруПодряда.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам");
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		РасшифровкаНедоступна = Объект.БезЗакрывающихДокументов 
			И НЕ Форма.ОтражениеДоходаВидимость 
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
		ТекущаяСтраница = ?(РасшифровкаНедоступна, Неопределено, Элементы.ГруппаРасчетыСКонтрагентами);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ИспользоватьФорматОбменаЗУП25 Тогда
			Элементы.ГруппаВыплатаЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаВыплатаЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			Элементы.ГруппаВыплатаДепонентовСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентовСтраницаСтатьяДДС;
		Иначе
			Элементы.ГруппаВыплатаДепонентовСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентовСтраницаВедомость;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			ЭлементГруппаСтраницы.ТекущаяСтраница = ТекСтраница;
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьГрупп(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭлементГруппаАналитика = Элементы.Найти("ГруппаАналитика");
	Если ЭлементГруппаАналитика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьАналитики = ВидимостьАналитики(Объект.ВидОперации);
	
	ЭлементГруппаАналитика.Видимость = ВидимостьАналитики;
	
	Если НЕ ВидимостьАналитики Тогда
		Возврат;
	КонецЕсли;
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций,
	// сначала отработаем формы-исключения
	СтруктураСтраниц = Новый Структура;
	СтруктураСтраниц.Вставить("ГруппаСтатьяДвиженияДенежныхСредств", Элементы.ГруппаСтатьяДвиженияДенежныхСредств);
	СтруктураСтраниц.Вставить("ГруппаВыплатаЗарплаты", Элементы.ГруппаВыплатаЗарплаты);
	СтруктураСтраниц.Вставить("ГруппаВыплатаДепонентов", Элементы.ГруппаВыплатаДепонентов);
	СтруктураСтраниц.Вставить("ГруппаПрочее", Элементы.ГруппаПрочее);
	СтруктураСтраниц.Вставить("ГруппаРасчетыСКонтрагентами", Элементы.ГруппаРасчетыСКонтрагентами);
	СтруктураСтраниц.Вставить("ГруппаБезЗакрывающихДокументов", Элементы.ГруппаБезЗакрывающихДокументов);
	СтруктураСтраниц.Вставить("ГруппаВыплатаДивидендов", Элементы.ГруппаВыплатаДивидендов);
	СтруктураСтраниц.Вставить("ГруппаРозничнаяВыручка", Элементы.ГруппаРозничнаяВыручка);
	СтруктураСтраниц.Вставить("ГруппаВыплатаПоДоговоруПодряда", Элементы.ГруппаВыплатаПоДоговоруПодряда);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыОперации;
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаВыплатаЗарплаты";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаВыплатаЗарплаты";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ТекущаяСтраница = "ГруппаВыплатаДепонентов";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		ТекущаяСтраница = "ГруппаВыплатаДивидендов";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		ТекущаяСтраница = "ГруппаПрочее";
	ИначеЕсли Объект.БезЗакрывающихДокументов Тогда
		ТекущаяСтраница = "ГруппаБезЗакрывающихДокументов";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда
		ТекущаяСтраница = "ГруппаРозничнаяВыручка";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		ТекущаяСтраница = "ГруппаВыплатаПоДоговоруПодряда";
		Элементы.ВедомостьПоДоговоруПодряда.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам");
		// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ТекущаяСтраница = "ГруппаРасчетыСКонтрагентами";
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
			Элементы.ВыплатаДепонентовВедомость.Видимость = Ложь;
		Иначе
			Элементы.ВыплатаДепонентовВедомость.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоКредиты = ЭтоРасчетыПоКредитамИЗаймам(Объект.ВидОперации);
	
	Если ЭтоКредиты Тогда
		// При расчетах по кредитам и займам для УСН (доходы - расходы) могут указываться расходы, принимаемые в УСН.
		Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость    = Истина;
		Элементы.РасшифровкаПлатежаГруппаОтражениеВУСН.Видимость          = Истина;
		Элементы.РасшифровкаПлатежаГруппаПогашениеЗадолженности.Видимость = Ложь;
	ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
		// Для видов операций "Оплата поставщику" и "Возврат покупателю" возможно указание документа расчетов.
		Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость    = Истина;
		Элементы.РасшифровкаПлатежаГруппаОтражениеВУСН.Видимость          = Ложь;
		Элементы.РасшифровкаПлатежаГруппаПогашениеЗадолженности.Видимость = Истина;
	Иначе
		Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость    = Ложь;
		Элементы.РасшифровкаПлатежаГруппаОтражениеВУСН.Видимость          = Ложь;
		Элементы.РасшифровкаПлатежаГруппаПогашениеЗадолженности.Видимость = Ложь;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураСтраниц Цикл
		Если КлючИЗначение.Ключ <> ТекущаяСтраница Тогда
			Если КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВидимостьАналитики(ВидОперации)
	
	Возврат ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		И ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя
		И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику;
	
КонецФункции

Процедура УстановитьФункциональныеОпцииФормы(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
	Форма.ПлательщикНДС        = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	Форма.ПрименениеУСН        = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	Форма.ПрименениеУСНДоходы  = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	Форма.ПлательщикЕНВД       = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация,       Объект.Дата);
	Форма.ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Форма.ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(
		Объект.Организация, Объект.Дата);
	Форма.РозничнаяТорговляОблагаетсяЕНВД         = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
	Форма.УчетВПродажныхЦенах                     = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата) =
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	Если НЕ РасходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Форма.ПлательщикНПД = УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Объект.Организация, Объект.Дата);
		Форма.ЕстьУчетПоРаботникам                  = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
		Форма.ИспользоватьНачислениеЗарплаты        = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
		Форма.УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
		Форма.ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
		Форма.ИспользоватьФорматОбменаЗУП25         = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
			Новый Структура("Организация", Объект.Организация));
		Форма.ИспользоватьФорматОбменаЗУП30 = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭлементСчетКасса = Элементы.Найти("СчетКасса");
	Если ЭлементСчетКасса <> Неопределено Тогда
		
		СчетаОтбора = Новый Массив;
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.Касса);
		
		СчетаИсключений = Новый Массив;
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументы);
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал);
		
		СчетаКассы = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
		
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаКассы)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Если НЕ РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
		КонецЕсли;
		ЭлементСчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
	КонецЕсли;
	
	ЭлементСчетБанк = Элементы.Найти("СчетБанк");
	Если ЭлементСчетБанк <> Неопределено Тогда
		
		СчетаБанка = Документы.РасходныйКассовыйОрдер.СчетаБанка();
		
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		ЭлементСчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
	КонецЕсли;
	
	ЭлементСчетУчета = Элементы.Найти("СчетУчета");
	Если ЭлементСчетУчета <> Неопределено Тогда
		
		СчетаОтбора = Новый Массив;
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
		
		СчетаИсключений = Новый Массив;
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
		СчетаИнкассации = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
		// Счета инкассации сохраняются в реквизит формы
		Форма.МассивСчетовИнкассации = Новый ФиксированныйМассив(СчетаИнкассации);
		
		НовыйМассивПараметров = Новый Массив;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Форма.МассивСчетовИнкассации));
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
		Иначе
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
		КонецЕсли;
		
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		
		ЭлементСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКурсДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Форма.КурсДокумента      = СтруктураКурса.Курс;
	Форма.КратностьДокумента = СтруктураКурса.Кратность;
	
	РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморасчетов
	Для каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Если Объект.ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов
			И НЕ СтрокаРасшифровкиПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВидОперацииПриИзмененииСервер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ВидОперацииОбработатьИзменение(Форма, Новый Массив);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыПлатежаВБюджет(Форма);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
		УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	УстановитьВидимостьКомандПечати(Форма);
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	УправлениеФормой(Форма);
	ОбновитьУсловноеОформление(Форма);
	
КонецПроцедуры

Процедура ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		Объект.НачислениеДивидендов = "";
	КонецЕсли;
	
	УстановитьОграничениеТипаКонтрагента(Форма);
	ОпределитьЮрФизЛицо(Форма);
	
	Если Элементы.Контрагент.ОграничениеТипа.Типы().Количество() = 0 Тогда
		Объект.Контрагент = Неопределено;
		ПричиныИзменения.Добавить("Контрагент");
	Иначе
		Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
		ПричиныИзменения.Добавить("Контрагент");
	КонецЕсли;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Объект.Налог           = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		Объект.НалоговыйАгентНДС.Очистить();
	КонецЕсли;
	
	Объект.СчетОрганизации    = Справочники.БанковскиеСчета.ПустаяСсылка();
	Объект.ПлатежнаяВедомость = Неопределено;
	Объект.СтавкаНДС          = Перечисления.СтавкиНДС.ПустаяСсылка();
	Объект.Основание          = "";
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		РасходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		
		ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
		Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		Если Объект.СчетКасса <> ПланыСчетов.Хозрасчетный.КассаОрганизации Тогда
			ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
			И Не БухгалтерскийУчетПовтИсп.СчетВИерархии(Объект.СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Хозрасчетный.РасчетыПоНалогам)
			И Не БухгалтерскийУчетПовтИсп.СчетВИерархии(Объект.СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию) Тогда
			
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СчетУчетаПриИзмененииСервер(Форма);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		
		ИзменитьПараметрыВыбораСчетаУчета(Форма);
		Объект.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		РасходныйКассовыйОрдерФормыКлиентСервер.ИзменитьПараметрыВыбораСчетаБанка(Форма);
		
		НовыйСчетОрганизации   = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(НовыйСчетОрганизации,
			Объект.Организация, Форма.ВалютаРегламентированногоУчета, НЕ Форма.ОплатаВВалюте);
		Объект.СчетОрганизации = НовыйСчетОрганизации;
		
	ИначеЕсли Форма.ОплатаВВалюте И НЕ РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		
		Форма.ОплатаВВалюте          = Ложь;
		Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета;
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораВалютыДокумента(Форма);
		ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения);
		
	КонецЕсли;
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "ВидОперации", ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
КонецПроцедуры

Процедура ДатаПриИзмененииСервер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		РасходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	ЗаполнитьДобавленнуюКолонкуОтражениеДоходаПредставление(Форма);
	
	УстановитьКурсДокумента(Форма);
	ПересчитатьСуммыВзаиморасчетов(Форма);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Дата");
	
	ЗаполнитьСчетаУчета(Форма, "Дата", ПричиныИзменения);
	УстановитьВидимостьСчетовУчета(Форма);
	
	ОбработатьИзменениеДатыПриУплатеНалога(Форма);
	
	ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Ложь);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ОбработатьИзменениеДатыПриУплатеНалога(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		ПричиныИзменения = Новый Массив;
		ПричиныИзменения.Добавить("Дата");
		НалогПриИзмененииНаСервере(Форма, ПричиныИзменения, Ложь, "");
	КонецЕсли;
	
	Если Элементы.Найти("НадписьРеквизитыПлатежейВБюджет") <> Неопределено Тогда
		Форма.НадписьРеквизитыПлатежейВБюджет = РасходныйКассовыйОрдерФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ДоступныеОперации = Перечисления.ВидыОперацийРКО.ПолучитьСписокДоступныхЗначений(Новый Структура("Организация", Объект.Организация));
	
	Если ДоступныеОперации.Количество() > 0 
		И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения);
		ОбновитьУсловноеОформление(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияПриИзмененииСервер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетОрганизации,
			Объект.Организация,
			Объект.ВалютаДокумента,
			Истина);
	Иначе
		Объект.СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ОсновноеПодразделение;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Организация") <> Объект.Организация Тогда
		Объект.ДокументОснование = Неопределено;
	КонецЕсли; 
	
	ЗаполнитьСчетаУчета(Форма, "Организация", ПричиныИзменения);
	
	БанкИКассаФормы.УстановитьРасчетыПриОплате(Форма);
	
	БанкИКассаФормы.НастроитьВыборОтраженияДоходов(Форма,
		РасходныйКассовыйОрдерФормыКлиентСервер.ИменаЭлементовОтраженияДохода());
	
	ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	Форма.СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	Если Объект.ВидОперации  = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыПлатежаВБюджет(Форма);
	КонецЕсли;
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПодразделениеДт(Форма);
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
		УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	КонецЕсли;
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("ВалютаДокумента");
	
	ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма); // Текущие значения реквизитов объекта
	НовыеПараметры   = НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта); // Возможно, изменятся: курс, кратность, ОплатаВВалюте, банковский счет
	
	Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
		ОплатаВВалютеПриИзмененииСервер(Форма, ПараметрыОбъекта, НовыеПараметры);
	КонецЕсли;
	
	// перезаполнить значения, даже если валюта осталась та же
	ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
	
	ИнициализироватьСвойстваПлатежаНаСервере(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	
	ЗаполнитьСчетаУчета(Форма, "ВалютаДокумента", ПричиныИзменения);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
	УстановитьЗаголовкиКолонокУСН(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ОплатаВВалютеПриИзмененииСервер(Форма, ПараметрыОбъекта, НовыеПараметры)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПараметрыОбъекта.ВалютаДокумента = НовыеПараметры.ВалютаДокумента;
	ПараметрыОбъекта.ОплатаВВалюте   = НовыеПараметры.ОплатаВВалюте;
	
	ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "ОплатаВВалюте");
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВалютаДокумента, СчетОрганизации");
	
КонецПроцедуры

Процедура НалогОбработатьИзменение(Форма, ПричиныИзменения, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(Объект.ПоказательПериода) Тогда
		ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Объект.ПоказательПериода);
		ПериодПлатежа = ПоказателиПериода.Дата;
	КонецЕсли;
	
	ТребуетсяОтработатьИзменениеНалога = АктуализированыРеквизитыПлатежаВБюджет
		ИЛИ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Форма.ТекущаяДатаДокумента) <> ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Объект.Дата)
		ИЛИ ЗначениеЗаполнено(ПериодПлатежа) И ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ПериодПлатежа) <> ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Объект.Дата);
	
	// Налог в новом периоде актуален, отрабатывать изменение не нужно.
	Если ПричиныИзменения.Количество() = 1 И ПричиныИзменения[0] = "Дата"
		И НЕ АктуализированыРеквизитыПлатежаВБюджет И НЕ ТребуетсяОтработатьИзменениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	
	Объект.ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
		СтрокаПоискаПоКБК, Объект.Дата, Форма.ВидНалога);
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Форма.ВидНалога) Тогда
		Объект.НалоговыйПериод = НачалоГода(Объект.Дата);
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(Форма.ВидНалога) Тогда
		Объект.НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(Объект.Дата, Объект.Организация);
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоТорговыйСбор(Форма.ВидНалога)
		Или ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(Форма.ВидНалога) Тогда
		Объект.НалоговыйПериод = УчетНДФЛПредпринимателя.РелевантныйПериодНалоговогоПлатежа(Объект.Дата);
	Иначе
		Объект.НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
	КонецЕсли;
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(Объект.Налог);
	
	Если ПравилаЗаполнения.ЗаполнятьПолучателя И Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Объект.Контрагент = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			КонтрагентОбработатьИзменение(Форма, ПричиныИзменения);
		КонецЕсли;
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыПлатежаВБюджет(Форма);
	
	Форма.НалоговыйПериодСтрока = РасходныйКассовыйОрдерФормыКлиентСервер.ПредставлениеПериодаУплатыНалога(
		Объект.НалоговыйПериод, Форма.ВидНалога);
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	БанкИКассаФормы.ПоказатьБаннерПредупреждениеОЗаполненииРеквизитовПлатежаНПД(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "Налог", ПричиныИзменения);
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииСервер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	КонтрагентОбработатьИзменение(Форма, Новый Массив);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыПлатежаВБюджет(Форма,, Истина);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, ПричиныИзменения)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("Контрагент");
	
	ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(
		ПараметрыОбъекта, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме,
		Форма.ВедетсяУчетРасчетовПоЗарплатеСводно);
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда)
		И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Если НЕ Форма.УчетЗарплатыИКадровВоВнешнейПрограмме ИЛИ
			Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И НЕ Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
			ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
			ПерезаполнитьВыплатуДепонентов(Форма, НовыеПараметры.ВыплатаДепонентов);
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетКонтрагента");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "Выдать, ПоДокументу");
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СчетКонтрагентаОбработатьИзменение(Форма, ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "Контрагент", ПричиныИзменения);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	
	ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма);
	
КонецПроцедуры

Процедура СчетКонтрагентаПриИзмененииСервер(Форма) Экспорт
	
	СчетКонтрагентаОбработатьИзменение(Форма, Новый Массив);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СчетКонтрагентаОбработатьИзменение(Форма, ПричиныИзменения)
	
	ПричиныИзменения.Добавить("СчетКонтрагента");
	
	ЗаполнитьСчетаУчета(Форма, "СчетКонтрагента", ПричиныИзменения);
	
КонецПроцедуры

Процедура СчетКассаПриИзмененииСервер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("СчетКасса");
	
	ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПриИзмененииСервер(Форма, ПараметрыОбъекта, НовыеПараметры);
		РасходныйКассовыйОрдерФормыКлиентСервер.УстановитьПараметрыВыбораВалютыДокумента(Форма);
		ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "СчетКасса", ПричиныИзменения);
	
КонецПроцедуры

Процедура СчетУчетаПриИзмененииСервер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Объект, РасходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
	
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПерезаполнитьВыплатуДепонентов(Форма, НевыплаченныеДепоненты)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ВыплатаДепонентов = Объект.ВыплатаДепонентов;
		Для каждого СтрокаТаблицы Из НевыплаченныеДепоненты Цикл
			НайденныеСтроки = ВыплатаДепонентов.НайтиСтроки(Новый Структура("Ведомость", СтрокаТаблицы.Ведомость));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате;
				КонецЦикла;
			Иначе
				НоваяСтрока = ВыплатаДепонентов.Добавить();
				НоваяСтрока.Ведомость = СтрокаТаблицы.Ведомость;
				НоваяСтрока.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Объект.ВыплатаДепонентов.Очистить();
		Объект.ВыплатаДепонентов.Загрузить(НевыплаченныеДепоненты);
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыВыплатаДепонентов(Форма, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменитьНастройкуПлатежаВБюджет(Форма)
	
	Объект = Форма.Объект;
	
	// Ничего не делаем, если на документ устанавливается.
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Проверку производим только:
	//  - для вида операции "Уплата налога";
	//  - Налог заполнен;
	//  - это не предопределенный налог "ПрочиеНалогиИСборы", по которому могут отражать множество "прочих" налогов (и поэтому нет смысла запоминать его настройки);
	//  - это уплата налога (взноса), т.к. все остальные виды платежа являются "единичными" и требуют ручной обработки.
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Налог)
		ИЛИ Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СубконтоДт1 <> Перечисления.ВидыПлатежейВГосБюджет.Налог
		ИЛИ НЕ ПлатежиВБюджетКлиентСервер.ЭтоКБКНалогиВзносы(Объект.КодБК) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Документы.РасходныйКассовыйОрдер.РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(
		Объект.Организация, Объект.Контрагент);
	
	РеквизитыОбъекта = ПлатежиВБюджетНастройки.РеквизитыПлатежногоДокумента();
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	РеквизитыОбъекта.КодТерритории = Объект.КодОКАТО;
	
	РеквизитыВБюджетПоУмолчанию = Документы.РасходныйКассовыйОрдер.РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(
		Объект.Дата, Объект.Организация, Объект.Налог, Объект.СубконтоДт1, РегистрацияВНалоговомОргане);
	
	НастройкиТребующиеИзменения = ПлатежиВБюджетНастройки.ПроверитьНастройкуПлатежаВБюджет(
		РеквизитыОбъекта, РеквизитыВБюджетПоУмолчанию, РегистрацияВНалоговомОргане);
	Если ПлатежиВБюджетНастройки.НастройкиИзменились(НастройкиТребующиеИзменения.ИзмененныеНастройки) Тогда
		ПлатежиВБюджетНастройки.СоздатьИзменитьНастройкуПлатежаВБюджет(
			РеквизитыОбъекта, НастройкиТребующиеИзменения, РеквизитыВБюджетПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме, ВедетсяУчетРасчетовПоЗарплатеСводно)
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда
		
		СвойстваСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент, "Наименование");
		
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу", СвойстваСклада.Наименование, "");
		
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.Контрагент,
			ПараметрыОбъекта.Дата,
			Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			
		ЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
			И ПараметрыОбъекта.ПлательщикЕНВД;
		
		НовыеПараметры.Вставить("СтавкаНДС", УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(
			ПараметрыОбъекта.Дата, ПараметрыОбъекта.ПлательщикНДС И Не ЕНВД));
				
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
		
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата, Ложь);
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
			ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
		
		Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
				ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
			НовыеПараметры.Вставить("СуммаДокумента", СуммаВыплаченнойЗарплатыРаботнику(
				ПараметрыОбъекта.Ссылка, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ПлатежнаяВедомость,
				УчетЗарплатыИКадровВоВнешнейПрограмме));
		ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			Если НЕ УчетЗарплатыИКадровВоВнешнейПрограмме ИЛИ
				УчетЗарплатыИКадровВоВнешнейПрограмме И НЕ ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
				СуммаДокумента    = 0;
				ВыплатаДепонентов = Новый ТаблицаЗначений;
				ЗаполнитьДепонированнымиСуммамиНаСервере(
					ПараметрыОбъекта, СуммаДокумента, ВыплатаДепонентов, УчетЗарплатыИКадровВоВнешнейПрограмме, ВедетсяУчетРасчетовПоЗарплатеСводно);
				НовыеПараметры.Вставить("СуммаДокумента",    СуммаДокумента);
				НовыеПараметры.Вставить("ВыплатаДепонентов", ВыплатаДепонентов);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		ИЛИ ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		
		ДанныеФизЛица  = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата, Ложь);
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
			ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		
		ПредпринимательФИО = Справочники.Организации.ФамилияИмяОтчествоПредпринимателя(ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
		НовыеПараметры = Новый Структура("Выдать, ПоДокументу", ПредпринимательФИО, "");
		
		НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);
		
	ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		
		Если ТипЗнч(ПараметрыОбъекта.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДанныеФизЛица  = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
				ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата, Ложь);
			НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
				ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
		Иначе
			НовыеПараметры = Новый Структура();
			СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент,
				"ЮридическоеФизическоеЛицо, ДокументУдостоверяющийЛичность, Наименование, НаименованиеПолное");
			НовыеПараметры.Вставить("ПоДокументу",
				?(СвойстваКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
					СвойстваКонтрагента.ДокументУдостоверяющийЛичность, ""));
			НовыеПараметры.Вставить("Выдать", ?(ПустаяСтрока(СвойстваКонтрагента.НаименованиеПолное),
				СвойстваКонтрагента.Наименование, СвойстваКонтрагента.НаименованиеПолное));
		КонецЕсли;
	ИначеЕсли РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации)  Тогда
		
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		СвойстваКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОбъекта.Контрагент,
			"ЮридическоеФизическоеЛицо, ДокументУдостоверяющийЛичность, Наименование, НаименованиеПолное");
		НовыеПараметры.Вставить("ПоДокументу",
			?(СвойстваКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
				СвойстваКонтрагента.ДокументУдостоверяющийЛичность, ""));
		НовыеПараметры.Вставить("Выдать", ?(ПустаяСтрока(СвойстваКонтрагента.НаименованиеПолное),
			СвойстваКонтрагента.Наименование, СвойстваКонтрагента.НаименованиеПолное));
			
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииСчетаКассы(ПараметрыОбъекта)
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОбъекта.СчетКасса).Валютный
		И РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(ПараметрыОбъекта.ВидОперации);
	
	Если НЕ ОплатаВВалюте Тогда
		ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииВалютыДокумента(ПараметрыОбъекта)
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		ОплатаВВалютеНов = ПараметрыОбъекта.ОплатаВВалюте;
	Иначе
		ОплатаВВалютеНов = ПараметрыОбъекта.ВалютаДокумента <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			ОплатаВВалютеТек = ПараметрыОбъекта.ОплатаВВалюте;
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеНов;
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалютеТек;
		Иначе
			НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		КонецЕсли;
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметрыПриИзмененииОплатаВВалюте(
		НовыеПараметры,
		ОплатаВВалютеНов,
		ПараметрыОбъекта);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыОбъекта.ВалютаДокумента, ПараметрыОбъекта.Дата);
	НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаДокумента);
	НовыеПараметры.Вставить("КурсДокумента",      СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента", СтруктураКурса.Кратность);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриВыбореВыдать(ПараметрыОбъекта) Экспорт
	
	ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.ВыдатьФизЛицо, ПараметрыОбъекта.Дата, Ложь);
	
	НовыеПараметры = Новый Структура("Выдать, ПоДокументу",
		ДанныеФизЛица.Представление, ДанныеФизЛица.ПредставлениеДокумента);
	
	Возврат НовыеПараметры;
	
КонецФункции

Процедура НовыеПараметрыПриИзмененииОплатаВВалюте(НовыеПараметры, ОплатаВВалюте, ПараметрыОбъекта) 
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
			И ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации,
				ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаДокумента,
				Истина);
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	НовыеПараметры.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
	НовыеПараметры.Вставить("ОплатаВВалюте",   ОплатаВВалюте);
	
КонецПроцедуры

Функция ДанныеВыбораНалогаПоКБК(КодБК) Экспорт
	
	Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

Функция СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор) Экспорт
	
	СвойстваПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств;
	Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма 
		ИЛИ ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита Тогда
		СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам = ПараметрыПлатежа.ВидПлатежаПоКредитамЗаймам;
	КонецЕсли;
	
	СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			СвойстваПлатежа.СтавкаНДС     = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(
				ПараметрыПлатежа.Дата, ПараметрыПлатежа.ДоговорКонтрагента);
		ИначеЕсли ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
			Если ПараметрыПлатежа.ПлательщикНДС Тогда
				СвойстваПлатежа.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(
					ПараметрыПлатежа.Дата, ПараметрыПлатежа.ДоговорКонтрагента);
			Иначе
				СвойстваПлатежа.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		СвойстваПлатежа.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ПараметрыПлатежа.Дата, ПараметрыПлатежа.ПлательщикНДС);
	КонецЕсли;
	
	Если ПараметрыПлатежа.БезЗакрывающихДокументов Тогда
		СвойстваПлатежа.ПорядокОтраженияДохода = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
			ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата);
	КонецЕсли;
		
	Возврат СвойстваПлатежа;
	
КонецФункции

Функция ПолучитьРегистрациюВНалоговомОргане(СтруктураДанныхОбъекта) Экспорт
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Если ЗначениеЗаполнено(СтруктураДанныхОбъекта.СчетУчетаРасчетовСКонтрагентом) И НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
			СтруктураДанныхОбъекта.СчетУчетаРасчетовСКонтрагентом, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
		
		Если НомерСубконто <> 0 Тогда
			РегистрацияВНалоговомОргане = СтруктураДанныхОбъекта["СубконтоДт" + НомерСубконто];
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

Процедура ЗаполнитьОтражениеСтрокиВУСННаСервере(СтрокаПлатеж, ПараметрыУСН) Экспорт
	
	НалоговыйУчетУСН.ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаПлатеж, ПараметрыУСН);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанных, НастройкаЗаполнения) Экспорт
	
	Если НастройкаЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
			НастройкаЗаполнения, ИсточникДанных.Период, ИсточникДанных.Организация);
		
		Если ЗначениеЗаполнено(НастройкаЗаполнения.РегистрацияВНалоговомОргане) Тогда
			ИсточникДанных.РегистрацияВНалоговомОргане = НастройкаЗаполнения.РегистрацияВНалоговомОргане;
		КонецЕсли;
	КонецЕсли;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
		РеквизитыОбъекта, ИсточникДанных, ДанныеЗаполнения);
	
КонецПроцедуры

Функция ОснованиеПриИзмененииПоказателяПериода(РеквизитыОбъекта) Экспорт
	
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		РеквизитыОбъекта.Налог,
		РеквизитыОбъекта.ВидНалоговогоОбязательства,
		РеквизитыОбъекта.Организация,
		РеквизитыОбъекта.Дата,
		ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(РеквизитыОбъекта.ПоказательПериода));
	
	Возврат НазначениеПлатежа;
	
КонецФункции

Функция ПроверкаРеквизитовПередЗаписьюНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Результат = Новый Структура;
	Результат.Вставить("ПредупредитьОбОшибках", Ложь);
	
	// Проверяем все, кроме УИН и выводим перечень ошибок
	Ошибки = Документы.РасходныйКассовыйОрдер.ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(Объект);
	
	Для каждого Ошибка Из Ошибки Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Описание, Объект.Ссылка);
		Результат.ПредупредитьОбОшибках = Истина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьИзменениеНалоговогоПериода(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(Форма.ВидНалога) Тогда
		ПериодичностьУплаты = УчетУСН.ПериодичностьНалоговогоПлатежа(Объект.НалоговыйПериод);
		Периодичность = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(ПериодичностьУплаты);
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(Форма.ВидНалога) Тогда
		ПериодичностьУплаты = УчетНДФЛПредпринимателя.ПериодичностьНалоговогоПлатежа(Объект.НалоговыйПериод);
		Периодичность = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(ПериодичностьУплаты);
	Иначе
		ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Объект.ПоказательПериода);
		Периодичность     = ПоказателиПериода.Периодичность;
	КонецЕсли;
	
	Объект.ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Объект.НалоговыйПериод, Периодичность);
	
	ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(Объект.КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(Объект.КодБК, Истина);
	Объект.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
		ШаблонКБК, Форма.ВидНалога, Объект.ВидНалоговогоОбязательства, Объект.Дата, Объект.НалоговыйПериод);
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	
	Объект.Основание = ОснованиеПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
	Если Элементы.Найти("НадписьРеквизитыПлатежейВБюджет") <> Неопределено Тогда
		Форма.НадписьРеквизитыПлатежейВБюджет = РасходныйКассовыйОрдерФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор Тогда
		
		СвойстваПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
		Если ПараметрыОбъекта.БезЗакрывающихДокументов Тогда
			СвойстваПлатежа.ПорядокОтраженияДохода = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
				ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
		КонецЕсли;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, Сделка, 
			|ПрименениеУСН, ПлательщикНДС, СтатьяДвиженияДенежныхСредств, ВидПлатежаПоКредитамЗаймам, БезЗакрывающихДокументов");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;	
		
КонецФункции

Процедура УстановитьОграничениеТипаКонтрагента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭлементКонтрагент = Элементы.Найти("Контрагент");
	Если ЭлементКонтрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметрыВыбора = Новый Массив;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		ЭлементКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ЭлементКонтрагент.ПодсказкаВвода  = НСтр("ru='Введите ИНН или наименование'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда") Тогда
		ЭлементКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		ЭлементКонтрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДивидендов") Тогда
		Если Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ЮридическоеФизическоеЛицо",
				ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
			МассивПараметрыВыбора.Добавить(НовыйПараметр);
			ЭлементКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
			ЭлементКонтрагент.ПодсказкаВвода  = НСтр("ru='Введите ИНН или наименование'");
		Иначе
			ЭлементКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
			ЭлементКонтрагент.ПодсказкаВвода  = "";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратРозничномуПокупателю") Тогда
		ЭлементКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		
		СписокСкладов = Новый Массив;
		СписокСкладов.Добавить(Перечисления.ТипыСкладов.ОптовыйСклад);
		СписокСкладов.Добавить(Перечисления.ТипыСкладов.РозничныйМагазин);
		
		МассивПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", Новый ФиксированныйМассив(СписокСкладов)));
		
		ЭлементКонтрагент.ПодсказкаВвода  = "";
	Иначе
		ЭлементКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		ЭлементКонтрагент.ПодсказкаВвода  = "";
	КонецЕсли;
	
	Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	ЭлементКонтрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	
КонецПроцедуры

Процедура ОпределитьЮрФизЛицо(Форма)
	
	Объект = Форма.Объект;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Форма.КонтрагентЮрФизЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДивидендов Тогда
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда
		Форма.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект.Контрагент))
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ЮридическоеФизическоеЛицо", Объект.Контрагент.Метаданные()) Тогда
		
		КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо");
	Иначе
		КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеДляАннулированияЧекаНПД(НомерЧекаНПД) Экспорт
	
	НомерЧекаНПДЗаполнен = ЗначениеЗаполнено(НомерЧекаНПД);
	Если Не НомерЧекаНПДЗаполнен Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
			НСтр("ru = 'Номер чека, по которому ранее регистрировался доход'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НомерЧекаНПД", "Объект");
	КонецЕсли;

	Возврат НомерЧекаНПДЗаполнен;
	
КонецФункции

Процедура УстановитьВидимостьКомандПечати(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ПодменюПечать = Элементы.Найти("ПодменюПечать");
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыПодключаемыхКоманд")
		Или ПодменюПечать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	
	// "Сбросим" изменения, чтобы штатно отработал метод БСП
	Если ТаблицаКоманд.Количество() > 1 Тогда
		ПодменюПечать.Вид = ВидГруппыФормы.Подменю;
	КонецЕсли;
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект);
	
	КоличествоДоступныхКоманд = 0;
	ПоследняяДоступнаяКоманда = Неопределено;
	
	Для Каждого ПодключаемаяКоманда Из ТаблицаКоманд Цикл
		
		Если ПодключаемаяКоманда.Вид <> "Печать" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПодключаемаяКоманда.Подменю) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элементы.Найти(ПодключаемаяКоманда.ИмяВФорме) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомандаДоступна = Элементы[ПодключаемаяКоманда.ИмяВФорме].Видимость И Элементы[ПодключаемаяКоманда.ИмяВФорме].Доступность;
		
		КоличествоДоступныхКоманд = КоличествоДоступныхКоманд + ?(КомандаДоступна, 1, 0);
		
		Если КомандаДоступна Тогда
			ПоследняяДоступнаяКоманда = ПодключаемаяКоманда;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоДоступныхКоманд = 0 Тогда
		
		ПодменюПечать.Видимость = Ложь;
		
	ИначеЕсли КоличествоДоступныхКоманд = 1 Тогда
		
		ПодменюПечать.Видимость = Истина;
		КомандаФормы = Форма.Команды[ПоследняяДоступнаяКоманда.ИмяВФорме];
		Если Не ЗначениеЗаполнено(КомандаФормы.Картинка) И ПодменюПечать.Вид = ВидГруппыФормы.Подменю Тогда
			КомандаФормы.Картинка = ПодменюПечать.Картинка;
		КонецЕсли;
		Если СтрДлина(КомандаФормы.Заголовок) <= 35 И ПодменюПечать.Отображение <> ОтображениеКнопки.Картинка Тогда
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Иначе
			КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
		КонецЕсли;
		КомандаФормы.Подсказка = КомандаФормы.Заголовок;
		ПодменюПечать.Вид = ВидГруппыФормы.ГруппаКнопок;
		
	Иначе
		
		ПодменюПечать.Видимость = Истина;
		ПодменюПечать.Вид = ВидГруппыФормы.Подменю;
		ПустаяКартинка = Новый Картинка;
		
		Для Каждого ПодключаемаяКоманда Из ТаблицаКоманд Цикл
			КомандаФормы = Форма.Команды.Найти(ПодключаемаяКоманда.ИмяВФорме);
			Если КомандаФормы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КомандаФормы.Картинка) И ПодменюПечать.Вид = ВидГруппыФормы.Подменю Тогда
				ПодменюПечать.Картинка = КомандаФормы.Картинка;
				КомандаФормы.Картинка = ПустаяКартинка;
			КонецЕсли;
			
			КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПлатежа

Процедура ИнициализироватьСвойстваПлатежаНаСервере(Форма, ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	РасшифровкаПлатежа = РасходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров    = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьДобавленнуюКолонкуОтражениеДоходаПредставление(Форма, РасшифровкаПлатежа);
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) И РасшифровкаПлатежа.Количество() = 1 Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, РасшифровкаПлатежа[0]);
	Иначе
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
			Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьРасшифровкуПлатежа(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ИнициализироватьСвойстваПлатежаНаСервере(Форма);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		
		РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		РасходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		Если НЕ РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.РасшифровкаПлатежа, "РасшифровкаПлатежа", Объект, Документы.РасходныйКассовыйОрдер);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда 
		ПлательщикНДС = Форма.ПлательщикНДС И НЕ(Форма.ПрименениеУСН ИЛИ Форма.ПрименяетсяОсобыйПорядокНалогообложения
			 ИЛИ НЕ Форма.УчетВПродажныхЦенах И Форма.РозничнаяТорговляОблагаетсяЕНВД);
			
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, ПлательщикНДС);
		
		РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		РасходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		
		Если НЕ РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			Элементы.РасшифровкаВыручки.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.РасшифровкаПлатежа, "РасшифровкаПлатежа", Объект, Документы.РасходныйКассовыйОрдер);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммыВзаиморасчетов(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
	ПлатежиВУсловныхЕдиницах = Объект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
	Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	КонецЦикла;

	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Форма, СтрокаПлатеж) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = РасходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Форма.ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = РасходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента",
		Объект,
		СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РасходныйКассовыйОрдер,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Изменения);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,    Изменения);
	
	Если Форма.ПрименениеУСН Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	РасходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если Не РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Если ЗначениеЗаполнено(Форма.РасшифровкаПлатежаДоговорКонтрагента) Тогда
			Форма.ЕстьРасчетыВУсловныхЕдиницах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Форма.РасшифровкаПлатежаДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
		Иначе
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	Иначе
		Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
	УправлениеФормой(Форма); // возможно нужно отобразить реквизиты курсов валюты
	
КонецПроцедуры

Процедура ЗаполнитьДобавленнуюКолонкуОтражениеДоходаПредставление(Форма, РасшифровкаПлатежа = Неопределено)
	
	Если Не Форма.ОтражениеДоходаВидимость Тогда
		Возврат;
	КонецЕсли;
	
	Если РасшифровкаПлатежа = Неопределено Тогда
		Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
			РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		Иначе
			РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		КонецЕсли;
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) 
		И РасшифровкаПлатежа.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ПорядокОтраженияДохода) Тогда
			СтрокаПлатеж.ОтражениеДоходаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
				СтрокаПлатеж.ПорядокОтраженияДохода,
				БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыплатыЗаработнойПлаты

Функция СуммаВыплаченнойЗарплатыРаботнику(Ссылка, ФизЛицо, ПлатежнаяВедомость, знач УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо);
		
		Если ТаблицаВедомостей.Количество() = 0 Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации") = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
				СтрокаУточнениеДохода = НСтр("ru = 'о выплате по договору подряда'");
			Иначе
				СтрокаУточнениеДохода = НСтр("ru = 'о заработной плате'");
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В выбранной ведомости отсутствуют сведения о %1 сотрудника!'"), СтрокаУточнениеДохода);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			ВедомостьОплачена = ТаблицаВедомостей.Количество() = 0;
			
			Если ВедомостьОплачена Тогда
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидОперации") = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
					СтрокаУточнениеДохода = НСтр("ru = 'сумма дохода по договору подряда'");
				Иначе
					СтрокаУточнениеДохода = НСтр("ru = 'заработная плата'");
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По текущей ведомости для выбранного сотрудника %1 выплачена ранее!'"), СтрокаУточнениеДохода);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			Иначе
				СтрокаВедомости = ТаблицаВедомостей[0];
				СуммаДокумента = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

Функция СуммаВыплаченнойЗарплатыПоВедомости(ПлатежнаяВедомость, Ссылка, НомерСтроки, УчетЗарплатыИКадровВоВнешнейПрограмме, ЭтоОднострочнаяФорма = Ложь) Экспорт
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости);
	
	ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать(, "Ведомость");
	ТаблицаДокументовОплаты.Свернуть("Ведомость",);
	
	ВедомостьОплачена = Ложь;
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		ВедомостьОплачена = Истина;
	КонецЕсли;
	
	Если ВедомостьОплачена Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ %1 полностью оплачен!'"), ПлатежнаяВедомость.Ссылка);
		
		Если ЭтоОднострочнаяФорма Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ВыплатаЗарплатыВедомость");
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка", "Корректность", НСтр("ru = 'Ведомость'"), НомерСтроки, НСтр("ru = 'Выплата заработной платы'"), ТекстСообщения);
			ШаблонПоля = "ВыплатаЗаработнойПлаты[%1].Ведомость";
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		КонецЕсли;
			
		СуммаДокумента = 0;
	Иначе
		СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ВыплатыДепонентов

Процедура ЗаполнитьДепонированнымиСуммамиНаСервере(Объект, СуммаДокумента, НевыплаченныеДепоненты, УчетЗарплатыИКадровВоВнешнейПрограмме, знач ВедетсяУчетРасчетовПоЗарплатеСводно)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан получатель!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Возврат;
	Иначе
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(Объект.Контрагент);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
			Объект.Ссылка, Объект.Организация, Объект.Дата, МассивФизическихЛиц);
		
		НевыплаченныеДепоненты.Колонки.Сумма.Имя = "СуммаКВыплате";
		СуммаДокумента = НевыплаченныеДепоненты.Итог("СуммаКВыплате");
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаНеВыплаченнойЗарплатыРаботнику(Ссылка, Организация, Дата, ФизЛицо, ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(ФизЛицо);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
			Ссылка, Организация, Дата, МассивФизическихЛиц);
		
		НевыплаченнаяВедомость = НевыплаченныеДепоненты.Найти(ПлатежнаяВедомость, "Ведомость");
		Если НевыплаченнаяВедомость = Неопределено Тогда
			СуммаДокумента = 0;
		Иначе
			СуммаДокумента = НевыплаченнаяВедомость.Сумма;
		КонецЕсли;
		
		Если СуммаДокумента = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о депонированной заработной плате сотрудника!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Ведомость");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеНалога

Процедура ВидаНалоговогоОбязательстваОбработатьИзменение(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(Объект.КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(Объект.КодБК, Истина);
	
	Объект.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
		ШаблонКБК, Форма.ВидНалога, Объект.ВидНалоговогоОбязательства, Объект.Дата, Объект.НалоговыйПериод);
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	
	Если Форма.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
		ПоказателиПериода = ПлатежиВБюджетПереопределяемый.ПоказателиНалоговогоПериода(
			РеквизитыОбъекта.Организация,
			Форма.ВидНалога,
			РеквизитыОбъекта.Дата,
			РеквизитыОбъекта.ВидНалоговогоОбязательства);
		
		Объект.ПоказательПериода = ПоказателиПериода.ПоказательПериода;
		Объект.НалоговыйПериод   = ПоказателиПериода.Период;
		Объект.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
			ШаблонКБК, Форма.ВидНалога, Объект.ВидНалоговогоОбязательства, Объект.Дата, Объект.НалоговыйПериод);
		
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	КонецЕсли;
	
	Объект.Основание = ОснованиеПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	
	Документы.РасходныйКассовыйОрдер.ВидНалоговогоОбязательстваПриИзменении(Объект);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма);
	Если Элементы.Найти("НадписьРеквизитыПлатежейВБюджет") <> Неопределено Тогда
		Форма.НадписьРеквизитыПлатежейВБюджет = РасходныйКассовыйОрдерФормыКлиентСервер.НадписьРеквизитыПлатежейВБюджет(Форма);
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

// Заполняет список выбора вида налогового обязательства
//
// Параметры:
//   ДобавитьТекущееЗначениеПриОтсутствии - Булево - Истина, если при отсутствии в списке текущего значения реквизита,
//     необходимо его добавить. Например, при создании формы или в случаях, когда пользователь явно указал
//     некорректный вид обязательства.
//
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, ДобавитьТекущееЗначениеПриОтсутствии = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(Объект.ВидНалоговогоОбязательства) = Неопределено Тогда
		Если ДобавитьТекущееЗначениеПриОтсутствии Тогда
			СписокВидовНалоговыхОбязательств.Добавить(Объект.ВидНалоговогоОбязательства);
		ИначеЕсли СписокВидовНалоговыхОбязательств.Количество() > 0 Тогда
			Объект.ВидНалоговогоОбязательства = СписокВидовНалоговыхОбязательств[0].Значение;
			ВидаНалоговогоОбязательстваОбработатьИзменение(Форма);
		КонецЕсли;
	КонецЕсли;
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПорядокОтраженияБУ = Элементы.Найти("ПорядокОтраженияБУ");
	Если ЭлементПорядокОтраженияБУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Представление порядка отражения в БУ
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить();
		СтруктураОтраженияБУ = Новый Структура;
		СтруктураОтраженияБУ.Вставить("Представление", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
		СтруктураОтраженияБУ.Вставить("Заполнен", Ложь);
		КоличествоСтрок = ТаблицаНалоговыйАгентНДС.Количество();
		Если КоличествоСтрок > 1 Тогда
			ШаблонПредставления = НСтр("ru='68.32, [ПервыйКонтрагент] и еще [КоличествоСтрок]'"); 
			Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПредставления,
				Новый Структура("ПервыйКонтрагент,КоличествоСтрок",
				ТаблицаНалоговыйАгентНДС[0].Контрагент,
				КоличествоСтрок - 1));
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Истина);
		ИначеЕсли КоличествоСтрок > 0 Тогда
			ШаблонПредставления = НСтр("ru='68.32, [ПервыйКонтрагент]'"); 
			Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПредставления,
				Новый Структура("ПервыйКонтрагент",
				ТаблицаНалоговыйАгентНДС[0].Контрагент));
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Истина);
		Иначе
			Представление = НСтр("ru='68.32, <...>'"); 
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Ложь);
		КонецЕсли;
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период", Объект.Дата);
		СтруктураПараметров.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
		Для НомерСубконто = 1 По 3 Цикл
			СтруктураПараметров.Вставить("Субконто" + НомерСубконто, Объект["СубконтоДт" + НомерСубконто]);
		КонецЦикла;
		СтруктураОтраженияБУ = ПлатежиВБюджетПереопределяемый.ПредставлениеПорядкаОтраженияБУ(СтруктураПараметров);
	КонецЕсли;
	
	Форма.ПорядокОтраженияБУ         = СтруктураОтраженияБУ.Представление;
	Форма.ПорядокОтраженияБУЗаполнен = СтруктураОтраженияБУ.Заполнен;
	
	ЭлементПорядокОтраженияБУ.ПропускатьПриВводе = СтруктураОтраженияБУ.Заполнен;
	
КонецПроцедуры

Процедура НалогПриИзмененииНаСервере(Форма, ПричиныИзменения, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Не Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Объект.Налог, Объект.Дата) Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
		АктуализированыРеквизитыПлатежаВБюджет = Истина;
	КонецЕсли;
	
	НалогОбработатьИзменение(Форма,ПричиныИзменения, АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	СчетУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "СчетУчета");
	Если СчетУчета <> ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		Объект.НалоговыйАгентНДС.Очистить();
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Объект.ВидНалоговогоОбязательства = Документы.РасходныйКассовыйОрдер.ВидНалоговогоОбязательстваПоАналитикеПлатежа(Объект);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, Истина);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Функция ВидимостьНалоговогоПериода(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.ПериодУплатыНалогаВыбираетПользователь(
		Форма.ВидНалога,
		Форма.ПрименениеУСНДоходы,
		Форма.ИспользоватьНачислениеЗарплаты);
	
КонецФункции

#КонецОбласти

#Область УСН

Процедура ЗаполнитьОтражениеВУСННаСервере(Форма, ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
	
	Если ЗаполнитьСуммы Тогда
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭлементамиОтраженияВУСНСервер(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// ТЧ "Расшифровка платежа"
	ПрименениеУСНДоходыРасходы = Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы;
	
	ЭлементРасшифровкаПлатежаРасходыУСН = Элементы.Найти("РасшифровкаПлатежаРасходыУСН");
	Если ЭлементРасшифровкаПлатежаРасходыУСН <> Неопределено Тогда
		ВидимостьРасходыУСН = ПрименениеУСНДоходыРасходы И УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации);
		ВидимостьРаспределятьРасходы = ВидимостьРасходыУСН И Форма.ПлательщикЕНВД;
		
		ЭлементРасшифровкаПлатежаРасходыУСН.Видимость = ВидимостьРасходыУСН;
		Элементы.РасшифровкаПлатежаРаспределятьРасходыУСН.Видимость = ВидимостьРаспределятьРасходы;
		
		Если ПрименениеУСНДоходыРасходы Тогда
			УстановитьЗаголовкиКолонокУСН(Форма);
		КонецЕсли;
		
		Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Страница "Прочее"
	ЭлементГруппаОтражениеВУСН = Элементы.Найти("ГруппаОтражениеВУСН");
	Если ЭлементГруппаОтражениеВУСН <> Неопределено Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
			Элементы.ГруппаОтражениеВУСН.Видимость   = Ложь;
			Элементы.НДСУСН.Видимость                = Ложь;
			Элементы.РаспределятьРасходУСН.Видимость = Ложь;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			Элементы.ГруппаОтражениеВУСН.Видимость   = ПрименениеУСНДоходыРасходы;
			Элементы.НДСУСН.Видимость                = Ложь;
			Элементы.РаспределятьРасходУСН.Видимость = Ложь;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда Тогда
			Элементы.ГруппаОтражениеВУСН.Видимость   = ПрименениеУСНДоходыРасходы И НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
			Элементы.НДСУСН.Видимость                = Ложь;
			Элементы.РаспределятьРасходУСН.Видимость = Ложь;
		Иначе
			// ПрочийРасход
			Элементы.ГруппаОтражениеВУСН.Видимость   = ПрименениеУСНДоходыРасходы;
			Элементы.НДСУСН.Видимость                = ПрименениеУСНДоходыРасходы;
			Элементы.РаспределятьРасходУСН.Видимость = Форма.ПлательщикЕНВД И ПрименениеУСНДоходыРасходы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокУСН(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НЕ Форма.ПрименениеУСН И НЕ УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРасходыУСН = НСтр("ru = 'Расходы УСН'");
	Если Форма.ОплатаВВалюте Тогда
		ЗаголовокРасходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расходы УСН, %1'"), Форма.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаРасходыУСН.Заголовок = ЗаголовокРасходыУСН;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

Процедура ОбновитьУсловноеОформление(Форма)
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПроинициализировано")
		И РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		
		УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма);
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ВыплатаЗаработнойПлатыПроинициализировано")
		И Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		УстановитьУсловноеОформлениеВыплатаЗаработнойПлаты(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.НастройкиУсловногоОформления = Новый Структура();
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	ФормаДокументаОднострочная = РасходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость(Форма, ФормаДокументаОднострочная);
	
	Если ФормаДокументаОднострочная Тогда
		Возврат;
	КонецЕсли;
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(Форма);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеШапкаИВидимость(Форма, ФормаДокументаОднострочная)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НачалоПутиКДаннымТЧ = "Объект.";
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	КонецЕсли;
	
	// ПорядокОтраженияБУ
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокОтраженияБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокОтраженияБУЗаполнен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	Если ФормаДокументаОднострочная Тогда
		Возврат;
	КонецЕсли;
	
	// Реквизиты не используются при расчетах по кредитам и займам.
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ВозвратЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ВозвратКредита);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при возврате займа.
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ВозвратЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийРКО.ВозвратКредита);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Контрагент
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы, "ВидОперации", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора,
			НачалоПутиКДаннымТЧ + "ВидОперации",
			ВидСравненияКомпоновкиДанных.Равно,
			Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя);
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора,
			НачалоПутиКДаннымТЧ + "ВидОперации",
			ВидСравненияКомпоновкиДанных.Равно,
			Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	БанкИКассаФормы.УстановитьУсловноеОформлениеБезЗакрывающихДокументов(Форма, НачалоПутиКДаннымТЧ);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НачалоПутиКДаннымТЧ = "Объект.";
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	КонецЕсли;
	
	Форма.НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПроинициализировано", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ГруппаОтбора1.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		НачалоПутиКДаннымТЧ + "ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора2,
		НачалоПутиКДаннымТЧ + "ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.Автоматически);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.Сделка",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<документ>'"));
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<способ погашения>'"));
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ +"РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаРасходыУСН
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСНДоходы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.РасходыУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не принимаются>'"));
	
	// РасшифровкаПлатежаРаспределятьРасходыУСН
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРаспределятьРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.РасходыУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// РасшифровкаПлатежаСчетНаОплату
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеВыплатаЗаработнойПлаты(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НачалоПутиКДаннымТЧ = "Объект.";
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	КонецЕсли;
	
	Форма.НастройкиУсловногоОформления.Вставить("ВыплатаЗаработнойПлатыПроинициализировано", Истина);
	
	// ВедомостьЗарплатаРаботнику
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВедомостьЗарплатаРаботнику");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПроверятьСоответствиеСуммыДокументаИВедомости",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ВыплатаЗаработнойПлаты
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВыплатаЗаработнойПлаты");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПроверятьСоответствиеСуммыДокументаИВедомости",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// СчетУчетаЗадержкаЗарплаты
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаЗадержкаЗарплаты");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

Процедура ИзменитьУсловияФормированияСпискаВыбораДоговораСКонтрагентом(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВыбраннойНастройкеПлатежаВБюджет(Форма, Знач НастройкаЗаполнения) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
		ВидОперацииПриИзмененииСервер(Форма);
	КонецЕсли;
	
	Объект.Налог = НастройкаЗаполнения.ВидПлатежа;
	Форма.ВидНалога    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	Если ЗначениеЗаполнено(НастройкаЗаполнения.Организация) Тогда
		Объект.Организация = НастройкаЗаполнения.Организация;
	КонецЕсли;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Налог");
	ЗаполнитьСчетаУчета(Форма, "Налог", ПричиныИзменения);
	
	РасходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыПлатежаВБюджет(Форма, НастройкаЗаполнения);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПерезаполнитьСтатьюДДС(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если РасходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОперации = Объект.ВидОперации;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога
		И УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалога(Объект.ВидНалоговогоОбязательства) Тогда
		Форма.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		Если УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалогаНаПрибыль(Форма.ВидНалога) Тогда
			КонтекстОперации = "НалогНаПрибыль";
		КонецЕсли;
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		Объект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

Процедура УстановитьВидимостьСчетовУчета(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("СчетКасса");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("СчетУчета");
	ЭлементыСчетов.Добавить("ГруппаОтражениеВБУ");
	ЭлементыСчетов.Добавить("ДекорацияПорядокОтраженияБУ");
	ЭлементыСчетов.Добавить("ПорядокОтраженияБУ");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	// Вне зависимости от настроек пользователя для отдельных видов операций некоторые счета видны всегда,
	// кроме интерфейса Интеграция с банком
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		ЭлементСчетУчета = Элементы.Найти("СчетУчета");
		Если ЭлементСчетУчета <> Неопределено Тогда
			ЭлементСчетУчета.Видимость = Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
		КонецЕсли;
		ЭлементГруппаОтражениеВБУ = Элементы.Найти("ГруппаОтражениеВБУ");
		Если ЭлементГруппаОтражениеВБУ <> Неопределено Тогда
			ЭлементГруппаОтражениеВБУ.Видимость = Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
		ЭлементРасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом = Элементы.Найти("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
		Если ЭлементРасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом <> Неопределено Тогда
			ЭлементРасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ЭлементСчетБанк = Элементы.Найти("СчетБанк");
		Если ЭлементСчетБанк <> Неопределено Тогда
			ЭлементСчетБанк.Видимость = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета()
				И НЕ УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчета(Форма, ПричинаИзменения, ПричиныИзменения)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = РасходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетКасса") <> Неопределено Тогда
			// Если видны счета, то при изменении счета может быть изменена валюта.
			// А изменение валюты в общем случае приводит к установке счета кассы.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
		КонецЕсли;
		
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			
			// В этом режиме только автоматическое изменение валюты (запрет оформления в иностранной валюте)
			// должен приводить к смене счета.
			
			Если РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
				ПараметрыЗаполнения.КЗаполнению.Удалить("СчетКасса");
			КонецЕсли;
			
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОплаченныеСчета(Форма)
	
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

Функция ПоместитьРасшифровкуНалоговыйАгентНДСВХранилище(Объект) Экспорт
	
	ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить();
	АдресТаблицыНалоговыйАгентНДСВХранилище = ПоместитьВоВременноеХранилище(
		ТаблицаНалоговыйАгентНДС, Новый УникальныйИдентификатор());
	
	Возврат АдресТаблицыНалоговыйАгентНДСВХранилище;
	
КонецФункции

#КонецОбласти
