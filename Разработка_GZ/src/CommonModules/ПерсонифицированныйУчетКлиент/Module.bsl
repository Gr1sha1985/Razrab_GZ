
#Область ПрограммныйИнтерфейс

// Процедура переопределяет создание формы РСВ-1 из списка регламентированных отчетов.
//
// Параметры:
//  ОписаниеРСВ_1 - структура с полями:
//    * Организация             - СправочникСсылка.Организации;
//    * ДатаНачалаПериодаОтчета - дата;
//    * ДатаКонцаПериодаОтчета  - дата;
//    * КорректирующаяФорма     - булево;
//  СтандартнаяОбработка - булево.
//
Процедура ПриСозданииРСВ_1ИзСпискаРеглОтчетов(ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	ОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ПолучитьНачалоОтчетногоПериода(ОписаниеРСВ_1.ДатаКонцаПериодаОтчета);
	
	Если ОтчетныйПериод >= '20140101' Тогда
		СтандартнаяОбработка = Ложь;
		
		СоздатьКомплектКвартальнойОтчетностиВФорме(
			ОписаниеРСВ_1.Организация,
			ОтчетныйПериод,
			ОписаниеРСВ_1.КорректирующаяФорма);
	КонецЕсли;			
		
КонецПроцедуры

// Процедура переопределяет открытие формы РСВ-1 из объектов БРО.
//
// Параметры:
//  Ссылка               - ДокументСсылка.РегламентированныйОтчет;
//  ОписаниеРСВ_1 - структура с полями:
//    * Организация             - СправочникСсылка.Организации;
//    * ДатаНачалаПериодаОтчета - дата;
//    * ДатаКонцаПериодаОтчета  - дата;
//    * КорректирующаяФорма     - булево;
//  СтандартнаяОбработка - булево.
//
Процедура ПриОткрытииРСВ_1ИзСпискаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	ОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ПолучитьНачалоОтчетногоПериода(ОписаниеРСВ_1.ДатаНачалаПериодаОтчета);
	
	Если ОтчетныйПериод >= '20140101' Тогда
		Комплект = ПерсонифицированныйУчетВызовСервера.КомплектСодержащийРСВ_1(Ссылка);
		
		Если ЗначениеЗаполнено(Комплект) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьКомплектКвартальнойОтчетности(Комплект);
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

// Процедура переопределяет поведение при печати формы РСВ-1
// из объектов БРО.
//
// Параметры:
//  Ссылка               - ДокументСсылка.РегламентированныйОтчет;
//    ОписаниеРСВ_1 - структура с полями:
//    * Организация             - СправочникСсылка.Организации;
//    * ДатаНачалаПериодаОтчета - дата;
//    * ДатаКонцаПериодаОтчета  - дата;
//    * КорректирующаяФорма     - булево;
//  СтандартнаяОбработка - булево.
//
Процедура ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Истина;
КонецПроцедуры

// Процедура переопределяет поведение при выгрузке формы РСВ-1
// из объектов БРО.
//
// Параметры:
//  Ссылка               - ДокументСсылка.РегламентированныйОтчет;
//  ОписаниеРСВ_1 - структура с полями:
//    * Организация             - СправочникСсылка.Организации;
//    * ДатаНачалаПериодаОтчета - дата;
//    * ДатаКонцаПериодаОтчета  - дата;
//    * КорректирующаяФорма     - булево;
//  СтандартнаяОбработка - булево.
//
Процедура ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	ТекстПредупреждения = НСтр("ru = 'Для выгрузки, необходимо открыть форму РСВ-1.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
КонецПроцедуры

// Процедура переопределяет поведение при проверке выгрузки формы РСВ-1
// из объектов БРО.
//
// Параметры:
//  Ссылка               - ДокументСсылка.РегламентированныйОтчет;
//  ОписаниеРСВ_1 - структура с полями:
//    * Организация             - СправочникСсылка.Организации;
//    * ДатаНачалаПериодаОтчета - дата;
//    * ДатаКонцаПериодаОтчета  - дата;
//    * КорректирующаяФорма     - булево;
//  СтандартнаяОбработка - булево.
//
Процедура ПриПроверкеВыгрузкиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	
	ТекстПредупреждения = НСтр("ru = 'Для проверки, необходимо открыть форму РСВ-1.'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Печать).
//	 
Процедура ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Печать возможна только из формы комплекта отчетности.'"));
	КонецЕсли;	
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить).
//	 
Процедура ВыгрузитьДокументОтчетности(Ссылка, УникальныйИдентификаторФормы) Экспорт
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Выгрузка возможна только из формы комплекта отчетности.'"));
		Возврат;
	КонецЕсли;
	
	ТипыДокументовПерсУчета = ПерсонифицированныйУчетКлиентСервер.ТипыОтправляемыхДокументовПерсУчета();
	
	Если ТипыДокументовПерсУчета.Найти(ТипЗнч(Ссылка)) <> Неопределено Тогда
		ДанныеФайла = ЗарплатаКадрыВызовСервера.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификаторФормы);
		РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	КонецЕсли;	
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект).
//	 
Процедура СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка) Экспорт
	ТипыДокументовПерсУчета = ПерсонифицированныйУчетКлиентСервер.ТипыОтправляемыхДокументовПерсУчета();
	
	Если ТипыДокументовПерсУчета.Найти(ТипЗнч(Тип)) <> Неопределено Тогда
		СтандартнаяОбработка = Истина;	
	КонецЕсли;		
КонецПроцедуры	

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// См. ЗарплатаКадрыКлиент.НастройкиТипа.
Процедура ПриОпределенииНастроекТипа(Тип, НастройкиТипа) Экспорт
	
	Если Тип = Тип("ДокументСсылка.ВедомостьУплатыАДВ_11")
		Или Тип = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР")
		Или Тип = Тип("ДокументСсылка.ОписьОДВ_1")
		Или Тип = Тип("ДокументСсылка.ОписьПачекСЗВ_6")
		Или Тип = Тип("ДокументСсылка.ПачкаДокументовАДВ_1")
		Или Тип = Тип("ДокументСсылка.ПачкаДокументовАДВ_2")
		Или Тип = Тип("ДокументСсылка.ПачкаДокументовАДВ_3")
		Или Тип = Тип("ДокументСсылка.ПачкаДокументовДСВ_1")
		Или Тип = Тип("ДокументСсылка.ПачкаДокументовСЗВ_К")
		Или Тип = Тип("ДокументСсылка.ПачкаДокументовСПВ_1")
		Или Тип = Тип("ДокументСсылка.ПачкаДокументовСПВ_2")
		Или Тип = Тип("ДокументСсылка.РеестрДСВ_3")
		Или Тип = Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ")
		Или Тип = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М")
		Или Тип = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ")
		Или Тип = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета") Тогда
		
		НастройкиТипа.ПоказыватьКомандыРаботыСФайлами = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак необходимости записи BOM
// См. ЗарплатаКадрыКлиент.РаботаСФайламиЗаписатьТекст.
// Параметры:
//   ДанныеФайла - 
//   ЗаписатьBOM - Булево
//
Процедура ПриОпределенииПараметровРедактированияПрисоединенныхФайлов(ДанныеФайла, ЗаписатьBOM) Экспорт
	
	Если НРег(ДанныеФайла.Расширение) = "xml" И СтрНачинаетсяС(ДанныеФайла.Наименование, "ПФР_") Тогда
		Если ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР")
			Или ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.ОписьОДВ_1")
			Или ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ")
			Или ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М")
			Или ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ")
			Или ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД") Тогда
			ЗаписатьBOM = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СоздатьКомплектКвартальнойОтчетностиВФорме(Организация, ОтчетныйПериод, КорректирующаяФорма = Ложь, СпециальныйДокумент2015 = Ложь) Экспорт
	ОписаниеКомплекта = ПерсонифицированныйУчетВызовСервера.ОписаниеАктивногоКомплектаПериода(Организация, ОтчетныйПериод);
	
	Если Не КорректирующаяФорма
		И ОписаниеКомплекта <> Неопределено
		И ОписаниеКомплекта.СостояниеКомплекта <> ПредопределенноеЗначение("Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться") Тогда
		
		Отказ = Истина;		
		
		Если ОписаниеКомплекта.СостояниеКомплекта = ПредопределенноеЗначение("Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены")
			И Не КорректирующаяФорма Тогда
			ТекстПредупреждения = НСтр("ru = 'В текущем отчетном периоде уже был сформирован комплект.
                                    |Вы можете продолжить его редактирование, установив состояние ""Сведения сформированы""'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'В текущем отчетном периоде уже был сформирован комплект.
                                        |Вы можете продолжить его редактирование'");
		КонецЕсли;	
		
		ВызватьИсключение ТекстПредупреждения;
									
	КонецЕсли;	

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ПараметрыОткрытия.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	ПараметрыОткрытия.Вставить("ФормироватьКомплектПриОткрытии", Истина);
	ПараметрыОткрытия.Вставить("ФормироватьКорректирующуюФорму", КорректирующаяФорма);
	ПараметрыОткрытия.Вставить("СпециальныйДокумент2015", СпециальныйДокумент2015);
	
	ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.Форма", ПараметрыОткрытия);
КонецПроцедуры	

Процедура ОткрытьКомплектКвартальнойОтчетности(СсылкаНаКомплект) Экспорт	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Комплект", СсылкаНаКомплект);
	ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.Форма", ПараметрыОткрытия);
КонецПроцедуры	

// Для старых форм отчетности.
Процедура ОтчетныйПериодРегулирование(ОтчетныйПериод, ПредставлениеОтчетногоПериода, Направление, МинимальныйПериод = '00010101', МаксимальныйПериод = '00010101', Отказ = Ложь) Экспорт 
	
	Если ЗначениеЗаполнено(МинимальныйПериод) 
		И ОтчетныйПериод = МинимальныйПериод
		И Направление = -1 Тогда
		
		ТекстПредупрежденияШаблон = НСтр("ru = 'Период не может быть меньше чем %1'");
		ПериодПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(МинимальныйПериод);
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияШаблон, ПериодПредставление);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли  ЗначениеЗаполнено(МаксимальныйПериод) 
		И ОтчетныйПериод = МаксимальныйПериод
		И Направление = 1 Тогда
		
		ТекстПредупрежденияШаблон = НСтр("ru = 'Период не может быть больше чем %1'");
		ПериодПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(МаксимальныйПериод);
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияШаблон, ПериодПредставление);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;	
	
	Если Не (ОтчетныйПериод = '19960101' И Направление = -1) Тогда
		
		Если ОтчетныйПериод > '20170101' Или (ОтчетныйПериод = '20170101' И Направление = 1) Тогда  
			Шаг = 12;
		ИначеЕсли ОтчетныйПериод > '20110101' Или (ОтчетныйПериод = '20110101' И Направление = 1) Тогда 
			Шаг = 3;
		ИначеЕсли ОтчетныйПериод > '20100101' Или (ОтчетныйПериод = '20100101' И Направление = 1) Тогда
			Шаг = 6;
		ИначеЕсли ОтчетныйПериод > '20020101' Или (ОтчетныйПериод = '20020101' И Направление = 1) Тогда 
			Шаг = 12;
		ИначеЕсли ОтчетныйПериод > '20010101' Или (ОтчетныйПериод = '20010101' И Направление = 1) Тогда 
			Шаг = 3;
		ИначеЕсли ОтчетныйПериод > '19970101' Или (ОтчетныйПериод = '19970101' И Направление = 1) Тогда 
			Шаг = 6;
		ИначеЕсли ОтчетныйПериод > '19961001' Или (ОтчетныйПериод = '19961001' И Направление = 1) Тогда 
			Шаг = 3;
		Иначе 
			Шаг = 9;
		КонецЕсли;	
		
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * Шаг);
		ПредставлениеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(ОтчетныйПериод);
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОтчетныйПериодНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, МинимальныйПериод = '00010101', МаксимальныйПериод = '00010101', ОповещениеЗавершения = Неопределено) Экспорт

	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("МинимальныйПериод", МинимальныйПериод);
	ДополнительныеПараметры.Вставить("МаксимальныйПериод", МаксимальныйПериод);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ОтчетныйПериодНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, , Истина), Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОтчетныйПериодНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	МинимальныйПериод = ДополнительныеПараметры.МинимальныйПериод;
	МаксимальныйПериод = ДополнительныеПараметры.МаксимальныйПериод;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(МинимальныйПериод)
		И ВыбранноеЗначение < МинимальныйПериод Тогда
		
		ТекстПредупрежденияШаблон = НСтр("ru = 'Период не может быть меньше чем %1'");
		ПериодПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(МинимальныйПериод);
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияШаблон, ПериодПредставление);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(МаксимальныйПериод)
		И ВыбранноеЗначение > МаксимальныйПериод Тогда
		
		ТекстПредупрежденияШаблон = НСтр("ru = 'Период не может быть больше чем %1'");
		ПериодПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(МаксимальныйПериод);
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияШаблон, ПериодПредставление);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	Иначе
		Значение = ВыбранноеЗначение;	
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	Представление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
	Форма.Модифицированность = Истина;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПараметрыСтажаДляОткрытияФормыРедактированияЗаписиСтажа() Экспорт 
	ДанныеСтажа = Новый Структура();
			
	ДанныеСтажа.Вставить("ИндексСтроки");
	ДанныеСтажа.Вставить("НоваяСтрока", Ложь);
	ДанныеСтажа.Вставить("Организация");
	ДанныеСтажа.Вставить("ПериодСтрока");
	ДанныеСтажа.Вставить("КатегорияЗастрахованныхЛиц");
	ДанныеСтажа.Вставить("ТипДоговора");	
	ДанныеСтажа.Вставить("Сотрудник");
	ДанныеСтажа.Вставить("НомерОсновнойЗаписи");
	ДанныеСтажа.Вставить("НомерДополнительнойЗаписи");
	ДанныеСтажа.Вставить("ДатаНачалаПериода");
	ДанныеСтажа.Вставить("ДатаОкончанияПериода");
	ДанныеСтажа.Вставить("ОсобыеУсловияТруда");
	ДанныеСтажа.Вставить("КодПозицииСписка");
	ДанныеСтажа.Вставить("ОснованиеИсчисляемогоСтажа");
	ДанныеСтажа.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	ДанныеСтажа.Вставить("ВторойПараметрИсчисляемогоСтажа");
	ДанныеСтажа.Вставить("ТретийПараметрИсчисляемогоСтажа");
	ДанныеСтажа.Вставить("ОснованиеВыслугиЛет");
	ДанныеСтажа.Вставить("ПервыйПараметрВыслугиЛет");
	ДанныеСтажа.Вставить("ВторойПараметрВыслугиЛет");
	ДанныеСтажа.Вставить("ТретийПараметрВыслугиЛет");
	ДанныеСтажа.Вставить("ТерриториальныеУсловия");
	ДанныеСтажа.Вставить("ПараметрТерриториальныхУсловий");
	ДанныеСтажа.Вставить("ИдентификаторСтрокиСтажа");
	ДанныеСтажа.Вставить("ФиксСтаж");
	ДанныеСтажа.Вставить("ЗначенияРеквизитовХраненияОшибок");
	
	Возврат ДанныеСтажа;
КонецФункции	

Процедура ОткрытьФормуВводаЗаписейОСтаже(ДанныеСтажа, ТолькоПросмотр, Владелец, ОтображатьОшибки = Ложь, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь) Экспорт
	ПараметрыОткрытия = Новый Структура("ДанныеСтажа, ТолькоПросмотр", ДанныеСтажа, ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ОтображатьОшибки", ОтображатьОшибки);
	ПараметрыОткрытия.Вставить("ИспользоватьНовыйКлассификаторПараметровСтажа", ИспользоватьНовыйКлассификаторПараметровСтажа);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеЛьготногоСтажаПФР", ПараметрыОткрытия, Владелец);
	
КонецПроцедуры	

Процедура ОткрытьРабочееМестоКвартальнойОтчетности(Организация, ОтчетныйПериод, Комплект) Экспорт
	Параметры = Новый Структура("Организация, ОтчетныйПериод, Комплект", Организация, ОтчетныйПериод, Комплект);
	
	ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.Форма", Параметры);
КонецПроцедуры	

Процедура ПерейтиВРабочееМестоПодготовкиКвартальнойОтчетностиПФР(Организация, ОтчетныйПериод) Экспорт
	ПараметрыОткрытияРабочегоМеста = Новый Структура("Организация, ОтчетныйПериод", Организация, ОтчетныйПериод);
	
	ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма", ПараметрыОткрытияРабочегоМеста);
КонецПроцедуры

Процедура ПодборОснованияДосрочногоНазначенияПенсии(Текст, ДанныеВыбора, СтандартнаяОбработка, ОтчетныйПериод) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = ПерсонифицированныйУчетВызовСервера.ДанныеАвтоподбораОснованияДосрочногоНазначенияПенсии(Текст, ОтчетныйПериод);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПериодОтчетаРегулирование(Начало, Окончание, Представление, Направление, НачалоМин = '00010101', ОкончаниеМин = '00010101', НачалоМакс = '00010101', ОкончаниеМакс = '00010101') Экспорт 
	
	ОтчетныеПериоды = ПерсонифицированныйУчетКлиентСервер.ОтчетныеПериодыДо2017Года();
	
	МинимальныйПериод = ОтчетныеПериоды[0];
	Если Начало = МинимальныйПериод.Начало И Окончание = МинимальныйПериод.Окончание И Направление = -1 Тогда
		ТекстПредупрежденияШаблон = НСтр("ru = 'Период не может быть меньше чем %1'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияШаблон, Представление);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Начало = НачалоМин И Окончание = ОкончаниеМин И Направление = -1 Тогда
		ТекстПредупрежденияШаблон = НСтр("ru = 'Период не может быть меньше чем %1'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияШаблон, Представление);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Начало = НачалоМакс И Окончание = ОкончаниеМакс И Направление = 1 Тогда
		ТекстПредупрежденияШаблон = НСтр("ru = 'Период не может быть больше чем %1'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияШаблон, Представление);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Начало > '20170101' Или (Начало = '20170101' И Направление = 1) Тогда  
		Начало = ДобавитьМесяц(Начало, Направление * 12);
		Окончание = Дата(Год(Начало), 12, 31);
		ОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ДанныеОтчетногоПериода(Начало, Окончание);
		Представление = ОтчетныйПериод.Представление;
	ИначеЕсли Начало = '20170101' И Направление = -1 Тогда
		ОтчетныйПериод = ОтчетныеПериоды[ОтчетныеПериоды.Количество()-1];
		Начало = ОтчетныйПериод.Начало;
		Окончание = ОтчетныйПериод.Окончание;
		Представление = ОтчетныйПериод.Представление;
	Иначе
		Индекс = 0;
		Для Каждого ОтчетныйПериод Из ОтчетныеПериоды Цикл 
			Если ОтчетныйПериод.Начало = Начало И ОтчетныйПериод.Окончание = Окончание Тогда
				Прервать;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		Если Индекс = ОтчетныеПериоды.Количество() - 1 И Направление = 1 Тогда
			Начало = '20170101';
			Окончание = Дата(Год(Начало), 12, 31);
			ОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ДанныеОтчетногоПериода(Начало, Окончание);
			Представление = ОтчетныйПериод.Представление;
		Иначе
			ОтчетныйПериод = ОтчетныеПериоды[Индекс + Направление];
			Начало = ОтчетныйПериод.Начало;
			Окончание = ОтчетныйПериод.Окончание;
			Представление = ОтчетныйПериод.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

#Область ДокументыКвартальнойОтчетности

Процедура ДокументыКвартальнойОтчетностиПослеЗаписи(Форма) Экспорт
	Объект = Форма.Объект;
	
	ПараметрыОповещения = Новый Структура("Ссылка, Организация, ОтчетныйПериод", Объект.Ссылка, Объект.Организация, Объект.ОтчетныйПериод);
	
	Оповестить("ЗаписьДокументовКвартальнойОтчетности", ПараметрыОповещения);
	
КонецПроцедуры	

#КонецОбласти

#Область АДВ2_3

Процедура ДокументыАДВОтобразитьДанныеФизическогоЛица(Форма) Экспорт
	Перем ПризнакИзмененияПутьКДанным;
	
	СтруктураСоответствияПолейСПризнаком = Форма.ПолучитьСоответствиеДанныхФормыПолямТабличнойЧасти("ИзменившиесяДанныеСПризнаком");
    СтруктураСоответствияИзменившихсяДанныхДаннымФизЛица = Форма.ПолучитьСоответствиеИзменившихсяДанныхДаннымФизЛица(); 
	СтруктураСоответствияДанныхФормыПризнакамИзменения  = Форма.ПолучитьСоответствиеДанныхФормыПризнакамИзменения();
	ДанныеТекущейСтроки = Форма.Элементы.Сотрудники.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ДанныеТекущейСтроки.ВидДокумента) Тогда
			Форма.ДокументПредставление = НСтр("ru = '<Не заполнено>'");
		Иначе
			Форма.ДокументПредставление = ВРег(ПерсонифицированныйУчетКлиентСервер.ПолучитьПредставлениеДокументаУдостоверяющегоЛичность(ДанныеТекущейСтроки));
		КонецЕсли;
		Форма.УдостоверениеЛичностиПризнакИзменения = Истина;
		Если Не ЗначениеЗаполнено(СтрЗаменить(ДанныеТекущейСтроки.СтраховойНомерПФРВСвидетельстве, "-", "")) Тогда
			Форма.ДанныеСвидетельстваСтраховойНомер = НСтр("ru = '<Не заполнено>'");
		Иначе
			Форма.ДанныеСвидетельстваСтраховойНомер = ВРег(ДанныеТекущейСтроки.СтраховойНомерПФРВСвидетельстве); 
		КонецЕсли;
		
		Для Каждого КлючЗначение Из СтруктураСоответствияПолейСПризнаком Цикл
			ЗначениеДанныхСтрокиИзменившиесяДанные = ДанныеТекущейСтроки[КлючЗначение.Значение];
			ЗначениеДанныхСтрокиДанныеФизЛица = ДанныеТекущейСтроки[СтруктураСоответствияИзменившихсяДанныхДаннымФизЛица[КлючЗначение.Значение]];
			
			СтруктураСоответствияДанныхФормыПризнакамИзменения.Свойство(КлючЗначение.Ключ, ПризнакИзмененияПутьКДанным); 
			Если ЗначениеЗаполнено(ЗначениеДанныхСтрокиИзменившиесяДанные) Тогда
				Форма[КлючЗначение.Ключ] = ВРег(ЗначениеДанныхСтрокиИзменившиесяДанные);	
				ПризнакИзменения = Истина;
			Иначе
				Форма[КлючЗначение.Ключ] = ВРег(ЗначениеДанныхСтрокиДанныеФизЛица);	
				ПризнакИзменения = Ложь;
			КонецЕсли;	
			Если ПризнакИзмененияПутьКДанным <> Неопределено Тогда
				Форма[ПризнакИзмененияПутьКДанным] = ПризнакИзменения;
			КонецЕсли;	
		КонецЦикла;			
		Форма.ВидДокумента = ДанныеТекущейСтроки.ВидДокумента;
		Форма.НомерАктовойЗаписиПриРождении = ДанныеТекущейСтроки.НомерАктовойЗаписиПриРождении;
	Иначе
		Для Каждого КлючЗначение Из СтруктураСоответствияПолейСПризнаком Цикл
			Форма[КлючЗначение.Ключ] = ЗначениеДанныхСтрокиИзменившиесяДанные;	
			СтруктураСоответствияДанныхФормыПризнакамИзменения.Свойство(КлючЗначение.Ключ, ПризнакИзмененияПутьКДанным);
			Если ПризнакИзмененияПутьКДанным <> Неопределено Тогда
				Форма[ПризнакИзмененияПутьКДанным] = Ложь;
			КонецЕсли;
		КонецЦикла;
		Форма.ВидДокумента = Неопределено;
		Форма.НомерАктовойЗаписиПриРождении = Неопределено;
	КонецЕсли;	
	
	Форма.УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры	

Процедура ДокументыАДВОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт 
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		СтруктураОтбора = Новый Структура("Сотрудник", Источник);
	
		СтрокиПоСотруднику = Форма.Объект.Сотрудники.НайтиСтроки(СтруктураОтбора);

		ЗарплатаКадрыКлиентСервер.ОбработкаИзмененияДанныхФизическогоЛица(Форма.Объект, Параметр, СтрокиПоСотруднику, Форма.Модифицированность);
		
		Для Каждого СтрокаСотрудника Из СтрокиПоСотруднику Цикл
			Если СтрокаСотрудника.ФамилияВСвидетельстве <> СтрокаСотрудника.ДанныеФизЛицаФамилия Тогда
				СтрокаСотрудника.Фамилия = СтрокаСотрудника.ДанныеФизЛицаФамилия;
			Иначе
				СтрокаСотрудника.Фамилия = "";	
			КонецЕсли;	
			Если СтрокаСотрудника.ИмяВСвидетельстве <> СтрокаСотрудника.ДанныеФизЛицаИмя Тогда
				СтрокаСотрудника.Имя = СтрокаСотрудника.ДанныеФизЛицаИмя;
			Иначе
				СтрокаСотрудника.Имя = "";
			КонецЕсли;	
			Если СтрокаСотрудника.ОтчествоВСвидетельстве <> СтрокаСотрудника.ДанныеФизЛицаОтчество Тогда
				СтрокаСотрудника.Отчество = СтрокаСотрудника.ДанныеФизЛицаОтчество;
			Иначе
				СтрокаСотрудника.Отчество = "";
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаСотрудника.Гражданство) Тогда
				СтрокаСотрудника.Гражданство = СтрокаСотрудника.ДанныеФизЛицаГражданство;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаСотрудника.АдресРегистрации) Тогда
				СтрокаСотрудника.АдресРегистрации = СтрокаСотрудника.ДанныеФизЛицаАдресРегистрации;
				СтрокаСотрудника.АдресРегистрацииПредставление = СтрокаСотрудника.ДанныеФизЛицаАдресРегистрацииПредставление;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаСотрудника.АдресФактический) Тогда
				СтрокаСотрудника.АдресФактический = СтрокаСотрудника.ДанныеФизЛицаАдресФактический;
				СтрокаСотрудника.АдресФактическийПредставление = СтрокаСотрудника.ДанныеФизЛицаАдресФактическийПредставление;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаСотрудника.Телефоны) Тогда
				СтрокаСотрудника.Телефоны = СтрокаСотрудника.ДанныеФизЛицаТелефоны;
			КонецЕсли;
			Если СтрокаСотрудника.ВидДокумента <> ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении") Тогда 
				СтрокаСотрудника.НомерАктовойЗаписиПриРождении = "";
			КонецЕсли;
		КонецЦикла;	
		
		Форма.ОбработатьИзменениеДанныхФизическогоЛица(СтрокиПоСотруднику);
		
		КоличествоСтрок = СтрокиПоСотруднику.Количество();
		Если КоличествоСтрок > 0 Тогда
			Форма.Элементы.Сотрудники.ТекущаяСтрока = СтрокиПоСотруднику[КоличествоСтрок - 1].ПолучитьИдентификатор();
		КонецЕсли;	
		ДокументыАДВОтобразитьДанныеФизическогоЛица(Форма);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ДокументыАДВПризнакИзмененияПриИзменении(Форма, Элемент) Экспорт 
	СоответствиеЭлементовФормыДаннымФормы  = Форма.ПолучитьСоответствиеЭлементовУправленияДаннымФормы();
	СоответствиеДанныхФормыДаннымТаблицы  = Форма.ПолучитьСоответствиеДанныхФормыПолямТабличнойЧасти("ПризнакиИзменения");
	СоответствиеИзменившихсяДанныхТекущим = Форма.ПолучитьСоответствиеИзменившихсяДанныхДаннымФизЛица();
	
	ДанныеТекущейСтроки = Форма.Элементы.Сотрудники.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
				
		ИмяЭлемента = Элемент.Имя;
		ПутьКДаннымФормы = СоответствиеЭлементовФормыДаннымФормы[ИмяЭлемента];
		ПутьКДаннымТаблицы = СоответствиеДанныхФормыДаннымТаблицы[ПутьКДаннымФормы];
		ПутьКТекущимДаннымФизЛицаВТаблице = СоответствиеИзменившихсяДанныхТекущим[ПутьКДаннымТаблицы];
		
		Если Форма[ПутьКДаннымФормы] = Истина Тогда 
			ДанныеТекущейСтроки[ПутьКДаннымТаблицы] = ДанныеТекущейСтроки[ПутьКТекущимДаннымФизЛицаВТаблице];
			Если ПутьКДаннымФормы = "МестоРожденияПредставлениеПризнакИзменения" Тогда
				ДанныеТекущейСтроки["МестоРождения"] = ДанныеТекущейСтроки["ДанныеФизЛицаМестоРождения"];	
			ИначеЕсли ПутьКДаннымФормы = "АдресРегистрацииПредставлениеПризнакИзменения" Тогда
				ДанныеТекущейСтроки["АдресРегистрации"] = ДанныеТекущейСтроки["ДанныеФизЛицаАдресРегистрации"];	
			ИначеЕсли ПутьКДаннымФормы = "АдресФактическийПредставлениеПризнакИзменения" Тогда
				ДанныеТекущейСтроки["АдресФактический"] = ДанныеТекущейСтроки["ДанныеФизЛицаАдресФактический"];
			КонецЕсли;		
		Иначе
			ДанныеТекущейСтроки[ПутьКДаннымТаблицы] = Неопределено;
			Если ПутьКДаннымФормы = "МестоРожденияПредставлениеПризнакИзменения" Тогда
				ДанныеТекущейСтроки["МестоРождения"] = "";	
			ИначеЕсли ПутьКДаннымФормы = "АдресРегистрацииПредставлениеПризнакИзменения" Тогда
				ДанныеТекущейСтроки["АдресРегистрации"] = "";	
			ИначеЕсли ПутьКДаннымФормы = "АдресФактическийПредставлениеПризнакИзменения" Тогда
				ДанныеТекущейСтроки["АдресФактический"] = "";
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры	

Процедура ДокументыАДВПризнакОтменыПриИзменении(Форма, Элемент) Экспорт
	СоответствиеЭлементовФормыДаннымФормы = Форма.ПолучитьСоответствиеЭлементовУправленияДаннымФормы();
	СоответствиеДанныхФормыДаннымТаблицы    = Форма.ПолучитьСоответствиеДанныхФормыПолямТабличнойЧасти("ИзменившиесяДанныеСПризнаком");
	
	ДанныеТекущейСтроки = Форма.Элементы.Сотрудники.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда 
		ИмяЭлемента = Элемент.Имя;
		ПутьКДаннымФормы = СоответствиеЭлементовФормыДаннымФормы[ИмяЭлемента];
		ИмяПоляТаблицы   = СоответствиеДанныхФормыДаннымТаблицы[ПутьКДаннымФормы];
		ДанныеТекущейСтроки[ИмяПоляТаблицы] = Форма[ПутьКДаннымФормы];
	КонецЕсли;		
КонецПроцедуры	

Процедура ДокументыАДВПрочитатьДанныеФизическогоЛица(Форма) Экспорт 
	ДанныеТекущейСтроки = Форма.Элементы.Сотрудники.ТекущиеДанные;
	
	СоответствиеДанныхФизЛицаИзменившимсяДанным = Форма.ПолучитьСоответствиеИзменившихсяДанныхДаннымФизЛица();
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда  
		Для Каждого КлючЗначение Из СоответствиеДанныхФизЛицаИзменившимсяДанным Цикл
			Если ЗначениеЗаполнено(ДанныеТекущейСтроки[КлючЗначение.Ключ]) Тогда
				ДанныеТекущейСтроки[КлючЗначение.Ключ] = ДанныеТекущейСтроки[КлючЗначение.Значение];
			КонецЕсли;				
		КонецЦикла;			
	КонецЕсли;	
		
	ДокументыАДВОтобразитьДанныеФизическогоЛица(Форма);
	
КонецПроцедуры	

Процедура РедактироватьДанныеФизическогоЛица(ЭлементыФормыСписокСотрудников, РедактируемоеПоле = "") Экспорт 
	ДанныеТекущейСтроки = ЭлементыФормыСписокСотрудников.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено И ЗначениеЗаполнено(ДанныеТекущейСтроки.Сотрудник) Тогда
		ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле ", ДанныеТекущейСтроки.Сотрудник, "ЛичныеДанные", РедактируемоеПоле);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;		
КонецПроцедуры	

#КонецОбласти

#Область ДокументыСЗВ

Процедура ДокументыСЗВСотрудникиПриАктивацииСтроки(ЭлементФормыСотрудники, ТекущийСотрудник, ЭлементФормыЗаписиОСтаже = Неопределено, КонтролируемыеПоля = Неопределено, СтарыеЗначенияКонтролируемыхПолей = Неопределено, ЭлементОтменыИсправлений = Неопределено) Экспорт
													
	ТекущиеДанныеСтроки =  ЭлементФормыСотрудники.ТекущиеДанные;
	
	Если ТекущиеДанныеСтроки <> Неопределено Тогда
		ТекущийСотрудник = ТекущиеДанныеСтроки.Сотрудник;
		Если ЭлементФормыЗаписиОСтаже <> Неопределено Тогда
			ПерсонифицированныйУчетКлиентСервер.ДокументыРедактированияСтажаУстановитьОтборЗаписейОСтаже(ЭлементФормыЗаписиОСтаже, ТекущиеДанныеСтроки.Сотрудник);
		КонецЕсли;	
				
		Если КонтролируемыеПоля <> Неопределено Тогда
			ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(ТекущиеДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ТекущиеДанныеСтроки);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ДокументыСЗВСотрудникиПриОкончанииРедактирования(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, Форма = Неопределено) Экспорт 
	 ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеТекущейСтроки);			
КонецПроцедуры	

Процедура ДокументыСЗВВыполнитьНумерациюЗаписейОСтаже(ЭлементФормыСотрудники, ЗаписиОСтаже) Экспорт 
	
	ТекущиеДанныеСтроки = ЭлементФормыСотрудники.ТекущиеДанные;
	
	Если ТекущиеДанныеСтроки <> Неопределено Тогда

		СтруктураПоиска = Новый Структура("Сотрудник", ТекущиеДанныеСтроки.Сотрудник);
		
		СтрокиСтажаПоСотруднику = ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска); 
		
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
	
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументыСЗВЗаписиОСтажеПередНачаломДобавления(ЭлементФормыСотрудники, ЭлементФормыЗаписиОСтаже, ДокументОбъект, Отказ, ТолькоПросмотр, РасширенноеРедактирование = Истина, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь) Экспорт 
	Если РасширенноеРедактирование Тогда
		Отказ = Истина;
		ДанныеТекущейСтроки = ЭлементФормыСотрудники.ТекущиеДанные; 
		Если ДанныеТекущейСтроки <> Неопределено Тогда
			ДокументыСЗВДобавитьСтрокуЗаписиОСтаже(ЭлементФормыЗаписиОСтаже, ДокументОбъект, ДанныеТекущейСтроки.Сотрудник, ТолькоПросмотр, ИспользоватьНовыйКлассификаторПараметровСтажа);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументыСЗВДобавитьСтрокуЗаписиОСтаже(ЭлементФормыЗаписиОСтаже, ДокументОбъект, Сотрудник, ТолькоПросмотр, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь)
	НоваяСтрокаСтаж = ДокументОбъект.ЗаписиОСтаже.Добавить();
	НоваяСтрокаСтаж.Сотрудник = Сотрудник; 
	
	ДокументыСЗВОткрытьФормуВводаЗаписейОСтаже(НоваяСтрокаСтаж, ДокументОбъект, ЭлементФормыЗаписиОСтаже, Истина, ТолькоПросмотр, ИспользоватьНовыйКлассификаторПараметровСтажа);
	
КонецПроцедуры	

Процедура ДокументыСЗВОткрытьФормуВводаЗаписейОСтаже(ДанныеСтроки, ДокументОбъект, Владелец, НоваяСтрока = Ложь, ТолькоПросмотр = Ложь, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь) Экспорт 
		
	ПериодСтрока = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(ДокументОбъект.ОтчетныйПериод);
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		ТипДоговора = ДокументОбъект.ТипДоговора;	
	Иначе	
		ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка");
	КонецЕсли;	
	
	ПараметрыОткрытия = ПараметрыСтажаДляОткрытияФормыРедактированияЗаписиСтажа();
	
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДанныеСтроки);
	
	ПараметрыОткрытия.ИндексСтроки = ДокументОбъект.ЗаписиОСтаже.Индекс(ДанныеСтроки);
	ПараметрыОткрытия.НоваяСтрока = НоваяСтрока;
	ПараметрыОткрытия.Организация = ДокументОбъект.Организация;
	ПараметрыОткрытия.ПериодСтрока = ПериодСтрока;
	Если Не ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
		ПараметрыОткрытия.КатегорияЗастрахованныхЛиц = ДокументОбъект.КатегорияЗастрахованныхЛиц;
	КонецЕсли;	
	ПараметрыОткрытия.ТипДоговора = ТипДоговора;	
 
	ОткрытьФормуВводаЗаписейОСтаже(ПараметрыОткрытия, ТолькоПросмотр, Владелец, Ложь, ИспользоватьНовыйКлассификаторПараметровСтажа);
		
КонецПроцедуры	

Процедура ДокументыСЗВЗаписиОСтажеОбработкаВыбора(ЭлементФормыСотрудники, ЗаписиОСтаже, ВыбранноеЗначение, Модифицированность, КонтролируемыеПоля = Неопределено, СтарыеЗначенияКонтролируемыхПолей = Неопределено, Форма = Неопределено, ЭлементОтменыИсправлений = Неопределено) Экспорт
													
	ДанныеТекущейСтрокиСотрудник = ЭлементФормыСотрудники.ТекущиеДанные;
		
	Если Не ВыбранноеЗначение.Отмена  Тогда
		ДокументыСЗВЗаполнитьСтрокуДанныхОСтаже(ВыбранноеЗначение, ЗаписиОСтаже, Модифицированность, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей,
												ДанныеТекущейСтрокиСотрудник, Форма,  ЭлементОтменыИсправлений);
		ДокументыСЗВВыполнитьНумерациюЗаписейОСтаже(ЭлементФормыСотрудники, ЗаписиОСтаже);
	ИначеЕсли ВыбранноеЗначение.НоваяСтрока Тогда
		ЗаписиОСтаже.Удалить(ВыбранноеЗначение.ИндексСтроки);	
	КонецЕсли;		
КонецПроцедуры	

Процедура ДокументыСЗВЗаписиОСтажеКонтрольИсправленийПослеУдаления(ДанныеТекущейСтрокиСотрудник, ЭлементОтменыИсправлений = Неопределено) Экспорт 
	ДанныеТекущейСтрокиСотрудник.ФиксСтаж = Истина;
КонецПроцедуры

Процедура ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(ДанныеТекущейСтроки, НоваяСтрока, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиСПризнакамиИсправления, Форма = Неопределено) Экспорт 
	
	ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиСПризнакамиИсправления);
	
КонецПроцедуры	

Процедура ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля = Неопределено, СтарыеЗначенияКонтролируемыхПолей = Неопределено, ДанныеТекущейСтрокиСотрудник = Неопределено, ЭлементОтменыИсправлений = Неопределено) Экспорт
													 
	Если ДанныеТекущейСтроки <> Неопределено И КонтролируемыеПоля <> Неопределено Тогда
		ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, 
														  ДанныеТекущейСтрокиСотрудник);													 
	КонецЕсли;													 
	
КонецПроцедуры	

Процедура ДокументыСЗВЗаполнитьСтрокуДанныхОСтаже(ДанныеОСтаже, ЗаписиОСтаже, Модифицированность, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей,
												  ДанныеТекущейСтрокиСотрудник, Форма, ЭлементОтменыИсправлений)
	Перем ТекущееЗначение;	
	ТекущаяСтрокаЗаписиОСтаже = ЗаписиОСтаже.Получить(ДанныеОСтаже.ИндексСтроки);
	
	Если ТекущаяСтрокаЗаписиОСтаже <> Неопределено Тогда
		Модифицированность = Истина;
		          
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаЗаписиОСтаже, ДанныеОСтаже);
		Если КонтролируемыеПоля <> Неопределено Тогда
			ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(ТекущаяСтрокаЗаписиОСтаже, ДанныеОСтаже.НоваяСтрока, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеТекущейСтрокиСотрудник, Форма);
		КонецЕсли;																
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиСПризнакамиИсправлений) Экспорт
	ПерсонифицированныйУчетКлиентСервер.ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
		ДанныеТекущейСтроки, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолей);	
КонецПроцедуры	

Функция ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей, ДанныеСтрокиПризнаковИсправления) Экспорт 
	ИзмененыСуммыВзносов = Ложь;
	ИзмененСтаж = Ложь;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда 
		Для Каждого РазделКонтролируемыхПолей Из КонтролируемыеПоля Цикл
			СтрокаСИзменениямиСтажа = РазделКонтролируемыхПолей.Ключ = "Стаж" 
										И ДанныеСтрокиПризнаковИсправления.Свойство("ФиксСтаж")
										И ДанныеСтрокиПризнаковИсправления.ФиксСтаж;
										
			МассивКонтролируемыхПолей = РазделКонтролируемыхПолей.Значение.КонтролируемыеПоля;
			Для Каждого КонтролируемоеПоле Из МассивКонтролируемыхПолей Цикл
				ТекущееЗначениеПоля = Неопределено;
				Если ДанныеТекущейСтроки.Свойство(КонтролируемоеПоле, ТекущееЗначениеПоля) Тогда
					Если ТекущееЗначениеПоля <> СтарыеЗначенияКонтролируемыхПолей[РазделКонтролируемыхПолей.Ключ][КонтролируемоеПоле] Тогда
						ДанныеСтрокиПризнаковИсправления[РазделКонтролируемыхПолей.Значение.ИмяПоляФиксДанных] = Истина;
						Если РазделКонтролируемыхПолей.Ключ = "НачисленныеВзносы" Или РазделКонтролируемыхПолей.Ключ = "УплаченныеВзносы" Тогда
							ИзмененыСуммыВзносов = Истина;		
						ИначеЕсли РазделКонтролируемыхПолей.Ключ = "Стаж" Тогда
							ИзмененСтаж = Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
				
		ПерсонифицированныйУчетКлиентСервер.ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
			ДанныеТекущейСтроки, 
			КонтролируемыеПоля, 
			СтарыеЗначенияКонтролируемыхПолей);
	КонецЕсли;	
		
	Возврат ИзмененСтаж Или ИзмененыСуммыВзносов;	
КонецФункции	

Процедура ПодобратьФизическихЛиц(ЭлементФормы, Организация, АдресСпискаПодобранныхСотрудников, МножественныйВыбор = Истина) Экспорт 
	
	ПерсонифицированныйУчетКлиентВнутренний.ПодобратьФизическихЛиц(ЭлементФормы, Организация, АдресСпискаПодобранныхСотрудников, МножественныйВыбор);
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмОтображенияОшибок

Процедура ПоказатьОшибки(Форма, Элемент, СтандартнаяОбработка) Экспорт
	ПоказыватьТекстОшибки = Истина;
	
	ИмяЭлементаОшибки = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - 10);	
	
	ОписаниеЭлементаИндикации = Форма["СвойстваЭлементовИндикацииОшибок"][ИмяЭлементаОшибки];
	
	Если ОписаниеЭлементаИндикации = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	Текст = ПерсонифицированныйУчетКлиентСервер.ТекстОшибки(Форма, ИмяЭлементаОшибки, ОписаниеЭлементаИндикации);
	
	Форма.ПоказатьОшибки(ОписаниеЭлементаИндикации.Поле, ПоказыватьТекстОшибки);
	
	Если ПоказыватьТекстОшибки
		И ЗначениеЗаполнено(Текст) Тогда 
		
		ПоказатьПредупреждение(, Текст, , НСтр("ru = 'Информация об ошибке'"));
	КонецЕсли;	
КонецПроцедуры	

// Дополнение формы списка квартальной отчетности.

Процедура КвартальнаяОтчетностьПФРВыполнитьНазначеннуюКоманду(Форма, Команда) Экспорт
	ПерсонифицированныйУчетКлиентБазовый.КвартальнаяОтчетностьПФРВыполнитьНазначеннуюКоманду(Форма, Команда);		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиФайловСтороннимиПрограммами

Процедура ПроверитьФайлыСтороннимиПрограммами(СтруктураПараметров, АдресХранилища, Оповещение) Экспорт
	ПараметрыПроверки = СтруктураПараметровДляПроверитьСледующийФайл();
	
	ПараметрыПроверки.ОписаниеПроверяемыхФайлов = СтруктураПараметров.ОписаниеПроверяемыхФайлов;
	ПараметрыПроверки.АдресХранилища = АдресХранилища;
	ПараметрыПроверки.ОбработчикОповещенияПоЗавершении = Оповещение;
	ПараметрыПроверки.КаталогФайлов = СтруктураПараметров.КаталогФайлов;;
	
	Если СтруктураПараметров.ПроверятьПрограммойCheckXML 
		И СтруктураПараметров.ФайлПрограммыCheckXMLОбнаружен Тогда
		
		ОписаниеПроверочнойПрограммы = Новый Структура("Ключ, Каталог", "CheckXML", СтруктураПараметров.КаталогПрограммыСheckXml);
		
		ПараметрыПроверки.ПроверочныеПрограммы.Добавить(ОписаниеПроверочнойПрограммы);
		
		ЗаполнитьПараметрыЗапускаCheckXML(ПараметрыПроверки, СтруктураПараметров.ПутиКФайлам, СтруктураПараметров.КаталогПрограммыСheckXml, ПараметрыПроверки.ОписаниеПроверяемыхФайлов);
	КонецЕсли;	
	
	Если СтруктураПараметров.ПроверятьПрограммойCheckUFA 
		И СтруктураПараметров.ФайлПрограммыCheckUFAОбнаружен Тогда
		
		ОписаниеПроверочнойПрограммы = Новый Структура("Ключ, Каталог", "CheckUFA", СтруктураПараметров.КаталогПрограммыСheckXml);
		
		ПараметрыПроверки.ПроверочныеПрограммы.Добавить(ОписаниеПроверочнойПрограммы);
		
		ЗаполнитьПараметрыЗапускаCheckUFA(ПараметрыПроверки, СтруктураПараметров.ПутиКФайлам, СтруктураПараметров.КаталогПрограммыСheckUFA, СтруктураПараметров.КаталогФайлов, ПараметрыПроверки.ОписаниеПроверяемыхФайлов);
	КонецЕсли;	
	
	Если СтруктураПараметров.ПроверятьПрограммойПОПД 
		И СтруктураПараметров.ФайлПрограммыПОПДОбнаружен Тогда
		
		ОписаниеПроверочнойПрограммы = Новый Структура("Ключ, Каталог", "ПОПД", СтруктураПараметров.КаталогПрограммыПОПД);
		
		ПараметрыПроверки.ПроверочныеПрограммы.Добавить(ОписаниеПроверочнойПрограммы);
		
		ЗаполнитьПараметрыЗапускаПОПД(ПараметрыПроверки, СтруктураПараметров.ПутиКФайлам, СтруктураПараметров.КаталогПрограммыПОПД, СтруктураПараметров.КаталогФайлов, ПараметрыПроверки.ОписаниеПроверяемыхФайлов);
	КонецЕсли;	
	
	ПроверитьСледующийФайл(ПараметрыПроверки);

КонецПроцедуры	

Процедура ЗаполнитьПараметрыЗапускаCheckXML(ПараметрыПроверки, ПутиКФайлам, КаталогПрограммы, ОписаниеПроверяемыхФайлов)
	ПараметрыПроверкиФайлов = Новый Массив;
	
	Для Каждого ОписаниеФайла Из ПараметрыПроверки.ОписаниеПроверяемыхФайлов Цикл
		ПараметрыЗапуска = Новый Структура("СтрокаЗапуска, УказыватьКаталогПрограммы, КаталогПрограммы, КаталогПоискаПротокола, ШаблонПоискаПротокола, ИмяФайла, ВыполнятьПроверку, Владелец");
		
		ПутьКФайлу = ПутиКФайлам[ОписаниеФайла.Владелец];
		ПараметрыЗапуска.СтрокаЗапуска = КаталогПрограммы + "\CheckXML.exe """+ ПутьКФайлу + """";
		ПараметрыЗапуска.УказыватьКаталогПрограммы = Истина;
		ПараметрыЗапуска.ШаблонПоискаПротокола = СтрЗаменить(ВРег(ОписаниеФайла.ИмяФайла), ".XML", "-LOG.HTML");
		ПараметрыЗапуска.КаталогПоискаПротокола = КаталогПрограммы + "\LOG\";
		ПараметрыЗапуска.ИмяФайла = ОписаниеФайла.ИмяФайла;
		ПараметрыЗапуска.ВыполнятьПроверку = Истина;
		ПараметрыЗапуска.Владелец = ОписаниеФайла.Владелец;
		
		ПараметрыЗапуска.КаталогПрограммы = КаталогПрограммы;
		
		ПараметрыПроверкиФайлов.Добавить(ПараметрыЗапуска);
	КонецЦикла;		
	
	ПараметрыПроверки.РезультатыПроверки.Вставить("CheckXML", Новый Соответствие);
	ПараметрыПроверки.ПараметрыЗапускаПроверкиФайловПрограмм.Вставить("CheckXML", ПараметрыПроверкиФайлов);	
КонецПроцедуры	

Процедура ЗаполнитьПараметрыЗапускаCheckUFA(ПараметрыПроверки, ПутиКФайлам, КаталогПрограммы, КаталогФайлов, ОписаниеПроверяемыхФайлов)
	ПараметрыПроверкиФайлов = Новый Массив;
	
	Для Каждого ОписаниеФайла Из ПараметрыПроверки.ОписаниеПроверяемыхФайлов Цикл
		ПараметрыЗапуска = Новый Структура("СтрокаЗапуска, УказыватьКаталогПрограммы, КаталогПрограммы, КаталогПоискаПротокола, ШаблонПоискаПротокола, ИмяФайла, ВыполнятьПроверку, Владелец");
		
		ПутьКФайлу = ПутиКФайлам[ОписаниеФайла.Владелец];
		ПараметрыЗапуска.СтрокаЗапуска = КаталогПрограммы + "\Check.exe "+ """" + ПутьКФайлу + """";
		ПараметрыЗапуска.УказыватьКаталогПрограммы = Ложь;
		ПараметрыЗапуска.ШаблонПоискаПротокола = "*.log.html";
		ПараметрыЗапуска.КаталогПоискаПротокола = КаталогФайлов;
		ПараметрыЗапуска.КаталогПрограммы = КаталогПрограммы;
		ПараметрыЗапуска.ИмяФайла = ОписаниеФайла.ИмяФайла;
		ПараметрыЗапуска.Владелец = ОписаниеФайла.Владелец;
		
		Если Не ОписаниеФайла.ФайлВСоставеКомплекта 
			Или ОписаниеФайла.ПроверяемыйФайлКомплекта Тогда
			
			ПараметрыЗапуска.ВыполнятьПроверку = Истина;
		Иначе
			ПараметрыЗапуска.ВыполнятьПроверку = Ложь;
		КонецЕсли;	
		
		ПараметрыПроверкиФайлов.Добавить(ПараметрыЗапуска);
	КонецЦикла;		
	
	ПараметрыПроверки.РезультатыПроверки.Вставить("CheckUFA", Новый Соответствие);
	ПараметрыПроверки.ПараметрыЗапускаПроверкиФайловПрограмм.Вставить("CheckUFA", ПараметрыПроверкиФайлов);	
КонецПроцедуры	

Процедура ЗаполнитьПараметрыЗапускаПОПД(ПараметрыПроверки, ПутиКФайлам, КаталогПрограммы, КаталогФайлов, ОписаниеПроверяемыхФайлов)
	ПараметрыПроверкиФайлов = Новый Массив;
	
	Для Каждого ОписаниеФайла Из ПараметрыПроверки.ОписаниеПроверяемыхФайлов Цикл
		ПараметрыЗапуска = Новый Структура("СтрокаЗапуска, УказыватьКаталогПрограммы, КаталогПрограммы, КаталогПоискаПротокола, ШаблонПоискаПротокола, ИмяФайла, ВыполнятьПроверку, Владелец, Кодировка");
		
		ПутьКФайлу = ПутиКФайлам[ОписаниеФайла.Владелец];
		ПараметрыЗапуска.СтрокаЗапуска = КаталогПрограммы + "\run.cmd -s " + ПутьКФайлу + " -o " + КаталогФайлов + "\";
		ПараметрыЗапуска.УказыватьКаталогПрограммы = Истина;
		ПараметрыЗапуска.ШаблонПоискаПротокола = "*УППО*.html";
		ПараметрыЗапуска.КаталогПоискаПротокола = КаталогФайлов;
		ПараметрыЗапуска.КаталогПрограммы = КаталогПрограммы;
		ПараметрыЗапуска.ИмяФайла = ОписаниеФайла.ИмяФайла;
		ПараметрыЗапуска.Владелец = ОписаниеФайла.Владелец;
		ПараметрыЗапуска.Кодировка = КодировкаТекста.UTF8;
		
		Если Не ОписаниеФайла.ФайлВСоставеКомплекта 
			Или ОписаниеФайла.ПроверяемыйФайлКомплекта Тогда
			
			ПараметрыЗапуска.ВыполнятьПроверку = Истина;
		Иначе
			ПараметрыЗапуска.ВыполнятьПроверку = Ложь;
		КонецЕсли;	
		
		ПараметрыПроверкиФайлов.Добавить(ПараметрыЗапуска);
	КонецЦикла;		
	
	ПараметрыПроверки.РезультатыПроверки.Вставить("ПОПД", Новый Соответствие);
	ПараметрыПроверки.ПараметрыЗапускаПроверкиФайловПрограмм.Вставить("ПОПД", ПараметрыПроверкиФайлов);	
КонецПроцедуры	

Процедура ПроверитьСледующийФайл(ПараметрыПроверки) Экспорт
	ПараметрыПроверки.ИндексПроверяемогоФайла = ПараметрыПроверки.ИндексПроверяемогоФайла + 1;
	
	Если ПараметрыПроверки.ИндексПроверяемогоФайла > ПараметрыПроверки.ОписаниеПроверяемыхФайлов.Количество() - 1 Тогда
		Если ПараметрыПроверки.ИндексТекущейПроверочнойПрограммы >= ПараметрыПроверки.ПроверочныеПрограммы.Количество() - 1 Тогда
			ПослеЗавершенияПроверки(ПараметрыПроверки);
			Возврат;
		Иначе
			ПараметрыПроверки.ИндексПроверяемогоФайла = 0;
			ПараметрыПроверки.ИндексТекущейПроверочнойПрограммы = ПараметрыПроверки.ИндексТекущейПроверочнойПрограммы + 1;
		КонецЕсли;		
	КонецЕсли;	
	
	ПроверочнаяПрограмма = ПараметрыПроверки.ПроверочныеПрограммы[ПараметрыПроверки.ИндексТекущейПроверочнойПрограммы];
	ОписаниеФайла = ПараметрыПроверки.ОписаниеПроверяемыхФайлов[ПараметрыПроверки.ИндексПроверяемогоФайла];
	
	ЗапуститьПроверочнуюПрограмму(ПараметрыПроверки);
	
КонецПроцедуры	

Процедура ЗапуститьПроверочнуюПрограмму(ПараметрыПроверки)
	ПроверочнаяПрограмма = ПараметрыПроверки.ПроверочныеПрограммы[ПараметрыПроверки.ИндексТекущейПроверочнойПрограммы]; 
	
	ПараметрыЗапуска = ПараметрыПроверки.ПараметрыЗапускаПроверкиФайловПрограмм[ПроверочнаяПрограмма.Ключ][ПараметрыПроверки.ИндексПроверяемогоФайла]; 
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияПроверкиФайла", ЭтотОбъект, ПараметрыПроверки);
	Если Не ПараметрыЗапуска.ВыполнятьПроверку Тогда 
		ПроверитьСледующийФайл(ПараметрыПроверки);
	ИначеЕсли ПараметрыЗапуска.УказыватьКаталогПрограммы Тогда
		НачатьЗапускПриложения(Оповещение, ПараметрыЗапуска.СтрокаЗапуска, ПроверочнаяПрограмма.Каталог, Истина);
	Иначе
		НачатьЗапускПриложения(Оповещение, ПараметрыЗапуска.СтрокаЗапуска, , Истина);
	КонецЕсли;	
КонецПроцедуры	

Процедура ПослеВыполненияПроверкиФайла(КодВозврата, ПараметрыПроверки) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеОкончанияПоискаФайловПротокола", ЭтотОбъект, ПараметрыПроверки);
	
	ПроверочнаяПрограмма = ПараметрыПроверки.ПроверочныеПрограммы[ПараметрыПроверки.ИндексТекущейПроверочнойПрограммы]; 
	ПараметрыЗапуска = ПараметрыПроверки.ПараметрыЗапускаПроверкиФайловПрограмм[ПроверочнаяПрограмма.Ключ][ПараметрыПроверки.ИндексПроверяемогоФайла]; 
	
	НачатьПоискФайлов(Оповещение, ПараметрыЗапуска.КаталогПоискаПротокола, ПараметрыЗапуска.ШаблонПоискаПротокола); 
	
КонецПроцедуры

Процедура ПослеОкончанияПоискаФайловПротокола(НайденныйФайлы, ПараметрыПроверки) Экспорт
	ПроверочнаяПрограмма = ПараметрыПроверки.ПроверочныеПрограммы[ПараметрыПроверки.ИндексТекущейПроверочнойПрограммы]; 
	ПараметрыЗапуска = ПараметрыПроверки.ПараметрыЗапускаПроверкиФайловПрограмм[ПроверочнаяПрограмма.Ключ][ПараметрыПроверки.ИндексПроверяемогоФайла]; 
	
	ТекстПротокола = Неопределено;
	Если НайденныйФайлы.Количество() > 0 Тогда
		Кодировка = ?(ПараметрыЗапуска.Свойство("Кодировка"), ПараметрыЗапуска.Кодировка, Неопределено);
		Протокол = Новый ТекстовыйДокумент;
		Протокол.Прочитать(НайденныйФайлы[0].ПолноеИмя, Кодировка);
		ТекстПротокола = Протокол.ПолучитьТекст()
	КонецЕсли;	
	
	ПараметрыПроверки.РезультатыПроверки[ПроверочнаяПрограмма.Ключ].Вставить(ПараметрыЗапуска.Владелец, ТекстПротокола);	
	
	Если Протокол = Неопределено Тогда
		ПроверитьСледующийФайл(ПараметрыПроверки);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПроверитьСледующийФайл", ЭтотОбъект, ПараметрыПроверки);
		
		НачатьУдалениеФайлов(Оповещение, НайденныйФайлы[0].ПолноеИмя);
	КонецЕсли;	
КонецПроцедуры	

Процедура ПослеЗавершенияПроверки(ПараметрыПроверки)
	РезультатыПроверки = Новый Структура;
	
	РезультатыПроверки.Вставить("ПротоколыCheckXML"); 
	РезультатыПроверки.Вставить("ПротоколыCheckUFA"); 
	РезультатыПроверки.Вставить("ПротоколыПОПД"); 
	
	ПараметрыПроверки.РезультатыПроверки.Свойство("CheckXML", РезультатыПроверки.ПротоколыCheckXML);
	ПараметрыПроверки.РезультатыПроверки.Свойство("CheckUFA", РезультатыПроверки.ПротоколыCheckUFA);
	ПараметрыПроверки.РезультатыПроверки.Свойство("ПОПД", РезультатыПроверки.ПротоколыПОПД);
	
	Если РезультатыПроверки.ПротоколыCheckUFA = Неопределено Тогда
		РезультатыПроверки.ПротоколыCheckUFA = Новый Соответствие;
	КонецЕсли; 
	
	Если РезультатыПроверки.ПротоколыCheckXML = Неопределено Тогда
		РезультатыПроверки.ПротоколыCheckXML = Новый Соответствие;
	КонецЕсли; 
	
	Если РезультатыПроверки.ПротоколыПОПД = Неопределено Тогда
		РезультатыПроверки.ПротоколыПОПД = Новый Соответствие;
	КонецЕсли; 
	
	ПоместитьВоВременноеХранилище(РезультатыПроверки, ПараметрыПроверки.АдресХранилища);
	
	НачатьУдалениеФайлов(ПараметрыПроверки.ОбработчикОповещенияПоЗавершении, ПараметрыПроверки.КаталогФайлов);
	
КонецПроцедуры	

Функция СтруктураПараметровДляПроверитьСледующийФайл()
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОписаниеПроверяемыхФайлов");
	СтруктураПараметров.Вставить("ИндексПроверяемогоФайла", -1);
	СтруктураПараметров.Вставить("ПроверочныеПрограммы", Новый Массив);
	СтруктураПараметров.Вставить("ИндексТекущейПроверочнойПрограммы", 0);
	СтруктураПараметров.Вставить("ОбработчикОповещенияПоЗавершении");
	СтруктураПараметров.Вставить("ПараметрыЗапускаПроверкиФайловПрограмм", Новый Структура);
	СтруктураПараметров.Вставить("АдресХранилища");
	СтруктураПараметров.Вставить("РезультатыПроверки", Новый Структура);
	СтруктураПараметров.Вставить("КаталогФайлов");

	Возврат СтруктураПараметров	
КонецФункции	
	

#КонецОбласти

#КонецОбласти
