
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает представление первичного документа для заполнения графы КУДиР "Дата и номер первичного документа"
//
// Параметры:
//  ДатаДокумента   - Дата - дата первичного документа для вывода в строку-результат
//
//  НомерДокумента  - Строка - номер первичного документа для подстановки в строку-результат
//
//  ПериодЗаписи    - Дата - период регистрации записи в КУДиР.
//                    Может не совпадать с датой, выводящейся в представление документа.
//                    Например: регистрируется входящий документ с более ранней исходной датой.
//                    В зависимости от периода записи формат возвращаемой строки-представления может быть разным.
//
// Возвращаемое значение:
//   Строка   - строка-представление документа для подстановки в КУДиР
//
Функция РеквизитыПервичногоДокументаДляКУДиР(ДатаДокумента, НомерДокумента, ПериодЗаписи) Экспорт
	
	Если ПериодЗаписи >= Дата(2018, 1, 1) Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, № %2",
			Формат(ДатаДокумента, "ДЛФ=D"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Ложь));
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("№ %1 от %2",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Ложь),
			Формат(ДатаДокумента, "ДЛФ=D"));
	КонецЕсли;
	
КонецФункции

// Определяет, что не требуется сдавать отчетность и уплачивать налог за переданный период (год)
// по причине регистрации организации в декабре этого года (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - проверяемая организация
//  Период        - Дата - проверяемый период
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это пропущенный период
//              (организация зарегистрирована в декабре переданного года, и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодПропущен(Организация, Период, ДатаРегистрации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НалоговыйПериодПропущен = ИнтерфейсыВзаимодействияБРО.НалоговыйПериодПропущен(
		Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		ДатаРегистрации);
	
	Возврат НалоговыйПериодПропущен;
	
КонецФункции

// Определяет, что переданный период находится в пределах расширенного первого налогового периода -
// с даты регистрации в декабре по конец следующего года после регистрации (п. 2 статьи 55 НК РФ).
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - проверяемая организация
//  Период        - Дата - проверяемый период (в пределах расширенного налогового периода)
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это расширенный период
//             (организация зарегистрирована в декабре переданного или прошлого года,
//              и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодРасширен(Организация, Период, ДатаРегистрации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, , ДатаРегистрации);
	
	Возврат НалоговыйПериод.Начало < НалоговыйПериод.Период;
	
КонецФункции

// Описывает контекст, в котором выполняется расчет налога УСН - организацию, период и т.п.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  ПериодРасчета    - Дата - дата из последнего квартала отчетного периода, за который рассчитывается налог.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - расчет не имеет смысла: в указанный период организация еще не зарегистрирована, или не применяет УСН,
//                 или же налог в данном периоде не исчисляется в силу п. 2 статьи 55 НК РФ.
//
Функция НовыйКонтекстРасчетаНалога(Организация, ПериодРасчета) Экспорт
	
	Перем ДатаИзменения;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоОтчетногоПериода = НачалоКвартала(ПериодРасчета);
	КонецОтчетногоПериода = КонецКвартала(ПериодРасчета);
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		КонецОтчетногоПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, ,
		ДатаРегистрации);
		
	Если КонецОтчетногоПериода < НалоговыйПериод.Начало
		ИЛИ НалоговыйПериодПропущен(Организация, КонецОтчетногоПериода, ДатаРегистрации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, КонецОтчетногоПериода, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходы И ДатаИзменения > НачалоОтчетногоПериода Тогда
		ПрименяетсяУСНДоходыВПрошлом = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПрименяетсяУСНДоходыВПрошлом = ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, КонецОтчетногоПериода, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходыМинусРасходы И ДатаИзменения > НачалоОтчетногоПериода Тогда
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, НачалоДня(ДатаИзменения) - 1);
	Иначе
		ПрименяетсяУСНДоходыМинусРасходыВПрошлом = ПрименяетсяУСНДоходыМинусРасходы;
	КонецЕсли;
	
	ПрекращеноПрименениеУСНДоходы = Не ПрименяетсяУСНДоходы И ПрименяетсяУСНДоходыВПрошлом;
	ПрекращеноПрименениеУСНДоходыМинусРасходы = Не ПрименяетсяУСНДоходыМинусРасходы И ПрименяетсяУСНДоходыМинусРасходыВПрошлом;
	
	КонтекстРасчета = Новый Структура;
	
	КонтекстРасчета.Вставить("Организация", Организация);
	КонтекстРасчета.Вставить("Период",      ПериодРасчета);
	
	КонтекстРасчета.Вставить("НачалоНалоговогоПериода", НалоговыйПериод.Начало);
	КонтекстРасчета.Вставить("КонецОтчетногоПериода",   КонецОтчетногоПериода);
	КонтекстРасчета.Вставить("НачалоГода",              НалоговыйПериод.Период);
	
	КонтекстРасчета.Вставить("ПрименяетсяУСНДоходы", (ПрименяетсяУСНДоходы Или ПрименяетсяУСНДоходыВПрошлом));
	КонтекстРасчета.Вставить("ПрименяетсяУСНДоходыМинусРасходы", 
		(ПрименяетсяУСНДоходыМинусРасходы Или ПрименяетсяУСНДоходыМинусРасходыВПрошлом) И Не КонтекстРасчета.ПрименяетсяУСНДоходы);
	
	// Если организация зарегистрирована в текущем году, не имеет смысла рассчитывать налог с начала года.
	НачалоПериодаРасчета = Макс(НалоговыйПериод.Период, НалоговыйПериод.Начало);
	
	ЭтоПервыйОтчетныйПериод      = (НачалоОтчетногоПериода = НачалоКвартала(НачалоПериодаРасчета));
	ЭтоЗавершающийОтчетныйПериод = (КонецОтчетногоПериода = КонецКвартала(НалоговыйПериод.Конец))
		Или ПрекращеноПрименениеУСНДоходы
		Или (ПрекращеноПрименениеУСНДоходыМинусРасходы И Не КонтекстРасчета.ПрименяетсяУСНДоходы);
	
	КонтекстРасчета.Вставить("ЭтоПервыйОтчетныйПериод",      ЭтоПервыйОтчетныйПериод);
	КонтекстРасчета.Вставить("ЭтоЗавершающийОтчетныйПериод", ЭтоЗавершающийОтчетныйПериод);
	
	КонтекстРасчета.Вставить("УменьшатьНалогНаТорговыйСбор",
		УчетУСН.ЕстьПравоУменьшатьНалогНаТорговыйСбор(Организация, КонецОтчетногоПериода));
	
	Возврат КонтекстРасчета;
	
КонецФункции

// Описывает контекст выполнения ежеквартальных регламентных операций для УСН с объектом "доходы-расходы":
// организацию, период и т.п.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  Период           - Дата - дата из квартала, в котором выполняется регламентная операция.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - расчет не имеет смысла: в указанный период организация еще не зарегистрирована,
//                 или не применяет УСН с объектом "доходы минус расходы",
//                 или же переданный квартал не является завершенным отчетным/налоговым периодом в силу п. 2 статьи 55 НК РФ.
//
Функция НовыйКонтекстРегламентнойОперации(Организация, Период) Экспорт
	
	Перем ДатаИзменения;
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода = КонецКвартала(Период);
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, КонецПериода, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходыМинусРасходы И ДатаИзменения > НачалоПериода Тогда
		ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, НачалоДня(ДатаИзменения) - 1);
	КонецЕсли;
	
	Если Не ПрименяетсяУСНДоходыМинусРасходы Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		КонецПериода,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, ,
		ДатаРегистрации);
		
	Если КонецПериода < НалоговыйПериод.Начало
		ИЛИ НалоговыйПериодПропущен(Организация, КонецПериода, ДатаРегистрации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НачалоГода(Период) = НачалоКвартала(Период) Тогда
		// Операции первого квартала выполняются с начала налогового периода.
		// Начало налогового периода и начало квартала могут не совпадать - см.ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод().
		НачалоПериода = Мин(НачалоПериода, НалоговыйПериод.Начало);
	КонецЕсли;
	
	КонтекстОперации = Новый Структура;
	
	КонтекстОперации.Вставить("Организация",   Организация);
	КонтекстОперации.Вставить("Период",        Период);
	КонтекстОперации.Вставить("НачалоПериода", НачалоПериода);
	КонтекстОперации.Вставить("КонецПериода",  КонецПериода);
	
	Возврат КонтекстОперации;
	
КонецФункции

// Определяет сумму отраженных в бухгалтерском учете (начисленных) платежей по налогу УСН за указанный период.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  НачалоПериода    - Дата и время - начало анализируемого периода.
//  КонецПериода     - Дата и время - окончание анализируемого периода.
//
// Возвращаемое значение:
//  Число - сумма начисленного налога (авансовых платежей).
//
Функция НачисленныйНалогЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КонецПериода < НачалоПериода Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;             // Кт 68.12
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("НачалоПериода",        Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",         Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
	Запрос.УстановитьПараметр("СчетОтраженияНалога",  СчетОтраженияНалога);
	Запрос.УстановитьПараметр("ВидыПлатежей",         Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0)) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);
	
КонецФункции

// Проверяет, разрешено ли организации уменьшать налог за данный квартал на суммы уплаченного торгового сбора.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация-налогоплательщик.
//  Период       - Дата - дата в пределах последнего квартала отчетного (налогового) периода.
//
// Возвращаемое значение:
//   Булево   - если Истина, налог можно уменьшить на уплаченный торговый сбор.
//
Функция ЕстьПравоУменьшатьНалогНаТорговыйСбор(Организация, Период) Экспорт
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода  = КонецКвартала(Период);
	
	Если Не (УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период)
		И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьРегионРегистрацииПриУменьшенииНалогаНаТорговыйСбор(Период) Тогда
		Возврат ТорговыйСбор.ОрганизацияЗарегистрированаВРегионеУплатыТорговогоСбора(Организация, Период);
	Иначе
		// При расчете налога за периоды ранее появления проверки в программе - регион не проверяем.
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, применяется ли освобождение от уплаты налога по УСН
//
// Параметры:
//   Период      - Дата - Дата, для которой определяется освобождение от налога
//   Организация - СправочникСсылка.Организации - организация, для которой выполняется проверка освобождения от налога
//
// Возвращаемое значение:
//   Булево
//
Функция ПрименяетсяОсвобождениеОтНалога(Организация, Период) Экспорт
	
	Если НалоговыйУчет.ВозможноОсвобождениеОтНалога(ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН(), Период)
		И НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает размеры ставок налога для переданной организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ОтчетныйПериод - Дата
//
// Возвращаемое значение:
//   Структура:
//      - ОсновнаяСтавка - Число - размер основной ставки налога УСН
//      - ПовышеннаяСтавка - Число - размер повышенной ставки налога УСН
//
Функция СтавкиНалогаУСН(Организация, ОтчетныйПериод) Экспорт
	
	СтавкиНалогаУСН = Новый Структура;
	СтавкиНалогаУСН.Вставить("ОсновнаяСтавка", 0);
	СтавкиНалогаУСН.Вставить("ПовышеннаяСтавка", 0);
	
	СтавкиНалогаУСН.ОсновнаяСтавка = УчетнаяПолитика.СтавкаНалогаУСН(Организация, ОтчетныйПериод);
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ОтчетныйПериод) Тогда
		СтавкиНалогаУСН.ПовышеннаяСтавка = 
			УчетУСНКлиентСервер.НалоговыеСтавкиПоУмолчанию(ОтчетныйПериод).СтавкаУСНДоходыПовышенная;
	Иначе
		СтавкиНалогаУСН.ПовышеннаяСтавка = 
			УчетУСНКлиентСервер.НалоговыеСтавкиПоУмолчанию(ОтчетныйПериод).СтавкаУСНДоходыМинусРасходыПовышенная;
	КонецЕсли;
	
	Возврат СтавкиНалогаУСН;
	
КонецФункции

// Возвращает сведения о применении повышенной ставки налога в отчетном периоде
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию
//   ОтчетныйПериод - Дата - отчетный период, за который рассчитывается налог
//   ИспользоватьДанныеРасчетаНалога - Булево - признак того, что можно использовать данные расчета налога 
//       за предыдущие отчетные периоды 
//
// Возвращаемое значение:
//   Структура:
//      - ПрименяетсяПовышеннаяСтавка - Булево - признак того, что в отчетном периоде применяется повышенная ставка
//      - ПериодПревышенияЛимитов - Дата - отчетный период, в котором превышены границы применения 
//           основной ставки УСН
//      - НалоговаяБазаДоПревышенияЛимитов - Число - налоговая база за период, предшествующий кварталу 
//           превышения границ применения основной ставки УСН.
//      - НалогДоПревышенияЛимитов - Число - налог за период, предшествующий кварталу 
//           превышения 1 порога лимитов применения УСН.
//      - НалоговаяБазаДоПревышенияЛимитовТорговыйСбор - Число - налоговая база по деятельности, облагаемой 
//           торговым сбором, за период, предшествующий кварталу превышения 1 порога лимитов применения УСН.
//      - НалогДоПревышенияЛимитовТорговыйСбор - Число - налог по деятельности, облагаемой торговым сбором, за период,
//           предшествующий кварталу превышения 1 порога лимитов применения УСН.
//      - Ошибки - Массив из Структура - массив ошибок, препятствующих расчету применения повышенной ставки налога.
//
Функция ПараметрыПримененияПовышеннойСтавкиНалога(Организация, ОтчетныйПериод, ИспользоватьДанныеРасчетаНалога = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПрименяетсяПовышеннаяСтавка", Ложь);
	Результат.Вставить("ПериодПревышенияЛимитов", '00010101');
	Результат.Вставить("НалоговаяБазаДоПревышенияЛимитов", 0);
	Результат.Вставить("НалогДоПревышенияЛимитов", 0);
	Результат.Вставить("НалоговаяБазаДоПревышенияЛимитовТорговыйСбор", 0);
	Результат.Вставить("НалогДоПревышенияЛимитовТорговыйСбор", 0);
	Результат.Вставить("Ошибки", Новый Массив);
	
	КонтекстРасчета = НовыйКонтекстРасчетаНалога(Организация, ОтчетныйПериод);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПериодПревышенияЛимитовОсновнойСтавки = ПериодНачалаПримененияПовышеннойСтавкиНалога(
		Организация, КонтекстРасчета.НачалоНалоговогоПериода, КонтекстРасчета.КонецОтчетногоПериода);
	
	Если ПериодПревышенияЛимитовОсновнойСтавки.Ошибки.Количество() > 0 Тогда
		Результат.Ошибки = ПериодПревышенияЛимитовОсновнойСтавки.Ошибки;
		Возврат Результат;
	Иначе
		Результат.ПериодПревышенияЛимитов = ПериодПревышенияЛимитовОсновнойСтавки.Период;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ПериодПревышенияЛимитов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПрименяетсяПовышеннаяСтавка = Истина;
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонтекстРасчета.Период);
	
	СтавкиНалогаУСН = СтавкиНалогаУСН(Организация, ОтчетныйПериод);
	
	Если НачалоКвартала(КонтекстРасчета.НачалоНалоговогоПериода) <> НачалоКвартала(Результат.ПериодПревышенияЛимитов) Тогда
		
		ПредшествующийПериод = КонецКвартала(ДобавитьМесяц(Результат.ПериодПревышенияЛимитов, -3));
		
		Если ИспользоватьДанныеРасчетаНалога Тогда
			ДанныеРасчетаНалога = НалоговаяБазаЗаПериодПоДаннымРасчетаНалога(Организация, ПредшествующийПериод);
		Иначе
			ДанныеРасчетаНалога = Неопределено;
		КонецЕсли;
		
		Если ДанныеРасчетаНалога <> Неопределено Тогда
			
			Результат.НалоговаяБазаДоПревышенияЛимитов = ДанныеРасчетаНалога.НалоговаяБаза;
			Результат.НалогДоПревышенияЛимитов = ДанныеРасчетаНалога.Налог;
			Результат.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор = ДанныеРасчетаНалога.НалоговаяБазаТорговыйСбор;
			Результат.НалогДоПревышенияЛимитовТорговыйСбор = ДанныеРасчетаНалога.НалогТорговыйСбор;
			
		Иначе
			
			ДанныеКУДиР = ДанныеКУДиРЗаПериод(
				Организация, КонтекстРасчета.НачалоНалоговогоПериода, ПредшествующийПериод);
			
			Если КонтекстРасчета.ПрименяетсяУСНДоходы Тогда
				Результат.НалоговаяБазаДоПревышенияЛимитов =
					Окр(ДанныеКУДиР.Доходы, РазрядностьОкругленияПоказателей);
				Результат.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор =
					Окр(ДанныеКУДиР.ДоходыТорговыйСбор, РазрядностьОкругленияПоказателей);
			Иначе
				Результат.НалоговаяБазаДоПревышенияЛимитов =
					Макс(0, Окр(ДанныеКУДиР.Доходы - ДанныеКУДиР.Расходы, РазрядностьОкругленияПоказателей));
			КонецЕсли;
			
			Результат.НалогДоПревышенияЛимитов = Окр(
				Результат.НалоговаяБазаДоПревышенияЛимитов * СтавкиНалогаУСН.ОсновнаяСтавка / 100, 
				РазрядностьОкругленияПоказателей);
			
			Результат.НалогДоПревышенияЛимитовТорговыйСбор = Окр(
				Результат.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор * СтавкиНалогаУСН.ОсновнаяСтавка / 100, 
				РазрядностьОкругленияПоказателей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о средней численности наемных работников за отчетный период.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию
//   НачалоОтчетногоПериода - Дата
//   КонецОтчетногоПериода - Дата
//   УчитыватьРучныеКорректировки - Булево - учитывать сведения о численности, указанные пользователем
//
// Возвращаемое значение:
//   - Число - средняя численность наемных работников за отчетный период
//   - Неопределено - нет сведений о средней численности работников
//
Функция СредняяЧисленностьРаботников(Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода, УчитыватьРучныеКорректировки = Истина) Экспорт
	
	Перем ЧисленностьРаботников;

	ГраницаРаботников =
		КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияОсновнойСтавкиУСН();
	
	Если УчитыватьРучныеКорректировки Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		// Данные о численности хранятся с периодичностью Квартал, поэтому период запроса необходимо привести к границам квартала.
		Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоКвартала(НачалоОтчетногоПериода));
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(КонецОтчетногоПериода));
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СредняяЧисленностьРаботниковОрганизацийСрезПоследних.Организация,
		|	СредняяЧисленностьРаботниковОрганизацийСрезПоследних.Период КАК Период,
		|	СредняяЧисленностьРаботниковОрганизацийСрезПоследних.ЧисленностьРаботников
		|ИЗ
		|	РегистрСведений.СредняяЧисленностьРаботниковОрганизаций.СрезПоследних(&КонецПериода,
		|		Организация = &Организация) КАК СредняяЧисленностьРаботниковОрганизацийСрезПоследних
		|ГДЕ
		|	СредняяЧисленностьРаботниковОрганизацийСрезПоследних.Период >= &НачалоОтчетногоПериода
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если КонецКвартала(Выборка.Период) = КонецКвартала(КонецОтчетногоПериода)
				Или Выборка.ЧисленностьРаботников > ГраницаРаботников Тогда
				ЧисленностьРаботников = Выборка.ЧисленностьРаботников;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧисленностьРаботников = Неопределено
		И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		ДанныеОЧисленности = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(
			Организация, НачалоОтчетногоПериода, КонецОтчетногоПериода);
		
		Возврат ДанныеОЧисленности.СреднесписочнаяЧисленностьРаботников;
	КонецЕсли;
	
	Возврат ЧисленностьРаботников;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Определение вида документа платежа

Функция ЕстьПрочиеРасчетыПоДоходам(ВидОперации) Экспорт
	
	ЕстьРасчетыДоходы = (ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита);
	
	Возврат ЕстьРасчетыДоходы;
	
КонецФункции

Функция ЕстьПрочиеРасчетыПоРасходам(ВидОперации) Экспорт

	ЕстьРасчетыРасходы = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту);
		
	Возврат ЕстьРасчетыРасходы;

КонецФункции

Функция ТребуетсяНастройкаДоходовПоПрочимРасчетам(ВидОперации) Экспорт
	
	ТребуетсяНастройкаДоходов = (ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом);
		
	Возврат ТребуетсяНастройкаДоходов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОСТУПЛЕНИЕ РАСХОДОВ УСН

Процедура ПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты, СуммаСторноРасхода, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаРасходы) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ ЗначениеЗаполнено(СуммаСторноРасхода) Тогда
		СуммаСторноРасхода = 0;
	КонецЕсли;
	
	ТоварыПоОплате    = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	РасходыПоОтгрузке = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	ДопРасходыПоОплате = (УчетнаяПолитика.ПорядокПризнанияДопРасходов(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияДопРасходов.ПоОплатеПоставщику);
	ТаможенныеПлатежиПоОплате = (УчетнаяПолитика.ПорядокПризнанияТаможенныхПлатежей(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияТаможенныхПлатежей.ПоОплате);
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ДвиженияРасхода = Движения.РасходыПриУСН;
	СчетУчетаТопливо = ПланыСчетов.Хозрасчетный.ТопливоВБаке;
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаРасходы Цикл

		НомерСтроки     = НомерСтроки + 1;
		ДвижениеРасхода = ДвиженияРасхода.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Реквизиты);
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, СтрокаТаблицы);

		ДвижениеРасхода.НомерСтрокиДокумента = НомерСтроки;
		ДвижениеРасхода.РасчетныйДокумент    = Реквизиты.Регистратор;

		Если Реквизиты.ЭтоВозврат ИЛИ Реквизиты.РасходыПредпринимателя Тогда
			РасходыПоОплате = ((ТоварыПоОплате И СтрокаТаблицы.ЭтоТовар) ИЛИ (МатериалыПоОплате И СтрокаТаблицы.ЭтоМатериал));
			Если Реквизиты.РасходыПредпринимателя И РасходыПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
			КонецЕсли;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура
			И ДвижениеРасхода.СчетУчета = СчетУчетаТопливо Тогда
			
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура
					ИЛИ ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			Если ДопРасходыПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
			Если ТаможенныеПлатежиПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС_ТС Тогда
			Если ВыделятьНДСУСН Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДвижениеРасхода.ЭлементРасхода) = Тип("СправочникСсылка.Билеты") Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		Иначе
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		КонецЕсли;

		Если Реквизиты.УчетАгентскогоНДС Тогда

			ДвижениеРасходаНДС = ДвиженияРасхода.Добавить();
			ДвижениеРасходаНДС.Период				= Реквизиты.Период;
			ДвижениеРасходаНДС.Организация			= Реквизиты.Организация;
			ДвижениеРасходаНДС.Валюта 				= Реквизиты.Валюта;
			ДвижениеРасходаНДС.РасчетныйДокумент 	= Реквизиты.Регистратор;
			ДвижениеРасходаНДС.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Налоги;
			ДвижениеРасходаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			ДвижениеРасходаНДС.СчетУчета 			= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			ДвижениеРасходаНДС.НомерСтрокиДокумента = НомерСтроки;
			ДвижениеРасходаНДС.ОтражениеВУСН        = ДвижениеРасхода.ОтражениеВУСН;
			ДвижениеРасходаНДС.Сумма                = ДвижениеРасхода.НДС;
			
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
			ДвижениеРасхода.НДС = 0;

		КонецЕсли;

		Если Реквизиты.ЭтоВозврат И ДвижениеРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			ДвижениеРасхода.НДС = 0;
			Если РасходыПоОплате Тогда // Если по оплате, ...
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			Иначе // Если по отгрузке, ... (товары или материалы)
				СуммаСторноРасхода = СуммаСторноРасхода + ДвижениеРасхода.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыделятьНДСУСН
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.НДС_ТС) Тогда
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
		КонецЕсли;
		
	КонецЦикла;

	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата> - дата документа
	+ "Регистратор,"			// <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"			// <СправочникСсылка.Организации> - из документа
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "УчетАгентскогоНДС,"		// <Булево> - из реквизита договора "УчетАгентскогоНДС"
	+ "ЭтоВозврат,"				// <Булево> - является ли документ возвратом?
	+ "РасходыПредпринимателя," // <Булево>
	+ "Валюта"					// <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы содержимого документа:
	СписокОбязательныхКолонок = ""
	+ "ВидРасхода," 		// <ПеречислениеСсылка.ВидыРасходовУСН>
	+ "СтатусыПартийУСН," 	// <ПеречислениеСсылка.СтатусыПартийУСН>
	+ "ЭлементРасхода," 	// <Неопределенно, СправочникСсылка.ОсновныеСредства, //СправочникСсылка.НематериальныеАктивы, //СправочникСсылка.РасходыБудущихПериодов, //СправочникСсылка.Номенклатура, //СправочникСсылка.ФизическиеЛица>
	+ "ЭтоТовар," 			//<Булево> - обычно определяется по счету учета
	+ "ЭтоМатериал,"		//<Булево> - обычно определяется по счету учета
	+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный >
	+ "Партия,"				// <ДокументСсылка.ХХХ >
	+ "Количество,"			// <Число>
	+ "Сумма,"				// <Число> - в валюте взаиморасчетов и всегда с НДС в т.ч. В случае отгрузки и реализации – сумма реализации. В случае возврата – сумма себестоимости.
	+ "НДС,"			    // <Число> - в валюте взаиморасчетов
	+ "ОтражениеВУСН"		// <перечислениеСсылка.ОтраженияВУСН> -
	;
	Параметры.Вставить("ТаблицаРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура КорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРасходы)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];	
	
	// при корректировке поступления приход производим по правилам учетной политики на дату исходного документа
	ТоварыПоОплате    = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	РасходыПоОтгрузке = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	ДопРасходыПоОплате = (УчетнаяПолитика.ПорядокПризнанияДопРасходов(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияДопРасходов.ПоОплатеПоставщику);
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ДвиженияРасхода = Движения.РасходыПриУСН;
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаРасходы Цикл

		НомерСтроки     = НомерСтроки + 1;
		ДвижениеРасхода = ДвиженияРасхода.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Реквизиты);
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, СтрокаТаблицы);

		ДвижениеРасхода.НомерСтрокиДокумента = НомерСтроки;
		// при корректировке поступления расчетным документом является корректируемый документ
		ДвижениеРасхода.РасчетныйДокумент    = Реквизиты.ДокументПоступленияСсылка;

		Если Реквизиты.ЭтоВозврат Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура)				
					ИЛИ (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП) Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
					И ДопРасходыПоОплате Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
					И (НЕ ДопРасходыПоОплате) Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		Иначе
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		КонецЕсли;

		Если Реквизиты.УчетАгентскогоНДС Тогда

			ДвижениеРасходаНДС = ДвиженияРасхода.Добавить();
			ДвижениеРасходаНДС.Период				= Реквизиты.Период;
			ДвижениеРасходаНДС.Организация			= Реквизиты.Организация;
			ДвижениеРасходаНДС.Валюта 				= Реквизиты.Валюта;
			ДвижениеРасходаНДС.РасчетныйДокумент 	= Реквизиты.ДокументПоступленияСсылка;
			ДвижениеРасходаНДС.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Налоги;
			ДвижениеРасходаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			ДвижениеРасходаНДС.СчетУчета 			= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			ДвижениеРасходаНДС.НомерСтрокиДокумента = НомерСтроки;
			ДвижениеРасходаНДС.ОтражениеВУСН        = ДвижениеРасхода.ОтражениеВУСН;
			ДвижениеРасходаНДС.Сумма                = ДвижениеРасхода.НДС;
			
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
			ДвижениеРасхода.НДС = 0;

		КонецЕсли;

		Если Реквизиты.ЭтоВозврат И ДвижениеРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			ДвижениеРасхода.НДС = 0;
			РасходыПоОплате = ((ТоварыПоОплате И СтрокаТаблицы.ЭтоТовар) ИЛИ (МатериалыПоОплате И СтрокаТаблицы.ЭтоМатериал));
			Если РасходыПоОплате Тогда // Если по оплате, ...
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			КонецЕсли;
		КонецЕсли;

		Если ВыделятьНДСУСН И
			(СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаТаблицы <> Перечисления.ВидыРасходовУСН.НМА) Тогда
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
		КонецЕсли;
		
	КонецЦикла;

	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					   // <Дата> - дата документа корректировки
	+ "Регистратор,"			   // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"			   // <СправочникСсылка.Организации> - из документа
	+ "ДоговорКонтрагента,"		   // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументПоступленияСсылка," // <ДокументСсылка.ПоступлениеТоваровУслуг> - корректируемый документ
	+ "ДокументПоступленияДата,"   // <Дата> - дата корректируемого документа поступления
	+ "УчетАгентскогоНДС,"		   // <Булево> - из реквизита договора "УчетАгентскогоНДС"
	+ "ЭтоВозврат,"				   // <Булево> - является ли документ возвратом?
	+ "Валюта"					   // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы содержимого документа:
	СписокОбязательныхКолонок = ""
	+ "ВидРасхода," 		// <ПеречислениеСсылка.ВидыРасходовУСН>
	+ "СтатусыПартийУСН," 	// <ПеречислениеСсылка.СтатусыПартийУСН>
	+ "ЭлементРасхода," 	// <Неопределенно, СправочникСсылка.ОсновныеСредства, //СправочникСсылка.НематериальныеАктивы, //СправочникСсылка.РасходыБудущихПериодов, //СправочникСсылка.Номенклатура, //СправочникСсылка.ФизическиеЛица>
	+ "ЭтоТовар," 			//<Булево> - обычно определяется по счету учета
	+ "ЭтоМатериал,"		//<Булево> - обычно определяется по счету учета
	+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный >
	+ "Партия,"				// <ДокументСсылка.ХХХ >
	+ "Количество,"			// <Число>
	+ "Сумма,"				// <Число> - в валюте взаиморасчетов и всегда с НДС в т.ч. В случае отгрузки и реализации – сумма реализации. В случае возврата – сумма себестоимости.
	+ "НДС,"			    // <Число> - в валюте взаиморасчетов
	+ "ОтражениеВУСН"		// <перечислениеСсылка.ОтраженияВУСН> -
	;
	Параметры.Вставить("ТаблицаРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ КУДиР УСН

Процедура СформироватьДвиженияКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СтрокаКниги = Движения.КнигаУчетаДоходовИРасходов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаКниги, Реквизиты);
	
	СтрокаКниги.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокументаДляКУДиР(
		Реквизиты.Период, Реквизиты.Номер, Реквизиты.Период);
	
	СтрокаКниги.Содержание = Реквизиты.Содержание + Реквизиты.НомерГТД;
	
	Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"		 // <Дата> - дата документа
	+ "Номер,"		 // <Строка> - номер документа
	+ "Регистратор," // <ДокументСсылка> - документ-регистратор движений
	+ "Организация," // <СправочникСсылка.Организации> - из документа
	+ "Графа4,"		 // <Число,15,2>
	+ "Графа5,"		 // <Число,15,2>
	+ "Графа6,"		 // <Число,15,2>
	+ "Графа7,"		 // <Число,15,2>
	+ "Содержание,"  // <Строка>
	+ "НомерГТД,"    // <СправочникСсылка.НомераГТД>
	+ "НДС"			 // <Число,15,2>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ - ОТРАЖЕНИЕ В УСН

Функция ПодготовитьПараметрыКорректировкаПоступленияУСН(ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"						      // <Дата> - дата документа
	+ "Регистратор,"			          // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"				      // <СправочникСсылка.Организации> - из документа
	+ "ПрименяетсяУСН,"                   // <Булево> из учетной политики на дату корректируемого документа
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево> из учетной политики на дату корректируемого документа
	+ "ПорядокПризнанияРасходовПоНДС,"    // <ПеречислениеСсылка.ПорядокПризнанияРасходовПоНДС> из учетной политики на дату корректируемого документа
	+ "ЭтоКорректировкаПрошлогоПериода,"  // <Булево> признак, что корректируется документ прошлого года
	+ "Контрагент,"					      // <СправочникСсылка.Контрагенты> - из документа
	+ "ДоговорКонтрагента,"			      // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументПоступленияСсылка,"        // <ДокументСсылка.ПоступлениеТоваровУслуг> - корректируемый документ
	+ "ДокументПоступленияДата,"          // <Дата> - дата корректироемого документа
	+ "Валюта,"                           // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	+ "КурсДокумента,"                    // <Число(10, 4)> - курс валюты корректируемого документа
	+ "КратностьДокумента,"               // <Число(10, 0)> - кратность  корректируемого документа
	+ "УчетАгентскогоНДС"			      // <Булево> - из реквизита договора "УчетАгентскогоНДС"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА РЕАЛИЗАЦИИ - ОТРАЖЕНИЕ В УСН

Функция ПодготовитьПараметрыКорректировкаРеализацииУСН(ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"						      // <Дата> - дата документа
	+ "Регистратор,"			          // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"				      // <СправочникСсылка.Организации> - из документа
	+ "ПрименяетсяУСН,"                   // <Булево> из учетной политики на дату корректируемого документа
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево> из учетной политики на дату корректируемого документа
	+ "ПорядокПризнанияРасходовПоНДС,"    // <ПеречислениеСсылка.ПорядокПризнанияРасходовПоНДС> из учетной политики на дату корректируемого документа
	+ "ЭтоКорректировкаПрошлогоПериода,"  // <Булево> признак, что корректируется документ прошлого года
	+ "Контрагент,"					      // <СправочникСсылка.Контрагенты> - из документа
	+ "ДоговорКонтрагента,"			      // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументРеализацииСсылка,"        // <ДокументСсылка.РеализацияТоваровУслуг> - корректируемый документ
	+ "ДокументРеализацииДата,"          // <Дата> - дата корректироемого документа
	+ "Валюта,"                           // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	+ "СуммаВключаетНДС"			      // <Булево> - из реквизита документа "СуммаВключаетНДС"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЕ ДОБРОВОЛЬНО НАЧИСЛЕННОГО НДС ПО РЕАЛИЗАЦИИ ИЗ ДОХОДОВ

// Возвращает сведения о суммах предъявленного НДС (в рублях)
// по собственным товарам и услугам в оплачиваемых документах реализации
//
Функция ПодготовитьТаблицуНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетов, ТаблицаРеквизитов) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")
			Или ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
			Или ПолучитьФункциональнуюОпцию("УплачиватьНДСспецРежимы")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период)
	 Или Не УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыТаблицыНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДокументыРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(Параметры.Взаиморасчеты, "ДокументРасчетов", Истина);
	
	ДокументыРеализацииСНДС = СоздатьНачисленныйНДСПоРеализации(
		МенеджерВременныхТаблиц,
		Реквизиты.Период,
		Реквизиты.Организация,
		ДокументыРасчетов);
	
	Если Не СоздатьСуммыДокументовРеализации(МенеджерВременныхТаблиц, ДокументыРеализацииСНДС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_НачисленныйНДС.ДокументРасчетов КАК ДокументРасчетов,
	|	ВТ_НачисленныйНДС.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ_НачисленныйНДС.НДС КАК НДС,
	|	ЕСТЬNULL(ВТ_СуммыДокументов.ВалютаДокумента, &ВалютаРегламентированногоУчета) КАК ВалютаРеализации,
	|	ЕСТЬNULL(ВТ_СуммыДокументов.КурсДокумента, 1) КАК КурсРеализации,
	|	ЕСТЬNULL(ВТ_СуммыДокументов.КратностьДокумента, 1) КАК КратностьРеализации,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_СуммыДокументов.СуммаДокумента ЕСТЬ NULL
	|			ТОГДА ВТ_СуммыДокументов.СуммаДокумента
	|		ИНАЧЕ ВТ_НачисленныйНДС.СуммаБезНДС + ВТ_НачисленныйНДС.НДС
	|	КОНЕЦ КАК ВыручкаВсего
	|ИЗ
	|	ВТ_НачисленныйНДС КАК ВТ_НачисленныйНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммыДокументов КАК ВТ_СуммыДокументов
	|		ПО ВТ_НачисленныйНДС.ДокументРасчетов = ВТ_СуммыДокументов.Ссылка"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетов, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "Регистратор,"     // <ДокументСсылка>
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "ВидОперации";     // <ПеречислениеСсылка.*> - вид операции документа

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));

	// Подготовка таблицы Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов"; // <ДокументСсылка> - оплачиваемый документ реализации с выделенным НДС
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ДокументыПоТипам(Документы)
	
	ДокументыПоТипам = Новый Соответствие;
	
	Для Каждого Документ Из Документы Цикл
		
		ТипДокумента = ТипЗнч(Документ);
		
		ДокументыПоТипу = ДокументыПоТипам[ТипДокумента];
		
		Если ДокументыПоТипу = Неопределено Тогда
			ДокументыПоТипам.Вставить(ТипДокумента, Новый Массив);
			ДокументыПоТипу = ДокументыПоТипам[ТипДокумента];
		КонецЕсли;
		
		ДокументыПоТипу.Добавить(Документ);
	
	КонецЦикла;
	
	Возврат ДокументыПоТипам;
	
КонецФункции

Функция ТекстЗапросаДанныеДокумента(МетаданныеДокумента)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	&ИмяПоляВалюта,
	|	&ИмяПоляКурс,
	|	&ИмяПоляКратность,
	|	&ИмяПоляСумма
	|ИЗ
	|	&ИмяТаблицыДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&ИмяПараметраДокументы)"
	;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляВалюта",    ИмяПоляВалютаДокумента(МетаданныеДокумента));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКурс",      ИмяПоляКурсДокумента(МетаданныеДокумента));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКратность", ИмяПоляКратностьДокумента(МетаданныеДокумента));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма",     ИмяПоляСуммаДокумента(МетаданныеДокумента));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыДокумента", "Документ." + МетаданныеДокумента.Имя);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметраДокументы", "Документы" + МетаданныеДокумента.Имя);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИмяПоляВалютаДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ВалютаДокумента";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОтгрузки", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ДокументОтгрузки.ВалютаДокумента";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ИмяПоляКурсДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.КурсВзаиморасчетов";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОтгрузки", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ДокументОтгрузки.КурсВзаиморасчетов";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ИмяПоляКратностьДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.КратностьВзаиморасчетов";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОтгрузки", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ДокументОтгрузки.КратностьВзаиморасчетов";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ИмяПоляСуммаДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если МетаданныеДокумента.Имя = "ОтчетКомитентуОПродажах" Тогда
		ИмяПоля = "ТаблицаДокумента.СуммаВознаграждения";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.СуммаДокумента";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ТекстОбъединениеЗапросов()
	
	Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Процедура СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВалютныхОстатков) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты	= ТаблицаРеквизиты[0];
	Если Реквизиты.Период >= '20130101' Тогда
		// С 2013 доходы и расходы от переоценки валютных ценностей при исчислении УСН не определяются и не учитываются.
		Возврат;
	КонецЕсли;
	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты);
	Реквизиты	= Параметры.Реквизиты[0];
	
	ПрименяетсяУСНДоходыМинусРасходы	= УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);

	ТаблицаПереоценка = Параметры.ТаблицаПереоценка;
	ТаблицаПереоценка.Свернуть("ВалютаПредставление, Счет, СчетПредставление, СчетНаименование, НомерБанковскогоСчета", "СуммаПереоценки");
	
	СчетаПереоценкиУСН = СчетаПереоценкиУСН();
	РеквизитыПервичногоДокумента	= НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
	
	Для Каждого СтрокаПереоценка Из ТаблицаПереоценка Цикл
		
		Если СчетаПереоценкиУСН.Найти(СтрокаПереоценка.Счет) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПереоценка.СуммаПереоценки > 0 Тогда
			
			Если НЕ ПустаяСтрока(СтрокаПереоценка.НомерБанковскогоСчета) Тогда
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Доход от переоценки %1 на счете %2, расчетный счет № ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.НомерБанковскогоСчета);
			Иначе
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Доход от переоценки %1 на счете %2 ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.СчетНаименование);
			КонецЕсли;
			
			ЗаписьКУДиР	= Движения.КнигаУчетаДоходовИРасходов.Добавить();
			ЗаписьКУДиР.Период			= Реквизиты.Период;
			ЗаписьКУДиР.Активность		= Истина;
			ЗаписьКУДиР.Организация		= Реквизиты.Организация;
			ЗаписьКУДиР.Графа4			= СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа5			= СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа6			= 0;
			ЗаписьКУДиР.Графа7			= 0;
			ЗаписьКУДиР.НДС				= 0;
			ЗаписьКУДиР.ЭтапПроведения	=-1;
			ЗаписьКУДиР.Содержание		= Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента	= РеквизитыПервичногоДокумента;
			
		ИначеЕсли СтрокаПереоценка.СуммаПереоценки < 0 И ПрименяетсяУСНДоходыМинусРасходы Тогда
			
			Если НЕ ПустаяСтрока(СтрокаПереоценка.НомерБанковскогоСчета) Тогда
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Расходы от переоценки %1 на счете %2, расчетный счет № ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.НомерБанковскогоСчета);
			Иначе
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Расходы от переоценки %1 на счете %2 ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.СчетНаименование);
			КонецЕсли;
			
			ЗаписьКУДиР	= Движения.КнигаУчетаДоходовИРасходов.Добавить();
			ЗаписьКУДиР.Период			= Реквизиты.Период;
			ЗаписьКУДиР.Активность		= Истина;
			ЗаписьКУДиР.Организация		= Реквизиты.Организация;
			ЗаписьКУДиР.Графа4			= 0;
			ЗаписьКУДиР.Графа5			= 0;
			ЗаписьКУДиР.Графа6			=-СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа7			=-СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.НДС				= 0;
			ЗаписьКУДиР.ЭтапПроведения	=-1;
			ЗаписьКУДиР.Содержание		= Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента	= РеквизитыПервичногоДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.КнигаУчетаДоходовИРасходов.Записывать	= Истина;
		
КонецПроцедуры

Функция ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"		// <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация"			// <СправочникСсылка.Организации> - организация документа
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "Счет,"					// <ПланСчетовСсылка.Хозрасчетный> - переоцениваемый счет
	+ "СчетПредставление,"		// <Строка> -код  переоцениваемого счета
	+ "СчетНаименование,"		// <Строка> - наименование переоцениваемого счета
	+ "Субконто1,"				// <> - значение аналитики переоцениваемого счета
	+ "Субконто2,"				// <> - значение аналитики переоцениваемого счета
	+ "Субконто3,"				// <> - значение аналитики переоцениваемого счета
	+ "Валюта,"					// <СправочникСсылка.Валюты> - переоцениваемая валюта
	+ "ВалютаПредставление,"	// <Строка> - представление перецениваемой валюты
	+ "НомерБанковскогоСчета,"	// <Строка> - номер банковского счета (Субконто1)
	+ "СуммаПереоценки"			// <Число(15,2)> - сумма переоценки
	;
	Параметры.Вставить("ТаблицаПереоценка", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВалютныхОстатков, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция СчетаПереоценкиУСН()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|		И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2009Кв1(ПоказателиОтчета) Экспорт
	
	// Раздел 1
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005003", Истина, Ложь);
	
	// Раздел 2
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Ложь);
	//РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020028003", Истина, Ложь);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2014Кв1(ПоказателиОтчета) Экспорт

	// Раздел 2.1
	
	// признак налогоплательщика
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010203", Истина, Ложь);
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210012003", Истина, Ложь);
	
	// расходы, уменьшающие налог
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014303", Истина, Ложь);
	
	// Раздел 2.2
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021303", Истина, Ложь);
	
	// расходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026303", Истина, Ложь);
	
	// убытки прошлых лет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220023003", Истина, Ложь);

КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2015Кв1(ПоказателиОтчета) Экспорт

	// Раздел 2.1.1
	
	// признак налогоплательщика
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110010203", Истина, Ложь);
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011303", Истина, Ложь);
	
	// ставки налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012303", Истина, Ложь);
	
	// расходы, уменьшающие налог
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014303", Истина, Ложь);
	
	// Раздел 2.1.2
	
	// доходы ТС
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011303", Истина, Ложь);
	
	// расходы, уменьшающие налог по ТС
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014303", Истина, Ложь);
	
	// Уплаченный торговый сбор
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015303", Истина, Ложь);
	
	// Раздел 2.2
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021303", Истина, Ложь);
	
	// расходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026303", Истина, Ложь);
	
	// убытки прошлых лет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220023003", Истина, Ложь);

КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2021Кв1(ПоказателиОтчета) Экспорт
	
	КлючиПоказателей = КлючиПоказателейДекларации2021Кв1();
	
	// Раздел 2.1 (для объекта "Доходы")
	
	КлючиПоказателей21 = КлючиПоказателей.Раздел21;
	
	// Подраздел 2.1.1 - основной
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
		КлючиПоказателей21.ПризнакНалогоплательщика, Истина, Ложь);
	
	Для НомерКвартала = 1 По 4 Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["Доходы" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["СтавкаНалога" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["УменьшениеНалога" + НомерКвартала], Истина, Ложь);
	КонецЦикла;
	
	// Подраздел 2.1.2 - для плательщиков торгового сбора
	Для НомерКвартала = 1 По 4 Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["ДоходыТС" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["УменьшениеНалогаТС" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей21["УплаченныйТорговыйСбор" + НомерКвартала], Истина, Ложь);
	КонецЦикла;
	
	// Раздел 2.2 (для объекта "Доходы минус расходы")
	
	КлючиПоказателей22 = КлючиПоказателей.Раздел22;
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
		КлючиПоказателей22.УбытокПрошлыхЛет, Истина, Ложь);
	
	Для НомерКвартала = 1 По 4 Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей22["Доходы" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей22["Расходы" + НомерКвартала], Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета,
			КлючиПоказателей22["СтавкаНалога" + НомерКвартала], Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,
											"РегистрацияВНалоговомОргане, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
	РегистрацияВНалоговомОргане = РеквизитыОрганизации.РегистрацияВНалоговомОргане;
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");		
			
	Ставка = Контейнер.Раздел2.П000020020103;
	Раздел1 = Контейнер.Раздел1;
	Раздел2 = Контейнер.Раздел2;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("парамНачалоГода",            НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&парамНачалоГода, &парамКонецОтчетногоПериода, , Организация = &парамОрганизация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Доходы = 0;
	Расходы = 0;
	Пока Выборка.Следующий() Цикл
		Доходы = Доходы + ?(Выборка.Графа5Оборот = Null, 0, Выборка.Графа5Оборот);
		Расходы = Расходы + ?(Выборка.Графа7Оборот = Null, 0, Выборка.Графа7Оборот);
	КонецЦикла;
	
	ПрименяетсяУСНДоходы = Ложь;
	 		
	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&парамКонецОтчетногоПериода,
	|			Организация = &парамОрганизация
	|				И ПрименяетсяУСН) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ПрименяетсяУСНДоходы = ВыборкаДетальныеЗаписи.ПрименяетсяУСНДоходы;	
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходы Тогда // Объект налогообложения "Доходы"
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = 0;
		
		ВзносыПФ = 0;
		
		Если Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) >= 2013 Тогда
			
			// взносы и иные выплаты, уменьшающие сумму налога, с 2013 г. отражаются в 4 разделе документа "ЗаписьКУДиР"
			
			ДатаНачалоГода = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			ДатаКонецГода  = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			
			ЭтоИПБезРаботников = Ложь;
			
			Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// для ИП - проверим, производились ли выплаты работникам и прочим физлицам (письмо Минфина РФ от 21 мая 2013 г. N 03-11-11/17926)
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация КАК Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецОтчетногоПериода, , Счет = &СчетЗарплаты, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(
				|			&НачалоГода,
				|			&КонецОтчетногоПериода,
				|			,
				|			Счет В (&СчетаВзносов),
				|			&ВидСубконтоВидыПлатежей,
				|			Организация = &Организация
				|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
				|			,
				|			) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0"
				;
				
				Запрос.УстановитьПараметр("Организация",             ПараметрыОтчета.Организация);
				Запрос.УстановитьПараметр("НачалоГода",              ДатаНачалоГода);
				Запрос.УстановитьПараметр("КонецОтчетногоПериода",   ДатаКонецГода);
				Запрос.УстановитьПараметр("СчетЗарплаты",            ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
				Запрос.УстановитьПараметр("ВидСубконтоВидыПлатежей", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
				
				СчетаВзносов = Новый Массив;
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);	// 69.02.1 - до 2014 года
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);	// 69.02.2 - до 2014 года
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);	// 69.02.7 - с 2014 года
				
				Запрос.УстановитьПараметр("СчетаВзносов", СчетаВзносов);
				
				Результат = Запрос.Выполнить();
				
				ЭтоИПБезРаботников = Результат.Пустой();
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("НачалоГода",            ДатаНачалоГода);
			Запрос.УстановитьПараметр("КонецОтчетногоПериода", ДатаКонецГода);
			Запрос.УстановитьПараметр("ЭтоИПБезРаботников",    ЭтоИПБезРаботников);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(КнигаРаздел4.ПФРОборот + КнигаРаздел4.ФОМСОборот + ВЫБОР
			|				КОГДА &ЭтоИПБезРаботников
			|					ТОГДА 0
			|				ИНАЧЕ КнигаРаздел4.ФССОборот + КнигаРаздел4.ФСС_НСОборот + КнигаРаздел4.БольничныеОборот + КнигаРаздел4.ДобровольноеСтрахованиеОборот
			|			КОНЕЦ), 0) КАК СуммаКУменьшениюНалога
			|ИЗ
			|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоГода, &КонецОтчетногоПериода, , Организация = &Организация) КАК КнигаРаздел4";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ВзносыПФ = Выборка.СуммаКУменьшениюНалога;
			
			Строка080 = Доходы * Ставка / 100;
			Если ЭтоИПБезРаботников Тогда
				// Для ИП, не производивших выплаты работникам и прочим физлицам, ограничение в 50% не действует (Письмо Минфина от 02.04.2013 N 03-11-09/10547)
				ВзносыПФ = Мин(Строка080, ВзносыПФ);
			Иначе
				ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			КонецЕсли;
			
		Иначе
			// до 2012 года включительно - старый порядок заполнения
			НачДатаОплаты = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			КонДатаОплаты = КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);
			
			Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20100101' Тогда
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ТФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамОрганизация", 	ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("парамНачалоГода", 	НачДатаОплаты);
			Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонДатаОплаты);
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ВзносыПФ = ВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Строка080 = Доходы * Ставка / 100;
			ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			
			// взносы по стоимости страхового года
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Страх_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Нак_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
			
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ИПВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ИПВзносыПФ = ИПВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Если ИПВзносыПФ <> 0 Тогда
				ВзносыПФ = ВзносыПФ + ИПВзносыПФ;
				Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20120101' Тогда					
					ВзносыПФ = Мин(Строка080, ВзносыПФ);
				Иначе
					ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
				КонецЕсли;					
			КонецЕсли;
			
		КонецЕсли;
		
		Раздел2.П000020028003 = ВзносыПФ;
		
	Иначе // Объект налогообложения "Доходы минус расходы"
		
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация,
			НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		СуммаНеПеренесенныхУбытков       = УбыткиПрошлыхЛет.ПеренесенныеУбытки;
		УбытокОтУплатыМинимальногоНалога = УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
		
		НалоговаяБазаТекПериод  = Доходы - Расходы - УбытокОтУплатыМинимальногоНалога;
		УменьшениеНалоговойБазы = ?(НалоговаяБазаТекПериод > 0, Мин(НалоговаяБазаТекПериод, СуммаНеПеренесенныхУбытков), 0);
		
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = Расходы + УбытокОтУплатыМинимальногоНалога;
		Раздел2.П000020023003 = УменьшениеНалоговойБазы;
		Раздел2.П000020028003 = 0;
		
	КонецЕсли;
	
	// заполним авансовые платежи
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ДобавитьМесяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета, -3)));
	
	Запрос.УстановитьПараметр("СчетОтраженияНалога",  ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД); // Дт 99.01.1
	Запрос.УстановитьПараметр("СчетНачисленияНалога", ПланыСчетов.Хозрасчетный.ЕНприУСН); // Кт 68.12

	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК АвансовыйПлатеж,
	|	КВАРТАЛ(ХозрасчетныйОборотыДтКт.Период) КАК НомерКвартала
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоГода,
	|			&КонецПериода,
	|			Квартал,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	АвансовыеПлатежи = Запрос.Выполнить().Выгрузить();
	
	ПлатежиНарастающимИтогом = 0;
	
	Для НомерКвартала = 1 По 3 Цикл
		
		СтрокаПлатежа = АвансовыеПлатежи.Найти(НомерКвартала, "НомерКвартала");
		Если СтрокаПлатежа <> Неопределено Тогда
			ПлатежиНарастающимИтогом = ПлатежиНарастающимИтогом + СтрокаПлатежа.АвансовыйПлатеж;
		КонецЕсли;
		
		НомерГрафы = "П00001000"+ (НомерКвартала + 2) + "003";
		Раздел1[НомерГрафы] = ПлатежиНарастающимИтогом;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	// Замер длительности автозаполнения: начало
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;

	НачалоПериода       = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода        = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница = Новый Граница(КонецПериода, ВидГраницы.Включая);

	ПрименяетсяУСНДоходы = Ложь;

	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецПериода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ПрименяетсяУСН) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрименяетсяУСНДоходы = Выборка.ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	// Необходимо учесть, что торговый сбор в 1 квартале уплачивается за квартал, относящийся к предыдущему налоговому периоду
	УменьшатьНалогНаТорговыйСбор = ПрименяетсяУСНДоходы
		И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(
			ПараметрыОтчета.Организация,
			ДобавитьМесяц(НачалоПериода, -12),
			КонецПериода);
	
	ЭтоИПБезВыплатФизлицам = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация)
		И НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);

	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));

	Если ПрименяетсяУСНДоходы Тогда
		// ставка налога общая для всей декларации
		СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, КонецПериода);
		Контейнер.Раздел21["П000210012003"] = СтавкаИзУП;
	КонецЕсли;
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		Если ПрименяетсяУСНДоходы Тогда
			СтрокаПериода.СтавкаНалога = Контейнер.Раздел21["П000210012003"];
		Иначе
			// ставки налога задаются для каждого из отчетных периодов
			ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
			СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
			СтрокаПериода.СтавкаНалога    = СтавкаИзУП;
		КонецЕсли;
		
	КонецЦикла;
	
	// показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот, 0) КАК Доходы,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот, 0) КАК ДоходыТорговыйСбор,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|		ПО (ВТ_Периоды.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Периоды.НомерКвартала"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ) КАК Период,
		|	КнигаРаздел4.ДеятельностьНаТорговомСборе,
		|	КнигаРаздел4.ПФРОборот КАК ПФР,
		|	КнигаРаздел4.ФССОборот КАК ФСС,
		|	КнигаРаздел4.ФОМСОборот КАК ФОМС,
		|	КнигаРаздел4.ФСС_НСОборот КАК ФСС_НС,
		|	КнигаРаздел4.БольничныеОборот КАК Больничные,
		|	КнигаРаздел4.ДобровольноеСтрахованиеОборот КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ВТ_Раздел4Обороты
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаРаздел4
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
		|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.НомерКвартала,
		|	ВТ_Периоды.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
			|	ВТ_Периоды.Период,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
			|ИЗ
			|	ВТ_Периоды КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
			|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
			|			И (ВТ_Раздел4Обороты.ДеятельностьНаТорговомСборе)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.НомерКвартала,
			|	ВТ_Периоды.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКвартала"
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();

	УбыткиПрошлыхЛет = Неопределено;
	Если НЕ ПрименяетсяУСНДоходы Тогда
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	КонецЕсли;
	
	УплаченныйТорговыйСбор = Неопределено;
	Если УменьшатьНалогНаТорговыйСбор Тогда
		УплаченныйТорговыйСбор = УплаченныйТорговыйСборПоКварталамНарастающимИтогом(
			ПараметрыОтчета.Организация,
			НачалоПериода,
			КонецПериода);
	КонецЕсли;
	
	// заполнение показателей отчета
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	ИтогоДоходыТС                  = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[1].Выгрузить();
	
	Если ПрименяетсяУСНДоходы Тогда // объект налогообложения "доходы"
		
		РазрядностьОкругления = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонецПериода);
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		ЗаполняемыйРаздел["П000210010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[3].Выгрузить();
		
		ТаблицаРасходыУменьшающиеНалогТС = Неопределено;
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТаблицаРасходыУменьшающиеНалогТС = РезультатЗапросаНалоговаяБаза[4].Выгрузить();
		КонецЕсли;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы   + СтрокаДоходов.Доходы;
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаДоходов.ДоходыТорговыйСбор;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог
				+ СтрокаРасходовУменьшающихНалог.ПФР + СтрокаРасходовУменьшающихНалог.ФОМС
				+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалог.ФСС + СтрокаРасходовУменьшающихНалог.ФСС_НС
					+ СтрокаРасходовУменьшающихНалог.Больничные + СтрокаРасходовУменьшающихНалог.ДобровольноеСтрахование);
			
			НалоговаяБаза    = Окр(ИтогоДоходы, РазрядностьОкругления);
			НалогОтБазы      = Окр(ИтогоДоходы*СтрокаПериода.СтавкаНалога/100, РазрядностьОкругления);
			УменьшениеНалога = Мин(Окр(НалогОтБазы*КоэффМаксУменьшенияНалога, РазрядностьОкругления), ИтогоРасходыУменьшающиеНалог);
			
			// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
			// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на торговом сборе.
			// В соответствии письмом ФНС от 14 августа 2015 г. N ГД-4-3/14386@ суммы вычитаемого из налога торгового сбора добавляются к строкам 140-143.
			Если УменьшатьНалогНаТорговыйСбор Тогда
				
				СтрокаРасходовУменьшающихНалогТС = ТаблицаРасходыУменьшающиеНалогТС[СтрокаПериода.НомерКвартала-1];
				СтрокаУплаченногоТорговогоСбора  = УплаченныйТорговыйСбор[СтрокаПериода.НомерКвартала - 1];
				
				ИтогоРасходыУменьшающиеНалогТС   = ИтогоРасходыУменьшающиеНалогТС
					+ СтрокаРасходовУменьшающихНалогТС.ПФР + СтрокаРасходовУменьшающихНалогТС.ФОМС
					+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалогТС.ФСС + СтрокаРасходовУменьшающихНалогТС.ФСС_НС
						+ СтрокаРасходовУменьшающихНалогТС.Больничные + СтрокаРасходовУменьшающихНалогТС.ДобровольноеСтрахование);
				
				НалоговаяБазаТС    = Окр(ИтогоДоходыТС, РазрядностьОкругления);
				НалогОтБазыТС      = Окр(НалоговаяБазаТС*СтрокаПериода.СтавкаНалога/100, РазрядностьОкругления);
				УменьшениеНалогаТС = Мин(Окр(НалогОтБазыТС*КоэффМаксУменьшенияНалога, РазрядностьОкругления), ИтогоРасходыУменьшающиеНалогТС);
				НалогТСКУплате     = НалогОтБазыТС - УменьшениеНалогаТС;
				
				ТорговыйСборУплаченоНачислено = СтрокаУплаченногоТорговогоСбора.УплаченоСНачалаГода;
				ТорговыйСборВычитаемый = Мин(НалогТСКУплате, ТорговыйСборУплаченоНачислено);
				
				// добавляем вычитаемый торговый сбор к показателю строки 14х
				УменьшениеНалога = Мин(УменьшениеНалога + ТорговыйСборВычитаемый, НалогОтБазы);
				
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000210011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000210014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
	Иначе // объект налогообложения "доходы минус расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			// в последнем квартела года учтем перенесенные убытки прошлых лет
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
				ЗаполняемыйРаздел["П000220023003"] = УменьшениеНалоговойБазы;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Замер длительности автозаполнения: окончание
	ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяОкончанияОперации - ВремяНачалаОперации;
	ИмяСобытия = СтрШаблон(
		НСтр("ru = 'Заполнение регламентированных отчетов.Декларация по УСН за %1 год'"),
		Формат(Год(КонецПериода), "ЧГ=0"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Отчеты.РегламентированныйОтчетУСН.Формы.ФормаОтчета2014Кв1,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)'"), Длительность),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер) Экспорт

	// Замер длительности автозаполнения: начало
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;

	НачалоГода              = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода            = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница     = Новый Граница(КонецПериода, ВидГраницы.Включая);
	
	Если ПараметрыОтчета.Свойство("ДатаНачалаРасширенногоПериодаОтчета") Тогда
		// Для зарегистрированных в декабре при подаче декларации за следующий год начало налогового периода - дата регистрации.
		НачалоНалоговогоПериода = ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета;
	Иначе
		НачалоНалоговогоПериода = НачалоГода;
	КонецЕсли;
	
	ПрименяетсяУСНДоходы = Ложь;
	
	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецПериода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ПрименяетсяУСН) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрименяетсяУСНДоходы = Выборка.ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	// Необходимо учесть, что торговый сбор в 1 квартале уплачивается за квартал, относящийся к предыдущему налоговому периоду
	УменьшатьНалогНаТорговыйСбор = ЕстьПравоУменьшатьНалогНаТорговыйСбор(
		ПараметрыОтчета.Организация,
		КонецПериода);
	
	ЭтоИПБезВыплатФизлицам = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация)
		И НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(ПараметрыОтчета.Организация, НачалоНалоговогоПериода, КонецПериода);

	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоГода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		// ставки налога задаются для каждого из отчетных периодов
		ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоГода, (НомерКвартала-1)*3));
		СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
		СтрокаПериода.СтавкаНалога = СтавкаИзУП;
		
		Если ПрименяетсяУСНДоходы Тогда
			ИмяЯчейки = "П002110012" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел21[ИмяЯчейки] = СтавкаИзУП;
		Иначе
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
		КонецЕсли;
		
	КонецЦикла;
	
	// Показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовОбороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Период,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот) КАК Доходы,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот) КАК ДоходыТорговыйСбор,
	|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот) КАК Расходы
	|ПОМЕСТИТЬ ВТ_ДоходыИРасходыОбороты
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовОбороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(ВТ_ДоходыИРасходыОбороты.Доходы, 0) КАК Доходы,
	|	ЕСТЬNULL(ВТ_ДоходыИРасходыОбороты.ДоходыТорговыйСбор, 0) КАК ДоходыТорговыйСбор,
	|	ЕСТЬNULL(ВТ_ДоходыИРасходыОбороты.Расходы, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоходыИРасходыОбороты КАК ВТ_ДоходыИРасходыОбороты
	|		ПО ВТ_Периоды.Период = ВТ_ДоходыИРасходыОбороты.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Периоды.НомерКвартала"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ГОД(КнигаРаздел4.Период) < ГОД(&КонецПериода)
		|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ)
		|	КОНЕЦ КАК Период,
		|	КнигаРаздел4.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
		|	СУММА(КнигаРаздел4.ПФРОборот) КАК ПФР,
		|	СУММА(КнигаРаздел4.ФССОборот) КАК ФСС,
		|	СУММА(КнигаРаздел4.ФОМСОборот) КАК ФОМС,
		|	СУММА(КнигаРаздел4.ФСС_НСОборот) КАК ФСС_НС,
		|	СУММА(КнигаРаздел4.БольничныеОборот) КАК Больничные,
		|	СУММА(КнигаРаздел4.ДобровольноеСтрахованиеОборот) КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ВТ_Раздел4Обороты
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаРаздел4
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ГОД(КнигаРаздел4.Период) < ГОД(&КонецПериода)
		|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ)
		|	КОНЕЦ,
		|	КнигаРаздел4.ДеятельностьНаТорговомСборе
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период КАК Период,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
		|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.НомерКвартала,
		|	ВТ_Периоды.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
			|	ВТ_Периоды.Период,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
			|ИЗ
			|	ВТ_Периоды КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
			|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
			|			И (ВТ_Раздел4Обороты.ДеятельностьНаТорговомСборе)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.НомерКвартала,
			|	ВТ_Периоды.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКвартала"
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();

	УбыткиПрошлыхЛет = Неопределено;
	Если НЕ ПрименяетсяУСНДоходы Тогда
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация, НачалоГода, КонецПериода);
	КонецЕсли;
	
	УплаченныйТорговыйСбор = Неопределено;
	Если УменьшатьНалогНаТорговыйСбор Тогда
		УплаченныйТорговыйСбор = УплаченныйТорговыйСборПоКварталамНарастающимИтогом(
			ПараметрыОтчета.Организация,
			НачалоНалоговогоПериода,
			КонецПериода);
	КонецЕсли;
	
	// заполнение показателей отчета
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	ИтогоДоходыТС                  = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[2].Выгрузить();
	
	Если ПрименяетсяУСНДоходы Тогда // объект налогообложения "доходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		ЗаполняемыйРаздел["П002110010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[4].Выгрузить();
		
		ТаблицаРасходыУменьшающиеНалогТС = Неопределено;
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТаблицаРасходыУменьшающиеНалогТС = РезультатЗапросаНалоговаяБаза[5].Выгрузить();
		КонецЕсли;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы + СтрокаДоходов.Доходы;
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаДоходов.ДоходыТорговыйСбор;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог
				+ СтрокаРасходовУменьшающихНалог.ПФР + СтрокаРасходовУменьшающихНалог.ФОМС
				+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалог.ФСС + СтрокаРасходовУменьшающихНалог.ФСС_НС
					+ СтрокаРасходовУменьшающихНалог.Больничные + СтрокаРасходовУменьшающихНалог.ДобровольноеСтрахование);
			
			НалоговаяБаза    = Окр(ИтогоДоходы, 0);
			НалогОтБазы      = Окр(НалоговаяБаза*СтрокаПериода.СтавкаНалога/100, 0);
			УменьшениеНалога = Мин(Окр(НалогОтБазы*КоэффМаксУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалог);
			
			// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
			// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на торговом сборе.
			Если УменьшатьНалогНаТорговыйСбор Тогда
				
				СтрокаРасходовУменьшающихНалогТС = ТаблицаРасходыУменьшающиеНалогТС[СтрокаПериода.НомерКвартала-1];
				СтрокаУплаченногоТорговогоСбора  = УплаченныйТорговыйСбор[СтрокаПериода.НомерКвартала - 1];
				
				ИтогоРасходыУменьшающиеНалогТС   = ИтогоРасходыУменьшающиеНалогТС
					+ СтрокаРасходовУменьшающихНалогТС.ПФР + СтрокаРасходовУменьшающихНалогТС.ФОМС
					+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалогТС.ФСС + СтрокаРасходовУменьшающихНалогТС.ФСС_НС
						+ СтрокаРасходовУменьшающихНалогТС.Больничные + СтрокаРасходовУменьшающихНалогТС.ДобровольноеСтрахование);
				
				НалоговаяБазаТС    = Окр(ИтогоДоходыТС, 0);
				НалогОтБазыТС      = Окр(НалоговаяБазаТС*СтрокаПериода.СтавкаНалога/100, 0);
				УменьшениеНалогаТС = Мин(Окр(НалогОтБазыТС*КоэффМаксУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалогТС);
				
				ТорговыйСборУплачено = СтрокаУплаченногоТорговогоСбора.УплаченоСНачалаГода;
				
				ЗаполняемыйРаздел["П002120011" + ИдКвартала + "03"] = ИтогоДоходыТС;
				ЗаполняемыйРаздел["П002120014" + ИдКвартала + "03"] = УменьшениеНалогаТС;
				ЗаполняемыйРаздел["П002120015" + ИдКвартала + "03"] = ТорговыйСборУплачено;
				
			КонецЕсли;
			
			ЗаполняемыйРаздел["П002110011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П002110014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
	Иначе // объект налогообложения "доходы минус расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			// в последнем квартела года учтем перенесенные убытки прошлых лет
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
				ЗаполняемыйРаздел["П000220023003"] = УменьшениеНалоговойБазы;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Замер длительности автозаполнения: окончание
	ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяОкончанияОперации - ВремяНачалаОперации;
	ИмяСобытия = СтрШаблон(
		НСтр("ru = 'Заполнение регламентированных отчетов.Декларация по УСН за %1 год'"),
		Формат(Год(КонецПериода), "ЧГ=0"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Отчеты.РегламентированныйОтчетУСН.Формы.ФормаОтчета2014Кв1,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)'"), Длительность),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

#Область ЗаполнениеДекларацииФормаОтчета2021Кв1

Процедура ЗаполнитьОтчетУСНФормаОтчета2021Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах(); // Для замера длительности
	
	Если Не УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияДекларации2021Кв1(ПараметрыОтчета);
	
	ДанныеКУДиР = ДанныеКУДиРЗаПериодПоКварталам(
		ПараметрыЗаполнения.Организация,
		ПараметрыЗаполнения.НачалоПериода,
		ПараметрыЗаполнения.КонецПериода,
		Истина,
		ПараметрыЗаполнения.ПрименяетсяУСНДоходы,
		ПараметрыЗаполнения.ПрименяетсяВычетНаТорговыйСбор);
	
	СтавкиНалога = СтавкиНалогаУСНЗаПериод(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.КонецПериода, ДанныеКУДиР.Раздел1);
	
	КлючиПоказателей = КлючиПоказателейДекларации2021Кв1();
	
	Если ПараметрыЗаполнения.ПрименяетсяУСНДоходы Тогда // Объект налогообложения "доходы"
		
		ЗаполнитьДекларацию2021ОбъектДоходы(
			ПараметрыЗаполнения,
			ДанныеКУДиР,
			СтавкиНалога,
			Контейнер.Раздел21,
			КлючиПоказателей.Раздел21);
		
	Иначе // Объект налогообложения "доходы минус расходы"
		
		ЗаполнитьДекларацию2021ОбъектДоходыМинусРасходы(
			ПараметрыЗаполнения,
			ДанныеКУДиР,
			СтавкиНалога,
			Контейнер.Раздел22,
			КлючиПоказателей.Раздел22);
		
	КонецЕсли;
	
	// Замер длительности автозаполнения: окончание
	ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяОкончанияОперации - ВремяНачалаОперации;
	ИмяСобытия = СтрШаблон(
		НСтр("ru = 'Заполнение регламентированных отчетов.Декларация по УСН за %1 год'"),
		Формат(Год(ПараметрыЗаполнения.КонецПериода), "ЧГ=0"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Отчеты.РегламентированныйОтчетУСН.Формы.ФормаОтчета2021Кв1,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)'"), Длительность),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

Процедура ЗаполнитьДекларацию2021ОбъектДоходы(ПараметрыЗаполнения, ДанныеКУДиР, СтавкиНалога, ЗаполняемыйРаздел, КлючиРаздела)
	
	ЗаполняемыйРаздел[КлючиРаздела.ПризнакНалогоплательщика]
		= ПризнакНалогоплательщикаВДекларацииУСНДоходы(ПараметрыЗаполнения.ПредпринимательБезСотрудников);
	
	КоэффициентПредельногоУменьшенияНалога = КоэффициентУменьшенияНалогаУСНДоходы(ПараметрыЗаполнения.ПредпринимательБезСотрудников);
	
	ИтогоДоходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	НалоговаяБазаДоПовышенияСтавки = 0;
	НалогДоПовышенияСтавки = 0;
	
	ИтогоДоходыТС = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	ИтогоТорговыйСборУплачено = 0;
	НалоговаяБазаДоПовышенияСтавкиТС = 0;
	НалогДоПовышенияСтавкиТС = 0;
	
	Для Каждого СтрокаНалоговойБазы Из ДанныеКУДиР.Раздел1 Цикл
		
		НомерКвартала = СтрокаНалоговойБазы.НомерКвартала;
		ТекущийПериод = СтрокаНалоговойБазы.Период;
		
		ОтборКвартал = Новый Структура("НомерКвартала", НомерКвартала);
		
		СтрокиСтавки = СтавкиНалога.НайтиСтроки(ОтборКвартал);
		ТекущаяСтавкаНалога = ?(СтрокиСтавки.Количество() > 0, СтрокиСтавки[0].СтавкаНалога, 0);
		ПовышеннаяСтавка = ?(СтрокиСтавки.Количество() > 0, СтрокиСтавки[0].ПовышеннаяСтавка, Ложь);
		
		ИтогоДоходы = ИтогоДоходы + СтрокаНалоговойБазы.Доходы;
		
		УменьшающиеРасходыЗаКвартал = ДанныеКУДиР.Раздел4.НайтиСтроки(ОтборКвартал);
		Для Каждого СтрокаРасхода Из УменьшающиеРасходыЗаКвартал Цикл
			ИтогоРасходыУменьшающиеНалог = ИтогоРасходыУменьшающиеНалог + СтрокаРасхода.ПФР + СтрокаРасхода.ФОМС;
			Если Не ПараметрыЗаполнения.ПредпринимательБезСотрудников Тогда
				ИтогоРасходыУменьшающиеНалог = ИтогоРасходыУменьшающиеНалог
					+ СтрокаРасхода.ФСС + СтрокаРасхода.ФСС_НС + СтрокаРасхода.Больничные + СтрокаРасхода.ДобровольноеСтрахование;
			КонецЕсли;
		КонецЦикла;
		
		Если ПовышеннаяСтавка Тогда
			НалоговаяБаза = Макс(Окр(ИтогоДоходы, 0) - НалоговаяБазаДоПовышенияСтавки, 0);
			ТекущийНалог = Окр(НалоговаяБаза * ТекущаяСтавкаНалога / 100, 0) + НалогДоПовышенияСтавки;
		Иначе
			НалоговаяБаза = Окр(ИтогоДоходы, 0);
			ТекущийНалог = Окр(НалоговаяБаза * ТекущаяСтавкаНалога / 100, 0);
			НалоговаяБазаДоПовышенияСтавки = НалоговаяБаза;
			НалогДоПовышенияСтавки = ТекущийНалог;
		КонецЕсли;
		
		УменьшениеНалога = Мин(Окр(ТекущийНалог * КоэффициентПредельногоУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалог);
		
		// Передадим рассчитанные показатели в БРО.
		ЗаполняемыйРаздел[КлючиРаздела["СтавкаНалога" + НомерКвартала]]     = ТекущаяСтавкаНалога;
		ЗаполняемыйРаздел[КлючиРаздела["Доходы" + НомерКвартала]]           = ИтогоДоходы;
		ЗаполняемыйРаздел[КлючиРаздела["УменьшениеНалога" + НомерКвартала]] = УменьшениеНалога;
		
		// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
		// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на торговом сборе.
		// Для таких налогоплательщиков заполняется подраздел 2.1.2.
		Если ПараметрыЗаполнения.ПрименяетсяВычетНаТорговыйСбор Тогда
			
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаНалоговойБазы.ДоходыТорговыйСбор;
			
			ОтборРасходовТС = Новый Структура("НомерКвартала, ДеятельностьНаТорговомСборе", НомерКвартала, Истина);
			УменьшающиеРасходыЗаКварталТС = ДанныеКУДиР.Раздел4.НайтиСтроки(ОтборРасходовТС);
			Для Каждого СтрокаРасхода Из УменьшающиеРасходыЗаКварталТС Цикл
				ИтогоРасходыУменьшающиеНалогТС = ИтогоРасходыУменьшающиеНалогТС + СтрокаРасхода.ПФР + СтрокаРасхода.ФОМС;
				Если Не ПараметрыЗаполнения.ПредпринимательБезСотрудников Тогда
					ИтогоРасходыУменьшающиеНалогТС = ИтогоРасходыУменьшающиеНалогТС
						+ СтрокаРасхода.ФСС + СтрокаРасхода.ФСС_НС + СтрокаРасхода.Больничные + СтрокаРасхода.ДобровольноеСтрахование;
				КонецЕсли;
			КонецЦикла;
			
			Если ПовышеннаяСтавка Тогда
				НалоговаяБазаТС = Макс(Окр(ИтогоДоходыТС, 0) - НалоговаяБазаДоПовышенияСтавкиТС, 0);
				ТекущийНалогТС = Окр(НалоговаяБазаТС * ТекущаяСтавкаНалога / 100, 0) + НалогДоПовышенияСтавкиТС;
			Иначе
				НалоговаяБазаТС = Окр(ИтогоДоходыТС, 0);
				ТекущийНалогТС = Окр(НалоговаяБазаТС * ТекущаяСтавкаНалога / 100, 0);
				НалоговаяБазаДоПовышенияСтавкиТС = НалоговаяБазаТС;
				НалогДоПовышенияСтавкиТС = ТекущийНалогТС;
			КонецЕсли;
			
			УменьшениеНалогаТС = Мин(Окр(ТекущийНалогТС * КоэффициентПредельногоУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалогТС);
			
			ОтборУплаченныйТорговыйСбор = Новый Структура("НомерКвартала", НомерКвартала);
			УплаченныйТорговыйСборЗаКвартал = ДанныеКУДиР.Раздел5.НайтиСтроки(ОтборУплаченныйТорговыйСбор);
			Для Каждого СтрокаУплатыТорговогоСбора Из УплаченныйТорговыйСборЗаКвартал Цикл
				ИтогоТорговыйСборУплачено = ИтогоТорговыйСборУплачено + СтрокаУплатыТорговогоСбора.УплаченныйТорговыйСбор;
			КонецЦикла;
			
			// Передадим рассчитанные показатели в БРО.
			ЗаполняемыйРаздел[КлючиРаздела["ДоходыТС" + НомерКвартала]]               = ИтогоДоходыТС;
			ЗаполняемыйРаздел[КлючиРаздела["УменьшениеНалогаТС" + НомерКвартала]]     = УменьшениеНалогаТС;
			ЗаполняемыйРаздел[КлючиРаздела["УплаченныйТорговыйСбор" + НомерКвартала]] = ИтогоТорговыйСборУплачено;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДекларацию2021ОбъектДоходыМинусРасходы(ПараметрыЗаполнения, ДанныеКУДиР, СтавкиНалога, ЗаполняемыйРаздел, КлючиРаздела)
	
	УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(
		ПараметрыЗаполнения.Организация,
		ПараметрыЗаполнения.НачалоПериода,
		ПараметрыЗаполнения.КонецПериода);
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	
	Для Каждого СтрокаНалоговойБазы Из ДанныеКУДиР.Раздел1 Цикл
		
		НомерКвартала = СтрокаНалоговойБазы.НомерКвартала;
		ТекущийПериод = СтрокаНалоговойБазы.Период;
		
		ОтборКвартал = Новый Структура("НомерКвартала", НомерКвартала);
		СтрокиСтавки = СтавкиНалога.НайтиСтроки(ОтборКвартал);
		ТекущаяСтавкаНалога = ?(СтрокиСтавки.Количество() > 0, СтрокиСтавки[0].СтавкаНалога, 0);
		
		ИтогоДоходы  = ИтогоДоходы  + СтрокаНалоговойБазы.Доходы;
		ИтогоРасходы = ИтогоРасходы + СтрокаНалоговойБазы.Расходы;
		
		// В последнем квартела года учтем перенесенные убытки прошлых лет.
		Если СтрокаНалоговойБазы.НомерКвартала = 4 Тогда
			ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
			НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
			УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
			ЗаполняемыйРаздел[КлючиРаздела["УбытокПрошлыхЛет"]] = УменьшениеНалоговойБазы;
		КонецЕсли;
		
		// Передадим рассчитанные показатели в БРО.
		ЗаполняемыйРаздел[КлючиРаздела["СтавкаНалога" + НомерКвартала]] = ТекущаяСтавкаНалога;
		ЗаполняемыйРаздел[КлючиРаздела["Доходы" + НомерКвартала]]       = ИтогоДоходы;
		ЗаполняемыйРаздел[КлючиРаздела["Расходы" + НомерКвартала]]      = ИтогоРасходы;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеКУДиРЗаПериодПоКварталам(Организация, НачалоПериода, КонецПериода, Раздел1 = Истина, Раздел4 = Ложь, Раздел5 = Ложь)
	
	ДанныеКУДиР = Новый Структура("Раздел1, Раздел4, Раздел5");
	
	ТекстыЗапросов     = Новый Массив;
	ИндексыРезультатов = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",     КонецПериода);
	Запрос.УстановитьПараметр("ТаблицаКварталов", НоваяТаблицаКварталов(НачалоПериода, КонецПериода));
	
	// Временная таблица периодов для представления результата за каждый квартал, в том числе и с отсутствующими оборотами.
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаКварталов.Период КАК Период,
	|	ТаблицаКварталов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ Кварталы
	|ИЗ
	|	&ТаблицаКварталов КАК ТаблицаКварталов"
	);
	
	// Подготовка данных разделов КУДиР.
	
	Если Раздел1 = Истина Тогда
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел1.Период, КВАРТАЛ) КАК Период,
		|	СУММА(КнигаРаздел1.Графа5Оборот) КАК Доходы,
		|	СУММА(КнигаРаздел1.Графа7Оборот) КАК Расходы,
		|	СУММА(КнигаРаздел1.ДоходТорговыйСборОборот) КАК ДоходыТорговыйСбор
		|ПОМЕСТИТЬ ДанныеРаздел1
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаРаздел1
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(КнигаРаздел1.Период, КВАРТАЛ)"
		);
		
		ИндексыРезультатов.Вставить("Раздел1", ТекстыЗапросов.Количество());
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Кварталы.Период КАК Период,
		|	Кварталы.НомерКвартала КАК НомерКвартала,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел1.Доходы, 0)) КАК Доходы,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел1.Расходы, 0)) КАК Расходы,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел1.ДоходыТорговыйСбор, 0)) КАК ДоходыТорговыйСбор
		|ИЗ
		|	Кварталы КАК Кварталы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаздел1 КАК ДанныеРаздел1
		|		ПО Кварталы.Период = ДанныеРаздел1.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Кварталы.Период,
		|	Кварталы.НомерКвартала
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		
	КонецЕсли;
	
	Если Раздел4 = Истина Тогда
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ) КАК Период,
		|	КнигаРаздел4.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
		|	СУММА(КнигаРаздел4.ПФРОборот) КАК ПФР,
		|	СУММА(КнигаРаздел4.ФССОборот) КАК ФСС,
		|	СУММА(КнигаРаздел4.ФОМСОборот) КАК ФОМС,
		|	СУММА(КнигаРаздел4.ФСС_НСОборот) КАК ФСС_НС,
		|	СУММА(КнигаРаздел4.БольничныеОборот) КАК Больничные,
		|	СУММА(КнигаРаздел4.ДобровольноеСтрахованиеОборот) КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ДанныеРаздел4
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаРаздел4
		|
		|СГРУППИРОВАТЬ ПО
		|	КнигаРаздел4.ДеятельностьНаТорговомСборе,
		|	НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период"
		);
		
		ИндексыРезультатов.Вставить("Раздел4", ТекстыЗапросов.Количество());
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Кварталы.Период КАК Период,
		|	Кварталы.НомерКвартала КАК НомерКвартала,
		|	ЕСТЬNULL(ДанныеРаздел4.ДеятельностьНаТорговомСборе, ЛОЖЬ) КАК ДеятельностьНаТорговомСборе,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ДанныеРаздел4.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	Кварталы КАК Кварталы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаздел4 КАК ДанныеРаздел4
		|		ПО Кварталы.Период = ДанныеРаздел4.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Кварталы.Период,
		|	Кварталы.НомерКвартала,
		|	ЕСТЬNULL(ДанныеРаздел4.ДеятельностьНаТорговомСборе, ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		
	КонецЕсли;
	
	Если Раздел5 = Истина Тогда
		
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел5.Период, КВАРТАЛ) КАК Период,
		|	СУММА(КнигаРаздел5.СуммаТорговогоСбораОборот) КАК УплаченныйТорговыйСбор
		|ПОМЕСТИТЬ ДанныеРаздел5
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел5.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаРаздел5
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(КнигаРаздел5.Период, КВАРТАЛ)"
		);
		
		ИндексыРезультатов.Вставить("Раздел5", ТекстыЗапросов.Количество());
		ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Кварталы.Период КАК Период,
		|	Кварталы.НомерКвартала КАК НомерКвартала,
		|	ЕСТЬNULL(ДанныеРаздел5.УплаченныйТорговыйСбор, 0) КАК УплаченныйТорговыйСбор
		|ИЗ
		|	Кварталы КАК Кварталы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаздел5 КАК ДанныеРаздел5
		|		ПО Кварталы.Период = ДанныеРаздел5.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период"
		);
		
	КонецЕсли;
	
	// Итоговый запрос и сборка результатов.
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Для Каждого ИндексРезультата Из ИндексыРезультатов Цикл
		ДанныеКУДиР[ИндексРезультата.Ключ] = Результаты[ИндексРезультата.Значение].Выгрузить();
	КонецЦикла;
	
	Возврат ДанныеКУДиР;
	
КонецФункции

Функция ПараметрыЗаполненияДекларации2021Кв1(ПараметрыОтчета)
	
	// Транслируем параметры отчета из БРО в параметры для методов автозаполнения.
	
	Организация   = ПараметрыОтчета.Организация;
	НачалоПериода = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета); // Расширенный налоговый период не поддерживается - отменен с 2019 года.
	КонецПериода  = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("Организация",   Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода",  КонецПериода);
	
	ПараметрыЗаполнения.Вставить("НалоговыйПериодРасширен", НачалоГода(НачалоПериода) < НачалоГода(КонецПериода));
	
	ПараметрыЗаполнения.Вставить("ПрименяетсяУСНДоходы",
		УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(Организация, НачалоПериода, КонецПериода));
	ПараметрыЗаполнения.Вставить("ПрименяетсяВычетНаТорговыйСбор",
		ЕстьПравоУменьшатьНалогНаТорговыйСбор(Организация, КонецПериода));
	ПараметрыЗаполнения.Вставить("ПредпринимательБезСотрудников",
		ПараметрыЗаполнения.ПрименяетсяУСНДоходы
		И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Не УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, КонецПериода));
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция КлючиПоказателейДекларации2021Кв1()
	
	КлючиПоказателей = Новый Структура;
	
	// Раздел 2.1 (для объекта "Доходы")
	
	КлючиПоказателей.Вставить("Раздел21", Новый Структура);
	
	Раздел21 = КлючиПоказателей.Раздел21;
	
	// Подраздел 2.1.1 - основной
	Раздел21.Вставить("ПризнакНалогоплательщика", "П002110010203");
	
	Раздел21.Вставить("Доходы1", "П002110011003");
	Раздел21.Вставить("Доходы2", "П002110011103");
	Раздел21.Вставить("Доходы3", "П002110011203");
	Раздел21.Вставить("Доходы4", "П002110011303");
	
	Раздел21.Вставить("СтавкаНалога1", "П002110012003");
	Раздел21.Вставить("СтавкаНалога2", "П002110012103");
	Раздел21.Вставить("СтавкаНалога3", "П002110012203");
	Раздел21.Вставить("СтавкаНалога4", "П002110012303");
	
	Раздел21.Вставить("УменьшениеНалога1", "П002110014003");
	Раздел21.Вставить("УменьшениеНалога2", "П002110014103");
	Раздел21.Вставить("УменьшениеНалога3", "П002110014203");
	Раздел21.Вставить("УменьшениеНалога4", "П002110014303");
	
	// Подраздел 2.1.2 - для плательщиков торгового сбора
	Раздел21.Вставить("ДоходыТС1", "П002120011003");
	Раздел21.Вставить("ДоходыТС2", "П002120011103");
	Раздел21.Вставить("ДоходыТС3", "П002120011203");
	Раздел21.Вставить("ДоходыТС4", "П002120011303");
	
	Раздел21.Вставить("УменьшениеНалогаТС1", "П002120014003");
	Раздел21.Вставить("УменьшениеНалогаТС2", "П002120014103");
	Раздел21.Вставить("УменьшениеНалогаТС3", "П002120014203");
	Раздел21.Вставить("УменьшениеНалогаТС4", "П002120014303");
	
	Раздел21.Вставить("УплаченныйТорговыйСбор1", "П002120015003");
	Раздел21.Вставить("УплаченныйТорговыйСбор2", "П002120015103");
	Раздел21.Вставить("УплаченныйТорговыйСбор3", "П002120015203");
	Раздел21.Вставить("УплаченныйТорговыйСбор4", "П002120015303");
	
	// Раздел 2.2 (для объекта "Доходы минус расходы")
	
	КлючиПоказателей.Вставить("Раздел22", Новый Структура);
	
	Раздел22 = КлючиПоказателей.Раздел22;
	
	Раздел22.Вставить("Доходы1", "П000220021003");
	Раздел22.Вставить("Доходы2", "П000220021103");
	Раздел22.Вставить("Доходы3", "П000220021203");
	Раздел22.Вставить("Доходы4", "П000220021303");
	
	Раздел22.Вставить("Расходы1", "П000220022003");
	Раздел22.Вставить("Расходы2", "П000220022103");
	Раздел22.Вставить("Расходы3", "П000220022203");
	Раздел22.Вставить("Расходы4", "П000220022303");
	
	Раздел22.Вставить("УбытокПрошлыхЛет", "П000220023003");
	
	Раздел22.Вставить("СтавкаНалога1", "П000220026003");
	Раздел22.Вставить("СтавкаНалога2", "П000220026103");
	Раздел22.Вставить("СтавкаНалога3", "П000220026203");
	Раздел22.Вставить("СтавкаНалога4", "П000220026303");
	
	Возврат КлючиПоказателей;
	
КонецФункции

// Возвращает значение признака налогоплательщика для подстановки в декларацию УСН при объекте "Доходы".
//
// Параметры:
//  ПредпринимательБезСотрудников - Булево - если Истина, декларация сдается предпринимателем,
//                                           не осуществляющим выплаты физлицам.
// Возвращаемое значение:
//   Строка - значение признака налогоплательщика в соответствии с форматом декларации.
//
Функция ПризнакНалогоплательщикаВДекларацииУСНДоходы(ПредпринимательБезСотрудников)
	
	Если ПредпринимательБезСотрудников Тогда
		Возврат "2";
	Иначе
		Возврат "1";
	КонецЕсли;
	
КонецФункции

// Определяет предельную долю уменьшения налога УСН-доходы на суммы страховых взносов, больничных
// и добровольного страхования в зависимости от характера налогоплательщика.
//
// Параметры:
//  ПредпринимательБезСотрудников - Булево - если Истина, налогоплательщик является предпринимателем,
//                                           не осуществляющим выплаты физлицам.
//
// Возвращаемое значение:
//   Число - предельная доля уменьшения налога (от 0 до 1).
//
Функция КоэффициентУменьшенияНалогаУСНДоходы(ПредпринимательБезСотрудников)
	
	Если ПредпринимательБезСотрудников Тогда
		Возврат 1;
	Иначе
		Возврат 0.5;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьУведомлениеОПереходеНаУСН(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ТекущийПериод    = ТекущаяДатаСеанса();
	ПредыдущийПериод = НачалоМесяца(ДобавитьМесяц(ТекущийПериод, -1));
	СледующийПериод  = НачалоГода(ДобавитьМесяц(ТекущийПериод,12));
	
	Контейнер.Вставить("ГОД_ПОДАЧИ_УВЕДОМЛЕНИЯ", Формат(ТекущийПериод,"ДФ=гггг"));
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"ОГРН,ДатаРегистрации,КодНалоговогоОргана");
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения)
		И ТипЗнч(ПараметрыОтчета.ПараметрыЗаполнения) = Тип("Структура")
		И ПараметрыОтчета.ПараметрыЗаполнения.Свойство("КОД_НО")
		И ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения.КОД_НО) Тогда
		
		Контейнер.Вставить("КОД_НО", ПараметрыОтчета.ПараметрыЗаполнения.КОД_НО);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыОрганизации.КодНалоговогоОргана) Тогда
		
		Контейнер.Вставить("КОД_НО", РеквизитыОрганизации.КодНалоговогоОргана);
		
	КонецЕсли;
	
	#Область ПризнакНалогоплательщика
	
	ПРИЗНАК_НП = "1"; // Первичная регистрация
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОГРН)
		ИЛИ ЗначениеЗаполнено(РеквизитыОрганизации.ДатаРегистрации) Тогда
		Если (УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, ПредыдущийПериод)
			И УчетнаяПолитика.ПлательщикЕНВД(Организация, ПредыдущийПериод))
			И НЕ УчетнаяПолитика.ПлательщикЕНВД(Организация, ТекущийПериод) Тогда
			ПРИЗНАК_НП = "2"; // Переход с ЕНВД
		Иначе
			ПРИЗНАК_НП = "3"; // Переход с других режимов
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.Вставить("ПРИЗНАК_НП", ПРИЗНАК_НП);
	
	#КонецОбласти
	
	#Область ПорядокПерехода
	
	КОД_ПЕРЕХОДА = "";
	Если ПРИЗНАК_НП = "1" Тогда
		КОД_ПЕРЕХОДА = "2";
	ИначеЕсли ПРИЗНАК_НП = "2" Тогда
		КОД_ПЕРЕХОДА = "3";
		Контейнер.Вставить("ДАТА_ПЕРЕХОДА", НачалоМесяца(ТекущийПериод));
	ИначеЕсли ПРИЗНАК_НП = "3" Тогда
		КОД_ПЕРЕХОДА = "1";
		Контейнер.Вставить("ГОД_ПЕРЕХОДА_1", Формат(СледующийПериод,"ДФ=гггг"));
	КонецЕсли;
	
	Контейнер.Вставить("КОД_ПЕРЕХОДА", КОД_ПЕРЕХОДА);
	
	#КонецОбласти
	
	#Область ОбъектНалогообложения
	
	КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ = "";
	
	Если ПРИЗНАК_НП = "1" 
		ИЛИ ПРИЗНАК_НП = "2" Тогда
		ПериодДанных = ТекущийПериод;
	ИначеЕсли ПРИЗНАК_НП = "3" Тогда
		ПериодДанных = СледующийПериод;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ПериодДанных) Тогда
		КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ = "1";
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ПериодДанных) Тогда
		КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ = "2";
	КонецЕсли;
	
	Контейнер.Вставить("КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ", КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ);
	
	#КонецОбласти
	
КонецПроцедуры

Функция УплаченныйТорговыйСборПоКварталамНарастающимИтогом(Организация, НачалоНалоговогоПериода, НалоговыйПериод)
	
	Если НалоговыйПериод >= УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		// Уплаченный торговый сбор определяем по данным V раздела КУДиР
		Возврат УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымКУДиР(Организация, НачалоНалоговогоПериода, НалоговыйПериод);
	Иначе
		// По данным бухгалтерского учета
		Возврат УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымБухгалтерскогоУчета(Организация, НачалоНалоговогоПериода, НалоговыйПериод);
	КонецЕсли;
	
КонецФункции

Функция УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымКУДиР(Организация, НачалоНалоговогоПериода, НалоговыйПериод)
	
	НачалоГода = НачалоГода(НалоговыйПериод);
	КонецГода  = КонецГода(НалоговыйПериод);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",   НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    КонецГода);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ТаблицаПериодов", НоваяТаблицаКварталов(НачалоГода, КонецГода));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Период КАК Период,
	|	ТаблицаПериодов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Период,
	|	СУММА(КнигаУчетаДоходовИРасходовРаздел5Обороты.СуммаТорговогоСбораОборот) КАК СуммаТорговогоСбора
	|ПОМЕСТИТЬ ВТ_УплатаТорговогоСбораПоКварталам
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел5.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовРаздел5Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГОД(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовРаздел5Обороты.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период КАК Период,
	|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
	|	ЕСТЬNULL(ВТ_УплатаТорговогоСбораПоКварталам.СуммаТорговогоСбора, 0) КАК УплаченныйТорговыйСбор
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УплатаТорговогоСбораПоКварталам КАК ВТ_УплатаТорговогоСбораПоКварталам
	|		ПО ВТ_Периоды.Период = ВТ_УплатаТорговогоСбораПоКварталам.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Колонки.Добавить("УплаченоСНачалаГода");
	
	УплаченоСНачалаГода = 0;
	
	Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		УплаченоСНачалаГода = УплаченоСНачалаГода + СтрокаРезультат.УплаченныйТорговыйСбор;
		СтрокаРезультат.УплаченоСНачалагода = УплаченоСНачалаГода;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция УплаченныйТорговыйСборПоКварталамНарастающимИтогомПоДаннымБухгалтерскогоУчета(Организация, НачалоНалоговогоПериода, НалоговыйПериод)
	
	НачалоГода = НачалоГода(НалоговыйПериод);
	КонецГода  = КонецГода(НалоговыйПериод);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",          КонецГода);
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("ТаблицаПериодов",       НоваяТаблицаКварталов(НачалоГода, КонецГода));
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Счета, УсловияОтбора));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Период КАК Период,
	|	ТаблицаПериодов.НомерКвартала КАК НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГОД(ХозрасчетныйОборотыДтКт.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, КВАРТАЛ)
	|	КОНЕЦ КАК Период,
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ТорговыйСборУплачено
	|ПОМЕСТИТЬ ВТ_УплатаТорговогоСбораПоКварталам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Квартал,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДенежныхСредств),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ГОД(ХозрасчетныйОборотыДтКт.Период) < ГОД(&КонецПериода)
	|			ТОГДА НАЧАЛОПЕРИОДА(&КонецПериода, ГОД)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, КВАРТАЛ)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период КАК Период,
	|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
	|	ЕСТЬNULL(ВТ_УплатаТорговогоСбораПоКварталам.ТорговыйСборУплачено, 0) КАК ТорговыйСборУплачено
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УплатаТорговогоСбораПоКварталам КАК ВТ_УплатаТорговогоСбораПоКварталам
	|		ПО ВТ_Периоды.Период = ВТ_УплатаТорговогоСбораПоКварталам.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Колонки.Добавить("УплаченоСНачалаГода");
	
	УплаченоСНачалаГода = 0;
	
	Для Каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		УплаченоСНачалаГода = УплаченоСНачалаГода + СтрокаРезультат.ТорговыйСборУплачено;
		СтрокаРезультат.УплаченоСНачалагода = УплаченоСНачалаГода;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;

КонецФункции

Функция СтавкиНалогаУСНЗаПериод(Организация, ОтчетныйПериод, ДанныеКУДиРРаздел1 = Неопределено)
	
	НачалоПериода = НачалоГода(ОтчетныйПериод);
	КонецПериода  = КонецКвартала(ОтчетныйПериод);
	
	ПрименениеПовышеннойСтавки
		= ПериодНачалаПримененияПовышеннойСтавкиНалога(Организация, НачалоПериода, КонецПериода, ДанныеКУДиРРаздел1);
	
	ПериодПовышеннойСтавки      = ПрименениеПовышеннойСтавки.Период;
	ПрименяетсяПовышеннаяСтавка = ЗначениеЗаполнено(ПериодПовышеннойСтавки);
	
	ТаблицаСтавок = НоваяТаблицаКварталов(НачалоПериода, КонецПериода);
	ТаблицаСтавок.Колонки.Добавить("СтавкаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСтавок.Колонки.Добавить("ПовышеннаяСтавка", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтавкаЗаПериод Из ТаблицаСтавок Цикл
		
		СтавкиНалога = СтавкиНалогаУСН(Организация, КонецКвартала(СтавкаЗаПериод.Период));
		
		Если ПрименяетсяПовышеннаяСтавка И СтавкаЗаПериод.Период >= ПериодПовышеннойСтавки Тогда
			СтавкаЗаПериод.СтавкаНалога = СтавкиНалога.ПовышеннаяСтавка;
			СтавкаЗаПериод.ПовышеннаяСтавка = Истина;
		Иначе
			СтавкаЗаПериод.СтавкаНалога = СтавкиНалога.ОсновнаяСтавка;
			СтавкаЗаПериод.ПовышеннаяСтавка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтавок;
	
КонецФункции

Функция НоваяТаблицаКварталов(НачалоПериода, КонецПериода)
	
	// Приводим период к границам квартала
	НачальнаяДата = НачалоКвартала(НачалоПериода);
	КонечнаяДата  = КонецКвартала(КонецПериода);
	
	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	Периоды.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекущийПериод = НачальнаяДата;
	
	Пока ТекущийПериод < КонечнаяДата Цикл
		
		НоваяСтрока = Периоды.Добавить();
		НоваяСтрока.Период        = ТекущийПериод;
		НоваяСтрока.НомерКвартала = ОбщегоНазначенияБПКлиентСервер.НомерКвартала(ТекущийПериод);
		
		ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущийПериод, Перечисления.Периодичность.Квартал);
		
	КонецЦикла;
	
	Возврат Периоды;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ОПЕРАЦИЙ ПО ПЕРЕХОДУ НА УСН

Процедура ОтразитьВыполнениеОперацииПереходаНаУСН(СтруктураПараметров, ФиксироватьУстаревшие = Ложь, Отказ = Ложь) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
	
	Набор.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
	Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
	Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
	Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);	
	
	Запись = Набор.Добавить();
	Запись.Активность          = Истина;
	Запись.ВидОперации         = СтруктураПараметров.ВидОперации;
	Запись.Организация         = СтруктураПараметров.Организация;
	Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
	Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
	Запись.Состояние           = СтруктураПараметров.Состояние;
	Запись.Ответственный       = Ответственный;
	Запись.Актуальность        = Истина;
	
	Набор.Записать();
	
	// сохраняем ссылки на документы операции
	Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
		ДокументыОперации = СтруктураПараметров.ДокументыОперации;
		Если ДокументыОперации.Количество() > 0 Тогда					
			
			НаборДокументы = РегистрыСведений.ДокументыОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
			НаборДокументы.Отбор.Организация.Установить(СтруктураПараметров.Организация);
			НаборДокументы.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
			НаборДокументы.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
			НаборДокументы.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации); 
			
			Для каждого ДокументОперации Из ДокументыОперации Цикл								
				Запись = НаборДокументы.Добавить();
				Запись.Активность = Истина;
				ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметров);
				Запись.ДокументОперации = ДокументОперации;
			КонецЦикла; 
			
			НаборДокументы.Записать();
			
		КонецЕсли; 
	КонецЕсли;
	
	Если ФиксироватьУстаревшие Тогда
		ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ); 		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтменитьВыполнениеОперацииПереходаНаУСН(СтруктураПараметров, ФиксироватьУстаревшие = Ложь, Отказ = Ложь) Экспорт

	Если Отказ Тогда			
		Возврат;
	КонецЕсли; 
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
	
	Набор.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
	Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
	Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
	Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);	
	
	Запись = Набор.Добавить();
	Запись.Активность          = Истина;
	Запись.ВидОперации         = СтруктураПараметров.ВидОперации;
	Запись.Организация         = СтруктураПараметров.Организация;
	Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
	Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
	Запись.Состояние           = СтруктураПараметров.Состояние;
	Запись.Ответственный       = Ответственный;
	Запись.Актуальность        = Ложь;		 
	
	Набор.Записать();
	
	// обработаем ссылки на документы операции и сами документы в зависимости от переданных параметров:
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" - помечаем на удаление
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" - делаем не проведенными
	ОбрабатыватьДокументыОперации = Ложь;
	СтруктураПараметров.Свойство("ОбрабатыватьДокументыОперации", ОбрабатыватьДокументыОперации);
	ОчиститьСсылкиНаДокументы = Ложь;
	СтруктураПараметров.Свойство("ОчиститьСсылкиНаДокументы", ОчиститьСсылкиНаДокументы);
	
	Если ОбрабатыватьДокументыОперации Тогда
		
		НаборДокументы = РегистрыСведений.ДокументыОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
		НаборДокументы.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		НаборДокументы.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
		НаборДокументы.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
		НаборДокументы.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
		
		НаборДокументы.Прочитать(); 
		
		Если НаборДокументы.Количество() > 0 Тогда
			
			Для каждого ЗаписьПоДокументу Из НаборДокументы Цикл
				
				ДокументОперации = ЗаписьПоДокументу.ДокументОперации.ПолучитьОбъект();
				
				Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" Тогда
					
					ДокументОперации.УстановитьПометкуУдаления(Истина);
					
				ИначеЕсли СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" Тогда
					
					Если ДокументОперации.Проведен Тогда						
						ДокументОперации.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе // Операция (БУ и НУ), требуется очистить движения
						ДвиженияДокумента = ДокументОперации.Движения;
						Для каждого НаборДвижений Из ДвиженияДокумента Цикл							
							НаборДвижений.Записать(Истина); 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла; 
			
			// Если требуется - очистим ссылки на документы операции
			Если ОчиститьСсылкиНаДокументы Тогда			
				НаборДокументы.Очистить();
				НаборДокументы.Записать();			
			КонецЕсли; 
			
		КонецЕсли; 		
		
	КонецЕсли;
	
	Если ФиксироватьУстаревшие Тогда
		ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ);		 				
	КонецЕсли;

КонецПроцедуры

Процедура ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ = Ложь) Экспорт
	
	ИндексТекущейОперации = Перечисления.ВидыОперацийПереходаНаУСН.Индекс(СтруктураПараметров.ВидОперации);
	СледующиеВидыОпераций = Новый Массив;
	
	Для Инд = ИндексТекущейОперации + 1 По Перечисления.ВидыОперацийПереходаНаУСН.Количество() - 1 Цикл			
		СледующиеВидыОпераций.Добавить(Перечисления.ВидыОперацийПереходаНаУСН.Получить(Инд));
	КонецЦикла; 
	
	Если СледующиеВидыОпераций.Количество() > 0 Тогда			
		
		Ответственный = Пользователи.ТекущийПользователь();
		
		Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
		
		Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
		Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
		
		Для каждого СледующийВидОперации Из СледующиеВидыОпераций Цикл
			
			Набор.Отбор.ВидОперации.Установить(СледующийВидОперации);
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда					
				Продолжить;
			КонецЕсли; 
			
			// если есть записи о выполненных следующих операциях, пометим их как неактуальные
			Если Набор.Количество() = 1 Тогда // есть запись про следующую операцию
				
				Запись = Набор[0];
				Запись.Ответственный = Ответственный;
				Запись.Актуальность  = Ложь;
				
			Иначе
				
				Если Набор.Количество() > 1 Тогда
					
					Набор.Очистить();
					Запись = Набор.Добавить();
					Запись.ВидОперации         = СледующийВидОперации;
					Запись.Организация         = СтруктураПараметров.Организация;
					Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
					Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
					Запись.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
					Запись.Ответственный       = Ответственный;
					Запись.Актуальность        = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументСозданПриИзмененииНалоговогоРежима(Ссылка) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
	|ГДЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации = &ДокументСсылка"
	;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(Организация, Период) Экспорт

	Если НачалоДня(Период) = НачалоГода(Период)
		И УчетнаяПолитика.ПрименяетсяУСН(Организация, Период)
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, НачалоДня(Период) - 1) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ РАСХОДОВ НА УПЛАТУ СТРАХОВЫХ ВЗНОСОВ ЗА СЕБЯ

Функция ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Перем ДатаИзменения;
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	Если УчетСтраховыхВзносовИП.ПериодичностьНачисления(Реквизиты.Организация, Реквизиты.Период) = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Реквизиты.Период);
	Иначе
		НачалоПериода = УчетСтраховыхВзносовИП.НачалоСтраховогоПериода(Реквизиты.Период);
	КонецЕсли;
	КонецПериода = ОбщегоНазначенияБПКлиентСервер.КонецПериода(Реквизиты.Период, Реквизиты.Периодичность);
	
	ПрименяетсяУСНДоходыМинусРасходы =
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, КонецПериода, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходыМинусРасходы И ДатаИзменения <= НачалоПериода Тогда
		Возврат Неопределено; // Не применяется УСН с прошлых периодов
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходыВПрошлом =
		УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, НачалоДня(ДатаИзменения) - 1);
	
	Если Не ПрименяетсяУСНДоходыМинусРасходы И Не ПрименяетсяУСНДоходыМинусРасходыВПрошлом Тогда
		Возврат Неопределено; // Учетная политика менялась в текущем периоде, но статус применения УСН не менялся
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходыМинусРасходы И ПрименяетсяУСНДоходыМинусРасходыВПрошлом Тогда // Режим налогообложения не изменился
		НачалоПериодаАнализаРасходов = НачалоПериода;
		КонецПериодаАнализаРасходов = КонецПериода;
	ИначеЕсли ПрименяетсяУСНДоходыМинусРасходыВПрошлом Тогда // ИП перешел с УСН (Д-Р) на иной режим налогообложения
		НачалоПериодаАнализаРасходов = НачалоПериода;
		КонецПериодаАнализаРасходов = НачалоДня(ДатаИзменения) - 1;
	Иначе // ИП перешел на УСН (Д-Р)
		НачалоПериодаАнализаРасходов = Макс(НачалоПериода, НачалоДня(ДатаИзменения));
		КонецПериодаАнализаРасходов = КонецПериода;
	КонецЕсли;
	
	ТаблицаРасходов = УчетСтраховыхВзносовИП.ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(
		Реквизиты.Организация, НачалоПериодаАнализаРасходов, КонецПериодаАнализаРасходов);
	
	Если Не УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Реквизиты.Период) Тогда
		Возврат ТаблицаРасходов;
	КонецЕсли;
	
	УчитыватьПСН = (КонецПериода >= УчетПСНКлиентСервер.ДатаНачалаУменьшенияПСННаСтраховыеВзносы())
		И УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Реквизиты.Организация, НачалоПериодаАнализаРасходов, КонецПериодаАнализаРасходов);
	УчитыватьЕНВД = (КонецПериода < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД())
		И УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Реквизиты.Организация, НачалоПериодаАнализаРасходов, КонецПериодаАнализаРасходов);
	УменьшениеЕНВДПослеОтмены = УчетЕНВД.РасходыПериодаУменьшаютЕНВДПослеОтмены(Реквизиты.Организация, КонецПериода);
	
	Если Не УчитыватьЕНВД И Не УчитыватьПСН И Не УменьшениеЕНВДПослеОтмены Тогда
		Возврат ТаблицаРасходов;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	// С 2017 по 2020 годы при совмещении с ЕНВД страховые взносы распределяются между уменьшением ЕНВД и расходами по основной деятельности.
	// С 2021 года при совмещении с ПСН страховые взносы распределяются между уменьшением ПСН и расходами по основной деятельности.
	// Необходимо исключить из расходов сумму, учтенную в уменьшении ЕНВД или ПСН.
	
	Если УчитыватьПСН Тогда
		КоэффициентСпецРежим = УчетПСН.ДоляДоходовПатентнойСистемыНалогообложения(
			Реквизиты.Организация, Реквизиты.Период, Перечисления.Периодичность.Квартал);
	ИначеЕсли УчитыватьЕНВД Тогда
		КоэффициентСпецРежим = УчетРасходовУменьшающихОтдельныеНалоги.КоэффициентДоходовЕНВДДляРаспределенияФиксированныхВзносов(
			Реквизиты.Организация, Реквизиты.Период);
	Иначе
		КоэффициентСпецРежим = 0;
	КонецЕсли;
	
	Если УменьшениеЕНВДПослеОтмены Тогда
		КоэффициентЕНВДПередОтменой
			= УчетРасходовУменьшающихОтдельныеНалоги.КоэффициентДоходовЕНВДДляРаспределенияФиксированныхВзносовЗаПоследнийГодЕНВД(Реквизиты.Организация);
	Иначе
		КоэффициентЕНВДПередОтменой = 0;
	КонецЕсли;
	
	Для Каждого СтраховойВзнос Из ТаблицаРасходов Цикл
		
		Если УменьшениеЕНВДПослеОтмены
			И Год(СтраховойВзнос.СтраховойПериод) = Год(УчетЕНВДКлиентСервер.ПоследнийДеньДействияЕНВД()) Тогда
			ПрименяемыйКоэффициент = КоэффициентЕНВДПередОтменой;
		Иначе
			ПрименяемыйКоэффициент = КоэффициентСпецРежим;
		КонецЕсли;
		
		СтраховойВзнос.Сумма = СтраховойВзнос.Сумма - Окр(СтраховойВзнос.Сумма * ПрименяемыйКоэффициент, 2);
	КонецЦикла;
	
	Возврат ТаблицаРасходов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРасходов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];

	ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
	
	СтруктураТаблицУСН = Новый Структура("ТаблицаВзносовИП", Параметры.СтраховыеВзносы);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Реквизиты.Регистратор);
	Параметры.Вставить("Объект", ДокументОбъект);
	Параметры.Вставить("Организация", Реквизиты.Организация);
	Параметры.Вставить("Дата", Реквизиты.Период);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеСтраховыхВзносовИП", Параметры,, СтруктураТаблицУСН);

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета страховых взносов
	+ "ВидПлатежаВГосБюджет," // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - вид платежа в бюджет
	+ "СтраховойПериод,"     // <Дата> - страховой год
	+ "ДокументОплаты,"      // <ДокументСсылка.*> - документ оплаты
	+ "Сумма";               // <Число, 15, 2>
	;
	Параметры.Вставить("СтраховыеВзносы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Функция ПодготовитьТаблицуРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаНалогов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Реквизиты.Период < '20150101'
	   И Реквизиты.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		// Налог на имущество до 2015 года при применении УСН не начисляется и в расходах не отражается.
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	
	Налоги = Параметры.ТаблицаНалогов;
	
	Налоги.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИмущественныхНалогов"));
	Налоги.ЗаполнитьЗначения(Реквизиты.ВидНалога, "ВидНалога");
	
	Налоги.Свернуть("ВидНалога, СчетКт, ОтражениеВУСН", "Сумма");
	Налоги.Колонки.СчетКт.Имя = "СчетУчета";
	
	Для каждого СтрокаНалога Из Налоги Цикл
		Если СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
			Если НЕ ПлательщикЕНВД Тогда
				// Если нет ЕНВД - расходы не могут быть распределяемыми
				СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			ИначеЕсли Реквизиты.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
				// расходы по налогу на имущество не могут быть распределяемыми,
				// т.к. налог на имущество при совмещении с ЕНВД начисляется только в части основного режима налогообложения
				СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Налоги;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаНалогов
	
	СписокОбязательныхКолонок = ""
		+ "СчетКт,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета налога
		+ "ОтражениеВУСН,"		// <ПеречислениеСсылка.ОтражениеВУСН> - отражение налога в УСН
		+ "Сумма";				// <Число, 15, 2> - сумма налога
		
	Параметры.Вставить("ТаблицаНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалогов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"	// <СправочникСсылка.Организации> - оранизация
		+ "ВидНалога";		// <ПеречислениеСсылка.ВидыИмущественныхНалогов> - вид начисляемого налога
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(
	ТаблицаРасходов, ТаблицаПлатон, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРасходов) И Не ЗначениеЗаполнено(ТаблицаПлатон)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтраженияРасходовПоИмущественнымНалогам(ТаблицаРасходов, ТаблицаПлатон, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаРасходов.Количество() > 0 Тогда
	
		ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
		
		СтруктураТаблицУСН = Новый Структура("ТаблицаРасходов", Параметры.ТаблицаРасходов);
		
		ПараметрыОтражения = Новый Структура;
		ПараметрыОтражения.Вставить("Ссылка", Реквизиты.Регистратор);
		ПараметрыОтражения.Вставить("Объект", ДокументОбъект);
		ПараметрыОтражения.Вставить("Организация", Реквизиты.Организация);
		ПараметрыОтражения.Вставить("Дата", Реквизиты.Период);
		ПараметрыОтражения.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		ПараметрыОтражения.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		ПараметрыОтражения.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
		
		НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеИмущественныхНалогов", ПараметрыОтражения,, СтруктураТаблицУСН);
		
	КонецЕсли;
	
	Если Параметры.ТаблицаПлатон.Количество() > 0 Тогда
	
		ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;
	
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаПлатон Цикл
			
			Если СтрокаТаблицы.СуммаРасхода = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонСодержания = НСтр("ru = 'Признаны в расходах НУ платежи в систему ""Платон"" по транспортному средству ""%1""'");
			Содержание = СтрШаблон(ШаблонСодержания, СтрокаТаблицы.ОсновноеСредство);
			
			ЗаписьКУДиР = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов.Добавить();
			
			ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, Реквизиты);
			
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Содержание = Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
			ЗаписьКУДиР.Графа7 = СтрокаТаблицы.СуммаРасхода;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовПоИмущественнымНалогам(ТаблицаРасходов, ТаблицаПлатон, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасходов
	
	СписокОбязательныхКолонок = ""
		+ "ВидНалога,"			// <ПеречислениеСсылка.ВидыИмущественныхНалогов> - вид начисляемого налога
		+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный> - счет учета налога
		+ "ОтражениеВУСН,"		// <ПеречислениеСсылка.ОтражениеВУСН> - отражение налога в УСН
		+ "Сумма";				// <Число, 15, 2> - сумма налога
		
	Параметры.Вставить("ТаблицаРасходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ТаблицаПлатон
	
	СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство,"	// <СправочникСсылка.ОсновныеСредства> - ТС, по которому признается расход
		+ "СуммаРасхода";		// <Число, 15, 2> - сумма, признаваемая в расходах
		
	Параметры.Вставить("ТаблицаПлатон", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПлатон, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ТОРГОВОГО СБОРА

Функция ПодготовитьТаблицуРасходовПоТорговомуСбору(ТаблицаПроводок, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПроводок)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Реквизиты.Период < '20150701' Тогда
		// торговый сбор действует с июля 2015 года
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыРасходовПоТорговомуСбору(ТаблицаПроводок, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ДанныеТорговыйСбор = Параметры.ТаблицаДанныеТорговыйСбор;
	ДанныеТорговыйСбор.Свернуть("СчетКт", "Сумма");
	ДанныеТорговыйСбор.Колонки.СчетКт.Имя = "СчетУчета";
	ДанныеТорговыйСбор.Колонки.Добавить("ОтражениеВУСН",
		Новый ОписаниеТипов("ПеречислениеСсылка.ОтражениеВУСН"));
	ДанныеТорговыйСбор.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются,"ОтражениеВУСН");
	
	Возврат ДанныеТорговыйСбор;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовПоТорговомуСбору(ТаблицаПроводок, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаНалогов
	
	СписокОбязательныхКолонок = ""
		+ "СчетКт," // <ПланСчетовСсылка.Хозрасчетный> - счет учета сбора
		+ "Сумма";  // <Число, 15, 2> - сумма сбора
	
	Параметры.Вставить("ТаблицаДанныеТорговыйСбор", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - оранизация
		;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовПоТорговомуСбору(ТаблицаРасходов, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРасходов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтраженияРасходовПоТорговомуСбору(ТаблицаРасходов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
	
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасходов", Параметры.ТаблицаРасходов);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Реквизиты.Регистратор);
	Параметры.Вставить("Объект", ДокументОбъект);
	Параметры.Вставить("Организация", Реквизиты.Организация);
	Параметры.Вставить("Дата", Реквизиты.Период);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеТорговогоСбора", Параметры,, СтруктураТаблицУСН);

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовПоТорговомуСбору(ТаблицаРасходов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасходов
	
	СписокОбязательныхКолонок = ""
		+ "СчетУчета,"     // <ПланСчетовСсылка.Хозрасчетный> - счет учета сбора
		+ "ОтражениеВУСН," // <ПеречислениеСсылка.ОтражениеВУСН> - отражение сбора в УСН
		+ "Сумма";         // <Число, 15, 2> - сумма налога
	
	Параметры.Вставить("ТаблицаРасходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ НАЛОГА (АВАНСОВОГО ПЛАТЕЖА ПО НАЛОГУ), УПЛАЧИВАЕМОГО ПРИ УСН

Функция СсылкаДляПереходаНеУказанаЧисленностьРаботников(Организация, Период)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Организация);
	ЗначенияЗаполнения.Вставить("Период", Период);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	ПараметрыПубликации.ИмяФормы = "РегистрСведений.СредняяЧисленностьРаботниковОрганизаций.ФормаЗаписи";
	ПараметрыПубликации.НачалоПериода = Период;
	ПараметрыПубликации.КонецПериода = Период;
	ПараметрыПубликации.ПараметрыФормы = ПараметрыФормы;
	
	// Навигационную ссылку необходимо получать в привилегированном режиме, поскольку помощники, использующие ссылку,
	// могут быть открыты пользователями, имеющими только доступ на чтение.
	УстановитьПривилегированныйРежим(Истина);
	НавигационнаяСсылка = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОписаниеСсылки = Новый Структура;
	ОписаниеСсылки.Вставить("Представление", НСтр("ru = 'Указать среднюю численность работников'"));
	ОписаниеСсылки.Вставить("Ссылка", НавигационнаяСсылка);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

// Рассчитывает налог УСН по данным информационной базы и возвращает данные
// для отражения начисленного налога в проводках и во вспомогательных регистрах для справки-расчета.
//
// Параметры:
//  КонтекстРасчета      - Структура - контекст, в котором выполняется расчет (организация, период и т.п.),
//                                     см. НовыйКонтекстРасчета().
//
// Возвращаемое значение:
//  Структура    - содержит таблицы для отражения начисленного налога в бухучете и для формирования справки-расчета:
//                  * ТаблицаПроводок       - см. НалоговыйУчет.НоваяТаблицаНачисленияНалога()
//                  * ТаблицаСправкиРасчета - см. НоваяТаблицаСправкиРасчетаНалога()
//                  * Ошибки - Массив из Структура - массив ошибок.
//
Функция ПодготовитьРасчетНалога(КонтекстРасчета) Экспорт
	
	ТаблицаПроводок       = НалоговыйУчет.НоваяТаблицаНачисленияНалога();
	ТаблицаСправкиРасчета = НоваяТаблицаСправкиРасчетаНалога();
	Ошибки = Новый Массив;
	
	Если КонтекстРасчета.ПрименяетсяУСНДоходы Тогда
		РассчитатьНалогУСНОбъектДоходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета, Ошибки);
	Иначе
		РассчитатьНалогУСНОбъектДоходыМинусРасходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета, Ошибки);
	КонецЕсли;
	
	РезультатРасчета = Новый Структура();
	РезультатРасчета.Вставить("ТаблицаПроводок", ТаблицаПроводок);
	РезультатРасчета.Вставить("ТаблицаСправкиРасчета", ТаблицаСправкиРасчета);
	РезультатРасчета.Вставить("Ошибки", Ошибки);
	
	Возврат РезультатРасчета;
	
КонецФункции

Функция НоваяТаблицаСправкиРасчетаНалога()
	
	ТипСтандартнаяСумма                = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ТипСтандартнаяСуммаНеотрицательная = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный);
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ПериодРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("ОбъектНалогообложения",
		Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН"));
	Результат.Колонки.Добавить("ДеятельностьНаТорговомСборе", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("Доходы",                       ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("Расходы",                      ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("ПеренесенныеУбытки",           ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалоговаяБаза",                ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("СтавкаНалогаУСН",
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("НалогВсего",                   ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("РасходыУменьшающиеНалог",      ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("УплаченныйТорговыйСбор",       ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("ТорговыйСборУменьшающийНалог", ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("ПроцентУменьшенияНалога",
		ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("УменьшениеНалогаФакт",         ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалогИсчисленныйВсего",        ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("МинимальныйНалог",             ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("АвансовыеПлатежи",             ТипСтандартнаяСуммаНеотрицательная);
	Результат.Колонки.Добавить("НалогКУплате",                 ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("ВозвратыПокупателям",          ТипСтандартнаяСумма);
	Результат.Колонки.Добавить("ПериодПревышенияЛимитов",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("СредняяЧисленностьРаботников",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат Результат;
	
КонецФункции

Функция ДоляДоходовПоДеятельностиНаТорговомСборе(Организация, НачалоПериода, КонецПериода)
	
	ДоляДоходов = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигаДоходовРасходовОбороты.Графа5Оборот КАК ДоходыУСНВсего,
	|	КнигаДоходовРасходовОбороты.ДоходТорговыйСборОборот КАК ДоходыУСНТорговыйСбор
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаДоходовРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.ДоходыУСНВсего > 0 Тогда
		
		ДоляДоходов = Выборка.ДоходыУСНТорговыйСбор / Выборка.ДоходыУСНВсего;
		
		// Гипотетически возможны отрицательные доходы за период (возврат авансов, переквалификация),
		// а также превышение доходов в части торгового сбора над общими доходами по тем же причинам.
		// Экранируем такие случаи.
		ДоляДоходов = Макс(0, Мин(1, ДоляДоходов));
		
	КонецЕсли;
	
	Возврат ДоляДоходов;
	
КонецФункции

Процедура РассчитатьНалогУСНОбъектДоходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкиРасчета, Ошибки)
	
	Перем СтавкаНалогаУСН;
	
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;             // Кт 68.12
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонтекстРасчета.Период);
	
	ДанныеПрогрессивнойШкалыУСН = ПараметрыПримененияПовышеннойСтавкиНалога(
		КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода);
	
	Если ДанныеПрогрессивнойШкалыУСН.Ошибки.Количество() > 0 Тогда
		Ошибки = ДанныеПрогрессивнойШкалыУСН.Ошибки;
		Возврат;
	КонецЕсли;
	
	ЕстьРаботники = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(КонтекстРасчета.Организация)
		Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(КонтекстРасчета.Организация,
				КонтекстРасчета.НачалоНалоговогоПериода,
				КонтекстРасчета.КонецОтчетногоПериода);
	
	Если ЕстьРаботники Тогда
		СредняяЧисленностьРаботников = СредняяЧисленностьРаботников(
			КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода,
			КонтекстРасчета.КонецОтчетногоПериода);
	Иначе
		СредняяЧисленностьРаботников = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецОтчетногоПериода);
	Запрос.УстановитьПараметр("ЕстьРаботники", ЕстьРаботники);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("СчетНачисленияНалога",  СчетНачисленияНалога);
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	Запрос.УстановитьПараметр("СчетаОплатыНалога", СчетаОплатыНалога);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот КАК ДоходыТорговыйСбор
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел4Обороты.ПФРОборот + Раздел4Обороты.ФОМСОборот + ВЫБОР
	|		КОГДА &ЕстьРаботники
	|			ТОГДА Раздел4Обороты.ФССОборот + Раздел4Обороты.ФСС_НСОборот + Раздел4Обороты.БольничныеОборот + Раздел4Обороты.ДобровольноеСтрахованиеОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РасходыУменьшающиеНалог,
	|	Раздел4Обороты.ДеятельностьНаТорговомСборе
	|ПОМЕСТИТЬ ВТ_Раздел4
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК Раздел4Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Раздел4.РасходыУменьшающиеНалог), 0) КАК РасходыУменьшающиеНалог
	|ИЗ
	|	ВТ_Раздел4 КАК ВТ_Раздел4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Раздел4.РасходыУменьшающиеНалог), 0) КАК РасходыУменьшающиеНалог
	|ИЗ
	|	ВТ_Раздел4 КАК ВТ_Раздел4
	|ГДЕ
	|	ВТ_Раздел4.ДеятельностьНаТорговомСборе";
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// Если ФО включена, нужно выделить возвраты покупателям и переплату на начало года.
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	-ЕСТЬNULL(СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот), 0) КАК ВозвратыПокупателям
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|ГДЕ
		|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот < 0";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	
	// Расчет налога
	Доходы                       = 0;
	ДоходыТорговыйСбор           = 0;
	РасходыУменьшающиеНалог      = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	ВозвратыПокупателям          = 0;
	МаксПроцентУменьшенияНалога  = ?(ЕстьРаботники, 50, 100);
	
	ВыборкаНалоговаяБаза = Результат[0].Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		Доходы = Окр(ВыборкаНалоговаяБаза.Доходы, РазрядностьОкругленияПоказателей);
		
		Если КонтекстРасчета.УменьшатьНалогНаТорговыйСбор Тогда
			ДоходыТорговыйСбор = Окр(ВыборкаНалоговаяБаза.ДоходыТорговыйСбор, РазрядностьОкругленияПоказателей);
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаУменьшениеНалога = Результат[2].Выбрать();
	Если ВыборкаУменьшениеНалога.Следующий() Тогда
		РасходыУменьшающиеНалог = Окр(ВыборкаУменьшениеНалога.РасходыУменьшающиеНалог, РазрядностьОкругленияПоказателей);
	КонецЕсли;
	
	Если НЕ КонтекстРасчета.ЭтоПервыйОтчетныйПериод Тогда
		КонецПредыдущегоКвартала = НачалоКвартала(КонтекстРасчета.КонецОтчетногоПериода) - 1;
		
		ИсчисленоЗаПредыдущиеПериоды = НачисленныйНалогЗаПериод(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода, КонецПредыдущегоКвартала);
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		
		ВыборкаВозвратыПокупателям = Результат[4].Выбрать();
		Если ВыборкаВозвратыПокупателям.Следующий() Тогда
			ВозвратыПокупателям = ВыборкаВозвратыПокупателям.ВозвратыПокупателям;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
		СтавкаНалогаУСН = СтавкиНалогаУСН(
			КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода).ПовышеннаяСтавка;
		
		НалоговаяБазаЗаТекущийПериод = Макс(0, 
			Доходы - ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитов);

		НалогЗаТекущийПериод = Окр(
			НалоговаяБазаЗаТекущийПериод * СтавкаНалогаУСН / 100,
			РазрядностьОкругленияПоказателей);

		НалогСНачалаГодаВсего = НалогЗаТекущийПериод + ДанныеПрогрессивнойШкалыУСН.НалогДоПревышенияЛимитов;
	Иначе
		СтавкаНалогаУСН = СтавкиНалогаУСН(
			КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода).ОсновнаяСтавка;
		
		НалогСНачалаГодаВсего = Окр(Доходы * СтавкаНалогаУСН / 100, РазрядностьОкругленияПоказателей);
	КонецЕсли;
	
	УменьшениеНалога = Мин(РасходыУменьшающиеНалог,
		Окр(НалогСНачалаГодаВсего * МаксПроцентУменьшенияНалога / 100, РазрядностьОкругленияПоказателей));
	НалогСначалаГодаИсчисленный = НалогСНачалаГодаВсего - УменьшениеНалога;
	
	ТорговыйСборУплаченоВсего = 0;
	ТорговыйСборКВычету       = 0;
	
	// Рассчитаем налог отдельно по деятельности на торговом сборе, если она есть
	Если КонтекстРасчета.УменьшатьНалогНаТорговыйСбор Тогда
		РасходыУменьшающиеНалогТС = 0;
		
		ВыборкаУменьшениеНалогаТС = Результат[3].Выбрать();
		Если ВыборкаУменьшениеНалогаТС.Следующий() Тогда
			РасходыУменьшающиеНалогТС = Окр(ВыборкаУменьшениеНалогаТС.РасходыУменьшающиеНалог, РазрядностьОкругленияПоказателей);
		КонецЕсли;
		
		Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
			НалоговаяБазаТСЗаТекущийПериод = Макс(0, 
				ДоходыТорговыйСбор - ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитовТорговыйСбор);
				 
			НалогТСЗаТекущийПериод = Окр(
				НалоговаяБазаТСЗаТекущийПериод * СтавкаНалогаУСН / 100,
				РазрядностьОкругленияПоказателей);
			
			НалогТСВсего = НалогТСЗаТекущийПериод + ДанныеПрогрессивнойШкалыУСН.НалогДоПревышенияЛимитовТорговыйСбор;
		Иначе
			НалогТСВсего = 
				Окр(ДоходыТорговыйСбор * СтавкаНалогаУСН / 100, РазрядностьОкругленияПоказателей);
		КонецЕсли;
		
		УменьшениеНалогаТС = Мин(РасходыУменьшающиеНалогТС,
			Окр(НалогТСВсего * МаксПроцентУменьшенияНалога / 100, РазрядностьОкругленияПоказателей));
		
		НалогТСКУплате = НалогТСВсего - УменьшениеНалогаТС;
		
		ТорговыйСборУплаченоВсего = УплаченныйТорговыйСбор(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода, КонтекстРасчета.КонецОтчетногоПериода);
		ТорговыйСборКВычету = Мин(НалогТСКУплате, ТорговыйСборУплаченоВсего);
		
		// Запись Справки-расчета в части налога по деятельности на торговом сборе
		СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаСправки, КонтекстРасчета);
		
		СтрокаСправки.ПериодРасчета                = КонтекстРасчета.Период;
		СтрокаСправки.ОбъектНалогообложения        = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
		СтрокаСправки.ДеятельностьНаТорговомСборе  = Истина;
		СтрокаСправки.Доходы                       = ДоходыТорговыйСбор;
		СтрокаСправки.НалоговаяБаза                = ДоходыТорговыйСбор;
		СтрокаСправки.СтавкаНалогаУСН              = СтавкаНалогаУСН;
		СтрокаСправки.НалогВсего                   = НалогТСВсего;
		СтрокаСправки.РасходыУменьшающиеНалог      = РасходыУменьшающиеНалогТС;
		СтрокаСправки.ПроцентУменьшенияНалога      = МаксПроцентУменьшенияНалога;
		СтрокаСправки.УменьшениеНалогаФакт         = УменьшениеНалогаТС;
		СтрокаСправки.НалогИсчисленныйВсего        = НалогТСКУплате;
		СтрокаСправки.УплаченныйТорговыйСбор       = ТорговыйСборУплаченоВсего;
		СтрокаСправки.ТорговыйСборУменьшающийНалог = ТорговыйСборКВычету;
		СтрокаСправки.АвансовыеПлатежи             = 0;
		СтрокаСправки.НалогКУплате                 = 0;
		Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
			СтрокаСправки.ПериодПревышенияЛимитов = ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов;
		КонецЕсли;
		СтрокаСправки.СредняяЧисленностьРаботников = СредняяЧисленностьРаботников;
		
	КонецЕсли;
	
	ТорговыйСборВычитаемыйИзНалога = Мин(НалогСначалаГодаИсчисленный, ТорговыйСборКВычету);
	НалогСначалаГодаИсчисленный    = НалогСначалаГодаИсчисленный - ТорговыйСборВычитаемыйИзНалога;
	НалогКУплате = Окр(НалогСначалаГодаИсчисленный - ИсчисленоЗаПредыдущиеПериоды, 0);
	
	// Данные для проводки по начислению налога
	// (проводку формируем только при ненулевом налоге)
	Если НалогКУплате <> 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(КонтекстРасчета, НалогКУплате);
		
	КонецЕсли;
	
	// Если организация попадает под условия освобождения уплаты налога, тогда делаем дополнительную проводку
	Если НалогКУплате > 0 И ПрименяетсяОсвобождениеОтНалога(КонтекстРасчета.Организация, КонтекстРасчета.Период) Тогда
		
		НалоговыйУчет.ДополнитьПроводкамиПоОсвобождениюОтНалога(
			ТаблицаПроводок,
			КонтекстРасчета.Период,
			СчетНачисленияНалога,
			НалогКУплате);
		
	КонецЕсли;
	
	// Запись справки-расчета по налогу
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаСправки, КонтекстРасчета);
	
	СтрокаСправки.ПериодРасчета                = КонтекстРасчета.Период;
	СтрокаСправки.ОбъектНалогообложения        = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
	СтрокаСправки.ДеятельностьНаТорговомСборе  = Ложь;
	СтрокаСправки.Доходы                       = Доходы;
	СтрокаСправки.НалоговаяБаза                = Доходы;
	СтрокаСправки.СтавкаНалогаУСН              = СтавкаНалогаУСН;
	СтрокаСправки.НалогВсего                   = НалогСНачалаГодаВсего;
	СтрокаСправки.РасходыУменьшающиеНалог      = РасходыУменьшающиеНалог;
	СтрокаСправки.ПроцентУменьшенияНалога      = МаксПроцентУменьшенияНалога;
	СтрокаСправки.УменьшениеНалогаФакт         = УменьшениеНалога;
	СтрокаСправки.УплаченныйТорговыйСбор       = ТорговыйСборУплаченоВсего;
	СтрокаСправки.ТорговыйСборУменьшающийНалог = ТорговыйСборВычитаемыйИзНалога;
	СтрокаСправки.НалогИсчисленныйВсего        = НалогСначалаГодаИсчисленный;
	СтрокаСправки.АвансовыеПлатежи             = ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате                 = НалогКУплате;
	СтрокаСправки.ВозвратыПокупателям          = ВозвратыПокупателям;
	Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
		СтрокаСправки.ПериодПревышенияЛимитов = ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов;
	КонецЕсли;
	СтрокаСправки.СредняяЧисленностьРаботников = СредняяЧисленностьРаботников;
	
КонецПроцедуры

Процедура РассчитатьНалогУСНОбъектДоходыМинусРасходы(КонтекстРасчета, ТаблицаПроводок, ТаблицаСправкаРасчет, Ошибки)
	
	Перем СтавкаНалогаУСН;
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;             // Кт 68.12
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонтекстРасчета.Период);
	
	НалоговыеКаникулы = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(КонтекстРасчета.Организация)
		И УчетнаяПолитика.НалоговыеКаникулыУСН(КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода);
	
	ДанныеПрогрессивнойШкалыУСН = ПараметрыПримененияПовышеннойСтавкиНалога(
		КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода);
	
	Если ДанныеПрогрессивнойШкалыУСН.Ошибки.Количество() > 0 Тогда
		Ошибки = ДанныеПрогрессивнойШкалыУСН.Ошибки;
		Возврат;
	КонецЕсли;
	
	ЕстьРаботники = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(КонтекстРасчета.Организация)
		Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(КонтекстРасчета.Организация,
				КонтекстРасчета.НачалоНалоговогоПериода,
				КонтекстРасчета.КонецОтчетногоПериода);
	
	Если ЕстьРаботники Тогда
		СредняяЧисленностьРаботников = СредняяЧисленностьРаботников(
			КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода,
			КонтекстРасчета.КонецОтчетногоПериода);
	Иначе
		СредняяЧисленностьРаботников = 0;
	КонецЕсли;
	
	// Расчет налога
	
	Доходы                       = 0;
	Расходы                      = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	
	ПеренесенныеУбытки               = 0;
	УбытокОтУплатыМинимальногоНалога = 0;
	УчтенныеУбытки                   = 0;
	
	МинимальныйНалог    = 0;
	ЭтоМинимальныйНалог = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецОтчетногоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты"
	;
	
	ВыборкаНалоговаяБаза = Запрос.Выполнить().Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		Доходы  = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Доходы), ВыборкаНалоговаяБаза.Доходы, 0);
		Доходы  = Окр(Доходы, РазрядностьОкругленияПоказателей);
		
		Расходы = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Расходы), ВыборкаНалоговаяБаза.Расходы, 0);
		// Округление расходов производится после учета в их составе убытка от уплаты минимального налога
	КонецЕсли;
	
	// Перенесенные на текущий период убытки прошлых лет учитываются только при расчете налога по итогам года
	Если КонтекстРасчета.ЭтоЗавершающийОтчетныйПериод Тогда
		Убытки = ПеренесенныеУбыткиПрошлыхЛет(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоГода, КонтекстРасчета.КонецОтчетногоПериода);
		ПеренесенныеУбытки = Окр(Убытки.ПеренесенныеУбытки, РазрядностьОкругленияПоказателей);
		УбытокОтУплатыМинимальногоНалога = Убытки.УбытокОтУплатыМинимальногоНалога;
	КонецЕсли;
	
	Если НЕ КонтекстРасчета.ЭтоПервыйОтчетныйПериод Тогда
		КонецПредыдущегоКвартала = НачалоКвартала(КонтекстРасчета.КонецОтчетногоПериода) - 1;
		
		ИсчисленоЗаПредыдущиеПериоды = НачисленныйНалогЗаПериод(КонтекстРасчета.Организация,
			КонтекстРасчета.НачалоНалоговогоПериода, КонецПредыдущегоКвартала);
	КонецЕсли;
	
	// Увеличиваем расходы на сумму разницы между уплаченным в прошлых периодах минимальным налогом и рассчитанным в общем порядке
	Расходы = Окр(Расходы + УбытокОтУплатыМинимальногоНалога, РазрядностьОкругленияПоказателей);
	
	НалоговаяБаза = Макс(Доходы - Расходы, 0);
	Если КонтекстРасчета.ЭтоЗавершающийОтчетныйПериод Тогда
		УчтенныеУбытки = Мин(НалоговаяБаза, ПеренесенныеУбытки);
		НалоговаяБаза  = НалоговаяБаза - УчтенныеУбытки;
		
		// Для ИП на налоговых каникулах минимальный налог не рассчитывается.
		// Каникулы от минимального налога "заканчиваются" в тот момент, когда доходы превысили лимит 
		// применения основной ставки УСН и стала применяться повышенная ставка налога. 
		// При этом минимальный налог считается как обычно - от общей суммы доходов за год
		// (см. абз. 1 и абз. 2 п. 4 ст. 346.20 НК РФ)
		Если НалоговыеКаникулы И Не ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
			МинимальныйНалог = 0;
		Иначе
			МинимальныйНалог = Окр(Доходы / 100, 0); // 1% от доходов за год
		КонецЕсли;
	КонецЕсли;

	Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
		
		СтавкаНалогаУСН = СтавкиНалогаУСН(
			КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода).ПовышеннаяСтавка;
		
		НалоговаяБазаЗаТекущийПериод =
			Макс(0, НалоговаяБаза - ДанныеПрогрессивнойШкалыУСН.НалоговаяБазаДоПревышенияЛимитов);
			 
		НалогЗаТекущийПериод = Окр(
			НалоговаяБазаЗаТекущийПериод * СтавкаНалогаУСН / 100,
			РазрядностьОкругленияПоказателей);
		
		НалогСНачалаГода = НалогЗаТекущийПериод + ДанныеПрогрессивнойШкалыУСН.НалогДоПревышенияЛимитов;
		
	Иначе
		
		СтавкаНалогаУСН = СтавкиНалогаУСН(
			КонтекстРасчета.Организация, КонтекстРасчета.КонецОтчетногоПериода).ОсновнаяСтавка;
		
		НалогСНачалаГода = Окр(НалоговаяБаза * СтавкаНалогаУСН / 100, 0);
		
	КонецЕсли;
	
	НалогКУплате     = Окр(НалогСначалаГода - ИсчисленоЗаПредыдущиеПериоды, 0);
	
	// Если налог, рассчитанный в общем порядке по итогам года, меньше минимального налога
	// - требуется исчислить минимальный налог (1% от доходов).
	// Минимальный налог уменьшается на сумму исчисленных авансовых платежей за 9 месяцев (с учетом сумм "к уменьшению")
	// и уплачивается только в случае, если получившаяся разница положительная.
	Если КонтекстРасчета.ЭтоЗавершающийОтчетныйПериод И МинимальныйНалог > НалогСНачалаГода Тогда
		НалогКУплате = Окр(МинимальныйНалог - ИсчисленоЗаПредыдущиеПериоды, 0);
		ЭтоМинимальныйНалог = НалогКУплате > 0;
	КонецЕсли;
	
	// Данные для проводки по начислению налога
	// (проводку формируем только при ненулевом налоге)
	Если НалогКУплате <> 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(КонтекстРасчета, НалогКУплате, ЭтоМинимальныйНалог);
		
	КонецЕсли;
	
	// Если организация попадает под условия освобождения уплаты налога, тогда делаем дополнительную проводку
	Если НалогКУплате > 0 И ПрименяетсяОсвобождениеОтНалога(КонтекстРасчета.Организация, КонтекстРасчета.Период) Тогда
		
		НалоговыйУчет.ДополнитьПроводкамиПоОсвобождениюОтНалога(
			ТаблицаПроводок,
			КонтекстРасчета.Период,
			СчетНачисленияНалога,
			НалогКУплате);
		
	КонецЕсли;
	
	// Данные для справки-расчета
	СтрокаСправки = ТаблицаСправкаРасчет.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаСправки, КонтекстРасчета);
	
	СтрокаСправки.ПериодРасчета			= КонтекстРасчета.Период;
	СтрокаСправки.ОбъектНалогообложения	= Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	СтрокаСправки.Доходы				= Доходы;
	СтрокаСправки.Расходы				= Расходы;
	СтрокаСправки.ПеренесенныеУбытки	= УчтенныеУбытки;
	СтрокаСправки.НалоговаяБаза			= НалоговаяБаза;
	СтрокаСправки.СтавкаНалогаУСН		= СтавкаНалогаУСН;
	СтрокаСправки.НалогВсего			= НалогСНачалаГода;
	СтрокаСправки.НалогИсчисленныйВсего	= НалогСНачалаГода;
	СтрокаСправки.МинимальныйНалог		= МинимальныйНалог;
	СтрокаСправки.АвансовыеПлатежи		= ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате			= НалогКУплате;
	Если ДанныеПрогрессивнойШкалыУСН.ПрименяетсяПовышеннаяСтавка Тогда
		СтрокаСправки.ПериодПревышенияЛимитов = ДанныеПрогрессивнойШкалыУСН.ПериодПревышенияЛимитов;
	КонецЕсли;
	СтрокаСправки.СредняяЧисленностьРаботников = СредняяЧисленностьРаботников;
	
КонецПроцедуры

Функция СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты, НалогКУплате = 0, ЭтоМинимальныйНалог = Ложь)
	
	Содержание = "";
	
	ПредставлениеПериода = ?(Реквизиты.ЭтоЗавершающийОтчетныйПериод,
		ПредставлениеПериода(Реквизиты.НачалоГода, Реквизиты.КонецОтчетногоПериода, "ФП=Истина"),
		ПредставлениеПериода(НачалоКвартала(Реквизиты.КонецОтчетногоПериода), Реквизиты.КонецОтчетногоПериода, "ФП=Истина"));
		
	Если НалогКУплате >= 0 Тогда
		Если Реквизиты.ЭтоЗавершающийОтчетныйПериод Тогда
			ВидНалога = ?(ЭтоМинимальныйНалог, НСтр("ru = 'минимальный налог'"), НСтр("ru = 'налог'"));
			Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начислен %1, уплачиваемый в связи с применением УСН, за %2'"),
				ВидНалога,
				ПредставлениеПериода);
		Иначе
			Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начислен авансовый платеж по налогу, уплачиваемому в связи с применением УСН, за %1'"),
				ПредставлениеПериода);
		КонецЕсли;
	Иначе
		ВидПлатежа = ?(Реквизиты.ЭтоЗавершающийОтчетныйПериод,
			НСтр("ru = 'Налог, уплачиваемый в связи с применением УСН'"),
			НСтр("ru = 'Авансовый платеж по налогу, уплачиваемому в связи с применением УСН'"));
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, к уменьшению за %2'"),
				ВидПлатежа,
				ПредставлениеПериода);
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

Процедура СформироватьДвиженияНачислениеНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыНачисленияНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов);	
	Реквизиты = Параметры.Реквизиты[0];
	
	// Проводка по начислению налога.
	Для Каждого СтрокаПроводки Из Параметры.Проводки Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетДт, Проводка.СубконтоДт);
		НалоговыйУчет.УстановитьСубконтоСчетаПоНачислениюНалога(СтрокаПроводки, Проводка.СчетКт, Проводка.СубконтоКт);
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
	// Данные для справки-расчета.
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, Параметры.СправкаРасчет, Параметры.Реквизиты, "РасчетНалогаУСН");
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Проводки
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"			// <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет,"	// <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "Сумма,"					// <Число, 15, 2> - сумма проводки
		+ "Содержание";				// <Строка, 150> - содержание проводки
		
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СправкаРасчет
	
	СписокОбязательныхКолонок = ""
		+ "ПериодРасчета,"                // <Дата> - период расчета (конец квартала)
		+ "ОбъектНалогообложения,"        // <ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН> - объект налогообложения
		+ "ДеятельностьНаТорговомСборе,"  // <Булево> - если Ложь, запись по налогу УСН в целом; если Истина - запись по налогу от деятельности на торговом сборе
		+ "Доходы,"                       // <Число, 15, 2> - сумма доходов за период (с начала года)
		+ "Расходы,"                      // <Число, 15, 2> - сумма расходов за период (с начала года)
		+ "ПеренесенныеУбытки,"           // <Число, 15, 2> - сумма убытков, перенесенных на текущий налоговый период и уменьшающих налоговую базу
		+ "НалоговаяБаза,"                // <Число, 15, 2> - налоговая база с начала года
		+ "СтавкаНалогаУСН,"              // <Число,  5, 2> - ставка налога УСН
		+ "НалогВсего,"                   // <Число, 15, 2> - сумма налога, рассчитанного от налоговой базы и ставки с начала года
		+ "РасходыУменьшающиеНалог,"      // <Число, 15, 2> - сумма расходов по взносам, больничным и т.п., уменьшающих налог при УСН-доходы (с начала года)
		+ "ПроцентУменьшенияНалога,"      // <Число,  3, 0> - максимально допустимый процент уменьшения налога на расходы по взносам, больничным и т.п. при УСН-Доходы
		+ "УменьшениеНалогаФакт,"         // <Число, 15, 2> - сумма расходов по взносам, больничным и т.п., на которую фактически уменьшен налог (при УСН-доходы) с учетом процента ограничения
		+ "УплаченныйТорговыйСбор,"       // <Число, 15, 2> - сумма уплаченного в течение периода торгового сбора (в пределах исчисленного)
		+ "ТорговыйСборУменьшающийНалог," // <Число, 15, 2> - сумма торгового сбора, на которую можно уменьшить налог в дополнение к расходам по взносам, больничным и т.п.
		+ "НалогИсчисленныйВсего,"        // <Число, 15, 2> - сумма фактически исчисленного налога с начала года по текущий квартал включительно
		+ "МинимальныйНалог,"             // <Число, 15, 2> - сумма минимального налога (при УСН доходы-расходы) по итогам налогового периода
		+ "АвансовыеПлатежи,"             // <Число, 15, 2> - сумма исчисленных в предыдущих кварталах (с начала года) авансовых платежей по налогу
		+ "ВозвратыПокупателям,"          // <Число, 15, 2> - сумма возвратов покупателям, уменьшающих налог при УСН-доходы (используется при включенной ФО "ИнтерфейсИнтеграцииСБанком")
		+ "НалогКУплате,"                 // <Число, 15, 2> - сумма налога (авансового платежа), начисленного к уплате в текущем периоде
		+ "ПериодПревышенияЛимитов,"      // <Дата> - период, в котором превышен 1 порог лимитов УСН, установленный в КонтрольПраваПримененияСпецрежима
		+ "СредняяЧисленностьРаботников"; // <Число, 10, 0> - средняя численность наемных работников за отчетный период
		
	Параметры.Вставить("СправкаРасчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСправкиРасчета, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Возвращает сумму фактически уплаченного организацией торгового сбора за период,
// учитываемую при уменьшении налога УСН-доходы.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - организация;
//  НачалоПериода  - Дата - начало анализируемого периода;
//  КонецПериода   - Дата - конец анализируемого периода;
//
// Возвращаемое значение:
//   Число  - сумма уплаченного торгового сбора
//
Функция УплаченныйТорговыйСбор(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если КонецПериода >= УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		// Уплаченный торговый сбор определяем по данным V раздела КУДиР.
		Возврат УплаченныйТорговыйСборПоДанным5РазделаКУДиР(Организация, НачалоПериода, КонецПериода);
	Иначе
		// Раздел V еще не ведется - определяем по данным бухгалтерского учета.
		Возврат УплаченныйТорговыйСборПоДаннымБухгалтерскогоУчета(Организация, НачалоПериода, КонецПериода);
	КонецЕсли;
	
КонецФункции

Функция УплаченныйТорговыйСборПоДанным5РазделаКУДиР(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовРаздел5Обороты.СуммаТорговогоСбораОборот КАК СуммаТорговогоСбора
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел5.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовРаздел5Обороты"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаТорговогоСбора;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция УплаченныйТорговыйСборПоДаннымБухгалтерскогоУчета(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Счета, УсловияОтбора));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаТорговогоСбора
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДенежныхСредств),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОборотыДтКт"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаТорговогоСбора;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Возвращает детализированные по документам сведения об уплаченном организацией торговом сборе за период.
//
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - организация;
//  НачалоПериода  - Дата - начало анализируемого периода;
//  КонецПериода   - Дата - конец анализируемого периода;
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица сведений об уплаченном торговом сборе и документах уплаты.
//
Функция ДокументыУплатыТорговогоСбора(Организация, НачалоПериода, КонецПериода) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Определим первичные документы уплаты торгового сбора.
	СоздатьДокументыУплатыТорговогоСбора(МенеджерВременныхТаблиц, Организация, НачалоПериода, КонецПериода);
	
	// Заполним все необходимые данные по документам уплаты.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыУплатыТорговогоСбора.ДокументОплаты КАК СписаниеСРасчетногоСчета,
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение
	|ПОМЕСТИТЬ СписанияИПлатежки
	|ИЗ
	|	ДокументыУплатыТорговогоСбора КАК ДокументыУплатыТорговогоСбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО (ВЫРАЗИТЬ(ДокументыУплатыТорговогоСбора.ДокументОплаты КАК Документ.СписаниеСРасчетногоСчета).ДокументОснование = ПлатежноеПоручение.Ссылка)
	|ГДЕ
	|	ДокументыУплатыТорговогоСбора.ТипДокумента = ТИП(Документ.СписаниеСРасчетногоСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыУплатыТорговогоСбора.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ СписанияИПлатежки.ПлатежноеПоручение ЕСТЬ NULL
	|			ТОГДА СписанияИПлатежки.ПлатежноеПоручение
	|		ИНАЧЕ ДокументыУплатыТорговогоСбора.ДокументОплаты
	|	КОНЕЦ КАК ДокументОплаты,
	|	ДокументыУплатыТорговогоСбора.СуммаОплаты КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Номер ПОДОБНО ""%[^ ]%""
	|			ТОГДА ДанныеПервичныхДокументов.Номер
	|		ИНАЧЕ ДанныеПервичныхДокументов.НомерРегистратора
	|	КОНЕЦ КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументов.Дата
	|		ИНАЧЕ ДанныеПервичныхДокументов.ДатаРегистратора
	|	КОНЕЦ КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор) КАК СчетУчета,
	|	ДокументыУплатыТорговогоСбора.НалоговыйПериод КАК НалоговыйПериод,
	|	ДокументыУплатыТорговогоСбора.ВидПлатежа КАК ВидПлатежа
	|ИЗ
	|	ДокументыУплатыТорговогоСбора КАК ДокументыУплатыТорговогоСбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДокументыУплатыТорговогоСбора.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписанияИПлатежки КАК СписанияИПлатежки
	|		ПО ДокументыУплатыТорговогоСбора.ДокументОплаты = СписанияИПлатежки.СписаниеСРасчетногоСчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ДокументОплаты"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьДокументыУплатыТорговогоСбора(МенеджерВременныхТаблиц, Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ВидыПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("СчетаДенежныхСредств", БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаДенежныхСредств));
	Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ТорговыйСбор);
	
	Если КонецПериода >= УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР() Тогда
		// Документы уплаты торгового сбора зарегистрированы в V разделе КУДиР.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КнигаУчетаДоходовИРасходовРаздел5.Период КАК Период,
		|	КнигаУчетаДоходовИРасходовРаздел5.Регистратор КАК ДокументОплаты,
		|	КнигаУчетаДоходовИРасходовРаздел5.СуммаТорговогоСбора КАК СуммаОплаты,
		|	КнигаУчетаДоходовИРасходовРаздел5.ПериодНачисления КАК НалоговыйПериод,
		|	ТИПЗНАЧЕНИЯ(КнигаУчетаДоходовИРасходовРаздел5.Регистратор) КАК ТипДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосбюджет.Налог) КАК ВидПлатежа
		|ПОМЕСТИТЬ ДокументыУплатыТорговогоСбора
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел5 КАК КнигаУчетаДоходовИРасходовРаздел5
		|ГДЕ
		|	КнигаУчетаДоходовИРасходовРаздел5.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И КнигаУчетаДоходовИРасходовРаздел5.Организация = &Организация
		|	И КнигаУчетаДоходовИРасходовРаздел5.Активность";
		
	Иначе
		// Раздел V КУДиР еще не ведется - определяем документы уплаты по данным бухгалтерского учета.
		
		// В типовых документах уплаты налоговый период указан явно.
		// Для операций возврата считаем периодом квартал платежа, поскольку возврат увеличивает текущую задолженность.
		// Для нестандартных платежей определяем наиболее вероятный период, за который может уплачиваться сбор на дату их совершения.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Период КАК Период,
		|	ХозрасчетныйОбороты.Регистратор КАК ДокументОплаты,
		|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаОплаты,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод, КВАРТАЛ)
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
		|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод, КВАРТАЛ)
		|		КОГДА ХозрасчетныйОбороты.СуммаОборот < 0
		|			ТОГДА НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ)
		|	КОНЕЦ КАК НалоговыйПериод,
		|	ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) КАК ТипДокумента,
		|	ХозрасчетныйОбороты.Субконто1 КАК ВидПлатежа
		|ПОМЕСТИТЬ ДокументыУплатыТорговогоСбора
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет = &СчетУчета,
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
		|			Организация = &Организация
		|				И Субконто1 В (&ВидыПлатежей),
		|			КорСчет В (&СчетаДенежныхСредств),
		|			) КАК ХозрасчетныйОбороты";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДанныеДляУплатыНалога(Организация, ПериодУплаты) Экспорт

	Перем Платежи;
	
	КонецПериода = КонецКвартала(ПериодУплаты);
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецПериода) Тогда
		Возврат Платежи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК Субконто1,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНприУСН),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0"
	;

	ВыборкаОстатки = Запрос.Выполнить().Выбрать();
	Если ВыборкаОстатки.Следующий() Тогда
		// в результате запроса всегда либо 1 запись, либо 0
		Платежи = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
		НоваяСтрока = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОстатки);
		Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ЗаполнитьВидыНалогов(
			Платежи, Организация, КонецПериода);
	КонецЕсли;
	
	Возврат Платежи;
	
КонецФункции

Функция ПериодНачалаПримененияПовышеннойСтавкиНалога(Организация, НачалоНалоговогоПериода, КонецОтчетногоПериода, ДанныеКУДиРРаздел1 = Неопределено)
	
	Результат = Новый Структура("Период, Ошибки", Дата(1, 1, 1), Новый Массив);
	
	Если КонецОтчетногоПериода < УчетУСНКлиентСервер.ДатаНачалаПрогрессивнойШкалы() Тогда
		Возврат Результат;
	КонецЕсли;
	
	РазрядностьОкругленияПоказателей = УчетУСНКлиентСервер.РазрядностьОкругленияПоказателей(КонецОтчетногоПериода);
	
	// Проверяем превышение лимита доходов.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецОтчетногоПериода);
	
	Если ДанныеКУДиРРаздел1 = Неопределено Тогда
		ДанныеКУДиР = ДанныеКУДиРЗаПериодПоКварталам(Организация, НачалоНалоговогоПериода, КонецОтчетногоПериода);
		ДоходыПоКварталам = ДанныеКУДиР.Раздел1;
	Иначе
		ДоходыПоКварталам = ДанныеКУДиРРаздел1.Скопировать(, "Период, Доходы");
	КонецЕсли;
	
	ДоходыПоКварталам.Свернуть("Период", "Доходы");
	ДоходыПоКварталам.Сортировать("Период");
	
	ГраницаДоходов = КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаДоходовДляПримененияОсновнойСтавкиУСН(
		КонецОтчетногоПериода);
	
	ДоходыНакопительнымИтогом = 0;
	
	Для Каждого СтрокаДоходов Из ДоходыПоКварталам Цикл
		ДоходыНакопительнымИтогом = ДоходыНакопительнымИтогом + СтрокаДоходов.Доходы;
		
		Если Окр(ДоходыНакопительнымИтогом, РазрядностьОкругленияПоказателей) > ГраницаДоходов Тогда
			
			Если Не ЗначениеЗаполнено(Результат.Период)
				Или СтрокаДоходов.Период < Результат.Период Тогда
				Результат.Период = СтрокаДоходов.Период;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	// Проверяем превышение лимита средней численности работников.
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация, Ложь) Тогда
		
		ГраницаЧисленностиРаботников =
			КонтрольПраваПримененияСпецрежимаКлиентСервер.ГраницаЧисленностиРаботниковДляПримененияОсновнойСтавкиУСН();
		
		ТекущийПериод = КонецКвартала(НачалоНалоговогоПериода);
		Пока ТекущийПериод <= КонецКвартала(КонецОтчетногоПериода) Цикл
			
			// Лимит по доходам достигнут раньше, чем лимит по сотрудникам. Дальнейшая проверка не имеет смысла
			Если ЗначениеЗаполнено(Результат.Период) И Результат.Период < ТекущийПериод Тогда
				Прервать;
			КонецЕсли;
			
			ЧисленностьРаботников = СредняяЧисленностьРаботников(Организация, НачалоНалоговогоПериода, ТекущийПериод);
			
			// При учете зарплаты во внешней программе, численность работников может быть не указана.
			// В таком случае возвращаем ошибку с требованием указать среднюю численность работников.
			Если ЧисленностьРаботников = Неопределено Тогда
				ОписаниеОшибки = Новый Структура;
				ОписаниеОшибки.Вставить("Тип", "ЧисленностьРаботников");
				ОписаниеОшибки.Вставить("ТекстСообщения", НСтр(
					"ru = 'Не указана средняя численность наемных работников за отчетный период.'"));
				ОписаниеОшибки.Вставить("СсылкаДляПерехода", 
					СсылкаДляПереходаНеУказанаЧисленностьРаботников(Организация, ТекущийПериод));
				Результат.Ошибки.Добавить(ОписаниеОшибки);
				
				Возврат Результат;
			КонецЕсли;
			
			Если ЧисленностьРаботников > ГраницаЧисленностиРаботников Тогда
				Результат.Период = НачалоКвартала(ТекущийПериод);
				Прервать;
			КонецЕсли;
			
			ТекущийПериод = КонецКвартала(ДобавитьМесяц(ТекущийПериод, 3));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКУДиРЗаПериод(Организация, НачалоПериода, КонецПериода)
	
	Результат = Новый Структура;
	Результат.Вставить("Доходы", 0);
	Результат.Вставить("Расходы", 0);
	Результат.Вставить("ДоходыТорговыйСбор", 0);
	
	Если НачалоПериода > КонецПериода Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы,
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот КАК ДоходыТорговыйСбор
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, ,
	|		Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НалоговаяБазаЗаПериодПоДаннымРасчетаНалога(Организация, ПериодРасчета)
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ПериодРасчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(КонецКвартала(ПериодРасчета)));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетНалогаУСН.Организация КАК Организация,
	|	РасчетНалогаУСН.ПериодРасчета КАК ПериодРасчета,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалоговаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК НалоговаяБаза,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалогВсего
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Налог,
	|	СУММА(ВЫБОР
	|		КОГДА РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалоговаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК НалоговаяБазаТорговыйСбор,
	|	СУММА(ВЫБОР
	|		КОГДА РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|			ТОГДА РасчетНалогаУСН.НалогВсего
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК НалогТорговыйСбор
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета = &ПериодРасчета
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаУСН.Организация,
	|	РасчетНалогаУСН.ПериодРасчета";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Параметры объекта для настройки отражения в УСН при программной обработке
//
Функция СтруктураПараметровОбъектаДляУСН(Объект) Экспорт

	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыНастройкиУСН();
	
	// общие параметры
	ПараметрыУСН.Вставить("ПрименениеУСН", УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата));
	ПараметрыУСН.Вставить("ПрименениеУСНДоходы", УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата));
	
	Если Не ПараметрыУСН.ПрименениеУСН Тогда
		Возврат ПараметрыУСН;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыУСН, Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ПараметрыУСН.Вставить("ВалютаРегламентированногоУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	СтруктураКурса = Новый Структура("Курс, Кратность", 1, 1);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеОбъекта) Тогда
		ПараметрыУСН.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		Если Объект.ВалютаДокумента <> ПараметрыУСН.ВалютаРегламентированногоУчета Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КонецЕсли;
	Иначе
		ПараметрыУСН.Вставить("ВалютаДокумента", ПараметрыУСН.ВалютаРегламентированногоУчета);
	КонецЕсли;

	ПараметрыУСН.КурсДокумента      = СтруктураКурса.Курс;
	ПараметрыУСН.КратностьДокумента = СтруктураКурса.Кратность;
	
	// специфичные параметры
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеОбъекта) Тогда
		
		ПараметрыУСН.Вставить("ВидОперации", Объект.ВидОперации);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			
			ПараметрыУСН.НТТПоПродажнымЦенам = Объект.ВыручкаСНТТ
				И (УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
					= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
			
			РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент, Объект.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
			
			ПараметрыУСН.НТТНаЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
			
		КонецЕсли;
		
		// В банковских и кассовых документах договор контрагента хранится в ТЧ "РасшифровкаПлатежа"
		Если (ЕстьПрочиеРасчетыПоДоходам(Объект.ВидОперации)
			Или ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации))
			И Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
			ПараметрыУСН.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыУСН;
	
КонецФункции

Функция СодержаниеУСНРедактируетсяПользователем(ДокументОбъект) Экспорт

	Результат = Ложь;
	
	// учтем возможное отсутствие нужных реквизитов
	ДанныеОбъекта = Новый Структура("ВидОперации, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	
	Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		
		Результат = Истина;
		
	ИначеЕсли (ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога) Тогда
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			СчетНалога = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентом;
			
			СчетаНалоговИВзносов  = СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы();
			СчетаНалоговИзПрибыли = СчетаУчетаНалоговУменьшающихПрибыль();
			
			ЭтоНалогИлиВзнос  = СчетаНалоговИВзносов.Найти(СчетНалога) <> Неопределено;
			ЭтоНалогИзПрибыли = СчетаНалоговИзПрибыли.Найти(СчетНалога) <> Неопределено;
			
			НалогНачисленВручную = НЕ (ЭтоНалогИлиВзнос ИЛИ ЭтоНалогИзПрибыли);
			
			ЭтоНеНалог = Ложь;
			Если НЕ НалогНачисленВручную И ТипЗнч(ДанныеОбъекта.СубконтоДт1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосбюджет") Тогда
				ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
				ЭтоНеНалог = ВидыНалоговыхПлатежей.Найти(ДанныеОбъекта.СубконтоДт1) = Неопределено;
			КонецЕсли;
			
			Результат = (НалогНачисленВручную ИЛИ ЭтоНеНалог);
			
		Иначе
			
			Результат = Истина;
			
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция СуммаДохода(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	СуммаДохода = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СуммаДохода;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК СуммаДохода
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДохода = Выборка.СуммаДохода;
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

Функция СуммаДоходаДляРасчетаСтраховыхВзносовИП(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	СуммаДохода = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СуммаДохода;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если УчетСтраховыхВзносовИП.УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, ДатаНачала) Тогда
			СуммаДохода = Макс(Выборка.Доходы - Выборка.Расходы, 0);
		Иначе
			СуммаДохода = Выборка.Доходы;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

Функция ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР() Экспорт 
	
	Возврат '20131001';
	
КонецФункции

Функция ПеренесенныеУбыткиПрошлыхЛет(Организация, НачалоПериода, КонецПериода) Экспорт

	СтруктураУбытков = Новый Структура("ПеренесенныеУбытки, УбытокОтУплатыМинимальногоНалога, Ссылка", 0, 0, Неопределено);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РегистрацияСуммыУбыткаУСН.СуммаНеПеренесенныхУбытков) КАК СуммаНеПеренесенныхУбытков,
	|	РегистрацияСуммыУбыткаУСН.Ссылка
	|ПОМЕСТИТЬ НеперенесенныеУбытки
	|ИЗ
	|	Документ.РегистрацияСуммыУбыткаУСН.Убытки КАК РегистрацияСуммыУбыткаУСН
	|ГДЕ
	|	РегистрацияСуммыУбыткаУСН.Ссылка.Организация = &Организация
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияСуммыУбыткаУСН.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РегистрацияСуммыУбыткаУСН.УбытокОтУплатыМинимальногоНалога), 0) КАК УбытокОтУплатыМинимальногоНалога,
	|	ЕСТЬNULL(СУММА(НеперенесенныеУбытки.СуммаНеПеренесенныхУбытков), 0) КАК СуммаНеПеренесенныхУбытков,
	|	ЕСТЬNULL(РегистрацияСуммыУбыткаУСН.Ссылка, ЗНАЧЕНИЕ(Документ.РегистрацияСуммыУбыткаУСН.ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	НеперенесенныеУбытки КАК НеперенесенныеУбытки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСуммыУбыткаУСН КАК РегистрацияСуммыУбыткаУСН
	|		ПО НеперенесенныеУбытки.Ссылка = РегистрацияСуммыУбыткаУСН.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияСуммыУбыткаУСН.Ссылка"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураУбытков.ПеренесенныеУбытки               = Выборка.СуммаНеПеренесенныхУбытков;
		СтруктураУбытков.УбытокОтУплатыМинимальногоНалога = Выборка.УбытокОтУплатыМинимальногоНалога;
		СтруктураУбытков.Ссылка                           = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтруктураУбытков;

КонецФункции

Процедура ЗаполнитьПоступлениеНаРасчетныйСчет(Документ) Экспорт
	
	ПорядокОтраженияАванса = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(Документ.Организация, Документ.Дата);
	
	Для Каждого СтрокаРасшифровки Из Документ.РасшифровкаПлатежа Цикл
		СтрокаРасшифровки.ПорядокОтраженияАванса = ПорядокОтраженияАванса;
	КонецЦикла;
	
	ПараметрыПСН = Документы.ПоступлениеНаРасчетныйСчет.ПараметрыОбъектаДляЗаполненияПатента(Документ);
	Документ.Патент = УчетПСН.ПатентВходящегоПлатежа(ПараметрыПСН);
	
	ПараметрыУСН = СтруктураПараметровОбъектаДляУСН(Документ);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Документ, ПараметрыУСН);
	Если СодержаниеУСНРедактируетсяПользователем(Документ) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Документ, ПараметрыУСН);
	Иначе
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
		Документ.Содержание_УСН = Содержание_УСН;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеСРасчетногоСчета(Документ, ЗаполнитьСодержаниеУСН) Экспорт
	
	ПараметрыУСН = СтруктураПараметровОбъектаДляУСН(Документ);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Документ, ПараметрыУСН);
	Если ЗаполнитьСодержаниеУСН Тогда
		Если СодержаниеУСНРедактируетсяПользователем(Документ) Тогда
			НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Документ, ПараметрыУСН);
		Иначе
			Документ.Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверятьРегионРегистрацииПриУменьшенииНалогаНаТорговыйСбор(Период)
	
	// В соответствии с п. 8 ст. 346.21 НК РФ плательщики торгового сбора, применяющие УСН-доходы, могут уменьшить налог
	// на торговый сбор только тогда, когда и торговый сбор, и налог УСН уплачиваются в консолидированный бюджет
	// одного и того же региона. Поэтому при расчете торгового сбора, уменьшающего налог, необходимо проверять,
	// что налогоплательщик зарегистрирован в том же регионе, в котором уплачивает торговый сбор.
	
	// При этом необходимо избежать такой проверки при расчете налога "задним числом" - за периоды, когда
	// данной проверки в программе еще не было. Иначе при пересчете налога в организациях, зарегистрированных
	// не в регионе уплаты торгового сбора, сумма ранее рассчитанного налога может измениться.
	// А изменения в суммах начисленных налогов и финансового результата за предыдущие периоды нежелательны,
	// даже если какой-то из налогов исходно был рассчитан неверно.
	// Необходимые корректировки должны быть осознанным выбором пользователя и оформлены самостоятельно.
	
	Возврат Период >= '20200101';
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН (ФОРМИРОВАНИЕ IV РАЗДЕЛА КУДИР)

Функция ПодготовитьТаблицуДвиженийПоРазделу4КУДиР(ТаблицаРасходов, ТаблицаРеквизитов) Экспорт
	
	ТаблицаРаздел4КУДиР = ПустаяТаблицаДвиженийПоРазделу4КУДиР();
	
	Параметры = ПодготовитьПараметрыДвиженийПоРазделу4КУДиР(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат ТаблицаРаздел4КУДиР;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Не Реквизиты.ПрименяетсяУСНДоходы Тогда
		Возврат ТаблицаРаздел4КУДиР;
	КонецЕсли;
	
	ВидыРасходовПоСчетам = ВидыРасходовУменьшающихНалогПоСчетамУчета();
	
	Для каждого СтрокаРасхода Из ТаблицаРасходов Цикл
			
		Если СтрокаРасхода.СуммаРасхода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидРасхода = ВидыРасходовПоСчетам[СтрокаРасхода.СчетУчета];
		
		Если НЕ ЗначениеЗаполнено(ВидРасхода) Тогда
			// Расходы по данному счету учета не уменьшают налог УСН
			Продолжить;
		КонецЕсли;
		
		ЗаписьРаздела = ТаблицаРаздел4КУДиР.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРаздела, СтрокаРасхода);
		
		ЗаписьРаздела[ВидРасхода] = СтрокаРасхода.СуммаРасхода;
		
		ФорматПериодаНачисления = "ДФ='MMMM yyyy'";
		
		Если Реквизиты.ЭтоИндивидуальныйПредприниматель
			И (ВидРасхода = "ПФР" Или ВидРасхода = "ФОМС")
			И УчетСтраховыхВзносовИП.ЭтоСчетУчетаСтраховыхВзносовИП(СтрокаРасхода.СчетУчета) Тогда
			
			ФорматПериодаНачисления = "ДФ='yyyy ''г.'''";
			
			// Переопределяем период начисления для корректного распределения по деятельности на торговом сборе.
			// Для взносов ИП за прошлый год период начисления - конец прошлого года.
			// Для взносов за текущий год - конец текущего квартала.
			ЗаписьРаздела.ПериодНачисления = Мин(КонецГода(СтрокаРасхода.ПериодНачисления), КонецКвартала(Реквизиты.Период));
			
		КонецЕсли;
		
		ЗаписьРаздела.ПериодНачисленияПредставление = Формат(СтрокаРасхода.ПериодНачисления, ФорматПериодаНачисления);
		
		ЗаписьРаздела.РеквизитыПервичногоДокумента =
			ПредставлениеДокументаРасхода(СтрокаРасхода.ПервичныйДокументНомер, СтрокаРасхода.ПервичныйДокументДата);
			
	КонецЦикла;
	
	// У плательщика торгового сбора расходы необходимо разделить между деятельностью на торговом сборе и остальной.
	РаспределитьРасходыПоДеятельностиНаТорговомСборе(ТаблицаРаздел4КУДиР, Реквизиты);
	
	// Приведем таблицу движений регистра в надлежащий для записи вид.
	ТаблицаРаздел4КУДиР.Свернуть("Период, Организация, ПериодНачисления, ПериодНачисленияПредставление,
							|ДеятельностьНаТорговомСборе, ДокументРасхода, ДокументРасходаДата, РеквизитыПервичногоДокумента",
							"ПФР, ФСС, ФОМС, ФСС_НС, Больничные, ДобровольноеСтрахование");
	
	ТаблицаРаздел4КУДиР.Сортировать(
		"ДокументРасходаДата, ДокументРасхода, ПериодНачисления, ДеятельностьНаТорговомСборе",
		Новый СравнениеЗначений);
		
	Возврат ТаблицаРаздел4КУДиР;
	
КонецФункции

Функция ПодготовитьПараметрыДвиженийПоРазделу4КУДиР(ТаблицаРеквизитов) 

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                            // <Дата> - период движений - дата документа
		+ "Регистратор,"                       // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"                       // <СправочникСсылка.Организации> - организация
		+ "ПрименяетсяУСНДоходы,"              // <Булево> - признак применения УСН с объектом налогообложения "Доходы"
		+ "ЭтоИндивидуальныйПредприниматель,"  // <Булево> - признак: организация является индивидуальным предпринимателем
		+ "ЭтоНачалоГода";                     // <Булево> - признак: текущий расчет первый в году
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПредставлениеДокументаРасхода(НомерДокумента, ДатаДокумента)
	
	ПечНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	ПечДата  = Формат(ДатаДокумента, "ДФ=dd.MM.yyyy");
	
	ПредставлениеРезультат  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '№ %1 от %2'"), ПечНомер, ПечДата);
		
	Возврат ПредставлениеРезультат;
	
КонецФункции

Процедура РаспределитьРасходыПоДеятельностиНаТорговомСборе(ТаблицаРасходов, Реквизиты)
	
	Если ТаблицаРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоКвартала(Реквизиты.Период);
	КонецПериода = КонецКвартала(Реквизиты.Период);
	
	Если Не ЕстьПравоУменьшатьНалогНаТорговыйСбор(Реквизиты.Организация, КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	// Суммы расходов, уменьшающих налог в части деятельности на торговом сборе,
	// определяются пропорционально доходам от деятельности на торговом сборе за квартал.
	
	ДоляДоходовТорговыйСбор = ДоляДоходовПоДеятельностиНаТорговомСборе(Реквизиты.Организация, НачалоПериода, КонецПериода);
	
	Если ДоляДоходовТорговыйСбор = 0 Тогда // Распределение не требуется.
		Возврат;
	КонецЕсли;
	
	ДоляДоходовУСН = 1 - ДоляДоходовТорговыйСбор;
	
	РасходыДоРаспределения = ТаблицаРасходов.Скопировать();
	ТаблицаРасходов.Очистить();
	
	Для Каждого Расход Из РасходыДоРаспределения Цикл
		
		// Расходы, относящиеся к деятельности УСН на торговом сборе.
		Если ДоляДоходовТорговыйСбор > 0 Тогда
			
			НоваяСтрокаРасхода = ТаблицаРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасхода, Расход);
			
			НоваяСтрокаРасхода.ДеятельностьНаТорговомСборе = Истина;
			
			Если ДоляДоходовТорговыйСбор < 1 Тогда
				НоваяСтрокаРасхода.ПФР                     = Окр(Расход.ПФР * ДоляДоходовТорговыйСбор, 2);
				НоваяСтрокаРасхода.ФСС                     = Окр(Расход.ФСС * ДоляДоходовТорговыйСбор, 2);
				НоваяСтрокаРасхода.ФОМС                    = Окр(Расход.ФОМС * ДоляДоходовТорговыйСбор, 2);
				НоваяСтрокаРасхода.ФСС_НС                  = Окр(Расход.ФСС_НС * ДоляДоходовТорговыйСбор, 2);
				НоваяСтрокаРасхода.Больничные              = Окр(Расход.Больничные * ДоляДоходовТорговыйСбор, 2);
				НоваяСтрокаРасхода.ДобровольноеСтрахование = Окр(Расход.ДобровольноеСтрахование * ДоляДоходовТорговыйСбор, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// Расходы, относящиеся к "обычной" УСН.
		Если ДоляДоходовУСН > 0 Тогда
			
			НоваяСтрокаРасхода = ТаблицаРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасхода, Расход);
			
			НоваяСтрокаРасхода.ДеятельностьНаТорговомСборе = Ложь;
			
			Если ДоляДоходовУСН < 1 Тогда
				НоваяСтрокаРасхода.ПФР                     = Окр(Расход.ПФР * ДоляДоходовУСН, 2);
				НоваяСтрокаРасхода.ФСС                     = Окр(Расход.ФСС * ДоляДоходовУСН, 2);
				НоваяСтрокаРасхода.ФОМС                    = Окр(Расход.ФОМС * ДоляДоходовУСН, 2);
				НоваяСтрокаРасхода.ФСС_НС                  = Окр(Расход.ФСС_НС * ДоляДоходовУСН, 2);
				НоваяСтрокаРасхода.Больничные              = Окр(Расход.Больничные * ДоляДоходовУСН, 2);
				НоваяСтрокаРасхода.ДобровольноеСтрахование = Окр(Расход.ДобровольноеСтрахование * ДоляДоходовУСН, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыРасходовУменьшающихНалогПоСчетамУчета()

	СоответствиеСчетов = Новый Соответствие;
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.Забалансовый = Ложь;
	
	// ПФР
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);  // 69.02.1 (до 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);    // 69.02.2 (до 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);    // 69.02.7 (с 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП); // 69.06.5 - страховые взносы ИП в ПФР
	
	СчетаПФР = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаПФР Цикл
		СоответствиеСчетов.Вставить(Счет, "ПФР");
	КонецЦикла;
	
	// ФОМС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС);              // 69.03
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод); // 69.06.3
	
	СчетаФОМС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаФОМС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФОМС");
	КонецЦикла;
	
	// ФСС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС);               // 69.01
	
	СчетаФСС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаФСС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФСС");
	КонецЦикла;
	
	// ФСС_НС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);         // 69.11
	
	СчетаФСС_НС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаФСС_НС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФСС_НС");
	КонецЦикла;
	
	// Больничные
	СоответствиеСчетов.Вставить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, "Больничные");
	
	Возврат СоответствиеСчетов;

КонецФункции

Процедура СформироватьДвиженияКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаДвижений)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Не Реквизиты.ПрименяетсяУСНДоходы Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаЗаписи Из Параметры.ТаблицаДвижений Цикл
		
		Запись = Движения.КнигаУчетаДоходовИРасходовРаздел4.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗаписи);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;
	
	Движения.КнигаУчетаДоходовИРасходовРаздел4.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка> - документ-регистратор движений
		+ "Организация,"
		+ "ПрименяетсяУСНДоходы"; // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаДвижений
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасхода,"               // <ДокументСсылка> - документ-основание для отражения операции в КУДиР
		+ "ПериодНачисления,"              // <Дата> - дата периода начисления
		+ "ПериодНачисленияПредставление," // <Строка> - текстовое представление периода начисления
		+ "ДеятельностьНаТорговомСборе,"   // <Булево> - если Истина, расходы относятся к деятельности, облагаемой торговым сбором
		+ "РеквизитыПервичногоДокумента,"  // <Строка> - реквизиты (дата и номер) документа-основания для операции
		+ "ПФР,"                           // <Число, 15, 2> - сумма взносов в ПФР
		+ "ФОМС,"                          // <Число, 15, 2> - сумма взносов в ФОМС
		+ "ФСС,"                           // <Число, 15, 2> - сумма взносов в ФСС
		+ "ФСС_НС,"                        // <Число, 15, 2> - сумма взносов в ФСС от несчастных случаев и проф. заболеваний
		+ "Больничные,"                    // <Число, 15, 2> - сумма выплаченных больничных за счет работодтеля
		+ "ДобровольноеСтрахование";       // <Число, 15, 2> - сумма расходов на добровольное страхование
		
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаДвиженийПоРазделу4КУДиР()

	ТаблицаДвижений = Новый ТаблицаЗначений;

	ТаблицаДвижений.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДвижений.Колонки.Добавить("ДокументРасхода", Документы.ТипВсеСсылки());
	ТаблицаДвижений.Колонки.Добавить("ДеятельностьНаТорговомСборе", Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений.Колонки.Добавить("ДокументРасходаДата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("ПериодНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДвижений.Колонки.Добавить("ПериодНачисленияПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаДвижений.Колонки.Добавить("РеквизитыПервичногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДвижений.Колонки.Добавить("ПФР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ФОМС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ФСС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ФСС_НС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("Больничные", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ДобровольноеСтрахование", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаДвижений;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ УПЛАЧЕННОГО ТОРГОВОГО СБОРА, УМЕНЬШАЮЩЕГО НАЛОГ УСН (ФОРМИРОВАНИЕ V РАЗДЕЛА КУДИР)

Функция ПодготовитьТаблицуУплатыТорговогоСбораДляРаздела5КУДиР(ТаблицаПлатежей, ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаПлатежей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Реквизиты.Период < УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР()
		Или Не УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период)
		Или Не БухгалтерскийУчетПовтИсп.СчетВИерархии(Реквизиты.СчетУчета, ПланыСчетов.Хозрасчетный.ТорговыйСбор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыУплатыТорговогоСбораДляРаздела5КУДиР(
		ТаблицаПлатежей, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ПериодНачисления = ?(ЗначениеЗаполнено(Реквизиты.НалоговыйПериод),
		НачалоКвартала(Реквизиты.НалоговыйПериод),
		НачалоКвартала(Реквизиты.Период));
	
	ДатаПервичногоДокумента = ?(ЗначениеЗаполнено(Реквизиты.ДатаВходящегоДокумента),
		Реквизиты.ДатаВходящегоДОкумента,
		Реквизиты.Период);
	РеквизитыПервичногоДокумента = РеквизитыПервичногоДокументаДляКУДиР(
		ДатаПервичногоДокумента, Реквизиты.НомерВходящегоДокумента, Реквизиты.Период);
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	
	ТаблицаУплатыТорговогоСбора = НоваяТаблицаУплатыТорговогоСбораДляРаздела5КУДиР();
	
	Для каждого СтрокаПлатеж Из Параметры.ТаблицаПлатежей Цикл
		Если ВидыНалоговыхПлатежей.Найти(СтрокаПлатеж.СубконтоДт1) <> Неопределено Тогда
			НоваяСтрока = ТаблицаУплатыТорговогоСбора.Добавить();
			
			НоваяСтрока.ПериодНачисления = ПериодНачисления;
			НоваяСтрока.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
			НоваяСтрока.СуммаТорговогоСбора = СтрокаПлатеж.СуммаРуб;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаУплатыТорговогоСбора;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыУплатыТорговогоСбораДляРаздела5КУДиР(ТаблицаПлатежей, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                  // <Дата> - период движений - дата документа
		+ "Регистратор,"             // <ДокументСсылка> - документ-регистратор движений
		+ "Организация,"             // <СправочникСсылка.Организации> - организация
		+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный> - счет учета налога
		+ "НалоговыйПериод,"         // <Дата> - дата периода начисления (квартала, за который уплачивается сбор)
		+ "НомерВходящегоДокумента," // <Строка, 20> - номер входящего документа для регистрации в КУДиР
		+ "ДатаВходящегоДокумента,"  // <Дата> - дата входящего документа для регистрации в КУДиР
		+ "ВидОперации";             // <ПеречислениеСсылка.*> - вид операции документа
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаПлатежей
	
	СписокОбязательныхКолонок = ""
		+ "СубконтоДт1," // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - вид налогового обязательства
		+ "СуммаРуб";    // <Число, 15, 2> - сумма уплаченного торгового сбора
		
	Параметры.Вставить("ТаблицаПлатежей", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПлатежей, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияКУДиРРаздел5(ТаблицаДвижений, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов)
	 Или Не ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Реквизиты.Период < УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР()
	 Или Не УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийКУДиРРаздел5(ТаблицаДвижений, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
		
	Для каждого СтрокаЗаписи Из Параметры.ТаблицаДвижений Цикл
		
		Запись = Движения.КнигаУчетаДоходовИРасходовРаздел5.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗаписи);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;
	
	Движения.КнигаУчетаДоходовИРасходовРаздел5.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийКУДиРРаздел5(ТаблицаДвижений, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"              // <Дата> - период движений - дата документа
		+ "Регистратор,"         // <ДокументСсылка> - документ-регистратор движений
		+ "Организация";         // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаДвижений
	
	СписокОбязательныхКолонок = ""
		+ "ПериодНачисления,"              // <Дата> - дата периода начисления
		+ "РеквизитыПервичногоДокумента,"  // <Строка> - реквизиты (дата и номер) документа-основания для операции
		+ "СуммаТорговогоСбора";           // <Число, 15, 2> - сумма расходов на добровольное страхование
		
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция НоваяТаблицаУплатыТорговогоСбораДляРаздела5КУДиР()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("ПериодНачисления",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("РеквизитыПервичногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаРезультат.Колонки.Добавить("СуммаТорговогоСбора",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаРезультат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОМОЩНИК РАСЧЕТА НАЛОГА УСН

Функция ДоходыЗаПериодНеЗависятОтПоследовательности(Организация, НачалоПериода, КонецПериода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Счета, движения по которым являются признаком возможных взаимозависимостей.
	СчетаУСН = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтролируемыеСчета", СчетаУСН);
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстаткиИОбороты.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&КонтролируемыеСчета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты";
	
	НеоблагаемыеРасчетыОтсутствуют = Запрос.Выполнить().Пустой();
	
	Если НеоблагаемыеРасчетыОтсутствуют
		И Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(Организация, НачалоПериода, КонецПериода)
		И УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		
		// Даже при явном отсутствии расчетов по необлагаемой деятельности (счета УСН.хх) возможен сценарий:
		// применялась только УСН, но вводились документы с отнесением выручки к ЕНВД,
		// затем "задним числом" добавили систему налогообложения ЕНВД
		//
		// В этом случае при перепроведении доходы могут перераспределиться между УСН и необлагаемой деятельностью.
		// Нужно проверить, что такие документы отсутствуют.
		
		СчетаВыручкиОсобыйПорядок = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
		Запрос.УстановитьПараметр("КонтролируемыеСчета", СчетаВыручкиОсобыйПорядок);
		НеоблагаемыеРасчетыОтсутствуют = Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат НеоблагаемыеРасчетыОтсутствуют;
	
КонецФункции

#Область СчетаУчета

// Возвращает массив счетов учета налогов и взносов,
// расчет и отражение которых производится автоматически
Функция СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗемельныйНалог),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТранспортныйНалог),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогНаИмущество),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках"
	;

	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

// Возвращает массив счетов учета налогов, уменьшающих прибыль
Функция СчетаУчетаНалоговУменьшающихПрибыль()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНВД),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНприУСН))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках"
	;

	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

Функция СчетаУчетаВзносовСФОТ() Экспорт

	СчетаВзносов = Новый Массив;
	
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх); // 69.02.1 (до 2014 года)
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);   // 69.02.2 (до 2014 года)
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);   // 69.02.7 (с 2014 года)
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФСС);       // 69.01
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ); // 69.11
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС);      // 69.03.1
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаВзносов, УсловияОтбора);
	
КонецФункции

#КонецОбласти

#Область УплатаНалога

// Определяет документы уплаты налога за периоды, находящиеся в пределах переданного интервала.
// Имеет значение период, за который уплачивается налог - "налоговый период" в документах.
// Даты платежей не учитываются.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - организация, для которой требуются сведения.
//  НачалоПериода - Дата - дата в квартале, начиная с которого ищутся патежи.
//  КонецПериода  - Дата - дата в квартале, по который ищутся платежи.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с документами уплаты, состав:
//    * ДокументОплаты  - ДокументСсылка - документ платежа;
//    * СуммаОплаты     - Число - Сумма платежа;
//    * НалоговыйПериод - Дата - начало квартала, за который произведен платеж;
//    * СчетУчета       - ПланСчетовСсылка.Хозрасчетный - счет учета налога;
//    * ВидПлатежа      - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - вид налогового платежа;
//    * НомерДокумента  - Строка - номер первичного документа;
//    * ДатаДокумента   - Дата - дата первичного документа;
//   Неопределено - при неверных входящих параметрах.
//
Функция ДокументыУплатыНалогаЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); //50.01
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   //51
	
	// Очень редко может быть так, что налог уплачивается "вперед".
	// Например, решили прекратить деятельность на УСН, а со следующего года возобновили.
	// Поэтому учитываем платежи, совершенные с начала прошлого года.
	НачалоПериодаОбзора = НачалоГода(ДобавитьМесяц(НачалоПериода, -12));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериодаОбзора", НачалоПериодаОбзора);
	Запрос.УстановитьПараметр("СчетНачисленияНалога", ПланыСчетов.Хозрасчетный.ЕНприУСН); // Кт 68.12
	Запрос.УстановитьПараметр("ВидыПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("СчетаДенежныхСредств", БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаДенежныхСредств));
	
	// В типовых документах уплаты налоговый период указан явно.
	// Для операций возврата налога считаем периодом квартал платежа, поскольку возврат увеличивает текущую задолженность.
	// Для нестандартных платежей определяем наиболее вероятный период, за который может уплачиваться налог на дату их совершения.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаПлатежа,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод, КВАРТАЛ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод, КВАРТАЛ)
	|		КОГДА ХозрасчетныйОбороты.СуммаОборот < 0
	|			ТОГДА НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) КАК ТипДокумента,
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Субконто1 КАК ВидПлатежа
	|ПОМЕСТИТЬ ВТ_НалоговыеПлатежи
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериодаОбзора,
	|			,
	|			Регистратор,
	|			Счет = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежей),
	|			КорСчет В (&СчетаДенежныхСредств),
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ_НалоговыеПлатежи.Регистратор КАК Документ.СписаниеСРасчетногоСчета).Ссылка КАК ДокументСписаниеСРасчетногоСчета
	|ПОМЕСТИТЬ ВТ_СписанияСРасчетногоСчета
	|ИЗ
	|	ВТ_НалоговыеПлатежи КАК ВТ_НалоговыеПлатежи
	|ГДЕ
	|	ВТ_НалоговыеПлатежи.ТипДокумента = ТИП(Документ.СписаниеСРасчетногоСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	ВТ_СписанияСРасчетногоСчета.ДокументСписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ПОМЕСТИТЬ ВТ_СписанияИПлатежки
	|ИЗ
	|	ВТ_СписанияСРасчетногоСчета КАК ВТ_СписанияСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО ВТ_СписанияСРасчетногоСчета.ДокументСписаниеСРасчетногоСчета.ДокументОснование = ПлатежноеПоручение.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ВТ_СписанияИПлатежки.ПлатежноеПоручение ЕСТЬ NULL
	|			ТОГДА ВТ_СписанияИПлатежки.ПлатежноеПоручение
	|		ИНАЧЕ ВТ_НалоговыеПлатежи.Регистратор
	|	КОНЕЦ КАК ДокументОплаты,
	|	ВТ_НалоговыеПлатежи.СуммаПлатежа КАК СуммаОплаты,
	|	ВТ_НалоговыеПлатежи.НалоговыйПериод КАК НалоговыйПериод,
	|	ВТ_НалоговыеПлатежи.СчетУчета КАК СчетУчета,
	|	ВТ_НалоговыеПлатежи.ВидПлатежа КАК ВидПлатежа,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Номер ПОДОБНО ""%[^ ]%""
	|			ТОГДА ДанныеПервичныхДокументов.Номер
	|		ИНАЧЕ ДанныеПервичныхДокументов.НомерРегистратора
	|	КОНЕЦ КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеПервичныхДокументов.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументов.Дата
	|		ИНАЧЕ ДанныеПервичныхДокументов.ДатаРегистратора
	|	КОНЕЦ КАК ДатаДокумента
	|ИЗ
	|	ВТ_НалоговыеПлатежи КАК ВТ_НалоговыеПлатежи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписанияИПлатежки КАК ВТ_СписанияИПлатежки
	|		ПО ВТ_НалоговыеПлатежи.Регистратор = ВТ_СписанияИПлатежки.СписаниеСРасчетногоСчета
	|			И (ВТ_НалоговыеПлатежи.ТипДокумента = ТИП(Документ.СписаниеСРасчетногоСчета))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТ_НалоговыеПлатежи.Регистратор = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	ДокументОплаты";
	
	Платежи = Запрос.Выполнить().Выгрузить();
	
	НачалоПериодаПлатежей  = НачалоКвартала(НачалоПериода);
	КонецПериодаПлатежей   = КонецКвартала(КонецПериода);
	
	НеподходящиеПлатежи = Новый Массив;
	
	Для Каждого Платеж Из Платежи Цикл
		
		// Определим налоговый период для операций, в которых он явно не указан.
		Если НЕ ЗначениеЗаполнено(Платеж.НалоговыйПериод) Тогда
			Платеж.НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(Платеж.ДатаДокумента, Организация);
		КонецЕсли;
		
		// Исключим платежи за периоды вне переданного интервала.
		Если Платеж.НалоговыйПериод < НачалоПериодаПлатежей ИЛИ Платеж.НалоговыйПериод > КонецПериодаПлатежей Тогда
			НеподходящиеПлатежи.Добавить(Платеж);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого НеподходящийПлатеж Из НеподходящиеПлатежи Цикл
		Платежи.Удалить(НеподходящийПлатеж);
	КонецЦикла;
	
	Возврат Платежи;
	
КонецФункции

// Определяет сумму уплаченного налога за периоды, находящиеся в пределах переданного интервала.
// Имеет значение период, за который уплачивается налог - "налоговый период" в документах.
// Даты платежей не учитываются.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - организация, по которой уплачивался налог.
//  НачалоПериода - Дата - дата в квартале, начиная с которого ищутся патежи.
//  КонецПериода  - Дата - дата в квартале, по который ищутся платежи.
//
// Возвращаемое значение:
//   Число - сумма уплаченного налога.
//
Функция НалогУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат 0;
	КонецЕсли;
	
	ДокументыУплатыЗаПериод = ДокументыУплатыНалогаЗаПериод(Организация, НачалоПериода, КонецПериода);
	
	Возврат ДокументыУплатыЗаПериод.Итог("СуммаОплаты");
	
КонецФункции

Функция НачальныеОстаткиПоНалогуВведены(Организация) Экспорт
	
	Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(Организация, ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетУчетаНалога", ПланыСчетов.Хозрасчетный.ЕНприУСН);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК ВводНачальныхОстатковРасчетыПоНалогамИСборам
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Проведен
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Организация = &Организация
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.ОтражатьВБухгалтерскомУчете
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам)
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.СчетУчета = &СчетУчетаНалога";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ОстатокРасчетовПоНалогуУСН(Организация, Период) Экспорт
	
	СчетаНачисленияНалога = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ЕНприУСН); // Кт 68.12
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Остаток;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Определяет остаток неоплаченного налога за периоды ранее переданного.
// Остаток определяется исходя изо всех оплат за прошлые налоговые периоды независимо от даты фактических платежей.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - организация, для которой требуются сведения.
//  ТекущийПериод - Дата - дата в пределах налогового периода (года),
//                         на начало которого требуется остаток расчетов за прошлые годы.
//
// Возвращаемое значение:
//   Число - остаток расчетов по налогу:
//           если отрицательный - имеется непогашенная задолженность за прошлые годы;
//           если положительный - имеется переплата по налогу за прошлые годы.
//
Функция ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Организация, ТекущийПериод) Экспорт
	
	ДатаНачалаУчета = Справочники.Организации.ДатаНачалаВеденияУчета(Организация);
	
	// Если учет еще не ведется, или передан год до первого года ведения учета,
	// расчеты за предыдущие годы заведомо нулевые.
	Если ДатаНачалаУчета = Неопределено
		ИЛИ Год(ДатаНачалаУчета) > Год(ТекущийПериод) Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН; // Кт 68.12
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ТекущийПериод));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
	Запрос.УстановитьПараметр("СчетаОплатыНалога", СчетаОплатыНалога);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	// Данные о расчетах по налогу за предыдущие налоговые периоды определяются следующим образом:
	// 1. Получаем платежи за предыдущие налоговые периоды, совершенные в текущем налоговом периоде.
	// 2. Суммируем с остатком задолженности по налогу УСН на начало текущего налогового периода.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументУплаты,
	|	ХозрасчетныйОборотыДтКт.Период КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаПлатежа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоГода,
	|			,
	|			Регистратор,
	|			СчетДт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаОплатыНалога),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоГода,
	|			Счет = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.ВыполнитьПакет();
	
	УплаченоЗаПрошлыеПериоды  = 0;
	ЗадолженностьНаНачалоГода = 0;
	
	// Платежи
	
	Платежи = Результат[Результат.ВГраница() - 1].Выгрузить();
	
	Для Каждого Платеж Из Платежи Цикл
		
		// Определим налоговый период для операций, в которых он явно не указан.
		Если НЕ ЗначениеЗаполнено(Платеж.НалоговыйПериод) Тогда
			Платеж.НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(Платеж.ДатаПлатежа, Организация);
		КонецЕсли;
		
		Если Платеж.НалоговыйПериод < НачалоГода(ТекущийПериод) Тогда
			УплаченоЗаПрошлыеПериоды = УплаченоЗаПрошлыеПериоды + Платеж.СуммаПлатежа;
		КонецЕсли;
		
	КонецЦикла;
	
	// Остаток (отрицательный - долг, положительный - переплата).
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗадолженностьНаНачалоГода = Выборка.СуммаОстаток;
	КонецЕсли;
	
	Возврат (ЗадолженностьНаНачалоГода + УплаченоЗаПрошлыеПериоды);
	
КонецФункции

// Получает развернутые по годам расчеты по налогу за налоговые периоды ранее переданного.
// Оплаченный налог за каждый год определяется исходя изо всех оплат, в которых указан период в пределах года,
// независимо от даты фактических платежей.
//
// Параметры:
//  Организация   - СправочникСсылка.Организации - организация, для которой требуются сведения.
//  ТекущийПериод - Дата - дата в пределах налогового периода (года),
//                         на начало которого требуются данные расчетов за прошлые годы.
//
// Возвращаемое значение:
//   ТаблицаЗначений - развернутые по годам суммы расчетов по налогу, состав см. в НоваяТаблицаРасчетовПоНалогу().
//
Функция РасчетыПоНалогуЗаПредыдущиеПериоды(Организация, ТекущийПериод) Экспорт
	
	ТаблицаРасчетов = НоваяТаблицаРасчетовПоНалогу();
	
	ДатаНачалаУчетаРасчетов = ДатаНачалаУчетаРасчетовПоНалогу(Организация);
	
	// Если учет еще не ведется, или передан первый год возникновения расчетов,
	// суммы налога за предыдущие годы заведомо нулевые.
	Если ДатаНачалаУчетаРасчетов = Неопределено
		Или Год(ДатаНачалаУчетаРасчетов) >= Год(ТекущийПериод) Тогда
		Возврат ТаблицаРасчетов;
	КонецЕсли;
	
	НачалоПериода = НачалоГода(ДатаНачалаУчетаРасчетов); // Год ввода остатков или ввода первых документов.
	КонецПериода  = НачалоГода(ТекущийПериод) - 1;       // Конец года, предшествующего переданному
	
	Периоды = КалендарьБухгалтера.Периоды(НачалоПериода, КонецПериода, Перечисления.Периодичность.Год);
	
	Если НЕ ЗначениеЗаполнено(Периоды) Тогда
		Возврат ТаблицаРасчетов;
	КонецЕсли;
	
	// Для получения расчетов за каждый налоговый период определяется начисленный налог за период (год),
	// затем из начислений вычитаются платежи за данный налоговый период и переплата за прошлые годы при ее наличии.
	
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН; // Кт 68.12
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
	Запрос.УстановитьПараметр("СчетаОплатыНалога", СчетаОплатыНалога);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, ГОД) КАК НалоговыйПериод,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Начислено
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Год,
	|			Счет = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейВГосБюджет),
	|			НЕ КорСчет В (&СчетаОплатыНалога),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, ГОД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументУплаты,
	|	ХозрасчетныйОбороты.Период КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		КОГДА ХозрасчетныйОбороты.СуммаОборот < 0
	|			ТОГДА НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаПлатежа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			,
	|			Регистратор,
	|			Счет = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейВГосБюджет),
	|			КорСчет В (&СчетаОплатыНалога),
	|			) КАК ХозрасчетныйОбороты";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Начисления = Результат[Результат.ВГраница() - 1].Выгрузить();
	Платежи    = Результат[Результат.ВГраница()].Выгрузить();
	
	Для Каждого НалоговыйПериод Из Периоды Цикл
		
		Начислено = 0;
		Уплачено  = 0;
		
		НачалоНалоговогоПериода = НачалоГода(НалоговыйПериод);
		КонецНалоговогоПериода  = КонецГода(НалоговыйПериод);
		
		СтрокаРасчетов = Начисления.Найти(НалоговыйПериод, "НалоговыйПериод");
		Если СтрокаРасчетов <> Неопределено Тогда
			Начислено = СтрокаРасчетов.Начислено;
		КонецЕсли;
		
		Для Каждого Платеж Из Платежи Цикл
			// Определим налоговый период для операций, в которых он явно не указан.
			Если НЕ ЗначениеЗаполнено(Платеж.НалоговыйПериод) Тогда
				Платеж.НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(Платеж.ДатаПлатежа, Организация);
			КонецЕсли;
			
			Если Платеж.НалоговыйПериод <= КонецНалоговогоПериода И Платеж.НалоговыйПериод >= НачалоНалоговогоПериода Тогда
				Уплачено = Уплачено + Платеж.СуммаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока = ТаблицаРасчетов.Добавить();
		
		НоваяСтрока.НалоговыйПериод = НалоговыйПериод;
		НоваяСтрока.Начислено = Начислено;
		НоваяСтрока.Уплачено  = Уплачено;
		
		ОстатокРасчетов = Уплачено - Начислено;
		
		Если ОстатокРасчетов > 0 Тогда
			НоваяСтрока.Переплата = ОстатокРасчетов;
		Иначе
			НоваяСтрока.Задолженность = - ОстатокРасчетов;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;
	
КонецФункции

Функция ДатаНачалаУчетаРасчетовПоНалогу(Организация)
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат ДатаВводаНачальныхОстатков;
	КонецЕсли;
	
	ДатаПервогоДокумента = ЖурналыДокументов.ЖурналОпераций.ДатаПервогоПроведенногоДокумента(Организация);
	Если ЗначениеЗаполнено(ДатаПервогоДокумента) Тогда
		Возврат ДатаПервогоДокумента;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает наиболее вероятный период (квартал), за который может уплачиваться налог УСН
// в заданный день по данной организации.
//
// Параметры:
//  ДеньПлатежа  - Дата - день фактического платежа
//  Организация  - СправочникСсылка.Организации - организация, от имени которой производится уплата
//
// Возвращаемое значение:
//   Дата   - начало квартала, за который с наибольшей вероятностью нужно заплатить налог
//            (иначе говоря, начало последнего квартала отчетного/налогового периода).
//
Функция РелевантныйПериодНалоговогоПлатежа(ДатаПлатежа, Организация) Экспорт
	
	ПредыдущийКвартал = НачалоКвартала(ДобавитьМесяц(ДатаПлатежа, -3));
	
	ПериодПоУмолчанию    = ПредыдущийКвартал; // По умолчанию платеж всегда за прошлый квартал.
	АльтернативныйПериод = Неопределено;
	
	// В течение года есть интервалы, на которых могут пересекаться сроки уплаты налога за прошлый год и авансового платежа.
	// Такие интервалы могут возникнуть в апреле (у всех плательщиков) и в мае (только у ИП).
	// Если дата платежа попадает в такой интервал - для определения наиболее вероятного оплачиваемого периода
	// потребуется уточнить крайние сроки оплаты налога и авансового платежа с учетом выходных/праздников.
	
	МесяцПлатежа = Месяц(ДатаПлатежа);
	
	Если МесяцПлатежа <> 4 И МесяцПлатежа <> 5 Тогда // Не требуется уточнять период.
		Возврат ПериодПоУмолчанию;
	КонецЕсли;
	
	ДеньПлатежа = День(ДатаПлатежа);
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		// Юрлица в начале апреля, если 31 марта выходной, могут еще 2 дня уплачивать налог за прошлый год.
		Если МесяцПлатежа = 4 И ДеньПлатежа <= КоличествоСтандартныхВыходныхДней() Тогда
			АльтернативныйПериод = ДобавитьМесяц(ПредыдущийКвартал, -3);
		КонецЕсли;
	Иначе
		// ИП в начале мая могут уплачивать налог за прошлый год, если 30 апреля выходной.
		// Уточнять срок необходимо за все время майских праздников - они могут быть непрерывными.
		Если МесяцПлатежа = 5 И ДеньПлатежа <= МаксимальноеКоличествоДнейМайскихПраздников() Тогда
			
			АльтернативныйПериод = ДобавитьМесяц(ПредыдущийКвартал, -3);
			
		// В апреле, кроме налога за год, ИП уплачивает авансовый платеж за 1 квартал.
		// Предполагаем, что в течение срока авансового платежа наиболее вероятен именно он.
		// За границами срока авансового платежа предполагаем, что это уплата налога за год.
		ИначеЕсли МесяцПлатежа = 4 И ДеньПлатежа > ДеньУплатыАвансовогоПлатежаПоУмолчанию() Тогда
			
			// Здесь основной и альтернативный периоды меняются местами.
			// Необходимо проверить срок авансового платежа. Если истек - платится налог за год.
			АльтернативныйПериод = ПредыдущийКвартал;
			ПериодПоУмолчанию    = ДобавитьМесяц(ПредыдущийКвартал, -3);
			
		Иначе
			// Считаем, что уплачивается авансовый платеж за предыдущий квартал.
			// Период уже задан в ПериодПоУмолчанию.
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АльтернативныйПериод) Тогда
		СрокУплаты = УчетУСНПовтИсп.СрокУплатыНалогаЗаПериод(АльтернативныйПериод, Организация);
		Если ДатаПлатежа <= КонецДня(СрокУплаты) Тогда
			Возврат АльтернативныйПериод;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПериодПоУмолчанию;
	
КонецФункции

// Определяет периодичность налогового платежа в зависимости от оплачиваемого периода.
//
// Параметры:
//  НалоговыйПериод - Дата - оплачиваемый период
//
// Возвращаемое значение:
//   ПеречислениеСсылка.Периодичность, возможные значения:
//    * Год, если платеж за последний квартал (налог за год)
//    * Квартал, если платеж за все остальные кварталы (авансовый платеж).
Функция ПериодичностьНалоговогоПлатежа(НалоговыйПериод) Экспорт
	
	Если КонецКвартала(НалоговыйПериод) = КонецГода(НалоговыйПериод) Тогда
		// Платеж за последний квартал года - это налог за год.
		Возврат Перечисления.Периодичность.Год;
	Иначе
		// За периоды кроме последнего квартала года уплачивается ежеквартальный авансовый платеж.
		Возврат Перечисления.Периодичность.Квартал;
	КонецЕсли;
	
КонецФункции

// Определяет период, за который уплачивается налог, по данным платежного документа.
//
// Параметры:
//  ОписаниеПериода  - Структура - разобранный показатель периода (реквизит 107) платежного документа,
//                     см. ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод()
//  ДатаПлатежа      - Дата - дата платежного документа; используется, если не удалось определить налоговый период
//                     по реквизитам платежного документа.
// Организация       - СправочникСсылка.Организации - организация платежа
//
// Возвращаемое значение:
//   Дата   - начало квартала, за который уплачивается налог;
//            для налога за год - начало последнего квартала в году.
//
Функция НалоговыйПериодПоДаннымПлатежногоДокумента(ОписаниеПериода, ДатаПлатежа, Организация) Экспорт
	
	НалоговыйПериод = '00010101';
	
	// Пытаемся определить из описания периода.
	
	Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьГод() Тогда
		НалоговыйПериод = НачалоКвартала(КонецГода(ОписаниеПериода.Дата));
	ИначеЕсли ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьПолугодие() Тогда
		НалоговыйПериод = НачалоКвартала(ДобавитьМесяц(ОписаниеПериода.Дата, 3));
	ИначеЕсли ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал() Тогда
		НалоговыйПериод = НачалоКвартала(ОписаниеПериода.Дата);
	ИначеЕсли ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц() Тогда
		НалоговыйПериод = НачалоКвартала(ОписаниеПериода.Дата);
	КонецЕсли;
	
	// Если из описания периода прочитать не удалось - определим наиболее вероятный для даты платежа.
	
	Если НЕ ЗначениеЗаполнено(НалоговыйПериод) Тогда
		НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(ДатаПлатежа, Организация);
	КонецЕсли;
	
	Возврат НалоговыйПериод;
	
КонецФункции

Функция НоваяТаблицаРасчетовПоНалогу()
	
	ТаблицаРасчетов = Новый ТаблицаЗначений;
	
	ТаблицаРасчетов.Колонки.Добавить("НалоговыйПериод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРасчетов.Колонки.Добавить("Начислено", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРасчетов.Колонки.Добавить("Уплачено", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРасчетов.Колонки.Добавить("Переплата", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаРасчетов.Колонки.Добавить("Задолженность", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаРасчетов;
	
КонецФункции

#КонецОбласти

#Область ОтражениеДоходов

// Возвращает список вариантов отражения доходов, допустимых для организации, применяющей УСН, на переданную дату
// с учетом совмещения с другими режимами и настроек функциональности.
// Для организаций, не применяющих УСН, возвращает пустой список.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация.
//  Период       - Дата - дата, на которую требуются сведения.
//
// Возвращаемое значение:
//   СписокЗначений   - список с перечнем допустимых вариантов отражения доходов, содержимое:
//                       * значения - порядок отражения доходов, указывается в документах поступления денежных средств;
//                       * представления - представления вариантов отражения доходов для отображения в списках выбора.
//
Функция ДопустимыеВариантыОтраженияДоходов(Организация, Период) Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(Организация, Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	СписокВариантов.Добавить(Перечисления.ПорядокОтраженияАвансов.ДоходУСН, НСтр("ru = 'Доход УСН'"));
	
	Если УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
		СписокВариантов.Добавить(Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД, НСтр("ru = 'Доход ЕНВД'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда
		СписокВариантов.Добавить(Перечисления.ПорядокОтраженияАвансов.ДоходКомитента, НСтр("ru = 'Доход комитента'"));
	КонецЕсли;
	
	Если УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Организация, Период) Тогда
		СписокВариантов.Добавить(
			Перечисления.ПорядокОтраженияАвансов.ДоходТорговыйСбор,
			НСтр("ru = 'Доход от деятельности на торговом сборе'"));
	КонецЕсли;
	
	Возврат СписокВариантов;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// УПЛАТА НАЛОГА (АВАНСОВОГО ПЛАТЕЖА)

// Возвращает срок уплаты налога за переданный квартал.
//
// Параметры:
//  Период      - Дата - дата в квартале, за который требуется срок оплаты.
//  Организация - СправочникСсылка.Организации - организация, по которой уплачивается налог.
//
// Возвращаемое значение:
//   Дата - крайний срок уплаты налога.
//
Функция СрокУплатыНалогаЗаПериод(Период, Организация) Экспорт
	
	Срок = '00010101';
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, КонецКвартала(Период)) Тогда
		ВидНалога = Перечисления.ВидыНалогов.УСН_Доходы;
	Иначе
		ВидНалога = Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы;
	КонецЕсли;
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.НачалоИнтервала = НачалоКвартала(Период);
	// Для включения в расписание искомый период должен полностью входить в интервал обзора
	ОтборПравил.КонецИнтервала  = КонецКвартала(Период) + 1;
	ОтборПравил.ИмяЗадачи       = РасчетыСБюджетом.ИмяЗадачиБухгалтера(ВидНалога);
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;

	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(ОтборПравил);
	
	Расписание.Сортировать("ПериодСобытия Убыв");
	
	Если Расписание.Количество() > 0 Тогда
		Срок = Расписание[0].Срок;
	КонецЕсли;
	
	Возврат Срок;
	
КонецФункции

Функция ДеньУплатыАвансовогоПлатежаПоУмолчанию()
	
	Возврат 25;
	
КонецФункции

Функция МаксимальноеКоличествоДнейМайскихПраздников()
	
	Возврат 11; // 9 мая - последний майский праздник, после него возможны 2 выходных дня.
	
КонецФункции

Функция КоличествоСтандартныхВыходныхДней()
	
	Возврат 2; // Суббота и воскресенье.
	
КонецФункции

Функция СоздатьНачисленныйНДСПоРеализации(МенеджерВременныхТаблиц, Период, Организация, ДокументыРеализации)
	
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КонецПериода",        Период);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ДокументыРеализации", ДокументыРеализации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК ДокументРасчетов,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС
	|ПОМЕСТИТЬ ВТ_НачисленныйНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация)
	|				И СчетФактура В (&ДокументыРеализации)) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НачисленныйНДС.ДокументРасчетов КАК ДокументРасчетов
	|ИЗ
	|	ВТ_НачисленныйНДС КАК ВТ_НачисленныйНДС"
	;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРасчетов");
	
КонецФункции

Функция СоздатьСуммыДокументовРеализации(МенеджерВременныхТаблиц, ДокументыРеализацииСНДС)
	
	Если ДокументыРеализацииСНДС.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаИнициализацияТаблицыДокументов());
	
	ДокументыПоТипам = ДокументыПоТипам(ДокументыРеализацииСНДС);
	
	Для Каждого КлючИЗначение Из ДокументыПоТипам Цикл
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		
		ТекстыЗапросов.Добавить(ТекстЗапросаДанныеДокумента(МетаданныеДокумента));
		
		Запрос.УстановитьПараметр("Документы" + МетаданныеДокумента.Имя, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Запрос.Текст =
		СтрСоединить(ТекстыЗапросов, ТекстОбъединениеЗапросов())
		+ ТекстИндексыТаблицыДокументов();
	
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

Функция ТекстЗапросаИнициализацияТаблицыДокументов()
	
	Возврат
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка) КАК Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
		|	0 КАК КурсДокумента,
		|	0 КАК КратностьДокумента,
		|	0 КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТ_СуммыДокументов
		|ГДЕ
		|	ЛОЖЬ";
	
КонецФункции

Функция ТекстИндексыТаблицыДокументов()
	
	Возврат "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
КонецФункции
