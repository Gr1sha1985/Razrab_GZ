#Область СлужебныйПрограммныйИнтерфейс

// Обработчик получения данных выбора для справочников, упорядоченных по коду. 
// Готовит данные выбора для справочников-классификаторов, упорядочивает по коду и наименованию.
//
// Вызывается из обработчика ОбработкаПолученияДанныхВыбора для формирования списка при вводе по строке,
// автоподборе текста и быстром выборе, а также при выполнении метода ПолучитьДанныеВыбора.
//
// Параметры:
//  Источник             - СправочникМенеджер - объект, для которого формируется список выбора.
//  ДанныеВыбора         - СписокЗначений     - данные для выбора.
//  Параметры            - Структура          - содержит параметры выбора.
//  СтандартнаяОбработка - Булево             - признак выполнения стандартной обработки события.
//
Процедура ЗаполнитьДляКлассификатораСПорядкомПоКоду(
	Источник, 
	ДанныеВыбора, Знач Параметры,СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	Классификатор.Ссылка КАК Ссылка,
		|	Классификатор.Код КАК Код,
		|	Классификатор.Наименование КАК Наименование,
		|	ИСТИНА КАК НайденПоКоду
		|ПОМЕСТИТЬ ВТОтобранныеЭлементы
		|ИЗ
		|	&Классификатор КАК Классификатор
		|ГДЕ
		|	&УсловиеПоКод
		|	И Классификатор.Код <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 51
		|	Классификатор.Ссылка,
		|	ВЫБОР
		|		КОГДА Классификатор.Код = """"
		|			ТОГДА ""999999999""
		|		ИНАЧЕ Классификатор.Код
		|	КОНЕЦ,
		|	Классификатор.Наименование,
		|	ЛОЖЬ
		|ИЗ
		|	&Классификатор КАК Классификатор
		|ГДЕ
		|	&УсловиеПоНаименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 51
		|	ОтобранныеЭлементы.Ссылка КАК Ссылка,
		|	ОтобранныеЭлементы.Код КАК Код,
		|	ОтобранныеЭлементы.Наименование КАК Наименование,
		|	МАКСИМУМ(ОтобранныеЭлементы.НайденПоКоду) КАК НайденПоКоду
		|ИЗ
		|	ВТОтобранныеЭлементы КАК ОтобранныеЭлементы
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтобранныеЭлементы.Ссылка,
		|	ОтобранныеЭлементы.Код,
		|	ОтобранныеЭлементы.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код,
		|	Наименование";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Классификатор", Метаданные.НайтиПоТипу(ТипЗнч(Источник)).ПолноеИмя());
	
	УстановитьОтборыВЗапросеПоПараметрам(Запрос, Параметры, "Код, Наименование");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДанныеВыбора.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			
			Если Выборка.НайденПоКоду Тогда
				Представление = СтрШаблон("%1 (%2)", СокрЛП(Выборка.Код), Выборка.Наименование);
			ИначеЕсли Не ПустаяСтрока(Выборка.Код) И Выборка.Код <> "999999999" Тогда
				Представление = СтрШаблон("%1 (%2)", Выборка.Наименование, СокрЛП(Выборка.Код));
			Иначе	
				Представление = Выборка.Наименование;
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
			
		КонецЕсли;
	КонецЦикла;
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик получения данных выбора для справочников, упорядоченных по реквизиту допупорядочивания. 
//
Процедура ЗаполнитьДляКлассификатораСПорядкомПоДопРеквизиту(
		Источник, 
		ДанныеВыбора, Знач Параметры, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	Классификатор.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Классификатор.Ссылка) КАК СсылкаПредставление
		|ИЗ
		|	&Классификатор КАК Классификатор
		|ГДЕ &УсловиеПоНаименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Классификатор.РеквизитДопУпорядочивания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Классификатор", Метаданные.НайтиПоТипу(ТипЗнч(Источник)).ПолноеИмя());
	
	УстановитьОтборыВЗапросеПоПараметрам(Запрос, Параметры, "Наименование");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
			Представление = Выборка.СсылкаПредставление;
		Иначе
			
			ДлинаСтрокиПоиска = СтрДлина(Параметры.СтрокаПоиска);
			Представление = 
				Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Выборка.СсылкаПредставление, ДлинаСтрокиПоиска), 
						Новый Шрифт( , , Истина), 
						WebЦвета.Зеленый),
					Сред(Выборка.СсылкаПредставление, ДлинаСтрокиПоиска + 1));
			
		КонецЕсли;
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОтборыВЗапросеПоПараметрам(Запрос, Параметры, Знач ПоляПоиска)
	
	// Накопитель отборов по полям поиска:
	//     Ключ     - имя поля поиска
	//     Значение - массив строк с условиями отбора
	ОтборыПолей = Новый Структура(ПоляПоиска);
	Для Каждого ОтборыПоля Из ОтборыПолей Цикл
		ОтборыПолей[ОтборыПоля.Ключ] = Новый Массив;
	КонецЦикла;	
	
	// Отборы из параметров добавляются к условиям отбора каждого из заказанных полей поиска
	Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
		ИмяПараметра = "Отбор" + ЭлементОтбора.Ключ;
		Для Каждого ОтборыПоля Из ОтборыПолей Цикл
			ОтборыПоля.Значение.Добавить(СтрШаблон("Классификатор.%1 В (&%2)", ЭлементОтбора.Ключ, ИмяПараметра)); 
		КонецЦикла;	
		Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.Значение);
	КонецЦикла;
	
	// Когда есть строка поиска, условие по ней вставляется перед условиям отбора по параметрам
	Если НЕ ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		Для Каждого ОтборыПоля Из ОтборыПолей Цикл
			ОтборыПоля.Значение.Вставить(0, СтрШаблон("Классификатор.%1 ПОДОБНО &СтрокаПоиска", ОтборыПоля.Ключ)); 
		КонецЦикла;	
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
	КонецЕсли;
	
	// Условия отборов каждого каждого из заказанных полей соединяются по "И".
	// если же отборов у поля нет, то назначается "условие" ИСТИНА
	Для Каждого ОтборыПоля Из ОтборыПолей Цикл
		ТекстУсловийОтбора = СтрСоединить(ОтборыПоля.Значение, " И ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			СтрШаблон("&УсловиеПо%1", ОтборыПоля.Ключ), 
			?(ЗначениеЗаполнено(ТекстУсловийОтбора), ТекстУсловийОтбора, "(ИСТИНА)"));
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти
