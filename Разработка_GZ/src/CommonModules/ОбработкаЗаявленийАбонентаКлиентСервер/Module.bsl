
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьОформлениеДокументов(Форма, СкрытьПринудительно = Ложь) Экспорт
	
	СкрытьДокументы = НЕ ЗначениеЗаполнено(Форма.Организация) ИЛИ СкрытьПринудительно;
	
	Элементы    = Форма.Элементы;
	ИздатьНовый = НЕ ИспользоватьСуществующий(Форма);
	
	Элементы.ГруппаСканов.Видимость = Ложь;
	Если СкрытьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДокументы = Ложь;
	Для каждого ТекущийВидДокумента Из ВидыДокументовПоФорме(Форма) Цикл
		
		ВидДокумента = ТекущийВидДокумента.Ключ;
		Описание 	 = ТекущийВидДокумента.Значение;
		
		Если Описание.Видимость Тогда
			ЕстьДокументы = Истина;
		КонецЕсли;
		
		Элементы["Группа" + ВидДокумента].Видимость 	= Описание.Видимость;
		Элементы["Заголовок" + ВидДокумента].Заголовок 	= Описание.Представление + ":";
		
		ИзменитьОформлениеДокумента(Форма, ВидДокумента);
		Если ЭтоФормаПервичногоЗаявления(Форма) И Описание.Видимость Тогда
			ИзменитьОформлениеДоверенности(Форма, ВидДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
	Элементы.ГруппаЗаголовокДляДокументов.Видимость = ЕстьДокументы;
	Элементы.ГруппаСканов.Видимость = Истина;
	
КонецПроцедуры

Процедура ИзменитьОформлениеДоверенности(Форма, ВидДокумента) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ВидДокумента = "Доверенность" Тогда
		Подсказка = ДокументооборотСКОКлиентСервер.ИзменитьОформлениеРекомендацииДоверенностиДляФНС(
			Форма.ВладелецЭЦПТип, 
			Форма.ЭтоЮридическоеЛицо, 
			Форма.ПолучателиФНС);
		Подсказка = СтрЗаменить(Подсказка, "?", "");
		Элементы.УказательДоверенность.Подсказка = Строка(Подсказка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеДокумента(Форма, ВидДокумента) Экспорт
	
	Размер 		= 0;
	Количество  = 0;
	ИмяПервого  = "";
	
	Для каждого ФайлДокумента Из Форма.ФайлыДокументов Цикл
		
		ФайлДокумента = ФайлДокумента.Значение;
		Если ФайлДокумента.Документ = ВидДокумента Тогда
			Размер = Размер + ФайлДокумента.Размер;
			Количество = Количество + 1;
			ИмяПервого = ФайлДокумента.ИсходноеИмя;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(Форма, ВидДокумента, Размер, Количество, ИмяПервого);
	
КонецПроцедуры

Функция МобильныйУказанКорректно(Форма, ТихийРежим = Ложь, ТекстОшибки = "") Экспорт
	
	Корректный = Истина;
	
	Если Форма.ПолучатьУведомления Тогда
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(Форма.ТелефонМобильный);
		Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите новый номер мобильного телефона'");
			Если НЕ ТихийРежим Тогда
				СообщитьПользователю(ТекстОшибки,, "ТелефонМобильный");
			КонецЕсли;
			Корректный = Ложь;
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
			ТекстОшибки = НСтр("ru = 'Мобильный телефон должен иметь формат 
				|+7 XXX XXX-XX-XX'");
			Если НЕ ТихийРежим Тогда
				СообщитьПользователю(ТекстОшибки, ,"ТелефонМобильный");
			КонецЕсли;
			Корректный = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Корректный;
	
КонецФункции

Процедура СообщитьПользователю(
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщенияПользователю,
			КлючДанных,
			Поле,
			ПутьКДанным,
			Отказ);
	#Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщенияПользователю,
			КлючДанных,
			Поле,
			ПутьКДанным,
			Отказ);
	#КонецЕсли
			
КонецПроцедуры

Функция ИспользоватьСуществующий(Объект) Экспорт
	
	ЭтоФорма     = ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения");
	ЭтоЗаявление = НЕ ЭтоФорма;
	
	ИспользуетсяСуществующий = Объект.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	
	Результат = 
		ИспользуетсяСуществующий 
		И (ЭтоФорма И ПереиздатьСертификат(Объект) ИЛИ ЭтоЗаявление);
	
	Возврат Результат;
	
КонецФункции

Функция ПереиздатьСертификат(Форма)
	
	ЭтоВторичноеЗаявление = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПереиздатьСертификат");
	Если ЭтоВторичноеЗаявление Тогда
		ПереиздатьСертификат = Форма.ПереиздатьСертификат;
	Иначе
		// В первичном всегда сертификат переиздается
		ПереиздатьСертификат = Истина;
	КонецЕсли;
	
	Возврат ПереиздатьСертификат;
	
КонецФункции

Процедура ПроверитьНеобходимостьУстановкиГалки_ВключатьЛицензиюКриптоПроВСертификат(Форма) Экспорт
	
	ЭтоКриптоПро = Форма.CryptoProCSPУстановлен
		И Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	ЭтоЛокальнаяУчетка = Форма.ЭтоПереходВКоробку ИЛИ НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса;
	
	#Если ВебКлиент Тогда
		ЭтоВеб = Истина;
	#ИначеЕсли Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ЭтоВеб = ОбщегоНазначения.ЭтоВебКлиент();
	#Иначе
		ЭтоВеб = Ложь;
	#КонецЕсли
	ЛицензиюНельзяВычислить =
		СтрНайти(Форма.ИмяФормы, "ВнешняяОбработка") > 0 
		ИЛИ ЭтоВеб;
		
	Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат = ЭтоКриптоПро И ЭтоЛокальнаяУчетка;
	Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Ложь;
	
	Если Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат Тогда
		
		Если Форма.ЛицензияКриптоПроВключенаВСертификат Тогда
  
			Если ЛицензиюНельзяВычислить
				ИЛИ Форма.СрокЛицензииКриптоПроКонечный Тогда
				
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Истина;
			Иначе
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
				Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Истина;
			КонецЕсли;
			
		Иначе
			Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
			Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Истина;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодыФНСПрописью(Знач ТаблицаКодовФНС) Экспорт

	Результат = "";
	КоличествоКодовФНС = ТаблицаКодовФНС.Количество();
	Если КоличествоКодовФНС = 1 Тогда
		Результат = ТаблицаКодовФНС[0].КодПолучателя + ?(ТаблицаКодовФНС[0].КПП = "","" ,"-") + ТаблицаКодовФНС[0].КПП;
	ИначеЕсли КоличествоКодовФНС > 1 Тогда
		Результат = НесколькоНаправленийПрописью(КоличествоКодовФНС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьКодыРосстатПрописью(Знач Получатели) Экспорт
	
	Результат = "";
	КоличествоКодовФСГС = Получатели.Количество();
	Если КоличествоКодовФСГС = 1 Тогда
		Результат = Получатели[0].КодПолучателя;
	ИначеЕсли КоличествоКодовФСГС > 1 Тогда
		Результат = НесколькоНаправленийПрописью(КоличествоКодовФСГС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НесколькоНаправленийПрописью(Количество) Экспорт

	Результат = "";
	Подстрока1 = Строка(Количество);
	Подстрока2 = ДлительнаяОтправкаКлиентСервер.ПредметИсчисленияБезЧисла(
		Количество,
		НСтр("ru = 'направление'"),
		НСтр("ru = 'направления'"),
		НСтр("ru = 'направлений'"),
		"с");
	Результат = Подстрока1 + " " + Подстрока2;
	
	Возврат Результат;

КонецФункции

Процедура ОчиститьВключаемыйСертификат(Форма) Экспорт
	
	Форма.ВключаемыйСертификат = Неопределено;
	Форма.ВключаемыйСертификатОблачный = Ложь;
	Форма.ИдентификаторПолученияСпискаОблачныхСертификатов = "";
	Форма.ОблачныеСертификатыКалуги.Очистить();
	
КонецПроцедуры

Процедура УточнитьРежимРаботыСКлючами(Форма) Экспорт
	
	Если Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса") Тогда
		Форма.РежимРаботыСКлючами = 1;
	Иначе
		Форма.РежимРаботыСКлючами = 2;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьИзменениеВМестеХраненияКлючей(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.ЭтоПереходВКоробку = Ложь;
	Форма.ЭтоПереходВОблако  = Ложь;
	
	Если Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		
		Если Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака Тогда
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro")
				ИЛИ Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
				
				Форма.ЭтоПереходВКоробку = Форма.ИзменитьМестоХранения;
				
			КонецЕсли;
			
		Иначе
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса") Тогда
				Форма.ЭтоПереходВОблако  = Форма.ИзменитьМестоХранения;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Форма.ВыбранноеМестоХраненияКлюча = Неопределено Тогда
			ОпределитьВыбранноеМестоХраненияКлюча(Форма);
		КонецЕсли;
		
		Форма.ЭтоПереходВКоробку = Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака И Форма.ИзменитьМестоХранения;
		
	КонецЕсли;
	
	СравнитьКриптопровайдера(Форма);
	
КонецПроцедуры

Процедура СравнитьКриптопровайдера(Форма)

	ИзменилсяКриптопровайдерЛокальнойУчетки = НЕ Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака 
		И Форма.ТипКриптопровайдераИсходный <> Форма.ВыбранноеМестоХраненияКлюча; 
	
	Форма.ТипКриптопровайдераИзменился = 
		(Форма.ЭтоПереходВКоробку 
		ИЛИ Форма.ЭтоПереходВОблако 
		ИЛИ ИзменилсяКриптопровайдерЛокальнойУчетки) 
		И Форма.ИзменитьМестоХранения;
	
КонецПроцедуры

Процедура ОпределитьВыбранноеМестоХраненияКлюча(Форма) Экспорт
	
	УстановленТолькоОдинКриптопровайдер = Форма.КомпонентаУстановлена 
		И (Форма.ViPNetCSPУстановлен ИЛИ Форма.CryptoProCSPУстановлен)
		И НЕ (Форма.ViPNetCSPУстановлен И Форма.CryptoProCSPУстановлен);
		
	// Определяем значение по-умолчанию
	Если УстановленТолькоОдинКриптопровайдер 
		И (НЕ Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса ИЛИ НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса) Тогда
		
		// Нет выбора 
		Если Форма.ViPNetCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
		ИначеЕсли Форма.CryptoProCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		КонецЕсли;
		
	Иначе
		
		// Есть выбор
		Если Форма.ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
		Иначе
			// Случай, когда нет компоненты или два криптопровайдера.
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбранныйКриптопровайдер(Форма) Экспорт
	
	Если Форма.CryptoProCSPУстановлен И НЕ Форма.ИгнорироватьКонфликт
		ИЛИ Форма.ИгнорироватьКонфликт И Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
		
	КонецЕсли;
	
КонецФункции

Процедура УдалитьТекущийВидДокументов(Форма, Документ) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементСписка Из Форма.ФайлыДокументов Цикл
		Если ЭлементСписка.Значение.Документ = Документ Тогда
			ЭлементыДляУдаления.Добавить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
		Форма.ФайлыДокументов.Удалить(ЭлементДляУдаления);
	КонецЦикла;
			
КонецПроцедуры

Процедура ДополнитьФайлыВидомДокумента(Файлы, Документ, Форма) Экспорт
	
	Для Каждого Файл Из Файлы Цикл
		Файл.Вставить("Документ", Документ);
		Форма.ФайлыДокументов.Добавить(Файл);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьМодифицированность(Форма) Экспорт
	Форма.Модифицированность = Истина;
КонецПроцедуры

Процедура СнятьМодифицированность(Форма) Экспорт
	Форма.Модифицированность = Ложь;
КонецПроцедуры

Функция ОписаниеФайла(ПолноеИмя, Адрес) Экспорт
	
	Файл = Новый Файл(ПолноеИмя);
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя", 			Файл.Имя);
	// Для совместимости ДополнитьОписанияРазмерамиФайлов и ДобавитьФайлыСПредпросмотром
	ОписаниеФайла.Вставить("ИсходноеИмя", 	Файл.Имя);
	ОписаниеФайла.Вставить("Адрес", 		Адрес);
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(ОписаниеФайла);
	
	ОписанияФайлов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ДополнитьОписанияРазмерамиФайлов(ОписанияФайлов);
	Возврат ОписанияФайлов;
	
КонецФункции

Процедура ОчиститьФайл(Форма, ВидДокумента) Экспорт
	
	УстановитьМодифицированность(Форма);
	УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
КонецПроцедуры

Процедура ОчиститьФайлыПриУстановкеНовогоВладельцаЭЦП(Форма) Экспорт
	
	// Работа с файлами
	ОчиститьФайл(Форма, "Паспорт");
	ОчиститьФайл(Форма, "СНИЛС");
	ОчиститьФайл(Форма, "ПодтверждениеПолномочий");
	ОчиститьФайл(Форма, "Заявление");
	ИзменитьОформлениеДокументов(Форма);
	
КонецПроцедуры

Процедура ПослеДобавленияСкана(Форма, ВидДокумента, ФайлыДокумента) Экспорт
	
	УстановитьМодифицированность(Форма);
	УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	ДополнитьФайлыВидомДокумента(ФайлыДокумента, ВидДокумента, Форма);
	ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
КонецПроцедуры

Процедура УдалитьВсеСканы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Очищаем файлы 
	Для каждого ТекущийВидДокумента Из ВидыДокументовПоФорме(Форма) Цикл
		ВидДокумента = ТекущийВидДокумента.Ключ;
		УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	КонецЦикла;
	
	ИзменитьОформлениеДокументов(Форма);
	
КонецПроцедуры

Функция ВидыДокументов_Шаблон() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ЭтоЭлектронноеПодписание", Ложь);
	Параметры.Вставить("ЭтоНулевка", Ложь);
	Параметры.Вставить("ВладелецЭЦПТип", Неопределено);
	Параметры.Вставить("ЭтоЮридическоеЛицо", Истина);
	Параметры.Вставить("ЭтоПервичноеЗаявление", Истина);
	Параметры.Вставить("ИспользоватьСуществующий", Ложь);
	Параметры.Вставить("ЭтоСтороннийУЦ", Ложь);
	Параметры.Вставить("ИзменилсяПаспорт", Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция ВидыДокументовПоФорме(Форма) Экспорт
	
	Параметры = ПараметрыПоФорме(Форма);
	Возврат ВидыДокументовВЗаявлении(Параметры);

КонецФункции

Функция ПараметрыПоФорме(Форма) Экспорт
	
	Параметры = ВидыДокументов_Шаблон();
	Параметры.ЭтоЭлектронноеПодписание 	= Форма.ЭтоЭлектронноеПодписание;
	Параметры.ЭтоНулевка 				= Форма.ЭтоРежимБесплатнойНулевойОтчетности ИЛИ Форма.ЭтоРежимОграниченнойФункциональности;
	Параметры.ВладелецЭЦПТип			= Форма.ВладелецЭЦПТип;
	Параметры.ЭтоЮридическоеЛицо		= Форма.ЭтоЮридическоеЛицо;
	Параметры.ЭтоПервичноеЗаявление	 	= ЭтоФормаПервичногоЗаявления(Форма);
	Параметры.ИспользоватьСуществующий	= ИспользоватьСуществующий(Форма);
	
	Если Параметры.ЭтоПервичноеЗаявление Тогда
		Параметры.ЭтоСтороннийУЦ = Форма.ЭтоСертификатДругогоУЦ;
	Иначе
		Параметры.ЭтоСтороннийУЦ = Форма.ПереиздатьСертификат И Форма.ЭтоСертификатОтДругогоУЦ;
		Параметры.ИзменилсяПаспорт = Форма.ВладелецЭЦППаспортныеДанныеИзменились;
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Функция ВидыДокументовПоВходящемуКонтексту(ВходящийКонтекст) Экспорт
	
	Параметры = ПараметрыПоВходящемуКонтексту(ВходящийКонтекст);
	Возврат ВидыДокументовВЗаявлении(Параметры);
		
КонецФункции

Функция ПараметрыПоВходящемуКонтексту(ВходящийКонтекст) Экспорт
	
	ДокументЗаявление = ВходящийКонтекст.ДокументЗаявление;
	
	Параметры = ВидыДокументов_Шаблон();
	Параметры.ЭтоЭлектронноеПодписание 	= ДокументЗаявление.ПодписатьЭП;
	Параметры.ВладелецЭЦПТип 			= ДокументЗаявление.ВладелецЭЦПТип;
	Параметры.ЭтоЮридическоеЛицо 		= ДокументЗаявление.ТипОрганизации;
	Параметры.ЭтоПервичноеЗаявление 	= ВходящийКонтекст.ЭтоПервичноеЗаявление;
	Параметры.ЭтоНулевка 				= ВходящийКонтекст.ЭтоНулевка;
	Параметры.ИспользоватьСуществующий	= ВходящийКонтекст.ИспользоватьСуществующий;
	
	Если Параметры.ЭтоПервичноеЗаявление Тогда
		Параметры.ЭтоСтороннийУЦ = ДокументЗаявление.ЭтоСертификатДругогоУЦ;
	Иначе
		ИзмененныйРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.УдостоверяющийЦентр");
		Параметры.ЭтоСтороннийУЦ = ЭтотПараметрИзменился(ДокументЗаявление, ИзмененныйРеквизит);
		
		ИзмененныйРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПаспортныеДанные");
		Параметры.ИзменилсяПаспорт = ЭтотПараметрИзменился(ДокументЗаявление, ИзмененныйРеквизит);
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции
	
Функция ЭтотПараметрИзменился(Заявление, ИзмененныйРеквизит) Экспорт
	
	СтруктураПоиска = Новый Структура("ИзмененныйРеквизит", ИзмененныйРеквизит);
	Возврат Заявление.ИзменившиесяРеквизитыВторичногоЗаявления.НайтиСтроки(СтруктураПоиска).Количество() > 0;
	
КонецФункции

Функция ЭтоФормаПервичногоЗаявления(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоПервичноеЗаявление = ИмяФормы = "МастерФормированияЗаявкиНаПодключениеУпрощенное"; 
	Возврат ЭтоПервичноеЗаявление;
	
КонецФункции

Функция ЭтоФормаВторичногоЗаявления(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоВторичноеЗаявление = ИмяФормы = "МастерФормированияЗаявкиНаИзменениеПараметровПодключения"; 
	Возврат ЭтоВторичноеЗаявление;
	
КонецФункции

Функция КраткоеИмяФормыПоПолному(Форма) Экспорт
	
	Подстроки = СтрРазделить(Форма.ИмяФормы, ".");
	Количество = Подстроки.Количество();
	ИмяФормы = Подстроки[Количество - 1];
	
	Возврат ИмяФормы;
	
КонецФункции

Функция ОписаниеВидаДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("Видимость", 			Истина);
	Описание.Вставить("Представление", 		"");
	Описание.Вставить("Постфикс", 			"");
	Описание.Вставить("ТолькоДляНулевки", 	Ложь);
	Описание.Вставить("ОдинФайл", 			Ложь);
	
	Возврат Описание;
	
КонецФункции

Функция ЭтоСертификатСтороннегоУЦПоФорме(Форма) Экспорт

	Параметры = ПараметрыПоФорме(Форма);
	ЭтоСертификатСтороннегоУЦ = УОператораНетДокументов(Параметры);
	Возврат ЭтоСертификатСтороннегоУЦ;

КонецФункции

Функция УОператораНетДокументов(Параметры)
	
	ЭтоВторичноеЗаявление 	 = НЕ Параметры.ЭтоПервичноеЗаявление;
	ИспользоватьСуществующий = Параметры.ИспользоватьСуществующий;
	ЭтоСтороннийУЦ 			 = Параметры.ЭтоСтороннийУЦ;

	УОператораНетДокументов = 
		Параметры.ЭтоЭлектронноеПодписание 
		И ЭтоСтороннийУЦ
		И ЭтоВторичноеЗаявление
		И НЕ ИспользоватьСуществующий;
		
	Возврат УОператораНетДокументов; 

КонецФункции

Функция ТребуетсяПриложитьДокументВПервичном(Параметры) Экспорт

	ЭтоЭлектронноеПодписание = Параметры.ЭтоЭлектронноеПодписание;
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ИспользоватьСуществующий = Параметры.ИспользоватьСуществующий;
	ЭтоПервичноеЗаявление    = Параметры.ЭтоПервичноеЗаявление;
	
	Возврат (ЭтоНулевка ИЛИ ЭтоЭлектронноеПодписание) И НЕ ИспользоватьСуществующий И ЭтоПервичноеЗаявление;
	
КонецФункции

Процедура ВидыДокументовВЗаявлении_ДобавитьПаспорт(Виды, Параметры) Экспорт
	
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ИзменилсяПаспорт 		 = Параметры.ИзменилсяПаспорт;
	ЭтоПервичноеЗаявление    = Параметры.ЭтоПервичноеЗаявление;
	
	// Паспорт
	Видимость = 
		УОператораНетДокументов(Параметры)
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры)
		ИЛИ ИзменилсяПаспорт И НЕ ЭтоПервичноеЗаявление И НЕ ЭтоНулевка;
	
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость 	   = Видимость;
	Описание.Представление = НСтр("ru = 'Паспорт (разворот с фото)'");
	Описание.ОдинФайл 	   = Истина;
	
	Виды.Вставить("Паспорт", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьСНИЛС(Виды, Параметры) Экспорт
	
	Видимость = 
		УОператораНетДокументов(Параметры) 
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
	
	// СНИЛС
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость		= Видимость;
	Описание.Представление 	= НСтр("ru = 'Свидетельство СНИЛС'");
	Описание.ОдинФайл 		= Истина;
	
	Виды.Вставить("СНИЛС", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьСвидетельствоОПостановкеНаУчет(Виды, Параметры) Экспорт
	
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ЭтоЭлектронноеПодписание = Параметры.ЭтоЭлектронноеПодписание;
	ИспользоватьСуществующий = Параметры.ИспользоватьСуществующий;
	
	Видимость = ЭтоНулевка И НЕ ЭтоЭлектронноеПодписание И НЕ ИспользоватьСуществующий;
	
	// Постановка на учет в ФНС
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость			= Видимость;
	Описание.Представление 		= НСтр("ru = 'Свидетельство ИНН орг-ции'");
	Описание.ТолькоДляНулевки 	= Истина;
	
	Виды.Вставить("СвидетельствоОПостановкеНаУчет", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПолномочий(Виды, Параметры) Экспорт
	
	ВладелецЭЦПТип 			 = Параметры.ВладелецЭЦПТип;
	ЭтоЮридическоеЛицо 		 = Параметры.ЭтоЮридическоеЛицо;
	
	// Подтверждение полномочий
	Описание = ОписаниеВидаДокумента();
	
	ЭтоРуководитель = ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	Если ЭтоЮридическоеЛицо И НЕ ЭтоРуководитель Тогда
		
		Видимость = УОператораНетДокументов(Параметры)
			ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
		
		Описание.Видимость = Видимость;
		
	Иначе
		Описание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоРуководитель Тогда
		Описание.Представление 	= НСтр("ru = 'Приказ о назначении'");
	Иначе
		Описание.Представление 	= НСтр("ru = 'Подтверждение полномочий'");
	КонецЕсли;
	
	Виды.Вставить("ПодтверждениеПолномочий", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьДоверенность(Виды, Параметры) Экспорт
	
	ВладелецЭЦПТип = Параметры.ВладелецЭЦПТип;
	
	// Доверенность
	Описание = ОписаниеВидаДокумента();
	
	ЭтоРуководитель = ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	Если НЕ ЭтоРуководитель Тогда
		
		Видимость = УОператораНетДокументов(Параметры)
			ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
		Описание.Видимость = Видимость;
		
	Иначе
		Описание.Видимость = Ложь;
	КонецЕсли;
	Описание.Представление 	= НСтр("ru = 'Доверенность'");
	
	Виды.Вставить("Доверенность", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьЗаявление(Виды, Параметры) Экспорт
	
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ЭтоПервичноеЗаявление    = Параметры.ЭтоПервичноеЗаявление;
	
	Видимость = ТребуетсяПриложитьДокументВПервичном(Параметры) И ЭтоНулевка;
			
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость			= Видимость;
	Описание.ТолькоДляНулевки 	= Истина;
	
	Если ЭтоПервичноеЗаявление Тогда
		Описание.Представление  = НСтр("ru = 'Заявление на подключение'");
	Иначе
		Описание.Представление  = НСтр("ru = 'Заявление на изменение'");
	КонецЕсли;

	Виды.Вставить("Заявление", Описание);
	
КонецПроцедуры

Функция ВидыДокументовВЗаявлении(Параметры) Экспорт
	
	Виды = Новый Структура;
	ВидыДокументовВЗаявлении_ДобавитьПаспорт(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьСНИЛС(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьСвидетельствоОПостановкеНаУчет(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПолномочий(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьДоверенность(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьЗаявление(Виды, Параметры);

	Возврат Виды;

КонецФункции

Функция ПодсказкаДляЭлектронногоПодписания(ДобавлятьОтступы = Истина) Экспорт
	
	Результат = Новый ФорматированнаяСтрока(НСтр("ru = 'Подписать заявление эл. подписью можно, если у организации для выбранного сотрудника 
                                                  |есть действующий сертификат и на компьютере установлен криптопровайдер. 
                                                  |При использовании эл. подписи некоторые документы можно будет не оформлять в бумажном виде.
                                                  |После отправки заявления, подписанного эл. подписью, будет создан новый закрытый ключ и сертификат.'"));
	
	Если ДобавлятьОтступы Тогда
		Результат = Новый ФорматированнаяСтрока(Результат, Символы.ПС, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти