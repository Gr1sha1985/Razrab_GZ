
#Область ПрограммныйИнтерфейс

Процедура СинхронизироватьЗадачи(Организация=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	Иначе
		Организации = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСВключеннойСинхронизацией = ПользователиСВключеннойСинхронизацией();
	Если ПользователиСВключеннойСинхронизацией.Количество() > 0 Тогда
		ВыполнитьСинхронизациюКалендарей(ПользователиСВключеннойСинхронизацией, Организации);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция АдресЗапросаНаПодтверждениеДоступа() Экспорт
	
	ИдентификаторПриложения = ИдентификаторПриложения();
	
	АдресЗапросаНаПодтверждениеДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1?scope=%2&redirect_uri=%3&response_type=code&client_id=%4&approval_prompt=force",
		ИдентификаторПриложения.auth_uri,											 // 1
		ИдентификаторПриложения.ОбластьДоступа,										 // 2
		ИдентификаторПриложения.redirect_uri,										 // 3
		ИдентификаторПриложения.client_id);											 // 4
	
	Возврат АдресЗапросаНаПодтверждениеДоступа;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗагрузкиДанных() Экспорт
	
	// После загрузки данных отключается синхронизация с календарем.
	Для Каждого Пользователь Из ПользователиСВключеннойСинхронизацией() Цикл
		ОтключитьСинхронизациюПользователя(Пользователь);
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиСинхронизации(Пользователь) Экспорт
	
	НастройкиСинхронизации = Новый Структура();
	НастройкиСинхронизации.Вставить("Включено", Ложь);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Пользователь", Пользователь);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСинхронизацииСКалендаремGoogle.Включено,
	|	НастройкиСинхронизацииСКалендаремGoogle.НапоминатьОСобытии,
	|	НастройкиСинхронизацииСКалендаремGoogle.КоличествоДнейДоНапоминания,
	|	НастройкиСинхронизацииСКалендаремGoogle.ВремяНапоминания
	|ИЗ
	|	РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle КАК НастройкиСинхронизацииСКалендаремGoogle
	|ГДЕ
	|	НастройкиСинхронизацииСКалендаремGoogle.Пользователь = &Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		НастройкиСинхронизации.Включено = Выборка.Включено;
		НастройкиСинхронизации.Вставить("НапоминатьОСобытии",          Выборка.НапоминатьОСобытии);
		НастройкиСинхронизации.Вставить("КоличествоДнейДоНапоминания", Выборка.КоличествоДнейДоНапоминания);
		НастройкиСинхронизации.Вставить("ВремяНапоминания",            Выборка.ВремяНапоминания);
		
	КонецЕсли;
	
	Возврат НастройкиСинхронизации;
	
КонецФункции

Процедура ЗаписатьНастройкиНапоминанийВФоне(ПараметрыНапоминаний, АдресХранилища) Экспорт
	
	ЗаписатьНапоминания(ПараметрыНапоминаний.НапоминатьОСобытии, ПараметрыНапоминаний.КоличествоДнейДоНапоминания, ПараметрыНапоминаний.ВремяНапоминания);
	
	ВыполнитьСинхронизациюКалендарей(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыНапоминаний.Пользователь));
	
	Результат = Истина;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ВключитьСинхронизациюВФоне(ПараметрыВключения, АдресХранилища) Экспорт
	
	КодРазрешения = ПараметрыВключения.КодРазрешения;
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",      "Ошибка");
	Результат.Вставить("ТекстОшибки", "");
	
	Если ЗначениеЗаполнено(КодРазрешения) Тогда
		
		Попытка
			
			ИдентификаторПриложения = ИдентификаторПриложения();
			
			Пользователь = Пользователи.ТекущийПользователь();
			
			СеансовыеДанные = СеансовыеДанныеПоКодуРазрешения(КодРазрешения, ИдентификаторПриложения);
			Если НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
				Результат.ТекстОшибки = НСтр("ru = 'Не удалось подключиться к календарю Google. Возможно, неверный код разрешения.'");
			ИначеЕсли ТокенДоступаДействителен(СеансовыеДанные.access_token) Тогда
				ЗаписатьСеансовыеДанные(СеансовыеДанные, Пользователь);
				Результат.Статус = "СинхронизацияВключена";
				
				ВыполнитьСинхронизациюКалендарей(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
				
			Иначе
				// По коду разрешения был получен токен доступа, который по каким-то причинам оказался недействительным.
				Результат.ТекстОшибки = НСтр("ru = 'Получен недейстительный токен доступа'");
				
				ТекстОшибкиЖурналаРегистрации = НСтр("ru = 'По коду разрешения %1 получен недействительный токен доступа %2. Подключение невозможно.'");
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , , 
					СтрШаблон(ТекстОшибкиЖурналаРегистрации, КодРазрешения, СеансовыеДанные.access_token));
				
			КонецЕсли;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , , 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
		КонецПопытки;
		
	Иначе
		Результат.ТекстОшибки = НСтр("ru = 'Не заполнен код разрешения'");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверитьДоступностьСинхронизацииВФоне(Параметры, АдресХранилища) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("СинхронизацияДоступна", Ложь);
	РезультатПроверки.Вставить("ТекстОшибки",           "");
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	СеансовыеДанные = СеансовыеДанныеИзКеша(Пользователь);
	Если СеансовыеДанные = Неопределено Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Доступ к календарю Google не настроен'");
		
	Иначе
		
		ТекстОшибки = "";
		ДействительныеСеансовыеДанные = ДействительныеСеансовыеДанные(СеансовыеДанные, ИдентификаторПриложения(), ТекстОшибки);
		Если ДействительныеСеансовыеДанные <> Неопределено Тогда
			РезультатПроверки.СинхронизацияДоступна = Истина;
			
			Если Параметры.ВыполнитьСинхронизациюПослеПроверки Тогда
				ВыполнитьСинхронизациюКалендарей(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
			КонецЕсли;
			
		Иначе
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

Процедура ОтключитьСинхронизацию() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	ОтключитьСинхронизациюПользователя(Пользователь);
	
КонецПроцедуры

Функция ДоступнаНастройкаСинхронизации() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЗадачиБухгалтера)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиСинхронизацииСКалендаремGoogle);
	
КонецФункции

Функция ВосстановитьДатуJSON(Свойство, Значение, Параметры) Экспорт
	
	Попытка
		
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Синхронизация календаря Google.'"),
		УровеньЖурналаРегистрации.Предупреждение,,,
		СтрШаблон(
		НСтр("ru = 'Не удалось прочитать дату JSON для свойства ""%1"": ""%2"".'"), 
		Свойство,
		Значение));
		
	КонецПопытки;
	
	Возврат '0001-01-01';
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторПриложения()
	
	ИдентификаторПриложенияИзНастроек = ИдентификаторПриложенияИзНастроек();
	Если ИдентификаторПриложенияИзНастроек <> Неопределено Тогда
		Возврат ИдентификаторПриложенияИзНастроек;
	КонецЕсли;
	
	ИдентификаторПриложения = НовыйИдентификаторПриложения();
	
	ИдентификаторПриложения.client_id     = "523658279383-litj652se801panh6jbnibfd8bmocvin.apps.googleusercontent.com";
	ИдентификаторПриложения.client_secret = "wpVivSDz_bsj6G-DwONxN66q";
	ИдентификаторПриложения.auth_uri      = "https://accounts.google.com/o/oauth2/auth";
	ИдентификаторПриложения.token_uri     = "https://accounts.google.com/o/oauth2/token";
	ИдентификаторПриложения.redirect_uri  = "urn:ietf:wg:oauth:2.0:oob";
	
	Возврат ИдентификаторПриложения;
	
КонецФункции

Процедура ВыполнитьСинхронизациюКалендарей(СписокПользователей, Организации = Неопределено)
	
	СоответствиеПользователейИОрганизаций = Новый Соответствие();
	
	СеансовыеДанныеПользователейИзКеша = СеансовыеДанныеПользователейИзКеша(СписокПользователей);
	
	ПодключенныеПользователи = Новый Массив;
	
	// Мы нужно обрабатывать только подключенных к обмену пользователей
	Для Каждого СеансовыеДанныеПользователя Из СеансовыеДанныеПользователейИзКеша Цикл
		ПодключенныеПользователи.Добавить(СеансовыеДанныеПользователя.Ключ);
	КонецЦикла;
	
	ВсеОрганизации = Новый Массив;
	
	// Список задач формируем только для организаций, которые доступны списку подключенных пользователей.
	Для Каждого Пользователь Из ПодключенныеПользователи Цикл
		
		ВсеОрганизацииПользователя = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
			"РегистрСведений.ЗадачиБухгалтера", Ложь, Пользователь);
		
		ОрганизацииПользователя = Новый Массив;
		Для Каждого ОрганизацияПользователя Из ВсеОрганизацииПользователя Цикл
			Если Организации = Неопределено
				ИЛИ Организации.Найти(ОрганизацияПользователя) <> Неопределено Тогда
				ОрганизацииПользователя.Добавить(ОрганизацияПользователя);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОрганизации, ОрганизацииПользователя, Истина);
		
		СоответствиеПользователейИОрганизаций.Вставить(Пользователь, ОрганизацииПользователя);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	КалендариИБ = КалендарьБухгалтера.СобытияКалендаряДляGoogle(ВсеОрганизации);
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторПриложения = ИдентификаторПриложения();
	
	Для Каждого СеансовыеДанныеПользователя Из СеансовыеДанныеПользователейИзКеша Цикл
		
		Пользователь = СеансовыеДанныеПользователя.Ключ;
		
		ОрганизацииПользователя = СоответствиеПользователейИОрганизаций.Получить(Пользователь);
		
		СеансовыеДанные = ДействительныеСеансовыеДанные(СеансовыеДанныеПользователя.Значение, ИдентификаторПриложения);
		Если СеансовыеДанные = Неопределено Тогда
			
			ЗаписатьОшибкуСинхронизацииСКалендаремGoogle(Пользователь, НСтр("ru = 'Не удалось получить токен доступа'"));
			Продолжить;
			
		КонецЕсли;
		
		ИдентификаторыКалендарей = ИдентификаторыКалендарей(Пользователь, ОрганизацииПользователя);
		
		КалендариGoogle = КалендариGoogleПользователя(ИдентификаторыКалендарей, СеансовыеДанные, ИдентификаторПриложения);
		Если КалендариGoogle = Неопределено Тогда
			
			ЗаписатьОшибкуСинхронизацииСКалендаремGoogle(Пользователь, НСтр("ru = 'Не удалось получить данные календарей'"));
			Продолжить;
			
		КонецЕсли;
		
		ОбновитьКалендариВGoogle(КалендариИБ, КалендариGoogle, Пользователь,
			ОрганизацииПользователя, СеансовыеДанные, ИдентификаторПриложения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьСинхронизациюПользователя(Пользователь)
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НастройкиСинхронизацииСКалендаремGoogle.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Включено = Ложь;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьНапоминания(НапоминатьОСобытии, КоличествоДнейДоНапоминания, ВремяНапоминания)
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Пользователь = Пользователи.ТекущийПользователь();
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НастройкиСинхронизацииСКалендаремGoogle.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран()
			ИЛИ НЕ МенеджерЗаписи.Включено Тогда
			ВызватьИсключение НСтр("ru = 'Нельзя устанавливать настройки напоминания для отключенного обмена'");
		КонецЕсли;
		
		МенеджерЗаписи.НапоминатьОСобытии          = НапоминатьОСобытии;
		МенеджерЗаписи.КоличествоДнейДоНапоминания = КоличествоДнейДоНапоминания;
		МенеджерЗаписи.ВремяНапоминания            = ВремяНапоминания;
		
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ОбновитьКалендариВGoogle(КалендариИБ, КалендариGoogle, Пользователь, Организации, СеансовыеДанные, ИдентификаторПриложения)
	
	НастройкиСинхронизации = НастройкиСинхронизации(Пользователь);
	
	Для Каждого Организация Из Организации Цикл
		
		КалендарьGoogle = КалендариGoogle.Получить(Организация);
		Если КалендарьGoogle = Неопределено Тогда
			КалендарьGoogle = СоздатьКалендарьВGoogle(Пользователь, Организация, СеансовыеДанные, ИдентификаторПриложения);
		КонецЕсли;
		
		Если КалендарьGoogle <> Неопределено Тогда
			СобытияВИБ = КалендариИБ.Получить(Организация);
			СобытияВGoogle = КалендарьGoogle.События;
			
			Для Каждого СобытиеВGoogle ИЗ СобытияВGoogle Цикл
				Отбор = Новый Структура("Наименование, ДатаЗадачи", СобытиеВGoogle.Наименование, СобытиеВGoogle.ДатаЗадачи);
				НайденныеСобытия = СобытияВИБ.НайтиСтроки(Отбор);
				Если НайденныеСобытия.Количество() > 0 Тогда
					НайденноеСобытие = НайденныеСобытия[0];
					Если СобытиеВGoogle.Описание <> НайденноеСобытие.Описание Тогда
						СобытиеВGoogle.Описание = НайденноеСобытие.Описание;
						СобытиеВGoogle.Действие = "Изменить";
					КонецЕсли;
					УстановитьНапоминание(СобытиеВGoogle, НайденноеСобытие.Выполнено, НастройкиСинхронизации);
				Иначе
					СобытиеВGoogle.Действие = "Удалить";
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СобытиеВИБ ИЗ СобытияВИБ Цикл
				Отбор = Новый Структура("Наименование, ДатаЗадачи", СобытиеВИБ.Наименование, СобытиеВИБ.ДатаЗадачи);
				НайденныеСобытия = СобытияВGoogle.НайтиСтроки(Отбор);
				Если НайденныеСобытия.Количество() = 0 Тогда
					СобытиеВGoogle = СобытияВGoogle.Добавить();
					СобытиеВGoogle.Наименование = СобытиеВИБ.Наименование;
					СобытиеВGoogle.ДатаЗадачи   = СобытиеВИБ.ДатаЗадачи;
					СобытиеВGoogle.Описание     = СобытиеВИБ.Описание;
					СобытиеВGoogle.Действие     = "Добавить";
					УстановитьНапоминание(СобытиеВGoogle, СобытиеВИБ.Выполнено, НастройкиСинхронизации);
				ИначеЕсли НайденныеСобытия.Количество() > 1 Тогда
					// Если в календаре Google найдено несколько одинаковых событий,
					// то изменять нужно только первое, а остальные удалить.
					Для Каждого НайденноеСобытие ИЗ НайденныеСобытия Цикл
						Если НайденноеСобытие <> НайденныеСобытия[0] Тогда
							СобытиеВGoogle.Действие = "Удалить";
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			ОбновитьСобытияКалендаряGoogle(КалендарьGoogle, СеансовыеДанные, ИдентификаторПриложения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНапоминание(СобытиеВGoogle, Выполнено, НастройкиСинхронизации)
	
	НапоминаниеИзменено = Ложь;
	Если НЕ Выполнено И НастройкиСинхронизации.НапоминатьОСобытии Тогда
		КоличествоМинутНапоминания = НастройкиСинхронизации.КоличествоДнейДоНапоминания * 24 * 60;
		ПоправкаНаВремяНапоминания = Цел((НастройкиСинхронизации.ВремяНапоминания - НачалоДня(НастройкиСинхронизации.ВремяНапоминания))/60);
		КоличествоМинутНапоминания = КоличествоМинутНапоминания - ПоправкаНаВремяНапоминания;
		
		Если СобытиеВGoogle.Напоминания.Количество() = 1 Тогда
			Если СобытиеВGoogle.Напоминания[0] <> КоличествоМинутНапоминания Тогда
				СобытиеВGoogle.Напоминания[0] = КоличествоМинутНапоминания;
				НапоминаниеИзменено = Истина;
			КонецЕсли;
		Иначе
			СобытиеВGoogle.Напоминания.Очистить();
			СобытиеВGoogle.Напоминания.Добавить(КоличествоМинутНапоминания);
			НапоминаниеИзменено = Истина;
		КонецЕсли;
	Иначе
		Если СобытиеВGoogle.Напоминания.Количество() > 0 Тогда
			СобытиеВGoogle.Напоминания.Очистить();
			НапоминаниеИзменено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НапоминаниеИзменено И НЕ ЗначениеЗаполнено(СобытиеВGoogle.Действие) Тогда
		СобытиеВGoogle.Действие = "Изменить";
	КонецЕсли;
	
КонецПроцедуры

Функция НеЗаполненТокенДоступа(СеансовыеДанные)
	
	Если ТипЗнч(СеансовыеДанные)<>Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТокенДоступа = Неопределено;
	
	СеансовыеДанные.Свойство("access_token", ТокенДоступа);
	
	Возврат Не ЗначениеЗаполнено(ТокенДоступа);
	
КонецФункции

Функция СеансовыеДанныеПоКодуРазрешения(КодРазрешения, ИдентификаторПриложения)
	
	АдресДляПолученияТокенаДоступа = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		ИдентификаторПриложения.token_uri);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресДляПолученияТокенаДоступа.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресДляПолученияТокенаДоступа.Хост,
		АдресДляПолученияТокенаДоступа.Порт,,,
		ИнтернетПрокси, 20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресДляПолученияТокенаДоступа.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	ЗапросHTTP.УстановитьТелоИзСтроки(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"code=%1&client_id=%2&client_secret=%3&redirect_uri=%4&grant_type=authorization_code",
			КодРазрешения,
			ИдентификаторПриложения.client_id,
			ИдентификаторПриложения.client_secret,
			ИдентификаторПриложения.redirect_uri));
	
	ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	СеансовыеДанные = НовыеСеансовыеДанные();
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЗаполнитьЗначенияСвойств(СеансовыеДанные, Результат);
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = 
			НСтр("ru = 'Получение сеансовых данных по коду разрешения завершилось ошибкой.
			|Сервер вернул состояние %1
			|Код разрешения %2
			|Текст ответа:
			|%3'");
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			СтрШаблон(ТекстОшибкиЖурналаРегистрации,
				ОтветHTTP.КодСостояния,
				КодРазрешения,
				ОтветHTTP.ПолучитьТелоКакСтроку()));
		
	КонецЕсли;
	
	Возврат СеансовыеДанные;
	
КонецФункции

Функция СеансовыеДанныеПоRefreshToken(Refresh_token, ИдентификаторПриложения)
	
	АдресДляПолученияТокенаДоступа = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		ИдентификаторПриложения.token_uri);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресДляПолученияТокенаДоступа.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресДляПолученияТокенаДоступа.Хост,
		АдресДляПолученияТокенаДоступа.Порт,,,
		ИнтернетПрокси, 20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресДляПолученияТокенаДоступа.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	ЗапросHTTP.УстановитьТелоИзСтроки(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"grant_type=refresh_token&client_id=%1&client_secret=%2&refresh_token=%3",
			ИдентификаторПриложения.client_id,
			ИдентификаторПриложения.client_secret,
			Refresh_token));
	
	ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	Результат = ПрочитатьJSON(ЧтениеJSON);
	
	СеансовыеДанные = НовыеСеансовыеДанные();
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ТекстОшибкиЖурналаРегистрации = 
			НСтр("ru = 'Получение сеансовых данных по токену обновления refresh_token завершилось ошибкой.
			|Сервер вернул состояние %1
			|refresh_token %2
			|Текст ответа:
			|%3'");
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			СтрШаблон(ТекстОшибкиЖурналаРегистрации,
				ОтветHTTP.КодСостояния,
				Refresh_token,
				ОтветHTTP.ПолучитьТелоКакСтроку()));
		
		Если Результат.Свойство("message") Тогда
			ТекстОшибкиСервиса = Результат.message;
		ИначеЕсли Результат.Свойство("error_description") Тогда
			ТекстОшибкиСервиса = Результат.error_description;
		ИначеЕсли Результат.Свойство("error") Тогда
			ТекстОшибкиСервиса = Результат.error;
		Иначе
			ТекстОшибкиСервиса = НСтр("ru = 'Получение сеансовых данных по токену обновления refresh_token завершилось ошибкой'");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибкиСервиса;
	КонецЕсли;
	
	Если Не Результат.Свойство("refresh_token") Тогда
		Результат.Вставить("refresh_token", Refresh_token);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СеансовыеДанные, Результат);
	
	Возврат СеансовыеДанные;
	
КонецФункции

Функция СеансовыеДанныеИзКеша(Пользователь)
	
	МассивПользователей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь);
	СеансовыеДанныеПользователейИзКеша = СеансовыеДанныеПользователейИзКеша(МассивПользователей);
	Возврат СеансовыеДанныеПользователейИзКеша.Получить(Пользователь);
	
КонецФункции

Функция ПользователиСВключеннойСинхронизацией()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиСинхронизацииСКалендаремGoogle.Пользователь
	|ИЗ
	|	РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle КАК НастройкиСинхронизацииСКалендаремGoogle
	|ГДЕ
	|	НастройкиСинхронизацииСКалендаремGoogle.Включено = ИСТИНА";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

Функция СеансовыеДанныеПользователейИзКеша(Пользователи)
	
	СеансовыеДанныеПользователей = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Пользователи", Пользователи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСинхронизацииСКалендаремGoogle.Пользователь,
	|	НастройкиСинхронизацииСКалендаремGoogle.access_token,
	|	НастройкиСинхронизацииСКалендаремGoogle.token_type,
	|	НастройкиСинхронизацииСКалендаремGoogle.refresh_token
	|ИЗ
	|	РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle КАК НастройкиСинхронизацииСКалендаремGoogle
	|ГДЕ
	|	НастройкиСинхронизацииСКалендаремGoogle.Пользователь В(&Пользователи)
	|	И НастройкиСинхронизацииСКалендаремGoogle.Включено = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СеансовыеДанные = НовыеСеансовыеДанные();
		ЗаполнитьЗначенияСвойств(СеансовыеДанные, Выборка);
		СеансовыеДанныеПользователей.Вставить(Выборка.Пользователь, СеансовыеДанные);
		
	КонецЦикла;
	
	Возврат СеансовыеДанныеПользователей;
	
	
КонецФункции

Функция ДействительныеСеансовыеДанные(СеансовыеДанные, ИдентификаторПриложения, ТекстОшибки = "")
	
	Если ТокенДоступаДействителен(СеансовыеДанные.access_token) Тогда
		
		Возврат СеансовыеДанные;
		
	Иначе
		
		// Токен может быть просрочен.
		// В этом случае нужно получить новый по refresh_token.
		// Если и это не получиться, то значит возникли проблемы с 
		Если ЗначениеЗаполнено(СеансовыеДанные.refresh_token) Тогда
			
			Попытка
				
				НовыеСеансовыеДанные = СеансовыеДанныеПоRefreshToken(СеансовыеДанные.refresh_token, ИдентификаторПриложения);
				Если ТокенДоступаДействителен(НовыеСеансовыеДанные.access_token) Тогда
					ЗаписатьСеансовыеДанные(НовыеСеансовыеДанные, Пользователи.ТекущийПользователь());
					
					Возврат НовыеСеансовыеДанные;
					
				Иначе
					ТекстОшибкиЖурналаРегистрации = 
						НСтр("ru = 'По токену обновления refresh_token = %1 получен недействительный токен доступа access_token = %2. Подключение невозможно.'");
					
					ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка, , , 
						СтрШаблон(ТекстОшибкиЖурналаРегистрации, СеансовыеДанные.refresh_token, НовыеСеансовыеДанные.access_token));
					
					ТекстОшибки = НСтр("ru = 'Ошибка при подключении к календарю Google'");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , , 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьСеансовыеДанные(СеансовыеДанные, Пользователь)
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НастройкиСинхронизацииСКалендаремGoogle.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Пользователь = Пользователь;
			МенеджерЗаписи.НапоминатьОСобытии = Истина;
			МенеджерЗаписи.КоличествоДнейДоНапоминания = 3;
			МенеджерЗаписи.ВремяНапоминания = Дата(1, 1, 1, 10, 00, 00);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СеансовыеДанные);
		
		МенеджерЗаписи.Включено = Истина;
		
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторКалендаря(Пользователь, Организация, Идентификатор)
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ИдентификаторыКалендарейGoogle");
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		ЭлементБлокировки.УстановитьЗначение("Организация",  Организация);
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ИдентификаторыКалендарейGoogle.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Организация  = Организация;
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Пользователь = Пользователь;
			МенеджерЗаписи.Организация  = Организация;
		КонецЕсли;
		
		МенеджерЗаписи.Идентификатор = Идентификатор;
		
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Функция ТокенДоступаДействителен(ТокенДоступа)
	
	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресДляПолученияТокенаДоступа = ОбщегоНазначенияКлиентСервер.СтруктураURI(
	"https://www.googleapis.com/oauth2/v1/tokeninfo");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресДляПолученияТокенаДоступа.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресДляПолученияТокенаДоступа.Хост,
		АдресДляПолученияТокенаДоступа.Порт,,,
		ИнтернетПрокси, 20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресДляПолученияТокенаДоступа.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	ЗапросHTTP.УстановитьТелоИзСтроки(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("access_token=%1", ТокенДоступа));
	
	ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
	
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		ТекстОшибкиЖурналаРегистрации = 
			НСтр("ru = 'Проверка токена доступа завершилась ошибкой.
			|Сервер вернул состояние %1
			|access_token %2
			|Текст ответа:
			|%3'");
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			СтрШаблон(ТекстОшибкиЖурналаРегистрации,
				ОтветHTTP.КодСостояния,
				ТокенДоступа,
				ОтветHTTP.ПолучитьТелоКакСтроку()));
		
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветHTTP.ПолучитьТелоКакСтроку());
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Если РезультатЧтенияJSON.Свойство("expires_in") И РезультатЧтенияJSON.expires_in<300 Тогда
		// Если токену доступа осталось жить меньше пяти минут, принудительно обновляем
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РезультатЧтенияJSON.Свойство("issued_to") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ключевая проверка: идентификаторы для действительного токена должны совпадать
	
	Возврат РезультатЧтенияJSON.issued_to=ИдентификаторПриложения().client_id;
	
КонецФункции

Функция КалендариGoogleПользователя(ИдентификаторыКалендарей, СеансовыеДанные, ИдентификаторПриложения)
	
	Попытка
		
		КалендариGoogleПользователя = Новый Соответствие;
		
		АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
			"https://www.googleapis.com/calendar/v3/users/me/calendarList");
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные));
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Если РезультатЧтенияJSON.Получить("items") <> Неопределено Тогда
			Для Каждого ДанныеКалендаря ИЗ РезультатЧтенияJSON.Получить("items") Цикл
				
				Если ДанныеКалендаря["accessRole"] <> "owner" Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторКалендаря = ДанныеКалендаря.Получить("id");
				ОрганизацияКалендаря = ИдентификаторыКалендарей.Получить(ИдентификаторКалендаря);
				Если ОрганизацияКалендаря <> Неопределено Тогда
					
					ОписаниеКалендаря = НовыеОписаниеКалендаряGoogle();
					ОписаниеКалендаря.Идентификатор = ИдентификаторКалендаря;
					ОписаниеКалендаря.Наименование  = ДанныеКалендаря.Получить("summary");
					ЗаполнитьСобытияКалендаряGoogle(ОписаниеКалендаря.События, ИдентификаторКалендаря, СеансовыеДанные);
					
					КалендариGoogleПользователя.Вставить(ОрганизацияКалендаря, ОписаниеКалендаря);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Возврат КалендариGoogleПользователя;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ИдентификаторыКалендарей(Пользователь, Организации)
	
	ИдентификаторыКалендарей = Новый Соответствие;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Пользователь", Пользователь);
	Запрос.Параметры.Вставить("Организации", Организации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыКалендарейGoogle.Идентификатор,
	|	ИдентификаторыКалендарейGoogle.Организация
	|ИЗ
	|	РегистрСведений.ИдентификаторыКалендарейGoogle КАК ИдентификаторыКалендарейGoogle
	|ГДЕ
	|	ИдентификаторыКалендарейGoogle.Пользователь = &Пользователь
	|	И ИдентификаторыКалендарейGoogle.Организация В (&Организации)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыКалендарей.Вставить(Выборка.Идентификатор, Выборка.Организация);
	КонецЦикла;
	
	Возврат ИдентификаторыКалендарей;
	
КонецФункции

Функция СоздатьКалендарьВGoogle(Пользователь, Организация, СеансовыеДанные, ИдентификаторПриложения)
	
	НаименованиеКалендаря = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеСокращенное");
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		"https://www.googleapis.com/calendar/v3/calendars");
	
	ДанныеКалендаря = Новый Соответствие;
	ДанныеКалендаря["summary"]  = НаименованиеКалендаря;
	ДанныеКалендаря["timeZone"] = ЧасовойПояс();
	
	Заголовки = Новый Соответствие;
	Заголовки["Content-Type"] = "application/json";
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеКалендаря);
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ВызовМетода(АдресAPI, СеансовыеДанные, "POST", Заголовки, ТелоЗапроса));
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ИдентификаторКалендаря = РезультатЧтенияJSON.Получить("id");
	Если ЗначениеЗаполнено(ИдентификаторКалендаря) Тогда
		ЗаписатьИдентификаторКалендаря(Пользователь, Организация, ИдентификаторКалендаря);
		ОписаниеКалендаря = НовыеОписаниеКалендаряGoogle();
		ОписаниеКалендаря.Идентификатор = ИдентификаторКалендаря;
		ОписаниеКалендаря.Наименование  = НаименованиеКалендаря;
		Возврат ОписаниеКалендаря;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСобытияКалендаряGoogle(КалендарьGoogle, СеансовыеДанные, ИдентификаторПриложения)
	
	ГраницаСекций = НоваяГраницаСекций();
	
	АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://www.googleapis.com/batch/calendar/v3");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресAPI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресAPI.Хост,
		АдресAPI.Порт,,,
		ИнтернетПрокси,
		20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ПакетныйЗапросHTTP = Новый HTTPЗапрос;
	ПакетныйЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
	ПакетныйЗапросHTTP.Заголовки["Authorization"] = 
		СтрШаблон("%1 %2", СеансовыеДанные["token_type"], СеансовыеДанные["access_token"]);
	ПакетныйЗапросHTTP.Заголовки["Content-Type"] = СтрШаблон("multipart/mixed; boundary=%1", ГраницаСекций);
	
	ТелоПакетногоЗапросаИзменениеДанныхКалендаря = 
		ТелоПакетногоЗапросаИзменениеДанныхКалендаря(КалендарьGoogle, ГраницаСекций);
	
	Если Не ЗначениеЗаполнено(ТелоПакетногоЗапросаИзменениеДанныхКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	ПакетныйЗапросHTTP.УстановитьТелоИзСтроки(
		ТелоПакетногоЗапросаИзменениеДанныхКалендаря, , ИспользованиеByteOrderMark.НеИспользовать);
	ПакетныйОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ПакетныйЗапросHTTP);
	
	Если ПакетныйОтветHTTP.КодСостояния <> 200 Тогда
		
		ТекстОшибкиЖурналаРегистрации = 
			НСтр("ru = 'Пакетная запись событий по календарю %1 завершилось ошибкой.
			|Сервер вернул состояние %2
			|Код разрешения %3
			|Текст ответа:
			|%4'");
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , 
			СтрШаблон(ТекстОшибкиЖурналаРегистрации,
				КалендарьGoogle.Наименование,
				ПакетныйОтветHTTP.КодСостояния,
				СеансовыеДанные["access_token"],
				ПакетныйОтветHTTP.ПолучитьТелоКакСтроку()));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТелоПакетногоЗапросаИзменениеДанныхКалендаря(КалендарьGoogle, ГраницаСекций)
	
	ПакетныйЗапрос = Новый Массив;
	
	Для Каждого Событие Из КалендарьGoogle.События Цикл
		
		Если НЕ ЗначениеЗаполнено(Событие.Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Событие.Действие = "Удалить" Тогда
			
			СтрокаЗапроса = СтрШаблон(
				"--%1
				|Content-Type: application/http
				|Content-ID: %2
				|
				|%3 /calendar/v3/calendars/%4/events/%5",
				ГраницаСекций,								// 1
				Новый УникальныйИдентификатор(),			// 2
				"DELETE",									// 3
				КалендарьGoogle.Идентификатор,				// 4
				Событие.Идентификатор);						// 5
			
		Иначе
			
			СобытиеДляИзменения = Новый Соответствие;
			
			СобытиеДляИзменения["description"] = Событие.Описание;
			СобытиеДляИзменения["summary"]     = Событие.Наименование;
			СобытиеДляИзменения["start"] = ОписаниеДатыСобытия(НачалоДня(Событие.ДатаЗадачи));
			СобытиеДляИзменения["end"]   = ОписаниеДатыСобытия(КонецДня(Событие.ДатаЗадачи)+1);
			
			СобытиеДляИзменения["reminders"] = ОписаниеНапоминаний(Событие.Напоминания);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			НастройкиСериализации = Новый НастройкиСериализацииJSON;
			НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
			ЗаписатьJSON(ЗаписьJSON, СобытиеДляИзменения, НастройкиСериализации);
			СтрокаJSON = СтрЗаменить(ЗаписьJSON.Закрыть(), """%null%""", "null"); // Удаление полей
			
			ИмяМетодаHTTP = ?(ЗначениеЗаполнено(Событие.Идентификатор), "PUT", "POST");
			
			ПередаваемыеПоля = "";
			Если ЗначениеЗаполнено(Событие.Идентификатор) Тогда
				ПередаваемыеПоля = "?fields=etag,start,end,summary,description,reminders";
			КонецЕсли;
			
			ЗаголовокETag = "";
			Если ЗначениеЗаполнено(Событие.ETag) Тогда
				ЗаголовокETag = СтрШаблон(
					"If-Match: %1%2",
					Событие.ETag,
					Символы.ПС);
			КонецЕсли;
			
			СтрокаЗапроса = СтрШаблон(
				"--%1
				|Content-Type: application/http
				|Content-ID: %2
				|
				|%3 /calendar/v3/calendars/%4/events/%5%6
				|Content-Type: application/json
				|%7
				|%8",
				ГраницаСекций,								// 1
				Новый УникальныйИдентификатор(),			// 2
				ИмяМетодаHTTP,								// 3
				КалендарьGoogle.Идентификатор,				// 4
				Событие.Идентификатор,						// 5
				ПередаваемыеПоля,							// 6
				ЗаголовокETag,								// 7
				СтрокаJSON);								// 8
				
		КонецЕсли;
		
		ПакетныйЗапрос.Добавить(СтрокаЗапроса);
		
	КонецЦикла;
	
	Результат = СтрСоединить(ПакетныйЗапрос, Символы.ПС + Символы.ПС);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = СтрШаблон(
		"%1
		|
		|--%2--",
		Результат,
		ГраницаСекций);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСобытияКалендаряGoogle(СобытияКалендаряGoogle, ИдентификаторКалендаря, СеансовыеДанные)
	
	СтраничныйТокен = "";
	// Цикл выполняется пока страничный токен не станет равным Неопределено
	Пока ЗначениеЗаполнено(СтраничныйТокен) Или СтраничныйТокен= "" Цикл
		
		АдресAPI = ОбщегоНазначенияКлиентСервер.СтруктураURI(
			СтрШаблон(
			"https://www.googleapis.com/calendar/v3/calendars/%1/events?singleEvents=True&maxResults=256&timeZone=%2%3",
			ИдентификаторКалендаря,
			ЧасовойПояс(),
			ПараметрСтраничныйТокен(СтраничныйТокен)));
		
		СтрокаJSON = ВызовМетода(АдресAPI, СеансовыеДанные);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON,
			Истина,,,
			"ВосстановитьДатуJSON",
			СинхронизацияСКалендаремGoogle,,
			СтрРазделить("created,date,dateTime,updated", ","));
		
		События = РезультатЧтенияJSON.Получить("items");
		Если События <> Неопределено Тогда
			Для Каждого Событие ИЗ События Цикл
				СобытиеКалендаря = СобытияКалендаряGoogle.Добавить();
				СобытиеКалендаря.Идентификатор = Событие.Получить("id");
				СобытиеКалендаря.Наименование  = Событие.Получить("summary");
				СобытиеКалендаря.ДатаЗадачи    = Событие.Получить("start").Получить("date");
				СобытиеКалендаря.Описание      = Событие.Получить("description");
				СобытиеКалендаря.etag          = Событие.Получить("etag");
				
				Напоминания = Событие.Получить("reminders").Получить("overrides");
				Если Напоминания <> Неопределено Тогда
					Для Каждого Напоминание Из Напоминания Цикл
						СобытиеКалендаря.Напоминания.Добавить(Напоминание.Получить("minutes"));
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		СтраничныйТокен = РезультатЧтенияJSON["nextPageToken"];
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВызовМетода(АдресAPI, СеансовыеДанные, HTTPМетод = Неопределено, ДополнительныеЗаголовки = Неопределено, ТелоЗапроса = Неопределено)
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(АдресAPI.Схема);
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресAPI.Хост,
		АдресAPI.Порт,,,
		ИнтернетПрокси,
		20,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = АдресAPI.ПутьНаСервере;
	ЗапросHTTP.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";
	ЗапросHTTP.Заголовки["Authorization"] = СтрШаблон(
		"%1 %2",
		СеансовыеДанные["token_type"],
		СеансовыеДанные["access_token"]);
	
	Если ТипЗнч(ДополнительныеЗаголовки)=Тип("Соответствие") Тогда
		Для Каждого ДопЗаголовок Из ДополнительныеЗаголовки Цикл
			ЗапросHTTP.Заголовки[ДопЗаголовок.Ключ] = ДопЗаголовок.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ТелоЗапроса <> Неопределено Тогда
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса,, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Если HTTPМетод = Неопределено Тогда
		ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP);
	Иначе
		ОтветHTTP = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, ЗапросHTTP);
	КонецЕсли;
	
	Возврат ОтветHTTP.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция ОписаниеДатыСобытия(Знач ДатаВремя)
	
	Результат = Новый Соответствие;
	
	ДатаВремяПриведенноеКСерверу = МестноеВремя(УниверсальноеВремя(ДатаВремя, ПолучитьЧасовойПоясИнформационнойБазы()));
	
	Если НачалоДня(ДатаВремяПриведенноеКСерверу) = ДатаВремяПриведенноеКСерверу Тогда
		Результат["date"] = Формат(ДатаВремяПриведенноеКСерверу, "ДФ=yyyy-MM-dd");
		Результат["dateTime"] = "%null%";
	Иначе
		Результат["date"] = "%null%";
		Результат["dateTime"] = ДатаВремяПриведенноеКСерверу;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеНапоминаний(Напоминания)
	
	Результат = Новый Соответствие;
	
	Если Напоминания.Количество() > 0 Тогда
		
		Результат["useDefault"] = "false";
		
		ОписаниеНапоминаний = Новый Массив;
		Для Каждого Напоминание Из Напоминания Цикл
			ОписаниеНапоминания = Новый Соответствие();
			ОписаниеНапоминания.Вставить("method",  "popup");
			ОписаниеНапоминания.Вставить("minutes", Напоминание);
			ОписаниеНапоминаний.Добавить(ОписаниеНапоминания);
		КонецЦикла;
		Результат["overrides"] = ОписаниеНапоминаний;
		
	Иначе
		
		Результат["useDefault"] = "true";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрСтраничныйТокен(СтраничныйТокен)
	
	Если ЗначениеЗаполнено(СтраничныйТокен) Тогда
		Возврат СтрШаблон("&pageToken=%1", СтраничныйТокен);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИдентификаторПриложенияИзНастроек()
	
	Перем Результат;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстИдентификатора = Константы.ИдентификаторПриложенияGoogle.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не ЗначениеЗаполнено(ТекстИдентификатора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстИдентификатора);
	
	РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
	
	ИдентификаторПриложенияИзКонстанты = РезультатЧтенияJSON["installed"];
	Если ИдентификаторПриложенияИзКонстанты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторПриложения = НовыйИдентификаторПриложения();
	
	ИдентификаторПриложения.client_id     = ИдентификаторПриложенияИзКонстанты["client_id"];
	ИдентификаторПриложения.client_secret = ИдентификаторПриложенияИзКонстанты["client_secret"];
	ИдентификаторПриложения.auth_uri      = ИдентификаторПриложенияИзКонстанты["auth_uri"];
	ИдентификаторПриложения.token_uri     = ИдентификаторПриложенияИзКонстанты["token_uri"];
	Если ИдентификаторПриложенияИзКонстанты["redirect_uris"] <> Неопределено
		И ИдентификаторПриложенияИзКонстанты["redirect_uris"].Количество() > 0 Тогда
		ИдентификаторПриложения.redirect_uri  = ИдентификаторПриложенияИзКонстанты["redirect_uris"][0];
	КонецЕсли;
	
	Возврат ИдентификаторПриложения;
	
КонецФункции

#Область Конструкторы

Функция НовыеСеансовыеДанные()
	
	СеансовыеДанные = Новый Структура;
	СеансовыеДанные.Вставить("access_token",  "");
	СеансовыеДанные.Вставить("token_type",    "");
	СеансовыеДанные.Вставить("refresh_token", "");
	
	Возврат СеансовыеДанные;
	
КонецФункции

Функция НовыеОписаниеКалендаряGoogle()
	
	ОписаниеКалендаряGoogle = Новый Структура();
	ОписаниеКалендаряGoogle.Вставить("Идентификатор", "");
	ОписаниеКалендаряGoogle.Вставить("Наименование",  "");
	ОписаниеКалендаряGoogle.Вставить("События",       НовыеОписанияСобытийКалендаряGoogle());
	
	Возврат ОписаниеКалендаряGoogle;
	
КонецФункции

Функция НовыеОписанияСобытийКалендаряGoogle()
	
	ОписанияСобытийКалендаряGoogle = Новый ТаблицаЗначений;
	ОписанияСобытийКалендаряGoogle.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	ОписанияСобытийКалендаряGoogle.Колонки.Добавить("ДатаЗадачи",    Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ОписанияСобытийКалендаряGoogle.Колонки.Добавить("Описание",      Новый ОписаниеТипов("Строка"));
	ОписанияСобытийКалендаряGoogle.Колонки.Добавить("etag",          Новый ОписаниеТипов("Строка"));
	ОписанияСобытийКалендаряGoogle.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ОписанияСобытийКалендаряGoogle.Колонки.Добавить("Напоминания",   Новый ОписаниеТипов("Массив"));
	ОписанияСобытийКалендаряGoogle.Колонки.Добавить("Действие",      Новый ОписаниеТипов("Строка"));
	Возврат ОписанияСобытийКалендаряGoogle;
	
КонецФункции

Функция НоваяГраницаСекций()
	
	Возврат СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");

КонецФункции

Функция НовыйИдентификаторПриложения()
	
	ИдентификаторПриложения = Новый Структура();
	ИдентификаторПриложения.Вставить("client_id",     "");
	ИдентификаторПриложения.Вставить("client_secret", "");
	ИдентификаторПриложения.Вставить("auth_uri",      "");
	ИдентификаторПриложения.Вставить("token_uri",     "");
	ИдентификаторПриложения.Вставить("redirect_uri",  "");
	
	ОбластиДоступа = Новый Массив;
	ОбластиДоступа.Добавить("https://www.googleapis.com/auth/calendar");
	ОбластиДоступа.Добавить("https://www.googleapis.com/auth/calendar.events");
	
	ИдентификаторПриложения.Вставить("ОбластьДоступа", СтрСоединить(ОбластиДоступа, " "));
	
	Возврат ИдентификаторПриложения;
	
КонецФункции

#КонецОбласти

#Область РаботаСЖурналомРегистрации

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат "Синхронизация с календарем Google";
	
КонецФункции

Процедура ЗаписатьОшибкуСинхронизацииСКалендаремGoogle(Пользователь, ТекстОшибки)
	
	ТекстОшибкиЖурналаРегистрации = 
		НСтр("ru = 'Ошибка доступа к календарю Google для пользователя %1. %2.'");
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка, , , 
		СтрШаблон(ТекстОшибкиЖурналаРегистрации, Пользователь, ТекстОшибки));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

