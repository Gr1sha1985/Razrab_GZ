
#Область СлужебныйПрограммныйИнтерфейс

#Область ЭлементыФорм

#Область ДобавлениеРеквизитов

// Добавляет на форму подменю проверки и подбора по видам продукции ГосИС
// 
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма для встраивания гиперссылок проверки и подбора
//   ПараметрыИнтеграции - Структура        - параметры интеграции прикладной формы
//
Процедура ДобавитьКоманднуюПанельИПодменюПроверкиИПодбора(Форма, ПараметрыИнтеграции) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	Если ЭлементыФормы.Найти("КоманднаяПанельПроверкаИПодборПродукцииГосИС")<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследующийЭлемент = ?(ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы],
		Неопределено);
		
	ПанельСканированиеИПроверка = ЭлементыФормы.Вставить(
		"КоманднаяПанельПроверкаИПодборПродукцииГосИС",
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы],
		ПоследующийЭлемент);
	ПанельСканированиеИПроверка.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	ПодменюСканированиеИПроверка = ЭлементыФормы.Добавить(
		ИмяКнопкиИКоманды(),
		Тип("ГруппаФормы"),
		ПанельСканированиеИПроверка);
	ПодменюСканированиеИПроверка.Вид = ВидГруппыФормы.Подменю;
	ПодменюСканированиеИПроверка.Заголовок = НСтр("ru = 'Проверка и подбор'");
	ПодменюСканированиеИПроверка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ПодменюСканированиеИПроверка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ПодменюСканированиеИПроверка.Отображение = ОтображениеКнопки.Текст;
	ПодменюСканированиеИПроверка.ШрифтЗаголовка = Новый Шрифт(ПодменюСканированиеИПроверка.ШрифтЗаголовка, , , , , Истина, , );
	
	ПодменюВозобновитьПроверку = ЭлементыФормы.Добавить(
		ИмяКнопкиИКоманды(, Истина),
		Тип("ГруппаФормы"),
		ПодменюСканированиеИПроверка);
	ПодменюВозобновитьПроверку.Вид = ВидГруппыФормы.Подменю;
	ПодменюВозобновитьПроверку.Заголовок = НСтр("ru = 'Возобновить проверку и подбор'");
	ПодменюВозобновитьПроверку.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ПодменюВозобновитьПроверку.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ПодменюВозобновитьПроверку.Отображение = ОтображениеКнопки.Текст;
	
	ИнформацияОПроверкеИПодборе = ЭлементыФормы.Вставить(
		"СводнаяИнформацияОПроверкеИПодбореПродукцииГосИС",
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы],
		ПоследующийЭлемент);
	
	ИнформацияОПроверкеИПодборе.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИнформацияОПроверкеИПодборе.ОтображатьЗаголовок = Ложь;
	ИнформацияОПроверкеИПодборе.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ИнформацияОПроверкеИПодборе.РастягиватьПоВертикали = Ложь;
	ИнформацияОПроверкеИПодборе.РастягиватьПоГоризонтали = Истина;
	
	Картинка = ЭлементыФормы.Добавить("КартинкаПроверкаИПодборПродукцииГосИС",
		Тип("ДекорацияФормы"), ИнформацияОПроверкеИПодборе);
	Картинка.Вид      = ВидДекорацииФормы.Картинка;
	Картинка.Картинка = БиблиотекаКартинок.ИнформацияГосИС;
	
	Надпись = ЭлементыФормы.Добавить("НадписьПроверкаИПодборПродукцииГосИС",
		Тип("ДекорацияФормы"), ИнформацияОПроверкеИПодборе);
	Надпись.Вид = ВидДекорацииФормы.Надпись;
	Надпись.АвтоМаксимальнаяШирина = Ложь;
	
	
КонецПроцедуры

// Добавляет на форму кнопки проверки и подбора, возобновления проверки по видам продукции ГосИС
// 
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения                   - форма для встраивания гиперссылок проверки и подбора
//   ПараметрыИнтеграции - Структура                          - параметры интеграции прикладной формы
//   ВидПродукцииИС      - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для которого производится встраивание
//
Процедура ДобавитьКнопкуПроверкиИПодбора(Форма, ПараметрыИнтеграции, ВидПродукцииИС) Экспорт
	
	ИмяКомандыПроверкаПодбор = ИмяКнопкиИКоманды(ВидПродукцииИС);
	
	Если Форма.Команды.Найти(ИмяКомандыПроверкаПодбор)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыПроверкаПодбор);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = ВидПродукцииИС;
	
	Кнопка = Форма.Элементы.Вставить(
		ИмяКомандыПроверкаПодбор,
		Тип("КнопкаФормы"),
		Форма.Элементы[ИмяКнопкиИКоманды()],
		Форма.Элементы[ИмяКнопкиИКоманды(,Истина)]);
	Кнопка.ИмяКоманды = ИмяКомандыПроверкаПодбор;
	Кнопка.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиГосИС;
	Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	Кнопка.Отображение = ОтображениеКнопки.Текст;
	Кнопка.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , , , Истина, , );
	
	Если ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		ИмяКомандыВозобновитьПроверку = ИмяКнопкиИКоманды(ВидПродукцииИС, Истина);
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКомандыВозобновитьПроверку);
		КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		КомандаФормы.Заголовок = ПараметрыИнтеграции.Заголовки[8];
		
		Кнопка = Форма.Элементы.Добавить(
			ИмяКомандыВозобновитьПроверку,
			Тип("КнопкаФормы"),
			Форма.Элементы[ИмяКнопкиИКоманды(,Истина)]);
		Кнопка.ИмяКоманды = ИмяКомандыВозобновитьПроверку;
		Кнопка.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиГосИС;
		Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , , , Истина, , );
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму колонку статуса проверки и подбора в табличной части
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения                   - форма для встраивания
//   ПараметрыИнтеграции - Структура                          - параметры интеграции прикладной формы
//
Процедура ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		
		ПутьКРеквизиту = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		ПутьКРеквизиту = ПутьКРеквизиту + ".СтатусПроверкиГосИС";
		ИмяКолонкиРеквизита = СтрШаблон("%1СтатусПроверкиГосИС",ПараметрыИнтеграции.ИмяТабличнойЧастиТовары);
		
		Если Форма.Элементы.Найти(ИмяКолонкиРеквизита) = Неопределено Тогда
		
			КолонкаИнтерфейса = Форма.Элементы.Вставить(
				ИмяКолонкиРеквизита,
				Тип("ПолеФормы"),
				Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормыТовары],
				Форма.Элементы[ПараметрыИнтеграции.ИмяСледующейКолонки]);
			КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
			КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
			КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
			КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДобавленнымиРеквизитами

Процедура ОбновитьИнтерфейсПоВидуПродукции(Форма, ВидПродукцииИС, СтатусПроверкиИПодбора, ПараметрыИнтеграции) Экспорт
	
	ИмяКомандыПроверкаПодбор = ИмяКнопкиИКоманды(ВидПродукцииИС);
	
	Если Форма.Элементы.Найти(ИмяКомандыПроверкаПодбор) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаФормы  = Форма.Элементы[ИмяКомандыПроверкаПодбор];
	
	КнопкаФормы.Заголовок = ЗаголовокКомандыПроверкиИПодбора(ПараметрыИнтеграции, СтатусПроверкиИПодбора);
	
	Если ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		ИмяКомандыВозобновитьПроверку = ИмяКнопкиИКоманды(ВидПродукцииИС, Истина);
		Форма.Элементы[ИмяКомандыВозобновитьПроверку].Видимость = СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
		
	КонецЕсли;
	
	СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.НайтиСтроки(Новый Структура("ВидПродукции", ВидПродукцииИС));
	Если СтрокаСтатуса.Количество() Тогда
		
		Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется
			И ПараметрыИнтеграции.ЕстьПравоИзменение Тогда
			
			Если ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке Тогда
				СтрокаСтатуса[0].Описание = ПараметрыИнтеграции.ИнформацияДляПользователяОБлокировке;
			Иначе
				СтрокаСтатуса[0].Описание = ПараметрыИнтеграции.ИнформацияДляПользователяОПроверке;
			КонецЕсли;
		Иначе
			
			СтрокаСтатуса[0].Описание = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РеквизитыФорм

Процедура ПроверитьКолонкиИсточникаИПриемникаНаСовместимость(ДеревоИсточник, ДеревоПриемник) Экспорт
	
	Для Каждого КолонкаИсточника Из ДеревоИсточник.Колонки Цикл
		КолонкаПриемник = ДеревоПриемник.Колонки.Найти(КолонкаИсточника.Имя);
		Если КолонкаПриемник = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка: Колонка %1 не найдена в приемнике'"), КолонкаИсточника.Имя));
		Иначе
			ТипыКолонкиИсточника = КолонкаИсточника.ТипЗначения.Типы();
			Для Каждого ТипКолонкиИсточника Из ТипыКолонкиИсточника Цикл
				Если Не КолонкаПриемник.ТипЗначения.СодержитТип(ТипКолонкиИсточника) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Внутренняя ошибка: Колонка %1 включает тип %2, который отсутствует в типе колонки приемника'"), КолонкаИсточника.Имя, ТипКолонкиИсточника));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КолонкаПриемника Из ДеревоПриемник.Колонки Цикл
		КолонкаИсточник = ДеревоИсточник.Колонки.Найти(КолонкаПриемника.Имя);
		Если КолонкаИсточник = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка: Колонка %1 не найдена в источнике'"), КолонкаПриемника.Имя));
		Иначе
			ТипыКолонкиПриемника = КолонкаПриемника.ТипЗначения.Типы();
			Для Каждого ТипКолонкиПриемника Из ТипыКолонкиПриемника Цикл
				Если Не КолонкаИсточник.ТипЗначения.СодержитТип(ТипКолонкиПриемника) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Внутренняя ошибка: Колонка %1 включает тип %2, который отсутствует в типе колонки источника'"), КолонкаПриемника.Имя, ТипКолонкиПриемника));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСоСтатусамиПроверкиПодбораДокумента

Процедура ДобавитьТаблицуСтатусовПроверки(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("СтатусыПроверкиПодбораГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("СтатусыПроверкиПодбораГосИС", Новый Массив);
	
	Таблица = Новый РеквизитФормы("СтатусыПроверкиПодбораГосИС", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"), "СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Статус",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиИПодбораИС"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Видимость",Новый ОписаниеТипов("Булево"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Описание",Новый ОписаниеТипов("Строка"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементов(Форма, ВидПродукции, ВидимостьЭлементов) Экспорт
	
	// Если по разным видам продукции в статусе установлено одинаковое описание, то выводится только первое
	ОтображаемыеСтатусы = Новый Соответствие;
	Если ВидимостьЭлементов Тогда
		Для Каждого ЭлементДанных Из Форма.СтатусыПроверкиПодбораГосИС Цикл
			Если ЭлементДанных.Видимость Тогда
				Если ОтображаемыеСтатусы[ЭлементДанных.Описание] = Неопределено Тогда
					ОтображаемыеСтатусы.Вставить(ЭлементДанных.Описание, ЭлементДанных.ВидПродукции);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.НайтиСтроки(Новый Структура("ВидПродукции", ВидПродукции))[0];
	СтрокаСтатуса.Видимость = ВидимостьЭлементов;
	Если ОтображаемыеСтатусы[СтрокаСтатуса.Описание] <> СтрокаСтатуса.ВидПродукции Тогда
		СтрокаСтатуса.Видимость = Ложь;
	КонецЕсли;
	
	ИмяЭлемента = ИмяКнопкиИКоманды(ВидПродукции);
	Если Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Форма.Элементы[ИмяЭлемента].Видимость = ВидимостьЭлементов;
	КонецЕсли;
	ИмяЭлемента = ИмяКнопкиИКоманды(ВидПродукции, Истина);
	Если Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Форма.Элементы[ИмяЭлемента].Видимость = Форма.Элементы[ИмяЭлемента].Видимость И ВидимостьЭлементов;
	КонецЕсли;
	
	ОбновитьВидПодменю(Форма);
	ОбновитьОбщийСтатусПодменю(Форма);
	
КонецПроцедуры

Процедура УстановитьСтатусПоВидуПродукции(Форма, ВидПродукции, Статус) Экспорт
	
	СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.НайтиСтроки(Новый Структура("ВидПродукции", ВидПродукции));
	Если СтрокаСтатуса.Количество() = 0 Тогда
		СтрокаСтатуса = Форма.СтатусыПроверкиПодбораГосИС.Добавить();
		СтрокаСтатуса.ВидПродукции = ВидПродукции;
		СтрокаСтатуса.Видимость    = Истина;
	Иначе
		СтрокаСтатуса = СтрокаСтатуса[0];
	КонецЕсли;
	СтрокаСтатуса.Статус = Статус;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтатусамиПроверкиПодбораСтрок

Процедура ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты, ДополнительныеКлючи = "") Экспорт
	
	Если ПараметрыИнтеграции.Получить("ДанныеШтрихкодовУпаковокГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИнтеграции.Вставить("ДанныеШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Ложь));
	
	Таблица = Новый РеквизитФормы("ДанныеШтрихкодовУпаковокГосИС", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип, "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Характеристика",Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип,"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Серия",Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип,"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Количество",Новый ОписаниеТипов("Число"),"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ШтрихкодыУпаковок",Новый ОписаниеТипов("СписокЗначений"),"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	//Специфика таблицы
	ДополнительныеКлючиМассив = СтрРазделить(ДополнительныеКлючи, ",");
	Если ДополнительныеКлючиМассив.Найти("ИдентификаторПроисхожденияВЕТИС") <> Неопределено Тогда
		Колонка = Новый РеквизитФормы("ИдентификаторПроисхожденияВЕТИС",
			Метаданные.ОпределяемыеТипы["ИдентификаторПроисхожденияВЕТИС"].Тип,
			"ДанныеШтрихкодовУпаковокГосИС");
		ДобавляемыеРеквизиты.Добавить(Колонка);
	КонецЕсли;
	
	Если ДополнительныеКлючиМассив.Найти("СрокГодности") <> Неопределено Тогда
		Колонка = Новый РеквизитФормы("СрокГодности",
			Новый ОписаниеТипов("Дата"),
			"ДанныеШтрихкодовУпаковокГосИС");
		ДобавляемыеРеквизиты.Добавить(Колонка);
	КонецЕсли;
	
	Если ДополнительныеКлючиМассив.Найти("GTIN") <> Неопределено Тогда
		Колонка = Новый РеквизитФормы("GTIN",
			Метаданные.ОпределяемыеТипы.GTIN.Тип,
			"ДанныеШтрихкодовУпаковокГосИС");
		ДобавляемыеРеквизиты.Добавить(Колонка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("ИнтерфейсШтрихкодовУпаковокГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("ИнтерфейсШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Ложь));
	
	Колонка = Новый РеквизитФормы("МаркируемаяПродукция", Новый ОписаниеТипов("Булево"), ПутьКРеквизиту, НСтр("ru = 'Маркируемая продукция'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ВидПродукцииИС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"), ПутьКРеквизиту, НСтр("ru = 'Вид продукции'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("СтатусПроверкиГосИС", Новый ОписаниеТипов("Число"), ПутьКРеквизиту, НСтр("ru = 'Статус проверки подбора'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

Процедура ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки = Неопределено, Инициализация = Ложь) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ШтрихкодыУпаковокТоваров) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиИсточникаКешаШтрихкодовУпаковок(Истина);
	КонецЕсли;
	
	Если Инициализация Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		Если ПараметрыИнтеграцииГосИС.Получить("ДанныеШтрихкодовУпаковокГосИС")<>Неопределено
				И ПараметрыИнтеграцииГосИС.Получить("ДанныеШтрихкодовУпаковокГосИС").Заполнение = Истина Тогда
			Возврат;
		КонецЕсли;
		ПараметрыИнтеграцииГосИС.Вставить("ДанныеШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Истина));
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	КонецЕсли;
	
	Форма.ДанныеШтрихкодовУпаковокГосИС.Очистить();
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС.Выгрузить();
	
	Если ЗначениеЗаполнено(Настройки.Объект) Тогда
		Объект = Форма[Настройки.Объект];
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	ШтрихкодыУпаковокИсходнаяТаблица = Объект[Настройки.Штрихкоды].Выгрузить();
	// Дополнительные ключи связи, специфика: берем только строки с заполненными ключами.
	ЕстьСрокиГодности = ДанныеШтрихкодовУпаковокГосИС.Колонки.Найти("СрокГодности")<>Неопределено;
	ШтрихкодыУпаковокБезСрокаГодности = Неопределено;
	Если ЕстьСрокиГодности Тогда
		СтрокиОставить = Новый Массив;
		Для Каждого СтрокаШтрихкоды Из ШтрихкодыУпаковокИсходнаяТаблица Цикл
			Если ЗначениеЗаполнено(СтрокаШтрихкоды.СрокГодности) Тогда
				СтрокиОставить.Добавить(СтрокаШтрихкоды);
			КонецЕсли;
		КонецЦикла;
		Если СтрокиОставить.Количество() Тогда
			
			ШтрихкодыУпаковокБезИдентификатора = ШтрихкодыУпаковокИсходнаяТаблица.Скопировать(Новый Структура("СрокГодности", Дата(1,1,1)));
			ШтрихкодыУпаковокБезИдентификатора = ШтрихкодыУпаковокБезИдентификатора.ВыгрузитьКолонку("ШтрихкодУпаковки");
			ШтрихкодыУпаковокБезИдентификатора = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(ШтрихкодыУпаковокБезИдентификатора).ДеревоУпаковок;
			
			ШтрихкодыУпаковокИсходнаяТаблица = ШтрихкодыУпаковокИсходнаяТаблица.Скопировать(СтрокиОставить);
			ШтрихкодыУпаковокИсходнаяТаблица.Индексы.Добавить("ШтрихкодУпаковки");
			
		Иначе
			ЕстьСрокиГодности = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСрокиГодности Тогда
		ПоляПоиска = "Номенклатура,Характеристика,Серия,ИдентификаторПроисхожденияВЕТИС,СрокГодности";
	Иначе
		ПоляПоиска = "Номенклатура,Характеристика,Серия";
	КонецЕсли;
	ДанныеШтрихкодовУпаковокГосИС.Индексы.Добавить(ПоляПоиска);
	
	// Дополнительные ключи связи, специфика: поля поиска для незаполненной номенклатуры.
	ЕстьGTIN = ДанныеШтрихкодовУпаковокГосИС.Колонки.Найти("GTIN")<>Неопределено;
	ПоляПоискаДляПустойНоменклатуры = ПоляПоиска + ",GTIN";
	Если ЕстьGTIN Тогда
		ДанныеШтрихкодовУпаковокГосИС.Индексы.Добавить(ПоляПоискаДляПустойНоменклатуры);
	КонецЕсли;
	
	МассивИменКолонокШтрихкодовУпаковки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		Настройки.ШтрихкодУпаковки, ",", Истина);
	ШтрихкодыУпаковок = Неопределено;
	Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл
		Если ШтрихкодыУпаковок = Неопределено Тогда
			ШтрихкодыУпаковок = ШтрихкодыУпаковокИсходнаяТаблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			ШтрихкодыУпаковокДополнительное = ШтрихкодыУпаковокИсходнаяТаблица.ВыгрузитьКолонку(ИмяКолонки);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ШтрихкодыУпаковок, ШтрихкодыУпаковокДополнительное);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
		|	ШтрихкодыУпаковок.Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика,
		|	ШтрихкодыУпаковок.Серия,
		|	ШтрихкодыУпаковок.Количество,
		|	ШтрихкодыУпаковок.ЗначениеШтрихкода
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
		|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
		|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
		|	ШтрихкодыУпаковок.Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
		|");
	
	КешВложенности = Новый Соответствие;
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	СтруктураПоискаДляПустойНоменклатуры = Новый Структура(ПоляПоискаДляПустойНоменклатуры);
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
		
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СоставУпаковки);
			
			Если ЕстьСрокиГодности Тогда
				Расшифровка = ШтрихкодыУпаковокИсходнаяТаблица.Найти(ИсходныйШтрихкод, "ШтрихкодУпаковки");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Расшифровка, "ИдентификаторПроисхожденияВЕТИС, СрокГодности");
			КонецЕсли;
			
			Если ЕстьGTIN И Не ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДляПустойНоменклатуры, СтруктураПоиска);
				Если СтрНачинаетсяС(СоставУпаковки.ЗначениеШтрихкода, "(") Тогда
					СтруктураПоискаДляПустойНоменклатуры.GTIN = Сред(СоставУпаковки.ЗначениеШтрихкода, 5, 14);
				Иначе 
					СтруктураПоискаДляПустойНоменклатуры.GTIN = Сред(СоставУпаковки.ЗначениеШтрихкода, 1, 14);
				КонецЕсли;
				СтрокиКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаДляПустойНоменклатуры);
			Иначе
				СтрокиКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если СтрокиКеша.Количество() Тогда
				СтрокиКеша[0].Количество = СтрокиКеша[0].Количество + ?(СоставУпаковки.Количество=0,1,СоставУпаковки.Количество);
				СтрокиКеша[0].ШтрихкодыУпаковок.Добавить(ИсходныйШтрихкод);
			Иначе
				НоваяСтрока = ДанныеШтрихкодовУпаковокГосИС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставУпаковки);
				Если (НоваяСтрока.Количество=0) Тогда
					НоваяСтрока.Количество=1;
				КонецЕсли;
				Если ЕстьGTIN И Не ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
					НоваяСтрока.GTIN = СтруктураПоискаДляПустойНоменклатуры.GTIN;
				КонецЕсли;
				НоваяСтрока.ШтрихкодыУпаковок = Новый СписокЗначений;
				НоваяСтрока.ШтрихкодыУпаковок.Добавить(ИсходныйШтрихкод);
				Если ЕстьСрокиГодности Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска, "ИдентификаторПроисхожденияВЕТИС, СрокГодности");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыУпаковок = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыУпаковок.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСрокиГодности Тогда
		Для Каждого СтрокаСостав Из ШтрихкодыУпаковокБезИдентификатора.Строки Цикл
			ДополнитьКешШтрихкодамиБезИдентификаторов(СтрокаСостав.ШтрихкодУпаковки, СтрокаСостав.Строки, ДанныеШтрихкодовУпаковокГосИС, ШтрихкодыУпаковокИсходнаяТаблица);
		КонецЦикла;
	КонецЕсли;
	
	// Политики учета серий могут предусматривать различное указание серий в разных документах.
	// Если в конкретном документе серии по номенклатуре не указываются, добавление в него кодов маркировки с сериями
	//   ошибкой не является и обрабатывается как код маркировки без серии.
	ЭтоПрикладнойДокумент = Не Настройки.ВсеМаркируемые;
	Если ЭтоПрикладнойДокумент Тогда
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Форма);
		Если ЗначениеЗаполнено(ПараметрыСканирования.ПараметрыУказанияСерий) Тогда
			УдалитьСтроки = Новый Массив;
			Для Каждого СтрокаКеша Из ДанныеШтрихкодовУпаковокГосИС Цикл
				Если ЗначениеЗаполнено(СтрокаКеша.Серия)
					И Не ИнтеграцияИС.ТребуетсяВыборСерии(СтрокаКеша, ПараметрыСканирования) Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКеша);
				СтруктураПоиска.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
				СтрокиБезСерий = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
				Если СтрокиБезСерий.Количество() Тогда
					СтрокаПриемник = СтрокиБезСерий[0];
					СтрокаПриемник.Количество = СтрокаПриемник.Количество + СтрокаКеша.Количество;
					Для Каждого ШтрихкодУпаковки Из СтрокаКеша.ШтрихкодыУпаковок Цикл
						Если СтрокаПриемник.ШтрихкодыУпаковок.НайтиПоЗначению(ШтрихкодУпаковки.Значение) = Неопределено Тогда
							СтрокаПриемник.ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки.Значение);
						КонецЕсли;
					КонецЦикла;
					УдалитьСтроки.Добавить(СтрокаКеша);
				Иначе
					СтрокаКеша.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
				КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаКеша Из УдалитьСтроки Цикл
				ДанныеШтрихкодовУпаковокГосИС.Удалить(СтрокаКеша);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ДанныеШтрихкодовУпаковокГосИС.Загрузить(ДанныеШтрихкодовУпаковокГосИС);
	
КонецПроцедуры

//Возвращает настройки, используемые для встраивания интерфейса кеша штрихкодов упаковок в конкретную форму.
//
// Возвращаемое значение:
//   Структура - настройки встраивания:
//    * Объект           - Строка - имя реквизита формы Объект (сама форма если пусто).
//    * ВсеМаркируемые   - Булево - истина - не проверять товары на признак "Маркируемые".
//    * Штрихкоды        - Строка - имя табличной части "Штрихкоды упаковок".
//    * ШтрихкодУпаковки - Строка - имя колонки табличной части "Штрихкоды упаковок" содержащей ссылку на штрихкод.
//    * Товары           - Строка - имя табличной части "Товары".
//    * Серии            - Строка - имя табличной части "Серии".
//
Функция НастройкиИсточникаКешаШтрихкодовУпаковок(ЭтоДокументГосИС = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Объект",         "Объект");
	Результат.Вставить("ВсеМаркируемые", ЭтоДокументГосИС);
	
	Результат.Вставить("Штрихкоды",        "ШтрихкодыУпаковок");
	Результат.Вставить("ШтрихкодУпаковки", "ШтрихкодУпаковки");
	
	Результат.Вставить("Товары", "Товары");
	Результат.Вставить("Серии",  "");
	
	Результат.Вставить("Количество", "Количество");
	
	Возврат Результат;
	
КонецФункции

// Обновляет статусы проверки и подбора в строках таблицы товаров формы (документа)
//
// Параметры:
//   Форма               - ФормаКлиентскогоПриложения - форма для обновления статусов строк.
//   Настройки           - Неопределено, Структура    - (См. НастройкиИсточникаКешаШтрихкодовУпаковок).
//   ОбновитьТовары      - Булево                     - необходимость обновить таблицу товаров по таблице штрихкодов.
//   ДополнительныеКлючи - Строка                     - ключи связи строк табличных частей.
//
Процедура ПрименитьКешШтрихкодовУпаковок(Форма, Настройки = Неопределено, ОбновитьТовары = Ложь, ДополнительныеКлючи = "") Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиИсточникаКешаШтрихкодовУпаковок(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки.Объект) Тогда
		Объект = Форма[Настройки.Объект];
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	ТабличнаяЧастьТовары = Объект[Настройки.Товары];
	
	Если ЗначениеЗаполнено(Настройки.Серии) И Объект[Настройки.Серии].Количество() Тогда
		ТабличнаяЧастьСерии = Объект[Настройки.Серии];
	Иначе
		ТабличнаяЧастьСерии = Неопределено;
	КонецЕсли;
	
	ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧастьТовары, Настройки.ВсеМаркируемые);
	
	КолонкиТаблицыТовары = ТабличнаяЧастьТовары.Выгрузить(Новый Массив).Колонки;
	СтруктураПоиска = Новый Структура("Номенклатура");
	СтруктураПоискаБезСерий = Новый Структура("Номенклатура");
	Если КолонкиТаблицыТовары.Найти("Характеристика")<> Неопределено Тогда
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоискаБезСерий.Вставить("Характеристика");
	КонецЕсли;
	Если КолонкиТаблицыТовары.Найти("Серия")<> Неопределено Тогда
		СтруктураПоиска.Вставить("Серия");
	КонецЕсли;
	Для Каждого КлючПоиска Из СтрРазделить(ДополнительныеКлючи, ",", Ложь) Цикл
		СтруктураПоиска.Вставить(КлючПоиска);
	КонецЦикла;
	
	Если ОбновитьТовары Тогда
		ТабличнаяЧастьШтрихкоды = Объект[Настройки.Штрихкоды];
		УдалитьСвязанныеШтрихкодыУпаковок = Новый Соответствие;
		УдалитьСтрокиШтрихкодов = Новый Массив;
		//Удалились товары
		Для Каждого СтрокаТовары Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			
			//Специфика: GTIN используется только при пустой номенклатуре
			Если СтруктураПоиска.Свойство("GTIN") И ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
				СтруктураПоиска.GTIN = "";
			КонецЕсли;
			
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиТовары.Количество() = 0 И ТабличнаяЧастьСерии<>Неопределено Тогда
				СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаБезСерий);
				Если СтрокиТовары.Количество() Тогда
					СтрокиТовары = ТабличнаяЧастьСерии.НайтиСтроки(СтруктураПоиска);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокиТовары.Количество() = 0 Тогда
				Для Каждого ЭлементСписка Из СтрокаТовары.ШтрихкодыУпаковок Цикл
					УдалитьСвязанныеШтрихкодыУпаковок.Вставить(ЭлементСписка.Значение, Истина);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		ИмяКолонкиШтрихкодУпаковки = СтрРазделить(Настройки.ШтрихкодУпаковки, ",", Ложь)[0];
		Если (УдалитьСвязанныеШтрихкодыУпаковок.Количество()) Тогда
			//Удалим все упаковки верхнего уровня где они есть из ТЧ
			Для Каждого СтрокаШтрихкоды Из ТабличнаяЧастьШтрихкоды Цикл
				Если УдалитьСвязанныеШтрихкодыУпаковок.Получить(СтрокаШтрихкоды[ИмяКолонкиШтрихкодУпаковки])=Истина Тогда
					УдалитьСтрокиШтрихкодов.Добавить(СтрокаШтрихкоды);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из УдалитьСтрокиШтрихкодов Цикл
				ТабличнаяЧастьШтрихкоды.Удалить(СтрокаУдалить);
			КонецЦикла;
			ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки);
		КонецЕсли;
		
	КонецЕсли;
	 
	Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
		Если Настройки.ВсеМаркируемые Или СтрокаТовары.МаркируемаяПродукция Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			
			//Специфика: GTIN используется только при пустой номенклатуре
			Если СтруктураПоиска.Свойство("GTIN") И ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
				СтруктураПоиска.GTIN = "";
			КонецЕсли;
			
			СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиКеша.Количество() = 0 И ТабличнаяЧастьСерии <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаБезСерий, СтрокаТовары);
				СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаБезСерий);
				СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаБезСерий);
			КонецЕсли;
			
			КоличествоПоКлючу = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу[Настройки.Количество];
			КонецЦикла;
			
			КоличествоВКеше = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиКеша Цикл
				КоличествоВКеше = КоличествоВКеше + СтрокаПоКлючу.Количество;
			КонецЦикла;
			
			Если СтрокиКеша.Количество() = 0 Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			ИначеЕсли КоличествоПоКлючу = КоличествоВКеше Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 1;
			Иначе
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			КонецЕсли;
		Иначе
			СтрокаТовары.СтатусПроверкиГосИС = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область Штрихкодирование

//Для связи механизма штрихкодирования и кеша строк: является входящим параметром
//   при обработке данных кода маркировки (добавлении кода маркировки или упаковки в таблицу штрихкодов упаковок),
//   для обновления кеша штрихкодов упаковок добавлением вместо пересчета.
//
//Параметры:
//   ДанныеШтрихкода - Структура, СтрокаДереваЗначений - разобранные данные штрихкода.
//   Специфика       - Произвольный - ключ описания специфики данных штрихкода.
//
//Возвращаемое значение:
//   Структура - поля кеша и служебная информация:
// 
// * Специфика - Произвольный - специфика штрихкода и кеша
// 
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров  - добавляемый штрихкод.
// * Номенклатура     - ОпределяемыйТип.Номенклатура               - номенклатура из упаковки или кода маркировки.
// * Характеристика   - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика из упаковки или кода маркировки.
// * Серия            - ОпределяемыйТип.СерияНоменклатуры          - серия из упаковки или кода маркировки.
// * Количество       - Число                                      - количество добавленных единиц.
//
// * GTIN - ОпределяемыйТип.GTIN - GTIN номенклатуры (если доступны коды маркировки остатков);
//
// * ИдентификаторПроисхожденияВЕТИС - ОпределяемыйТип.ИдентификаторПроисхожденияВЕТИС - для маркировки молочной продукции;
// * СрокГодности                    - Дата                                            - для маркировки молочной продукции;
// * СкоропортящаясяПродукцияВЕТИС   - Булево                                          - для маркировки молочной продукции;
// * ШтрихкодУпаковкиВЕТИС           - СправочникСсылка.ШтрихкодыУпаковокТоваров       - для маркировки молочной продукции;
//
Функция ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, Специфика = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Специфика", Специфика);
	
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Серия");
	Результат.Вставить("Количество");
	Результат.Вставить("ШтрихкодУпаковки");
	
	Если Специфика = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		// Для молочной продукции
		Результат.Вставить("ИдентификаторПроисхожденияВЕТИС");
		Результат.Вставить("СрокГодности");
		Результат.Вставить("СкоропортящаясяПродукцияВЕТИС");
		Результат.Вставить("ШтрихкодУпаковкиВЕТИС");
	ИначеЕсли Специфика = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		Результат.Вставить("СрокГодности");
	ИначеЕсли Специфика = "ДоступныКодыМаркировкиОстатков"
		Или Специфика = "ЗаказНаЭмиссию" Тогда
		// Коды маркировки остатков
		Результат.Вставить("GTIN");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеШтрихкода);
	
	Если Специфика = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ГоденДо") Тогда
			Результат.СрокГодности = ДанныеШтрихкода.ГоденДо;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "Скоропортящаяся") Тогда
			Результат.СкоропортящаясяПродукцияВЕТИС = ДанныеШтрихкода.Скоропортящаяся;
		КонецЕсли;
	ИначеЕсли Специфика = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ГоденДо") Тогда
			Результат.СрокГодности = ДанныеШтрихкода.ГоденДо;
		КонецЕсли;
	ИначеЕсли Специфика = "ДоступныКодыМаркировкиОстатков" Тогда
		Если ЗначениеЗаполнено(Результат.Номенклатура) Тогда
			Результат.GTIN = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для связи механизма штрихкодирования и кеша строк: обновление кеша по добавленному коду маркировки.
//
// Параметры:
//   Форма             - ФормаКлиентскогоПриложения           - источник вызова.
//   ОбновляемаяСтрока - См. ДанныеШтрихкодаДляДобавленияВКеш - результат разбора добавленного штрихкода.
//
Процедура ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока) Экспорт
	
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС;
	
	// Дополнительные ключи связи, специфика: поля поиска для незаполненной номенклатуры.
	КолонкиКеша = ДанныеШтрихкодовУпаковокГосИС.Выгрузить(Новый Массив).Колонки;
	ЕстьGTIN = КолонкиКеша.Найти("GTIN") <> Неопределено;
	ПоляПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(, ЕстьGTIN, ОбновляемаяСтрока.Специфика);
	
	ДобавитьШтрихкодУпаковки = Истина;
	ДобавитьШтрихкодУпаковкиВЕТИС = ОбновляемаяСтрока.Специфика = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	
	ЗаполнитьЗначенияСвойств(ПоляПоиска, ОбновляемаяСтрока);
	ДанныеКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(ПоляПоиска);
	Если ДанныеКеша.Количество() Тогда
		СтрокаКеша = ДанныеКеша[0];
		СтрокаКеша.Количество = СтрокаКеша.Количество + ОбновляемаяСтрока.Количество;
		Если СтрокаКеша.ШтрихкодыУпаковок.НайтиПоЗначению(ОбновляемаяСтрока.ШтрихкодУпаковки) = Неопределено Тогда
			СтрокаКеша.ШтрихкодыУпаковок.Добавить(ОбновляемаяСтрока.ШтрихкодУпаковки);
		Иначе
			ДобавитьШтрихкодУпаковки = Ложь;
		КонецЕсли;
	Иначе
		СтрокаКеша = ДанныеШтрихкодовУпаковокГосИС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКеша, ОбновляемаяСтрока);
		СтрокаКеша.ШтрихкодыУпаковок.Добавить(ОбновляемаяСтрока.ШтрихкодУпаковки);
	КонецЕсли;
	
	Если ДобавитьШтрихкодУпаковки Тогда
		НоваяСтрока = Форма.Объект.ШтрихкодыУпаковок.Добавить();
		Если ОбновляемаяСтрока.Свойство("ШтрихкодУпаковкиВЕТИС")
				И ОбновляемаяСтрока.ШтрихкодУпаковкиВЕТИС = ОбновляемаяСтрока.ШтрихкодУпаковки Тогда
			ДобавитьШтрихкодУпаковкиВЕТИС = Ложь;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбновляемаяСтрока);
	КонецЕсли;
	
	// Добавление штрихкодов упаковок, специфика маркировки молочной продукции
	Если ДобавитьШтрихкодУпаковкиВЕТИС 
		И ОбновляемаяСтрока.Свойство("ШтрихкодУпаковкиВЕТИС")
		И ЗначениеЗаполнено(ОбновляемаяСтрока.ШтрихкодУпаковкиВЕТИС)
		И СтрокаКеша.ШтрихкодыУпаковок.НайтиПоЗначению(ОбновляемаяСтрока.ШтрихкодУпаковкиВЕТИС) = Неопределено Тогда
		
		СтрокаКеша.ШтрихкодыУпаковок.Добавить(ОбновляемаяСтрока.ШтрихкодУпаковкиВЕТИС);
		СтрокаУточненияШтрихкодУпаковки = Форма.Объект.ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУточненияШтрихкодУпаковки, ОбновляемаяСтрока);
		СтрокаУточненияШтрихкодУпаковки.ШтрихкодУпаковки = ОбновляемаяСтрока.ШтрихкодУпаковкиВЕТИС;
	КонецЕсли;
	
КонецПроцедуры

//Для связи механизма штрихкодирования и кеша строк: получение текущих данных кеша по добавляемому коду маркировки
//
//Параметры:
//   Форма             - ФормаКлиентскогоПриложения           - источник вызова.
//   ОбновляемаяСтрока - См. ДанныеШтрихкодаДляДобавленияВКеш - результат разбора добавленного штрихкода.
//
//Возвращаемое значение:
//   Число - количество единиц по кодам маркировки по полям поиска текущей маркируемой продукции
//
Функция КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока) Экспорт
	
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС;
	ПоляПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(,ОбновляемаяСтрока.Свойство("GTIN"),ОбновляемаяСтрока.Специфика);
	ЗаполнитьЗначенияСвойств(ПоляПоиска, ОбновляемаяСтрока);
	ДанныеКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(ПоляПоиска);
	Если ДанныеКеша.Количество() Тогда
		Возврат ДанныеКеша[0].Количество;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область НастройкиВстраиванияФормПроверкиИПодбора

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции форм проверки и подбора
//   в прикладные документы конфигурации - потребителя библиотеки ГосИС.
//
// ВозвращаемоеЗначение:
//  ПараметрыИнтеграции - Структура - значения, используемые для интеграции формы проверки и подбора:
//   * ИспользоватьБезМаркируемойПродукции        - Булево - признак показа гиперссылки в форме документа без маркируемой продукции
//   * БлокироватьТабличнуюЧастьТоварыПриПроверке - Булево - признак блокировки табличной части "Товары" для изменений после начала проверки в форме
//   * ИнформацияДляПользователяОБлокировке       - Строка - информационная надпись на форме над табличной частью "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Истина
//   * ИнформацияДляПользователяОПроверке         - Строка - информационная надпись на форме над табличной частью "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь
//   * ИспользоватьСтатусПроверкаЗавершена        - Булево - признак допустимости у документа состояния завершения проверки. При значении Ложь проверку можно выполнять многократно.
//   * ИмяРеквизитаФормыОбъект                    - Строка - имя реквизита формы, содержащего объект документа
//   * ИмяТабличнойЧастиТовары                    - Строка - имя табличной части документа, содержащей номенклатуру
//   * ИмяТабличнойЧастиСерии                     - Строка - имя табличной части документа, содержащей данные по сериям
//   * ИмяРодительскойГруппыФормы                 - Строка - имя элемента-группы формы документа, в которую необходимо добавить гиперссылку для открытия формы проверки
//   * ИмяЭлементаФормыТовары                     - Строка - имя элемента формы документа, в котором выводится табличная часть с номенклатурой
//   * ИмяПоследующегоЭлементаФормы               - Строка - имя элемента формы, перед которым необходимо добавить гиперссылку для открытия формы проверки
//   * БлокируемыеЭлементы                        - Массив - имена элементов формы документа, которые необходимо заблокировать после начала работы с формой проверки
//   * ИспользоватьСтатусПроверкиПодбораДокумента - Булево - признак наличия у формы реквизита "СтатусПроверкиГосИС"
//   * ИспользоватьКолонкуСтатусаПроверкиПодбора  - Булево - признак использования специальной колонки в таблице товаров для отображения статуса проверки товара
//   * ИмяСледующейКолонки                        - Строка - имя колонки, перед которой необходимо вставить колонку для отображения статуса проверки товара
//   * ИмяТабличнойЧастиШтрихкодыУпаковок         - Строка - имя табличной части документа, содержащей штрихкоды упаковок номенклатуры
//   * ИмяКолонкиШтрихкодУпаковки                 - Строка - имя колонки табличной части штрихкодов содержащей штрихкоды упаковок номенклатуры
//   * ХарактеристикиИспользуются                 - Булево - общий признак использования характеристик
//   * СерииИспользуются                          - Булево - общий признак использования серий
//   * РазмещатьЭлементыИнтерфейса                - Булево - необходимость размещения гиперссылок проверки и подбора;
//   * ИмяРеквизитаФормы                          - Строка - имя реквизита формы для вывода гиперссылки проверки/подбора
//   * ЕстьПравоИзменения                         - Булево - право пользователя на редактирование текущего документа;
//   * ЭтоДокументПриобретения                    - Булево - признак встраивания в документ приобретения;
//   * ЕстьЭлектронныйДокумент                    - Булево - признак наличия ЭДО по объекту
//   * Заголовки                                  - Массив - варианты представления заголовков кнопок для пользователя.
//
Функция ПараметрыИнтеграцииФормПроверкиИПодбора() Экспорт
	
	ПараметрыИнтеграции = Новый Структура();
	
	#Область СвойстваФормыИОбъектаВстраивания
	
	ПараметрыИнтеграции.Вставить("ЭтоДокументПриобретения",            Ложь);
	ПараметрыИнтеграции.Вставить("ЕстьЭлектронныйДокумент",            Ложь);
	
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыОбъект",            "Объект");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиТовары",            "Товары");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиСерии",             "Серии");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок", "ШтрихкодыУпаковок");
	ПараметрыИнтеграции.Вставить("ИмяКолонкиШтрихкодУпаковки",         "ШтрихкодУпаковки");
	
	ПараметрыИнтеграции.Вставить("БлокируемыеЭлементы", Новый Массив);
	
	ПараметрыИнтеграции.Вставить("РазмещатьЭлементыИнтерфейса", Ложь);
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормы",           "ТекстПроверкаПодбор");
	
	ПараметрыИнтеграции.Вставить("ИмяРодительскойГруппыФормы",   "СтраницаТовары");
	ПараметрыИнтеграции.Вставить("ИмяПоследующегоЭлементаФормы", "Товары");
	ПараметрыИнтеграции.Вставить("ИмяЭлементаФормыТовары",       "Товары");
	ПараметрыИнтеграции.Вставить("ИмяСледующейКолонки",          "ТоварыНоменклатура");
	
	#КонецОбласти
	
	#Область НастройкиИнтеграцииФормыПроверки
	
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкаЗавершена",        Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьБезМаркируемойПродукции",        Ложь);
	ПараметрыИнтеграции.Вставить("БлокироватьТабличнуюЧастьТоварыПриПроверке", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкиПодбораДокумента", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьКолонкуСтатусаПроверкиПодбора",  Ложь);
	
	#КонецОбласти
	
	#Область ОбщиеНастройкиСистемы
	
	ПараметрыИнтеграции.Вставить("ХарактеристикиИспользуются", ИнтеграцияИС.ХарактеристикиИспользуются());
	ПараметрыИнтеграции.Вставить("СерииИспользуются",          ИнтеграцияИС.СерииИспользуются());
	ПараметрыИнтеграции.Вставить("ЕстьПравоИзменение",      Ложь);
	
	#КонецОбласти
	
	#Область Тексты
	
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОБлокировке",
		НСтр("ru = 'До окончания работы в форме проверки и подбора внесение изменений в данной форме недоступно.'"));
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОПроверке",
		НСтр("ru = 'Выполняется проверка маркируемой продукции. При завершении проверки табличная часть может быть изменена.'"));
	
	ПараметрыИнтеграции.Вставить("Заголовки", Новый Массив);
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Проверить поступившую маркируемую продукцию'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Подобрать и проверить поступившую маркируемую продукцию'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Продолжить проверку поступившей маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Продолжить подбор и проверку маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Результаты проверки маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Результаты подбора маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Промежуточные результаты проверки маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Промежуточные результаты подбора маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Возобновить проверку маркируемой продукции'"));
	
	#КонецОбласти
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

Функция ЗаголовокКомандыПроверкиИПодбора(ПараметрыИнтеграции, СтатусПроверкиИПодбора) Экспорт
	
	Результат = "";
	
	ЕстьПравоИзменение      = ПараметрыИнтеграции.ЕстьПравоИзменение;
	ЭтоДокументПриобретения = ПараметрыИнтеграции.ЭтоДокументПриобретения;
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Результат = ПараметрыИнтеграции.Заголовки[2+?(ЕстьПравоИзменение,0,4)+?(ЭтоДокументПриобретения,0,1)];
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено
		И ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		Результат = ПараметрыИнтеграции.Заголовки[4+?(ЭтоДокументПриобретения,0,1)];
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось
		ИЛИ СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
	
		Результат = ПараметрыИнтеграции.Заголовки[?(ЭтоДокументПриобретения,0,1)];
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КартинкаТипыУпаковкиПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияАлкогольнойПродукцииЕГАИС;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияТабакаИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияАльтернативногоТабакаИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияОбувиИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияОдеждыТекстиляИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияМолочнойПродукцииИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Шины Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияШинИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияФотоаппаратовИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Духи Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияДуховИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияКреслоКолясокИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияВелосипедовИСМП;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		КартинкаТипУпаковки = БиблиотекаКартинок.ПроверкаНаличияУпакованнойВодыИСМП;
	ИначеЕсли ЗначениеЗаполнено(ВидПродукции) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Для вида продукции: %1, не задана картинка с типами упаковок.'"), ВидПродукции);
	Иначе
		КартинкаТипУпаковки = Новый Картинка;
	КонецЕсли;
	
	Возврат КартинкаТипУпаковки;
	
КонецФункции

#КонецОбласти

#Область РасчетХешСумм

Процедура РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, ВключаяПодчиненные) Экспорт
	
	ДанныеДляРасчетаХешСуммы = Новый СписокЗначений();
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		ИдентификаторВДереве    = СтрокаДерева.ПолучитьИдентификатор();
	Иначе
		ПодчиненныеСтрокиДерева = СтрокаДерева.Строки;
		ИдентификаторВДереве    = СтрокаДерева.ИдентификаторСтроки;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтрокиДерева Цикл
		Если ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			Если ВключаяПодчиненные Тогда
				РассчитатьХешСуммыУпаковки(ПодчиненнаяСтрока, ТаблицаХешСумм, ВключаяПодчиненные);
			КонецЕсли;
			
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.ХешСумма);
		Иначе
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		СтрокаДерева.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
		
		СтрокаТаблицыХешСуммы = ТаблицаХешСумм.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыХешСуммы, СтрокаДерева);
		СтрокаТаблицыХешСуммы.ИдентификаторВДереве = ИдентификаторВДереве;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаХешСумм() Экспорт

	ТаблицаХешСумм = Новый ТаблицаЗначений;
	ТаблицаХешСумм.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаХешСумм.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаХешСумм.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаХешСумм.Колонки.Добавить("ХэшСуммаНормализации", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат ТаблицаХешСумм;

КонецФункции

#КонецОбласти

#Область Перемаркировка

Функция ТаблицаПеремаркировки(ТаблицаХешСумм) Экспорт
	
	ТаблицаПеремаркировки = ПустаяТаблицаПеремаркировки();
	Если ТаблицаХешСумм.Количество() = 0 Тогда
		Возврат ТаблицаПеремаркировки;
	КонецЕсли;
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(ТаблицаХешСумм);
	
	ШтрихкодИДанныеУпаковки = Новый Соответствие;
	Для Каждого ДанныеУпаковки Из ШтрихкодыУпаковок Цикл
		ШтрихкодИДанныеУпаковки[ДанныеУпаковки.Штрихкод] = ДанныеУпаковки;
	КонецЦикла;
	
	Для Каждого СтрокаХешСуммы Из ТаблицаХешСумм Цикл
		
		СтрокаПеремаркировки = ТаблицаПеремаркировки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПеремаркировки, СтрокаХешСуммы);
		
		ДанныеУпаковки = ШтрихкодИДанныеУпаковки[СтрокаХешСуммы.Штрихкод];
		
		Если ДанныеУпаковки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПеремаркировки.ПустаяУпаковка          = ПустаяСтрока(ДанныеУпаковки.ХешСумма);
		СтрокаПеремаркировки.ТребуетсяПеремаркировка = (СтрокаХешСуммы.ХешСумма <> ДанныеУпаковки.ХешСумма);
		
	КонецЦикла;
	
	Возврат ТаблицаПеремаркировки;
	
КонецФункции

Функция ПустаяТаблицаПеремаркировки() Экспорт
	
	ТаблицаПеремаркировки = Новый ТаблицаЗначений;
	ТаблицаПеремаркировки.Колонки.Добавить("ИдентификаторВДереве",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаПеремаркировки.Колонки.Добавить("ТребуетсяПеремаркировка", Новый ОписаниеТипов("Булево"));
	ТаблицаПеремаркировки.Колонки.Добавить("ПустаяУпаковка",          Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПеремаркировки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧасть, ВсеТоварыМаркируемые)
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ВсеТоварыМаркируемые Или СтрокаТабличнойЧасти.МаркируемаяПродукция Тогда
			СтрокаТабличнойЧасти.СтатусПроверкиГосИС = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьКешШтрихкодамиБезИдентификаторов(ШтрихкодУпаковкиБезИдентификатора, ВложенныеШтрихкоды, ДанныеШтрихкодовУпаковокГосИС, ШтрихкодыУпаковокИсходнаяТаблица)
	
	Для Каждого СтрокаТаблицы Из ВложенныеШтрихкоды Цикл
		Расшифровка = ШтрихкодыУпаковокИсходнаяТаблица.Найти(СтрокаТаблицы.ШтрихкодУпаковки, "ШтрихкодУпаковки");
		Если Расшифровка = Неопределено Тогда
			ДополнитьКешШтрихкодамиБезИдентификаторов(ШтрихкодУпаковкиБезИдентификатора, СтрокаТаблицы.Строки, ДанныеШтрихкодовУпаковокГосИС, ШтрихкодыУпаковокИсходнаяТаблица);
		Иначе
			Для Каждого СтрокаКеша Из ДанныеШтрихкодовУпаковокГосИС Цикл
				Если СтрокаКеша.ШтрихкодыУпаковок.НайтиПоЗначению(СтрокаТаблицы.ШтрихкодУпаковки)<>Неопределено Тогда
					СтрокаКеша.ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковкиБезИдентификатора);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяКнопкиИКоманды(ВидПродукции = Неопределено, ВозобновлениеПроверки = Ложь)
	
	Индекс = "";
	Если ВидПродукции<>Неопределено Тогда
		Индекс = Перечисления.ВидыПродукцииИС.Индекс(ВидПродукции);
	КонецЕсли;
	
	Если ВозобновлениеПроверки Тогда
		Возврат "ВозобновитьПроверкуПродукцииГосИС" + Индекс;
	Иначе
		Возврат "ПодобратьИПроверитьПродукциюГосИС" + Индекс;
	КонецЕсли;
	
КонецФункции

#Область РаботаСДобавленнымиРеквизитами

	Процедура ОбновитьВидПодменю(Форма)
		
		ГруппаПроверкаИПодборПродукцииГосИС = Форма.Элементы[ИмяКнопкиИКоманды()];
		
		КоличествоВидимыхКнопок = 0;
		Для Каждого ЭлементФормы Из ГруппаПроверкаИПодборПродукцииГосИС.ПодчиненныеЭлементы Цикл
			Если ЭлементФормы.Видимость И ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
				КоличествоВидимыхКнопок = КоличествоВидимыхКнопок + 1;
			КонецЕсли;
		КонецЦикла;
		
		ГруппаВозобновлениеПроверкиГосИС = Форма.Элементы.Найти(ИмяКнопкиИКоманды(,Истина));
		Если ГруппаВозобновлениеПроверкиГосИС<>Неопределено Тогда
			Для Каждого ЭлементФормы Из ГруппаВозобновлениеПроверкиГосИС.ПодчиненныеЭлементы Цикл
				Если ЭлементФормы.Видимость И ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
					КоличествоВидимыхКнопок = КоличествоВидимыхКнопок + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Форма.Элементы["КоманднаяПанельПроверкаИПодборПродукцииГосИС"].Видимость = КоличествоВидимыхКнопок;
		
		Если КоличествоВидимыхКнопок = 1 Тогда
			ГруппаПроверкаИПодборПродукцииГосИС.Вид = ВидГруппыФормы.ГруппаКнопок;
		Иначе
			ГруппаПроверкаИПодборПродукцииГосИС.Вид = ВидГруппыФормы.Подменю;
			ГруппаПроверкаИПодборПродукцииГосИС.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		КонецЕсли;
		
		Если Форма.Элементы.Найти(ИмяКнопкиИКоманды(, Истина))<>Неопределено Тогда
			Форма.Элементы[ИмяКнопкиИКоманды(, Истина)].Вид = ГруппаПроверкаИПодборПродукцииГосИС.Вид;
		КонецЕсли;
		
	КонецПроцедуры

Процедура ОбновитьОбщийСтатусПодменю(Форма)
	
	ОбщийСтатус = Неопределено;
	ОбщееОписание = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Форма.СтатусыПроверкиПодбораГосИС Цикл
		
		Если Не СтрокаТаблицы.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Описание) Тогда
			ОбщееОписание.Добавить(СтрокаТаблицы.Описание);
		КонецЕсли;
		
		Индекс = Перечисления.СтатусыПроверкиИПодбораИС.Индекс(СтрокаТаблицы.Статус);
		Если ОбщийСтатус = Неопределено Тогда
			ОбщийСтатус = Индекс;
		Иначе
			ОбщийСтатус = Мин(ОбщийСтатус, Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщееОписание.Количество() Тогда
		Форма.Элементы["СводнаяИнформацияОПроверкеИПодбореПродукцииГосИС"].Видимость = Истина;
		Форма.Элементы["НадписьПроверкаИПодборПродукцииГосИС"].Заголовок = СтрСоединить(ОбщееОписание, Символы.ПС);
	Иначе
		Форма.Элементы["СводнаяИнформацияОПроверкеИПодбореПродукцииГосИС"].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

