
#Область СлужебныйПрограммныйИнтерфейс

Процедура СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, ПараметрыПостроения) Экспорт
	
	ИмяИнтервальногоРегистра = ИнтервальныеРегистрыБЗК.ИмяИнтервальногоРегистра(ИмяРегистра);
	ОписаниеИнтервальногоРегистра = РегистрыСведений[ИмяРегистра].ОписаниеИнтервальногоРегистра();
	ИзмерениеЗаписи = ОписаниеИнтервальногоРегистра.ОсновноеИзмерение;
	ИзмеренияОтбора = ОписаниеИнтервальногоРегистра.ИзмеренияРасчета; 
	СоставнойКлючРасчета = ИзмерениеЗаписи <> ИзмеренияОтбора;
	ПараметрыНаследованияРесурсов = ОписаниеИнтервальногоРегистра.ПараметрыНаследованияРесурсов;
	
	РежимЗагрузки = ПараметрыПостроения.РежимЗагрузки;
	ПолноеПереформирование = ПараметрыПостроения.ПолноеПереформирование;
	
	Если ПараметрыПостроения.ФильтрВВидеВТ Тогда
		МенеджерВременныхТаблиц = ПараметрыПостроения.ТаблицаФильтра;
	Иначе
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ПараметрыПостроения.ТаблицаФильтра, "ВТОтборДляПереформирования");
		Если Не ПолноеПереформирование Тогда
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ПараметрыПостроения.ТаблицаНабора, "ВТНовыйНаборЗаписей");
		КонецЕсли;
	КонецЕсли;
	
	МаксимальнаяДата = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
	ТекстОписанияПолей = "";
	ПоляРегистра = 
		"ДатаОкончания,
		|ДатаНачала,
		|ПериодЗаписи,
		|РегистраторЗаписи,
		|РегистраторСобытия,
		|ПериодЗаписи,
		|ПериодПредыдущейЗаписи,
		|ПустойИнтервал,
		|ДействуетДо";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ЗаполнитьПоляРегистраПоОписанию(ОписаниеРегистра, ТекстОписанияПолей, ПоляРегистра);
	
	Выборка 			= Интервалы(ИмяРегистра, МенеджерВременныхТаблиц, ИмяИнтервальногоРегистра, ИзмеренияОтбора, ТекстОписанияПолей, ПолноеПереформирование);
	СтруктураОжидания 	= Новый Структура(ПоляРегистра);
	ТекущийИнтервал		= Новый Структура(ПоляРегистра);
	ЗначенияИзмерений 	= Новый Структура(ИзмеренияОтбора);
	НаборЗаписей 		= РегистрыСведений[ИмяИнтервальногоРегистра].СоздатьНаборЗаписей();
	ИзмеренияЗаполнены	= Ложь;
	ЕстьТекущийИнтервал	= Истина;
	НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;
	
	Если СоставнойКлючРасчета Тогда
		ДанныеРегистра = ТекущиеДанныеРегистра(ИмяИнтервальногоРегистра, МенеджерВременныхТаблиц, ИзмерениеЗаписи, ТекстОписанияПолей);
	КонецЕсли;
	
	Пока Выборка.СледующийПоЗначениюПоля(ИзмерениеЗаписи) Цикл
		РассчитанныеПериоды = Новый Соответствие;
		ИзмеренияЗаполнены = Ложь;
		Если ПолноеПереформирование Тогда
			РассчитанныеПериоды.Вставить(Дата(1, 1, 1), НаборЗаписей);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если ИнтервальныеРегистрыБЗК.ЗначенияИзмеренийОтличны(ЗначенияИзмерений, Выборка) Тогда
				
				Если ИзмеренияЗаполнены Тогда
					ЗакрытьИнтервал(ТекущийИнтервал, НаборЗаписей, МаксимальнаяДата, ЕстьТекущийИнтервал);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, Выборка);				
				ИзмеренияЗаполнены 				= Истина;
				ЕстьОжидание					= Ложь;
				ЕстьТекущийИнтервал 			= Ложь;
				ТекущийИнтервал.ПустойИнтервал	= Ложь;
				ТекущийИнтервал.ПериодПредыдущейЗаписи 	= Дата(1, 1, 1);
				ТекущийИнтервал.ДатаНачала 		= Дата(1, 1, 1);
				ТекущийГод						= Дата(1, 1, 1);
				ИзмеренияПоиска = ОбщегоНазначения.СкопироватьРекурсивно(ЗначенияИзмерений);
			КонецЕсли;
			
			Если СоставнойКлючРасчета Тогда
				
				Если Не ПолноеПереформирование Тогда
					ИзмеренияПоиска.Вставить("Год", НачалоГода(Выборка.ДатаСобытия)); 
				КонецЕсли;
				
				НайденныеСтроки = ДанныеРегистра.НайтиСтроки(ИзмеренияПоиска);
				Для каждого СтрокаДанных Из НайденныеСтроки Цикл
					ДанныеРегистра.Удалить(СтрокаДанных);
				КонецЦикла; 
				
			КонецЕсли;

			Если Выборка.ЭтоНачалоИнтервала Тогда
				
				Если ЕстьТекущийИнтервал Тогда
					
					Если ТекущийИнтервал.ПериодЗаписи > Выборка.ПериодЗаписи
						И ТекущийИнтервал.ПустойИнтервал <> Истина
						Или Выборка.ПустойИнтервал Тогда
						
						Если Не ПолноеПереформирование
							И НачалоГода(Выборка.ДатаСобытия) <> ТекущийГод Тогда
				
							НаборЗаписейПоГоду(ИмяИнтервальногоРегистра, РассчитанныеПериоды, НачалоГода(Выборка.ДатаСобытия));
						КонецЕсли; 
						
						Продолжить;
					КонецЕсли;
					
					Если ТекущийИнтервал.ДатаНачала < Выборка.ДатаСобытия Тогда
						
						ДатаОкончания = Выборка.ДатаСобытия - 1;
						ЗакрытьИнтервал(ТекущийИнтервал, НаборЗаписей, ДатаОкончания, ЕстьТекущийИнтервал);
						
					КонецЕсли;
					ПоместитьВОжидание(СтруктураОжидания, ТекущийИнтервал, Выборка, ЕстьОжидание);
					
				КонецЕсли;
				
				ОткрытьИнтервал(ТекущийИнтервал, Выборка, Выборка.ДатаСобытия, ЕстьТекущийИнтервал);
				ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
				
			Иначе
				
				Если ЕстьТекущийИнтервал
					И ТекущийИнтервал.ДатаНачала = Выборка.ПериодЗаписи Тогда
				
					ЗакрытьИнтервал(ТекущийИнтервал, НаборЗаписей, Выборка.ДатаСобытия, ЕстьТекущийИнтервал);
					Если ЕстьОжидание 
						И Выборка.ДатаСобытия + 1 < МаксимальнаяДата Тогда

						ТекущийИнтервал.ПериодПредыдущейЗаписи = ТекущийИнтервал.ДатаНачала;
						СтруктураОжидания.РегистраторСобытия = Выборка.РегистраторЗаписи;
						ОткрытьИнтервал(ТекущийИнтервал, СтруктураОжидания, Выборка.ДатаСобытия + 1, ЕстьТекущийИнтервал);
						ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия + 1, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
						ЕстьОжидание = Ложь;
						
					ИначеЕсли ПараметрыНаследованияРесурсов <> Неопределено
						И Выборка.ДатаСобытия + 1 < МаксимальнаяДата Тогда
						
						ОткрытьПустойИнтервал(ТекущийИнтервал, Выборка, Выборка.ДатаСобытия + 1, ЕстьТекущийИнтервал, ПараметрыНаследованияРесурсов);
						ТекущийИнтервал.РегистраторСобытия = Выборка.РегистраторЗаписи;
						ПроверитьИзменениеТекущегоГода(ИмяИнтервальногоРегистра, Выборка.ДатаСобытия + 1, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗакрытьИнтервал(ТекущийИнтервал, НаборЗаписей, МаксимальнаяДата, ЕстьТекущийИнтервал);
		СтруктураПоиска = Новый Структура(ИзмерениеЗаписи, Выборка[ИзмерениеЗаписи]);
		
		Для каждого КлючИЗначение Из РассчитанныеПериоды Цикл
			
			НаборЗаписей = КлючИЗначение.Значение;
			НаборЗаписей.Отбор[ИзмерениеЗаписи].Установить(Выборка[ИзмерениеЗаписи]);
			Если Не ПолноеПереформирование Тогда
				
				НаборЗаписей.Отбор.Год.Установить(КлючИЗначение.Ключ);
				СтруктураПоиска.Вставить("Год", КлючИЗначение.Ключ); 
				
			КонецЕсли;

			Если СоставнойКлючРасчета Тогда
				КлючиИзмерений = НаборЗаписей.Выгрузить();
				КлючиИзмерений.Свернуть(ИзмеренияОтбора);
				ДанныеИзмерений = ДанныеРегистра.НайтиСтроки(СтруктураПоиска);
				СтруктураПоискаКлючей = Новый Структура(ИзмеренияОтбора);
				Для каждого СтрокаДанных Из ДанныеИзмерений Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоискаКлючей, СтрокаДанных);
					СтрокиКлючей = КлючиИзмерений.НайтиСтроки(СтруктураПоискаКлючей);
					Если СтрокиКлючей.Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРесурсыИнтервальногоРегистра(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	
	ИмяИнтервальногоРегистра = ИмяРегистра + "Интервальный";
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	ОписаниеИнтервальногоРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПервичныйРегистр.Измерения_ КАК Измерения_
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ПервичныйРегистр_ КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтервальныйРегистр_ КАК ИнтервальныйРегистр
		|		ПО ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи
		|			И (ПервичныйРегистр.РесурсыСоединение_ <> ИнтервальныйРегистр.Ресурсы_)
		|
		|;
		|//////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ИнтервальныйРегистр.Измерения_ КАК Измерения_,
		|	ИнтервальныйРегистр.Ресурсы_ КАК ИнтервальныеРесурсы_,
		|	ИнтервальныйРегистр.Реквизиты_ КАК Реквизиты_,
		|	ПервичныйРегистр.Ресурсы_ КАК ПервичныеРесурсы_
		|ИЗ
		|	ПервичныйРегистр_ КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО ВТСотрудники.ИзмеренияСоединение_ = ПервичныйРегистр.ИзмеренияСоединение_
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнтервальныйРегистр_ КАК ИнтервальныйРегистр
		|		ПО ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи
		|УПОРЯДОЧИТЬ ПО
		|	ИнтервальныйРегистр.ИзмеренияПорядок_";
	
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединение = Символы.ПС + "			И ";
	МассивИзмеренияПервичногоРегистра = Новый Массив;
	МассивПолейИнтервальногоРегистра = Новый Массив;
	МассивПолейПервичногоРегистра = Новый Массив;
    МассивИзмеренияСоединение = Новый Массив;
	МассивРесурсыСоединение = Новый Массив;
	МассивИзмеренияПорядок = Новый Массив;
	ЗначенияИзмерений = Новый Структура;
	
	Для каждого Измерение Из ОписаниеИнтервальногоРегистра.Измерения Цикл
	
		МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
		МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
		МассивПолейИнтервальногоРегистра.Добавить(Измерение);
		МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
		МассивПолейИнтервальногоРегистра.Добавить(Измерение);
		
		Если ОписаниеРегистра.Измерения.Найти(Измерение) <> Неопределено Тогда
			
			ЗначенияИзмерений.Вставить(Измерение);
			
			МассивИзмеренияПервичногоРегистра.Добавить(Разделитель);
			МассивИзмеренияПервичногоРегистра.Добавить("ПервичныйРегистр.");
			МассивИзмеренияПервичногоРегистра.Добавить(Измерение);
			МассивИзмеренияПервичногоРегистра.Добавить(" КАК ");
			МассивИзмеренияПервичногоРегистра.Добавить(Измерение);
			
			МассивИзмеренияСоединение.Добавить(РазделительСоединение);
			МассивИзмеренияСоединение.Добавить("ПервичныйРегистр.");
			МассивИзмеренияСоединение.Добавить(Измерение);
			МассивИзмеренияСоединение.Добавить(" = ИнтервальныйРегистр.");
			МассивИзмеренияСоединение.Добавить(Измерение);
			
			МассивИзмеренияПорядок.Добавить(Разделитель);
			МассивИзмеренияПорядок.Добавить("ИнтервальныйРегистр.");
			МассивИзмеренияПорядок.Добавить(Измерение);
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	РазделительСоединение = Символы.ПС + "				ИЛИ ";
	Для каждого Ресурс Из ОписаниеИнтервальногоРегистра.Ресурсы Цикл
		
		Если ОписаниеРегистра.Ресурсы.Найти(Ресурс) <> Неопределено Тогда
			
			МассивПолейПервичногоРегистра.Добавить(Разделитель);
			МассивПолейПервичногоРегистра.Добавить("ПервичныйРегистр.");
			МассивПолейПервичногоРегистра.Добавить(Ресурс);
			МассивПолейПервичногоРегистра.Добавить(" КАК ");
			МассивПолейПервичногоРегистра.Добавить(Ресурс);
			
			МассивРесурсыСоединение.Добавить(РазделительСоединение);
			МассивРесурсыСоединение.Добавить("ПервичныйРегистр.");
			МассивРесурсыСоединение.Добавить(Ресурс);
			МассивРесурсыСоединение.Добавить(" <> ИнтервальныйРегистр.");
			МассивРесурсыСоединение.Добавить(Ресурс);
			
		Иначе
			
			МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
			МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
			МассивПолейИнтервальногоРегистра.Добавить(Ресурс);
			МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
			МассивПолейИнтервальногоРегистра.Добавить(Ресурс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Реквизит Из ОписаниеИнтервальногоРегистра.Реквизиты Цикл
	
		МассивПолейИнтервальногоРегистра.Добавить(Разделитель);
		МассивПолейИнтервальногоРегистра.Добавить("ИнтервальныйРегистр.");
		МассивПолейИнтервальногоРегистра.Добавить(Реквизит);
		МассивПолейИнтервальногоРегистра.Добавить(" КАК ");
		МассивПолейИнтервальногоРегистра.Добавить(Реквизит);
		
	КонецЦикла;
	
	МассивПолейИнтервальногоРегистра.Удалить(0);
	МассивИзмеренияСоединение.Удалить(0);
	МассивПолейПервичногоРегистра.Удалить(0);
	МассивРесурсыСоединение.Удалить(0);
	МассивИзмеренияПорядок.Удалить(0);
	МассивИзмеренияПервичногоРегистра.Удалить(0);
	
	ТекстИзмеренияПервичногоРегистра = СтрСоединить(МассивИзмеренияПервичногоРегистра);
	ТекстПолейИнтервальногоРегистра = СтрСоединить(МассивПолейИнтервальногоРегистра);
	ТекстПолейПервичногоРегистра = СтрСоединить(МассивПолейПервичногоРегистра);
	ТекстИзмеренияСоединение = СтрСоединить(МассивИзмеренияСоединение);
	ТекстРесурсыСоединение = СтрСоединить(МассивРесурсыСоединение);
	ТекстСоединенияВТСотрудники = СтрЗаменить(ТекстИзмеренияСоединение, "ИнтервальныйРегистр.", "ВТСотрудники.");
	ТекстИзмеренияПорядок = СтрСоединить(МассивИзмеренияПорядок);
	
	ТекстЗаменыИзмеренияПервичногоРегистра = 
		"ПервичныйРегистр.Измерения_ КАК Измерения_";
		
	ТекстЗаменыПолейИнтервальногоРегистра = 
		"ИнтервальныйРегистр.Измерения_ КАК Измерения_,
		|	ИнтервальныйРегистр.Ресурсы_ КАК ИнтервальныеРесурсы_,
		|	ИнтервальныйРегистр.Реквизиты_ КАК Реквизиты_";
		
	ТекстЗаменыПолейПервичногоРегистра = 
		"ПервичныйРегистр.Ресурсы_ КАК ПервичныеРесурсы_";
		
	ТекстЗаменыСоединенияВТСотрудники = 
		"ВТСотрудники.ИзмеренияСоединение_ = ПервичныйРегистр.ИзмеренияСоединение_";
		
	ТекстЗаменыИзмеренияСоединение = 
		"ПервичныйРегистр.ИзмеренияСоединение_ = ИнтервальныйРегистр.ИзмеренияСоединение_";
		
	ТекстЗаменыРесурсыСоединение = 
		"ПервичныйРегистр.РесурсыСоединение_ <> ИнтервальныйРегистр.Ресурсы_";
		
	ТекстЗаменыИзмеренияПорядок = 
		"ИнтервальныйРегистр.ИзмеренияПорядок_";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПервичныйРегистр_", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИнтервальныйРегистр_", "РегистрСведений." + ИмяИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияПервичногоРегистра, ТекстИзмеренияПервичногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыПолейИнтервальногоРегистра, ТекстПолейИнтервальногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыСоединенияВТСотрудники, ТекстСоединенияВТСотрудники);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыПолейПервичногоРегистра, ТекстПолейПервичногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияСоединение, ТекстИзмеренияСоединение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыРесурсыСоединение, ТекстРесурсыСоединение);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаменыИзмеренияПорядок, ТекстИзмеренияПорядок);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений[ИмяИнтервальногоРегистра].СоздатьНаборЗаписей();
	ИзмеренияЗаполнены = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ИзмеренияЗаполнены 
			И ИнтервальныеРегистрыБЗК.ЗначенияИзмеренийОтличны(ЗначенияИзмерений, Выборка) Тогда
		
			ИнтервальныеРегистрыБЗК.УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		
		КонецЕсли; 
		
		ИзмеренияЗаполнены = Истина;
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, Выборка);
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда 
		
		ИнтервальныеРегистрыБЗК.УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗапросВТСрезПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения = Неопределено, ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли;	
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "СрезПоследних" + ИмяРегистра;
	КонецЕсли;
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ПараметрыНаследованияРесурсов = РегистрыСведений[ИмяРегистра].ПараметрыНаследованияРесурсов();
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапросаВТРегистрСведений = 
	"ВЫБРАТЬ
	|	РегистрСведений.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|		ИНАЧЕ РегистрСведений.ДействуетДо
	|	КОНЕЦ КАК ДействуетДо,
	|	&ШаблонИзмерения КАК Измерения
	|ПОМЕСТИТЬ ВТРегистрСведений
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период <= &ФильтрПериодПриведенный_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямФильтра)";
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ШаблонЗапросаВТРегистрСведений = СтрЗаменить(ШаблонЗапросаВТРегистрСведений, "РегистрСведений.ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1)");		
	КонецЕсли;
	
	ОписаниеЗапросаВТРегистрСведений = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаВТРегистрСведений);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТРегистрСведений);
	ОписаниеЗапросаВТРегистрСведений.ВыбиратьРазрешенные = ТолькоРазрешенные;
	
	ОператорЗапросаВТРегистрСведений = ОписаниеЗапросаВТРегистрСведений.Операторы[0];
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТРегистрСведений, "РегистрСведений", "РегистрСведений." + ИмяРегистра);
	
	ОписаниеИспользованияФильтраДанныеРегистра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраДанныеРегистра, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапросаВТРегистрСведений, ПостфиксИменПараметров, ПараметрыПостроения.ВсеЗаписи);
	
	ШаблонЗапросаВТПересеченияРегистров = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведений.Период КАК Период,
	|	ВЫБОР
	|		КОГДА РегистрСведений.Период < РегистрСведенийПересечения.Период
	|				И РегистрСведений.ДействуетДо > РегистрСведенийПересечения.Период
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|		ИНАЧЕ РегистрСведений.ДействуетДо
	|	КОНЕЦ КАК ДействуетДо,
	|	&ШаблонИзмерения КАК Измерения
	|ПОМЕСТИТЬ ВТПересеченияРегистров
	|ИЗ
	|	ВТРегистрСведений КАК РегистрСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрСведений КАК РегистрСведенийПересечения
	|		ПО РегистрСведений.Период < РегистрСведенийПересечения.Период
	|			И РегистрСведений.ДействуетДо > РегистрСведенийПересечения.Период
	|			И &ШаблонУсловияСвязиПоИзмерениям";
	
	ОписаниеЗапросаВТПересеченияРегистров = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаВТПересеченияРегистров);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТПересеченияРегистров);
	ОписаниеЗапросаВТПересеченияРегистров.ВыбиратьРазрешенные = ТолькоРазрешенные;
	
	ОператорЗапросаВТПересеченияРегистров = ОписаниеЗапросаВТПересеченияРегистров.Операторы[0];	
	
	ШаблонЗапросаВТМаксимальныеПериоды =	
	"ВЫБРАТЬ
	|	&ШаблонФильтрПериод КАК ЗаданныйПериод,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонМаксимальныйПериодРесурсы КАК МаксимальныйПериодРесурсы,
	|	МАКСИМУМ(РегистрСведений.Период) КАК МаксимальныйПериодИзмерения
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПересеченияРегистров КАК РегистрСведений
	|		ПО (&ФильтрПериодПриведенный_ >= РегистрСведений.Период)
	|			И (&ШаблонУсловияСвязиПоИзмерениям)";
	
	ШаблонПоляМаксимальныйПериодРесурсы = "
	|МАКСИМУМ(ВЫБОР
	|		КОГДА &ФильтрПериодПриведенный_ <= РегистрСведений.ДействуетДо
	|			ТОГДА РегистрСведений.Период
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ)";
	
	ОписаниеЗапросаВТМаксимальныеПериоды = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаВТМаксимальныеПериоды);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТМаксимальныеПериоды);
	ОписаниеЗапросаВТМаксимальныеПериоды.ВыбиратьРазрешенные = ТолькоРазрешенные;
	
	ОператорЗапросаВТМаксимальныеПериоды = ОписаниеЗапросаВТМаксимальныеПериоды.Операторы[0];
	
	ОписаниеИспользованияФильтраМаксимальныеПериоды = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраМаксимальныеПериоды, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапросаВТМаксимальныеПериоды, ПостфиксИменПараметров);
	
	ШаблонЗапросВТСрез = 
	"ВЫБРАТЬ
	|	ИзмеренияДаты.ЗаданныйПериод КАК Период,
	|	РегистрСведенийИзмерения.Период КАК ПериодЗаписи,
	|	ВЫБОР
	|		КОГДА ИзмеренияДаты.МаксимальныйПериодИзмерения = ИзмеренияДаты.МаксимальныйПериодРесурсы
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведенийИзмерения.ДействуетДо КАК ПериодВозвратногоСобытия,
	|	РегистрСведенийИзмерения.Регистратор КАК Регистратор,
	|	РегистрСведенийИзмерения.Регистратор КАК РегистраторЗаписи,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТМаксимальныеПериоды КАК ИзмеренияДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийИзмерения
	|		ПО ИзмеренияДаты.МаксимальныйПериодИзмерения = РегистрСведенийИзмерения.Период
	|			И &ШаблонУсловияСвязиПоИзмерениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийРесурсы
	|		ПО ИзмеренияДаты.МаксимальныйПериодРесурсы = РегистрСведенийРесурсы.Период
	|			И &ШаблонУсловияСвязиПоИзмерениям";			
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ШаблонЗапросВТСрез = СтрЗаменить(ШаблонЗапросВТСрез, "РегистрСведенийИзмерения.ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1)");		
	КонецЕсли;
	
	ОписаниеЗапросаВТСрез = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросВТСрез);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТСрез);
	ОписаниеЗапросаВТСрез.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапросаВТСрез.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапросаВТСрез = ОписаниеЗапросаВТСрез.Операторы[0];
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТСрез, "РегистрСведенийИзмерения", "РегистрСведений." + ИмяРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТСрез, "РегистрСведенийРесурсы", "РегистрСведений." + ИмяРегистра);
	
	ФильтрПериодПриведенный = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраДанныеРегистра, "Период", "ПериодПриведенный");
	ФильтрПериод = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраДанныеРегистра, "Период", "Период");
	
	ФильтрПериодПриведенный.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрПериодПриведенный.Кратность = "ДЕНЬ";
		ФильтрПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	КонецЕсли;
	
	Если Не ПараметрыПостроения.ВключаяГраницу Тогда
		ФильтрПериодПриведенный.Сдвиг = -1;
		ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";
		ФильтрПериодПриведенный.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
	КонецЕсли;	

	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраДанныеРегистра, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраДанныеРегистра, "&ФильтрПериод_", ФильтрПериод);
		
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраМаксимальныеПериоды, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраМаксимальныеПериоды, "&ФильтрПериод_", ФильтрПериод);
	
	Если ПараметрыПостроения.ВсеЗаписи Тогда
		ЗарплатаКадрыПериодическиеРегистры.УстановитьТипСоединения(ОператорЗапросаВТМаксимальныеПериоды, "РегистрСведений", "ЛЕВОЕ");
	КонецЕсли;	
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрПериод), "ЗаданныйПериод");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеПериоды, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрПериод));
	
	ВыражениеПоляМаксимальныйПериодРесурсы = СтрЗаменить(ШаблонПоляМаксимальныйПериодРесурсы, "&ФильтрПериодПриведенный_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрПериодПриведенный));
	ВыражениеПоляМаксимальныйПериодРесурсы = СтрЗаменить(ВыражениеПоляМаксимальныйПериодРесурсы, "&ФильтрПериод_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрПериод));
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ВыражениеПоляМаксимальныйПериодРесурсы, "МаксимальныйПериодРесурсы");
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ВыражениеИзмерениеВТРегистрСведений = "РегистрСведений." + Измерение;		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТРегистрСведений, 0, ВыражениеИзмерениеВТРегистрСведений, Измерение);
		
		ВыражениеИзмерениеВТПересеченияРегистров = "РегистрСведений." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПересеченияРегистров, 0, ВыражениеИзмерениеВТПересеченияРегистров, Измерение);
		
		Если ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено И ПараметрыПостроения.ВсеЗаписи Тогда
			ВыражениеИзмерениеВТМаксимальныеПериоды = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтраМаксимальныеПериоды, Измерение); 	
		Иначе
			ВыражениеИзмерениеВТМаксимальныеПериоды = "РегистрСведений." + Измерение;	
		КонецЕсли;	
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ВыражениеИзмерениеВТМаксимальныеПериоды, Измерение);		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеПериоды, ВыражениеИзмерениеВТМаксимальныеПериоды);
		
		ВыражениеИзмерениеВТСрез = "ИзмеренияДаты." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, ВыражениеИзмерениеВТСрез, Измерение);
		
		УсловиеСвязи = ВыражениеИзмерениеВТПересеченияРегистров + " = РегистрСведенийПересечения." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапросаВТПересеченияРегистров, "РегистрСведенийПересечения", УсловиеСвязи);
				
		УсловиеСвязи = ВыражениеИзмерениеВТСрез + " = РегистрСведенийИзмерения." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапросаВТСрез, "РегистрСведенийИзмерения", УсловиеСвязи);
		
		УсловиеСвязи = ВыражениеИзмерениеВТСрез + " = РегистрСведенийРесурсы." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапросаВТСрез, "РегистрСведенийРесурсы", УсловиеСвязи);
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапросаВТРегистрСведений, 0, ОписаниеИспользованияФильтраДанныеРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапросаВТМаксимальныеПериоды, 0, ОписаниеИспользованияФильтраМаксимальныеПериоды, Истина);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоПсевдонимуИсточника(ОписаниеЗапросаВТСрез, 0, "ИзмеренияДаты", ОписаниеФильтра.ДополнительныеПоляФильтра);

	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапросаВТСрез, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
			
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, ИнтервальныеРегистрыБЗК.ВыражениеПоляНаследуемыйРесурс(Ресурс, ПараметрыНаследованияРесурсов, ОписаниеПакетаЗапросов.Параметры), Ресурс);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, "РегистрСведенийРесурсы." + Ресурс, Ресурс);	
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТСрез, 0, "РегистрСведенийРесурсы." + Реквизит, Реквизит);	
	КонецЦикла;	
	
	ИнтервальныеРегистрыБЗК.ПриПолученииВыраженийРесурсаВозвратныхЗаписейПервичногоРегистра(ИмяРегистра, ОписаниеЗапросаВТСрез, ОператорЗапросаВТСрез);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраДанныеРегистра, ПараметрыПостроения);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраМаксимальныеПериоды, ПараметрыПостроения);
	
	СчПараметров = 1;
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапросаВТРегистрСведений, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров, СчПараметров,,,,Истина);
	// Это условие позволяет отработать ситуация когда запрос используется и для получения записей на начало периода и для
	// получения возвратных движений
	ПредикатУсловияСрезаНаНачало = "РегистрСведений.Период >= ИзмеренияДаты.ЗаданныйПериод ИЛИ ";
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапросаВТСрез, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров + "ОтборыКСрезу", СчПараметров,,,,Истина);
	                      
	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеЗапросаВТСрез, ПараметрыПостроения);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапросаВТСрез, ПараметрыПостроения.ИндексироватьПо);	
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТРегистрСведений");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТПересеченияРегистров");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТМаксимальныеПериоды");
	
КонецПроцедуры

Процедура ДобавитьЗапросСрезаДляПолученияДвиженийПервичногоРегистра(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра, ПараметрыПостроения, ИмяДополняемойВТ) Экспорт
	ИмяВТОтборСреза= "ВТОтборСрезаНаНачалоПериода" + ОписаниеРегистра.ИмяРегистра;	
	ПостфиксИменПараметров = ИмяВТОтборСреза;
	
	ОписаниеРезультирующегоЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяДополняемойВТ);
	ИндексРезультирующегоЗапроса = ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Найти(ОписаниеРезультирующегоЗапроса);
	
	ВключатьЗаписиНаНачалоПериода = ЗарплатаКадрыПериодическиеРегистры.ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	
	ИмяСоздаваемойТаблицыСрезПоследних = ЗарплатаКадрыПериодическиеРегистры.ИмяСоздаваемойТаблицыСрезПоследнихВПараметрахПостроения(ОписаниеРегистра.ИмяРегистра, ПараметрыПостроения);
				
	ШаблонЗапросаФильтра = 
	"ВЫБРАТЬ
	|	РегистрСведений.ДействуетДо КАК ДатаНачала,
	|	&ШаблонИзмеренияФильтра КАК Измерения
	|ПОМЕСТИТЬ ВТОтборСреза
	|ИЗ
	|	#РегистрСведений КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ПО (РегистрСведений.ДействуетДо >= &ФильтрДатаНачалаПриведенная_)
	|			И (РегистрСведений.ДействуетДо <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямФильтра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийПересечения
	|		ПО РегистрСведений.Период < РегистрСведенийПересечения.Период
	|			И РегистрСведений.ДействуетДо >= РегистрСведенийПересечения.Период
	|			И (&ШаблонУсловияСвязиПоИзмерениям)
	|ГДЕ
	|	РегистрСведений.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|	И РегистрСведенийПересечения.Период ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ШаблонФильтрДатаНачала,
	|	&ШаблонИзмеренияФильтра
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты";
	
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ШаблонЗапросаФильтра = СтрЗаменить(ШаблонЗапросаФильтра, "РегистрСведений.ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1)");
	КонецЕсли;
	
	ШаблонТекстаУсловия = "&ФильтрДатаНачала_ <> ДАТАВРЕМЯ(1, 1, 1)";

	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаФильтра);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Вставить(ИндексРезультирующегоЗапроса, ОписаниеЗапроса);
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВТОтборСреза;
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОписаниеЗапроса.Операторы[0], "РегистрСведений", "РегистрСведений." + ОписаниеРегистра.ИмяРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОписаниеЗапроса.Операторы[0], "РегистрСведенийПересечения", "РегистрСведений." + ОписаниеРегистра.ИмяРегистра);
		
	ОписаниеИспользованияФильтраПересечения = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраПересечения, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОписаниеЗапроса.Операторы[0], ПостфиксИменПараметров);
	
	ОписаниеИспользованияФильтраВсеЗаписи = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра(, Неопределено);
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтраВсеЗаписи, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала", ОписаниеЗапроса.Операторы[1], ПостфиксИменПараметров, Истина);
			
	ФильтрДатаНачалаПриведенная =  ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраПересечения, "ДатаНачала", "ФильтрДатаНачалаПриведенная");
	ФильтрДатаОкончания =  ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраПересечения, "ДатаОкончания", "ФильтрДатаОкончания");
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраПересечения, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");

	ФильтрДатаНачала =  ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтраВсеЗаписи, "ДатаНачала", "ФильтрДатаНачала");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрДатаНачалаПриведенная.Кратность = "ДЕНЬ";
		ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	КонецЕсли;	
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		ФильтрДатаНачалаПриведенная.Сдвиг = 1;
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраПересечения, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраПересечения, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтраПересечения, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
		
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала), "ДатаНачала"); 
	
	УсловиеПоПериоду = СтрЗаменить(ШаблонТекстаУсловия, "&ФильтрДатаНачала_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала));
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОписаниеЗапроса.Операторы[1], УсловиеПоПериоду);
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ТекстУсловия = "РегистрСведений." + Измерение + " = РегистрСведенийПересечения." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОписаниеЗапроса.Операторы[0], "РегистрСведенийПересечения", ТекстУсловия);
		
		Если ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено Тогда
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение); 
			
			ВыражениеПоляИзмерения = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтраВсеЗаписи, Измерение);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 1, ВыражениеПоляИзмерения, Измерение); 
		КонецЕсли;
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраВсеЗаписи, ПараметрыПостроения);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтраПересечения, ПараметрыПостроения);
	
	Если Не ВключатьЗаписиНаНачалоПериода Тогда
		ОписаниеЗапроса.Операторы.Удалить(1);
	КонецЕсли;	
	
	ОписаниеФильтраСреза = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице(ИмяВТОтборСреза, ОписаниеФильтра.ИзмеренияФильтра);
	ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра);
	ОписаниеФильтраСреза.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", "ДатаНачала");
	
	ПараметрыПолученияЗаписейНаНачало = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияЗаписейНаНачало, ПараметрыПостроения);
	
	// Отбор записей применяемых к срезу установим сами, т.к. тут мы получаем не только срез на начало
	// но еще данные для возвратных записей
	ПараметрыПолученияЗаписейНаНачало.ОтборыЗаписейНаНачалоПериода = Неопределено;
	
	ДобавленныйОператор = ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросПолученияЗаписейНаНачалоПериода(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтраСреза, ПараметрыПолученияЗаписейНаНачало, ИмяДополняемойВТ);
	
	ВыраженияПоляПериод = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ДобавленныйОператор, "Период"); 
	ВыраженияПоляПериодЗаписи = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ДобавленныйОператор, "ПериодЗаписи"); 
		
	ПредикатОтбораЗаписейНаНачалоПериода = ВыраженияПоляПериодЗаписи + " >= " + ВыраженияПоляПериод + " ИЛИ ";
	
	ОписаниеЗапроса = ИнтервальныеРегистрыБЗК.ВладелецОператораЗапроса(ОписаниеПакетаЗапросов, ДобавленныйОператор);

	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(
		ДобавленныйОператор, 
		ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода,
		ОписаниеПакетаЗапросов.Параметры, 
		"ОтборСрезаНаНачало" + ОписаниеРегистра.ИмяРегистра,
		, 
		ПредикатОтбораЗаписейНаНачалоПериода,
		Неопределено);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТОтборСреза);
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Интервалы(ИмяРегистра, МенеджерВременныхТаблиц, ИмяИнтервальногоРегистра, ИзмеренияОтбора, ТекстОписанияПолей, ПолноеПереформирование)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияОтбора, ",", Истина, Истина);
	УдалятьВТИнтервалы = МассивИзмерений.Количество() = 1;
	МассивСтрокИзмерений = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	Для каждого Измерение Из МассивИзмерений Цикл
		МассивСтрокИзмерений.Добавить("ВТИнтервалы." + Измерение);
	КонецЦикла;
	ТекстИзмерений = СтрСоединить(МассивСтрокИзмерений, Разделитель);
	
	Если ПолноеПереформирование Тогда
		ТекстЗапроса = ЗапросВТИнтервалыПоПервичномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей);
	Иначе
		ТекстЗапроса = ЗапросВТИнтервалыПоИнтервальномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей);
	КонецЕсли; 
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекстЗапроса);
	МассивСтрок.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()); 
	ТекстПолейВТИнтервалы = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений", "ВТИнтервалы");
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ДатаНачала КАК ДатаСобытия,
		|	ВТИнтервалы.ПериодЗаписи КАК ПериодЗаписи,
		|	ВТИнтервалы.РегистраторЗаписи КАК РегистраторЗаписи,
		|	ВТИнтервалы.РегистраторСобытия КАК РегистраторСобытия,
		|	ВТИнтервалы.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
		|	ВТИнтервалы.ПустойИнтервал КАК ПустойИнтервал,
		|	ВТИнтервалы.ДействуетДо КАК ДействуетДо,
		|	ИСТИНА КАК ЭтоНачалоИнтервала,
		|	#ТекстОписанияПолей 
		|ИЗ
		|	ВТИнтервалы КАК ВТИнтервалы
		|
		|ГДЕ
		|	НЕ ВТИнтервалы.ДатаНачала ЕСТЬ NULL
		|	И ВТИнтервалы.ДатаОкончания >= ВТИнтервалы.ДатаНачала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ДатаОкончания,
		|	ВТИнтервалы.ПериодЗаписи,
		|	ВТИнтервалы.РегистраторЗаписи,
		|	ВТИнтервалы.РегистраторСобытия,
		|	ВТИнтервалы.ПериодПредыдущейЗаписи,
		|	ВТИнтервалы.ПустойИнтервал КАК ПустойИнтервал,
		|	ВТИнтервалы.ДействуетДо КАК ДействуетДо,
		|	ЛОЖЬ,
		|	#ТекстОписанияПолей
		|ИЗ
		|	ВТИнтервалы КАК ВТИнтервалы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТИнтервалы.ИзмеренияОтбора_,
		|	ДатаСобытия,
		|	ПериодЗаписи";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстПолейВТИнтервалы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИнтервалы.ИзмеренияОтбора_", ТекстИзмерений);
	МассивСтрок.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(МассивСтрок);
	Если УдалятьВТИнтервалы Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТИнтервалы");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДатаСтрокой());
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

Функция ЗапросВТИнтервалыПоПервичномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РегистрСведений.ДействуетДо, СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	РегистрСведений.Период КАК ДатаНачала,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	РегистрСведений.Регистратор КАК РегистраторЗаписи,
	|	РегистрСведений.Регистратор КАК РегистраторСобытия,
	|	ЛОЖЬ КАК ПустойИнтервал,
	|	РегистрСведений.ДействуетДо КАК ДействуетДо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодПредыдущейЗаписи, 
	|	#ТекстОписанияПолей
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТОтборДляПереформирования КАК ВТОтборДляПереформирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.#ИмяРегистра КАК РегистрСведений
	|		ПО РегистрСведений.ИзмеренияОтбора_ = ВТОтборДляПереформирования.ИзмеренияОтбора_";
	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
	
		ТекстЗамены = 
			"ВЫБОР
			|		КОГДА РегистрСведений.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(РегистрСведений.ДействуетДо, СЕКУНДА, -1)
			|	КОНЕЦ";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "&МаксимальнаяДата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ДействуетДо КАК ДействуетДо", "ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо");
	
	КонецЕсли; 
	
	МассивСоединения = Новый Массив;
	РазделительСоединения = Символы.ПС + "			И ";
	ТекстОписанияПолейПервичногоРегистра = ТекстОписанияПолей;
	Для каждого Измерение Из МассивИзмерений Цикл
		МассивСоединения.Добавить(СтрШаблон("РегистрСведений.%1 = ВТОтборДляПереформирования.%1", Измерение));
		ТекстОписанияПолейПервичногоРегистра = СтрЗаменить(ТекстОписанияПолейПервичногоРегистра, "РегистрСведений." + Измерение, "ВТОтборДляПереформирования." + Измерение);
	КонецЦикла; 
	
	ТекстСоединения = СтрСоединить(МассивСоединения, РазделительСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТОтборДляПереформирования.ИзмеренияОтбора_", ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолей", ТекстОписанияПолейПервичногоРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТОтборДляПереформирования");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросВТИнтервалыПоИнтервальномуРегистру(ИмяРегистра, МассивИзмерений, ТекстОписанияПолей)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведений.ИзмеренияОтбора_ КАК ИзмеренияОтбора_, 
	|	РегистрСведений.Год КАК НачалоГода
	|ПОМЕСТИТЬ ВТГодыИнтерваловПредварительно
	|ИЗ
	|	РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|		ПО (НАЧАЛОПЕРИОДА(ВТНовыйНаборЗаписей.Период, ДЕНЬ) <= РегистрСведений.ДатаОкончания)
	|			И (ВЫБОР
	|				КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &МаксимальнаяДата
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
	|			КОНЕЦ > РегистрСведений.ДатаНачала)
	|			И РегистрСведений.ИзмеренияОтбора_ = ВТНовыйНаборЗаписей.ИзмеренияОтбора_
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТНовыйНаборЗаписей.ИзмеренияОтбора_, 
	|	НАЧАЛОПЕРИОДА(ВТНовыйНаборЗаписей.Период, ГОД)
	|ИЗ
	|	ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГодыИнтервалов.ИзмеренияОтбора_ КАК ИзмеренияОтбора_, 
	|	МИНИМУМ(ГодыИнтервалов.НачалоГода) КАК НачалоГода
	|ПОМЕСТИТЬ ВТГодыИнтервалов
	|ИЗ
	|	ВТГодыИнтерваловПредварительно КАК ГодыИнтервалов
	|СГРУППИРОВАТЬ ПО
	|	ГодыИнтервалов.ИзмеренияОтбора_
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведений.ДатаОкончания,
	|	РегистрСведений.ДатаНачала,
	|	РегистрСведений.ПериодПредыдущейЗаписи,
	|	РегистрСведений.ПериодЗаписи,
	|	РегистрСведений.РегистраторЗаписи,
	|	РегистрСведений.РегистраторСобытия,
	|	РегистрСведений.ПустойИнтервал,
	|	РегистрСведений.ДействуетДо КАК ДействуетДо,
	|	#ТекстОписанияПолейСуществующийНабор
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	РегистрСведений.#ИмяРегистраИнтервальный КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГодыИнтервалов КАК ВТГодыИнтервалов
	|		ПО РегистрСведений.ДатаОкончания >= ВТГодыИнтервалов.НачалоГода
	|			И РегистрСведений.ДатаНачала >= ВТГодыИнтервалов.НачалоГода
	|			И РегистрСведений.ИзмеренияОтбора_ = ВТГодыИнтервалов.ИзмеренияОтбора_
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	ВТНовыйНаборЗаписей.Период,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВТНовыйНаборЗаписей.Период,
	|	ВТНовыйНаборЗаписей.Регистратор,
	|	ВТНовыйНаборЗаписей.Регистратор,
	|	ЛОЖЬ,
	|	ВТНовыйНаборЗаписей.ДействуетДо,
	|	#ТекстОписанияПолейНовыйНабор
	|ИЗ
	|	ВТНовыйНаборЗаписей КАК ВТНовыйНаборЗаписей
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТГодыИнтерваловПредварительно
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТГодыИнтервалов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТНовыйНаборЗаписей";
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
	
		ТекстЗамены = 
			"ВЫБОР
			|				КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА &МаксимальнаяДата
			|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
			|			КОНЕЦ > РегистрСведений.ДатаНачала";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "ИСТИНА");
		
		ТекстЗамены = 
			"ВЫБОР
			|		КОГДА ВТНовыйНаборЗаписей.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВТНовыйНаборЗаписей.ДействуетДо, СЕКУНДА, -1)
			|	КОНЕЦ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "&МаксимальнаяДата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНовыйНаборЗаписей.ДействуетДо,", "ДАТАВРЕМЯ(1, 1, 1),");
	
	КонецЕсли;
	
	МассивСтрокИзмерений = Новый Массив;
	МассивСтрокСоединения = Новый Массив;
	МассивСтрокГруппировки = Новый Массив;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	РазделительСоединения = Символы.ПС + "			И ";
	
	Для каждого Измерение Из МассивИзмерений Цикл
	
		МассивСтрокИзмерений.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Измерение));
		МассивСтрокСоединения.Добавить(СтрШаблон("РегистрСведений.%1 = ВТНовыйНаборЗаписей.%1", Измерение));
		МассивСтрокГруппировки.Добавить("ГодыИнтервалов." + Измерение);
	
	КонецЦикла; 
	
	ТекстИзмеренийРегистрСведений = СтрСоединить(МассивСтрокИзмерений, Разделитель);
	ТекстСоединенияГодыИнтервалов = СтрСоединить(МассивСтрокСоединения, РазделительСоединения);
	ТекстИзмеренийГруппировкиГодыИнтервалов = СтрСоединить(МассивСтрокГруппировки, Разделитель);
	
	ТекстИзмеренийНовыйНабор = СтрЗаменить(ТекстИзмеренийРегистрСведений, "РегистрСведений.", "ВТНовыйНаборЗаписей.");
	ТекстИзмеренийГодыИнтервалов = СтрЗаменить(ТекстИзмеренийРегистрСведений, "РегистрСведений.", "ГодыИнтервалов.");
	ТекстСоединенияИнтервалы = СтрЗаменить(ТекстСоединенияГодыИнтервалов, "ВТНовыйНаборЗаписей.", "ВТГодыИнтервалов.");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТНовыйНаборЗаписей.ИзмеренияОтбора_", ТекстСоединенияГодыИнтервалов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ = ВТГодыИнтервалов.ИзмеренияОтбора_", ТекстСоединенияИнтервалы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ИзмеренияОтбора_ КАК ИзмеренияОтбора_", ТекстИзмеренийРегистрСведений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНовыйНаборЗаписей.ИзмеренияОтбора_", ТекстИзмеренийНовыйНабор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГодыИнтервалов.ИзмеренияОтбора_ КАК ИзмеренияОтбора_", ТекстИзмеренийГодыИнтервалов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГодыИнтервалов.ИзмеренияОтбора_", ТекстИзмеренийГруппировкиГодыИнтервалов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейСуществующийНабор", ТекстОписанияПолей);
	ТекстОписанияПолейНовыйНабор = СтрЗаменить(ТекстОписанияПолей, "РегистрСведений", "ВТНовыйНаборЗаписей");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТекстОписанияПолейНовыйНабор", ТекстОписанияПолейНовыйНабор);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекущиеДанныеРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ИзмерениеЗаписи, ТекстПолейРегистра)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Источник.Измерение_ КАК Измерение_
		|ПОМЕСТИТЬ ВТОтбор
		|ИЗ
		|	ВТИнтервалы КАК Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведений.ДатаОкончания КАК ДатаОкончания,
		|	РегистрСведений.ДатаНачала КАК ДатаНачала,
		|	РегистрСведений.ПериодЗаписи КАК ПериодЗаписи,
		|	РегистрСведений.РегистраторЗаписи КАК РегистраторЗаписи,
		|	РегистрСведений.РегистраторСобытия КАК РегистраторСобытия,
		|	РегистрСведений.Год КАК Год,
		|	РегистрСведений.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
		|	РегистрСведений.ПустойИнтервал КАК ПустойИнтервал,
		|	РегистрСведений.ДействуетДо КАК ДействуетДо,
		|	РегистрСведений.Поля_
		|ИЗ
		|	РегистрСведений_ИмяРегистра КАК РегистрСведений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Отбор
		|		ПО РегистрСведений.Измерение_ = Отбор.Измерение_
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрСведений.Измерение_,
		|	Год
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтбор";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Измерение_", ИзмерениеЗаписи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.Поля_", ТекстПолейРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений_ИмяРегистра", "РегистрСведений." + ИмяРегистра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	ДанныеРегистра = Результат.Выгрузить();
	ДанныеРегистра.Индексы.Добавить(ИзмерениеЗаписи+",Год");
	Возврат ДанныеРегистра;
	
КонецФункции

Процедура ЗаполнитьПоляРегистраПоОписанию(ОписаниеРегистра, ТекстОписанияПолей, ПоляРегистра = "")
	
	МассивСтрокОписанияПолей = Новый Массив;
	Если ЗначениеЗаполнено(ТекстОписанияПолей) Тогда
		МассивСтрокОписанияПолей.Добавить(ТекстОписанияПолей);
	КонецЕсли;
	Разделитель = "," + Символы.ПС + Символы.Таб;
	МассивСтрокПолейРегистра = Новый Массив;
	МассивСтрокПолейРегистра.Добавить(ПоляРегистра);
	Для каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если Измерение = "ДатаОкончания"
			Или Измерение = "ДатаНачала"
			Или Измерение = "ПериодЗаписи" 
			Или Измерение = "Год" Тогда
			
			Продолжить;
		КонецЕсли;
		
		МассивСтрокОписанияПолей.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Измерение));
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Измерение);
	КонецЦикла; 
	
	Для каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		Если Ресурс = "ПериодПредыдущейЗаписи" 
			Или Ресурс = "ДействуетДо" Тогда
			
			Продолжить;
		КонецЕсли; 
		
		МассивСтрокОписанияПолей.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Ресурс));
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Ресурс);
	КонецЦикла; 
	
	Для каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		Если Реквизит = "ПустойИнтервал" 
			Или Реквизит = "РегистраторЗаписи" 
			Или Реквизит = "РегистраторСобытия" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокОписанияПолей.Добавить(СтрШаблон("РегистрСведений.%1 КАК %1", Реквизит));
		
		МассивСтрокПолейРегистра.Добавить(", ");
		МассивСтрокПолейРегистра.Добавить(Реквизит);
	КонецЦикла;
	
	ТекстОписанияПолей = СтрСоединить(МассивСтрокОписанияПолей, Разделитель);
	ПоляРегистра = СтрСоединить(МассивСтрокПолейРегистра);
	
КонецПроцедуры

Процедура ПроверитьИзменениеТекущегоГода(ИмяРегистра, ТекущаяДата, ТекущийГод, НаборЗаписей, РассчитанныеПериоды, ПолноеПереформирование)
	
	Если Не ПолноеПереформирование
		И ТекущийГод < НачалоГода(ТекущаяДата) Тогда
		
		ТекущийГод = НачалоГода(ТекущаяДата);
		НаборЗаписей = НаборЗаписейПоГоду(ИмяРегистра, РассчитанныеПериоды, ТекущийГод);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьИнтервал(ТекущийИнтервал, Источник, ДатаНачала, ЕстьТекущийИнтервал)

	Если Не ЗначениеЗаполнено(ТекущийИнтервал.ПериодПредыдущейЗаписи) Тогда
		ТекущийИнтервал.ПериодПредыдущейЗаписи = Источник.ПериодПредыдущейЗаписи;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ТекущийИнтервал, Источник, , "ПериодПредыдущейЗаписи");
	
	Если ДатаНачала <> Источник.ПериодЗаписи 
		И ТекущийИнтервал.Свойство("ВидСобытия") Тогда
		ТекущийИнтервал.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение;
	КонецЕсли; 
	
	ТекущийИнтервал.ДатаНачала 	= ДатаНачала;
	ЕстьТекущийИнтервал 		= Истина;	

КонецПроцедуры

Процедура ОткрытьПустойИнтервал(ТекущийИнтервал, Источник, ДатаНачала, ЕстьТекущийИнтервал, ПараметрыРесурсов)

	Если Не ЗначениеЗаполнено(ТекущийИнтервал.ПериодПредыдущейЗаписи) Тогда
		ТекущийИнтервал.ПериодПредыдущейЗаписи = Источник.ПериодПредыдущейЗаписи;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекущийИнтервал.ПериодПредыдущейЗаписи) Тогда
		ТекущийИнтервал.ПериодПредыдущейЗаписи = ТекущийИнтервал.ДатаНачала;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ПараметрыРесурсов Цикл
		
		Ресурс = КлючИЗначение.Ключ;
		Наследование = КлючИЗначение.Значение;
		Если Наследование <> Неопределено 
			И ТипЗнч(Наследование) = Тип("Структура") 
			И ТекущийИнтервал.Свойство(Ресурс) Тогда
			
			ПравилоНаследования = Неопределено;
			Наследование.Свойство("ПравилоНаследования", ПравилоНаследования);
			
			Если ПравилоНаследования = ЗарплатаКадрыПериодическиеРегистры.ПравилоНаследованияФиксированное() Тогда
				ТекущийИнтервал[Ресурс] = Наследование.Значение;
			ИначеЕсли ПравилоНаследования = ЗарплатаКадрыПериодическиеРегистры.ПравилоНаследованияПустое() Тогда
			    ТекущийИнтервал[Ресурс] = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	ТекущийИнтервал.ДатаНачала		= ДатаНачала;
	ТекущийИнтервал.ДействуетДо		= Дата(1, 1, 1);
	ТекущийИнтервал.ПустойИнтервал	= Истина;
	ЕстьТекущийИнтервал				= Истина;

КонецПроцедуры

Процедура ЗакрытьИнтервал(ТекущийИнтервал, НаборЗаписей, ДатаОкончания, ЕстьТекущийИнтервал)

	Если Не ЕстьТекущийИнтервал Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяЗапись 					= НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущийИнтервал);
	НоваяЗапись.ДатаОкончания		= ДатаОкончания;
	НоваяЗапись.Год 				= НачалоГода(НоваяЗапись.ДатаНачала);
	ЕстьТекущийИнтервал 					= Ложь;
	
КонецПроцедуры
 
Процедура ПоместитьВОжидание(СтруктураОжидания, Источник, ТекущийИнтервал, ЕстьОжидание)

	Если Источник.РегистраторЗаписи <> ТекущийИнтервал.РегистраторЗаписи Тогда
		Источник.ПериодПредыдущейЗаписи = ?(Источник.ДатаНачала < ТекущийИнтервал.ДатаСобытия, Источник.ДатаНачала, Источник.ПериодЗаписи);
	КонецЕсли;
		
	Если Источник.ПустойИнтервал = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОжидания, Источник,,"ПериодПредыдущейЗаписи");
	СтруктураОжидания.ДействуетДо = Дата(1, 1, 1);
	ЕстьОжидание = Истина;	

КонецПроцедуры

Процедура ЗаписатьНаборЗаписей(НаборЗаписей)
	
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
КонецПроцедуры
	
Функция НаборЗаписейПоГоду(ИмяРегистра, РассчитанныеПериоды, Год)

	НаборЗаписей = РассчитанныеПериоды.Получить(Год);
	Если НаборЗаписей = Неопределено Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		РассчитанныеПериоды.Вставить(Год, НаборЗаписей);
	КонецЕсли;
	
	Возврат НаборЗаписей;

КонецФункции 

#КонецОбласти