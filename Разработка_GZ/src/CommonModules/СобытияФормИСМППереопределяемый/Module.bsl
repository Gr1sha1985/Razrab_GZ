#Область ПрограммныйИнтерфейс

// Обработчик команды формы, требующей контекстного вызова сервера.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, из которой выполняется команда.
//   ПараметрыВызова - Структура - параметры вызова.
//   Источник - ТаблицаФормы, ДанныеФормыСтруктура - объект или список формы с полем "Ссылка".
//   Результат - Структура - результат выполнения команды.
//
Процедура ВыполнитьПереопределяемуюКоманду(Знач Форма, Знач ПараметрыВызова, Знач Источник, Результат) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФорм

// Серверная переопределяемая процедура, вызываемая при заполнении реквизитов формы созданных ИСМП (при открытии)
//
// Параметры:
//   Форма - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//
Процедура ЗаполнениеРеквизитовФормы(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(Перечисления.ВидыПродукцииИС.Обувь);
	Если ПараметрыИнтеграции = Неопределено Тогда
		ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(Перечисления.ВидыПродукцииИС.Табак);
	КонецЕсли;
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		
		Объект = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект;
		Товары = ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		
		ПараметрыЗаполненияРеквизитов = Новый Структура;
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьВидПродукцииИС", Новый Структура("Номенклатура", "ВидПродукцииИС"));
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакМаркируемаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
		
		МассивНоменклатуры = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из Форма[Объект][Товары] Цикл
			МассивНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Номенклатура.ТабачнаяПродукция
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
		|			КОГДА Номенклатура.ОбувнаяПродукция
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
		|			КОГДА Номенклатура.ЛегкаяПромышленность
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
		|			КОГДА Номенклатура.МолочнаяПродукцияПодконтрольнаяВЕТИС
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|			КОГДА Номенклатура.МолочнаяПродукцияБезВЕТИС
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
		|			КОГДА Номенклатура.Шины
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
		|			КОГДА Номенклатура.АльтернативныйТабак
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
		|			КОГДА Номенклатура.УпакованнаяВода
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
		|			КОГДА Номенклатура.Фотоаппараты
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
		|			КОГДА Номенклатура.Духи
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
		|			КОГДА Номенклатура.Велосипеды
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
		|			КОГДА Номенклатура.КреслаКоляски
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
		|		КОНЕЦ) КАК ВидПродукцииИС,
		|	МАКСИМУМ(Номенклатура.ТабачнаяПродукция ИЛИ Номенклатура.ОбувнаяПродукция) КАК МаркируемаяПродукция,
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка";
		
		ТаблицаДанныхНоменклатуры = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицы Из Форма[Объект][Товары] Цикл
			
			СтрокаНоменклатуры = ТаблицаДанныхНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
			Если СтрокаНоменклатуры <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаНоменклатуры, "ВидПродукцииИС, МаркируемаяПродукция");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределение параметров интеграции ИСМП (расположения команды проверки и подбора)
//
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения - прикладная форма для встраивания форматированной строки
//   СтандартнаяОбработка - Булево - стандартная работа с элементами проверки подбора
//
Процедура ПриОпределенииПараметровИнтеграции(Форма, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределение параметров интеграции ИСМП (расположения форматированной строки перехода к связанному объекту)
//
//Параметры:
//   Форма            - УправляемаяФорма - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - Структура        - (см. СобытияФормИСМП.ПараметрыИнтеграцииГиперссылкиИСМП)
//
Процедура ПриОпределенииПараметровИнтеграцииГиперссылкиИСМП(Форма, ПараметрыНадписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ИнтеграцияИСМП.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
		
		ПараметрыНадписи.Вставить("ИмяЭлементаФормы",  "ТекстДокументаИСМП");
		ПараметрыНадписи.Вставить("ИмяРеквизитаФормы", "ТекстДокументаИСМП");
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ГруппаСостояние") Тогда
		ПараметрыНадписи.РазмещениеВ = "ГруппаСостояние";
	КонецЕсли;
	
КонецПроцедуры

// Переопределение доступности интеграции формы сверки для прикладной формы (расположения форматированной строки перехода к связанному объекту)
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - прикладная форма для встраивания форматированной строки
//   СтандартнаяОбработка - Булево - установить ложь, если требуется отменить выполнение стандартной обработки.
//
Процедура ПриОпределенииДоступностиИнтеграцииФормыСверкиКодовМаркировки(Форма, СтандартнаяОбработка) Экспорт
	
	Возврат;
	//-
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - Объект - объект, который будет прочитан.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФорм

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаОбщая"
		Или Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаТовары"
		//Или Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокументаОбщая" 
		Тогда
		
		Если Элемент = "Номенклатура" 
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("Номенклатура")
			И ЗначениеЗаполнено(ДополнительныеПараметры.Номенклатура) Тогда
			
			СвойстваПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныеПараметры.Номенклатура, ИнтеграцияИСМПБП.СписокПараметровНоменклатурыИС());
			ВидыПродукцииИС = ИнтеграцияИСМПБП.ВидПродукцииИС(СвойстваПродукции);
			ЕстьМаркируемаяПродукция = НЕ (ВидыПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка());
			Если ЕстьМаркируемаяПродукция Тогда
				ДополнительныеПараметры.Вставить("МаркируемаяПродукция", Истина);
				ДополнительныеПараметры.Вставить("ВидПродукцииИС", ВидыПродукцииИС);
			КонецЕсли;
		Иначе
			ПроверкаИПодборПродукцииИСМП.ПрименитьКешШтрихкодовУпаковок(Форма, Истина);
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаОбщая"
		Или Форма.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаТовары"
		//Или Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокументаОбщая" 
		Тогда
		
		Если Элемент = "Номенклатура" 
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("Номенклатура")
			И ЗначениеЗаполнено(ДополнительныеПараметры.Номенклатура) Тогда
			
			СвойстваПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныеПараметры.Номенклатура, ИнтеграцияИСМПБП.СписокПараметровНоменклатурыИС());
			ВидыПродукцииИС = ИнтеграцияИСМПБП.ВидПродукцииИС(СвойстваПродукции);
			ЕстьМаркируемаяПродукция = НЕ (ВидыПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка());
			Если ЕстьМаркируемаяПродукция Тогда
				ДополнительныеПараметры.Вставить("МаркируемаяПродукция", Истина);
				ДополнительныеПараметры.Вставить("ВидПродукцииИС", ВидыПродукцииИС);
			КонецЕсли;
		Иначе
			ПроверкаИПодборПродукцииИСМП.ПрименитьКешШтрихкодовУпаковок(Форма, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыВыбора

// Устанавливает параметры выбора шаблона этикетки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора,
//  ИмяПоляВвода - Строка - имя поля ввода шаблона этикетки.
Процедура УстановитьПараметрыВыбораШаблонаЭтикетки(Форма,  ИмяПоляВвода) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Устанавливает параметры выбора контрагента.
//
//Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора.
//   ТолькоЮрЛицаНерезиденты - Неопределено, Булево - Признак нерезидента.
//   ИмяПоляВвода            - Строка               - имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Форма, ТолькоЮрЛицаНерезиденты = Неопределено, ИмяПоляВвода = "Контрагент") Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет действия при изменении номенклатуры в строке табличной части.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - редактируемая строка таблицы,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - (См. ПроверкаИПодборПродукцииМОТП.ПараметрыУказанияСерий).
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Количество")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоУпаковок") Тогда

		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок;
	
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении подобранного количества в строке таблицы формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Количество")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоУпаковок") Тогда

		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок;
	
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении подобранного количества (поле Количество) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаУправляемогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииКоличестваЕдиниц(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Заполняет табличную часть Товары подобранными товарами.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
Процедура ОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ПараметрыЗаполнения) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ТекущаяСтрока = Неопределено;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Форма.Объект.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура");
		
		Если ТекущаяСтрока.Свойство("КоличествоУпаковок") Тогда
			ТекущаяСтрока.КоличествоУпаковок = СтрокаТовара.Количество;
		КонецЕсли;
	КонецЦикла;
		
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
