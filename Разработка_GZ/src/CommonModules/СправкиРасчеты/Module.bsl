#Область ПрограммныйИнтерфейс

#Область Примечания

// Возвращает символы примечания (сноски), соответствующие номеру примечания.
//
// Параметры:
//  НомерПримечания	 - Число - номер, начиная с единицы
// 
// Возвращаемое значение:
//  Строка - один или несколько символов примечания
//
Функция СимволыПримечания(НомерПримечания = 1) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(НСтр("ru = '*'"), НомерПримечания);
	
КонецФункции

// Дополняет переданное слово ссылкой на примечание. Используется в основном тексте.
//
// Параметры:
//  Слово			 - Строка - слово
//  НомерПримечания	 - Число - номер примечания, начиная с единицы
//
Процедура ДополнитьСловоСсылкойНаПримечание(Слово, НомерПримечания = 1) Экспорт
	
	СимволПримечания = СимволыПримечания(1);
	Разделитель = "";
	Если СтрЗаканчиваетсяНа(Слово, СимволПримечания) Тогда
		Разделитель = НСтр("ru = ' '");
	КонецЕсли;
	
	Слово = СтрШаблон(НСтр("ru = '%1%2%3'"), Слово, Разделитель, СимволыПримечания(НомерПримечания));
	
КонецПроцедуры

// Предваряет переданный текст идентификатором примечания соответствующего номера.
// Используется в колонтитуле (page footer) страницы.
//
// Параметры:
//  ТекстПримечания	 - Строка - пространный поясняющий текст
//  НомерПримечания	 - Число - номер примечания, начиная с единицы
// 
// Возвращаемое значение:
//  Строка - полный текст для помещения в колонтитул
//
Функция ДобавитьСимволыПримечания(ТекстПримечания, НомерПримечания = 1) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = '%1 %2'"), СимволыПримечания(НомерПримечания), ТекстПримечания);
	
КонецФункции

// Помещает после тела отчета текст примечания.
// Увеличивает на единицу счетчик примечаний.
// Следует использовать в обработчике ПослеВыводаРезультата.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - результат отчета
//  ТекстПримечания	  - Строка - пространный поясняющий текст
//  СчетчикПримечаний - Число - текущее (до вывода очередного примечания) значение счетчика примечаний.
//                      Перед добавлением первого примечания следует инициализировать счетчик значением 0.
// 
Процедура ДобавитьПримечание(ТабличныйДокумент, ТекстПримечания, СчетчикПримечаний = 0) Экспорт
	
	Если ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикПримечаний = СчетчикПримечаний + 1;
	
	ШаблонСтроки = ТабличныйДокумент.ПолучитьОбласть("R1");
	ШаблонСтроки.Область("R1").Очистить();
	
	// Строка для отступа
	ТабличныйДокумент.Вывести(ШаблонСтроки);
	ОбластьОтступ = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, , ТабличныйДокумент.ВысотаТаблицы, );
	ОбластьОтступ.ВысотаСтроки = 5;
	
	// Строка для текста
	ТабличныйДокумент.Вывести(ШаблонСтроки);
	ОбластьСноска = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 1, ТабличныйДокумент.ВысотаТаблицы, 1);
	
	ОбластьСноска.Шрифт = Новый Шрифт(, 8);
	ОбластьСноска.ВысотаСтроки = 0;
	
	ОбластьСноска.Текст = ДобавитьСимволыПримечания(ТекстПримечания, СчетчикПримечаний);
	
КонецПроцедуры

#КонецОбласти

#Область НаборыСуммовыхПоказателей

// Позволяет указать, что отчет использует именованные наборы суммовых показателей.
// При этом, для совместимости, если не указано, ни то, что отчет использует именованные наборы,
// ни то, что отчет не использует именованные наборы, предполагается, что отчет использует наборы с числовыми идентификаторами
// (см. область НаборыСуммовыхПоказателей в СправкиРасчетыКлиентСервер).
//
// Параметры:
//  МанифестОтчета - Структура - см. БухгалтерскиеОтчеты.ПараметрыИсполненияОтчета.
//
Процедура УстановитьОтчетИспользуетНаборыСуммовыхПоказателей(МанифестОтчета) Экспорт
	
	МанифестОтчета.Вставить("ИспользоватьНаборыСуммовыхПоказателей", Истина);
	
КонецПроцедуры

// Позволяет указать, что отчет не использует никакие наборы суммовых показателей.
// Используется для совместимости - пока большинство справок-расчетов используют наборы с числовыми идентификаторами.
//
// Параметры:
//  МанифестОтчета - Структура - см. БухгалтерскиеОтчеты.ПараметрыИсполненияОтчета.
//
Процедура УстановитьОтчетНеИспользуетНаборыСуммовыхПоказателей(МанифестОтчета) Экспорт
	
	МанифестОтчета.Вставить("НеИспользоватьНаборыСуммовыхПоказателей", Истина);
	
КонецПроцедуры

// Проверяет, использует ли отчет именованные наборы суммовых показателей.
//
// Параметры:
//  ОписаниеОтчета - Строка - Имя отчета
//                 - Структура - см. БухгалтерскиеОтчеты.ПараметрыИсполненияОтчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если отчет использует именованные наборы суммовых показателей.
//
Функция ОтчетИспользуетНаборыСуммовыхПоказателей(ОписаниеОтчета) Экспорт
	
	Возврат БухгалтерскиеОтчеты.ЗначениеПараметраИсполненияОтчета(
		ОписаниеОтчета,
		"ИспользоватьНаборыСуммовыхПоказателей",
		Ложь);
		
КонецФункции

// Проверяет, использует ли отчет наборы суммовых показателей c числовыми идентификаторами
// (см. область НаборыСуммовыхПоказателей в СправкиРасчетыКлиентСервер).
//
// Параметры:
//  ОписаниеОтчета - Строка - Имя отчета
//                 - Структура - см. БухгалтерскиеОтчеты.ПараметрыИсполненияОтчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если отчет использует наборы суммовых показателей с числовыми идентификаторами.
//
Функция ОтчетИспользуетНаборыСуммовыхПоказателейДляСовместимости(ОписаниеОтчета) Экспорт
	
	Возврат Не БухгалтерскиеОтчеты.ЗначениеПараметраИсполненияОтчета(
		ОписаниеОтчета,
		"НеИспользоватьНаборыСуммовыхПоказателей",
		Ложь);
		
КонецФункции

// Определяет перечень наборов суммовых показателей c числовыми идентификаторами, которые поддержаны в отчете
//
// Параметры:
//  ИмяОтчета - Строка - Имя отчета
// 
// Возвращаемое значение:
//  Неопределено - отчет не использует наборы суммовых показателей с числовыми идентификаторами
//  Массив - номера поддерживаемых наборов
//
Функция ПоддерживаемыеНаборыСуммовыхПоказателей(ИмяОтчета) Экспорт
	
	НаборыСуммовыхПоказателейДляСовместимости = ОтчетИспользуетНаборыСуммовыхПоказателейДляСовместимости(ИмяОтчета);
	Если Не НаборыСуммовыхПоказателейДляСовместимости Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Отчеты[ИмяОтчета].ПоддерживаемыеНаборыСуммовыхПоказателей();
	
КонецФункции

// Определяет перечень наборов суммовых показателей c числовыми идентификаторами, которые доступны в контексте отчета
// (с учетом организации и периода, а также настроек информационной базы)
//
// Параметры:
//  ИмяОтчета     - Строка - Имя отчета
//  НачалоПериода - Дата
//  КонецПериода  - Дата
//  Организация   - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Неопределено - отчет не использует наборы суммовых показателей с числовыми идентификаторами
//  Массив - номера доступных наборов
//
Функция ДоступныеПользователюНаборыСуммовыхПоказателей(ИмяОтчета, НачалоПериода, КонецПериода, Организация) Экспорт
	
	ДоступныеНаборы = ПоддерживаемыеНаборыСуммовыхПоказателей(ИмяОтчета);
	Если ДоступныеНаборы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидИспользованияСумм = БухгалтерскиеОтчетыВызовСервера.ИспользоватьСуммыНалогНаПрибыль(Организация, НачалоПериода, КонецПериода);
	
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммуНУ(ВидИспользованияСумм) Тогда
		
		Если ДоступныеНаборы.Найти(СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейПоУмолчанию()) = Неопределено Тогда
			// Это особенный отчет с нестандартным набором показателей.
			// На такие отчеты ограничение не влияет: все поддерживаемые наборы разрешены.
		Иначе
		
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
				ДоступныеНаборы,
				СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейНалоговыйУчет());
				
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
				ДоступныеНаборы,
				СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейСверкиНалоговогоУчета());
				
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не БухгалтерскийУчетКлиентСервер.ИспользоватьСуммыРазниц(ВидИспользованияСумм) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
			ДоступныеНаборы,
			СправкиРасчетыКлиентСервер.НомерНабораСуммовыхПоказателейОтложенногоНалога());
			
	КонецЕсли;
	
	Возврат ДоступныеНаборы;
	
КонецФункции

// Конструктор коллекции, описывающий состав наборов суммовых показателей.
// Каждый именованный набор может включать в себя одну или несколько именованных колонок детальных записей,
// в каждой из которых могут быть одно или несколько полей ресурсов.
//
// Параметры:
//  ПоддерживаемыеНаборы - СписокЗначений - имена и представления наборов суммовых показателей, которые поддерживает отчет.
// 
// Возвращаемое значение:
//  Структура - состав наборов.
//         * Ключ - имя набора
//         * Значение - Массив - имена колонок.
//
Функция НовыйСоставНаборовСуммовыхПоказателей(ПоддерживаемыеНаборы) Экспорт
	
	Состав = Новый Структура;
	Для Каждого ОписаниеНабора Из ПоддерживаемыеНаборы Цикл
		Состав.Вставить(ОписаниеНабора.Значение, Новый Массив);
	КонецЦикла;
	Возврат Состав;
	
КонецФункции

// Определяет перечень колонок, которые нужно
// - отображать для переданного набора показателей, но скрывать в других
// - скрывать для переданного набора показателей, но отображать в других.
//
// Параметры:
//  ИмяНабора		 - Строка - имя набора суммовых показателей.
//  СоставНаборов	 - Структура - См. НовыйСоставНаборовСуммовыхПоказателей.
// 
// Возвращаемое значение:
//  Соответствие - Ключ: имя колонки; Значение: Булево - используется колонка или нет.
//
Функция ИспользованиеКолонокСуммовыхПоказателей(ИмяНабора, СоставНаборов) Экспорт
	
	ИспользованиеКолонок = Новый Соответствие;
	
	Для Каждого Набор Из СоставНаборов Цикл
		
		Если Набор.Ключ = ИмяНабора Тогда
			
			// Включим использование полей этого набора
			Для Каждого ИмяКолонки Из Набор.Значение Цикл
				ИспользованиеКолонок.Вставить(ИмяКолонки, Истина);
			КонецЦикла;
			
		Иначе
			
			// Отключим использование полей этого набора, кроме тех, что входят в переданный набор (включены в ИспользованиеКолонок ранее)
			Для Каждого ИмяКолонки Из Набор.Значение Цикл
				Если ИспользованиеКолонок[ИмяКолонки] = Неопределено Тогда
					ИспользованиеКолонок.Вставить(ИмяКолонки, Ложь);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИспользованиеКолонок;
	
КонецФункции
	
// Настраивает использование колонок суммовых показателей.
//
// Параметры:
//  КомпоновщикНастроек	 - КомпоновщикНастроек - настраиваемый объект.
//  ИспользованиеКолонок - Соответствие - см. ИспользованиеКолонокСуммовыхПоказателей.
//
Процедура НастроитьИспользованиеКолонокСуммовыхПоказателей(КомпоновщикНастроек, ИспользованиеКолонок) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Направление", "Колонки");
	
	Колонки = Новый Массив;
	БухгалтерскиеОтчеты.НайтиГруппировкиТаблицы(Колонки, КомпоновщикНастроек.Настройки.Структура, Отбор);
	
	Для Каждого Колонка Из Колонки Цикл
		
		Использовать = ИспользованиеКолонок[Колонка.Имя];
		
		Если Использовать = Неопределено Тогда
			Продолжить;
		ИначеЕсли Использовать Тогда
			Колонка.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
		Иначе
			Колонка.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасширенныйПервыйНалоговыйПериод

// Позволяет указать вариант расширенного первого налогового периода, применимый к этому отчету.
//
// Параметры:
//  МанифестОтчета - Структура - см. БухгалтерскиеОтчеты.ПараметрыИсполненияОтчета
//  ВариантРасширенногоПервогоНалоговогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - 
//   Устанавливаемый вариант.
//   По умолчанию применяется РегистрацияВДекабре для плательщиков налога на прибыль - то есть,
//   предполагается что обычно справка-расчет раскрывает данные об уплате налога.
//   Можно указать 
//    * РегистрацияВПоследнемКвартале - для отчетов, отражающих исключительно данные бухгалтерского учета
//    * ПустаяСсылка - если расширение периода неприменимо к отчету
//
Процедура УстановитьВариантРасширенногоПервогоНалоговогоПериода(МанифестОтчета, ВариантРасширенногоПервогоНалоговогоПериода) Экспорт
	
	МанифестОтчета.Вставить("ВариантРасширенногоПервогоНалоговогоПериода", ВариантРасширенногоПервогоНалоговогоПериода);
	
КонецПроцедуры

// Определяет вариант расширенного первого налогового периода, применимый к этому отчету.
//
// Параметры:
//  ОписаниеОтчета - Строка - имя отчета
//                 - Структура - см. БухгалтерскиеОтчеты.ПараметрыИсполненияОтчета
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода
//
Функция ВариантРасширенногоПервогоНалоговогоПериода(ОписаниеОтчета) Экспорт
	
	Возврат БухгалтерскиеОтчеты.ЗначениеПараметраИсполненияОтчета(
		ОписаниеОтчета,
		"ВариантРасширенногоПервогоНалоговогоПериода",
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
	
КонецФункции

#КонецОбласти

#Область СтандартныеОбработчики

// Обработчик события расширения формы отчета.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма, событие которой обрабатывается
//  Отказ	 - Булево - см. одноименный параметр обработчика события
//
Процедура ОбработкаПроверкиЗаполнения(Форма, Отказ) Экспорт
	
	Проверки = БухгалтерскиеОтчетыВызовСервера.СтандартныеПроверкиЗаполнения();
	Проверки.ВыборПоказателя = Ложь; // В справках-расчетах используется показатель по умолчанию
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаПроверкиЗаполнения(Форма, Отказ, Проверки);
	
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Формы // Все методы вызываются из контекста формы

Процедура ИнициализироватьФорму(Форма, Отказ, СтандартнаяОбработка, СобытияФормированияОтчета = Неопределено) Экспорт
	
	// Инициализация базовых реквизитов для общей формы.
	ЗаполнитьЗначенияСвойств(Форма, БухгалтерскиеОтчеты.БазовыеРеквизитыЗначенияПоУмолчанию());
	
	// Параметры переопределяют ранее заполненные реквизиты.
	ЗаполнитьБазовыеРеквизитыИзПараметровФормы(Форма);
	
	// Инициализация базовых реквизитов для индивидуальных форм выполняется в этом вызове:
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	// см. БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию()
	// при этом в режиме СформироватьПриОткрытии значения, заполненные выше, изменены не будут.
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьПоВсемРеквизитам(Форма);
	
	Если Форма.Параметры.СформироватьПриОткрытии = Истина Тогда // Если не передан, то значение Неопределено.
		
		СтандартнаяОбработка = Ложь;
		
		Если СправкиРасчетыКлиентСервер.ОбщаяФорма(Форма) Тогда
			// Описание длительной операции следует передать в клиентский обработчик.
			// Для этого форма должна содержать реквизит ДлительнаяОперацияПриОткрытии.
			Форма.ДлительнаяОперацияПриОткрытии = НачатьФормированиеОтчета(Форма, Истина);
			// Далее в обработчике ПриОткрытии формы отчета должен быть выполнен
			// СправкиРасчетыКлиент.НачатьОжиданиеФормированияОтчетаПриОткрытии()
		Иначе
			СтандартнаяОбработка = Ложь;
			СформироватьОтчет(Форма, СобытияФормированияОтчета); // фактически запустится в фоновом задании.
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьЗагруженныеПользовательскиеНастройки(Форма, Настройки, НастройкиГруппировок = Неопределено) Экспорт
	
	// Организация фактически применяется из настроек только, если для пользователя не установлена основная организация.
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, Настройки);
	
	БухгалтерскиеОтчеты.ИнициализироватьКомпоновщикНастроекПриЗагрузкеПользовательскихНастроек(Форма, Настройки);
	
	Если НастройкиГруппировок <> Неопределено Тогда
		ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
		ИнициализироватьГруппировки(НастройкиГруппировок, Форма.Отчет.КомпоновщикНастроек, ИмяОтчета);
	КонецЕсли;
	
	НастроитьПоВсемРеквизитам(Форма); // она же отмечает отчет неактуальным через НастроитьПоОрганизации()
	
КонецПроцедуры

#Область НастройкаПоОрганизации

// Обработчик события - изменение пользователем организации.
// Перед вызовом может требоваться контролировать, что не выбрана повторно та же самая организация - 
// см. область КонтрольПовторногоВыбораОрганизации в СправкиРасчетыКлиентСервер.
//
Процедура ОрганизацияПриИзменении(Форма) Экспорт
	
	НастроитьПоОрганизации(Форма);
	
	НастроитьОтборПоОрганизации(Форма);
	
	БухгалтерскиеОтчеты.УстановитьТекущуюСхемуКомпоновкиДанныхОтчета(Форма);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
	
КонецПроцедуры

// Обработчик события - изменение пользователем организации
//
// Расширение для отчетов поддерживающих выбор организации с обособленными подразделениями - 
// см. ПоддерживаетсяВыборВсяОрганизация()
//
// Перед вызовом может требоваться контролировать, что не выбрана повторно та же самая организация - 
// см. область КонтрольПовторногоВыбораОрганизации в СправкиРасчетыКлиентСервер.
//
Процедура ПолеОрганизацияПриИзменении(Форма) Экспорт
	
	ОбщегоНазначенияБПКлиентСервер.ОбработкаОтменыВыбораОрганизации(
		Форма.ПолеОрганизация,
		Форма.Отчет.Организация,
		Форма.Отчет.ВключатьОбособленныеПодразделения);
		
	ОрганизацияПриИзменении(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПоПериоду

// Также вызывается из обработчика оповещения через СправкиРасчетыКлиент.ВыборПериода()
//
Процедура НастроитьПериод(Форма, ТребуетсяВызовСервера) Экспорт
	
	Если ТребуетсяВызовСервера.Свойство("НастроитьНаборПоказателейОтчета") Тогда
		СправкиРасчетыКлиентСервер.НастроитьНаборПоказателейОтчета(Форма);
	ИначеЕсли ТребуетсяВызовСервера.Свойство("УстановитьСписокВыбораНабораСуммовыхПоказателей") Тогда
		СправкиРасчетыКлиентСервер.УстановитьСписокВыбораНабораСуммовыхПоказателей(
			Форма,
			ТребуетсяВызовСервера.УстановитьСписокВыбораНабораСуммовыхПоказателей);
	КонецЕсли;
	
	Если ТребуетсяВызовСервера.Свойство("НастроитьЭлементИнформацияНалоговыйПериод") Тогда
		ИнформированиеНалоговыйПериод.НастроитьЭлементИнформирования(
			Форма.Элементы,
			ТребуетсяВызовСервера.НастроитьЭлементИнформацияНалоговыйПериод,
			Форма.Элементы.Результат);
	КонецЕсли;
	
	Если ТребуетсяВызовСервера.Свойство("ОбновитьСхемуКомпоновкиДанных") Тогда
		БухгалтерскиеОтчеты.УстановитьТекущуюСхемуКомпоновкиДанныхОтчета(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Группировки

// Для использования этой части служебного программного интерфейса в модуле менеджера
// должна быть реализована ГруппировкиЗапрещенныеФункциональнымиОпциями(),
// возвращающая перечень (массив) имен группировок, запрещенных функциональными опциями.

Процедура ИнициализироватьГруппировки(НастройкиГруппировок, КомпоновщикНастроек, ИмяОтчета) Экспорт
	
	Для Каждого Группировка Из НастройкиГруппировок Цикл
		Группировка.Очистить();
	КонецЦикла;
	
	ГруппировкиЗапрещенныеФункциональнымиОпциями = Отчеты[ИмяОтчета].ГруппировкиЗапрещенныеФункциональнымиОпциями();
	
	ЗапретитьГруппировки(КомпоновщикНастроек.ПользовательскиеНастройки, ГруппировкиЗапрещенныеФункциональнымиОпциями);
	
	ЗаполнитьГруппировки(НастройкиГруппировок, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПрименитьГруппировки(ПользовательскиеНастройки, НастройкиГруппировок) Экспорт
	
	// НастройкиГруппировок хранит несколько наборов (Групп) группировок - в том виде, как они отображаются на форме.
	// Сгруппируем их по идентификаторам пользовательских настроек - т.е. так, как они хранятся в пользовательских настройках.
	// В идеале, они должны совпадать один к одному - одна табличка на форме содержит одну пользовательскую настройку, а другая - другую.
	ГруппыГруппировок = Новый Соответствие;
	Для Каждого НастройкаГруппировок Из НастройкиГруппировок Цикл
		
		Для Каждого ОписаниеГруппировки Из НастройкаГруппировок Цикл
			
			ОписаниеГруппы = ГруппыГруппировок[ОписаниеГруппировки.ИдентификаторГруппы];
			
			Если ОписаниеГруппы = Неопределено Тогда
				ОписаниеГруппы = Новый Соответствие;
				ГруппыГруппировок.Вставить(ОписаниеГруппировки.ИдентификаторГруппы, ОписаниеГруппы);
			КонецЕсли;
			
			КраткоеОписаниеГруппировки = Новый Структура;
			КраткоеОписаниеГруппировки.Вставить("Использование", ОписаниеГруппировки.Использование);
			КраткоеОписаниеГруппировки.Вставить("Индекс",        ОписаниеГруппы.Количество());
			
			ОписаниеГруппы.Вставить(ОписаниеГруппировки.Идентификатор, КраткоеОписаниеГруппировки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОписаниеГруппы Из ГруппыГруппировок Цикл
		
		Настройка = ПользовательскиеНастройки.Элементы.Найти(ОписаниеГруппы.Ключ);
		Если Настройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Разместим элементы структуры настроек в отдельной коллекции,
		// порядок элементов в которой можно поменять (он не должен соответствовать 
		// порядку в Настройка.Структура).
		// Заодно отключим все группировки. Тогда ниже достаточно будет включить нужные.
		ЭлементыГруппировки = Новый Массив;
		Для Каждого ЭлементГруппировки Из Настройка.Структура Цикл
			ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
			ЭлементыГруппировки.Добавить(ЭлементГруппировки);
		КонецЦикла;
		
		// Выстроим элементы настройки в том же порядке, что и в группировках и включим.
		Для Каждого ЭлементГруппировки Из ЭлементыГруппировки Цикл
			
			ОписаниеГруппировки = ОписаниеГруппы.Значение[ЭлементГруппировки.ИдентификаторПользовательскойНастройки];
			Если ОписаниеГруппировки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеГруппировки.Использование Тогда
				ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
			КонецЕсли;
			
			ПравильныйИндекс = ОписаниеГруппировки.Индекс;
			ТекущийИндекс    = Настройка.Структура.Индекс(ЭлементГруппировки);
			Смещение = ПравильныйИндекс - ТекущийИндекс;
			
			Если Смещение <> 0 Тогда
				Настройка.Структура.Сдвинуть(ЭлементГруппировки, Смещение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаДанныхФормаМенеджерОтчета

// Устарела. Следует использовать НачатьФормированиеОтчета()
Функция СформироватьОтчет(Форма, СобытияФормированияОтчета = Неопределено) Экспорт
	
	БухгалтерскиеОтчеты.ИнициализироватьКомпоновщикНастроекПриФормированииОтчета(Форма);
	
	Если Не Форма.ПроверитьЗаполнение() Тогда
		Возврат ПоложительныйРезультатВыполнения();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеИспользовать");
	
	ПодготовитьНастройкиВыполненияОтчета(Форма.Отчет.КомпоновщикНастроек.Настройки, Форма.ВыводитьЗаголовок, Форма.ВыводитьПодвал);
	
	ИмяОбработчикаЗаполнения = "ЗаполнитьПользовательскиеНастройкиДаннымиФормы";
	ПараметрыЗаполнения      = Неопределено;
	Если ОпределенОбработчикСобытия(СобытияФормированияОтчета, ИмяОбработчикаЗаполнения, ПараметрыЗаполнения) Тогда
	
		ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
		
		Отчеты[ИмяОтчета].ЗаполнитьПользовательскиеНастройкиДаннымиФормы(
			Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки,
			ПараметрыЗаполнения);
		
	КонецЕсли;
	
	Контекст = КонтекстФормированияОтчета(Форма);
	
	// В отличие от стандартных отчетов, справки-расчеты запускаем всегда в фоне,
	// поскольку они формируются не так часто и обычно содержат много данных
	ДлительныеОперации.ОтменитьВыполнениеЗадания(Форма.ИдентификаторЗадания);
	Форма.ИдентификаторЗадания = Неопределено;
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
		Контекст,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма));
	
	Форма.АдресХранилища       = РезультатВыполнения.АдресХранилища;
	Форма.ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОтобразитьРезультатОтчета(Форма);
	КонецЕсли;
	
	Форма.Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Устарела. Следует использовать ЗавершитьФормированиеОтчета()
Процедура ОтобразитьРезультатОтчета(Форма) Экспорт

	АдресХранилищаРезультата = Форма.АдресХранилища;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(Форма.АдресХранилища);
	Форма.Результат         = РезультатВыполнения.Результат;
	Форма.ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	Форма.ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

#Область ДлительныеОперации

// Актуальная версия API подсистемы ДлительныеОперации.

Функция НачатьФормированиеОтчета(Форма, ПриОткрытии = Ложь) Экспорт
	
	// Проверка заполнения должна быть выполнена в форме до начала формирования отчета.
	
	БухгалтерскиеОтчетыКлиентСервер.СкрытьНастройки(Форма);
	
	// В логике подсистемы бухгалтерских отчетов принято, что хранилище с данными расшифровки инициализируется до запуска фонового задания:
	// фоновое задание помещает данные расшифровки непосредственно в хранилище данных расшфировки,
	// при этом хранилище результата выполнения не содержит данных расшифровки, а содержит только их адрес.
	Если ЗначениеЗаполнено(Форма.ДанныеРасшифровки) И ЭтоАдресВременногоХранилища(Форма.ДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(Форма.ДанныеРасшифровки);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	
	Контекст = КонтекстФормированияОтчета(Форма);
	
	ПараметрыФоновогоВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыФоновогоВыполнения.НаименованиеФоновогоЗадания =
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(Форма, Контекст.ИдентификаторОтчета);
	Если ПриОткрытии Тогда
		// Для повышения отзывчивости формы сначала позволим форме отрисоваться,
		// а затем повторно обратимся на сервер за результатом отчета.
		// Суммарное время между командой и возможностью работы с отчетом будет больше,
		// но время между командой и какой-то визуальной реакцией на нее - меньше.
		ПараметрыФоновогоВыполнения.ОжидатьЗавершение = 0;
	КонецЕсли;
	ПараметрыФоновогоВыполнения.КлючФоновогоЗадания = 
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет." + Форма.УникальныйИдентификатор;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
		Контекст,
		ПараметрыФоновогоВыполнения);
		
	Если РезультатЗапуска.Статус = "Выполняется" Тогда
		// Будем ждать кота на клиенте.
		// Должна быть вызвана СправкиРасчетыКлиент.НачатьОжиданиеФормированияОтчета().
		Возврат РезультатЗапуска;
	ИначеЕсли Не СправкиРасчетыКлиентСервер.ЗавершитьФормированиеОтчета(Форма, РезультатЗапуска) Тогда
		// По каким-то причинам показывать нечего.
		Возврат Неопределено;
	Иначе
		ЗавершитьФормированиеОтчета(Форма, РезультатЗапуска.АдресРезультата);
		Возврат Неопределено; // Не надо ждать, все готово.
	КонецЕсли;
	
КонецФункции

Процедура ЗавершитьФормированиеОтчета(Форма, АдресРезультата) Экспорт
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	Форма.Результат         = РезультатВыполнения.Результат;
	Форма.ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ФормированиеРезультатаОтчета // Все методы вызываются из модулей менеджеров отчетов (без контекста формы, на сервере)

#Область Шапка

Функция ЗаголовокОтчета(Контекст) Экспорт
	
	ПредставлениеПериодаСПримечанием = Контекст.ПредставлениеПериода;
	ДополнитьПериодОтчетаПримечанием(ПредставлениеПериодаСПримечанием, Контекст);
	
	ПредставлениеПоказателей = "";
	Если Контекст.Свойство("НазваниеНабораСуммовыхПоказателей") Тогда
		ПредставлениеПоказателей = Контекст.НазваниеНабораСуммовыхПоказателей;
	КонецЕсли;
	
	Возврат СправкиРасчетыКлиентСервер.ТекстЗаголовка(
		СинонимОтчета(Контекст),
		ПредставлениеПериодаСПримечанием,
		"",
		ПредставлениеПоказателей);
	
КонецФункции

// Выводит шапку отчета.
//
// Параметры:
//  Результат		 - ТабличныйДокумент - табличный документ, в который выводится отчет
//  Контекст		 - Структура - см. КонтекстФормированияОтчета
//  ФиксироватьШапку - Булево - Истина, если результат содержит в явном виде шапку отчета, которую можно зафиксировать.
//                              При вызове ФиксироватьШапку может потребоваться из ПослеКомпоновкиМакета()
//                              вызвать ДобавитьФиксациюПервойТаблицы(), если шапка отчета нарисована в макетах схемы.
//                              Необходимость использовать явную фиксацию связана с тем, что автоматическая фиксация средствами СКД
//                              в режиме совместимости с версией 8.3.11 не выполняется, если задан предопределенный макет заголовка.
//                              
//
Процедура ВывестиШапкуОтчета(Результат, Контекст, ФиксироватьШапку = Ложь) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	
	// Организация
	ОбластьВывода = Макет.ПолучитьОбласть("Организация");
	ОбластьВывода.Параметры.НазваниеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
		Контекст.Организация,
		Контекст.ВключатьОбособленныеПодразделения);
	Результат.Вывести(ОбластьВывода);
	
	// Название отчета
	ОбластьВывода = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьВывода.Параметры.ЗаголовокОтчета = ЗаголовокОтчета(Контекст);
	Результат.Вывести(ОбластьВывода);
	
	// Организация и название образуют заголовок
	ОбластьЗаголовка = Результат.Область(1, , Результат.ВысотаТаблицы);
	ОбластьЗаголовка.Имя = "Заголовок";
	
	// Единица измерения
	Если Контекст.Свойство("ВыводитьЕдиницуИзмерения")
		И Контекст.ВыводитьЕдиницуИзмерения Тогда
		// Единица измерения - рубль
		ОбластьВывода = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьВывода);
	КонецЕсли;
	
	Если ФиксироватьШапку Тогда
		Контекст.ВыполнениеОтчета.Вставить("ФиксацияШапки", Результат.ВысотаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет количество строк шапки, определенной макетом схемы, для фиксации высоты первой таблицы.
// Вызывается из обработчика ПослеКомпоновкиМакета().
//
// Параметры:
//  Контекст		 - Структура - см. КонтекстФормированияОтчета
//  МакетКомпоновки	 - МакетКомпоновкиДанных - скомпонованный макет
//
Процедура ДобавитьФиксациюПервойТаблицы(Контекст, МакетКомпоновки) Экспорт
	
	Если Не Контекст.ВыполнениеОтчета.Свойство("ФиксацияШапки") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл
		
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			
			КоличествоСтрокМакета = МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество();
			
			Контекст.ВыполнениеОтчета.ФиксацияШапки = Контекст.ВыполнениеОтчета.ФиксацияШапки + КоличествоСтрокМакета;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Графы // (Номера граф)

// Определяет имена макетов областей макета компоновки данных,
// которые используются для вывода заголовка таблицы (заголовка строк и заголовков колонок).
//
// Макеты областей содержат декларативное описание того, как именно выводятся данные:
// тексты, параметры и оформление будущих ячеек табличного документа.
// Они размещены в свойстве Макеты макета компоновки.
//
// Параметры:
//  МакетКомпоновки	 - МакетКомпоновкиДанных - макет компоновки.
// 
// Возвращаемое значение:
//  Соответствие - описание макетов
//   * Ключ - имя макета;
//   * Значение - имя колонки или служебное имя для заголовка строк.
//
Функция НайтиМакетыЗаголовкаТаблицы(МакетКомпоновки) Экспорт
	
	МакетыЗаголовка = Новый Соответствие;
	
	Для Каждого ТелоТаблицы Из МакетКомпоновки.Тело Цикл
		
		// Обходим элементы, выводимые на верхнем уровне.
		// В справках-расчетах это, обычно, одна или несколько таблиц.
		// Пока умеем обратывать только одну (первую) таблицу.
		
		Если ТипЗнч(ТелоТаблицы) <> Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		// Макет шапки тела таблицы - это макет заголовка строк.
		МакетыЗаголовка.Вставить(ТелоТаблицы.МакетШапки, СлужебноеИмяЗаголовкиСтрок());
		
		// Описание макетов колонок хранится универсальной древовидной коллекцией тел.
		Для Каждого ОписаниеКолонки Из ТелоТаблицы.Колонки Цикл
			
			Если ТипЗнч(ОписаниеКолонки) <> Тип("ГруппировкаТаблицыМакетаКомпоновкиДанных") Тогда
				// Коллекция универсальная и теоретически может содержать значения других типов
				Продолжить;
			КонецЕсли;
			
			// Набор свойств колонки хранится в линейном списке "тел" разных типов.
			// Нам нужно то "тело", что хранит описание макетов.
			Для Каждого ОписаниеМакетовОбластей Из ОписаниеКолонки.Тело Цикл
				
				Если ТипЗнч(ОписаниеМакетовОбластей) <> Тип("МакетГруппировкиТаблицыМакетаКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				МакетыЗаголовка.Вставить(ОписаниеМакетовОбластей.Макет, ОписаниеКолонки.Имя);
				
				Прервать; // Должно быть только одно описание.
				
			КонецЦикла;
			
		КонецЦикла;
		
		Прервать; // Пока умеем обрабатывать только одну таблицу.
		
	КонецЦикла;
	
	Возврат МакетыЗаголовка;

КонецФункции

// Пририсовывает к макетам заголовка таблицы строки, в которых выводятся номера граф отчета.
// 
// Чтобы это работало, состав полей внутри именованной колонки должен быть фиксированным.
// Если необходима вариативность (т.е. возможность выводить не все поля), то вариативные поля следует помещать в отдельные именованные колонки,
// которые включаются или отключаются целиком.
//
Процедура НастроитьГрафыОтчета(МакетКомпоновки, ГрафыОтчета, РазмещениеМакетовЗаголовкаТаблицы = Неопределено) Экспорт
	
	Если РазмещениеМакетовЗаголовкаТаблицы = Неопределено Тогда
		РазмещениеМакетовЗаголовкаТаблицы = НайтиМакетыЗаголовкаТаблицы(МакетКомпоновки);
	КонецЕсли;
	
	Для Каждого ОписаниеМакетаОбласти Из РазмещениеМакетовЗаголовкаТаблицы Цикл
		
		МакетЗаголовка = МакетКомпоновки.Макеты.Найти(ОписаниеМакетаОбласти.Ключ);
		
		Если МакетЗаголовка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонки = ОписаниеМакетаОбласти.Значение;
		
		ИменаГрафОтчета = ГрафыОтчета[ИмяКолонки];
		Если ТипЗнч(ИменаГрафОтчета) <> Тип("Массив") Тогда
			ИменаГрафОтчета = Новый Массив;
		КонецЕсли;
		
		// Дополним макет строкой с номерами граф.
		Если Не ЗначениеЗаполнено(МакетЗаголовка.Макет) Тогда
			// Странно, но нет ни одной строки.
			Продолжить;
		КонецЕсли;
		
		ЭталоннаяСтрока = МакетЗаголовка.Макет[0];
		
		НоваяСтрока = МакетЗаголовка.Макет.Добавить(Тип("СтрокаТаблицыОбластиКомпоновкиДанных"));
		// Это свойство не описано в документации, но можно предположить, что у всех строк заголовка таблицы идентификатор таблицы должен быть одинаковым.
		НоваяСтрока.ИдентификаторТаблицы = ЭталоннаяСтрока.ИдентификаторТаблицы;
		
		// Макет описывает прямоугольную область, поэтому во всех строках должно быть одинаковое количество ячеек (ячейки могут быть объединены).
		// Каждая ячейка соответствует отдельной графе, в порядке, заданном в настройках схемы.
		Для Каждого ЭталоннаяЯчейка Из ЭталоннаяСтрока.Ячейки Цикл
			
			НоваяЯчейка = НоваяСтрока.Ячейки.Добавить();
			
			// У каждой ячейки будет свой текст (имя графы).
			НоваяЯчейка.Оформление.УстановитьЗначениеПараметра(
				"ОбъединятьПоГоризонтали",
				Ложь);
			
			// Имена граф всегда выводятся по центру, несмотря на выравнивание остального текста.
			НоваяЯчейка.Оформление.УстановитьЗначениеПараметра(
				"ГоризонтальноеПоложение",
				ГоризонтальноеПоложение.Центр);
				
			// Остальное оформление - как в эталоне.
			ДополнитьОформлениеЯчейкиТаблицыОбластиКомпоновкиДанных(НоваяЯчейка, ЭталоннаяЯчейка);
				
			// В ячейке выводим имя графы.
			ИндексГрафыВКолонке = НоваяСтрока.Ячейки.Индекс(НоваяЯчейка);
			Если ИндексГрафыВКолонке > ИменаГрафОтчета.ВГраница() Тогда
				// Графа не имеет имени.
				ИмяГрафы = "";
			Иначе
				ИмяГрафы = ИменаГрафОтчета[ИндексГрафыВКолонке];
			КонецЕсли;
			
			Поле = НоваяЯчейка.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			Поле.Значение = ИмяГрафы;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СлужебноеИмяЗаголовкиСтрок() Экспорт
	
	Возврат "*";
	
КонецФункции

#КонецОбласти

#Область Примечания // (Сноски)

Функция ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Экспорт
	
	Возврат Не ПустаяСтрока(Контекст.ИнформацияНалоговыйПериод);
	
КонецФункции

Процедура ДополнитьПериодОтчетаПримечанием(ПредставлениеПериода, Контекст, НомерПримечания = 1) Экспорт
		
	Если Не ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьСловоСсылкойНаПримечание(ПредставлениеПериода, НомерПримечания);
	
КонецПроцедуры

#КонецОбласти

// Выполняет окончательные оформительские действия над табличным документом, полученным в результате выполнения отчета.
//
// Параметры:
//  Результат                  - ТабличныйДокумент - табличный документ, содержащий результат отчета.
//  Контекст                   - Структура - см. КонтекстФормированияОтчета
//  СодержитОднуБольшуюТаблицу - Булево - Истина, если отчет представляет собой одну таблицу
//                               с большим числом строк и значительным числом колонок,
//                               либо первая таблица такая, а все, кроме первой -
//                               вспомогательные, имеют заведомо небольшое количество строк и колонок.
// 
// Возвращаемое значение:
//  Число - счетчик примечаний, добавленных в результат отчета.
//
Функция ОформитьРезультатОтчета(Результат, Контекст, СодержитОднуБольшуюТаблицу = Ложь) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(Контекст.ИдентификаторОтчета, Результат);
	
	СчетчикПримечаний = 0;
	
	Если ТребуетсяДополнитьПериодОтчетаПримечанием(Контекст) Тогда
		
		СправкиРасчеты.ДобавитьПримечание(Результат, Контекст.ИнформацияНалоговыйПериод, СчетчикПримечаний);
		
	КонецЕсли;
	
	УстановитьФиксациюСверху(Результат, Контекст.ВыполнениеОтчета, СодержитОднуБольшуюТаблицу);
	
	Если Не СодержитОднуБольшуюТаблицу Тогда
		
		// Справка-расчет обычно содержит заведомо небольшое количество выводимых колонок, поэтому фиксация слева избыточна:
		// пользы от нее нет, а выглядит некрасиво, может пересекать заголовок и подписи.
		Результат.ФиксацияСлева = 0;
	
	КонецЕсли;
	
	Возврат СчетчикПримечаний;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

Процедура НастроитьПоВсемРеквизитам(Форма)
	
	НастроитьПоОрганизации(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьБазовыеРеквизитыИзПараметровФормы(Форма)
	
	КопируемыеПараметры = Новый Массив;
	КопируемыеПараметры.Добавить("НачалоПериода");
	КопируемыеПараметры.Добавить("КонецПериода");
	КопируемыеПараметры.Добавить("Организация");
	
	БазовыеРеквизиты = СправкиРасчетыКлиентСервер.БазовыеРеквизиты(Форма);
	
	Для Каждого ИмяПараметра Из КопируемыеПараметры Цикл
		
		ЗначениеПараметра = Неопределено;
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(БазовыеРеквизиты, ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Форма.Параметры.Свойство(ИмяПараметра, ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		БазовыеРеквизиты[ИмяПараметра] = ЗначениеПараметра;
		
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(БазовыеРеквизиты, "НаборПоказателейОтчета")
		И Форма.Параметры.Свойство("ВидРегламентнойОперации")
		И ЗначениеЗаполнено(Форма.Параметры.ВидРегламентнойОперации) Тогда
		
		СправкиРасчетыКлиентСервер.УточнитьНаборСуммовыхПоказателейОтчетаПоВидуОперации(
			БазовыеРеквизиты.НаборПоказателейОтчета,
			БухгалтерскиеОтчеты.ИмяОтчета(Форма),
			Форма.Параметры.ВидРегламентнойОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПоОрганизации(Форма)
	
	СправкиРасчетыКлиентСервер.ОтметитьОтчетНеАктуальный(Форма);
	
	Организация = СправкиРасчетыКлиентСервер.Организация(Форма);
	
	ПоддерживаетсяВыборВсяОрганизация = СправкиРасчетыКлиентСервер.ОтчетПоддерживаетВыборВсяОрганизация(Форма);
	
	Если Не ПоддерживаетсяВыборВсяОрганизация Тогда
		
		Форма.ПредставлениеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
			Организация,
			Ложь);
		
		СправкиРасчетыКлиентСервер.УстановитьОрганизацияПредыдущееЗначение(
			Форма,
			Организация);
		
	Иначе
			
		Отчет = Форма.Отчет;// В этом режиме - отдельная форма отчета
	
		// Используется реквизит формы СоответствиеОрганизаций, заполняемый при инициализации формы подсистемой БухгалтерскиеОтчеты
		// Несмотря на свое название, он имеет тип Структура.
		
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			Форма.ПолеОрганизация, // магический ключ из СоответствиеОрганизаций
			Организация,
			Отчет.ВключатьОбособленныеПодразделения);
		
		Форма.ПредставлениеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
			Организация,
			Отчет.ВключатьОбособленныеПодразделения);
			
		СправкиРасчетыКлиентСервер.УстановитьОрганизацияПредыдущееЗначение(Форма, Форма.ПолеОрганизация);
		
	КонецЕсли;
	
	// От организации может зависеть особенность определения периода отчета.
	Форма.ДатаРегистрацииОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	СправкиРасчетыКлиентСервер.НастроитьДиалогВыбораПериода(Форма);
	
	// Определим начало периода отчета.
	ИмяОтчета = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	ИнформацияНалоговыйПериод = СправкиРасчетыКлиентСервер.ОпределитьПериодОтчета(Форма, Истина, ИмяОтчета);
	
	// Отобразим информацию о налоговом периоде
	ИнформированиеНалоговыйПериод.НастроитьЭлементИнформирования(
		Форма.Элементы,
		ИнформацияНалоговыйПериод,
		Форма.Элементы.Результат);
	
	СправкиРасчетыКлиентСервер.НастроитьНаборПоказателейОтчета(Форма);
	
КонецПроцедуры

Процедура НастроитьОтборПоОрганизации(Форма)
	
	Если Не БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// В СправкиРасчеты.НастроитьОтборПоОрганизации() при смене организации очищаются значения
	// полей отбора, которые могут не соответствовать организации.
	// Это действие подсистема БухгалтерскиеОтчеты выполняет без фактического контроля,
	// соответствуют они или нет.
	
	Организация = СправкиРасчетыКлиентСервер.Организация(Форма);
	БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма, Организация);
	
КонецПроцедуры

#КонецОбласти

#Область Группировки

Функция ПользовательскиеГруппировки(ПользовательскиеНастройки)
	
	ПользовательскиеГруппировки = Новый Массив;
	
	Для Каждого Настройка Из ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(Настройка) <> Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Настройка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательскиеГруппировки.Добавить(Настройка);
			
	КонецЦикла;
	
	Возврат ПользовательскиеГруппировки;

КонецФункции

Процедура ЗапретитьГруппировки(ПользовательскиеНастройки, ЗапрещенныеГруппировки)
	
	Для Каждого Настройка Из ПользовательскиеГруппировки(ПользовательскиеНастройки) Цикл
		
		Для Каждого ЭлементГруппировки Из Настройка.Структура Цикл
			
			Если ТипЗнч(ЭлементГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЭлементГруппировки.Использование
				Или ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.УдаленПользователем Тогда
				Продолжить;
			КонецЕсли;
			
			// Соглашение: в одной группировке нет и запрещенных и разрешенных
			// Это важно, чтобы проще сохранять пользовательские настройки
			Запрещена = Ложь;
			Для Каждого ПолеГруппировки Из ЭлементГруппировки.ПоляГруппировки.Элементы Цикл
				
				Если Не ПолеГруппировки.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗапрещенныеГруппировки.Найти(БухгалтерскиеОтчетыКлиентСервер.КореньПоля(ПолеГруппировки.Поле)) <> Неопределено Тогда
					Запрещена = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Запрещена Тогда
				ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.УдаленПользователем;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьГруппировки(НастройкиГруппировок, КомпоновщикНастроек)
	
	// Настроек группировок может быть несколько (это массив)
	// Разным элементам этого массива соответствуют разные пользовательские группировки
	// Предполагаем, что пользовательские группировки в коллекции пользовательских настроек всегда идут в правильном порядке - 
	// от более общего ("шапки") к более частному ("таблице").
	
	Если Не ЗначениеЗаполнено(НастройкиГруппировок) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскиеГруппировки = ПользовательскиеГруппировки(КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Для ИндексГруппировки = 0 По ПользовательскиеГруппировки.ВГраница() Цикл
		
		Настройка = ПользовательскиеГруппировки[ИндексГруппировки];
		Если ИндексГруппировки > НастройкиГруппировок.ВГраница() Тогда
			// На случай, если в пользовательских настройках окажется больше настроек группировок,
			// чем полей на форме.
			НастройкаГруппировок = НастройкиГруппировок[0];// Сложим в первую
		Иначе
			НастройкаГруппировок = НастройкиГруппировок[ИндексГруппировки];
		КонецЕсли;
		
		Для Каждого ЭлементГруппировки Из Настройка.Структура Цикл
			
			Если ТипЗнч(ЭлементГруппировки) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЭлементГруппировки.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.УдаленПользователем Тогда
				// Запрещен
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ЭлементГруппировки.ИдентификаторПользовательскойНастройки) Тогда
				ЭлементГруппировки.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			// Ищем поля компоновки, чтобы заполнить таблицу настроек группировок
			ПолеГруппировки = Неопределено;
			Для Каждого ПолеГруппировки Из ЭлементГруппировки.ПоляГруппировки.Элементы Цикл
				
				Если Не ПолеГруппировки.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Прервать;
			КонецЦикла;
			
			Если ПолеГруппировки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(ПолеГруппировки.Поле);
			
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НастройкаГруппировок.Добавить();
			
			НоваяСтрока.Использование       = (ЭлементГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен);
			НоваяСтрока.Представление       = ДоступноеПоле.Заголовок;
			НоваяСтрока.Идентификатор       = ЭлементГруппировки.ИдентификаторПользовательскойНастройки;
			НоваяСтрока.ИдентификаторГруппы = Настройка.ИдентификаторПользовательскойНастройки;
			НоваяСтрока.Имя                 = Строка(ДоступноеПоле.Поле);
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаДанныхФормаМенеджерОтчета

Функция КонтекстФормированияОтчета(Форма)
	
	ИдентификаторОтчета = БухгалтерскиеОтчеты.ИмяОтчета(Форма);
	
	// Инициализация коллекции
	Контекст = Новый Структура;
	Контекст.Вставить("ИдентификаторОтчета",       ИдентификаторОтчета);
	
	Контекст.Вставить("СхемаКомпоновкиДанных",     СхемаКомпоновкиДанныхОтчета(Форма));
	Контекст.Вставить("НастройкиКомпоновкиДанных", Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	Контекст.Вставить("ДанныеРасшифровки",         Форма.ДанныеРасшифровки);
	
	БазовыеРеквизиты = СправкиРасчетыКлиентСервер.БазовыеРеквизиты(Форма);
	Контекст.Вставить("Организация",               БазовыеРеквизиты.Организация);
	Контекст.Вставить("НачалоПериода",             БазовыеРеквизиты.НачалоПериода);
	Контекст.Вставить("КонецПериода",              БазовыеРеквизиты.КонецПериода);
	
	Контекст.Вставить("ПредставлениеПериода",      Форма.ПредставлениеПериодаЗаголовок);
	Контекст.Вставить("ИнформацияНалоговыйПериод", ""); // может быть заполнено ниже
	
	// могут быть уточнены ниже
	Контекст.Вставить("МакетОформления",                   БухгалтерскиеОтчетыКлиентСервер.ИмяМакетаОформленияПоУмолчанию());
	Контекст.Вставить("РежимРасшифровки",                  Ложь);
	Контекст.Вставить("ВключатьОбособленныеПодразделения", Ложь);  
	Контекст.Вставить("ВыводитьЕдиницуИзмерения",          Истина);
	Контекст.Вставить("ОтветственноеЛицо",                 Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	
	Контекст.Вставить("ВыполнениеОтчета", Новый Структура);// сведения, которые обработчики формирования отчета передают друг другу
	
	ДоступныеНаборыСуммовыхПоказателей = ДоступныеПользователюНаборыСуммовыхПоказателей(
		ИдентификаторОтчета,
		Контекст.НачалоПериода,
		Контекст.КонецПериода,
		Контекст.Организация);

	Если ДоступныеНаборыСуммовыхПоказателей <> Неопределено Тогда
		
		Контекст.Вставить("НаборПоказателей",   Новый Массив); // Все показатели, поддерживаемые отчетом
		Контекст.Вставить("ПоказательБУ",       Ложь);
		Контекст.Вставить("ПоказательНУ",       Ложь);
		Контекст.Вставить("ПоказательПР",       Ложь);
		Контекст.Вставить("ПоказательВР",       Ложь);
		Контекст.Вставить("ПоказательСверкаНУ", Ложь);
		Контекст.Вставить("НомерНабораСуммовыхПоказателей",    0);
		Контекст.Вставить("НазваниеНабораСуммовыхПоказателей", "");
		Контекст.Вставить("СоставНабораПоказателей",           Новый Массив); // Показатели выбранного набора, поддерживаемые отчетом
		
	КонецЕсли;
	
	// Настройка данными формы
	Если СправкиРасчетыКлиентСервер.ОтчетПоддерживаетВыборВсяОрганизация(Форма) Тогда
		Контекст.ВключатьОбособленныеПодразделения = Форма.Отчет.ВключатьОбособленныеПодразделения;
	КонецЕсли;
	
	ДополнительныеНастройкиФормы = Новый Структура("МакетОформления, ВыводитьЕдиницуИзмерения");
	ЗаполнитьЗначенияСвойств(ДополнительныеНастройкиФормы, Контекст); // значения по умолчанию
	ЗаполнитьЗначенияСвойств(ДополнительныеНастройкиФормы, Форма);    // значения, заданные в форме - при наличии
	ЗаполнитьЗначенияСвойств(Контекст, ДополнительныеНастройкиФормы);
	
	Если Форма.Отчет.Свойство("РежимРасшифровки") Тогда
		Контекст.РежимРасшифровки = Форма.Отчет.РежимРасшифровки;
	КонецЕсли;
	
	Если ДоступныеНаборыСуммовыхПоказателей <> Неопределено Тогда
		
		// Под НаборПоказателей понимается перечень суффиксов, например "БУ" или "ВР".
		// Не всегда этот набор можно получить исходя из числового номера набора,
		// так как в некоторых отчетах поддерживаются только постоянные разницы или только временные.
		Контекст.НаборПоказателей = Отчеты[ИдентификаторОтчета].ПолучитьНаборПоказателей();
		
		Если Контекст.НаборПоказателей.Количество() > 1
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Отчет, "НаборПоказателейОтчета") Тогда
			// Форма отчета должна предусматривать выбор набора показателей.
			// Выбранный набор передается через свойство отчета НаборПоказателейОтчета.
			// В зависимости от применяемой системы налогообложения и учетной политики некоторые наборы могут быть отключены.
			Контекст.НомерНабораСуммовыхПоказателей = Форма.Отчет.НаборПоказателейОтчета;
		КонецЕсли;
		
		СправкиРасчетыКлиентСервер.ИсправитьНаборСуммовыхПоказателей(
			Контекст.НомерНабораСуммовыхПоказателей,
			ДоступныеНаборыСуммовыхПоказателей);
			
		Если ДоступныеНаборыСуммовыхПоказателей.Количество() > 1 Тогда
			Контекст.НазваниеНабораСуммовыхПоказателей = СправкиРасчетыКлиентСервер.НазваниеНабораСуммовыхПоказателей(
				Контекст.НомерНабораСуммовыхПоказателей);
		КонецЕсли;
			
		СправкиРасчетыКлиентСервер.УстановитьСоставНабораСуммовыхПоказателей(Контекст, Контекст.НомерНабораСуммовыхПоказателей);
		
		Если СправкиРасчетыКлиентСервер.ЭтоНаборСуммовыхПоказателейНалоговыйУчет(Контекст.НомерНабораСуммовыхПоказателей) Тогда
			Контекст.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры;
		КонецЕсли;
		
		Для Каждого СуффиксПоказателя Из Контекст.НаборПоказателей Цикл
			ИмяВыключателя = "Показатель" + СуффиксПоказателя;
			Если Не Контекст[ИмяВыключателя] Тогда
				Продолжить;
			КонецЕсли;
			Контекст.СоставНабораПоказателей.Добавить(СуффиксПоказателя);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СправкиРасчетыКлиентСервер.ОтчетЗаЦелыйНалоговыйПериод(Форма) Тогда
		
		ИнформацияНалоговыйПериод = Неопределено;
		
		ВариантНалоговогоПериода = ВариантРасширенногоПервогоНалоговогоПериода(ИдентификаторОтчета);
		Если НалоговыйУчет.ПрименяютсяПравилаРасширенногоНалоговогоПериода(ВариантНалоговогоПериода)
			И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Контекст.Организация, Контекст.КонецПериода) Тогда
			
			ИнформацияНалоговыйПериод = НалоговыйУчет.ИнформацияНалоговыйПериод(Контекст.КонецПериода, Контекст.Организация);
			
		ИначеЕсли БухгалтерскийУчет.ПрименяютсяПравилаРасширенногоНалоговогоПериода(ВариантНалоговогоПериода) Тогда
		
			ИнформацияНалоговыйПериод = БухгалтерскийУчет.ИнформацияОтчетныйПериод(Контекст.КонецПериода, Контекст.Организация);
			
		КонецЕсли;
		
		Если ИнформацияНалоговыйПериод <> Неопределено Тогда
			Контекст.ИнформацияНалоговыйПериод = ИнформацияНалоговыйПериод.Заголовок;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции

Функция ПоложительныйРезультатВыполнения()
	
	Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	
КонецФункции

Процедура ПодготовитьНастройкиВыполненияОтчета(Настройки, ВыводитьЗаголовок, ВыводитьПодвал)
	
	Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмСобытий

Функция ОпределенОбработчикСобытия(СобытияФормированияОтчета, ИмяСобытия, ПараметрыСобытия)
	
	Если ТипЗнч(СобытияФормированияОтчета) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СобытияФормированияОтчета.Свойство(ИмяСобытия, ПараметрыСобытия);
		
КонецФункции

#КонецОбласти

#Область ФормированиеРезультатаОтчета

Функция СинонимОтчета(Контекст)
	
	// В отличие от используемого в форме названия варианта, синоним отчета включает слова "Справка-расчет"
	
	Возврат Метаданные.Отчеты[Контекст.ИдентификаторОтчета].Синоним;
	
КонецФункции

// Устанавливает фиксацию таблицы сверху, если это необходимо.
//
// Параметры:
//  Результат                  - ТабличныйДокумент - табличный документ, содержащий фиксируемую таблицу.
//  ВыполнениеОтчета           - Структура - сведения, которые обработчики формирования отчета передают друг другу.
//  СодержитОднуБольшуюТаблицу - Булево - Истина, если отчет представляет собой одну таблицу с большим числом строк,
//                               либо первая таблица такая, а все, кроме первой -
//                               вспомогательные, имеют заведомо небольшое количество строк и колонок.
//
Процедура УстановитьФиксациюСверху(Результат, ВыполнениеОтчета, СодержитОднуБольшуюТаблицу)
	
	Если ВыполнениеОтчета.Свойство("ФиксацияШапки") Тогда
		Результат.ФиксацияСверху = ВыполнениеОтчета.ФиксацияШапки;
	ИначеЕсли Не СодержитОднуБольшуюТаблицу Тогда
		// Справка-расчет обычно содержит повторяющиеся таблицы, поэтому фиксация сверху неприменима.
		Результат.ФиксацияСверху = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОформлениеЯчейкиТаблицыОбластиКомпоновкиДанных(НоваяЯчейка, ЭталоннаяЯчейка)
	
	Для Каждого ЭлементОформленияЭталон Из ЭталоннаяЯчейка.Оформление.Элементы Цикл
		
		Если Не ЭлементОформленияЭталон.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрОформления = ЭлементОформленияЭталон.Параметр;
		
		ЗначениеЭлементаОформления = НоваяЯчейка.Оформление.НайтиЗначениеПараметра(ПараметрОформления);
		Если ЗначениеЭлементаОформления <> Неопределено И ЗначениеЭлементаОформления.Использование Тогда
			// определено у новой ячейки
			Продолжить;
		КонецЕсли;
		
		НоваяЯчейка.Оформление.УстановитьЗначениеПараметра(ПараметрОформления, ЭлементОформленияЭталон.Значение);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область КешПодсистемыБухгалтерскиеОтчеты

Функция СхемаКомпоновкиДанныхОтчета(Форма)
	
	ОтчетКешируетСхемуКомпоновки = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма,
		"СхемаКомпоновкиДанных");
		
	Если ОтчетКешируетСхемуКомпоновки Тогда
		Возврат ПолучитьИзВременногоХранилища(Форма.СхемаКомпоновкиДанных);
	Иначе
		ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
		Возврат ОтчетОбъект.СхемаКомпоновкиДанных;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
