#Область Описание
// Содержит общие методы работы с шиной мобильных приложений.
//
// Шина позволяет
// - регистрировать пользователей мобильного приложения, не являющихся пользователями программы,
//   предоставляя им коды доступа
// - опосредованно передавать сообщения между мобильным приложением и программой.
//
// Работа с конкретными мобильными приложениями описывается в отдельных объектах ("менеджерах приложений").
// В качестве менеджера может быть общий модуль или объект метаданных, имеющий модуль менеджера.
// 
// Перечень подключенных приложений (менеджеров приложений) приводится в ЗаполнитьМенеджерыПриложений.
// Каждый менеджер должен предоставлять пять методов:
//
// 1. Функция ИмяМобильногоПриложения()
//    Возвращает строку - имя мобильного приложения в шине.
//
// 2. Функция ИнтервалПроверкиСообщений()
//    Возвращает число секунд - интервал проверки (опроса), есть ли новые сообщения в шине.
//    См. НачатьПроверкуСообщенийПоАктивностиПользователя
//
// 3. Процедура ОбработатьСообщениеШиныМобильныхПриложений(Отправитель, Сообщение)
//    Выполняет прикладные действия с сообщением, полученным из мобильного приложения.
//    Как правило, суть этих действий - записать полученные данные в информационную базу.
//    После выполнения метода данные будут удалены из шины, поэтому при невозможности их сохранить
//    - если проблема временная, следует вызвать исключение
//    - в остальных случаях - сохранить данные для дальнейшего разбора, в частности, методами 
//      из области ЗаписьОтладочнойИнформации
//    
//    Параметры:
//      Отправитель        - Строка - код доступа пользователя, отсканировавшего QR-код
//      Сообщение          - Структура - данные, отправленные мобильным приложением
//
// Для работы шины следует подключить ее к механизмам БСП и БТС - см. Область ПодключениеПодсистем
//
#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область КодыДоступа

// Конструктор коллекции, описывающей код доступа к мобильному приложению.
//
// Код доступа может быть получен в 1С:Бухгалтерии, затем он должен быть передан
// пользователю мобильного приложения и введен в мобильное приложение.
// После ввода кода доступа конкретный экземпляр мобильного приложения (в который введен код)
// и область 1С:Бухгалтерии (в которой был получен код) могут обмениваться сообщениями.
// 
// Длина кода доступа выбирается так, чтобы его было не сложно ввести, но достаточно сложно подобрать.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйКодДоступа() Экспорт
	
	КодДоступа = Новый Структура;
	
	КодДоступа.Вставить("Код",           ""); // Для использования при машинной обработке
	КодДоступа.Вставить("Представление", ""); // Для передачи пользователю
	
	Возврат КодДоступа;
	
КонецФункции

// Предоставляет новый код доступа в мобильное приложение.
// Этот код позволяет
// - начать использовать мобильное приложение
// - идентифицировать пользователя мобильного приложения при обмене сообщениями.
//
// Полученный код следует сохранить в информационной базе, а его представление выдать пользователю.
//
// Параметры:
//  Приложение      - Строка - имя приложения в шине
//  НачальныеДанные - Структура - произвольные данные, которые будут доставлены в мобильное приложение
//                    (будут доступны мобильному приложению после того, как пользователь введет в него код доступа).
//                    Например, это может быть информация о предприятии, из информационной базы которого выдан код доступа,
//                    либо о лице, которому он выдан.
//                    Структура должна быть сериализуемой в JSON и не должна содержать вложенные соответствия.
// 
// Возвращаемое значение:
//  Структура - см. ШинаМобильныхПриложений.НовыйКодДоступа
//  Неопределено - не удалось предоставить код
//
Функция КодДоступа(Приложение, НачальныеДанные) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("НачальныеДанные", НачальныеДанные);
	
	ОтветСервиса = ВыполнитьМетодСервиса(Подключение, "POST", "User", Запрос);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Регистрация кода доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	КодДоступа = НовыйКодДоступа();
	КодДоступа.Код           = ОтветСервиса.Содержимое.Ключ;
	КодДоступа.Представление = ОтветСервиса.Содержимое.ПредставлениеКлюча;
	
	Возврат КодДоступа;
	
КонецФункции

// Удаляет (отзывает) код доступа: после вызова метода код нельзя использовать для передачи сообщений.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//  КодДоступа - Строка - сохраняемый код, полученный в КодДоступа
// 
// Возвращаемое значение:
//  Структура - см. ШинаМобильныхПриложений.НовыйКодДоступа
//  Булево - Истина, если получено подтверждение, что код отозван (не может быть более использован)
//
Функция УдалитьКодДоступа(Приложение, КодДоступа) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("Ключ", КодДоступа);
	
	ОтветСервиса = ВыполнитьМетодСервиса(Подключение, "DELETE", "User", Запрос);
	
	Если ОтветСервиса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОтветСервиса.КодСостояния <> КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Удаление кода доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Отправляет сообщение в мобильное приложение.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//  Получатель - Строка - сохраняемый код, полученный в КодДоступа
//  Сообщение  - Структура - произвольные данные, передаваемые мобильному приложению.
//               Структура должна быть сериализуемой в JSON и не должна содержать вложенные соответствия.
// 
// Возвращаемое значение:
//  Булево - Истина, если сообщение отправлено.
//           Отправка сообщения не означает его доставку в мобильное приложение.
//           Если нужно отслеживать доставку, то следует из мобильного приложения отправить сообщение,
//           подтверждающее прием.
//
Функция ОтправитьСообщение(Приложение, Получатель, Сообщение) Экспорт
	
	Подключение = Подключение(Приложение);
	Если Подключение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("Получатель", Получатель);
	Запрос.Вставить("Сообщение",  Сообщение);
	
	Ответ = ВыполнитьМетодСервиса(Подключение, "POST", "Outbound", Запрос);
	Если Ответ = Неопределено
		Или Ответ.КодСостояния <> КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуКодСостояния(
			Ответ,
			Приложение,
			НСтр("ru = 'Отправка сообщения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Инициирует опрос шины, есть ли в ней новые сообщения от мобильного приложения.
// 
// Следует вызывать при интерактивных действиях с механизмами программы,
// которым могут быть нужны данные от мобильного приложения.
// Например, если мобильное приложение предоставляет данные для заполнения авансового отчета,
// то опрос выполняется при работе пользователя с авансовым отчетом.
//
// Метод можно выполнять в зависимости от действий пользователя
// (например, при каждом открытии формы), однако фактически опрос будет выполняться с определенной регулярностью.
// Интервал опроса устанавливается методом ИнтервалПроверкиСообщений менеджера приложения.
//
// Как правило, в режиме сервиса такой регулярный опрос избыточен,
// потому что сообщения доставляются с помощью оповещений менеджера сервиса - сразу же,
// после передачи мобильным приложением в шину.
//
// Однако, технология 1cfresh не гарантирует доставку оповещений, поэтому наряду с оповещениями
// следует использовать и опрос.
//
// Параметры:
//  Приложение - Строка - имя приложения в шине
//
Процедура НачатьПроверкуСообщенийПоАктивностиПользователя(Приложение) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегистрыСведений.ОпросШиныМобильныхПриложений.ЗаписатьПотребность(Приложение, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФоновогоВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыФоновогоВыполнения.ОжидатьЗавершение           = 0;
	ПараметрыФоновогоВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыФоновогоВыполнения.КлючФоновогоЗадания         = Приложение;
	ПараметрыФоновогоВыполнения.НаименованиеФоновогоЗадания = СтрШаблон(
		НСтр("ru = 'Обработка сообщений мобильного приложения %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Приложение);
	
	ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыФоновогоВыполнения,
		"ШинаМобильныхПриложений.ПроверитьСообщенияПриложения",
		Приложение);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьОтладочнойИнформации

// Записывает ошибку разбора сообщения, когда получены не те данные,
// которые ожидались от мобильного приложения.
//
// Параметры:
//  Сообщение  - Структура - данные, отправленные мобильным приложением
//  Приложение - Строка - имя приложения в шине
//  Ошибка     - Строка - суть ошибки
//
Процедура ЗаписатьОшибкуСодержимогоСообщения(Сообщение, Приложение, Ошибка) Экспорт
	
	Действие = НСтр("ru = 'Обработка сообщений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(Действие, Приложение);
	
	Если Сообщение = Неопределено Тогда
		Комментарий = Ошибка;
	Иначе
		ШаблонСообщения = НСтр("ru = '%1
	                           |От сервиса получены данные:
	                           |%2
	                           |'", ОбщегоНазначения.КодОсновногоЯзыка());
		Комментарий = СтрШаблон(ШаблонСообщения, Ошибка, ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(Сообщение));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Предупреждение,
		,
		,
		Комментарий);

КонецПроцедуры

// Записывает исключение, возникшее при использовании подсистемы.
// Следует вызывать из блока Исключение
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке - возникшее исключение
//  Данные             - Произвольный - ссылка или значение примитивного типа, обрабатываемый объект
//  Приложение         - Строка - имя приложения в шине
//  Действие           - Строка - наименование действия, при выполнении которого возникла ошибка.
//                       Не должно содержать указания на конкретный объект данных.
//
Процедура ЗаписатьИсключение(ИнформацияОбОшибке, Данные, Приложение, Действие) Экспорт
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(Действие, Приложение);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		Данные,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеПодсистем

#Область ОчередьЗаданий

// Регистрирует метод в подсистеме ОчередьЗаданий
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
// Параметры:
//  МетодыОчередиЗаданий - см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ЗарегистрироватьМетодОчередиЗаданий(МетодыОчередиЗаданий) Экспорт
	
	МетодыОчередиЗаданий.Вставить(ИмяМетодаПроверитьСообщения());
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальнаяИнтеграцияУниверсальнымиОбъектами

// Обработчик оповещения о входящих сообщениях.
// Инициирует получение и обработку сообщений.
// См. УниверсальнаяИнтеграцияПереопределяемый.ОбработатьОповещениеОбИзменении
//
// Параметры:
//  ИдентификаторДанных - Строка    - идентифицирует оповещение, как относящееся к шине мобильных приложений
//  АдресПриложения     - Строка    - идентифицирует оповещаемое приложение
//  Сообщение           - Структура - данные, переданные шиной
//
Процедура ПринятьОповещение(ИдентификаторДанных, АдресПриложения, Сообщение) Экспорт
	
	Если ИдентификаторДанных <> ИдентификаторДанныхМенеджераСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		ВызватьИсключение НСтр("ru = 'Работа с внешними ресурсами заблокирована'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Приложение = ИмяПриложенияПоАдресу(АдресПриложения);
	
	Если Приложение = Неопределено Тогда
		Ошибка = СтрШаблон(
			НСтр("ru = 'Неизвестный адрес приложения: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			АдресПриложения);
		ЗаписатьОшибкуСодержимогоСообщения(Сообщение, "", Ошибка);
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОпросШиныМобильныхПриложений.ЗаписатьПотребность(Приложение, Истина);
	
	// Из обработчика оповещения универсальной интеграции нельзя вызвать фоновое задание непосредственно.
	// Это связано с тем, что обработчик выполняется от имени служебного (неразделенного) пользователя
	// в привилегированном режиме.
	// Непосредственно фоновое задание выполнялось бы от имени этого пользователя
	// уже без привилегированного режима - что приводит к невозможности инициализации сеанса фонового задания.
	// Поэтому выполняем отложенную проверку, но без задержки.
	ЗапланироватьОтложеннуюПроверкуСообщений(Приложение, 0);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиФоновыхЗаданий

// Только для использования в обработчиках фоновых заданий, запускаемых из модуля

// См. ИмяМетодаПроверитьСообщения()
Процедура ПроверитьСообщения() Экспорт
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	Для Каждого Приложение Из МенеджерыПриложений Цикл
		ПроверитьСообщенияПриложения(Приложение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСообщенияПриложения(Приложение) Экспорт
	
	// Процедура отражает результат внешних по отношению к пользователю событий,
	// поэтому все ее содержимое безопасно вызывать в привилегированном режиме
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Приложение) = Тип("Строка") Тогда
		ИмяПриложения      = Приложение;
		МенеджерПриложения = МенеджерПриложения(ИмяПриложения);
	Иначе
		МенеджерПриложения = Приложение;
		ИмяПриложения = МенеджерПриложения.ИмяМобильногоПриложения();
	КонецЕсли;
		
	Если Не РегистрыСведений.ОпросШиныМобильныхПриложений.ТребуетсяЗапрос(ИмяПриложения) Тогда
		Возврат;
	КонецЕсли;
	
	// Запланируем следующий запрос на случай, если что-то пойдет не так
	ИнтервалПовторногоЗапроса = 300;
	ЗапланироватьОтложеннуюПроверкуСообщений(ИмяПриложения, ИнтервалПовторногоЗапроса);
	
	ИмяСобытияПроверкаНаличияСообщений = НСтр("ru = 'Проверка наличия сообщений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Блокировка = РегистрыСведений.ОпросШиныМобильныхПриложений.СоздатьКлючЗаписи(Новый Структура("ИмяПриложения", ИмяПриложения));
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Блокировка);
	Исключение
		ИмяСобытия = ИмяСобытияЖурналаРегистрации(ИмяСобытияПроверкаНаличияСообщений, ИмяПриложения);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Подключение = Подключение(ИмяПриложения);
	Если Подключение = Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(Блокировка);
		Возврат;
	КонецЕсли;
	
	ВерсияНачалаЗапроса = РегистрыСведений.ОпросШиныМобильныхПриложений.ВерсияНачалаЗапроса(ИмяПриложения);
	
	Пока Истина Цикл
		
		ОтветИдентификаторСообщения = ВыполнитьМетодСервиса(Подключение, "GET", "Inbound");
		Если ОтветИдентификаторСообщения = Неопределено Тогда
			Прервать;
		КонецЕсли;
			
		Если ОтветИдентификаторСообщения.КодСостояния = КодСостоянияНетДанных() Тогда
			// Все обработаны
			Прервать;
		КонецЕсли;
		
		Если ОтветИдентификаторСообщения.КодСостояния <> КодСтандартногоСостояния() Тогда
			ЗаписатьОшибкуКодСостояния(ОтветИдентификаторСообщения, ИмяПриложения, ИмяСобытияПроверкаНаличияСообщений);
			Прервать;
		КонецЕсли;
		
		Ресурс = СтрШаблон("Inbound/%1", ОтветИдентификаторСообщения.Содержимое.Идентификатор);
		ОтветСодержимоеСообщения = ВыполнитьМетодСервиса(Подключение, "GET", Ресурс);
		
		Если ОтветСодержимоеСообщения.КодСостояния <> КодСтандартногоСостояния() Тогда
			ЗаписатьОшибкуКодСостояния(
				ОтветСодержимоеСообщения,
				ИмяПриложения,
				НСтр("ru = 'Получение сообщения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Иначе
			ОбработатьСообщение(
				ИмяПриложения,
				ОтветСодержимоеСообщения.Содержимое.Отправитель,
				ОтветСодержимоеСообщения.Содержимое.Сообщение);
		КонецЕсли;
		
		ВыполнитьМетодСервиса(Подключение, "DELETE", Ресурс);
		
	КонецЦикла;
	
	РазблокироватьДанныеДляРедактирования(Блокировка);
	
	РегистрыСведений.ОпросШиныМобильныхПриложений.ЗаписатьВыполнение(
		ИмяПриложения,
		ВерсияНачалаЗапроса,
		МенеджерПриложения.ИнтервалПроверкиСообщений());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключениеПодсистемы

Процедура ЗаполнитьМенеджерыПриложений(МенеджерыПриложений)
	
	МенеджерыПриложений.Добавить(РегистрыСведений.МобильноеПриложениеСканированиеЧеков);
	
КонецПроцедуры

#КонецОбласти

Функция МенеджерПриложения(Приложение)
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	Для Каждого МенеджерПриложения Из МенеджерыПриложений Цикл
		Если МенеджерПриложения.ИмяМобильногоПриложения() = Приложение Тогда
			Возврат МенеджерПриложения;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтрШаблон(
		НСтр("ru = 'Неизвестный код приложения: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Приложение);
	
КонецФункции

Процедура ЗапланироватьОтложеннуюПроверкуСообщений(ИмяПриложения, Интервал)
	
	Попытка
		ОбщегоНазначенияБП.ЗапланироватьВыполнение(ИмяМетодаПроверитьСообщения(), Интервал);
	Исключение
		ЗаписатьИсключение(
			ИнформацияОбОшибке(),
			,
			ИмяПриложения,
			НСтр("ru = 'Планирование проверки сообщений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяМетодаПроверитьСообщения()
	Возврат "ШинаМобильныхПриложений.ПроверитьСообщения";
КонецФункции

Функция ИдентификаторДанныхМенеджераСервиса()
	
	Возврат "MobileBus";
	
КонецФункции

Функция КодСтандартногоСостояния()
	
	Возврат 200;
	
КонецФункции

Функция КодСостоянияНетДанных()
	
	Возврат 404;
	
КонецФункции

Функция URI(Соединение, Запрос, ЗаписыватьПароли)
	
	ЭлементыАдреса = Новый Массив;
	
	// Схема
	Если Соединение.Защищенное Тогда
		Схема = "https";
	Иначе
		Схема = "http";
	КонецЕсли;
	ЭлементыАдреса.Добавить(СтрШаблон("%1://", Схема));
	
	// Аутентификация
	Если ЗаписыватьПароли Тогда
		ЭлементыАдреса.Добавить(СтрШаблон("%1:%2@", Соединение.Пользователь, Соединение.Пароль));
	КонецЕсли;
	
	// Хост
	ЭлементыАдреса.Добавить(Соединение.Сервер);
	
	// Порт
	Если ЗначениеЗаполнено(Соединение.Порт) Тогда
		ЭлементыАдреса.Добавить(СтрШаблон(":%1", Соединение.Порт));
	КонецЕсли;
	
	// АдресРесурса
	Если Не ПустаяСтрока(Запрос.АдресРесурса) Тогда
		ЭлементыАдреса.Добавить(СтрШаблон("/%1", Запрос.АдресРесурса));
	КонецЕсли;
	
	Возврат СтрСоединить(ЭлементыАдреса);
	
КонецФункции

Процедура ОбработатьСообщение(Приложение, Отправитель, Сообщение)
	
	МенеджерПриложения = МенеджерПриложения(Приложение);
	МенеджерПриложения.ОбработатьСообщениеШиныМобильныхПриложений(Отправитель, Сообщение);
	
КонецПроцедуры

Функция ИмяЗаголовкаАутентификацииИТС()
	Возврат "auth-login-1c";
КонецФункции

Функция ВладелецТикетаАутентификацииИТС()
	
	Возврат ИдентификаторДанныхМенеджераСервиса();
	
КонецФункции

Функция АутентификацияИТС()
	
	ЗаголовкиАутентификации = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(
		ВладелецТикетаАутентификацииИТС());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПустаяСтрока(ДанныеАутентификации.КодОшибки) Тогда
		
		ИмяСобытия = ИмяСобытияЖурналаРегистрации(
			НСтр("ru = 'Аутентификация на портале поддержки'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДанныеАутентификации.КодОшибки,
			ДанныеАутентификации.ИнформацияОбОшибке);
		
		Возврат ЗаголовкиАутентификации;
		
	КонецЕсли;
	
	ЗаголовкиАутентификации.Вставить(ИмяЗаголовкаАутентификацииИТС(), ДанныеАутентификации.Тикет);
	
	Возврат ЗаголовкиАутентификации;
	
КонецФункции

Функция НовыйПодключение()
	
	Подключение = Новый Структура;
	
	Подключение.Вставить("АдресСервиса",    "");
	Подключение.Вставить("АдресОповещений", "");
	Подключение.Вставить("Логин",           "");
	Подключение.Вставить("Пароль",          "");
	Подключение.Вставить("Токен",           "");
	
	Возврат Подключение;
	
КонецФункции

Функция НовыйОтветСервиса()
	
	Ответ = Новый Структура;
	
	Ответ.Вставить("КодСостояния", 200);
	Ответ.Вставить("Текст",        "");
	Ответ.Вставить("Содержимое",   Новый Структура);
	
	Возврат Ответ;
	
КонецФункции

Функция Подключение(Приложение)
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяДанныхПриложения = ИмяДанныхПриложения(Приложение);
	
	Подключение = СохраненныеДанныеПодключения(ИмяДанныхПриложения);
	Если Подключение <> Неопределено Тогда
		Возврат Подключение;
	КонецЕсли;
	
	// Получим данные для регистрации из менеджера сервиса
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПодключения = УниверсальнаяИнтеграция.ПолучитьДанныеОбъектаПоПравилу(
		ИдентификаторДанныхМенеджераСервиса(),
		ИмяДанныхПриложения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеПодключения = Неопределено Или Не ДанныеПодключения.Свойство("payload") Тогда
		ЗаписатьОшибкуДанныеПодключения(Приложение);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПодключения = ДанныеПодключения.payload;
	
	Если Не ДанныеПодключения.Свойство("Подключение")
		Или Не ДанныеПодключения.Подключение.Свойство("ОблачноеПриложение")
		Или Не ДанныеПодключения.Подключение.ОблачноеПриложение.Свойство("Адрес")
		Или Не ДанныеПодключения.Подключение.ОблачноеПриложение.Свойство("Логин")
		Или Не ДанныеПодключения.Подключение.ОблачноеПриложение.Свойство("Пароль") Тогда
		ЗаписатьОшибкуДанныеПодключения(Приложение);
		Возврат Неопределено;
	КонецЕсли;
	
	Подключение = НовыйПодключение();
	ЗаполнитьЗначенияСвойств(Подключение, ДанныеПодключения.Подключение.ОблачноеПриложение);
	Подключение.АдресСервиса = ДанныеПодключения.Подключение.ОблачноеПриложение.Адрес;
	
	// Зарегистрируем приложение
	ОтветСервиса = ВыполнитьМетодСервиса(Подключение, "POST", "Tenant");
	Если ОтветСервиса.КодСостояния <> КодСтандартногоСостояния() Тогда
		ЗаписатьОшибкуКодСостояния(
			ОтветСервиса,
			Приложение,
			НСтр("ru = 'Регистрация приложения'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Неопределено;
	КонецЕсли;
	
	// Сохраним данные подключения
	Подключение.Токен           = ОтветСервиса.Содержимое.Токен.Значение;
	Подключение.АдресОповещений = ОтветСервиса.Содержимое.Адрес;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Подключение Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИмяДанныхПриложения,
			КлючИЗначение.Значение,
			КлючИЗначение.Ключ);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	ПодписатьсяНаОповещения(Приложение, Подключение.АдресОповещений);
	
	Возврат Подключение;
	
КонецФункции

Функция ИмяЗаголовкаАутентификации()
	
	Возврат "tenant-auth";
	
КонецФункции

Функция ИмяДанныхПриложения(Приложение)
	
	Возврат СтрШаблон("app-%1", Приложение);
	
КонецФункции

Функция СохраненныеДанныеПодключения(ИмяДанныхПриложения)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИмяДанныхПриложения,
		"АдресСервиса, Логин, Пароль, Токен, АдресОповещений");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеПодключения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Фактически при отсутствии данных ПрочитатьДанныеИзБезопасногоХранилища зачем-то возвращает структуру,
	// в которой значения свойств будут Неопределено
	Для Каждого КлючИЗначение Из ДанныеПодключения Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Подключение = НовыйПодключение();
	ЗаполнитьЗначенияСвойств(Подключение, ДанныеПодключения);
	Возврат Подключение;
	
КонецФункции

Функция ИмяПриложенияПоАдресу(АдресПриложения)
	
	МенеджерыПриложений = Новый Массив;
	ЗаполнитьМенеджерыПриложений(МенеджерыПриложений);
	
	Для Каждого МенеджерПриложения Из МенеджерыПриложений Цикл
		
		ИмяПриложения = МенеджерПриложения.ИмяМобильногоПриложения();
		Подключение = СохраненныеДанныеПодключения(ИмяДанныхПриложения(ИмяПриложения));
		
		Если Подключение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Подключение.АдресОповещений = АдресПриложения Тогда
			Возврат МенеджерПриложения.ИмяМобильногоПриложения();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВыполнитьМетодСервиса(Подключение, Метод, Ресурс, Данные = Неопределено)
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Подключение.АдресСервиса);
	
	Прокси               = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ЭлементыАдреса.Схема);
	Таймаут              = 20;
	ЗащищенноеСоединение = Неопределено;
	
	Если НРег(ЭлементыАдреса.Схема) = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		ЭлементыАдреса.Хост,
		ЭлементыАдреса.Порт,
		Подключение.Логин,
		Подключение.Пароль,
		Прокси,
		Таймаут,
		ЗащищенноеСоединение,
		Ложь); // Аутентификация ОС не используется
		
	ПутьНаСервере = СтрШаблон("%1/hs/MobileBusInternal/v1/%2", ЭлементыАдреса.ПутьНаСервере, Ресурс);
		
	Запрос = Новый HTTPЗапрос(ПутьНаСервере);
	
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("accept",       "application/json");
	
	Если ЗначениеЗаполнено(Подключение.Токен) Тогда
		Запрос.Заголовки.Вставить(ИмяЗаголовкаАутентификации(), Подключение.Токен);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Запрос.Заголовки, АутентификацияИТС(), Истина);
	
	ТекстДанные = "";
	Если Данные <> Неопределено Тогда
		ТекстДанные = ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(Данные);
		Запрос.УстановитьТелоИзСтроки(ТекстДанные);
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	Исключение
		
		// В нештатной ситуации записываем протокол вне зависимости от настроек
		ЗаписатьЗапрос(Соединение, Метод, Запрос);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Результат = НовыйОтветСервиса();
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.Текст        = Ответ.ПолучитьТелоКакСтроку();
	
	Если Не ПустаяСтрока(Результат.Текст) Тогда
		
		ОжидаетсяJSON = Ложь;
		ТипСодержимого = Ответ.Заголовки.Получить("Content-Type");
		ОжидаетсяJSON = (ТипЗнч(ТипСодержимого) = Тип("Строка") 
			И СтрНайти(ТипСодержимого, "application/json") > 0);
		
		Попытка
			Результат.Содержимое = ОбщегоНазначенияБП.СтруктураИзСтрокиJSON(Результат.Текст);
		Исключение
			
			// В нештатной ситуации записываем протокол вне зависимости от настроек
			ЗаписатьЗапрос(Соединение, Метод, Запрос);
			ЗаписатьОтвет(Ответ, Результат);
			
			// При инфраструктурных проблемах содержимое может не быть json-объектом:
			// это не является ошибкой само по себе, поэтому записывается предупреждение.
			УровеньЖурнала = УровеньЖурналаРегистрации.Примечание;
			Если ОжидаетсяJSON Тогда
				УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурнала,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗаписыватьПротокол() Тогда
		ЗаписатьЗапрос(Соединение, Метод, Запрос);
		ЗаписатьОтвет(Ответ, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПодписатьсяНаОповещения(Приложение, АдресОповещений)
	
	// Вынесена в отдельную процедуру для упрощения тестирования
	
	// Подпишемся на оповещения о новых сообщениях
	Попытка
		// Невозможность подписаться не исключает возможность использовать приложение:
		// в этом случае сообщения от приложения будут доставляться при обращении к функционалу, 
		// а не заблаговременно.
		УниверсальнаяИнтеграция.ПодписатьсяНаОповещенияОбИзменении(
			ИдентификаторДанныхМенеджераСервиса(),
			АдресОповещений);
	Исключение
		ЗаписатьИсключение(
			ИнформацияОбОшибке(),
			АдресОповещений,
			Приложение,
			НСтр("ru = 'Подписка на оповещения о сообщениях'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецПопытки;
	
КонецПроцедуры

#Область ЗаписьОтладочнойИнформации

Функция ИмяСобытияЖурналаРегистрации(Действие = "", Приложение = "")
	
	ЭлементыИмени = Новый Массив;
	ЭлементыИмени.Добавить(НСтр("ru = 'Шина мобильных приложений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Если ЗначениеЗаполнено(Действие) Тогда
		ЭлементыИмени.Добавить(Действие);
		Если ЗначениеЗаполнено(Приложение) Тогда
			ЭлементыИмени.Добавить(Приложение);
		КонецЕсли;
	КонецЕсли;
		
	Возврат СтрСоединить(ЭлементыИмени, ".");
	
КонецФункции

Функция ЗаписыватьПротокол()
	
	Возврат ОбщегоНазначения.РежимОтладки();
	
КонецФункции

Функция ЗаписыватьПароли()
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаписатьЗапрос(Соединение, Метод, Запрос)
	
	Протокол = Новый Массив;
	
	ЗаписыватьПароли = ЗаписыватьПароли();
	
	ЗаголовкиПаролей = Новый Массив;
	ЗаголовкиПаролей.Добавить("Authorization");
	ЗаголовкиПаролей.Добавить(ИмяЗаголовкаАутентификации());
	
	Адрес = URI(Соединение, Запрос, ЗаписыватьПароли);
	
	Протокол.Добавить(СтрШаблон("%1 %2", Метод, Адрес));
	Для Каждого Заголовок Из Запрос.Заголовки Цикл
		Если Не ЗаписыватьПароли И ЗаголовкиПаролей.Найти(Заголовок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Протокол.Добавить(СтрШаблон("%1: %2", Заголовок.Ключ, Заголовок.Значение));
	КонецЦикла;
	
	ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Протокол.Добавить("");
		Протокол.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		НСтр("ru = 'Запрос'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СтрСоединить(Протокол, Символы.ПС));
	
КонецПроцедуры

Процедура ЗаписатьОтвет(Ответ, Результат)
	
	Протокол = Новый Массив;
	
	Протокол.Добавить(СтрШаблон("HTTP/1.1 %1", Результат.КодСостояния));
	Для Каждого Заголовок Из Ответ.Заголовки Цикл
		Протокол.Добавить(СтрШаблон("%1: %2", Заголовок.Ключ, Заголовок.Значение));
	КонецЦикла;
	
	Если Не ПустаяСтрока(Результат.Текст) Тогда
		Протокол.Добавить("");
		Протокол.Добавить(Результат.Текст);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		НСтр("ru = 'Ответ'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СтрСоединить(Протокол, Символы.ПС));
	
КонецПроцедуры

Процедура ЗаписатьОшибкуКодСостояния(ОтветСервиса, Приложение, Действие)
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(Действие, Приложение);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Предупреждение,
		,
		ОтветСервиса.КодСостояния,
		ОтветСервиса.Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуДанныеПодключения(Приложение)
	
	// Содержимое данных подключения не записывается в журнал регистрации из соображений безопасности.
	// Эти данные персистентные и могут быть проверены в менеджере сервиса
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(
		НСтр("ru = 'Получение сведений о приложении'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Приложение);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		НСтр("ru = 'Менеджер сервиса содержит некорректные данные о приложении'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
