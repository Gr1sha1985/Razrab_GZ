#Область ПрограммныйИнтерфейсСлужебный
// Функция возвращает JSON-текст Post запроса в формате XDTO-пакета Evotor.
// 	Параметры:
// 	СтруктураЗаписиJSON - Структура - структура данных, преобразуемая в JSON, для передачи в облако Эвотор с полями:
// 	*ГруппыТоваров - Массив из Структура - массив из структур с полями:
// 	  ** Наименование - Строка - наименование группы товаров.
// 	* Товары - Массив из Структура - где:
// 	  ** Наименование - Строка - наименование товара.
// 	  ** Характеристики - Массив из Структура  - массив с полями:
// 	    *** Наименование - Строка - наименование характеристики.
// 	    *** Упаковки - Массив из Структура  - массив с полями:
// 	       **** Наименование - Строка - наименование упаковки.
// 	  **Упаковки - Массив из Структура - массив из структур с полями:
// 	     ***Наименование - Строка - наименование упаковки.
// 	ВидЗапроса - Строка - вид запроса к облаку Эвотор
// Возвращаемое значение:
// Строка - Результат работы функции.
//
Функция ПолучитьТекстJSONЗапроса(СтруктураЗаписиJSON, ВидЗапроса) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Если ВидЗапроса = "ВыгрузитьДанные" Тогда
		
		МассивТоваров = Новый Массив;
		
		Если Не СтруктураЗаписиJSON.Товары.Количество() = 0 ИЛИ Не СтруктураЗаписиJSON.ГруппыТоваров.Количество() = 0 Тогда
			
			СоответствиеТоваровГрупп = Новый Соответствие;
			
			Для Каждого Группа Из СтруктураЗаписиJSON.ГруппыТоваров Цикл
				
				СтруктураТовара = ПолучитьГруппу();
				СтруктураТовара.uuid        = Строка(Группа.УникальныйИдентификатор);
				СтруктураТовара.name        = Группа.Наименование;
				СтруктураТовара.group       = Истина;
				СтруктураТовара.hasVariants = Истина;
				СтруктураТовара.allowToSell = Истина;
				СоответствиеТоваровГрупп.Вставить(Группа.Код, Строка(Группа.УникальныйИдентификатор));
				Если Группа.КодГруппы <> 0 Тогда
					СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Группа.КодГруппы);
				Иначе
					СтруктураТовара.parentUuid = Неопределено;
				КонецЕсли;
				
				МассивТоваров.Добавить(СтруктураТовара);
				
			КонецЦикла;
			
			Для Каждого Товар Из СтруктураЗаписиJSON.Товары Цикл
				Если Товар.ИмеетХарактеристики Тогда
					Для Каждого Характеристика Из Товар.Характеристики Цикл
						Если Характеристика.ИмеетУпаковки Тогда
							Для Каждого Упаковка Из Характеристика.Упаковки Цикл
								СтруктураТовара = ПолучитьТовар();
								СтруктураТовара.name      = Товар.Наименование + " " + Характеристика.Наименование + " " + Упаковка.Наименование;
								СтруктураТовара.price     = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
								СтруктураТовара.quantity  = ?(Упаковка.Остаток = Неопределено, 0, Упаковка.Остаток);
								Если Не Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
									СтруктураТовара.costPrice = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
								КонецЕсли;
								Если Не ПустаяСтрока(Упаковка.УникальныйИдентификатор) Тогда
									СтруктураТовара.uuid      = Строка(Упаковка.УникальныйИдентификатор);
								Иначе
									СтруктураТовара.uuid      = Строка(Характеристика.УникальныйИдентификатор);
								КонецЕсли;
								СтруктураТовара.code      = Упаковка.Код;
								Если Товар.КодГруппы <> 0 Тогда
									СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
								Иначе
									СтруктураТовара.parentUuid = Неопределено;
								КонецЕсли;
								ЗаписатьШтрихкодыТовара(Упаковка.Штрихкоды, СтруктураТовара);
								СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
								ЗаполнитьТовар(СтруктураТовара, Товар);
								МассивТоваров.Добавить(СтруктураТовара);
							КонецЦикла;
						Иначе
							СтруктураТовара = ПолучитьТовар();
							СтруктураТовара.name      = Товар.Наименование + " " + Характеристика.Наименование;
							СтруктураТовара.price     = ?(Характеристика.Цена = Неопределено, 0, Характеристика.Цена);
							СтруктураТовара.quantity  = ?(Характеристика.Остаток = Неопределено, 0, Характеристика.Остаток);
							Если Не Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
								СтруктураТовара.costPrice = ?(Характеристика.Цена = Неопределено, 0, Характеристика.Цена);
							КонецЕсли;
							Если Не ПустаяСтрока(Характеристика.УникальныйИдентификатор) Тогда
								СтруктураТовара.uuid      = Строка(Характеристика.УникальныйИдентификатор);
							Иначе
								СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
							КонецЕсли;
							СтруктураТовара.code      = Характеристика.Код;
							Если Товар.КодГруппы <> 0 Тогда
								СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
							Иначе
								СтруктураТовара.parentUuid = Неопределено;
							КонецЕсли;
							ЗаписатьШтрихкодыТовара(Характеристика.Штрихкоды, СтруктураТовара);
							СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
							ЗаполнитьТовар(СтруктураТовара, Товар);
							МассивТоваров.Добавить(СтруктураТовара);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Товар.ИмеетУпаковки Тогда
					Если ЗначениеЗаполнено(Товар.Код) Тогда
						СтруктураТовара = ПолучитьТовар();
						СтруктураТовара.name      = Товар.Наименование;
						СтруктураТовара.price     = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
						СтруктураТовара.quantity  = ?(Товар.Остаток = Неопределено, 0, Товар.Остаток);
						Если Не Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
							СтруктураТовара.costPrice = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
						КонецЕсли;
						СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
						СтруктураТовара.code      = Товар.Код;
						Если Товар.КодГруппы <> 0 Тогда
							СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
						Иначе
							СтруктураТовара.parentUuid = Неопределено;
						КонецЕсли;
						ЗаписатьШтрихкодыТовара(Товар.Штрихкоды, СтруктураТовара);
						СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
						ЗаполнитьТовар(СтруктураТовара, Товар);
						МассивТоваров.Добавить(СтруктураТовара);
					КонецЕсли;
					Для Каждого Упаковка Из Товар.Упаковки Цикл 
						СтруктураТовара = ПолучитьТовар();
						СтруктураТовара.name      = Товар.Наименование + " " + Упаковка.Наименование;
						СтруктураТовара.price     = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
						СтруктураТовара.quantity  = ?(Упаковка.Остаток = Неопределено, 0, Упаковка.Остаток);
						Если Не Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
							СтруктураТовара.costPrice = ?(Упаковка.Цена = Неопределено, 0, Упаковка.Цена);
						КонецЕсли;
						Если Не ПустаяСтрока(Упаковка.УникальныйИдентификатор) Тогда
							СтруктураТовара.uuid      = Строка(Упаковка.УникальныйИдентификатор);
						Иначе
							СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
						КонецЕсли;
						СтруктураТовара.code      = Упаковка.Код;
						Если Товар.КодГруппы <> 0 Тогда
							СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
						Иначе
							СтруктураТовара.parentUuid = Неопределено;
						КонецЕсли;
						ЗаписатьШтрихкодыТовара(Упаковка.Штрихкоды, СтруктураТовара);
						СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
						ЗаполнитьТовар(СтруктураТовара, Товар);
						МассивТоваров.Добавить(СтруктураТовара);
					КонецЦикла;
				Иначе
					СтруктураТовара = ПолучитьТовар();
					СтруктураТовара.name      = Товар.Наименование;
					СтруктураТовара.price     = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
					СтруктураТовара.quantity  = ?(Товар.Остаток = Неопределено, 0, Товар.Остаток);
					Если Не Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
						СтруктураТовара.costPrice = ?(Товар.Цена = Неопределено, 0, Товар.Цена);
					КонецЕсли;
					СтруктураТовара.uuid      = Строка(Товар.УникальныйИдентификатор);
					СтруктураТовара.code      = Товар.Код;
					Если Товар.КодГруппы <> 0 Тогда
						СтруктураТовара.parentUuid = СоответствиеТоваровГрупп.Получить(Товар.КодГруппы);
					Иначе
						СтруктураТовара.parentUuid = Неопределено;
					КонецЕсли;
					ЗаписатьШтрихкодыТовара(Товар.Штрихкоды, СтруктураТовара);
					СтруктураТовара.measureName = ЗаписатьЕдиницуИзмеренияТовара(СтруктураЗаписиJSON.ЕдиницыИзмерения, Товар);
					ЗаполнитьТовар(СтруктураТовара, Товар);
					МассивТоваров.Добавить(СтруктураТовара);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
		
	ИначеЕсли ВидЗапроса = "УдалитьТовары" Тогда
		МассивТоваров = Новый Массив;
		Если ЗначениеЗаполнено(СтруктураЗаписиJSON) Тогда
			Для Каждого Товар Из СтруктураЗаписиJSON Цикл
				МассивТоваров.Добавить(Строка(Товар.УникальныйИдентификатор));
			КонецЦикла;
		КонецЕсли;
		ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
	КонецЕсли;
	
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ОбработатьДанныеЗапроса(МассивДанных, ДополнительныеПараметры) Экспорт
	
	СтруктураВозвращаемыхДанных = Новый Массив;
	Если ДополнительныеПараметры.НаименованиеКоманды = "ЗагрузитьДанные" Тогда
		
		СтруктураДанных = МенеджерОфлайнОборудования.ПолучитьЗагружаемыеДанныеИзККМ();
		СоответствиеСмен = Новый Соответствие;
		
		Для Каждого Документ Из МассивДанных Цикл
			Если Документ.type = "OPEN_SESSION" Тогда
				ОтчетОПродажахККМ = МенеджерОфлайнОборудования.ПолучитьОтчетОПродажахККМ();
				ОтчетОПродажахККМ.ДатаОткрытияСмены = Документ.openDate;
				ОтчетОПродажахККМ.НомерСмены        = Документ.sessionNumber;
				ОтчетОПродажахККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.sessionUUID);
				СоответствиеСмен.Вставить(Документ.sessionUUID, ОтчетОПродажахККМ);
			ИначеЕсли Документ.type = "SELL" ИЛИ Документ.type = "PAYBACK" Тогда
				
				ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID); //см. МенеджерОфлайнОборудования.ПолучитьОтчетОПродажахККМ
				
				ОплатаЧекаККМ = МенеджерОфлайнОборудования.ПолучитьОплатуЧекаККМ();
				ЧекККМ = МенеджерОфлайнОборудования.ПолучитьЧекККМ();
				ЧекККМ.ДатаЧека                = Документ.openDate;
				ЧекККМ.НомерЧека               = Документ.number;
				ЧекККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.uuid);
				Если Документ.type = "SELL" Тогда
					ЧекККМ.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(1);
				ИначеЕсли Документ.type = "PAYBACK" Тогда
					ЧекККМ.ТипРасчета = МенеджерОборудованияКлиентСервер.РасчетДенежнымиСредствамиПоКоду(2);
				КонецЕсли;
				Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
					ОтчетОПродажахККМ.Чеки.Добавить(ЧекККМ);
				КонецЕсли;
				
				Для Каждого Транзакция Из Документ.transactions Цикл
					Если Транзакция.type ="DOCUMENT_OPEN" Тогда
						Если Транзакция.baseDocumentUUID <> Неопределено Тогда
							ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ = Новый Уникальныйидентификатор(Транзакция.baseDocumentUUID);
							ЧекККМ.ТипСвязанногоДокументаККМ = "Чек";
						КонецЕсли;
					ИначеЕсли Транзакция.type = "REGISTER_POSITION" Тогда
						ТоварККМ = МенеджерОфлайнОборудования.ПолучитьТоварЧекаККМ();
						ТоварККМ.Код                          = Транзакция.commodityCode;
						ТоварККМ.Количество                   = ?(Документ.type = "SELL", Транзакция.quantity, -Транзакция.quantity);
						ТоварККМ.Сумма                        = ?(Документ.type = "SELL", Транзакция.resultSum, -Транзакция.resultSum);
						ТоварККМ.Цена                         = Транзакция.price;
						
						Если ЗначениеЗаполнено(Транзакция.mark) Тогда
							Если Транзакция.commodityType = "ALCOHOL_MARKED" ИЛИ Транзакция.commodityType = "TOBACCO_MARKED" Тогда
								ТоварККМ.ШтрихкодыМаркированнойПродукции.Добавить(Транзакция.mark);
							КонецЕсли;
						КонецЕсли;
						
						ТоварККМ.ПризнакСпособаРасчета        = МенеджерОборудованияКлиентСервер.ПризнакСпособаРасчетаПоКоду(4);
						ЧекККМ.Товары.Добавить(ТоварККМ);
						СоответствиеТоваровНалогов = Новый Соответствие;
						СоответствиеТоваровНалогов.Вставить(Транзакция.commodityCode, ТоварККМ);
					ИначеЕсли Транзакция.type = "POSITION_TAX" Тогда
						Товар = СоответствиеТоваровНалогов.Получить(Транзакция.commodityCode);
						Если ЗначениеЗаполнено(Товар) Тогда
							
							ИспользоватьСтавкуНДС20 = Истина;
							Если Документ.closeDate < Дата(2019,1,1,0,0,0) Тогда
								ИспользоватьСтавкуНДС20 = Ложь;
							ИначеЕсли Документ.closeDate > Дата(2019,1,1,0,0,0) И Документ.type = "PAYBACK" И ЗначениеЗаполнено(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ) И 
								-Транзакция.resultSum > 1 Тогда
								СуммаНДС20 = Окр(Транзакция.resultSum*(20/(120)), 2);
								Если Транзакция.resultTaxSum <> СуммаНДС20 Тогда
									ИспользоватьСтавкуНДС20 = Ложь;
								КонецЕсли;
							КонецЕсли;
							
							Если Транзакция.tax = "NO_VAT" Тогда
								Товар.СтавкаНДС = "none"
							ИначеЕсли Транзакция.tax = "VAT_0" Тогда
								Товар.СтавкаНДС = "0"
							ИначеЕсли Транзакция.tax = "VAT_10" Тогда
								Товар.СтавкаНДС = "10"
							ИначеЕсли Транзакция.tax = "VAT_10_110" Тогда
								Товар.СтавкаНДС = "10/110"
							ИначеЕсли Транзакция.tax = "VAT_18" И ИспользоватьСтавкуНДС20 Тогда
								Товар.СтавкаНДС = "20"
							ИначеЕсли Транзакция.tax = "VAT_18" И НЕ ИспользоватьСтавкуНДС20 Тогда
								Товар.СтавкаНДС = "18"
							ИначеЕсли Транзакция.tax = "VAT_18_118" И ИспользоватьСтавкуНДС20 Тогда
								Товар.СтавкаНДС = "20/120"
							ИначеЕсли Транзакция.tax = "VAT_18_118" И НЕ ИспользоватьСтавкуНДС20 Тогда
								Товар.СтавкаНДС = "18/118"
							КонецЕсли;
							
						КонецЕсли;
					ИначеЕсли Транзакция.type = "PAYMENT" Тогда
						Если Транзакция.paymentType = "CASH" Тогда
							Если Не ОплатаЧекаККМ.СуммаНаличнойОплаты = Неопределено Тогда
								ОплатаЧекаККМ.СуммаНаличнойОплаты = ОплатаЧекаККМ.СуммаНаличнойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
							Иначе
								ОплатаЧекаККМ.СуммаНаличнойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
							КонецЕсли;
							ОплатаЧекаККМ.СуммаЭлектроннойОплаты = 0;
						ИначеЕсли Транзакция.paymentType = "CARD" Тогда
							Если Не ОплатаЧекаККМ.СуммаЭлектроннойОплаты = Неопределено Тогда
								ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ОплатаЧекаККМ.СуммаЭлектроннойОплаты + ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
							Иначе
								ОплатаЧекаККМ.СуммаЭлектроннойОплаты = ?(Документ.type = "SELL", Транзакция.sum, -Транзакция.sum);
							КонецЕсли;
							ОплатаЧекаККМ.СуммаНаличнойОплаты    = 0;
						КонецЕсли;
						ОплатаЧекаККМ.СуммаПостоплатой           = 0;
						ОплатаЧекаККМ.СуммаПредоплатой           = 0;
					КонецЕсли;
				КонецЦикла;
				ЧекККМ.Оплаты.Добавить(ОплатаЧекаККМ);
				
			ИначеЕсли Документ.type = "CLOSE_SESSION" Тогда
				ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID);
				ДополнительныеПараметры.ДатаСмены = Документ.openDate;
				Если ЗначениеЗаполнено(ОтчетОпродажахККМ) Тогда
					ОтчетОПродажахККМ.ДатаЗакрытияСмены = Документ.openDate;
					СтруктураДанных.ОтчетыОПродажах.Добавить(ОтчетОПродажахККМ);
				КонецЕсли;
			ИначеЕсли Документ.type = "OPEN_TARE" Тогда
				ВскрытиеТарыККМ = МенеджерОфлайнОборудования.ПолучитьВскрытиеТарыККМ();
				ВскрытиеТарыККМ.Дата                    = Документ.openDate;
				ВскрытиеТарыККМ.Номер                   = Документ.number;
				ВскрытиеТарыККМ.УникальныйИдентификатор = Новый УникальныйИдентификатор(Документ.uuid);
				Для Каждого Транзакция Из Документ.transactions Цикл
				
					Если Транзакция.type = "REGISTER_POSITION" Тогда
						ТоварВскрытияТарыККМ = МенеджерОфлайнОборудования.ПолучитьТоварВскрытияТарыККМ();
						ТоварВскрытияТарыККМ.Код        = Транзакция.commodityCode;
						ТоварВскрытияТарыККМ.Количество = Транзакция.quantity;
						
						Если ЗначениеЗаполнено(Транзакция.barcode) Тогда
							ТоварВскрытияТарыККМ.ШтрихкодАлкогольнойПродукции.Добавить(Транзакция.barcode);
						КонецЕсли;
						
						ВскрытиеТарыККМ.Товары.Добавить(ТоварВскрытияТарыККМ);
					КонецЕсли;
				
				КонецЦикла;
				
				СтруктураДанных.ВскрытияАлкогольнойТары.Добавить(ВскрытиеТарыККМ);
				
			ИначеЕсли Документ.type = "CASH_INCOME" ИЛИ Документ.type = "CASH_OUTCOME" Тогда 
				ОтчетОПродажахККМ = СоответствиеСмен.Получить(Документ.sessionUUID); //см. МенеджерОфлайнОборудования.ПолучитьОтчетОПродажахККМ
				ДвижениеДСККМ = МенеджерОфлайнОборудования.ПолучитьДвижениеДСККМ();
				ДвижениеДСККМ.Дата                    = Документ.openDate;
				ДвижениеДСККМ.Номер                   = Документ.number;
				ДвижениеДСККМ.УникальныйИдентификатор = Новый Уникальныйидентификатор(Документ.uuid);
				ДвижениеДСККМ.Сумма                   = Документ.closeSum;
				Если Документ.type = "CASH_INCOME" Тогда
					ДвижениеДСККМ.ТипДвижения = "Внесение";
				Иначе
					ДвижениеДСККМ.ТипДвижения = "Выемка"
				КонецЕсли;
				Если ЗначениеЗаполнено(ОтчетОПродажахККМ) Тогда
					ОтчетОПродажахККМ.ДвиженияДС.Добавить(ДвижениеДСККМ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураВозвращаемыхДанных.Добавить(СтруктураДанных);
		
	ИначеЕсли ДополнительныеПараметры.НаименованиеКоманды = "ЗагрузитьМагазины" Тогда
		
		СтруктураВозвращаемыхДанных = МассивДанных;
		
	ИначеЕсли ДополнительныеПараметры.НаименованиеКоманды = "ЗагрузитьТерминалы" Тогда
		
		СтруктураВозвращаемыхДанных = МассивДанных;
		
	ИначеЕсли ДополнительныеПараметры.НаименованиеКоманды = "ТестУстройства" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат СтруктураВозвращаемыхДанных;
	
КонецФункции

Функция ОтправитьЗапрос(ПараметрыЗапроса, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыЗапроса.СерверЗапроса, 443, , , Новый ИнтернетПрокси(Истина), 300, Новый ЗащищенноеСоединениеOpenSSL);
	Исключение
		ТекстСообщения = НСтр("ru = 'При создании соединения произошла ошибка'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(ПараметрыЗапроса.АдресЗапроса, ПараметрыЗапроса.ЗаголовкиЗапроса);
		Если ПараметрыЗапроса.МетодЗапроса = "GET" Тогда
			Ответ = Соединение.Получить(HTTPЗапрос);
			ВыходныеПараметры.Добавить(Ответ.ПолучитьТелоКакСтроку());
			Результат = Истина;
		ИначеЕсли ПараметрыЗапроса.МетодЗапроса = "POST" Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.ТекстЗапроса);
			Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
			Результат = Истина;
		ИначеЕсли ПараметрыЗапроса.МетодЗапроса = "DELETE" Тогда
			Ответ = Соединение.Удалить(HTTPЗапрос);
			Результат = Истина;
		КонецЕсли;
		
	Исключение
		ВыходныеПараметры.Очистить();
		ТекстСообщения =  НСтр("ru = 'Не удалось получить данные'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Ответ.КодСостояния = 401 Тогда
		ВыходныеПараметры.Очистить();
		ТекстСообщения = НСтр("ru = 'Неверный токен пользователя. Введите правильный токен в настройках подключаемого оборудования.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 402 Тогда
		ВыходныеПараметры.Очистить();
		ТекстСообщения = НСтр("ru = 'Истек срок действия подписки. Необходимо произвести оплату в личном кабинете Эвотор.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		ВыходныеПараметры.Очистить();
		ТекстСообщения = НСтр("ru = 'Указан несуществующий терминал или магазин. Измените настройки подключаемого оборудования.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 405 Тогда
		ВыходныеПараметры.Очистить();
		ТекстСообщения = НСтр("ru = 'Для выбранного терминала не выбрана подписка. Активируйте подписку на терминал в личном кабинете Эвотор и повторите попытку загрузку.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли Ответ.КодСостояния = 500 Тогда
		ВыходныеПараметры.Очистить();
		ТекстСообщения = НСтр("ru = 'Внутренняя ошибка сервиса Эвотор. Повторите попытку загрузки.'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	ИначеЕсли НЕ Ответ.КодСостояния = 200 Тогда
		ВыходныеПараметры.Очистить();
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при загрузке данных. Код ответа сервиса Эвотор: %КодСостояния%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСостояния%", Ответ.КодСостояния);
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает дату последней загрузки.
// 
// Параметры:
// 	Параметры - Структура - структура параметров устройства с полями:
// 	*ДатаОкончания - Дата - дата окончания загрузки.
// 	*ДатаНачала - Дата - дата начала загрузки.
// 	*Идентификатор - Строка - уникальный идентификатор терминала.
// 	*Магазин - УникальныйИдентификатор - уникальный идентификатор магазина.
// 	*Терминал - УникальныйИдентификатор - уникальный идентификатор терминала.
// 	ДополнительныеПараметры - Структура - .
Процедура ПолучитьДатуПоследнейЗагрузки (Параметры, ДополнительныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КассаЭвотор.Значение = Параметры.Идентификатор;
	НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 И Не Параметры.ПериодИзмененВручную Тогда
		
		ДатаЗагрузки = ТекущаяДата();
		ДополнительныеПараметры.Вставить("ДатаОкончанияВыгрузки", ДатаЗагрузки);
		Для Каждого Запись Из НаборЗаписей Цикл
			Параметры.ДатаНачала = Запись.ДатаПоследнейЗакрытойКассовойСмены;
			Если ДатаЗагрузки - Запись.ДатаПоследнейЗакрытойКассовойСмены > 30 * 86400 Тогда
				Параметры.ДатаОкончания = Параметры.ДатаНачала + 30 * 86400;
			Иначе
				Параметры.ДатаОкончания = ДатаЗагрузки;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ДатаОкончанияВыгрузки", Параметры.ДатаОкончания);
		Если Параметры.ДатаОкончания - Параметры.ДатаНачала > 30 * 86400 Тогда
			Параметры.ДатаОкончания = Параметры.ДатаНачала + 30 * 86400;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет дату последней загрузки.
// 
// Параметры:
// 	Параметры - Структура - структура параметров устройства с полями:
// 	*ДатаОкончания - Дата - дата окончания загрузки.
// 	*ДатаНачала - Дата - дата начала загрузки.
// 	*Идентификатор - Строка - уникальный идентификатор терминала.
// 	*Магазин - УникальныйИдентификатор - уникальный идентификатор магазина.
// 	*Терминал - УникальныйИдентификатор - уникальный идентификатор терминала.
// 	ДатаОкончанияВыгрузки - Дата - дата окончания выгрузки.
Процедура ИзменитьДатуПоследнейЗагрузки(Параметры, ДатаОкончанияВыгрузки) Экспорт
	
	Параметры.ДатаНачала = Параметры.ДатаОкончания + 1;
	
	Если Параметры.ПериодИзмененВручную Тогда
		ДатаЗагрузки = ДатаОкончанияВыгрузки;
	Иначе
		ДатаЗагрузки = ТекущаяДата();
	КонецЕсли;
	
	Если ДатаЗагрузки - Параметры.ДатаОкончания > 30 * 86400 Тогда
		Параметры.ДатаОкончания = Параметры.ДатаНачала + 30 * 86400;
	Иначе
		Параметры.ДатаОкончания = ДатаЗагрузки;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дату последней попытки загрузки.
// 
// Параметры:
// 	Параметры - Структура - структура параметров устройства с полями:
// 	*ДатаОкончания - Дата - дата окончания загрузки.
// 	*ДатаНачала - Дата - дата начала загрузки.
// 	*Идентификатор - Строка - уникальный идентификатор терминала.
// 	*Магазин - УникальныйИдентификатор - уникальный идентификатор магазина.
// 	*Терминал - УникальныйИдентификатор - уникальный идентификатор терминала.
// 	ДатаОкончанияВыгрузки - Дата - дата окончания выгрузки.
Процедура ЗаполнитьДатуПоследнейПопыткиЗагрузки(Параметры, ДатаОкончанияВыгрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Параметры.Идентификатор);
	
	НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КассаЭвотор.Значение = Параметры.Идентификатор;
	НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
	НаборЗаписей.Прочитать();
	ДатаЗагрузки = ТекущаяДата();
	
	Если Не ДанныеУстройства.Параметры.ПериодИзмененВручную Тогда
		Если НаборЗаписей.Количество() > 0 Тогда
			Если Параметры.ДатаОкончания > ДатаЗагрузки Тогда
				НаборЗаписей[0].ДатаПоследнейПопыткиЗагрузки = ДатаЗагрузки;
			Иначе
				НаборЗаписей[0].ДатаПоследнейПопыткиЗагрузки = Параметры.ДатаОкончания;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
	Иначе
		Если НаборЗаписей.Количество() > 0 Тогда
			Если Параметры.ДатаОкончания > НаборЗаписей[0].ДатаПоследнейПопыткиЗагрузки Тогда
				НаборЗаписей[0].ДатаПоследнейПопыткиЗагрузки = Параметры.ДатаОкончания;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Описание.
// 
// Параметры:
// 	Параметры - Структура - структура с параметрами:
// 	*Идентификатор - УникальныйИдентификатор - уникальный идентификатор терминала.
// 	*ДатаНачала - Дата - .
// 	*ДатаОкончания - Дата - .
// 	*Магазин - УникальныйИдентификатор - .
// 	*Терминал - УникальныйИдентификатор - .
// 	ВыходныеПараметры - Структура - структура выходных параметров.
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
Функция ЗаполнитьДатуПоследнейЗагрузки(Параметры, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	ВыходныеПараметры = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Параметры.Идентификатор);
	
	Попытка
		НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КассаЭвотор.Значение = Параметры.Идентификатор;
		НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
		НаборЗаписей.Прочитать();
		ДатаЗагрузки = ТекущаяДата();
		
		Если Не ДанныеУстройства.Параметры.ПериодИзмененВручную Тогда
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.ДатаПоследнейЗакрытойКассовойСмены = Запись.ДатаПоследнейПопыткиЗагрузки;
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;
			
		Иначе
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.ДатаПоследнейПопыткиЗагрузки > Запись.ДатаПоследнейЗакрытойКассовойСмены Тогда
						Запись.ДатаПоследнейЗакрытойКассовойСмены = Запись.ДатаПоследнейПопыткиЗагрузки;
					КонецЕсли;
				КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
			
		КонецЕсли;
		ДанныеУстройства.Параметры.ЭтоПерваяЗагрузка = Истина;
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Параметры.Идентификатор, ДанныеУстройства.Параметры);
		Результат = Истина;
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи данных произошла ошибка'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьСтруктуруОтвета(ТекстJSON, ВыходныеПараметры) Экспорт
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		ПоляДат = Новый Массив;
		ПоляДат.Добавить("openDate");
		ПоляДат.Добавить("closeDate");
		ПоляДат.Добавить("creationDate");
		ВыходныеПараметры = ПрочитатьJSON(ЧтениеJSON,,ПоляДат);
		ЧтениеJSON.Закрыть();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать файл ответа'");
		СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает дату в формате JSON-даты с добавлением смещения по часовому поясу.
//
Функция ПреобразоватьДату(Дата) Экспорт
	
	Смещение = СмещениеСтандартногоВремени(ЧасовойПоясСеанса(),УниверсальноеВремя(ТекущаяДатаСеанса()))/60/60;
	
	Если Смещение < 0 Тогда
		Знак = "%2D";
		Смещение = Смещение * (-1);
	Иначе
		Знак = "%2B";
	КонецЕсли;
	КоличествоЧасов = ?(Смещение > 9, Строка(Смещение), "0" + Строка(Смещение));
	
	СмещениеЧасов = ".000" + Знак + КоличествоЧасов + "00";
	
	ФорматированнаяДата = Формат(Дата, "ДФ=гггг-ММ-дд") + "T" + Формат(Дата, "ДФ=ЧЧ:мм:сс") + СмещениеЧасов;
	
	Возврат ФорматированнаяДата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьТовар(Знач СтруктураТовара, Знач Товар)
	
	Если Товар.ЭтоАлкоголь Тогда
		
		СтруктураТовара.alcoholByVolume        = Товар.АлкогольныеРеквизиты.Крепость;
		СтруктураТовара.alcoholProductKindCode = Товар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции;
		СтруктураТовара.tareVolume             = Товар.АлкогольныеРеквизиты.ЕмкостьТары;
		Если Товар.АлкогольныеРеквизиты.Маркируемый = Истина Тогда
			СтруктураТовара.type               = "ALCOHOL_MARKED";
		Иначе
			СтруктураТовара.type               = "ALCOHOL_NOT_MARKED";
		КонецЕсли;
		
	ИначеЕсли Товар.Свойство("ЭтоМаркированнаяПродукция") Тогда
		
		СтруктураТовара.alcoholByVolume        = Неопределено;
		СтруктураТовара.alcoholProductKindCode = Неопределено;
		СтруктураТовара.tareVolume             = Неопределено;
		СтруктураТовара.alcocodes              = Неопределено;
		
		Если Товар.ЭтоМаркированнаяПродукция Тогда 
			Если Товар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Табак") Тогда
				СтруктураТовара.type = "TOBACCO_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары  ИЛИ Товар.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Обувь") Тогда
				СтруктураТовара.type = "SHOES_MARKED";
			ИначеЕсли Товар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ЛекарственныеПрепараты Тогда
				СтруктураТовара.type = "MEDICINE_MARKED";
			Иначе
				СтруктураТовара.type = "NORMAL";
			КонецЕсли;
		Иначе
			Если Товар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга Тогда
				СтруктураТовара.type = "SERVICE";
			Иначе
				СтруктураТовара.type = "NORMAL";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураТовара.allowToSell                = Истина;
	СтруктураТовара.articleNumber              = Строка(Товар.Артикул);
	СтруктураТовара.description                = "";
	СтруктураТовара.group                      = Ложь;
	Если Строка(Товар.СтавкаНДС) = "18" Или Строка(Товар.СтавкаНДС) = "20" Тогда
		СтруктураТовара.tax                    = "VAT_18";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "10" Тогда
		СтруктураТовара.tax                    = "VAT_10";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "0" Тогда
		СтруктураТовара.tax                    = "VAT_0";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "110" Тогда
		СтруктураТовара.tax                    = "VAT_10_110";
	ИначеЕсли Строка(Товар.СтавкаНДС) = "118" ИЛИ Строка(Товар.СтавкаНДС) = "120" Тогда
		СтруктураТовара.tax                    = "VAT_18_118";
	Иначе
		СтруктураТовара.tax                    = "NO_VAT";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьШтрихкодыТовара(Штрихкоды, СтруктураТовара)
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		
		СтруктураТовара.barCodes.Добавить(Штрихкод.Штрихкод);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьЕдиницуИзмеренияТовара(ЕдиницыИзмерения, Товар)
	
	Если ЗначениеЗаполнено(Товар.КодЕдиницыИзмерения) Тогда
		
	Для Каждого ЕИ Из ЕдиницыИзмерения Цикл
			Если ЕИ.Код = Товар.КодЕдиницыИзмерения Тогда
				Возврат ЕИ.Наименование;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат "шт";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТовар()
	
	СтруктураТовара = Новый Структура;
	СтруктураТовара.Вставить("uuid");
	СтруктураТовара.Вставить("code");
	СтруктураТовара.Вставить("barCodes",  Новый Массив);
	СтруктураТовара.Вставить("alcoCodes", Новый Массив);
	СтруктураТовара.Вставить("name");
	СтруктураТовара.Вставить("price");
	СтруктураТовара.Вставить("quantity", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	СтруктураТовара.Вставить("costPrice");
	СтруктураТовара.Вставить("measureName");
	СтруктураТовара.Вставить("tax");
	СтруктураТовара.Вставить("allowToSell");
	СтруктураТовара.Вставить("description");
	СтруктураТовара.Вставить("articleNumber");
	СтруктураТовара.Вставить("parentUuid");
	СтруктураТовара.Вставить("group");
	СтруктураТовара.Вставить("type");
	СтруктураТовара.Вставить("alcoholByVolume");
	СтруктураТовара.Вставить("alcoholProductKindCode");
	СтруктураТовара.Вставить("tareVolume");
	
	Возврат СтруктураТовара;
	
КонецФункции

Функция ПолучитьГруппу()
	
	СтруктураТовара = Новый Структура;
	СтруктураТовара.Вставить("uuid");
	СтруктураТовара.Вставить("name");
	СтруктураТовара.Вставить("group");
	СтруктураТовара.Вставить("parentUuid");
	СтруктураТовара.Вставить("hasVariants");
	СтруктураТовара.Вставить("allowToSell");
	
	Возврат СтруктураТовара;
	
КонецФункции

// Процедура добавляет в массив выходных параметров сообщение об ошибке.
//		Параметры:
//			- ВыходныеПараметры - массив, в который будет помещено сообщение об ошибке.
//			- ТекстСообщения - текст сообщения, содержащий информация об ошибке.
Процедура СоздатьСообщениеОбОшибке(ВыходныеПараметры, ТекстСообщения)
	
	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(ТекстСообщения);
	
КонецПроцедуры
#КонецОбласти