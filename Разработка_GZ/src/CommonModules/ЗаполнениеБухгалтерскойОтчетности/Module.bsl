////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ БУХГАЛТЕРСКОЙ ОТЧЕТНОСТИ.
// Модуль предназначен для заполнения регламентированного отчета
// "Бухгалтерская отчетность организаций" и финансовой отчетности в банки.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПолучитьСведенияОПоказателяхОтчетаБухОтчетность(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_ФормаОтчета2011Кв1(
			ПоказателиОтчета);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_ФормаОтчета2011Кв3(
			ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв4" Тогда
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_ФормаОтчета2011Кв4(
			ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_ФормаОтчета2019Кв1(
			ПоказателиОтчета, ПараметрыОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьМП(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_МПФормаОтчета2012Кв4(ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4_2" Тогда
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_МПФормаОтчета2012Кв4_2(ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв4" Тогда
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_МПФормаОтчета2015Кв4(ПоказателиОтчета, ПараметрыОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьСОНКО(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
		
		ЗаполнениеБухгалтерскойОтчетностиПоказатели.ДобавитьПоказателиБО_СОНКОФормаОтчета2012Кв4(ПоказателиОтчета, ПараметрыОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБухОтчетность(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв1(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв4" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБухОтчетностьМП(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
		ЗаполнениеБухгалтерскойОтчетностиУпрощенная.ЗаполнитьОтчетБухОтчетностьМПФормаОтчета2012Кв4(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4_2" Тогда
		ЗаполнениеБухгалтерскойОтчетностиУпрощенная.ЗаполнитьОтчетБухОтчетностьМПФормаОтчета2012Кв4_2(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв4" Тогда
		ЗаполнениеБухгалтерскойОтчетностиУпрощенная.ЗаполнитьОтчетБухОтчетностьМПФормаОтчета2015Кв4(ПараметрыОтчета, Контейнер);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБухОтчетностьСОНКО(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
		
		ЗаполнениеБухгалтерскойОтчетностиУпрощенная.ЗаполнитьОтчетБухОтчетностьСОНКОФормаОтчета2012Кв4(ПараметрыОтчета, Контейнер);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для заполнения бухгалтерской отчетности в Финансовом анализе.
// Возвращает параметры для автозаполнения.
// Состав параметров, а также контейнер автозаполнения различны для разных редакций отчета и периодов.
//
// При добавлении новой редакции формы бухотчетности 
// необходимо отработать в этой процедуре параметры (ПараметрыОтчета, Контейнер),
// с которыми выполняется метод ЗаполнениеБухгалтерскойОтчетности.ЗаполнитьБухОтчетность, вызываемый из этой формы.
// 
// Параметры:
//   ИДРедакцииОтчета    - Строка - редакция формы бухгалтерской отчетности.
//   Организация         - СправочникСсылка.Организации - организация, для которой формируется отчетность.
//   НачалоПериодаОтчета - Дата
//   КонецПериодаОтчета  - Дата
//
// Возвращаемое значение:
//   Структура - поля:
//      ПараметрыОтчета - Структура - параметры отчета, состав зависит от редакции отчета и периода заполнения
//      Контейнер       - Структура - контейнер автозаполнения БРО, состав зависит от редакции отчета и периода заполнения
//      ИмяСвойстваОФР  - Строка    - имя свойства, содержащего отчет о финансовых результатах в контейнере
//
Функция ПараметрыАвтозаполненияБухОтчетности(
	ИДРедакцииОтчета,
	Организация,
	НачалоПериодаОтчета,
	КонецПериодаОтчета) Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", Новый Массив);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецПериодаОтчета);
	
	ПрименениеЕНВД = РегламентированнаяОтчетностьПереопределяемый.ПлательщикЕНВД(Организация, КонецПериодаОтчета);
	ПараметрыОтчета.Вставить("ПрименениеЕНВД", ПрименениеЕНВД);
	
	ДеревоНастроекСтрокРасшифровки = Новый ДеревоЗначений;
	ДеревоНастроекСтрокРасшифровки.Колонки.Добавить("ИмяОбластиДопСтроки");
	
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс", ДеревоНастроекСтрокРасшифровки.Скопировать());
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОПУ", ДеревоНастроекСтрокРасшифровки.Скопировать());
	
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей", Неопределено);
	
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс",     Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",        Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОИК",        Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОДДС",       Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения1", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения2", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения4", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения5", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения6", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения7", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения8", Ложь);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	Если Справочники.Организации.ЭтоНекоммерческаяОрганизация(Организация) Тогда
		ПрефиксАвтозаполнения = "БалансНКО";
	Иначе
		ПрефиксАвтозаполнения = "Баланс";
	КонецЕсли;
	
	Если КонецПериодаОтчета < КонецДня(Дата('2012-01-01')) Тогда
		ИдентификаторАвтозаполнения = ПрефиксАвтозаполнения;
		
	ИначеЕсли КонецПериодаОтчета < КонецДня(Дата('2012-12-01')) Тогда
		ИдентификаторАвтозаполнения = СтрШаблон("%1_2012Кв1", ПрефиксАвтозаполнения);
		
	ИначеЕсли КонецПериодаОтчета < КонецДня(Дата('2019-01-01')) Тогда
		ИдентификаторАвтозаполнения = СтрШаблон("%1_2012Кв4_3", ПрефиксАвтозаполнения);
		
	Иначе
		ИдентификаторАвтозаполнения = ПрефиксАвтозаполнения;
		
	КонецЕсли;
	
	Баланс = Новый Структура;
	Баланс.Вставить("ИдентификаторАвтозаполнения", ИдентификаторАвтозаполнения);
	
	ПараметрыОтчета.Вставить("СтруктураОтчета", Новый Структура("Баланс", Баланс));
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Баланс",        Новый Структура);
	Контейнер.Вставить("ОИК",           Новый Структура);
	Контейнер.Вставить("ОДДС",          Новый Структура);
	Контейнер.Вставить("ОЦИПС",         Новый Структура); // Отчет об использовании целевых средств до 2019 года
	Контейнер.Вставить("ОЦИС",          Новый Структура); // Отчет об использовании целевых средств после 2019 года
	Контейнер.Вставить("РасчетАктивов", Новый Структура);
	Контейнер.Вставить("Пояснения1",    Новый Структура);
	Контейнер.Вставить("Пояснения2",    Новый Структура);
	Контейнер.Вставить("Пояснения3",    Новый Структура);
	Контейнер.Вставить("Пояснения4",    Новый Структура);
	Контейнер.Вставить("Пояснения5",    Новый Структура);
	Контейнер.Вставить("Пояснения6",    Новый Структура);
	Контейнер.Вставить("Пояснения7",    Новый Структура);
	Контейнер.Вставить("Пояснения8",    Новый Структура);
	Контейнер.Вставить("Пояснения9",    Новый Структура);
	
	Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" 
		Или ИДРедакцииОтчета = "ФормаОтчета2011Кв3" 
		Или ИДРедакцииОтчета = "ФормаОтчета2011Кв4" Тогда
		
		ИмяСвойстваОФР = "ФормаОтчета";
		Контейнер.Вставить(ИмяСвойстваОФР, Новый Структура);
		
	Иначе
		
		ИмяСвойстваОФР = "ОФР";
		Контейнер.Вставить(ИмяСвойстваОФР, Новый Структура);
		
		ОФР = Новый Структура;
		ОФР.Вставить("ИмяМакета", "");
		ПараметрыОтчета.СтруктураОтчета.Вставить("ОФР", ОФР);
		ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОФР", ДеревоНастроекСтрокРасшифровки.Скопировать());
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	Результат.Вставить("Контейнер",       Контейнер);
	Результат.Вставить("ИмяСвойстваОФР",  ИмяСвойстваОФР);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УниверсальныеПроцедурыИФункцииАвтозаполнения

Функция ОписаниеПериода(НачалоПериода, КонецПериода) Экспорт
	
	Если НачалоМесяца(КонецПериода) = НачалоПериода Тогда
		Результат = Формат(КонецПериода, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		Результат = Формат(НачалоПериода, "ДФ = 'ММММ гггг'") + " - " + Формат(КонецПериода, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0) Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
	
КонецФункции

Функция РасширенныйПериодОтчета(ДатаНачалаПериодаОтчета) Экспорт
	
	Возврат НачалоГода(ДатаНачалаПериодаОтчета) <> НачалоДня(ДатаНачалаПериодаОтчета);
	
КонецФункции

Функция УчетНа70ВедетсяСводно() Экспорт
	
	Субконто_РаботникиОрганизаций = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	
	СчетРасчетовСПерсоналом = Счет("70");
	
	НайденноеСубконто = СчетРасчетовСПерсоналом.ВидыСубконто.Найти(Субконто_РаботникиОрганизаций, "ВидСубконто");
	
	Возврат (НайденноеСубконто = Неопределено);
	
КонецФункции

Процедура ОчиститьРазделРасшифровки(ТаблицаРасшифровки, ИмяРаздела) Экспорт
	
	СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяРаздела", ИмяРаздела));
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеПоказателя(ПоказателиПоРазделам, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	НоваяСтрока = ПоказателиПоРазделам.Добавить();
	НоваяСтрока.Раздел = ИмяРаздела;
	НоваяСтрока.Показатель = ИмяПоказателя;
	НоваяСтрока.Сумма = ЗначениеПоказателя;
	
КонецПроцедуры

Функция СальдоИОборотыПоСчетамИСубконто(НастройкиПолученияБухитогов, Счета, Субконто) Экспорт
	
	СчетаДляРасчета = МассивСчетовВИерархииИзСписка(Счета);
	
	СубконтоДляРасчета = Новый Массив;
	ИменаСубконто = СтрРазделить(Субконто, ",", Ложь);
	Для Каждого ИмяСубконто Из ИменаСубконто Цикл
		СубконтоДляРасчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[СокрЛП(ИмяСубконто)]);
	КонецЦикла;
	
	НастройкиПолученияБухитогов.Вставить("Счета", СчетаДляРасчета);
	НастройкиПолученияБухитогов.Вставить("ВидыСубконто", СубконтоДляРасчета);
	
	СальдоИОбороты = ЗаполнениеБухгалтерскойОтчетностиИтоги.СальдоИОборотыПоСчетамИСубконто(НастройкиПолученияБухитогов);
	
	НастройкиПолученияБухитогов.Удалить("Счета");
	НастройкиПолученияБухитогов.Удалить("ВидыСубконто");
	
	Возврат СальдоИОбороты;
	
КонецФункции

Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет(Счет));
	Иначе
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательСверкаНУ",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуРазвернуто(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуВПДР(ОбщиеНастройки, Счет, ИмяВидаПрочихДоходовИРасходов) Экспорт
	
	ОтборПоАналитике = Новый Соответствие;
	ОтборПоАналитике.Вставить("Субконто1.ВидПрочихДоходовИРасходов", Перечисления.ВидыПрочихДоходовИРасходов[ИмяВидаПрочихДоходовИРасходов]);
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуКонтрагентыРазвернуто(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуКонтрагентыДоговорыРазвернуто(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто2");
	ОписаниеГруппировки.Вставить("Представление", "Договоры");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуКонтрагентыДоговорыСКДОтрицательное(ОбщиеНастройки, Счет) Экспорт
	
	ОтборПоАналитике = Новый Соответствие;
	
	МеньшеНуля = Новый Структура("ВидСравненияКомпоновкиДанных, Значение", ВидСравненияКомпоновкиДанных.Меньше, 0);
	ОтборПоАналитике.Вставить("СальдоНаКонецПериода.БУКонечныйОстатокДт", МеньшеНуля);
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто2");
	ОписаниеГруппировки.Вставить("Представление", "Договоры");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуКонтрагентыДоговорыСКДПоложительное(ОбщиеНастройки, Счет) Экспорт
	
	ОтборПоАналитике = Новый Соответствие;
	
	БольшеНуля = Новый Структура("ВидСравненияКомпоновкиДанных, Значение", ВидСравненияКомпоновкиДанных.Больше, 0);
	ОтборПоАналитике.Вставить("СальдоНаКонецПериода.БУКонечныйОстатокДт", БольшеНуля);
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто2");
	ОписаниеГруппировки.Вставить("Представление", "Договоры");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуКонтрагентыДоговорыСККПоложительное(ОбщиеНастройки, Счет) Экспорт
	
	ОтборПоАналитике = Новый Соответствие;
	
	БольшеНуля = Новый Структура("ВидСравненияКомпоновкиДанных, Значение", ВидСравненияКомпоновкиДанных.Больше, 0);
	ОтборПоАналитике.Вставить("СальдоНаКонецПериода.БУКонечныйОстатокКт", БольшеНуля);
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто2");
	ОписаниеГруппировки.Вставить("Представление", "Договоры");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуКонтрагентыДоговорыСККОтрицательное(ОбщиеНастройки, Счет) Экспорт
	
	ОтборПоАналитике = Новый Соответствие;
	
	МеньшеНуля = Новый Структура("ВидСравненияКомпоновкиДанных, Значение", ВидСравненияКомпоновкиДанных.Меньше, 0);
	ОтборПоАналитике.Вставить("СальдоНаКонецПериода.БУКонечныйОстатокКт", МеньшеНуля);
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто2");
	ОписаниеГруппировки.Вставить("Представление", "Договоры");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуРаботникиРазвернуто(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Работники организаций");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуВидыПлатежейРазвернуто(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Виды платежей в бюджет (фонды)");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуВидыПлатежейУровниБюджетовРазвернуто(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Виды платежей в бюджет (фонды)");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто2");
	ОписаниеГруппировки.Вставить("Представление", "Уровни бюджетов");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиАнализаСчета(ОбщиеНастройки, Счет, КорСчет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.АнализСчета.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет(Счет));
	Иначе
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", НЕ ЗначениеЗаполнено(КорСчет));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательСверкаНУ",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("КорСчет");
	Если ТипЗнч(КорСчет) = Тип("Строка") Тогда
		КорСчета = Новый СписокЗначений;
		МассивКодовСчетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КорСчет);
		Для Каждого КодСчета Из МассивКодовСчетов Цикл
			КорСчета.Добавить(Счет(СокрЛП(КодСчета)));
		КонецЦикла;
		ВидСравненияСчетов = ?(МассивКодовСчетов.Количество() > 1, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВИерархии);
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияСчетов, КорСчета);
	Иначе
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВИерархии, КорСчет);
	КонецЕсли;
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			ВидСравненияОтбора = ?(ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив"),
				ВидСравненияКомпоновкиДанных.ВСписке,
				ВидСравненияКомпоновкиДанных.Равно);
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияОтбора, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция ОписаниеОбъектовВПДР(ИмяВидаПрочихДоходовИРасходов) Экспорт
	
	Возврат "/объекты со значением реквизита ""Вид прочих доходов и расходов"" - """ + Строка(Перечисления.ВидыПрочихДоходовИРасходов[ИмяВидаПрочихДоходовИРасходов]) + """/";
	
КонецФункции

Функция НастройкиАнализаСчетаВПДР(ОбщиеНастройки, Счет, КорСчет, ИмяВидаПрочихДоходовИРасходов) Экспорт
	
	ОтборПоАналитике = Новый Соответствие;
	ОтборПоАналитике.Вставить("Субконто1.ВидПрочихДоходовИРасходов", Перечисления.ВидыПрочихДоходовИРасходов[ИмяВидаПрочихДоходовИРасходов]);
	
	НастройкиРасшифровки = НастройкиАнализаСчета(ОбщиеНастройки, Счет, КорСчет, ОтборПоАналитике);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиОСВПоСчетуАвансаПоВидуАктива(ОбщиеНастройки, Счет) Экспорт
	
	ОтборПоАналитике = Новый Соответствие;
	
	МеньшеНуля = Новый Структура("ВидСравненияКомпоновкиДанных, Значение", ВидСравненияКомпоновкиДанных.Меньше, 0);
	ОтборПоАналитике.Вставить("СальдоНаКонецПериода.БУКонечныйОстатокКт", МеньшеНуля);
	
	НастройкиРасшифровки = НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике);
	
	ТабличнаяЧастьГруппировка = Новый Массив;
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто1");
	ОписаниеГруппировки.Вставить("Представление", "Контрагенты");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	ОписаниеГруппировки = Новый Структура;
	ОписаниеГруппировки.Вставить("Использование", Истина);
	ОписаниеГруппировки.Вставить("Поле", "Субконто2");
	ОписаниеГруппировки.Вставить("Представление", "Договоры");
	ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
	ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
	
	НастройкиРасшифровки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция СчетаИзСписка(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Разделитель = ",";
	
	Если ТипЗнч(СписокСчетов) = Тип("Структура") Тогда
		ЭлементСтруктуры = Неопределено;
		Если НЕ СписокСчетов.Свойство(ИмяСпискаСчетов, ЭлементСтруктуры) Тогда
			ЭлементСтруктуры = "";
		КонецЕсли;
		СписокСчетов = ЭлементСтруктуры;
	КонецЕсли;
	
	Пока НЕ ПустаяСтрока(СписокСчетов) Цикл
		ПозицияРазделителя = СтрНайти(СписокСчетов, Разделитель);
		
		Если ПозицияРазделителя > 0 Тогда
			КодСчета = СокрЛП(Лев(СписокСчетов, ПозицияРазделителя - 1));
			СписокСчетов = Сред(СписокСчетов, ПозицияРазделителя + 1);
		Иначе
			КодСчета = СокрЛП(СписокСчетов);
			СписокСчетов = "";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(КодСчета) Тогда
			МассивСчетов.Добавить(Счет(КодСчета));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

Функция МассивСчетовВИерархииИзСписка(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено) Экспорт
	
	Счета = СчетаИзСписка(СписокСчетов, ИмяСпискаСчетов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счета", Счета);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счета)";
	
	Субсчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Субсчета;
	
КонецФункции

Функция ТерминальныеСчетаВИерархииИзСписка(СписокСчетов) Экспорт
	
	ИсходныеСчета = СчетаИзСписка(СписокСчетов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хозрасчетный.Родитель КАК Родитель
		|ПОМЕСТИТЬ ВТ_ВсеРодители
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Хозрасчетный.Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ИсходныеСчета)
		|	И НЕ Хозрасчетный.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_ВсеРодители.Родитель
		|				ИЗ
		|					ВТ_ВсеРодители КАК ВТ_ВсеРодители)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Порядок";
	
	Запрос.УстановитьПараметр("ИсходныеСчета", ИсходныеСчета);
	
	ТерминальныеСчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат ТерминальныеСчета;
	
КонецФункции

Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение) Экспорт
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

#КонецОбласти

#Область ОберткиПроцедурИФункций

Функция Счет(УсловныйКод)
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет(УсловныйКод);
	
КонецФункции

#КонецОбласти

#КонецОбласти
