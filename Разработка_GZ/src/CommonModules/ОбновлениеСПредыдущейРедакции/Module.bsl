///////////////////////////////////////////////////////////////////////////////
// Обновление с предыдущей редакции
// Модуль содержит процедуры и функции обработки данных
// при обновлении с ред. 2.0
//
//
///////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыПереходаСРедакции20() Экспорт
	
	Параметры = Константы.ПараметрыПереходаСРедакции20.Получить().Получить();
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура();
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЗапуститьПомощникПереходаСРедакции20") Тогда
		Параметры.Вставить("ЗапуститьПомощникПереходаСРедакции20", Ложь);
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ВыполнитьЗаполнениеПоследовательностей") Тогда
		Параметры.Вставить("ВыполнитьЗаполнениеПоследовательностей", Ложь);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьПараметрыПереходаСРедакции20(Параметры) Экспорт
	
	Константы.ПараметрыПереходаСРедакции20.Установить(Новый ХранилищеЗначения(Параметры));
	
КонецПроцедуры

Функция ИнформационнаяБазаОбновленаС20() Экспорт

	Возврат ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить());
	
КонецФункции

Функция ЭтоПереходСРедакции20() Экспорт
	
	Если НЕ ПервыйЗапускИнформационнойБазы() 
		ИЛИ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоВерсияБП2 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
		"3.0.0.0", ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)) > 0;
	
	Если ИнформационнаяБазаОбновленаС20() И ЭтоВерсияБП2 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПервыйЗапускИнформационнойБазы()
	
	Возврат НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.ЭтоАвтономноеРабочееМесто.Получить();
		
КонецФункции

Процедура ОчиститьВерисиюПодсистемыБСППриПереходеС2БП() Экспорт
	
	Если ЭтоПереходСРедакции20() Тогда
		
		ВерсииПодсистем = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = "СтандартныеПодсистемы";
		ВерсииПодсистем.Активность = Истина;
		ВерсииПодсистем.Версия = "0.0.0.0";
		ВерсииПодсистем.Записать(Истина);
		ВерсииПодсистем = РегистрыСведений.УдалитьВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = "СтандартныеПодсистемы";
		ВерсииПодсистем.Удалить();
		
		ВерсииПодсистем = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = Метаданные.Имя;
		ВерсииПодсистем.ЭтоОсновнаяКонфигурация = Истина;
		ВерсииПодсистем.Активность = Истина;
		ВерсииПодсистем.Версия = "0.0.0.0";
		ВерсииПодсистем.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьНовыеПодсистемы() Экспорт
	
	// После обновления с редакции 2.0 все подсистемы БСП будут считаться новыми, т.к. в старой редакции не было ИОМ.
	// Поэтому будут срабатывать только обработчики первоначального заполнения, а в данном случае это не верно.
	Если ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции20() Тогда 
		СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
		СведенияОбОбновлении.НовыеПодсистемы.Очистить();
		ОбновлениеИнформационнойБазыСлужебный.ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	КонецЕсли;
	
КонецПроцедуры


#Область ОбработкаДанных

#Область ОбработкаНеконсистентныхДанных

// Процедура обрабатывает "потерянные" объекты конфигурации, которые препятствуют переходу с 2.0
//
Процедура ОбработатьПотерянныеОбъекты() Экспорт
	
	// Обработчики должны выполняться только если произошел переход с 2.0
	// и ИБ запускается первый раз после обновления конфигурации
	// и только если в ИБ нет разделения
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнформационнаяБазаОбновленаС20()
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)="0.0.0.0" Тогда
		
		// Обработка справочника ПодразделенияОрганизаций - 
		// обрабатываются элементы с пустым Владельцем
		ОбработатьПотерянныеПодразделения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПотерянныеПодразделения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	(ПодразделенияОрганизаций.Владелец ЕСТЬ NULL 
	|			ИЛИ ПодразделенияОрганизаций.Владелец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТекущийОбъект.РайонныйКоэффициент = 0 Тогда
			ТекущийОбъект.РайонныйКоэффициент = 1;
		КонецЕсли;
		ТекущийОбъект.ПометкаУдаления = Истина;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);			
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать элемент
                                    |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ПодразделенияОрганизаций,
				Выборка.Ссылка, 
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьДанныеУчетнойПолитики() Экспорт
	
	ПерезаписатьУчетнуюПолитику();
	ЗаполнениеЗначенийФункциональныхОпцийПриОбновленииС20();
	ЗаполнитьПараметрыУчетаДоходовРасходовИППриОбновлении();
	ЗаполнитьОсновнойВидДеятельностиПриОбновлении();
	ЗаполнитьУчетнуюПолитикуПорядокОтраженияАвансаУСН();
	ЗаписатьУчетнуюПолитикуОбособленныхПодразделений();
	ЗаполнитьЗакладкуЗатратыНаПроизводство();
	УстановитьПорядокПризнанияДопРасходов();
	ЗаполнитьСтавкуНалогаУСН();
	УстановитьПорядокПризнанияТаможенныхПлатежей();
	ОчиститьНомерИДатуУведомленияУСН();
	ЗаполнитьСпособПогашенияСтоимостиСпецодеждыНУ();
	ОчиститьОсновнойХарактерДеятельностиНоменклатурнаяГруппаПриОбновлении();
	УстановитьАктуальнуюУчетнуюПолитикуУСН2016();
	
	// Конвертация настроек
	НастройкиУчета.СоздатьНастройкиУчетаПоДаннымУчетнойПолитики();
	
КонецПроцедуры

Процедура УстановитьВестиУчетПоПодразделениям() Экспорт
	
	Если ЭтоПереходСРедакции20() Тогда
		
		Константы.ВестиУчетПоПодразделениям.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет перенос(конвертацию) контактной информации, дополнительных сведений
// и паспортных данных физических лиц при обновлении конфигурации с редакции 2.0 на
// редакцию 3.0 со встроенной БСП
//
Процедура ПереносКИиДопСвойствПриОбновленииС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	ПереносКИПриОбновленииС20();
	ПереносКИОсновныхСредствПриОбновленииС20();
	ПереносДопСвойствПриОбновленииС20();
	
КонецПроцедуры

Процедура ПереносОсновнойОрганизацииПриОбновленииС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОсновнойОрганизации = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнаяОрганизация"];
	НастройкаОсновногоПодразделения = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновноеПодразделениеОрганизации"];
	НастройкаОсновногоСклада = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнойСклад"];
	НастройкаВидимостиСчетовУчета = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ПоказыватьВДокументахСчетаУчета"];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаОсновнойОрганизации" ,НастройкаОсновнойОрганизации);
	Запрос.УстановитьПараметр("НастройкаОсновногоПодразделения" ,НастройкаОсновногоПодразделения);
	Запрос.УстановитьПараметр("НастройкаОсновногоСклада" ,НастройкаОсновногоСклада);
	Запрос.УстановитьПараметр("НастройкаВидимостиСчетовУчета" ,НастройкаВидимостиСчетовУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиБП20.ОсновнаяОрганизация) КАК ОсновнаяОрганизация,
	|	МАКСИМУМ(НастройкиБП20.ОсновноеПодразделение) КАК ОсновноеПодразделение,
	|	МАКСИМУМ(НастройкиБП20.ОсновнойСклад) КАК ОсновнойСклад,
	|	МАКСИМУМ(НастройкиБП20.ВидимостьСчетовУчета) КАК ПоказыватьСчетаУчетаВДокументах,
	|	НастройкиБП20.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрЗначениеПрав.Значение КАК ОсновнаяОрганизация,
	|		NULL КАК ОсновноеПодразделение,
	|		NULL КАК ОсновнойСклад,
	|		NULL КАК ВидимостьСчетовУчета,
	|		РегистрЗначениеПрав.Пользователь КАК Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновнойОрганизации
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		NULL,
	|		NULL,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновногоПодразделения
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		NULL,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновногоСклада
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаВидимостиСчетовУчета) КАК НастройкиБП20
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиБП20.Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.Пользователь.ИдентификаторПользователяИБ);
			ИмяПользователяИБ = ПользовательИБ.Имя;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТекущаяНастройкаОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ИмяПользователяИБ);
		ТекущаяНастройкаОсновногоПодразделения = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации", ИмяПользователяИБ);
		ТекущаяНастройкаОсновногоСклада = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад", ИмяПользователяИБ);
		
		ТекущаяНастройкаОрганизации = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОрганизации), Выборка.ОсновнаяОрганизация, ТекущаяНастройкаОрганизации);
		ТекущаяНастройкаОсновногоПодразделения = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновногоПодразделения), Выборка.ОсновноеПодразделение, ТекущаяНастройкаОсновногоПодразделения);
		ТекущаяНастройкаОсновногоСклада = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновногоСклада), Выборка.ОсновнойСклад, ТекущаяНастройкаОсновногоСклада);
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОрганизации) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнаяОрганизация"),, ТекущаяНастройкаОрганизации,, ИмяПользователяИБ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновногоПодразделения) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаОсновногоПодразделения, "Владелец") <> ТекущаяНастройкаОрганизации Тогда
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
					БухгалтерскийУчетПереопределяемый.ПустоеПодразделение(),, ИмяПользователяИБ);
			Иначе
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
					ТекущаяНастройкаОсновногоПодразделения,, ИмяПользователяИБ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновногоСклада) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнойСклад"),, ТекущаяНастройкаОсновногоСклада,, ИмяПользователяИБ);
		КонецЕсли;
		
		Если Выборка.ПоказыватьСчетаУчетаВДокументах <> NULL Тогда
			ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ПоказыватьСчетаУчетаВДокументах", Выборка.ПоказыватьСчетаУчетаВДокументах, ИмяПользователяИБ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносКИПриОбновленииС20()
	
	// Предварительно нужно обновить контактную информацию.
	// Этот обработчик запускается либо при первом запуске, либо в обработчике обновления
	// значительно позже текущего.
	// При установке значений необновленной контактной информации возникает ошибка в недрах БСП.
	ОбновлениеИнформационнойБазыБП.КонтактнаяИнформацияОбновлениеИБ();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьКонтактнаяИнформация.Вид,
	|	УдалитьКонтактнаяИнформация.Вид.Наименование
	|ИЗ
	|	РегистрСведений.УдалитьКонтактнаяИнформация КАК УдалитьКонтактнаяИнформация
	|ГДЕ
	|	(НЕ УдалитьКонтактнаяИнформация.Вид.Предопределенный)
	|	И УдалитьКонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыОбъектовКонтактнойИнформации.Контрагенты)";
	ТаблицаУдалитьВидыКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	
	СоответствиеВидовКИ = Новый Соответствие;
	
	// Справочник "КонтактныеЛица"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица     , Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияКонтактногоЛица, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонКонтактногоЛица         , Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонМобильный               , Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица);	
	
	// Справочник "Контрагенты"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресКонтрагента         , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресКонтрагента       , Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонКонтрагента         , Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	
	НайденнаяСтрока = ТаблицаУдалитьВидыКонтактнойИнформации.Найти("Почтовый адрес", "ВидНаименование"); 
	Если НайденнаяСтрока <> Неопределено Тогда 
		СоответствиеВидовКИ.Вставить(НайденнаяСтрока.Вид, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаУдалитьВидыКонтактнойИнформации.Найти("Факс", "ВидНаименование"); 
	Если НайденнаяСтрока <> Неопределено Тогда 
		СоответствиеВидовКИ.Вставить(НайденнаяСтрока.Вид, Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	КонецЕсли;
	
	// Справочник "Организации"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.EmailОрганизации            , Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияОрганизации , Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонОрганизации          , Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации, Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.АдресИнострОрганизацииУчред , Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФаксОрганизации             , Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресОрганизации        , Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресОрганизации          , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.АдресОрганизацииПочтовый    , Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		
	// Справочник "ПодразделенияОрганизации"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресПодразделенияОрганизации       , Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонПодразделенияОрганизации         , Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФаксПодразделенияОрганизации            , Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.EmailПодразделенияОрганизации           , Справочники.ВидыКонтактнойИнформации.EmailПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияОрганизации, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияОрганизаций);
	
	// Справочник "ФизическиеЛица"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнформАдресФизЛица     , Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнострАдресФизЛица     , Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресФизЛица       , Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресФизЛица         , Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонФизЛица         , Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонСлужебныйФизЛица, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	// Справочник "Пользователи"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияПользователя              , Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПользователя);
	
	СоответствиеГруппВидовКИ = Новый Соответствие;
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.КонтактныеЛица")          , Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Контрагенты")             , Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Организации")             , Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
	СоответствиеГруппВидовКИ.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения(), Справочники.ВидыКонтактнойИнформации.СправочникПодразделенияОрганизаций);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Пользователи")            , Справочники.ВидыКонтактнойИнформации.СправочникПользователи);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.ФизическиеЛица")          , Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	
	// Перенос контактной информации из РС в табличные части справочников
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбъектыСКИ
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодразделенияОрганизацийКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций.КонтактнаяИнформация КАК ПодразделенияОрганизацийКонтактнаяИнформация
	|ГДЕ
	|	НЕ ПодразделенияОрганизацийКонтактнаяИнформация.Ссылка.Владелец ЕСТЬ NULL
	|	И ПодразделенияОрганизацийКонтактнаяИнформация.Ссылка.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКонтактнаяИнформация.Объект КАК Объект,
	|	УдалитьКонтактнаяИнформация.Тип КАК Тип,
	|	УдалитьКонтактнаяИнформация.Вид КАК Вид,
	|	УдалитьКонтактнаяИнформация.Вид.Наименование КАК ВидНаименование,
	|	УдалитьКонтактнаяИнформация.Вид.Тип КАК ВидТип,
	|	УдалитьКонтактнаяИнформация.Вид.Порядок КАК ВидПорядок,
	|	УдалитьКонтактнаяИнформация.Вид.МожноРедактироватьТолькоВДиалоге КАК ВидМожноРедактироватьТолькоВДиалоге,
	|	УдалитьКонтактнаяИнформация.Представление КАК Представление,
	|	УдалитьКонтактнаяИнформация.Поле1 КАК Поле1,
	|	УдалитьКонтактнаяИнформация.Поле2 КАК Поле2,
	|	УдалитьКонтактнаяИнформация.Поле3 КАК Поле3,
	|	УдалитьКонтактнаяИнформация.Поле4 КАК Поле4,
	|	УдалитьКонтактнаяИнформация.Поле5 КАК Поле5,
	|	УдалитьКонтактнаяИнформация.Поле6 КАК Поле6,
	|	УдалитьКонтактнаяИнформация.Поле7 КАК Поле7,
	|	УдалитьКонтактнаяИнформация.Поле8 КАК Поле8,
	|	УдалитьКонтактнаяИнформация.Поле9 КАК Поле9,
	|	УдалитьКонтактнаяИнформация.Поле10 КАК Поле10
	|ИЗ
	|	РегистрСведений.УдалитьКонтактнаяИнформация КАК УдалитьКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыСКИ КАК ОбъектыСКИ
	|		ПО УдалитьКонтактнаяИнформация.Объект = ОбъектыСКИ.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(УдалитьКонтактнаяИнформация.Вид) <> ТИП(СТРОКА)
	|	И НЕ УдалитьКонтактнаяИнформация.Объект.Ссылка ЕСТЬ NULL
	|	И ОбъектыСКИ.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Объект";
	
	НаименованиеОсновнойСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РаботаСАдресамиКлиентСервер.ОсновнаяСтрана(), "Наименование");
	
	СоответствиеПолейАдреса = Новый Структура();
	СоответствиеПолейАдреса.Вставить("Поле2", "Регион");
	СоответствиеПолейАдреса.Вставить("Поле3", "Район");
	СоответствиеПолейАдреса.Вставить("Поле4", "Город");
	СоответствиеПолейАдреса.Вставить("Поле5", "НаселенныйПункт");
	СоответствиеПолейАдреса.Вставить("Поле6", "Улица");
	
	ВыборкаОбъект = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъект.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаОбъект.Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаОбъект.Выбрать();
		
		ОбъектВладелец = ВыборкаОбъект.Объект.ПолучитьОбъект();
		Если Метаданные.Справочники.Содержит(ОбъектВладелец.Метаданные())
			И ОбъектВладелец.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Вид) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоответствиеВидовКИ[Выборка.Вид] = Неопределено Тогда 
				НайденныйВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Выборка.ВидНаименование, Истина, СоответствиеГруппВидовКИ[ТипЗнч(Выборка.Объект)]);
				Если Не ЗначениеЗаполнено(НайденныйВидКИ) Тогда
					СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					СправочникВидыКИ.Наименование                      = СокрЛП(Выборка.ВидНаименование);
					СправочникВидыКИ.Родитель                          = СоответствиеГруппВидовКИ[ТипЗнч(Выборка.Объект)];
					СправочникВидыКИ.Тип                               = Выборка.ВидТип;
					СправочникВидыКИ.РеквизитДопУпорядочивания         = Выборка.ВидПорядок;
					СправочникВидыКИ.ВидРедактирования                 = ?(Выборка.ВидМожноРедактироватьТолькоВДиалоге, "Диалог", "ПолеВводаИДиалог");
					СправочникВидыКИ.МожноИзменятьСпособРедактирования = Истина;
					СправочникВидыКИ.ТолькоНациональныйАдрес           = Ложь;
					СправочникВидыКИ.Используется                      = Истина;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникВидыКИ);
					
					Если НЕ ЗначениеЗаполнено(СправочникВидыКИ.Тип) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У вида контактной информации ""%1"" для ""%2"" не заполнен тип. Необходимо установить нужный тип.'"), 
							СправочникВидыКИ.Ссылка, СправочникВидыКИ.Родитель);
							
						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.Справочники.ВидыКонтактнойИнформации, 
							СправочникВидыКИ.Ссылка,
							ТекстСообщения);
							
					КонецЕсли;
					
					СоответствиеВидовКИ.Вставить(Выборка.Вид, СправочникВидыКИ.Ссылка);
				Иначе
					СоответствиеВидовКИ.Вставить(Выборка.Вид, НайденныйВидКИ);
				КонецЕсли;
			КонецЕсли;
			
			ВидКонтактнойИнформации = СоответствиеВидовКИ[Выборка.Вид];
			Представление = СтрЗаменить(Выборка.Представление, Символы.ПС," ");
			
			СтрокаКонтактнойИнформации = КонтактнаяИнформацияОбъекта.Добавить();
			СтрокаКонтактнойИнформации.Вид = ВидКонтактнойИнформации;
			СтрокаКонтактнойИнформации.Тип = Выборка.Тип;
			СтрокаКонтактнойИнформации.Представление = Представление;
			
			Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				
				// Заполение полей адреса
				ПоляАдреса = РаботаСАдресамиКлиентСервер.ПоляАдреса();
				ПоляАдреса.ТипАдреса = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
				ПоляАдреса.Представление = Представление;
				
				ПоляАдреса.Страна = НаименованиеОсновнойСтраны;
				ПоляАдреса.Индекс = Выборка.Поле1;
				
				Для Каждого КлючИЗначение Из СоответствиеПолейАдреса Цикл
					ЗаполнитьПолеАдресаИСокращение(ПоляАдреса, КлючИЗначение.Значение, Выборка[КлючИЗначение.Ключ]);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Выборка.Поле7) Тогда
					Здание = Новый Структура;
					Здание.Вставить("ТипЗдания", НСтр("ru='Дом'"));
					Здание.Вставить("Номер"    , Выборка.Поле7);
					ПоляАдреса.Здание = Здание;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Поле8) Тогда
					ПоляАдреса.Корпуса.Добавить(Новый Структура("Тип, Номер", НСтр("ru='Корпус'"), Выборка.Поле8));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Поле9) Тогда
					ПоляАдреса.Помещения.Добавить(Новый Структура("Тип, Номер", НСтр("ru='Кв.'"), Выборка.Поле9));
				КонецЕсли;
				
				ЗначениеАдресаJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ПоляАдреса, Выборка.Вид);
				СтрокаКонтактнойИнформации.Значение = ЗначениеАдресаJSON;
				
			ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				
				ПоляТелефона = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(СтрокаКонтактнойИнформации.Тип);
				ПоляТелефона.Представление = Представление;
				ПоляТелефона.КодСтраны     = Выборка.Поле1;
				ПоляТелефона.КодГорода     = Выборка.Поле2;
				ПоляТелефона.НомерТелефона = Выборка.Поле3;
				ПоляТелефона.Добавочный    = Выборка.Поле4;
				СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ПоляТелефона, СтрокаКонтактнойИнформации.Вид);
				
			Иначе
				
				СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					Представление, СтрокаКонтактнойИнформации.Вид);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
			
			Попытка
				УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ОбъектВладелец, СтрокаКонтактнойИнформации.Значение,
					СтрокаКонтактнойИнформации.Вид, , Истина);
			Исключение
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					ОбъектВладелец.Метаданные(),
					ОбъектВладелец.Ссылка,
					ПредставлениеОшибки);
			КонецПопытки;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектВладелец);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносКИОсновныхСредствПриОбновленииС20()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства.КонтактнаяИнформация КАК ОсновныеСредстваКонтактнаяИнформация
	|		ПО ОсновныеСредства.Ссылка = ОсновныеСредстваКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	НЕ ОсновныеСредства.УдалитьАдресМестонахождения ПОДОБНО """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеСредства.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОсновныеСредстваКонтактнаяИнформация.Ссылка) = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектОС = Выборка.Ссылка.ПолучитьОбъект();
		
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
		
		СтрокаКонтактнойИнформации = КонтактнаяИнформацияОбъекта.Добавить();
		СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства;
		СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		
		// В поле храниться адрес в формате 12 запятых.
		// Разложим его в структуру для БСП.
		АдресСтруктурой = РазложитьАдрес(ОбъектОС.УдалитьАдресМестонахождения);
		
		ПоляАдреса = РаботаСАдресамиКлиентСервер.ПоляАдреса();
		ПоляАдреса.ТипАдреса = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
		ПоляАдреса.Представление = АдресСтруктурой.Представление;
		
		ПоляАдреса.Страна = АдресСтруктурой.Страна;
		ПоляАдреса.Индекс = АдресСтруктурой.Индекс;
		
		ЗаполнитьПолеАдресаИСокращение(ПоляАдреса, "Регион", АдресСтруктурой.Регион);
		ЗаполнитьПолеАдресаИСокращение(ПоляАдреса, "Район", АдресСтруктурой.Район);
		ЗаполнитьПолеАдресаИСокращение(ПоляАдреса, "Город", АдресСтруктурой.Город);
		ЗаполнитьПолеАдресаИСокращение(ПоляАдреса, "НаселенныйПункт", АдресСтруктурой.НаселенныйПункт);
		ЗаполнитьПолеАдресаИСокращение(ПоляАдреса, "Улица", АдресСтруктурой.Улица);
		
		Если АдресСтруктурой.Свойство("Дом")
			И ЗначениеЗаполнено(АдресСтруктурой.Дом) Тогда
			Здание = Новый Структура;
			Здание.Вставить("Номер" , АдресСтруктурой.Дом);
			Здание.Вставить("ТипЗдания", ?(АдресСтруктурой.Свойство("ТипДома"), АдресСтруктурой.ТипДома, НСтр("ru='Дом'")));
			ПоляАдреса.Здание = Здание;
		КонецЕсли;
		
		Если АдресСтруктурой.Свойство("Корпус")
			И ЗначениеЗаполнено(АдресСтруктурой.Корпус) Тогда
			Корпус = Новый Структура;
			Корпус.Вставить("Номер", АдресСтруктурой.Корпус);
			Корпус.Вставить("Тип", ?(АдресСтруктурой.Свойство("ТипКорпуса"), АдресСтруктурой.ТипКорпуса, НСтр("ru='Корпус'")));
			ПоляАдреса.Корпуса.Добавить(Корпус);
		КонецЕсли;
		
		Если АдресСтруктурой.Свойство("Квартира")
			И ЗначениеЗаполнено(АдресСтруктурой.Квартира) Тогда
			Квартира = Новый Структура;
			Квартира.Вставить("Номер", АдресСтруктурой.Квартира);
			Квартира.Вставить("Тип", ?(АдресСтруктурой.Свойство("ТипКвартиры"), АдресСтруктурой.ТипКвартиры, НСтр("ru='Кв.'")));
			ПоляАдреса.Помещения.Добавить(Квартира);
		КонецЕсли;
		
		ЗначениеАдресаJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ПоляАдреса, СтрокаКонтактнойИнформации.Вид);
		СтрокаКонтактнойИнформации.Значение = ЗначениеАдресаJSON;
		
		УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(ОбъектОС, КонтактнаяИнформацияОбъекта);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОС);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПолеАдресаИСокращение(ПоляАдреса, ИмяПоля, ПредставлениеПоля)
	
	ЗначениеПоля = НаименованиеИСокращение(ПредставлениеПоля);
	ПоляАдреса[ИмяПоля] = ЗначениеПоля.Наименование;
	ПоляАдреса[ИмяПоля + "Сокращение"] = ЗначениеПоля.Сокращение;
	
КонецПроцедуры

Функция НаименованиеИСокращение(Представление)
	
	Результат = Новый Структура("Наименование, Сокращение", "", "");
	
	Позиция = СтрНайти(Представление, " ", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		Результат.Сокращение = Сред(Представление, Позиция + 1);
		Результат.Наименование = Лев(Представление, Позиция - 1);
	Иначе
		Результат.Наименование = Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазложитьАдрес(Знач СтрокаАдрес)
	
	КодСтраны = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";
	
	ТипДома ="";
	ТипКорпуса ="";
	ТипКвартиры ="";
	
	МассивАдрес = СтрРазделить(СтрокаАдрес, ",", Истина);
	ЭлементовВМассиве = МассивАдрес.Количество();   
	
	Если ЭлементовВМассиве > 0 тогда
		КодСтраны = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		Индекс = СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;
	
	//Расширенное представление
	Если ЭлементовВМассиве > 10 тогда
		ТипДома = СокрЛП(МассивАдрес[10]);
	КонецЕсли;
	Если ЭлементовВМассиве > 11 тогда
		ТипКорпуса = СокрЛП(МассивАдрес[11]);
	КонецЕсли;
	Если ЭлементовВМассиве > 12 тогда
		ТипКвартиры = СокрЛП(МассивАдрес[12]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Если ЗначениеЗаполнено(КодСтраны) Тогда
		СтранаСтруктура = Справочники.СтраныМира.ДанныеСтраныМира(КодСтраны);
		Если СтранаСтруктура = Неопределено Тогда
			СтруктураВозврата.Вставить("Страна", "");
		Иначе
			СтруктураВозврата.Вставить("Страна", СтранаСтруктура.Наименование);
		КонецЕсли;
	Иначе
		СтруктураВозврата.Вставить("КодСтраны", "643");
		СтруктураВозврата.Вставить("Страна", "РОССИЯ");
	КонецЕсли;
	
	СтруктураВозврата.Вставить("Индекс", Индекс);
	СтруктураВозврата.Вставить("Регион", Регион);
	СтруктураВозврата.Вставить("Район",  Район);
	СтруктураВозврата.Вставить("Город",  Город);
	СтруктураВозврата.Вставить("НаселенныйПункт", НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",  Улица);
	
	Если ЗначениеЗаполнено(Дом) Тогда
		СтруктураВозврата.Вставить("Дом", Дом);
		Если ЗначениеЗаполнено(ТипДома) Тогда
			СтруктураВозврата.Вставить("ТипДома", ТипДома);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Корпус) Тогда
		СтруктураВозврата.Вставить("Корпус",Корпус);
		Если ЗначениеЗаполнено(ТипКорпуса) Тогда
			СтруктураВозврата.Вставить("ТипКорпуса",ТипКорпуса);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Квартира) Тогда
		СтруктураВозврата.Вставить("Квартира",Квартира);
		Если ЗначениеЗаполнено(ТипКвартиры) Тогда
			СтруктураВозврата.Вставить("ТипКвартиры",ТипКвартиры);
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураВозврата.Вставить("Представление", ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураВозврата));
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) Экспорт
	
	ТекПредставление = "";
	
	Если СтруктураАдреса = Неопределено Тогда
		Возврат ТекПредставление;
	КонецЕсли;
	
	АдресЗаПределамиРФ = Неопределено;
	СтруктураАдреса.Свойство("ЗаПределамиРФ", АдресЗаПределамиРФ);
	Если АдресЗаПределамиРФ = Неопределено Тогда
		АдресЗаПределамиРФ = Ложь;
	КонецЕсли;
	
	Если Не АдресЗаПределамиРФ Тогда
		
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Индекс), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Регион), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Район), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Город), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.НаселенныйПункт), ", ");
		ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Улица), ", ");
		
		ТипДома = Неопределено;
		ТипКорпуса = Неопределено;
		ТипКвартиры = Неопределено;
		СтруктураАдреса.Свойство("ТипДома", ТипДома);
		СтруктураАдреса.Свойство("ТипКорпуса", ТипКорпуса);
		СтруктураАдреса.Свойство("ТипКвартиры", ТипКвартиры);
		
		Если СтруктураАдреса.Свойство("Дом") Тогда
			ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Дом), ", "      + ?(ЗначениеЗаполнено(ТипДома),     ТипДома,     "дом") + " № ");
		КонецЕсли;
		Если СтруктураАдреса.Свойство("Корпус") Тогда
			ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Корпус), ", "   + ?(ЗначениеЗаполнено(ТипКорпуса),  ТипКорпуса,  "корпус") + " ");
		КонецЕсли;
		Если СтруктураАдреса.Свойство("Квартира") Тогда
			ДополнитьПредставлениеАдреса(ТекПредставление, СокрЛП(СтруктураАдреса.Квартира), ", " + ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, "кв."));
		КонецЕсли;
		
		Если СтрДлина(ТекПредставление) > 2 Тогда
			ТекПредставление = Сред(ТекПредставление, 3);
		КонецЕсли;
	
	Иначе
		
		ТекПредставление = СтруктураАдреса.Представление;
	
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции

Процедура ДополнитьПредставлениеАдреса(ТекущееПредставление, Дополнение, СтрокаКонкатенации)
	
	Если Дополнение <> "" Тогда
		ТекущееПредставление = ТекущееПредставление + СтрокаКонкатенации + Дополнение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереносДопСвойствПриОбновленииС20()
	
	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// дополнительные реквизиты и сведения уже существуют
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных,
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный = ИСТИНА";
	
	НаборыДополнительныхРеквизитовИСведений = Запрос.Выполнить().Выгрузить();
	НаборыДополнительныхРеквизитовИСведений.Индексы.Добавить("ИмяПредопределенныхДанных");
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить(Тип("Число") , "Число");
	СоответствиеТипов.Вставить(Тип("Строка"), "Строка");
	СоответствиеТипов.Вставить(Тип("Булево"), "Булево");
	СоответствиеТипов.Вставить(Тип("Дата")  , "Дата");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.УдалитьЗначенияСвойствОбъектов"), "СправочникСсылка.ЗначенияСвойствОбъектов");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.ФизическиеЛица")                , "СправочникСсылка.ФизическиеЛица");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Склады")                        , "СправочникСсылка.Склады");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Пользователи")                  , "СправочникСсылка.Пользователи");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Организации")                   , "СправочникСсылка.Организации");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.НоменклатурныеГруппы")          , "СправочникСсылка.НоменклатурныеГруппы");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Номенклатура")                  , "СправочникСсылка.Номенклатура");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Контрагенты")                   , "СправочникСсылка.Контрагенты");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.КонтактныеЛица")                , "СправочникСсылка.КонтактныеЛица");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.СтраныМира")                    , "СправочникСсылка.СтраныМира");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")  , "СправочникСсылка.КлассификаторЕдиницИзмерения");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Валюты")                        , "СправочникСсылка.Валюты");
	
	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка,
	|	СвойстваОбъектов.ТипЗначения,
	|	СвойстваОбъектов.Наименование,
	|	СвойстваОбъектов.НазначениеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.УдалитьСвойстваОбъектов КАК СвойстваОбъектов";
	
	СоответствиеОбъектов = Новый Соответствие();
	СоответствиеЗначенийСвойствОбъектов = Новый Соответствие();
	
	НачатьТранзакцию();
	
	Попытка
	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Создание нового дополнительного свойства
			МассивНаименованийТипов = Новый Массив;
			Для Каждого КлючИЗначение ИЗ СоответствиеТипов Цикл
				Если Выборка.ТипЗначения.СодержитТип(КлючИЗначение.Ключ) Тогда
					МассивНаименованийТипов.Добавить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ОбъектПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			МассивТипов = Новый Массив;
			Для Каждого НаименованиеТипа Из МассивНаименованийТипов Цикл
				МассивТипов.Добавить(Тип(НаименованиеТипа));
			КонецЦикла;
			ОбъектПВХ.Заголовок    = Выборка.Наименование;
			ОбъектПВХ.Наименование = Выборка.Наименование;
			ОбъектПВХ.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			ОбъектПВХ.ЭтоДополнительноеСведение = Истина;
			
			Если УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ОбъектПВХ.ТипЗначения) Тогда
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Истина;
			Иначе
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Ложь;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПВХ);
			
			ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(Выборка.Ссылка, ОбъектПВХ.Ссылка);
			
			СоответствиеОбъектов.Вставить(Выборка.Ссылка, ОбъектПВХ.Ссылка);
			
			// Перенос элементов справочника ЗначенияСвойствОбъектов
			ВыборкаЗначенияСвойствОбъектов = Справочники.УдалитьЗначенияСвойствОбъектов.Выбрать(, Выборка.Ссылка);
			Пока ВыборкаЗначенияСвойствОбъектов.Следующий() Цикл
				НовыйЭлемент = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
				НовыйЭлемент.Наименование = ВыборкаЗначенияСвойствОбъектов.Наименование;
				НовыйЭлемент.Владелец     = ОбъектПВХ.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйЭлемент);
				ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(
					ВыборкаЗначенияСвойствОбъектов.Ссылка, НовыйЭлемент.Ссылка);
				СоответствиеЗначенийСвойствОбъектов.Вставить(ВыборкаЗначенияСвойствОбъектов.Ссылка, НовыйЭлемент.Ссылка);
			КонецЦикла;

			// Перенос значений свойства в другой регистр
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&СвойствоПосле КАК Свойство,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Значение) = ТИП(Справочник.УдалитьЗначенияСвойствОбъектов)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЗначениеСвойствОбъектов,
			|	ЗначенияСвойствОбъектов.Значение КАК ЗначениеСтарое,
			|	ЗначенияСвойствОбъектов.Объект
			|ИЗ
			|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &СвойствоДо";
			
			Запрос.УстановитьПараметр("СвойствоДо"   , Выборка.Ссылка);
			Запрос.УстановитьПараметр("СвойствоПосле", ОбъектПВХ.Ссылка);
			ТаблицаЗначенийДопСведений = Запрос.Выполнить().Выгрузить();
			
			СоответствияТиповИНаборов = Новый Соответствие();
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			Для Каждого СтрокаЗначения Из ТаблицаЗначенийДопСведений Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаЗначения.Объект) Тогда
					Продолжить;
				КонецЕсли;
				
				ТипЗначенияОбъекта = ТипЗнч(СтрокаЗначения.Объект);
				НаборДополнительныхРеквизитовИСведений = СоответствияТиповИНаборов.Получить(ТипЗначенияОбъекта);
				Если НаборДополнительныхРеквизитовИСведений = Неопределено Тогда
					
					МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
					Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
						Набор = НаборыДополнительныхРеквизитовИСведений.Найти("Справочник_" + МетаданныеТипа.Имя, "ИмяПредопределенныхДанных");
					ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
						Набор = НаборыДополнительныхРеквизитовИСведений.Найти("Документ_" + МетаданныеТипа.Имя, "ИмяПредопределенныхДанных");
					Иначе
						Набор = Неопределено;
					КонецЕсли;
					
					НаборДополнительныхРеквизитовИСведений = ?(Набор <> Неопределено, Набор.Ссылка, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
					СоответствияТиповИНаборов.Вставить(ТипЗначенияОбъекта, НаборДополнительныхРеквизитовИСведений);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НаборДополнительныхРеквизитовИСведений) Тогда
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, СтрокаЗначения);
					Если СтрокаЗначения.ЭтоЗначениеСвойствОбъектов Тогда
						Запись.Значение = СоответствиеЗначенийСвойствОбъектов.Получить(СтрокаЗначения.ЗначениеСтарое);
					Иначе
						Запись.Значение = СтрокаЗначения.ЗначениеСтарое;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Ложь);
			
			// Обновление наборов свойства
			Для Каждого СоответствиеТипаИНабора Из СоответствияТиповИНаборов Цикл
				Если ЗначениеЗаполнено(СоответствиеТипаИНабора.Значение) Тогда
					ОбщиеСвойства = СоответствиеТипаИНабора.Значение.ПолучитьОбъект();
					СвойствоНайдено = Ложь;
					Для Каждого ОбщееСвойство Из ОбщиеСвойства.ДополнительныеСведения Цикл
						Если ОбщееСвойство.Свойство = ОбъектПВХ.Ссылка Тогда
							СвойствоНайдено = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ СвойствоНайдено Тогда
						ОбщиеСвойства.КоличествоСведений = ОбщиеСвойства.КоличествоСведений + 1;
						НовоеСвойство = ОбщиеСвойства.ДополнительныеСведения.Добавить();
						НовоеСвойство.Свойство = ОбъектПВХ.Ссылка;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбщиеСвойства);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ЗапросНаборы = Новый Запрос();
		ЗапросНаборы.Текст =
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка КАК НаборСвойств,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Свойство";
		ВыборкаНаборы = ЗапросНаборы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНаборы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаНаборы.Свойство) Тогда
				Если ВыборкаНаборы.Количество = 1 Тогда
					ВыборкаСвойство = ВыборкаНаборы.Выбрать();
					Если ВыборкаСвойство.Следующий() Тогда
						Свойство = ВыборкаСвойство.Свойство.ПолучитьОбъект();
						Свойство.НаборСвойств = ВыборкаСвойство.НаборСвойств;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Свойство);
					КонецЕсли;
				Иначе
					Свойство = ВыборкаНаборы.Свойство.ПолучитьОбъект();
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Свойство);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗаполнениеРеквизитовОрганизацииПриОбновленииС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.ГоловнаяОрганизация
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	НЕ ПодразделенияОрганизаций.Владелец ЕСТЬ NULL 
	|	И ПодразделенияОрганизаций.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ПодразделениеОбъект.РайонныйКоэффициент < 1 Тогда
			ПодразделениеОбъект.РайонныйКоэффициент = 1;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПодразделениеОбъект);		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация,
	|	Организации.ПрефиксБП20
	|ИЗ
	|	Справочник.Организации КАК Организации";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.ГоловнаяОрганизация)
			И Выборка.ГоловнаяОрганизация <> Выборка.Ссылка Тогда
			ОрганизацияОбъект.ОбособленноеПодразделение = Истина;
		Иначе
			ОрганизацияОбъект.ГоловнаяОрганизация = Выборка.Ссылка;
		КонецЕсли;

		// Заполнение префикса организации
		ОрганизацияОбъект.Префикс = Выборка.ПрефиксБП20;
		
		//Районный коэффициент заполняется в обработчике "Перед записью"
		//организации
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОрганизацияОбъект);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеЗначенийФункциональныхОпцийПриОбновленииС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Константы.ОсуществляетсяРеализацияТоваровУслугКомитентов.Установить(Истина);
	Константы.ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров.Установить(Истина);
	Константы.ОсуществляетсяЗакупкаТоваровУслугДляКомитентов.Установить(Истина);
	Константы.ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров.Установить(Истина);
	Константы.ИспользоватьВалютныйУчет.Установить(Истина);
	Константы.ИспользоватьРучнуюКорректировкуДвижений.Установить(Истина);
	Константы.ВедетсяРозничнаяТорговля.Установить(Истина);
	Константы.ВедетсяПроизводственнаяДеятельность.Установить(Истина);
	Константы.ИспользоватьВыпускПродукции.Установить(Истина);
	Константы.ВедетсяУчетНМА.Установить(Истина);
	Константы.ВедетсяУчетОсновныхСредств.Установить(Истина);
	Константы.ВедетсяУчетСпецодеждыСпецоснастки.Установить(Истина);
	Константы.ВедетсяОтгрузкаБезПереходаПраваСобственности.Установить(Истина);
	Константы.ИспользоватьКомплектациюНоменклатуры.Установить(Истина);
	Константы.ИспользоватьОплатуПоПлатежнымКартам.Установить(Истина);
	Константы.ВедетсяУчетДенежныхДокументов.Установить(Истина);
	Константы.ИспользоватьПакетноеВыставлениеАктов.Установить(Истина);
	Константы.ИспользоватьПлатежныеТребования.Установить(Истина);
	Константы.УправлениеЗачетомАвансовПогашениемЗадолженности.Установить(Истина);
	Константы.ВедетсяУчетВозвратнойТары.Установить(Истина);
	Константы.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива.Установить(Истина);
	Константы.ИспользоватьКорректировочныеДокументы.Установить(Истина);
	Константы.ИспользоватьФискальныйРегистратор.Установить(Истина);
	Константы.ИспользоватьПередачуПрав.Установить(НЕ ЭтоБазоваяВерсияКонфигурации);
	Константы.ИспользуютсяПодарочныеСертификаты.Установить(Не ЭтоБазоваяВерсияКонфигурации);
	Константы.ВедетсяУчетТаможенныхДекларацийЭкспорт.Установить(НЕ ЭтоБазоваяВерсияКонфигурации);
	Константы.ИспользоватьПодконтрольныеТоварыККТ.Установить(НЕ ЭтоБазоваяВерсияКонфигурации);
	
	Обработки.ФункциональностьПрограммы.ЗаполнитьКонстантуИнкассация();
	Обработки.ФункциональностьПрограммы.УстановитьКонстантуФакторинг();
	
	СчетКасса = ПланыСчетов.Хозрасчетный.Касса;
	ИспользоватьСтатьиДвиженияДенежныхСредств = НЕ (СчетКасса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(ИспользоватьСтатьиДвиженияДенежныхСредств);

	НовыйНаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НовыйНаборЗаписей.Прочитать();

	Для каждого Запись Из НовыйНаборЗаписей Цикл
		
		Запись.ПлательщикНалогаНаПрибыль = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Запись.Организация)
			И Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		
		Запись.ПоддержкаПБУ18 = Запись.ПлательщикНалогаНаПрибыль И Запись.ПоддержкаПБУ18;
		
		Запись.ПрименяетсяУСН = Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
		
		Запись.ПрименяетсяУСНДоходы = Запись.ПрименяетсяУСН
			И Запись.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
		
		Запись.ПрименяетсяУСНДоходыМинусРасходы = Запись.ПрименяетсяУСН 
			И Запись.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
			
		Запись.ПлательщикНДС = Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			
		Запись.УпрощенныйУчетНДС = Запись.ПлательщикНДС
			И Запись.УпрощенныйУчетНДС;
			
		Запись.ПлательщикНДФЛ = Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Запись.Организация)
			И (Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьЗначенияСвойствОбъектов.Объект
	|ИЗ
	|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК УдалитьЗначенияСвойствОбъектов";
	Если Не Запрос.Выполнить().Пустой() Тогда 
		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	КонецЕсли;
	
	НачалоПримененияПостановления1137 = Константы.УдалитьНачалоПримененияИсправленныхСчетовФактур.Получить();
	Если ЗначениеЗаполнено(НачалоПримененияПостановления1137) Тогда
		Запись = РегистрыСведений.ПараметрыРегламентированногоУчета.СоздатьМенеджерЗаписи();
		Запись.Период = НачалоПримененияПостановления1137;
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("НачалоПримененияПостановления1137", НачалоПримененияПостановления1137);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПараметрыРегламентированногоУчетаСрезПоследних.ИспользуетсяПостановлениеНДС1137
			|ИЗ
			|	РегистрСведений.ПараметрыРегламентированногоУчета.СрезПоследних(&НачалоПримененияПостановления1137, ) КАК ПараметрыРегламентированногоУчетаСрезПоследних";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Запись.Заполнить(Выборка);
			КонецЕсли;
			Запись.ИспользуетсяПостановлениеНДС1137 = Истина;
			Запись.Период = НачалоПримененияПостановления1137;
			Запись.Записать(Истина);
		ИначеЕсли НЕ Запись.ИспользуетсяПостановлениеНДС1137 Тогда
			Запись.ИспользуетсяПостановлениеНДС1137 = Истина;
			Запись.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКонстантыПриПереходеС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазыБП20.Получить())<> "" Тогда
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазыБП20.Получить());
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыБП.УстановитьКонстантыВестиУчетПоОрганизациям();
	
	Справочники.Организации.ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций();
	Справочники.Склады.ПерезаполнитьКонстантуИспользоватьНесколькоСкладов();
	Справочники.НоменклатурныеГруппы.ПерезаполнитьКонстантуИспользоватьНесколькоНоменклатурныхГрупп();
	
	Константы.ИспользоватьНесколькоПодразделений.Установить(Истина);
	
	Константы.ВестиУчетЗатратПоПодразделениям.Установить(Истина);
	
	Константы.ИспользоватьУведомленияОКонтролируемыхСделках.Установить(Истина);
	
	Константы.ИспользуетсяГособоронзаказ.Установить(Истина);
	
	Константы.ИспользоватьНесколькоОтветственных.Установить(Истина);
	
	Константы.ВестиУчетПоДоговорам.Установить(Истина);
	Константы.ИсполняютсяОбязанностиНалоговогоАгентаПоНДС.Установить(Истина);
	
	Константы.РасширенныйФункционал.Установить(Истина);
	
	ОбновлениеИнформационнойБазыБП.УстановитьКонстантыИспользоватьДокументыПоступленияРеализации();
	
	// Установка константы ведения учета зарплаты в БП
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ УчетЗарплатыИКадровВоВнешнейПрограмме);
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ УчетЗарплатыИКадровВоВнешнейПрограмме);
	Константы.ВедетсяУчетЗарплатыКадров.Установить(Истина);
	
	Константы.ИспользоватьСинхронизациюДанных.Установить(Константы.ИспользоватьСинхронизациюДанных.Получить());
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		Иначе
			Выборка = Результат.Выбрать();
		КонецЕсли;
		
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();
		НастройкиУчетаЗарплаты  = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьМенеджерЗаписи();
		Справочники.Резервы.СоздатьЭлементыПоУмолчанию();
		РезервЕжегодныхОтпусков = Справочники.Резервы.НайтиПоНаименованию("Резерв ежегодных отпусков", Истина);
	
		Пока Выборка.Следующий() Цикл
			
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Прочитать();
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.ФормироватьПроводкиВКонцеПериода = УчетЗарплатыИКадровВоВнешнейПрограмме;
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Записать();
			
			НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
			НастройкиУчетаЗарплаты.Прочитать();
			НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
			НастройкиУчетаЗарплаты.ИспользоватьФорматОбменаЗУП25 = Истина;
			НастройкиУчетаЗарплаты.РезервОтпусков = РезервЕжегодныхОтпусков;
			НастройкиУчетаЗарплаты.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает в документе "ОперацияБух"
// типовую операцию
//
Процедура ОчиститьТиповыеОперацииОперацииБухПриПереходеС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.СпособЗаполнения = ""Типовые операции""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОперацияБух = Выборка.Ссылка.ПолучитьОбъект();
		ОперацияБух.СпособЗаполнения = НСтр("ru = 'Вручную'");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОперацияБух);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементСтранМира() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Код = ""643""
	|	И (НЕ СтраныМира.Предопределенный)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Замены = Новый Соответствие();
		Замены.Вставить(Выборка.Ссылка, Справочники.СтраныМира.Россия);
		ОбщегоНазначенияБП.ЗаменитьСсылки(Замены);
		
		ОбъектСтрана = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСтрана.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементГруппыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Константы.ИспользоватьГруппыПользователей.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьГруппыПользователей.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ВсеПользователи", Справочники.ГруппыПользователей.ВсеПользователи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка <> &ВсеПользователи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ГруппаПользователей = Выборка.Ссылка;
		Если ОбщегоНазначения.СсылкаСуществует(ГруппаПользователей) Тогда
			
			Замены = Новый Соответствие();
			Замены.Вставить(ГруппаПользователей, Справочники.ГруппыПользователей.ВсеПользователи);
			ОбщегоНазначенияБП.ЗаменитьСсылки(Замены);
			
			ОбъектГруппаВсеПользователи = ГруппаПользователей.ПолучитьОбъект();
			ОбъектГруппаВсеПользователи.Удалить();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСсылкиНаВедомости() Экспорт
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	ВедетсяУчетРасчетовПоЗарплатеСводно   = Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.УдалитьВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = НЕОПРЕДЕЛЕНО
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка.ВидОперации
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.УдалитьПлатежнаяВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость = НЕОПРЕДЕЛЕНО
	|	И РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.ВидОперации
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.УдалитьПлатежнаяВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдер.ПлатежнаяВедомость = НЕОПРЕДЕЛЕНО
	|	И РасходныйКассовыйОрдер.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка,
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты
	|ГДЕ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.УдалитьВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость = НЕОПРЕДЕЛЕНО
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка,
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Выборка = Результат.Выбрать();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
				Таблица             = ДокументОбъект.ВыплатаЗаработнойПлаты;
				ИмяСтарогоРеквизита = "УдалитьВедомость";
				ИмяНовогоРеквизита  = "Ведомость";
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
				Таблица             = ДокументОбъект.ВыплатаДепонентов;
				ИмяСтарогоРеквизита = "УдалитьПлатежнаяВедомость";
				ИмяНовогоРеквизита  = "Ведомость";
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
				Таблица             = Неопределено;
				ИмяСтарогоРеквизита = "УдалитьПлатежнаяВедомость";
				ИмяНовогоРеквизита  = "ПлатежнаяВедомость";
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
				Таблица             = ДокументОбъект.ПеречислениеЗаработнойПлаты;
				ИмяСтарогоРеквизита = "УдалитьВедомость";
				ИмяНовогоРеквизита  = "Ведомость";
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				
				Если Таблица = Неопределено Тогда
					
					ДокументОбъект[ИмяНовогоРеквизита] = ДокументОбъект[ИмяСтарогоРеквизита];
					
				Иначе
					
					Для Каждого СтрокаТаблицы ИЗ Таблица Цикл

						СтрокаТаблицы[ИмяНовогоРеквизита] = СтрокаТаблицы[ИмяСтарогоРеквизита];
						
					КонецЦикла;
					
				КонецЕсли;
			Иначе
				
				Если Таблица = Неопределено Тогда
					
					НовыйДокумент = ЗарплатаКадрыОбновлениеСпредыдущейРедакции.КонвертироватьДанные(ДокументОбъект[ИмяСтарогоРеквизита]);
					Если НовыйДокумент = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДокументОбъект[ИмяНовогоРеквизита] = НовыйДокумент;
					
				Иначе
					
					Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
						
						НовыйДокумент = ЗарплатаКадрыОбновлениеСпредыдущейРедакции.КонвертироватьДанные(СтрокаТаблицы[ИмяСтарогоРеквизита]);
						Если НовыйДокумент = Неопределено Тогда
							Продолжить;
						КонецЕсли;				
						СтрокаТаблицы[ИмяНовогоРеквизита] = НовыйДокумент;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			// Регистрация объектов на узлах плана обмена нужна, так как создается новый документ и ссылка на него
			// записывается в ДокументОбъект
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПеренестиПрисоединенныеФайлы() Экспорт
	
	СуществуютПрисоединенныеФайлы = Истина;
	
	Пока СуществуютПрисоединенныеФайлы Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	УдалитьПрисоединенныеФайлы.ПрисоединенныйФайл КАК Файл,
		|	УдалитьПрисоединенныеФайлы.ХранимыйФайл КАК ДвоичныеДанныеФайла
		|ИЗ
		|	РегистрСведений.УдалитьПрисоединенныеФайлы КАК УдалитьПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
		|		ПО УдалитьПрисоединенныеФайлы.ПрисоединенныйФайл = ДвоичныеДанныеФайлов.Файл
		|ГДЕ
		|	ДвоичныеДанныеФайлов.Файл ЕСТЬ NULL";
		
		РезультатЗапроса = Запрос.Выполнить();
		СуществуютПрисоединенныеФайлы = НЕ РезультатЗапроса.Пустой();
		Если СуществуютПрисоединенныеФайлы Тогда
			
			НаборЗаписей = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНачальныеНастройкиПользователей() Экспорт
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ ИЗ ПользователиИБ Цикл
		ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ.Имя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьЗначенияДополнительныхСведений() Экспорт
	
	МассивДополнительныхСведений = Новый Массив;
	
	ДополнительныеСведения = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
	Пока ДополнительныеСведения.Следующий() Цикл
		Если УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ДополнительныеСведения.ТипЗначения) Тогда
			МассивДополнительныхСведений.Добавить(ДополнительныеСведения.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Свойства", МассивДополнительныхСведений);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение,
	|	ЗначенияСвойствОбъектов.Ссылка КАК ЗначениеСвойствОбъектов
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ДополнительныеСведения.Значение = ЗначенияСвойствОбъектов.Наименование
	|			И ДополнительныеСведения.Свойство = ЗначенияСвойствОбъектов.Владелец
	|ГДЕ
	|	ДополнительныеСведения.Свойство В(&Свойства)
	|ИТОГИ ПО
	|	Свойство";
	
	ВыборкаСвойств = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСвойств.Следующий() Цикл
		
		СоответствиеЗначений = Новый Соответствие();
		Выборка = ВыборкаСвойств.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеЗначений.Вставить(Выборка.Значение, Выборка.ЗначениеСвойствОбъектов);
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Свойство.Установить(ВыборкаСвойств.Свойство);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если ТипЗнч(Запись.Значение) = Тип("Строка") Тогда
				ЗначениеСвойства = СоответствиеЗначений.Получить(Запись.Значение);
				Если ЗначениеСвойства <> Неопределено Тогда
					Запись.Значение = ЗначениеСвойства;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПроведен(МетаданныеДокумента, ПараметрыОтложенногоОбновления = Неопределено, РазмерПорции = 1000) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		// Следует выполнять вне транзакции, так как проведение документов не гарантируется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ПараметрыОтложенногоОбновления = Неопределено Тогда
		// Единственная порция данных
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документы.Ссылка
		|ИЗ
		|	Документ.%ИмяДокумента% КАК Документы
		|ГДЕ
		|	НЕ Документы.Проведен
		|	И НЕ Документы.ПометкаУдаления";
	ИначеЕсли Не ПараметрыОтложенногоОбновления.Свойство("НачалоОбработки") Тогда
		// Первая порция данных
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ %РазмерПорции%
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.%ИмяДокумента% КАК Документы
		|ГДЕ
		|	НЕ Документы.Проведен
		|	И НЕ Документы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени УБЫВ";
	Иначе
		// Не первая порция данных
		Запрос.УстановитьПараметр("НачалоОбработки", ПараметрыОтложенногоОбновления.НачалоОбработки);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ %РазмерПорции%
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.%ИмяДокумента% КАК Документы
		|ГДЕ
		|	НЕ Документы.Проведен
		|	И НЕ Документы.ПометкаУдаления
		|	И Документы.МоментВремени < &НачалоОбработки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени УБЫВ";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РазмерПорции%", Формат(РазмерПорции, "ЧГ=0"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяДокумента%", МетаданныеДокумента.Имя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПараметрыОтложенногоОбновления <> Неопределено Тогда
			ПараметрыОтложенногоОбновления.Вставить("НачалоОбработки", Выборка.МоментВремени);
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
    	ЭлементБлокировки = Блокировка.Добавить("Документ." + МетаданныеДокумента.Имя);
    	ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		
		Попытка
    		Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не Объект.ПроверитьЗаполнение() Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
			Объект.Проведен = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		Исключение
			
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр(
				НСтр("ru = 'Не удалось провести документ
					|%1'"), 
				ПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента, 
				Выборка.Ссылка, 
				ТекстСообщения);
				
			Продолжить;
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	Если ПараметрыОтложенногоОбновления <> Неопределено И Выборка.Количество() = РазмерПорции Тогда
		ПараметрыОтложенногоОбновления.Вставить("ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНеобходимостьЗаполненияПоследовательностей() Экспорт

	Если НЕ ЭтоПереходСРедакции20() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПерехода = ПараметрыПереходаСРедакции20();
	ПараметрыПерехода.ВыполнитьЗаполнениеПоследовательностей = Истина;
	
	УстановитьПараметрыПереходаСРедакции20(ПараметрыПерехода);

КонецПроцедуры

Процедура СброситьНеактуальностьРегламентныхОпераций() Экспорт
	
	НаборЗаписей = РегистрыСведений.НеактуальныеРегламентныеОперации.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

Процедура УдалитьСубконтоОбъектыСтроительстваСоСчетаНДСприСтроительствеОсновныхСредств() Экспорт
	
	Счет1908 = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств.ПолучитьОбъект();
	СубконтоОбъектыСтроительства = Счет1908.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, "ВидСубконто");
	
	Если СубконтоОбъектыСтроительства <> Неопределено Тогда
		Счет1908.ВидыСубконто.Удалить(СубконтоОбъектыСтроительства);
		РегистрироватьНаУзлахПлановОбмена = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Счет1908, РегистрироватьНаУзлахПлановОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУплатыТорговогоСбораНаУСНДоходыПриПереходеС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНачалаВедения5РазделаКУДиР", УчетУСНКлиентСервер.ДатаНачалаФормирования5РазделаКУДиР());
	Запрос.УстановитьПараметр("КонецПериодаВыборки", КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьУчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УдалитьУчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА УдалитьУчетнаяПолитикаОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
	|				И УдалитьУчетнаяПолитикаОрганизаций.ОбъектНалогообложенияУСН = ЗНАЧЕНИЕ(Перечисление.ОбъектыНалогообложенияПоУСН.Доходы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегУПО1.Организация КАК Организация,
	|	РегУПО1.Период КАК ПериодТекущий,
	|	МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыУчетнойПолитики
	|ИЗ
	|	ВТ_УчетнаяПолитика КАК РегУПО1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитика КАК РегУПО2
	|		ПО РегУПО1.Организация = РегУПО2.Организация
	|			И РегУПО1.Период < РегУПО2.Период
	|ГДЕ
	|	РегУПО1.ПрименяетсяУСНДоходы
	|
	|СГРУППИРОВАТЬ ПО
	|	РегУПО1.Период,
	|	РегУПО1.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Организация КАК Организация,
	|	УчетнаяПолитика.Период КАК ПериодНач,
	|	ВЫБОР
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И УчетнаяПолитика.Период <= &КонецПериодаВыборки
	|			ТОГДА &КонецПериодаВыборки
	|		КОГДА ПериодыУчетнойПолитики.ПериодСледующий ЕСТЬ NULL
	|				И УчетнаяПолитика.Период > &КонецПериодаВыборки
	|			ТОГДА КОНЕЦПЕРИОДА(УчетнаяПолитика.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыУчетнойПолитики.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодКон,
	|	УчетнаяПолитика.ПрименяетсяУСНДоходы
	|ПОМЕСТИТЬ ВТ_ПериодыПримененияУСНДоходы
	|ИЗ
	|	ВТ_УчетнаяПолитика КАК УчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
	|		ПО УчетнаяПолитика.Организация = ПериодыУчетнойПолитики.Организация
	|			И УчетнаяПолитика.Период = ПериодыУчетнойПолитики.ПериодТекущий
	|ГДЕ
	|	УчетнаяПолитика.ПрименяетсяУСНДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыПримененияУСНДоходы.Организация,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыПримененияУСНДоходы.ПериодНач <= &ДатаНачалаВедения5РазделаКУДиР
	|			ТОГДА &ДатаНачалаВедения5РазделаКУДиР
	|		ИНАЧЕ ВТ_ПериодыПримененияУСНДоходы.ПериодНач
	|	КОНЕЦ КАК НачалоПериода,
	|	ВТ_ПериодыПримененияУСНДоходы.ПериодКон КАК КонецПериода
	|ИЗ
	|	ВТ_ПериодыПримененияУСНДоходы КАК ВТ_ПериодыПримененияУСНДоходы
	|ГДЕ
	|	ВТ_ПериодыПримененияУСНДоходы.ПериодКон > &ДатаНачалаВедения5РазделаКУДиР"
	;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		// Нет организаций, применяющих УСН-доходы после начала ведения 5 раздела КУДиР
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УсловияОтбораДокументов", Результат.Выгрузить());
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.Забалансовый = Ложь;
	МасивСчетов = Новый Массив;
	МасивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговыйСбор);
	
	Запрос.УстановитьПараметр("СчетаРасчетовПоТорговомуСбору",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МасивСчетов, УсловияОтбораСубсчетов));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтбора.Организация,
	|	ТаблицаОтбора.НачалоПериода,
	|	ТаблицаОтбора.КонецПериода
	|ПОМЕСТИТЬ ВТ_ТаблицаОтбора
	|ИЗ
	|	&УсловияОтбораДокументов КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК ДокументСсылка
	|ИЗ
	|	ВТ_ТаблицаОтбора КАК ВТ_ТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ПО ВТ_ТаблицаОтбора.Организация = СписаниеСРасчетногоСчета.Организация
	|			И ВТ_ТаблицаОтбора.НачалоПериода <= СписаниеСРасчетногоСчета.Дата
	|			И ВТ_ТаблицаОтбора.КонецПериода >= СписаниеСРасчетногоСчета.Дата
	|			И (СписаниеСРасчетногоСчета.Проведен)
	|			И (НЕ СписаниеСРасчетногоСчета.РучнаяКорректировка)
	|			И (СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога))
	|			И (СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом В (&СчетаРасчетовПоТорговомуСбору))"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.РучнаяКорректировка = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхФизическихЛиц

Процедура КонвертироватьДокументыФизическихЛицС20() Экспорт
	
	Если НЕ ИнформационнаяБазаОбновленаС20() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	
	КонвертироватьСправочникДокументыУдостоверяющиеЛичность(СоответствиеКонвертированныхОбъектов);
	ДокументыФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов);
	
КонецПроцедуры

Процедура КонвертироватьСправочникДокументыУдостоверяющиеЛичность(СоответствиеКонвертированныхОбъектов)
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьДокументыУдостоверяющиеЛичность.Ссылка,
	|	УдалитьДокументыУдостоверяющиеЛичность.ВерсияДанных,
	|	УдалитьДокументыУдостоверяющиеЛичность.ПометкаУдаления,
	|	УдалитьДокументыУдостоверяющиеЛичность.Предопределенный,
	|	УдалитьДокументыУдостоверяющиеЛичность.Наименование,
	|	УдалитьДокументыУдостоверяющиеЛичность.КодПФР,
	|	УдалитьДокументыУдостоверяющиеЛичность.КодИМНС,
	|	ВидыДокументовФизическихЛиц.Ссылка КАК ПриемникСсылка
	|ПОМЕСТИТЬ ВТСоответствиеПоДопКодам
	|ИЗ
	|	Справочник.УдалитьДокументыУдостоверяющиеЛичность КАК УдалитьДокументыУдостоверяющиеЛичность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО УдалитьДокументыУдостоверяющиеЛичность.КодПФР = ВидыДокументовФизическихЛиц.КодПФР
	|			И УдалитьДокументыУдостоверяющиеЛичность.КодИМНС = ВидыДокументовФизическихЛиц.КодМВД
	|			И (ВидыДокументовФизическихЛиц.КодМВД <> """"
	|				ИЛИ ВидыДокументовФизическихЛиц.КодМВД <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеПоДопКодам.Ссылка,
	|	СоответствиеПоДопКодам.ВерсияДанных,
	|	СоответствиеПоДопКодам.ПометкаУдаления,
	|	СоответствиеПоДопКодам.Предопределенный,
	|	СоответствиеПоДопКодам.Наименование,
	|	СоответствиеПоДопКодам.КодПФР,
	|	СоответствиеПоДопКодам.КодИМНС,
	|	ВЫБОР
	|		КОГДА СоответствиеПоДопКодам.ПриемникСсылка ЕСТЬ NULL 
	|			ТОГДА ВидыДокументовФизическихЛиц.Ссылка
	|		ИНАЧЕ СоответствиеПоДопКодам.ПриемникСсылка
	|	КОНЕЦ КАК ПриемникСсылка
	|ИЗ
	|	ВТСоответствиеПоДопКодам КАК СоответствиеПоДопКодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО (СоответствиеПоДопКодам.ПриемникСсылка ЕСТЬ NULL )
	|			И СоответствиеПоДопКодам.Наименование = ВидыДокументовФизическихЛиц.Наименование
	|ГДЕ
	|	((НЕ СоответствиеПоДопКодам.ПриемникСсылка ЕСТЬ NULL )
	|			ИЛИ (НЕ ВидыДокументовФизическихЛиц.Ссылка ЕСТЬ NULL ))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если (Не ЗначениеЗаполнено(Выборка)) ИЛИ НеПроизводитьКонвертациюЗначения(ТипЗнч(Выборка)) Тогда
			Продолжить;
		КонецЕсли;
		
		КонвертироватьЭлементДокументыУдостоверяющиеЛичность(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументыФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьПаспортныеДанныеФизЛиц.Период,
	|	УдалитьПаспортныеДанныеФизЛиц.ФизЛицо,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументВид,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументСерия,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументНомер,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументДатаВыдачи,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументКемВыдан,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументКодПодразделения,
	|	УдалитьПаспортныеДанныеФизЛиц.ДатаРегистрацииПоМестуЖительства
	|ИЗ
	|	РегистрСведений.УдалитьПаспортныеДанныеФизЛиц КАК УдалитьПаспортныеДанныеФизЛиц";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	
	ТекстСерия				= НСтр("ru = ', серия: %1'");
	ТекстНомер				= НСтр("ru = ', № %1'");
	ТекстДатаВыдачи			= НСтр("ru = ', выдан: %1 года'");
	ТекстСрокДействия		= НСтр("ru = ', действует до: %1 года'");
	ТекстКодПодразделения	= НСтр("ru = ', № подр. %1'");

	Пока Выборка.Следующий() Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Период				= Выборка.Период;
		ЗаписьНабора.Физлицо			= Выборка.ФизЛицо;
		ЗаписьНабора.ВидДокумента		= КонвертироватьЭлементДокументыУдостоверяющиеЛичность(Выборка.ДокументВид, СоответствиеКонвертированныхОбъектов);
		ЗаписьНабора.Серия				= Выборка.ДокументСерия;
		ЗаписьНабора.Номер				= Выборка.ДокументНомер;
		ЗаписьНабора.ДатаВыдачи			= Выборка.ДокументДатаВыдачи;
		ЗаписьНабора.КемВыдан			= Выборка.ДокументКемВыдан;
		ЗаписьНабора.КодПодразделения	= Выборка.ДокументКодПодразделения;
		ЗаписьНабора.ЯвляетсяДокументомУдостоверяющимЛичность	= Истина;
		
		Если ПустаяСтрока(ЗаписьНабора.Представление) И Не ЗаписьНабора.ВидДокумента.Пустая() Тогда
				ЗаписьНабора.Представление = ""
					+ ЗаписьНабора.ВидДокумента
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.Серия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерия, ЗаписьНабора.Серия), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.Номер), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНомер, ЗаписьНабора.Номер), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.ДатаВыдачи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВыдачи, Формат(ЗаписьНабора.ДатаВыдачи,"ДФ='дд ММММ гггг'")), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.СрокДействия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСрокДействия, Формат(ЗаписьНабора.СрокДействия,"ДФ='дд ММММ гггг'")), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.КемВыдан), ", " + ЗаписьНабора.КемВыдан, "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.КодПодразделения) И ЗаписьНабора.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКодПодразделения, ЗаписьНабора.КодПодразделения), "");
			КонецЕсли;

	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Истина);
	
КонецПроцедуры

Функция КонвертироватьЭлементДокументыУдостоверяющиеЛичность(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено) Экспорт
	
	Если ПустаяСтрока(КонвертируемыеДанные.Наименование) И КонвертируемыеДанные.Ссылка.Пустая() Тогда
		Элемент = ПолучитьСсылкуНаКонвертированныйОбъект(Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка(), СоответствиеКонвертированныхОбъектов);
		
		Если Элемент = Неопределено Тогда
			Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
			Элемент.Наименование = "Иные документы, выдаваемые органами МВД";
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
			Элемент.КодМВД = "91";
			Элемент.КодПФР = "ПРОЧЕЕ";
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Элемент);
			
			ВставитьСсылкуНаКонвертированныйОбъект(Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка(), Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
	Иначе
		Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
		Если Элемент = Неопределено Тогда
			Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
			Элемент.Наименование = КонвертируемыеДанные.Наименование;
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
			Элемент.КодМВД = КонвертируемыеДанные.КодИМНС;
			Элемент.КодПФР = КонвертируемыеДанные.КодПФР;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Элемент);
			
			ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
КонецФункции	

Функция НеПроизводитьКонвертациюЗначения(Тип)
	
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		Ссылка = КонвертируемыеДанные;
	Иначе 
		Ссылка = КонвертируемыеДанные.Ссылка;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов);
	Если СсылкаНаКонвертированныйОбъект <> Неопределено Тогда
		Возврат СсылкаНаКонвертированныйОбъект;		
	КонецЕсли;	
	
	Если КонвертируемыеДанные.Предопределенный Тогда
		Элемент = ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(Ссылка);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПриемник) Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Ссылка, СсылкаНаПриемник, СоответствиеКонвертированныхОбъектов);
		Возврат СсылкаНаПриемник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(Элемент)
	Если Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса;		
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС07 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС09 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС02 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС01 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС26 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС04 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС06 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

Процедура УстановитьКодСправочника(ОбъектПриемник, ДанныеИсточника)
	СтруктураДанныхИсточника = Новый Структура("Код", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхИсточника, ДанныеИсточника);
	Если СтруктураДанныхИсточника.Код <> Неопределено И ОбъектПриемник.Метаданные().ДлинаКода <> 0 Тогда
		ОбъектПриемник.Код = СтруктураДанныхИсточника.Код;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
 	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
		СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
	КонецЕсли;	

	СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
КонецПроцедуры	

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;	
КонецФункции

#КонецОбласти

#Область ОбновлениеРИБ

Процедура ОбновитьРИБПриПереходе20На30() Экспорт 
	
	Если ИнформационнаяБазаОбновленаС20()
		И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// Переход с версии 2.0
		Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеУчетнойПолитики

Процедура ЗаполнитьИспользуемыеСистемыНалогообложения() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ОбновитьИспользуемыеСистемыНалогообложения();
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУчетаДоходовРасходовИППриОбновлении() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУчетнаяПолитикаОрганизаций.Период,
	|	УдалитьУчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНДФЛ
	|	И УдалитьУчетнаяПолитикаОрганизаций.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП = УдалитьУчетнаяПолитикаОрганизаций.УдалитьДляПризнанияРасходовНеТребуетсяПолучениеДохода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП = Не Запись.УдалитьДляПризнанияРасходовНеТребуетсяПолучениеДохода;
			Запись.АвансыВключаютсяВДоходыВПериодеПолученияИП     = Не Запись.ПризнаватьРасходыПоОперациямПрошлогоГодаИП;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОсновнойВидДеятельностиПриОбновлении() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУчетнаяПолитикаОрганизаций.Период,
	|	УдалитьУчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНДФЛ
	|	И УдалитьУчетнаяПолитикаОрганизаций.ОсновнойВидДеятельности = ЗНАЧЕНИЕ(Справочник.ВидыДеятельностиПредпринимателей.ПустаяСсылка)
	|	И УдалитьУчетнаяПолитикаОрганизаций.УдалитьОсновнойХарактерДеятельности <> ЗНАЧЕНИЕ(Перечисление.ХарактерДеятельности.ПустаяСсылка)
	|	И УдалитьУчетнаяПолитикаОрганизаций.УдалитьОсновнаяНоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.ОсновнойВидДеятельности = СоздатьВидДеятельностиПриОбновлении(
				Запись.УдалитьОсновнойХарактерДеятельности, Запись.УдалитьОсновнаяНоменклатурнаяГруппа);
			
			Запись.УдалитьОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПустаяСсылка();
			Запись.УдалитьОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗакладкуЗатратыНаПроизводство() Экспорт
	
	// Выполнять без ограничений доступа, монопольно
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УдалитьУчетнаяПолитикаОрганизаций.Период КАК Период
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|ГДЕ
	|	НЕ УдалитьУчетнаяПолитикаОрганизаций.ВыпускПродукции
	|	И НЕ УдалитьУчетнаяПолитикаОрганизаций.ОказаниеУслуг
	|	И НЕ УдалитьУчетнаяПолитикаОрганизаций.РассчитыватьСебестоимостьПолуфабрикатов
	|	И НЕ УдалитьУчетнаяПолитикаОрганизаций.РассчитыватьСебестоимостьУслугСобственнымПодразделениям
	|	И УдалитьУчетнаяПолитикаОрганизаций.ПорядокСписанияРасходовНаСебестоимостьУслуг = ЗНАЧЕНИЕ(Перечисление.ПорядокСписанияРасходовНаСебестоимостьУслуг.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период УБЫВ";
	
	Периоды = Запрос.Выполнить().Выгрузить();
	Периоды.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Сегодня      = ТекущаяДатаСеанса();
	
	Организация  = Неопределено;
	КонецПериода = '0001-01-01';
	Для Каждого Запись Из Периоды Цикл
		
		Если Запись.Организация <> Организация Тогда
			Запись.КонецПериода = КонецМесяца(Макс(Запись.Период, Сегодня));
			Организация         = Запись.Организация;
		Иначе
			Запись.КонецПериода = КонецПериода;
		КонецЕсли;
		КонецПериода = КонецМесяца(Запись.Период);
		
	КонецЦикла;
	
	Периоды.Сортировать("Организация, Период");
	
	ВедетсяПроизводственнаяДеятельность = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");
	
	ДанныеПредыдущейЗаписи = Неопределено;
	
	Для Каждого ОписаниеЗаписи Из Периоды Цикл
		
		НаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ОписаниеЗаписи.Организация);
		НаборЗаписей.Отбор.Период.Установить(ОписаниеЗаписи.Период);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			// Значение по умолчанию.
			// Остальные новые реквизиты - булевы, они уже находятся в значении по умолчанию - Ложь.
			Запись.ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.БезУчетаВыручки;
			Если Не ВедетсяПроизводственнаяДеятельность Или Не Запись.УдалитьВедетсяПроизводственнаяДеятельность Тогда
				// Оставляем все по умолчанию
			Иначе
				
				// Определим по данным информационной базы
				Если Запись.Период >= Сегодня 
					И ДанныеПредыдущейЗаписи <> Неопределено 
					И ДанныеПредыдущейЗаписи.Организация = Запись.Организация Тогда
					
					// Унаследуем из предыдущей записи
					ЗаполнитьЗначенияСвойств(Запись, ДанныеПредыдущейЗаписи);
					
				Иначе
					
					Запись.ВыпускПродукции = ВыпускПродукции(ОписаниеЗаписи.Период, ОписаниеЗаписи.КонецПериода, ОписаниеЗаписи.Организация);
					Если Не Запись.ВыпускПродукции Тогда
						// Что-то же организация делает, раз был установлен флаг ВедетсяПроизводственнаяДеятельность
						Запись.ОказаниеУслуг = Истина;
					Иначе
						Запись.ОказаниеУслуг = ОказаниеУслуг(ОписаниеЗаписи.Период, ОписаниеЗаписи.КонецПериода, ОписаниеЗаписи.Организация);
					КонецЕсли;
					
					Запись.РассчитыватьСебестоимостьПолуфабрикатов = РассчитыватьСебестоимостьПолуфабрикатов(
						ОписаниеЗаписи.Период, 
						ОписаниеЗаписи.КонецПериода, 
						ОписаниеЗаписи.Организация);
						
					Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям = РассчитыватьСебестоимостьУслугСобственнымПодразделениям(
						ОписаниеЗаписи.Период,
						ОписаниеЗаписи.КонецПериода,
						ОписаниеЗаписи.Организация);
						
				КонецЕсли;
				
				// ПорядокСписанияРасходовНаСебестоимостьУслуг
				Если Запись.УдалитьПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.УдалитьПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
					Запись.ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.ТолькоПоПлановымЦенам;
				ИначеЕсли (Запись.ОказаниеУслуг И Запись.ВыпускПродукции) 
					Или Запись.РассчитыватьСебестоимостьПолуфабрикатов
					Или Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям
					Или Запись.УдалитьПрямыеРасходыБезВыпускаВключатьВНЗП Тогда
					Запись.ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.СУчетомВыручки;
				КонецЕсли;
				
				// СпособРасчетаСебестоимостиПроизводства
				Если Не Запись.РассчитыватьСебестоимостьПолуфабрикатов 
					И Не Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям Тогда
					Запись.СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
				КонецЕсли;
				
				
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Истина);
		
		ДанныеПредыдущейЗаписи = Новый Структура;
		ДанныеПредыдущейЗаписи.Вставить("Организация");
		ДанныеПредыдущейЗаписи.Вставить("ВыпускПродукции");
		ДанныеПредыдущейЗаписи.Вставить("ОказаниеУслуг");
		ДанныеПредыдущейЗаписи.Вставить("РассчитыватьСебестоимостьПолуфабрикатов");
		ДанныеПредыдущейЗаписи.Вставить("РассчитыватьСебестоимостьУслугСобственнымПодразделениям");
		ЗаполнитьЗначенияСвойств(ДанныеПредыдущейЗаписи, Запись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНалогаУСН() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьУчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|	И УдалитьУчетнаяПолитикаОрганизаций.СтавкаНалогаУСН = 0"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.ПрименяетсяУСН 
				И Запись.СтавкаНалогаУСН = 0 Тогда
				Запись.СтавкаНалогаУСН = ?(Запись.ПрименяетсяУСНДоходыМинусРасходы, 15, 6);
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПорядокПризнанияТаможенныхПлатежей() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	Набор.Прочитать();

	Для каждого Запись Из Набор Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокПризнанияТаможенныхПлатежей) Тогда
			Запись.ПорядокПризнанияТаможенныхПлатежей = Перечисления.ПорядокПризнанияТаможенныхПлатежей.ПоОплате;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
КонецПроцедуры

Процедура ОчиститьНомерИДатуУведомленияУСН() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	Для каждого Запись Из Набор Цикл
		Если Год(Запись.Период) >= 2009 И Запись.ПрименяетсяУСН Тогда
			Запись.УведомлениеДата = Неопределено;
			Запись.УведомлениеНомер = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
КонецПроцедуры

Процедура ЗаполнитьСпособПогашенияСтоимостиСпецодеждыНУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	Для каждого Запись Из Набор Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.СпособПогашенияСтоимостиСпецодеждыНУ) Тогда
			Запись.СпособПогашенияСтоимостиСпецодеждыНУ = Перечисления.СпособыПогашенияСтоимостиНУ.ПриПередачеВЭксплуатацию;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
	
КонецПроцедуры

Процедура ОчиститьОсновнойХарактерДеятельностиНоменклатурнаяГруппаПриОбновлении() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУчетнаяПолитикаОрганизаций.Период,
	|	УдалитьУчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНДФЛ
	|	И УдалитьУчетнаяПолитикаОрганизаций.УдалитьОсновнойХарактерДеятельности <> ЗНАЧЕНИЕ(Перечисление.ХарактерДеятельности.ПустаяСсылка)
	|	И УдалитьУчетнаяПолитикаОрганизаций.УдалитьОсновнаяНоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.УдалитьОсновнойХарактерДеятельности = Перечисления.ХарактерДеятельности.ПустаяСсылка();
			Запись.УдалитьОсновнаяНоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьАктуальнуюУчетнуюПолитикуУСН2016() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", '20160101');
	Запрос.УстановитьПараметр("МатериалыУменьшатьНаНЗП",
		Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП);
	Запрос.УстановитьПараметр("ТоварыПоОплатеПоставщику",
		Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	Запрос.УстановитьПараметр("БазаРаспределенияДоходыНУ",
		Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.Период,
	|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций.СрезПоследних КАК УдалитьУчетнаяПолитикаОрганизацийСрезПоследних
	|ГДЕ
	|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы
	|	И (УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.ПорядокПризнанияМатериальныхРасходов = &МатериалыУменьшатьНаНЗП
	|			ИЛИ УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.ПорядокПризнанияРасходовПоТоварам = &ТоварыПоОплатеПоставщику
	|			ИЛИ УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.ПлательщикЕНВД
	|				И УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.БазаРаспределенияРасходовУСНПоВидамДеятельности <> &БазаРаспределенияДоходыНУ)
	|	И УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.Период >= &Период"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// приводим запись 2016 года в актуальное состояние
		Набор = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Выборка.Организация, Истина);
		Набор.Отбор.Период.Установить(Выборка.Период, Истина);
		
		Набор.Прочитать();
		
		Запись = Набор[Набор.Количество() - 1];
		
		Если Запись.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП Тогда
			Запись.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоФактуСписания;
		КонецЕсли;
		Если Запись.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику Тогда
			Запись.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации;
		КонецЕсли;
		Запись.БазаРаспределенияРасходовУСНПоВидамДеятельности = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор, Истина);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьИспользуемыеСистемыНалогообложения(ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ИспользуемыеСистемыНалогообложения = ПолучитьИспользуемыеСистемыНалогообложения();

	ЕстьИзменения = Ложь;
	
	Если Константы.ИспользуетсяОСНО.Получить() <> ИспользуемыеСистемыНалогообложения.ИспользуетсяОСНО Тогда
		Константы.ИспользуетсяОСНО.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяОСНО);
		ЕстьИзменения = Истина;
	ИначеЕсли Константы.НеИспользуетсяОСНО.Получить() <> (НЕ ИспользуемыеСистемыНалогообложения.ИспользуетсяОСНО) Тогда
		// В новой базе обе константы ИспользуетсяОСНО и НеИспользуетсяОСНО 
		// изначально сброшены до момента ввода первой организации.
		// Поэтому необходимо отдельно проверить и при необходимости установить НеИспользуетсяОСНО.
		Константы.НеИспользуетсяОСНО.Установить(НЕ ИспользуемыеСистемыНалогообложения.ИспользуетсяОСНО);
	КонецЕсли;
	
	Если Константы.ИспользуетсяУСН.Получить() <> ИспользуемыеСистемыНалогообложения.ИспользуетсяУСН Тогда
		Константы.ИспользуетсяУСН.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяУСН);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Константы.ИспользуетсяНДФЛИП.Получить() <> ИспользуемыеСистемыНалогообложения.ИспользуетсяНДФЛИП Тогда
		Константы.ИспользуетсяНДФЛИП.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяНДФЛИП);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Константы.ИспользуетсяУСНПатент.Получить() <> ИспользуемыеСистемыНалогообложения.ИспользуетсяУСНПатент Тогда
		Константы.ИспользуетсяУСНПатент.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяУСНПатент);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Константы.ИспользуетсяЕНВД.Получить() <> ИспользуемыеСистемыНалогообложения.ИспользуетсяЕНВД Тогда
		Константы.ИспользуетсяЕНВД.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяЕНВД);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Константы.ИспользуетсяРаздельныйУчетНДС.Получить() 
		<> ИспользуемыеСистемыНалогообложения.ИспользуетсяРаздельныйУчетНДС Тогда
		Константы.ИспользуетсяРаздельныйУчетНДС.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяРаздельныйУчетНДС);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ТребуетсяСоздатьПоставляемыеВидыНалогов И ЕстьИзменения Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИспользуемыеСистемыНалогообложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СистемыНалогообложения = Новый Структура();
	СистемыНалогообложения.Вставить("ИспользуетсяОСНО",                  Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСН",                   Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСНДоходы",             Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСНДоходыМинусРасходы", Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяНДФЛИП",                Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСНПатент",             Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяЕНВД",                  Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяРаздельныйУчетНДС",     Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяОСНО), ЛОЖЬ) КАК ИспользуетсяОСНО,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСН), ЛОЖЬ) КАК ИспользуетсяУСН,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСНДоходы), ЛОЖЬ) КАК ИспользуетсяУСНДоходы,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСНДоходыМинусРасходы), ЛОЖЬ) КАК ИспользуетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяНДФЛИП), ЛОЖЬ) КАК ИспользуетсяНДФЛИП,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСНПатент), ЛОЖЬ) КАК ИспользуетсяУСНПатент,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяЕНВД), ЛОЖЬ) КАК ИспользуетсяЕНВД,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.СложныйУчетНДС), ЛОЖЬ) КАК ИспользуетсяРаздельныйУчетНДС
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНалогаНаПрибыль КАК ИспользуетсяОСНО,
	|		УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСН КАК ИспользуетсяУСН,
	|		УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы КАК ИспользуетсяУСНДоходы,
	|		УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы КАК ИспользуетсяУСНДоходыМинусРасходы,
	|		УдалитьУчетнаяПолитикаОрганизаций.ПлательщикНДФЛ КАК ИспользуетсяНДФЛИП,
	|		УдалитьУчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент КАК ИспользуетсяУСНПатент,
	|		УдалитьУчетнаяПолитикаОрганизаций.ПлательщикЕНВД КАК ИспользуетсяЕНВД,
	|		УдалитьУчетнаяПолитикаОрганизаций.СложныйУчетНДС КАК СложныйУчетНДС
	|	ИЗ
	|		РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	|	ГДЕ
	|		НЕ УдалитьУчетнаяПолитикаОрганизаций.Организация.ПометкаУдаления) КАК СистемыНалогообложения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СистемыНалогообложения, Выборка);
	КонецЕсли;
	
	Если Не СистемыНалогообложения.ИспользуетсяУСН Тогда
		СистемыНалогообложения.ИспользуетсяУСНДоходы             = Ложь;
		СистемыНалогообложения.ИспользуетсяУСНДоходыМинусРасходы = Ложь;
	КонецЕсли;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

Функция СоздатьВидДеятельностиПриОбновлении(ХарактерДеятельности, НоменклатурнаяГруппа)
	
	НаборЗаписей = РегистрыСведений.ВидыДеятельностиПредпринимателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НоменклатурнаяГруппа.Установить(НоменклатурнаяГруппа);
	НаборЗаписей.Отбор.ХарактерДеятельности.Установить(ХарактерДеятельности);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат НаборЗаписей[0].ВидДеятельности;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ХарактерДеятельности", ХарактерДеятельности);
	Запрос.Параметры.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыДеятельностиПредпринимателей.Ссылка
	|ИЗ
	|	Справочник.ВидыДеятельностиПредпринимателей КАК ВидыДеятельностиПредпринимателей
	|ГДЕ
	|	ВидыДеятельностиПредпринимателей.ХарактерДеятельности = &ХарактерДеятельности
	|	И ВидыДеятельностиПредпринимателей.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	|	И НЕ ВидыДеятельностиПредпринимателей.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидДеятельности = Выборка.Ссылка;
	Иначе
		
		НаименованиеНоменклатурнойГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатурнаяГруппа, "Наименование");
		
		НаименованиеВидаДеятельности = СтрШаблон("%1, %2", СокрЛП(ХарактерДеятельности), СокрЛП(НаименованиеНоменклатурнойГруппы));
		
		СправочникОбъект = Справочники.ВидыДеятельностиПредпринимателей.СоздатьЭлемент();
		СправочникОбъект.Наименование         = НаименованиеВидаДеятельности;
		СправочникОбъект.НаименованиеПолное   = НаименованиеВидаДеятельности;
		СправочникОбъект.ХарактерДеятельности = ХарактерДеятельности;
		СправочникОбъект.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		
		ВидДеятельности = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	Запись.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	Запись.ХарактерДеятельности = ХарактерДеятельности;
	Запись.ВидДеятельности      = ВидДеятельности;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	Возврат ВидДеятельности;
	
КонецФункции

Функция ВыпускПродукции(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продукция.Ссылка
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК Продукция
	|ГДЕ
	|	Продукция.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Продукция.Ссылка.Проведен
	|	И Продукция.Ссылка.Организация = &Организация
	|";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ОказаниеУслуг(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияУслуг.Регистратор
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг КАК РеализацияУслуг
	|ГДЕ
	|	РеализацияУслуг.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияУслуг.Активность
	|	И РеализацияУслуг.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктОбОказанииПроизводственныхУслуг.Ссылка
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Проведен
	|	И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|	И АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция РассчитыватьСебестоимостьПолуфабрикатов(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВстречныйВыпуск.Период
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Продукция <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И НЕ Продукция.Услуга) КАК ВстречныйВыпуск
	|ГДЕ
	|	ВстречныйВыпуск.Учитывается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Полуфабрикаты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Полуфабрикаты)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция РассчитыватьСебестоимостьУслугСобственнымПодразделениям(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Услуги.Ссылка
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Услуги.Ссылка.Проведен
	|	И Услуги.Ссылка.Организация = &Организация";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура УстановитьПорядокПризнанияДопРасходов() Экспорт
	
	НаборЗаписей	= РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();

	Для каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокПризнанияДопРасходов) Тогда
			Запись.ПорядокПризнанияДопРасходов = Перечисления.ПорядокПризнанияДопРасходов.ВключатьВСтоимость;
		КонецЕсли;
				
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не выполнено обновление записей регистра сведений
                               |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций,
			,
			ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПерезаписатьУчетнуюПолитику() Экспорт
	
	НаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЗаписиБезОрганизации = Новый Массив;
	Для каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.Организация) Тогда
			ЗаписиБезОрганизации.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиБезОрганизации Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

Процедура ЗаполнитьУчетнуюПолитикуПорядокОтраженияАвансаУСН() Экспорт
	
	НаборЗаписей = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокОтраженияАвансаУСН) Тогда
			Запись.ПорядокОтраженияАвансаУСН	= Перечисления.ПорядокОтраженияАвансов.ДоходУСН;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Учетная политика""
                               |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура ЗаписатьУчетнуюПолитикуОбособленныхПодразделений() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК ОбособленноеПодразделение,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение");
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписиГоловнойОрганизации = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		ЗаписиГоловнойОрганизации.Отбор.Организация.Установить(Выборка.ГоловнаяОрганизация);
		ЗаписиГоловнойОрганизации.Прочитать();
		
		ЗаписиПодразделения = РегистрыСведений.УдалитьУчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		ЗаписиПодразделения.Отбор.Организация.Установить(Выборка.ОбособленноеПодразделение);
		Для каждого Запись Из ЗаписиГоловнойОрганизации Цикл
			НоваяЗапись = ЗаписиПодразделения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НоваяЗапись.Организация = Выборка.ОбособленноеПодразделение;
		КонецЦикла;
		ЗаписиПодразделения.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти