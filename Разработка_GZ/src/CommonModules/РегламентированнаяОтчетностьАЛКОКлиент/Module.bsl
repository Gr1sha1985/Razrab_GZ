
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции регламентированных отчетов ФСРАР общего назначения:
// - для работы с формой длительной операции;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейсКомандыФормы

// Выполняет любую команду формы, вызывая нужную процедуру.
//
// Параметры:
//
// 		Форма		- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции. 
//					Опеределяет форму, команду которой необходимо выполнить.
//
//		ИмяКоманды 	- Строка - Имя команды формы, которую надо выполнить.
//
Процедура ВыполнитьКомандуФормыПоИмениАЛКО(Форма, ИмяКоманды) Экспорт

	Если НЕ Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда

		Форма.СписокОчередиДействий.Добавить(ИмяКоманды);
		Возврат;

	Иначе
		Форма.СтруктураРеквизитовФормы.ТекущееДействие = ИмяКоманды;
	КонецЕсли;

	Если ИмяКоманды = "ПроверитьВыгрузку" Тогда

		ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "ПроверкаВыгрузки", Ложь);

		Если НужнаДальнейшаяОбработка Тогда
			НачалоПроверкиВыгрузкиАЛКО(Форма);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	ИначеЕсли ИмяКоманды = "Выгрузить" Тогда

		ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "Выгрузка", Ложь);

		Если НужнаДальнейшаяОбработка Тогда
			НачалоВыгрузкиАЛКО(Форма);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	ИначеЕсли ИмяКоманды = "ДобавитьСтраницу" Тогда
		Форма.ДобавитьСтраницуНаСервере();

	ИначеЕсли ИмяКоманды = "ДобавитьВиноградник" Тогда
		ДобавитьВиноградникАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "УдалитьСтраницу" Тогда
		УдалитьСтраницуАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "УдалитьВсеСтраницы" Тогда
		УдалитьВсеСтраницыАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "Заполнить" Тогда
		ЗаполнитьАвтоАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "ПечатьФайлZIP" Тогда

		ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "Печать", Ложь);

		Если НужнаДальнейшаяОбработка Тогда
			ПечатьФайлZIPВыборФорматаАЛКО(Форма);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	ИначеЕсли ИмяКоманды = "ПоказатьБланк" Тогда

		ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "Печать", Ложь);

		Если НужнаДальнейшаяОбработка Тогда
			ПоказатьБланкАЛКО(Форма);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	ИначеЕсли ИмяКоманды = "ПересчитатьИтоги" Тогда
		ПересчетИтогов_ДлительнаяОперация(Форма);

	ИначеЕсли ИмяКоманды = "ЗаписатьИЗакрыть" Тогда
		Форма.ПользовательНажалСохранитьОтчет = Истина;
		ЗаписатьИЗакрытьАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "СохранитьОтчет" Тогда
		Форма.ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиентеАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "ОчиститьРегистрыОтМусора" Тогда
		КомандаОчиститьРегистрыОтМусораАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "ВосстановитьУдаленныеСтраницы" Тогда
		КомандаВосстановитьУдаленныеСтраницыАЛКО(Форма);

	ИначеЕсли ИмяКоманды = "Обновить" Тогда
		Форма.ОбновитьНаСервере();
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ОчиститьТекущуюСтраницу" Тогда
		ОчиститьТекущуюСтраницуАЛКО(Форма);
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ОчиститьОтчет" Тогда
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(Форма, "ОчиститьВесьОтчет");
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "Расшифровать" Тогда
		РасшифроватьАЛКО(Форма);
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "ОткрытьФормуНастроек" Тогда
		ОткрытьФормуНастроекАЛКО(Форма);
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
	ИначеЕсли ИмяКоманды = "Просуммировать" Тогда
		Форма.Просуммировать();
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

	Иначе
	// Сторонние команды.
	//
		Если ИмяКоманды = "ПроверитьВИнтернете" Тогда

			ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
			НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "ПроверкаВыгрузкиВИнтернете", Ложь);

			Если НужнаДальнейшаяОбработка Тогда

			// Очищаем очередь команд.
				Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";
				Форма.СписокОчередиДействий.Очистить();
				// Вызов стандартного обработчика сторонней команды.
				Форма.ПроверитьВИнтернете("");

			Иначе
				ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
			КонецЕсли;

		ИначеЕсли ИмяКоманды = "ВыгрузитьПакет" Тогда

			ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
			НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "ВыгрузкаПакета", Ложь);

			Если НужнаДальнейшаяОбработка Тогда

			// Очищаем очередь команд.
				Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";
				Форма.СписокОчередиДействий.Очистить();
				// Вызов стандартного обработчика сторонней команды.
				Форма.ВыгрузитьПакет("");

			Иначе
				ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
			КонецЕсли;

		ИначеЕсли ИмяКоманды = "ОтправитьВКонтролирующийОрган" Тогда

			ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
			НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "ОтправкаВКонтролирующийОрган", Ложь);

			Если НужнаДальнейшаяОбработка Тогда

			// Очищаем очередь команд.
				Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";
				Форма.СписокОчередиДействий.Очистить();
				// Вызов стандартного обработчика сторонней команды.
				Форма.ОтправитьВКонтролирующийОрган("");

			Иначе
				ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
			КонецЕсли;

		ИначеЕсли ИмяКоманды = "ОбновитьОтправку" Тогда

			ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
			НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "ОтправкаВКонтролирующийОрган", Ложь);

			Если НужнаДальнейшаяОбработка Тогда

			// Очищаем очередь команд.
				Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";
				Форма.СписокОчередиДействий.Очистить();
				// Вызов стандартного обработчика сторонней команды.
				Форма.ОбновитьОтправку("");

			Иначе
				ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
			КонецЕсли;

		ИначеЕсли ИмяКоманды = "ОтправитьНеотправленноеИзвещение" Тогда

		// Очищаем очередь команд.
			Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";
			Форма.СписокОчередиДействий.Очистить();
			// Вызов стандартного обработчика сторонней команды.
			Форма.ОтправитьНеотправленноеИзвещение("");

			// Загрузка из файла XML выгрузки отчета.
		ИначеЕсли ИмяКоманды = "Загрузить" Тогда

			ОписаниеОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
			НужнаДальнейшаяОбработка = ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, "ЗагрузкаИзФайла", Ложь);

			Если НужнаДальнейшаяОбработка Тогда

			// Очищаем очередь команд.
				Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";
				Форма.СписокОчередиДействий.Очистить();
				// Вызов стандартного обработчика сторонней команды.
				Форма.ЗагрузитьИзФайла("");

			Иначе
				ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
			КонецЕсли;

			// Не найдена команда.
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выполняет действие из списка очереди действий формы.
//
// Параметры:
//
// 		Форма		- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
Процедура ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма) Экспорт

	Форма.СтруктураРеквизитовФормы.ТекущееДействие = "";

	Если Форма.СписокОчередиДействий.Количество() > 0 Тогда

		ДействиеИзОчереди = Форма.СписокОчередиДействий[0].Значение;
		Форма.СписокОчередиДействий.Удалить(0);
		ВыполнитьКомандуФормыПоИмениАЛКО(Форма, ДействиеИзОчереди);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьТекущуюСтраницуОтчетаАЛКО(Форма, СписокСостоянийОбновления = Неопределено) Экспорт

	ПереданСписокСостоянийОбновления =  (ТипЗнч(СписокСостоянийОбновления) = Тип("СписокЗначений"));
	
	Если Форма.ТекущийРаздел = "Титульный" Тогда
		
		// После сохранения могли измениться настройки видимости элементов,
		// например, ЗаявлениеОКорректировке, поэтому выведем Титульный.
		Форма.НаименованиеРазделаПриВыводеСтраницы = Форма.ТекущийРаздел;
		Форма.ТекущийНомерСтрокиТаблицыФормы = 0;
		
		ПоказатьСтраницуНЕМногостраничногоРазделаАЛКО(Форма);

	ИначеЕсли ( СписокСостоянийОбновления = Неопределено  )
				ИЛИ 
				( ПереданСписокСостоянийОбновления И ЗначениеЗаполнено(Форма.ТекущееСостояние) 
				И 
				(НЕ СписокСостоянийОбновления.НайтиПоЗначению(Форма.ТекущееСостояние) = Неопределено) ) Тогда
		
		Форма.НаименованиеРазделаПриВыводеСтраницы = Форма.ТекущийРаздел;
		Форма.ТекущееСостояние = "";
		
		ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма);
				
	КонецЕсли;

КонецПроцедуры
 
// Начинает процесс сохранения отчета.
//
// Параметры:
//
// 		Форма					- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Автосохранение 			- Булево - Признак включенного режима автосахранения отчета. 
//								На практике признак всегда выключен.
//
//		ВыполняемоеОповещение 	- ОписаниеОповещения - Оповещение, которое необходимо выполнить после завершения процесса
//								сохранения отчета.
//
Процедура СохранитьНаКлиентеАЛКО(Форма, Автосохранение = Ложь,
		ВыполняемоеОповещение = Неопределено) Экспорт

	Форма.РезультатСохранения = Ложь;

	Вариант = Форма.СтруктураРеквизитовФормы.ВидДокумента
		* Форма.НомерКорректировки;

	КодИФНС = "";
	КПП = "";

	Если НЕ ВыполняемоеОповещение = Неопределено Тогда
		Форма.УниверсальноеОписаниеОповещения = ВыполняемоеОповещение;
	КонецЕсли;

	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	МожноСохранять = Ложь;

	// Подготовка параметров для ПередСохранением().
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодИФНС", КодИФНС);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Вставить("Вариант", Вариант);
	СтруктураПараметров.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Вставить("МожноСохранять", МожноСохранять);
	СтруктураПараметров.Вставить("Автосохранение", Автосохранение);
	СтруктураПараметров.Вставить("НаимТекРаздела", Форма.ТекущийРаздел);

	Форма.ПередСохранениемНаСервере(СтруктураПараметров);

	// Извлекаем обратно.
	СтруктураПараметров.Свойство("КодИФНС", КодИФНС);
	СтруктураПараметров.Свойство("КПП", КПП);
	СтруктураПараметров.Свойство("ПодобныйОтчетСуществует", ПодобныйОтчетСуществует);
	СтруктураПараметров.Свойство("Вариант", Вариант);
	СтруктураПараметров.Свойство("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	СтруктураПараметров.Свойство("МожноСохранять", МожноСохранять);
	СтруктураПараметров.Свойство("Автосохранение", Автосохранение);
	СтруктураПараметров.Свойство("НаимТекРаздела", Форма.ТекущийРаздел);

	Если ПодобныйОтчетСуществует И Автосохранение Тогда

	// Скидываем признак нажатия кнопки сохранения.
		Форма.ПользовательНажалСохранитьОтчет = Ложь;
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;

	КонецЕсли;

	НуженВопросПередСохранением = (ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);

	Форма.РезультатСохранения = Ложь;
	Если НуженВопросПередСохранением Тогда
		СохранитьСВопросомАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
	ИначеЕсли МожноСохранять Тогда
		РезультатСохраненияАЛКО(Форма, Автосохранение, КодИФНС, КПП, Вариант, , Форма.ТекущийРаздел, ВыполняемоеОповещение);
	Иначе
		ПослеСохраненияАЛКО(Форма);
	КонецЕсли;

КонецПроцедуры

// Очищает все разделы отчета.
//
// Параметры:
//
// 		Форма					- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		ВыполняемоеОповещение 	- ОписаниеОповещения - Оповещение, которое необходимо выполнить после завершения процесса
//								очистки отчета.
//
//		ЗадаватьВопросПередОчисткой	- Булево - Признак интерактивности очистки. 
//
//      ТекстВопроса				- Строка - Текст вопроса, выдаваемого пользователю при включенной интерактивной очистке.
//
Процедура ОчиститьОтчетАЛКО(Форма, ВыполняемоеОповещение = Неопределено,
		ЗадаватьВопросПередОчисткой = Истина, Знач ТекстВопроса = "") Экспорт

	Если ЗадаватьВопросПередОчисткой Тогда

		Если ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = НСтр("ru='Внимание! Будут очищены все разделы отчета.
				|Продолжить?'");
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);

		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Иначе

		Форма.ОчиститьНаСервере();

		// Устанавливаем флаг модифицированности формы и выполняем оповещение, если есть.
		Форма.Модифицированность = Истина;
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиСобытийФормы

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции процедура обработки оповещения.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		ИмяСобытия		- Строка. Имя события. Может быть использовано для идентификации сообщений принимающими их формами.
//
//		Параметр		- Произвольный тип - Параметр сообщения. Могут быть переданы любые необходимые данные.
//
//		Источник		- Произвольный тип - Источник события. Например, в качестве источника может быть указана другая форма.
//
Процедура ОбработкаОповещенияАЛКО(Форма, ИмяСобытия, Параметр, Источник) Экспорт

	Если Источник = Форма.УникальностьФормы Тогда

		Если НРег(ИмяСобытия) = НРег("АктивацияДеактивация") Тогда
			ВыполнитьСМинимальнойЗадержкой(Форма, "АктивацияДеактивация");
		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ПриАктивизацииСтрокиНаКлиенте") Тогда
			ПриАктивизацииСтрокиАЛКО(Форма);
		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ОткрытиеСтраницы") Тогда
			ВыполнитьСМинимальнойЗадержкой(Форма, "ОткрытиеСтраницыНаКлиенте");
		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ОтменаОперации") Тогда

			Если Форма.ОтменитьФоновоеЗаданиеНаСервере(Форма.СтруктураРеквизитовФормы.ИдентификаторЗадания) Тогда

				Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте");

				ОтменаДлительнойОперацииАЛКО(Форма);

			КонецЕсли;

		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ОтменаОперацииПриОшибке") Тогда
			ОтменаДлительнойОперацииАЛКО(Форма);
		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ПересчетИтогов") Тогда

		// Произошли изменения в формах редактирования записей регистров - строк таблицы,
			// и эти изменения уже записаны в регистры.	
			ИнформацияДляПересчетаИтогов = Параметр;

			Если (Форма.ТекущееСостояние = "Копирование")
					или (Форма.ТекущееСостояние = "Добавление") Тогда

				РегламентированнаяОтчетностьАЛКОКлиентСервер.УвеличитьКоличествоСтрокПоТекущейСтранице(Форма, Форма.ТекущийИдГруппы, Форма.НомерАктивнойСтраницыМногострочногоРаздела, Форма.КоличествоСтрок, ИнформацияДляПересчетаИтогов.ИндексСтроки);

				Форма.ТекущееСостояние = "";

			КонецЕсли;

			Форма.ПересчитатьТекущиеИтогиНаСервере(ИнформацияДляПересчетаИтогов);

			Форма.Модифицированность = Истина;

		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ПоказыватьПредупреждениеПослеПереходаПоСсылке") Тогда
			Форма.ПоказыватьПредупреждениеПослеПереходаПоСсылке = Ложь;
		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ОткрытаФормаЗаписиРегистра") Тогда
			Форма.ФормаЗаписиРегистра = Параметр;
			Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = Параметр;
		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ЗакрытаФормаЗаписиРегистра") Тогда

			Форма.ФормаЗаписиРегистра = Неопределено;
			Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;

			Если (Форма.ТекущееСостояние = "Копирование")
					или (Форма.ТекущееСостояние = "Добавление")
					или (Форма.ТекущееСостояние = "Редактирование") Тогда
				Форма.ТекущееСостояние = "";
			КонецЕсли;

		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ОткрытьФормуНавигацииПоОшибкам") Тогда
			ВыполнитьСМинимальнойЗадержкой(Форма, "Подключаемый_ОткрытьФормуНавигацииПоОшибкамБезПараметров");
		КонецЕсли;

		Если НРег(ИмяСобытия) = НРег("ПослеВыполненияЗадания_АвтоЗаполнения") Тогда
			ВыполнитьСМинимальнойЗадержкой(Форма, "ПослеВыполненияЗадания_АвтоЗаполнения");
		КонецЕсли;

	КонецЕсли;

	Если НРег(ИмяСобытия) = НРег("ОткрытаФормыОшибок") Тогда

		Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Параметр.Отчет Тогда

			Форма.ФормаОшибок = ОпределитьОткрытуюФормуНавигацииПоОшибкам(Форма);

		КонецЕсли;

	КонецЕсли;

	Если НРег(ИмяСобытия) = НРег("ЗакрытаФормаОшибок") Тогда

		Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Параметр.Отчет Тогда

			Форма.ФормаОшибок = Неопределено;

		КонецЕсли;

	КонецЕсли;

	Если НРег(ИмяСобытия) = НРег("ОбновитьЗаявлениеОКорректировке")
			И (НЕ Форма.НомерАлкоОтчета = 0) Тогда

		ЗаявлениеОКорректировке = Параметр.ЗаявлениеОКорректировке;
		СданныйАлкоОтчет = Параметр.СданныйАлкоОтчет;

		Если СданныйАлкоОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок Тогда

			Форма.ЗаявлениеОКорректировке = ЗаявлениеОКорректировке;

			// Чтобы при отработке РегламентированнаяОтчетностьАЛКО.ЗаполнитьТитульныйАЛКО()
			// Все перезаполнилось.
			Форма.ЗаявлениеОКорректировкеПредставление = "";

			// Инициируем заполнение Титульного.
			Если Форма.ТекущийРаздел = "Титульный" Тогда

				Форма.НаименованиеРазделаПриВыводеСтраницы = Форма.ТекущийРаздел;
				Форма.ТекущийНомерСтрокиТаблицыФормы = 0;
				ПоказатьСтраницуНЕМногостраничногоРазделаАЛКО(Форма);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Только для Заявлений о корректировке.
	Если НРег(ИмяСобытия) = НРег("ОбновитьЗаявлениеОКорректировкеИзДекларации")
			И Форма.НомерАлкоОтчета = 0 Тогда

		ЗаявлениеОКорректировке = Параметр.ЗаявлениеОКорректировке;
		СданныйАлкоОтчет = Параметр.СданныйАлкоОтчет;

		Если ЗаявлениеОКорректировке = Форма.СтруктураРеквизитовФормы.мСохраненныйДок Тогда

			Форма.СданныйАлкоОтчет = СданныйАлкоОтчет;

			// Чтобы при отработке РегламентированнаяОтчетностьАЛКО.ЗаполнитьТитульныйАЛКО()
			// Все перезаполнилось.
			Форма.СданныйАлкоОтчетПредставление = "";

			// Инициируем заполнение Титульного.
			Если Форма.ТекущийРаздел = "Титульный" Тогда

				Форма.НаименованиеРазделаПриВыводеСтраницы = Форма.ТекущийРаздел;
				Форма.ТекущийНомерСтрокиТаблицыФормы = 0;
				ПоказатьСтраницуНЕМногостраничногоРазделаАЛКО(Форма);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// обработчик события ПриОткрытии.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Отказ			- Булево. Если Истина, дальнейшее открытие формы прекращается.
//
Процедура ПриОткрытииАЛКО(Форма, Отказ) Экспорт

	#Если ВебКлиент Тогда
		Форма.ЭтоВебКлиент = Истина;
	#Иначе
		Форма.ЭтоВебКлиент = Ложь;
	#КонецЕсли

	Форма.ПоказыватьПредупреждениеПослеПереходаПоСсылке = Истина;

	Форма.БылаУдаленаСтраницаРаздела = Ложь;

	// Зафиксируем текущую строку форм 1С-Отчетность и Управление Отчетностью.
	ТекДокумент = ЗафиксироватьТекущийДокументУправляющейФормы();

	Форма.СтруктураРеквизитовФормы.Вставить("ДокУправляющейФормыПередОткрытием", ТекДокумент);

	ВыполнитьПроверкуПередОткрытиемАЛКО(Форма);

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПередЗакрытием.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Отказ			- Булево. Если Истина, закрытие формы отменяется.
//
//		ЗавершениеРаботы 	- Булево. В данный параметр передается признак того, что форма закрывается 
//							в процессе завершения работы приложения:
//							Истина - если в процессе завершения приложения; Ложь - если закрывается только форма.
//
//		ТекстПредупреждения - Строка. 
//							Если параметру <Отказ> установлено значение Истина и <ТекстПредупреждения> содержит непустую строку, то:
//
//							если <Завершение работы> установлено в Истина, окно сообщения со строкой текста предупреждения 
//							будет выведено на экран и пользователю будет предложено на выбор - остаться или 
//							покинуть окно без сохранения изменений.
//
//							если <Завершение работы> установлено в Ложь, текст предупреждения игнорируется и 
//							процесс закрытия формы прерывается.
//
//							Если параметру <Отказ> установлено значение Истина и <ТекстПредупреждения> содержит пустую строку, то:
//
//							если <Завершение работы> установлено в Истина, пользователю будет отображно окно с общим 
//							текстом "Работа в данном окне не завершена" и будет предложено остаться или покинуть окно 
//							без сохранения изменений. 
//
//							если <Завершение работы> установлено в Ложь, то значение параметра <ТекстПредупреждения> будет 
//							проигнорировано, и процесс закрытия формы будет прерван.
//
//							Если параметру <Отказ> установлено значение Ложь, то 
//							значение параметра <ТекстПредупреждения> будет проигнорировано, и процесс закрытия формы будет продолжен.
//
// Примечание: В браузере Mozilla Firefox окно сообщения не будет содержать текста предупреждения. 
//
Процедура ПередЗакрытиемАЛКО(Форма, Отказ, ЗавершениеРаботы,
		ТекстПредупреждения, СтандартнаяОбработка) Экспорт

	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
	// Поскольку для нормальной работы Отчет должен быть сохранен хотя бы раз,
		// попадание в процедуру ПередЗакрытием с несохраненным отчетом означает отказ от сохранения.
		Возврат;
	КонецЕсли;

	ПередЗакрытиемРегламентированногоОтчетаАЛКО(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриЗакрытии.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		ЗавершениеРаботы 	- Булево. В данный параметр передается признак того, что форма закрывается 
//							в процессе завершения работы приложения:
//							Истина - если в процессе завершения приложения; Ложь - если закрывается только форма.
//
Процедура ПриЗакрытииАЛКО(Форма, ЗавершениеРаботы) Экспорт

	Если (НЕ ЗавершениеРаботы = Неопределено) и ЗавершениеРаботы Тогда
	// Идет завершение работы системы.		
		Возврат;

	КонецЕсли;

	// Обновляем списки отчетов внешних форм, 
	// чтобы гарантировано после закрытия они были спозиционированы на закрываемом отчете.
	// Если отчет не сохранен - позиционирование списков не поменяются.
	СохраненныйДокумент = РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры("мСохраненныйДок", Форма.СтруктураРеквизитовФормы);

	СпозиционироватьФормыСоСпискомОтчетов(СохраненныйДокумент);

	Форма.ПриЗакрытииНаСервере();

	Оповестить("ЗакрытОтчет", , СохраненныйДокумент);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиСобытийТаблицаРазделыОтчета

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриАктивизацииСтроки таблицы ТаблицаРазделыОтчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент 		- Элемент формы ТаблицаРазделыОтчета. 
//
Процедура РазделыОтчетаПриАктивизацииСтрокиАЛКО(Форма, Элемент) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если (Элемент.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета)
			и (НЕ (Форма.ТекущееСостояние = "Активизация"
			или Форма.ТекущееСостояние = "АктивизацияСтраницыРаздела")) Тогда
		Возврат;
	КонецЕсли;

	Если (Элемент.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета)
			и (Форма.ТекущееСостояние = "АктивизацияСтраницыРаздела") Тогда

			// Проверяем наличие таблицы - РазделыОтчетаПриАктивизацииСтроки вызывается несколько раз,
		// в том числе до вывода ТаблицыФормы.
		//ИмяАктивизируемогоРаздела = Форма.ЯчейкаАктивизации.Раздел;
		//ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(
		//									ИмяАктивизируемогоРаздела, Форма.СтруктураРеквизитовФормы);
		//ИмяТаблицыФормыАктивизируемогоРаздела = "ТаблицаФормыРаздела" + ИдГруппы;

		//Если Форма.Элементы.Найти(ИмяТаблицыФормыАктивизируемогоРаздела) = Неопределено Тогда
		//    // Еще рано.
		//	Возврат;						 
		//КонецЕсли; 

		// Уже выполнен переход на нужную страницу многострочного раздела.
		Форма.ТекущееСостояние = "";
		АктивизироватьПолеАктивнойСтраницыСЗадержкойАЛКО(Форма);

		// Для предотвращения повторного перехода на страницу раздела, уходим.
		Возврат;

	КонецЕсли;

	Если (Элемент.ТекущаяСтрока <> Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета)
			и (Форма.ТекущееСостояние = "Активизация") Тогда
			// Меняем состояние для обработки после перехода на страницу Раздела.
		Форма.ТекущееСостояние = "АктивизацияСтраницыРаздела";
	КонецЕсли;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();

	Форма.ЭтоРазделОтчета = (ТекущийРодитель = Неопределено);

	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;

	Форма.ТекущийРаздел = ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;

	Если НЕ ЗначениеЗаполнено(Форма.ТекущийРаздел) Тогда

	// Первичное открытие, обрабатывать нечего.
		Возврат;

	КонецЕсли;

	Если Форма.ЭтоРазделОтчета Тогда
		Форма.ТекущееИмяРаздела = ТекущиеДанные.КолонкаРазделыОтчета;
	Иначе
		Форма.ТекущееИмяРаздела = ТекущийРодитель.КолонкаРазделыОтчета;
	КонецЕсли;

	// Определим одна страница или несколько.
	Форма.ОднаСтраницаВРазделе = Ложь;

	Если Форма.ЭтоРазделОтчета Тогда

		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
			Форма.ОднаСтраницаВРазделе = Истина;
		КонецЕсли;

	ИначеЕсли ТекущийРодитель.ПолучитьЭлементы().Количество() = 1 Тогда
		Форма.ОднаСтраницаВРазделе = Истина;
	КонецЕсли;

	// Определим индекс страницы.
	ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
		ИЛИ ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);

	НомерСтраницы = ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;

	// Заполняем параметры для дальнейшего использования в ВыполнитьПереходНаСтраницуРаздела().
	ПараметрыПереходаНаСтраницуРаздела = Новый Структура;
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ПоказатьПоИндексуПриВыводеСтраницы", Истина);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("НомерСтраницыПриВыводеСтраницы", НомерСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("НаименованиеРазделаПриВыводеСтраницы", Форма.ТекущийРаздел);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭлементПриВыводеСтраницы", Элемент);
	ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭтоРазделОтчетаПриВыводеСтраницы", Форма.ЭтоРазделОтчета);

	Если Форма.УказываютсяНомераЛицензии Тогда
		Форма.ЭтоЛицензируемаяДеятельность = ЛицензируемаяДеятельностьАЛКО(Форма);
		ПараметрыПереходаНаСтраницуРаздела.Вставить("ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы", Форма.ЭтоЛицензируемаяДеятельность);
	КонецЕсли;

	// Список необходим для ситуации быстрого "щелканья" по страницам раздела, 
	// чтобы предотвратить падение платформы - отслеживаем такие быстрые "щелчки" 
	// и выводим лишь последнюю выбранную страницу.
	ПроверитьСписокПараметровПереходаНаСтраницуРаздела(Форма); 
	Форма.СписокПараметровПереходаНаСтраницуРаздела.Вставить(0, ПараметрыПереходаНаСтраницуРаздела);

	// Перед переходом нужно очистить активный элемент таблицы.

	// Нельзя использовать серверные методы. 
	Оповестить("ОткрытиеСтраницы", , Форма.УникальностьФормы);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсОбработчикиСобытийТаблицыМногострочногоРаздела

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события Выбор таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
//		ВыбраннаяСтрока, Поле, СтандартнаяОбработка - описание соответствует
//		параметрам обработчика действия Выбор таблицы управляемой формы.
//
Процедура ТаблицаФормыРазделаВыборАЛКО(Форма, Элемент, ВыбраннаяСтрока, Поле,
		СтандартнаяОбработка) Экспорт

	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);

	// Отрабатываем ситуацию двойного клика на колонке отбора.
	ИмяПоля = Поле.Имя;

	Если ИмяПоля = "Активно" + Форма.ТекущийИдГруппы Тогда

		СтандартнаяОбработка = Ложь;
		Форма.АктивныйЭлементТаблицы = Элемент;

		Оповестить("АктивацияДеактивация", , Форма.УникальностьФормы);

		Возврат;

	КонецЕсли;

	Форма.ТекущееСостояние = "Редактирование";

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекущиеДанные.Активно Тогда
	// Строка выключена из отбора, соответственно в итогах не участвует.
		// И меняется не поле активности (пометка на удаление).
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПередУдалением таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
//		Отказ - описание соответствует
//		параметрам обработчика действия ПередУдалением таблицы управляемой формы.
//
Процедура ТаблицаФормыРазделаПередУдалениемАЛКО(Форма, Элемент,
		Отказ = Истина) Экспорт

	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);

	Отказ = Истина;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Отмена удаления.
	Форма.АктивныйЭлементТаблицы = Элемент;
	// Нельзя использовать серверные методы. 				
	Оповестить("АктивацияДеактивация", , Форма.УникальностьФормы);

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПередНачаломДобавления таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
//		Отказ, Копирование, Родитель, ЭтоГруппа, Параметр - описание соответствует
//		параметрам обработчика действия ПередНачаломДобавления таблицы управляемой формы.
//
Процедура ТаблицаФормыРазделаПередНачаломДобавленияАЛКО(Форма, Элемент, Отказ,
		Копирование, Родитель, ЭтоГруппа, Параметр) Экспорт

	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);

	Форма.ТекущееСостояние = ?(Копирование, "Копирование", "Добавление");

	// Добавляем строку в конец, если Копирование - копируем.
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;

	// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
	Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
	Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриИзменении таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
Процедура ТаблицаФормыРазделаПриИзмененииАЛКО(Форма, Элемент) Экспорт

	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);

	Форма.АктивныйЭлементТаблицы = Элемент;

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриАктивизацииСтроки таблицы формы многострочного раздела.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы таблицы формы многострочного раздела.
//
Процедура ТаблицаФормыРазделаПриАктивизацииСтрокиАЛКО(Форма, Элемент) Экспорт

	ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент);

	Форма.АктивныйЭлементТаблицы = Элемент;

	ПриАктивизацииСтрокиАЛКО(Форма);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсТитульный

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриИзменении поля НомерКорректировки Титульного листа отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы НомерКорректировки.
//
Процедура НомерКорректировкиПриИзмененииАЛКО(Форма, Элемент) Экспорт

	ЭлементТитульногоПриИзмененииАЛКО(Форма, Элемент, "НомКорр", "НомерКорректировки");

	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(Форма.НомерКорректировки = 0, 0, 1);

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события Нажатие поля гиперссылки МестоОсуществленияДеятельности.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент поля гиперссылки управляемой формы.
//
Процедура МестоОсуществленияДеятельностиНажатиеАЛКО(Форма, Элемент,
		СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	// Читаем сохраненную во внутреннем представлении структуру.
	СохраненныеДанныеАдреса = Форма.ДополнительныеДанные.Титульный.АдресМестаДеятельности;

	ЗаголовокФормыВвода = "Ввод адреса местонахождения";
	ВидКонтактнойИнформации = Форма.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформации.ТолькоНациональныйАдрес;
	Оповещение = Новый ОписаниеОповещения("МестоОсуществленияДеятельностиНажатиеЗавершениеАЛКО", ЭтотОбъект, Форма);

	ВызватьФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса, ЗаголовокФормыВвода, Оповещение, ВидКонтактнойИнформации);

КонецПроцедуры

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события ПриИзменении поля ДатаПодписи Титульного листа отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент формы ДатаПодписи.
//
Процедура ДатаПодписиПриИзмененииАЛКО(Форма, Элемент) Экспорт

	ЭлементИзменен = ЭлементТитульногоПриИзмененииАЛКО(Форма, Элемент, "ДатаПодписи", "ДатаПодписи");
	Если ЭлементИзменен Тогда
		Форма.ОбновитьНаСервере(Истина);
	КонецЕсли;

КонецПроцедуры

// Сохраняет измененное значение полей титульного листа в данных отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент поля гиперссылки управляемой формы.
//
//		ИмяВСтруктуреДанныхТитульный 	- Строка. Имя поля структуры СтруктураДанныхТитульный, в значении
//										которого сохраняется значение элемента.
//		ИмяРеквизитаФормы				- Строка. Имя реквизита формы, источника данных для элемента.
//
Функция ЭлементТитульногоПриИзмененииАЛКО(Форма, Элемент,
		ИмяВСтруктуреДанныхТитульный, ИмяРеквизитаФормы) Экспорт

	ЭлементИзменен = Ложь;

	Если Форма.СтруктураДанныхТитульный.Свойство(ИмяВСтруктуреДанныхТитульный) Тогда

		Если Форма.СтруктураДанныхТитульный[ИмяВСтруктуреДанныхТитульный] <> Форма[ИмяРеквизитаФормы] Тогда

			Форма.СтруктураДанныхТитульный.Вставить(ИмяВСтруктуреДанныхТитульный, Форма[ИмяРеквизитаФормы]);
			Форма.Модифицированность = Истина;
			ЭлементИзменен = Истина;

		КонецЕсли;

	Иначе

		Форма.СтруктураДанныхТитульный.Вставить(ИмяВСтруктуреДанныхТитульный, Форма[ИмяРеквизитаФормы]);
		Форма.Модифицированность = Истина;
		ЭлементИзменен = Истина;

	КонецЕсли;

	Возврат ЭлементИзменен;

КонецФункции

// Универсальная для всех форм отчетов подсистемы ОтчетностьПоАлкогольнойПродукции 
// процедура обработчик события Нажатие полей гиперссылок заполняемых по данным
// Организации - декларанта отчета, расположенных на Титульном листе отчета.
//
// Параметры:
//
// 		Форма			- Управляемая форма отчета подсистемы ОтчетностьПоАлкогольнойПродукции.
//
//		Элемент			- Элемент поля гиперссылки управляемой формы.
//
//		СтандартнаяОбработка -  описание соответствует
//		параметрам обработчика действия Нажатие поля управляемой формы.
//
Процедура ОрганизацияОткрытиеАЛКО(Форма, Элемент = Неопределено,
		СтандартнаяОбработка = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;

	ПараметрыОрганизации = Новый Структура("Ключ", Форма.ОрганизацияОтчета);

	Оповещение = Новый ОписаниеОповещения("ОрганизацияОткрытиеЗавершениеАЛКО", ЭтотОбъект, Форма);

	КлючУникальности = УникальностьФормы(Форма);

	Форма.Активизировать();
	ФормаСправочникаОрганизации = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыОрганизации, Форма, КлючУникальности, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = ФормаСправочникаОрганизации;

	ЭлементУправления = Неопределено;

	Если НЕ Элемент = Неопределено Тогда

		ИмяЭлемента = Элемент.Имя;

		Если (ИмяЭлемента = "ИНН") или (ИмяЭлемента = "КПП") Тогда

			Если Форма.ЭтоПБОЮЛ Тогда
				ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("ИННИП");
			КонецЕсли;

			Если ЭлементУправления = Неопределено Тогда
				ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти(ИмяЭлемента);
			КонецЕсли;

		ИначеЕсли ИмяЭлемента = "ЭлектронныйАдресОрганизации" Тогда

			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("КонтактнаяИнформацияПолеEmailОрганизации");

		ИначеЕсли ИмяЭлемента = "ПолныйАдресТелефон" Тогда

			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти("КонтактнаяИнформацияПолеЮрАдресОрганизации");

		ИначеЕсли (ИмяЭлемента = "Руководитель")
				или (ИмяЭлемента = "ГлавныйБухгалтер") Тогда

			ЭлементУправления = ФормаСправочникаОрганизации.Элементы.Найти(ИмяЭлемента);

		КонецЕсли;

	КонецЕсли;

	Если ЭлементУправления <> Неопределено Тогда
		ФормаСправочникаОрганизации.ТекущийЭлемент = ЭлементУправления;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаявлениеОКорректировкеНажатиеАЛКО(Форма, Элемент,
		СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	Элементы = Форма.Элементы;
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;

	Если Значениезаполнено(Форма.ЗаявлениеОКорректировке) Тогда

	// Открываем документ Заявления.
		ЭлементЗаявлениеОКорректировке = Элементы.ЗаявлениеОКорректировке;
		НажатиеГиперссылкиАЛКО(Форма, ЭлементЗаявлениеОКорректировке, РежимОткрытияОкнаФормы.Независимый, СтандартнаяОбработка);

	Иначе

		КраткоеИмяФормыЗаявления = "ФормаОтчета2017Кв3";
		ИмяФормыЗаявления = "Отчет.РегламентированныйОтчетАлкоЗаявлениеОКорректировке.Форма."
			+ КраткоеИмяФормыЗаявления;

			// Проверяем, не открыта ли уже форма Заявления.
		ФормаЗаявления = ОпределитьОткрытуюВспомогательнуюФормуОтчета(Форма, ИмяФормыЗаявления);

		Если ФормаЗаявления = Неопределено Тогда

		// Формируем параметры создания отчета Заявление о корректировке.
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
			ПараметрыФормы.Вставить("мСохраненныйДок", Неопределено);
			ПараметрыФормы.Вставить("мСкопированаФорма", Неопределено);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			ПараметрыФормы.Вставить("мПериодичность", СтруктураРеквизитовФормы.мПериодичность);
			ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);

			КлючУникальности = УникальностьФормы(Форма);
			ПараметрыФормы.Вставить("КлючУникальности", КлючУникальности);

			ПараметрыФормы.Вставить("мВыбраннаяФорма", КраткоеИмяФормыЗаявления);

			ПараметрыФормы.Вставить("НомерПриложения", Строка(Форма.НомерАлкоОтчета));
			ПараметрыФормы.Вставить("СданныйАлкоОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);

			ОткрытьФорму(ИмяФормыЗаявления, ПараметрыФормы, Форма.ВладелецФормы, Истина, , , , РежимОткрытияОкнаФормы.Независимый);

		Иначе
			ФормаЗаявления.Активизировать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсЛицензии

Процедура ДеятельностьПоЛицензииНачалоВыбораАЛКО(Форма,
		ДанныеВыбора = Неопределено, СтандартнаяОбработка = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	ВыборДеятельностиПоЛицензииАЛКО(Форма);

КонецПроцедуры

Процедура ВидДеятельностиПоЛицензииНажатиеАЛКО(Форма, Элемент = Неопределено,
		СтандартнаяОбработка = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	ВыборДеятельностиПоЛицензииАЛКО(Форма);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсМногостраничныйРаздел

Процедура ПриИзмененииВиноградныхДанныхАЛКО(Форма, Элемент) Экспорт

	ИмяЭлемента = Элемент.Имя;
	// Для этой группы имя элемента совпадает с именем реквизита формы.
	АктивнаяСтраница = Форма.ТаблицаСтраницыДекларация[Форма.НомерАктивнойСтраницыМногострочногоРаздела];
	АктивныеДанные = АктивнаяСтраница.Данные[0].Значение;

	Если АктивныеДанные.Свойство(ИмяЭлемента) Тогда

		Если АктивныеДанные[ИмяЭлемента] <> Форма[ИмяЭлемента] Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;

	Иначе
		Форма.Модифицированность = Истина;
	КонецЕсли;

	АктивныеДанные.Вставить(ИмяЭлемента, Форма[ИмяЭлемента]);

	// Расчет урожайности.
	Если ИмяЭлемента = "П000010000303" или ИмяЭлемента = "П000010000301" Тогда

		Если Форма["П000010000301"] > 0 Тогда
			Форма["П000010000302"] = Форма["П000010000303"] / Форма["П000010000301"];
		Иначе
			Форма["П000010000302"] = 0;
		КонецЕсли;

		АктивныеДанные.Вставить("П000010000301", Форма["П000010000301"]);
		АктивныеДанные.Вставить("П000010000302", Форма["П000010000302"]);
		АктивныеДанные.Вставить("П000010000303", Форма["П000010000303"]);

	КонецЕсли;

	АктивнаяСтраница.Данные[0].Пометка = НЕ АктивнаяСтраница.Данные[0].Пометка;

КонецПроцедуры

Процедура ОбособленноеПодразделениеНажатиеАЛКО(Форма, Элемент = Неопределено,
		СтандартнаяОбработка = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	ВводРеквизитовОП_АЛКО(Форма);

КонецПроцедуры

Процедура ФлагГоловногоОППриИзмененииАЛКО(Форма, Элемент) Экспорт

	Форма.Модифицированность = Истина;

	Раздел = Форма.ТекущийРаздел;
	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;

	ИмяНомерСтраницыФлагГоловногоОП = "НомерСтраницыФлагГоловногоОП" + Раздел;
	Форма[ИмяНомерСтраницыФлагГоловногоОП] = ?(Форма.ФлагГоловногоОП, ИндексСтраницы
		+ 1, 0);

	ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];
	ТаблицаСтраницРаздела[ИндексСтраницы].ФлагГоловногоОП = Форма.ФлагГоловногоОП;

	Если Форма.ФлагГоловногоОП Тогда
		Форма.ЗаполнитьОПРеквизитамиОрганизации(Раздел, ИндексСтраницы);
	КонецЕсли;

	Форма.УстановитьВидимостьРазделов(Раздел, ИндексСтраницы);

КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейсДлительнойОперации

// Возвращает значение перечисления подсистемы ОтчетностьПоАлкогольнойПродукции ВидыДлительныхОперацийРегламентированныхОтчетов
//
// Параметры:
//		ЗначениеПеречисления				- Строка - Имя значения перечисления.
//		
// Возвращаемое значение:
//		Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов
//
Функция ПолучитьПеречислениеВидыДлительныхОперацийРеглОтчетов(ЗначениеПеречисления) Экспорт

	СтрокаПеречисления = "Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов";
	Возврат ПредопределенноеЗначение(СтрокаПеречисления + "."
		+ ЗначениеПеречисления);

КонецФункции

Процедура ВыполнитьДлительнуюОперациюАЛКО(Форма, ВидДлОперации,
		ВидПечати = Неопределено, ФормаВлФормыДлитОперации = Неопределено) Экспорт

	Если Форма.ВладелецФормыДлитОпер = Неопределено Тогда

		Если (ФормаВлФормыДлитОперации = Неопределено)
				и Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ФормаВлФормыДлитОперации = ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(Форма);
		ИначеЕсли НЕ Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ФормаВлФормыДлитОперации = Форма;
		КонецЕсли;

		Форма.ВладелецФормыДлитОпер = ФормаВлФормыДлитОперации;

	КонецЕсли;

	ДлОперВосстановление = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
	Если (НЕ ВидДлОперации = ДлОперВосстановление)
			и Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда

		Форма.ВосстановитьДанныеБезОткрытияФормыНаСервере();

	КонецЕсли;

	// Предварительная проверка на подключение к 1С-отчетности для некоторых видов операций.
	ВидДлОперацииОтправка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВидДлОперацииВыгрузкаПакета = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");

	Если (ВидДлОперации = ВидДлОперацииОтправка)
			или (ВидДлОперации = ВидДлОперацииВыгрузкаПакета) Тогда

			// Проверка подключения к 1С-отчетности и ФСРАР.
		ОрганизацияПодключена = ПроверитьПодключениеОрганизации(Форма.СтруктураРеквизитовФормы, Ложь);

		Если НЕ ОрганизацияПодключена.ФСРАР Тогда
			Возврат;
		КонецЕсли;

	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда
	// Проверка подключения к 1С-отчетности.
		ОрганизацияПодключена = ПроверитьПодключениеОрганизации(Форма.СтруктураРеквизитовФормы, Истина);

		Если НЕ ОрганизацияПодключена.Отчетность Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если НЕ ВидПечати = Неопределено Тогда

		Если ВидПечати <> "ПечатьФайлZIP" Тогда

		// Нужно убедиться, что отчет не слишком большой.
			КолСтрокВОтчете = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьОбщееКоличествоСтрок(Форма, Истина);

			Если КолСтрокВОтчете > 20000 Тогда

				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, "Да");
				Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");

				ТекстВопроса = НСтр("ru='Слишком большой отчет для печати с показом бланка.
					|Продолжить в режиме печати в выбранном формате в ZIP архив?'");

				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПродолжитьПечатьФайлZIPЗавершениеАЛКО", ЭтотОбъект, Форма);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);

				Возврат;

			КонецЕсли;

		Иначе

			НужноВыбратьФормат = Ложь;

			Если НЕ Форма.СтруктураРеквизитовФормы.Свойство("ТипЭкспорта") Тогда
				НужноВыбратьФормат = Истина;
			ИначеЕсли Форма.СтруктураРеквизитовФормы.ТипЭкспорта = Неопределено Тогда
				НужноВыбратьФормат = Истина;
			КонецЕсли;

			Если НужноВыбратьФормат Тогда

				ПечатьФайлZIPВыборФорматаАЛКО(Форма);
				Возврат;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВыполнитьДлительнуюОперациюПродолжениеАЛКО(Форма, ВидДлОперации, ВидПечати);

КонецПроцедуры

Процедура Подключаемый_ПроверитьВыполнениеДлительнойОперацииАЛКО(Форма) Экспорт

	ОперацияЗавершена = ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(Форма);

	Если ОперацияЗавершена Тогда
		Возврат
	КонецЕсли;

	ОсталосьВремениВСекундах = 0;
	Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(Форма.ФормаДлительнойОперации) Тогда			
		ОсталосьВремениВСекундах = Форма.ФормаДлительнойОперации.ОсталосьВремениВСекундах	
	КонецЕсли;
	
	ОсталосьВремениВСекундах = ?(ЗначениеЗаполнено(ОсталосьВремениВСекундах), ОсталосьВремениВСекундах, 200);
	
	Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* Форма.ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;

	Если Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал > Форма.ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;

	Если Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал > ОсталосьВремениВСекундах + 0.5 Тогда	
		Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал = ОсталосьВремениВСекундах + 0.5	
	КонецЕсли; 

	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

// Закрывает форму длительной операции.
//
// Параметры:
//		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		
//
Процедура ВыключитьЗаставкуДлительнойОперации(ФормаОтчета) Экспорт

	ВыполняетсяДлительнаяОперация = Ложь;

	СтруктураНастроекФормыДлительнойОперации = Новый Структура;
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);

	УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);

КонецПроцедуры

// Проверяет выполнение длительной операции и в случае завершения вызывает из 
// модуля формы отчета ПослеВыполненияДлительнойОперацииНаКлиенте(), в противном случае
// читает информацию переданную из длительной операции и отображает ее в форме 
// длительной операции.
//
// Параметры:
//		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена.
//
Функция ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(ФормаОтчета) Экспорт

	Отладка = Истина;

	Если ФормаОтчета = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка

		Если ФормаОтчета.ОтменаОперации Тогда
			ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);
			Возврат Истина;
		КонецЕсли;

		ИдентификаторЗадания = ФормаОтчета.СтруктураРеквизитовФормы.ИдентификаторЗадания;
		СообщениеОбОшибке = Неопределено;

		Если РегламентированнаяОтчетностьАЛКОВызовСервера.ПроверитьВыполнениеЗадания(ИдентификаторЗадания, СообщениеОбОшибке) Тогда

			АдресРезультата = ФормаОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище;

			ЕстьОшибка = Ложь;
			Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда

				ЕстьОшибка = Истина;

			ИначеЕсли НЕ РегламентированнаяОтчетностьАЛКОВызовСервера.ПроверитьКорректностьЗавершения(АдресРезультата) Тогда

				ЕстьОшибка = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить длительную операцию "
					+ ФормаОтчета.ВидДлительнойОперации + ".'");

			КонецЕсли;

			ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);

			Если ЕстьОшибка Тогда
				ПослеВыполненияДлительнойОперацииПриОшибкеАЛКО(ФормаОтчета, СообщениеОбОшибке);
			Иначе
				ПослеВыполненияДлительнойОперацииАЛКО(ФормаОтчета);
			КонецЕсли;

			Возврат Истина;

		Иначе

		// Обновляем информацию в форме длительной операции.
			Информация = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьИнформациюИзФоновойЗадачи(ИдентификаторЗадания);

			Если ТипЗнч(Информация) = Тип("Структура") Тогда

				Если НЕ ФормаОтчета.НачалосьВыполнениеДлительнойОперации Тогда
					ФормаОтчета.НачалосьВыполнениеДлительнойОперации = Истина;
				КонецЕсли;

				// Передача структуры информации через ДопПараметры.
				СтруктураИнформации = Информация.ДополнительныеПараметры;

				СообщениеИзФоновойЗадачи = Неопределено;
				Если СтруктураИнформации.Свойство("СообщениеПользователю") и Отладка Тогда
					СообщениеИзФоновойЗадачи = Строка(СтруктураИнформации.СообщениеПользователю);
				КонецЕсли;

				СообщениеПользователю = ?(ЗначениеЗаполнено(ФормаОтчета.СообщениеПользователю), ФормаОтчета.СообщениеПользователю, "");

				ВидимостьПроцентов = Ложь;
				Если СтруктураИнформации.Свойство("ВидимостьПроцентаВыполненияОперации") Тогда
					ВидимостьПроцентов = СтруктураИнформации.ВидимостьПроцентаВыполненияОперации;
				КонецЕсли;

				ПроцентВыполнения = 0;
				Если СтруктураИнформации.Свойство("ПроцентВыполненияОперации") Тогда
					ПроцентВыполнения = СтруктураИнформации.ПроцентВыполненияОперации;
				КонецЕсли;

				СтруктураНастроекФормыДлительнойОперации = Новый Структура;

				СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ДопСообщениеПользователю", СообщениеИзФоновойЗадачи);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентов);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ПроцентВыполненияОперации", ПроцентВыполнения);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", Истина);

				УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);

			ИначеЕсли НЕ ФормаОтчета.НачалосьВыполнениеДлительнойОперации Тогда

			// По вспомогательному адресу ничего не лежит,										
				// значит работа фоновой задачи еще  не началась.
				СообщениеПользователю = "Выполняются другие фоновые задачи,
					|необходимо дождаться их завершения.";

				СтруктураНастроекФормыДлительнойОперации = Новый Структура;

				СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);
				СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", Истина);

				УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);

			КонецЕсли;

			Возврат Ложь;

		КонецЕсли;

	Исключение

		ВыключитьЗаставкуДлительнойОперации(ФормаОтчета);

		ВызватьИсключение;

	КонецПопытки;

КонецФункции

// Проверяет возможность действия с отчетом, при невозможности действия выдает предупреждение.
Функция ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, Действие,
		НеСтандартнаяОбработка) Экспорт

	Если НЕ (ТипЗнч(ОписаниеОтчета) = Тип("Структура")
			ИЛИ ТипЗнч(ОписаниеОтчета) = Тип("ФиксированнаяСтруктура")) Тогда

		// Ничего не делаем, обработка продолжается дальше.
		НеСтандартнаяОбработка = Ложь;

		// Длительная операция не нужна.
		Возврат Ложь;

	КонецЕсли;

	ИсточникОтчета = ОписаниеОтчета.ИсточникОтчета;
	ФормаОтчета = ОписаниеОтчета.ВыбраннаяФорма;
	ДатаНачалаАлкоОтчета = ОписаниеОтчета.ДатаНачалаПериодаОтчета;
	ДатаОкончанияАлкоОтчета = ОписаниеОтчета.ДатаКонцаПериодаОтчета;
	НаименованиеОтчета = ОписаниеОтчета.НаименованиеОтчета;

	СтруктураАлкоОтчетов = Новый Структура;

	// Новые алко до 2020.
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение11", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение12", Новый Структура);
	
	// Виноградные до 2019.
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение13", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение14", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение15", Новый Структура);

	// Фармацевтические 2018.
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение16", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение17", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение18", Новый Структура);
	
	// Алко 2021.
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение19", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение20", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение21", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение22", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение23", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение24", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение25", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение26", Новый Структура);
	
	// Виноградные 2019.
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение27", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение28", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение29", Новый Структура);
	
	// Фармацевтические 2021.
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение30", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоПриложение31", Новый Структура);
	
	// Вспомогательные.
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоЗаявлениеОКорректировке", Новый Структура);
	СтруктураАлкоОтчетов.Вставить("РегламентированныйОтчетАлкоУведомлениеВыездногоОбслуживания", Новый Структура);

	Если НЕ СтруктураАлкоОтчетов.Свойство(ИсточникОтчета) Тогда

		// Старый алкоотчет.
		// Ничего не делаем, обработка продолжается дальше.
		НеСтандартнаяОбработка = Ложь;

		// Длительная операция не нужна.
		Возврат Ложь;

	КонецЕсли;

	СписокДействий = Новый СписокЗначений;
	СписокДействий.Добавить("Печать", "Печать");
	СписокДействий.Добавить("ПроверкаВыгрузки", "Проверка выгрузки");
	СписокДействий.Добавить("ПроверкаВыгрузкиВИнтернете", "Проверка выгрузки в интернете");
	СписокДействий.Добавить("Выгрузка", "Выгрузка");
	СписокДействий.Добавить("ВыгрузкаПакета", "Выгрузка пакета");
	СписокДействий.Добавить("ОтправкаВКонтролирующийОрган", "Отправка в контролирующий орган");
	СписокДействий.Добавить("ЗагрузкаИзФайла", "Загрузка из файла");

	ПредставлениеДействия = "";

	Если НЕ ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'В функцию ОбработаноДействиеДляАлкоОтчета() НЕ передано Действие!'");
	Иначе

		НайденноеДействие = СписокДействий.НайтиПоЗначению(Действие);
		Если НайденноеДействие = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'В функцию ОбработаноДействиеДляАлкоОтчета() передано неверное Действие!'");
		КонецЕсли;

		ПредставлениеДействия = НайденноеДействие.Представление;

	КонецЕсли;

	///////////////////////////////////////////////
	// Формируем для форм отчетов признаки.
	//

	// Формы Заявления о корректировке после установленного срока.
	АлкоЗаявление = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоЗаявлениеОКорректировке;

	АлкоЗаявление.Вставить("ФормаОтчета2017Кв3", Новый Структура);
	АлкоЗаявление.ФормаОтчета2017Кв3.Вставить("ТабличныйОтчет", Ложь);
	АлкоЗаявление.ФормаОтчета2017Кв3.Вставить("Утверждена", "Приказом Минфина России от 14.07.2017 № 97н");
	АлкоЗаявление.ФормаОтчета2017Кв3.Вставить("НачалоДействия", "3 квартал 2017 года");
	УстановитьДляФормыДействие(СписокДействий, АлкоЗаявление.ФормаОтчета2017Кв3, Неопределено, Ложь);
	УстановитьДляФормыДействие(СписокДействий, АлкоЗаявление.ФормаОтчета2017Кв3, "Печать", Истина);

	// Формы Уведомления выездного обслуживания.
	АлкоУведомление = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоУведомлениеВыездногоОбслуживания;

	АлкоУведомление.Вставить("ФормаОтчета2018Кв2", Новый Структура);
	АлкоУведомление.ФормаОтчета2018Кв2.Вставить("ТабличныйОтчет", Ложь);
	АлкоУведомление.ФормаОтчета2018Кв2.Вставить("Утверждена", "Постановлением Правительства РФ от 19.04.2018 № 473");
	АлкоУведомление.ФормаОтчета2018Кв2.Вставить("НачалоДействия", "2 квартал 2018 года");
	УстановитьДляФормыДействие(СписокДействий, АлкоУведомление.ФормаОтчета2018Кв2, Неопределено, Ложь);
	УстановитьДляФормыДействие(СписокДействий, АлкоУведомление.ФормаОтчета2018Кв2, "Печать", Истина);

	
	// Формы Алко11.
	Алко11 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение11;

	Алко11.Вставить("ФормаОтчета2012Кв3", Новый Структура);
	Алко11.ФормаОтчета2012Кв3.Вставить("ТабличныйОтчет", Истина);
	Алко11.ФормаОтчета2012Кв3.Вставить("Утверждена", "Постановлением Правительства РФ от 09.08.2012 № 815");
	Алко11.ФормаОтчета2012Кв3.Вставить("НачалоДействия", "1 квартал 2012 года");
	УстановитьДляФормыДействие(СписокДействий, Алко11.ФормаОтчета2012Кв3, Неопределено, Истина);
	УстановитьДляФормыДействие(СписокДействий, Алко11.ФормаОтчета2012Кв3, "ЗагрузкаИзФайла", Ложь);

	Алко11.Вставить("ФормаОтчета2014Кв1", Новый Структура);
	Алко11.ФормаОтчета2014Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко11.ФормаОтчета2014Кв1.Вставить("Утверждена", "Постановлением Правительства РФ от 09.08.2012 № 815 (в ред. приказа ФСРАР от 08.04.2014 № 92)");
	Алко11.ФормаОтчета2014Кв1.Вставить("НачалоДействия", "1 квартал 2014 года");
	УстановитьДляФормыДействие(СписокДействий, Алко11.ФормаОтчета2014Кв1, Неопределено, Истина);

	// Формы Алко12.
	Алко12 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение12;

	Алко12.Вставить("ФормаОтчета2012Кв3", Новый Структура);
	Алко12.ФормаОтчета2012Кв3.Вставить("ТабличныйОтчет", Ложь);
	Алко12.ФормаОтчета2012Кв3.Вставить("Утверждена", "Постановлением Правительства РФ от 09.08.2012 № 815 (в ред. приказа ФСРАР от 08.04.2014 № 92)");
	Алко12.ФормаОтчета2012Кв3.Вставить("НачалоДействия", "1 квартал 2012 года");
	УстановитьДляФормыДействие(СписокДействий, Алко12.ФормаОтчета2012Кв3, Неопределено, Истина);

	// Формы Алко13.
	Алко13 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение13;

	Алко13.Вставить("ФормаОтчета2016Кв2", Новый Структура);
	Алко13.ФормаОтчета2016Кв2.Вставить("ТабличныйОтчет", Истина);
	Алко13.ФормаОтчета2016Кв2.Вставить("Утверждена", "Постановлением Правительства РФ от 13.05.2016 г. № 411");
	Алко13.ФормаОтчета2016Кв2.Вставить("НачалоДействия", "2015 год");
	УстановитьДляФормыДействие(СписокДействий, Алко13.ФормаОтчета2016Кв2, Неопределено, Ложь);
	УстановитьДляФормыДействие(СписокДействий, Алко13.ФормаОтчета2016Кв2, "Печать", Истина);

	Алко13.Вставить("ФормаОтчета2016Кв4", Новый Структура);
	Алко13.ФормаОтчета2016Кв4.Вставить("ТабличныйОтчет", Ложь);
	Алко13.ФормаОтчета2016Кв4.Вставить("Утверждена", "Постановлением Правительства РФ от 13.05.2016 г. № 411");
	Алко13.ФормаОтчета2016Кв4.Вставить("НачалоДействия", "2016 год");
	УстановитьДляФормыДействие(СписокДействий, Алко13.ФормаОтчета2016Кв4, Неопределено, Истина);
	
	// Формы Алко14.
	Алко14 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение14;

	Алко14.Вставить("ФормаОтчета2016Кв2", Новый Структура);
	Алко14.ФормаОтчета2016Кв2.Вставить("ТабличныйОтчет", Истина);
	Алко14.ФормаОтчета2016Кв2.Вставить("Утверждена", "Постановлением Правительства РФ от 13.05.2016 г. № 411");
	Алко14.ФормаОтчета2016Кв2.Вставить("НачалоДействия", "2015 год");
	УстановитьДляФормыДействие(СписокДействий, Алко14.ФормаОтчета2016Кв2, Неопределено, Ложь);
	УстановитьДляФормыДействие(СписокДействий, Алко14.ФормаОтчета2016Кв2, "Печать", Истина);

	Алко14.Вставить("ФормаОтчета2016Кв4", Новый Структура);
	Алко14.ФормаОтчета2016Кв4.Вставить("ТабличныйОтчет", Ложь);
	Алко14.ФормаОтчета2016Кв4.Вставить("Утверждена", "Постановлением Правительства РФ от 13.05.2016 г. № 411");
	Алко14.ФормаОтчета2016Кв4.Вставить("НачалоДействия", "2016 год");
	УстановитьДляФормыДействие(СписокДействий, Алко14.ФормаОтчета2016Кв4, Неопределено, Истина);
	
	// Формы Алко15.
	Алко15 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение15;

	Алко15.Вставить("ФормаОтчета2016Кв2", Новый Структура);
	Алко15.ФормаОтчета2016Кв2.Вставить("ТабличныйОтчет", Истина);
	Алко15.ФормаОтчета2016Кв2.Вставить("Утверждена", "Постановлением Правительства РФ от 13.05.2016 г. № 411");
	Алко15.ФормаОтчета2016Кв2.Вставить("НачалоДействия", "2015 год");
	УстановитьДляФормыДействие(СписокДействий, Алко15.ФормаОтчета2016Кв2, Неопределено, Ложь);
	УстановитьДляФормыДействие(СписокДействий, Алко15.ФормаОтчета2016Кв2, "Печать", Истина);

	Алко15.Вставить("ФормаОтчета2016Кв4", Новый Структура);
	Алко15.ФормаОтчета2016Кв4.Вставить("ТабличныйОтчет", Ложь);
	Алко15.ФормаОтчета2016Кв4.Вставить("Утверждена", "Постановлением Правительства РФ от 13.05.2016 г. № 411");
	Алко15.ФормаОтчета2016Кв4.Вставить("НачалоДействия", "2016 год");
	УстановитьДляФормыДействие(СписокДействий, Алко15.ФормаОтчета2016Кв4, Неопределено, Истина);
	
	// Формы Алко16.
	Алко16 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение16;

	Алко16.Вставить("ФормаОтчета2018Кв1", Новый Структура);
	Алко16.ФормаОтчета2018Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко16.ФормаОтчета2018Кв1.Вставить("Утверждена", "Постановлением Правительства РФ от 29.12.2017 № 1694");
	Алко16.ФормаОтчета2018Кв1.Вставить("НачалоДействия", "1 квартал 2018 года");
	УстановитьДляФормыДействие(СписокДействий, Алко16.ФормаОтчета2018Кв1, Неопределено, Истина);
	
	// Формы Алко17.
	Алко17 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение17;

	Алко17.Вставить("ФормаОтчета2018Кв1", Новый Структура);
	Алко17.ФормаОтчета2018Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко17.ФормаОтчета2018Кв1.Вставить("Утверждена", "Постановлением Правительства РФ от 29.12.2017 № 1694");
	Алко17.ФормаОтчета2018Кв1.Вставить("НачалоДействия", "1 квартал 2018 года");
	УстановитьДляФормыДействие(СписокДействий, Алко17.ФормаОтчета2018Кв1, Неопределено, Истина);
	
	// Формы Алко18.
	Алко18 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение18;

	Алко18.Вставить("ФормаОтчета2018Кв1", Новый Структура);
	Алко18.ФормаОтчета2018Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко18.ФормаОтчета2018Кв1.Вставить("Утверждена", "Постановлением Правительства РФ от 29.12.2017 № 1694");
	Алко18.ФормаОтчета2018Кв1.Вставить("НачалоДействия", "1 квартал 2018 года");
	УстановитьДляФормыДействие(СписокДействий, Алко18.ФормаОтчета2018Кв1, Неопределено, Истина);
	
	// Формы Алко19.
	Алко19 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение19;

	Алко19.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко19.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко19.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко19.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко19.ФормаОтчета2021Кв1, Неопределено, Истина);
	
	// Формы Алко20.
	Алко20 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение20;

	Алко20.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко20.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко20.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко20.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко20.ФормаОтчета2021Кв1, Неопределено, Истина);
	
	// Формы Алко21.
	Алко21 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение21;

	Алко21.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко21.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко21.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко21.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко21.ФормаОтчета2021Кв1, Неопределено, Истина);
	
	// Формы Алко22.
	Алко22 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение22;

	Алко22.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко22.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко22.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко22.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко22.ФормаОтчета2021Кв1, Неопределено, Истина);
	
	// Формы Алко23.
	Алко23 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение23;

	Алко23.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко23.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко23.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко23.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко23.ФормаОтчета2021Кв1, Неопределено, Истина);
	
	// Формы Алко24.
	Алко24 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение24;

	Алко24.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко24.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко24.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко24.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко24.ФормаОтчета2021Кв1, Неопределено, Истина);
	
	// Формы Алко25.
	Алко25 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение25;

	Алко25.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко25.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко25.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко25.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко25.ФормаОтчета2021Кв1, Неопределено, Истина);
		
	// Формы Алко26.
	Алко26 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение26;

	Алко26.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко26.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко26.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко26.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко26.ФормаОтчета2021Кв1, Неопределено, Истина);
		
	// Формы Алко27.
	Алко27 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение27;

	Алко27.Вставить("ФормаОтчета2019Кв1", Новый Структура);
	Алко27.ФормаОтчета2019Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко27.ФормаОтчета2019Кв1.Вставить("Утверждена", "Постановлением Правительства РФ от 29.12.2018 № 1719");
	Алко27.ФормаОтчета2019Кв1.Вставить("НачалоДействия", "2019 год");
	УстановитьДляФормыДействие(СписокДействий, Алко27.ФормаОтчета2019Кв1, Неопределено, Истина);
	
	// Формы Алко28.
	Алко28 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение28;

	Алко28.Вставить("ФормаОтчета2019Кв1", Новый Структура);
	Алко28.ФормаОтчета2019Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко28.ФормаОтчета2019Кв1.Вставить("Утверждена", "Постановлением Правительства РФ от 29.12.2018 № 1719");
	Алко28.ФормаОтчета2019Кв1.Вставить("НачалоДействия", "2019 год");
	УстановитьДляФормыДействие(СписокДействий, Алко28.ФормаОтчета2019Кв1, Неопределено, Истина);
	
	// Формы Алко29.
	Алко29 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение29;

	Алко29.Вставить("ФормаОтчета2019Кв1", Новый Структура);
	Алко29.ФормаОтчета2019Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко29.ФормаОтчета2019Кв1.Вставить("Утверждена", "Постановлением Правительства РФ от 29.12.2018 № 1719");
	Алко29.ФормаОтчета2019Кв1.Вставить("НачалоДействия", "2019 год");
	УстановитьДляФормыДействие(СписокДействий, Алко29.ФормаОтчета2019Кв1, Неопределено, Истина);
	
	// Формы Алко30. Фармацевтические.
	Алко30 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение30;

	Алко30.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко30.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко30.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко30.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко30.ФормаОтчета2021Кв1, Неопределено, Истина);
	
	// Формы Алко31. Фармацевтические.
	Алко31 = СтруктураАлкоОтчетов.РегламентированныйОтчетАлкоПриложение31;

	Алко31.Вставить("ФормаОтчета2021Кв1", Новый Структура);
	Алко31.ФормаОтчета2021Кв1.Вставить("ТабличныйОтчет", Ложь);
	Алко31.ФормаОтчета2021Кв1.Вставить("Утверждена", "Приказом ФСРАР РФ от 17.12.2020 г. № 396");
	Алко31.ФормаОтчета2021Кв1.Вставить("НачалоДействия", "1 квартал 2021 года");
	УстановитьДляФормыДействие(СписокДействий, Алко31.ФормаОтчета2021Кв1, Неопределено, Истина);
	УстановитьДляФормыДействие(СписокДействий, Алко31.ФормаОтчета2021Кв1, "Печать", Ложь);
	
	
	//
	// Конец формирования настроек отчетов.
	///////////////////////////////////////////////
	СтруктураОтчета = СтруктураАлкоОтчетов[ИсточникОтчета];
	Если НЕ СтруктураОтчета.Свойство(ФормаОтчета) Тогда
		ВызватьИсключение НСтр("ru = 'В функции ОбработаноДействиеДляАлкоОтчета() нет настройки для переданной формы!
			|Форма " + ФормаОтчета + " отчета " + ИсточникОтчета + "'");
	КонецЕсли;

	СтруктураРазрешенийФормы = СтруктураОтчета[ФормаОтчета];

	Если СтруктураРазрешенийФормы.ТабличныйОтчет
			И СтруктураРазрешенийФормы[Действие] Тогда

		// Форма старая, но действие разрешено - 
		// ничего не делаем, обработка продолжается дальше.		
		НеСтандартнаяОбработка = Ложь;

		// Длительная операция не нужна.
		Возврат Ложь;

	ИначеЕсли НЕ СтруктураРазрешенийФормы[Действие] Тогда

		// Действие запрещено. Выдаем предупреждение.
		ПериодНачалаДействия = Неопределено;

		//Определяем дату формы.
		ДатаФормы = СтрЗаменить(ФормаОтчета, "ФормаОтчета", ""); // Например 2012Кв3.
		ГодФормы = Число(Лев(ДатаФормы, 4)); // 2012 год.
		КварталФормы = Число(Прав(ДатаФормы, 1)); // 3 квартал.
		ДатаФормы = КонецМесяца(Дата(ГодФормы, КварталФормы * 3, 1));

		// Сначала смотрим, есть ли более поздняя форма, для которой действие разрешено.
		Для каждого ЭлементСтруктуры Из СтруктураОтчета Цикл

			ТекФормаОтчета = ЭлементСтруктуры.Ключ;
			ТекСтруктураРазрешенийФормы = ЭлементСтруктуры.Значение;

			Если ТекСтруктураРазрешенийФормы[Действие] Тогда

			// Действие разрешено.

				// Смотрим дату формы.
				ТекДатаФормы = СтрЗаменить(ТекФормаОтчета, "ФормаОтчета", ""); // Например 2012Кв3.
				ТекГодФормы = Число(Лев(ТекДатаФормы, 4)); // 2012 год.
				ТекКварталФормы = Число(Прав(ТекДатаФормы, 1)); // 3 квартал.
				ТекДатаФормы = КонецМесяца(Дата(ТекГодФормы, ТекКварталФормы * 3, 1));

				Если ТекДатаФормы > ДатаФормы Тогда

				// Нашли более позднюю форму, для которой действие разрешено.
					ПериодНачалаДействия = ТекСтруктураРазрешенийФормы.НачалоДействия;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		Если ПериодНачалаДействия = Неопределено Тогда

			// Нет формы, в которой действие возможно.
			Если ИсточникОтчета = "РегламентированныйОтчетАлкоЗаявлениеОКорректировке"
					или ИсточникОтчета = "РегламентированныйОтчетАлкоУведомлениеВыездногоОбслуживания" Тогда
				// Для отчетов, для которых не будет возможно действие или когда будет возможно,
				// не известно.	
				ТекстПредупреждения = НСтр("ru = 'Для отчета """ + НаименованиеОтчета + """
					|" + Нрег(ПредставлениеДействия) + " не предусмотрена.'");

			Иначе
				// Для отчетов, для которых действие будет возможно в будущем.
				ТекстПредупреждения = НСтр("ru = '" + ПредставлениеДействия
					+ " редакции формы, утвержденной 
					|" + СтруктураРазрешенийФормы.Утверждена + ", 
					|не предусмотрена.
					|" + ПредставлениеДействия
					+ " будет реализована в будущих версиях программы.'");

			КонецЕсли;

		Иначе

			// Есть более поздняя форма этого отчета, для которой Действие разрешено.
			ТекстПредупреждения = НСтр("ru = '" + ПредставлениеДействия
				+ " редакции формы, утвержденной 
				|" + СтруктураРазрешенийФормы.Утверждена + ",
				|реализована начиная с отчетного периода за " + ПериодНачалаДействия + ".
				|Создайте новый отчет за период " + ПериодНачалаДействия + " или позже.'");

		КонецЕсли;

		ПоказатьПредупреждение(, ТекстПредупреждения);

		// Ничего не делаем, но обработка в вызывающей процедуре будет прекращена.
		НеСтандартнаяОбработка = Истина;

		// Длительная операция не нужна.
		Возврат Ложь;

	Иначе

		// Запустили действие и завершаем обработку в вызывающей процедуре.
		НеСтандартнаяОбработка = Истина;

		// Длительная операция нужна.
		Возврат Истина;

	КонецЕсли;

КонецФункции

#КонецОбласти

#Область АктивизироватьПолеЯчейкуИзФормыОшибок

Процедура АктивизироватьЯчейкуАЛКО(Форма, Ячейка) Экспорт

// Если идет длительная операция - ничего не делаем.
	Если НЕ Форма.ФормаДлительнойОперации = Неопределено Тогда

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'При выполнении длительной операции невозможен переход к показателю, 
			|содержащему некорректное значение.
			|Для перехода необходимо дождаться завершения длительной операции.'");
		Сообщение.Сообщить();
		Возврат;

	КонецЕсли;

	Если НЕ Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено Тогда

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'При открытых вспомогательных формах отчета (например, форма выбора значений, форма редактирования строк и др.)
			|невозможен переход к показателю, содержащему некорректное значение.
			|Для перехода необходимо закрыть все вспомогательные формы отчета.'");
		Сообщение.Сообщить();
		Возврат;

	КонецЕсли;

	Форма.ТекущееСостояние = "АктивизацияЯчейки";
	Форма.СтруктураРеквизитовФормы.Вставить("Ячейка", Ячейка);
	Форма.ЯчейкаАктивизации = Ячейка;

	Если Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.Удалить("Ячейка");

	АктивизироватьЯчейкуПослеЗакрытияОткрытыхФормАЛКО(Форма);

КонецПроцедуры

Процедура АктивизироватьПолеАктивнойСтраницыАЛКО(Форма) Экспорт

	Если Форма.НомерСтрокиАктивизации = Неопределено Тогда

		Если НЕ Форма.ИмяЯчейкиАктивизации = Неопределено Тогда

		// Без указания строки.
			Форма.ТекущийЭлемент = Форма.Элементы[Форма.ИмяЯчейкиАктивизации];
			ТекущийЭлемент = Форма.Элементы[Форма.ИмяЯчейкиАктивизации];

			Если Форма.ВходВРедактированиеПриАктивизации Тогда

				Если ТекущийЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
					Если ТекущийЭлемент.Гиперссылка Тогда

						ИмяПроцедурыНажатие = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "Нажатие");

						Если ЗначениеЗаполнено(ИмяПроцедурыНажатие) Тогда
							Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНажатие, Форма.ЭтотОбъект);
							ВыполнитьОбработкуОповещения(Оповещение);
						КонецЕсли;

					КонецЕсли;

				ИначеЕсли ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
					Если ТекущийЭлемент.КнопкаВыбора <> Неопределено Тогда
						Если ТекущийЭлемент.КнопкаВыбора Тогда

							ИмяПроцедурыНачалоВыбора = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "НачалоВыбора");

							Если ЗначениеЗаполнено(ИмяПроцедурыНачалоВыбора) Тогда
								Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНачалоВыбора, Форма.ЭтотОбъект);
								ВыполнитьОбработкуОповещения(Оповещение);
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Форма.ТекущееСостояние = "";

	Иначе

		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(Форма.ЯчейкаАктивизации.Раздел, Форма.СтруктураРеквизитовФормы);

		// Для многострочных групп, в том случае, если их несколько в разделе, 
		// надо вычислять ИдГруппы по имени ИмяЯчейкиАктивизации.
		ИмяТаблицы = "";

		СписокИдГрупп = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьСписокИдГруппПоРазделуАЛКО(Форма.ЯчейкаАктивизации.Раздел, Форма.СтруктураРеквизитовФормы);
		Если СписокИдГрупп.Количество() > 1 Тогда

			Для каждого ЭлементСписка Из СписокИдГрупп Цикл

				Если СтрНайти(Форма.ИмяЯчейкиАктивизации, ЭлементСписка.Значение) > 0 Тогда

					ИдГруппы = ЭлементСписка.Значение;
					ИмяТаблицыФормы = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаБезСимволов(
															ЭлементСписка.Представление);

					// Нужно активизировать нужную страницу.
					Форма.Элементы["СтраницыТаблиц"
						+ Форма.ЯчейкаАктивизации.Раздел].ТекущаяСтраница = Форма.Элементы["СтраницаТаблицы"
						+ ИмяТаблицыФормы];
					Прервать;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Форма.ТекущееСостояние = "АктивизацияЯчейкиТаблицы";

		ПереходНаСтрокуТаблицыФормыАЛКО(Форма, ИдГруппы, Форма.НомерСтрокиАктивизации, Форма.ИмяКолонкиАктивизации);

	КонецЕсли;

КонецПроцедуры

Процедура АктивизироватьЯчейкуПослеЗакрытияОткрытыхФормАЛКО(Форма) Экспорт

	Ячейка = Форма.ЯчейкаАктивизации;

	// Структура Ячейка:
	// Раздел, Страница, Строка, Графа, СтрокаПП, ИмяЯчейки, Описание.
	Если Ячейка.Свойство("ИмяЯчейки") Тогда
		Форма.ИмяЯчейкиАктивизации = Ячейка.ИмяЯчейки;
	Иначе
		Форма.ИмяЯчейкиАктивизации = "";
	КонецЕсли;

	// Активизируем нужную строку элементы.РазделыОтчета.
	ДеревоРазделыОтчета = Форма.РазделыОтчета;
	КоллекцияЭлементовДереваРазделыОтчета = ДеревоРазделыОтчета.ПолучитьЭлементы();
	КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел;
	ЭлементДереваРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(КоллекцияЭлементовДереваРазделыОтчета, "КолонкаРазделыОтчетаСокрНаим", КолонкаРазделыОтчетаСокрНаим);
	Если Ячейка.Раздел = "Титульный" Тогда

	// Чтобы не отработал ПриАктивизацииСтроки() Таблицы разделов, заранее присваем нужное значение
		// в СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета.										
		Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = ЭлементДереваРаздел.ПолучитьИдентификатор();
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета;

		Форма.ТекущийРаздел = "Титульный";

		Форма.Элементы.ГруппаТаблицы.Видимость = Ложь;

		Если Форма.УказываютсяНомераЛицензии Тогда
			Форма.Элементы.СтраницаОтчетаЛицензии.Видимость = Ложь;
		КонецЕсли;

		Форма.Элементы.СтраницаОтчетаМногострочная.Видимость = Ложь;

		Форма.Элементы.СтраницаОтчетаТитульный.Видимость = Истина;

		Форма.Элементы.Обновить.Доступность = Истина;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		Форма.Элементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;

		// Для ошибок генерируемых при проверке формата готового XML выгрузки,
		// указывается раздел Титульный, но более никакой информации нет.
		// Поэтому нужно проверять заполнение.
		Если ЗначениеЗаполнено(Форма.ИмяЯчейкиАктивизации) Тогда

			Форма.ТекущийЭлемент = Форма.Элементы[Форма.ИмяЯчейкиАктивизации];
			ТекущийЭлемент = Форма.ТекущийЭлемент;

			Если Форма.ВходВРедактированиеПриАктивизации Тогда

				Если ТекущийЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда

					Если ТекущийЭлемент.Гиперссылка Тогда

						ИмяПроцедурыНажатие = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "Нажатие");

						Если ЗначениеЗаполнено(ИмяПроцедурыНажатие) Тогда

							Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНажатие, Форма.ЭтотОбъект);
							ВыполнитьОбработкуОповещения(Оповещение);

						КонецЕсли;

					КонецЕсли;

				ИначеЕсли ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда

					Если ТекущийЭлемент.КнопкаВыбора <> Неопределено Тогда

						Если ТекущийЭлемент.КнопкаВыбора Тогда

							ИмяПроцедурыНажатие = Форма.ПолучитьДействиеПоляФормы(Форма.ИмяЯчейкиАктивизации, "НачалоВыбора");

							Если ЗначениеЗаполнено(ИмяПроцедурыНажатие) Тогда

								Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыНажатие, Форма.ЭтотОбъект);
								ВыполнитьОбработкуОповещения(Оповещение);

							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Форма.ТекущееСостояние = "";

	Иначе
	// Многостраничные разделы.		
		Форма.ЯчейкаАктивизации = Ячейка;

		КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница);

		ЭлементСтраницыРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ЭлементДереваРаздел.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КолонкаНомерСтраницыРазделаОтчета);

		РазделыОтчетаНоваяТекущаяСтрока = ЭлементСтраницыРаздела.ПолучитьИдентификатор();

		// Получим данные для активизации.
		Форма.ИмяКолонкиАктивизации = Неопределено;
		Форма.НомерСтрокиАктивизации = Неопределено;

		Если ЗначениеЗаполнено(Форма.ИмяЯчейкиАктивизации) Тогда

		// В имени ячейки указана информация вида П0001000312_4,
			// где П0001000312 - имя колонки, 4- номер строки.
			ПозицияПодчеркивания = СтрНайти(Форма.ИмяЯчейкиАктивизации, "_");

			Если ПозицияПодчеркивания > 0 Тогда

			// Есть информация по строке.
				Форма.ИмяКолонкиАктивизации = Лев(Форма.ИмяЯчейкиАктивизации, ПозицияПодчеркивания
					- 1);
				Форма.НомерСтрокиАктивизации = Число(Сред(Форма.ИмяЯчейкиАктивизации, ПозицияПодчеркивания
					+ 1));

			КонецЕсли;

		КонецЕсли;

		Если Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = РазделыОтчетаНоваяТекущаяСтрока Тогда

		// Отчет уже открыт на нужной странице,
			// нужно заставить открыть эту страницу еще раз, чтобы не зависеть от отбора по поиску,
			// поскольку если он активизирован, нужной строки может не быть в текущем выводе строк.
			// Поскольку при открытии таблица формы создается заново - тем самым гарантируем наличие всех строк.

			// Меняем текущую строку таблицы разделов отчета на Титульный лист.			
			ЭлементДереваРазделов = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(КоллекцияЭлементовДереваРазделыОтчета, "КолонкаРазделыОтчетаСокрНаим", "Титульный");

			// Чтобы не отработал ПриАктивизацииСтроки() Таблицы разделов при активизации строчки Титульного листа, 
			// заранее присваем нужное значение в СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета.									
			Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = ЭлементДереваРазделов.ПолучитьИдентификатор();
			Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета;

		КонецЕсли;

		Форма.ТекущееСостояние = "Активизация";
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = РазделыОтчетаНоваяТекущаяСтрока;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВводАдреснойИнформации

Процедура ВызватьФормуВводаАдресаКонтрагента(ПолеСтруктурыАдреса, ЗаголовокФормыВвода,
		ОповещениеПослеЗавершенияВвода,
		ВидКонтактнойИнформации = Неопределено) Экспорт

	// Читаем сохраненную во внутреннем представлении структуру.
	СтруктураАдреса = РегламентированнаяОтчетностьАЛКОВызовСервера.СтруктураАдресаИзСтрокиСтруктурыХранения(
																					ПолеСтруктурыАдреса);
																					
	ВызватьФормуВводаАдресаАЛКО(СтруктураАдреса, ЗаголовокФормыВвода,
							ОповещениеПослеЗавершенияВвода,	ВидКонтактнойИнформации);

КонецПроцедуры
 

Процедура ВызватьФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса, ЗаголовокФормыВвода,
		ОповещениеПослеЗавершенияВвода,
		ВидКонтактнойИнформации = Неопределено) Экспорт

	Если НЕ ТипЗнч(СохраненныеДанныеАдреса) = Тип("Структура") Тогда

		ВызватьИсключение НСтр("ru = 'В процедуру РегламентированнаяОтчетностьАЛКОКлиент.ВызватьФормуВводаАдресаАЛКО 
			|передан неверный параметр СохраненныеДанныеАдреса, параметр должен быть структурой.'");

	КонецЕсли;

	Если ВидКонтактнойИнформации = Неопределено Тогда

		СтруктураДоступныхВидовКонтактнойИнформацииВводаАдреса = РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьВидыКонтактнойИнформацииДляВводаАдреса();

		ВидКонтактнойИнформации = СтруктураДоступныхВидовКонтактнойИнформацииВводаАдреса.ЛюбойАдрес;

		Если ВидКонтактнойИнформации = Неопределено Тогда
			ВидКонтактнойИнформации = СтруктураДоступныхВидовКонтактнойИнформацииВводаАдреса.ТолькоНациональныйАдрес;
		КонецЕсли;

		Если ВидКонтактнойИнформации = Неопределено Тогда
			ВызватьИсключение "В РегламентированнаяОтчетностьАЛКОКлиент.ВызватьФормуВводаАдресаАЛКО() 
				|не передан ВидКонтактнойИнформации.
				|Определить ВидКонтактнойИнформации самостоятельно не удалось.";
		КонецЕсли;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЗаголовокФормыВвода) Тогда
		ЗаголовокФормыВвода = "Ввод адреса";
	КонецЕсли;

	ЗначенияПолей = ПолучитьЗначенияПолейДляПередачиВФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса);

	ПредставлениеАдреса = "";
	Представление = "";
	Если СохраненныеДанныеАдреса.Свойство("ПредставлениеАдреса", Представление)
			И ЗначениеЗаполнено(Представление) Тогда

		ПредставлениеАдреса = Представление;

	ИначеЕсли СохраненныеДанныеАдреса.Свойство("Представление", Представление)
			И ЗначениеЗаполнено(Представление) Тогда

		ПредставлениеАдреса = Представление;

	ИначеЕсли СохраненныеДанныеАдреса.Свойство("Адрес", Представление)
			И ЗначениеЗаполнено(Представление) Тогда

		ПредставлениеАдреса = Представление;

	КонецЕсли;
		
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
						ВидКонтактнойИнформации, ЗначенияПолей, ПредставлениеАдреса);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокФормыВвода);
	
	ФормаКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
														ПараметрыФормы, , ОповещениеПослеЗавершенияВвода);
	
	ФормаКонтактнойИнформации.Активизировать();
	
КонецПроцедуры

#КонецОбласти

#Область ВыборЗначений

Процедура ВызватьФормуВыбораЗначенийАЛКО(Форма, ФлажокОтклАвтоВыборКодов,
		СтруктураПараметров, ОписаниеОповещения) Экспорт

	Перем Параметры;

	КлючУникальности = УникальностьФормы(Форма);

	Если НЕ ФлажокОтклАвтоВыборКодов Тогда

		Если НЕ СтруктураПараметров.Свойство("ПараметрыПриВключенномВыбореИзСписка", Параметры) Тогда
			Возврат;
		КонецЕсли;

		СвойстваПоказателей = Параметры.СвойстваПоказателей;
		ИмяКолонкиКод = Параметры.ИмяКолонкиКод;
		КолонкаПоиска = Параметры.КолонкаПоиска;
		ИсходноеЗначение = Параметры.ИсходноеЗначение;

		ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяКолонкиКод));
		Если ПараметрВводаПоля.Количество() = 0 Тогда

			ПараметрВводаПоля = Неопределено;

			Для Каждого Стр из СвойстваПоказателей Цикл
				Если Лев(ИмяКолонкиКод, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
					ПараметрВводаПоля = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;

		Иначе
			ПараметрВводаПоля = ПараметрВводаПоля[0];
		КонецЕсли;

		Если ПараметрВводаПоля <> Неопределено
				И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			ТекстВыбора = ПараметрВводаПоля.ТекстПриВыборе;
			ТаблицаВыбора = ПараметрВводаПоля.ТаблицаЗначений;
		Иначе
			Возврат;
		КонецЕсли;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ТекстВыбора);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));

		Форма.Активизировать();
		Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = ОткрытьФорму(
			"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", 
			ПараметрыФормы, Форма, КлючУникальности, , , ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Форма.ОткрытаяФормаПотомокСБлокировкойВладельца.Активизировать();

	Иначе

		Если НЕ СтруктураПараметров.Свойство("ПараметрыПриОтключенномВыбореИзСписка", Параметры) Тогда
			Возврат;
		КонецЕсли;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", Параметры.ЗаголовокФормы);
		ПараметрыФормы.Вставить("Код", Параметры.ИсходноеЗначениеКода);
		ПараметрыФормы.Вставить("Название", Параметры.ИсходноеЗначениеПоКоду);
		ПараметрыФормы.Вставить("ИмяПоляЗначение", Параметры.НадписьПоляЗначения);
		ПараметрыФормы.Вставить("ИмяПоляКод", Параметры.НадписьПоляКод);
		ПараметрыФормы.Вставить("МногострочныйРежимЗначения", Параметры.МногострочныйРежимЗначения);
		ПараметрыФормы.Вставить("ДлинаПоляКода", Параметры.ДлинаПоляКода);
		ПараметрыФормы.Вставить("ДлинаПоляЗначения", Параметры.ДлинаПоляЗначения);
		ПараметрыФормы.Вставить("УникальностьФормы", Параметры.УникальностьФормы);

		Форма.Активизировать();
		Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = ОткрытьФорму(
			"ОбщаяФорма.АЛКОФормаВводаПарыСвязанныхЗначений", 
			ПараметрыФормы, Форма, КлючУникальности, , , ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Форма.ОткрытаяФормаПотомокСБлокировкойВладельца.Активизировать();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеОбщие

Функция СтраницаОтчетаОтображена(Форма)

	Если Форма.Элементы.Найти("РазделыОтчета") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
	// Текущий раздел "Титульный";
		Возврат Форма.ВводДоступен();
	Иначе

		ИмяТекРаздела = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(ИмяТекРаздела, Форма.СтруктураРеквизитовФормы);

		ЭлементТаблицыФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела" + ИдГруппы);
		Возврат НЕ ЭлементТаблицыФормы = Неопределено;

	КонецЕсли;

КонецФункции

Функция МожноПодключитьОбработчикОжидания(Форма)

	Результат = Ложь;

	Если Форма.Открыта() Тогда
		Результат = Истина;
	Иначе
		БезОткрытияФормы = Неопределено;
		Форма.СтруктураРеквизитовФормы.Свойство("мБезОткрытияФормы", БезОткрытияФормы);
		// Форма.Открыта() для открытой формы не всегда Истина, 
		// если еще работают клиентские методы при открытии-инициализации.
		Если ТипЗнч(БезОткрытияФормы) = Тип("Булево") Тогда

			Если НЕ БезОткрытияФормы Тогда
				Результат = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ВыполнитьПослеОтображенияСтраницыОтчета(Форма, ИмяПроцедуры,
		ОбъектОповещения = Неопределено, ИмяПроцедурыОповещения = Неопределено)

	БезЗадержки = НЕ МожноПодключитьОбработчикОжидания(Форма);

	ПроцедураОповещенияОпределена = ЗначениеЗаполнено(ИмяПроцедурыОповещения)
		И (ТипЗнч(ИмяПроцедурыОповещения) = Тип("Строка"));

	Если БезЗадержки Тогда

	// При закрытой форме ПодключитьОбработчикОжидания() не отрабатывает корректно,
		// выполним без задержки.
		Если ПроцедураОповещенияОпределена Тогда

			Если ОбъектОповещения = Неопределено Тогда
			// По умолчанию считаем объектом форму.
				ОбъектОповещения = Форма.ЭтотОбъект;
			КонецЕсли;

			// В качестве дополнительных параметров передаем форму.
			Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ОбъектОповещения, Форма);
			ВыполнитьОбработкуОповещения(Оповещение);

		КонецЕсли;

	Иначе

		Если СтраницаОтчетаОтображена(Форма) Тогда
		// Если определена процедура оповещения, нет смысла выполнять с задержкой.
			Если ПроцедураОповещенияОпределена Тогда

				Если ОбъектОповещения = Неопределено Тогда
				// По умолчанию считаем объектом форму.
					ОбъектОповещения = Форма.ЭтотОбъект;
				КонецЕсли;

				// В качестве дополнительных параметров передаем форму.
				Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ОбъектОповещения, Форма);
				ВыполнитьОбработкуОповещения(Оповещение);

			Иначе
				ВыполнитьСМинимальнойЗадержкой(Форма, ИмяПроцедуры);
			КонецЕсли;

		Иначе

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ИмяПроцедуры", ИмяПроцедуры);
			СтруктураПараметров.Вставить("ОбъектОповещения", ОбъектОповещения);
			СтруктураПараметров.Вставить("ИмяПроцедурыОповещения", ИмяПроцедурыОповещения);

			Если Форма.ОбщийПараметрПроцедурНаКлиенте = Неопределено Тогда
				Форма.ОбщийПараметрПроцедурНаКлиенте = Новый Структура();
			КонецЕсли;

			Если НЕ Форма.ОбщийПараметрПроцедурНаКлиенте.Свойство("СписокПараметровВыполнитьПослеОтображения") Тогда
				Форма.ОбщийПараметрПроцедурНаКлиенте.Вставить("СписокПараметровВыполнитьПослеОтображения", Новый СписокЗначений);
			КонецЕсли;
			Форма.ОбщийПараметрПроцедурНаКлиенте.СписокПараметровВыполнитьПослеОтображения.Добавить(СтруктураПараметров);

			Форма.ПодключитьОбработчикОжидания("ПроверитьОтображениеСтраницы", 0.1, Истина);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьОтображениеСтраницыАЛКО(Форма) Экспорт

	Если СтраницаОтчетаОтображена(Форма) Тогда

		Если Форма.ОбщийПараметрПроцедурНаКлиенте.СписокПараметровВыполнитьПослеОтображения.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		СтруктураПараметров = Форма.ОбщийПараметрПроцедурНаКлиенте.СписокПараметровВыполнитьПослеОтображения[0].Значение;
		ИмяПроцедуры = СтруктураПараметров.ИмяПроцедуры;
		ОбъектОповещения = СтруктураПараметров.ОбъектОповещения;

		ИмяПроцедурыОповещения = СтруктураПараметров.ИмяПроцедурыОповещения;

		// Очищаем.
		Форма.ОбщийПараметрПроцедурНаКлиенте.СписокПараметровВыполнитьПослеОтображения.Удалить(0);

		ПроцедураОповещенияОпределена = ЗначениеЗаполнено(ИмяПроцедурыОповещения)
			И (ТипЗнч(ИмяПроцедурыОповещения) = Тип("Строка"));

			// Если определена процедура оповещения, нет смысла выполнять с задержкой.
		Если ПроцедураОповещенияОпределена Тогда

			Если ОбъектОповещения = Неопределено Тогда
			// По умолчанию считаем объектом форму.
				ОбъектОповещения = Форма.ЭтотОбъект;
			КонецЕсли;

			// В качестве дополнительных параметров передаем форму.
			Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ОбъектОповещения, Форма);
			ВыполнитьОбработкуОповещения(Оповещение);

		Иначе
			ВыполнитьСМинимальнойЗадержкой(Форма, ИмяПроцедуры);
		КонецЕсли;

		Если Форма.ОбщийПараметрПроцедурНаКлиенте.СписокПараметровВыполнитьПослеОтображения.Количество() > 0 Тогда
			Форма.ПодключитьОбработчикОжидания("ПроверитьОтображениеСтраницы", 0.1, Истина);
		КонецЕсли;

	Иначе
		Форма.ПодключитьОбработчикОжидания("ПроверитьОтображениеСтраницы", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

// Выполняет процедуру формы с указанной задержкой, если форма не открыта - осуществляется попытка
// выполнить без задержки.
// Полезна, когда небольшая задержка необходима для выполнения кода после синхронизации Клиент-Сервер,
// это актуально для Веб-Клиента.
// Кроме того, поскольку в некоторых обработчиках запрещено использовать серверные методы, с помощью этой
// процедуры легко реализовать вызов серверного метода из такого обработчика, но с небольшой задержкой.
//
// Параметры:
//		Форма					- Управляемая форма - Форма, в контексте которой будет выполняться процедура.
//		ИмяПроцедуры			- Строка - Имя процедуры Формы, которую надо выполнить. 
//								Процедура должна не иметь параметров.
//		Таймаут					- Число - Необязательный. Интервал времени в секундах с точностью до 1/10 секунды, 
//								через который будет осуществляться вызов процедуры (положительное число). 
//								Если передан 0, тогда сначала производится попытка определения таймаута по 
//								экспортной клиентской переменной или реквизиту Формы ВремяЗадержки.
//								
//
Процедура ВыполнитьСЗадержкой(Форма, ИмяПроцедуры, Таймаут = 0,
		ОбъектОповещения = Неопределено, ИмяПроцедурыОповещения = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(Форма) Тогда
		Возврат;
	КонецЕсли;

	Если Таймаут = 0 Тогда
		Таймаут = Форма.ВремяЗадержки;
	КонецЕсли;

	Задержка = ?(Таймаут < 0.1, 0.1, Таймаут);

	БезЗадержки = НЕ МожноПодключитьОбработчикОжидания(Форма);

	Если БезЗадержки Тогда

	// При закрытой форме ПодключитьОбработчикОжидания() не отрабатывает корректно
		// выполним без задержки.
		Если ЗначениеЗаполнено(ИмяПроцедурыОповещения)
				И (ТипЗнч(ИмяПроцедурыОповещения) = Тип("Строка")) Тогда

			Если ОбъектОповещения = Неопределено Тогда
			// По умолчанию считаем объектом форму.
				ОбъектОповещения = Форма.ЭтотОбъект;
			КонецЕсли;

			// В качестве дополнительных параметров передаем форму.
			Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ОбъектОповещения, Форма);
			ВыполнитьОбработкуОповещения(Оповещение);

		КонецЕсли;

	ИначеЕсли ЗначениеЗаполнено(ИмяПроцедуры)
			и (ТипЗнч(ИмяПроцедуры) = Тип("Строка")) Тогда
		Форма.ПодключитьОбработчикОжидания(ИмяПроцедуры, Задержка, Истина);
	КонецЕсли;

КонецПроцедуры

// Выполняет процедуру формы с минимально возможной задержкой, если форма не открыта - осуществляется попытка
// выполнить без задержки.
// Полезна, когда небольшая задержка необходима для выполнения кода после синхронизации Клиент-Сервер,
// это актуально для Веб-Клиента.
// Кроме того, поскольку в некоторых обработчиках запрещено использовать серверные методы, с помощью этой
// процедуры легко реализовать вызов серверного метода из такого обработчика, но с небольшой задержкой.
//
// Параметры:
//		Форма					- Управляемая форма - Форма, в контексте которой будет выполняться процедура.
//		ИмяПроцедуры			- Строка - Имя процедуры Формы, которую надо выполнить. 
//								Процедура должна не иметь параметров.
//								
//
Процедура ВыполнитьСМинимальнойЗадержкой(Форма, ИмяПроцедуры,
		ОбъектОповещения = Неопределено, ИмяПроцедурыОповещения = Неопределено) Экспорт

	Таймаут = ?(Форма.ЭтоВебКлиент, 0.3, 0.1);
	ВыполнитьСЗадержкой(Форма, ИмяПроцедуры, Таймаут, ОбъектОповещения, ИмяПроцедурыОповещения);

КонецПроцедуры

// Проверяет подключение организации отчета к 1С-Отчетности и к сдаче на портале ФСРАР.
// В случае не подключения к 1С-отчетности - выдаются стандартная форма-предложение оформить Заявление на подключение.
// В случае не подключения к порталу ФСРАР - выдается предупреждение. 
//
// Параметры:
//		СтруктураРеквизитовФормы	- Структура.
//		ТолькоОтчетность			- Булево - Необязательный. 
//							Если Истина, проверяется подключение только к 1С- отчетности. 
//							Ложь - проверяется подключение и к 1С-отчетности и к ФСРАР.
//		
// Возвращаемое значение:
// 		Структура, со свойствами
// 			* ФСРАР 		- Булево, Истина, если организация подключена к сдаче отчетности в ФСРАР.
// 			* Отчетность 	- Булево, Истина, если организация подключена к сдаче отчетности в 1С-Отчетности.
//
Функция ПроверитьПодключениеОрганизации(СтруктураРеквизитовФормы,
		ТолькоОтчетность = Ложь)

	ОрганизацияОтчета = СтруктураРеквизитовФормы.Организация;
	ОтчетСсылка = СтруктураРеквизитовФормы.мСохраненныйДок;

	Подключение = РегламентированнаяОтчетностьАЛКОВызовСервера.ОрганизацияПодключенаК1СОтчетностиИкФСРАР(ОрганизацияОтчета);

	ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");

	Если ВышеБРО_1_1_11_0 Тогда

		МодульДокументооборотСКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСКОКлиент");

		Если НЕ Подключение.Отчетность Тогда
		// Выдаем стандартное приглашение.
			МодульДокументооборотСКОКлиент.ПроверитьСтатусПодключенияПередОтправкой(ОтчетСсылка);
		ИначеЕсли (НЕ Подключение.ФСРАР) и (НЕ ТолькоОтчетность) Тогда
			МодульДокументооборотСКОКлиент.СообщитьОНеподключенномНаправлении(ОтчетСсылка);
		КонецЕсли;

	Иначе

	// Это БРО 1.1.10.
		МодульЭДОСКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент");

		Если НЕ Подключение.Отчетность Тогда
		// Выдаем стандартное приглашение.
			МодульЭДОСКОКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(ОрганизацияОтчета);
		ИначеЕсли (НЕ Подключение.ФСРАР) и (НЕ ТолькоОтчетность) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'По организации отчета не включена возможность электронного документооборота с Росалкогольрегулированием!'"));
		КонецЕсли;

	КонецЕсли;

	Возврат Подключение;

КонецФункции

Функция ПолучитьЗначенияПолейДляПередачиВФормуВводаАдресаАЛКО(СохраненныеДанныеАдреса)

	// Читаем сохраненную во внутреннем представлении структуру.
	АдресXMLилиJSON = "";
	Если СохраненныеДанныеАдреса.Свойство("ЕстьJSON") Тогда
		Если СохраненныеДанныеАдреса.ЕстьJSON Тогда
			АдресXMLилиJSON = СохраненныеДанныеАдреса.АдресJSON;
			Возврат АдресXMLилиJSON;
		КонецЕсли;	
	КонецЕсли;
	
	Если СохраненныеДанныеАдреса.Свойство("ЕстьXML") Тогда
		Если СохраненныеДанныеАдреса.ЕстьXML Тогда
			АдресXMLилиJSON = СохраненныеДанныеАдреса.АдресXML;	
			Возврат АдресXMLилиJSON;
		КонецЕсли;	
	КонецЕсли;
	
	АдресXML  = "";
	АдресJSON = "";
	Если СохраненныеДанныеАдреса.Свойство("АдресJSON") Тогда
		АдресJSON = СохраненныеДанныеАдреса.АдресJSON;
		Если (НЕ АдресJSON = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("JSON"))
			И ЗначениеЗаполнено(АдресJSON) Тогда
			Возврат АдресJSON;
		КонецЕсли; 
	КонецЕсли;
	
	Если СохраненныеДанныеАдреса.Свойство("АдресXML") Тогда
		АдресXML = СохраненныеДанныеАдреса.АдресXML;
		Если (НЕ АдресXML = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("XML"))
			И ЗначениеЗаполнено(АдресXML) Тогда
			Возврат АдресXML;
		КонецЕсли; 
	КонецЕсли;
	
	// Если XML или JSON есть - они оба соответствуют пустому адресу.
	// Поэтому если есть - отдаем.
	Если ЗначениеЗаполнено(АдресJSON) Тогда
		Возврат АдресJSON;
	КонецЕсли;

	Если ЗначениеЗаполнено(АдресXML) Тогда
		Возврат АдресXML;
	КонецЕсли;
	
	// Если был сохранен в предыдущем варианте хранения, без XML и JSON.
	ЗначенияПолей = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтруктураВСписокЗначений(СохраненныеДанныеАдреса);

	Возврат ЗначенияПолей;

КонецФункции

Функция УникальностьФормы(Форма)

	УникальностьФормы = Ложь;

	ИмяФормы = Форма.ИмяФормы;

	Если СтрНайти(ИмяФормы, "ФормаЗаписи") > 0 Тогда
	// Во всех алкорегистрах измерение документ всегда есть и доступно в форме Записи через 
		// реквизит Запись.
		УникальностьФормы = Форма.Запись.Документ;

	ИначеЕсли СтрНайти(ИмяФормы, "РегламентированныйОтчетАлко") > 0 Тогда

		Если ТипЗнч(Форма.СтруктураРеквизитовФормы) = Тип("Структура") Тогда

			Если НЕ Форма.СтруктураРеквизитовФормы.Свойство("мСохраненныйДок", УникальностьФормы) Тогда
				УникальностьФормы = Ложь;
			КонецЕсли;

		КонецЕсли;

		УникальностьФормы = ?(УникальностьФормы = Неопределено, Ложь, УникальностьФормы);

	КонецЕсли;

	Возврат УникальностьФормы;

КонецФункции

Процедура ПроверитьСписокПараметровПереходаНаСтраницуРаздела(Форма)

	Если НЕ ТипЗнч(Форма.СписокПараметровПереходаНаСтраницуРаздела) = Тип("СписокЗначений") Тогда	
		Форма.СписокПараметровПереходаНаСтраницуРаздела = Новый СписокЗначений;	
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПриОткрытии

Процедура ВыполнитьПроверкуПередОткрытиемАЛКО(Форма)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершениеАЛКО", ЭтотОбъект, Форма);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);

КонецПроцедуры

Процедура ПриОткрытииЗавершениеАЛКО(Отказ, Форма) Экспорт

	Если Отказ Тогда
	// Проверка онлайн блокировки показала, что открывать нельзя.
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		Возврат;

	КонецЕсли;

	// Актуально, если Форма.ЭтоВебКлиент = Истина, в ином случае задержки быть не должно.
	ВыполнитьПослеОтображенияСтраницыОтчета(Форма, "Подключаемый_ОткрытьОтчетНаКлиенте", ЭтотОбъект, "ОткрытьОтчетАЛКОИзОповещения");

КонецПроцедуры

Процедура ОткрытьОтчетАЛКОИзОповещения(Результат, Форма) Экспорт

	ОткрытьОтчетАЛКО(Форма);

КонецПроцедуры

Процедура ОткрытьОтчетАЛКО(Форма)

	Форма.СписокПараметровПереходаНаСтраницуРаздела = Новый СписокЗначений;

	КоэфОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 1);
	Форма.ВремяЗадержки = ?(Форма.ЭтоВебКлиент, 0.2, 0.1);
	Форма.ВремяЗадержки = Форма.ВремяЗадержки * КоэфОжидания;

	Если Форма.ЭтоНовыйДокумент Тогда
	// Создание нового отчета или копирование.		
		КопироватьДанныеФормы(Форма.мДеревоСтраницОтчета, Форма.мДеревоВыбранныхСтраниц);
		Форма.ОкончаниеИнициализацииНаСервере();

	КонецЕсли;

	Если Форма.НужноСкопировать Тогда

	// Идет процесс копирования отчета. 
		// Сначала необходимо сохранить отчет, 
		// чтобы можно было привязать записи регистров сведений к документу отчета.
		Оповещение = Новый ОписаниеОповещения("ВосстановитьДанныеТаблицПриКопированииАЛКО", ЭтотОбъект, Форма);
		СохранитьНаКлиентеАЛКО(Форма, , Оповещение);

	ИначеЕсли Форма.НужноЗаполнитьАвто Тогда

	// Автозаполнение отчета после создания.
		// Сначала необходимо сохранить отчет, 
		// чтобы можно было привязать записи регистров сведений к документу отчета.
		// Данный режим на данный момент не используется, автозаполнение только по кнопке Заполнить.
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьАвтоПриСозданииОтчетаАЛКО", ЭтотОбъект, Форма);
		СохранитьНаКлиентеАЛКО(Форма, , Оповещение);

	ИначеЕсли Форма.НужноСохранить Тогда

	// Требуется сохранить отчет перед открытием.
		СохранитьНаКлиентеАЛКО(Форма);

	ИначеЕсли Форма.НужноВосстановитьДанные Тогда

	// Нормальное открытие - запускается восстановление данных регистров,
		// с последующим восстановлением данных отчета.
		ВосстановитьРегистры_ДлительнаяОперацияАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеЗакрытие

Процедура ПередЗакрытиемРегламентированногоОтчетаАЛКО(Форма, Отказ,
		СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения)

	Если Форма.Модифицированность Тогда

		Отказ = Истина;

		Если (НЕ ЗавершениеРаботы = Неопределено) и ЗавершениеРаботы Тогда
		// Идет завершение работы системы.
			Если НЕ Форма.ПользовательСохранилОтчет Тогда
				ТекстПредупреждения = НСтр("ru='Это временный отчет.
					|Перед завершением работы рекомендуется записать отчет, иначе измененные данные будут утеряны.'");
			Иначе
				ТекстПредупреждения = НСтр("ru='Данные отчета были изменены.
					|Перед завершением работы рекомендуется записать отчет, иначе измененные данные будут утеряны.'");
			КонецЕсли;

			Возврат;

		КонецЕсли;

		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершениеАЛКО", ЭтотОбъект, Форма);

		Если НЕ Форма.ПользовательСохранилОтчет Тогда
			ТекстВопроса = НСтр("ru='Это временный отчет.
				|Если закрыть его без сохранения, отчет будет удален и данные будут утеряны.
				|
				|Сохранить отчет?'");
		Иначе
			ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		КонецЕсли;

		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

	Иначе
	// Нормальное закрытие.
		Отказ = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ВопросСохранитьИзмененияЗавершениеАЛКО(Ответ, Форма) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда

	// Явное согласие на сохранение.
		Форма.ПользовательНажалСохранитьОтчет = Истина;

		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершениеАЛКО", ЭтотОбъект, Форма);
		СохранитьНаКлиентеАЛКО(Форма, , Оповещение);

	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда

		Если НЕ Форма.ПользовательСохранилОтчет Тогда

		// Документ ни разу не сохранялся.
			// Перед закрытием нужно удалить документ отчета, 
			// который был создан чтобы было к чему привязать
			// записи регистров сведений.
			// Поскольку измерение Документ ведущее - записи регистров будут удалены автоматически.
			УдалитьДокументОтчета_ДлительнаяОперацияАЛКО(Форма);
			Возврат;

		КонецЕсли;

		Форма.Модифицированность = Ложь;
		Форма.Закрыть();

	КонецЕсли;

КонецПроцедуры

Процедура ПослеСохраненияФормыЗавершениеАЛКО(Результат, Форма) Экспорт
	Форма.Закрыть();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеОбработчикиСобытийТаблицМногострочныхРазделов

Процедура ПриАктивизацииСтрокиАЛКО(Форма) Экспорт

	Раздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;

	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	Форма.ТекущийИдГруппы = ИдГруппы;
	Форма.ТекущийРаздел = Раздел;

	Если Форма.АктивныйЭлементТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Форма.АктивныйЭлементТаблицы.ТекущиеДанные;

	ТекущаяСтрока = Форма.АктивныйЭлементТаблицы.ТекущаяСтрока;

	Если ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаТаблицы Тогда

		Возврат;

	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаТаблицы = ТекущаяСтрока;

	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.ТекущийНомерСтрокиТаблицыФормы = ТекущиеДанные.ИндексСтроки;
	Иначе
		Форма.ТекущийНомерСтрокиТаблицыФормы = 0;
	КонецЕсли;

	Если НЕ (Форма.ТекущееСостояние = "АктивизацияЯчейки"
			ИЛИ Форма.ТекущееСостояние = "АктивизацияСтраницыРаздела"
			ИЛИ Форма.ТекущееСостояние = "Активизация") Тогда

		ПроверитьСписокПараметровПереходаНаСтраницуРаздела(Форма);
		Если Форма.СписокПараметровПереходаНаСтраницуРаздела.Количество() > 0 Тогда
			Оповестить("ОткрытиеСтраницы", , Форма.УникальностьФормы);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьТекущиеРазделИдГруппыАЛКО(Форма, Элемент)

	ИмяТаблицы = Элемент.Имя;

	ИдГруппы = СтрЗаменить(ИмяТаблицы, "ТаблицаФормыРаздела", "");

	Раздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;

	Форма.ТекущийИдГруппы = ИдГруппы;
	Форма.ТекущийРаздел = Раздел;

	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;

	// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
	Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
	Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеФормаДлительнойОперации

// Открывает форму длительной операции с настройками, зависящими от типа длительной операции.
//
// Параметры:
//		ФормаОтчета					- Управляемая форма - Форма отчета, длительная операция которой показывается.
//		ВидДлОперации				- Перечисления.ВидыДлительныхОперацийРегламентированныхОтчетов.
//		ИдентификаторЗадания		- Строка - 	УникальныйИдентификатор - Идентификатор фонового задания, процесс
//									выполнения которого показывает форма длительной операции.
//
Процедура ПоказатьФормуДлительнойОперации(ФормаОтчета, ВидДлОперации,
		ИдентификаторЗадания)

	ВидДлОперацииВосстановление = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
	ВидДлОперацииВыгрузка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПересчет = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов");
	ВидДлОперацииПечать = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");
	ВидДлОперацииПечатьВАрхив = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив");
	ВидДлОперацииПроверка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВидДлОперацииСохранение = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение");
	ВидДлОперацииАвтоЗаполнение = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
	ВидДлОперацииОчисткаОтМусора = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора");
	ВидДлОперацииСкопироватьТекущиеРегистры = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры");
	ВидДлОперацииУдалениеДокументаОтчета = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.УдалениеДокументаОтчета");

	ВыполняетсяДлительнаяОперация = Истина;

	Если ВидДлОперации = ВидДлОперацииВосстановление Тогда

		ВидимостьПроцентов = Ложь;
		// Режим длительной операции включается только при копировании отчетов
		// или при импорте данных отчета из старого формата.
		СообщениеПользователю = "Копируются данные отчета";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииСкопироватьТекущиеРегистры Тогда

		ВидимостьПроцентов = Ложь;
		// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".
		СообщениеПользователю = "Копируются данные отчета";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузка Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Выгружается отчет.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Выгружается отчет для портала ФСРАР.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Выгружается отчет для отправки в ФСРАР.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииПересчет Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Пересчитываются строки таблиц Разделов отчета.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииПечать
			или ВидДлОперации = ВидДлОперацииПечатьВАрхив Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Формируются печатные листы отчета.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверка Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Проверяется возможность выгрузки отчета.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Выгружается отчет для проверки в Интернете.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииСохранение Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Сохраняются данные отчета.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииАвтоЗаполнение Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Идет заполнение отчета по данным информационной базы.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииОчисткаОтМусора Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Идет очистка регистров отчета от ненужной информации.";
		ДоступностьКнОтмена = Истина;

	ИначеЕсли ВидДлОперации = ВидДлОперацииУдалениеДокументаОтчета Тогда

		ВидимостьПроцентов = Ложь;
		СообщениеПользователю = "Идет очистка регистров от записей удаляемого временного отчета.";
		ДоступностьКнОтмена = Истина;

	КонецЕсли;

	ФормаОтчета.СообщениеПользователю = СообщениеПользователю;
	ФормаОтчета.НачалосьВыполнениеДлительнойОперации = Ложь;

	СтруктураНастроекФормыДлительнойОперации = Новый Структура;

	СтруктураНастроекФормыДлительнойОперации.Вставить("СообщениеПользователю", СообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ДоступностьКнОтмена", ДоступностьКнОтмена);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентов);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	СтруктураНастроекФормыДлительнойОперации.Вставить("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);

	УправлениеФормойДлительнойОперации(ФормаОтчета, СтруктураНастроекФормыДлительнойОперации);

КонецПроцедуры

Процедура НайтиУправляющиеФормы(Форма1СОтчетность, ФормаУправлениеОтчетностью)

	Форма1СОтчетность = Неопределено;
	ФормаУправлениеОтчетностью = Неопределено;

	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл

		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();

		Если КолФорм > 0 Тогда
			Для Инд = 0 По КолФорм - 1 Цикл

				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;

				Если Найти(ИмяТекФормы, ".УправлениеОтчетностью") > 0 Тогда
					ФормаУправлениеОтчетностью = ТекФорма;
				ИначеЕсли Найти(ИмяТекФормы, ".РегламентированнаяОтчетность") > 0 Тогда
					Форма1СОтчетность = ТекФорма;
				КонецЕсли;

				Если (НЕ Форма1СОтчетность = Неопределено)
						и (НЕ ФормаУправлениеОтчетностью = Неопределено) Тогда

						// Все нашли.
					Прервать;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ЗафиксироватьТекущийДокументУправляющейФормы()

	Форма1СОтчетность = Неопределено;
	ФормаУправлениеОтчетностью = Неопределено;

	НайтиУправляющиеФормы(Форма1СОтчетность, ФормаУправлениеОтчетностью);

	ТекДокумент = Неопределено;

	// Приоритет у формы 1С-Отчетность.
	Если НЕ Форма1СОтчетность = Неопределено Тогда

		ТаблицаОтчетов = Форма1СОтчетность.Элементы.Найти("Отчеты");
		Если НЕ ТаблицаОтчетов = Неопределено Тогда

			Если НЕ ТаблицаОтчетов.ТекущиеДанные = Неопределено Тогда
				ТекДокумент = ТаблицаОтчетов.ТекущиеДанные.РегламентированныйОтчет;
			Иначе
				ТекДокумент = Неопределено;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ТекДокумент = Неопределено
			И (НЕ ФормаУправлениеОтчетностью = Неопределено) Тогда

		ТаблицаЖурналОтчетов = ФормаУправлениеОтчетностью.Элементы.Найти("ЖурналОтчетов");
		Если НЕ ТаблицаЖурналОтчетов = Неопределено Тогда

			Если НЕ ТаблицаЖурналОтчетов.ТекущиеДанные = Неопределено Тогда
				ТекДокумент = ТаблицаЖурналОтчетов.ТекущиеДанные.Ссылка;
			Иначе
				ТекДокумент = Неопределено;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ТекДокумент;

КонецФункции

// Обновляет списки отчетов открытых форм.
// Необходимо при удалении временных отчетов, чтобы в списке не отображались
// уже удаленные отчеты.
//
Процедура ОбновитьФормыСоСпискомОтчетов(ДокОтчета = Неопределено)

// Смотрим текущий документ управляющей формы.
	ТекДок = ЗафиксироватьТекущийДокументУправляющейФормы();

	// Поэтому ищем среди открытых окон 1С-отчетность или Управление отчетностью 
	// или любые другие с элементами ЖурналОтчетов и Отчеты и обновляем.
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл

		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();

		Если КолФорм > 0 Тогда
			Для Инд = 0 По КолФорм - 1 Цикл

				ТекФорма = МассивФорм[Инд];

				ТаблицаОтчетов = ТекФорма.Элементы.Найти("Отчеты");
				ТаблицаЖурналОтчетов = ТекФорма.Элементы.Найти("ЖурналОтчетов");

				Если НЕ ТаблицаЖурналОтчетов = Неопределено Тогда
					ТаблицаЖурналОтчетов.Обновить();
				КонецЕсли;

				Если НЕ ТаблицаОтчетов = Неопределено Тогда
					ТаблицаОтчетов.Обновить();
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Если НЕ ДокОтчета = Неопределено Тогда

	// Пробуем установить текущий документ управляющей формы,
		// если было удаление отчета, он может не существовать.
		СписокСпозиционирован = СпозиционироватьФормыСоСпискомОтчетов(ТекДок);
		Если НЕ СписокСпозиционирован Тогда
		//Не вышло - позиционируем на указанный в параметре документ.
			СпозиционироватьФормыСоСпискомОтчетов(ДокОтчета);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция СпозиционироватьФормыСоСпискомОтчетов(ДокОтчета)

	Результат = Ложь;

	Если НЕ ДокОтчета = Неопределено Тогда

	// Смотрим текущий документ управляющей формы.
		ОписаниеРегОтчета = РегламентированнаяОтчетностьАЛКОВызовСервера.ОписаниеРегОтчета(ДокОтчета);

		Если НЕ ОписаниеРегОтчета = Неопределено Тогда

		// Раз строка реальная, вернем курсор на нее.

			// Оповещаем формы 1С-Отчетность и Управление отчетностью.
			ИмяСобытия = "Позиционирование в списке отчетов";
			Параметр = Новый Структура;
			Параметр.Вставить("Организация", ОписаниеРегОтчета.Организация);
			Параметр.Вставить("Ссылка", ДокОтчета);
			Оповестить(ИмяСобытия, Параметр);

			Результат = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Определяет форму-владелец для формы длительной операции отчета.
// Поскольку длительные операции реализованы как при открытой, так и при закрытой форме отчета,
// при показе формы длительной операции необходимо определить форму-владелец для нее,
// в том случае, если она неизвестна.
// Приоритет при этом имеет ОбщаяФорма.РегламентированнаяОтчетность.
//
// Параметры:
// 		ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которого показывается.
//
// Возвращаемое значение:
// 		Управляемая форма.
//
Функция ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(ФормаОтчета)

	Если ФормаОтчета.Открыта() Тогда

		Возврат ФормаОтчета;

	КонецЕсли;

	// определяем форму текущего активного окна	

	// Помимо 1С отчетности может быть открыто что-то еще и 
	// и пользователь в ожидании завершения длительной операции
	// может переключиться.
	// Поэтому ищем среди открытых окон 1С-отчетность или Управление отчетностью.
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл

		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();

		Если КолФорм > 0 Тогда
			Для Инд = 0 По КолФорм - 1 Цикл

				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;

				Если ВРег(ИмяТекФормы) = ВРег("ОбщаяФорма.РегламентированнаяОтчетность") Тогда
				// это форма 1С-отчетность
					Возврат ТекФорма;

				ИначеЕсли СтрНайти(ВРег(ИмяТекФормы), ВРег("УправлениеОтчетностью")) > 0 Тогда
				// это форма Управление отчетностью
					Возврат ТекФорма;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Открывает, закрывает форму длительной операции с переданными настройками, 
// или передает в открытую форму длительной операции новые настройки отображения.
//
// Параметры:
//	 ФормаОтчета				- Управляемая форма - Форма отчета, длительная операция которой показывается.
//	 СтруктураНастроекФормыДлительнойОперации - Структура, содержит свойства:
//
//	 	* СообщениеПользователю 				- Строка - Необязательный. Основное сообщение, выводимое в форме 
//												длительной операции.
// 		* ДопСообщениеПользователю 				- Строка - Необязательный. Дополнительное сообщение, выводимое после основного, 
//												с новой строки.
// 		* ДоступностьКнОтмена					- Булево - Необязательный. Определяет доступность и видимость кнопки "Отмена" 
//												на форме длительной операции.
// 		* ВидимостьПроцентаВыполненияОперации 	- Булево - Необязательный. Определяет видимость шкалы прогресса
//												с процентом выполнения.
// 		* ПроцентВыполненияОперации 			- Число - Необязательный. Процент выполнения длительной операции, 
//												который надо показать. Данное свойство учитывается только если передано
//												свойство ВидимостьПроцентаВыполненияОперации.
// 		* ИмяПроцедурыПослеОткрытияФормыДлитОперации - Строка - Необязательный. Имя процедуры, выполняемой с задержкой после 
//												выполнения процедуры.
// 		* ВыполняетсяДлительнаяОперация			- Булево - Необязательный. Признак выполнения длительной операции.
//												Если Истина - форма длительной операции открывается, если не открыта или
//															в нее передаются новые настройки, если уже открыта.
//												Если Ложь - форма длительной операции закрывается.
//												По умолчанию Ложь.
//		
//
Процедура УправлениеФормойДлительнойОперации(ФормаОтчета,
		СтруктураНастроекФормыДлительнойОперации)

	Перем СообщениеПользователю, ДопСообщениеПользователю, ДоступностьКнОтмена,
		ВидимостьПроцентаВыполненияОперации, ПроцентВыполненияОперации,
		ИмяПроцедурыПослеОткрытияФормыДлитОперации, ВыполняетсяДлительнаяОперация;

	СтруктураНастроекФормыДлительнойОперации.Свойство("СообщениеПользователю", СообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ДопСообщениеПользователю", ДопСообщениеПользователю);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ДоступностьКнОтмена", ДоступностьКнОтмена);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ВидимостьПроцентаВыполненияОперации", ВидимостьПроцентаВыполненияОперации);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ПроцентВыполненияОперации", ПроцентВыполненияОперации);
	СтруктураНастроекФормыДлительнойОперации.Свойство("ИмяПроцедурыПослеОткрытияФормыДлитОперации", ИмяПроцедурыПослеОткрытияФормыДлитОперации);

	СтруктураНастроекФормыДлительнойОперации.Свойство("ВыполняетсяДлительнаяОперация", ВыполняетсяДлительнаяОперация);
	ВыполняетсяДлительнаяОперация = ?(ВыполняетсяДлительнаяОперация = Неопределено, Ложь, ВыполняетсяДлительнаяОперация);

	КлючУникальности = УникальностьФормы(ФормаОтчета);

	// Если в форме отчета не зафиксирована форма-владелец, попробуем ее найти.
	Если ФормаОтчета.ВладелецФормыДлитОпер = Неопределено Тогда

		ВладелецФормыДлитОпер = ОпределитьОткрытуюФормуВладелецФормыДлительнойОперации(ФормаОтчета);
		ФормаОтчета.ВладелецФормыДлитОпер = ВладелецФормыДлитОпер;

	Иначе
		ВладелецФормыДлитОпер = ФормаОтчета.ВладелецФормыДлитОпер;
	КонецЕсли;

	// пробуем найти открытую форму длительной операции для данного отчета.
	ФормаДлительнойОперацииОтчета = ФормаОтчета.ФормаДлительнойОперации;
	НужноНайтиФорму = Ложь;
	Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(ФормаДлительнойОперацииОтчета) Тогда
		НужноНайтиФорму = Истина;
	ИначеЕсли НЕ ВРег(ФормаДлительнойОперацииОтчета.ИмяФормы) = ВРег("ОбщаяФорма.АЛКОДлительнаяОперация") Тогда
		НужноНайтиФорму = Истина;
	КонецЕсли;

	Если НужноНайтиФорму Тогда

		ФормаДлительнойОперацииОтчета = ОпределитьОткрытуюФормуДлительнойОперации(ФормаОтчета);
		Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(ФормаДлительнойОперацииОтчета) Тогда
			ФормаОтчета.ФормаДлительнойОперации = ФормаДлительнойОперацииОтчета;
		КонецЕсли;

	КонецЕсли;

	Если ВыполняетсяДлительнаяОперация Тогда

		ПараметрыФормы = Новый Структура;

		Если НЕ ДоступностьКнОтмена = Неопределено Тогда
			ПараметрыФормы.Вставить("ДоступностьКнОтмена", ДоступностьКнОтмена);
		КонецЕсли;

		Если НЕ СообщениеПользователю = Неопределено Тогда
			ПараметрыФормы.Вставить("СообщениеПользователю", СообщениеПользователю);
		Иначе
			ПараметрыФормы.Вставить("СообщениеПользователю", "");
		КонецЕсли;

		ПараметрыФормы.Вставить("ДопСообщениеПользователю", ДопСообщениеПользователю);

		ВариантСПроцентами = Истина;
		Если НЕ ВидимостьПроцентаВыполненияОперации = Неопределено Тогда
			ПараметрыФормы.Вставить("ВидимостьПроцентВыполнения", ВидимостьПроцентаВыполненияОперации);
		Иначе
			ВариантСПроцентами = Ложь;
		КонецЕсли;

		Если ВариантСПроцентами Тогда

			Если НЕ ПроцентВыполненияОперации = Неопределено Тогда
				ПараметрыФормы.Вставить("ПроцентВыполнения", ПроцентВыполненияОперации);
			КонецЕсли;

		КонецЕсли;

		ПараметрыФормы.Вставить("УникальностьФормы", ФормаОтчета.УникальностьФормы);

		ИмяФормыДлительнойОперации = "ОбщаяФорма.АЛКОДлительнаяОперация";

		НужноОткрытьФорму = Ложь;

		Если НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(ФормаДлительнойОперацииОтчета) Тогда
			НужноОткрытьФорму = Истина;
		ИначеЕсли НЕ ФормаДлительнойОперацииОтчета.Открыта() Тогда
			НужноОткрытьФорму = Истина;
		ИначеЕсли НЕ ВРег(ФормаДлительнойОперацииОтчета.ИмяФормы) = ВРег("ОбщаяФорма.АЛКОДлительнаяОперация") Тогда
			НужноОткрытьФорму = Истина;
		Иначе
		// Оповещение в форму длительной операции.
			Оповестить("ИмитацияАктивности", ПараметрыФормы, ФормаОтчета.УникальностьФормы);
		КонецЕсли;

		Если НужноОткрытьФорму Тогда

			ВладелецФормыДлитОпер.Активизировать();
			ФормаДлительнойОперацииОтчета = ОткрытьФорму(ИмяФормыДлительнойОперации, ПараметрыФормы, ВладелецФормыДлитОпер, КлючУникальности, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

			ФормаОтчета.ФормаДлительнойОперации = ФормаДлительнойОперацииОтчета;
			ФормаОтчета.ОткрытаяФормаПотомокСБлокировкойВладельца = ФормаДлительнойОперацииОтчета;

		КонецЕсли;

		ФормаДлительнойОперацииОтчета.Активизировать();

	Иначе

	// Нужно закрыть форму длительной операции, если она открыта
		Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(ФормаДлительнойОперацииОтчета) Тогда

		// Оповещение в форму длительной операции.
			Оповестить("ЗакрытьДлительнуюОперацию", , ФормаОтчета.УникальностьФормы);

			ФормаОтчета.ФормаДлительнойОперации = Неопределено;
			ФормаОтчета.ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;

		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяПроцедурыПослеОткрытияФормыДлитОперации) Тогда
		ВыполнитьСМинимальнойЗадержкой(ФормаОтчета, ИмяПроцедурыПослеОткрытияФормыДлитОперации);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеВыполненияДлительнойОперацииПриОшибкеАЛКО(Форма,
		СообщениеОбОшибке)

		// Отключаем показ формы-анимации длительной операции.
	ВыключитьЗаставкуДлительнойОперации(Форма);

	ВидДлОперации = Форма.ВидДлительнойОперации;

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = ' При выполнении длительной операции 
		|" + ВидДлОперации + "произошла ошибка.
		|" + СообщениеОбОшибке + "
		|Подробности см. в Журнале регистрации.'");;
	Сообщение.Сообщить();

	Оповестить("ОтменаОперацииПриОшибке", , Форма.УникальностьФормы);

КонецПроцедуры

Процедура ОтменаДлительнойОперацииАЛКО(Форма)

// очистим, чтобы можно было контролировать наличие выполняемой операции
	// при одновременном открытии формы отчета и попытке выполнения операции
	// из 1С отчетности или Управления отчетностью.
	// ПараметрыОбработчикаОжидания во внешней форме очищаются ,
	// в Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте() внешней формы.
	Форма.ПараметрыОбработчикаОжидания = Неопределено;

	Форма.ВладелецФормыОшибок = Форма.ВладелецФормыДлитОпер;
	Форма.ВладелецФормыДлитОпер = Неопределено;

	Форма.ОтменаОперации = Истина;

	ВыключитьЗаставкуДлительнойОперации(Форма);

	ВидДлОперации = Форма.ВидДлительнойОперации;

	Если ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры") Тогда

	// Отмена копирования данных при записи отчета как нового с измененым номером корректировки.
		ПриОтменеКопированияРегистровОтчетаПриЗаписиКакНовыйАЛКО(Форма);

	ИначеЕсли ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать")
			или ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив") Тогда

		Форма.СтруктураРеквизитовФормы.Вставить("ТипЭкспорта", Неопределено);

	ИначеЕсли ВидДлОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление") Тогда

	// Режим длительной операции при восстановлении включается только при копировании отчетов
		// или при импорте данных отчета из старого формата.
		ПриОтменеВосстановленияАЛКО(Форма);
		Возврат;

	КонецЕсли;

	ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

КонецПроцедуры

Процедура ПослеВыполненияДлительнойОперацииАЛКО(Форма,
		СтрукРеквизитовФормы = Неопределено)

		// При вызове извне, без открытия формы, может передаваться значение измененной СтруктураРеквизитовФормы.	
	Если НЕ СтрукРеквизитовФормы = Неопределено Тогда
		Форма.СтруктураРеквизитовФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СтрукРеквизитовФормы);
	КонецЕсли;

	// очистим, чтобы можно было контролировать наличие выполняемой операции
	// при одновременном открытии формы отчета и попытке выполнения операции
	// из 1С отчетности или Управления отчетностью.
	// ПараметрыОбработчикаОжидания во внешней форме очищаются ,
	// в Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте() внешней формы.
	Форма.ПараметрыОбработчикаОжидания = Неопределено;

	Форма.ВладелецФормыОшибок = РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(Форма.ВладелецФормыДлитОпер);
	Форма.ВладелецФормыДлитОпер = Неопределено;

	ВидДлОперации = Форма.ВидДлительнойОперации;

	ВидДлОперацииВосстановление = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");

	ВидДлОперацииВыгрузка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПересчет = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов");
	ВидДлОперацииПечать = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");
	ВидДлОперацииПечатьВАрхив = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПечатьВАрхив");
	ВидДлОперацииПроверка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВидДлОперацииСохранение = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение");
	ВидДлОперацииАвтоЗаполнение = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
	ВидДлОперацииОчисткаОтМусора = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора");
	ВидДлОперацииСкопироватьТекущиеРегистры = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры");
	ВидДлОперацииУдалениеДокументаОтчета = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.УдалениеДокументаОтчета");

	Если ВидДлОперации = ВидДлОперацииВосстановление Тогда

		Форма.ПродолжениеВосстановленияДанныхНаСервере(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);

		ПослеВыполненияЗадания_ВосстановитьОтчетАЛКО(Форма);

	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверка Тогда

		ПослеВыполненияЗадания_ПроверкиВыгрузкиАЛКО(Форма);

	ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда

		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);

	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузка Тогда

		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);

	ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда

		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);

	ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда

		ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации);

	ИначеЕсли ВидДлОперации = ВидДлОперацииПересчет Тогда

		ПослеВыполненияЗадания_ПересчетИтоговАЛКО(Форма);

		Если Форма.БылИмпорт Тогда
			Форма.БылИмпорт = Ложь;
		КонецЕсли;

		Если Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
			Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет";
		КонецЕсли;

		СохранитьНаКлиентеАЛКО(Форма);

	ИначеЕсли ВидДлОперации = ВидДлОперацииПечать
			или ВидДлОперации = ВидДлОперацииПечатьВАрхив Тогда

		ВидПечати = Форма.ОбщийПараметрПроцедур.ВидПечати;
		ПечатьУспешна = Форма.ПослеВыполненияЗадания_ПечатьНаСервере(ВидПечати);

		Если ПечатьУспешна и (ВидПечати <> "ПечатьФайлZIP") Тогда
			РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, , Форма.СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		КонецЕсли;

		Форма.СтруктураРеквизитовФормы.мРежимПечати = Ложь;

		Если ПечатьУспешна и (ВидПечати = "ПечатьФайлZIP") Тогда

			СписокПечатаемыхЛистов = Форма.СтруктураРеквизитовФормы.СписокПечатаемыхЛистов;
			СписокПечатаемыхЛистов.Очистить();

			АдресВоВременномХранилищеZIP = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилищеZIP;
			ТипЭкспорта = Форма.СтруктураРеквизитовФормы.ТипЭкспорта;

			СохранитьФайлыZIP(АдресВоВременномХранилищеZIP, ТипЭкспорта, "ALKO_"
				+ Строка(Форма.НомерАлкоОтчета), Форма.ОтчетныйПериодСГодом, Форма.ОрганизацияНаименованиеСокращенное);

		КонецЕсли;

		Форма.СтруктураРеквизитовФормы.Вставить("ТипЭкспорта", Неопределено);

	ИначеЕсли ВидДлОперации = ВидДлОперацииСохранение Тогда

		ПослеСохраненияАЛКО(Форма);

	ИначеЕсли ВидДлОперации = ВидДлОперацииАвтоЗаполнение Тогда

		Форма.ЗагрузитьПодготовленныеДанныеАвтоЗаполненияНаСервере();
		Оповестить("ПослеВыполненияЗадания_АвтоЗаполнения", , Форма.УникальностьФормы);

	ИначеЕсли ВидДлОперации = ВидДлОперацииОчисткаОтМусора Тогда

		Форма.ПослеВыполненияЗадания_ОчисткаОтМусораНаСервере();
		
		Форма.ТекущееСостояние = "ОчисткаОтМусора";
		
		Если Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
			Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет";
		КонецЕсли;
		СохранитьНаКлиентеАЛКО(Форма);

	ИначеЕсли ВидДлОперации = ВидДлОперацииУдалениеДокументаОтчета Тогда

		ПослеВыполненияЗадания_УдалениеДокументаОтчетаАЛКО(Форма);

	ИначеЕсли ВидДлОперации = ВидДлОперацииСкопироватьТекущиеРегистры Тогда

	// Это не операция копирования отчета - копирование отчета реализовано
		// через операцию Восстановления.
		// Это копирование содержимого регистров в случае, если отчет записывается
		// с новым номером корректировки в режиме "создать новый".

		// Очищаем источник отчета и признак копирования.
		Форма.СтруктураРеквизитовФормы.мДокументИсточник = Неопределено;
		Форма.СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено;

		// Нужно очистить Журнал отчета посредством СохранитьРегистрыСведений(). 
		// В противном случае при следующем открытии, при восстановлении,
		// будут добавлены в СервисРегистровУдаленные все страницы,
		// так как при копировании писалась информация о добавлении страниц в Журнал.
		// При очистке от мусора это приведет к удалению всех данных.
		Если НЕ Форма.ВыполняемоеОповещениеПослеКопированияРегистров = Неопределено Тогда
		// Выполнится в ПослеСохраненияНаКлиенте().
			Форма.УниверсальноеОписаниеОповещения = Форма.ВыполняемоеОповещениеПослеКопированияРегистров;
		КонецЕсли;
		СохранитьРегистрыСведенийАЛКО(Форма);

	КонецЕсли;
	
	Форма.ОбновитьОтображениеДанных();

	Если ВидДлОперации = ВидДлОперацииВосстановление
			или ВидДлОперации = ВидДлОперацииСкопироватьТекущиеРегистры Тогда
		Возврат;
	КонецЕсли;

	Если ВидДлОперации = ВидДлОперацииСохранение
			и (НЕ Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет") Тогда
		Возврат;
	КонецЕсли;

	Если ВидДлОперации = ВидДлОперацииПересчет
			и (НЕ Форма.СтруктураРеквизитовФормы.ТекущееДействие = "ПересчитатьИтоги") Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

КонецПроцедуры

Процедура ВыполнитьДлительнуюОперациюПродолжениеАЛКО(Форма, ВидДлОперации,
		ВидПечати = Неопределено)

	Форма.ВидДлительнойОперации = ВидДлОперации;
	Форма.ОтменаОперации = Ложь;

	Если НЕ ВидПечати = Неопределено Тогда

		Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
			Форма.ОбщийПараметрПроцедур = Новый Структура();
		КонецЕсли;

		Форма.ОбщийПараметрПроцедур.Вставить("ВидПечати", ВидПечати);

	КонецЕсли;

	ЗаданиеВыполнено = Форма.ВыполнитьДлительнуюОперацию_НаСервере(ВидДлОперации, ВидПечати);

	Если ЗаданиеВыполнено Тогда

		ПослеВыполненияДлительнойОперацииАЛКО(Форма);
		Возврат;

	КонецЕсли;

	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания = Новый Структура;
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 2);

	МаксимальныйИнтервал = 0;
	КоэффициентУвеличенияИнтервала = 0;
	РегламентированнаяОтчетностьАЛКОВызовСервера.ОпределитьПараметрыОбработчикаОжиданияАЛКО(МаксимальныйИнтервал, КоэффициентУвеличенияИнтервала);

	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", МаксимальныйИнтервал);
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 2);
	Форма.ВладелецФормыДлитОпер.ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", КоэффициентУвеличенияИнтервала);

	Форма.ВладелецФормыДлитОпер.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", 1, Истина);

	ПоказатьФормуДлительнойОперации(Форма, ВидДлОперации, Форма.СтруктураРеквизитовФормы.ИдентификаторЗадания);

КонецПроцедуры

Функция ОпределитьОткрытуюФормуДлительнойОперации(ФормаОтчета)

	Возврат ОпределитьОткрытуюВспомогательнуюФормуОтчета(ФормаОтчета, "ОбщаяФорма.АЛКОДлительнаяОперация");

КонецФункции
#КонецОбласти

#Область СлужебныеПоказатьСтраницуМногострочногоРаздела

Процедура ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма)

	ПоказатьПоИндексу = Форма.ПоказатьПоИндексуПриВыводеСтраницы;
	НомерСтраницы = Форма.НомерСтраницыПриВыводеСтраницы;
	НаименованиеРаздела = Форма.НаименованиеРазделаПриВыводеСтраницы;

	// Ситуация возможна когда добавляется первая строка, но не сохраняется, поскольку строк нет
	// ПриАктивизацииСтроки не отрабатывает и ТекущееСостояние не скидывается.
	Если (Форма.ТекущееСостояние = "Копирование")
			или (Форма.ТекущееСостояние = "Добавление") Тогда
		Форма.ТекущееСостояние = "";
	КонецЕсли;

	Форма.ПоказатьСтраницуМногострочногоРазделаНаСервере(НомерСтраницы, НаименованиеРаздела, ПоказатьПоИндексу);

	Форма.АктивнаяСтраницаРаздела = Форма["ТаблицаСтраницы"
		+ НаименованиеРаздела][Форма.НомерАктивнойСтраницыМногострочногоРаздела];

	Форма.УправлениеМенюТаблицыФормыНаСервере(НаименованиеРаздела);

КонецПроцедуры

Процедура ПоказатьСтраницуНЕМногостраничногоРазделаАЛКО(Форма)

	НаименованиеРаздела = Форма.НаименованиеРазделаПриВыводеСтраницы;

	// Ситуация возможна когда добавляется первая строка, но не сохраняется, поскольку строк нет
	// ПриАктивизацииСтроки не отрабатывает и ТекущееСостояние не скидывается.
	Если (Форма.ТекущееСостояние = "Копирование")
			или (Форма.ТекущееСостояние = "Добавление") Тогда
		Форма.ТекущееСостояние = "";
	КонецЕсли;

	Форма.ПоказатьСтраницуНеМногостраничногоРазделаНаСервере(НаименованиеРаздела);

КонецПроцедуры

Процедура ВыполнитьПереходНаСтраницуРазделаАЛКО(Форма) Экспорт

	Элемент = Форма.Элементы.РазделыОтчета;

	ПроверитьСписокПараметровПереходаНаСтраницуРаздела(Форма);
	Если Форма.СписокПараметровПереходаНаСтраницуРаздела.Количество() = 0 Тогда
	// Нет информации для перехода.
		Возврат;
	КонецЕсли;

	Форма.АктивныйЭлементТаблицы = Неопределено;

	ЭлементПараметрыПереходаНаСтраницуРаздела = Форма.СписокПараметровПереходаНаСтраницуРаздела[0];
	ПараметрыПереходаНаСтраницуРаздела = ЭлементПараметрыПереходаНаСтраницуРаздела.Значение;

	// Сразу удаляем, если при следующем проходе список не пуст - значит щелкнули еще страничку.
	Форма.СписокПараметровПереходаНаСтраницуРаздела.Очистить();

	ПараметрыПереходаНаСтраницуРаздела.Свойство("ПоказатьПоИндексуПриВыводеСтраницы", Форма.ПоказатьПоИндексуПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("НомерСтраницыПриВыводеСтраницы", Форма.НомерСтраницыПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("НаименованиеРазделаПриВыводеСтраницы", Форма.НаименованиеРазделаПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("ЭлементПриВыводеСтраницы", Форма.ЭлементПриВыводеСтраницы);
	ПараметрыПереходаНаСтраницуРаздела.Свойство("ЭтоРазделОтчетаПриВыводеСтраницы", Форма.ЭтоРазделОтчетаПриВыводеСтраницы);

	Если Форма.УказываютсяНомераЛицензии Тогда
		ПараметрыПереходаНаСтраницуРаздела.Свойство("ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы", Форма.ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы);
	КонецЕсли;

	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда

		ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма);
		// Развернем если раздел.
		Если Форма.ЭтоРазделОтчета Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока, Истина);
		КонецЕсли;

	Иначе

	// НЕ Многостраничный раздел только один - Титульный.
		Форма.ТекущийРаздел = Форма.НаименованиеРазделаПриВыводеСтраницы;
		Форма.ТекущийНомерСтрокиТаблицыФормы = 0;

		ПоказатьСтраницуНЕМногостраничногоРазделаАЛКО(Форма);

	КонецЕсли;

	Если НЕ (Форма.ТекущееСостояние = "АктивизацияЯчейки"
			или Форма.ТекущееСостояние = "АктивизацияСтраницыРаздела"
			или Форма.ТекущееСостояние = "Активизация") Тогда

		Если Форма.СписокПараметровПереходаНаСтраницуРаздела.Количество() > 0 Тогда

		// На случай если успели выбрать страницу, пока открывалась страница.
			// Поскольку открытие идет с небольшой задержкой такая ситуация возможна.
			// Отказаться от задержки проблематично - не всегда успевают синхронизироваться 
			// данные Клиент-Сервер, особенно в случае Веб-клиента.
			ВыполнитьПереходНаСтраницуРазделаАЛКО(Форма);

		Иначе

			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		КонецЕсли;

	КонецЕсли;

	Если Форма.ТекущееСостояние = "АктивизацияЯчейки" Тогда

		Ячейка = Форма.СтруктураРеквизитовФормы.Ячейка;
		АктивизироватьЯчейкуАЛКО(Форма, Ячейка);

	ИначеЕсли (Элемент.ТекущаяСтрока = Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета)
			и (Форма.ТекущееСостояние = "АктивизацияСтраницыРаздела") Тогда

			// Проверяем наличие таблицы - РазделыОтчетаПриАктивизацииСтроки вызывается несколько раз,
		// в том числе до вывода ТаблицыФормы.
		ИмяАктивизируемогоРаздела = Форма.ЯчейкаАктивизации.Раздел;
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(ИмяАктивизируемогоРаздела, Форма.СтруктураРеквизитовФормы);
		ИмяТаблицыФормыАктивизируемогоРаздела = "ТаблицаФормыРаздела" + ИдГруппы;

		Если Форма.Элементы.Найти(ИмяТаблицыФормыАктивизируемогоРаздела) = Неопределено Тогда
		// Еще рано.
			Возврат;
		КонецЕсли;

		// Уже выполнен переход на нужную страницу многострочного раздела.
		АктивизироватьПолеАктивнойСтраницыСЗадержкойАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеМестоОсуществленияДеятельности

Процедура МестоОсуществленияДеятельностиНажатиеЗавершениеАЛКО(Результат,
		Форма) Экспорт

	Форма.ОбновитьМестоОсуществленияДеятельностиНаСервере(Результат);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеВводРеквизитовОП

Процедура ВводРеквизитовОП_АЛКО(Форма)

	Если Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные.Количество() = 0 Тогда
		Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;

	СведенияОбОП = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьПустуюСтруктуруСведенийОбОП();

	СохраненныеСведения = Неопределено;
	ИмяЭлементаСтруктуры = "СведенияОбОП";

	Если Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныеСведения) Тогда
		ЗаполнитьЗначенияСвойств(СведенияОбОП, СохраненныеСведения);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СведенияОбОП", СведенияОбОП);
	ПараметрыФормы.Вставить("ЭтоПБОЮЛ", Форма.СтруктураДанныхТитульный.ЭтоПБОЮЛ);
	ПараметрыФормы.Вставить("УникальностьФормы", Форма.УникальностьФормы);

	ИмяФормыВводРеквизитовОП = "ОбщаяФорма.АЛКОВводРеквизитовОП";

	ДополнительныеПараметры = Новый Структура("Форма, ИмяЭлементаСтруктуры, СведенияОбОП", Форма, ИмяЭлементаСтруктуры, СведенияОбОП);
	Оповещение = Новый ОписаниеОповещения("ВводРеквизитовОПЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	КлючУникальности = УникальностьФормы(Форма);

	Форма.Активизировать();
	Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = ОткрытьФорму(ИмяФормыВводРеквизитовОП, ПараметрыФормы, Форма, КлючУникальности, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

Процедура ВводРеквизитовОПЗавершение(РезультатВвода,
		ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;

	ИмяЭлементаСтруктуры = ДополнительныеПараметры.ИмяЭлементаСтруктуры;
	СведенияОбОП = ДополнительныеПараметры.СведенияОбОП;

	// Уберем форму из параметров.
	Параметры = Новый Структура("ИмяЭлементаСтруктуры, СведенияОбОП", ИмяЭлементаСтруктуры, СведенияОбОП);

	Форма.ВводРеквизитовОПЗавершениеНаСервере(РезультатВвода, Параметры);

КонецПроцедуры

Процедура ВводАдресаКонтрагентаЗавершениеНаКлиенте(Результат, ПредставлениеАдреса, ПолеСтруктурыАдреса,
				 Модифицированность = Ложь, СтруктураАдреса = Неопределено) Экспорт

	РегламентированнаяОтчетностьАЛКОВызовСервера.ВводАдресаКонтрагентаЗавершениеНаСервере(Результат, 
				ПредставлениеАдреса, ПолеСтруктурыАдреса, Модифицированность, СтруктураАдреса); 
		
КонецПроцедуры
#КонецОбласти

#Область СлужебныеЛицензии

Функция ОбновитьЦветСсылкиАЛКО(СтрЗначение, ЦветСтиляНезаполненныйРеквизит,
		ЦветСтиляЦветГиперссылкиБРО)

	ЦветТекста = ?(СтрЗначение = "Заполнить", ЦветСтиляНезаполненныйРеквизит, ЦветСтиляЦветГиперссылкиБРО);

	Возврат ЦветТекста;

КонецФункции

Процедура ОбновитьЦветСсылкиВидДеятельностиАЛКО(Форма)

	Форма.Элементы.ВидДеятельности.ЦветТекста = ОбновитьЦветСсылкиАЛКО(Форма.ВидДеятельности, Форма.ЦветСтиляНезаполненныйРеквизит, Форма.ЦветСтиляЦветГиперссылкиБРО);

КонецПроцедуры

Процедура СформироватьПредставлениеВидаДеятельностиАЛКО(Форма,
		ИмяРеквизитаЗначенияВидаДеятельности)

	Форма.ВидДеятельности = ?(ЗначениеЗаполнено(Форма[ИмяРеквизитаЗначенияВидаДеятельности]), Форма[ИмяРеквизитаЗначенияВидаДеятельности], "Заполнить");

	ОбновитьЦветСсылкиВидДеятельностиАЛКО(Форма);

КонецПроцедуры

Процедура ВыборДеятельностиПоЛицензииАЛКО(Форма)

	АктивнаяСтраницаРаздела = Форма.АктивнаяСтраницаРаздела;

	// Код деятельности
	Если АктивнаяСтраницаРаздела.ДополнительныеДанные.Количество() = 0 Тогда
		АктивнаяСтраницаРаздела.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;

	Если АктивнаяСтраницаРаздела.Данные.Количество() = 0 Тогда
		АктивнаяСтраницаРаздела.Данные.Добавить(Новый Структура);
	КонецЕсли;

	СохраненныйКодДеятельности = Неопределено;
	СохраненноеНазваниеДеятельности = Неопределено;
	ИмяЭлементаСтруктуры = "П000000000105";

	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненныйКодДеятельности);
	АктивнаяСтраницаРаздела.Данные[0].Значение.Свойство(ИмяЭлементаСтруктуры, СохраненноеНазваниеДеятельности);

	Если СохраненныйКодДеятельности = Неопределено Тогда
		СохраненныйКодДеятельности = "";
	КонецЕсли;
	Если СохраненноеНазваниеДеятельности = Неопределено Тогда
		СохраненноеНазваниеДеятельности = "";
	КонецЕсли;

	// Из списка.
	ИсходноеЗначениеКода = СохраненныйКодДеятельности;
	ИсходноеЗначениеНазвания = СохраненноеНазваниеДеятельности;
	КолонкаПоиска = "Код";
	ИмяКолонкиКод = "П000000000105";

	// Не из списка.
	ЗаголовокФормы = "Выбор вида деятельности";
	НадписьПоляЗначения = "Вид деятельности";
	НадписьПоляКод = "Код";
	МногострочныйРежимЗначения = Истина;
	ДлинаПоляКода = 4;
	ДлинаПоляЗначения = 40;

	ДополнительныеПараметры = Новый Структура("Форма, ИсходноеЗначениеКода, ИсходноеЗначениеНазвания", Форма, ИсходноеЗначениеКода, ИсходноеЗначениеНазвания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДеятельностиПоЛицензииЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("ПараметрыПриВключенномВыбореИзСписка", Новый Структура);
	ПараметрыВыборИзСписка = СтруктураПараметров.ПараметрыПриВключенномВыбореИзСписка;
	// Из списка.
	ПараметрыВыборИзСписка.Вставить("СвойстваПоказателей", Форма.СвойстваПоказателей);
	ПараметрыВыборИзСписка.Вставить("ИмяКолонкиКод", ИмяКолонкиКод);
	ПараметрыВыборИзСписка.Вставить("КолонкаПоиска", КолонкаПоиска);
	ПараметрыВыборИзСписка.Вставить("ИсходноеЗначение", ИсходноеЗначениеКода);

	СтруктураПараметров.Вставить("ПараметрыПриОтключенномВыбореИзСписка", Новый Структура);
	ПараметрыВыборНеИзСписка = СтруктураПараметров.ПараметрыПриОтключенномВыбореИзСписка;
	// Не из списка.
	ПараметрыВыборНеИзСписка.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыВыборНеИзСписка.Вставить("ИсходноеЗначениеКода", ИсходноеЗначениеКода);
	ПараметрыВыборНеИзСписка.Вставить("ИсходноеЗначениеПоКоду", ИсходноеЗначениеНазвания);
	ПараметрыВыборНеИзСписка.Вставить("НадписьПоляЗначения", НадписьПоляЗначения);
	ПараметрыВыборНеИзСписка.Вставить("НадписьПоляКод", НадписьПоляКод);
	ПараметрыВыборНеИзСписка.Вставить("МногострочныйРежимЗначения", МногострочныйРежимЗначения);
	ПараметрыВыборНеИзСписка.Вставить("ДлинаПоляКода", ДлинаПоляКода);
	ПараметрыВыборНеИзСписка.Вставить("ДлинаПоляЗначения", ДлинаПоляЗначения);
	ПараметрыВыборНеИзСписка.Вставить("УникальностьФормы", Форма.УникальностьФормы);

	ФлажокОтклАвтоВыборКодов = Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов;

	ВызватьФормуВыбораЗначенийАЛКО(Форма, ФлажокОтклАвтоВыборКодов, СтруктураПараметров, ОписаниеОповещения);

КонецПроцедуры

Процедура ВыборДеятельностиПоЛицензииЗавершение(РезультатВыбора,
		Параметры) Экспорт

	Форма = Параметры.Форма;
	Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИсходноеЗначениеКода = Параметры.ИсходноеЗначениеКода;
	ИсходноеЗначениеНазвания = Параметры.ИсходноеЗначениеНазвания;

	БылоИзменение = (СокрЛП(ИсходноеЗначениеКода) <> СокрЛП(РезультатВыбора.Код))
		или (СокрЛП(ИсходноеЗначениеНазвания) <> СокрЛП(РезультатВыбора.Название));

	ВыбранныйКод = СокрЛП(РезультатВыбора.Код);
	
	Если ЗначениеЗаполнено(ВыбранныйКод) И (НЕ РегламентированнаяОтчетностьАЛКОКлиентСервер.ВСтрокеВсеЦифры(ВыбранныйКод)) Тогда
	
		ПоказатьПредупреждение(, НСтр("ru='Код вида деятельности должен состоять из цифр!
											|Изменение вида деятельности не принято.'"));
		Возврат;
	
	КонецЕсли; 

	// По умолчанию считаем нелицензируемой.
	ЧислоВыбранныйКод = ВыбранныйКод;
	КодТребуетЛицензию = РегламентированнаяОтчетностьАЛКОКлиентСервер.КодТребуетЛицензию(ЧислоВыбранныйКод);
	
	Если БылоИзменение Тогда

	// Если выбран код больше 7 - т.е нелицензируемая деятельность
		// нужно дополнительно спросить, поскольку такой выбор влечет
		// удаление всех остальных введенных лицензий и ДопСтраниц.
		КоличествоСтраницЛицензий = Форма.ТаблицаСтраницыЛицензии.Количество();

		Если (КоличествоСтраницЛицензий > 1)
				и (НЕ КодТребуетЛицензию)
				и (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101') Тогда

				// В отчете нельзя совмещать лицензионную или нелицензионную деятельность.
			ТекстВопроса = НСтр("ru='Выбор этого вида деятельности приведет к удалению
				|всех страниц этого раздела, кроме текущей. 
				|Если в отчете есть нелицензионный вид деятельности, 
				|он должен быть единственным.
				|Продолжить?'");

			ДополнительныеПараметры = Новый Структура("Форма, ВыбранныйКод, ВыбранныйВидДеятельности", Форма, ВыбранныйКод, СокрЛП(РезультатВыбора.Название));
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыборДеятельностиПоЛицензииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Иначе

			Форма.Модифицированность = Истина;

			// Присваиваем новое значение кода деятельности
			ИмяЭлементаСтруктуры = "П000000000105";
			АктивнаяСтраницаРаздела = Форма.АктивнаяСтраницаРаздела;

			АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйКод);

			// Присваиваем вид деятельности			
			ВыбранныйВидДеятельности = ?(ВыбранныйКод = "", "", СокрЛП(РезультатВыбора.Название));
			АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйВидДеятельности);
			Форма[ИмяЭлементаСтруктуры] = ВыбранныйВидДеятельности;

			СформироватьПредставлениеВидаДеятельностиАЛКО(Форма, ИмяЭлементаСтруктуры);

			АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;
			АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

			// Коды меньше 8 - всегда лицензируемая деятельность.
			Форма.ОбработкаПолейСтраницыЛицензийНаСервере(КодТребуетЛицензию);

			// Видимость кнопок добавления-удаления страниц.	
			ТекущиеДанные = Форма.Элементы.РазделыОтчета.ТекущиеДанные;
			Родитель = ТекущиеДанные.ПолучитьРодителя();

			Форма.Элементы.КнопкаУдалитьСтраницуЛицензии.Видимость = (КоличествоСтраницЛицензий > 1)
				и (Родитель <> Неопределено);

			Если (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20131101')
					И (НЕ КодТребуетЛицензию) Тогда

					// Для НЕ лицензируемой деятельности нет смысла добавлять страницы
				// т.к. Лицензия может быть только одна.
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Ложь;
			Иначе
				Форма.Элементы.КнопкаДобавитьСтраницуЛицензии.Видимость = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ВопросВыборДеятельностиПоЛицензииЗавершение(РезультатВопроса,
		Параметры) Экспорт

	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Форма = Параметры.Форма;

	Форма.Модифицированность = Истина;

	// Присваиваем новое значение кода деятельности
	ВыбранныйКод = Параметры.ВыбранныйКод;
	ВыбранныйВидДеятельности = Параметры.ВыбранныйВидДеятельности;

	ИмяЭлементаСтруктуры = "П000000000105";

	АктивнаяСтраницаРаздела = Форма.АктивнаяСтраницаРаздела;

	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйКод);

	// Присваиваем вид деятельности			
	Форма[ИмяЭлементаСтруктуры] = ВыбранныйВидДеятельности;
	АктивнаяСтраницаРаздела.Данные[0].Значение.Вставить(ИмяЭлементаСтруктуры, ВыбранныйВидДеятельности);

	// Принудительно заставляем платформу обновить значения Списка
	АктивнаяСтраницаРаздела.Данные[0].Пометка = Ложь;
	АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

	// Удаляем все страницы Лицензий кроме активной
	// от последней к первой, поскольку выбрана деятельность не требующая лицензии,
	// а такая может быть только одна.
	КолСтраницЛицензий = Форма.ТаблицаСтраницыЛицензии.Количество();
	Для Инд = 0 По КолСтраницЛицензий - 1 Цикл

		ТекИндекс = КолСтраницЛицензий - 1 - Инд;
		СтраницаЛицензий = Форма.ТаблицаСтраницыЛицензии[ТекИндекс];

		Если СтраницаЛицензий.АктивнаяСтраница Тогда
			Продолжить;
		КонецЕсли;

		// Удаляем.
		Форма.УдалитьСтраницуНаСервере("Лицензии", ТекИндекс);

	КонецЦикла;

	// Страница после удаления только одна.
	Форма.НомерАктивнойСтраницыМногострочногоРаздела = 0;

	Форма.ОбработкаПолейСтраницыЛицензийНаСервере(Ложь);

	// Нужно пересчитать таблицу разделов.
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(Форма);

	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	Иначе
		Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ЛицензируемаяДеятельностьАЛКО(Форма)

	Если Форма.НомерАлкоОтчета = 1 или Форма.НомерАлкоОтчета = 9 Тогда
	// 1 и 9 алкоотчеты всегда лицензионная.
		Возврат Истина;
	ИначеЕсли Форма.НомерАлкоОтчета > 11 И Форма.НомерАлкоОтчета < 19 Тогда
	// 12 - 18 алкоотчеты - без лицензий.
		Возврат Ложь;
	КонецЕсли;

	Если НЕ Форма.УказываютсяНомераЛицензии Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Форма.ТаблицаСтраницыЛицензии.Количество() < 1
			Или Форма.ТаблицаСтраницыЛицензии[0].Данные.Количество() < 1
			Или Форма.ТаблицаСтраницыЛицензии[0].ДополнительныеДанные.Количество() < 1 Тогда
			// По умолчанию считаем нелицензируемой.
		Возврат Ложь;
	КонецЕсли;

	// НЕ нелицензируемые виды деятельности начинаются от значения кода 08.
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ЛицензируемаяДеятельностьАЛКО(Форма.ТаблицаСтраницыЛицензии, "П000000000105");

КонецФункции
#КонецОбласти

#Область СлужебныеВосстановитьУдаленныеСтраницы

Процедура КомандаВосстановитьУдаленныеСтраницыАЛКО(Форма)

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Восстановить");
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");

	ТекстВопроса = НСтр("ru='Внимание!
		|Восстановление будет возможно только для тех страниц, которые были удалены после 
		|последнего запуска процедуры ""Очистить регистры от ненужной информации""!
		|
		|Будут восстановлены лишь данные таблиц формы, реквизиты Обособленных подразделений(ОП)
		|и прочие реквизиты вне таблиц в восстановленных страницах будут не заполненны.
		|
		|Восстановленные страницы будут добавлены в конец списка страниц по разделам.
		|
		|Страницы разделов ""Сведения о лицензиях"" и ""Адреса мест осуществления деятельности""
		|восстанавливаться не будут.
		|
		|По завершении восстановления отчет будет сохранен.
		|Ненужные страницы можно будет опять удалить.
		|
		|Рекомендуется скопировать отчет перед выполнением восстановления,
		|поскольку может быть восстановлено большое количество страниц, разбираться
		|в которых, не имея исходный вариант, может быть сложно.'");

	ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановитьУдаленныеСтраницыЗавершениеАЛКО", ЭтотОбъект, Форма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(0).Значение, "Восстановление удаленных страниц");

КонецПроцедуры

Процедура ВосстановитьУдаленныеСтраницыЗавершениеАЛКО(РезультатВопроса,
		Форма) Экспорт

	Ответ = РезультатВопроса;

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Форма.ВосстановитьУдаленныеСтраницыНаСервере();

		// Нужно обновить данные в таблице РазделыОтчета.
		ПослеВыполненияЗадания_АвтоЗаполненияАЛКО(Форма);

		ВыполнитьПослеОтображенияСтраницыОтчета(Форма, "ПослеВосстановленияУдаленныхСтраниц");

	Иначе
	// Отмена.
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПослеВосстановленияУдаленныхСтраницАЛКО(Форма) Экспорт

// Нужно пересчитать Итоги в восстановленных страницах.
	ОписаниеОповещения = Новый ОписаниеОповещения("ПересчетИтоговПослеСохраненияАЛКО", ЭтотОбъект, Форма);

	// Фиксируем изменения. Если этого не сделать, в случае отказа от сохранения при закрытии
	// и последующем восстановлении отчета возможны проблемы.
	Форма.ПользовательНажалСохранитьОтчет = Истина;
	СохранитьНаКлиентеАЛКО(Форма, , ОписаниеОповещения);

КонецПроцедуры

Процедура ПересчетИтоговПослеСохраненияАЛКО(Результат, Форма) Экспорт

	Если НЕ Форма.Модифицированность Тогда
		ПересчетИтогов_ДлительнаяОперация(Форма);
	Иначе
	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение пересчета итогов невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеОчистить

Процедура ОчиститьТекущуюСтраницуАЛКО(Форма)

	Раздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(Раздел, Форма.СтруктураРеквизитовФормы);

	ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИдГруппы", ИдГруппы);
	ДополнительныеПараметры.Вставить("Раздел", Раздел);
	ДополнительныеПараметры.Вставить("ИндексСтраницы", ИндексСтраницы);

	Оповещение = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(Форма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Раздел, Оповещение);

КонецПроцедуры

Процедура ОчиститьТекущуюСтраницуЗавершениеАЛКО(Результат = Неопределено,
		Параметры) Экспорт

	Форма = Параметры.Форма;
	ИдГруппы = Параметры.ИдГруппы;
	Раздел = Параметры.Раздел;
	ИндексСтраницы = Параметры.ИндексСтраницы;

	Если (НЕ ИдГруппы = Неопределено) и (НЕ ИндексСтраницы = Неопределено) Тогда

		Если НЕ Раздел = "Титульный" Тогда
		// Нужно вывести страницу чтобы сменился источник данных Динамического списка.
			ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ВопросОчиститьЗавершениеАЛКО(РезультатВопроса,
		ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Форма.ОчиститьНаСервере();

		Форма.Модифицированность = Истина;

		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Иначе
			ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеОчиститьОтМусора

Процедура КомандаОчиститьРегистрыОтМусораАЛКО(Форма)

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Частичная очистка");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Полная очистка");
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Отмена");

	ПолужирныйШрифт = Новый Шрифт(, , Истина);
	ПолужирныйНаклонныйШрифт = Новый Шрифт(, , Истина, Истина);

	ТекстВнимание = Новый ФорматированнаяСтрока(НСтр("ru='Внимание!'"), ПолужирныйНаклонныйШрифт, WebЦвета.Красный);
	ТекстПредупреждение = Новый ФорматированнаяСтрока(НСтр("ru='После применения данной процедуры восстановление удаленных страниц станет невозможным!'"), ПолужирныйНаклонныйШрифт);
	ТекстПредупреждение2 = Новый ФорматированнаяСтрока(НСтр("ru='Если Отчет изменен, перед очисткой изменения будут сохранены!'"), ПолужирныйНаклонныйШрифт);
	ТекстВнимание = Новый ФорматированнаяСтрока(ТекстВнимание, Символы.ПС, ТекстПредупреждение, Символы.ПС, ТекстПредупреждение2, Символы.ПС, Символы.ПС);

	ТекстЧастичнаяОчистка = Новый ФорматированнаяСтрока(НСтр("ru='Частичная очистка'"), ПолужирныйШрифт);
	ТекстЧастичнаяОчистка = Новый ФорматированнаяСтрока(ТекстЧастичнаяОчистка, НСтр("ru=' - очистка регистров от данных удаленных страниц.
		|Может выполняться длительное время, если удаленные страницы содержали большое количество строк.
		|
		|'"));

	ТекстПолнаяОчистка = Новый ФорматированнаяСтрока(НСтр("ru='Полная очистка'"), ПолужирныйШрифт);
	ТекстПолнаяОчистка = Новый ФорматированнаяСтрока(ТекстПолнаяОчистка, НСтр("ru=' - очистка регистров от данных удаленных страниц и 
		|дополнительно удаляются строки, помеченные на удаление в активных (неудаленных) страницах.
		|Выполняется дольше частичной очистки. 
		|
		|Если помеченных на удаление строк немного, рекомендуется частичная очистка.
		|
		|'"));

	ТекстЗавершение = НСтр("ru='Очистка не влияет на работоспособность отчета, она необходима лишь в целях уменьшения 
		|размера информационной базы, особенно если база файловая.
		|
		|Для файловой ИБ возможна выдача ошибок о превышении максимального размера 
		|внутреннего файла 1Cv8.1CD в Журнале регистрации при операциях Заполнения, 
		|Копирования отчета или при интерактивном добавлении строк табличной части.
		|Если это произошло - необходимо полностью удалить ненужные отчеты (не только пометить на удаление), 
		|а в тех отчетах, которые необходимы, выполнить данную процедуру очистки.'");

	ТекстВопроса = Новый ФорматированнаяСтрока(ТекстВнимание, ТекстЧастичнаяОчистка, ТекстПолнаяОчистка, ТекстЗавершение);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьРегистрыОтМусораЗавершение", ЭтотОбъект, Форма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(0).Значение, "Выберите вариант очистки");

КонецПроцедуры

Процедура ОчиститьРегистрыОтМусораЗавершение(РезультатВопроса, Форма) Экспорт

	Ответ = РезультатВопроса;

	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
		Форма.ОбщийПараметрПроцедур = Новый Структура();
	КонецЕсли;
	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;

	Если Ответ = КодВозвратаДиалога.Да Тогда
	// Частичная очистка.
		ОбщийПараметрПроцедур.Вставить("УдалятьПомеченныеНаУдаление", Ложь);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
	// Полная очистка.
		ОбщийПараметрПроцедур.Вставить("УдалятьПомеченныеНаУдаление", Истина);
	Иначе
	// Отмена.
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ОчисткаОтМусораПослеСохраненияАЛКО", ЭтотОбъект, Форма);

	ЗакрытьФормуОшибокПриИзмененииОтчета(Форма);

	Если Форма.Модифицированность Тогда
		Форма.ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиентеАЛКО(Форма, , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

Процедура ОчисткаОтМусораПослеСохраненияАЛКО(Результат, Форма) Экспорт

	Если НЕ Форма.Модифицированность Тогда
		ОчисткаОтМусора_ДлительнаяОперацияАЛКО(Форма);
	Иначе
	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение очистки невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура ОчисткаОтМусора_ДлительнаяОперацияАЛКО(Форма)

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОчисткаРегистровСведенийОтМусора");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеАктивизироватьПоле

Процедура АктивизироватьПолеАктивнойСтраницыСЗадержкойАЛКО(Форма)

	ВыполнитьПослеОтображенияСтраницыОтчета(Форма, "АктивизироватьПолеАктивнойСтраницы");

КонецПроцедуры

Процедура ПереходНаСтрокуТаблицыФормыАЛКО(Форма, ИдГруппы, НомерСтроки,
		ИмяПоля = Неопределено)

	Если НЕ ЗначениеЗаполнено(НомерСтроки) Тогда
	//Ничего не делаем - нет данных.
		Возврат;
	КонецЕсли;

	ПерешлиУспешно = Форма.ПереходНаСтрокуТаблицыФормыНаСервере(ИдГруппы, НомерСтроки, ИмяПоля);

	ТаблицаФормыРаздела = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];
	ТаблицаФормыРаздела.Обновить();

	Если ПерешлиУспешно
			и (Форма.ТекущееСостояние = "АктивизацияЯчейкиТаблицы") Тогда
		
		Если Форма.ВходВРедактированиеПриАктивизации Тогда

			Если НЕ ТаблицаФормыРаздела.ТекущиеДанные = Неопределено Тогда
				ТаблицаФормыРаздела.ИзменитьСтроку();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Сбрасываем состояние в любом случае.
	Форма.ТекущееСостояние = "";

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПересчетИтогов

Процедура ПересчетИтогов_ДлительнаяОперация(Форма)

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПересчетИтогов");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры

Процедура ПослеВыполненияЗадания_ПересчетИтоговАЛКО(Форма)

	АдресВоВременномХранилище = Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище;

	Если НЕ ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		Возврат;
	КонецЕсли;

	СтруктураРезультата = ПолучитьИзвременногоХранилища(АдресВоВременномХранилище);
	УдалитьИзВременногоХранилища(АдресВоВременномХранилище);

	Если НЕ ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	// нужно загрузить результаты пересчета ИТОГОВ в Доп.данные
	Для Каждого Результат Из СтруктураРезультата Цикл

		ИдГруппы = Результат.Ключ;
		МассивРезультата = Результат.Значение;

		Раздел = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьРазделПоИдГруппыАЛКО(ИдГруппы, Форма.СтруктураРеквизитовФормы);
		Если Раздел = Неопределено Тогда
		// На всякий случай. Но эта ситуация не должна воспроизводиться.
			Продолжить;
		КонецЕсли;

		ТаблицаСтраницРаздела = Форма["ТаблицаСтраницы" + Раздел];

		ТекущийИндекс = -1;
		Для Каждого СписокРезультата Из МассивРезультата Цикл

			ТекущийИндекс = ТекущийИндекс + 1;
			СтраницаРаздела = ТаблицаСтраницРаздела[ТекущийИндекс];

			Для Каждого ЭлементСпискаИтогов Из СписокРезультата Цикл

				ИмяКонтролируемогоПоля = ЭлементСпискаИтогов.Представление;
				ЗначениеИтога = ЭлементСпискаИтогов.Значение;
				СтраницаРаздела.ДополнительныеДанные[0].Значение.Вставить(ИмяКонтролируемогоПоля, ЗначениеИтога);

			КонецЦикла;
			СтраницаРаздела.ДополнительныеДанные[0].Пометка = Ложь;

		КонецЦикла;

	КонецЦикла;

	Форма.Модифицированность = Истина;

	// Нужно обновить текущую страницу
	Если Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ИмяТекРаздела = "Титульный";
	Иначе

		ИмяТекРаздела = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		ИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИдГруппыПоРазделуАЛКО(ИмяТекРаздела, Форма.СтруктураРеквизитовФормы);

	КонецЕсли;

	Если НЕ ИмяТекРаздела = "Титульный" Тогда

		ЭлементТаблицыФормы = Форма.Элементы["ТаблицаФормыРаздела" + ИдГруппы];
		ЭлементТаблицыФормы.Обновить();
		Форма.ВывестиИтогиТабличногоПоляРазделаНаСервере(ИдГруппы);

	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.Вставить("НужноПересчитатьИтоги", Ложь);
	
	// Фиксируем изменения. Если этого не сделать, в случае отказа от сохранения при закрытии
	// и последующем восстановлении отчета возможны проблемы.
	Форма.ПользовательНажалСохранитьОтчет = Истина;
	СохранитьНаКлиентеАЛКО(Форма);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПечатьФайлZIP

Процедура ПечатьФайлZIPВыборФорматаАЛКО(Форма)

	Оповещение = Новый ОписаниеОповещения("ПечатьФайлZIPзавершениеАЛКО", ЭтотОбъект, Форма);

	СписокТиповЭкспорта = Новый СписокЗначений;
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.MXL, "Табличный документ (*.mxl)");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.XLSX, "Лист Excel 2007-... (*.xlsx)");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.HTML, "Документ HTML (*.html)");
	СписокТиповЭкспорта.Добавить(ТипФайлаТабличногоДокумента.PDF, "Документ PDF (*.pdf)");

	СписокТиповЭкспорта.ПоказатьВыборЭлемента(Оповещение, "Выберите формат файлов в архиве");

КонецПроцедуры

Процедура ПечатьФайлZIPзавершениеАЛКО(ТипЭкспорта, Форма) Экспорт

	Если ТипЭкспорта = Неопределено Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.Вставить("ТипЭкспорта", ТипЭкспорта.Значение);
	ПечатьАЛКО(Форма, "ПечатьФайлZIP");

КонецПроцедуры

Процедура ВопросПродолжитьПечатьФайлZIPЗавершениеАЛКО(РезультатВопроса,
		Форма) Экспорт

	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	ПечатьФайлZIPВыборФорматаАЛКО(Форма);

КонецПроцедуры

// Сохраняет ZIP архив файлов табличного документа в выбранном пользователем формате, 
// предварительно сохраненный во временном хранилище, на клиентском компьютере.
// При этом определяется имя файла по умолчанию для сохраняемого файла на основании переданных реквизитов 
// отчета.
//
// Параметры:
//		АдресВоВременномХранилищеZIP	- Строка - 	Адрес временного хранилища, 
//										в котором должен быть помещен ZIP архив.
//		ТипЭкспорта						- ТипФайлаТабличногоДокумента - выбранный пользователем вариант 
//										формата файлов для сохранения табличного документа.
//		СокращенноеИмяОтчета			- Строка - Очень короткое имя отчета, для алкоотчетов например 
//										это "ALKO_01" дли Приложения 1 или "ALKO_11" для Приложения 11.
//		ОтчетныйПериодСГодом			- Строка - Строка вида "2квартал2016года", отражающая отчетный период отчета.
//		ОрганизацияНаименованиеСокращенное - Строка - Сокращенное наименование организации-декларанта отчета.
//								
//
Процедура СохранитьФайлыZIP(АдресВоВременномХранилищеZIP, ТипЭкспорта,
		СокращенноеИмяОтчета, ОтчетныйПериодСГодом,
		ОрганизацияНаименованиеСокращенное)

	СоответсвиеРасширений = Новый Соответствие;

	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.PDF, ".pdf");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLS, ".xls");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.XLSX, ".xlsx");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.MXL, ".mxl");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.DOCX, ".docx");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.ODS, ".ods");
	СоответсвиеРасширений.Вставить(ТипФайлаТабличногоДокумента.HTML, ".html");

	Расширение = СоответсвиеРасширений.Получить(ТипЭкспорта);

	СтрОтчПериод = Стрзаменить(ОтчетныйПериодСГодом, " ", "");
	// убираем все символы которых не должно быть в имени файла	
	СокращенноеНаименованиеОрг = ОрганизацияНаименованиеСокращенное;

	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, " ", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ".", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ",", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ":", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ";", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "?", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "!", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "№", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "#", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "@", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "~", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "`", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, """", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "'", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "/", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "\", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "|", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "[", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "]", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "{", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "}", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "+", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "*", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "&", "-");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "^", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "=", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "%", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "$", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, ">", "");
	СокращенноеНаименованиеОрг = Стрзаменить(СокращенноеНаименованиеОрг, "<", "");

	ИмяКонечногоФайла = СокращенноеИмяОтчета + "_" + СокращенноеНаименованиеОрг
		+ "_" + СтрОтчПериод + "_(" + Сред(Расширение, 2) + ").zip";

	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилищеZIP) Тогда

		ПолучитьФайл(АдресВоВременномХранилищеZIP, ИмяКонечногоФайла, Истина);

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеДлительныеОперации

Процедура УстановитьДляФормыДействие(СписокДействий, СтруктураФормыАлкоОтчета,
		Действие = Неопределено, Разрешение = Истина)

	Если НЕ ТипЗнч(СписокДействий) = Тип("СписокЗначений") Тогда
		ВызватьИсключение НСтр("ru = 'В процедуру УстановитьДляФормыДействие() передан неверный список действий!'");
	КонецЕсли;

	Если ЗначениеЗаполнено(Действие)
			И (НЕ СписокДействий.НайтиПоЗначению(Действие) = Неопределено) Тогда
		СтруктураФормыАлкоОтчета.Вставить(Действие, Разрешение);
	ИначеЕсли ЗначениеЗаполнено(Действие) Тогда
		ВызватьИсключение НСтр("ru = 'В процедуру УстановитьДляФормыДействие() передано неверное действие!'");
	Иначе

	// Не заполнено действие. Заполняем все.
		Для каждого ЭлементСписка Из СписокДействий Цикл

			ДействиеСписка = ЭлементСписка.Значение;
			СтруктураФормыАлкоОтчета.Вставить(ДействиеСписка, Разрешение);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПечать

Процедура ПоказатьБланкАЛКО(Форма)

	Отказ = Ложь;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершениеАЛКО", ЭтотОбъект, Форма);

	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);

КонецПроцедуры

Процедура ПоказатьБланкЗавершениеАЛКО(Отказ, Форма) Экспорт

	Если Отказ Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	ПечатьАЛКО(Форма, "ПоказатьБланк");

КонецПроцедуры

Процедура ПечатьАЛКО(Форма, ВидПечати, НеИзФормыОтчета = Ложь)

// Все параметры передаются через структуру ОбщийПараметрПроцедур			
	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
		Форма.ОбщийПараметрПроцедур = Новый Структура;
	КонецЕсли;

	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;
	ОбщийПараметрПроцедур.Вставить("ВидПечати", ВидПечати);

	Оповещение = Новый ОписаниеОповещения("ПечатьПослеСохраненияАЛКО", ЭтотОбъект, Форма);

	Если Форма.Модифицированность Тогда
		Форма.ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиентеАЛКО(Форма, , Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры

Процедура ПечатьПослеСохраненияАЛКО(Отказ, Форма) Экспорт

	Если Форма.Модифицированность Тогда

	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение печати невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), Форма.Заголовок), , , БиблиотекаКартинок.Печать);

	Если НЕ Форма.ПроверкаГотовностиПечатиНаСервере() Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	Печать_ДлительнаяОперацияАЛКО(Форма);

КонецПроцедуры

Процедура Печать_ДлительнаяОперацияАЛКО(Форма)

	Если Форма.Открыта() И Форма.Модифицированность Тогда

	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение печати невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

	ВидПечати = Форма.ОбщийПараметрПроцедур.ВидПечати;

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации, ВидПечати);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеФормаНастроек

Процедура ОткрытьФормуНастроекАЛКО(Форма)

	ОткрытьФормуВыбораСтраницОтчетаАЛКО(Форма, "ВыбратьДляНастройки");

КонецПроцедуры

Процедура ОткрытьФормуВыбораСтраницОтчетаАЛКО(Форма, ВариантВыбора)

	Перем НомерСтраницыРаздела;

	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийРаздел) Тогда

		Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
			Форма.ТекущийРаздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
			НомерСтраницыРаздела = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		КонецЕсли;

	Иначе
		НомерСтраницыРаздела = Форма.НомерАктивнойСтраницыМногострочногоРаздела + 1;
	КонецЕсли;

	мПараметры = Новый Структура;

	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("Выгрузка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);

	// Отключаем показ галочки отключения авторасчета
	Если Форма.НомерАлкоОтчета = 13 или Форма.НомерАлкоОтчета = 14 или Форма.НомерАлкоОтчета = 15
		ИЛИ Форма.НомерАлкоОтчета = 27 или Форма.НомерАлкоОтчета = 28 или Форма.НомерАлкоОтчета = 29
		Тогда

		мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);

	КонецЕсли;

	Если Форма.СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", Форма.СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", Форма.СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);

	ОткрытьФормуВыбораСтраницАЛКО(Форма, ПараметрыФормы, Форма.ТекущийРаздел, НомерСтраницыРаздела);

КонецПроцедуры

Процедура ОткрытьФормуВыбораСтраницАЛКО(Форма, ПараметрыФормы, ТекущийРаздел,
		НомерСтраницыРаздела)

	Если НЕ ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	КлючУникальности = УникальностьФормы(Форма);

	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, Форма, КлючУникальности);

	Если ФормаНастройкиОтчета.Открыта() Тогда

		ФормаНастройкиОтчета.Закрыть();
		ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, Форма, КлючУникальности);

	КонецЕсли;

	Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(Форма.мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);

	ЗначениеАвторасчета = Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеАвтоВыборКодов = Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов;

	ДополнительныеПараметры = Новый Структура("Форма, ЗначениеАвторасчета, ЗначениеАвтоВыборКодов, НомерСтраницыРаздела, ТекущийРаздел", Форма, ЗначениеАвторасчета, ЗначениеАвтоВыборКодов, НомерСтраницыРаздела, ТекущийРаздел);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);

	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;

	Форма.Активизировать();
	Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = ОткрытьФорму(ФормаНастройкиОтчета);

КонецПроцедуры

Процедура ОткрытьФормуВыбораСтраницЗавершениеАЛКО(РезультатВыбора,
		ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;

	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеАвтоВыборКодов = ДополнительныеПараметры.ЗначениеАвтоВыборКодов;
	НомерСтраницыРаздела = ДополнительныеПараметры.НомерСтраницыРаздела;
	ТекущийРаздел = ДополнительныеПараметры.ТекущийРаздел;

	ФлНужноВывестиСтраницуРаздела12 = Ложь;
	ФлНужноПересчитатьРазделы12 = Ложь;

	Форма.Модифицированность = Истина;

	флЗначенияИдентичны = Истина;

	Для Индекс = 0 По Форма.мДеревоСтраницОтчета.ПолучитьЭлементы().Количество()
		- 1 Цикл

		Если НЕ Форма.мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ЗначениеАвторасчета <> Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда

		Форма.ИзменитьТаблицуВариантовЗаполненияНаСервере();

		// Нужно вывести текущую страницу с новыми настройками вариантов заполнения.
		Если ТекущийРаздел = "Раздел1" или ТекущийРаздел = "Раздел2"
				или ТекущийРаздел = "Декларация" или ТекущийРаздел = "Возвраты" Тогда

			ФлНужноВывестиСтраницуРаздела12 = Истина;

		КонецЕсли;

		// Если раньше флажок ОтклАвтоРасчет был взведен, значит авторасчет был отключен,
		// а теперь его включили.
		// Поэтому в этой ситуации надо пересчитать данные.
		ФлНужноПересчитатьРазделы12 = ЗначениеАвторасчета;

	КонецЕсли;

	Если ЗначениеАвтоВыборКодов <> Форма.СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
	// Нужно вывести текущую страницу с новыми настройками вариантов заполнения.
		Если ТекущийРаздел = "Раздел1" или ТекущийРаздел = "Раздел2"
				или ТекущийРаздел = "Декларация" или ТекущийРаздел = "Возвраты" Тогда
			ФлНужноВывестиСтраницуРаздела12 = Истина;
		КонецЕсли;
	КонецЕсли;

	// Управляем видимостью страниц основной панели формы.
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(Форма);

	Если НЕ ФлЗначенияИдентичны Тогда

		РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(Форма);

		Если НЕ ТекущийРаздел = Неопределено Тогда

		// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРаздел);

			Если НЕ НайденнаяСтрока = Неопределено
					И НЕ НомерСтраницыРаздела = Неопределено
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда

				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРаздела);

			КонецЕсли;

			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ФлНужноПересчитатьРазделы12 Тогда

		ПересчетИтогов_ДлительнаяОперация(Форма);

	КонецЕсли;

	Если ФлНужноВывестиСтраницуРаздела12 Тогда

		Форма.ПоказатьПоИндексуПриВыводеСтраницы = Истина;
		Форма.НомерСтраницыПриВыводеСтраницы = НомерСтраницыРаздела - 1;
		Форма.НаименованиеРазделаПриВыводеСтраницы = ТекущийРаздел;

		ПоказатьСтраницуМногострочногоРазделаАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеФормаНавигацииПоОшибкам

Процедура ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СохраненныйОтчет", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);

	НаименованиеДекларации = Форма.Заголовок;
	ПараметрыФормы.Вставить("НазваниеДекларации", НаименованиеДекларации);

	ПараметрыФормы.Вставить("АдресХранилищаПредставленияОшибок", Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);

	Форма.СтруктураРеквизитовФормы.Вставить("ПараметрыФормыОшибок", ПараметрыФормы);

	Если НЕ Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		Оповестить("ОткрытьФормуНавигацииПоОшибкам", , Форма.УникальностьФормы);
	Иначе
		ОткрытьФормуНавигацииПоОшибкамБезПараметровАЛКО(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьФормуНавигацииПоОшибкамБезПараметровАЛКО(Форма) Экспорт

	Перем ПараметрыФормы;

	Форма.СтруктураРеквизитовФормы.Свойство("ПараметрыФормыОшибок", ПараметрыФормы);
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы.Вставить("УникальностьФормы", Форма.УникальностьФормы);

	ФормаОтчетаОткрыта = Форма.Открыта();
	ПараметрыФормы.Вставить("ФормаОтчетаОткрыта", ФормаОтчетаОткрыта);

	КлючУникальности = УникальностьФормы(Форма);

	ФормаНавигацииПоОшибкам = ОпределитьОткрытуюФормуНавигацииПоОшибкам(Форма);

	Если НЕ ФормаНавигацииПоОшибкам = Неопределено Тогда

	// Уже есть форма навигации - ее надо закрыть.
		ФормаНавигацииПоОшибкам.Модифицированность = Ложь;
		ФормаНавигацииПоОшибкам.Закрыть();

	КонецЕсли;

	ФормаНавигацииПоОшибкам = ОткрытьФорму("ОбщаяФорма.АЛКОФормаСообщенийОбОшибках", ПараметрыФормы, , КлючУникальности);

	Форма.ФормаОшибок = ФормаНавигацииПоОшибкам;

КонецПроцедуры

Функция ОпределитьОткрытуюФормуНавигацииПоОшибкам(ФормаОтчета) Экспорт

	Возврат ОпределитьОткрытуюВспомогательнуюФормуОтчета(ФормаОтчета, "ОбщаяФорма.АЛКОФормаСообщенийОбОшибках");

КонецФункции

Функция ОпределитьОткрытуюВспомогательнуюФормуОтчета(ФормаИлиДокументОтчета,
		ИмяВспомогательнойФормы) Экспорт

	Если НЕ (РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(ФормаИлиДокументОтчета)	
			ИЛИ ТипЗнч(ФормаИлиДокументОтчета) = Тип("ДокументСсылка.РегламентированныйОтчет")) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ ТипЗнч(ИмяВспомогательнойФормы) = Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ПустаяСтрока(ИмяВспомогательнойФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Определяем форму текущего активного окна	искомой формы
	// открытой для отчета, к которому принадлежит форма.

	// Ключ уникальности открытых из отчета форм всегда документ отчета,
	// это позволяет связывать формы с отчетом даже если он не открыт.
	Если РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(ФормаИлиДокументОтчета) Тогда
		КлючУникальности = УникальностьФормы(ФормаИлиДокументОтчета);
	Иначе
		КлючУникальности = ФормаИлиДокументОтчета;
	КонецЕсли;

	Если ТипЗнч(КлючУникальности) = Тип("Булево") Тогда
	// В форме отчета еще не определен документ, рано вызвали данную функцию.
		Возврат Неопределено;
	КонецЕсли;

	// Ищем среди открытых форм.	
	ОкнаПриложений = ПолучитьОкна();
	Для Каждого ОкноПриложения Из ОкнаПриложений Цикл

		МассивФорм = ОкноПриложения.Содержимое;
		КолФорм = МассивФорм.Количество();

		Если КолФорм > 0 Тогда
			Для Инд = 0 По КолФорм - 1 Цикл

				ТекФорма = МассивФорм[Инд];
				ИмяТекФормы = ТекФорма.ИмяФормы;
				Если ВРег(ИмяТекФормы) = ВРег(ИмяВспомогательнойФормы) Тогда

				// Это форма с нужным именем, проверяем на совпадение по уникальности,
					// чтобы убедиться что она относится именно к нужному отчету.
					Если ТекФорма.КлючУникальности = КлючУникальности Тогда
						Возврат ТекФорма;
					КонецЕсли;

					// Работает для Заявлений о корректировке, созданных из алкоотчетов по ссылке Заполнить.
					Если СтрНайти(ИмяВспомогательнойФормы, "РегламентированныйОтчетАлко") > 0 Тогда

						Если ТипЗнч(ТекФорма.СтруктураРеквизитовФормы.КлючУникальности) = Тип("ДокументСсылка.РегламентированныйОтчет")
								И ТекФорма.СтруктураРеквизитовФормы.КлючУникальности = КлючУникальности Тогда
							Возврат ТекФорма;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции
#КонецОбласти

#Область СлужебныеРасшифровать

Процедура РасшифроватьАЛКО(Форма)

	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", Форма.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);

	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.")
		- 1), 7), Сред(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма.")
		+ 7), ИДИменПоказателей, ПараметрыОтчета)
КонецПроцедуры
#КонецОбласти

#Область СлужебныеТитульный

Процедура ОрганизацияОткрытиеЗавершениеАЛКО(Результат, Форма) Экспорт

	Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = Неопределено;

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Обновить");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");

	ТекстВопроса = НСтр("ru='Обновить данные организации в отчете?'");

	ОписаниеОповещения = Новый ОписаниеОповещения("ОрганизацияОткрытиеОбновлениеАЛКО", ЭтотОбъект, Форма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);

КонецПроцедуры

Процедура ОрганизацияОткрытиеОбновлениеАЛКО(РезультатВопроса, Форма) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Форма.ОбновитьНаСервере();
	КонецЕсли;

КонецПроцедуры

Процедура НажатиеГиперссылкиАЛКО(Форма, Элемент, РежимОткрытияОкна,
		СтандартнаяОбработка = Ложь)

	СтандартнаяОбработка = Ложь;

	ИмяЭлементаСсылки = Элемент.Имя;

	КлючУникальности = УникальностьФормы(Форма);

	ЗначениеСсылка = Неопределено;
	ИмяФормыОбъекта = Форма.ПолучитьИмяФормыОбъектаЗначенияЭлементаФормы(ИмяЭлементаСсылки, ЗначениеСсылка);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗначениеСсылка);

	Если РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца Тогда
		Форма.Активизировать();
	КонецЕсли;

	ОткрытаяФорма = ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, Форма, КлючУникальности, , , , РежимОткрытияОкна);

	Если РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца Тогда
		Форма.ОткрытаяФормаПотомокСБлокировкойВладельца = ОткрытаяФорма;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроверкаВыгрузки

Процедура НачалоПроверкиВыгрузкиАЛКО(Форма)

	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершениеАЛКО", ЭтотОбъект, Форма);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);

КонецПроцедуры

Процедура ПроверитьВыгрузкуЗавершениеАЛКО(Отказ, Форма) Экспорт

	Если Отказ Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	ПроверитьВыгрузкуОтчетаАЛКО(Форма);

КонецПроцедуры

Процедура ПроверитьВыгрузкуОтчетаАЛКО(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.Организация) Тогда

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Проверка выгрузки невозможна.'");
		Сообщение.Сообщить();

		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;

	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаПослеСохраненияАЛКО", ЭтотОбъект, Форма);

	Если Форма.Модифицированность Тогда
		Форма.ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиентеАЛКО(Форма, , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВыгрузкуОтчетаПослеСохраненияАЛКО(Результат, Форма) Экспорт

	Если НЕ Форма.Модифицированность Тогда
		ПроверитьВыгрузкуОтчета_ДлительнаяОперацияАЛКО(Форма);
	Иначе
	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение проверки выгрузки невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВыгрузкуОтчета_ДлительнаяОперацияАЛКО(Форма)

	Если Форма.Открыта() И Форма.Модифицированность Тогда

	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение проверки выгрузки невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры

Процедура ПослеВыполненияЗадания_ПроверкиВыгрузкиАЛКО(Форма)

	РезультатПроверки = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьРезультатПроверкиОтчетаАЛКО(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);

	// 				- 0 - нет ошибок
	//				- 10 - только критические ошибки
	//      		больше 10 - есть критические ошибки и  сообщения для сведения
	//				меньше 10 - только сообщения для сведения
	//      		- 100 - непредвиденная ошибка (в норме не должно возвращаться никогда).
	Если РезультатПроверки = 0 Тогда

		ПоказатьПредупреждение(, НСтр("ru='Ошибок не обнаружено!'"));

	ИначеЕсли РезультатПроверки = 100 Тогда

		ПоказатьПредупреждение(, НСтр("ru='Непредвиденная ошибка!
			|Обратитесь в службу поддержки и приложите выгрузку ИБ.'"));

	Иначе

	// Есть ошибки или сообщения.
		ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеВыгрузить

Процедура НачалоВыгрузкиАЛКО(Форма)

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершениеАЛКО", ЭтотОбъект, Форма);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);

КонецПроцедуры

Процедура ВыгрузитьЗавершениеАЛКО(Отказ, Форма) Экспорт

	Если Отказ Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	ВыгрузитьОтчетАЛКО(Форма);

КонецПроцедуры

Процедура ВыгрузитьОтчетАЛКО(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.Организация) Тогда

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();

		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;

	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетПослеСохраненияАЛКО", ЭтотОбъект, Форма);

	Если Форма.Модифицированность Тогда
		Форма.ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиентеАЛКО(Форма, , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьОтчетПослеСохраненияАЛКО(Результат, Форма) Экспорт

	Если НЕ Форма.Модифицированность Тогда
		ВыгрузитьОтчет_ДлительнаяОперацияАЛКО(Форма);
	Иначе
	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));

		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьОтчет_ДлительнаяОперацияАЛКО(Форма)

	Если Форма.Открыта() И Форма.Модифицированность Тогда

	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры

Процедура ПослеВыполненияЗадания_ВыгрузкиОтчетаАЛКО(Форма, ВидДлОперации)

	РезультатПроверки = РегламентированнаяОтчетностьАЛКОВызовСервера.ПолучитьРезультатПроверкиОтчетаАЛКО(Форма.СтруктураРеквизитовФормы.АдресВоВременномХранилище);

	// 				- 0 - нет ошибок
	//				- 10 - только критические ошибки
	//      		больше 10 - есть критические ошибки и  сообщения для сведения
	//				меньше 10 - только сообщения для сведения
	//      		- 100 - непредвиденная ошибка (в норме не должно возвращаться никогда).
	Если РезультатПроверки = 0 Тогда

	// Ошибок нет, можно выгружать.
		ПолучитьФайлВыгрузкиАЛКО(Форма, ВидДлОперации);

	ИначеЕсли РезультатПроверки = 100 Тогда

		ПоказатьПредупреждение(, НСтр("ru='Непредвиденная ошибка!
			|Обратитесь в службу поддержки и приложите выгрузку ИБ.'"));
	Иначе

		Если РезультатПроверки >= 10 Тогда
		// Есть ошибки.
			ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма);
		Иначе
		// Есть сообщения.		
			ВопросПродолженияВыгрузкиАЛКО(Форма, ВидДлОперации);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьФайлВыгрузкиАЛКО(Форма, ВидДлОперации)

	ВидДлОперацииВыгрузка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
	ВидДлОперацииВыгрузкаПакета = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВидДлОперацииОтправка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");

	ИмяКонечногоФайла = Форма.ФайлВыгрузкиИмя + ".xml";

	Если ЭтоАдресВременногоХранилища(Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных) Тогда

		Если ВидДлОперации = ВидДлОперацииВыгрузка Тогда

			ПолучитьФайл(Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных, ИмяКонечногоФайла, Истина);

		ИначеЕсли ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда

			ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", Форма.КонтекстЭДОКлиент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЗавершение", Форма.ЭтотОбъект, ДополнительныеПараметры);
			Форма.КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВФСРАР(Форма, ОписаниеОповещения, , , , , , , , Форма.ОрганизацияОтчета, Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных, ИмяКонечногоФайла);

		ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда

			РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(Форма, "ФСРАР", Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных, ИмяКонечногоФайла);

		ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда

			РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(Форма, "ФСРАР", Форма.СтруктураДанныхТитульный.КодРегиона, Истина, Форма.СтруктураРеквизитовФормы.мСохраненныйДок, Форма.ОрганизацияОтчета, Форма.СтруктураРеквизитовФормы.АдресХранилищаДвоичныхДанных, ИмяКонечногоФайла);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ВопросПродолженияВыгрузкиАЛКО(Форма, ВидДлОперации)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ВидДлОперации", ВидДлОперации);

	Оповещение = Новый ОписаниеОповещения("ВопросПродолженияВыгрузкиЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);

	Если ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправки(, Истина) Тогда
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	Иначе
	
		ВидДлОперацииВыгрузка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
		ВидДлОперацииВыгрузкаПакета = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
		ВидДлОперацииОтправка = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
		ВидДлОперацииПроверкаВИнтернете = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");

		Если ВидДлОперации = ВидДлОперацииВыгрузка
				или ВидДлОперации = ВидДлОперацииВыгрузкаПакета Тогда
			ТекстКнопкиДа = НСтр("ru='Продолжить выгрузку'");
		ИначеЕсли ВидДлОперации = ВидДлОперацииОтправка Тогда
			ТекстКнопкиДа = НСтр("ru='Продолжить отправку'");
		ИначеЕсли ВидДлОперации = ВидДлОперацииПроверкаВИнтернете Тогда
			ТекстКнопкиДа = НСтр("ru='Продолжить проверку'");
		КонецЕсли;

		ТекстКнопкиНет = НСтр("ru='Отменить и посмотреть'");

		ТекстВопроса = НСтр("ru='Исходя из правил заполнения и формата выгрузки отчета, 
			|некоторые ситуации не являются формально ошибками, 
			|но существует вероятность ошибочного заполнения.
			|
			|В данном отчете обнаружены такие ситуации и сформированы сообщения о них.
			|
			|Необходимо внимательно просмотреть эти сообщения и убедиться, 
			|что все правильно и ошибок нет, при необходимости исправить.
			|
			|Если Вы смотрели эти сообщения, и убедились что ошибок нет,
			|нажмите """ + ТекстКнопкиДа + """ '");

		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, ТекстКнопкиДа);
		Кнопки.Добавить(КодВозвратаДиалога.Нет, ТекстКнопкиНет);

		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	КонецЕсли;

КонецПроцедуры

Процедура ВопросПродолженияВыгрузкиЗавершениеАЛКО(РезультатВопроса,
		ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	ВидДлОперации = ДополнительныеПараметры.ВидДлОперации;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		ПолучитьФайлВыгрузкиАЛКО(Форма, ВидДлОперации);

	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда

		ОткрытьФормуНавигацииПоОшибкамАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеЗаполнить

// Вызывается при автоматическом заполнении отчета при создании.
// Данный режим на данный момент не используется, автозаполнение только по кнопке Заполнить.
Процедура ЗаполнитьАвтоПриСозданииОтчетаАЛКО(Результат, Форма) Экспорт

// Заполнение при открытии формы.
	Если НЕ Форма.Модифицированность Тогда
		ЗаполнитьАвто_ДлительнаяОперацияАЛКО(Форма);
	Иначе
	// отказ от сохранения или ошибка сохранения.
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьАвтоАЛКО(Форма)

	Отказ = Ложь;

	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(Форма.ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершениеАЛКО", ЭтотОбъект, Форма);

	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);

КонецПроцедуры

Процедура ЗаполнитьАвтоЗавершениеАЛКО(Отказ, Форма) Экспорт

	Если Отказ Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	// Сохранение не требуется.
	ЗаполнитьАвто_ДлительнаяОперацияАЛКО(Форма);

КонецПроцедуры

Процедура ЗаполнитьАвто_ДлительнаяОперацияАЛКО(Форма)

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ЗаполнениеПоданнымИБ");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры

Процедура ПослеВыполненияЗадания_АвтоЗаполненияАЛКО(Форма) Экспорт

////////////////////////////////////////////////////////
	// Обновляем дерево разделов и выводим текущий раздел.
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(Форма);

	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда

		Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Иначе
			Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
				Форма.Элементы.РазделыОтчета.ТекущаяСтрока = Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Заставим принудительно обновить многострочную страницу.
	Форма.СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = 0;

	Форма.ТекущийЭлемент = Форма.Элементы.РазделыОтчета.ТекущийЭлемент;

	Форма.Элементы.Расшифровать.Доступность = Форма.Элементы.Расшифровать.Видимость;

	Форма.Модифицированность = Истина;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеВосстановитьОтчет

Процедура ВосстановитьДанныеТаблицПриКопированииАЛКО(Результат, Форма) Экспорт

//Если РезультатСохранения Тогда
	Если НЕ Форма.Модифицированность Тогда
		ВосстановитьРегистры_ДлительнаяОперацияАЛКО(Форма);
	Иначе

	// Отказ от сохранения или ошибка сохранения,
	// поскольку для копирования данных регистров необходим записанный документ отчета,
	// нет смысла открывать.
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьРегистры_ДлительнаяОперацияАЛКО(Форма)

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Восстановление");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры

Процедура ПриОтменеВосстановленияАЛКО(Форма)

	Если НЕ Форма.ПользовательСохранилОтчет Тогда

	// Отчет ни разу не сохранялся пользователем, это копирование.
		// Надо удалить временный документ отчета и закрыть.
		УдалитьДокументОтчета_ДлительнаяОперацияАЛКО(Форма);

	Иначе

	// Импорт данных из старого формата.
	// Ничего не делаем - просто закрываем.
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();

	КонецЕсли;

КонецПроцедуры

Процедура ПослеВыполненияЗадания_ВосстановитьОтчетАЛКО(Форма)

	Форма.Активизировать();

	Форма.НужноСкопировать = Ложь;

	Если Форма.БылИмпорт ИЛИ Форма.СтруктураРеквизитовФормы.НужноПересчитатьИтоги Тогда
	// Сохранение будет после пересчета итогов.			
		ПересчетИтогов_ДлительнаяОперация(Форма);
	Иначе
		// Форма.БылоВосстановление устанавливается в 
		// РегламентированнаяОтчетностьАЛКО.ПродолжениеВосстановленияДанныхАЛКО()
		// на основании переданного значения в ВозвращаемаяСтруктура.НужноСохранитьОтчет,
		// которое устанавливается в Истину при необходимости сохранения отчета после восстановления.
		//
		// Например при копировании отчета, импорте из старых форматов, 
		// и при восстановлении измененного отчета, если от сохранения изменений отказались.
		Если Форма.БылоВосстановление ИЛИ Форма.НужноСохранить Тогда
			
			Форма.БылоВосстановление = Ложь;
			Форма.НужноСохранить = Ложь;
			
			// После восстановления могли измениться Сервис регистров и Сервис регистров удаленные.
			Если Форма.СтруктураРеквизитовФормы.ТекущееДействие = "" Тогда
				Форма.СтруктураРеквизитовФормы.ТекущееДействие = "СохранитьОтчет";
			КонецЕсли;

			СохранитьНаКлиентеАЛКО(Форма);	
			
		Иначе
			
			Если Форма.ПользовательСохранилОтчет Тогда
				// Даже если при восстановлении были изменены например адресные структуры,
				// ничего страшного, они и в следующий раз корректно будут изменены.
				Форма.Модифицированность = Ложь;
			КонецЕсли;
			
			// Чтобы предотвратить мерцание панели отправки при открытии, при копировании, при миграции,
			// сделана группа - оболочка панели отправки. 
			// Видимость отключена в конфигураторе и отключается 
			// в процедуре РегламентированнаяОтчетностьАЛКО.ОкончаниеИнициализацииАЛКО().
			Форма.Элементы.ГруппаУправлениеЭДО.Видимость = Истина;
			
		КонецЕсли; 
				
	КонецЕсли;
	
	Форма.ФормаОшибок = ОпределитьОткрытуюФормуНавигацииПоОшибкам(Форма);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеСохранить

Процедура РезультатСохраненияАЛКО(Форма, Автосохранение = Ложь, КодИФНС, КПП,
		Вариант, ВидДокументаНомерКорректировкиИзменен = Ложь, НаимТекРаздела,
		ВыполняемоеОповещение = Неопределено)

	Если ЗначениеЗаполнено(Форма.БылаУдаленаСтраницаРаздела) И Форма.БылаУдаленаСтраницаРаздела Тогда
		ЗакрытьФормуОшибокПриИзмененииОтчета(Форма);
	КонецЕсли;

	Если Форма.ПользовательСохранилОтчет
			или Форма.ПользовательНажалСохранитьОтчет Тогда
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), Форма.Заголовок), , , БиблиотекаКартинок.Записать);
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется временный %1...'"), Форма.Заголовок), , , БиблиотекаКартинок.Записать);
	КонецЕсли;

	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
		Форма.ОбщийПараметрПроцедур = Новый Структура();
	КонецЕсли;

	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;

	ОбщийПараметрПроцедур.Вставить("Автосохранение", Автосохранение);
	ОбщийПараметрПроцедур.Вставить("КодИФНС", КодИФНС);
	ОбщийПараметрПроцедур.Вставить("КПП", КПП);
	ОбщийПараметрПроцедур.Вставить("Вариант", Вариант);
	ОбщийПараметрПроцедур.Вставить("ВидДокументаНомерКорректировкиИзменен", ВидДокументаНомерКорректировкиИзменен);
	ОбщийПараметрПроцедур.Вставить("НаимТекРаздела", НаимТекРаздела);

	Если НЕ ВыполняемоеОповещение = Неопределено Тогда
		Форма.УниверсальноеОписаниеОповещения = ВыполняемоеОповещение;
	КонецЕсли;

	Форма.РезультатСохранения = Форма.СохранитьДанныеОтчетаНаСервере(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, НаимТекРаздела);

	Если Форма.РезультатСохранения Тогда

		Форма.БылаУдаленаСтраницаРаздела = Ложь;

		// Присваиваем ключ уникальности.
		Форма.КлючУникальности = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;

		// Очищается Журнал изменений в регистрах по документу отчета.
		СохранитьРегистрыСведенийАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры

Процедура СохранитьСВопросомАЛКО(Форма, Автосохранение, Вариант,
		ВыполняемоеОповещение,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,
		ПодобныйОтчетСуществует, КодИФНС, КПП)

	Если ПодобныйОтчетСуществует Тогда

		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");

		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/"
			+ Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Форма, Автосохранение, Вариант, ВыполняемоеОповещение, "
			+ "ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Форма, Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);

	Иначе

		СохранитьСВопросомПродолжениеАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);

	КонецЕсли;

КонецПроцедуры

Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершениеАЛКО(РезультатВопроса,
		ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;

	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда

		Форма.РезультатСохранения = Ложь;
		Форма.УниверсальноеОписаниеОповещения = Неопределено;
		ВыполняемоеОповещение = Неопределено;
		ДополнительныеПараметры.ВыполняемоеОповещение = Неопределено;

		Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		// Документ ни разу не сохранялся.			
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();

			Возврат;

		КонецЕсли;

		// Скидываем признак нажатия кнопки сохранения.
		Форма.ПользовательНажалСохранитьОтчет = Ложь;
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

	СохранитьСВопросомПродолжениеАЛКО(Форма, Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);

КонецПроцедуры

Процедура СохранитьСВопросомПродолжениеАЛКО(Форма, Автосохранение, Вариант,
		ВыполняемоеОповещение,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС,
		КПП)

	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки
			И Форма.ПользовательСохранилОтчет Тогда

		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);

		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Форма, Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Форма, Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершениеАЛКО", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();

	Иначе

		Форма.ПользовательНажалСохранитьОтчет = Истина;

		РезультатСохраненияАЛКО(Форма, Автосохранение, КодИФНС, КПП, Вариант, , Форма.ТекущийРаздел, ВыполняемоеОповещение);

	КонецЕсли;

КонецПроцедуры

Процедура ВопросПриИзмененииВидаДокументаЗавершениеАЛКО(КодВозврата,
		ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;

	Если КодВозврата = КодВозвратаДиалога.Да
			ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда

		ВидДокументаНомерКорректировкиИзменен = (КодВозврата = КодВозвратаДиалога.Да);

	Иначе

		Форма.РезультатСохранения = Ложь;
		Форма.УниверсальноеОписаниеОповещения = Неопределено;
		ВыполняемоеОповещение = Неопределено;
		ДополнительныеПараметры.ВыполняемоеОповещение = Неопределено;

		// Отмена сохранения.
		Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		// Документ ни разу не сохранялся.			
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();

			Возврат;

		КонецЕсли;

		// Скидываем признак нажатия кнопки сохранения.
		Форма.ПользовательНажалСохранитьОтчет = Ложь;
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

	Если (НЕ ВидДокументаНомерКорректировкиИзменен = Неопределено)
			и ВидДокументаНомерКорректировкиИзменен
			// Исключаем случай копирования отчета.
		и (Форма.СтруктураРеквизитовФормы.мДокументИсточник = Неопределено) Тогда

		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("Форма", Форма);
		ДополнительныеПараметрыОповещения.Вставить("Оповещение", ВыполняемоеОповещение);
		ВыполняемоеОповещение = Новый ОписаниеОповещения("СкопироватьДанныеРегистровОтчетаПриЗаписиКакНовыйАЛКО", ЭтотОбъект, ДополнительныеПараметрыОповещения);

	КонецЕсли;

	// Пользователь явно согласился на сохранение.
	Форма.ПользовательНажалСохранитьОтчет = Истина;

	РезультатСохраненияАЛКО(Форма, Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Форма.ТекущийРаздел, ВыполняемоеОповещение);

КонецПроцедуры

// Формально длительная операция, но на самом деле выполняется в обычном режиме, поскольку
// заключается в очистке регистра сведений Журнал от записей редактирования, что происходит достаточно быстро.
// Поэтому режим длительной операции в РегламентированнаяОтчетностьАЛКОВызовСервера.СохранитьРегистры()
// отключен. Но всегда можно включить если потребуется.
Процедура СохранитьРегистрыСведенийАЛКО(Форма)

// Определим идет закрытие или нет	
	Если НЕ Форма.УниверсальноеОписаниеОповещения = Неопределено Тогда

		ИмяПроцедуры = Форма.УниверсальноеОписаниеОповещения.ИмяПроцедуры;
		Если СтрНайти(ВРег(ИмяПроцедуры), ВРег("ПослеСохраненияФормыЗавершение")) > 0
				или СтрНайти(ВРег(ИмяПроцедуры), ВРег("Закрыть")) > 0 Тогда
				// Закрытие могло быть инициировано не из формы.
			Форма.Активизировать();
		КонецЕсли;

	КонецЕсли;

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Сохранение");

	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры

Процедура ПослеСохраненияАЛКО(Форма)

// Если текущий раздел многострочный - нужно обновить таблицу формы.		
	Если НЕ ЗначениеЗаполнено(Форма.ТекущийРаздел) Тогда

		Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
			Форма.ТекущийРаздел = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		Иначе
			Форма.ТекущийРаздел = "Титульный";
		КонецЕсли;

	КонецЕсли;

	Если НЕ Форма.ТекущийРаздел = "Титульный" Тогда

		Форма.ТекущийИдГруппы = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьТочныйИдГруппыПоРазделуАЛКО(Форма, Форма.ТекущийРаздел);
		ИндексСтраницы = Форма.НомерАктивнойСтраницыМногострочногоРаздела;

		// Заполняем переменные, которые будут использоваться формой записи регистра сведений.
		Форма.КоличествоСтрок = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеГруппы(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);
		Форма.ИндексАктивнойСтраницыВРегистре = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИндексСтраницыРегистра(Форма, Форма.ТекущийИдГруппы, ИндексСтраницы);

		ЭлементТаблицыФормы = Форма.Элементы.Найти("ТаблицаФормыРаздела"
			+ Форма.ТекущийИдГруппы);
		Если НЕ ЭлементТаблицыФормы = Неопределено Тогда
			ЭлементТаблицыФормы.Обновить();
		КонецЕсли;

	КонецЕсли;

	Если Форма.РезультатСохранения Тогда

		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(Форма);
		Форма.Модифицированность = Ложь;

	КонецЕсли;

	// Сбрасываем флаг до отработки оповещения, чтобы предотвратить
	// повторную блокировку при записи после отработки оповещения.
	Форма.ЭтоНовыйДокумент = Ложь;

	Если НЕ Форма.УниверсальноеОписаниеОповещения = Неопределено Тогда

		Оповещение = Форма.УниверсальноеОписаниеОповещения;
		Форма.УниверсальноеОписаниеОповещения = Неопределено;
		ВыполнитьОбработкуОповещения(Оповещение);

	Иначе

	// Чтобы предотвратить мерцание панели отправки при открытии, при копировании, при миграции,
	// сделана группа - оболочка панели отправки. 
	// Видимость отключена в конфигураторе и отключается 
	// в процедуре РегламентированнаяОтчетностьАЛКО.ОкончаниеИнициализацииАЛКО().
		Форма.Элементы.ГруппаУправлениеЭДО.Видимость = Истина;

	КонецЕсли;

	Если Форма.ПользовательНажалСохранитьОтчет Тогда
		Форма.ПользовательСохранилОтчет = Истина;
	КонецЕсли;

	Если НЕ Форма.ПользовательСохранилОтчет Тогда
	// Новый отчет и явного сохранения не было.
		Форма.Модифицированность = Истина;
	Иначе

		Если Форма.НомерАлкоОтчета = 0 Тогда
		// Заявление о корректировке.
			Если ЗначениеЗаполнено(Форма.СданныйАлкоОтчет) Тогда

				ПараметрОповещения = новый Структура;
				ПараметрОповещения.Вставить("ЗаявлениеОКорректировке", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
				ПараметрОповещения.Вставить("СданныйАлкоОтчет", Форма.СданныйАлкоОтчет);

				Оповестить("ОбновитьЗаявлениеОКорректировке", ПараметрОповещения);

			КонецЕсли;

			Если ЗначениеЗаполнено(Форма.УдаленныйСданныйАлкоОтчет) Тогда

				ПараметрОповещения = новый Структура;
				ПараметрОповещения.Вставить("ЗаявлениеОКорректировке", Неопределено);
				ПараметрОповещения.Вставить("СданныйАлкоОтчет", Форма.УдаленныйСданныйАлкоОтчет);

				Оповестить("ОбновитьЗаявлениеОКорректировке", ПараметрОповещения);

				Форма.УдаленныйСданныйАлкоОтчет = Неопределено;

			КонецЕсли;

		ИначеЕсли Форма.НомерАлкоОтчета < 1000 Тогда

		// Обычные алкоотчеты.							
			Если ЗначениеЗаполнено(Форма.ЗаявлениеОКорректировке) Тогда

				ПараметрОповещения = новый Структура;
				ПараметрОповещения.Вставить("ЗаявлениеОКорректировке", Форма.ЗаявлениеОКорректировке);
				ПараметрОповещения.Вставить("СданныйАлкоОтчет", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);

				Оповестить("ОбновитьЗаявлениеОКорректировкеИзДекларации", ПараметрОповещения);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// Сбрасываем флаги инициации.		
	Форма.НужноЗаполнитьАвто = Ложь;
	Форма.НужноСохранить = Ложь;
	Форма.НужноВосстановитьДанные = Ложь;

	// Скидываем флаг нажатия сохранения.
	Форма.ПользовательНажалСохранитьОтчет = Ложь;
	
	СписокСостоянийОбновления = Новый СписокЗначений;
	// Перечисляем все состояния, при которых нужно обновить таблицы многостраничных разделов.
	СписокСостоянийОбновления.Добавить("ОчисткаОтМусора");
	ОбновитьТекущуюСтраницуОтчетаАЛКО(Форма, СписокСостоянийОбновления);
		
КонецПроцедуры

Процедура ЗаписатьИЗакрытьАЛКО(Форма)

	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершениеАЛКО", ЭтотОбъект, Форма);
	СохранитьНаКлиентеАЛКО(Форма, , Оповещение);

КонецПроцедуры

// Используется не при копировании отчетов, а при записи отчета 
// с измененным номером корректировки как новый.
// Выполняется как оповещение после Сохранения.
Процедура СкопироватьДанныеРегистровОтчетаПриЗаписиКакНовыйАЛКО(Результат,
		ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;

	ВыполняемоеОповещение = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("Оповещение", ВыполняемоеОповещение);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("ОписаниеОповещения") Тогда
		ВыполняемоеОповещение = ДополнительныеПараметры;
	КонецЕсли;

	Форма.ВыполняемоеОповещениеПослеКопированияРегистров = ВыполняемоеОповещение;

	Если НЕ Форма.Модифицированность Тогда

		СкопироватьДанныеРегистров_ДлительнаяОперацияАЛКО(Форма);

	КонецЕсли;

КонецПроцедуры

Процедура СкопироватьДанныеРегистров_ДлительнаяОперацияАЛКО(Форма)

	Если Форма.Открыта() И Форма.Модифицированность Тогда

	// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение(, НСтр("ru='Отчет не сохранен, копирование данных регистров невозможно!'"));
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);

		Возврат;

	КонецЕсли;

	Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.СкопироватьТекущиеРегистры");
	ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

КонецПроцедуры

Процедура ПриОтменеКопированияРегистровОтчетаПриЗаписиКакНовыйАЛКО(Форма)

	Форма.ВыполняемоеОповещениеПослеКопированияРегистров = Неопределено;

	// Возвращаем в СтруктураРеквизитовФормы.мСохраненныйДок старое значение из СтруктураРеквизитовФормы.мДокументИсточник.
	// Очищаем СтруктураРеквизитовФормы.мДокументИсточник.
	// Удаляем вновь созданный документ отчета для отчета с новым номером корректировки.
	// Блокируем данные для редактирования.
	Форма.ПриОтменеКопированияДанныхНаСервере();

	// Обновляем списки отчетов внешних форм, чтобы удаленный документ отчета оттуда удалился.
	ДокУправляющейФормыПередОткрытием = Неопределено;
	Форма.СтруктураРеквизитовФормы.Свойство("ДокУправляющейФормыПередОткрытием", ДокУправляющейФормыПередОткрытием);

	ОбновитьФормыСоСпискомОтчетов(ДокУправляющейФормыПередОткрытием);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеДобавитьВиноградник

Процедура ДобавитьВиноградникАЛКО(Форма)

// Нужно зафиксировать данные текущего ОП.	
	ТекущиеСведенияОбОП = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Форма.АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение.СведенияОбОП);

	ТекущийФлагГоловногоОП = Форма.АктивнаяСтраницаРаздела.ФлагГоловногоОП;
	Если Форма.ОбщийПараметрПроцедур = Неопределено Тогда
		Форма.ОбщийПараметрПроцедур = Новый Структура();
	КонецЕсли;

	ОбщийПараметрПроцедур = Форма.ОбщийПараметрПроцедур;
	ОбщийПараметрПроцедур.Вставить("ТекущиеСведенияОбОП", ТекущиеСведенияОбОП);
	ОбщийПараметрПроцедур.Вставить("ТекущийФлагГоловногоОП", ТекущийФлагГоловногоОП);

	// Выставляем состояние для дальнейшей обработки.
	Форма.ТекущееСостояние = "ДобавлениеВиноградника";

	// Добавляем страницу.
	Форма.ДобавитьСтраницуНаСервере();;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеУдалитьСтраницу

Процедура УдалитьСтраницуАЛКО(Форма)

	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершениеАЛКО", ЭтотОбъект, Форма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);

КонецПроцедуры

Процедура УдалитьСтраницуЗавершениеАЛКО(РезультатВопроса, Форма) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Форма.Элементы.РазделыОтчета.ТекущиеДанные;

	КопияТекущиеДанные = ТекущиеДанные;

	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();

	Если ТекущиеДанные = Неопределено Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
			- 1);
		Форма.НомерАктивнойСтраницыМногострочногоРаздела = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
			- 2;
	КонецЕсли;

	Форма.УдалитьСтраницуНаСервере();

	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));

	НомерСтраницы = 1;

	Форма.БылаУдаленаСтраницаРаздела = Истина;

	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл

		СтраницаРаздела.КолонкаРазделыОтчета = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;

		НомерСтраницы = НомерСтраницы + 1;

	КонецЦикла;

	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

Процедура ЗакрытьФормуОшибокПриИзмененииОтчета(Форма)

	Если Форма.ФормаОшибок = Неопределено Тогда
		Форма.ФормаОшибок = ОпределитьОткрытуюФормуНавигацииПоОшибкам(Форма);
	КонецЕсли;

	Если (НЕ Форма.ФормаОшибок = Неопределено)
		И 
		РегламентированнаяОтчетностьАЛКОКлиентСервер.ЭтоУправляемаяФормаИлиФормаКлиентскогоПриложения(Форма.ФормаОшибок)
		Тогда

		ФормаОшибок = Форма.ФормаОшибок;
		Форма.ФормаОшибок = Неопределено;

		ФормаОшибок.Модифицированность = Ложь;
		Если ФормаОшибок.Открыта() Тогда
			ФормаОшибок.Закрыть();
		КонецЕсли;

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Отчет изменен, поэтому открытая форма ошибок проверки выгрузки отчета закрыта, 
			|поскольку может содержать неактуальные или некорректные данные об ошибках.
			|Запустите проверку выгрузки отчета еще раз после сохранения отчета.'");
		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

Процедура УдалитьВсеСтраницыАЛКО(Форма)

	ТекущиеДанные = Форма.Элементы.РазделыОтчета.ТекущиеДанные;

	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();

	Если ТекущиеДанные = Неопределено Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		ВыполнитьСледующееДействиеИзОчередиАЛКО(Форма);
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(Форма, "ОчиститьТекущийРаздел"
		+ Форма.ТекущийРаздел);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеУдалитьДокументОтчета

Процедура УдалитьДокументОтчета_ДлительнаяОперацияАЛКО(Форма)

	Если НЕ Форма.ПользовательСохранилОтчет
			и (НЕ Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) Тогда

		Форма.ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.УдалениеДокументаОтчета");

		ВыполнитьДлительнуюОперациюАЛКО(Форма, Форма.ВидДлительнойОперации);

	КонецЕсли;

КонецПроцедуры

Процедура ПослеВыполненияЗадания_УдалениеДокументаОтчетаАЛКО(Форма)

// Обновляем списки отчетов в формах 1С-отчетность и Управление отчетностью.
	ДокУправляющейФормыПередОткрытием = Неопределено;
	Форма.СтруктураРеквизитовФормы.Свойство("ДокУправляющейФормыПередОткрытием", ДокУправляющейФормыПередОткрытием);

	ОбновитьФормыСоСпискомОтчетов(ДокУправляющейФормыПередОткрытием);

	// Очищаем документ отчета и закрываем форму.
	Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;

	Форма.Модифицированность = Ложь;
	Форма.Закрыть();

КонецПроцедуры
#КонецОбласти

#КонецОбласти
 

