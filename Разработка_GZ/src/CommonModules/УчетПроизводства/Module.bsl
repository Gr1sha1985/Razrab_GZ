#Область СлужебныйПрограммныйИнтерфейс

Функция ИспользоватьСчетВыпускПродукции(Период, Организация) Экспорт
	
	ВариантУчета = УчетнаяПолитика.ВариантУчетаСтоимостиВыпуска(Организация, Период);
	Возврат Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьСчетВыпускПродукции(ВариантУчета);
	
КонецФункции

Функция ИспользоватьВыпускПродукции() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВыпускПродукции");
	
КонецФункции

#КонецОбласти

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННОЙ ПРОДУКЦИИ

Процедура СформироватьДвиженияПлановаяСтоимостьВыпущеннойПродукции(ТаблицаПродукция, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПродукция)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьВыпущеннойПродукции(ТаблицаПродукция, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПродукция Цикл

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", СтрокаТаблицы.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
	
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппаЗатрат);
		УстановитьСубконтоВыпускПродукции(Проводка, СтрокаТаблицы.Номенклатура, Реквизиты);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.ПодразделениеЗатрат;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаПлановая;

		Если ОтражатьВНалоговомУчете Тогда
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаПлановаяНУ;
				Проводка.СуммаПРДт = Проводка.Сумма - Проводка.СуммаНУДт;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаПлановаяНУ;
				Проводка.СуммаПРКт = Проводка.Сумма - Проводка.СуммаНУКт;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПлановаяСтоимостьВыпущеннойПродукции(ТаблицаПродукция, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПродукция

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура выпущенной продукции
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск продукции
	+ "ПодразделениеЗатрат,"        // <Ссылка на справочник подразделений> - подразделение, выпустившее продукцию
	+ "НоменклатурнаяГруппаЗатрат," // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа выпущенной продукции
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на которой поступает продукция
	+ "Подразделение,"              // <Ссылка на справочник подразделений> - подразделение, в которое поступает продукция
	+ "Склад,"                      // <СправочникСсылка.Склады> - склад, на который поступает продукция
	+ "Количество,"                 // <Число,15,3> - количество выпущенной продукции
	+ "СуммаПлановая,"              // <Число,15,2> - плановая стоимость выпущенной продукции
	+ "СуммаПлановаяНУ,"            // <Число,15,2> - плановая стоимость выпущенной продукции (НУ)
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаПродукция", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПродукция, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "ИспользоватьСчет40";         // <Булево> - способ учета выпуска готовой продукции с использованием счета 40

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ УСЛУГ

Процедура СформироватьДвиженияПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаУслуги)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл
		
		// Не формируем тривиальные проводки
		Если СтрокаТаблицы.СуммаПлановая = 0 И СтрокаТаблицы.СуммаПлановаяНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СтрокаТаблицы.Содержание;

		Проводка.СчетДт	= СтрокаТаблицы.СчетСписания;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидСубконтоСписания1, СтрокаТаблицы.СубконтоСписания1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидСубконтоСписания2, СтрокаТаблицы.СубконтоСписания2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидСубконтоСписания3, СтрокаТаблицы.СубконтоСписания3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы, СтрокаТаблицы.Номенклатура);
	
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеСписания;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппаЗатрат);
		УстановитьСубконтоВыпускПродукции(Проводка, СтрокаТаблицы.Номенклатура, Реквизиты);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.ПодразделениеЗатрат;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаПлановая;
		
		Если ОтражатьВНалоговомУчете Тогда
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаПлановаяНУ;
				Проводка.СуммаПРДт = Проводка.Сумма - Проводка.СуммаНУДт;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаПлановаяНУ;
				Проводка.СуммаПРКт = Проводка.Сумма - Проводка.СуммаНУКт;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПлановаяСтоимостьВыпущенныхУслуг(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура оказанных услуг
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск услуг
	+ "ПодразделениеЗатрат,"        // <Ссылка на справочник подразделений> - производственное подразделение, оказавшее услуги
	+ "НоменклатурнаяГруппаЗатрат," // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа оказанных услуг
	+ "СчетСписания,"               // <ПланСчетовСсылка.Хозрасчетный> - счет списания плановой стоимости услуг
	+ "ПодразделениеСписания,"      // <Ссылка на справочник подразделений> - подразделение, для списания плановой стоимости услуг
	+ "ВидСубконтоСписания1,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета списания
	+ "ВидСубконтоСписания2,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета списания
	+ "ВидСубконтоСписания3,"       // <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные> - вид субконто счета списания
	+ "СубконтоСписания1,"          // - значение субконто счета списания
	+ "СубконтоСписания2,"          // - значение субконто счета списания
	+ "СубконтоСписания3,"          // - значение субконто счета списания
	+ "Количество,"                 // <Число,15,3> - объем оказанных услуг, выраженный в количественном показателе
	+ "СуммаПлановая,"              // <Число,15,2> - плановая стоимость оказанных услуг
	+ "СуммаПлановаяНУ,"            // <Число,15,2> - плановая стоимость оказанных услуг (НУ)
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "ИспользоватьСчет40";         // <Булево> - способ учета выпуска услуг с использованием счета 40

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// УЧЕТ ПЛАНОВОЙ СТОИМОСТИ ВЫПУЩЕННЫХ УСЛУГ ПО ПЕРЕРАБОТКЕ

Процедура СформироватьДвиженияПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаУслуги) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаУслуги Цикл
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасходов);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		
		// Не формируем тривиальные проводки
		Если СтрокаТаблицы.Сумма = 0 
			И (НЕ СвойстваСчетаДт.Количественный И НЕ СвойстваСчетаКт.Количественный ИЛИ СтрокаТаблицы.Количество = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		
		// Дт
		
		Проводка.СчетДт	= СтрокаТаблицы.СчетРасходов;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, 
			Проводка.СубконтоДт, 
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, 
			СтрокаТаблицы.ВидДеятельности);
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, 
			Проводка.СубконтоДт, 
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
			СтрокаТаблицы.ВидДеятельности);
			
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, 
			Проводка.СубконтоДт, 
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы, 
			СтрокаТаблицы.Номенклатура);
			
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Если ОтражатьВНалоговомУчете И СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		// Кт
		
		Проводка.СчетКт = СтрокаТаблицы.СчетЗатрат;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, 
			Проводка.СубконтоКт, 
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура,
			СтрокаТаблицы.НоменклатураЗатрат);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете И СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПлановаяСтоимостьУслугПоПереработке(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаУслуги

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"              // <Ссылка на справочник подразделений> - подразделение, в котором отражена операция
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура оказанных услуг
	
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск услуг
	+ "НоменклатураЗатрат,"         // <СправочникСсылка.Номенклатура> - номенклатура, в разрезе которой учитываются затраты на оказание услуг
	
	+ "СчетРасходов,"               // <ПланСчетовСсылка.Хозрасчетный> - счет учета расходов
	+ "ВидДеятельности,"            // <Характеристика.ВидыСубконтоХозрасчетные> - вид деятельности (субконто НоменклатурнаяГруппа на счете 90)
	+ "ВидРасходов,"                // <Характеристика.ВидыСубконтоХозрасчетные> - вид расходов (субконто ПрочиеДоходыИРасходы на счете 91)
	
	+ "Количество,"                 // <Число,15,3> - объем оказанных услуг в количественном выражении
	+ "Сумма,"                      // <Число,15,2> - плановая стоимость оказанных услуг
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация";                // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВЫПУСК ПРОДУКЦИИ, УСЛУГ

Процедура СформироватьДвиженияВыпускПродукцииУслуг(ТаблицаВыпуск, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВыпуск)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыпускПродукцииУслуг(ТаблицаВыпуск, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаВыпуск Цикл

		// Отражение выпуска в регистре накопления ВыпускПродукцииУслуг
		Движение = Движения.ВыпускПродукцииУслуг.Добавить();

		Движение.Период = Реквизиты.Период;
		Движение.Организация = Реквизиты.Организация;
		Движение.Продукция = СтрокаТаблицы.Номенклатура;
		
		Движение.СчетЗатрат            = СтрокаТаблицы.СчетЗатрат;
		Движение.Подразделение         = СтрокаТаблицы.ПодразделениеЗатрат;
		Движение.НоменклатурнаяГруппа  = СтрокаТаблицы.НоменклатурнаяГруппаЗатрат;
		
		Движение.СчетСписания          = СтрокаТаблицы.СчетСписания;
		Движение.ПодразделениеСписания = СтрокаТаблицы.ПодразделениеСписания;

		СвойстваСчетаСписания = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Движение.СчетСписания);
		Если СвойстваСчетаСписания.КоличествоСубконто > 0 Тогда
			Движение.СубконтоСписания1 = СтрокаТаблицы.СубконтоСписания1;
		КонецЕсли;
		Если СвойстваСчетаСписания.КоличествоСубконто > 1 Тогда
			Движение.СубконтоСписания2 = СтрокаТаблицы.СубконтоСписания2;
		КонецЕсли;
		Если СвойстваСчетаСписания.КоличествоСубконто > 2 Тогда
			Движение.СубконтоСписания3 = СтрокаТаблицы.СубконтоСписания3;
		КонецЕсли;

		Движение.ПрямыеРасходыРаспределятьПоКоличеству = СтрокаТаблицы.ПрямыеРасходыРаспределятьПоКоличеству;
		Движение.Количество        = СтрокаТаблицы.Количество;
		Движение.ПлановаяСтоимость = СтрокаТаблицы.ПлановаяСтоимость;

	КонецЦикла;

	Движения.ВыпускПродукцииУслуг.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыВыпускПродукцииУслуг(ТаблицаВыпуск, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаВыпуск

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"                          // <СправочникСсылка.Номенклатура> - номенклатура выпущенной продукции, услуг
	+ "СчетЗатрат,"                            // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск продукции, услуг
	+ "ПодразделениеЗатрат,"                   // <Ссылка на справочник подразделений> - производственное подразделение, выпустившее продукцию, услуги
	+ "НоменклатурнаяГруппаЗатрат,"            // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа выпущенной продукции, услуг
	+ "СчетСписания,"                          // <ПланСчетовСсылка.Хозрасчетный> - счет списания плановой стоимости продукции, услуг
	+ "ПодразделениеСписания,"                 // <Ссылка на справочник подразделений> - подразделение, для списания плановой стоимости продукции, услуг
	+ "СубконтоСписания1,"                     // - значение субконто счета списания
	+ "СубконтоСписания2,"                     // - значение субконто счета списания
	+ "СубконтоСписания3,"                     // - значение субконто счета списания
	+ "Количество,"                            // <Число,15,3> - количество выпущенной продукции, услуг
	+ "ПлановаяСтоимость,"                     // <Число,15,2> - плановая стоимость выпущенной продукции, услуг
	+ "ПрямыеРасходыРаспределятьПоКоличеству"; // <Булево> - услуги выражаются в количественных показателях
	Параметры.Вставить("ТаблицаВыпуск", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыпуск, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата> - период движений - дата документа
	+ "Организация";                           // <СправочникСсылка.Организации>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВЫПУСК ВОЗВРАТНЫХ ОТХОДОВ

Процедура СформироватьДвиженияВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОтходы)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОтходы Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаТаблицы.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = - СтрокаТаблицы.Количество;
		КонецЕсли;
		
		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппаЗатрат);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Продукция",            СтрокаТаблицы.Продукция);
			
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
		КонецЕсли;

		Проводка.Сумма = - СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыпускОтходов(ТаблицаОтходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОтходы

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"               // <СправочникСсылка.Номенклатура> - номенклатура выпущенных возвратных отходов
	+ "СчетЗатрат,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат на выпуск продукции
	+ "ПодразделениеЗатрат,"        // <Ссылка на справочник подразделений> - подразделение, выпустившее продукцию
	+ "НоменклатурнаяГруппаЗатрат," // <СправочникСсылка.НомеклатурныеГруппы> - номеклатурная группа выпущенной продукции
	+ "Продукция,"                  // <СправочникСсылка.Номенклатура> - выпущенная продукция
	+ "СтатьяЗатрат,"               // <СправочникСсылка.СтатьяЗатрат> - статья учета затрат на выпуск продукции
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета возвратных отходов
	+ "Подразделение,"              // <Ссылка на справочник подразделений> - подразделение, в которое поступают отходы
	+ "Склад,"                      // <СправочникСсылка.Склады> - склад, на который поступают отходы
	+ "Количество,"                 // <Число,15,3> - количество выпущенных возвратных отходов
	+ "Сумма";                      // <Число,15,2> - себестоимость выпущенных возвратных отходов

	Параметры.Вставить("ТаблицаОтходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОтходы, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                     // <Дата> - период движений - дата документа
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "Содержание";                 // <Строка,150> - содержание проводки

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СЧЕТА УЧЕТА В ДОКУМЕНТАХ

Процедура ОграничитьВыборСчетамиПрямыхРасходов(ЭлементФормы) Экспорт
	
	Правила    = УчетЗатрат.ПредопределенныеКалькуляционныеСчета();
	Исключения = Новый Массив;
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья); // Фактически, это счет запасов, а не расходов
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.ИспользоватьВПроводках = Истина; // Исключить запрещенные для использования в проводках
	УсловияОтбора.Валютный               = Неопределено; // Не важно, валютные или нет
	УсловияОтбора.Забалансовый           = Ложь;   // Исключить забалансовые
	УсловияОтбора.СчетаИсключения        = Исключения;
	
	СчетаДляОтбора = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(Правила, УсловияОтбора);
		
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(ЭлементФормы, СчетаДляОтбора);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

#Область ВыпускПродукции

Процедура УстановитьСубконтоВыпускПродукции(Проводка, Номенклатура, Реквизиты)
	
	Если Не Реквизиты.ИспользоватьСчет40 Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьСубконто(
		Проводка.СчетКт,
		Проводка.СубконтоКт,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости,
		Перечисления.ВидыСтоимости.Плановая);
	
	ВариантУчета = УчетнаяПолитика.ВариантУчетаСтоимостиВыпуска(Реквизиты.Организация, Реквизиты.Период);
	Если Не Перечисления.ВариантыУчетаСтоимостиВыпуска.ИспользоватьСубконтоПродукция(ВариантУчета) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьСубконто(
		Проводка.СчетКт,
		Проводка.СубконтоКт,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,
		Номенклатура);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
