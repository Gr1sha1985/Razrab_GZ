#Область ПрограммныйИнтерфейс

// Возвращает признак поддержки стека периодических событий.
//
// Возвращаемое значение:
//		Булево
//
Функция ПоддерживатьНесколькоВложенныхПериодическихСобытий() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СпособФормированияИнтервальныхРегистров.Получить() <> Перечисления.СпособыФормированияИнтервальныхРегистров.НеПоддерживатьНесколькоВложенныхПериодическихСобытийИнтервальныхРегистров;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяИнтервальногоРегистра(ИмяРегистра) Экспорт
	Возврат ИмяРегистра + "Интервальный";
КонецФункции

Процедура СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, ПараметрыПостроения) Экспорт
	Реализация().СформироватьДвиженияИнтервальногоРегистра(ИмяРегистра, ПараметрыПостроения);
КонецПроцедуры

Процедура ДобавитьЗапросВТДвиженияИмяИнтервальногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения = Неопределено, ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "Движения" + ИмяРегистра;
	КонецЕсли;	
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 
		
	ИмяИнтервальногоРегистра = ИмяИнтервальногоРегистра(ИмяРегистра);
		
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	ВключатьЗаписиНаНачалоПериода = ЗарплатаКадрыПериодическиеРегистры.ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&ШаблонРегистратор КАК Регистратор,
	|	&ШаблонРегистраторЗаписи КАК РегистраторЗаписи,
	|	&ШаблонРегистраторСобытия КАК РегистраторСобытия,
	|	&ШаблонРегистрДатаНачалаПриведенная КАК Период,
	|	&ШаблонПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
	|	&ШаблонЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.ДатаНачала КАК ДатаНачала,
	|	РегистрСведений.ДатаОкончания КАК ДатаОкончания,
	|	&ШаблонПериодЗаписи КАК ПериодЗаписи,
	|	&ШаблонПустойИнтервал КАК ПустойИнтервал,
	|	РегистрСведений.Год КАК Год,
	|	&ШаблонИзмерения КАК ШаблонИзмерения,
	|	&ШаблонРесурсы КАК ШаблонРесурсы,
	|	&ШаблонРеквизиты КАК ШаблонРеквизиты
	|ПОМЕСТИТЬ ВТДвиженияРегистра
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала >= &ФильтрДатаНачалаПриведенная_)
	|			И (РегистрСведений.ДатаНачала <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямСФильтром)
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийЗамена
	|		ПО (РегистрСведений.ПериодПредыдущейЗаписи = РегистрСведенийЗамена.ДатаНачала)
	|			И (РегистрСведений.РегистраторЗаписи <> РегистрСведенийЗамена.РегистраторЗаписи)
	|			И (РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|				ИЛИ РегистрСведенийЗамена.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор))
	|			И (&ШаблонУсловияСвязиПоИзмерениям)";
		
	ШаблонУсловияИсключаемыйРегистратор =
	"ВЫБОР
	|		КОГДА РегистрСведений.ДатаНачала < &ФильтрДатаНачалаПриведенная_
	|			ТОГДА ИСТИНА  
	|		КОГДА РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
	|				И РегистрСведенийЗамена.ПериодЗаписи ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|				И РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
	|				И ДОБАВИТЬКДАТЕ(РегистрСведенийЗамена.ДатаОкончания, СЕКУНДА, 1) = РегистрСведений.ДатаНачала
	|			ТОГДА ЛОЖЬ
	|		КОГДА РегистрСведений.ПериодЗаписи <> РегистрСведений.ДатаНачала
	|				И РегистрСведенийЗамена.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";

	УсловиеПериодичностьДень = "РегистрСведений.ДатаОкончания >= КОНЕЦПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ)";
	
	ВыражениеЭтоВозвратноеСобытие = "
	|	ВЫБОР
	|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда                 
		ШаблонВыбираемогоРесурса = " 
		|ВЫБОР
		|	КОГДА РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор)
		|		ТОГДА РегистрСведенийЗамена.Ресурс_
		|	ИНАЧЕ РегистрСведений.Ресурс_
		|КОНЕЦ";
		
		ВыражениеЭтоВозвратноеСобытие = СтрЗаменить(ВыражениеЭтоВозвратноеСобытие, "РегистрСведений.ПериодЗаписи", ШаблонВыбираемогоРесурса);
		ВыражениеЭтоВозвратноеСобытие = СтрЗаменить(ВыражениеЭтоВозвратноеСобытие, "Ресурс_", "ПериодЗаписи");
	Иначе
		ШаблонВыбираемогоРесурса = "РегистрСведений.Ресурс_";
	КонецЕсли;	
		
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания", 
		ОператорЗапроса, 
		ПостфиксИменПараметров, 
		Ложь);
	
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений");
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяИнтервальногоРегистра(ИмяРегистра));
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений." + ИмяИнтервальногоРегистра(ИмяРегистра));
	
	РегистрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПоляПериода("ДатаНачала", "РегистрСведений");
	РегистрДатаНачалаПриведеннаяККонцуДня = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПоляПериода("ДатаНачала", "РегистрСведений");
	
	ФильтрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачалаПриведенная");
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончанияПриведенная");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	ФильтрДатаСреза =  ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСреза");
	ФильтрДатаСрезаПриведенная =  ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСрезаПриведенная");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	КратностьСдвигаДляПолученияСреза = "СЕКУНДА";
	Если ФормироватьСПериодичностьДень Тогда
		РегистрДатаНачалаПриведенная.Кратность = "ДЕНЬ";	
		РегистрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаНачалаПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		РегистрДатаНачалаПриведеннаяККонцуДня.Кратность = "ДЕНЬ";	
		РегистрДатаНачалаПриведеннаяККонцуДня.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		ФильтрДатаСреза.Кратность = "ДЕНЬ";	
		ФильтрДатаСреза.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаСрезаПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаСрезаПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";

		КратностьСдвигаДляПолученияСреза = "ДЕНЬ";
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапроса, УсловиеПериодичностьДень);
	КонецЕсли; 		
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		// Дополним условие соединения соединения по периоду условием получения записей на начало периода
		ШаблонУсловияПолученияЗаписейНаНачалоПериода = 
		"ИЛИ &РегистрДатаНачалаПриведенная_ <= &ФильтрДатаСрезаПриведенная_
		|	И РегистрСведений.ДатаОкончания >= &ФильтрДатаСрезаПриведенная_";
		
		ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = "(" + ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи 
																	+  Символы.ПС + ШаблонУсловияПолученияЗаписейНаНачалоПериода
																	+ ")"; 
		// Для записей полученных на начало периода, значение поля Период будем считать равным параметру фильтра ДатаНачала															
		ТекстПоляПериод = 
		"ВЫБОР
		|	КОГДА РегистрСведений.ДатаНачала <= &ФильтрДатаСреза_
		|		ТОГДА &ФильтрДатаСреза_      
		|	ИНАЧЕ &РегистрДатаНачалаПриведенная_
		|КОНЕЦ";
				
		ТекстПоляПериод = СтрЗаменить(ТекстПоляПериод, "&ФильтрДатаСреза_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаСреза));
		ТекстПоляПериод = СтрЗаменить(ТекстПоляПериод, "&РегистрДатаНачалаПриведенная_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(РегистрДатаНачалаПриведенная));
		
		ФильтрДатаНачалаПриведенная.Сдвиг = 1;	
		ФильтрДатаНачалаПриведенная.КратностьСдвига = КратностьСдвигаДляПолученияСреза;
		
		ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаСрезаПриведенная_", ФильтрДатаСрезаПриведенная);
		ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведенная_", РегистрДатаНачалаПриведенная);

	Иначе
		ТекстПоляПериод = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(РегистрДатаНачалаПриведенная);	
	КонецЕсли;	
			
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведеннаяККонцуДня_", РегистрДатаНачалаПриведеннаяККонцуДня);
				
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл			
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение);
		ТекстУсловия = "РегистрСведений." + Измерение + " = РегистрСведенийЗамена." + Измерение;
		УсловияСвязиПоИзмерениям.Добавить(ТекстУсловия);
	КонецЦикла;
	
	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда
		ИсключаемыеРегистраторы = ЗарплатаКадрыПериодическиеРегистры.ИсключаемыеРегистраторы(ПараметрыПостроения);
		ИмяПараметраИсключаемыеРегистраторы = ЗарплатаКадрыПериодическиеРегистры.УстановитьПараметрОтбораПоИсключаемомуРегистратору(ОписаниеПакетаЗапросов, ИсключаемыеРегистраторы, ИмяСоздаваемойТаблицы);
		
		ТекстУсловияСоединенияСТаблицейЗамены = ЗарплатаКадрыПериодическиеРегистры.ТекстУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		ТекстУсловияСоединенияСТаблицейЗамены = СтрЗаменить(ТекстУсловияСоединенияСТаблицейЗамены, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
		
		ЗарплатаКадрыПериодическиеРегистры.ОчиститьУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		                       
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", УсловияСвязиПоИзмерениям);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", ТекстУсловияСоединенияСТаблицейЗамены);
		
		УсловиеИсключаемыйРегистратор = СтрЗаменить(ШаблонУсловияИсключаемыйРегистратор, "&ФильтрДатаНачалаПриведенная_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачалаПриведенная)); 
		УсловиеИсключаемыйРегистратор = СтрЗаменить(УсловиеИсключаемыйРегистратор, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы); 
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапроса, УсловиеИсключаемыйРегистратор);
		
		ВыражениеЭтоВозвратноеСобытие = СтрЗаменить(ВыражениеЭтоВозвратноеСобытие, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
		ШаблонВыбираемогоРесурса = СтрЗаменить(ШаблонВыбираемогоРесурса, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
	Иначе 
		ЗарплатаКадрыПериодическиеРегистры.УдалитьТаблицуИзОператораЗапроса(ОператорЗапроса, "РегистрСведенийЗамена");
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ТекстПоляПериод, "Период");
	
	СоответствиеЭлементовОтбораВыражениям = Новый Соответствие;
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеЭтоВозвратноеСобытие, "ЭтоВозвратноеСобытие");	
	
	ВыражениеПоляПериодВозвратногоСобытия = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ДействуетДо");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодВозвратногоСобытия, "ПериодВозвратногоСобытия");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПериодВозвратногоСобытия"), ВыражениеПоляПериодВозвратногоСобытия);
	
	ВыражениеПоляПериодЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодЗаписи, "ПериодЗаписи");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПериодЗаписи"), ВыражениеПоляПериодЗаписи);
	
	ВыражениеПоляРегистратор = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторСобытия");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "Регистратор");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);

	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "РегистраторСобытия");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);
	
	ВыражениеПоляРегистраторЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторЗаписи");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистраторЗаписи, "РегистраторЗаписи");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("РегистраторЗаписи"), ВыражениеПоляРегистраторЗаписи);
		
	ВыражениеПоляПустойИнтервал = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ПустойИнтервал");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПустойИнтервал, "ПустойИнтервал");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПустойИнтервал"), ВыражениеПоляПустойИнтервал);
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоляРеквизит = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Реквизит);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРеквизит, Реквизит);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Реквизит), ВыражениеПоляРеквизит);
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	СчПараметров = 1;
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ИмяСоздаваемойТаблицы, СчПараметров, , , Ложь);
	
	ПредикатУсловиямНаНачалоПериода = "РегистрСведений.ДатаНачала >= " + ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачалаПриведенная) + " ИЛИ ";
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров, СчПараметров, ПредикатУсловиямНаНачалоПериода, , Ложь);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
		
	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения); 
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТДвиженияПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения = Неопределено, ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ИмяСоздаваемойТаблицы = Неопределено Тогда
		ПостфиксИменПараметров = "Движения" + ИмяРегистра;
	КонецЕсли; 
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ВключатьЗаписиНаНачалоПериода = ЗарплатаКадрыПериодическиеРегистры.ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапросаВТДвиженияРегистра = 
	"ВЫБРАТЬ
	|	&ШаблонРегистрПериодПриведенный КАК Период,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	РегистрСведений.ДействуетДо КАК ПериодВозвратногоСобытия,
	|	ЛОЖЬ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.Регистратор КАК Регистратор,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТДвиженияРегистра
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период >= &ФильтрДатаНачалаПриведенная_)
	|			И (РегистрСведений.Период <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениям)";	
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаВТДвиженияРегистра);
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;

	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];

	Если Не ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ЗарплатаКадрыПериодическиеРегистры.УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, "ЭтоВозвратноеСобытие");
		ЗарплатаКадрыПериодическиеРегистры.УдалитьКолонкуИзОписаниеЗапроса(ОписаниеЗапроса, "ПериодВозвратногоСобытия");
	КонецЕсли;
		
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОператорЗапроса, ПостфиксИменПараметров, Ложь);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра);		
			
	ФильтрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачалаПриведенная");
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончанияПриведенная");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	
	РегистрПериодПриведенный = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПоляПериода("Период", "РегистрСведений");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	Кратность = ЗарплатаКадрыПериодическиеРегистры.КратностьПериодаРегистра(ОписаниеРегистра, ПараметрыПостроения);
	
	ФильтрДатаНачалаПриведенная.Кратность = Кратность;
	РегистрПериодПриведенный.Кратность = Кратность;
	ФильтрДатаОкончанияПриведенная.Кратность = Кратность;
	ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	
	Если ВключатьЗаписиНаНачалоПериода Тогда	
		ФильтрДатаНачалаПриведенная.Сдвиг = 1;
	КонецЕсли; 
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
		
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(РегистрПериодПриведенный), "Период");
                                                     		
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение);
	КонецЦикла;
			
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.СтандартныеРеквизиты Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров);
	
	Если ФормироватьСПериодичностьДень Тогда
		ИмяВТДвиженияРегистра = "ВТВременныеДвиженияРегистра" + ИмяРегистра;
		ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВТДвиженияРегистра;
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросПолученияЗаписейСПериодичностьюДень(ОписаниеПакетаЗапросов, ОписаниеРегистра, ПараметрыПостроения, ИмяВТДвиженияРегистра, ИмяСоздаваемойТаблицы);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТДвиженияРегистра);
	Иначе
		ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	КонецЕсли;	
	
	ДобавитьЗапросСрезаДляПолученияДвиженийПервичногоРегистра(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);	
	
	ОписаниеРезультирующегоЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПакетаПоИмениВТ(ОписаниеПакетаЗапросов, ИмяСоздаваемойТаблицы);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеРезультирующегоЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеРезультирующегоЗапроса, ПараметрыПостроения);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеРезультирующегоЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТИнтервалыСрез(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения = Неопределено, ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	КонецЕсли; 
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "СрезПоследних" + ИмяРегистра;
	КонецЕсли;	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|	РегистрСведений.ДатаОкончания КАК ДатаОкончания,
	|	РегистрСведений.ДатаНачала КАК ДатаНачала,
	|	РегистрСведений.Год КАК Год,
	|	РегистрСведений.ПериодПредыдущейЗаписи КАК ПериодПредыдущейЗаписи,
	|	&ШаблонФильтрПериодИсходный КАК Период,
	|	&ШаблонПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
	|	&ШаблонРегистратор КАК Регистратор,
	|	&ШаблонРегистраторЗаписи КАК РегистраторЗаписи,
	|	&ШаблонРегистраторСобытия КАК РегистраторСобытия,
	|	&ШаблонПериодЗаписи КАК ПериодЗаписи,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонПустойИнтервал КАК ПустойИнтервал
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала <= &ФильтрПериодПриведенный_)
	|			И (РегистрСведений.ДатаОкончания >= &ФильтрПериодПриведенный_)
	|			И (&ШаблонСвязьПоИзмерениямФильтра)}
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийЗамена
	|		ПО (РегистрСведений.ПериодПредыдущейЗаписи = РегистрСведенийЗамена.ДатаНачала)
	|			И (РегистрСведений.РегистраторЗаписи <> РегистрСведенийЗамена.РегистраторЗаписи)
	|			И (РегистрСведений.ПериодЗаписи = РегистрСведений.ДатаНачала
	|				ИЛИ РегистрСведенийЗамена.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор))
	|			И (&ШаблонСвязьПоИзмерениям)";
	
	
	ШаблонУсловияИсключаемыйРегистратор = 
	"НЕ(РегистрСведенийЗамена.ПериодЗаписи ЕСТЬ NULL
	|	И РегистрСведений.РегистраторЗаписи В (&ШаблонИсключаемыйРегистратор))";

	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда                 
		ШаблонВыбираемогоРесурса = " 
		|ВЫБОР
		|	КОГДА РегистрСведений.РегистраторЗаписи В (&ИсключаемыеРегистраторы)
		|		ТОГДА РегистрСведенийЗамена.Ресурс_
		|	ИНАЧЕ РегистрСведений.Ресурс_
		|КОНЕЦ";
	Иначе
		ШаблонВыбираемогоРесурса = "РегистрСведений.Ресурс_";
	КонецЕсли;	
	
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапроса, ПостфиксИменПараметров, ПараметрыПостроения.ВсеЗаписи);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяИнтервальногоРегистра(ИмяРегистра));
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений." + ИмяИнтервальногоРегистра(ИмяРегистра));
	
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений");
	КонецЕсли;
	
	ФильтрПериодИсходный = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодИсходный");
	ФильтрПериодПриведенный =ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодПриведенный");
	
	ФильтрПериодПриведенный.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрПериодПриведенный.Кратность = "ДЕНЬ";
		ФильтрПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		Если Не ПараметрыПостроения.ВключаяГраницу Тогда
			ФильтрПериодПриведенный.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
			ФильтрПериодПриведенный.Сдвиг = -1;
			ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";	   
		КонецЕсли; 
	ИначеЕсли Не ПараметрыПостроения.ВключаяГраницу Тогда
		ФильтрПериодПриведенный.Сдвиг = -1;
		ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";
	КонецЕсли; 		
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериодИсходный_", ФильтрПериодИсходный);
		
	Если ПараметрыПостроения.ВсеЗаписи Тогда
		ЗарплатаКадрыПериодическиеРегистры.УстановитьТипСоединения(ОператорЗапроса, "РегистрСведений", "ЛЕВОЕ");
	КонецЕсли; 
		
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если ПараметрыПостроения.ВсеЗаписи И ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено Тогда
			ВыражениеПоля = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, Измерение);
		Иначе
			ВыражениеПоля = "РегистрСведений." + Измерение;
		КонецЕсли;	
			
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоля, Измерение);
		ТекстУсловия = "РегистрСведений." + Измерение + " = РегистрСведенийЗамена." + Измерение;
		УсловияСвязиПоИзмерениям.Добавить(ТекстУсловия);
	КонецЦикла;
	
	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда
		ИсключаемыеРегистраторы = ЗарплатаКадрыПериодическиеРегистры.ИсключаемыеРегистраторы(ПараметрыПостроения);
		ИмяПараметраИсключаемыеРегистраторы = ЗарплатаКадрыПериодическиеРегистры.УстановитьПараметрОтбораПоИсключаемомуРегистратору(ОписаниеПакетаЗапросов, ИсключаемыеРегистраторы, ИмяСоздаваемойТаблицы);
		
		ТекстУсловияСоединенияСТаблицейЗамены = ЗарплатаКадрыПериодическиеРегистры.ТекстУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		ТекстУсловияСоединенияСТаблицейЗамены = СтрЗаменить(ТекстУсловияСоединенияСТаблицейЗамены, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
		
		ЗарплатаКадрыПериодическиеРегистры.ОчиститьУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", УсловияСвязиПоИзмерениям);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", ТекстУсловияСоединенияСТаблицейЗамены);
				
		Если Не ПараметрыПостроения.ВсеЗаписи Тогда				
			ТекстУсловияИсключаемыйРегистратор = СтрЗаменить(ШаблонУсловияИсключаемыйРегистратор, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапроса, ТекстУсловияИсключаемыйРегистратор);
		КонецЕсли;	
		ШаблонВыбираемогоРесурса = СтрЗаменить(ШаблонВыбираемогоРесурса, "&ИсключаемыеРегистраторы", "&" + ИмяПараметраИсключаемыеРегистраторы);		
	Иначе 
		ЗарплатаКадрыПериодическиеРегистры.УдалитьТаблицуИзОператораЗапроса(ОператорЗапроса, "РегистрСведенийЗамена");
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрПериодИсходный), "Период");
	
	СоответствиеЭлементовОтбораВыражениям = Новый Соответствие;
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ВыражениеПоляПериодВозвратногоСобытия = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ДействуетДо");
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодВозвратногоСобытия, "ПериодВозвратногоСобытия");	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПериодВозвратногоСобытия"), ВыражениеПоляПериодВозвратногоСобытия);
	КонецЕсли;
	
	ВыражениеПоляРегистратор = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторСобытия");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "Регистратор");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);

	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "РегистраторСобытия");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("Регистратор"), ВыражениеПоляРегистратор);
	
	ВыражениеПоляРегистраторЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторЗаписи");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистраторЗаписи, "РегистраторЗаписи");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("РегистраторЗаписи"), ВыражениеПоляРегистраторЗаписи);
	
	ВыражениеПоляПериодЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ПериодЗаписи");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодЗаписи, "ПериодЗаписи");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПериодЗаписи"), ВыражениеПоляПериодЗаписи);
	
	ВыражениеПоляПустойИнтервал = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "ПустойИнтервал");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПустойИнтервал, "ПустойИнтервал");	
	СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег("ПустойИнтервал"), ВыражениеПоляПустойИнтервал);
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Ресурс), ВыражениеПоляРесурс);
	КонецЦикла;	

	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоляРеквизит = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Реквизит);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРеквизит, Реквизит);	
		СоответствиеЭлементовОтбораВыражениям.Вставить(ВРег(Реквизит), ВыражениеПоляРеквизит);
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	СчПараметров = 1;
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ИмяСоздаваемойТаблицы, СчПараметров, , , Ложь, Не ПараметрыПостроения.ИсключаемыеРегистраторы);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров + "ОтборыКСрезу", СчПараметров,,,,Не ПараметрыПостроения.ИсключаемыеРегистраторы);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТСрезПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения = Неопределено, ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Реализация().ДобавитьЗапросВТСрезПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
КонецПроцедуры

Процедура ДобавитьЗапросВТПериодыИмяИнтервальногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения = Неопределено, ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	ИмяИнтервальногоРегистра = ИмяИнтервальногоРегистра(ИмяРегистра);
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды();
	КонецЕсли; 
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "Периоды" + ИмяРегистра;
	КонецЕсли; 
		
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДатаНачала <= &ФильтрДатаНачалаПолученияПериода_
	|			ТОГДА &ФильтрДатаНачалаПолученияПериода_
	|		ИНАЧЕ &РегистрДатаНачалаПриведенная_
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА &РегистрДатаОкончания_ > 
	|				&ФильтрДатаОкончанияПриведенная_
	|			ТОГДА &ФильтрДатаОкончанияПриведенная_
	|		ИНАЧЕ &РегистрДатаОкончания_
	|	КОНЕЦ КАК КонецПериода,
	|	ВЫБОР
	|		КОГДА РегистрСведений.ДатаНачала = РегистрСведений.ПериодЗаписи
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие,
	|РегистрСведений.ПериодЗаписи КАК Период,
	|	РегистрСведений.РегистраторСобытия КАК Регистратор,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТИнтервалыКадроваяИсторияСотрудников
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.ДатаНачала >= &ФильтрДатаНачалаСледующийПериод_
	|					И РегистрСведений.ДатаНачала <= &ФильтрДатаОкончанияПриведенная_ 
	|				ИЛИ &РегистрДатаНачалаПриведенная_ <= &ФильтрДатаСреза_
	|					И РегистрСведений.ДатаОкончания >= &ФильтрДатаСреза_)
	|					И &УсловиеПериодичностьДень
	|			И (&ШаблонУсловиеПоИзмерениям_)";
	
	УсловияПериодичностьДень = "(РегистрСведений.ДатаОкончания >= КОНЕЦПЕРИОДА(РегистрСведений.ДатаНачала, ДЕНЬ))";		
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра,  ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОператорЗапроса, ПостфиксИменПараметров);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяИнтервальногоРегистра(ИмяРегистра));
		
	ФильтрДатаНачалаПолученияПериода = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаПолученияПериода");
	ФильтрДатаОкончанияИсходная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДФильтратаОкончанияИсходная");
	ФильтрДатаОкончанияПриведенная =ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");
	ФильтрДатаНачалаСледующийПериод = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаСледующийПериод");
	ФильтрДатаСреза =  ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСреза");
	ФильтрДатаНачалаИсходная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачалаИсходная");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	РегистрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПоляПериода("ДатаНачала", "РегистрСведений");
	
	ВыражениеРегистрДатаОкончания = "РегистрСведений.ДатаОкончания";
	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрДатаНачалаПолученияПериода.Кратность = "ДЕНЬ";
		ФильтрДатаНачалаПолученияПериода.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		РегистрДатаНачалаПриведенная.Кратность = "ДЕНЬ";
		РегистрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		ФильтрДатаНачалаСледующийПериод.Кратность = "ДЕНЬ";
		ФильтрДатаНачалаСледующийПериод.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		ФильтрДатаНачалаСледующийПериод.Сдвиг = 1;
		
		ФильтрДатаСреза.Кратность = "ДЕНЬ";
		ФильтрДатаСреза.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		// Приводим дату на конец текущего дня(предыдущего, если интервал был прерван)
		ВыражениеРегистрДатаОкончания = "КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(РегистрСведений.ДатаОкончания, СЕКУНДА, -86399), ДЕНЬ)";
	Иначе	
		УсловияПериодичностьДень = "ИСТИНА";
		ФильтрДатаНачалаСледующийПериод.Сдвиг = 1;
		ФильтрДатаНачалаСледующийПериод.КратностьСдвига = "СЕКУНДА";
	КонецЕсли;	
	
	ТекстПоляНачалоПериода = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "НачалоПериода");
	ТекстПоляНачалоПериода = СтрЗаменить(ТекстПоляНачалоПериода, "&ФильтрДатаНачалаПолученияПериода_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачалаПолученияПериода));
	ТекстПоляНачалоПериода = СтрЗаменить(ТекстПоляНачалоПериода, "&РегистрДатаНачалаПриведенная_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(РегистрДатаНачалаПриведенная));
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ТекстПоляНачалоПериода, "НачалоПериода");
	
	ТекстПоляКонецПериода = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "КонецПериода");
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&РегистрДатаОкончания_", ВыражениеРегистрДатаОкончания);
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&ФильтрДатаОкончания_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончанияИсходная));
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&ФильтрДатаОкончанияПриведенная_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончанияПриведенная));
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ТекстПоляКонецПериода, "КонецПериода");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаСледующийПериод_", ФильтрДатаНачалаСледующийПериод);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияИсходная_", ФильтрДатаОкончанияИсходная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаСреза_", ФильтрДатаСреза);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведенная_", РегистрДатаНачалаПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&УсловиеПериодичностьДень", УсловияПериодичностьДень);
		
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачалаИсходная), "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончанияИсходная), "ДатаОкончания");
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если Измерение <> "ДатаНачала" И Измерение <> "ДатаОкончания" Тогда
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Измерение, Измерение);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Ресурс, Ресурс);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "РегистрСведений." + Реквизит, Реквизит);
	КонецЦикла;

	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров,,,,Ложь);

	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТПериодыИмяПервичногоРегистра(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения = Неопределено, ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраПериоды();
	КонецЕсли;
	
	ИмяВТДвиженияРегистра = "ВТДвиженияРегистра" + ИмяРегистра;	
	
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "Периоды" + ИмяРегистра;
	КонецЕсли;	
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);
		
	ПараметрыПостроенияДвижений = ПараметрыПостроенияДвиженийПоПараметрамПостроения(ПараметрыПостроения);
		
	ДобавитьЗапросВТДвиженияПервичныйРегистр(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроенияДвижений, ИмяВТДвиженияРегистра);
	
	ШаблонЗапросаВТМаксимальныеОкончанияПериодов = 
	"ВЫБРАТЬ
	|	ДвиженияРегистра.Период КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ВЫБОР
	|						КОГДА ДвиженияРегистра.ПериодВозвратногоСобытия < ДвиженияРегистра.Период
	|							ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|						ИНАЧЕ ДвиженияРегистра.ПериодВозвратногоСобытия
	|					КОНЕЦ)) > &ФильтрДатаОкончанияПриведенная_
	|			ТОГДА &ФильтрДатаОкончанияПриведенная_
	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ВЫБОР
	|						КОГДА ДвиженияРегистра.ПериодВозвратногоСобытия < ДвиженияРегистра.Период
	|							ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
	|						ИНАЧЕ ДвиженияРегистра.ПериодВозвратногоСобытия
	|					КОНЕЦ))
	|	КОНЕЦ КАК КонецПериода,
	|	&ШаблонФильтрДатаНачала КАК ДатаНачала,
	|	&ШаблонФильтрДатаОкончания КАК ДатаОкончания,
	|	ДвиженияРегистра.ПериодЗаписи КАК ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор КАК Регистратор,
	|	&ШаблонЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТМаксимальныеОкончанияПериодов
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияРегистра КАК ДвиженияРегистра
	|		ПО (ДвиженияРегистра.Период >= &ФильтрДатаНачала_)
	|			И (ДвиженияРегистра.Период <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямСФильтром)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРегистра КАК СледующиеИнтервалы
	|		ПО (ДвиженияРегистра.Период < СледующиеИнтервалы.Период)
	|			И (ДвиженияРегистра.ПериодЗаписи <> СледующиеИнтервалы.ПериодЗаписи)
	|			И (&ШаблонУсловияСвязиПоИзмерениям)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияРегистра.Период,
	|	ДвиженияРегистра.ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор";
				
	ОписаниеЗапросаВТМаксимальныеОкончанияПериодов = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаВТМаксимальныеОкончанияПериодов);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов);
	ОператорЗапросаВТМаксимальныеОкончанияПериодов = ОписаниеЗапросаВТМаксимальныеОкончанияПериодов.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра(, "ДвиженияРегистра");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "ДатаНачала, ДатаОкончания", ОператорЗапросаВТМаксимальныеОкончанияПериодов, ПостфиксИменПараметров);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "ДвиженияРегистра", ИмяВТДвиженияРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "СледующиеИнтервалы", ИмяВТДвиженияРегистра);
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ТекстПоляКонецПериода = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "КонецПериода");
	Иначе
		ТекстПоляКонецПериода = 	
		"ВЫБОР
		|	КОГДА МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59))) > &ФильтрДатаОкончанияПриведенная_
		|		ТОГДА &ФильтрДатаОкончанияПриведенная_
		|	ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеИнтервалы.Период, СЕКУНДА, -1), ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)))
		|КОНЕЦ";
	КонецЕсли;	
				
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ФильтрДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ФильтрДатаОкончанияПриведенная");	
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если ФормироватьСПериодичностьДень Тогда 
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
	КонецЕсли;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
		
	ТекстПоляКонецПериода = СтрЗаменить(ТекстПоляКонецПериода, "&ФильтрДатаОкончанияПриведенная_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончанияПриведенная));
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ТекстПоляКонецПериода, "КонецПериода");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала), "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания), "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала));
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания));
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ОписаниеИспользованияФильтра, Истина);
		
	ШаблонЗапросаВТПериоды = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ДвиженияРегистра.НачалоПериода) КАК НачалоПериода,
	|	ДвиженияРегистра.КонецПериода КАК КонецПериода,
	|	ДвиженияРегистра.ДатаНачала КАК ДатаНачала,
	|	ДвиженияРегистра.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияРегистра.ПериодЗаписи КАК ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор КАК Регистратор,
	|	&ШаблонЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонРеквизиты КАК Реквизиты
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТМаксимальныеОкончанияПериодов КАК ДвиженияРегистра
	|                                                                                            
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияРегистра.КонецПериода,
	|	ДвиженияРегистра.ДатаНачала,
	|	ДвиженияРегистра.ДатаОкончания,
	|	ДвиженияРегистра.ПериодЗаписи,
	|	ДвиженияРегистра.Регистратор";

	
	ОписаниеЗапросаВТПериоды = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаВТПериоды);
	ОписаниеЗапросаВТПериоды.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаВТПериоды);
	ОператорЗапросаВТПериоды = ОписаниеЗапросаВТПериоды.Операторы[0];
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, "ДвиженияРегистра.ЭтоВозвратноеСобытие", "ЭтоВозвратноеСобытие");
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, "ДвиженияРегистра.ЭтоВозвратноеСобытие", "ЭтоВозвратноеСобытие");
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "ДвиженияРегистра.ЭтоВозвратноеСобытие");
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТПериоды, "ДвиженияРегистра.ЭтоВозвратноеСобытие");
	КонецЕсли;
	
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если Измерение = "ДатаОкончания"
			ИЛИ Измерение = "ДатаНачала"
			ИЛИ Измерение = "Год" Тогда
		
			Продолжить;
		КонецЕсли;

		ВыражениеПоля = "ДвиженияРегистра." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Измерение);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Измерение);	
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
		
		Если Измерение <> "ПериодЗаписи" Тогда
			ТекстУсловия = "ДвиженияРегистра." + Измерение + " = СледующиеИнтервалы." + Измерение;	
			УсловияСвязиПоИзмерениям.Добавить(ТекстУсловия);
		КонецЕсли;	
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапросаВТМаксимальныеОкончанияПериодов, "СледующиеИнтервалы", УсловияСвязиПоИзмерениям); 
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоля = "ДвиженияРегистра." + Ресурс;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Ресурс);	
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ВыражениеПоля = "ДвиженияРегистра." + Ресурс;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Ресурс);	
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
	КонецЦикла;	
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоля = "ДвиженияРегистра." + Реквизит;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТМаксимальныеОкончанияПериодов, 0, ВыражениеПоля, Реквизит);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, 0, ВыражениеПоля, Реквизит);	
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТМаксимальныеОкончанияПериодов, ВыражениеПоля);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапросаВТПериоды, ВыражениеПоля);	
	КонецЦикла;	

	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоПсевдонимуИсточника(ОписаниеЗапросаВТПериоды, 0, "ДвиженияРегистра", ОписаниеФильтра.ДополнительныеПоляФильтра);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапросаВТПериоды, ПараметрыПостроения.ПостоянныеПоля, ПостфиксИменПараметров);
		
	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеЗапросаВТПериоды, ПараметрыПостроения);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапросаВТПериоды, ПараметрыПостроения.ИндексироватьПо);	
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, ИмяВТДвиженияРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьЗапросУничтоженияВТ(ОписаниеПакетаЗапросов, "ВТМаксимальныеОкончанияПериодов");
		
КонецПроцедуры

Процедура ДобавитьЗапросСрезаДляПолученияДвиженийПервичногоРегистра(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра, ПараметрыПостроения, ИмяДополняемойВТ) Экспорт
	Реализация().ДобавитьЗапросСрезаДляПолученияДвиженийПервичногоРегистра(ОписаниеПакетаЗапросов, ТолькоРазрешенные, ОписаниеРегистра, ОписаниеФильтра, ПараметрыПостроения, ИмяДополняемойВТ);
КонецПроцедуры

Процедура ПриПолученииВыраженийРесурсаВозвратныхЗаписейПервичногоРегистра(ИмяРегистра, ОписаниеЗапроса, ОператорЗапроса) Экспорт
	Если НРег(ИмяРегистра) <> НРег(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя) Тогда
		Возврат;
	КонецЕсли;	
	
	ШаблонПоляВидСобытия = 
	"ВЫБОР
	|	КОГДА &ЭтоВозвратноеСобытие
	|		И &ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение)
	|	ИНАЧЕ &ВидСобытия
	|КОНЕЦ";

	ВыражениеВидСобытия = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ВидСобытия");
	
	Если ВыражениеВидСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыражениеЭтоВозвратноеСобытие = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ЭтоВозвратноеСобытие");
	
	ТекстПоля = СтрЗаменить(ШаблонПоляВидСобытия, "&ЭтоВозвратноеСобытие", ВыражениеЭтоВозвратноеСобытие);
	ТекстПоля = СтрЗаменить(ТекстПоля, "&ВидСобытия", ВыражениеВидСобытия);

	ИндексОператора = ОписаниеЗапроса.Операторы.Найти(ОператорЗапроса);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, ИндексОператора, ТекстПоля, "ВидСобытия", Ложь);
КонецПроцедуры	

Функция ВыражениеПоляНаследуемыйРесурс(Ресурс, ПараметрыНаследованияРесурсов, ПараметрыЗапроса) Экспорт
	
	ПараметрыНаследования = Неопределено;
	Если Не ПараметрыНаследованияРесурсов.Свойство(Ресурс, ПараметрыНаследования) Тогда
		Возврат "РегистрСведенийРесурсы." + Ресурс;
	КонецЕсли;
	
	ШаблонПоляРесурсы = "
	|	ВЫБОР
	|		КОГДА ИзмеренияДаты.МаксимальныйПериодРесурсы <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ШаблонРесурсы
	|		ИНАЧЕ &ШаблонНаследованиеРесурсы
	|	КОНЕЦ";
	
	ШаблонПоляРесурсы = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонРесурсы", "РегистрСведенийРесурсы." + Ресурс);
	
	Если ПараметрыНаследования.ПравилоНаследования = ЗарплатаКадрыПериодическиеРегистры.ПравилоНаследованияНаследование() Тогда
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонНаследованиеРесурсы", "РегистрСведенийИзмерения." + Ресурс);
	ИначеЕсли ПараметрыНаследования.ПравилоНаследования = ЗарплатаКадрыПериодическиеРегистры.ПравилоНаследованияФиксированное() Тогда
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонНаследованиеРесурсы", "&ПараметрыНаследования" + Ресурс);
		ПараметрыЗапроса.Вставить("ПараметрыНаследования" + Ресурс, ПараметрыНаследования.Значение);
	Иначе 
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонПоляРесурсы, "&ШаблонНаследованиеРесурсы", "NULL");
	КонецЕсли;
	
	Возврат ВыражениеПоляРесурс;
	
КонецФункции

Функция ВладелецОператораЗапроса(ОписаниеПакетаЗапросов, ОператорЗапроса) Экспорт
	Для Каждого ОписаниеЗапроса Из ОписаниеПакетаЗапросов.ЗапросыПолученияДанных Цикл
		Для Каждого ТекущийОператор Из ОписаниеЗапроса.Операторы Цикл
			Если ТекущийОператор =  ОператорЗапроса Тогда
				Возврат ОписаниеЗапроса;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

Процедура ОбновитьРесурсыИнтервальногоРегистра(ИмяРегистра) Экспорт
	
	ИмяИнтервальногоРегистра = ИмяИнтервальногоРегистра(ИмяРегистра);
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	ОписаниеИнтервальногоРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяИнтервальногоРегистра);
	ШаблонЗапросаРазличий = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ШаблонИзмерения КАК Измерения
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	#ПервичныйРегистр КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИнтервальныйРегистр КАК ИнтервальныйРегистр
		|		ПО &ШаблонУсловияСоединения
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи";
	
	ШаблонЗапросаРесурсов = 
		"ВЫБРАТЬ
		|	&ШаблонИнтервальныйРегистрИзмерения КАК Измерения,
		|	&ШаблонИнтервальныйРегистрРесурсы КАК ИнтервальныеРесурсы,
		|	&ШаблонИнтервальныйРегистрРеквизиты КАК Реквизиты,
		|	&ШаблонПервичныйРегистрРесурсы КАК ПервичныеРесурсы
		|ИЗ
		|	#ПервичныйРегистр КАК ПервичныйРегистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО &ШаблонУсловияСоединения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИнтервальныйРегистр КАК ИнтервальныйРегистр
		|		ПО &ШаблонУсловияСоединения
		|			И ПервичныйРегистр.Регистратор = ИнтервальныйРегистр.РегистраторЗаписи
		|			И ПервичныйРегистр.Период = ИнтервальныйРегистр.ПериодЗаписи";
	
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеЗапросаРазличий = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаРазличий);
	ОператорЗапросаРазличий = ОписаниеЗапросаРазличий.Операторы[0];
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаРазличий);
	
	ОписаниеЗапросаРесурсов = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапросаРесурсов);
	ОператорЗапросаРесурсов = ОписаниеЗапросаРесурсов.Операторы[0];
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапросаРесурсов);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаРазличий, "ПервичныйРегистр", "РегистрСведений." + ИмяРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаРесурсов, "ПервичныйРегистр", "РегистрСведений." + ИмяРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаРазличий, "ИнтервальныйРегистр", "РегистрСведений." + ИмяИнтервальногоРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапросаРесурсов, "ИнтервальныйРегистр", "РегистрСведений." + ИмяИнтервальногоРегистра);
	
	ЗначенияИзмерений = Новый Структура;
	
	Для каждого Измерение Из ОписаниеИнтервальногоРегистра.Измерения Цикл
		ВыражениеПоля = "ИнтервальныйРегистр." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаРесурсов, 0, ВыражениеПоля, Измерение);
		
		Если ОписаниеРегистра.Измерения.Найти(Измерение) <> Неопределено Тогда
			ЗначенияИзмерений.Вставить(Измерение);
			
			ВыражениеПоля = "ПервичныйРегистр." + Измерение;
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаРазличий, 0, ВыражениеПоля, Измерение);
			
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(
				ОператорЗапросаРазличий,
				"ИнтервальныйРегистр",
				СтрШаблон("ПервичныйРегистр.%1 = ИнтервальныйРегистр.%1", Измерение));
				
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(
				ОператорЗапросаРесурсов,
				"ИнтервальныйРегистр",
				СтрШаблон("ПервичныйРегистр.%1 = ИнтервальныйРегистр.%1", Измерение));
				
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(
				ОператорЗапросаРесурсов,
				"ВТСотрудники",
				СтрШаблон("ПервичныйРегистр.%1 = ВТСотрудники.%1", Измерение));
			
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляУпорядочиванияВОписаниеЗапроса(ОписаниеЗапросаРесурсов, "ИнтервальныйРегистр." + Измерение);	
		КонецЕсли; 
	КонецЦикла; 
	
	УсловияРазличий = Новый Массив;
	
	Для каждого Ресурс Из ОписаниеИнтервальногоРегистра.Ресурсы Цикл
		Если ОписаниеРегистра.Ресурсы.Найти(Ресурс) <> Неопределено Тогда
			ВыражениеПоля = "ПервичныйРегистр." + Ресурс;
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаРесурсов, 0, ВыражениеПоля, Ресурс);
			
			УсловияРазличий.Добавить(СтрШаблон("ПервичныйРегистр.%1 <> ИнтервальныйРегистр.%1", Ресурс));
		Иначе
			ВыражениеПоля = "ИнтервальныйРегистр." + Ресурс;
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаРесурсов, 0, ВыражениеПоля, Ресурс);
		КонецЕсли;
	КонецЦикла;
	
	Если УсловияРазличий.Количество() > 0 Тогда
		РазделительИЛИ = Символы.ПС + "	ИЛИ ";
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(
			ОператорЗапросаРазличий,
			"ИнтервальныйРегистр",
			СтрСоединить(УсловияРазличий, РазделительИЛИ));
	КонецЕсли;
	
	Если ОписаниеРегистра.ЕстьВозвратныеСобытия Тогда
		ВыражениеПоля = "ПервичныйРегистр.ДействуетДо";
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаРесурсов, 0, ВыражениеПоля, "ДействуетДо");
	КонецЕсли;
	
	Для каждого Реквизит Из ОписаниеИнтервальногоРегистра.Реквизиты Цикл
	    ВыражениеПоля = "ИнтервальныйРегистр." + Реквизит;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапросаРесурсов, 0, ВыражениеПоля, Реквизит);
	КонецЦикла;
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов, Ложь);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений[ИмяИнтервальногоРегистра].СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначенияИзмеренийОтличны(ЗначенияИзмерений, Выборка)
			И НаборЗаписей.Количество() > 0 Тогда
			
			УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЕсли; 
		
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(ЗначенияИзмерений, Выборка);
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда 
		УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияИзмеренийОтличны(ЗначенияИзмерений, ОбъектСравнения) Экспорт
	
	Если ЗначенияИзмерений = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ЗначенияИзмерений Цикл
	
		Если КлючИЗначение.Значение <> ОбъектСравнения[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьОтбор(НаборЗаписей, ЗначенияИзмерений) Экспорт
	
	Для каждого КлючИЗначение Из ЗначенияИзмерений Цикл
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Значение = КлючИЗначение.Значение;
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Реализация()
	Если ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат ИнтервальныеРегистрыБЗКРеализацияСоСтеком;
	Иначе
		Возврат ИнтервальныеРегистрыБЗКРеализацияБезСтека;
	КонецЕсли;
КонецФункции

Функция ПараметрыПостроенияДвиженийПоПараметрамПостроения(ПараметрыПостроения)
	
	ПараметрыПостроенияДвижений = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроенияДвижений.ФормироватьСПериодичностьДень = ПараметрыПостроения.ФормироватьСПериодичностьДень;
	ПараметрыПостроенияДвижений.ИсключаемыеРегистраторы = ПараметрыПостроения.ИсключаемыеРегистраторы;	
	ПараметрыПостроенияДвижений.ВключатьЗаписиНаНачалоПериода = Истина;
	ПараметрыПостроенияДвижений.ИсключатьНеИспользуемыеПоля = ПараметрыПостроения.ИсключатьНеИспользуемыеПоля;
	
	Если ПараметрыПостроения.Отборы <> Неопределено Тогда
		
		Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияДвижений.Отборы, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение, ОписаниеОтбора.ОтносительныйПуть);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПостроенияДвижений;
	
КонецФункции

#КонецОбласти