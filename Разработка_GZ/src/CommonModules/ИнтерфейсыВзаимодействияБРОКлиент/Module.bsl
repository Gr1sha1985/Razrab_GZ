////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции интерфейсов взаимодействия БРО
// с другими библиотеками/конфигурациями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Групповая отправка отчетов
//
// Параметры:
//  ВыполняемоеОповещение	 - ОписаниеОповещения - описание оповещения, вызываемого после завершения отправки.
//  Ссылки					 - Массив - Массив ссылок на рег. отчеты.
//
Процедура ОтправитьОтчеты(ВыполняемоеОповещение, Ссылки) Экспорт
	
	ДокументооборотСКОКлиент.ОтправитьОтчеты(ВыполняемоеОповещение, Ссылки);

КонецПроцедуры

#Область ЗапросВФНСНаПроверкуСведенийРаботников

// Процедура создает и записывает на диск файл(-ы) для представления в налоговую инспекцию
// запроса работодателя на проверку ИНН, ФИО, СНИЛС работающих лиц в электронной форме.
//
// Параметры:
//  СтруктураПараметров - Структура - варианты свойств:
//     Вариант 1:
//        * Организация - СправочникСсылка.Организации - организация, по работникам
//                        которой будут формироваться сведения для файла;
//        * ДатаПодписи - Дата - дата, на которую будут формироваться сведения для файла;
//        * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                        (необязательный параметр, по умолчанию допустимое количество равно 200;
//                        в случае превышения, будет записано необходимое количество файлов).
//     Вариант 2:
//        * РасчетПоСтраховымВзносам - ДокументСсылка.РегламентированныйОтчет - документ,
//                        по данным которого будут формироваться сведения для файла;
//        * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                        (необязательный параметр, по умолчанию допустимое количество равно 200;
//                        в случае превышения, будет записано необходимое количество файлов).
//
Процедура СформироватьИСохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	
	ПараметрыСохранения
	= ИнтерфейсыВзаимодействияБРОВызовСервера.СформироватьФайлЗапросаВФНСНаПроверкуСведенийРаботников(
	СтруктураПараметров);
	
	Если ТипЗнч(ПараметрыСохранения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(ПараметрыСохранения);
	
КонецПроцедуры

#КонецОбласти

#Область РучнойВводСтатусовОтправки

// Процедура предназначена для установки вручную статуса отправки из экранных форм объектов,
// отображаемых на закладке "Отчеты" формы "1С-Отчетность", путем выбора значения из выпадающего списка.
//
// Параметры:
//  ПараметрыИзменения - Структура со свойствами:
//    "Форма" - ФормаКлиентскогоПриложения - форма регл. отчета или уведомления о спецрежимах налогообложения;
//    "Организация" - СправочникСсылка.Организации - организация;
//    "КонтролирующийОрган" - Перечисление.ТипыКонтролирующихОрганов - контролирующий орган;
//    "ТекстВопроса" (необязательный) - Строка - текст предупреждения при попытке установить статус "Сдано".
//
Процедура ИзменитьСтатусОтправки(ПараметрыИзменения) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбИзмененииОКТМО

// Показывает организациям из Московской области уведомление об изменении ОКТМО в 2018 году.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию для которой нужно вывести уведомление.
//   ОповещениеПродолжения - ОписаниеОповещения - описание оповещения, вызываемого после закрытия формы.
//
Процедура ПоказатьУведомлениеОбИзмененииОКТМО46(Организация, ОповещениеПродолжения = Неопределено) Экспорт
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если ЗначениеЗаполнено(Организация) И ТекущаяДата < '2018-04-01'
	   И ИнтерфейсыВзаимодействияБРОВызовСервера.ТребуетсяВыводУведомлениеОбИзмененииОКТМО46(Организация) Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Организация", Организация);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзменениеОКТМО46",
			Параметры, , , , , ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		Если ОповещениеПродолжения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТаможенноеДекларирование

// Возвращает процедуры таможенного декларирования на сайте ФТС edata.customs.ru,
// при необходимости, запрашивает логин и пароль портала ФТС и может запомнить их в 1С-Отчетности.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - структура дополнительных параметров получения при РежимыРаботы.ТолькоПолучитьНастройки = Истина,
//       включает элементы "ПараметрыОтправки" и "ПараметрыСоединения" для вызова функции
//       "ИнтерфейсыВзаимодействияБРОВызовСервера.ПолучитьПроцедурыДекларированияФТСССервера", иначе Массив:
//       * РегистрационныйНомер  - Строка - пример: "10013160/160620/0302033", "null" - не задан
//                                          (для выпущенных и зарегистрированных ДТ всегда задан)
//       * ДатаСоздания          - Строка - пример: "2020-06-16T17:26:16";
//       * ТипПроцедуры          - Строка - пример: "ЭК 10", "ИМ 40", число кода процедуры согласно классификатору
//                                          в решении Комиссии Таможенного союза от 20.09.2010 N 378
//                                          (ред. от 21.04.2020) "О классификаторах, используемых для заполнения
//                                          таможенных документов", приложении 1
//                                          http://www.consultant.ru/document/cons_doc_LAW_105110/ec01d1f8f765126d090770e15d2f714e88c4bc67/
//       * Статус                - Строка - пример: "10", у старых ДТ пустая строка; классификатор статусов
//                                          есть в решении Комиссии Таможенного союза от 20.09.2010 N 378
//                                          (ред. от 21.04.2020) "О классификаторах, используемых для заполнения
//                                          таможенных документов", приложении 14
//                                          http://www.consultant.ru/document/cons_doc_LAW_105110/6b14436828c8d727b30feb8feaf7b8f9585b03cd/
//           Только для РежимПолучения = "":
//       * Примечание            - Строка.
//           Только для РежимПолучения = "ВыпущенныеДТ":
//       * ВсегоТоваровМест      - Строка - пример: "3/2"
//       * ОбщаяСтоимость        - Строка - пример: "8 620 403,79 RUB"
//       * ДатаРешения           - Строка - пример: "16.06.2020"
//       * Отправитель           - Строка - пример: ""MICROSOFT IRELAND OPERATIONS LTD" СО СКЛАДА "TEST" ИНН  КПП "
//       * Получатель            - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001"
//       * СтранаОтправления     - Строка - пример: "НИДЕРЛАНДЫ"
//       * СтранаНазначения      - Строка - пример: "РОССИЯ"
//       * СтранаПроисхождения   - Строка - пример: "РАЗНЫЕ", "КИТАЙ"
//       * ОтветственныйЗаФинУрегулирование - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001" (при импорте)
//       * Идентификатор         - Строка - пример: "f9c0e49e-f5b8-3e27-b9b4-84fdf001985c"
//       * ПроцедураВЛК          - Строка - пример: "null"
//       * ДатаРегистрации       - Строка - пример: "2020-06-16T00:00:00"
//       * КодРегистрации        - Строка - пример: "10015160"
//       * ПорядковыйНомер       - Строка - пример: "0305033"
//       * Декларант             - Строка - пример: "ООО "Тест" ИНН 9620030509 КПП 962001001"
//       * ИмяОтправителя        - Строка - пример: ""MICROSOFT IRELAND OPERATIONS LTD" СО СКЛАДА "TEST""
//       * ИмяПолучателя         - Строка - пример: "ООО "Тест""
//       * Модель                - Строка - пример: "AUDRequest"
//       * ИмяСтатуса            - Строка - пример: "Saved"
//       * Версия                - Строка - пример: "4.2.0/1.0.0"
//   Организация           - СправочникСсылка.Организации - ссылка на организацию,
//                                                          настройки обмена с ФТС которой используются.
//   РежимПолучения        - Строка - "ВыпущенныеДТ" для выпущенных и зарегистриорванных деклараций на товары,
//                                    примеры результатов приведены для этого варианта;
//                                  - "" для заводимых вручную в личном кабинете ФТС процедур декларирования.
//   Отборы - Структура с необязательными свойствами, по которым выполняется отбор, если свойства присутствуют, заданы:
//     * ТипПроцедуры         - Строка - "ЭК" - экспорт, "ИМ" - импорт;
//     * ДатаРешенияС         - Дата;
//     * ДатаРешенияПо        - Дата;
//     * РегистрационныйНомер - Строка.
//   РежимыРаботы - Неопределено или Структура, в которой могут быть элементы:
//     * ТолькоПолучитьНастройки                   - Булево - по умолчанию Ложь, только получение или ввод параметров
//                                                   настройки;
//     * ПовторятьЗапросПароляПриОшибке            - Булево - по умолчанию Истина, в том числе учитывается в процедуре
//                                                   "ОбработатьРезультатыПолученияПроцедурДекларированияФТС";
//     * ПоказыватьДиалогПриОшибкеДоступаВИнтернет - Булево - по умолчанию Истина,  в том числе учитывается в процедуре
//                                                   "ОбработатьРезультатыПолученияПроцедурДекларированияФТС".
//
Процедура ПолучитьПроцедурыДекларированияФТС(
		ОповещениеОЗавершении,
		Организация,
		РежимПолучения = "ВыпущенныеДТ",
		Отборы = Неопределено,
		РежимыРаботы = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Организация", 			Организация);
	ДополнительныеПараметры.Вставить("РежимПолучения", 			РежимПолучения);
	ДополнительныеПараметры.Вставить("Отборы", 					Отборы);
	ДополнительныеПараметры.Вставить("РежимыРаботы", 			РежимыРаботы);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьПроцедурыДекларированияФТСПослеПолученияКонтекста",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

// Обрабатывает результаты получения процедур таможенного декларирования товаров с сайта ФТС.
//
// Параметры:
//   ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат - при незаданном оповещении "ОповещениеОПолученииНастроек" принимает результат вместо него,
//                 а также принимает Массив с полученными таможенными декларациями, формат описан в оповещении
//                 процедуры "ПолучитьПроцедурыДекларированияФТС".
//   ПроцедурыДекларирования - Неопределено или Массив процедур декларирования, результат функции 
//                             "ИнтерфейсыВзаимодействияБРОВызовСервера.ПолучитьПроцедурыДекларированияФТСССервера".
//   ДополнительныеПараметрыПолучения - Структура - результат вызова процедуры "ПолучитьПроцедурыДекларированияФТС"
//                                                  при РежимыРаботы.ТолькоПолучитьНастройки = Истина,
//                                                  возвращает результаты в оповещение, заданное этой процедурой.
//   ОповещениеОПолученииНастроек - ОписаниеОповещения - описание процедуры, принимающей результат получения настроек,
//                                                       при незаданном значении вызывается "ОповещениеОЗавершении".
//     Результат - структура дополнительных параметров получения при РежимыРаботы.ТолькоПолучитьНастройки = Истина
//                 вызова процедуры "ПолучитьПроцедурыДекларированияФТС" в случае повтора попытки соединения
//                 или ввоза пароля.
//
Процедура ОбработатьРезультатыПолученияПроцедурДекларированияФТС(
		ОповещениеОЗавершении,
		ПроцедурыДекларирования,
		ДополнительныеПараметрыПолучения,
		ОповещениеОПолученииНастроек = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 				ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ПроцедурыДекларирования", 			ПроцедурыДекларирования);
	ДополнительныеПараметры.Вставить("ДополнительныеПараметрыПолучения", 	ДополнительныеПараметрыПолучения);
	ДополнительныеПараметры.Вставить("ОповещениеОПолученииНастроек", 		ОповещениеОПолученииНастроек);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыПолученияПроцедурДекларированияФТСПослеПолученияКонтекста",
		ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗапроситьВыпискуОперацийПоРасчетуСБюджетом(ОповещениеОЗавершении, Организация, РегистрацияВНалоговомОргане, Год) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ДополнительныеПараметры.Вставить("Год", Год);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапроситьВыпискуОперацийПоРасчетуСБюджетом_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#Область ПодписьXMLDSig

// Подписать файл XML в формате XMLDSig сертификатом учетной записи документообороат или заданным явно,
// по умолчанию в формате, используемом для СЗВ-ТД.
//
// Параметры:
//   ОповещениеОЗавершении      - ОписаниеОповещения - описание процедуры, принимающей результат.
//     Результат                  - Строка - адрес временного хранилища с двоичными данными подписанного файла,
//                                  Неопределено - при ошибке.
//   ОрганизацияИлиСертификат   - СправочникСсылка.Организации или
//                                СправочникСсылка.УчетныеЗаписиДокументооборота или,
//                                Строка - отпечаток сертификата или,
//                                Структура - структура свойств сертификата в формате
//                                  "КриптографияЭДКОКлиент.НайтиСертификат".
//   АдресДанных                - Строка - адрес временного хранилища с двоичными данными файла, который нужно
//                                  подписать.
//   НастройкиПодписи           - Неопределено - при незаданном значении используются настройки для подписи СЗВ-ТД,
//                                Структура - может передавать специфические настройки подписи, в формате, используемом
//                                  в обработке "ДокументооборотСКонтролирующимиОрганами"
//                                  форме "КонтейнерКлиентскихМетодов" у процедуры "ПодписатьФайлXMLDSig".
//
Процедура ПодписатьФайлXMLDSig(
	ОповещениеОЗавершении,
	ОрганизацияИлиСертификат,
	АдресДанных,
	НастройкиПодписи = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 		ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ОрганизацияИлиСертификат", 	ОрганизацияИлиСертификат);
	ДополнительныеПараметры.Вставить("АдресДанных", 				АдресДанных);
	ДополнительныеПараметры.Вставить("НастройкиПодписи", 			НастройкиПодписи);
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеПолученияКонтекста", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СформироватьПакетПоЕГРЮЛ

// Объединяет сканы в многостраничные tif-документы, затем подписывает их и формирует пакет для ФНС.
//
// Параметры:
//  Параметры	 - Структура - описание см в методе ПараметрыМетодаСформироватьПакетПоЕГРЮЛ
//
Процедура СформироватьПакетПоЕГРЮЛ(Параметры) Экспорт
	
	ДокументооборотСКОКлиент.СформироватьПакетПоЕГРЮЛ(Параметры);
	
КонецПроцедуры

// Описание параметров для метода СформироватьПакетПоЕГРЮЛ
//
// Параметры:
//  ОповещениеОЗавершении	 - ОповещениеОповещения - в данную процедуру будет передан результат:
//								Структура:
//									* Выполнено - Булево
//									* Адрес - Строка - Адрес во временном хранилище, в котором содержатся двоичные данные пакета.
//											Неопределено, если Выполнено Ложь.
//									* ИмяПакета - Строка - Имя файла архива. Неопределено, если Выполнено Ложь.
//  Заявление	 			 - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//  КодНО		 			 - Строка(4) - код налогового органа, в который будет подаваться заявление
//  ОписаниеФайлов			 - Массив структур - содержит структуры с описанием приложенных сканов:
//								* ВидДокумента - Перечисление.ВидыДокументовДляЭлГосРегистрации - вид документа
// 								* АдресаФайлов - Массив - Массив адресов сканов во временном хранилище, содержащих двоичные
// 										данные файлов. Последовательность адресов в массиве	будет определять последовательность 
//										листов в итоговом tif. Разрешены следующие форматы сканов - BMP, GIF, JPEG, PNG, TIFF. 
//  СпособПредоставленияОтвета - Перечисление.СпособыОтветаНаЭлГосРегистрацию - Способ получения ответа от ФНС
//	ЭлПочтаЗаявителя 		 - Строка - электронная почта заявителя
// 
Функция ПараметрыМетодаСформироватьПакетПоЕГРЮЛ() Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", Неопределено);
	ДополнительныеПараметры.Вставить("Заявление", Неопределено);
	ДополнительныеПараметры.Вставить("КодНО", "");
	ДополнительныеПараметры.Вставить("ОписаниеФайлов", Новый Массив);
	ДополнительныеПараметры.Вставить("СпособПредоставленияОтвета", "0");
	ДополнительныеПараметры.Вставить("ЭлПочтаЗаявителя", "");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

// Открыть форму отправки письма в контролирующие органы
//
// Параметры:
//  Форма                     - ФормаКлиентскогоПриложения - владелец,
//  Организация               - Справочники.ОрганизацияСсылка,
//  КонтролирующийОрган       - Строка - "ФНС", "ПФР" или "ФСГС",
//  КодКонтролирующегоОргана  - Строка - при незаполненном значении подставляется из свойств организации,
//  Тема                      - Строка - при незаполненном значении берется из имени первого вложения,
//  Вложения - СписокЗначений - значение задает адрес во временном хранилище двоичных данных вложения, представление задает имя файла вложения,
//  ДополнительныеРеквизиты   - Структура:
//    * Содержание  - Строка - необязательный ключ, при незаполненном значении берется тема,
//    * Комментарий - Строка - необязательный ключ,
//    * Категория   - Строка - необязательный ключ, определяется автоматически по имени вложения.
// 
Процедура СоздатьПисьмо(
		Форма = Неопределено,
		Организация = Неопределено,
		КонтролирующийОрган = "ФНС",
		КодКонтролирующегоОргана = Неопределено,
		Тема = Неопределено,
		Вложения = Неопределено,
		ДополнительныеРеквизиты = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Отправитель", Организация));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	Если ПараметрыФормы.ДополнительныеРеквизиты = Неопределено Тогда
		ПараметрыФормы.ДополнительныеРеквизиты = Новый Структура;
	КонецЕсли;
	ПараметрыФормы.ДополнительныеРеквизиты.Вставить("КонтролирующийОрган", 		КонтролирующийОрган);
	ПараметрыФормы.ДополнительныеРеквизиты.Вставить("КодКонтролирующегоОргана", КодКонтролирующегоОргана);
	ПараметрыФормы.ДополнительныеРеквизиты.Вставить("Наименование", 			Тема);
	
	ПараметрыФормы.Вставить("ДополнительныеВложения", Вложения);
	
	ОткрытьФорму("Справочник.ПерепискаСКонтролирующимиОрганами.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗапроситьВыпискуОперацийПоРасчетуСБюджетом_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	КонтекстЭДОКлиент.ЗапроситьВыпискуОперацийПоРасчетуСБюджетом(ВходящийКонтекст);
	
КонецПроцедуры

#Область ЗапросВФНСНаПроверкуСведенийРаботников

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботников(ПараметрыСохранения)
	
	Оп = Новый ОписаниеОповещения(
	"СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковПродолжение", ЭтотОбъект, ПараметрыСохранения);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Оп);
	
КонецПроцедуры

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковПродолжение(Подключено, ПараметрыСохранения) Экспорт
	
	Если НЕ Подключено Тогда
		Для каждого ОпПередаваемогоФайла Из ПараметрыСохранения.ПолучаемыеФайлы Цикл
			ПолучитьФайл(ОпПередаваемогоФайла.Хранение, ОпПередаваемогоФайла.Имя, Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения(
	"СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковЗавершение", ЭтотОбъект, ПараметрыСохранения);
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = НСтр("ru = 'Укажите каталог'");
	
	НачатьПолучениеФайлов(Оп, ПараметрыСохранения.ПолучаемыеФайлы, ДиалогВыбораКаталога, Истина);
	
КонецПроцедуры

Процедура СохранитьНаДискФайлЗапросаВФНСНаПроверкуСведенийРаботниковЗавершение(ПолученныеФайлы, ПараметрыСохранения) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолученныеФайлы.Количество() = 1 Тогда
		
		РазделительПутиОС = ПолучитьРазделительПути();
		ПолноеИмяПолученногоФайла = СтрЗаменить(ПолученныеФайлы[0].ПолноеИмя, "/", РазделительПутиОС);
		ДанныеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяПолученногоФайла);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru='Файл запроса в ФНС на проверку ИНН, ФИО, СНИЛС работающих лиц %1 сохранен в каталог %2.'"),
		ДанныеФайла.Имя, ДанныеФайла.Путь);
		Сообщение.Сообщить();
		
	ИначеЕсли ПолученныеФайлы.Количество() > 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = "Файлы запроса в ФНС на проверку ИНН, ФИО, СНИЛС работающих лиц:";
		Для Каждого ПолучФайл Из ПолученныеФайлы Цикл
			ДанныеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолучФайл.Имя);
			ТекстСообщения = ТекстСообщения + Символы.ПС + "- """ + ДанныеФайла.Имя + """;";
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + Символы.ПС + "сохранены в каталог """ + ДанныеФайла.Путь + """.";
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПолучитьПроцедурыДекларированияФТСПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПолучитьПроцедурыДекларированияФТС(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ДополнительныеПараметры.Организация,
		ДополнительныеПараметры.РежимПолучения,
		ДополнительныеПараметры.Отборы,
		ДополнительныеПараметры.РежимыРаботы);
	
КонецПроцедуры

Процедура ОбработатьРезультатыПолученияПроцедурДекларированияФТСПослеПолученияКонтекста(Результат,
		ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	КонтекстЭДОКлиент.ОбработатьРезультатыПолученияПроцедурДекларированияФТС(
		ДополнительныеПараметры.ОповещениеОЗавершении,
		ДополнительныеПараметры.ПроцедурыДекларирования,
		ДополнительныеПараметры.ДополнительныеПараметрыПолучения,
		ДополнительныеПараметры.ОповещениеОПолученииНастроек);
	
КонецПроцедуры

#Область ПодписьXMLDSig

Процедура ПодписатьФайлXMLDSigПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("КонтекстЭДОКлиент", Результат.КонтекстЭДО);
	Если ВходящийКонтекст.КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	ВходящийКонтекст.Вставить("ЗначенияРеквизитовОбмена", Неопределено);
	Если ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
		
		НастройкиПолучения = Новый Структура("ПолучатьРеквизитыУчетнойЗаписи", Ложь);
		ВходящийКонтекст.ЗначенияРеквизитовОбмена =
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначенияРеквизитовОбмена(
				ВходящийКонтекст.ОрганизацияИлиСертификат, НастройкиПолучения);
		
		Если НЕ ЗначениеЗаполнено(ВходящийКонтекст.ЗначенияРеквизитовОбмена.УчетнаяЗапись) Тогда
			ТекстОшибки = НСтр("ru = 'Электронный документооборот с контролирующими органами не подключен. Подключение доступно в 1С-Отчетности, разделе ""Настройки"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("Структура")
		ИЛИ ТипЗнч(ВходящийКонтекст.ОрганизацияИлиСертификат) = Тип("ФиксированнаяСтруктура") Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеПоискаСертификата", ЭтотОбъект, ВходящийКонтекст);
		РезультатПоиска = Новый Структура;
		РезультатПоиска.Вставить("Выполнено", 			Истина);
		РезультатПоиска.Вставить("СертификатНайден", 	Истина);
		РезультатПоиска.Вставить("СвойстваСертификата", ВходящийКонтекст.ОрганизацияИлиСертификат);
		ВыполнитьОбработкуОповещения(Оповещение, РезультатПоиска);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеАвтонастройки", ЭтотОбъект, ВходящийКонтекст);
	Если ВходящийКонтекст.ЗначенияРеквизитовОбмена <> Неопределено
		И ВходящийКонтекст.ЗначенияРеквизитовОбмена.ПользователюРазрешеноВыполнятьОбмен Тогда
		
		ВходящийКонтекст.КонтекстЭДОКлиент.АвтоматическаяНастройкаУчетнойЗаписи(
			ВходящийКонтекст.ЗначенияРеквизитовОбмена.УчетнаяЗапись,,
			Оповещение,,,
			Истина);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьФайлXMLDSigПослеАвтонастройки(Результат, ВходящийКонтекст) Экспорт
	
	СертификатДляПоиска = Новый Структура;
	СертификатДляПоиска.Вставить("Отпечаток", 							ВходящийКонтекст.ОрганизацияИлиСертификат);
	СертификатДляПоиска.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Ложь);
	
	Если ВходящийКонтекст.ЗначенияРеквизитовОбмена <> Неопределено Тогда
		НастройкиПолучения = Новый Структура("ПолучатьПраваОбмена", Ложь);
		ЗначенияРеквизитов = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначенияРеквизитовОбмена(
			ВходящийКонтекст.ЗначенияРеквизитовОбмена.УчетнаяЗапись, НастройкиПолучения);
		СертификатДляПоиска.Отпечаток = ЗначенияРеквизитов.СертификатРуководителя;
		СертификатДляПоиска.ЭтоЭлектроннаяПодписьВМоделиСервиса = ЗначенияРеквизитов.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлXMLDSigПослеПоискаСертификата", ЭтотОбъект, ВходящийКонтекст);
	КриптографияЭДКОКлиент.НайтиСертификат(Оповещение, СертификатДляПоиска, Истина);
	
КонецПроцедуры

Процедура ПодписатьФайлXMLDSigПослеПоискаСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.СертификатНайден Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось найти сертификат руководителя в системном хранилище сертификатов.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Результат.СвойстваСертификата.Свойство("Валиден") И НЕ Результат.СвойстваСертификата.Валиден Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	НастройкиПодписи = ВходящийКонтекст.НастройкиПодписи;
	Если НастройкиПодписи = Неопределено Тогда
		НастройкиПодписи = Новый Структура;
		НастройкиПодписи.Вставить("ДополнитьПространстваИменУзлаПодписи", Истина);
	КонецЕсли;
	
	ВходящийКонтекст.КонтекстЭДОКлиент.ПодписатьФайлXMLDSig(
		Результат.СвойстваСертификата,
		ВходящийКонтекст.АдресДанных,
		ВходящийКонтекст.ОповещениеОЗавершении,,,
		НастройкиПодписи);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти