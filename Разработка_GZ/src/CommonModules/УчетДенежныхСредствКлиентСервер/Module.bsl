// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации = Неопределено) Экспорт
	
	ЕстьРасчеты =
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты");
	
	Возврат ЕстьРасчеты;
	
КонецФункции

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт
	
	ЕстьРасчеты =
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам") // историческое значение, сейчас не используется
		Или ЕстьРасчетыПоКредитамПолученным(ВидОперации)
		Или ЕстьРасчетыПоКредитамВыданным(ВидОперации);
		
	Возврат ЕстьРасчеты;
	
КонецФункции

// Возвращает признак расчетов с контрагентами по займам выданным
//
Функция ЕстьРасчетыПоКредитамВыданным(ВидОперации = Неопределено) Экспорт
	
	ЕстьРасчеты =
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом");
	
	Возврат ЕстьРасчеты;
	
КонецФункции

// Возвращает признак расчетов с контрагентами по кредитам (займам) полученным
//
Функция ЕстьРасчетыПоКредитамПолученным(ВидОперации = Неопределено) Экспорт
	
	Возврат ЭтоПолучениеКредитаЗайма(ВидОперации) Или ЭтоВозвратКредитаЗайма(ВидОперации);
	
КонецФункции

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоПлатежнымКартам(ВидОперации = Неопределено) Экспорт
	
	ЕстьРасчеты = ВидОперации
		= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам");
	
	Возврат ЕстьРасчеты;
	
КонецФункции

Функция ЕстьРасчетыСПокупателями(ВидОперации) Экспорт
	
	ЕстьРасчеты = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю");
	Возврат ЕстьРасчеты;
	
КонецФункции

Функция ЕстьАвансыПолученные(ВидОперации) Экспорт
	
	ЕстьАвансы = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя"));
	
	Возврат ЕстьАвансы;
	
КонецФункции

Функция ЕстьРасчетыСПоставщиками(ВидОперации) Экспорт
	
	ЕстьРасчеты = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю");
	Возврат ЕстьРасчеты;
	
КонецФункции

Функция ЕстьРозничнаяВыручка(ВидОперации) Экспорт
	
	ЕстьРозничнаяВыручка = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам"))
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка");
	
	Возврат ЕстьРозничнаяВыручка;
	
КонецФункции

Функция ЭтоПолучениеКредитаЗайма(ВидОперации) Экспорт
	
	ЭтоПолучениеКредитаЗайма =
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеКредита")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеЗайма");
	
	Возврат ЭтоПолучениеКредитаЗайма;
	
КонецФункции

Функция ЭтоВозвратКредитаЗайма(ВидОперации) Экспорт
	
	ЭтоВозвратКредитаЗайма =
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма");
	
	Возврат ЭтоВозвратКредитаЗайма;
	
КонецФункции

Функция ЭтоУплатаНалога(ВидНалоговогоОбязательства) Экспорт
	
	ЭтоУплатаНалога =
			ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог")
		Или ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.НалогАкт")
		Или ВидНалоговогоОбязательства = ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.НалогСам");
	
	Возврат ЭтоУплатаНалога;
	
КонецФункции

Функция ЭтоУплатаНалогаНаПрибыль(ВидНалога) Экспорт
	
	ЭтоУплатаНалогаНаПрибыль =
			ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НалогНаПрибыль_НалоговыйАгент");
	
	Возврат ЭтоУплатаНалогаНаПрибыль;
	
КонецФункции

// Возвращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВидДоговораПоВидуОпераций = СоответствиеВидыОперацийВидыДоговоров();
	
	ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];
	
	Если ВидДоговора = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат ВидДоговора;
	КонецЕсли;
	
КонецФункции

Функция ВидыОперацийПоВидуДоговора(ВидДоговора, ТипДокумента) Экспорт
	
	ВидыОпераций = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		Возврат ВидыОпераций;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СоответствиеВидыОперацийВидыДоговоров(ТипДокумента) Цикл
		Если КлючИЗначение.Значение.Найти(ВидДоговора) <> Неопределено Тогда
			ВидыОпераций.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыОпераций;
	
КонецФункции

Функция СоответствиеВидыОперацийВидыДоговоров(ТипДокумента = Неопределено)
	
	СПоставщиком = Новый Массив;
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПоставщиком.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	СПокупателем = Новый Массив;
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	СПокупателем.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));
	
	Прочее = Новый Массив;
	Прочее.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
	
	Факторинг = Новый Массив;
	Факторинг.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией"));
	
	//Определение вида операции
	
	ВидДоговораПоВидуОпераций = Новый Соответствие();
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику"), СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю"), СПокупателем);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеКредита"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеЗайма"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика"), СПоставщиком);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику"), СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц"), Прочее);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика"), СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами"), Прочее);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании"), Факторинг);
	КонецЕсли;
	
	Если ТипДокумента = Неопределено Или ТипДокумента = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя"), СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю"), СПокупателем);
	КонецЕсли;
	
	Возврат ВидДоговораПоВидуОпераций;
	
КонецФункции

// Заполняет в переданном объекте реквизиты платежа в бюджет по умолчанию,
// в соответствии с выбранным пользователем видом перечисления в бюджет.
// Оставлена для совместимости: для тех случаев, где ВидПеречисления задается пользователем явно.
//
// Параметры:
//  Объект - ДокументОбъект.ПлатежноеПоручение, произвольная коллекция - объект, который должен быть заполнен.
//           О составе свойств Объекта см. функцию ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение
//  Контекст - Структура - см. ПлатежиВБюджетКлиентСервер.НовыйКонтекст
//
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоВидуПеречисления(Объект, Контекст) Экспорт
	
	РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
	
	ЗначенияРеквизитовОбъекта = Новый Структура;
	Для каждого РеквизитДокумента Из РеквизитыДокумента Цикл
		ЗначенияРеквизитовОбъекта.Вставить(РеквизитДокумента.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовОбъекта, Объект); // Нет уверенности, что в объекте будут все нужные реквизиты
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Для каждого РеквизитДокумента Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет[РеквизитДокумента.Ключ] = ЗначенияРеквизитовОбъекта[РеквизитДокумента.Значение];
	КонецЦикла;
	
	Изменения = ПлатежиВБюджетКлиентСервер.ИсправитьЗначенияРеквизитов(
		"ВидПеречисления",
		РеквизитыПлатежаВБюджет,
		Контекст,
		Истина);
	
	ЗначенияЗаполнения = Новый Структура;
	Для Каждого Изменение Из Изменения Цикл
		ИмяРеквизитаДокумента = РеквизитыДокумента[Изменение.Ключ];
		ЗначенияЗаполнения.Вставить(ИмяРеквизитаДокумента, Изменение.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияЗаполнения);
	
КонецПроцедуры

Функция ВидОперацииДокументаПеречисленияВБюджет(КБК) Экспорт
	
	Если ПлатежиВБюджетКлиентСервер.ЭтоНалоговыеДоходы(КБК) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами");
	КонецЕсли;
	
КонецФункции

Функция ПеречислениеЗарплаты(ВидОперации) Экспорт
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РасчетыСФизическимиЛицами(ВидОперации) Экспорт
	
	Если ПеречислениеЗарплаты(ВидОперации)
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокОчередностьПлатежа(Дата) Экспорт
	
	Список = Новый СписокЗначений;
	
	Если Дата < УчетДенежныхСредствКлиентСервер.НачалоДействияНовыхПравилОчередностиПлатежа() Тогда
		Список.Добавить(1, НСтр("ru = '1 - Платежи по исполнительным документам: алименты и др.'"));
		Список.Добавить(2, НСтр("ru = '2 - Платежи по исполнительным документам: оплата труда и др.'"));
		Список.Добавить(3, НСтр("ru = '3 - Оплата труда и взносы в ПФР, ФОМС, ФСС'"));
		Список.Добавить(4, НСтр("ru = '4 - Налоги и взносы прочие'"));
		Список.Добавить(5, НСтр("ru = '5 - Платежи по исполнительным документам прочие'"));
		Список.Добавить(6, НСтр("ru = '6 - Прочие платежи'"));
	Иначе
		Список.Добавить(1, НСтр("ru = '1 - Платежи по исполнительным документам: алименты и др.'"));
		Список.Добавить(2, НСтр("ru = '2 - Платежи по исполнительным документам: оплата труда и др.'"));
		Список.Добавить(3, НСтр("ru = '3 - Оплата труда, платежи по поручениям контролирующих органов'"));
		Список.Добавить(4, НСтр("ru = '4 - Платежи по исполнительным документам прочие'"));
		Список.Добавить(5, НСтр("ru = '5 - Прочие платежи (в т.ч. налоги и взносы)'"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция НачалоДействияНовыхПравилОчередностиПлатежа() Экспорт
	
	// 345-ФЗ от 02.12.2013
	
	Возврат '20131214';
	
КонецФункции

Функция ОчередностьПлатежаПоУмолчаниюДо345ФЗ() Экспорт
	
	Возврат 6;
	
КонецФункции

Функция ОчередностьПлатежаПоУмолчанию() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ОчередностьПлатежаНалогиВзносы() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ОчередностьПлатежаПоИсполнительномуЛисту() Экспорт
	
	Возврат 4;
	
КонецФункции

Функция ОчередностьПлатежаОплатаТруда() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция ПереводДенегВнутриКомпании(ВидОперации) Экспорт
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя");
	
КонецФункции

Функция ВидКонтрагентаПоВидуОперации(ВидОперации) Экспорт
	
	Если РасчетыСФизическимиЛицами(ВидОперации) Тогда
		ВидКонтрагента = "Сотрудник";
	ИначеЕсли ПереводДенегВнутриКомпании(ВидОперации) Тогда
		ВидКонтрагента = "Организация";
	Иначе
		ВидКонтрагента = "Контрагент";
	КонецЕсли;
	
	Возврат ВидКонтрагента;
	
КонецФункции

Функция ТипКонтрагентаПоВидуОперации(ВидОперации) Экспорт
	
	Если РасчетыСФизическимиЛицами(ВидОперации) Тогда
		ТипКонтрагента = Тип("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ПереводДенегВнутриКомпании(ВидОперации) Тогда
		ТипКонтрагента = Тип("СправочникСсылка.Организации");
	Иначе
		ТипКонтрагента = Тип("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
	Возврат ТипКонтрагента;
	
КонецФункции

// Формирует текст наименования банковского счета по умолчанию
//
// Параметры:
//  НомерСчета			 - Строка
//  ПредставлениеБанка	 - Строка
//  ПредставлениеВалюты	 - Строка
//  Валютный             - Булево
//  Вариант				 - Число - Вариант формирования наименования
// 
// Возвращаемое значение:
//  Строка - наименование по умолчанию
//
Функция НаименованиеБанковскогоСчетаПоУмолчанию(Знач НомерСчета, ПредставлениеБанка, Знач ПредставлениеВалюты, Валютный, Вариант = 0) Экспорт
	
	// Варианты наименования отличаются последовательностью элементов:
	// 0: 40702978000000000000, ОАО "СБЕРБАНК РОССИИ", EUR
	// 1: 40702978000000000000 (EUR) в ОАО "СБЕРБАНК РОССИИ"
	// 2: ОАО "СБЕРБАНК РОССИИ" (40702978000000000000, EUR)
	
	ЭлементыНаименования = Новый Массив;
	
	НомерСчета = СокрЛП(НомерСчета);
	Если Не Валютный Тогда
		ПредставлениеВалюты = "";
	КонецЕсли;
	
	Если Вариант = 1 Тогда
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ЭлементыНаименования.Добавить(НомерСчета);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеВалюты) Тогда
			ЭлементыНаименования.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), ПредставлениеВалюты));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеБанка) Тогда
			ЭлементыНаименования.Добавить(СтрШаблон(НСтр("ru = 'в %1'"), ПредставлениеБанка));
		КонецЕсли;
		
		Наименование = СтрСоединить(ЭлементыНаименования, " ");
		
	ИначеЕсли Вариант = 2 Тогда
		
		Если Не ПустаяСтрока(ПредставлениеБанка) Тогда
			ЭлементыНаименования.Добавить(ПредставлениеБанка);
		КонецЕсли;
		
		ЭлементыВСкобках = Новый Массив;
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ЭлементыВСкобках.Добавить(НомерСчета);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеВалюты) Тогда
			ЭлементыВСкобках.Добавить(ПредставлениеВалюты);
		КонецЕсли;
		
		СтрокаЭлементыВСкобках = СтрСоединить(ЭлементыВСкобках, ", ");
		Если Не ПустаяСтрока(СтрокаЭлементыВСкобках) Тогда
			ЭлементыНаименования.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), СтрокаЭлементыВСкобках));
		КонецЕсли;
		
		Наименование = СтрСоединить(ЭлементыНаименования, " ");
		
	Иначе
		
		Если Не ПустаяСтрока(НомерСчета) Тогда
			ЭлементыНаименования.Добавить(НомерСчета);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеВалюты) Тогда
			ЭлементыНаименования.Добавить(ПредставлениеВалюты);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеБанка) Тогда
			ЭлементыНаименования.Добавить(ПредставлениеБанка);
		КонецЕсли;
		
		Наименование = СтрСоединить(ЭлементыНаименования, ", ");
		
	КонецЕсли;
		
	Возврат Лев(Наименование, 100);
	
КонецФункции

Функция НомерОбъектаБезПрефикса(Знач НомерОбъекта) Экспорт
	
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(СокрЛП(НомерОбъекта), Истина, Истина);
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерОбъекта);
	
	Возврат НомерОбъекта;
	
КонецФункции

// 14 дней
//
Функция МаксимальныйПериодВыпискиСбербанк() Экспорт
	
	Возврат 24*60*60*14;
	
КонецФункции

// Возвращает начало действия Указания Банка России от 14.10.2019 N 5286-У
// по указанию кода вида дохода при перечислении дохода физическим лицам.
//
Функция НачалоДействияУказанияБанкаРоссии5286У() Экспорт
	
	Возврат '20200601';
	
КонецФункции

Функция ДействуетУказаниеБанкаРоссии5286У(Период) Экспорт
	
	Возврат Период = Неопределено
		Или Период >= НачалоДействияУказанияБанкаРоссии5286У();
	
КонецФункции
