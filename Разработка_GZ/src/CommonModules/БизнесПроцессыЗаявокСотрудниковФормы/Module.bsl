
#Область СлужебныйПрограммныйИнтерфейс

#Область ФормаБизнесПроцесса
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ИнициализироватьФорму(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ИнициализироватьФорму(Форма);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект) Экспорт
	ПроверитьДатуЗавершенияОтложенногоПроцесса(ТекущийОбъект, Отказ);
КонецПроцедуры

Процедура ПриЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	Если Форма.НачальныйПризнакСтарта И ИзменятьЗаданияЗаднимЧислом Тогда
		УстановитьПривилегированныйРежим(Истина); 
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач();
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормаБизнесПроцесса

Процедура ИнициализироватьФорму(Форма)
	
	Форма.НачальныйПризнакСтарта = Форма.Объект.Стартован;
	
	УстановитьРеквизитыОтложенногоСтарта(Форма);
	
	Форма.ИспользоватьДатуИВремяВСрокахЗадач    = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Форма.ИзменятьЗаданияЗаднимЧислом           = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	Форма.ИспользоватьПодчиненныеБизнесПроцессы = ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы");
	
	Форма.ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Форма.Объект.Предмет);
	
	БизнесПроцессыЗаявокСотрудниковКлиентСервер.УстановитьСвойстваЭлементовФормы(Форма);
	
КонецПроцедуры

Процедура ПроверитьДатуЗавершенияОтложенногоПроцесса(ПроверяемыйОбъект, Отказ)

	Если Не ЗначениеЗаполнено(ПроверяемыйОбъект.СрокИсполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтложенногоСтарта = БизнесПроцессыИЗадачиСервер.ДатаОтложенногоСтартаПроцесса(ПроверяемыйОбъект.Ссылка);
	
	Если ПроверяемыйОбъект.СрокИсполнения < ДатаОтложенногоСтарта Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Срок исполнения задания не может быть меньше даты отложенного старта.'"),,
			"СрокИсполнения", "Объект.СрокИсполнения");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРеквизитыОтложенногоСтарта(Форма)

	ДатаОтложенногоСтарта = БизнесПроцессыИЗадачиСервер.ДатаОтложенногоСтартаПроцесса(Форма.Объект.Ссылка);
	Форма.Отложен = (ДатаОтложенногоСтарта <> '00010101');
	
КонецПроцедуры

#КонецОбласти

#Область ФормыЗадачБизнесПроцесса

#Область ИсторияЗаявки

Процедура ЗагрузитьИсториюЗаявки(Форма)
	Если Форма.Элементы.Найти("ГруппаИсторияЗаявки") = Неопределено 
		 ИЛИ Форма.Элементы.Найти("ИсторияЗаявки") <> Неопределено Тогда
		Возврат;	 
	КонецЕсли;
	
	ТаблицаИсторияЗаявки = ТаблицаИсторияЗаявок(Форма.Задание.Ссылка, Форма.Объект.Ссылка);
	Если ТаблицаИсторияЗаявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит_ИсторияЗаявки = Новый РеквизитФормы("ИсторияЗаявки", Новый ОписаниеТипов("ТаблицаЗначений"), , НСтр("ru = 'История заявки'"));
	ДобавляемыеРеквизиты.Добавить(Реквизит_ИсторияЗаявки);
	
	Для каждого Колонка Из ТаблицаИсторияЗаявки.Колонки Цикл
		Реквизит_СтрокаИсторияЗаявки = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ИсторияЗаявки");
		ДобавляемыеРеквизиты.Добавить(Реквизит_СтрокаИсторияЗаявки);
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ИсторияЗаявки.Загрузить(ТаблицаИсторияЗаявки);
	
	Элемент_ИсторияЗаявки = Форма.Элементы.Добавить("ИсторияЗаявки", Тип("ТаблицаФормы"), Форма.Элементы.ГруппаИсторияЗаявки);
	Элемент_ИсторияЗаявки.ПутьКДанным = "ИсторияЗаявки";
	Элемент_ИсторияЗаявки.Отображение = ОтображениеТаблицы.Список;
	Элемент_ИсторияЗаявки.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элемент_ИсторияЗаявки.ТолькоПросмотр = Истина;
	
	Для каждого Колонка Из ТаблицаИсторияЗаявки.Колонки Цикл
		Элемент_СтрокаИсторияЗаявки = Форма.Элементы.Добавить("ИсторияЗаявки" + Колонка.Имя, Тип("ПолеФормы"), Элемент_ИсторияЗаявки);       
		Элемент_СтрокаИсторияЗаявки.Вид = ВидПоляФормы.ПолеВвода;
		Элемент_СтрокаИсторияЗаявки.ПутьКДанным = "ИсторияЗаявки." + Колонка.Имя;	
	КонецЦикла;
КонецПроцедуры

Функция ТаблицаИсторияЗаявок(Заявка, Задача)
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Задача,
	               |	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	               |	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаЗавершения
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И ЗадачаИсполнителя.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Заявка);
	Запрос.УстановитьПараметр("Ссылка", Задача);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

Процедура ИнициализироватьФормуЗадачи(Форма, ПолеРезультат = Неопределено) Экспорт
	
	Форма.НачальныйПризнакВыполнения = Форма.Объект.Выполнена;
	ПрочитатьРеквизитыБизнесПроцесса(Форма);
	
	ИспользоватьДатуИВремяВСрокахЗадач(Форма);
	
	УстановитьДоступностьИВидимостьЭлементов(Форма, ПолеРезультат);
	ЗагрузитьИсториюЗаявки(Форма);
	
	ОтразитьФайлыОтвета(Форма);
	ОтразитьФайлыЗаявки(Форма);	
	
КонецПроцедуры

Процедура ПрочитатьРеквизитыБизнесПроцесса(Форма)
	
	ЗадачаОбъект = ДанныеФормыВЗначение(Форма.Объект, Тип("ЗадачаОбъект.ЗадачаИсполнителя"));
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	ЗначениеВДанныеФормы(ЗаданиеОбъект, Форма.Задание);
	Форма.ЗаданиеВыполнено 			= Форма.Задание.Выполнено;
	Форма.ЗаданиеСодержание 		= Форма.Задание.Содержание;
	Форма.Элементы.Содержание.Заголовок = Форма.ЗаданиеСодержание;
	
КонецПроцедуры

Процедура ЗаписатьРеквизитыБизнесПроцесса(Форма, ЗадачаОбъект) Экспорт
	
	Если ЗначениеЗаполнено(Форма.АдресХранилищаФайлаОтвета) Тогда
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", Форма.Задание.ФизическоеЛицо);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Форма.ИмяФайлаОтветаБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", Форма.РасширениеФайлаОтветаБезТочки);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
		ПараметрыФайла.Вставить("Служебный", Истина);
		УстановитьПривилегированныйРежим(Истина);
		Форма.Задание.ФайлОтвета = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Форма.АдресХранилищаФайлаОтвета);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессыИЗадачиСервер.ЗаблокироватьБизнесПроцессы(ЗадачаОбъект.БизнесПроцесс);
	БизнесПроцессОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
	БизнесПроцессОбъект.Подтверждено = Форма.ЗаданиеВыполнено;
	БизнесПроцессОбъект.СостояниеЗаявки = Форма.Задание.СостояниеЗаявки;
	Если Форма.Задание.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск
		И Форма.Задание.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
		БизнесПроцессОбъект.ОтпускСогласован = Истина;
	КонецЕсли;
	БизнесПроцессОбъект.ФайлОтвета = Форма.Задание.ФайлОтвета;
	БизнесПроцессОбъект.ОтветПоЗаявке = Форма.Задание.ОтветПоЗаявке;
	Если Форма.Задание.Свойство("СозданиеБольничногоЛиста") Тогда
		БизнесПроцессОбъект.СозданиеБольничногоЛиста = Форма.Задание.СозданиеБольничногоЛиста;
	КонецЕсли;
	БизнесПроцессОбъект.Записать(); // АПК:1327 Блокировка установлена в БизнесПроцессыИЗадачиСервер.ЗаблокироватьБизнесПроцессы

КонецПроцедуры

Процедура ИспользоватьДатуИВремяВСрокахЗадач(Форма)
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Форма.Элементы.СрокИсполнения);
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Форма.Элементы.Дата);	
КонецПроцедуры

Процедура УстановитьДоступностьИВидимостьЭлементов(Форма, ПолеРезультат)
	
	БизнесПроцессыИЗадачиСервер.ФормаЗадачиПриСозданииНаСервере(Форма, Форма.Объект,
		Форма.Элементы.ГруппаСостояние, Неопределено);
		
	Форма.Элементы.ИзменитьЗадание.Видимость = (Форма.Объект.Автор = Пользователи.ТекущийПользователь());
	
	Если Форма.Объект.Выполнена Тогда
		Форма.Элементы.ГруппаВыполненоДата.Доступность = Ложь;
		Форма.Элементы.Комментарий.Доступность = Ложь;
		Форма.Элементы.ШаблонОтвета.Видимость = Ложь;
		Если ПолеРезультат <> Неопределено Тогда
			ПолеРезультат.Доступность = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Форма.Исполнитель = ?(ЗначениеЗаполнено(Форма.Объект.Исполнитель), Форма.Объект.Исполнитель, Форма.Объект.РольИсполнителя);
	
	Если ПравоДоступа("Изменение", Метаданные.БизнесПроцессы.Задание) Тогда
		Форма.Элементы.Выполнено.Доступность = Истина;
		Форма.Элементы.Отказать.Доступность = Истина;
		Если Форма.Элементы.Найти("СоздатьДокумент") <> Неопределено Тогда
			Форма.Элементы.СоздатьДокумент.Доступность = Истина;
		КонецЕсли;
	Иначе
		Форма.Элементы.Выполнено.Доступность = Ложь;
		Форма.Элементы.Отказать.Доступность = Ложь;
		Если Форма.Элементы.Найти("СоздатьДокумент") <> Неопределено Тогда
			Форма.Элементы.СоздатьДокумент.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Задание, "СтараяВерсия") Тогда
		СтараяВерсия = Форма.Задание.СтараяВерсия;
		Форма.Элементы.ГруппаПолейСодержания.Видимость = НЕ СтараяВерсия;
		СкрытьПустыеПоляГруппы(Форма, Форма.Элементы.ГруппаПолейСодержания);
		
		Форма.Элементы.Содержание.Видимость = СтараяВерсия;
		Если ПолеРезультат <> Неопределено Тогда
			ПолеРезультат.Видимость = НЕ СтараяВерсия;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.Содержание.Видимость = Форма.Элементы.Содержание.Видимость И НЕ (Форма.ЗаданиеСодержание = "");
	
КонецПроцедуры

Процедура СкрытьПустыеПоляГруппы(Форма, Группа)
	Для каждого ПодчиненныйЭлемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			СкрытьПустыеПоляГруппы(Форма, ПодчиненныйЭлемент);	
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
			ПутьКДанным = ПодчиненныйЭлемент.ПутьКДанным;
			Если СтрНайти(ПутьКДанным, ".") Тогда
				ПолеЗадания = СтрРазделить(ПутьКДанным, ".")[1];
				ПодчиненныйЭлемент.Видимость = ЗначениеЗаполнено(Форма.Задание[ПолеЗадания]);
			Иначе
				ПодчиненныйЭлемент.Видимость = ЗначениеЗаполнено(Форма[ПутьКДанным]);
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьВидимостьКнопокДействий(Форма, Предмет, ФормаБезДокумента = Ложь) Экспорт
	
	ЗаданиеСсылка = Форма.Задание.Ссылка;
	ПредметТаблица = (ТипЗнч(Предмет) = Тип("ДанныеФормыКоллекция"));
	ПредметЗаполнен = Ложь;
	Если ПредметТаблица Тогда
		ПредметЗаполнен = (Предмет.Количество() > 0);
	Иначе
		ПредметЗаполнен = ?(Предмет <> Неопределено, НЕ Предмет.Пустая(), Ложь);
	КонецЕсли;
	
	КнопкаОтказать = Форма.Элементы.Найти("Отказать");
	
	Если Форма.Объект.Выполнена Тогда
		Если НЕ ФормаБезДокумента Тогда
			Форма.Элементы.СоздатьДокумент.Видимость = Ложь;
		КонецЕсли;
		Форма.Элементы.Отказать.Доступность = Ложь;
		Форма.Элементы.Выполнено.Доступность = Ложь;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Задание, "СтараяВерсия") И Форма.Задание.СтараяВерсия Тогда
		СтараяВерсия = Форма.Задание.СтараяВерсия;
		Если НЕ ФормаБезДокумента Тогда
			Форма.Элементы.СоздатьДокумент.Видимость = НЕ СтараяВерсия;
		КонецЕсли;
		Форма.Элементы.Отказать.Доступность = СтараяВерсия;
		Форма.Элементы.Выполнено.Доступность = СтараяВерсия;
	ИначеЕсли ПредметТаблица Тогда
		Форма.Элементы.СоздатьДокумент.Видимость = Истина;
		Форма.Элементы.Отказать.Доступность = НЕ ПредметЗаполнен;
		Форма.Элементы.Выполнено.Доступность = ПредметЗаполнен;
	ИначеЕсли ФормаБезДокумента Тогда
		Форма.Элементы.Отказать.Доступность = Истина;
		Форма.Элементы.Выполнено.Доступность = Истина;
	ИначеЕсли ПредметЗаполнен Тогда
		Форма.Элементы.СоздатьДокумент.Видимость = Ложь;
		Форма.Элементы.Отказать.Доступность = Ложь;
		Форма.Элементы.Выполнено.Доступность = Истина;	
	Иначе
		Форма.Элементы.СоздатьДокумент.Видимость = Истина;
		Форма.Элементы.Отказать.Доступность = Истина;
		Форма.Элементы.Выполнено.Доступность = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьФайлыОтвета(Форма)
	Форма.ФайлОтвета = Форма.Задание.ФайлОтвета;
	Если ЗначениеЗаполнено(Форма.ФайлОтвета) Тогда
		РеквизитыФайлаОтвета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.ФайлОтвета,
																				"Наименование,Расширение,Размер");
		Форма.ПредставлениеФайлаОтвета = СтрШаблон("%1.%2 (%3)",
												   РеквизитыФайлаОтвета.Наименование,
												   РеквизитыФайлаОтвета.Расширение,
												   БизнесПроцессыЗаявокСотрудниковКлиентСервер.РазмерФайлаСтрокой(РеквизитыФайлаОтвета.Размер));
		Форма.Элементы.ПредставлениеФайлаОтвета.Гиперссылка = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ОтразитьФайлыЗаявки(Форма)
	ДобавляемыеРеквизиты = Новый Массив;
	ЗначенияРеквизитов = Новый Структура;
	Счетчик = 1;
	Для каждого СтрокаТЧ Из Форма.Задание.ФайлыЗаявки Цикл
		ИмяРеквизита = "ПрисоединенныйФайл" + Счетчик;
		Если Форма.Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), Форма.Элементы.ГруппаФайлы);
			НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка = Истина;
			РеквизитыФайлаЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Файл,
																			  "Наименование,Расширение,Размер");
			НовыйЭлемент.Заголовок = СтрШаблон("%1.%2 (%3)",
											   РеквизитыФайлаЗаявки.Наименование,
											   РеквизитыФайлаЗаявки.Расширение,
											   БизнесПроцессыЗаявокСотрудниковКлиентСервер.РазмерФайлаСтрокой(РеквизитыФайлаЗаявки.Размер));
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_ФайлНажатие");
			Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛицаПрисоединенныеФайлы"));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			ЗначенияРеквизитов.Вставить(ИмяРеквизита, СтрокаТЧ.Файл);
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ЗаполнитьЗначенияСвойств(Форма, ЗначенияРеквизитов);
	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьВидимостьПрисоединенныхФайлов(Форма) Экспорт
	
	Если (Форма.Задание.ТипЗаявкиКабинетСотрудника = ПредопределенноеЗначение("Перечисление.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы")
		Или Форма.Задание.ТипЗаявкиКабинетСотрудника = ПредопределенноеЗначение("Перечисление.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска")) Тогда
		Форма.Элементы.ГруппаПрисоединитьФайл.Видимость = Истина;
		
		Форма.Элементы.ВыбратьФайл.Видимость = Не ЗначениеЗаполнено(Форма.ПредставлениеФайлаОтвета);
		Форма.Элементы.КартинкаУдалитьФайл.Видимость = ЗначениеЗаполнено(Форма.ПредставлениеФайлаОтвета);
		Форма.Элементы.ПредставлениеФайлаОтвета.Видимость = ЗначениеЗаполнено(Форма.ПредставлениеФайлаОтвета);

	Иначе
		Форма.Элементы.ГруппаПрисоединитьФайл.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеВыбораШаблона(Форма, Результат, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	Форма.Задание.ОтветПоЗаявке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "ТекстОтвета");
	
КонецПроцедуры

Процедура ПослеИзмененияКомментария(Форма) Экспорт
	ТипЗадания = ТипЗнч(Форма.Задание.Ссылка.ПолучитьОбъект()); 
	ЗаданиеОбъект = ДанныеФормыВЗначение(Форма.Задание, ТипЗадания);
	ЗаданиеОбъект.Записать();		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

