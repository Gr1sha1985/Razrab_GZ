////////////////////////////////////////////////////////////////////////////////
// РеализацияТоваровУслугФормы: серверные процедуры и функции, вызываемые из форм
// документа "Реализация (акт, накладная, УПД)".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Элементы 	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(Форма);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
		
		УстановитьДеятельностьНаТорговомСборе(Форма);
		УстановитьОтветственногоПоСкладу(Форма);
	КонецЕсли;
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Форма.Параметры.Свойство("ИзменитьВидОперации")
		И Форма.Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Форма.Объект.ВидОперации = Форма.Параметры.ЗначенияЗаполнения.ВидОперации;
		ВидОперацииОбработатьИзменение(Форма, Новый Массив);
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма);
		УстановитьЗаголовокФормы(Форма);
		Форма.ОбновитьИтогиНаСервере();
		Форма.УправлениеФормойНаСервере();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	// Получаем даты изменения адреса контрагента
	Грузополучатель = ?(ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Грузополучатель, Объект.Контрагент);
	Форма.ДатыИзмененияАдресаГрузополучателя = УправлениеКонтактнойИнформациейБП.ДатыИзмененияАдреса(Грузополучатель);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, Истина);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Форма.ПодготовитьФормуНаСервере();

КонецПроцедуры

Процедура ПередЗаписьНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СтруктураРеквизитовПодписи = Новый Структура;
	СтруктураРеквизитовПодписи.вставить("Руководитель",		"ЗаРуководителяНаОсновании");
	СтруктураРеквизитовПодписи.вставить("ГлавныйБухгалтер", "ЗаГлавногоБухгалтераНаОсновании");
	СтруктураРеквизитовПодписи.вставить("ОтветственныйЗаОформление", "ОтветственныйЗаОформление");
	
	ОтветственныеЛицаБП.ПроверитьИзменениеПодписейДокумента(ТекущийОбъект,СтруктураРеквизитовПодписи,ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Дата",               Объект.Дата);
	ПараметрыДокумента.Вставить("ВидОперации",        Объект.ВидОперации);
	ПараметрыДокумента.Вставить("Организация",        Объект.Организация);
	ПараметрыДокумента.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	ОсобенностиУчетаРасчетов = Документы.РеализацияТоваровУслуг.ОсобенностиУчетаРасчетов(ПараметрыДокумента);
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) И Не Объект.ЭтоУниверсальныйДокумент Тогда
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма);
	КонецЕсли;
	
	Если ОсобенностиУчетаРасчетов.ТребуетсяУчетСроковОплаты Тогда
		СрокиОплатыДокументов.ОбновитьСрокОплаты(Объект.Ссылка, Форма.СрокОплаты, Форма.АвторасчетСрокаОплаты);
		ПараметрыЗаписи.Вставить("СрокОплаты", Форма.СрокОплаты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ОтветственныеЛицаБП.УстановитьПодписиПоУмолчанию(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ТекущийОбъект.Ссылка);
	СчетаФактурыНеТребуются = Документы.РеализацияТоваровУслуг.СчетаФактурыНеТребуются(МассивДокументов);
	
	Если ТекущийОбъект.ЭтоУниверсальныйДокумент
	   И СчетаФактурыНеТребуются.Количество() = 0 Тогда
		ПараметрыЗаписи.Вставить("ВыписатьСчетФактуру", Истина);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
		ПараметрыСоздания.Основание = ТекущийОбъект.Ссылка;
		ПараметрыСоздания.ЭтоУниверсальныйДокумент = ТекущийОбъект.ЭтоУниверсальныйДокумент;
		ПараметрыСоздания.КодВидаОперации = Форма.КодВидаОперации;
		ПараметрыСоздания.УникальныйИдентификатор = Форма.УникальныйИдентификатор;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания);
		
		Если Результат <> Неопределено
			И Результат.Свойство("ФоновоеВыполнение") Тогда // обработать выполнение в фоновом задании
			
			Результат.ДлительнаяОперация.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
			ПараметрыЗаписи.Вставить("ДлительнаяОперация", Результат.ДлительнаяОперация);
			
		Иначе
			
			РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Результат);
			
			Форма.УправлениеФормойНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(ТекущийОбъект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			ТекущийОбъект.ВалютаДокумента,
			ТекущийОбъект.СуммаВключаетНДС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.СчетНаОплатуПокупателю)
		И ИнтеграцияCRMПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		РегистрыСведений.ДокументыИнтеграцииCRM.ЗаполнитьДанныеКОтправкеИОповеститьОбИзмененияхВФоне(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийОбъект.СчетНаОплатуПокупателю));
	КонецЕсли;
	
	УстановитьПорядокУчетаРасчетов(Форма);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Объект = Форма.Объект;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ПроверкаЗаполнения(Форма, Объект.Организация, Объект.Дата, Истина, Отказ);
	
КонецПроцедуры

Процедура ОбработкаОповещенияНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ДатаПриИзменении(Форма) Экспорт
	
	ДатаОбработатьИзменение(Форма);
	Объект = Форма.Объект;
	
	Если Объект.Свойство("Услуги") Тогда
		РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.Услуги, Объект.Дата, Форма.ТекущаяДатаДокумента);
	КонецЕсли;
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.АгентскиеУслуги, Объект.Дата, Форма.ТекущаяДатаДокумента);
	КонецЕсли;
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма) Экспорт

	ОрганизацияОбработатьИзменение(Форма, Новый Массив);
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(Форма);
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Форма) Экспорт
	
	КонтрагентОбработатьИзменение(Форма, Новый Массив);
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма);
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(Форма);
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Форма) Экспорт
	
	ДоговорКонтрагентаОбработатьИзменение(Форма, Новый Массив);
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма);
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура СкладПриИзменении(Форма) Экспорт

	Объект = Форма.Объект;

	УстановитьДеятельностьНаТорговомСборе(Форма);
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	УстановитьОтветственногоПоСкладу(Форма);
	
	ПричиныИзменений = Новый Массив;
	ПричиныИзменений.Добавить("Склад");
	ПричиныИзменений.Добавить("ПодразделениеОрганизации");
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзменений, "Склад");
	
КонецПроцедуры

Процедура ПриДобавленииСчетов(Форма, МассивСчетов) Экспорт
	Объект = Форма.Объект;

	РеквизитыСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетов, "Контрагент, ДоговорКонтрагента");
	
	Если ЗначениеЗаполнено(Объект.Контрагент) 
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		КонтрагентПоСчетам = Объект.Контрагент;
		ДоговорПоСчетам    = Объект.ДоговорКонтрагента;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		КонтрагентПоСчетам = Объект.Контрагент;
		ДоговорПоСчетам    = Неопределено;
	Иначе
		
		КонтрагентПоСчетам = Неопределено;
		ДоговорПоСчетам    = Неопределено;
	КонецЕсли; 
	
	
	Для каждого КлючИЗначение Из РеквизитыСчетов Цикл
		
		РеквизитыСчета = КлючИЗначение.Значение;
		
		Если КонтрагентПоСчетам = Неопределено Тогда
			КонтрагентПоСчетам = РеквизитыСчета.Контрагент;
		ИначеЕсли КонтрагентПоСчетам <> РеквизитыСчета.Контрагент Тогда
			// Если выбрано несколько счетов с разными контрагентами, то контрагента не заполняем.
			
			КонтрагентПоСчетам = Неопределено;
			ДоговорПоСчетам    = Неопределено;
			Прервать;
		КонецЕсли; 
		
		Если ДоговорПоСчетам = Неопределено Тогда
			ДоговорПоСчетам = РеквизитыСчета.ДоговорКонтрагента;
		ИначеЕсли ДоговорПоСчетам <> РеквизитыСчета.ДоговорКонтрагента Тогда
			ДоговорПоСчетам = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(КонтрагентПоСчетам) 
		И Объект.Контрагент <> КонтрагентПоСчетам Тогда
		Объект.Контрагент = КонтрагентПоСчетам;
		
		КонтрагентПриИзменении(Форма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорПоСчетам) 
		И Объект.ДоговорКонтрагента <> ДоговорПоСчетам Тогда
		Объект.ДоговорКонтрагента = ДоговорПоСчетам;
		
		ДоговорКонтрагентаПриИзменении(Форма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	СчетаУчетаДляНоменклатуры = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СчетаУчетаДляНоменклатуры);
		
	Если Не ДанныеОбъекта.Свойство("ТипЦен") Или Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения            = СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                 = СведенияОНоменклатуре.Коэффициент;
		Если СведенияОНоменклатуре.Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена                    = СведенияОНоменклатуре.Цена;
		КонецЕсли;
		СтрокаТабличнойЧасти.НомерГТД                    = СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения         = СведенияОНоменклатуре.СтранаПроисхождения;
		СтрокаТабличнойЧасти.МаркируемаяПродукцияГосИС   = СведенияОНоменклатуре.ТабачнаяПродукция;
		СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ = СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
		Если СтрокаТабличнойЧасти.ПродукцияМаркируемаяДляГИСМ Тогда
			СтрокаТабличнойЧасти.Количество = 1;
		КонецЕсли;
		// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
		// Дополнительно устанавливаем ставку 0%.
		Если ДанныеОбъекта.РеализацияВЕАЭС
			И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ150 
			И НЕ ДанныеОбъекта.ДокументБезНДС Тогда 
			СтрокаТабличнойЧасти.КодТНВЭД  = СведенияОНоменклатуре.КодТНВЭД;
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		ИначеЕсли ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = Истина
			И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335 Тогда 
			// Если покупатель исполняет обязанности налогового агента, то устанавливаем общую ставку НДС и очищаем сумму НДС.
			СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ДанныеОбъекта.Дата);
			СтрокаТабличнойЧасти.СуммаНДС  = 0;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		Если НЕ (ДанныеОбъекта.ПокупательНалоговыйАгентПоНДС = Истина
			И ДанныеОбъекта.ВедетсяУчетНДСПоФЗ335) Тогда 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТовары(Форма, Параметры) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	// Если у нам приехал новый счет в табличную часть, то перенесем счет из шапки в ТЧ товары.
	Если ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
		ЕстьСчетаВТабличнойЧасти = Ложь;
		Для каждого Строка Из СтрокиДляДополнительнойОбработки Цикл
			Если ЗначениеЗаполнено(Строка.СчетНаОплатуПокупателю) 
				И Строка.СчетНаОплатуПокупателю <> Объект.СчетНаОплатуПокупателю Тогда
			
				ЕстьСчетаВТабличнойЧасти = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если ЕстьСчетаВТабличнойЧасти Тогда
			Для каждого СтрокаТовары Из Объект.Товары Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары.СчетНаОплатуПокупателю) Тогда
					СтрокаТовары.СчетНаОплатуПокупателю = Объект.СчетНаОплатуПокупателю;
				КонецЕсли; 
			КонецЦикла; 
			
			РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьСчетНаОплатуПоСтрокам(Форма, Объект.СчетНаОплатуПокупателю, "Услуги,АгентскиеУслуги,ВозвратнаяТара");
			
			Объект.СчетНаОплатуПокупателю = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.РеализацияТоваровУслуг, Истина);
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыСчетНаОплату(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	Результат = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Результат);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

Процедура ЗаполнитьСписокАдресовДоставки(Форма, Контрагент, Грузополучатель, Дата) Экспорт
	АдресДоставки = Форма.Элементы.Найти("АдресДоставки");
	
	Если АдресДоставки = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	АдресДоставки.СписокВыбора.Очистить();
	СписокАдресов = СписокАдресовДоставки(Контрагент, Грузополучатель, Дата);
	
	Для каждого Адрес Из СписокАдресов Цикл
		АдресДоставки.СписокВыбора.Добавить(Адрес.Значение, Адрес.Представление);
	КонецЦикла;
	
КонецПроцедуры 

Процедура УстановитьПорядокУчетаРасчетов(Форма) Экспорт
	
	ОсобенностиУчетаРасчетов = Документы.РеализацияТоваровУслуг.ОсобенностиУчетаРасчетов(
		Форма.Объект);
		
	УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов(Форма, ОсобенностиУчетаРасчетов);

КонецПроцедуры

Процедура УстановитьПараметрыВыбора(Форма) Экспорт

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	МассивВидовДоговоров = Документы.РеализацияТоваровУслуг.ПолучитьМассивВидовДоговоров(Объект.ВидОперации, Объект.ДеятельностьНаПатенте);
	
	МассивВидовДоговоров = Новый ФиксированныйМассив(МассивВидовДоговоров);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров);
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка = НСтр("ru = 'Реализация'");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' товаров: Накладная, УПД'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' услуг: Акт, УПД'");
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(Объект.ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

#КонецОбласти

#Область БуферОбмена

Функция ОбработкаВыбораПодборВставкаИзБуфера(Форма, ВыбранноеЗначение, ИмяТаблицы) Экспорт
	
	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	Объект = Форма.Объект;
	ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	ВедетсяУчетНДСПоФЗ335 = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ВедетсяУчетНДСПоФЗ335");
	ПокупательНалоговыйАгентПоНДС = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПокупательНалоговыйАгентПоНДС");
	Если ИмяТаблицы = "Товары" Тогда 
		РеализацияВЕАЭС = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РеализацияВЕАЭС");
		ВедетсяУчетНДСПоФЗ150 = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ВедетсяУчетНДСПоФЗ150");
	Иначе
		РеализацияВЕАЭС = Ложь;
		ВедетсяУчетНДСПоФЗ150 = Ложь;
	КонецЕсли;

	ДобавленныеИзмененныеСтроки = Новый Структура;
	ДобавленныеИзмененныеСтроки.Вставить("Товары", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Услуги", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("ВозвратнаяТара",Новый Массив());

	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ДеятельностьНаПатенте, 
		|Склад, ЭтоКомиссия, Реализация, ДокументБезНДС, Контрагент");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	ДанныеОбъекта.Реализация  = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь, Ложь);
		
	Если ИмяТаблицы = "ВозвратнаяТара" Тогда
		ЦенаВключаетНДС = Истина;
	Иначе
		ЦенаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецЕсли;
	УстановитьЦенаВключаетНДСПоТипуЦен(ЦенаВключаетНДС, Объект.ТипЦен);
	
	ЕстьКолонкаЦена         = (ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено);
	ЕстьКолонкаСчетНаОплату = (ТаблицаТоваров.Колонки.Найти("СчетНаОплатуПокупателю") <> Неопределено);
	
	Если ЭтоВставкаИзБуфера 
		И ЕстьКолонкаСчетНаОплату 
		И ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
		
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьСчетНаОплатуПоСтрокам(Форма, Объект.СчетНаОплатуПокупателю);
	КонецЕсли;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если СведенияОНоменклатуре <> Неопределено И ЕстьКолонкаЦена Тогда
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТовара.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		ИначеЕсли ЕстьКолонкаЦена Тогда
			Цена = СтрокаТовара.Цена;
		Иначе	
			Цена = 0;
		КонецЕсли;
		
		// При копировании всегда добавляем новые строки, если это вставка из буфера
		СтрокаТабличнойЧасти = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда

			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора = Новый Структура("Номенклатура, КИЗ_ГИСМ, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.КИЗ_ГИСМ, Окр(Цена,2,1));
			Иначе
				СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, Окр(Цена,2,1));
			КонецЕсли;
			
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(Форма, ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			// Вставка из буфера и вариант, когда строк с подобными позициями еще не было
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда
					
					Если ИмяТаблицы = "Товары" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения),
					СтрокаТабличнойЧасти.ЕдиницаИзмерения, СведенияОНоменклатуре.ЕдиницаИзмерения);
				СтрокаТабличнойЧасти.Коэффициент			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент),
					СтрокаТабличнойЧасти.Коэффициент, СведенияОНоменклатуре.Коэффициент);
				СтрокаТабличнойЧасти.НомерГТД				= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД),
					СтрокаТабличнойЧасти.НомерГТД, СведенияОНоменклатуре.НомерГТД);
				СтрокаТабличнойЧасти.СтранаПроисхождения	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения),
					СтрокаТабличнойЧасти.СтранаПроисхождения, СведенияОНоменклатуре.СтранаПроисхождения);
					
				// Код ТН ВЭД заполняется только при реализации в страны ЕАЭС для целей счета-фактуры и книги продаж.
				// Дополнительно устанавливаем ставку 0%.
				Если РеализацияВЕАЭС
					И ВедетсяУчетНДСПоФЗ150 Тогда 
					СтрокаТабличнойЧасти.КодТНВЭД  = СведенияОНоменклатуре.КодТНВЭД;
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
				ИначеЕсли ПокупательНалоговыйАгентПоНДС = Истина
					И ВедетсяУчетНДСПоФЗ335 Тогда 
					СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(Объект.Дата);
					СтрокаТабличнойЧасти.СуммаНДС = 0;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
				КонецЕсли;
				
				// Рассчитываем реквизиты табличной части
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли; 
				Если НЕ (ПокупательНалоговыйАгентПоНДС = Истина
					И ВедетсяУчетНДСПоФЗ335) Тогда 
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				КонецЕсли;
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.Содержание	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Содержание),
					СтрокаТабличнойЧасти.Содержание, СведенияОНоменклатуре.НаименованиеПолное);
				СтрокаТабличнойЧасти.СтавкаНДС	= СведенияОНоменклатуре.СтавкаНДС;
				
				// Рассчитываем реквизиты табличной части
				Если ЦенаВключаетНДС <> Объект.СуммаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
							СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
							УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				КонецЕсли;
						
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,
					?(ЭтоВставкаИзБуфера, 1, 0));
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				Если НЕ ЦенаВключаетНДС ИЛИ ЭтоВставкаИзБуфера Тогда
					СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
					
					// Рассчитываем реквизиты табличной части
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ДобавленныеИзмененныеСтроки[ИмяТаблицы].Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	// Заполнение счетов учета
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.РеализацияТоваровУслуг);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли;
	
	Возврат ДобавленныеИзмененныеСтроки;
	
КонецФункции

#КонецОбласти

// Подготавливает параметры формы (отборы, списки выбора) в зависимости от контрагента
Процедура ПроверитьУстановитьДоговорКонтрагента(Форма, ПричиныИзмененияСчетовУчета) Экспорт

	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;

	МассивВидовДоговоров = Документы.РеализацияТоваровУслуг.ПолучитьМассивВидовДоговоров(Объект.ВидОперации, Объект.ДеятельностьНаПатенте);
	
	ДоговорИзменился = РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если ДоговорИзменился Тогда
			ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
		КонецЕсли;
	ИначеЕсли НЕ Форма.ВестиУчетПоДоговорам Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
			Форма.ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
		Иначе
			Форма.ТребуетсяСчетФактура = Истина;
		КонецЕсли;
	ИначеЕсли ДоступноСозданиеОсновногоДоговораПоВидуОперации(Объект.ВидОперации) Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммы(Форма, 
			Знач ВалютаДоИзменения, 
			КурсДоИзменения, 
			КратностьДоИзменения, 
			ПерезаполнитьЦены = Ложь, 
			ПересчитатьЦены = Ложь, 
			ПересчитатьНДС = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда 
		
		СписокНоменклатуры	= Новый Массив;
		
		Если Объект.Свойство("Товары") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("Услуги") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("ВозвратнаяТара") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если Объект.Свойство("АгентскиеУслуги") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
				ОбщегоНазначения.ВыгрузитьКолонку(Объект.АгентскиеУслуги, "Номенклатура"), Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.Свойство("Товары") Тогда
		Для Каждого Строка Из Объект.Товары Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ВозвратнаяТара") Тогда
		Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("Услуги") Тогда
		Для Каждого Строка Из Объект.Услуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		Для Каждого Строка Из Объект.АгентскиеУслуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Форма.ОбновитьИтогиНаСервере();
	
КонецПроцедуры

Процедура ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение) Экспорт

	УчетВзаиморасчетовФормы.ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение);
	УстановитьПорядокУчетаРасчетов(Форма);

КонецПроцедуры

Процедура ОбработкаЗаполненияПоСчету(Форма, ВыбранноеЗначение, ТабличнаяЧасть) Экспорт

	Объект = Форма.Объект;
	
	ДоговорКонтрагентаДоИзменения = Объект.ДоговорКонтрагента;

	// Заполняем полностью весь документ по счету на оплату
	РеквизитыСчетаНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВыбранноеЗначение, "Контрагент, ДоговорКонтрагента");

	Объект.СчетНаОплатуПокупателю 	= ВыбранноеЗначение;
	Объект.Контрагент 				= РеквизитыСчетаНаОплату.Контрагент;
	Объект.ДоговорКонтрагента 		= РеквизитыСчетаНаОплату.ДоговорКонтрагента;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("СчетНаОплатуПокупателю"); // В результате в обработчиках изменения контрагента и договора счета учета заполнены не будут
	
	КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	Если ДоговорКонтрагентаДоИзменения <> Объект.ДоговорКонтрагента Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	КонецЕсли;

	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение));// Счета учета заполняются здесь
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

Функция ДоступноСозданиеОсновногоДоговораПоВидуОперации(ВидОперации) Экспорт
	ДоступныеВидыОпераций = Новый Массив;
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Товары);
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
	ДоступныеВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
	
	Возврат ДоступныеВидыОпераций.Найти(ВидОперации) <> Неопределено;
КонецФункции

Процедура ДобавитьНоменклатуру(Форма, Номенклатура, КИЗ_ГИСМ = Неопределено)
	Объект = Форма.Объект;

	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("КиЗ_ГИСМ",     Новый ОписаниеТипов("СправочникСсылка.КонтрольныеЗнакиГИСМ"));
	ТаблицаТовары.Колонки.Добавить("Количество",   ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ТаблицаТовары.Колонки.Добавить("Цена",         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаТовары.Колонки.Добавить("Сумма",        ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, СуммаВключаетНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("ТипЦен", Объект.ТипЦен);
	Иначе
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта, Ложь, Истина);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
	СтрокаТаблицаТовары.Номенклатура = Номенклатура;
	СтрокаТаблицаТовары.Количество   = 1;
	СтрокаТаблицаТовары.Цена         = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	СтрокаТаблицаТовары.КИЗ_ГИСМ     = КИЗ_ГИСМ;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицаТовары);
	
	Значение = Новый Структура("АдресПодобраннойНоменклатурыВХранилище, КоличествоДобавленныхСтрок", ПоместитьВоВременноеХранилище(ТаблицаТовары, Форма.УникальныйИдентификатор));
	
	ОбработкаВыбораПодборВставкаИзБуфера(Форма, Значение, "Товары");
	
КонецПроцедуры 

Процедура ДобавитьПоШтрихкодуНаСервере(Форма, Штрихкод) Экспорт
	Результат = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Штрихкод);
	
	// Если прочитали код маркированной продукции - то добавим саму продукцию по EAN
	Если Результат.Разобран И Результат.Свойство("EAN") Тогда
		Штрихкод = Результат.EAN;
	КонецЕсли; 
	
	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
	
	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() = 1 Тогда
		ДобавитьНоменклатуру(Форма, ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура);
	Иначе
		ДобавитьНоменклатуру(Форма, Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
КонецПроцедуры

// Представление счета на оплату используемое в формах и диалогах
Функция ПредставлениеСчетаНаОплату(РеквизитыСчета) Экспорт
		
	Возврат СтрШаблон("%1 от %2", 
			РеквизитыСчета.Номер, 
			Формат(РеквизитыСчета.Дата, "ДФ=dd.MM.yyyy"));
КонецФункции

// Возвращает текст ссылки по которой осуществляется переход на карту,
// в виде форматированной строки (с картинкой)
//
Функция СтрокаСсылкиПоказатьНаКарте() Экспорт
	
	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(БиблиотекаКартинок.Пин);
	СоставСтроки.Добавить(НСтр("ru = 'На карте'"));
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаИзмененияРеквизитовШапки

Процедура ВидОперацииОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект = Форма.Объект;
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		Объект.Патент				 = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		
		Объект.АгентскиеУслуги.Очистить();
	
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		
		Для каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
			СтрокаТовара.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
	ДоговорИзменился = Ложь;
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		МассивВидовДоговоров = Документы.РеализацияТоваровУслуг.ПолучитьМассивВидовДоговоров(Объект.ВидОперации, Объект.ДеятельностьНаПатенте);
		
		ДоговорИзменился = РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
			Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
	КонецЕсли;
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ЭтоОтгрузка   = Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) И ДоговорИзменился Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
		ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		Объект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли; 
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	УстановитьПараметрыВыбора(Форма);
	
	Если ЭтоОтгрузка Тогда
		Форма.ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	Иначе
		Форма.ТребуетсяСчетФактура = НЕ Форма.ВестиУчетПоДоговорам ИЛИ (ДоговорУказан И НЕ ЭтоКомиссия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаОбработатьИзменение(Форма)

	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;

	Форма.УстановитьФункциональныеОпцииФормы();

	УчетПСН.ДатаПриИзменении(Объект);
	УстановитьДеятельностьНаТорговомСборе(Форма);
	
	Если (Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	Если Форма.ПлательщикНДС Тогда
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	// При изменении даты меняем адрес доставки при совпадении фактического адреса с юридическим
	ПроверитьИзменитьАдресДоставки(Объект, Форма.ТекущаяДатаДокумента);
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, Истина);
	
КонецПроцедуры

Процедура ПроверитьИзменитьАдресДоставки(Объект, ПредыдущаяДата) Экспорт

	СписокАдресов = СписокАдресовДоставки(Объект.Контрагент, Объект.Грузополучатель, ПредыдущаяДата);
	Если (СписокАдресов.Количество() > 0 И Объект.АдресДоставки = СписокАдресов[0].Значение) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
	
		СписокАдресов = СписокАдресовДоставки(Объект.Контрагент, Объект.Грузополучатель, Объект.Дата);
		Если СписокАдресов.Количество() > 0 Тогда
			Объект.АдресДоставки = СписокАдресов[0].Значение;
		Иначе
			Объект.АдресДоставки = "";
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Процедура ОрганизацияОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)

	Объект = Форма.Объект;
	ПричиныИзмененияСчетовУчета.Добавить("Организация");

	Форма.УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗначенияСвойств(Объект, УчетПСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	УстановитьДеятельностьНаТорговомСборе(Форма);
	
	ПодразделениеПоУмолчанию = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) 
		И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.БанковскийСчетОрганизации, Объект.Организация, Форма.ВалютаВзаиморасчетов, Истина);
	
	// В агентских услугах заполняем договор и счет расчетов
	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
					СтрокаТаблицы.ДоговорКонтрагента, СтрокаТаблицы.Контрагент, Объект.Организация, МассивВидовАгентскихДоговоров);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
	Если Форма.ПлательщикНДС Тогда 
		Объект.ДокументБезНДС	= Ложь;
	КонецЕсли;
	
	КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	Если Форма.ИмяФормы <> "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаУслуги" Тогда
		Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	КонецЕсли;
	
	Форма.ДатыИзмененияОтветственныхЛиц = ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация);
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Организация");
	
	НастройкиНалоговИОтчетовПредупреждениеФормы.ОтобразитьПредупреждение(Форма, Объект.Организация, Объект.Дата, Истина);
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;

	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	Форма.УстановитьФункциональныеОпцииФормы();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьУстановитьДоговорКонтрагента(Форма, ПричиныИзмененияСчетовУчета);
	
	ЗаполнитьСписокАдресовДоставки(Форма, Объект.Контрагент, Объект.Грузополучатель, Объект.Дата);
	
	Если НЕ ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		Если Форма.Элементы.Найти("АдресДоставки") <> Неопределено Тогда
			СписокАдресов = Элементы.АдресДоставки.СписокВыбора;
		Иначе
			СписокАдресов = СписокАдресовДоставки(Объект.Контрагент, Объект.Грузополучатель, Объект.Дата);
		КонецЕсли;
		
		Если СписокАдресов.Количество() > 0 Тогда
			Объект.АдресДоставки = СписокАдресов[0].Значение;
		Иначе
			Объект.АдресДоставки = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

Процедура ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект = Форма.Объект;
	
	Форма.АвторасчетСрокаОплаты = Истина;
	
	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДСПокупателем");
		
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры) Тогда
		РеквизитыДоговора.ТипЦен = Неопределено;
	КонецЕсли;
		
	Если ДоговорУказан Тогда
		
		ПараметрыДоговора = РаботаСДоговорамиКонтрагентовБП.ПараметрыДоговора(Объект.ДоговорКонтрагента);
		Объект.ЭтоУниверсальныйДокумент     = ПараметрыДоговора.ЭтоУниверсальныйДокумент;
		ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Объект);
		
		Форма.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента     = Форма.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
			ДоговорСчетаПокупателю = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетНаОплатуПокупателю, "ДоговорКонтрагента");
			Если ЗначениеЗаполнено(ДоговорСчетаПокупателю)
				И ДоговорСчетаПокупателю <> Объект.ДоговорКонтрагента Тогда
				Объект.СчетНаОплатуПокупателю = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Форма.ПредлагатьНовыйДоговор = Ложь;
	Иначе
		Объект.ВалютаДокумента     = Форма.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен = РеквизитыДоговора.ТипЦен;
		УстановитьЦенаВключаетНДСПоТипуЦен(Объект.СуммаВключаетНДС, РеквизитыДоговора.ТипЦен);
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	Если ЕстьСтрокиВТабличныхЧастях(Форма) И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭтоОтгрузка = Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
	ПокупательНалоговыйАгентПоНДС = ДоговорУказан И РеквизитыДоговора.УчетАгентскогоНДСПокупателем;
	ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(Объект.Дата);
	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	РеализацияТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ЭтоКомиссия", ЭтоКомиссия);
	РеализацияТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ЭтоОтгрузка", ЭтоОтгрузка);
	РеализацияТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ПокупательНалоговыйАгентПоНДС", ПокупательНалоговыйАгентПоНДС);
	
	Если ЭтоОтгрузка Тогда
		Форма.ТребуетсяСчетФактура = НачислятьНДСПоОтгрузке;
	Иначе
		Форма.ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия;
	КонецЕсли;
	
	Если ЭтоКомиссия 
		ИЛИ (ПокупательНалоговыйАгентПоНДС = Истина И ВедетсяУчетНДСПоФЗ335)Тогда
		
		Если ЭтоКомиссия Тогда 
			Объект.ДеятельностьНаПатенте = Ложь;
			Объект.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
		
		Если Объект.Свойство("Услуги") Тогда
			Если Объект.Услуги.Количество() > 0 Тогда
				Объект.Услуги.Очистить(); // На комиссию передать услуги нельзя
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Свойство("АгентскиеУслуги") Тогда
			Если Объект.АгентскиеУслуги.Количество() > 0 Тогда
				Объект.АгентскиеУслуги.Очистить(); // На комиссию передать услуги нельзя
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоКомиссия ИЛИ ЭтоОтгрузка И НЕ НачислятьНДСПоОтгрузке Тогда
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	Иначе
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Если Объект.ЗачетАвансов.Количество() > 0 Тогда
		Объект.ЗачетАвансов.Очистить();
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	УстановитьПорядокУчетаРасчетов(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Форма.Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	СчетаМоглиИзмениться = ПараметрыЗаполнения.КЗаполнению.Количество() > 0;
	
	Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры

Функция ЕстьСтрокиВТабличныхЧастях(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоОтгрузка = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоОтгрузка");

	ЕстьСтроки = Ложь;
	
	Если Объект.Свойство("Товары") Тогда
		ЕстьСтроки = Объект.Товары.Количество() > 0;
	КонецЕсли;
	
	Если НЕ ЕстьСтроки И Объект.Свойство("ВозвратнаяТара") Тогда
		ЕстьСтроки = Объект.ВозвратнаяТара.Количество() > 0;
	КонецЕсли;
	
	Если НЕ ЕстьСтроки Тогда
		Если Объект.Свойство("Услуги") Тогда
			ЕстьСтроки = Объект.Услуги.Количество() > 0;
		КонецЕсли;
		
		Если НЕ ЕстьСтроки И НЕ ЭтоОтгрузка И Объект.Свойство("АгентскиеУслуги") Тогда
			ЕстьСтроки = Объект.АгентскиеУслуги.Количество() > 0;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ЕстьСтроки;

КонецФункции

Процедура ОбработатьИзменениеДеятельностьНаПатенте(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Патент) Тогда
			Объект.Патент = УчетПСН.ПатентПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
		Если ЭтоКомиссия Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
		Объект.ДеятельностьНаТорговомСборе = Ложь;
		
	Иначе
		Объект.Патент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДеятельностьНаТорговомСборе(Форма) Экспорт
	
	Документы.РеализацияТоваровУслуг.УстановитьДеятельностьНаТорговомСборе(Форма.Объект);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыУПД(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Форма.СчетФактура) Тогда
		Форма.КодВидаОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.СчетФактура, "КодВидаОперации");
	Иначе
		ОснованияСчетаФактуры = Новый ТаблицаЗначений;
		ОснованияСчетаФактуры.Колонки.Добавить("ДокументОснование");
		СтрокаОснования = ОснованияСчетаФактуры.Добавить();
		СтрокаОснования.ДокументОснование = Объект;
		Параметры = Новый Структура;
		Параметры.Вставить("Дата",                           Объект.Дата);
		Параметры.Вставить("ВидСчетаФактуры",                Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
		Параметры.Вставить("Исправление",                    Ложь);
		Параметры.Вставить("КодВидаОперацииОснования",       "");
		Параметры.Вставить("ДокументыОснования",             ОснованияСчетаФактуры);
		Параметры.Вставить("Контрагент", Объект.Контрагент);
		Параметры.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		Параметры.Вставить("Продавец", Неопределено);
		
		Форма.КодВидаОперации = Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СписокАдресовДоставки(Контрагент, Грузополучатель, Дата)

	КонтрагентДоставки = ?(ЗначениеЗаполнено(Грузополучатель), Грузополучатель, Контрагент);
	Возврат УправлениеКонтактнойИнформациейБП.СписокАдресовОбъекта(КонтрагентДоставки, Дата);
	
КонецФункции

#Область БуферОбмена

Функция НайтиСтрокуТабличнойЧасти(Форма, ИмяТабличнойЧасти, СтруктураОтбора)

	Объект = Форма.Объект;

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

#КонецОбласти

Процедура УстановитьЦенаВключаетНДСПоТипуЦен(ЦенаВключаетНДС, ТипЦен)
	
	// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, 
										ЗначениеПустогоКоличества, ДокументБезНДС)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			ЦенаВключаетНДС = Ложь;
			УстановитьЦенаВключаетНДСПоТипуЦен(ЦенаВключаетНДС, Объект.ТипЦен);
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		Если ДокументБезНДС Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;

		Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

	Иначе
		Строка.Цена = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьОтветственногоПоСкладу(Форма)

	Объект = Форма.Объект;

	Если Объект.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
		Объект.ОтпускПроизвел = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Объект.Склад, Объект.Дата);
	Иначе
		Объект.ОтпускПроизвел = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
