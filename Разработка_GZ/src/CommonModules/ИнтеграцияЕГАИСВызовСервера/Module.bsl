#Область ПрограммныйИнтерфейс

// Возвращает имена документов ЕГАИС, основанием для которых может являться указанный документ.
//
// Параметры:
//   ДокументОснование - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовЕГАИС - документ-основание для документа ЕГАИС
//
// Возвращаемое значение:
//   Массив из Строка - имена документов ЕГАИС
//
Функция ИменаДокументовДляДокументаОснования(ДокументОснование) Экспорт
	
	Возврат РасчетСтатусовОформленияЕГАИС.ИменаДокументовДляДокументаОснования(ДокументОснование);
	
КонецФункции

#Область РаботаСДокументами

// Подготавливает сообщения к передаче в сервис ЕГАИС.
//
// Параметры:
//  ВходящиеДанные - Массив, ДокументСсылка - Документы к передаче сообщений.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - выполняемая операция обмена.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//  Немедленно - Булево - Признак немедленной передачи сообщения в УТМ, без очереди сообщений.
// 
// Возвращаемое значение:
//  Структура - см. функцию ПодготовитьСообщенияКПередаче().
//
Функция ПодготовитьКПередаче(ВходящиеДанные, ДальнейшееДействие, ДополнительныеПараметры = Неопределено, Немедленно = Ложь, ИдентификаторВладельца = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив") Тогда
		МассивДокументов = ВходящиеДанные;
	Иначе
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ВходящиеДанные);
	КонецЕсли;
	
	Сообщения = Новый Массив;
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		
		СообщенияДокумента = СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
		Для Каждого Сообщение Из СообщенияДокумента Цикл
			Сообщения.Добавить(Сообщение);
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения, Немедленно,, ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// См. Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется получить сообщение.
//  ТипПоследнегоСообщения - Строка - тип требуемого сообщения обмена.
//
// Возвращаемое значение:
//  Справочникссылка.ЕГАИСПрисоединенныеФайлы - сообщение обмена.
//
Функция ПоследнееСообщение(ДокументСсылка, ТипПоследнегоСообщения = "СОшибкой") Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, ТипПоследнегоСообщения);
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Справочники.ЕГАИСПрисоединенныеФайлы.ПустаяСсылка();
	Иначе
		Возврат ДанныеПоследнегоСообщения.Сообщение;
	КонецЕсли;
	
КонецФункции

// Удаляет неотправленную операцию из очереди передачи данных в ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = Новый Массив;
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "ВОчереди");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьПередачиДанныхЕГАИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ДанныеПоследнегоСообщения.Сообщение, Истина);
	
	ТекстОшибки = "";
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		НовыйСтатус = ИнтеграцияИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецПопытки;
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.ОрганизацияЕГАИС  = ДанныеПоследнегоСообщения.ОрганизацияЕГАИС;
	СтрокаРезультата.Операция          = ДанныеПоследнегоСообщения.Операция;
	СтрокаРезультата.ФорматОбмена      = ДанныеПоследнегоСообщения.ФорматОбмена;
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = Новый Массив;
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "ПереданоВУТМ");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		НовыйСтатус = ИнтеграцияИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.ОрганизацияЕГАИС  = ДанныеПоследнегоСообщения.ОрганизацияЕГАИС;
	СтрокаРезультата.Операция          = ДанныеПоследнегоСообщения.Операция;
	СтрокаРезультата.ФорматОбмена      = ДанныеПоследнегоСообщения.ФорматОбмена;
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

Функция АрхивироватьРаспоряженияКОформлению(Основания, Документ) Экспорт
	
	Возврат РегистрыСведений.СтатусыОформленияДокументовЕГАИС.АрхивироватьРаспоряженияКОформлению(Основания, Документ);
	
КонецФункции

Функция АрхивироватьДокументы(ДокументыКАрхивированию) Экспорт
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.Архивировать(ДокументыКАрхивированию);
	
КонецФункции

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//
Процедура ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = ИнтеграцияЕГАИС.РассчитатьСтатус(ДокументСсылка);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗапросами

// Формирует запрос для проверки подключения к УТМ.
//
// Возвращаемое значение:
//  Массив Из (См. ИнтеграцияЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросПроверкиПодключенияКУТМКПередачеXML() Экспорт
	
	СообщенияXML = Новый Массив;
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена();
	Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, Неопределено);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	Parameter  = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "СИО",          СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", "000000000000", СообщениеXML);
	
	Parameters.Parameter.Добавить(Parameter);
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, "000000000000", ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = "ПроверкаПодключенияКУТМ";
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции .
//     Перечисление.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации.
//  ИмяПараметра - Строка - Имя параметра. Возможные значения: "ИНН", "КОД", "СИО".
//  ЗначениеПараметра - Строка - Значение параметра.
// 
// Возвращаемое значение:
//  Массив - Сообщения, к передаче в ЕГАИС. см. ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//
Функция ЗапросДанныхКлассификатораКПередачеXML(ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
		
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	Parameter  = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  ИмяПараметра,      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", ЗначениеПараметра, СообщениеXML);
	
	Parameters.Parameter.Добавить(Parameter);
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  АкцизныеМарки - Массив Из Строка - Акцизные марки для проверки.
// 
// Возвращаемое значение:
//  Массив Из (См. ИнтеграцияЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросПроверкиМарокНаОстаткахОрганизацииКПередачеXML(ОрганизацияЕГАИС, АкцизныеМарки) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
		
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFilter");
	Для Каждого АкцизнаяМарка Из АкцизныеМарки Цикл
		ЗапросXDTO.bc.Добавить(АкцизнаяМарка);
	КонецЦикла;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИдентификаторТТН - Строка - Идентификатор запрашиваемой ТТН.
// 
// Возвращаемое значение:
//  Массив Из (См. ИнтеграцияЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросДанныхТТНКПередачеXML(ОрганизацияЕГАИС, ИдентификаторТТН) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросТТН;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	Parameter  = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name", "WBREGID",         СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", ИдентификаторТТН, СообщениеXML);
	
	Parameters.Parameter.Добавить(Parameter);
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1.
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2.
//  РегистрационныйНомер - Строка - Регистрационный номер запрашиваемой справки.
// 
// Возвращаемое значение:
//  Массив Из (См. ИнтеграцияЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ЗапросДанныхСправкиКПередачеXML(ОрганизацияЕГАИС, Операция, РегистрационныйНомер) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFormAB");
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "FormRegId", РегистрационныйНомер, СообщениеXML);
		
	Иначе
		
		ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFormF1F2");
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "FormRegId", РегистрационныйНомер, СообщениеXML);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИспользуемыйФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Используемый формат обмена.
// 
// Возвращаемое значение:
//  Массив Из (См. ИнтеграцияЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ИнформацияОФорматеОбменаКПередачеXML(ОрганизацияЕГАИС, ИспользуемыйФорматОбмена) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код КАК ИдентификаторФСРАР
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ИспользуемыйФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ИспользуемыйФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ИспользуемыйФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "InfoVersionTTN");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "ClientId", Шапка.ИдентификаторФСРАР, СообщениеXML);
	
	Если ИспользуемыйФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "WBTypeUsed", "WayBill",    СообщениеXML);
	ИначеЕсли ИспользуемыйФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "WBTypeUsed", "WayBill_v2", СообщениеXML);
	ИначеЕсли ИспользуемыйФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "WBTypeUsed", "WayBill_v3", СообщениеXML);
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ИспользуемыйФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Подготавливает запрос проверки подключения к УТМ.
//
// Параметры:
//  АдресУТМ - Строка - IP адрес УТМ.
//  ПортУТМ - Число - Порт
//  Таймаут - Число - Количество секунд таймаута.
//  ОбменНаСервере - Булево - Признак проверки подключения на сервере.
// 
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьЗапросПроверкиПодключенияКУТМ(АдресУТМ, ПортУТМ, Таймаут, ОбменНаСервере, ИдентификаторВладельца = Неопределено) Экспорт
	
	НастройкиОбменаЕГАИС = Новый Структура;
	НастройкиОбменаЕГАИС.Вставить("ОбменНаСервере", Новый Соответствие);
	НастройкиОбменаЕГАИС.Вставить("ОбменНаКлиенте", Новый Соответствие);
	НастройкиОбменаЕГАИС.Вставить("БезНастроек",    Новый Массив);
	
	НастройкаОбменаЕГАИС = ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС();
	НастройкаОбменаЕГАИС.АдресУТМ = АдресУТМ;
	НастройкаОбменаЕГАИС.ПортУТМ  = ПортУТМ;
	НастройкаОбменаЕГАИС.Таймаут  = Таймаут;
	
	Если ОбменНаСервере Тогда
		НастройкиОбменаЕГАИС.ОбменНаСервере.Вставить("ПроверкаПодключенияКУТМ", НастройкаОбменаЕГАИС);
	Иначе
		НастройкиОбменаЕГАИС.ОбменНаКлиенте.Вставить("ПроверкаПодключенияКУТМ", НастройкаОбменаЕГАИС);
	КонецЕсли;
	
	Сообщения = ЗапросПроверкиПодключенияКУТМКПередачеXML();
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения, Истина, НастройкиОбменаЕГАИС, ИдентификаторВладельца);
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса данных классификаторов ЕГАИС к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции .
//     Перечисление.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации.
//  ИмяПараметра - Строка - Имя параметра. Возможные значения: "ИНН", "КОД", "СИО".
//  ЗначениеПараметра - Строка - Значение параметра.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
// 
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьЗапросДанныхКлассификатораКПередаче(ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросДанныхКлассификатораКПередачеXML(ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра);
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения,,,ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса проверки акцизных марок на остатках организации к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  АкцизныеМарки - Массив Из Строка - Акцизные марки для проверки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена.
//
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьЗапросПроверкиАкцизныхМарокНаОстаткахОрганизацииКПередаче(ОрганизацияЕГАИС, АкцизныеМарки, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросПроверкиМарокНаОстаткахОрганизацииКПередачеXML(ОрганизацияЕГАИС, АкцизныеМарки);
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения,,,ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса ТТН к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИдентификаторТТН - Строка - Идентификатор запрашиваемой ТТН.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
// 
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьЗапросДанныхТТНКПередаче(ОрганизацияЕГАИС, ИдентификаторТТН, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросДанныхТТНКПередачеXML(ОрганизацияЕГАИС, ИдентификаторТТН);
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения,,,ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса данных справки по ее регистрационному номеру к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1.
//     Перечисление.ВидыДокументовЕГАИС.ЗапросСправки2.
//  РегистрационныйНомер - Строка - Регистрационный номер запрашиваемой справки.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
// 
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьЗапросДанныхСправкиКПередаче(ОрганизацияЕГАИС, Операция, РегистрационныйНомер, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросДанныхСправкиКПередачеXML(ОрганизацияЕГАИС, Операция, РегистрационныйНомер);
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку пакета данных об используемом формате обмена к передаче и
// передает данные в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИспользуемыйФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Используемый формат обмена.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
// 
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьИнформациюОФорматеОбменаКПередаче(ОрганизацияЕГАИС, ИспользуемыйФорматОбмена, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ИнформацияОФорматеОбменаКПередачеXML(ОрганизацияЕГАИС, ИспользуемыйФорматОбмена);
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения,,, ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщения к передаче в ЕГАИС.
//
// Параметры:
//  Сообщения - Массив - содержит структуру сообщений, которые подготавливаются к передаче.
//  Немедленно - Булево - Признак немедленной передачи сообщения в УТМ, без очереди сообщений.
//  НастройкиОбменаЕГАИС - Структура, Неопределено - см. функцию НастройкиОбменаЕГАИС().
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив - Массив структур, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//   * СообщенияXMLКПередаче - Массив - Массив структур к передаче на клиенте, см. функцию ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//   * НастройкиОбменаЕГАИС - Соответствие - Настройки обмена ЕГАИС на клиенте по организациям:
//     ** Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//     ** Значение - Структура - Настройки обмена ЕГАИС, см. функцию ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС().
//   * ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
Функция ПодготовитьСообщенияКПередаче(Сообщения, Немедленно = Ложь, НастройкиОбменаЕГАИС = Неопределено, ИдентификаторВладельца = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",              Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче",  Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",   Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца", ИдентификаторВладельца);
	
	СообщенияКПередаче = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",         Сообщение.ТипСообщения);
			Реквизиты.Вставить("Операция",             Сообщение.Операция);
			Реквизиты.Вставить("Документ",             Сообщение.Документ);
			Реквизиты.Вставить("СообщениеОснование",   Неопределено);
			Реквизиты.Вставить("Описание",             Сообщение.Описание);
			Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
			Реквизиты.Вставить("ФорматОбмена",         Сообщение.ФорматОбмена);
			Реквизиты.Вставить("ОрганизацияЕГАИС",     Сообщение.ОрганизацияЕГАИС);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.КПередаче);
			Реквизиты.Вставить("Версия",               Сообщение.Версия);
			
			Попытка
				
				Результат = ИнтеграцияЕГАИС.ПодготовитьСообщениеКПередаче(Сообщение.ТекстСообщенияXML, Реквизиты, Немедленно);
				
				ИсходящееСообщение = Результат.ИсходящееСообщение;
				
				НовыйСтатус           = Результат.НовыйСтатус;
				ТекстОшибки           = Результат.ТекстОшибки;
				ПодготовленоКПередаче = Не ЗначениеЗаполнено(ТекстОшибки);
				
			Исключение
				
				НовыйСтатус           = Неопределено;
				ТекстОшибки           = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче = Ложь;
				
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ЕГАИС:
				           |%2'"),
				Сообщение.Описание,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			
			ИсходящееСообщение = Неопределено;
			
		КонецЕсли;
		
		СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
		СтрокаРезультата.ОрганизацияЕГАИС = Сообщение.ОрганизацияЕГАИС;
		СтрокаРезультата.Операция         = Сообщение.Операция;
		СтрокаРезультата.ФорматОбмена     = Сообщение.ФорматОбмена;
		
		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = ПодготовленоКПередаче;
		СтрокаРезультата.ПереданоВУТМ          = Ложь;
		СтрокаРезультата.Принято               = Ложь;
		
		СтрокаРезультата.ИсходящееСообщение = ИсходящееСообщение;
		СтрокаРезультата.ВходящееСообщение  = Неопределено;
		
		СтрокаРезультата.Объект            = Сообщение.Документ;
		СтрокаРезультата.ДокументОснование = Сообщение.ДокументОснование;
		СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
		
		СообщенияКПередаче.Добавить(СтрокаРезультата);
		
	КонецЦикла;
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	Если НастройкиОбменаЕГАИС = Неопределено Тогда
		НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС();
	КонецЕсли;
	
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	// Передача сообщений на сервере и подготовка сообщений к отправке на клиенте
	РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС, СообщенияКПередаче, Немедленно);
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияXMLКПередаче Цикл
		ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ЕГАИС.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ДатыПоследнегоЗапуска - Неопределено, Соответствие - Даты последнего запуска обменов на клиенте по расписанию.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив - Массив структур, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//   * СообщенияXMLКПередаче - Массив - Массив структур к передаче на клиенте, см. функцию ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//   * НастройкиОбменаЕГАИС - Соответствие - Настройки обмена ЕГАИС на клиенте по организациям:
//     ** Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//     ** Значение - Структура - Настройки обмена ЕГАИС, см. функцию ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС().
//   * ВыполнитьОбменПоРасписанию - Булево - Признак необходимости выполнения обмена (по расписанию), Истина, только если ДатыПоследнегоЗапуска <> Неопределено.
//   * ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
Функция ВыполнитьОбмен(ОрганизацииЕГАИС = Неопределено, ДатыПоследнегоЗапуска = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",                  Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче",      Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",       Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца",     ИдентификаторВладельца);
	ВозвращаемоеЗначение.Вставить("ВыполнитьОбменПоРасписанию", Ложь);
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС, ДатыПоследнегоЗапуска);
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	ВозвращаемоеЗначение.ВыполнитьОбменПоРасписанию = ДатыПоследнегоЗапуска <> Неопределено
	                                                  И (НастройкиОбменаЕГАИС.ОбменНаКлиенте.Количество() > 0
	                                                  Или НастройкиОбменаЕГАИС.ОбменНаСервере.Количество() > 0);
	
	// Передача сообщений на сервере и подготовка сообщений к отправке на клиенте
	РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС);
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияXMLКПередаче Цикл
		ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(ЭлементДанных);
	КонецЦикла;
	
	// Загрузка входящих документов и ответов на запросы
	Результат = ПолучитьВходящиеДокументы(НастройкиОбменаЕГАИС.ОбменНаСервере);
	Для Каждого ЭлементДанных Из Результат.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбменаЕГАИС.БезНастроек Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ'"),
				ОрганизацияБезНастроек));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет получение списка новых сообщений.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ДокументыКЗагрузке - Соответствие - Массив Из (См. ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения).
//   * НастройкиОбменаЕГАИС - Соответствие - Настройки обмена ЕГАИС на клиенте по организациям:
//     ** Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//     ** Значение - (См. функцию ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС).
//   * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ВходящиеСообщения(ОрганизацииЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументыКЗагрузке",    Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",  Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",           "");
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС);
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	ВозвращаемоеЗначение.ДокументыКЗагрузке = ДокументыКЗагрузке(
		НастройкиОбменаЕГАИС.ОбменНаСервере,
		ВозвращаемоеЗначение);
	
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбменаЕГАИС.БезНастроек Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ'"),
				ОрганизацияБезНастроек));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция УдалитьВходящиеДокументы(ДокументыКУдалению) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументыКУдалению",    Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",  Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",           "");
	
	ОрганизацииЕГАИС = Новый Массив;
	Для Каждого ЭлементДанных Из ДокументыКУдалению Цикл
		Если ОрганизацииЕГАИС.Найти(ЭлементДанных.ОрганизацияЕГАИС) = Неопределено Тогда
			ОрганизацииЕГАИС.Добавить(ЭлементДанных.ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЦикла;
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС);
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	ДокументыКУдалениюНаСервере = Новый Массив;
	Для Каждого ЭлементДанных Из ДокументыКУдалению Цикл
		
		Если НастройкиОбменаЕГАИС.ОбменНаКлиенте.Получить(ЭлементДанных.ОрганизацияЕГАИС) <> Неопределено Тогда
			ВозвращаемоеЗначение.ДокументыКУдалению.Добавить(ЭлементДанных);
		ИначеЕсли НастройкиОбменаЕГАИС.ОбменНаСервере.Получить(ЭлементДанных.ОрганизацияЕГАИС) <> Неопределено Тогда
			ДокументыКУдалениюНаСервере.Добавить(ЭлементДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьДокументыИзУТМ(
		ДокументыКУдалениюНаСервере,
		НастройкиОбменаЕГАИС.ОбменНаСервере,
		ВозвращаемоеЗначение);
	
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбменаЕГАИС.БезНастроек Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ'"),
				ОрганизацияБезНастроек));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверить входящие документы в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * АдресаURLВходящихДокументов - Массив - массив адресов входящих документов см. функцию ИнтеграцияЕГАИСКлиентСервер.АдресаURLВходящихДокументов().
//   * НастройкиОбменаЕГАИС - Соответствие - см. функцию ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС().
//   * ТекстОшибки - Строка - Текст ошибки.
//   * ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
Функция ПроверитьВходящиеДокументы(ОрганизацииЕГАИС = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("АдресаURLВходящихДокументов", Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",        Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца",      ИдентификаторВладельца);
	
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС);
	
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	МассивОрганизацииЕГАИС = ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаСервере);
	Для Каждого ОрганизацияЕГАИС Из МассивОрганизацииЕГАИС Цикл
		
		АдресаURLВходящихДокументов = ИнтеграцияЕГАИСКлиентСервер.АдресаURLВходящихДокументов(
			НастройкиОбменаЕГАИС.ОбменНаСервере, ОрганизацияЕГАИС);
		
		Если ЗначениеЗаполнено(АдресаURLВходящихДокументов.ТекстОшибки) Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось получить список входящих документов организации %1:
				           |По причине:
				           |%2'"),
				ОрганизацияЕГАИС,
				АдресаURLВходящихДокументов.ТекстОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС + ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ДанныеКПолучению Из АдресаURLВходящихДокументов.ДанныеОбработки Цикл
			ВозвращаемоеЗначение.АдресаURLВходящихДокументов.Добавить(ДанныеКПолучению);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает новые документы из УТМ.
//
// Параметры:
//  НастройкиОбменаЕГАИС - Соответствие - Настройки обмена ЕГАИС по организациям:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Значение - Структура - Настройки обмена ЕГАИС, см. функцию ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС().
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив - Массив структур, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//   * ТекстОшибки - Строка - Текст ошибки.
//
Функция ПолучитьВходящиеДокументы(НастройкиОбменаЕГАИС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",   Новый Массив);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ДокументыКЗагрузке = ДокументыКЗагрузке(НастройкиОбменаЕГАИС, ВозвращаемоеЗначение);
	
	Результат = ОбработатьВходящиеДокументы(ДокументыКЗагрузке);
	
	Для Каждого ЭлементДанных Из Результат.Изменения Цикл
		
		УдалитьДокументыИзУТМ(ЭлементДанных.СлужебныеДанные, НастройкиОбменаЕГАИС, ВозвращаемоеЗначение);
		
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает список документов, полученных из УТМ.
//
// Параметры:
//  ДокументыКЗагрузке - Соответствие - Сообщения XML к загрузке по организациям:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Значение - Массив - Сообщения XML к загрузке, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента().
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив - Массив структур, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
Функция ОбработатьВходящиеДокументы(ДокументыКЗагрузке, ИдентификаторВладельца = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСоответствияДокументовТипамЕГАИС = Перечисления.ВидыДокументовЕГАИС.ТаблицаСоответствияДокументовТипамЕГАИС();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтопЛист",      Новый Соответствие);
	ДополнительныеПараметры.Вставить("ТекущийОбъект", Неопределено);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы");
	
	Для Каждого КлючИЗначение Из ДокументыКЗагрузке Цикл
		
		ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		
		УведомленияОРегистрации = Новый Массив;
		ВходящиеТТН             = Новый Массив;
		ИсторияСправок2ПоТТН    = Новый Массив;
		
		Очередь = Новый ТаблицаЗначений;
		Очередь.Колонки.Добавить("Приоритет");
		Очередь.Колонки.Добавить("ДанныеДокумента");
		
		Для Каждого ВходящиеДанные Из КлючИЗначение.Значение Цикл
			
			ДанныеОбработки = ИнтеграцияЕГАИС.ОбработатьОтветНаЗапросПолученияДокумента(ВходящиеДанные, ТаблицаСоответствияДокументовТипамЕГАИС);
			Если ДанныеОбработки.Результат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДокумента = ДанныеОбработки.Результат;
			
			ЭлементОчереди = Очередь.Добавить();
			ЭлементОчереди.ДанныеДокумента = ДанныеДокумента;
			
			Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "Result")
					И ДанныеДокумента.Объект.Result <> Неопределено Тогда
					ЭлементОчереди.Приоритет = 1; // ПолученЕГАИС
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "OperationResult")
					И ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
					ЭлементОчереди.Приоритет = 2; // ПроведенЕГАИС
				Иначе
					ЭлементОчереди.Приоритет = 3;
				КонецЕсли;
			Иначе
				ЭлементОчереди.Приоритет = 3;
			КонецЕсли;
			
		КонецЦикла;
		
		Очередь.Сортировать("Приоритет ВОЗР");
		
		Для Каждого ЭлементОчереди Из Очередь Цикл
			
			ДанныеДокумента = ЭлементОчереди.ДанныеДокумента;
			
			ДополнительныеПараметры.ТекущийОбъект = Неопределено;
			
			НачатьТранзакцию();
			
			Попытка
				
				Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
					
					Если ЗначениеЗаполнено(ДанныеДокумента.ИдентификаторЗапроса) Тогда
						ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьУведомлениеОРегистрацииДвиженияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					Иначе
						ДанныеЗагруженногоДокумента = Неопределено;
						УведомленияОРегистрации.Добавить(ДанныеДокумента);
					КонецЕсли;
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
					
					ДанныеЗагруженногоДокумента = Неопределено;
					ВходящиеТТН.Добавить(ДанныеДокумента);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьУведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьАктПоИсходящейТТНЕГАИС(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьКвитанциюАктаРасхожденийТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьКвитанциюЗапросаНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьЗапросНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьКвитанцию(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросДанныхОрганизации Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросДанныхОрганизации(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАлкогольнойПродукции Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросАлкогольнойПродукции(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьСправку(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьСправку(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре1 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОстатковВРегистре1(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОстатковВРегистре2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАкцизныхМарок Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросАкцизныхМарок(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияМеждуРегистрами Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаДвиженияМеждуРегистрами(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияПоСправке2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаДвиженияПоСправке2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИнформацияОбОрганизации Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаИнформацияОбОрганизации(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаНеобработанныеТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаНеобработанныеТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОбработанныеЧеки Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОбработанныеЧеки(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре1 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре1(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре3(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИсторияСправок2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаИсторияСправок2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ИсторияСправок2ПоТТН Тогда
					
					ДанныеЗагруженногоДокумента = Неопределено;
					ИсторияСправок2ПоТТН.Добавить(ДанныеДокумента);
					
				Иначе
					
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип загружаемого документа %1.'"), ДанныеДокумента.ТипЕГАИС);
					
				КонецЕсли;
				
				ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
					ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Если ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
					ДополнительныеПараметры.СтопЛист.Вставить(ДополнительныеПараметры.ТекущийОбъект, Истина);
				КонецЕсли;
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При загрузке документа %1 с типом %2 возникла ошибка:
					           |Текст ошибки: %3
					           |Текст XML см. в журнале регистрации.'"),
					ДанныеДокумента.АдресЗапроса,
					ДанныеДокумента.ТипЕГАИС,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Если ИнтеграцияЕГАИС.СообщатьОбОшибкахПриЗагрузкеДанных()
					Или ( СтрНайти(НРег(ТекстОшибки), НСтр("ru = 'не найден документ'")) = 0
						И СтрНайти(НРег(ТекстОшибки), НСтр("ru = 'не найден исходящий запрос'")) = 0) Тогда
					
					ТекстОшибкиЖурналРегистрации = СтрШаблон(
						НСтр("ru = 'При загрузке документа %1 с типом %2 возникла ошибка:
						           |Текст ошибки: %3
						           |Текст XML:
						           |%4'"),
						ДанныеДокумента.АдресЗапроса,
						ДанныеДокумента.ТипЕГАИС,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ДанныеДокумента.ТекстXML);
					
					ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации);
					
					ИнтеграцияИС.СообщитьПользователюВФорму(ИдентификаторВладельца, ТекстОшибки);
					
				КонецЕсли;
				
			КонецПопытки;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ДанныеДокументаТТН Из ВходящиеТТН Цикл
			
			Если ОбщегоНазначения.РежимОтладки() Тогда
				
				ИдентификаторТТН = Строка(ДанныеДокументаТТН.Объект.Identity);
				
				Если СтрНачинаетсяС(НРег(ИдентификаторТТН), ИнтеграцияЕГАИС.ПрефиксИдентификатораРежимаОтладкиОбщий())
					И СтрНайти(НРег(ИдентификаторТТН), ИнтеграцияЕГАИС.ПрефиксИдентификатораРежимаОтладки()) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеДокументаУведомлениеОРегистрации = ИнтеграцияЕГАИС.НайтиУведомлениеОРегистрацииСправок(
				ДанныеДокументаТТН,
				УведомленияОРегистрации);
			
			Если ДанныеДокументаУведомлениеОРегистрации = Неопределено Тогда
				// Уведомление еще не поступило в УТМ
				Продолжить;
			КонецЕсли;
			
			ДанныеДокументаИсторияПоСправкам2 = ИнтеграцияЕГАИС.НайтиИсториюСправок2ПоТТН(
				ДанныеДокументаУведомлениеОРегистрации,
				ИсторияСправок2ПоТТН);
				
			Если ДанныеДокументаИсторияПоСправкам2 <> Неопределено Тогда
				ИсторияСправок2ПоТТН.Удалить(ИсторияСправок2ПоТТН.Найти(ДанныеДокументаИсторияПоСправкам2));
			КонецЕсли;
				
			НачатьТранзакцию();
			
			Попытка
				
				ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьТТНВходящуюЕГАИС(
					ДанныеДокументаТТН,
					ДанныеДокументаУведомлениеОРегистрации, ОрганизацияЕГАИС, ДанныеДокументаИсторияПоСправкам2);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
					           |Текст ошибки: %5
					           |Текст XML см. в журнале регистрации.'"),
					ДанныеДокументаТТН.АдресЗапроса, ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса,
					ДанныеДокументаТТН.ТипЕГАИС,     ДанныеДокументаУведомлениеОРегистрации.ТипЕГАИС,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстОшибкиЖурналРегистрации = СтрШаблон(
					НСтр("ru = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
					           |Текст ошибки: %5
					           |Текст сообщения XML документа %1:
					           |%6
					           |Текст сообщения XML документа %2:
					           |%7'"),
					ДанныеДокументаТТН.АдресЗапроса, ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса,
					ДанныеДокументаТТН.ТипЕГАИС,     ДанныеДокументаУведомлениеОРегистрации.ТипЕГАИС,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ДанныеДокументаТТН.ТекстXML,     ДанныеДокументаУведомлениеОРегистрации.ТекстXML);
				
				ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации);
				
				ИнтеграцияИС.СообщитьПользователюВФорму(ИдентификаторВладельца, ТекстОшибки);
				
			КонецПопытки;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ДанныеДокументаТТН.ТипЕГАИС);
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ДанныеДокумента Из ИсторияСправок2ПоТТН Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьИсториюСправок2ПоТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Если ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
					ДополнительныеПараметры.СтопЛист.Вставить(ДополнительныеПараметры.ТекущийОбъект, Истина);
				КонецЕсли;
				
			КонецПопытки;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать очередь передачи данных в ЕГАИС
//
// Параметры:
//  НастройкиОбменаЕГАИС - Структура - Настройки обмена ЕГАИС, см. функцию НастройкиОбменаЕГАИС()
//  СообщенияXMLКПередаче - Массив - Массив структур к передаче, см. функцию ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//
// Возвращаемое значение:
// Структура - со свойствами:
//  * Изменения - Массив - Результат передачи сообщений на сервере, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//  * СообщенияXMLКПередаче - Массив - Массив структур к передаче на клиенте, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения().
//
Функция ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС, СообщенияXMLКПередаче = Неопределено, Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",             Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче", Новый Массив);
	
	ОрганизацииЕГАИС = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииЕГАИС, ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаСервере));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииЕГАИС, ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаКлиенте));
	
	Если ОрганизацииЕГАИС.Количество() = 0 Тогда
		
		Если СообщенияXMLКПередаче <> Неопределено Тогда
			Для Каждого Сообщение Из СообщенияXMLКПередаче Цикл
				
				Если Сообщение.ПодготовленоКПередаче И Немедленно Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение в ЕГАИС не может быть передано.
						           |Для организации %1 не настроено подключение к УТМ.'"),
						Сообщение.ОрганизацияЕГАИС);
				Иначе
					ТекстОшибки = Сообщение.ТекстОшибки;
				КонецЕсли;
				
				СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
				СтрокаРезультата.ОрганизацияЕГАИС = Сообщение.ОрганизацияЕГАИС;
				СтрокаРезультата.Операция         = Сообщение.Операция;
				СтрокаРезультата.ФорматОбмена     = Сообщение.ФорматОбмена;
				
				СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Сообщение.ПодготовленоКПередаче;
				СтрокаРезультата.ПереданоВУТМ          = Ложь;
				СтрокаРезультата.Принято               = Ложь;
				
				СтрокаРезультата.ИсходящееСообщение = Сообщение.ИсходящееСообщение;
				СтрокаРезультата.ВходящееСообщение  = Неопределено;
				
				СтрокаРезультата.Объект             = Сообщение.Объект;
				СтрокаРезультата.ДокументОснование  = Сообщение.ДокументОснование;
				СтрокаРезультата.НовыйСтатус        = Сообщение.НовыйСтатус;
				
				ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
				
			КонецЦикла;
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если СообщенияXMLКПередаче = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Очередь.Сообщение              КАК ИсходящееСообщение,
		|	Очередь.Сообщение.Операция     КАК Операция,
		|	Очередь.Сообщение.ФорматОбмена КАК ФорматОбмена,
		|	Очередь.ОрганизацияЕГАИС       КАК ОрганизацияЕГАИС,
		|	Истина                         КАК ПодготовленоКПередаче
		|ИЗ
		|	РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК Очередь
		|ГДЕ
		|	Очередь.ОрганизацияЕГАИС В(&ОрганизацииЕГАИС)
		|");
		
		Запрос.УстановитьПараметр("ОрганизацииЕГАИС", ОрганизацииЕГАИС);
		
		ТаблицаОчередь = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаОчередь = СообщенияXMLКПередаче;
		
	КонецЕсли;
	
	Для Каждого Выборка Из ТаблицаОчередь Цикл
		
		НастройкаОбменаНаСервере = НастройкиОбменаЕГАИС.ОбменНаСервере.Получить(Выборка.ОрганизацияЕГАИС);
		НастройкаОбменаНаКлиенте = НастройкиОбменаЕГАИС.ОбменНаКлиенте.Получить(Выборка.ОрганизацияЕГАИС);
		Если Выборка.ПодготовленоКПередаче И НастройкаОбменаНаСервере <> Неопределено Тогда
			
			АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(Выборка.Операция, Выборка.ФорматОбмена);
			
			РезультатыПередачиСообщений = ПередатьСообщениеВУТМ(Выборка.ИсходящееСообщение, АдресЗапроса, НастройкаОбменаНаСервере);
			
			РезультатыПередачиСообщенийПоОрганизациямЕГАИС = Новый Соответствие;
			РезультатыПередачиСообщенийПоОрганизациямЕГАИС.Вставить(Выборка.ОрганизацияЕГАИС, РезультатыПередачиСообщений);
			
			Изменения = ПриЗавершенииПередачиДанных(РезультатыПередачиСообщенийПоОрганизациямЕГАИС);
			Для Каждого ЭлементДанных Из Изменения Цикл
				ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
			КонецЦикла;
			
		ИначеЕсли Выборка.ПодготовленоКПередаче И НастройкаОбменаНаКлиенте <> Неопределено Тогда
			
			АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(Выборка.Операция, Выборка.ФорматОбмена);
			
			СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML(Истина);
			СообщениеXML.Ссылка            = Выборка.ИсходящееСообщение;
			СообщениеXML.ОрганизацияЕГАИС  = Выборка.ОрганизацияЕГАИС;
			СообщениеXML.ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(Выборка.ИсходящееСообщение);
			СообщениеXML.АдресЗапроса      = АдресЗапроса;
			
			ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(СообщениеXML);
			
		ИначеЕсли СообщенияXMLКПередаче <> Неопределено Тогда
			
			Если Выборка.ПодготовленоКПередаче И Немедленно Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение в ЕГАИС не может быть передано.
					           |Для организации %1 не настроено подключение к УТМ.'"),
					Выборка.ОрганизацияЕГАИС);
			Иначе
				ТекстОшибки = Выборка.ТекстОшибки;
			КонецЕсли;
			
			СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
			СтрокаРезультата.Операция         = Выборка.Операция;
			СтрокаРезультата.ФорматОбмена     = Выборка.ФорматОбмена;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Выборка.ПодготовленоКПередаче;
			СтрокаРезультата.ПереданоВУТМ          = Ложь;
			СтрокаРезультата.Принято               = Ложь;
			
			СтрокаРезультата.ИсходящееСообщение = Выборка.ИсходящееСообщение;
			СтрокаРезультата.ВходящееСообщение  = Неопределено;
			
			СтрокаРезультата.Объект             = Выборка.Объект;
			СтрокаРезультата.ДокументОснование  = Выборка.ДокументОснование;
			СтрокаРезультата.НовыйСтатус        = Выборка.НовыйСтатус;
			
			ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ЕГАИС.
//
// Параметры:
//  ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки) Экспорт
	
	ИнтеграцияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru = 'ЕГАИС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Выполняет запись ошибки сканирования и проверки в журнал регистрации, добавляя имя события ЕГАИС.
//    Оповещает пользователя об ошибке.
// Параметры:
//  Шаблон				 - Строка - многоязычный шаблон сообщения (с 2 параметрами)
//  Ссылка				 - ДокументСсылка - документ в котором произошла ошибка
//  ПредставлениеОшибки	 - Строка - представление ошибки.
//
Процедура ИнформироватьОбОшибкеВДокументе(Шаблон, Ссылка, ПредставлениеОшибки) Экспорт
	
	ТекстСообщения = СтрШаблон(Шаблон, Ссылка, ПредставлениеОшибки);
	
	ЗаписатьОшибкуВЖурналРегистрации(ТекстСообщения);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Возвращает текст последней ошибки из протокола обмена
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется показать ошибку обмена
//
// Возвращаемое значение:
//  Строка - текст ошибки обмена.
//
Функция ТекстОшибкиИзПротокола(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "СОшибкой");
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПоследнегоСообщения.Сообщение, "Описание");
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПолученияФормОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСПереопределяемый.ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСПереопределяемый.ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСПереопределяемый.ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Получает данные документа, по которому было отправлено или получено сообщение.
//
// Параметры:
//  Сообщение - СправочникСсылка.ЕГАИСПрисоединенныеФайлы - сообщение, по которому получаются данные.
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Документ  - ДокументСсылка - документ, по которому было получено или отправлено сообщение.
//   * ДокументОснование - ДокументСсылка - основание документа, по которому было получено или отправлено сообщение.
//   * Операция  - ПеречислениеСсылка.ВидыДокументовЕГАИС - выполненная операция обмена.
//   * ФорматОбмена  - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Формат обмена.
//   * ОрганизацияЕГАИС  - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//
Функция ДанныеДокументаСообщения(Сообщение, ОрганизацияЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("ДокументОснование");
	ВозвращаемоеЗначение.Вставить("Операция");
	ВозвращаемоеЗначение.Вставить("ФорматОбмена");
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Если ОрганизацияЕГАИС = "ПроверкаПодключенияКУТМ" Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ.ДокументОснование КАК ДокументОснование,
	|	ЕГАИСПрисоединенныеФайлы.Документ                   КАК Документ,
	|	ЕГАИСПрисоединенныеФайлы.ВладелецФайла              КАК ОрганизацияЕГАИС,
	|	ЕГАИСПрисоединенныеФайлы.ФорматОбмена               КАК ФорматОбмена,
	|	ЕГАИСПрисоединенныеФайлы.Операция                   КАК Операция
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Ссылка = &Сообщение
	|");
	
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение.Документ          = Выборка.Документ;
		ВозвращаемоеЗначение.ДокументОснование = Выборка.ДокументОснование;
		ВозвращаемоеЗначение.Операция          = Выборка.Операция;
		ВозвращаемоеЗначение.ФорматОбмена      = Выборка.ФорматОбмена;
		ВозвращаемоеЗначение.ОрганизацияЕГАИС  = Выборка.ОрганизацияЕГАИС;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает доступные для текущего рабочего места настройки обмена с ЕГАИС на клиенте и на сервере
//
// Параметры:
//  ОрганизацииЕГАИС - Массив, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС для обмена.
//  ДатыПоследнегоЗапуска - Соответствие - Даты последнего запуска обменов на клиенте по расписанию.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОбменНаСервере - Соответствие - Настройки обмена на сервере, см. функцию ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС()
//   * ОбменНаКлиенте - Соответствие - Настройки обмена на клиенте, см. функцию ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС()
//   * БезНастроек - Массив - Организации ЕГАИС (СправочникСсылка.КлассификаторОрганизацийЕГАИС) для которых нет настроек обмена.
//
Функция НастройкиОбменаЕГАИС(ОрганизацииЕГАИС = Неопределено, ДатыПоследнегоЗапуска = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОбменНаСервере", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ОбменНаКлиенте", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("БезНастроек",    Новый Массив);
	
	ОбменНаКлиентеПоРасписанию = (ДатыПоследнегоЗапуска <> Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	
	|	ВЫБОР КОГДА НастройкиОбменаЕГАИС.ИдентификаторФСРАР ЕСТЬ NULL
	|		И ОбщиеНастройкиОбменаЕГАИС.ИдентификаторФСРАР ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьНастройкиОбменаЕГАИС,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.АдресУТМ ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.АдресУТМ
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.АдресУТМ ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.АдресУТМ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресУТМ,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ПортУТМ ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ПортУТМ
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ПортУТМ ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ПортУТМ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПортУТМ,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.Таймаут ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.Таймаут
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.Таймаут ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.Таймаут
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Таймаут,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ОбменНаСервере
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ОбменНаСервере
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаСервере,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаКлиентеПоРасписанию,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбменНаКлиентеРасписание,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗагружатьВходящиеДокументы
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР)
	|			И (НастройкиОбменаЕГАИС.РабочееМесто = &РабочееМесто)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК ОбщиеНастройкиОбменаЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Код = ОбщиеНастройкиОбменаЕГАИС.ИдентификаторФСРАР)
	|			И (ОбщиеНастройкиОбменаЕГАИС.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|");
	
	Если ОрганизацииЕГАИС <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"И КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацииЕГАИС)";
	КонецЕсли;
	
	Если ОбменНаКлиентеПоРасписанию Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		"И ВЫБОР
		|	КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
		|	КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ
		|";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("ОрганизацииЕГАИС", ОрганизацииЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбменНаКлиентеПоРасписаниюТребуется = Ложь;
		Если ОбменНаКлиентеПоРасписанию Тогда
			Если Выборка.ОбменНаКлиентеПоРасписанию Тогда
				Расписание = Выборка.ОбменНаКлиентеРасписание.Получить();
				Если Расписание <> Неопределено Тогда
					ДатаПоследнегоЗапуска = ДатыПоследнегоЗапуска.Получить(Выборка.ОрганизацияЕГАИС);
					Если ДатаПоследнегоЗапуска = Неопределено
						Или Расписание.ТребуетсяВыполнение(ТекущаяДатаСеанса(), ДатаПоследнегоЗапуска) Тогда
						ОбменНаКлиентеПоРасписаниюТребуется = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбменНаКлиентеПоРасписанию
			И Не ОбменНаКлиентеПоРасписаниюТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ЕстьНастройкиОбменаЕГАИС Тогда
			
			НастройкаОбменаЕГАИС = ИнтеграцияЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС();
			НастройкаОбменаЕГАИС.АдресУТМ                   = Выборка.АдресУТМ;
			НастройкаОбменаЕГАИС.ПортУТМ                    = Выборка.ПортУТМ;
			НастройкаОбменаЕГАИС.Таймаут                    = Выборка.Таймаут;
			НастройкаОбменаЕГАИС.ЗагружатьВходящиеДокументы = Выборка.ЗагружатьВходящиеДокументы;
			
			Если Выборка.ОбменНаСервере Тогда
				ВозвращаемоеЗначение.ОбменНаСервере.Вставить(Выборка.ОрганизацияЕГАИС, НастройкаОбменаЕГАИС);
			Иначе
				ВозвращаемоеЗначение.ОбменНаКлиенте.Вставить(Выборка.ОрганизацияЕГАИС, НастройкаОбменаЕГАИС);
			КонецЕсли;
			
		Иначе
			
			Если ОрганизацииЕГАИС <> Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Выборка.ОрганизацияЕГАИС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОрганизацииЕГАИС <> Неопределено Тогда
		
		Если ТипЗнч(ОрганизацииЕГАИС) = Тип("СправочникСсылка.КлассификаторОрганизацийЕГАИС") Тогда
			ОрганизацииДляПроверки = Новый Массив;
			ОрганизацииДляПроверки.Добавить(ОрганизацииЕГАИС);
		Иначе
			ОрганизацииДляПроверки = ОрганизацииЕГАИС;
		КонецЕсли;
		
		Для Каждого ОрганизацияЕГАИС Из ОрганизацииДляПроверки Цикл
			Если ВозвращаемоеЗначение.ОбменНаКлиенте.Получить(ОрганизацияЕГАИС) = Неопределено
				И ВозвращаемоеЗначение.ОбменНаСервере.Получить(ОрганизацияЕГАИС) = Неопределено
				И ВозвращаемоеЗначение.БезНастроек.Найти(ОрганизацияЕГАИС) = Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(ОрганизацияЕГАИС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает реквизиты алкогольной продукции для создания номенклатуры.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Алкогольная продукция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ВидАлкогольнойПродукцииЕГАИС - СправочникСсылка.ВидыАлкогольнойПродукции - Вид алкогольной продукции.
//   * НаименованиеНоменклатурыЕГАИС - Строка - Наименование номенклатуры.
//   * ПолноеНаименованиеНоменклатурыЕГАИС - Строка - Полное наименование номенклатуры.
//   * КрепостьЕГАИС - Число - Крепость.
//   * ОбъемЕГАИС - Число - Объем.
//   * ИмпортерЕГАИС  - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Производитель.
//   * ПроизводительЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Производитель.
//
Функция РеквизитыАлкогольнойПродукцииДляСозданияНоменклатуры(АлкогольнаяПродукция) Экспорт
	
	Если НЕ ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Импортер,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &АлкогольнаяПродукция
	|");
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", АлкогольнаяПродукция);
	
	ВыборкаРеквизиты = Запрос.Выполнить().Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("АлкогольнаяПродукцияЕГАИС",           АлкогольнаяПродукция);
	Реквизиты.Вставить("ВидАлкогольнойПродукцииЕГАИС",        ВыборкаРеквизиты.ВидПродукции);
	Реквизиты.Вставить("НаименованиеНоменклатурыЕГАИС",       ВыборкаРеквизиты.Наименование);
	Реквизиты.Вставить("ПолноеНаименованиеНоменклатурыЕГАИС", ВыборкаРеквизиты.НаименованиеПолное);
	Реквизиты.Вставить("КрепостьЕГАИС",                       ВыборкаРеквизиты.Крепость);
	Реквизиты.Вставить("ОбъемЕГАИС",                          ВыборкаРеквизиты.Объем);
	Реквизиты.Вставить("ИмпортерЕГАИС",                       ВыборкаРеквизиты.Импортер);
	Реквизиты.Вставить("ПроизводительЕГАИС",                  ВыборкаРеквизиты.Производитель);
	
	Возврат Реквизиты;
	
КонецФункции


// Возвращает возможные ТТН ЕГАИС для связи с прикладным документом поступления
//
// Параметры:
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - организация-ключ поиска
//   Склад       - ОпределяемыйТип.ТорговыйОбъектЕГАИС        - торговый объект-ключ поиска
//   Контрагент  - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - грузоотправитель/поставщик-ключ поиска
//
// Возвращаемое значение:
//   Массив Из ДокументСсылка.ТТНВходящаяЕГАИС - подходящие под указанные фильтры ТТН входящие ЕГАИС, еще не
//   связанные с прикладными документами.
//
Функция ВозможныеТТНЕГАИС(Организация, Склад, Контрагент) Экспорт
	
	МассивПустыхЗначений = Новый Массив;
	МассивПустыхЗначений.Добавить(Неопределено);
	Для Каждого ТипыДокументаПоступления Из Метаданные.ОпределяемыеТипы.ОснованиеТТНВходящаяЕГАИС.Тип.Типы() Цикл
		МассивПустыхЗначений.Добавить(Документы[Метаданные.НайтиПоТипу(ТипыДокументаПоступления).Имя].ПустаяСсылка());
	КонецЦикла;
	
	Контрагенты = Новый Массив;
	Контрагенты.Добавить(Неопределено);
	Контрагенты.Добавить(Контрагент);
	Для Каждого ТипыКонтрагентов Из Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип.Типы() Цикл
		Контрагенты.Добавить(Справочники[Метаданные.НайтиПоТипу(ТипыКонтрагентов).Имя].ПустаяСсылка());
	КонецЦикла;
	
	СтатусыОтказа = Новый СписокЗначений;
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Отменен);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТТНВходящаяЕГАИС.Ссылка
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Организация = &Организация
	|	И ТТНВходящаяЕГАИС.ТорговыйОбъект = &Склад
	|	И ТТНВходящаяЕГАИС.ДокументОснование В(&ПустойДокументОснование)
	|	И НЕ СтатусыДокументовЕГАИС.Статус В(&СтатусыОтказа)
	|	И (ТТНВходящаяЕГАИС.Поставщик.Контрагент В (&Контрагенты)
	|		ИЛИ ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент В (&Контрагенты))";
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Склад",                   Склад);
	Запрос.УстановитьПараметр("ПустойДокументОснование", МассивПустыхЗначений);
	Запрос.УстановитьПараметр("СтатусыОтказа",           СтатусыОтказа);
	Запрос.УстановитьПараметр("Контрагенты",             Контрагенты);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает данные ТТН ЕГАИС по введенным реквизитам приобретения (контрагенту, входящим номеру и дате)
//   В случае отсутствия или множественного результата возвращает пустую структуру.
//
// Параметры:
//   Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - контрагент документа приобретения
//   НомерТТН   - Строка                                     - номер входящего документа (ТТН)
//   ДатаТТН    - Дата                                       - дата входящего документа (ТТН)
//
// Возвращаемое значение:
//   Структура - реквизиты найденной ТТН ЕГАИС (если подходящая ТТН одна):
// * ТребуетсяСвязатьОрганизацию - Булево - признак сопоставленности организации из ТТН ЕГАИС
// * ОрганизацияЕГАИС            - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация из ТТН ЕГАИС
// * ДатаТТН                     - Дата   - дата найденной ТТН
// * НомерТТН                    - Строка - номер найденной ТТН
// * Ссылка                      - ДокументСсылка.ТТНВходящаяЕГАИС - найденная ТТН
//
Функция НайтиТТНЕГАИС(Контрагент, НомерТТН, ДатаТТН) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивНайденныхОрганизацийЕГАИС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка   КАК Ссылка,
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерТТН,
	|	ТТНВходящаяЕГАИС.ДатаТТН  КАК ДатаТТН,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК ОрганизацияЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	(ТТНВходящаяЕГАИС.НомерТТН = &НомерТТН
	|			ИЛИ ТТНВходящаяЕГАИС.НомерТТН = &НомерТТНБезНулей)
	|	И ТТНВходящаяЕГАИС.ДатаТТН = &ДатаТТН
	|	И ВЫБОР
	|			КОГДА &НеИспользоватьОтборПоОрганизации
	|				ТОГДА ИСТИНА
	|			КОГДА ТТНВходящаяЕГАИС.Поставщик = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель В (&СписокОрганизаций)
	|			ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик В (&СписокОрганизаций)
	|		КОНЕЦ
	|");
	
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоОрганизации", МассивНайденныхОрганизацийЕГАИС.Количество() = 0);
	Запрос.УстановитьПараметр("СписокОрганизаций",                МассивНайденныхОрганизацийЕГАИС);
	Запрос.УстановитьПараметр("НомерТТН",                         СокрЛП(НомерТТН));
	Запрос.УстановитьПараметр("НомерТТНБезНулей",                 ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерТТН));
	Запрос.УстановитьПараметр("ДатаТТН",                          ДатаТТН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка");
	Результат.Вставить("НомерТТН");
	Результат.Вставить("ДатаТТН");
	Результат.Вставить("ОрганизацияЕГАИС");
	Результат.Вставить("ТребуетсяСвязатьОрганизацию", Ложь);
	
	Если Выборка.Количество()=1 Тогда
		
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Если МассивНайденныхОрганизацийЕГАИС.Количество() = 0 И ЗначениеЗаполнено(Выборка.ОрганизацияЕГАИС) Тогда
			Результат.ТребуетсяСвязатьОрганизацию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет форматированную строку (связи с документами ЕГАИС) для формы прикладного документа со статусом оформления ЕГАИС
//
// Параметры:
//   Ссылка - ДокументСсылка - ссылка на прикладной документ
//
// Возвращаемое значение:
//   ФорматированнаяСтрока, Строка - Описание доступных действий ЕГАИС
Функция ТекстДокументаЕГАИС(Ссылка) Экспорт
	
	ОформлениеДокументовПоПриоритетам = ИнтеграцияЕГАИС.ДанныеОформленияДокументовПоПриоритетам(Ссылка);
	
	ЕстьАлкогольнаяПродукция = ОформлениеДокументовПоПриоритетам.Количество() > 0;
	Если Не ЕстьАлкогольнаяПродукция Тогда
		Возврат "";
	КонецЕсли;
	
	ФорматированныеСтроки = Новый Массив;
	Для Каждого КлючИЗначение Из ОформлениеДокументовПоПриоритетам Цикл
		Данные = КлючИЗначение.Значение;
		
		ЕстьДокументыСЧастичнымОформлением = Ложь;
		Для Каждого ДанныеДокументаЕГАИС Из Данные Цикл
			Если ДанныеДокументаЕГАИС.СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ЕстьОшибкиОформления
				Или ДанныеДокументаЕГАИС.СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично
				Или ДанныеДокументаЕГАИС.МассивДокументов.Количество() > 0 Тогда
				ЕстьДокументыСЧастичнымОформлением = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ДанныеДокументаЕГАИС Из Данные Цикл
			
			Если ЕстьДокументыСЧастичнымОформлением Тогда
				Если ДанныеДокументаЕГАИС.МассивДокументов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ФорматированныеСтроки.Количество() <> 0 Тогда
				Если Данные.Количество() > 1 Тогда
					ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
				Иначе
					ФорматированныеСтроки.Добавить("," + " ");
				КонецЕсли;
			КонецЕсли;
			
			ФорматированныеСтроки.Добавить(ДанныеДокументаЕГАИС.Представление);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ФорматированныеСтроки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПередатьСообщениеВУТМ(ИсходящееСообщение, АдресЗапроса, НастройкаОбменаНаСервере)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(ИсходящееСообщение);
	
	ПараметрыHTTPЗапроса = ИнтеграцияЕГАИСКлиентСервер.ПараметрыHTTPЗапроса(ТекстСообщенияXML, АдресЗапроса);
	
	РезультатОтправкиHTTPЗапроса = ИнтеграцияЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(НастройкаОбменаНаСервере, ПараметрыHTTPЗапроса);
	
	ЭлементДанных = Новый Структура;
	ЭлементДанных.Вставить("ИсходящееСообщение",           ИсходящееСообщение);
	ЭлементДанных.Вставить("РезультатОтправкиHTTPЗапроса", ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса));
	
	ВозвращаемоеЗначение = Новый Массив;
	ВозвращаемоеЗначение.Добавить(ЭлементДанных);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - Сообщения к передаче см. ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено)
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПриЗавершенииПередачиДанных(РезультатыПередачиСообщенийПоОрганизациямЕГАИС) Экспорт
	
	Изменения = Новый Массив;
	
	Для Каждого КлючИЗначение Из РезультатыПередачиСообщенийПоОрганизациямЕГАИС Цикл
		
		ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		
		Для Каждого ЭлементДанных Из КлючИЗначение.Значение Цикл
			
			ЗначенияРеквизитов = ДанныеДокументаСообщения(ЭлементДанных.ИсходящееСообщение, ОрганизацияЕГАИС);
			
			Результат = ОбработатьРезультатПередачиДанных(
				ЭлементДанных.ИсходящееСообщение,
				ЗначенияРеквизитов,
				ЭлементДанных.РезультатОтправкиHTTPЗапроса);
			
			ТекстОшибки = "";
			Если ЗначениеЗаполнено(Результат.РезультатОбработкиОтвета.ТекстОшибки) Тогда
				ТекстОшибки = Результат.РезультатОбработкиОтвета.ТекстОшибки;
			ИначеЕсли ЗначениеЗаполнено(Результат.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
				ТекстОшибки = Результат.РезультатОтправкиЗапроса.ТекстОшибки;
			КонецЕсли;
			
			СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
			СтрокаРезультата.Операция         = ЗначенияРеквизитов.Операция;
			СтрокаРезультата.ФорматОбмена     = ЗначенияРеквизитов.ФорматОбмена;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Истина;
			СтрокаРезультата.ПереданоВУТМ          = Не ЗначениеЗаполнено(ТекстОшибки);
			СтрокаРезультата.Принято               = Ложь;
			
			СтрокаРезультата.ИсходящееСообщение = Результат.ИсходящееСообщение;
			СтрокаРезультата.ВходящееСообщение  = Результат.ВходящееСообщение;
			
			СтрокаРезультата.Объект            = Результат.Документ;
			СтрокаРезультата.ДокументОснование = Результат.ДокументОснование;
			СтрокаРезультата.НовыйСтатус       = Результат.РезультатОбработкиОтвета.НовыйСтатус;
			
			// Результат чека ЕГАИС
			СтрокаРезультата.ИдентификаторЗапроса = Результат.ИдентификаторЗапроса;
			СтрокаРезультата.Подпись              = Результат.Подпись;
			
			Изменения.Добавить(СтрокаРезультата);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Изменения;
	
КонецФункции

Функция ОбработатьРезультатПередачиДанных(ИсходящееСообщение, РеквизитыИсходящегоСообщения, РезультатОтправкиЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("НовыйСтатус");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ВходящееСообщение");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("ДокументОснование");
	
	// Результат чека ЕГАИС
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗапроса");
	ВозвращаемоеЗначение.Вставить("Подпись");
	
	ДокументСсылка    = РеквизитыИсходящегоСообщения.Документ;
	ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	Операция          = РеквизитыИсходящегоСообщения.Операция;
	ФорматОбмена      = РеквизитыИсходящегоСообщения.ФорматОбмена;
	ОрганизацияЕГАИС  = РеквизитыИсходящегоСообщения.ОрганизацияЕГАИС;
	
	ВозвращаемоеЗначение.Документ          = ДокументСсылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОснование;
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
		
		ДанныеОбработки = ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение по документу %1 не принято УТМ:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ДанныеОбработки.ТекстОшибки);
		КонецЕсли;
		
		Если ОрганизацияЕГАИС = "ПроверкаПодключенияКУТМ" Тогда
			ВозвращаемоеЗначение.ВходящееСообщение  = ТекстВходящегоСообщенияXML;
			ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
			ИдентификаторЗапроса = "";
			Подпись              = "";
		Иначе
			ИдентификаторЗапроса = ДанныеОбработки.Результат.ИдентификаторЗапроса;
			Подпись              = ДанныеОбработки.Результат.Подпись;
		КонецЕсли;
		
		Если Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации Тогда
			ОперацияВходящегоСообщения = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации;
		Иначе
			ОперацияВходящегоСообщения = Операция;
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
		Реквизиты.Вставить("Операция",             ОперацияВходящегоСообщения);
		Реквизиты.Вставить("Документ",             ДокументСсылка);
		Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
		Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
		Реквизиты.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		Реквизиты.Вставить("ФорматОбмена",         ФорматОбмена);
		Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
		Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
		
		НачатьТранзакцию();
		
		Попытка
			
			ВходящееСообщение = ИнтеграцияЕГАИС.ДобавитьЗаписьВПротоколОбмена(
				ТекстВходящегоСообщенияXML,
				Реквизиты).Ссылка;
			
			ИнтеграцияЕГАИС.УдалитьСообщениеИзОчередиПередачиДанных(ИсходящееСообщение);
			
			Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
				ИсходящееСообщениеОбъект = ИсходящееСообщение.ПолучитьОбъект();
				ИсходящееСообщениеОбъект.ИдентификаторЗапроса = ИдентификаторЗапроса;
				ИсходящееСообщениеОбъект.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				
				ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = Реквизиты.ФорматОбмена;
				
				ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
				МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ДокументСсылка,
					Операция,
					ДанныеОбработки.СтатусОбработки, ПараметрыОбновленияСтатуса);
				
			Иначе
				НовыйСтатус = Неопределено;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ВходящееСообщение                    = ВходящееСообщение;
			ВозвращаемоеЗначение.ИсходящееСообщение                   = ИсходящееСообщение;
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			
			ВозвращаемоеЗначение.ИдентификаторЗапроса = ИдентификаторЗапроса;
			ВозвращаемоеЗначение.Подпись              = Подпись;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	Иначе
		
		Если ОрганизацияЕГАИС <> "ПроверкаПодключенияКУТМ" Тогда
			
			ОписаниеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "Описание");
			
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Данные не переданы в УТМ:
					           |%1
					           |По причине:
					           |%2'"),
					ОписаниеОперации,
					РезультатОтправкиЗапроса.ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДокументыКЗагрузке(НастройкиОбменаЕГАИС, ВозвращаемоеЗначение)
	
	ДокументыКЗагрузке = Новый Соответствие;
	
	ОрганизацииЕГАИС = ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС);
	Для Каждого ОрганизацияЕГАИС Из ОрганизацииЕГАИС Цикл
		
		НастройкаОбменаЕГАИС = НастройкиОбменаЕГАИС.Получить(ОрганизацияЕГАИС);
		
		Если Не НастройкаОбменаЕГАИС.ЗагружатьВходящиеДокументы Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыКЗагрузке.Вставить(ОрганизацияЕГАИС, Новый Массив);
		
		АдресаURLВходящихДокументов = ИнтеграцияЕГАИСКлиентСервер.АдресаURLВходящихДокументов(
			НастройкиОбменаЕГАИС, ОрганизацияЕГАИС);
		
		Если ЗначениеЗаполнено(АдресаURLВходящихДокументов.ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось получить список входящих документов организации %1:
					           |По причине:
					           |%2'"),
					ОрганизацияЕГАИС,
					АдресаURLВходящихДокументов.ТекстОшибки));
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + АдресаURLВходящихДокументов.ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = АдресаURLВходящихДокументов.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если АдресаURLВходящихДокументов.ДанныеОбработки <> Неопределено Тогда
			Для Каждого ДанныеКПолучению Из АдресаURLВходящихДокументов.ДанныеОбработки Цикл
				
				СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ДанныеКПолучению.АдресURL);
				
				РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(
					ИнтеграцияЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(
						НастройкаОбменаЕГАИС,
						ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET", СтруктураURI.ПутьНаСервере)));
				
				Если РезультатОперации.ТекстСообщенияXMLПолучен Тогда
					
					ДокументыКЗагрузке[ОрганизацияЕГАИС].Добавить(
						ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента(
							ОрганизацияЕГАИС,
							ДанныеКПолучению.ИдентификаторЗапроса,
							ДанныеКПолучению.АдресURL,
							РезультатОперации.ТекстВходящегоСообщенияXML));
					
				Иначе
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось получить входящий документ %1
						           |%2'"),
						ДанныеКПолучению.АдресURL,
						РезультатОперации.ТекстОшибки);
					
					Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
						                                 + Символы.ПС
						                                 + ТекстОшибки;
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыКЗагрузке;
	
КонецФункции

Процедура УдалитьДокументыИзУТМ(ДокументыКУдалению, НастройкиОбменаЕГАИС, ВозвращаемоеЗначение)
	
	Для Каждого Данные Из ДокументыКУдалению Цикл
		
		Если Не ЗначениеЗаполнено(Данные.АдресЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаОбменаЕГАИС = НастройкиОбменаЕГАИС.Получить(Данные.ОрганизацияЕГАИС);
		
		РезультатОперации = Неопределено;
		Если НастройкаОбменаЕГАИС <> Неопределено Тогда
			
			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Данные.АдресЗапроса);
			
			РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(
				ИнтеграцияЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(
					НастройкаОбменаЕГАИС,
					ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE", СтруктураURI.ПутьНаСервере)));
			
		КонецЕсли;
		
		Если РезультатОперации = Неопределено
			Или Не РезультатОперации.ТекстСообщенияXMLПолучен Тогда
			
			ТекстОшибки = 
				СтрШаблон(НСтр("ru = 'Не удалось удалить входящий документ (%1)
					                 |%2'"),
					Данные.АдресЗапроса,
					РезультатОперации.ТекстОшибки);
			
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает ответ ЕГАИС на переданные данные.
//
// Параметры:
//  ТекстВходящегоСообщенияXML - Строка - Текст сообщения XML, содержащий ответ на переданные данные.
// 
// Возвращаемое значение:
//  Структура - результат обработки:
//   * Результат         - Неопределено, Структура - (См. ИнтеграцияЕГАИСКлиентСервер.ОбработатьОтветНаПередачуДанных).
//   * ТекстОшибки       - Строка    - текст ошибки, в случае ее возникновения.
//   * ТекстСообщенияXML - Строка    - содержит ответ, полученный на запрос.
//   * СтатусОбработки   - Перечисление.СтатусыОбработкиСообщенийЕГАИС - статус обработки запроса.
//
Функция ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	ВозвращаемоеЗначение.ТекстСообщенияXML = ТекстВходящегоСообщенияXML;
	
	Попытка
		
		ДанныеОбработки = ИнтеграцияЕГАИСКлиентСервер.ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML);
		
	Исключение
		
		ИнтеграцияЕГАИС.ОбработатьОшибку(
			НСтр("ru = 'При разборе ответа на запрос передачи данных в УТМ возникла ошибка.
			           |Текст ошибки: %ТекстОшибки%'"),
			ИнформацияОбОшибке(),
			ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ДанныеОбработки.Ошибка) Тогда
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ДанныеОбработки.Ошибка;
	Иначе
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
		ВозвращаемоеЗначение.Результат       = ДанныеОбработки;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// См ИнтеграцияЕГАИСКлиентСервер.ОбработатьОтветНаЗапросПолученияДокументов
//
Функция ОбработатьОтветНаЗапросПолученияДокументов(РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС) Экспорт
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.ОбработатьОтветНаЗапросПолученияДокументов(РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС);
	
КонецФункции

// См ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса
//
Функция ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса) Экспорт
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса);
	
КонецФункции

// Получает контрагента торгового объекта.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект, для которого необходимо получить контрагента.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОрганизацияКонтрагентГосИС - контрагент торгового объекта.
//
Функция КонтрагентТорговогоОбъекта(ТорговыйОбъект) Экспорт
	
	Контрагент = Неопределено;
	ИнтеграцияЕГАИСПереопределяемый.КонтрагентТорговогоОбъекта(Контрагент, ТорговыйОбъект);
	Возврат Контрагент;
	
КонецФункции

// Получает торгового объект контрагента.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Контрагент.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект.
//
Функция ТорговыйОбъектКонтрагента(Контрагент) Экспорт
	
	ТорговыйОбъект = Неопределено;
	ИнтеграцияЕГАИСПереопределяемый.ТорговыйОбъектКонтрагента(ТорговыйОбъект, Контрагент);
	Возврат ТорговыйОбъект;
	
КонецФункции

// Проверят использование механизма регистрации розничных продаж в ЕГАИС.
//
Функция ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Контрагент, ТорговыйОбъект, Знач ДатаПродажи = Неопределено) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ДатаПродажи) Тогда
		ДатаПродажи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторОрганизацийЕГАИС.Ссылка,
	|	КлассификаторОрганизацийЕГАИС.НаходитсяВСельскойМестности
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &ТорговыйОбъект
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации");
	
	Запрос.УстановитьПараметр("Контрагент",     Контрагент);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.НаходитсяВСельскойМестности Тогда
		ДатаНачалаРегистрации = Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить();
	Иначе
		ДатаНачалаРегистрации = Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Получить();
	КонецЕсли;
	
	Возврат ДатаПродажи >= ДатаНачалаРегистрации И ЗначениеЗаполнено(ДатаНачалаРегистрации);

КонецФункции

// Возвращает код организации ЕГАИС в ФСРАР для переданного документа обмена.
//
Функция КодФСРАРОрганизацииПоДокументу(ДокументСсылка) Экспорт
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ИмяРеквизита = "Грузополучатель";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ИмяРеквизита = "Грузоотправитель";
	Иначе
		ИмяРеквизита = "ОрганизацияЕГАИС";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Код КАК Код
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ТаблицаДокумента." + ИмяРеквизита + " = КлассификаторОрганизацийЕГАИС.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Код;
	
КонецФункции

// Проверяет возможность загрузки ответов из УТМ.
//
Функция ДоступноВыполнениеОбменаНаКлиентеПоРасписанию() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.КлассификаторОрганизацийЕГАИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ЕГАИСПрисоединенныеФайлы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПроверкиНастроекВыполненияОбменаНаКлиентеПоРасписанию = Новый Соответствие;
	
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(
		Неопределено,
		ПараметрыПроверкиНастроекВыполненияОбменаНаКлиентеПоРасписанию);
	
	Если НастройкиОбменаЕГАИС.ОбменНаКлиенте.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает настройки прокси-сервера.
//
Функция НастройкиПроксиСервера(URLИлиПротокол) Экспорт
	
	Возврат ПолучениеФайловИзИнтернета.ПолучитьПрокси(URLИлиПротокол);
	
КонецФункции

// Возвращает формат обмена с УТМ организации ЕГАИС.
//
Функция ФорматОбменаОрганизацииЕГАИС(ОрганизацияЕГАИС) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка
	|	И КлассификаторОрганизацийЕГАИС.ФорматОбмена <> ЗНАЧЕНИЕ(Перечисление.ФорматыОбменаЕГАИС.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].ФорматОбмена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить документы по основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ.
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * ВозвратИзРегистра2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС - Статус документа.
//   * ПередачаВРегистр2ЕГАИС - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиПередачиВРегистр2ЕГАИС - Статус документа.
//
Функция ДокументыПоОснованию(ДокументОснование) Экспорт
	
	ИменаДокументов = Новый Массив;
	ИменаДокументов.Добавить("АктСписанияЕГАИС");
	ИменаДокументов.Добавить("АктПостановкиНаБалансЕГАИС");
	ИменаДокументов.Добавить("ТТНВходящаяЕГАИС");
	ИменаДокументов.Добавить("ТТНИсходящаяЕГАИС");
	ИменаДокументов.Добавить("ЧекЕГАИС");
	ИменаДокументов.Добавить("ЧекЕГАИСВозврат");
	ИменаДокументов.Добавить("ПередачаВРегистр2ЕГАИС");
	ИменаДокументов.Добавить("ВозвратИзРегистра2ЕГАИС");
	
	ВозвращаемоеЗначение = Новый Структура;
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		ВозвращаемоеЗначение.Вставить(ИмяДокумента, Новый Массив);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Таблица.Ссылка          КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Таблица.Ссылка          КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Таблица.Ссылка          КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Таблица.Ссылка          КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Таблица.Ссылка          КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ЧекЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Таблица.Ссылка          КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка          КАК ПередачаВРегистр2ЕГАИС,
	|	Неопределено            КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено            КАК ПередачаВРегистр2ЕГАИС,
	|	Таблица.Ссылка          КАК ВозвратИзРегистра2ЕГАИС,
	|	Неопределено            КАК АктСписанияЕГАИС,
	|	Неопределено            КАК АктПостановкиНаБалансЕГАИС,
	|	Неопределено            КАК ТТНВходящаяЕГАИС,
	|	Неопределено            КАК ТТНИсходящаяЕГАИС,
	|	Неопределено            КАК ЧекЕГАИС,
	|	Неопределено            КАК ЧекЕГАИСВозврат,
	|	Статусы.Статус          КАК Статус,
	|	Таблица.Дата            КАК Дата
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|		ПО Статусы.Документ = Таблица.Ссылка
	|ГДЕ
	|	Таблица.ДокументОснование = &ДокументОснование
	|	И Не Таблица.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого ИмяДокумента Из ИменаДокументов Цикл
			Если ЗначениеЗаполнено(Выборка[ИмяДокумента]) Тогда
				
				Значение = Новый Структура;
				Значение.Вставить("Ссылка", Выборка[ИмяДокумента]);
				Значение.Вставить("Статус", Выборка.Статус);
				Значение.Вставить("Дата",   Выборка.Дата);
				
				ВозвращаемоеЗначение[ИмяДокумента].Добавить(Значение);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверить сопоставление классификаторов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   *НеСопоставленныеТовары - Строка - Адрес по временном хранилище.
//
Функция ПроверитьСопоставлениеКлассификаторов(ДокументОснование, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьНеСопоставленныеТовары",      Ложь);
	ВозвращаемоеЗначение.Вставить("ЕстьНеСопоставленныеОрганизации", Ложь);
	ВозвращаемоеЗначение.Вставить("НеСопоставленныеТовары",          Неопределено);
	
	ИмяТаблицы = "Документ" + "." + ДокументОснование.Метаданные().Имя + "." + "Товары";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки           КАК НомерСтроки,
	|	ТабличнаяЧасть.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ПустаяНоменклатура                  КАК Номенклатура,
	|	&ПустаяХарактеристика                КАК Характеристика,
	|	&ПустаяСерия                         КАК Серия
	|ИЗ
	|	ИмяТаблицы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументОснование
	|	И ТабличнаяЧасть.Номенклатура = &ПустаяНоменклатура
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	
	Запрос.УстановитьПараметр("ДокументОснование",    ДокументОснование);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",   ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяСерия",          ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	НеСопоставленныеТовары = Запрос.Выполнить().Выгрузить();
	ВозвращаемоеЗначение.ЕстьНеСопоставленныеТовары = НеСопоставленныеТовары.Количество() > 0;
	ВозвращаемоеЗначение.ЕстьНеСопоставленныеОрганизации = Ложь;
	
	Если ВозвращаемоеЗначение.ЕстьНеСопоставленныеТовары
		И УникальныйИдентификатор <> Неопределено Тогда
		ВозвращаемоеЗначение.НеСопоставленныеТовары = ПоместитьВоВременноеХранилище(НеСопоставленныеТовары, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверить сопоставление классификаторов
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   *НеСопоставленныеТовары - Строка - Адрес по временном хранилище.
//
Функция ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(ДокументОснование, УникальныйИдентификатор) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьНеСопоставленныеТовары", Ложь);
	РезультатПроверки.Вставить("НеСопоставленныеТовары", "");
	
	ИнтеграцияЕГАИСПереопределяемый.ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(
		РезультатПроверки,
		ДокументОснование,
		УникальныйИдентификатор);
		
	Возврат РезультатПроверки;
	
КонецФункции

// Записывает данные при отказе ЕГАИС
//
// Параметры:
//  ДокументСсылка       - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ
//  ИдентификаторЗапроса - Строка - Идентификатор строки.
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ДокументСсылка) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ДокументСсылка);
	
КонецПроцедуры

// Функция проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН,
//  ПоступлениеТоваров - ДокументСсылка, ДокументОбъект - проверяемое поступление товаров.
//
// Возвращаемое значение:
//  Булево - Истина, если есть расхождения, иначе - Ложь.
//
Функция ЕстьРасхожденияМеждуДокументомПоступленияИТТНЕГАИС(Знач ДокументСсылка, Знач ДокументПоступления) Экспорт
	
	Результат = Ложь;
	ИнтеграцияЕГАИСПереопределяемый.ПриОпределенииРасхожденийСТТНВходящейЕГАИС(ДокументСсылка, ДокументПоступления, Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру отбора для выбора документа поступления.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - Документ ТТН ЕГАИС (входящая).
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация.
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС     - Торговый объект.
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС  - Контрагент.
//
Функция СтруктураОтбораДляВыбораДокументаПоступления(ДокументСсылка) Экспорт
	
	РеквизитыТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументСсылка,
		"Организация, ТорговыйОбъект, Грузоотправитель");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация",    РеквизитыТТН.Организация);
	СтруктураОтбора.Вставить("ТорговыйОбъект", РеквизитыТТН.ТорговыйОбъект);
	СтруктураОтбора.Вставить("Контрагент",     Неопределено);
	
	Если ЗначениеЗаполнено(РеквизитыТТН.Грузоотправитель) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КлассификаторОрганизацийЕГАИС.Контрагент
		|ИЗ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|ГДЕ
		|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка
		|	И КлассификаторОрганизацийЕГАИС.Сопоставлено
		|");
		Запрос.УстановитьПараметр("Ссылка", РеквизитыТТН.Грузоотправитель);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураОтбора.Контрагент = Выборка.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

// Записать связь документа поступления и ТТН ЕГАИС (входящая).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - ТТН ЕГАИС (входящая).
//  ДокументПоступления - ОпределяемыйТип.ОснованиеТТНВходящаяЕГАИС - Документ поступления.
//
Процедура ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ДокументСсылка, ДокументПоступления) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.ДокументОснование = ДокументПоступления;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Заполняет реквизиты "Контрагент" и "Торговый объект" элемента справочника "Организации ЕГАИС"
// 
// Параметры:
//   ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - сопоставляемый элемент классификатора
//   Контрагент       - ОпределяемыйТип.ОрганизацияКонтрагентГосИС     - сопоставляемый контрагент
//   ТорговыйОбъект   - ОпределяемыйТип.ТорговыйОбъектЕГАИС            - сопоставляемый торговый объект
Процедура ЗаписатьСвязьКонтрагентаПартнераИОрганизацииЕГАИС(ОрганизацияЕГАИС, Контрагент, ТорговыйОбъект) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		СправочникОбъект = ОрганизацияЕГАИС.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		СправочникОбъект.Заблокировать();
		
		СправочникОбъект.Контрагент     = Контрагент;
		СправочникОбъект.ТорговыйОбъект = ТорговыйОбъект;
		
		СправочникОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Проверка константы "Разрешать продажу алкогольной продукции без сопоставления ЕГАИС"
// 
// Возвращаемое значение:
//  Булево - возвращает значение константы
//
Функция РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС() Экспорт
	
	Разрешать = Ложь;
	ИнтеграцияЕГАИСПереопределяемый.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС(Разрешать);
	Возврат Разрешать;
	
КонецФункции

#Область РеквизитыОбъекта

// см. ОбщегоНазначения.ЗначениеРеквизитаОбъектов()
//
Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита, ВыбратьРазрешенные);
	
КонецФункции

#КонецОбласти

Функция УчитываемыеВидыМаркируемойПродукции() Экспорт
	
	ВидыПродукции = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ВидыПродукции);
	
КонецФункции

#КонецОбласти
