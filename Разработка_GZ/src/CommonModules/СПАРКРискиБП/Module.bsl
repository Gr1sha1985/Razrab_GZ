////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРКРиски".
// ОбщийМодуль.СПАРКРиски.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет кэш индексов сервиса 1СПАРК по настройкам отчета НадежностьДебиторовСПАРКРискиБП.
// Кэш хранится в регистре сведений "ИндексыСПАРКРиски".
// В вариантах настроек СКД должен быть вариант "СписокКонтрагентовДляОбновления" - 
// см. пример в схеме компоновки отчета НадежностьДебиторовСПАРКРискиБП
//
// Параметры:
//  ПараметрыОтчета	 - Структура - параметры выполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в модуле формы отчета)
//  АдресХранилища	 - Строка - адрес во временном хранилище, куда помещается структура результата  
//
Процедура ОбновитьИндексыСПАРКПоНастройкамОтчета(ПараметрыОтчета, АдресХранилища) Экспорт

	Результат = Новый ТабличныйДокумент;
	
	// Проверка включения использования сервиса.
	Если Не СПАРКРиски.ИспользованиеСПАРКРискиВключено() Тогда
		
		Макет = Отчеты.НадежностьДебиторовСПАРКРискиБП.ПолучитьМакет("ОписаниеОшибок");
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ИмяОбласти = "ИспользованиеСервисаОтключено";
		Иначе
			ИмяОбласти = "ИспользованиеСервисаОтключеноОбычныйПользователь";
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Результат.Вывести(Область);
		
		ПоместитьВоВременноеХранилище(Новый Структура("Результат,ПараметрыОтчета,Успешно", Результат, ПараметрыОтчета, Ложь), АдресХранилища);
		Возврат;

	КонецЕсли;
	
	// В модели сервиса вначале необходимо проверить, подключена ли услуга, или нет.
	// В коробке такая проверка не реализована.
	// Если услуга не подключена, то выдать ошибку и не выполнять никаких запросов.
	УслугаПодключена = ИнтернетПоддержкаПользователей.УслугаПодключена(
		СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска());

	РезультатВызоваВебСервиса = СервисСПАРКРиски.НовыйРезультатВызоваСервиса();

	Если УслугаПодключена Тогда

		// Сформируем запрос и определим, индексы каких контрагентов необходимо обновить.
		// В схеме компоновки данных предусмотрен отдельный вариант настроек
		// для выборки контрагентов для обновления индексов СПАРК. 
		ЕстьОшибки = Ложь;
		КонтрагентыДляОбновления = Новый ТаблицаЗначений;
		ВариантНастроекПроверкиКонтрагентов = Неопределено;
		Для Каждого ТекущийВариантНастроек Из ПараметрыОтчета.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			Если ТекущийВариантНастроек.Имя = "СписокКонтрагентовДляОбновления" Тогда
				ВариантНастроекПроверкиКонтрагентов = ТекущийВариантНастроек;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВариантНастроекПроверкиКонтрагентов <> Неопределено Тогда

			КомпоновщикНастроекПроверкаКонтрагентов = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроекПроверкаКонтрагентов.ЗагрузитьНастройки(ВариантНастроекПроверкиКонтрагентов.Настройки);
			КомпоновщикНастроекПроверкаКонтрагентов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыОтчета.СхемаКомпоновкиДанных));
			
			// Вставить необходимые настройки:
			//  Параметры:
			//	- параметры отчета, установленные в структуре ПараметрыОтчета - см. ПодготовитьПараметрыОтчетаНаСервере() 
			//  - Срок годности - текущая дата минус 12 часов;
			//	Отборы:
			//  - Организация - установленная на форме из параметров отчета;
			//  - Контрагент  - копируется из настроек вызвавшего отчета;
			
			Для Каждого ПараметрОтчета Из ПараметрыОтчета Цикл
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
					КомпоновщикНастроекПроверкаКонтрагентов, 
					ПараметрОтчета.Ключ,
					ПараметрОтчета.Значение);
			КонецЦикла;	
											
			СрокГодности = ТекущаяДатаСеанса() - 12*60*60;
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроекПроверкаКонтрагентов, "СрокГодности", СрокГодности);
							
			БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроекПроверкаКонтрагентов);
	
			// Скопируем отбор по контрагенту из основных настроек в настройки запроса для обновления индексов
			СкопироватьОтборКомпоновкиДанных(
				КомпоновщикНастроекПроверкаКонтрагентов.Настройки.Отбор,
				ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор,
				"Контрагент");
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				ПараметрыОтчета.СхемаКомпоновкиДанных,
				КомпоновщикНастроекПроверкаКонтрагентов.ПолучитьНастройки(),
				,
				,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(КонтрагентыДляОбновления);
			
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
			
			Если (ТипЗнч(КонтрагентыДляОбновления) = Тип("ТаблицаЗначений"))
					И (КонтрагентыДляОбновления.Количество() > 0) Тогда
				// Обновить данные напрямую.
				МассивОписанийКонтрагентов = Новый Массив;
				Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
					КонтрагентОбластьДанных = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				Иначе
					КонтрагентОбластьДанных = -1;
				КонецЕсли;
				Для Каждого ТекущийКонтрагент Из КонтрагентыДляОбновления Цикл
					ОписаниеКонтрагента = СПАРКРиски.НовыйОписаниеКонтрагента();
					ОписаниеКонтрагента.ОбластьДанных = КонтрагентОбластьДанных;
					ОписаниеКонтрагента.Контрагент    = ТекущийКонтрагент.Контрагент;
					ОписаниеКонтрагента.ИНН           = СокрЛП(ТекущийКонтрагент.ИНН);
					МассивОписанийКонтрагентов.Добавить(ОписаниеКонтрагента);
					// Получение данных "пачками" по 1000 штук (в веб-сервис будет отправляться по 100 штук).
					Если МассивОписанийКонтрагентов.Количество() >= 1000 Тогда
						РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
							КонтрагентОбластьДанных,
							МассивОписанийКонтрагентов); // Это не фоновое задание.
						МассивОписанийКонтрагентов = Новый Массив;
						Если РезультатВызоваВебСервиса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка() Тогда
							// Нет ошибок, можно продолжать.
						Иначе
							ЕстьОшибки = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Если в процессе получения "пачек" была ошибка, то не вызывать "СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов",
				//  чтобы в РезультатВызоваВебСервиса остался заполнен ВидОшибки.
				Если НЕ ЕстьОшибки Тогда
					Если МассивОписанийКонтрагентов.Количество() > 0 Тогда
						РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
							КонтрагентОбластьДанных,
							МассивОписанийКонтрагентов); // Это не фоновое задание.
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если РезультатВызоваВебСервиса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка() Тогда
				// Нет ошибок, можно продолжать.
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;

		КонецЕсли;

	Иначе
		РезультатВызоваВебСервиса.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит);
		РезультатВызоваВебСервиса.Вставить("СообщениеОбОшибке", НСтр("ru = 'Услуга не подключена.'"));
		РезультатВызоваВебСервиса.Вставить("ИнформацияОбОшибке", СтрШаблон(
			НСтр("ru = 'Не удалось сформировать отчет по индексам 1СПАРК Риски.
				|Услуга с идентификатором %1 не подключена.'"),
			СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска()));
		ЕстьОшибки = Истина;
	КонецЕсли;

	Если ЕстьОшибки Тогда
		
		Макет = Отчеты.НадежностьДебиторовСПАРКРискиБП.ПолучитьМакет("ОписаниеОшибок");
		ИмяОбласти = "НеизвестнаяОшибка";

		Если РезультатВызоваВебСервиса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса Тогда
			ИмяОбласти = "СервисНедоступен";
		ИначеЕсли РезультатВызоваВебСервиса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена Тогда
			Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
				ИмяОбласти = "ИППНеПодключена";
			Иначе
				ИмяОбласти = "ИППНеПодключенаОбычныйПользователь";
			КонецЕсли;
		ИначеЕсли РезультатВызоваВебСервиса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения Тогда
			Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
				ИмяОбласти = "ОшибкаПодключения";
			Иначе
				ИмяОбласти = "ОшибкаПодключенияОбычныйПользователь";
			КонецЕсли;
		ИначеЕсли РезультатВызоваВебСервиса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаАутентификации Тогда
			Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
				ИмяОбласти = "ОшибкаАутентификации";
			Иначе
				ИмяОбласти = "ОшибкаАутентификацииОбычныйПользователь";
			КонецЕсли;
		ИначеЕсли РезультатВызоваВебСервиса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит Тогда
			// Доступна интернет-поддержка, но не подключен сервис "1СПАРК Риски".
			// Не считаем это критичной ошибкой - данная ситуация будет обработана основным отчетом. 
			ПараметрыОтчета.Вставить("СервисНеПодключен", Истина);
			ПоместитьВоВременноеХранилище(Новый Структура("Результат,ПараметрыОтчета,Успешно", Результат, ПараметрыОтчета, Истина), АдресХранилища);
			Возврат;
		КонецЕсли;

		Если ИмяОбласти <> "НеизвестнаяОшибка" Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			Результат.Вывести(Область);
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(Новый Структура("Результат,ПараметрыОтчета,Успешно", Результат, ПараметрыОтчета, Ложь), АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат,ПараметрыОтчета,Успешно", Результат, ПараметрыОтчета, Истина), АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

// Процедура копирует элементы отбора компоновки данных из источника в приемник добавлением к существующим элементам.
// Копируются только отборы по полям, имена которых перечислены в ИменаПолей.
//
// Параметры:
//  ОтборПриемник	 - ОтборКомпоновкиДанных - отбор-получатель
//  ОтборИсточник	 - ОтборКомпоновкиДанных - отбор, из которого копируются элементы отбора
//  ИменаПолей		 - Строка - Список полей отбора через запятую
//
Процедура СкопироватьОтборКомпоновкиДанных(ОтборПриемник, ОтборИсточник, ИменаПолей) 
	
	МассивСтрок = СтрРазделить(ИменаПолей, ",", Ложь);
	МассивПолей = Новый Массив;
	
	Для Каждого ИмяПоля Из МассивСтрок Цикл
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоля));
	КонецЦикла;	
	
	Для Каждого Элемент Из ОтборИсточник.Элементы Цикл
				
		ТипЭлемента  = ТипЗнч(Элемент);
		
		Если ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных")
			И МассивПолей.Найти(Элемент.ЛевоеЗначение) = Неопределено Тогда
			Продолжить; 
		КонецЕсли;
		
		НовыйЭлемент = ОтборПриемник.Элементы.Добавить(ТипЭлемента);
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		Если ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборКомпоновкиДанных(НовыйЭлемент, Элемент, ИменаПолей); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
