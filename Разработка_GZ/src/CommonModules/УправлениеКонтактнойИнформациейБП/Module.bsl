////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация Бухгалтерии предприятия".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает адрес в виде структуры полей. Если адрес нужного вида не задан, то будет возвращена структура с пустыми полями.
//
// Параметры:
//    Ссылка                  - СправочникСсылка - Ссылка на объект, который содержит контактную информацию.
//    ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации, структуру которого нужно получить.
//    НаименованиеВключаетСокращение - Булево - признак включение в наименования элемента адреса его сокращенного представления
//
// Возвращаемое значение:
//  Структура - Структура со значениями полей адреса.
//
Функция АдресСтруктурой(Ссылка, ВидКонтактнойИнформации, Период = '00010101', НаименованиеВключаетСокращение = Истина) Экспорт
	
	Адрес = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка),
		Перечисления.ТипыКонтактнойИнформации.Адрес, 
		ВидКонтактнойИнформации,
		Период);
	
	Если Адрес.Количество() <> 0 Тогда
		ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", НаименованиеВключаетСокращение);
		СтруктураАдреса = СтруктураАдреса(Адрес[0].Значение, ДополнительныеПараметры);
		СтруктураАдреса.ЗначенияПолей = Адрес[0].ЗначенияПолей;
		СтруктураАдреса.ЗначениеJSON  = Адрес[0].Значение;
	Иначе
		СтруктураАдреса = НовыйСтруктураАдреса();
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Возвращает код региона по переданному адресу.
//
// Параметры:
//    Адрес - Строка - Значения полей контактной информации в формате XML.
//
// Возвращаемое значение:
//    Число - код региона.
//
Функция КодРегионаПоАдресу(Адрес) Экспорт
	
	Попытка
		Регион = РаботаСАдресами.РегионАдресаКонтактнойИнформации(Адрес);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Регион) Тогда
		КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(Регион);
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			Возврат КодРегиона;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Определяет, соответствует ли номер региона городу федерального значения.
// Города федерального значения перечислены в статье 65 Конституции РФ
// Также статусом города федерального значения наделен город Байконур 
// (Соглашение между Российской Федерацией и Республикой Казахстан о статусе города Байконур,
// порядке формирования и статусе его органов исполнительной власти (Москва, 23 декабря 1995 г.))
//
// Параметры:
//  КодРегиона	 - Строка - двухсимволный код региона в соответствии с ФИАС
// 
// Возвращаемое значение:
//  Булево - Истина, если код региона соответствует городу федерального значения.
//
Функция ГородФедеральногоЗначения(КодРегиона) Экспорт
	
	Возврат КодРегиона = "77"  // Москва
		Или КодРегиона = "78"  // Санкт-Петербург
		Или КодРегиона = "92"  // Севастополь
		Или КодРегиона = "99"; // Байконур
	
КонецФункции

// Определяет нижний уровень населенного пункта в адресе.
//
// Параметры:
//  ЗначенияПолей - Строка - XML контактной информации или пары ключ-значение.
// 
// Возвращаемое значение:
//  Строка - наименование города или иного населенного пункта.
//
Функция НаселенныйПунктПоАдресу(ЗначениеАдресаJSON) Экспорт
	
	ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Ложь);
	
	СтруктураПолейАдреса = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдресаJSON, ДополнительныеПараметры);
	
	ШаблонНаименованияГорода = НСтр("ru = '%1. %2'");
	
	Если СтруктураПолейАдреса.Свойство("Город") 
		И ЗначениеЗаполнено(СтруктураПолейАдреса.Город) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименованияГорода,
					СтруктураПолейАдреса.ГородСокращение, СтруктураПолейАдреса.Город);
	
	ИначеЕсли СтруктураПолейАдреса.Свойство("НаселенныйПункт") 
		И ЗначениеЗаполнено(СтруктураПолейАдреса.НаселенныйПункт) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименованияГорода,
					СтруктураПолейАдреса.НаселенныйПунктСокращение, СтруктураПолейАдреса.НаселенныйПункт);
	
	ИначеЕсли СтруктураПолейАдреса.Свойство("КодРегиона")
		И СтруктураПолейАдреса.Свойство("Регион")
		И ГородФедеральногоЗначения(СтруктураПолейАдреса.КодРегиона) Тогда
		
		// Города федерального значения и приравненные к ним
		Возврат СтруктураПолейАдреса.Регион;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;

КонецФункции

// Предназначена для получения контактной информации объекта на дату.
//
// Параметры:
//    Объект                  - Ссылка - владелец контактной информации.
//    ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, который нужно получить.
//    Дата                    - Дата - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если владелец хранит историю изменений, то при несоответствии параметра
//                              дате будет вызвано исключение.
//
// Возвращаемое значение:
//    Структура - результат:
//        * Объект        - Ссылка - владелец КИ.
//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
//        * ЗначенияПолей - Строка - данные значений полей XML.
//        * Значение      - Строка - данные значений полей JSON.
//        * Представление - Строка - представление КИ.
//
Функция КонтактнаяИнформацияНаДату(Объект, ВидКонтактнойИнформации, Дата = Неопределено) Экспорт
	
	Объекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект);
	ВидыКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидКонтактнойИнформации);
	
	КонтактнаяИнформация = КонтактнаяИнформацияОбъектовНаДату(Объекты, , ВидыКонтактнойИнформации, Дата);
	Результат = Новый Структура;
	Для Каждого Колонка Из КонтактнаяИнформация.Колонки Цикл
		Результат.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, КонтактнаяИнформация[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Предназначена для получения контактной информации на дату для нескольких объектов.
//
// Параметры:
//    МассивОбъектов - Массив - владельцы контактной информации.
//    ТипыКИ         - Массив - необязательный, используется, если не задан все типы.
//    ВидыКИ         - Массив - необязательный, используется, если не задан все виды.
//    Дата           - Дата   - необязательный, дата с которой действует запись контактной информации,
//                              используется при хранении истории изменения контактной информации.
//                              Если владелец хранит историю изменений, то при несоответствии параметра
//                              дате будет вызвано исключение.
//
// Возвращаемое значение:
//    Таблица значений - результат. Колонки:
//        * Объект        - Ссылка - владелец КИ.
//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
//        * ЗначенияПолей - Строка - данные значений полей XML.
//        * Значение      - Строка - данные значений полей JSON.
//        * Представление - Строка - представление КИ.
//
Функция КонтактнаяИнформацияОбъектовНаДату(МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СвязанныеАдресаДляИстории = СвязанныеАдресаДляПолученияИсторическихЗначений();
	
	ВидыКИДляЗапроса = МассивВидовКонтактнойИнформацииДляЗапроса(ВидыКИ, СвязанныеАдресаДляИстории);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов,
		ТипыКИ,
		ВидыКИДляЗапроса);
	
	ЗначенияИсторииКонтактнойИнформации = ЗначенияИсторииКонтактнойИнформацииОбъектов(МассивОбъектов, ВидыКИДляЗапроса, Дата);
	
	// Если для адреса есть связанный адрес (см. СвязанныеАдресаДляПолученияИсторическихЗначений()),
	// то нужно заменить его значение на историческое значение связанного адреса,
	// если текущее значение адреса совпадает с текущим значением связанного адреса.
	// Например, в форме редактирования Организации можно указать, что фактический адрес совпадает с юридическим.
	// Для фактического адреса история не ведется, поэтому, если актуальные значения фактического и юридического адреса совпадают,
	// то в качестве значения фактического адреса на дату нужно использовать значение юридического адреса на дату.
	ЗаменитьЗначенияДляСвязанныхАдресовНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации, СвязанныеАдресаДляИстории);
	
	// Для всех адресов теперь нужно заменить значение на историческое, если оно есть.
	// Заменять в предыдущем цикле нельзя, т.к. важно сохранить актуальное значение связанного адреса.
	ЗаменитьЗначенияКонтактнойИнформацииНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации);
	
	// Поле Значение может быть не заполнено, если адрес не редактировался в БСП 3.0.1.
	// В этом случае нужно заполнить его из поля ЗначенияПолей.
	ЗаполнитьПолеЗначениеЕслиПустое(КонтактнаяИнформация);
	
	// Т.к. мы дополнили виды контактной информации связанными адресами, а их могло не быть
	// в списке требуемых видов КИ, то нам нужно их удалить из результата.
	ЗапрашиваемыеВидыКИ = МассивВидовКонтактнойИнформации(ВидыКИ);
	ОставитьТолькоЗапрашиваемыеВидыКонтактнойИнформации(КонтактнаяИнформация, ЗапрашиваемыеВидыКИ);
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

// Возвращает значения полей по виду адреса из ТаблицаКонтактнойИнформации.
// ТаблицаКонтактнойИнформации должна быть предварительно получена с помощью УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату.
// Если в таблице есть несколько значений для данного вида контактной информации, то будет возвращено первое значение.
//
// Параметры:
//  ТаблицаКонтактнойИнформации - ТаблицаЗначений - Таблица, которую возвращает функция УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату.
//  ВидКонтактнойИнформации     - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, для которого нужно определить значения полей.
//
// Возвращаемое значение:
//    Строка - XML значения полей.
//
Функция ЗначенияJSONВидаКонтактнойИнформации(ТаблицаКонтактнойИнформации, ВидКонтактнойИнформации) Экспорт
	
	ДанныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Вид", ВидКонтактнойИнформации));
	Если ДанныеСтроки.Количество() > 0 Тогда
		Возврат ДанныеСтроки[0].Значение;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция - Возвращает массив дат, когда был изменен адрес. Данные берутся из истории адресов.
//
// Параметры:
//  Компания - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - объекты, откуда нужно получить историю.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - массив данных с типом "Дата".
//
Функция ДатыИзмененияАдреса(Компания) Экспорт
	
	Результат = Новый Массив;
	
	Если Не (ЗначениеЗаполнено(Компания) И ОбщегоНазначения.СсылкаСуществует(Компания)) Тогда
		Возврат Новый ФиксированныйМассив(Результат);
	КонецЕсли;
	
	Если ТипЗнч(Компания)<> Тип("СправочникСсылка.Организации")
		И ТипЗнч(Компания)<> Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат Новый ФиксированныйМассив(Результат);
	КонецЕсли;
	
	ИсторияАдреса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Компания, "ИсторияКонтактнойИнформации");
	Выборка = ИсторияАдреса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Период);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Подготовливает историю контактной информации объекта к записи.
// Заполняет поля Значение и ЗначенияПолей при необходимости.
//
// Параметры:
//    Объект - СправочникОбъект - Объект, содержащий контактную информацию.
//
Процедура ПередЗаписьюИсторииКонтактнойИнформацииОбъекта(Объект) Экспорт
	
	Если Объект.ИсторияКонтактнойИнформации.Количество() = 1 Тогда
		Объект.ИсторияКонтактнойИнформации.Очистить();
	ИначеЕсли Объект.ИсторияКонтактнойИнформации.Количество() > 1 Тогда
		
		ЗаполнитьЗначенияJSONИсторииКонтактнойИнформации(Объект.ИсторияКонтактнойИнформации);
		
		ЗаполнитьЗначенияXMLИсторииКонтактнойИнформации(Объект.ИсторияКонтактнойИнформации);
		
		УстановитьАктуальноеЗначениеИсторииКонтактнойИнформации(Объект);
		
		Объект.ИсторияКонтактнойИнформации[0].Период = '00010101';
		ТаблицаИстории = Объект.ИсторияКонтактнойИнформации.Выгрузить(, "Период,Вид");
		ТаблицаИстории.Свернуть("Период,Вид");
		Если ТаблицаИстории.Количество() <> Объект.ИсторияКонтактнойИнформации.Количество() Тогда
			ТекстСообщения = НСтр("ru='В истории контактной информации есть записи с одинаковым периодом и видом.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует значения контактной информации объекта одного вида в значения другого.
// Тип контактной информации источника и приемника должен быть одинаков.
//
// Параметры:
//    КонтактнаяИнформация - ТабличнаяЧасть - табличная часть, которая содержит сведения о контактной информации.
//    Источник             - СправочникСсылка.ВидКонтактнойИнформации - вид, значения которого будут выступать источником для копирования.
//    Приемник             - СправочникСсылка.ВидКонтактнойИнформации - вид, значения которого будут выступать приемником для копирования.
//
Процедура СкопироватьКонтактнуюИнформацию(КонтактнаяИнформация, Источник, Приемник) Экспорт
	
	ЗаписиИсточника = ЗаписиКонтактнойИнформации(КонтактнаяИнформация, Источник);
	
	Если Не ЗначениеЗаполнено(ЗаписиИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиПриемника = ЗаписиКонтактнойИнформации(КонтактнаяИнформация, Приемник);
	
	Для Каждого Запись Из ЗаписиПриемника Цикл
		КонтактнаяИнформация.Удалить(Запись);
	КонецЦикла;
	
	Для Каждого Запись Из ЗаписиИсточника Цикл
		
		НоваяЗапись = КонтактнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		
		Если ЗначениеЗаполнено(НоваяЗапись.Вид) Тогда
			НоваяЗапись.Вид = Приемник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяЗапись.ВидДляСписка) Тогда
			НоваяЗапись.ВидДляСписка = Приемник;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сравнивает адреса.
// Параметры:
//   Адрес1 - Строка, ОбъектXDTO - XDTO объект или строка XML контактной информации.
//   Адрес2 - Строка, ОбъектXDTO - XDTO объект или строка XML контактной информации.
//
// Возвращаемое значение:
//  Булево - Истина, если адреса совпадают, Ложь - если нет
//
Функция СравнитьАдреса(Адрес1, Адрес2) Экспорт
	
	ДополнительныеПараметры =  Новый Структура("НаименованиеВключаетСокращение", Ложь);
	СведенияОбАдресе1 = РаботаСАдресами.СведенияОбАдресе(Адрес1, ДополнительныеПараметры);
	СведенияОбАдресе2 = РаботаСАдресами.СведенияОбАдресе(Адрес2, ДополнительныеПараметры);
	
	Возврат ОбщегоНазначения.ДанныеСовпадают(СведенияОбАдресе1, СведенияОбАдресе2);
	
КонецФункции

// Сравнивает населенные пункты.
// Параметры:
//   Адрес1 - Строка, ОбъектXDTO - XDTO объект или строка XML контактной информации.
//   Адрес2 - Строка, ОбъектXDTO - XDTO объект или строка XML контактной информации.
//
// Возвращаемое значение:
//  Булево - Истина, если населенные пункты совпадают, Ложь - если нет
//
Функция СравнитьНаселенныеПункты(Адрес1, Адрес2) Экспорт
	
	КлючНаселенногоПункта = "Страна, КодСтраны, КодРегиона, Регион, Округ, Район, Город, ВнутригородскойРайон, НаселенныйПункт";
	НаселенныйПункт1 = Новый Структура(КлючНаселенногоПункта);
	НаселенныйПункт2 = Новый Структура(КлючНаселенногоПункта);
	
	ДополнительныеПараметры =  Новый Структура("НаименованиеВключаетСокращение", Ложь);
	
	ЗаполнитьЗначенияСвойств(НаселенныйПункт1, РаботаСАдресами.СведенияОбАдресе(Адрес1, ДополнительныеПараметры));
	ЗаполнитьЗначенияСвойств(НаселенныйПункт2, РаботаСАдресами.СведенияОбАдресе(Адрес2, ДополнительныеПараметры));
	
	Если ОбщегоНазначенияБП.ДанныеБезУчетаРегистраСовпадают(НаселенныйПункт1, НаселенныйПункт2) Тогда
		НаселенныеПунктыСовпадают = Истина;
	Иначе
		КодыАдреса1 = АдресныйКлассификатор.КодыАдреса(Адрес1, "Сервис1С");
		КодыАдреса2 = АдресныйКлассификатор.КодыАдреса(Адрес2, "Сервис1С");
		НаселенныеПунктыСовпадают = Лев(КодыАдреса1.ОКТМО, 6) = Лев(КодыАдреса2.ОКТМО, 6)
			И Не ПустаяСтрока(КодыАдреса1.ОКТМО)
			И Не ПустаяСтрока(КодыАдреса2.ОКТМО);
	КонецЕсли;
	
	Возврат НаселенныеПунктыСовпадают;
	
КонецФункции

#Область АдресаДоставки

// Возвращает упорядоченный список адресов объекта по приоритету (см. ПриоритетыАдресов()).
//
// Параметры:
//   СсылкаНаОбъект - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Владелец контактной информации
//   Дата           - Дата - Необязательный (дата, с которой действует запись контактной информации)
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция СписокАдресовОбъекта(СсылкаНаОбъект, Дата = Неопределено) Экспорт

	СписокАдресов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат СписокАдресов;
	КонецЕсли;
	
	ТипКонтактнойИнформации = Новый Массив;
	ТипКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Объекты = Новый Массив();
	Объекты.Добавить(СсылкаНаОбъект);
	Адреса = КонтактнаяИнформацияОбъектовНаДату(Объекты, ТипКонтактнойИнформации, , Дата);
	
	СортироватьАдресаПоПриоритету(Адреса);
	
	Для Каждого Адрес Из Адреса Цикл
		СписокАдресов.Добавить(Адрес.Представление, СтрШаблон("%1: %2", Адрес.Вид, Адрес.Представление));
	КонецЦикла;
	
	Возврат СписокАдресов;
	
КонецФункции

#КонецОбласти

#Область ИсторияКонтактнойИнформации

// Устанавливает актуальное значение в истории адресов после того, как изменился адрес на форме.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма, которая содержит контактную информацию.
//  Элемент	 - ЭлементФормы - Элемент формы, который содержит контактную информацию.
//
Процедура УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	КоличествоЗаписей = Объект.ИсторияКонтактнойИнформации.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ДанныеСтроки = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(Форма, Элемент.Имя);
		Если ДанныеСтроки <> Неопределено Тогда
			Объект.ИсторияКонтактнойИнформации.Сортировать("Период");
			АктуальнаяЗаписьИстории = Объект.ИсторияКонтактнойИнформации[КоличествоЗаписей - 1];
			ЗаполнитьЗначенияСвойств(АктуальнаяЗаписьИстории, ДанныеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет поле ЗначениеПолей по данным JSON. Используется при записи объекта
// для автоматического заполнения ЗначенияПолей, т.к. в форме ЗначенияПолей сейчас не заполняются,
// но требуются для обратной совместимости.
//
// Параметры:
//  ИсторияКонтактнойИнформации - ТабличнаяЧасть - Табличная часть, содержащая историю контактной информации.
//
Процедура ЗаполнитьЗначенияXMLИсторииКонтактнойИнформации(ИсторияКонтактнойИнформации) Экспорт
	
	Для Каждого СтрокаИстории Из ИсторияКонтактнойИнформации Цикл
		Если ЗначениеЗаполнено(СтрокаИстории.Значение)
			И Не ЗначениеЗаполнено(СтрокаИстории.ЗначенияПолей) Тогда
			
			СтрокаИстории.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
				СтрокаИстории.Значение, СтрокаИстории.Представление, СтрокаИстории.Вид);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет поле Значение по данным XML, если оно не заполнено. Вызывается перед записью для того,
// что бы привести значения в контактной информации к новому виду с поддержкой JSON.
//
// Параметры:
//  ИсторияКонтактнойИнформации - ТабличнаяЧасть - Табличная часть, содержащая историю контактной информации.
//
Процедура ЗаполнитьЗначенияJSONИсторииКонтактнойИнформации(ИсторияКонтактнойИнформации) Экспорт
	
	Для Каждого СтрокаИстории Из ИсторияКонтактнойИнформации Цикл
		Если ЗначениеЗаполнено(СтрокаИстории.ЗначенияПолей)
			И Не ЗначениеЗаполнено(СтрокаИстории.Значение) Тогда
			
			СтрокаИстории.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				СтрокаИстории.ЗначенияПолей, СтрокаИстории.Вид);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает текст ссылки по которой осуществляется переход на карту,
// в виде форматированной строки (с картинкой)
//
Функция СтрокаСсылкиПоказатьНаКарте() Экспорт
	
	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(БиблиотекаКартинок.Пин);
	СоставСтроки.Добавить(НСтр("ru = 'Показать на карте'"));
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);
	
КонецФункции

// Функция - Проверяет совпадение видов адресов объекта по представлению
//
// Параметры:
//  Компания	 - СправочникСсылка.Организация, СправочникСсылка.Контрагент - организация или контрагент, владелец адреса
//  ВидАдреса1	 - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации организации или контрагента
//  ВидАдреса2	 - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации организации или контрагента
// 
// Возвращаемое значение:
//  Булево - Истина, если адреса совпадают, Ложь - если нет
//
Функция АдресаСовпадают(Компания, ВидАдреса1, ВидАдреса2) Экспорт
	
	Если Не ЗначениеЗаполнено(Компания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Компания)<> Тип("СправочникСсылка.Организации")
		И ТипЗнч(Компания)<> Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Объекты = Новый Массив;
	Объекты.Добавить(Компания);
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(ВидАдреса1);
	ВидыКИ.Добавить(ВидАдреса2);
	
	ТекущиеАдреса = КонтактнаяИнформацияОбъектовНаДату(Объекты,, ВидыКИ);
	Адрес1 = ТекущиеАдреса.Найти(ВидАдреса1, "Вид");
	Адрес2 = ТекущиеАдреса.Найти(ВидАдреса2, "Вид");
	
	// Если фактический и юридический адрес совпадают, то адрес доставки грузополучателя берем из истории юр. адресов.
	Если Адрес1 <> Неопределено И Адрес2 <> Неопределено 
		И СокрЛП(Адрес1.Представление) = СокрЛП(Адрес2.Представление) Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура - Если фактический и почтовый адреса совпадают с текущим юр. адресом, то заменяет их на юр. адрес из истории
//
// Параметры:
//  Компания			 - СправочникСсылка.Организация, СправочникСсылка.Контрагенты - компания, контактные данные которого проверяем
//  КонтактнаяИнформация - ТаблицаЗначений - таблица значения, полученная с помощью УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату()
//
Процедура ЗаменитьАдресаНаЮрИзИстории(Компания, КонтактнаяИнформация) Экспорт
	
	Если Не ЗначениеЗаполнено(Компания) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Компания)<> Тип("СправочникСсылка.Организации")
		И ТипЗнч(Компания)<> Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат;
	КонецЕсли;
	
	Объекты = Новый Массив;
	Объекты.Добавить(Компания);
	
	Если ТипЗнч(Компания) = Тип("СправочникСсылка.Организации") Тогда
		ВидЮрАдрес		 = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ВидФактАдрес	 = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		ВидПочтовыйАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	Иначе
		ВидЮрАдрес		 = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ВидФактАдрес	 = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ВидПочтовыйАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	КонецЕсли;
	
	ЮрФактАдресаСовпадают = АдресаСовпадают(Компания, ВидЮрАдрес, ВидФактАдрес);
	
	ЮрПочтовыйАдресаСовпадают = АдресаСовпадают(Компания, ВидЮрАдрес, ВидПочтовыйАдрес);
	
	Если ЮрФактАдресаСовпадают Тогда
		
		ЮрАдрес		 = КонтактнаяИнформация.Найти(ВидЮрАдрес,	 "Вид");
		ФактАдрес	 = КонтактнаяИнформация.Найти(ВидФактАдрес,	 "Вид");
		Если ЮрАдрес <> Неопределено И ФактАдрес <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ФактАдрес, ЮрАдрес, "Значение, Представление");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		
		ЮрАдрес			 = КонтактнаяИнформация.Найти(ВидЮрАдрес,		 "Вид");
		ПочтовыйАдрес	 = КонтактнаяИнформация.Найти(ВидПочтовыйАдрес,	 "Вид");
		Если ЮрАдрес <> Неопределено И ПочтовыйАдрес <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПочтовыйАдрес, ЮрАдрес, "Значение, Представление");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Ищет в таблице контактной информации строку указанного вида контактной информации для указанного объекта.
// ТаблицаКонтактнойИнформации должна быть предварительно получена с помощью УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату.
// Если в таблице есть несколько значений для объекта и вида контактной информации, то будет возвращено первое из найденных значений.
//
// Параметры:
//    Объект                      - Ссылка - владелец контактной информации.
//    Вид                         - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, который нужно получить.
//    ТаблицаКонтактнойИнформации - ТаблицаЗначений - таблица, которую возвращает функция УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - найденная строка контактной информации;
//   Неопределено          - если в таблице ничего не найдено.
//
Функция ЗначениеКонтактнойИнформацииИзТаблицы(Объект, Вид, ТаблицаКонтактнойИнформации) Экспорт
	
	Отбор = Новый Структура("Объект, Вид", Объект, Вид);
	НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет историю изменений адреса объекта.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура УстановитьАктуальноеЗначениеИсторииКонтактнойИнформации(Объект)
	
	ИсторияСрезПоследних = Новый Соответствие;
	Для Каждого ЗаписьИстории Из Объект.ИсторияКонтактнойИнформации Цикл
		КрайняяЗаписьИстории = ИсторияСрезПоследних[ЗаписьИстории.Вид];
		Если КрайняяЗаписьИстории = Неопределено Или КрайняяЗаписьИстории.Период < ЗаписьИстории.Период Тогда
			ИсторияСрезПоследних.Вставить(ЗаписьИстории.Вид, ЗаписьИстории);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИсторияСрезПоследних) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗаписьИстории Из ИсторияСрезПоследних Цикл
		
		ЗаписиКонтактнойИнформации = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ЗаписьИстории.Ключ));
		КоличествоЗаписей = ЗаписиКонтактнойИнформации.Количество();
		Если КоличествоЗаписей > 0 Тогда
			
			ЗаписьКонтактнойИнформации = ЗаписиКонтактнойИнформации[0];
			Если ЗаписьКонтактнойИнформации.Представление = ЗаписьИстории.Значение.Представление
				И ЗаписьКонтактнойИнформации.Значение = ЗаписьИстории.Значение.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗаписьИстории.Значение, ЗаписьКонтактнойИнформации, "Представление, ЗначенияПолей, Значение");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписиКонтактнойИнформации(КонтактнаяИнформация, ВидКонтактнойИнформации)
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	Записи = КонтактнаяИнформация.НайтиСтроки(Отбор);
	
	Отбор = Новый Структура("Вид,ВидДляСписка", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка(), ВидКонтактнойИнформации);
	ГрупповыеЗаписи = КонтактнаяИнформация.НайтиСтроки(Отбор);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Записи, ГрупповыеЗаписи);
	
	Возврат Записи;
	
КонецФункции

Функция СтруктураАдреса(ЗначенияАдресаJSON, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураАдреса = НовыйСтруктураАдреса();
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначенияАдресаJSON, ДополнительныеПараметры);
	
	СтруктураАдреса.Страна    = СведенияОбАдресе.Страна;
	СтруктураАдреса.КодСтраны = СведенияОбАдресе.КодСтраны;
	Если СтруктураАдреса.Свойство("Страна") 
		И СтрСравнить(СтруктураАдреса.Страна, Справочники.СтраныМира.Россия.Наименование) = 0 Тогда
		СтруктураАдреса.АдресРФ = Истина;
	Иначе
		СтруктураАдреса.АдресРФ = Ложь;
	КонецЕсли;
	
	СтруктураАдреса.Представление             = СведенияОбАдресе.Представление;
	СтруктураАдреса.Индекс                    = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Регион                    = СведенияОбАдресе.Регион;
	СтруктураАдреса.КодРегиона                = ?(СведенияОбАдресе.Свойство("КодРегиона"), СведенияОбАдресе.КодРегиона, "");
	СтруктураАдреса.РегионСокращение          = СведенияОбАдресе.РегионСокращение;
	СтруктураАдреса.Район                     = СведенияОбАдресе.Район;
	СтруктураАдреса.РайонСокращение           = СведенияОбАдресе.РайонСокращение;
	СтруктураАдреса.Город                     = СведенияОбАдресе.Город;
	СтруктураАдреса.ГородСокращение           = СведенияОбАдресе.ГородСокращение;
	СтруктураАдреса.НаселенныйПункт           = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПунктСокращение = СведенияОбАдресе.НаселенныйПунктСокращение;
	СтруктураАдреса.Улица                     = СведенияОбАдресе.Улица;
	СтруктураАдреса.УлицаСокращение           = СведенияОбАдресе.УлицаСокращение;
	СтруктураАдреса.Дом                       = СведенияОбАдресе.Здание.Номер;
	СтруктураАдреса.ТипДома                   = СведенияОбАдресе.Здание.ТипЗдания;
	
	Если СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
		СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпуса[0].Номер;
		СтруктураАдреса.ТипКорпуса = СведенияОбАдресе.Корпуса[0].ТипКорпуса;
	КонецЕсли;
	
	Если СведенияОбАдресе.Помещения.Количество() > 0 Тогда
		СтруктураАдреса.Квартира    = СведенияОбАдресе.Помещения[0].Номер;
		СтруктураАдреса.ТипКвартиры = СведенияОбАдресе.Помещения[0].ТипПомещения;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция НовыйСтруктураАдреса() Экспорт
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресРФ",                   Истина);
	СтруктураАдреса.Вставить("КодСтраны",                 "");
	СтруктураАдреса.Вставить("Страна",                    "");
	СтруктураАдреса.Вставить("Индекс",                    "");
	СтруктураАдреса.Вставить("Регион",                    "");
	СтруктураАдреса.Вставить("РегионСокращение",          "");
	СтруктураАдреса.Вставить("КодРегиона",                "");
	СтруктураАдреса.Вставить("Район",                     "");
	СтруктураАдреса.Вставить("РайонСокращение",           "");
	СтруктураАдреса.Вставить("Город",                     "");
	СтруктураАдреса.Вставить("ГородСокращение",           "");
	СтруктураАдреса.Вставить("НаселенныйПункт",           "");
	СтруктураАдреса.Вставить("НаселенныйПунктСокращение", "");
	СтруктураАдреса.Вставить("Улица",                     "");
	СтруктураАдреса.Вставить("УлицаСокращение",           "");
	СтруктураАдреса.Вставить("Дом",                       "");
	СтруктураАдреса.Вставить("ТипДома",                   "");
	СтруктураАдреса.Вставить("Корпус",                    "");
	СтруктураАдреса.Вставить("ТипКорпуса",                "");
	СтруктураАдреса.Вставить("Квартира",                  "");
	СтруктураАдреса.Вставить("ТипКвартиры",               "");
	СтруктураАдреса.Вставить("Представление",             "");
	СтруктураАдреса.Вставить("ЗначенияПолей",             "");
	СтруктураАдреса.Вставить("ЗначениеJSON",              "");
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция МассивВидовКонтактнойИнформацииДляЗапроса(ВидыКИ, СвязанныеАдреса)
	
	ВидыКИДляЗапроса = МассивВидовКонтактнойИнформации(ВидыКИ);
	
	// Если в массиве видов КИ нет связанного адреса, то добавим его
	// для получения исторических значений.
	Если ЗначениеЗаполнено(ВидыКИДляЗапроса) И ЗначениеЗаполнено(СвязанныеАдреса) Тогда
		Для Каждого СвязанныйАдрес Из СвязанныеАдреса Цикл
			Если ВидыКИДляЗапроса.Найти(СвязанныйАдрес.Ключ) <> Неопределено
				И ВидыКИДляЗапроса.Найти(СвязанныйАдрес.Значение) = Неопределено Тогда
				ВидыКИДляЗапроса.Добавить(СвязанныйАдрес.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидыКИДляЗапроса;
	
КонецФункции

Функция МассивВидовКонтактнойИнформации(ВидыКИ)
	
	ВидыКИДляЗапроса = Неопределено;
	Если ЗначениеЗаполнено(ВидыКИ) Тогда
		Если ТипЗнч(ВидыКИ) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ВидыКИДляЗапроса = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыКИ);
		Иначе
			ВидыКИДляЗапроса = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ВидыКИ);
		КонецЕсли;
	КонецЕсли;
	Возврат ВидыКИДляЗапроса;
	
КонецФункции

Функция СвязанныеАдресаДляПолученияИсторическихЗначений()
	
	// В список связанных адресов нужно добавлять адреса, которые могут зависить друг от друга.
	// Например, в форме редатирования Организации можно указать, что фактический адрес может быть таким же, как и юридический.
	// Для фактического адреса история не ведется, поэтому, если фактический и юридический адрес
	// совпадают на текущий момент (т.е. фактический адрес не редактируется в форме), то
	// в качестве истории фактического адреса можно использовать историю юридического.
	// Эта функция и определяет такие зависимости.
	
	СвязанныеАдреса = Новый Соответствие;
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СвязанныеАдреса.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Возврат СвязанныеАдреса;
	
КонецФункции

Функция ЗначенияИсторииКонтактнойИнформацииОбъектов(МассивОбъектов, ВидыКИ, Дата)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДатаСведений", Дата);
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Запрос.Параметры.Вставить("Виды", ВидыКИ);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииИсторияКонтактнойИнформации.Ссылка КАК Объект,
	|	ОрганизацииИсторияКонтактнойИнформации.Вид КАК Вид,
	|	ОрганизацииИсторияКонтактнойИнформации.Вид.Тип КАК Тип,
	|	ОрганизацииИсторияКонтактнойИнформации.ЗначенияПолей КАК ЗначенияПолей,
	|	ОрганизацииИсторияКонтактнойИнформации.Значение КАК Значение,
	|	ОрганизацииИсторияКонтактнойИнформации.Представление,
	|	ОрганизацииИсторияКонтактнойИнформации.Период
	|ПОМЕСТИТЬ ВТИсторияКонтактныхДанных
	|ИЗ
	|	Справочник.Организации.ИсторияКонтактнойИнформации КАК ОрганизацииИсторияКонтактнойИнформации
	|ГДЕ
	|	ОрганизацииИсторияКонтактнойИнформации.Ссылка В(&МассивОбъектов)
	|	И ОрганизацииИсторияКонтактнойИнформации.Период <= &ДатаСведений
	|	" + ?(ЗначениеЗаполнено(ВидыКИ), "И ОрганизацииИсторияКонтактнойИнформации.Вид В(&Виды)", "");
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыИсторияКонтактнойИнформации.Ссылка,
		|	КонтрагентыИсторияКонтактнойИнформации.Вид,
		|	КонтрагентыИсторияКонтактнойИнформации.Вид.Тип,
		|	КонтрагентыИсторияКонтактнойИнформации.ЗначенияПолей,
		|	КонтрагентыИсторияКонтактнойИнформации.Значение,
		|	КонтрагентыИсторияКонтактнойИнформации.Представление,
		|	КонтрагентыИсторияКонтактнойИнформации.Период
		|ИЗ
		|	Справочник.Контрагенты.ИсторияКонтактнойИнформации КАК КонтрагентыИсторияКонтактнойИнформации
		|ГДЕ
		|	КонтрагентыИсторияКонтактнойИнформации.Ссылка В(&МассивОбъектов)
		|	И КонтрагентыИсторияКонтактнойИнформации.Период <= &ДатаСведений
		|	" + ?(ЗначениеЗаполнено(ВидыКИ), "И КонтрагентыИсторияКонтактнойИнформации.Вид В(&Виды)", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсторияКонтактныхДанных.Объект КАК Объект,
	|	ВТИсторияКонтактныхДанных.Вид КАК Вид,
	|	МАКСИМУМ(ВТИсторияКонтактныхДанных.Период) КАК Период
	|ПОМЕСТИТЬ ВТСрезКонтактнойИнформации
	|ИЗ
	|	ВТИсторияКонтактныхДанных КАК ВТИсторияКонтактныхДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИсторияКонтактныхДанных.Объект,
	|	ВТИсторияКонтактныхДанных.Вид
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсторияКонтактныхДанных.Объект,
	|	ВТИсторияКонтактныхДанных.Тип,
	|	ВТИсторияКонтактныхДанных.Вид,
	|	ВТИсторияКонтактныхДанных.ЗначенияПолей КАК ЗначенияПолей,
	|	ВТИсторияКонтактныхДанных.Значение КАК Значение,
	|	ВТИсторияКонтактныхДанных.Представление КАК Представление
	|ИЗ
	|	ВТИсторияКонтактныхДанных КАК ВТИсторияКонтактныхДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезКонтактнойИнформации КАК ВТСрезКонтактнойИнформации
	|		ПО ВТИсторияКонтактныхДанных.Объект = ВТСрезКонтактнойИнформации.Объект
	|			И ВТИсторияКонтактныхДанных.Вид = ВТСрезКонтактнойИнформации.Вид
	|			И ВТИсторияКонтактныхДанных.Период = ВТСрезКонтактнойИнформации.Период";
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаменитьЗначенияДляСвязанныхАдресовНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации, СвязанныеАдресаДляИстории)
	
	Для Каждого ЗначениеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ВидСвязанногоАдреса = СвязанныеАдресаДляИстории.Получить(ЗначениеКонтактнойИнформации.Вид);
		Если ЗначениеЗаполнено(ВидСвязанногоАдреса) Тогда
			АктуальноеЗначениеСвязанногоАдреса = ЗначениеКонтактнойИнформацииИзТаблицы(ЗначениеКонтактнойИнформации.Объект, ВидСвязанногоАдреса, КонтактнаяИнформация);
			Если ЗначениеЗаполнено(АктуальноеЗначениеСвязанногоАдреса)
				И АктуальноеЗначениеСвязанногоАдреса.Представление = ЗначениеКонтактнойИнформации.Представление Тогда
				// Актуальное значение адреса и связанного адреса совпадает.
				// Следовательно, можно заменить значение адреса на историческое значение связанного адреса.
				ЗаменитьЗначениеКонтактнойИнформацииНаИсторическое(ЗначениеКонтактнойИнформации, ВидСвязанногоАдреса, ЗначенияИсторииКонтактнойИнформации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьЗначенияКонтактнойИнформацииНаИсторические(КонтактнаяИнформация, ЗначенияИсторииКонтактнойИнформации)
	
	Для Каждого ЗначениеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ЗаменитьЗначениеКонтактнойИнформацииНаИсторическое(ЗначениеКонтактнойИнформации, ЗначениеКонтактнойИнформации.Вид, ЗначенияИсторииКонтактнойИнформации);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьЗначениеКонтактнойИнформацииНаИсторическое(ЗначениеКонтактнойИнформации, Вид, ЗначенияИсторииКонтактнойИнформации)
	
	ИсторическоеЗначениеКонтактнойИнформации = ЗначениеКонтактнойИнформацииИзТаблицы(
		ЗначениеКонтактнойИнформации.Объект, Вид, ЗначенияИсторииКонтактнойИнформации);
	
	Если ЗначениеЗаполнено(ИсторическоеЗначениеКонтактнойИнформации) Тогда
		ЗаполнитьЗначенияСвойств(ЗначениеКонтактнойИнформации, ИсторическоеЗначениеКонтактнойИнформации, "Значение,ЗначенияПолей,Представление");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПолеЗначениеЕслиПустое(КонтактнаяИнформация)
	
	Для Каждого ЗначениеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		Если Не ЗначениеЗаполнено(ЗначениеКонтактнойИнформации.Значение)
			И ЗначениеЗаполнено(ЗначениеКонтактнойИнформации.ЗначенияПолей) Тогда
			ЗначениеКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				ЗначениеКонтактнойИнформации.ЗначенияПолей, ЗначениеКонтактнойИнформации.Вид);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОставитьТолькоЗапрашиваемыеВидыКонтактнойИнформации(КонтактнаяИнформация, ВидыКИ)
	
	Если Не ЗначениеЗаполнено(ВидыКИ) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыИзТаблицы = КонтактнаяИнформация.Скопировать(, "Вид");
	ВидыИзТаблицы.Свернуть("Вид");
	
	Для Каждого ВидИзТаблицы Из ВидыИзТаблицы Цикл
		Если ВидыКИ.Найти(ВидИзТаблицы.Вид) = Неопределено Тогда
			Отбор = Новый Структура("Вид", ВидИзТаблицы.Вид);
			СтрокиКУдалению = КонтактнаяИнформация.НайтиСтроки(Отбор);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				КонтактнаяИнформация.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие видов контактной информации по приоритету:
//  - фактический адрес
//  - юридический адрес
//  - прочие адреса
//
// Возвращаемое значение:
//    Соответствие
//     * Ключ     - СправочникСсылка.ВидыКонтактнойИнформации - Не заданные здесь значения имеют наименьший приоритет
//     * Значение - Число (1) - чем больше число, тем выше приоритет
//
Функция ПриоритетыАдресов()
	
	ПриоритетыАдресов = Новый Соответствие;
	ПриоритетыАдресов.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, 2);
	ПриоритетыАдресов.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, 2);
	ПриоритетыАдресов.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, 1);
	ПриоритетыАдресов.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, 1);
	
	Возврат ПриоритетыАдресов;
	
КонецФункции

Процедура СортироватьАдресаПоПриоритету(Адреса)
	
	ПриоритетныеАдреса = ПриоритетыАдресов();
	Адреса.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	Для Каждого Адрес Из Адреса Цикл
		Адрес.Приоритет = ПриоритетныеАдреса.Получить(Адрес.Вид);
	КонецЦикла;
	
	Адреса.Сортировать("Приоритет Убыв, Вид");
	
КонецПроцедуры

#КонецОбласти
