#Область ПрограммныйИнтерфейс

#Область СобытияФормИСМП

Процедура МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты, ВидПродукции) Экспорт
	
	ПараметрыИнтеграцииФормыПроверки = ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, ВидПродукции);
	
	Если ЗначениеЗаполнено(ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормы) Тогда
		ПараметрыИнтеграции.Вставить(ВидПродукции, ПараметрыИнтеграцииФормыПроверки);
		
		Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкиПодбораДокумента Тогда
			
			ПроверкаИПодборПродукцииИС.ДобавитьТаблицуСтатусовПроверки(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
			
		КонецЕсли;
		
		Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
			
			Если ПараметрыИнтеграцииФормыПроверки.РазмещатьЭлементыИнтерфейса Тогда
				
				ПутьКРеквизиту = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
				ПроверкаИПодборПродукцииИС.ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты);
				
			КонецЕсли;
			
			ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура МодификацияЭлементовФормы(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыИнтеграции.ВидыПродукции Цикл
		Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если Настройки = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
			Продолжить;
		КонецЕсли;
		ПроверкаИПодборПродукцииИС.ДобавитьКоманднуюПанельИПодменюПроверкиИПодбора(Форма, Настройки);
		ПроверкаИПодборПродукцииИС.ДобавитьКнопкуПроверкиИПодбора(Форма, Настройки, ВидПродукции);
		ПроверкаИПодборПродукцииИС.ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, Настройки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВстраиваниеФормыПроверкиИПодбора

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции формы проверки и подбора
//   в прикладные документы конфигураци - потребителя библиотеки ГосИС. Если передана форма - сразу заполняет ее
//   специфику в переопределяемом модуле.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма для которой возвращаются параметры интеграции
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - вид продукции для определения параметров интеграции
//
// Возвращаемое значение:
//  Структура - (См. ПроверкаИПодборПродукцииИС.ПараметрыИнтеграцииФормПроверкиИПодбора).
//
Функция ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ВидПродукцииРодительный = ПроверкаИПодборПродукцииИСМП.ВидПродукцииРодительный(ВидПродукции);
	ВидПродукцииВинительный = ПроверкаИПодборПродукцииИСМП.ВидПродукцииВинительный(ВидПродукции);
	
	ПараметрыИнтеграции = ПроверкаИПодборПродукцииИС.ПараметрыИнтеграцииФормПроверкиИПодбора();
	
	ПараметрыИнтеграции.ИнформацияДляПользователяОБлокировке = НСтр(
		"ru = 'До окончания работы в форме сканирования и проверки маркируемой продукции внесение изменений в данной форме недоступно.'");
	ПараметрыИнтеграции.ИнформацияДляПользователяОПроверке = НСтр(
		"ru = 'Выполняется проверка маркируемой продукции. При окончании работы в форме проверки табличная часть может быть изменена.'");
	
	ПараметрыИнтеграции.Заголовки[0] = СтрШаблон(НСтр("ru = 'Проверить поступившую %1'"),             ВидПродукцииВинительный);
	ПараметрыИнтеграции.Заголовки[1] = СтрШаблон(НСтр("ru = 'Подобрать и проверить %1'"),             ВидПродукцииВинительный);
	ПараметрыИнтеграции.Заголовки[2] = СтрШаблон(НСтр("ru = 'Продолжить проверку поступившей %1'"),   ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[3] = СтрШаблон(НСтр("ru = 'Продолжить подбор и проверку %1'"),      ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[4] = СтрШаблон(НСтр("ru = 'Результаты проверки %1'"),               ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[5] = СтрШаблон(НСтр("ru = 'Результаты подбора %1'"),                ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[6] = СтрШаблон(НСтр("ru = 'Промежуточные результаты проверки %1'"), ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[7] = СтрШаблон(НСтр("ru = 'Промежуточные результаты подбора %1'"),  ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[8] = СтрШаблон(НСтр("ru = 'Возобновить проверку %1'"),              ВидПродукцииРодительный);
	
	// Меняем окончание в словах: поступившую(ие) и поступившей(их)
	Если ИнтеграцияИСКлиентСервер.ПредставлениеВидаПродукцииВоМножественномЧисле(ВидПродукции) Тогда
		ПараметрыИнтеграции.Заголовки[0] = СтрШаблон(НСтр("ru = 'Проверить поступившие %1'"),           ВидПродукцииВинительный);
		ПараметрыИнтеграции.Заголовки[2] = СтрШаблон(НСтр("ru = 'Продолжить проверку поступивших %1'"), ВидПродукцииРодительный);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
		ПараметрыИнтеграции.Заголовки[0] = СтрШаблон(НСтр("ru = 'Проверить поступившее %1'"),            ВидПродукцииВинительный);
		ПараметрыИнтеграции.Заголовки[2] = СтрШаблон(НСтр("ru = 'Продолжить проверку поступившего %1'"), ВидПродукцииРодительный);
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииПараметровИнтеграцииФормыПроверкиИПодбора(
			Форма, ПараметрыИнтеграции, ВидПродукции);
	КонецЕсли;
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

// Вызывается при закрытии формы проверки и подбора маркируемой продукции из форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС и при инициализации формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - настраиваемый вид продукции
//  ВидимостьЭлементов - Булево - флаг видимости соответствующего блока по виду продукции
//
Процедура УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ВидПродукции, ВидимостьЭлементов)
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);

	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	
	СтатусПроверкиИПодбора  = ПроверкаИПодборПродукцииИСМП.СтатусПроверкиИПодбораДокумента(Объект.Ссылка, ВидПродукции);
	
	Если ПараметрыИнтеграции.ИспользоватьСтатусПроверкиПодбораДокумента Тогда
		
		ПроверкаИПодборПродукцииИС.УстановитьСтатусПоВидуПродукции(Форма, ВидПродукции, СтатусПроверкиИПодбора);
		ПроверкаИПодборПродукцииИС.ОбновитьИнтерфейсПоВидуПродукции(Форма, ВидПродукции, СтатусПроверкиИПодбора, ПараметрыИнтеграции);
		ПроверкаИПодборПродукцииИС.УстановитьВидимостьЭлементов(Форма, ВидПродукции, ВидимостьЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтатусамиПроверкиПодбораСтрок

Процедура ЗаполнитьКешШтрихкодовУпаковок(Форма) Экспорт
	
	ПараметрыИнтеграцииФормыПроверки = Неопределено;
	Для Каждого ВидПродукции Из ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграцииФормыПроверки<>Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграцииФормыПроверки = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Настройки                  = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
	Настройки.Объект           = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	Настройки.Штрихкоды        = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок;
	Настройки.ШтрихкодУпаковки = ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки;
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки);

КонецПроцедуры

Процедура ПрименитьКешШтрихкодовУпаковок(Форма, ОбновлениеТаблицыТоваров = Ложь) Экспорт

	ПараметрыИнтеграцииФормыПроверки = Неопределено;
	Для Каждого ВидПродукции Из ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграцииФормыПроверки<>Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграцииФормыПроверки = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
	Настройки.Объект           = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	Настройки.Штрихкоды        = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок;
	Настройки.ШтрихкодУпаковки = ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки;
	Настройки.Товары           = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
	Настройки.Серии            = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиСерии;
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, Настройки, ОбновлениеТаблицыТоваров);
	
КонецПроцедуры

#КонецОбласти

// Фиксирует результаты сканирования в форме проверки и подбора в документе, из которого она была вызвана.
//
// Параметры:
//   РезультатПроверки - Структура - (См. ПараметрыОкончанияПроверки)
//
Процедура ЗафиксироватьРезультатПроверкиИПодбора(РезультатПроверки) Экспорт
	
	ЗафиксироватьОписаниеGTIN(РезультатПроверки);
	
	МетаданныеДокумента = РезультатПроверки.ПроверяемыйДокумент.Метаданные();
	
	Если ИнтеграцияИС.СодержитсяВПодсистеме("ГосИС.ИСМП", МетаданныеДокумента) Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
		МенеджерДокумента.ОтразитьРезультатыПроверкиИПодбора(РезультатПроверки);
	Иначе
		ПроверкаИПодборПродукцииИСМППереопределяемый.ОтразитьРезультатыСканированияВДокументе(РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру параметров завершения проверки и подбора маркируемой продукции (ИС МП)
// 
// Возвращаемое значение:
//   Структура - содержит следующие поля:
//     * ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для которого требуется зафиксировать результат проверки и подбора
//     * СоздаватьАктОРасхождениях       - Булево - признак, того что требуется создания документа "Акт о расхождениях".
//     * СозданныйАктОРасхождениях       - ДокументСсылка - в данный параметр требуется поместить созданный документ "Акт о расхождениях".
//     * ПроверяемыйДокумент             - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
//     * ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - содержит следующие колонки:
//        ** ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
//        ** Штрихкод - Строка - Значение штрихкода
//     * ТаблицаПодобраннойПровереннойПродукции - см. ПустаяТаблицаПодобраннойПровереннойПродукции.
//     * ТаблицаРасхожденийШтриховыхКодов - ТаблицаЗначений - содержит расхождения при проверке маркируемой продукции
//     * ТаблицаОписанияGTIN - см. ПустаяТаблицаОписанияGTIN.
//
Функция ПараметрыОкончанияПроверки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидПродукцииИС",            Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	Результат.Вставить("СоздаватьАктОРасхождениях", Ложь);
	Результат.Вставить("СозданныйАктОРасхождениях");
	Результат.Вставить("ПроверяемыйДокумент");
	Результат.Вставить("ТаблицаШтрихкодовВерхнегоУровня");
	Результат.Вставить("ТаблицаШтрихкодовОбщая");
	Результат.Вставить("ТаблицаПодобраннойПровереннойПродукции");
	Результат.Вставить("ТаблицаРасхожденийШтриховыхКодов");
	Результат.Вставить("ТаблицаОписанияGTIN");
	Результат.Вставить("ТаблицаУпаковкиПоДокументу");
	Результат.Вставить("ШтрихкодыУпаковокПланЭДО");
	Результат.Вставить("ШтрихкодыУпаковокФактЭДО");
	Результат.Вставить("ШтрихкодыУпаковокРасхождения");
	Возврат Результат;
	
КонецФункции

//Возвращает сформированный ранее Акт о расхождениях для переданного документа.
// 
//Параметры:
//   Документ - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях:
//Возвращаемое значение:
//   Неопределено, ДокументСсылка - ссылка на Акт о расхождениях
Функция СформированныйАктОРасхождениях(Документ) Экспорт
	
	АктОРасхождениях = Неопределено;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПолучитьСформированныйАктОРасхождениях(Документ, АктОРасхождениях);
	
	Возврат АктОРасхождениях;
	
КонецФункции

//Возвращает для переданного документа таблицу его товаров, являющихся маркируемой продукцией тревуемого вида.
//
//Параметры:
//  * Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  * ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид получаемой маркируемой продукции.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с подобранной продукцией переданного документа:
//   * GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//   * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//   * Количество     - Число                                      - количество.
//
Функция ТаблицаМаркируемойПродукцииДокумента(Контекст, ВидМаркируемойПродукции) Экспорт
	
	ТаблицаМаркируемойПродукции = НоваяТаблицаМаркируемойПродукции();
	
	ДополнитьКолонкамиПоВидуПродукции(ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции);
	
	Если ТипЗнч(Контекст) = Тип("ДанныеФормыСтруктура") Тогда
		
		ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
			Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции);
			
	Иначе
		
		МетаданныеДокумента = Контекст.Метаданные();
		
		Если ИнтеграцияИС.СодержитсяВПодсистеме("ГосИС.ИСМП", МетаданныеДокумента) Тогда
			МенеджерДокумента = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
			МенеджерДокумента.ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, Контекст);
		Иначе
			ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
				Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

Функция ДанныеРезультатовПроверки(Форма) Экспорт
	
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеФормыВЗначение(Форма.ДеревоМаркированнойПродукции, Тип("ДеревоЗначений")));
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеФормыВЗначение(Форма.ПодобраннаяМаркируемаяПродукция, Тип("ТаблицаЗначений")));
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      Форма.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", Форма.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     Форма.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          Форма.ДетализацияСтруктурыХранения);
	РезультатыСканированияМаркируемойПродукции.Вставить("РежимПроверки",                         Форма.РежимПроверки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДобавленныеУпаковки",                   Форма.ДобавленныеУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          Форма.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("СледующийСтикерОтложено",               Форма.СледующийСтикерОтложено);
	РезультатыСканированияМаркируемойПродукции.Вставить("СодержимоеУпаковокНедоступно",          Форма.СодержимоеУпаковокНедоступно);
	РезультатыСканированияМаркируемойПродукции.Вставить("СохраненВыборПоМаркируемойПродукции",   Форма.СохраненВыборПоМаркируемойПродукции);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДанныеВыбораПоМаркируемойПродукции",    Форма.ДанныеВыбораПоМаркируемойПродукции);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",    ШтрихкодТекущейПроверяемойУпаковки(Форма));
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодыУпаковок",                     Форма.ШтрихкодыУпаковок);
	РезультатыСканированияМаркируемойПродукции.Вставить("Контейнер",                             Форма.Контейнер);
	
	РезультатыСканированияМаркируемойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов",
		?(ЭтоАдресВременногоХранилища(Форма.АдресПредыдущихШтрихкодов),
			ПолучитьИзВременногоХранилища(Форма.АдресПредыдущихШтрихкодов),
			Неопределено)
	);
	
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоПоДокументуСУчетомВидаПродукции",
		ДанныеФормыВЗначение(Форма.КоличествоПоДокументуСУчетомВидаПродукции, Тип("ТаблицаЗначений")));
	
	РезультатыСканированияМаркируемойПродукции.Вставить("ПродукцияПоДокументу",
		ДанныеФормыВЗначение(Форма.ПродукцияПоДокументу, Тип("ТаблицаЗначений")));
	
	Возврат РезультатыСканированияМаркируемойПродукции;
	
КонецФункции

Функция ШтрихкодТекущейПроверяемойУпаковки(Форма)

	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		Возврат "";
	Иначе
		СтрокаСПроверяемойУпаковкой = Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
		
		Если СтрокаСПроверяемойУпаковкой = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат СтрокаСПроверяемойУпаковкой.Штрихкод;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Функция РезультатыПроверкиУспешноСохранены(Форма, ВидПродукцииИС, ТекстОшибки) Экспорт
	
	Попытка
		
		ДанныеРезультатовПроверки = ДанныеРезультатовПроверки(Форма);
		
		РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.СохранитьПромежуточныеРезультатыПроверкиДокумента(
			Форма.ПроверяемыйДокумент,
			ВидПродукцииИС,
			Новый ХранилищеЗначения(ДанныеРезультатовПроверки));
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетХешСумм

//Пересчитывает хеш-суммы всех упаковок формы и проверяется необходимость перемаркировки.
//
//Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма проверки и подбора маркируемой продкуции.
//
Процедура ПересчитатьХешСуммыВсехУпаковок(Форма) Экспорт

	Если Не Форма.ПроверятьНеобходимостьПеремаркировки Тогда
		Возврат;
	КонецЕсли;

	Если Форма.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
	
	Для Каждого СтрокаДерева Из Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС.ТаблицаПеремаркировки(ТаблицаХешСумм);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОкончаниеПроверкиИПодбора

// Удаляет пустые упаковки из дерева маркируемой продукции.
// 
// Параметры:
//  ДеревоМаркированнойПродукции - ДеревоЗначений - дерево упаковок маркируемой продукции из формы проверки и подбора
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//
Процедура УдалитьПустыеУпаковкиДерева(ДеревоМаркированнойПродукции) Экспорт
	
	УдалитьПустыеУпаковкиВСтрокахДерева(ДеревоМаркированнойПродукции.Строки);
	
КонецПроцедуры

// Формирует пустую таблицу о штриховых кодах верхнего уровня, для дальнейшего наполнения информацией из формы проверки и подбора.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров 
// * Штрихкод - Строка 
//
Функция ПустаяТаблицаШтрихкодовВерхнегоУровня() Экспорт
	
	ТаблицаШтрихкодовВерхнегоУровня = Новый ТаблицаЗначений;
	
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Возврат ТаблицаШтрихкодовВерхнегоУровня;
	
КонецФункции

// Формирует пустую таблицу информации о проверенных и под, сформированную в форме проверки и подбора.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - содержит следующие колонки:
//  * Номенклатура        - ОпределяемыйТип.Номенклатура - Номекнлатура.
//  * Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//  * Серия               - ОпределяемыйТип.СерияНоменклатуры - Серия.
//  * Количество          - Число - количество по документу.
//  * КоличествоПодобрано - Число - фактическое количество по результатам проверки и подбора.
//  * GTIN                - ОпределяемыйТип.GTIN - GTIN.
Функция ПустаяТаблицаПодобраннойПровереннойПродукции() Экспорт
	
	ТаблицаПодобраннойПровереннойПродукции = Новый ТаблицаЗначений;
	
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Серия",               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("КоличествоПодобрано", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("GTIN",                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	
	Возврат ТаблицаПодобраннойПровереннойПродукции;
	
КонецФункции

// Формирует пустую таблицу информации о GTIN, сопоставлении с номенклатурой, коэффициентах групповых упаковок.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// 	* GTIN                - ОпределяемыйТип.GTIN                       - GTIN.
//  * Номенклатура        - ОпределяемыйТип.Номенклатура               - Номекнлатура.
//  * Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//  * Упаковка            - ОпределяемыйТип.Упаковка                   - Упаковка.
//  * ВидУпаковки         - ПеречислениеСсылка.ВидыУпаковокИС          - Вид упаковки.
//  * Коэффициент         - Число                                      - Коэффициент групповой упаковки.
Функция ПустаяТаблицаОписанияGTIN() Экспорт
	
	ТаблицаПодобраннойПровереннойПродукции = Новый ТаблицаЗначений;
	
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("GTIN",                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Упаковка",            Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Коэффициент",         ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("ВидУпаковки",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	
	ТаблицаПодобраннойПровереннойПродукции.Индексы.Добавить("GTIN,ВидУпаковки");
	
	Возврат ТаблицаПодобраннойПровереннойПродукции;
	
КонецФункции

// Заполняет таблицу описания GTIN уникальными значениями из дерева упаковок.
// 
// Параметры:
// 	ТаблицаОписанияGTIN - см. ПустаяТаблицаОписанияGTIN.
// 	ДеревоМаркированнойПродукции - ДеревоЗначений - содержит результаты проверки и подбора с иерархией упаковок.
Процедура ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковок(ТаблицаОписанияGTIN, ДеревоМаркированнойПродукции) Экспорт
	
	ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковокРекурсивно(ТаблицаОписанияGTIN, ДеревоМаркированнойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Функция ЕстьПравоДобавлениеСерий() Экспорт
	
	ПравоДобавлениеСерий = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ОпределитьПравоДобавлениеСерий(ПравоДобавлениеСерий);
	
	Возврат ПравоДобавлениеСерий;
	
КонецФункции

#КонецОбласти

Функция ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидМаркируемойПродукции) Экспорт
	
	ЕстьМаркируемаяПродукция = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидМаркируемойПродукции, ЕстьМаркируемаяПродукция);
	
	Возврат ЕстьМаркируемаяПродукция;
	
КонецФункции

Функция СтатусПроверкиИПодбораДокумента(Документ, ВидМаркируемойПродукции) Экспорт
	
	СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось;

	Если ЗначениеЗаполнено(Документ) Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Документ", Документ);
		Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыПроверкиИПодбораДокументов.СтатусПроверкиИПодбора КАК СтатусПроверкиИПодбора
		|ИЗ
		|	РегистрСведений.СтатусыПроверкиИПодбораДокументовИСМП КАК СтатусыПроверкиИПодбораДокументов
		|ГДЕ
		|	СтатусыПроверкиИПодбораДокументов.Документ = &Документ
		|	И СтатусыПроверкиИПодбораДокументов.ВидМаркируемойПродукции = &ВидМаркируемойПродукции
		|";
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СтатусПроверкиИПодбора = Выборка.СтатусПроверкиИПодбора;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверкиИПодбора;
	
КонецФункции

Функция КонтрагентНеРезидент(Контрагент) Экспорт
	
	НеРезидент = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииКонтрагентНеРезидент(Контрагент, НеРезидент);
	
	Возврат НеРезидент;
	
КонецФункции

Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукцииИСМП(ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования) Экспорт
	
	Если ТаблицаМаркируемойПродукции.Количество() = 0 И ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваВидаПродукции                  = Новый Массив;
	СвойстваВидаПродукцииЗаполнятьИзДереве = Ложь;
	ПрисутствуетПотребительскаяУпаковка    = Истина;
	ПоддерживаетсяГрупповаяУпаковка        = Ложь;
	ИмяКолонкиКоличествоГрупповойУпаковке  = Неопределено;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "МРЦ", Ложь);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		
		СвойстваВидаПродукцииЗаполнятьИзДереве = Истина;
		ПоддерживаетсяГрупповаяУпаковка        = Истина;
		ИмяКолонкиКоличествоГрупповойУпаковке  = "КоличествоПачек";
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		
		ПоддерживаетсяГрупповаяУпаковка        = Истина;
		ИмяКолонкиКоличествоГрупповойУпаковке  = "КоличествоПачек";
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		
		ПрисутствуютВДанныхДокумента = Ложь;
		
		Если ТипЗнч(ДанныеДокумента.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
			И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировки Тогда
			
			ПрисутствуютВДанныхДокумента = Истина;
			
			ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ИдентификаторПроисхожденияВЕТИС", ПрисутствуютВДанныхДокумента);
			СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
			
		КонецЕсли;
		
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ГоденДо",         ПрисутствуютВДанныхДокумента);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "Скоропортящаяся", ПрисутствуютВДанныхДокумента);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		
		ПрисутствуютВДанныхДокумента = ТипЗнч(ДанныеДокумента.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
				И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировки;
		
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ГоденДо",         ПрисутствуютВДанныхДокумента);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "Скоропортящаяся", ПрисутствуютВДанныхДокумента);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		
	КонецЕсли;
	
	МаркированнаяПродукцияИСМП         = Новый ТаблицаЗначений;
	НеСопоставленаМаркируемаяПродукция = Ложь;
	Если ТаблицаМаркируемойПродукции.Количество() > 0 Тогда
		
		КолонкиМаркируемойПродукции = Новый Массив;
		КолонкиМаркируемойПродукции.Добавить("GTIN");
		КолонкиМаркируемойПродукции.Добавить("Номенклатура");
		КолонкиМаркируемойПродукции.Добавить("Характеристика");
		КолонкиМаркируемойПродукции.Добавить("Серия");
		КолонкиМаркируемойПродукции.Добавить("ПредставлениеНоменклатуры");
		КолонкиМаркируемойПродукции.Добавить("КоличествоИС");
		КолонкиМаркируемойПродукции.Добавить("НоменклатураСопоставленаПоУПД"); 
		
		Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
			КолонкиМаркируемойПродукции.Добавить(ОписаниеСвойства.Имя);
		КонецЦикла;
		
		МаркированнаяПродукцияИСМП = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки(
			СтрСоединить(КолонкиМаркируемойПродукции, ","));
		
		ПотребительскаяУпаковка = Перечисления.ВидыУпаковокИС.Потребительская;
		ГрупповаяУпаковка       = Перечисления.ВидыУпаковокИС.Групповая;
		
		Если ПоддерживаетсяГрупповаяУпаковка Тогда
			ПрисутствуетПотребительскаяУпаковка =
				ТаблицаМаркируемойПродукции.Найти(ПотребительскаяУпаковка, "ВидУпаковки") <> Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
			
			ЭтоГрупповаяТоварнаяУпаковка = (СтрокаИсточника.ВидУпаковки = ГрупповаяУпаковка);
			
			Если ЭтоГрупповаяТоварнаяУпаковка И ПрисутствуетПотребительскаяУпаковка Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИсточника.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаИсточника.GTIN);
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.GTIN);
			
			Если ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) Тогда
				СтруктураПоиска.Вставить("Номенклатура", СтрокаИсточника.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаИсточника.Характеристика) Тогда
					СтруктураПоиска.Вставить("Характеристика", СтрокаИсточника.Характеристика);
				Иначе
					СтруктураПоиска.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсточника.Серия) Тогда
					СтруктураПоиска.Вставить("Серия", СтрокаИсточника.Серия);
				Иначе
					СтруктураПоиска.Вставить("Серия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
				КонецЕсли;
			Иначе
				СтруктураПоиска.Вставить("Номенклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
				НеСопоставленаМаркируемаяПродукция = Истина;
			КонецЕсли;
			
			Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
				Если СвойстваВидаПродукцииЗаполнятьИзДереве Тогда
					СтрокаДанных = СтрокаИсточника.СтрокаДерева;
				Иначе
					СтрокаДанных = СтрокаИсточника;
				КонецЕсли;
				СтруктураПоиска.Вставить(ОписаниеСвойства.Имя, СтрокаДанных[ОписаниеСвойства.Имя]);
			КонецЦикла;
			
			СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиПродукцииИСМП.Количество() = 0 Тогда
				СтрокаПродукцииИСМП = МаркированнаяПродукцияИСМП.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукцииИСМП, СтруктураПоиска);
				СтрокаПродукцииИСМП.ПредставлениеНоменклатуры = СтрокаИсточника.ПредставлениеНоменклатуры;
				СтрокаПродукцииИСМП.НоменклатураСопоставленаПоУПД = СтрокаИсточника.НоменклатураСопоставленаПоУПД;
			Иначе
				СтрокаПродукцииИСМП = СтрокиПродукцииИСМП[0];
			КонецЕсли;
			
			Если ЭтоГрупповаяТоварнаяУпаковка Тогда
				КоличествоИС = СтрокаИсточника.СтрокаДерева[ИмяКолонкиКоличествоГрупповойУпаковке];
			Иначе
				КоличествоИС = 1;
			КонецЕсли;
			
			СтрокаПродукцииИСМП.КоличествоИС = СтрокаПродукцииИСМП.КоличествоИС + КоличествоИС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяКолонкиКоличество = "";
	УчитыватьСерии       = Истина;
	Если ДанныеДокумента.РежимПодбораСуществующихУпаковок Тогда
		ИмяКолонкиКоличество = "КоличествоПодобрано";
	Иначе
		ИмяКолонкиКоличество = "КоличествоИС";
		УчитыватьСерии       = Ложь;
	КонецЕсли;
	
	ПодобраннаяМаркируемаяПродукцияНовая = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
	
	ТаблицаПродукцииДокумента = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
	Для Каждого СтрокаПродукцииДокумента Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
		Если ЗначениеЗаполнено(СтрокаПродукцииДокумента.GTIN) Тогда
			СтрокаПродукцииДокумента.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаПродукцииДокумента.GTIN);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПродукцииДокумента.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПродукцииДокумента.Добавить(), СтрокаПродукцииДокумента);
		Иначе
			// Характерно только для остаточных GTIN
			ЗаполнитьЗначенияСвойств(ПодобраннаяМаркируемаяПродукцияНовая.Добавить(), СтрокаПродукцииДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Остаточные GTIN
	Если ПодобраннаяМаркируемаяПродукцияНовая.Количество() > 0 И НеСопоставленаМаркируемаяПродукция Тогда
		
		Для Каждого СтрокаПродукцииДокумента Из ПодобраннаяМаркируемаяПродукцияНовая Цикл
			
			ОтборПоGTIN = Новый Структура("Номенклатура, GTIN",
				ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"), СтрокаПродукцииДокумента.GTIN);
			
			СтрокиСПустойНоменклатурой = МаркированнаяПродукцияИСМП.НайтиСтроки(ОтборПоGTIN);
			
			Для Каждого СтрокаПоGTIN Из СтрокиСПустойНоменклатурой Цикл
				
				Если СтрокаПоGTIN.КоличествоИС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
					Если Не ОписаниеСвойства.ПрисутствуетВДанныхДокумента Тогда
						СтрокаПродукцииДокумента[ОписаниеСвойства.Имя] = СтрокаПоGTIN[ОписаниеСвойства.Имя];
					КонецЕсли;
				КонецЦикла;
				
				СтрокаПродукцииДокумента[ИмяКолонкиКоличество] = СтрокаПродукцииДокумента[ИмяКолонкиКоличество] + СтрокаПоGTIN.КоличествоИС;
				СтрокаПоGTIN.КоличествоИС                      = 0;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Распределение по данным документа + по данным маркированного товара
	#Область ТаблицаПродукцииДокумента
	Если ТаблицаПродукцииДокумента.Количество() > 0 Тогда
		
		КолонкиПодобраннойМаркируемойПродукции = Новый Массив;
		КолонкиПодобраннойМаркируемойПродукции.Добавить("Номенклатура");
		КолонкиПодобраннойМаркируемойПродукции.Добавить("Характеристика");
		Если УчитыватьСерии Тогда
			КолонкиПодобраннойМаркируемойПродукции.Добавить("Серия");
		КонецЕсли;
		
		КолонкиГруппировкиПодобраннойМаркируемойПродукции = Новый Массив;
		КолонкиГруппировкиПодобраннойМаркируемойПродукции.Добавить("GTIN");
		
		Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
			Если ОписаниеСвойства.ПрисутствуетВДанныхДокумента Тогда
				КолонкиПодобраннойМаркируемойПродукции.Добавить(ОписаниеСвойства.Имя);
			Иначе
				КолонкиГруппировкиПодобраннойМаркируемойПродукции.Добавить(ОписаниеСвойства.Имя);
			КонецЕсли;
		КонецЦикла;
		
		КолонкиКоличестваПодобраннойМаркируемойПродукции = Новый Массив;
		КолонкиКоличестваПодобраннойМаркируемойПродукции.Добавить("Количество");
		КолонкиКоличестваПодобраннойМаркируемойПродукции.Добавить(ИмяКолонкиКоличество);
		
		КолонкиПоДокументуСтрокой            = СтрСоединить(КолонкиПодобраннойМаркируемойПродукции, ",");
		КолонкиКоличестваПоДокументуСтрокой  = СтрСоединить(КолонкиКоличестваПодобраннойМаркируемойПродукции, ",");
		КолонкиГруппировкиПоДокументуСтрокой = СтрСоединить(КолонкиГруппировкиПодобраннойМаркируемойПродукции, ",");
		
		ТаблицаПродукцииДокумента.Свернуть(КолонкиПоДокументуСтрокой + ",GTIN", КолонкиКоличестваПоДокументуСтрокой);
		
		ДанныеРаспределения = Новый ТаблицаЗначений; // Заполняется по данным МаркированнаяПродукцияИСМП
		Для Каждого ИмяКолонки Из КолонкиГруппировкиПодобраннойМаркируемойПродукции Цикл
			ДанныеРаспределения.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
		ДанныеРаспределения.Колонки.Добавить("КоличествоИС", Новый ОписаниеТипов("Число"));
		ДанныеРаспределения.Колонки.Добавить("ИсходнаяСтрока");
		
		Для Каждого СтрокаПродукцииДокумента Из ТаблицаПродукцииДокумента Цикл
			
			ДанныеРаспределения.Очистить();
			
			КоличествоПоДокументу = СтрокаПродукцииДокумента.Количество;
			КоличествоПодобрано   = СтрокаПродукцииДокумента[ИмяКолонкиКоличество];
			
			СтруктураПоиска = Новый Структура(КолонкиПоДокументуСтрокой);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукцииДокумента);
			Если ЗначениеЗаполнено(СтрокаПродукцииДокумента.GTIN) Тогда
				СтруктураПоиска.Вставить("GTIN", СтрокаПродукцииДокумента.GTIN);
			КонецЕсли;
			
			СтрокаДопЗаполнения = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска)[0];
			
			КодыGTIN          = СтрокаДопЗаполнения.КодыGTIN;
			ОсновнойGTIN      = Неопределено;
			ПредставлениеGTIN = "";
			Если КодыGTIN.Количество() = 1 Тогда
				ОсновнойGTIN      = КодыGTIN[0].Значение;
				ПредставлениеGTIN = ОсновнойGTIN;
			ИначеЕсли КодыGTIN.Количество() > 1 Тогда
				ПредставлениеGTIN = СтрШаблон(НСтр("ru = '%1 ( + еще %2)'"),
					КодыGTIN[0].Значение, КодыGTIN.Количество() - 1);
			КонецЕсли;
			
			НоменклатураСопоставлена     = ЗначениеЗаполнено(СтрокаДопЗаполнения.Номенклатура);
			ВозможнаТолькоОднаКомбинация = Ложь;
			ИндексПервойСтрокиGTIN       = Неопределено;
			
			Если МаркированнаяПродукцияИСМП.Количество() > 0 Тогда
				
				СтруктураПоискаGTIN = Новый Структура("GTIN, Номенклатура",
					СтрокаПродукцииДокумента.GTIN, ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
				ВыполнитьЗаполнениеНоменклатуры = Ложь;
				
				СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПродукцииИСМП.Количество() = 0
					И НеСопоставленаМаркируемаяПродукция
					И ЗначениеЗаполнено(СтрокаПродукцииДокумента.GTIN) Тогда
					СтрокиПродукцииИСМП             = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоискаGTIN);
					ВыполнитьЗаполнениеНоменклатуры = СтрокиПродукцииИСМП.Количество() > 0;
				КонецЕсли;
				
				// Различия в найденных строках:
				// 1. GTIN
				// 2. Свойства вида продукции:
				// 2.1. Для табака: + МРЦ
				
				Для Каждого СтрокаПродукцииИСМП Из СтрокиПродукцииИСМП Цикл
					Если СтрокаПродукцииИСМП.КоличествоИС <> 0 Тогда
						НоваяСтрока = ДанныеРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПродукцииИСМП);
						НоваяСтрока.ИсходнаяСтрока = СтрокаПродукцииИСМП;
					КонецЕсли;
				КонецЦикла;
				
				ВозможнаТолькоОднаКомбинация = (КодыGTIN.Количество() = 1 И ДанныеРаспределения.Количество() = 1);
				
				ГруппировкаПоGTIN = ДанныеРаспределения.Скопировать();
				ГруппировкаПоGTIN.Свернуть("GTIN", "КоличествоИС");
				
				Для Каждого СтрокаGTIN Из ГруппировкаПоGTIN Цикл
					
					ОтборПоGTIN = Новый Структура("GTIN", СтрокаGTIN.GTIN);
					СтрокиПоGTIN = ДанныеРаспределения.НайтиСтроки(ОтборПоGTIN);
					
					Для Каждого СтрокаПоGTIN Из СтрокиПоGTIN Цикл
						
						СтрокаПродукцииИСМП = СтрокаПоGTIN.ИсходнаяСтрока;
						
						НеобходимоеКоличество = КоличествоПоДокументу - КоличествоПодобрано;
						КоличествоПоСтроке    = Мин(НеобходимоеКоличество, СтрокаПоGTIN.КоличествоИС);
						КоличествоПодобрано   = КоличествоПодобрано + КоличествоПоСтроке;
						
						СтрокаПоGTIN.КоличествоИС = СтрокаПоGTIN.КоличествоИС - КоличествоПоСтроке;
						СтрокаGTIN.КоличествоИС   = СтрокаGTIN.КоличествоИС - КоличествоПоСтроке;
						
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураПоиска);
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПоGTIN, КолонкиГруппировкиПоДокументуСтрокой); // GTIN, ...
						СтрокаПродукции.Количество            = КоличествоПоСтроке;
						СтрокаПродукции[ИмяКолонкиКоличество] = КоличествоПоСтроке;
						СтрокаПродукции.КодыGTIN              = КодыGTIN;
						СтрокаПродукции.ПредставлениеGTIN     = ПредставлениеGTIN;
						
						СтрокаПродукции.СтатусУказанияСерий        = СтрокаДопЗаполнения.СтатусУказанияСерий;
						СтрокаПродукции.ТипНоменклатуры            = СтрокаДопЗаполнения.ТипНоменклатуры;
						СтрокаПродукции.ХарактеристикиИспользуются = СтрокаДопЗаполнения.ХарактеристикиИспользуются;
						СтрокаПродукции.НоменклатураСопоставлена   = НоменклатураСопоставлена;
						
						Если ЗначениеЗаполнено(СтрокаДопЗаполнения.ПредставлениеНоменклатуры) Тогда
							ПредставлениеНоменклатуры = СтрокаДопЗаполнения.ПредставлениеНоменклатуры;
						Иначе
							ПредставлениеНоменклатуры = СтрокаПродукцииИСМП.ПредставлениеНоменклатуры;
						КонецЕсли;
						СтрокаПродукции.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
						
						СтрокаПродукции.НоменклатураСопоставленаПоУПД = СтрокаПродукцииИСМП.НоменклатураСопоставленаПоУПД;
						
						СтрокаПродукцииИСМП.КоличествоИС = СтрокаПоGTIN.КоличествоИС;
						
						Если ИндексПервойСтрокиGTIN = Неопределено Тогда
							ИндексПервойСтрокиGTIN = ПодобраннаяМаркируемаяПродукцияНовая.Индекс(СтрокаПродукции);
						КонецЕсли;
						
						Если КоличествоПоДокументу = КоличествоПодобрано Тогда
							ОстатокПоСтроке = СтрокаПоGTIN.КоличествоИС;
							Если ОстатокПоСтроке > 0 И (ВозможнаТолькоОднаКомбинация Или СтрокиПоGTIN.Количество() = 1) Тогда
								СтрокаПоGTIN.КоличествоИС             = 0;
								СтрокаПродукцииИСМП.КоличествоИС      = 0;
								СтрокаПродукции[ИмяКолонкиКоличество] = СтрокаПродукции[ИмяКолонкиКоличество] + ОстатокПоСтроке;
								СтрокаGTIN.КоличествоИС               = СтрокаGTIN.КоличествоИС - ОстатокПоСтроке;
								КоличествоПодобрано                   = КоличествоПодобрано + ОстатокПоСтроке;
							КонецЕсли;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если СтрокаGTIN.КоличествоИС = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Выполняем добавление именно тут только для красивой сортировки
					Для Каждого СтрокаПоGTIN Из СтрокиПоGTIN Цикл
						
						Если СтрокаПоGTIN.КоличествоИС = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураПоиска);
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПоGTIN, КолонкиГруппировкиПоДокументуСтрокой); // GTIN, ...
						СтрокаПродукции.Количество            = 0;
						СтрокаПродукции[ИмяКолонкиКоличество] = СтрокаПоGTIN.КоличествоИС;
						
						СтрокаПродукции.СтатусУказанияСерий        = СтрокаДопЗаполнения.СтатусУказанияСерий;
						СтрокаПродукции.ТипНоменклатуры            = СтрокаДопЗаполнения.ТипНоменклатуры;
						СтрокаПродукции.ХарактеристикиИспользуются = СтрокаДопЗаполнения.ХарактеристикиИспользуются;
						СтрокаПродукции.НоменклатураСопоставлена   = НоменклатураСопоставлена;
						
						Если ЗначениеЗаполнено(СтрокаДопЗаполнения.ПредставлениеНоменклатуры) Тогда
							ПредставлениеНоменклатуры = СтрокаДопЗаполнения.ПредставлениеНоменклатуры;
						Иначе
							ПредставлениеНоменклатуры = СтрокаПоGTIN.ИсходнаяСтрока.ПредставлениеНоменклатуры;
						КонецЕсли;
						СтрокаПродукции.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
						
						СтрокаПоGTIN.КоличествоИС                = 0;
						СтрокаПоGTIN.ИсходнаяСтрока.КоличествоИС = 0;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если ВыполнитьЗаполнениеНоменклатуры Тогда
					СтрокиИсходнойМаркируемойПродукции = ТаблицаМаркируемойПродукции.НайтиСтроки(СтруктураПоискаGTIN);
					Для Каждого СтрокаТаблицыМаркируемойПродукции Из СтрокиИсходнойМаркируемойПродукции Цикл
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыМаркируемойПродукции, СтруктураПоиска);
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыМаркируемойПродукции.СтрокаДерева, СтруктураПоиска);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли; // Распределение по МаркированнаяПродукцияИСМП
			
			СтрокаПродукцииДокумента[ИмяКолонкиКоличество] = КоличествоПодобрано;
			
			НеобходимоеКоличество = КоличествоПоДокументу - КоличествоПодобрано;
			
			Если НеобходимоеКоличество > 0 Тогда
				
				Если Не ВозможнаТолькоОднаКомбинация Тогда
					Если ИндексПервойСтрокиGTIN = Неопределено Тогда
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
					Иначе
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Вставить(ИндексПервойСтрокиGTIN);
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураПоиска);
					Если ОсновнойGTIN <> Неопределено Тогда
						СтрокаПродукции.GTIN = ОсновнойGTIN;
					КонецЕсли;
					СтрокаПродукции.КодыGTIN          = КодыGTIN;
					СтрокаПродукции.ПредставлениеGTIN = ПредставлениеGTIN;
					
					СтрокаПродукции.СтатусУказанияСерий        = СтрокаДопЗаполнения.СтатусУказанияСерий;
					СтрокаПродукции.ТипНоменклатуры            = СтрокаДопЗаполнения.ТипНоменклатуры;
					СтрокаПродукции.ХарактеристикиИспользуются = СтрокаДопЗаполнения.ХарактеристикиИспользуются;
					СтрокаПродукции.НоменклатураСопоставлена   = НоменклатураСопоставлена;
					СтрокаПродукции.ПредставлениеНоменклатуры  = СтрокаДопЗаполнения.ПредставлениеНоменклатуры;
				КонецЕсли;
				
				СтрокаПродукции.Количество = СтрокаПродукции.Количество + НеобходимоеКоличество;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Распределение по данным документа + по данным маркированного товара
	#КонецОбласти
	
	Если ПодобраннаяМаркируемаяПродукцияНовая.Количество() > 0 И МаркированнаяПродукцияИСМП.Количество() > 0 Тогда
		
		СтрокиСПустойНоменклатурой = ПодобраннаяМаркируемаяПродукцияНовая.НайтиСтроки(
			Новый Структура("Номенклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура")));
		
		Для Каждого СтрокаДляАнализа Из СтрокиСПустойНоменклатурой Цикл
			
			Если СтрокаДляАнализа[ИмяКолонкиКоличество] >= СтрокаДляАнализа.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(Новый Структура("GTIN", СтрокаДляАнализа.GTIN));
			Для Каждого СтрокаПродукцииИСМП Из СтрокиПродукцииИСМП Цикл
				
				Если СтрокаПродукцииИСМП.КоличествоИС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДляАнализа[ИмяКолонкиКоличество] >= СтрокаДляАнализа.Количество Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоКРаспределению = Мин((СтрокаДляАнализа.Количество - СтрокаДляАнализа[ИмяКолонкиКоличество]),
					СтрокаПродукцииИСМП.КоличествоИС);
				
				СтрокаДляАнализа.Количество      = СтрокаДляАнализа.Количество - КоличествоКРаспределению;
				СтрокаПродукцииИСМП.КоличествоИС = СтрокаПродукцииИСМП.КоличествоИС - КоличествоКРаспределению;
				
				СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПродукцииИСМП,, "КоличествоИС");
				СтрокаПродукции.Количество            = КоличествоКРаспределению;
				СтрокаПродукции[ИмяКолонкиКоличество] = КоличествоКРаспределению;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПродукцииИСМП Из МаркированнаяПродукцияИСМП Цикл
		
		Если СтрокаПродукцииИСМП.КоличествоИС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПродукцииИСМП,, "КоличествоИС");
		
		СтрокаПродукции[ИмяКолонкиКоличество] = СтрокаПродукцииИСМП.КоличествоИС;
		СтрокаПродукцииИСМП.КоличествоИС      = 0;
		
	КонецЦикла;
	
	НомерСтроки = 0;
	Для Каждого СтрокаПродукции Из ПодобраннаяМаркируемаяПродукцияНовая Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаПродукции.НомерСтроки = НомерСтроки;
		СтрокаПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПродукции.Номенклатура);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПродукции);
	КонецЦикла;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		ПодобраннаяМаркируемаяПродукцияНовая, ДанныеДокумента.Организация, ВидПродукции, "ПредставлениеНоменклатуры");
	
	ДанныеДокумента.ПодобраннаяМаркируемаяПродукция = ПодобраннаяМаркируемаяПродукцияНовая;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукцииМОТП(ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования) Экспорт
	
	Если ТаблицаМаркируемойПродукции.Количество() = 0 И ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваВидаПродукции                  = Новый Массив;
	СвойстваВидаПродукцииЗаполнятьИзДерева = Ложь;
	ИмяКолонкиКоличество                   = "Количество";
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "МРЦ", Ложь);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ВключаетМРЦ", Ложь);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		
		СвойстваВидаПродукцииЗаполнятьИзДерева = Истина;
		ИмяКолонкиКоличество                   = "КоличествоПачек";
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		
		ИмяКолонкиКоличество                   = "КоличествоПачек";
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Тогда
		
		ПрисутствуютВДанныхДокумента = Ложь;
		
		Если ТипЗнч(ДанныеДокумента.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП")
			И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировки Тогда
			
			ПрисутствуютВДанныхДокумента = Истина;
			
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
				ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ИдентификаторПроисхожденияВЕТИС", ПрисутствуютВДанныхДокумента);
				СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
			КонецЕсли;
			
		КонецЕсли;
		
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ГоденДо",         ПрисутствуютВДанныхДокумента);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "Скоропортящаяся", ПрисутствуютВДанныхДокумента);
		СвойстваВидаПродукции.Добавить(ОписаниеСвойства);
		
	КонецЕсли;
	
	МаркированнаяПродукцияИСМП         = Новый ТаблицаЗначений;
	НеСопоставленаМаркируемаяПродукция = Ложь;
	Если ТаблицаМаркируемойПродукции.Количество() > 0 Тогда
		
		КолонкиМаркируемойПродукции = Новый Массив;
		КолонкиМаркируемойПродукции.Добавить("GTIN");
		КолонкиМаркируемойПродукции.Добавить("Номенклатура");
		КолонкиМаркируемойПродукции.Добавить("Характеристика");
		КолонкиМаркируемойПродукции.Добавить("Серия");
		КолонкиМаркируемойПродукции.Добавить("ПредставлениеНоменклатуры");
		КолонкиМаркируемойПродукции.Добавить("КоличествоИС");
		КолонкиМаркируемойПродукции.Добавить("НоменклатураСопоставленаПоУПД"); 
		
		Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
			КолонкиМаркируемойПродукции.Добавить(ОписаниеСвойства.Имя);
		КонецЦикла;
		
		МаркированнаяПродукцияИСМП = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки(
			СтрСоединить(КолонкиМаркируемойПродукции, ","));
		
		Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
			
			СтрокаИсточника.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаИсточника.GTIN);
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.GTIN);
			
			Если ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) Тогда
				СтруктураПоиска.Вставить("Номенклатура", СтрокаИсточника.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаИсточника.Характеристика) Тогда
					СтруктураПоиска.Вставить("Характеристика", СтрокаИсточника.Характеристика);
				Иначе
					СтруктураПоиска.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсточника.Серия) Тогда
					СтруктураПоиска.Вставить("Серия", СтрокаИсточника.Серия);
				Иначе
					СтруктураПоиска.Вставить("Серия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
				КонецЕсли;
			Иначе
				СтруктураПоиска.Вставить("Номенклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
				НеСопоставленаМаркируемаяПродукция = Истина;
			КонецЕсли;
			
			Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
				
				Если СвойстваВидаПродукцииЗаполнятьИзДерева Тогда
					СтрокаДанных = СтрокаИсточника.СтрокаДерева;
				Иначе
					СтрокаДанных = СтрокаИсточника;
				КонецЕсли;
				
				Если ОписаниеСвойства.Имя = "ВключаетМРЦ" Тогда
					
					ЗначениеСвойства = Ложь;
					
					Если СтрокаДанных["МРЦ"] > 0 Тогда
						ЗначениеСвойства = Истина;
					ИначеЕсли СтрокаДанных.ДанныеРазбора <> Неопределено Тогда
						Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
							Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
							ЗначениеСвойства = СтрокаДанных.ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					ЗначениеСвойства = СтрокаДанных[ОписаниеСвойства.Имя];
					
				КонецЕсли;
				
				СтруктураПоиска.Вставить(ОписаниеСвойства.Имя, ЗначениеСвойства);
				
			КонецЦикла;
			
			СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиПродукцииИСМП.Количество() = 0 Тогда
				СтрокаПродукцииИСМП = МаркированнаяПродукцияИСМП.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукцииИСМП, СтруктураПоиска);
				СтрокаПродукцииИСМП.ПредставлениеНоменклатуры = СтрокаИсточника.ПредставлениеНоменклатуры;
				СтрокаПродукцииИСМП.НоменклатураСопоставленаПоУПД = СтрокаИсточника.НоменклатураСопоставленаПоУПД;
			Иначе
				СтрокаПродукцииИСМП = СтрокиПродукцииИСМП[0];
			КонецЕсли;
			
			КоличествоИС = СтрокаИсточника.СтрокаДерева[ИмяКолонкиКоличество];
			
			СтрокаПродукцииИСМП.КоличествоИС = СтрокаПродукцииИСМП.КоличествоИС + КоличествоИС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяКолонкиКоличество = "";
	УчитыватьСерии       = Истина;
	Если ДанныеДокумента.РежимПодбораСуществующихУпаковок Тогда
		ИмяКолонкиКоличество = "КоличествоПодобрано";
	Иначе
		ИмяКолонкиКоличество = "КоличествоИС";
		УчитыватьСерии       = Ложь;
	КонецЕсли;
	
	ПодобраннаяМаркируемаяПродукцияНовая = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
	
	ТаблицаПродукцииДокумента = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
	Для Каждого СтрокаПродукцииДокумента Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
		Если ЗначениеЗаполнено(СтрокаПродукцииДокумента.GTIN) Тогда
			СтрокаПродукцииДокумента.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаПродукцииДокумента.GTIN);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПродукцииДокумента.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПродукцииДокумента.Добавить(), СтрокаПродукцииДокумента);
		Иначе
			// Характерно только для остаточных GTIN
			ЗаполнитьЗначенияСвойств(ПодобраннаяМаркируемаяПродукцияНовая.Добавить(), СтрокаПродукцииДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Остаточные GTIN
	Если ПодобраннаяМаркируемаяПродукцияНовая.Количество() > 0 И НеСопоставленаМаркируемаяПродукция Тогда
		
		Для Каждого СтрокаПродукцииДокумента Из ПодобраннаяМаркируемаяПродукцияНовая Цикл
			
			ОтборПоGTIN = Новый Структура("Номенклатура, GTIN",
				ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"), СтрокаПродукцииДокумента.GTIN);
			
			СтрокиСПустойНоменклатурой = МаркированнаяПродукцияИСМП.НайтиСтроки(ОтборПоGTIN);
			
			Для Каждого СтрокаПоGTIN Из СтрокиСПустойНоменклатурой Цикл
				
				Если СтрокаПоGTIN.КоличествоИС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
					Если Не ОписаниеСвойства.ПрисутствуетВДанныхДокумента Тогда
						СтрокаПродукцииДокумента[ОписаниеСвойства.Имя] = СтрокаПоGTIN[ОписаниеСвойства.Имя];
					КонецЕсли;
				КонецЦикла;
				
				СтрокаПродукцииДокумента[ИмяКолонкиКоличество] = СтрокаПродукцииДокумента[ИмяКолонкиКоличество] + СтрокаПоGTIN.КоличествоИС;
				СтрокаПоGTIN.КоличествоИС                      = 0;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Распределение по данным документа + по данным маркированного товара
	#Область ТаблицаПродукцииДокумента
	Если ТаблицаПродукцииДокумента.Количество() > 0 Тогда
		
		КолонкиПодобраннойМаркируемойПродукции = Новый Массив;
		КолонкиПодобраннойМаркируемойПродукции.Добавить("Номенклатура");
		КолонкиПодобраннойМаркируемойПродукции.Добавить("Характеристика");
		Если УчитыватьСерии Тогда
			КолонкиПодобраннойМаркируемойПродукции.Добавить("Серия");
		КонецЕсли;
		
		КолонкиГруппировкиПодобраннойМаркируемойПродукции = Новый Массив;
		КолонкиГруппировкиПодобраннойМаркируемойПродукции.Добавить("GTIN");
		
		Для Каждого ОписаниеСвойства Из СвойстваВидаПродукции Цикл
			Если ОписаниеСвойства.ПрисутствуетВДанныхДокумента Тогда
				КолонкиПодобраннойМаркируемойПродукции.Добавить(ОписаниеСвойства.Имя);
			Иначе
				КолонкиГруппировкиПодобраннойМаркируемойПродукции.Добавить(ОписаниеСвойства.Имя);
			КонецЕсли;
		КонецЦикла;
		
		КолонкиКоличестваПодобраннойМаркируемойПродукции = Новый Массив;
		КолонкиКоличестваПодобраннойМаркируемойПродукции.Добавить("Количество");
		КолонкиКоличестваПодобраннойМаркируемойПродукции.Добавить(ИмяКолонкиКоличество);
		
		КолонкиПоДокументуСтрокой            = СтрСоединить(КолонкиПодобраннойМаркируемойПродукции, ",");
		КолонкиКоличестваПоДокументуСтрокой  = СтрСоединить(КолонкиКоличестваПодобраннойМаркируемойПродукции, ",");
		КолонкиГруппировкиПоДокументуСтрокой = СтрСоединить(КолонкиГруппировкиПодобраннойМаркируемойПродукции, ",");
		
		ТаблицаПродукцииДокумента.Свернуть(КолонкиПоДокументуСтрокой + ",GTIN", КолонкиКоличестваПоДокументуСтрокой);
		
		ДанныеРаспределения = Новый ТаблицаЗначений; // Заполняется по данным МаркированнаяПродукцияИСМП
		Для Каждого ИмяКолонки Из КолонкиГруппировкиПодобраннойМаркируемойПродукции Цикл
			ДанныеРаспределения.Колонки.Добавить(ИмяКолонки);
		КонецЦикла;
		ДанныеРаспределения.Колонки.Добавить("КоличествоИС", Новый ОписаниеТипов("Число"));
		ДанныеРаспределения.Колонки.Добавить("ИсходнаяСтрока");
		
		Для Каждого СтрокаПродукцииДокумента Из ТаблицаПродукцииДокумента Цикл
			
			ДанныеРаспределения.Очистить();
			
			КоличествоПоДокументу = СтрокаПродукцииДокумента.Количество;
			КоличествоПодобрано   = СтрокаПродукцииДокумента[ИмяКолонкиКоличество];
			
			СтруктураПоиска = Новый Структура(КолонкиПоДокументуСтрокой);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПродукцииДокумента);
			Если ЗначениеЗаполнено(СтрокаПродукцииДокумента.GTIN) Тогда
				СтруктураПоиска.Вставить("GTIN", СтрокаПродукцииДокумента.GTIN);
			КонецЕсли;
			
			СтрокаДопЗаполнения = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(СтруктураПоиска)[0];
			
			КодыGTIN          = СтрокаДопЗаполнения.КодыGTIN;
			ОсновнойGTIN      = Неопределено;
			ПредставлениеGTIN = "";
			Если КодыGTIN.Количество() = 1 Тогда
				ОсновнойGTIN      = КодыGTIN[0].Значение;
				ПредставлениеGTIN = ОсновнойGTIN;
			ИначеЕсли КодыGTIN.Количество() > 1 Тогда
				ПредставлениеGTIN = СтрШаблон(НСтр("ru = '%1 ( + еще %2)'"),
					КодыGTIN[0].Значение, КодыGTIN.Количество() - 1);
			КонецЕсли;
			
			НоменклатураСопоставлена     = ЗначениеЗаполнено(СтрокаДопЗаполнения.Номенклатура);
			ВозможнаТолькоОднаКомбинация = Ложь;
			ИндексПервойСтрокиGTIN       = Неопределено;
			
			Если МаркированнаяПродукцияИСМП.Количество() > 0 Тогда
				
				СтруктураПоискаGTIN = Новый Структура("GTIN, Номенклатура",
					СтрокаПродукцииДокумента.GTIN, ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
				ВыполнитьЗаполнениеНоменклатуры = Ложь;
				
				СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПродукцииИСМП.Количество() = 0
					И НеСопоставленаМаркируемаяПродукция
					И ЗначениеЗаполнено(СтрокаПродукцииДокумента.GTIN) Тогда
					СтрокиПродукцииИСМП             = МаркированнаяПродукцияИСМП.НайтиСтроки(СтруктураПоискаGTIN);
					ВыполнитьЗаполнениеНоменклатуры = СтрокиПродукцииИСМП.Количество() > 0;
				КонецЕсли;
				
				// Различия в найденных строках:
				// 1. GTIN
				// 2. Свойства вида продукции:
				// 2.1. Для табака: + МРЦ
				
				Для Каждого СтрокаПродукцииИСМП Из СтрокиПродукцииИСМП Цикл
					Если СтрокаПродукцииИСМП.КоличествоИС <> 0 Тогда
						НоваяСтрока = ДанныеРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПродукцииИСМП);
						НоваяСтрока.ИсходнаяСтрока = СтрокаПродукцииИСМП;
					КонецЕсли;
				КонецЦикла;
				
				ВозможнаТолькоОднаКомбинация = (КодыGTIN.Количество() = 1 И ДанныеРаспределения.Количество() = 1);
				
				ГруппировкаПоGTIN = ДанныеРаспределения.Скопировать();
				ГруппировкаПоGTIN.Свернуть("GTIN", "КоличествоИС");
				
				Для Каждого СтрокаGTIN Из ГруппировкаПоGTIN Цикл
					
					ОтборПоGTIN = Новый Структура("GTIN", СтрокаGTIN.GTIN);
					СтрокиПоGTIN = ДанныеРаспределения.НайтиСтроки(ОтборПоGTIN);
					
					Для Каждого СтрокаПоGTIN Из СтрокиПоGTIN Цикл
						
						СтрокаПродукцииИСМП = СтрокаПоGTIN.ИсходнаяСтрока;
						
						НеобходимоеКоличество = КоличествоПоДокументу - КоличествоПодобрано;
						КоличествоПоСтроке    = Мин(НеобходимоеКоличество, СтрокаПоGTIN.КоличествоИС);
						КоличествоПодобрано   = КоличествоПодобрано + КоличествоПоСтроке;
						
						СтрокаПоGTIN.КоличествоИС = СтрокаПоGTIN.КоличествоИС - КоличествоПоСтроке;
						СтрокаGTIN.КоличествоИС   = СтрокаGTIN.КоличествоИС - КоличествоПоСтроке;
						
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураПоиска);
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПоGTIN, КолонкиГруппировкиПоДокументуСтрокой); // GTIN, ...
						СтрокаПродукции.Количество            = КоличествоПоСтроке;
						СтрокаПродукции[ИмяКолонкиКоличество] = КоличествоПоСтроке;
						СтрокаПродукции.КодыGTIN              = КодыGTIN;
						СтрокаПродукции.ПредставлениеGTIN     = ПредставлениеGTIN;
						
						СтрокаПродукции.СтатусУказанияСерий        = СтрокаДопЗаполнения.СтатусУказанияСерий;
						СтрокаПродукции.ТипНоменклатуры            = СтрокаДопЗаполнения.ТипНоменклатуры;
						СтрокаПродукции.ХарактеристикиИспользуются = СтрокаДопЗаполнения.ХарактеристикиИспользуются;
						СтрокаПродукции.НоменклатураСопоставлена   = НоменклатураСопоставлена;
						
						Если ЗначениеЗаполнено(СтрокаДопЗаполнения.ПредставлениеНоменклатуры) Тогда
							ПредставлениеНоменклатуры = СтрокаДопЗаполнения.ПредставлениеНоменклатуры;
						Иначе
							ПредставлениеНоменклатуры = СтрокаПродукцииИСМП.ПредставлениеНоменклатуры;
						КонецЕсли;
						СтрокаПродукции.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
						
						СтрокаПродукции.НоменклатураСопоставленаПоУПД = СтрокаПродукцииИСМП.НоменклатураСопоставленаПоУПД;
						
						СтрокаПродукцииИСМП.КоличествоИС = СтрокаПоGTIN.КоличествоИС;
						
						Если ИндексПервойСтрокиGTIN = Неопределено Тогда
							ИндексПервойСтрокиGTIN = ПодобраннаяМаркируемаяПродукцияНовая.Индекс(СтрокаПродукции);
						КонецЕсли;
						
						Если КоличествоПоДокументу = КоличествоПодобрано Тогда
							ОстатокПоСтроке = СтрокаПоGTIN.КоличествоИС;
							Если ОстатокПоСтроке > 0 И (ВозможнаТолькоОднаКомбинация Или СтрокиПоGTIN.Количество() = 1) Тогда
								СтрокаПоGTIN.КоличествоИС             = 0;
								СтрокаПродукцииИСМП.КоличествоИС      = 0;
								СтрокаПродукции[ИмяКолонкиКоличество] = СтрокаПродукции[ИмяКолонкиКоличество] + ОстатокПоСтроке;
								СтрокаGTIN.КоличествоИС               = СтрокаGTIN.КоличествоИС - ОстатокПоСтроке;
								КоличествоПодобрано                   = КоличествоПодобрано + ОстатокПоСтроке;
							КонецЕсли;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если СтрокаGTIN.КоличествоИС = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Выполняем добавление именно тут только для красивой сортировки
					Для Каждого СтрокаПоGTIN Из СтрокиПоGTIN Цикл
						
						Если СтрокаПоGTIN.КоличествоИС = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураПоиска);
						ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПоGTIN, КолонкиГруппировкиПоДокументуСтрокой); // GTIN, ...
						СтрокаПродукции.Количество            = 0;
						СтрокаПродукции[ИмяКолонкиКоличество] = СтрокаПоGTIN.КоличествоИС;
						
						СтрокаПродукции.СтатусУказанияСерий        = СтрокаДопЗаполнения.СтатусУказанияСерий;
						СтрокаПродукции.ТипНоменклатуры            = СтрокаДопЗаполнения.ТипНоменклатуры;
						СтрокаПродукции.ХарактеристикиИспользуются = СтрокаДопЗаполнения.ХарактеристикиИспользуются;
						СтрокаПродукции.НоменклатураСопоставлена   = НоменклатураСопоставлена;
						
						Если ЗначениеЗаполнено(СтрокаДопЗаполнения.ПредставлениеНоменклатуры) Тогда
							ПредставлениеНоменклатуры = СтрокаДопЗаполнения.ПредставлениеНоменклатуры;
						Иначе
							ПредставлениеНоменклатуры = СтрокаПоGTIN.ИсходнаяСтрока.ПредставлениеНоменклатуры;
						КонецЕсли;
						СтрокаПродукции.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
						
						СтрокаПоGTIN.КоличествоИС                = 0;
						СтрокаПоGTIN.ИсходнаяСтрока.КоличествоИС = 0;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если ВыполнитьЗаполнениеНоменклатуры Тогда
					СтрокиИсходнойМаркируемойПродукции = ТаблицаМаркируемойПродукции.НайтиСтроки(СтруктураПоискаGTIN);
					Для Каждого СтрокаТаблицыМаркируемойПродукции Из СтрокиИсходнойМаркируемойПродукции Цикл
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыМаркируемойПродукции, СтруктураПоиска);
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыМаркируемойПродукции.СтрокаДерева, СтруктураПоиска);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли; // Распределение по МаркированнаяПродукцияИСМП
			
			СтрокаПродукцииДокумента[ИмяКолонкиКоличество] = КоличествоПодобрано;
			
			НеобходимоеКоличество = КоличествоПоДокументу - КоличествоПодобрано;
			
			Если НеобходимоеКоличество > 0 Тогда
				
				Если Не ВозможнаТолькоОднаКомбинация Тогда
					Если ИндексПервойСтрокиGTIN = Неопределено Тогда
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
					Иначе
						СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Вставить(ИндексПервойСтрокиGTIN);
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураПоиска);
					Если ОсновнойGTIN <> Неопределено Тогда
						СтрокаПродукции.GTIN = ОсновнойGTIN;
					КонецЕсли;
					СтрокаПродукции.КодыGTIN          = КодыGTIN;
					СтрокаПродукции.ПредставлениеGTIN = ПредставлениеGTIN;
					
					СтрокаПродукции.СтатусУказанияСерий        = СтрокаДопЗаполнения.СтатусУказанияСерий;
					СтрокаПродукции.ТипНоменклатуры            = СтрокаДопЗаполнения.ТипНоменклатуры;
					СтрокаПродукции.ХарактеристикиИспользуются = СтрокаДопЗаполнения.ХарактеристикиИспользуются;
					СтрокаПродукции.НоменклатураСопоставлена   = НоменклатураСопоставлена;
					СтрокаПродукции.ПредставлениеНоменклатуры  = СтрокаДопЗаполнения.ПредставлениеНоменклатуры;
				КонецЕсли;
				
				СтрокаПродукции.Количество = СтрокаПродукции.Количество + НеобходимоеКоличество;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Распределение по данным документа + по данным маркированного товара
	#КонецОбласти
	
	Если ПодобраннаяМаркируемаяПродукцияНовая.Количество() > 0 И МаркированнаяПродукцияИСМП.Количество() > 0 Тогда
		
		СтрокиСПустойНоменклатурой = ПодобраннаяМаркируемаяПродукцияНовая.НайтиСтроки(
			Новый Структура("Номенклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура")));
		
		Для Каждого СтрокаДляАнализа Из СтрокиСПустойНоменклатурой Цикл
			
			Если СтрокаДляАнализа[ИмяКолонкиКоличество] >= СтрокаДляАнализа.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиПродукцииИСМП = МаркированнаяПродукцияИСМП.НайтиСтроки(Новый Структура("GTIN", СтрокаДляАнализа.GTIN));
			Для Каждого СтрокаПродукцииИСМП Из СтрокиПродукцииИСМП Цикл
				
				Если СтрокаПродукцииИСМП.КоличествоИС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаДляАнализа[ИмяКолонкиКоличество] >= СтрокаДляАнализа.Количество Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоКРаспределению = Мин((СтрокаДляАнализа.Количество - СтрокаДляАнализа[ИмяКолонкиКоличество]),
					СтрокаПродукцииИСМП.КоличествоИС);
				
				СтрокаДляАнализа.Количество      = СтрокаДляАнализа.Количество - КоличествоКРаспределению;
				СтрокаПродукцииИСМП.КоличествоИС = СтрокаПродукцииИСМП.КоличествоИС - КоличествоКРаспределению;
				
				СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПродукцииИСМП,, "КоличествоИС");
				СтрокаПродукции.Количество            = КоличествоКРаспределению;
				СтрокаПродукции[ИмяКолонкиКоличество] = КоличествоКРаспределению;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПродукцииИСМП Из МаркированнаяПродукцияИСМП Цикл
		
		Если СтрокаПродукцииИСМП.КоличествоИС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПродукции = ПодобраннаяМаркируемаяПродукцияНовая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтрокаПродукцииИСМП,, "КоличествоИС");
		
		СтрокаПродукции[ИмяКолонкиКоличество] = СтрокаПродукцииИСМП.КоличествоИС;
		СтрокаПродукцииИСМП.КоличествоИС      = 0;
		
	КонецЦикла;
	
	НомерСтроки = 0;
	Для Каждого СтрокаПродукции Из ПодобраннаяМаркируемаяПродукцияНовая Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаПродукции.НомерСтроки = НомерСтроки;
		СтрокаПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПродукции.Номенклатура);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПродукции);
	КонецЦикла;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		ПодобраннаяМаркируемаяПродукцияНовая, ДанныеДокумента.Организация, ВидПродукции, "ПредставлениеНоменклатуры");
	
	ДанныеДокумента.ПодобраннаяМаркируемаяПродукция = ПодобраннаяМаркируемаяПродукцияНовая;
	
КонецПроцедуры

Процедура ПриОчисткиСопоставленияМаркированнойПродукции(Форма, ИдентификаторыДереваМаркированнойПродукции) Экспорт
	
	ПредставленияGTIN                  = Новый Соответствие;
	ТаблицаПредставлениеОстаточныхGTIN = ПроверкаИПодборПродукцииИСМП.ИнициализироватьТаблицуПредставлениеОстаточныхGTIN("ПредставлениеНоменклатуры");
	
	МассивСтрокДерева = Новый Массив;
	
	Для Каждого ИдентификаторИзмененойСтроки Из ИдентификаторыДереваМаркированнойПродукции Цикл
		
		СтрокаДерева = Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
		
		Если СтрокаДерева = Неопределено
			Или Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
			Или СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
			Или СтрокаДерева.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокДерева.Добавить(СтрокаДерева);
		
		Если ПредставленияGTIN[СтрокаДерева.GTIN] = Неопределено
			И Не ЗначениеЗаполнено(СтрокаДерева.ПредставлениеСодержимогоДоСопоставления) Тогда
			
			ПредставленияGTIN[СтрокаДерева.GTIN] = НСтр("ru = '<Не сопоставлено>'");
			Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДерева.GTIN) Тогда
				СтрокаТаблицы      = ТаблицаПредставлениеОстаточныхGTIN.Добавить();
				СтрокаТаблицы.GTIN = СтрокаДерева.GTIN;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		ТаблицаПредставлениеОстаточныхGTIN,, Форма.ВидМаркируемойПродукции, "ПредставлениеНоменклатуры");
	
	Для Каждого СтрокаТаблицыПредставлений Из ТаблицаПредставлениеОстаточныхGTIN Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыПредставлений.ПредставлениеНоменклатуры) Тогда
			ПредставленияGTIN[СтрокаТаблицыПредставлений.GTIN] = СтрокаТаблицыПредставлений.ПредставлениеНоменклатуры;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаБезСопоставления = ПроверкаИПодборПродукцииИСМП.ИнициализироватьПустуюСтруктуруСтрокиДляОчисткиСопоставления();
	
	ПодобраннаяПродукцияДляОчисткиСопоставления = Новый ТаблицаЗначений;
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Номенклатура",                    Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Характеристика",                  Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Серия",                           Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ПредставлениеНоменклатуры",       Новый ОписаниеТипов("Строка"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Изменение",                       Новый ОписаниеТипов("Число"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("СтатусПроверки",                  Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Скоропортящаяся",                 Новый ОписаниеТипов("Булево"));
	
	Если Форма.ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("МРЦ",         Новый ОписаниеТипов("Число"));
		ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ВключаетМРЦ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		
		СтрокаДляОчисткиСопоставления = ПодобраннаяПродукцияДляОчисткиСопоставления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДляОчисткиСопоставления, СтрокаДерева);
		СтрокаДляОчисткиСопоставления.ПредставлениеНоменклатуры = ПредставленияGTIN[СтрокаДерева.GTIN];
		СтрокаДляОчисткиСопоставления.Изменение                 = 1;
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаБезСопоставления);
		
		Если ЗначениеЗаполнено(СтрокаДерева.ПредставлениеСодержимогоДоСопоставления) Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.ПредставлениеСодержимогоДоСопоставления;
		Иначе
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставленияGTIN[СтрокаДерева.GTIN];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодобраннаяПродукцияДляОчисткиСопоставления.Количество() > 0 Тогда
		
		КолонкиГруппировок  = Новый Массив;
		КолонкиСуммирования = "Изменение";
		Для Каждого КолонкаТаблицы Из ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки Цикл
			Если НРег(КолонкаТаблицы.Имя) = НРег(КолонкиСуммирования) Тогда
				Продолжить;
			КонецЕсли;
			КолонкиГруппировок.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		ПодобраннаяПродукцияДляОчисткиСопоставления.Свернуть(СтрСоединить(КолонкиГруппировок, ","), КолонкиСуммирования);
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриОчисткиСопоставления(
			Форма, ПодобраннаяПродукцияДляОчисткиСопоставления, ПроверкаИПодборПродукцииИСМП);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидПродукцииРодительный(ВидПродукции) Экспорт
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Возврат НСтр("ru = 'молока и молочной продукции (ВетИС)'");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		Возврат НСтр("ru = 'молока и молочной продукции (неподконтрольной ВетИС)'");
	КонецЕсли;
	Возврат НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Родительный")[0]);
КонецФункции

Функция ВидПродукцииВинительный(ВидПродукции) Экспорт
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Возврат НСтр("ru = 'молоко и молочную продукцию (ВетИС)'");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		Возврат НСтр("ru = 'молоко и молочную продукцию (неподконтрольную ВетИС)'");
	КонецЕсли;
	Возврат НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Винительный")[0]);
КонецФункции

Процедура ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор) Экспорт
	КэшированныеЗначения = Неопределено;
	СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(Форма, СтрокаАгрегатор, КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
КонецПроцедуры

Процедура ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор) Экспорт
	КэшированныеЗначения = Неопределено;
	СобытияФормИСМППереопределяемый.ПриИзмененииКоличества(Форма, СтрокаАгрегатор, КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

//Формирует пустую таблицу маркируемой продукции
//
//Возвращаемое значение:
//  ТаблицаЗначений - таблица определяющая состав маркируемой продукции документа:
//    GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//    Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//    Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//    Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//    Количество     - Число                                      - количество.
//    КодыGTIN       - СписокЗначений из ОпределяемыйТип.GTIN     - штрихкоды номенклатура.
//
Функция НоваяТаблицаМаркируемойПродукции()
	
	ТаблицаМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаМаркируемойПродукции.Колонки.Добавить("GTIN",           Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	ТаблицаМаркируемойПродукции.Колонки.Добавить("КодыGTIN",       Новый ОписаниеТипов("СписокЗначений"));
	
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

Функция ИнициализироватьТаблицуПредставлениеОстаточныхGTIN(ИмяКолонкиПредставление = "ПредставлениеGTINОстатки") Экспорт
	
	ТаблицаПредставлениеОстаточныхGTIN = Новый ТаблицаЗначений;
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить("GTIN",                     Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить(ИмяКолонкиПредставление,    Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Возврат ТаблицаПредставлениеОстаточныхGTIN;
	
КонецФункции

Функция ИнициализироватьПустуюСтруктуруСтрокиДляОчисткиСопоставления() Экспорт
	
	СтрокаБезСопоставления = Новый Структура;
	СтрокаБезСопоставления.Вставить("Номенклатура",   ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	СтрокаБезСопоставления.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	СтрокаБезСопоставления.Вставить("Серия",          ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Возврат СтрокаБезСопоставления;
	
КонецФункции

Процедура ДополнитьКолонкамиПоВидуПродукции(ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции)
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",  Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ИдентификаторыПроисхожденияВЕТИС", Новый ОписаниеТипов("Массив"));
		ТаблицаМаркируемойПродукции.Колонки.Добавить("Скоропортящаяся",                  Новый ОписаниеТипов("Булево"));
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
		
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
	
		ТаблицаМаркируемойПродукции.Колонки.Добавить("Скоропортящаяся",                  Новый ОписаниеТипов("Булево"));
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПустыеУпаковкиВСтрокахДерева(СтрокиДерева)
	
	КоличествоСтрок = СтрокиДерева.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		СтрокаДерева = СтрокиДерева[КоличествоСтрок - ОбратныйИндекс];
		
		Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ПодчиненныеСтроки = СтрокаДерева.Строки;
			
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				УдалитьПустыеУпаковкиВСтрокахДерева(ПодчиненныеСтроки);
			КонецЕсли;
			
			Если ПодчиненныеСтроки.Количество() = 0
				И СтрокаДерева.КоличествоПодчиненнойПродукции = 0 Тогда
				СтрокиДерева.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковокРекурсивно(ТаблицаОписанияGTIN, УзелДерева) Экспорт
	
	Для Каждого СтрокаДерева Из УзелДерева.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковокРекурсивно(ТаблицаОписанияGTIN, СтрокаДерева);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("GTIN",        СтрокаДерева.GTIN);
		СтруктураПоиска.Вставить("ВидУпаковки", СтрокаДерева.ВидУпаковки);
		
		ПоискСтрок = ТаблицаОписанияGTIN.НайтиСтроки(СтруктураПоиска);
		
		Если ПоискСтрок.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОписанияGTIN.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// Фиксирует результаты сопоставления GTIN с номенклатурой и информацию о групповых упаковках.
//
// Параметры:
//   РезультатПроверки - См. ПараметрыОкончанияПроверки.
//
Процедура ЗафиксироватьОписаниеGTIN(РезультатПроверки)
	
	Если РезультатПроверки.ТаблицаОписанияGTIN = Неопределено
		Или РезультатПроверки.ТаблицаОписанияGTIN.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОписаниеGTINИС.УстановитьОписаниеПоТаблице(РезультатПроверки.ТаблицаОписанияGTIN);
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЗафиксироватьОписаниеGTIN(РезультатПроверки.ТаблицаОписанияGTIN);
	
КонецПроцедуры

#Область ВстраиваниеФормыПроверкиИПодбора

Процедура УправлениеВидимостьюЭлементовПроверкиИПодбора(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если (ПараметрыИнтеграции = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыИнтеграции.ВидыПродукции Цикл
		Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если Настройки = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Форма[Настройки.ИмяРеквизитаФормыОбъект];
		ТабличнаяЧастьТовары = Объект[Настройки.ИмяТабличнойЧастиТовары];
		
		ВидимостьЭлементов = Настройки.ИспользоватьБезМаркируемойПродукции
			Или ПроверкаИПодборПродукцииИСМП.ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидПродукции);
		
		УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ВидПродукции, ВидимостьЭлементов);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриПримененииПараметровИнтеграцииФормыПроверкиИПодбора(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти