#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИнтеграцияЕГАИСБП.ЗаполнениеДокументовЕГАИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//Если ПроверяемыеРеквизиты.Найти("Товары.Номенклатура") <> Неопределено Тогда
	//	МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
	//КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("Товары.Серия") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
	КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("Товары.Характеристика") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("Характеристика") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Найти("ВложенныеТовары.Характеристика") <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВложенныеТовары.Характеристика");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СоотвествиеРеквизитов = Новый Соответствие;
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.АктПостановкиНаБалансЕГАИС") , "ОрганизацияЕГАИС");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.АктСписанияЕГАИС"),            "ОрганизацияЕГАИС");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ВозвратИзРегистра2ЕГАИС"),     "ОрганизацияЕГАИС");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ЗапросАкцизныхМарокЕГАИС"),    "ОрганизацияЕГАИС");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ОтчетЕГАИС"),                  "ОрганизацияЕГАИС");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ПередачаВРегистр2ЕГАИС"),      "ОрганизацияЕГАИС");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ТТНВходящаяЕГАИС"),            "Грузополучатель");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ТТНИсходящаяЕГАИС"),           "Грузоотправитель");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ЧекЕГАИС"),                    "ОрганизацияЕГАИС");
	СоотвествиеРеквизитов.Вставить(Тип("ДокументОбъект.ЧекЕГАИСВозврат"),             "ОрганизацияЕГАИС");
	
	РеквизитОрганизации = СоотвествиеРеквизитов[ТипЗнч(ДокументОбъект)];
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОстаткиЕГАИС") Тогда
		РегистрыСведений.НастройкаУчетаОстатковЕГАИС.УстановитьНастройкиУчетаОстатков(ДокументОбъект.ОрганизацияЕГАИС.Код, ДокументОбъект.Дата, Ложь);
	ИначеЕсли РеквизитОрганизации <> Неопределено
		И ДокументОбъект.Движения.ОстаткиАлкогольнойПродукцииЕГАИС.Количество() > 0
		И НЕ РегистрыСведений.НастройкаУчетаОстатковЕГАИС.ВедетсяУчетОстатков(ДокументОбъект[РеквизитОрганизации], ДокументОбъект.Дата) Тогда 
		ДокументОбъект.Движения.ОстаткиАлкогольнойПродукцииЕГАИС.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

//Формирует временную таблицу организаций ЕГАИС (с настроенным обменом) использующих регистр №2
//
// Параметры:
//   ТекстЗапроса        - Строка - заполняемый текст запроса.
//   ИмяВременнойТаблицы - Строка - имя создаваемой временной таблицы.
//   ИмяПоляОрганизация  - Строка - поле с организацией ЕГАИС в создаваемой таблице.
//
Процедура ТекстЗапросаОрганизацииЕГАИСИспользующиеРегистр2(
	ТекстЗапроса,
	ИмяВременнойТаблицы = "РозничныеОрганизацииЕГАИС",
	ИмяПоляОрганизация = "Ссылка") Экспорт
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизацииЕГАИС.Ссылка КАК %1
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК ОрганизацииЕГАИС
		|		ПО ОрганизацииЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО ОрганизацииЕГАИС.ТорговыйОбъект = Склады.Ссылка
		|ГДЕ
		|	Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
		|",
		ИмяПоляОрганизация,
		ИмяВременнойТаблицы);
	
КонецПроцедуры

#Область СопоставлениеКлассификаторовЕГАИС

// Процедура определяет текст запроса сопоставления организаций ЕГАИС из входящих ТТН контрагентам 
//   Ожидаемые свойства текста запроса:
//    * Используется входящий параметр &СписокТТН
//    * В последнем запросе пакета возвращается таблица организаций ЕГАИС без найденных сопоставлений
//    * В предпоследнем запросе пакета возвращается таблица найденных сопоставлений
//    * В предпредпоследнем запросе пакета возвращается таблица контрагентов для сопоставления
// Параметры:
//   ТекстЗапроса - Строка - текст запроса.
//
Процедура ПриЗаполненииТекстаЗапросаСопоставленияОрганизацийЕГАИСПоТТН(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН                                 КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП                                 КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование                        КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное,1,255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект                      КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент                          КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено                        КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузоотправитель КАК ОрганизацияЕГАИС
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Грузополучатель
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТТНВходящаяЕГАИС.Поставщик
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|	ГДЕ
	|		ТТНВходящаяЕГАИС.Ссылка В(&СписокТТН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ТТНВходящаяЕГАИС.Товары КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка В(&СписокТТН)) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка))
	|	И НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование     КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка                 КАК Контрагент1,
	|	НЕОПРЕДЕЛЕНО                        КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка                 КАК Контрагент2,
	|	НЕОПРЕДЕЛЕНО                        КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС   КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование       КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект     КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент         КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено       КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН                КАК ИНН,
	|	ОрганизацииЕГАИС.КПП                КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС                                         КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(Сопоставления.Контрагент1,     Сопоставления.Контрагент2)     КАК Контрагент,
	|	ЕстьNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ НЕ NULL
	|	ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС  КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL
	|";
	
КонецПроцедуры

// Процедура определяет текст запроса сопоставления алкогольной продукции ЕГАИС из входящих ТТН номенклатуре
//   Ожидаемые свойства текста запроса:
//    * Используется входящий параметр &СписокТТН
//    * В предпоследнем запросе пакета возвращается таблица алкогольной продукции с колонками
//     ** АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукции - ссылка на алкогольную продукцию,
//     ** Наименование         - Строка                                             - ее наименование.
//    * В последнем запросе пакета возвращается таблица номенклатуры с колонками
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру алкогольной продукции,
//     ** Наименование         - Строка                       - ее наименование.
//    * В одном из запросов пакета создается временная таблица втНоменклатура с колонками
//     ** Номенклатура,
//     ** Наименование,
//     ** ВидАлкогольнойПродукции,
//     ** ПроизводительИмпортерДляДекларацийАлко,
//     ** ОбъемДАЛ,
//     ** Крепость.
//    * В одном из запросов пакета создается временная таблица втДанныеТТН с колонками
//     ** АлкогольнаяПродукция,
//     ** ИдентификаторУпаковки,
//     ** Количество,
//     ** Номенклатура,
//     ** Характеристика,
//     ** Серия,
//     ** Наименование,
//     ** НаименованиеПолное,
//     ** Объем,
//     ** Крепость,
//     ** Производитель,
//     ** Импортер,
//     ** ПроизводительИБ,
//     ** ИмпортерИБ.
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса.
//
Процедура ПриЗаполненииТекстаЗапросаСопоставленияНоменклатурыПоТТН(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&СписокТТН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ втАлкогольнаяПродукция
	|ИЗ
	|	втТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ СопоставленоПозиций
	|ИЗ
	|	втАлкогольнаяПродукция КАК втАлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = втАлкогольнаяПродукция.АлкогольнаяПродукция)
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	втАлкогольнаяПродукция.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем КАК Объем,
	|	Товары.АлкогольнаяПродукция.Крепость КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер КАК Импортер,
	|	ЕСТЬNULL(СопоставленоПозиций.Количество, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Характеристика = """"
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Характеристика
	|		ИНАЧЕ Товары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Серия = """"
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Серия
	|		ИНАЧЕ Товары.Серия
	|	КОНЕЦ КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленоПозиций КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО Товары.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И (СопоставленоПозиций.Количество = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	ВидыАлкогольнойПродукции.Ссылка КАК ВидАлкогольнойПродукции,
	|	ВЫБОР 
	|		КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) 
	|			ТОГДА СправочникНоменклатура.Производитель 
	|		ИНАЧЕ СправочникНоменклатура.Импортер 
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК ОбъемДАЛ,
	|	0 КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО СправочникНоменклатура.Ссылка = СведенияОбАлкогольнойПродукции.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО СведенияОбАлкогольнойПродукции.КодВида169 = ВидыАлкогольнойПродукции.Код
	|ГДЕ
	|	НЕ СведенияОбАлкогольнойПродукции.Номенклатура ЕСТЬ NULL
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура";
	
КонецПроцедуры

// Процедура определяет текст запроса сопоставления организаций ЕГАИС из входящих данных (товаров и организаций) контрагентам 
//   Ожидаемые свойства текста запроса:
//    * Используется входящий параметр &Товары: таблица с колонками
//     ** АлкогольнаяПродукция,
//     ** ИдентификаторУпаковки,
//     ** Номенклатура,
//     ** Характеристика.
//    * Используется входящий параметр &ОрганизацииЕГАИС: таблица с колонками
//     ** ОрганизацияЕГАИС
//    * В последнем запросе пакета возвращается таблица организаций ЕГАИС без найденных сопоставлений
//    * В предпоследнем запросе пакета возвращается таблица найденных сопоставлений
//    * В предпредпоследнем запросе пакета возвращается таблица контрагентов для сопоставления
// Параметры:
//   ТекстЗапроса - Строка - текст запроса.
//
Процедура ПриЗаполненииТекстаЗапросаСопоставленияОрганизацийЕГАИСПоВходящимДанным(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ПОМЕСТИТЬ втТаблицаОрганизацииЕГАИС
	|ИЗ
	|	&ОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ИНН                                 КАК ИНН,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.КПП                                 КАК КПП,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Наименование                        КАК Наименование,
	|	ПОДСТРОКА(ВложенныйЗапрос.ОрганизацияЕГАИС.НаименованиеПолное,1,255) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.ТорговыйОбъект                      КАК ТорговыйОбъект,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Контрагент                          КАК Контрагент,
	|	ВложенныйЗапрос.ОрганизацияЕГАИС.Сопоставлено                        КАК Сопоставлено
	|ПОМЕСТИТЬ ВтОрганизацииЕГАИС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|	ИЗ
	|		втТаблицаОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТабличнаяЧасть.АлкогольнаяПродукция.Производитель
	|			ИНАЧЕ ТабличнаяЧасть.АлкогольнаяПродукция.Импортер
	|		КОНЕЦ
	|	ИЗ
	|		втТаблицаТовары КАК ТабличнаяЧасть) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка))
	|	И НЕ (ВложенныйЗапрос.ОрганизацияЕГАИС.СоответствуетОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОрганизацииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ВтОрганизацииЕГАИС.Наименование     КАК НаименованиеЕГАИС,
	|	Контрагенты1.Ссылка                 КАК Контрагент1,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК ТорговыйОбъект1,
	|	Контрагенты2.Ссылка                 КАК Контрагент2,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК ТорговыйОбъект2
	|ПОМЕСТИТЬ ВтСопоставления
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ВтОрганизацииЕГАИС
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты1
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты1.ИНН
	|			И ВтОрганизацииЕГАИС.КПП = Контрагенты1.КПП
	|			И (НЕ Контрагенты1.ИНН = """")
	|			И (НЕ Контрагенты1.ПометкаУдаления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты2
	|		ПО ВтОрганизацииЕГАИС.ИНН = Контрагенты2.ИНН
	|			И (НЕ Контрагенты2.ИНН = """")
	|			И (НЕ Контрагенты2.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииЕГАИС.ОрганизацияЕГАИС   КАК ОрганизацияЕГАИС,
	|	ОрганизацииЕГАИС.Наименование       КАК Наименование,
	|	ОрганизацииЕГАИС.ТорговыйОбъект     КАК ТорговыйОбъект,
	|	ОрганизацииЕГАИС.Контрагент         КАК Контрагент,
	|	ОрганизацииЕГАИС.Сопоставлено       КАК Сопоставлено,
	|	ОрганизацииЕГАИС.ИНН                КАК ИНН,
	|	ОрганизацииЕГАИС.КПП                КАК КПП,
	|	ОрганизацииЕГАИС.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	ВтОрганизацииЕГАИС КАК ОрганизацииЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС                                         КАК ОрганизацияЕГАИС,
	|	ЕстьNULL(Сопоставления.Контрагент1,     Сопоставления.Контрагент2)     КАК Контрагент,
	|	ЕстьNULL(Сопоставления.ТорговыйОбъект1, Сопоставления.ТорговыйОбъект2) КАК ТорговыйОбъект
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ НЕ NULL
	|	ИЛИ Сопоставления.Контрагент2 ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сопоставления.ОрганизацияЕГАИС  КАК ОрганизацияЕГАИС,
	|	Сопоставления.НаименованиеЕГАИС КАК НаименованиеЕГАИС
	|ИЗ
	|	ВтСопоставления КАК Сопоставления
	|ГДЕ
	|	Сопоставления.Контрагент1 ЕСТЬ NULL
	|	И Сопоставления.Контрагент2 ЕСТЬ NULL
	|";
	
КонецПроцедуры

// Процедура определяет текст запроса сопоставления алкогольной продукции ЕГАИС из входящих данных номенклатуре
//   Ожидаемые свойства текста запроса:
//    * Используется входящий параметр &Товары: таблица с колонками
//     ** АлкогольнаяПродукция,
//     ** ИдентификаторУпаковки,
//     ** Номенклатура,
//     ** Характеристика,
//     ** Серия.
//    * В предпоследнем запросе пакета возвращается таблица алкогольной продукции с колонками
//     ** АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукции - ссылка на алкогольную продукцию,
//     ** Наименование         - Строка                                             - ее наименование.
//    * В последнем запросе пакета возвращается таблица номенклатуры с колонками
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура - ссылка на номенклатуру алкогольной продукции,
//     ** Наименование         - Строка                       - ее наименование.
//    * В одном из запросов пакета создается временная таблица втНоменклатура с колонками
//     ** Номенклатура,
//     ** Наименование,
//     ** ВидАлкогольнойПродукции,
//     ** ПроизводительИмпортерДляДекларацийАлко,
//     ** ОбъемДАЛ,
//     ** Крепость.
//    * В одном из запросов пакета создается временная таблица втДанныеТТН с колонками
//     ** АлкогольнаяПродукция,
//     ** ИдентификаторУпаковки,
//     ** Количество,
//     ** Номенклатура,
//     ** Характеристика,
//     ** Серия,
//     ** Наименование,
//     ** НаименованиеПолное,
//     ** Объем,
//     ** Крепость,
//     ** Производитель,
//     ** Импортер,
//     ** ПроизводительИБ,
//     ** ИмпортерИБ.
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса.
//
Процедура ТекстЗапросаСопоставлениеНоменклатурыПоВходящимДанным(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Серия                 КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
//	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция                                      КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Количество
	|ПОМЕСТИТЬ КоличествоСопоставлено
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (Товары.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция)
	|СГРУППИРОВАТЬ ПО
	|	Товары.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторУпаковки                                      КАК ИдентификаторУпаковки,
	|	Товары.АлкогольнаяПродукция                                       КАК АлкогольнаяПродукция,
	|	Товары.АлкогольнаяПродукция.Объем                                 КАК Объем,
	|	Товары.АлкогольнаяПродукция.Крепость                              КАК Крепость,
	|	Товары.АлкогольнаяПродукция.Наименование                          КАК Наименование,
	|	ПОДСТРОКА(Товары.АлкогольнаяПродукция.НаименованиеПолное, 1, 255) КАК НаименованиеПолное,
	|	Товары.АлкогольнаяПродукция.ВидПродукции                          КАК ВидПродукции,
	|	Товары.АлкогольнаяПродукция.Производитель.Контрагент              КАК ПроизводительИБ,
	|	Товары.АлкогольнаяПродукция.Импортер.Контрагент                   КАК ИмпортерИБ,
	|	Товары.АлкогольнаяПродукция.Производитель                         КАК Производитель,
	|	Товары.АлкогольнаяПродукция.Импортер                              КАК Импортер,
	|	ЕСТЬNULL(КоличествоСопоставлено.Количество, 0)                    КАК Количество,
	|	Товары.Номенклатура                                               КАК Номенклатура,
	|	Товары.Характеристика                                             КАК Характеристика,
	|	Товары.Серия                                                      КАК Серия
	|ПОМЕСТИТЬ втДанныеТТН
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО (Товары.АлкогольнаяПродукция = КоличествоСопоставлено.АлкогольнаяПродукция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	ВидыАлкогольнойПродукции.Ссылка КАК ВидАлкогольнойПродукции,
	|	ВЫБОР 
	|		КОГДА СправочникНоменклатура.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) 
	|			ТОГДА СправочникНоменклатура.Производитель 
	|		ИНАЧЕ СправочникНоменклатура.Импортер 
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК ОбъемДАЛ,
	|	0 КАК Крепость
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО СправочникНоменклатура.Ссылка = СведенияОбАлкогольнойПродукции.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО СведенияОбАлкогольнойПродукции.КодВида169 = ВидыАлкогольнойПродукции.Код
	|ГДЕ
	|	НЕ СведенияОбАлкогольнойПродукции.Номенклатура ЕСТЬ NULL
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втДанныеТТН.Наименование         КАК Наименование
	|ИЗ
	|	втДанныеТТН КАК втДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов
// Параметры:
//   ТекстЗапроса - заполняемый текст запроса
//
Процедура ТекстЗапросаАктПостановкиНаБалансЕГАИСОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ)
	|	* КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ПОМЕСТИТЬ
	|	ВремТаблВРегистры1И2
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеИзлишковТоваров
	|ПО
	|	СтатусыОформленияДокументовЕГАИС.Основание = ОприходованиеИзлишковТоваров.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ПО
	|	КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)
	|
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктПостановкиНаБалансЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры)
	|	)
	|	И ОприходованиеИзлишковТоваров.Ссылка ЕСТЬ НЕ NULL
	|	И (ОприходованиеИзлишковТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РАЗЛИЧНЫЕ 0.5 КАК КоличествоДокументов
	|ПОМЕСТИТЬ
	|	ВремТаблВРегистр3
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс)
	|	И (АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС) ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И НЕ АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВРегистры1И2.КоличествоДокументов, 0) + ЕСТЬNULL(ВРегистр3.КоличествоДокументов, 0) КАК КоличествоДокументов
	|ИЗ
	|	ВремТаблВРегистры1И2 КАК ВРегистры1И2
	|	ПОЛНОЕ СОЕДИНЕНИЕ ВремТаблВРегистр3 КАК ВРегистр3
	|	ПО ИСТИНА";
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//  ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаАктПостановкиНаБалансЕГАИСОтработайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаАктПостановкиНаБалансЕГАИСОжидайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов
// Параметры:
//   ТекстЗапроса - заполняемый текст запроса
//
Процедура ТекстЗапросаАктСписанияЕГАИСОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров КАК СписаниеНедостачТоваров
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = СписаниеНедостачТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ОтчетОРозничныхПродажах.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Ссылка В (&ОрганизацияЕГАИС))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВРегистр2ЕГАИС
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ПередачаВРегистр2ЕГАИС.Ссылка
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.АктСписанияЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (СписаниеНедостачТоваров.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ОтчетОРозничныхПродажах.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ПередачаВРегистр2ЕГАИС.Ссылка ЕСТЬ НЕ NULL )
	|	И (СписаниеНедостачТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ ОтчетОРозничныхПродажах.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ ПередачаВРегистр2ЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И НЕ СтатусыОформленияДокументовЕГАИС.Архивный";
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//  ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаАктСписанияЕГАИСОтработайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаАктСписанияЕГАИСОжидайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов
// Параметры:
//   ТекстЗапроса - заполняемый текст запроса
//
Процедура ТекстЗапросаВозвратИзРегистра2ЕГАИСОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ТТНИсходящаяЕГАИС.Ссылка
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ВозвратИзРегистра2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (ТТНИсходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL)
	|	И (ТТНИсходящаяЕГАИС.Грузоотправитель В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)";
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//  ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаВозвратИзРегистра2ЕГАИСОтработайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаВозвратИзРегистра2ЕГАИСОжидайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов
// Параметры:
//   ТекстЗапроса - заполняемый текст запроса
//
Процедура ТекстЗапросаПередачаВРегистр2ЕГАИСОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ТТНВходящаяЕГАИС.Ссылка
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ПередачаВРегистр2ЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (ТТНВходящаяЕГАИС.Ссылка ЕСТЬ НЕ NULL)
	|	И (ТТНВходящаяЕГАИС.Грузополучатель В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)";
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаПередачаВРегистр2ЕГАИСОтработайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//  ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаПередачаВРегистр2ЕГАИСОжидайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов
// Параметры:
//   ТекстЗапроса - заполняемый текст запроса
//
Процедура ТекстЗапросаТТНИсходящаяЕГАИСОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ВозвратТоваровПоставщику.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ПеремещениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Ссылка В (&ОрганизацияЕГАИС))
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (ВозвратТоваровПоставщику.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ПеремещениеТоваров.Ссылка ЕСТЬ НЕ NULL)
	|	И (ВозвратТоваровПоставщику.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ ПеремещениеТоваров.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)";
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаТТНИсходящаяЕГАИСОтработайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаТТНИсходящаяЕГАИСОжидайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов
// Параметры:
//   ТекстЗапроса - заполняемый текст запроса
//
Процедура ТекстЗапросаЧекЕГАИСОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИС.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (Выразить(СтатусыОформленияДокументовЕГАИС.Документ КАК Документ.ЧекЕГАИС).ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|";
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаЧекЕГАИСОтработайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаЧекЕГАИСОжидайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов
// Параметры:
//   ТекстЗапроса - заполняемый текст запроса
//
Процедура ТекстЗапросаЧекЕГАИСВозвратОформите(ТекстЗапроса) Экспорт
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Документ) 
	|	* КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОформленияДокументовЕГАИС.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Документ = ЗНАЧЕНИЕ(Документ.ЧекЕГАИСВозврат.ПустаяСсылка)
	|	И СтатусыОформленияДокументовЕГАИС.СтатусОформления В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), 
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И (Выразить(СтатусыОформленияДокументовЕГАИС.Документ КАК Документ.ЧекЕГАИСВозврат).ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|";
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
//Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаЧекЕГАИСВозвратОтработайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределяет текст запроса для отображения требующих действий документов в основной панели ЕГАИС
//   Возвращаемое поле результата запроса: КоличествоДокументов.
//
// Параметры:
//   ТекстЗапроса - Строка - заполняемый текст запроса.
//
Процедура ТекстЗапросаЧекЕГАИСВозвратОжидайте(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Устанавливает признак "Не используется" для обрабатываемых статусов в обработчике заполнения регистра
// СтатусыДокументовЕГАИС на основании данных в документах ЕГАИС.
// (Обработчик обновления: Переход от хранения статусов в документе к хранению в регистре сведений).
//
// Параметры:
//  НеИспользуется - Булево - Значение статуса не используется
//  Статус         - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - проверяемый статус
//                 - ПеречислениеСсылка.СтатусыИнформированияЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиАктаСписанияЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиОстатковЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиОтчетаЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиПередачиВРегистр2ЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС -
//                 - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС -
Процедура ПриОпределенииИспользуемыхСтатусовДокумента(НеИспользуется, Статус) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

//Заполняет, при необходимости создает серии в документе ЕГАИС или его выделенных строках.
//
//Параметры:
//  Контекст  - См. ИнтеграцияЕГАИС.КонтекстЗаполненияСерий - место заполнения серий.
//  Результат - См. ИнтеграцияЕГАИС.РезультатЗаполненияСерий - результат заполнения.
//
Процедура ЗаполнитьСгенерироватьСерии(Контекст, Результат) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти
#Область СлужебныйПрограммныйИнтерфейс

// Формирует гиперссылку на документ библиотеки в журналах документов УТ
// 
// Параметры:
// 	Параметры        - Структура                           - параметры формирования гиперссылки
// 	ОбъектМетаданных - ОбъектМетаданныхДокумент            - тип метаданных для гиперссылки
// 	Гиперссылка      - ФорматированнаяСтрока, Неопределено - результат формирования гиперссылки
Процедура СформироватьГиперссылкуСмТакжеВРаботе(Параметры, ОбъектМетаданных, Гиперссылка) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ТТНВходящаяЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	Организация    = Параметры.Организация;
	ТорговыйОбъект = Параметры.Склад;
	
	ТекстЗапроса = "";
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаТТН(ТекстЗапроса, Организация, ТорговыйОбъект, Истина);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1");
	
	ПустыеЗначенияДокументаОснования = Новый Массив;
	ПустыеЗначенияДокументаОснования.Добавить(Неопределено);
	Для Каждого ТипыДокументаПоступления Из Метаданные.ОпределяемыеТипы.ОснованиеТТНВходящаяЕГАИС.Тип.Типы() Цикл
		ПустыеЗначенияДокументаОснования.Добавить(Документы[Метаданные.НайтиПоТипу(ТипыДокументаПоступления).Имя].ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",                      Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект",                   ТорговыйОбъект);
	Запрос.УстановитьПараметр("ПустыеЗначенияДокументаОснования", ПустыеЗначенияДокументаОснования);
	Запрос.УстановитьПараметр("ТребующиеДействия",                Документы.ТТНВходящаяЕГАИС.ВсеТребующиеДействия(Истина));
	
	ТекстГиперссылки = НСтр("ru = 'ТТН ЕГАИС (входящие)'");
	Если Запрос.Выполнить().Пустой() Тогда
		Гиперссылка = Новый ФорматированнаяСтрока(
			ТекстГиперссылки,,
			,,
			ИнтеграцияЕГАИСКлиентСервер.ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС());
	Иначе
		Гиперссылка = Новый ФорматированнаяСтрока(
			ТекстГиперссылки,,,,
			ИнтеграцияЕГАИСКлиентСервер.ИмяФормыРабочегоМестаПоОформлениюДокументаТТНВходящаяЕГАИС());
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при загрузке после записи алкогольной продукции в базу.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - загружаемая алкогольная продукция,
//  ЕстьИзменения - Булево - признак наличия изменений.
Процедура ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ЕстьИзменения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается перед записью организации в базу.
//
// Параметры:
//  Организация - СправочникОбъект.КлассификаторОрганизацийЕГАИС - загружаемая организация.
//
Процедура ПриЗагрузкеОрганизации(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация.ИНН) И Не Организация.Сопоставлено Тогда
		Контрагент = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП("Контрагенты", Организация.ИНН, Организация.КПП);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Организация.Контрагент     = Контрагент;
			Организация.Сопоставлено   = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при загрузке ТТН входящей ЕГАИС (перед записью).
//
// Параметры:
//  ТТНВходящаяОбъект - ДокументОбъект.ТТНВходящаяЕГАИС - загружаемая ТТН.
//
Процедура ПриЗагрузкеТТНВходящаяЕГАИС(ТТНВходящаяОбъект) Экспорт
	
	// Заполнение склада и организации
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяОбъект.Грузополучатель, "Контрагент, ТорговыйОбъект");
	
	ТТНВходящаяОбъект.Организация = РеквизитыОрганизацииЕГАИС.Контрагент;
	ТТНВходящаяОбъект.ТорговыйОбъект = РеквизитыОрганизацииЕГАИС.ТорговыйОбъект;
	
	// Заполнение документа основания
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка            КАК Ссылка,
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Идентификатор = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", ТТНВходящаяОбъект.Идентификатор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТТНИсходящая = Неопределено;
	
	Если Выборка.Следующий() Тогда
		ТТНИсходящая = Выборка.Ссылка;
		Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			ТТНВходящаяОбъект.ДокументОснование = Выборка.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТТНВходящаяОбъект.ДокументОснование) Тогда // скопировать ТЧ из ТТНИсходящая
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки                   КАК НомерСтроки,
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция          КАК АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура                  КАК Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Характеристика                КАК Характеристика,
		|	ТТНИсходящаяЕГАИСТовары.Серия                         КАК Серия,
		|	ТТНИсходящаяЕГАИСТовары.ИдентификаторУпаковки         КАК ИдентификаторУпаковки,
		|	ТТНИсходящаяЕГАИСТовары.Количество                    КАК Количество,
		|	ТТНИсходящаяЕГАИСТовары.Сумма                         КАК Сумма,
		|	ТТНИсходящаяЕГАИСТовары.Цена                          КАК Цена,
		|	ТТНИсходящаяЕГАИСТовары.НомерПартии                   КАК НомерПартии,
		|	ТТНИсходящаяЕГАИСТовары.Справка2.РегистрационныйНомер КАК НомерСправки2Поставщика
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
		|ГДЕ
		|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка
		|";
		Запрос.УстановитьПараметр("Ссылка", ТТНИсходящая);
		Результат = Запрос.Выполнить();
		
		ТаблицаТТН = ТТНВходящаяОбъект.Товары.Выгрузить(, "НомерСправки2Поставщика,ИдентификаторСтроки,Справка2");
		
		ТТНВходящаяОбъект.Товары.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаТТН Из ТаблицаТТН Цикл
			СтруктураПоиска = Новый Структура("НомерСправки2Поставщика", СтрокаТТН.НомерСправки2Поставщика);
			СтрокиТовары = ТТНВходящаяОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СтрокаТовары.ИдентификаторСтроки = СтрокаТТН.ИдентификаторСтроки;
				СтрокаТовары.Справка2            = СтрокаТТН.Справка2;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при загрузке акта подтверждения ТТН.
//
// Параметры:
//  ТТНИсходящаяОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтТТН         - Булево                           - признак загрузки акта отказа от ТТН,
//  ЕстьРасхождения    - Булево                           - признак загрузки акта расхождений.
Процедура ПриЗагрузкеАктаПодтвержденияТТН(ТТНИсходящаяОбъект, ОтказОтТТН, ЕстьРасхождения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при загрузке подтверждения акта расхождений ТТН.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтАкта - Булево - признак загрузки отказа от акта расхождений ТТН.
//
Процедура ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(ТТНВходящаяЕГАИС, ОтказОтАкта) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка          - ДокументСсылка     - ссылка на документ.
//  ПредыдущийСтатус        - ПеречислениеСсылка - предыдущий статус обработки (СтатусыОбработки*).
//  НовыйСтатус             - ПеречислениеСсылка - новый статус обработки (СтатусыОбработки*).
//  ДополнительныеПараметры - См. ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса - дополнительные параметры обновления статуса.
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывается при отказе от входящей ТТН. Нужно реализовать алгоритм отмены проведения связанных поступлений.
//
// Параметры:
//   ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//
Процедура ОтменитьПроведениеПоступленияТоваровПриОтказеОтТТН(ТТНВходящаяЕГАИС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "ДокументОснование");
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		ДокументПоступленияОбъект = ДокументПоступления.ПолучитьОбъект();
		
		Если ДокументПоступленияОбъект.Проведен Тогда
			ДокументПоступленияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокументПоступленияОбъект.Записать();
		КонецЕсли;
		
		//ДокументПоступленияОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу штрихкодов алкогольной продукции входящей ТТН.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллекция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуШтрихкодовНеМаркируемойПродукцииТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт

	ЗаполняемаяТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод              КАК Штрихкод,
	|	1                                           КАК Коэффициент,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТТНВходящаяЕГАИСТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|	И НЕ ВидыАлкогольнойПродукции.Маркируемый";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		НоваяСтрока = ЗаполняемаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
	КонецЦикла;
		
КонецПроцедуры

// Заполняет таблицу сопоставленных справок 2 документа документа ТТН входящая.
//
// Параметры:
//  ДокументСсылка     - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ.
//  ЗаполняемаяТаблица - ДанныеФормыКоллекция - заполняемая таблица.
//
Процедура ЗаполнитьТаблицуСопоставленныхСправок2ТТН_ЕГАИС(ДокументСсылка, ЗаполняемаяТаблица) Экспорт
	
	ЗаполняемаяТаблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ДокументСсылка
	|	И ТТНВходящаяЕГАИСТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТТНВходящаяЕГАИСТовары.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		НоваяСтрока = ЗаполняемаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапроса);
	КонецЦикла;
	
КонецПроцедуры

// Получить представление валюты регламентированного учета.
// 
// Параметры:
//  Представление - Строка - Возвращаемое значение, представление валюты.
//
Процедура ПредставлениеВалютыРегламентированногоУчета(Представление) Экспорт
	
	Представление = Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецПроцедуры

// Процедура проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//   ДокументСсылка      - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН.
//   ДокументПоступления - ДокументСсылка                  - проверяемое поступление товаров.
//   ЕстьРасхождения      - Булево                         - возвращаемое значение: Истина если есть расхождения.
//
Процедура ПриОпределенииРасхожденийСТТНВходящейЕГАИС(ДокументСсылка, ДокументПоступления, ЕстьРасхождения) Экспорт
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
		|ПОМЕСТИТЬ ВтТоварыТТН
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &ТТНСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Сопоставлено.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	СУММА(ТабличнаяЧасть.Количество
		|	* ВЫБОР
		|		КОГДА Сопоставлено.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
		|			ЕСТЬNULL(СведенияОбАлкогольнойПродукции.КоэффПересчетаДал, 0)
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыПоступления
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
		|		ПО ТабличнаяЧасть.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК Сопоставлено
		|		ПО ТабличнаяЧасть.Номенклатура = Сопоставлено.Номенклатура
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &ПоступлениеТоваров
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Сопоставлено.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)),
		|	ТабличнаяЧасть.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ВтТоварыПоступления.Количество   КАК Количество
		|ИЗ
		|	ВтТоварыПоступления КАК ВтТоварыПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
		|		ПО ВтТоварыПоступления.АлкогольнаяПродукция = ВтТоварыТТН.АлкогольнаяПродукция
		|			И ВтТоварыПоступления.Номенклатура = ВтТоварыТТН.Номенклатура
		|ГДЕ
		|	(ВтТоварыПоступления.Количество > ЕСТЬNULL(ВтТоварыТТН.Количество, 0)
		|			ИЛИ ВтТоварыТТН.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))");
		
		Запрос.УстановитьПараметр("ТТНСсылка",          ДокументСсылка);
		Запрос.УстановитьПараметр("ПоступлениеТоваров", ДокументПоступления);
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьРасхождения = Не РезультатЗапроса.Пустой();
		
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	СУММА(ТабличнаяЧасть.Количество)    КАК Количество
		|ПОМЕСТИТЬ ВтТоварыТТН
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &ТТНСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Сопоставлено.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	СУММА(ТабличнаяЧасть.Количество
		|	* ВЫБОР
		|		КОГДА Сопоставлено.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная) ТОГДА
		|			ЕСТЬNULL(СведенияОбАлкогольнойПродукции.КоэффПересчетаДал, 0)
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ) КАК Количество
		|ПОМЕСТИТЬ ВтТоварыПоступления
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
		|		ПО ТабличнаяЧасть.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК Сопоставлено
		|		ПО ТабличнаяЧасть.Номенклатура = Сопоставлено.Номенклатура
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &ПеремещениеТоваров
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(Сопоставлено.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)),
		|	ТабличнаяЧасть.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ВтТоварыПоступления.Количество   КАК Количество
		|ИЗ
		|	ВтТоварыПоступления КАК ВтТоварыПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
		|		ПО ВтТоварыПоступления.АлкогольнаяПродукция = ВтТоварыТТН.АлкогольнаяПродукция
		|			И ВтТоварыПоступления.Номенклатура = ВтТоварыТТН.Номенклатура
		|ГДЕ
		|	(ВтТоварыПоступления.Количество > ЕСТЬNULL(ВтТоварыТТН.Количество, 0)
		|			ИЛИ ВтТоварыТТН.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))");
		
		Запрос.УстановитьПараметр("ТТНСсылка",          ДокументСсылка);
		Запрос.УстановитьПараметр("ПеремещениеТоваров", ДокументПоступления);
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьРасхождения = Не РезультатЗапроса.Пустой();
		
	Иначе
		
		ЕстьРасхождения = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет текст запроса списка остатков к оформлению документа передача в регистр №2 ЕГАИС.
// 
// Параметры:
//   ТекстЗапроса - Строка - текст запроса.
//
Процедура ПриОпределенииТекстаЗапросаОстатковКПередачеВРегистр2ЕГАИС(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(АкцизныеМарки.Количество, 0) КАК КПередаче
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|			АкцизныеМарки.Справка2 КАК Справка2,
	|			КОЛИЧЕСТВО(АкцизныеМарки.АкцизнаяМарка) КАК Количество
	|		ИЗ
	|			РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМарки
	|		ГДЕ
	|			АкцизныеМарки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии), ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс))
	|		
	|		СГРУППИРОВАТЬ ПО
	|			АкцизныеМарки.ОрганизацияЕГАИС,
	|			АкцизныеМарки.Справка2) КАК АкцизныеМарки
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НастройкиОбменаЕГАИС.ИдентификаторФСРАР КАК ИдентификаторФСРАР
	|		ИЗ
	|			РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС) КАК НастройкиОбменаЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток > 0
	|	И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.ОрганизацияЕГАИС.ТорговыйОбъект.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|	И ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(АкцизныеМарки.Количество, 0) > 0
	|	И НЕ НастройкиОбменаЕГАИС.ИдентификаторФСРАР ЕСТЬ NULL";
	
КонецПроцедуры

// Определяет текст запроса для движений по регистру Серии номенклатуры.
// 
// Параметры:
//   ТекстЗапроса - Строка - текст запроса.
//   ИмяТаблицы   - Строка - имя метаданных документа из которого выполняется заполнение.
//
Процедура ПриЗаполненииТекстаЗапросаДвижениеСерийТоваров(ТекстЗапроса, ИмяТаблицы) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура                                     КАК Номенклатура,
	|	ТаблицаСерии.Характеристика                                   КАК Характеристика,
	|	ТаблицаСерии.Серия                                            КАК Серия,
	|	ТаблицаСерии.Количество                                       КАК Количество
	|ИЗ
	|	Документ.%ИмяТаблицы%.Товары КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ИмяТаблицы);
	
КонецПроцедуры

// Получить количество возможных документов поступления товаров для сопоставления.
//
// Параметры:
//   Количество     - Число                                      - количество документов
//   Организация    - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию,
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС        - ссылка на торговый объект,
//   Контрагент     - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - поставщик.
// 
Процедура ПолучитьКоличествоВозможныхДокументовПоступленияТоваров(Количество, Организация, ТорговыйОбъект, Контрагент) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПоступленияТоваров
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
	|	И ПоступлениеТоваровУслуг.Организация = &Организация
	|	И ПоступлениеТоваровУслуг.Склад = &Склад
	|	И ПоступлениеТоваровУслуг.Контрагент = &ПоставщикКонтрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступленияТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПоступленияТоваровАлко
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоступленияТоваров КАК ПоступленияТоваров
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка = ПоступленияТоваров.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|			ПО ПоступлениеТоваровУслугТовары.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступленияТоваровАлко.Ссылка) КАК Количество
	|ИЗ
	|	ПоступленияТоваровАлко КАК ПоступленияТоваровАлко
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ПоступленияТоваровАлко.Ссылка = ТТНВходящаяЕГАИС.ДокументОснование
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Склад",               ТорговыйОбъект);
	Запрос.УстановитьПараметр("ПоставщикКонтрагент", Контрагент);
	
	Количество = 0;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Количество = РезультатЗапроса.Количество;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак разрешения розничной продажи без сопоставления с классификатором ЕГАИС.
// 
// Возвращаемое значение:
//  Булево - если Истина, продажа разрешена, иначе - Ложь.
//
Процедура РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС(Разрешать) Экспорт
	
	Разрешать = Истина;
	
КонецПроцедуры

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
Процедура ИнициализироватьДополнительныеСвойстваДляПроведенияЧеков(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет возможность использования регистр №2 для организации.
//
// Параметры:
//  Использовать     - Булево - Истина, если для организации можно использовать регистр №2.
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на организацию в классификаторе ЕГАИС.
// 
Процедура ИспользоватьРегистр2(Использовать, ОрганизацияЕГАИС) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрганизацииЕГАИС.ТорговыйОбъект.ТипСклада КАК ТипСклада
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК ОрганизацииЕГАИС
	|		ПО ОрганизацииЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
	|ГДЕ
	|	ОрганизацииЕГАИС.Ссылка = &ОрганизацияЕГАИС
	|");
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Использовать = Выборка.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин");
	
КонецПроцедуры

// Заполняет таблицу данными о действующих лицензиях на продажу алкогольной продукции.
//
// Параметры:
//  ТаблицаЛицензий - ТаблицаЗначений - таблица для заполнения. Колонки:
//   * Лицензиат     - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - контрагент, для которого нужно получить лицензию,
//   * ДатаТТН       - Дата - дата документа, на которую нужно получить действующую лицензию,
//   * Наименование  - Строка - представление лицензии,
//   * ДатаНачала    - Дата - дата начала действия лицензии,
//   * ДатаОкончания - Дата - дата окончания действия лицензии,
//   * КемВыдана     - Строка - наименование организации, выдавшей лицензию.
//
Процедура ЗаполнитьТаблицуЛицензийНаАлкоголь(ТаблицаЛицензий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЛицензий", ТаблицаЛицензий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицензий.Лицензиат КАК Лицензиат,
	|	ТаблицаЛицензий.ДатаТТН КАК ДатаТТН
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ТаблицаЛицензий КАК ТаблицаЛицензий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.Лицензиат КАК Лицензиат,
	|	ИсходныеДанные.ДатаТТН КАК ДатаТТН,
	|	ЛицензииПоставщиковАлкогольнойПродукции.СерияНомер КАК Наименование,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Период КАК ДатаНачала,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК ДатаОкончания,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК КемВыдана
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ИсходныеДанные.Лицензиат = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|				ГДЕ
	|					ИсходныеДанные.ДатаТТН >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|					И ИсходныеДанные.Лицензиат = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Лицензиат", Выборка.Лицензиат);
		ПараметрыОтбора.Вставить("ДатаТТН", Выборка.ДатаТТН);
		
		МассивСтрок = ТаблицаЛицензий.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// В функции нужно определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - значение по умолчанию для собственной организации,
//  СобственныйТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для собственного торгового объекта,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - значение по умолчанию для сторонней организации,
//  СтороннийТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - значение по умолчанию для стороннего торгового объекта.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		СобственнаяОрганизация    = Неопределено,
		СобственныйТорговыйОбъект = Неопределено,
		СторонняяОрганизация      = Неопределено,
		СтороннийТорговыйОбъект   = Неопределено) Экспорт
	
	СобственнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	СобственныйТорговыйОбъект = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	
КонецПроцедуры

// Заполняет данные сопоставления организации ЕГАИС с объектами предприятия полями:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС, Неопределено - ссылка на организацию в классификаторе ЕГАИС,
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - сопоставленная организация предприятия,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - сопоставленный торговый объект предприятия,
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
// Параметры:
//   ДанныеСопоставления - Структура, Неопределено - данные сопоставления
//   КодВФСРАР           - Строка    - код организации в ФСРАР.
// 
Процедура ДанныеСопоставленияОрганизацииЕГАИС(ДанныеСопоставления, КодВФСРАР) Экспорт
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(КодВФСРАР);
	Если ОрганизацияЕГАИС = Неопределено ИЛИ ОрганизацияЕГАИС.Пустая() Тогда
		ДанныеСопоставления = Неопределено;
	Иначе
		ДанныеСопоставления = Новый Структура;
		ДанныеСопоставления.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
		
		РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, "Контрагент, ТорговыйОбъект, ИНН, КПП");
		ДанныеСопоставления.Вставить("ТорговыйОбъект",   РеквизитыОрганизацииЕГАИС.ТорговыйОбъект);
		ДанныеСопоставления.Вставить("Организация",      РеквизитыОрганизацииЕГАИС.Контрагент);
		ДанныеСопоставления.Вставить("ИНН",              РеквизитыОрганизацииЕГАИС.ИНН);
		ДанныеСопоставления.Вставить("КПП",              РеквизитыОрганизацииЕГАИС.КПП);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список значений идентификаторов организаций и их представлений, в формате
//   * Значение - Строка - Идентификатор организации для генерации штрихкода, содержащий символы цифр.
//   * Представление - Строка - Представление идентификатора для отображения пользователю.
//
// Параметры:
//   СписокИдентификаторовОрганизации - СписокЗначений - заполняемый список идентификаторов
//   ВключаяДату - Дата - В состав идентификатора может быть включено представление даты маркировки.
//               - Неопределено - В состав идентификатора представление даты не включается.
//   ТолькоКодФСРАР - Булево - получение идентификатора только по коду ФСРАР
//
Процедура ИдентификаторыОрганизации(СписокИдентификаторовОрганизации, ВключаяДату, ТолькоКодФСРАР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	Организации.ИНН КАК ИдентификаторОрганизации,
		|	&ТипИдентификатораИНН КАК ТипИдентификатора
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.ИНН = """"
		|	И &ТолькоКодФСРАР = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		|	&ТипИдентификатораКодФСРАР
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ТипИдентификатора";
	
	Запрос.УстановитьПараметр("ТолькоКодФСРАР", ТолькоКодФСРАР);
	Если ВключаяДату = Неопределено Тогда
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР'"));
	Иначе
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН + дата'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР + дата'"));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокИдентификаторовОрганизации = Новый СписокЗначений;
	ШаблонПредставления = НСтр("ru = '%1: %2'");
	
	Пока Выборка.Следующий() Цикл
		
		Если ВключаяДату = Неопределено Тогда
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		Иначе
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации + Формат(ВключаяДату, "ДФ=yyMMdd"); // Установленный формат даты в GS1-128
		КонецЕсли;
		
		ПредставлениеИдентификатора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Выборка.ТипИдентификатора,
			ИдентификаторОрганизации);
		
		СписокИдентификаторовОрганизации.Добавить(ИдентификаторОрганизации, ПредставлениеИдентификатора);
	КонецЦикла;
	
КонецПроцедуры

// Поиск контрагента и торгового объекта контрагента (партнера) по ИНН и/или КПП.
//   Если контрагент (и партнер) определен по ИНН/КПП, заполняет ВозвращаемоеЗначение стуктурой
//   * Контрагент     - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС        - найденный торговый объект контрагента (партнер).
//   Неопределено - контрагент не найден.
//
// Параметры:
//   ВозвращаемоеЗначение - Неопределено, Структура - результат поиска,
//   ИНН                  - Строка                  - ИНН искомого контрагента,
//   КПП                  - Строка                  - КПП искомого контрагента.
//
Процедура КонтрагентТорговыйОбъектПоИННКПП(ВозвращаемоеЗначение, ИНН, КПП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВозвращаемоеЗначение = Неопределено;
	Иначе
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Контрагент", РезультатЗапроса.Выгрузить()[0].Ссылка);
		ВозвращаемоеЗначение.Вставить("ТорговыйОбъект");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контрагента из торгового объекта.
//
// Параметры:
//   Контрагент     - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - контрагент торгового объекта.
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - Торговый объект, для которого необходимо получить контрагента.
//
Процедура КонтрагентТорговогоОбъекта(Контрагент, ТорговыйОбъект) Экспорт
	
	Контрагент = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Сопоставлено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Контрагент = РезультатЗапроса.Выгрузить()[0].Контрагент;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет торговый объект из контрагента.
//
// Параметры:
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС        - Торговый объект.
//   Контрагент     - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Контрагент, ддля которго необходимо получить торговый объект.
//
// Возвращаемое значение:
//
Процедура ТорговыйОбъектКонтрагента(ТорговыйОбъект, Контрагент) Экспорт
	
	ТорговыйОбъект = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Сопоставлено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТорговыйОбъект = РезультатЗапроса.Выгрузить()[0].ТорговыйОбъект;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает фактический адрес торгового объекта для чека ЕГАИС.
//
// Параметры:
//   Адрес - Строка                  - адрес торгового объекта.
//   Шапка - СтрокаТаблицыЗначений - строка результат запроса для печати чека ЕГАИС
//
Процедура АдресТорговогоОбъекта(АдресТорговогоОбъекта, ШапкаЗапроса) Экспорт
	РеквизитыШапки = Новый Структура("АдресТорговогоОбъекта, ТорговыйОбъект, ОрганизацияЕГАИС, Дата");
	
	РеквизитыШапки.Дата = ОбщегоНазначения.РабочаяДатаПользователя();
	ЗаполнитьЗначенияСвойств(РеквизитыШапки, ШапкаЗапроса);
	
	АдресТорговогоОбъекта = "";
	Если ЗначениеЗаполнено(РеквизитыШапки.АдресТорговогоОбъекта) Тогда
		АдресТорговогоОбъекта = РеквизитыШапки.АдресТорговогоОбъекта;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыШапки.ТорговыйОбъект) Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.ТорговыйОбъект, "ПодразделениеОрганизации");
		
		Если ЗначениеЗаполнено(РеквизитыСклада.ПодразделениеОрганизации) Тогда
			АдресТорговогоОбъекта = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
				РеквизитыСклада.ПодразделениеОрганизации,
				Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций);
		ИначеЕсли ЗначениеЗаполнено(РеквизитыШапки.ОрганизацияЕГАИС) Тогда 
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.ОрганизацияЕГАИС, "Контрагент");
			Если ЗначениеЗаполнено(Организация) Тогда
				СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, РеквизитыШапки.Дата);
				АдресТорговогоОбъекта = СведенияОбОрганизации.ФактическийАдрес;
			КонецЕсли; 
		КонецЕсли
	КонецЕсли; 
КонецПроцедуры

// Заполняет признак использования торговых объектов для контрагентов.
//
// Параметры:
//   Использовать - Булево - признак использования торговых объектов.
//
Процедура ИспользоватьТорговыеОбъектыКонтрагентов(Использовать) Экспорт
	
	Использовать = Ложь;
	
КонецПроцедуры

// Возвращает метаданные документа поступления товаров, который создается на основании входящей ТТН.
//
Процедура ОпределитьДокументПоступлениеТоваров(ОбъектМетаданных) Экспорт
	
	ОбъектМетаданных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	
КонецПроцедуры

// Возвращает имя документа перемещения товаров, который создается на основании входящей ТТН.
//
Процедура ИспользуетсяПеремещениеТоваров(Используется) Экспорт
	
	Использовать = Истина;
	
КонецПроцедуры

// Проверить сопоставление классификаторов, заполнить входящую структуру "РезультатПроверки" значениями:
//   * ЕстьНеСопоставленныеТовары - Булево - Признак наличия несопоставленных товаров.
//   * НеСопоставленныеТовары     - Строка - Адрес по временном хранилище.
//
// Параметры:
//   РезультатПроверки       - Структура      - Результат проверки документа на несопоставленные товары.
//   ДокументСсылка          - ДокументСсылка - Документ, для которого необходимо проверить соответствие классификаторов.
//   УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы открытого документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//
Процедура ПроверитьСопоставлениеКлассификаторовПрикладногоДокумента(РезультатПроверки, ДокументСсылка, УникальныйИдентификатор) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьНеСопоставленныеТовары", Ложь);
	РезультатПроверки.Вставить("НеСопоставленныеТовары", "");
	
	ИмяТаблицы = "Документ" + "." + ДокументСсылка.Метаданные().Имя + "." + "Товары";
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ИмяТаблицы КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО ТабличнаяЧасть.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументСсылка
	|;
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура   = Товары.Номенклатура
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	НеСопоставленныеТовары = Запрос.Выполнить().Выгрузить();
	РезультатПроверки.ЕстьНеСопоставленныеТовары = НеСопоставленныеТовары.Количество() > 0;
	
	Если РезультатПроверки.ЕстьНеСопоставленныеТовары Тогда
		РезультатПроверки.НеСопоставленныеТовары = ПоместитьВоВременноеХранилище(НеСопоставленныеТовары, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст запроса ТТН входящих динамического списка, отображаемого в форме списка документов.
//
// Параметры:
//   ТекстЗапроса - Строка - текст запроса динамического списка,
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - организация, по которой нужно отобрать документы,
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - торговый объект, по которому нужно отобрать документы,
//   ОжидаетсяОформление- Булево - если Истина, будут отобраны только документы, ожидающие оформления.
//
Процедура ТекстЗапросаТТН(ТекстЗапроса, Организация = Неопределено, ТорговыйОбъект = Неопределено, ОжидаетсяОформление = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументТТНВходящаяЕГАИС.Ссылка,
	|	ДокументТТНВходящаяЕГАИС.ПометкаУдаления,
	|	ДокументТТНВходящаяЕГАИС.Номер,
	|	ДокументТТНВходящаяЕГАИС.Дата,
	|	ДокументТТНВходящаяЕГАИС.Проведен,
	|	ДокументТТНВходящаяЕГАИС.ТорговыйОбъект,
	|	ДокументТТНВходящаяЕГАИС.Организация,
	|	ДокументТТНВходящаяЕГАИС.Идентификатор,
	|	ДокументТТНВходящаяЕГАИС.ИдентификаторЕГАИС,
	|	ДокументТТНВходящаяЕГАИС.Упакована,
	|	ДокументТТНВходящаяЕГАИС.НомерТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаТТН,
	|	ДокументТТНВходящаяЕГАИС.ДатаОтгрузки,
	|	ДокументТТНВходящаяЕГАИС.Грузоотправитель,
	|	ДокументТТНВходящаяЕГАИС.Грузополучатель,
	|	ДокументТТНВходящаяЕГАИС.Поставщик,
	|	ЕСТЬNULL(ДокументТТНВходящаяЕГАИС.Поставщик.Контрагент, ДокументТТНВходящаяЕГАИС.Грузоотправитель.Контрагент) КАК ПоставщикКонтрагент,
	|	ДокументТТНВходящаяЕГАИС.Основание,
	|	ДокументТТНВходящаяЕГАИС.Комментарий,
	|	ДокументТТНВходящаяЕГАИС.ТипДоставки,
	|	ДокументТТНВходящаяЕГАИС.Перевозчик,
	|	ДокументТТНВходящаяЕГАИС.Автомобиль,
	|	ДокументТТНВходящаяЕГАИС.Прицеп,
	|	ДокументТТНВходящаяЕГАИС.Заказчик,
	|	ДокументТТНВходящаяЕГАИС.Водитель,
	|	ДокументТТНВходящаяЕГАИС.ПунктПогрузки,
	|	ДокументТТНВходящаяЕГАИС.ПунктРазгрузки,
	|	ДокументТТНВходящаяЕГАИС.Перенаправление,
	|	ДокументТТНВходящаяЕГАИС.Экспедитор,
	|	ДокументТТНВходящаяЕГАИС.СуммаДокумента,
	|	ДокументТТНВходящаяЕГАИС.МоментВремени,
	|	ДокументТТНВходящаяЕГАИС.ЕстьРасхождения,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL И ПеремещениеТоваров.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеноПоступление,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПеремещениеТоваров.Ссылка
	|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеТоваров.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|	КОНЕЦ КАК ПоступлениеТоваров,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПеремещениеТоваров.Номер
	|		КОГДА НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеТоваров.Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПоступлениеТоваровПредставление,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваров.Ссылка ЕСТЬ NULL И ПеремещениеТоваров.Ссылка ЕСТЬ NULL
	|			И НЕ СтатусыДокументовЕГАИС.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено)
	|		КОГДА (НЕ ПоступлениеТоваров.Ссылка ЕСТЬ NULL ИЛИ НЕ ПеремещениеТоваров.Ссылка ЕСТЬ NULL)
	|			И НЕ СтатусыДокументовЕГАИС.Статус В(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.Оформлено)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеТребуется)
	|	КОНЕЦ КАК ОформлениеПоступления,
	|	ВЫБОР
	|		КОГДА СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПустойСтатус,
	|
	|	СтатусыДокументовЕГАИС.Статус              КАК СтатусЕГАИС,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействиеЕГАИС1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействиеЕГАИС2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействиеЕГАИС3
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ДокументТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваров
	|		ПО ДокументТТНВходящаяЕГАИС.ДокументОснование = ПоступлениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ДокументТТНВходящаяЕГАИС.ДокументОснование = ПеремещениеТоваров.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (СтатусыДокументовЕГАИС.Документ = ДокументТТНВходящаяЕГАИС.Ссылка)
	|ГДЕ
	|	&УсловиеОтбора";
	
	УсловиеОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.Организация = &Организация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора + "ДокументТТНВходящаяЕГАИС.ТорговыйОбъект = &ТорговыйОбъект";
	КонецЕсли;
	
	Если ОжидаетсяОформление Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		УсловиеОтбора = УсловиеОтбора +
		"(СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ТребующиеДействия))";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текст запроса для формирования временной таблицы коэффициентов пересчета базовых единиц измерения
//   номенклатуры в единицы ЕГАИС:
//   - для упакованного товара: коэффициент пересчета в штуки (бутылки)
//   - для неупакованного товара: коэффициент пересчета в декалитры.
// Временная таблица используется при проведении документов по регистру ОстаткиЕГАИС и при передаче данных в УТМ.
//
// Параметры:
//   ТекстЗапроса        - Строка - Заполняемый текст запроса.
//   ИмяТаблицыТовары    - Строка - Имя таблицы с колонками: АлкогольнаяПродукция, Номенклатура, Характеристика.
//   ИмяВременнойТаблицы - Строка - Имя результирующей временной таблицы.
//
Процедура ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(ТекстЗапроса, ИмяТаблицыТовары, ИмяВременнойТаблицы) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	ЛОЖЬ КАК ПроверятьОбъемДАЛ,
	|	МАКСИМУМ(ЕСТЬNULL(СведенияОбАлкогольнойПродукции.КоэффПересчетаДал, 0)) КАК ОбъемДАЛ,
	|	1 КАК Коэффициент
	|ПОМЕСТИТЬ ШаблонИмяВременнойТаблицы
	|ИЗ
	|	ШаблонТаблицаТовары КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО Таблица.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонТаблицаТовары",       ИмяТаблицыТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ШаблонИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
КонецПроцедуры

//Заполняет текст запроса для формирования временной таблицы коэффициентов пересчета базовых единиц измерения
//   номенклатуры в объем ЕГАИС (декалитры).
//
//Параметры:
//  ТекстЗапроса        - Строка - Заполняемый текст запроса.
//  ИмяТаблицыТовары    - Строка - Имя таблицы с колонками: Номенклатура, Характеристика.
//  ИмяВременнойТаблицы - Строка - Имя результирующей временной таблицы.
Процедура ТекстЗапросаВТОбъемДАЛЕдиницыНоменклатуры(ТекстЗапроса, ИмяТаблицыТовары, ИмяВременнойТаблицы) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет в переданной таблице значений реквизиты: Крепость, ВидПродукции и Объем.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - таблица номенклатуры с колонками: НомерСтроки, Номенклатура.
Процедура ЗаполнитьРеквизитыАлкогольнойПродукции(ТаблицаНоменклатуры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет таблицу алкогольной продукции документа-основания с колонками:
//   * Номенклатура
//   * Характеристика
//   * Серия
//   * Количество
// 
// Параметры:
// 	ДокументОснование - ДокументСсылка                 - документ-основание.
// 	ДокументЕГАИС     - ОпределяемыйТип.ДокументыЕГАИС - документ по которому требуется получить данные документа-основания.
// 	ТаблицаДанных     - ТаблицаЗначений                - заполняемые данные основания
//
Процедура СформироватьДанныеДокументаОснования(ДокументОснование, ДокументЕГАИС, ТаблицаДанных) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументЕГАИС.Метаданные().ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ДокументЕГАИС) = Тип("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНИсходящаяЕГАИСТовары.Характеристика КАК Характеристика,
	|	ТТНИсходящаяЕГАИСТовары.Сумма КАК Сумма,
	|	ТТНИсходящаяЕГАИСТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка";
	
	МетаданныеДокумента  = ДокументЕГАИС.Метаданные();
	ИмяДокумента         = МетаданныеДокумента.Имя;
	ТекстЗапроса         = СтрЗаменить(ТекстЗапроса, "ТТНИсходящаяЕГАИС", ИмяДокумента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументЕГАИС);
	Запрос.Текст = ТекстЗапроса;
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Обрабатывает таблицу штриховых кодов и получает для каждого из них данные в информационной базе.
// На входе имеется таблица, в которой заполнены только колонки "Штриховой код" и "Количество".
// В процедуре устанавливается значение "Истина" в одной из других колонок.
//
// Параметры:
//  ТаблицаНеАкцизныеМарки               - ТаблицаЗначение - имеет следующие колонки:
//   * ШтриховойКод                      - Строка                              - штриховой код полученный с ТСД.
//   * Количество                        - Число                               - сколько раз был считан данный штрихкод.
//   * ШтрихКодУпаковки                  - Справочник.ШтрихкодыУпаковокТоваров - ссылка на имеющуюся в базе упаковку.
//   * ЭтоИмеющаясяВБазеУпаковка         - Булево                              - если это имеющаяся в базе упаковка.
//   * ЭтоУпаковка                       - Булево                              - если это новая упаковка.
//   * ЭтоПартионнаяАлкогольнаяПродукция - Булево                              - если это штрихкод партионной алкогольной продукции
//   * ЭтоПрочаяНоменклатура             - Булево                              - если это штрихкод не идентифицирует алкогольную продукцию.
//
Процедура ОпределитьТипыШтриховыхКодовНеМаркируемойПродукцииТСД(ТаблицаНеАкцизныеМарки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШтриховыеКоды.ШтриховойКод КАК ШтриховойКод,
	|	ШтриховыеКоды.Количество   КАК Количество,
	|	ШтриховыеКоды.НомерСтроки  КАК НомерСтроки,
	|	ШтриховыеКоды.Родитель     КАК Родитель
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	&ШтриховыеКоды КАК ШтриховыеКоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Штрихкоды.ШтриховойКод КАК ШтриховойКод,
	|	Штрихкоды.Количество   КАК Количество,
	|	Штрихкоды.Родитель     КАК Родитель,
	|	Штрихкоды.НомерСтроки  КАК НомерСтроки,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка))
	|                          КАК ШтрихКодУпаковки,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК ЭтоИмеющаясяВБазеУпаковка,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.Ссылка ЕСТЬ NULL
	|				И ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК ЭтоУпаковка,
	|	ВЫБОР
	|		КОГДА ВидыАлкогольнойПродукции.Маркируемый = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК ЭтоПартионнаяАлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.КодВида169 ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК ЭтоПрочаяНоменклатура
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Штрихкоды.ШтриховойКод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Штрихкоды.ШтриховойКод = ШтрихкодыНоменклатуры.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО СведенияОбАлкогольнойПродукции.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО СведенияОбАлкогольнойПродукции.КодВида169 = ВидыАлкогольнойПродукции.Код
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ШтриховыеКоды", ТаблицаНеАкцизныеМарки);
	
	ТаблицаНеАкцизныеМарки = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

// Определяет значение организации ЕГАИС для переданного документа.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - определяемая организация ЕГАИС.
//  Документ - ДокументСсылка - документ, по данным которого определяется организация ЕГАИС
Процедура ПриОпределенииОрганизацииЕГАИСпоДокументу(ОрганизацияЕГАИС, Документ) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Записывает соответствие между номенклатурой и классификатором ЕГАИС из табличной части документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, содержащий табличную часть Товары.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//  СопоставлятьПоСерии - Булево - признак сопоставления по серии.
//
Процедура ЗаписатьСоответствиеНоменклатуры(ДокументОбъект, ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	ИмяКолонки = "АлкогольнаяПродукция";
	КолонкиДляВыгрузки = ИмяКолонки + ", " + "Номенклатура, Характеристика";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Серия";
	КонецЕсли;
	Если СопоставлятьПоИдентификаторуУпаковки Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ИдентификаторУпаковки";
	КонецЕсли;
	Если ЗаписыватьСправку2 Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Справка2";
	КонецЕсли;
	Данные = ДокументОбъект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ИмяКолонкиАлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ИмяКолонкиСправка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок,ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок,0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И Сопоставлено.Справка2 = Таблица.Справка2
	|		 И Сопоставлено.Серия = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И СопоставленоБЕЗСерии.Справка2 = Таблица.Справка2
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция
	|");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяСтрока",             "");
	Запрос.УстановитьПараметр("ПустаяСправка2",           Справочники.Справки2ЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия",              ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиАлкогольнаяПродукция", ИмяКолонки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиИдентификаторУпаковки",
		?(СопоставлятьПоИдентификаторуУпаковки, "Т.ИдентификаторУпаковки", "&ПустаяСтрока"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.Серия", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСправка2",
		?(ЗаписыватьСправку2, "Т.Справка2", "&ПустаяСправка2"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура          = Выборка.Номенклатура;
		НоваяЗапись.Характеристика        = Выборка.Характеристика;
		НоваяЗапись.Серия                 = Выборка.Серия;
		НоваяЗапись.АлкогольнаяПродукция  = Выборка.АлкогольнаяПродукция;
		НоваяЗапись.ИдентификаторУпаковки = Выборка.ИдентификаторУпаковки;
		НоваяЗапись.Справка2              = Выборка.Справка2;
		НоваяЗапись.Порядок               = Выборка.Порядок + 1;
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет коэффициент пересчета неупакованной продукции, при вызове заполнения библиотечных документов из прикладных,
//   если коэффициент пересчета отличается от 1
//
// Параметры:
//   ИмяПоля    - Строка - поле коэффициента пересчета неупакованной алкогольной продукции
//   ИмяТаблицы - Строка - имя таблицы запроса-источника
//
Процедура ПолеКоэффициентПересчетаНеупакованнойПродукции(ИмяПоля, ИмяТаблицы = "ТабличнаяЧасть") Экспорт
	
	Возврат;

КонецПроцедуры

// Заполняет коэффициент пересчета неупакованной продукции, при вызове заполнения библиотечных данных  из прикладных,
//   а также при получении соответствия количества
//
// Параметры:
//   ТекстЗапроса          - Строка - модифицируемый текст запроса
//   ПутьКПолюНоменклатура - Строка - путь к полю "Номенклатура" для которой нужно получить коэффициент пересчета
//   ИмяПараметра          - Строка - переопределяемый параметр пересчета
Процедура ОпределитьКоэффициентПересчетаНеупакованнойПродукции(ТекстЗапроса, ПутьКПолюНоменклатура, ИмяПараметра) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти
