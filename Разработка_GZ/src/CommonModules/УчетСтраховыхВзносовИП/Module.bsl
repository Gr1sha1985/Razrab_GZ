#Область ПрограммныйИнтерфейс

// Возвращает оптимальную периодичность уплаты фиксированных страховых взносов ИП,
// в зависимости от системы налогообложения
//
Функция ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период) Экспорт
	
	Если ЭтоИПНулевка(Организация) Тогда
		Возврат Перечисления.Периодичность.Год;
	КонецЕсли;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
	
	Если ПлательщикЕНВД Тогда
		ФиксированныеВзносыУменьшаютЕНВД = УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период)
			Или Не УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
	Иначе
		ФиксированныеВзносыУменьшаютЕНВД = Ложь;
	КонецЕсли;
	
	Если ПрименяетсяУСН
		Или (ПлательщикЕНВД И ФиксированныеВзносыУменьшаютЕНВД)
		Или (ПлательщикНДФЛ И Период >= УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ()) Тогда
		
		Периодичность= Перечисления.Периодичность.Квартал;
		
	Иначе
		Периодичность= Перечисления.Периодичность.Год;
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции

// Возвращает суммы фиксированных страховых взносов к уплате на дату с учетом уплаченных ранее в налоговом периоде
//
Функция ФиксированныеСтраховыеВзносыКУплате(Организация, Период, ПериодичностьУплаты, СообщатьОбОшибках = Истина, Регистратор = Неопределено) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	
	// Сумма годового взноса
	СтраховыеВзносы.Вставить("СуммаВзносаПФРВсего",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСВсего", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССВсего",   0);
	
	// Начислено с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРНачислено",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСНачислено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССНачислено",   0);
	
	// Переплата на начало года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРПереплата",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСПереплата", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССПереплата",   0);
	
	// Уплачено ранее с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРУплачено",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСУплачено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССУплачено",   0);
	
	// Сумма к уплате сейчас
	СтраховыеВзносы.Вставить("СуммаВзносаПФР",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМС", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФСС",   0);
	
	СтраховыеВзносы.Вставить("СтраховыеВзносыУплаченные", Неопределено);
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если Период < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Если СообщатьОбОшибках Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расчет фиксированных страховых взносов за %1 год не поддерживается'"), Формат(Период, "ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	ФиксированныеСтраховыеВзносы  = РассчитатьФиксированныеСтраховыеВзносы(
		?(ПериодичностьУплаты = Перечисления.Периодичность.Квартал, КонецКвартала(Период), КонецГода(Период)),
		Организация);
	
	ОстатокРасчетовПоВзносам = ОстатокРасчетовПоВзносамЗаПредыдущиеСтраховыеПериодыИнтеграцияСБанком(Организация, Период);
	
	СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, Период, 
		Перечисления.ВидыПлатежейВГосБюджет.Налог, Регистратор);
	
	Если СтраховыеВзносыУплаченные <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("СчетУчета");
		СтраховыеВзносыУплаченные.Индексы.Добавить("СчетУчета");
	КонецЕсли;
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	Для Каждого КлючИЗначение Из СчетаУчетаСтраховыхВзносов Цикл
		
		Начислено = ФиксированныеСтраховыеВзносы[КлючИЗначение.Ключ];
		Всего     = ФиксированныеСтраховыеВзносы[КлючИЗначение.Ключ + "Всего"];
		Переплата = Макс(0, ОстатокРасчетовПоВзносам[КлючИЗначение.Ключ]);
		
		Уплачено = 0;
		Если СтраховыеВзносыУплаченные <> Неопределено Тогда
			ПараметрыОтбора.СчетУчета = КлючИЗначение.Значение;
			МассивСтрокОплаты  = СтраховыеВзносыУплаченные.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаОплаты Из МассивСтрокОплаты Цикл
				Уплачено = Уплачено + СтрокаОплаты.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Всего"]     = Всего;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Начислено"] = Начислено;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Уплачено"]  = Уплачено;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Переплата"] = Переплата;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ]               = Макс(Начислено - Переплата - Уплачено, 0);
		
	КонецЦикла;
	
	СтраховыеВзносы.СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченные;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

// Возвращает суммы страховых взносов, исчисленные с суммы доходов
//
Функция СтраховыеВзносыСДоходовКУплате(Организация, Период, СтруктураДоходов, СообщатьОбОшибках = Истина) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	СтраховыеВзносы.Вставить("ПредельнаяСуммаВзноса",          Ложь);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходовВсего",    0); // Сумма взноса с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходовУплачено", 0); // Уплачено ранее с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходов",         0); // Сумма к уплате
	
	СтраховыеВзносы.Вставить("СтраховыеВзносыУплаченные", Неопределено);
	
	СтраховыеВзносы.Вставить("ПараметрыРасчетаВзносаСДоходов", НовыеПараметрыРасчетаВзносаСДоходов());
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если Период < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Если СообщатьОбОшибках Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Страховые взносы, исчисленные с суммы дохода за %1 год не уплачиваются'"), Формат(Период, "Л=ru; ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	// Особенности, влияющие на расчет.
	
	ПериодичностьНачисления = ПериодичностьНачисления(Организация, Период);
	
	НачалоПериода = НачалоСтраховогоПериода(Период);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПериодичностьНачисления, Период);
	
	ТекущийПериодПользователя = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		ПериодичностьНачисления,
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	РасчетЗаТекущийПериод = (КонецПериода >= ТекущийПериодПользователя);
	
	УчитыватьРасходы = УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, Период);
	
	ПараметрыРасчета = СтраховыеВзносы.ПараметрыРасчетаВзносаСДоходов;
	
	ПараметрыРасчета.УчитыватьРасходы = УчитыватьРасходы;
	ПараметрыРасчета.РасчетЗаТекущийПериод = РасчетЗаТекущийПериод;
	ПараметрыРасчета.ПериодичностьНачисления = ПериодичностьНачисления;
	
	// Подготовка даннных для расчета.
	
	ДанныеДляРасчета = ДанныеДляРасчетаСтраховыхВзносовСДоходов(КонецПериода, Организация);
	
	ВсегоДоходов = СтруктураДоходов.СуммаДоходаИП
				 + СтруктураДоходов.СуммаДоходаУСН
				 + СтруктураДоходов.ВмененныйДоход
				 + СтруктураДоходов.ПотенциальноВозможныйДоход;
	
	ПараметрыРасчета.ВсегоДоходов = ВсегоДоходов;
	
	Если РасчетЗаТекущийПериод И УчитыватьРасходы
		И ПериодичностьНачисления = Перечисления.Периодичность.Квартал Тогда
		// Для расчета потребуются все уплаченные взносы.
		ОтборВидУплаченныхВзносов = Неопределено;
	Иначе
		// Потребуются только уплаченные взносы с доходов.
		ОтборВидУплаченныхВзносов = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
	КонецЕсли;
	
	СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, Период, ОтборВидУплаченныхВзносов);
	
	Если СтраховыеВзносыУплаченные <> Неопределено Тогда
		СтраховыеВзносыСДоходовУплаченные = СтраховыеВзносыУплаченные.Скопировать(
			Новый Структура("ВидПлатежаВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела));
		УплаченоСДоходов = СтраховыеВзносыСДоходовУплаченные.Итог("Сумма");
	Иначе
		СтраховыеВзносыСДоходовУплаченные = Неопределено;
		УплаченоСДоходов = 0;
	КонецЕсли;
	
	// Расчет суммы взноса.
	
	Если РасчетЗаТекущийПериод И УчитыватьРасходы Тогда
		
		Если ПериодичностьНачисления = Перечисления.Периодичность.Квартал Тогда
			
			// При ежеквартальном признании расходов взносы, оплаченные в течение периода, уже учтены в расходах.
			// Считаем, что неоплаченная часть взносов будет оплачена и учтена в расходах текущего квартала.
			
			ФиксированнаяЧастьВзносов = ДанныеДляРасчета.ФиксированнаяЧастьПФР + ДанныеДляРасчета.ФиксированнаяЧастьФФОМС;
			
			Если СтраховыеВзносыУплаченные <> Неопределено Тогда
				УплаченоФиксированнаяЧасть = СтраховыеВзносыУплаченные.Итог("Сумма") - УплаченоСДоходов;
			Иначе
				УплаченоФиксированнаяЧасть = 0;
			КонецЕсли;
			
			НеУплаченоФиксированннаяЧасть = Макс(ФиксированнаяЧастьВзносов - УплаченоФиксированнаяЧасть, 0);
			ПараметрыРасчета.ФиксированнаяЧастьВзносов = НеУплаченоФиксированннаяЧасть;
			
			// При расчете взноса с разницы доходов и расходов необходимо:
			// - добавить к расходам не оплаченную фиксированную часть, поскольку она будет учтена в расходах после оплаты;
			// - исключить расходы на уже уплаченные взносы с доходов, поскольку они являются частью расчетной суммы взноса
			//   и не должны влиять на расчет.
			
			ОблагаемыйДоход = Макс(ВсегоДоходов + УплаченоСДоходов - НеУплаченоФиксированннаяЧасть - ДанныеДляРасчета.ПорогДоходов, 0);
			РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / (100 + ДанныеДляРасчета.ПроцентВзносов), 2, 1);
			
		Иначе
			
			// Ежегодное начисление взносов с учетом расходов производится только у ИП на ОСНО в периоды ранее 2020 года.
			
			УчтенныеРасходыНаУплатуВзносовЗаТекущийПериод
				= УчетДоходовИРасходовПредпринимателя.РасходыНаУплатуСтраховыхВзносовЗаТекущийПериод(Организация, Период);
			
			// Учтенные расходы на постоянную часть взносов нужно исключить из базы - вместо них учитываются планируемые расходы за год.
			ВсегоДоходов = ВсегоДоходов + УчтенныеРасходыНаУплатуВзносовЗаТекущийПериод;
			
			ФиксированнаяЧастьВзносов = ДанныеДляРасчета.ФиксированнаяЧастьПФР + ДанныеДляРасчета.ФиксированнаяЧастьФФОМС; // До конца года будет учтена в расходах.
			ПараметрыРасчета.ФиксированнаяЧастьВзносов = ФиксированнаяЧастьВзносов;
			
			ОблагаемыйДоход = Макс(ВсегоДоходов - ФиксированнаяЧастьВзносов - ДанныеДляРасчета.ПорогДоходов, 0);
			РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / (100 + ДанныеДляРасчета.ПроцентВзносов), 2, 1);
			
		КонецЕсли;
		
	Иначе
		
		ОблагаемыйДоход = Макс(ВсегоДоходов - ДанныеДляРасчета.ПорогДоходов, 0);
		РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / 100, 2, 1);
		
	КонецЕсли;
	
	МаксимальнаяСуммаВзноса = ДанныеДляРасчета.ПредельнаяСуммаВзноса - ДанныеДляРасчета.ФиксированнаяЧастьПФР;
	
	// Проверка предельной величины взноса
	СтраховыеВзносы.ПредельнаяСуммаВзноса = (РасчетнаяСуммаВзноса >= МаксимальнаяСуммаВзноса);
	
	СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего = ?(СтраховыеВзносы.ПредельнаяСуммаВзноса, МаксимальнаяСуммаВзноса, РасчетнаяСуммаВзноса);
	СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено = УплаченоСДоходов;
	СтраховыеВзносы.СуммаВзносаПФРсДоходов
		= Макс(СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего - СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено, 0);
	
	СтраховыеВзносы.СтраховыеВзносыУплаченные = СтраховыеВзносыСДоходовУплаченные;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

// Возвращает структуру данных, необходимых для расчета страховых взносов с суммы доходов
//
Функция ДанныеДляРасчетаСтраховыхВзносовСДоходов(Период, Организация = Неопределено) Экспорт
	
	ДанныеДляРасчета = Новый Структура;
	ДанныеДляРасчета.Вставить("ПроцентВзносов", 0);
	ДанныеДляРасчета.Вставить("ПорогДоходов", 0);
	ДанныеДляРасчета.Вставить("ПредельнаяСуммаВзноса", 0); // с учетом фиксированной части
	ДанныеДляРасчета.Вставить("ФиксированнаяЧастьПФР", 0);
	ДанныеДляРасчета.Вставить("ФиксированнаяЧастьФФОМС", 0);
	
	ФиксированныеСтраховыеВзносы = РассчитатьФиксированныеСтраховыеВзносы(Период, Организация);
	
	ПредельнаяСуммаВзноса = РазмерыСтраховыхВзносов(Период, Организация).ПредельнаяСуммаВзноса;
	
	ДанныеДляРасчета.ПроцентВзносов        = 1;
	ДанныеДляРасчета.ПорогДоходов          = 300000;
	ДанныеДляРасчета.ПредельнаяСуммаВзноса = ПредельнаяСуммаВзноса;
	ДанныеДляРасчета.ФиксированнаяЧастьПФР   = ФиксированныеСтраховыеВзносы.ПФР;
	ДанныеДляРасчета.ФиксированнаяЧастьФФОМС = ФиксированныеСтраховыеВзносы.ФФОМС;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Возвращает доходы, исчисленные в соответствии с частью 8 статьи 14 Федерального закона 212-ФЗ
//
// Возвращаемое значение:
//   Структура 
//     * СуммаДоходаИП - Число(15, 2) - сумма дохода по ОСНО
//     * СуммаДоходаУСН - Число(15, 2) - сумма дохода по УСН
//     * ВмененныйДоход - Число(15, 2) - сумма вмененного дохода ЕНВД
//     * ПотенциальноВозможныйДоход - Число(15, 2) - сумма потенциального дохода по полученным патентам
//
Функция СтруктураДоходовПоВидамДеятельности(Организация, Знач НачалоПериода, Знач КонецПериода, СообщатьОбОшибках = Истина) Экспорт
	
	СтруктураДоходов = Новый Структура("СуммаДоходаИП, СуммаДоходаУСН, ВмененныйДоход, ПотенциальноВозможныйДоход", 0, 0, 0, 0);
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
		Если ДатаРегистрации > КонецПериода Тогда
			Возврат СтруктураДоходов;
		КонецЕсли;
		Если ДатаРегистрации > НачалоПериода Тогда
			НачалоПериода = ДатаРегистрации;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДоходов.СуммаДоходаИП = УчетДоходовИРасходовПредпринимателя.СуммаДоходаДляРасчетаСтраховыхВзносов(
		Организация, НачалоПериода, КонецПериода);
		
	СтруктураДоходов.СуммаДоходаУСН = УчетУСН.СуммаДоходаДляРасчетаСтраховыхВзносовИП(
		Организация, НачалоПериода, КонецПериода);
		
	СтруктураДоходов.ВмененныйДоход = УчетЕНВД.ВмененныйДоход(
		Организация, НачалоПериода, КонецПериода, СообщатьОбОшибках);
		
	СтруктураДоходов.ПотенциальноВозможныйДоход = УчетПСН.ПотенциальноВозможныйДоход(
		Организация, НачалоПериода, КонецПериода, СообщатьОбОшибках);
	
	Возврат СтруктураДоходов;
	
КонецФункции

// Определяет, нужно ли вычитать расходы из доходов при расчете взносов в ПФР с доходов.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для расчета взносов.
//  Период - Дата - период (день в пределах года), за который рассчитываются взносы.
//
// Возвращаемое значение:
//   Булево   - если Истина, доходы при расчете взносов уменьшаются на расходы.
//
Функция УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, Период) Экспорт
	
	Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период)
		И Период >= Дата(2016, 1, 1) Тогда
		
		// Подпункт 1 пункта 9 статьи 430 НК РФ, пункт 3 статьи 210 НК РФ.
		Возврат Истина;
		
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)
		И Период >= Дата(2020, 1, 1) Тогда
		
		// Определение Конституционного суда РФ от 30.01.2020 N 10-О.
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ЭтоСчетУчетаСтраховыхВзносовИП(СчетУчета) Экспорт
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
		Для Каждого КлючИЗначение Из СчетаУчетаСтраховыхВзносов Цикл
			Если КлючИЗначение.Значение = СчетУчета Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция АктуальныйНормативныйАктРасчетаСтраховыхВзносов(Период)
	
	СтраховойПериод = Год(Период);
	Если СтраховойПериод >= 2017 Тогда
		НормативныйАкт = "НКРФ";  // НК РФ, статья 430 
	ИначеЕсли СтраховойПериод = 2015 Или СтраховойПериод = 2016 Тогда
		НормативныйАкт = "212ФЗМинтруд"; // 212-ФЗ, статья 14 или письмо Минтруда 10.03.2015 № 17-3/В-103 
	Иначе
		НормативныйАкт = "212ФЗ"; // 212-ФЗ, статья 14
	КонецЕсли;
	Возврат НормативныйАкт;
	
КонецФункции

Функция УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП(Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверятьНастройкуУчетаДняРегистрации(Период) Тогда
		УчитыватьДень = Константы.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Получить();
	Иначе
		УчитыватьДень = (АктуальныйНормативныйАктРасчетаСтраховыхВзносов(Период) = "НКРФ");
	КонецЕсли;
	
	Возврат УчитыватьДень;
	
КонецФункции

Функция ПроверятьНастройкуУчетаДняРегистрации(Период) Экспорт
	
	Возврат АктуальныйНормативныйАктРасчетаСтраховыхВзносов(Период) = "212ФЗМинтруд";
	
КонецФункции

#Область УплатаСтраховыхВзносов

Функция ПодготовитьТаблицуУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты) Экспорт
	
	Параметры = ПодготовитьПараметрыУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты);
	
	Если Параметры.РасшифровкаПлатежа.Количество() = 0
		Или Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Параметры.РасшифровкаПлатежа;
	КонецЕсли;
	
	Реквизиты          = Параметры.Реквизиты[0];
	РасшифровкаПлатежа = Параметры.РасшифровкаПлатежа;
	
	Если Реквизиты.СчетУчета <> ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП
		Или ПлатежиВБюджетКлиентСервер.СтраховыеВзносыРаздельно(Реквизиты.Период) Тогда
		
		Возврат РасшифровкаПлатежа;
		
	КонецЕсли;
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		Реквизиты.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Если НомерСубконто = 0 Тогда
		Возврат РасшифровкаПлатежа;
	КонецЕсли;
	
	НалоговыйПериод = ?(ЗначениеЗаполнено(Реквизиты.НалоговыйПериод), Реквизиты.НалоговыйПериод, Реквизиты.Период);
	
	ФиксированныеСтраховыеВзносыКУплате = ФиксированныеСтраховыеВзносыКУплате(
		Реквизиты.Организация, НалоговыйПериод, Перечисления.Периодичность.Год, Ложь, Реквизиты.Регистратор);
	
	СуммаВзносаПФРКУплате = ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаПФР;
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		
		ВидПлатежаВГосБюджет = СтрокаРасшифровки["СубконтоДт" + НомерСубконто];
		Если ЗначениеЗаполнено(ВидПлатежаВГосБюджет) И (ВидПлатежаВГосБюджет <> Перечисления.ВидыПлатежейВГосБюджет.Налог) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаВзносаПФРКУплате = 0 Тогда
			
			СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			
		ИначеЕсли СтрокаРасшифровки.СуммаРуб > СуммаВзносаПФРКУплате Тогда
			
			СуммаРуб = СтрокаРасшифровки.СуммаРуб;
			
			СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			СтрокаРасшифровки.СуммаРуб = СуммаВзносаПФРКУплате;
			
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки);
			НоваяСтрока["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
			НоваяСтрока.СуммаРуб = СуммаРуб - СуммаВзносаПФРКУплате;
			
			СуммаВзносаПФРКУплате = 0;
			
		Иначе
			
			СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			СуммаВзносаПФРКУплате = СуммаВзносаПФРКУплате - СтрокаРасшифровки.СуммаРуб;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

Функция ПодготовитьПараметрыУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РасшифровкаПлатежа
	
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"                // <ПланСчетовСсылка.Хозрасчетный> - счет по дебету проводки (корреспондирующий со счетом ден.средств)
	+ "СубконтоДт1,"           // Субконто1 по счету дебета
	+ "СубконтоДт2,"           // Субконто2 по счету дебета
	+ "СубконтоДт3,"           // Субконто3 по счету дебета
	+ "ИспользоватьНомераСубконто," // Булево. Истина - субконто выше идентифицируются номерами субконто; Ложь - видам субконто, перечисленными ниже
	+ "ВидСубконтоДт1,"        // Вид СубконтоДт1
	+ "ВидСубконтоДт2,"        // Вид СубконтоДт2
	+ "ВидСубконтоДт3,"        // Вид СубконтоДт3
	+ "ПодразделениеДт,"       // <Ссылка на справочник подразделений> - подразделение по дебету проводки
	+ "СчетКт,"                // <ПланСчетовСсылка.Хозрасчетный> - счет по кредиту проводки (счет учета денежных средств)
	+ "СубконтоКт1,"           // Субконто1 по счету кредита
	+ "СубконтоКт2,"           // Субконто2 по счету кредита
	+ "СубконтоКт3,"           // Субконто3 по счету кредита
	+ "ПодразделениеКт,"       // <Ссылка на справочник подразделений> - подразделение по кредиту проводки
	+ "ВалютнаяСумма,"         // <Число,15,2> - сумма поступления в валюте документа
	+ "СуммаРуб";              // <Число,15,2> - рублевая сумма поступления
	
	
	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасшифровкаПлатежа, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - период движений - дата документа
	+ "Организация,"           // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"       // <СправочникСсылка.Валюты>
	+ "Содержание,"            // <Строка,150> - содержание проводок
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет по дебету проводки (корреспондирующий со счетом ден.средств)
	+ "НалоговыйПериод,"       // <Дата> - налоговый период, за который уплачивается взнос
	+ "Регистратор";           // <ДокументСсылка> - документ, который проводится
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область НачислениеСтраховыхВзносов

Функция ПодготовитьТаблицуНачисленияСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	
	Если Реквизиты.Период < ДатаНачалаУчетаСтраховыхВзносовИП()
	 Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КонецДня(Реквизиты.Период) <> КонецГода(Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияСтраховыхВзносов(ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаСтраховыхВзносов = ТаблицаНачисленияСтраховыхВзносов(Реквизиты.Организация, Реквизиты.Период);
	
	СтраховыеВзносыНачисленные = СтраховыеВзносыНачисленные(Реквизиты.Организация, НачалоГода(Реквизиты.Период), Реквизиты.Период);
	ПоляОтбора = "СчетУчета, ВидПлатежаВГосБюджет";
	СтраховыеВзносыНачисленные.Индексы.Добавить(ПоляОтбора);
	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	
	ТаблицаНачисления = НоваяТаблицаСтраховыхВзносов();
	Для Каждого СтраховойВзнос Из ТаблицаСтраховыхВзносов Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтраховойВзнос);
		НайденныеСтроки = СтраховыеВзносыНачисленные.НайтиСтроки(ПараметрыОтбора);
		НачисленоСумма = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].Сумма, 0);
		
		Если СтраховойВзнос.Сумма > НачисленоСумма Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтраховойВзнос);
			НоваяСтрока.Сумма = СтраховойВзнос.Сумма - НачисленоСумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНачисления;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНачисленияСтраховыхВзносов(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - оранизация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеСтраховыхВзносов(ТаблицаНачисленияСтраховыхВзносов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНачисленияСтраховыхВзносов)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизитов) Тогда
	    Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизитов[0];
	Если Реквизиты.Период < ДатаНачалаУчетаСтраховыхВзносовИП()
	 Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачисленияСтраховыхВзносов(ТаблицаНачисленияСтраховыхВзносов, ТаблицаРеквизитов);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтраховойВзнос Из Параметры.СтраховыеВзносы Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		
		ПредставлениеПериода = ПредставлениеПериода(
			НачалоГода(СтраховойВзнос.СтраховойПериод), КонецГода(СтраховойВзнос.СтраховойПериод), "ФП=Истина");
		
		Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Начислены страховые взносы за %1", ПредставлениеПериода);
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы",
			СтраховойВзнос.СтатьяЗатрат);
		
		Проводка.СчетКт = СтраховойВзнос.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет",
			СтраховойВзнос.ВидПлатежаВГосБюджет);
		
		Проводка.Сумма = СтраховойВзнос.Сумма;
		
	КонецЦикла
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияСтраховыхВзносов(ТаблицаНачисленияСтраховыхВзносов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "СтраховойПериод,"      // <Дата> - период, к которому относится уплата взноса
		+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета страховых взносов
		+ "ВидПлатежаВГосБюджет," // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - вид платежа в бюджет
		+ "СтатьяЗатрат,"         // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья затрат
		+ "Сумма,";               // <Число, 15, 2>
	
	Параметры.Вставить("СтраховыеВзносы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачисленияСтраховыхВзносов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - оранизация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура ВыявитьУчетныеОшибкиУплатыСтраховыхВзносов(Ошибки, Период, Организация) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		Или Не УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоГода(Период), КонецМесяца(Период)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПериодичностьНачисления(Организация, Период) = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Период);
	Иначе
		НачалоПериода = НачалоГода(Период);
	КонецЕсли;
	КонецПериода = КонецМесяца(Период);
	
	ПроверитьЗаполнениеВидовПлатежейВГосБюджет(Ошибки, НачалоПериода, КонецПериода, Организация);
	
КонецПроцедуры

Функция СодержаниеОперацииУплатыВзносов(СчетУчета, ВидПлатежаВГосБюджет, СтраховойПериод = Неопределено) Экспорт
	
	Описание = "";
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП Тогда
		Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
			Описание = НСтр("ru = 'Уплачены страховые взносы на обязательное пенсионное страхование в фиксированном размере, исчисленные с суммы доходов'");
		Иначе
			Описание = НСтр("ru = 'Уплачены страховые взносы на обязательное пенсионное страхование в фиксированном размере'");
		КонецЕсли;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод Тогда
		Описание = НСтр("ru = 'Уплачены страховые взносы на обязательное медицинское страхование в фиксированном размере'");
	Иначе
		Возврат "";
	КонецЕсли;
	
	УточнениеПериода = "";
	Если ЗначениеЗаполнено(СтраховойПериод) Тогда
		УточнениеПериода = " " + СтрШаблон(НСтр("ru = 'за %1 год'"), Формат(СтраховойПериод, "ДФ=yyyy"));
	КонецЕсли;
	
	Содержание = Описание + УточнениеПериода + ".";
	
	Возврат Содержание;
	
КонецФункции

Функция РассчитатьФиксированныеСтраховыеВзносы(Знач Период, Организация = Неопределено) Экспорт
	
	Перем ДатаИзменения;
	
	Период = КонецМесяца(Период); // Считаем взносы до конца месяца
	
	СтраховыеВзносы = Новый Структура;
	// Суммы взносов до конца текущего месяца.
	СтраховыеВзносы.Вставить("ПФР",        0);
	СтраховыеВзносы.Вставить("ФФОМС",      0);
	СтраховыеВзносы.Вставить("ФСС",        0);
	// Суммы взносов до конца года.
	СтраховыеВзносы.Вставить("ПФРВсего",   0);
	СтраховыеВзносы.Вставить("ФФОМСВсего", 0);
	СтраховыеВзносы.Вставить("ФССВсего",   0);
	
	// Расчет сумм взносов в фонды.
	Если ЗначениеЗаполнено(Организация) Тогда
		ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
		УплачиваютсяДобровольныеВзносыВФСС = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, Период);
	Иначе
		ДатаРегистрации = '00010101';
		УплачиваютсяДобровольныеВзносыВФСС = Ложь;
	КонецЕсли;
	
	// Страховые взносы за годы до даты регистрации рассчитывать не нужно.
	Если ЗначениеЗаполнено(ДатаРегистрации) И КонецГода(Период) < ДатаРегистрации Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	СуммаВзносаПФР = 0;
	СуммаВзносаФФОМС = 0;
	СуммаВзносаПФРВсего = 0;
	СуммаВзносаФФОМСВсего = 0;
	
	РазмерыСтраховыхВзносов = РазмерыСтраховыхВзносов(Период, Организация);
	МесячныйВзносПФР   = РазмерыСтраховыхВзносов.ПФР / 12;
	МесячныйВзносФФОМС = РазмерыСтраховыхВзносов.ФФОМС / 12;
	МесячныйВзносФСС   = РазмерыСтраховыхВзносов.ФСС / 12;
	
	ГодМесяцаРасчета = Год(Период);
	НомерМесяцаРасчета = Месяц(Период);
	
	ПервыйМесяц = ?(ЗначениеЗаполнено(ДатаРегистрации) И Год(ДатаРегистрации) = ГодМесяцаРасчета, Месяц(ДатаРегистрации), 1);
	
	ДатаНачалаРасчета = Дата(ГодМесяцаРасчета, ПервыйМесяц, 1);
	ДатаОкончанияРасчета = КонецГода(Период);
	ИнтервалыИПНеОплачиваетВзносы =
		РегистрыСведений.НастройкиУчетаСтраховыхВзносовИП_ПФР_ФФОМС.ИнтервалыИПНеОплачиваетСтраховыеВзносы(
			Организация, ДатаНачалаРасчета, ДатаОкончанияРасчета);
	
	Для НомерМесяца = ПервыйМесяц По 12 Цикл
		
		НачалоМесяца = Дата(ГодМесяцаРасчета, НомерМесяца, 1);
		КонецМесяца  = КонецМесяца(НачалоМесяца);
		ДнейВМесяце = День(КонецМесяца);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			Если ЗначениеЗаполнено(ДатаРегистрации) И НачалоМесяца < ДатаРегистрации И ДатаРегистрации <= НачалоДня(КонецМесяца) Тогда
				// В этом месяце была осуществлена регистрация в качестве ИП
				ПервыйДеньМесяца = ДатаРегистрации;
				Если Не УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП(Период) Тогда
					// Течение срока начинается на следующий день после календарной даты, которым определено его начало.
					// Таким образом, расчет страховых взносов осуществляется со дня, следующего за днем государственной регистрации
					// индивидуального предпринимателя. Следовательно, дата регистрации в качестве индивидуального предпринимателя при
					// расчете страховых взносов не учитывается (настройка не применяется с 2017 года).
					ПервыйДеньМесяца = КонецДня(ДатаРегистрации) + 1;
					Если ПервыйДеньМесяца > КонецМесяца Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПервыйДеньМесяца = НачалоМесяца;
			КонецЕсли;
		Иначе
			// Расчет за полный месяц
			ПервыйДеньМесяца = НачалоМесяца;
		КонецЕсли;
		
		ДнейУплатыВзносов = ДнейВМесяце - День(ПервыйДеньМесяца) + 1;
		
		// Если на расчетный период попадают дни, когда ИП не оплачивал страховые взносы, вычтем их из общего количества дней
		// в месяце за которые должен уплачиваться взнос
		Для Каждого Интервал Из ИнтервалыИПНеОплачиваетВзносы Цикл
			Если Интервал.ДатаНачала <= КонецМесяца И Интервал.ДатаОкончания >= ПервыйДеньМесяца Тогда
				Если Интервал.ДатаНачала > ПервыйДеньМесяца Тогда
					НачалоИнтервала = Интервал.ДатаНачала;
				Иначе
					НачалоИнтервала = ПервыйДеньМесяца;
				КонецЕсли;
				Если Интервал.ДатаОкончания < КонецМесяца Тогда
					КонецИнтервала = Интервал.ДатаОкончания;
				Иначе
					КонецИнтервала = КонецМесяца;
				КонецЕсли;
				ПродолжительностьИнтервала = День(КонецИнтервала) - День(НачалоИнтервала) + 1;
				ДнейУплатыВзносов = ДнейУплатыВзносов - ПродолжительностьИнтервала;
			КонецЕсли;
		КонецЦикла;
		
		// Сумма взносов за первый месяц деятельности
		СуммаВзносаПФРЗаМесяц   = МесячныйВзносПФР * ДнейУплатыВзносов/ДнейВМесяце;
		СуммаВзносаФФОМСЗаМесяц = МесячныйВзносФФОМС * ДнейУплатыВзносов/ДнейВМесяце;
		
		// Сумма взносов до конца года
		СуммаВзносаПФРВсего   = СуммаВзносаПФРВсего + СуммаВзносаПФРЗаМесяц;
		СуммаВзносаФФОМСВсего = СуммаВзносаФФОМСВсего + СуммаВзносаФФОМСЗаМесяц;
		
		Если НомерМесяца <= НомерМесяцаРасчета Тогда
			// Сумма взносов до конца текущего месяца
			СуммаВзносаПФР   = СуммаВзносаПФР + СуммаВзносаПФРЗаМесяц;
			СуммаВзносаФФОМС = СуммаВзносаФФОМС + СуммаВзносаФФОМСЗаМесяц;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УплачиваютсяДобровольныеВзносыВФСС Тогда
		// Право на получение страхового обеспечения наступает только при условии уплаты
		// полной суммы страховых взносов за предшествующий календарный год
		СуммаВзносаФСС      = МесячныйВзносФСС * Месяц(Период);
		СуммаВзносаФССВсего = МесячныйВзносФСС * 12;
	Иначе
		СуммаВзносаФСС      = 0;
		СуммаВзносаФССВсего = 0;
	КонецЕсли;
	
	СтраховыеВзносы.ПФР        = Окр(СуммаВзносаПФР, 2, 1);
	СтраховыеВзносы.ФФОМС      = Окр(СуммаВзносаФФОМС, 2, 1);
	СтраховыеВзносы.ФСС        = Окр(СуммаВзносаФСС, 2, 1);
	
	СтраховыеВзносы.ПФРВсего   = Окр(СуммаВзносаПФРВсего, 2, 1);
	СтраховыеВзносы.ФФОМСВсего = Окр(СуммаВзносаФФОМСВсего, 2, 1);
	СтраховыеВзносы.ФССВсего   = Окр(СуммаВзносаФССВсего, 2, 1);
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, СтраховойПериод, ВидПлатежаВГосБюджет = Неопределено, Регистратор = Неопределено)
	
	Перем СтраховыеВзносыУплаченные;
	
	Если Не ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Или ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		
		ГраницыПериода = ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченные(Организация, ГраницыПериода.НачалоПериода, ГраницыПериода.КонецПериода,
			СтраховойПериод, Перечисления.ВидыПлатежейВГосБюджет.Налог, Регистратор);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Или ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		
		ГраницыПериода = ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
		
		СтраховыеВзносыСДоходовУплаченные = СтраховыеВзносыУплаченные(Организация, ГраницыПериода.НачалоПериода, ГраницыПериода.КонецПериода,
			СтраховойПериод, Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела, Регистратор);
		
		Если СтраховыеВзносыСДоходовУплаченные <> Неопределено Тогда
			Если СтраховыеВзносыУплаченные = Неопределено Тогда
				СтраховыеВзносыУплаченные = СтраховыеВзносыСДоходовУплаченные;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СтраховыеВзносыСДоходовУплаченные, СтраховыеВзносыУплаченные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтраховыеВзносыУплаченные;
	
КонецФункции

Функция СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоПериода, КонецПериода, ВидПлатежаВГосБюджет = Неопределено) Экспорт
	
	// Не проверяем страховой период
	Возврат СтраховыеВзносыУплаченные(Организация, НачалоПериода, КонецПериода, , ВидПлатежаВГосБюджет);
	
КонецФункции

// При расчете взносов к оплате учитывается Страховой период - ищем все оплаты, относящиеся к страховому периоду
// При начислении взносов учитывается период начисления с Начала периода по Конец периода - ищем все оплаты за период начисления
//
Функция СтраховыеВзносыУплаченные(Организация, НачалоПериода, КонецПериода, СтраховойПериод = Неопределено, ВидПлатежаВГосБюджет = Неопределено, Регистратор = Неопределено)
	
	Если ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Тогда
		ВидыПлатежей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидПлатежаВГосБюджет);
	Иначе
		ВидыПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	КонецЕсли;
	
	СчетаУплаты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ВидыПлатежей", ВидыПлатежей);
	Запрос.УстановитьПараметр("СчетаУплаты", СчетаУплаты);
	
	Если Регистратор = Неопределено Тогда
		Если КонецПериода < НачалоПериода Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Иначе
		МоментВремени = Регистратор.МоментВремени();
		Если МоментВремени.Дата < НачалоПериода Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(МоментВремени, ВидГраницы.Исключая));
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Период КАК Период,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
		|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
		|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
		|	КОНЕЦ КАК СтраховойПериод,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ ВТ_СтраховыеВзносыУплаченные
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
		|			СчетКт В (&СчетаУплаты),
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Если Не ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Или ВидПлатежаВГосБюджет <> Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" +
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Период КАК Период,
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
		|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
		|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
		|	КОНЕЦ КАК СтраховойПериод,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
		|			СчетКт В (&СчетаУплаты),
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.Организация,
		|	ХозрасчетныйОборотыДтКт.Регистратор";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	СтраховыеВзносыУплаченные.Регистратор КАК ДокументОплаты,
		|	СтраховыеВзносыУплаченные.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(СтраховыеВзносыУплаченные.СтраховойПериод, ГОД) КАК СтраховойПериод,
		|	СтраховыеВзносыУплаченные.СчетДт КАК СчетУчета,
		|	СтраховыеВзносыУплаченные.СубконтоДт1 КАК ВидПлатежаВГосБюджет,
		|	СтраховыеВзносыУплаченные.СуммаОборот КАК Сумма,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.НомерРегистратора, """") КАК НомерДокументаОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, СтраховыеВзносыУплаченные.Период) КАК ДатаДокументаОплаты,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.Номер, """") КАК НомерВходящегоДокумента,
		|	ЕСТЬNULL(РеквизитыДокументовОплаты.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
		|ИЗ
		|	ВТ_СтраховыеВзносыУплаченные КАК СтраховыеВзносыУплаченные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО СтраховыеВзносыУплаченные.Организация = РеквизитыДокументовОплаты.Организация
		|			И СтраховыеВзносыУплаченные.Регистратор = РеквизитыДокументовОплаты.Документ";
	
	Запрос.Текст = ТекстЗапроса;
	
	СтраховыеВзносыУплаченные = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(СтраховойПериод) Тогда
		
		// Проверка страхового периода
		Индекс = СтраховыеВзносыУплаченные.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ТекущаяСтрока = СтраховыеВзносыУплаченные[Индекс];
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.СтраховойПериод)
				И НачалоГода(ТекущаяСтрока.СтраховойПериод) <> НачалоГода(СтраховойПериод) Тогда
				
				СтраховыеВзносыУплаченные.Удалить(ТекущаяСтрока);
				
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтраховыеВзносыУплаченные;
	
КонецФункции

Функция СтраховыеВзносыНачисленные(Организация, НачалоПериода, КонецПериода, ВидПлатежаВГосБюджет = Неопределено)
	
	Если ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Тогда
		ВидыПлатежей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидПлатежаВГосБюджет);
	Иначе
		ВидыПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыПлатежей", ВидыПлатежей);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетУчета,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК ВидПлатежаВГосБюджет,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Если НЕ ЗначениеЗаполнено(ВидПлатежаВГосБюджет) Или ВидПлатежаВГосБюджет <> Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетКт,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы),
		|			,
		|			СчетКт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
		|			Организация = &Организация
		|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтраховыеВзносыНачисленные = Запрос.Выполнить().Выгрузить();
	
	Возврат СтраховыеВзносыНачисленные;
	
КонецФункции

// Возвращает границы периода, в течение которого могут уплачиваться фиксированные взносы
// указанного вида за указанный страховой период.
//
// Параметры:
//  СтраховойПериод      - Дата - дата в пределах страхового периода (года начисления взносов).
//  ВидПлатежаВГосБюджет - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - вид взносов.
//
// Возвращаемое значение:
//   Структура:
//    * НачалоПериода - Дата
//    * КонецПериода  - Дата
//
Функция ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, ВидПлатежаВГосБюджет) Экспорт
	
	ГраницыПериода = Новый Структура;
	ГраницыПериода.Вставить("НачалоПериода", НачалоГода(СтраховойПериод));
	
	Если ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		СрокУплаты = СрокУплатыВзносовСвышеПредела(СтраховойПериод);
	Иначе
		СрокУплаты = КонецГода(СтраховойПериод);
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСервер.СтраховыеВзносыРаздельно(СтраховойПериод) Тогда
		// При начислении страховых взносов независимо от платежей - учитываются уплаченные взносы без ограничения периода.
		ГраницыПериода.Вставить("КонецПериода", Макс(КонецДня(СрокУплаты), КонецДня(ТекущаяДатаСеанса())));
	Иначе
		// При начислении страховых взносов на основании проведенных платежей срок осмотра ограничен сроками уплаты.
		ГраницыПериода.Вставить("КонецПериода", КонецДня(СрокУплаты));
	КонецЕсли;
	
	Возврат ГраницыПериода;
	
КонецФункции

Функция СрокУплатыВзносовСвышеПредела(СтраховойПериод)
	
	ГодСтраховогоПериода = Год(СтраховойПериод);
	Если ГодСтраховогоПериода < 2017 Тогда
		СрокУплаты = Дата(ГодСтраховогоПериода + 1, 4, 1); // до 1 апреля следующего года
	Иначе
		СрокУплаты = Дата(ГодСтраховогоПериода + 1, 7, 1); // до 1 июля следующего года
	КонецЕсли;
	
	Возврат СрокУплаты;
	
КонецФункции

Функция РазмерыСтраховыхВзносов(СтраховойПериод, Организация)
	
	СтраховыеВзносы = Новый Структура("ПФР, ФФОМС, ФСС, ПредельнаяСуммаВзноса", 0, 0, 0, 0);
	
	Если СтраховойПериод < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыПродленияСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПараметрыПродленияСроков(Организация);
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = ПараметрыПродленияСроков.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
	Иначе
		ДеятельностьОтнесенаКПострадавшимОтКоронавируса = Ложь;
	КонецЕсли;
	
	МРОТ = МинимальнаяОплатаТрудаРФНаНачалоГода(СтраховойПериод);
	
	СтраховыеВзносы.ФСС = МРОТ * 12 * ТарифВзносаФСС(СтраховойПериод) / 100;
	
	ГодСтраховогоПериода = Год(СтраховойПериод);
	Если ГодСтраховогоПериода < 2018 Тогда
		СтраховыеВзносы.ПФР   = МРОТ * 12 * 26 / 100;
		СтраховыеВзносы.ФФОМС = МРОТ * 12 * 5.1 / 100;
	ИначеЕсли ГодСтраховогоПериода = 2018 Тогда
		СтраховыеВзносы.ПФР   = 26545;
		СтраховыеВзносы.ФФОМС = 5840;
	ИначеЕсли ГодСтраховогоПериода = 2019 Тогда
		СтраховыеВзносы.ПФР   = 29354;
		СтраховыеВзносы.ФФОМС = 6884;
	ИначеЕсли ГодСтраховогоПериода = Год(ПериодУменьшенияВзносов_ДеятельностьОтнесенаКПострадавшимОтКоронавируса()) Тогда
		СтраховыеВзносы.ПФР   = ?(ДеятельностьОтнесенаКПострадавшимОтКоронавируса, 20318, 32448);
		СтраховыеВзносы.ПредельнаяСуммаВзноса = 32448 * 8;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2020 Тогда
		СтраховыеВзносы.ПФР   = 32448;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2021 Тогда
		СтраховыеВзносы.ПФР   = 32448;
		СтраховыеВзносы.ФФОМС = 8426;
	ИначеЕсли ГодСтраховогоПериода = 2022 Тогда
		СтраховыеВзносы.ПФР   = 34445;
		СтраховыеВзносы.ФФОМС = 8766;
	Иначе
		СтраховыеВзносы.ПФР   = 36723;
		СтраховыеВзносы.ФФОМС = 9119;
	КонецЕсли;
	
	Если СтраховыеВзносы.ПредельнаяСуммаВзноса = 0 Тогда
		СтраховыеВзносы.ПредельнаяСуммаВзноса = СтраховыеВзносы.ПФР * 8;
	КонецЕсли;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция ПериодУменьшенияВзносов_ДеятельностьОтнесенаКПострадавшимОтКоронавируса() Экспорт
	
	Возврат Дата(2020, 1, 1);
	
КонецФункции

Функция ТарифВзносаФСС(СтраховойПериод)
	
	Если СтраховойПериод < ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		Возврат 0;
	Иначе
		Возврат 2.9;
	КонецЕсли;
	
КонецФункции

Функция МинимальнаяОплатаТрудаРФНаНачалоГода(Период)
	
	Возврат УчетЗарплаты.МинимальныйРазмерОплатыТрудаРФ(НачалоГода(Период));
	
КонецФункции

Функция СчетаУчетаСтраховыхВзносов() Экспорт
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("ПФР",   ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаУчета.Вставить("ФФОМС", ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	СчетаУчета.Вставить("ФСС",   ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод);
	
	Возврат СчетаУчета;
	
КонецФункции

Процедура ПроверитьЗаполнениеВидовПлатежейВГосБюджет(Ошибки, НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Не указан вид платежа в страховой фонд.'");
	Ошибка.Рекомендация = НСтр("ru = 'Укажите вид платежа в страховой фонд.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В документе [Документ] не указан вид платежа в страховой фонд'");
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Документ", Строка(Выборка.ДокументОплаты));
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыСтроки);
		МестоОшибки.Ссылка      = Выборка.ДокументОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОбновленияИБ

Процедура УстановитьЗначениеКонстантыУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП() Экспорт
	
	МенеджерЗначения = Константы.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
КонецПроцедуры

// Возвращает периодичность начисления страховых взносов в фиксированном размере
//
Функция ПериодичностьНачисления(Организация, Период) Экспорт
	
	Если Период >= ДатаАвтоНачисленияСтраховыхВзносовИП() Тогда
		
		ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходыЗаПериод(
			Организация, НачалоКвартала(Период), КонецКвартала(Период));
		ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(
			Организация, НачалоКвартала(Период), КонецКвартала(Период));
		
		Если ПрименяетсяУСНДоходыМинусРасходы
			Или (ПлательщикНДФЛ И Период >= УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ()) Тогда
			// Выполняем чаще для признания расходов и уменьшения авансового платежа
			Периодичность = Перечисления.Периодичность.Квартал;
		ИначеЕсли ПлательщикНДФЛ
			И УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период))
			И УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период) Тогда
			// Выполняем ежеквартально для разделения расходов между ОСНО и уменьшением ЕНВД
			Периодичность = Перечисления.Периодичность.Квартал;
		Иначе
			Периодичность = Перечисления.Периодичность.Год;
		КонецЕсли;
		
	Иначе
		
		Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
			Периодичность = Перечисления.Периодичность.Год;
		Иначе
			Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции

// Рассчитывает страховые взносы с начала года до конца периода
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - конец месяца, на который рассчитываются страховые взносы
//   СуммаВзносаПФРсДоходов - Число - сумма взносов с доходов к начислению. Указывается
//     в случаях, если рассчитывать сумму не нужно. Например, при уплате взносов за период,
//     предшествующий вводу остатков.
//
Функция ТаблицаНачисленияСтраховыхВзносов(Организация, Период, СуммаВзносаПФРсДоходов = Неопределено)
	
	ТаблицаСтраховыхВзносов = НоваяТаблицаСтраховыхВзносов();
	
	ФиксированныеСтраховыеВзносы = РассчитатьФиксированныеСтраховыеВзносы(Период, Организация);
	
	Если СуммаВзносаПФРсДоходов = Неопределено Тогда
		СтраховыеВзносыСДоходов = РассчитатьСтраховыеВзносыСДоходов(Организация, Период);
	Иначе
		СтраховыеВзносыСДоходов = Новый Структура;
		СтраховыеВзносыСДоходов.Вставить("Сумма", СуммаВзносаПФРсДоходов);
		СтраховыеВзносыСДоходов.Вставить("СуммаПредельная", ДанныеДляРасчетаСтраховыхВзносовСДоходов(КонецМесяца(Период), Организация).ПредельнаяСуммаВзноса);
	КонецЕсли;
	
	СтраховойПериод = НачалоГода(Период);
	
	ПорядокУчетаРасходов = Новый Структура("СтатьяЗатрат, ВидДеятельностиДляНалоговогоУчетаЗатрат, ПринятиеКналоговомуУчету");
	ПорядокУчетаРасходов.СтатьяЗатрат = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносовИП");
	
	Если ЗначениеЗаполнено(ПорядокУчетаРасходов.СтатьяЗатрат) Тогда
		СвойстваСтатьиЗатрат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПорядокУчетаРасходов.СтатьяЗатрат,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат, ПринятиеКналоговомуУчету");
		ЗаполнитьЗначенияСвойств(ПорядокУчетаРасходов, СвойстваСтатьиЗатрат);
	КонецЕсли;
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	
	Если ФиксированныеСтраховыеВзносы.ПФР > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФР;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ПФР;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ПФРВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Если СтраховыеВзносыСДоходов.Сумма > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФР;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
		НоваяСтрока.Сумма = СтраховыеВзносыСДоходов.Сумма;
		НоваяСтрока.СуммаПредельная = СтраховыеВзносыСДоходов.СуммаПредельная;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Если ФиксированныеСтраховыеВзносы.ФФОМС > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ФФОМС;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ФФОМС;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ФФОМСВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Если ФиксированныеСтраховыеВзносы.ФСС > 0 Тогда
		НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
		НоваяСтрока.СтраховойПериод = СтраховойПериод;
		НоваяСтрока.СчетУчета = СчетаУчетаСтраховыхВзносов.ФСС;
		НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма = ФиксированныеСтраховыеВзносы.ФСС;
		НоваяСтрока.СуммаПредельная = ФиксированныеСтраховыеВзносы.ФССВсего;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокУчетаРасходов);
	КонецЕсли;
	
	Возврат ТаблицаСтраховыхВзносов;
	
КонецФункции

// Возвращает таблицу расходов ИП на ОСНО и УСН
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НачалоПериода - Дата - начало периода, за который рассчитываются страховые взносы
//   КонецПериода - Дата - конец периода, за который рассчитываются страховые взносы
//
// Возвращаемое значение:
//    ТаблицаЗначений, Неопределено - см. УчетСтраховыхВзносовИП.НоваяТаблицаСтраховыхВзносов();
//
Функция ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если КонецПериода < ДатаНачалаУчетаСтраховыхВзносовИП()
		Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		Или Не УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРасходов = ТаблицаРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода);
	
	Возврат ТаблицаРасходов;
	
КонецФункции

// Возвращает таблицу расходов уменьшающих налог УСН и ЕНВД
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НачалоПериода - Дата - начало периода, за который рассчитываются страховые взносы
//   КонецПериода - Дата - конец периода, за который рассчитываются страховые взносы
//
// Возвращаемое значение:
//    ТаблицаЗначений, Неопределено - см. УчетСтраховыхВзносовИП.НоваяТаблицаСтраховыхВзносов();
//
Функция ПодготовитьТаблицуРасходовУменьшающихНалог(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если КонецПериода < ДатаНачалаУчетаСтраховыхВзносовИП() Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРасходов = ТаблицаРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода);
	
	// Добровольные взносы в ФСС не уменьшают налоги
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	ПараметрыОтбора = Новый Структура("СчетУчета", СчетаУчетаСтраховыхВзносов.ФСС);
	
	НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоСтрок = НайденныеСтроки.Количество();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		ТаблицаРасходов.Удалить(НайденныеСтроки[КоличествоСтрок - Счетчик]);
	КонецЦикла;
	
	Возврат ТаблицаРасходов;
	
КонецФункции

Функция ТаблицаРасходовНаУплатуСтраховыхВзносов(Организация, НачалоПериода, КонецПериода)
	
	НачалоПрошлогоГода = НачалоГода(ДобавитьМесяц(КонецПериода, -12));
	СрокУплатыВзносовЗаПрошлыйГод = СрокУплатыВзносовСвышеПредела(НачалоПрошлогоГода);
	Если НачалоПериода <= СрокУплатыВзносовЗаПрошлыйГод Тогда
		// До истечения срока уплаты взносов с доходов могут уплачиваться взносы, которые относятся к прошлому году.
		СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоПрошлогоГода, КонецПериода);
	Иначе
		СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоГода(НачалоПериода), КонецПериода);
	КонецЕсли;
	
	Если СтраховыеВзносыУплаченные = Неопределено Тогда
		Возврат НоваяТаблицаСтраховыхВзносов();
	КонецЕсли;
	
	ПоляОтбора = "СтраховойПериод, СчетУчета, ВидПлатежаВГосБюджет";
	СтраховыеВзносыУплаченные.Индексы.Добавить(ПоляОтбора);
	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	
	СтраховыеВзносыУплаченные.Сортировать("СтраховойПериод");
	ВсеСтраховыеПериоды = ОбщегоНазначения.ВыгрузитьКолонку(СтраховыеВзносыУплаченные, "СтраховойПериод", Истина);
	
	Индекс = ВсеСтраховыеПериоды.ВГраница();
	Пока Индекс >= 0 Цикл
		Если ВсеСтраховыеПериоды[Индекс] > КонецПериода Тогда
			ВсеСтраховыеПериоды.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ДатаВводаОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	
	ТаблицаСтраховыхВзносов = НоваяТаблицаСтраховыхВзносов();
	Для Каждого СтраховойПериод Из ВсеСтраховыеПериоды Цикл
		
		Если ЗначениеЗаполнено(ДатаВводаОстатков) И КонецГода(СтраховойПериод) <= КонецДня(ДатаВводаОстатков) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("СтраховойПериод", СтраховойПериод);
			Отбор.Вставить("ВидПлатежаВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
			СтраховыеВзносыУплаченныеЗаПериодДоВводаОстатков = СтраховыеВзносыУплаченные.НайтиСтроки(Отбор);
			
			СуммаВзносаПФРсДоходовДоВводаОстатков = 0;
			Для Каждого Уплачено Из СтраховыеВзносыУплаченныеЗаПериодДоВводаОстатков Цикл
				СуммаВзносаПФРсДоходовДоВводаОстатков = СуммаВзносаПФРсДоходовДоВводаОстатков + Уплачено.Сумма
			КонецЦикла;
		Иначе
			СуммаВзносаПФРсДоходовДоВводаОстатков = Неопределено;
		КонецЕсли;
		
		ГраницаНачисления = Мин(КонецГода(СтраховойПериод), КонецПериода);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ТаблицаНачисленияСтраховыхВзносов(Организация, ГраницаНачисления, СуммаВзносаПФРсДоходовДоВводаОстатков),
			ТаблицаСтраховыхВзносов);
	КонецЦикла;
	
	ТаблицаРасходов = НоваяТаблицаСтраховыхВзносов();
	Для Каждого Начислено Из ТаблицаСтраховыхВзносов Цикл
		
		// Ищем платежи, которые относятся к начислению
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Начислено);
		НайденныеПлатежи = СтраховыеВзносыУплаченные.Скопировать(ПараметрыОтбора);
		НайденныеПлатежи.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
		
		Для Каждого Уплачено Из НайденныеПлатежи Цикл
			
			Сумма = Мин(Уплачено.Сумма, Начислено.СуммаПредельная);
			Начислено.СуммаПредельная = Начислено.СуммаПредельная - Сумма;
			
			Если КонецПериода = КонецГода(КонецПериода) Тогда
				Если Сумма <= Начислено.Сумма Тогда
					СуммаРасходов  = Сумма;
					СуммаПереплаты = 0;
				Иначе
					СуммаРасходов  = Начислено.Сумма;
					СуммаПереплаты = Сумма - Начислено.Сумма;
				КонецЕсли;
			Иначе
				СуммаРасходов  = Сумма;
				СуммаПереплаты = 0;
			КонецЕсли;
			Начислено.Сумма = Начислено.Сумма - СуммаРасходов;
			
			Если СуммаРасходов <> 0 И НачалоПериода <= Уплачено.ДатаДокументаОплаты И Уплачено.ДатаДокументаОплаты <= КонецПериода Тогда
				НоваяСтрока = ТаблицаРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Начислено);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Уплачено);
				НоваяСтрока.Сумма = СуммаРасходов;
			КонецЕсли;
			
			Если СуммаПереплаты <> 0 И Уплачено.ДатаДокументаОплаты < НачалоПериода Тогда
				НоваяСтрока = ТаблицаРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Начислено);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Уплачено);
				НоваяСтрока.Сумма = -СуммаПереплаты;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРасходов;
	
КонецФункции

#КонецОбласти

Функция ЭтоИПНулевка(Организация) Экспорт
	
	Возврат НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности(); // Режим сервиса "Нулевка"
		
КонецФункции

Функция НачалоСтраховогоПериода(Период) Экспорт
	
	Возврат НачалоГода(Период);
	
КонецФункции

Функция НачальныеОстаткиПоВзносамВведены(Организация) Экспорт
	
	Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(Организация, ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогамИСборам КАК ВводНачальныхОстатковРасчетыПоНалогамИСборам
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Проведен
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.Организация = &Организация
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.ОтражатьВБухгалтерскомУчете
	|	И ВводНачальныхОстатковРасчетыПоНалогамИСборам.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам)
	|	И (ВводНачальныхОстатковРасчетыПоНалогамИСборам.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод)
	|			ИЛИ ВводНачальныхОстатковРасчетыПоНалогамИСборам.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП))";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаСтраховыхВзносов()
	
	ТаблицаСтраховыхВзносов = Новый ТаблицаЗначений;
	
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СтраховойПериод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ВидПлатежаВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ПринятиеКналоговомуУчету", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДокументОплаты",Документы.ТипВсеСсылки());
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДатаДокументаОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СуммаПредельная", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДатаВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("НомерВходящегоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	Возврат ТаблицаСтраховыхВзносов;
	
КонецФункции

Функция РассчитатьСтраховыеВзносыСДоходов(Организация, Период)
	
	Период = КонецМесяца(Период); // Считаем взносы до конца месяца
	
	СтруктураДоходов = СтруктураДоходовПоВидамДеятельности(Организация, НачалоГода(Период), Период);
	
	Если УчитыватьРасходыПриРасчетеВзносовСДоходов(Организация, Период) Тогда
		
		// Уплаченные в течение периода взносы еще не включены в расходы, но при расчете взноса с доходов их требуется учесть.
		// Используется допущение - все уплаченные взносы при закрытии периода будут отражены в составе расходов.
		
		ПериодичностьНачисленияВзносов = ПериодичностьНачисления(Организация, Период);
		НачалоПериода = ?(ПериодичностьНачисленияВзносов = Перечисления.Периодичность.Квартал, НачалоКвартала(Период), НачалоГода(Период));
		
		ВзносыУплаченныеЗаПериод = СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоПериода, Период);
		
		СтруктураДоходов.СуммаДоходаИП  = Макс(СтруктураДоходов.СуммаДоходаИП - ВзносыУплаченныеЗаПериод.Итог("Сумма"), 0);
		СтруктураДоходов.СуммаДоходаУСН = Макс(СтруктураДоходов.СуммаДоходаУСН - ВзносыУплаченныеЗаПериод.Итог("Сумма"), 0);
		
	КонецЕсли;
	
	ВсегоДоходов = СтруктураДоходов.СуммаДоходаИП
				 + СтруктураДоходов.СуммаДоходаУСН
				 + СтруктураДоходов.ВмененныйДоход
				 + СтруктураДоходов.ПотенциальноВозможныйДоход;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСтраховыхВзносовСДоходов(Период, Организация);
	ОблагаемыйДоход = Макс(ВсегоДоходов - ДанныеДляРасчета.ПорогДоходов, 0);
	РасчетнаяСуммаВзноса = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / 100, 2, 1);
	
	МаксимальнаяСуммаВзноса = ДанныеДляРасчета.ПредельнаяСуммаВзноса - ДанныеДляРасчета.ФиксированнаяЧастьПФР;
	
	СуммаВзносаПФРсДоходов = Мин(РасчетнаяСуммаВзноса, МаксимальнаяСуммаВзноса);
	
	Возврат Новый Структура("Сумма, СуммаПредельная", СуммаВзносаПФРсДоходов, ДанныеДляРасчета.ПредельнаяСуммаВзноса);
	
КонецФункции

// Дата автоматизации учета страховых взносов в фиксированном размере
//
Функция ДатаНачалаУчетаСтраховыхВзносовИП() Экспорт
	
	Возврат Дата(2014, 1, 1);
	
КонецФункции

// Дата перехода к начислению страховых взносов в фиксированном размере независимо от наличия оплаты
//
Функция ДатаАвтоНачисленияСтраховыхВзносовИП()
	
	Возврат Дата(2016, 1, 1);
	
КонецФункции

Функция НовыеПараметрыРасчетаВзносаСДоходов()
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("ПериодичностьНачисления", Перечисления.Периодичность.Квартал);
	ПараметрыРасчета.Вставить("УчитыватьРасходы", Ложь);
	ПараметрыРасчета.Вставить("РасчетЗаТекущийПериод", Ложь);
	ПараметрыРасчета.Вставить("ВсегоДоходов", 0);
	ПараметрыРасчета.Вставить("ФиксированнаяЧастьВзносов", 0);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ОстатокРасчетовПоВзносамЗаПредыдущиеСтраховыеПериодыИнтеграцияСБанком(Организация, СтраховойПериод) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	
	СтраховыеВзносы.Вставить("ПФР",        0);
	СтраховыеВзносы.Вставить("ФФОМС",      0);
	СтраховыеВзносы.Вставить("ФСС",        0);
	
	Если НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	// Данные по состоянию расчетов за предыдущие страховые периоды определяются следующим образом:
	// 1. Получаем платежи за предыдущие страховые периоды, выполненные с начала года переданного страхового периода.
	// 2. Суммируем с остатками по взносам на начало текущего страхового периода.
	ТекстЗапроса = "ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК Счет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Период
	|	КОНЕЦ КАК НалоговыйПериод,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ ВТ_ПлатежиСНачалаГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			,
	|			Регистратор,
	|			СчетДт В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаОплатыНалога),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиИОплаты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаНачисленияНалога),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПлатежиСНачалаГода.Счет,
	|	ВТ_ПлатежиСНачалаГода.СуммаОборот
	|ИЗ
	|	ВТ_ПлатежиСНачалаГода КАК ВТ_ПлатежиСНачалаГода
	|ГДЕ
	|	ВТ_ПлатежиСНачалаГода.НалоговыйПериод < &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиИОплаты.Счет КАК Счет,
	|	СУММА(ВТ_ОстаткиИОплаты.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	ВТ_ОстаткиИОплаты КАК ВТ_ОстаткиИОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстаткиИОплаты.Счет";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтраховойПериод));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежей);
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	
	СчетаНачисленияНалога = Новый Массив;
	СчетаНачисленияНалога.Добавить(СчетаУчетаСтраховыхВзносов.ПФР);
	СчетаНачисленияНалога.Добавить(СчетаУчетаСтраховыхВзносов.ФФОМС);
	Запрос.УстановитьПараметр("СчетаНачисленияНалога", СчетаНачисленияНалога);
	
	СчетаОплатыНалога = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаОплатыНалога, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	Запрос.УстановитьПараметр("СчетаОплатыНалога", СчетаОплатыНалога);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Счет = СчетаУчетаСтраховыхВзносов.ПФР Тогда
			СтраховыеВзносы.ПФР = Выборка.СуммаОстаток;
		ИначеЕсли Выборка.Счет = СчетаУчетаСтраховыхВзносов.ФФОМС Тогда
			СтраховыеВзносы.ФФОМС = Выборка.СуммаОстаток;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

#КонецОбласти