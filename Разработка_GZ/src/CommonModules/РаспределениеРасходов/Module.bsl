#Область ПрограммныйИнтерфейс

// Создает временные таблицы со схемой распределения.
// Схема распределения описывает:
// - источники расходов (что подлежит распределению)
// - приемники расходов (что получится в результате распределения)
// - базу - коэффициенты распределения.
// Важно: схема распределения не содержит никаких суммовых показателей.
//
// Создаваемые временные таблицы:
// - Расходы     - пронумерованные наборы аналитики расходов, подлежащих распределению. 
//                 Здесь аналитика расходов - Счет, подразделение, номенклатурная группа, статья затрат
// - РаспределениеНаРасходы,
//   РаспределениеНаСубконто,
//   ОбособленныйНалоговыйУчет - результат распределения, подробнее см. НовыйРезультатРаспределения()
Процедура СоздатьСхемуРаспределения(МенеджерВременныхТаблиц, ПравилаРаспределения, РазрезыРаспределения, Период, Организация) Экспорт
	
	Если ПравилаРаспределения.Количество() = 0 Тогда
		СоздатьПустуюСхемуРаспределения(МенеджерВременныхТаблиц, РазрезыРаспределения);
		Возврат;
	КонецЕсли;
	
	ТаблицыБазРаспределения = СоздатьБазыРаспределения(
		МенеджерВременныхТаблиц,
		ПравилаРаспределения,
		Период,
		Организация);
	
	РезультатРаспределения = НовыйРезультатРаспределения(РазрезыРаспределения);
	
	// В ходе подготовки к распределению и самого распределения могут быть созданы новые вершины.
	// Для их нумерации поддерживаем актуальный МаксимальныйИдентификатор
	МаксимальныйИдентификатор = МаксимальныйИдентификаторКлючиВершин(МенеджерВременныхТаблиц);
	
	// В ходе распределения представляем аналитику не в виде наборов субконто ("КлючиВершин"),
	// а в виде наборов аналитики распределения расходов ("Расходы").
	//
	// "Расставим фигуры" - создаем первое поколение временной таблицы Расходы
	СоздатьРасходы(
		МенеджерВременныхТаблиц,
		ПравилаРаспределения,
		ТаблицыБазРаспределения,
		МаксимальныйИдентификатор,
		РазрезыРаспределения);
		
	// Далее по ходу распределения расходов может быть выявлена новая аналитика расходов
	// (как результат распределения расходов на расходы).
	// В результет таблица Расходы может быть дополнена новыми вершинами (будет создано новое поколение таблицы)
	
	// Далее будем работать именно с Расходы, при этом КлючиВершин в ходе распределения может оставаться неактуальной.
	// Обновление КлючиВершин выполним по окончании распределения - ОбновитьКлючиВершин
	
	ЕстьЧтоРаспределять = МаксимальныйИдентификатор <> -1;
	
	Пока ЕстьЧтоРаспределять Цикл
		
		ЕстьЧтоРаспределять = Ложь;
		
		Для Каждого ПравилоРаспределения Из ПравилаРаспределения Цикл
			
			ЕстьБазаРаспределения = Истина;
			ИмяТаблицыБазыРаспределения     = "";
			ИндексыТаблицыБазыРаспределения = Новый Массив;
			Если ПравилоРаспределения.БазаРаспределения.Свойство("Имя", ИмяТаблицыБазыРаспределения) Тогда
				ЕстьБазаРаспределения = ТаблицыБазРаспределения.Свойство(ИмяТаблицыБазыРаспределения);
				Если ЕстьБазаРаспределения Тогда
					ИндексыТаблицыБазыРаспределения = ТаблицыБазРаспределения[ИмяТаблицыБазыРаспределения];
				КонецЕсли;
			КонецЕсли;
			
			// Порядок правил важен: каждое следующее правило пытается распределить то,
			// что не смогло распределить предыдущее
			
			ОтобраныРасходы = ОтобратьРасходы(
				МенеджерВременныхТаблиц,
				ПравилоРаспределения,
				ИндексыТаблицыБазыРаспределения,
				РазрезыРаспределения);
				
			Если Не ОтобраныРасходы Тогда
				Продолжить;
			КонецЕсли;
			
			// ОтобратьРасходы создала РасходыПоПравилу
			Если Не ЕстьБазаРаспределения Тогда
				ЗафиксироватьРасходыБезБазыРаспределения(МенеджерВременныхТаблиц, ПравилоРаспределения, РезультатРаспределения);
				Продолжить;
			КонецЕсли;
			
			// Создает РезультатРаспределения
			Если СоздатьРезультатРаспределения(МенеджерВременныхТаблиц, ПравилоРаспределения, РазрезыРаспределения) Тогда
				
				// Создает НовыеРасходы
				ДобавленыНовыеРасходы = СоздатьНовыеРасходы(
					МенеджерВременныхТаблиц,
					ПравилоРаспределения,
					МаксимальныйИдентификатор,
					РазрезыРаспределения);
					
				ЕстьЧтоРаспределять   = ЕстьЧтоРаспределять Или ДобавленыНовыеРасходы;
				
				// Обновляет Расходы, уничтожает НовыеРасходы
				ОбновитьРасходы(МенеджерВременныхТаблиц, ПравилоРаспределения.Действие, РазрезыРаспределения);
				
				ДополнитьРезультатРаспределения(
					МенеджерВременныхТаблиц,
					ПравилоРаспределения,
					РезультатРаспределения,
					РазрезыРаспределения);
				
				// Расходы с заполненной номенклатурой исключаются из распределения,
				// чтобы сократить количество похожих ребер, не имеющих экономического смысла.
				// Наличие таких ребер искажало бы данные в протоколе распределения,
				// так как коэффициенты базы в нем суммируются.
				СгруппироватьПоНоменклатуре(
					МенеджерВременныхТаблиц,
					ПравилоРаспределения,
					РезультатРаспределения,
					РазрезыРаспределения);
				
			КонецЕсли;
			
			ЗафиксироватьНеРаспределенныеРасходы(МенеджерВременныхТаблиц, ПравилоРаспределения, РезультатРаспределения);
			УничтожитьТаблицу(МенеджерВременныхТаблиц, "РезультатРаспределения");
			
		КонецЦикла; // По правилам распределения
		
	КонецЦикла; // Пока есть новые расходы
	
	// Обновляет КлючиВершин, использует Расходы
	ОбновитьКлючиВершин(МенеджерВременныхТаблиц);
	
	// РаспределениеНаРасходы
	// РаспределениеНаСубконто
	// ОбособленныйНалоговыйУчет
	// НеУдалосьРаспределить
	ПоместитьРезультатРаспределенияВоВременныеТаблицы(МенеджерВременныхТаблиц, РезультатРаспределения, РазрезыРаспределения);
	
КонецПроцедуры

// Создает пустые временные таблицы со схемой распределения
Процедура СоздатьПустуюСхемуРаспределения(МенеджерВременныхТаблиц, РазрезыРаспределения)
	
	// Пустая таблица Расходы
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	0 КАК Идентификатор,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ИСТИНА КАК МожноРаспределить,
	|	ИСТИНА КАК МожноВыделитьНалоговыйУчет,
	|	ЛОЖЬ КАК МожетБытьПриемником
	|ПОМЕСТИТЬ Расходы
	|ГДЕ
	|	ЛОЖЬ";
	
	// Дополним полями разрезов распределения. В отличие от других мест, здесь нет источника данных
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		ОператорЗапроса.ВыбираемыеПоля.Добавить("&" + ОписаниеРазрезаРаспределения.Имя);
		ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1].Псевдоним = ОписаниеРазрезаРаспределения.Имя;
	КонецЦикла;
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		ЗначениеПоУмолчанию = ОписаниеРазрезаРаспределения.ТипЗначения.ПривестиЗначение(Неопределено);
		Запрос.УстановитьПараметр(ОписаниеРазрезаРаспределения.Имя, ЗначениеПоУмолчанию);
	КонецЦикла;
	Запрос.Выполнить();
	
	ПоместитьРезультатРаспределенияВоВременныеТаблицы(
		МенеджерВременныхТаблиц,
		НовыйРезультатРаспределения(РазрезыРаспределения),
		РазрезыРаспределения);
	
КонецПроцедуры

Процедура УничтожитьСхемуРаспределения(МенеджерВременныхТаблиц) Экспорт
	
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "Расходы");
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "РаспределениеНаСубконто");
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "РаспределениеНаРасходы");
	
КонецПроцедуры

// Возвращает разрезы, в которых распределяются расходы.
// При использовании Расширенной функциональности перечень включает субконто без флага "Только обороты",
// добавленные пользователем на счета затрат.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит таблицу СчетаРасходов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйРазрезыРаспределения()
//
Функция РазрезыРаспределения(МенеджерВременныхТаблиц) Экспорт
	
	РазрезыРаспределения = НовыйРазрезыРаспределения();
	
	// Заполним предопределенными (заданными при конфигурировании) разрезами
	РазрезыОпределяемыеПоСубконто = ПредопределенныеРазрезыРаспределенияОпределяемыеПоСубконто();
	Для Каждого ОписаниеПредопределенногоРазреза Из ПредопределенныеРазрезыРаспределения() Цикл
	
		ОписаниеРазреза = РазрезыРаспределения.Добавить();
		ОписаниеРазреза.Имя         = ОписаниеПредопределенногоРазреза.Ключ;
		ОписаниеРазреза.ТипЗначения = ОписаниеПредопределенногоРазреза.Значение;
		
		РазрезыОпределяемыеПоСубконто.Свойство(
			ОписаниеРазреза.Имя,
			ОписаниеРазреза.ВидСубконто);
			
		Если ЗначениеЗаполнено(ОписаниеРазреза.ВидСубконто) Тогда
			ОписаниеРазреза.Ключ = ОписаниеРазреза.ВидСубконто;
		Иначе
			ОписаниеРазреза.Ключ = ОписаниеРазреза.Имя;
		КонецЕсли;
			
	КонецЦикла;
	
	РасширеннаяАналитикаЗатрат.ДополнитьРазрезыРаспределенияСубконтоПользователя(РазрезыРаспределения, МенеджерВременныхТаблиц);
	
	// Установим значения по умолчанию
	Для Каждого ОписаниеРазреза Из РазрезыРаспределения Цикл
		ОписаниеРазреза.ЗначениеПоУмолчанию = ОписаниеРазреза.ТипЗначения.ПривестиЗначение(Неопределено);
	КонецЦикла;
	
	Возврат РазрезыРаспределения;
		
КонецФункции

// Определяет уникальное имя субконто для использования в НовыйРазрезыРаспределения().
// Следует применять в тех случаях, когда неприменимо имя предопределенных данных и другие семантические имена.
//
// Параметры:
//  ВидСубконто - ПланВидовХарактеристикСсылка.ВидыСубконтоХорасчетные - вид субконто
// 
// Возвращаемое значение:
//  Строка - имя субконто, соответствующее требованиям к именам полей структур, временных таблиц
//
Функция ИмяСубконтоПользователя(ВидСубконто) Экспорт
	
	Код = СтрЗаменить(ВидСубконто.УникальныйИдентификатор(), "-", "");
	Возврат СтрШаблон("Субконто%1", Код);
	
КонецФункции

#КонецОбласти

#Область Соглашения

// Заданные при конфигурировании разрезы, в которых распределяются расходы
//
// Возвращаемое значение:
//  Структура. Ключ - имя разреза, значение - его тип.
//
Функция ПредопределенныеРазрезыРаспределения()
	
	РазрезыРаспределения = Новый Структура;
	// Это разрезы аналитики, в которых распределяются расходы.
	// Как следствие, такая аналитика может определяться в ходе распределения расходов.
	
	РазрезыРаспределения.Вставить("Счет",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РазрезыРаспределения.Вставить("Подразделение",        БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	РазрезыРаспределения.Вставить("ВидДеятельности",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));
	
	Для Каждого ОписаниеВидаСубконто Из ПредопределенныеРазрезыРаспределенияОпределяемыеПоСубконто() Цикл
		РазрезыРаспределения.Вставить(ОписаниеВидаСубконто.Ключ, ОписаниеВидаСубконто.Значение.ТипЗначения);
	КонецЦикла;
	
	РазрезыРаспределения.Вставить("ВидРасходовНУ",        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	РазрезыРаспределения.Вставить("НалоговыйУчет",        Новый ОписаниеТипов("ПеречислениеСсылка.ОсобенностиНалоговогоУчетаРасходов"));
	РазрезыРаспределения.Вставить("КорСчет",              Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РазрезыРаспределения.Вставить("ЗавершенаОбработкаНУ", Новый ОписаниеТипов("Булево"));
	
	// Также есть особое поле Номенклатура: оно означает номенклатуру _выпущенной_ продукции или _оказанной_ услуги
	// и заполняется при окончании их калькуляции.
	// Поле не используется в ходе распределения, но определяется в результате распределения 
	// и поэтому присутствует в запросах распределения.
	// Не следует путать с разрезом распределения Продукция, который используется как сквозная аналитика
	// накопления затрат на эту продукцию _до_ ее выпуска.
	
	Возврат РазрезыРаспределения;
	
КонецФункции

Функция ПредопределенныеРазрезыРаспределенияОпределяемыеПоСубконто()
	
	РазрезыРаспределения = Новый Структура;
	
	РазрезыРаспределения.Вставить("НоменклатурнаяГруппа", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	РазрезыРаспределения.Вставить("СтатьяЗатрат",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	РазрезыРаспределения.Вставить("Продукция",            ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция);
	РазрезыРаспределения.Вставить("ВидСтоимости",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости);
	
	Возврат РазрезыРаспределения;
	
КонецФункции

Функция НовыйРазрезыРаспределения()
	
	РазрезыРаспределения = Новый ТаблицаЗначений;
	РазрезыРаспределения.Колонки.Добавить("Имя",         Новый ОписаниеТипов("Строка"));
	РазрезыРаспределения.Колонки.Добавить("ВидСубконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	РазрезыРаспределения.Колонки.Добавить("Ключ",        Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные, Строка"));
	РазрезыРаспределения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	РазрезыРаспределения.Колонки.Добавить("ЗначениеПоУмолчанию");
	
	Возврат РазрезыРаспределения;
	
КонецФункции

// Возвращает коллекцию для хранения результата распределения расходов
Функция НовыйРезультатРаспределения(РазрезыРаспределения)
	
	ТипИдентификатораВершины = УчетЗатрат.ТипИдентификатораВершины();
	ТипИмениПравила          = ПравилаРаспределенияРасходов.ТипИмени();
	
	// РаспределениеНаРасходы (# источника, значения аналитики распределения, база)
	// (результат распределения)
	РаспределениеНаРасходы = Новый ТаблицаЗначений;
	РаспределениеНаРасходы.Колонки.Добавить("Правило",       ТипИмениПравила);
	РаспределениеНаРасходы.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	ДобавитьКолонкиАналитикаРаспределения(РаспределениеНаРасходы, РазрезыРаспределения);
	РаспределениеНаРасходы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РаспределениеНаРасходы.Колонки.Добавить("База", Новый ОписаниеТипов("Число"));
	
	// РаспределениеНаСубконто (# источника - значения субконто, база)
	РаспределениеНаСубконто = Новый ТаблицаЗначений;
	РаспределениеНаСубконто.Колонки.Добавить("Правило",       ТипИмениПравила);
	РаспределениеНаСубконто.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	Для Каждого КлючИЗначение Из УчетЗатрат.РазрезыУчета() Цикл
		РаспределениеНаСубконто.Колонки.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	РаспределениеНаСубконто.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	РаспределениеНаСубконто.Колонки.Добавить("База", Новый ОписаниеТипов("Число"));
	
	// ОбособленныйНалоговыйУчет (# источника, значения аналитики распределения, база)
	// (результат обособления)
	ОбособленныйНалоговыйУчет = Новый ТаблицаЗначений;
	ОбособленныйНалоговыйУчет.Колонки.Добавить("Правило",       ТипИмениПравила);
	ОбособленныйНалоговыйУчет.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	ДобавитьКолонкиАналитикаРаспределения(ОбособленныйНалоговыйУчет, РазрезыРаспределения);
	ОбособленныйНалоговыйУчет.Колонки.Добавить("ТипРазниц",     Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийРасчетСебестоимости"));
	
	// ЗафиксированныеРасходы (# источника)
	// (результат действия Зафиксировать)
	ЗафиксированныеРасходы = Новый ТаблицаЗначений;
	ЗафиксированныеРасходы.Колонки.Добавить("Правило",       ТипИмениПравила);
	ЗафиксированныеРасходы.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	
	// НеУдалосьРаспределить (# источника, имя правила)
	// (расходы, попавшие под отбор, но не распределенные)
	НеУдалосьРаспределить = Новый ТаблицаЗначений;
	НеУдалосьРаспределить.Колонки.Добавить("Правило",       ТипИмениПравила);
	НеУдалосьРаспределить.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	НеУдалосьРаспределить.Индексы.Добавить("Идентификатор");
	
	// Скомпонуем коллекцию
	РезультатРаспределения = Новый Структура;
	РезультатРаспределения.Вставить("РаспределениеНаРасходы",    РаспределениеНаРасходы);
	РезультатРаспределения.Вставить("РаспределениеНаСубконто",   РаспределениеНаСубконто);
	РезультатРаспределения.Вставить("ОбособленныйНалоговыйУчет", ОбособленныйНалоговыйУчет);
	РезультатРаспределения.Вставить("ЗафиксированныеРасходы",    ЗафиксированныеРасходы);
	РезультатРаспределения.Вставить("НеУдалосьРаспределить",     НеУдалосьРаспределить);
	
	Возврат РезультатРаспределения;
	
КонецФункции

#КонецОбласти

#Область ВыражениеРазрезовРаспределенияВЗапросах

// В запросе, выбирающем поля аналитики, заменяет выражения полей Субконто так, чтобы выбранные значения содержали
// - для разрезов распределения - значения субконто, приведенные к допустимому типу 
// - для остальных субконто - значения по умолчанию соответствующего вида субконто
//
Процедура ОграничитьСубконтоЗначениямиРазрезовРаспределения(ОписаниеЗапроса, ОператорЗапроса, РазрезыРаспределения)
	
	ШаблонИменПоляСубконто = "Субконто%1";
	
	// Для ограничения используется таблица СубконтоЗатрат
	НастроитьСоединениеСубконтоЗатрат(ОписаниеЗапроса, ОператорЗапроса);
	
	Выражения = ВыраженияОграниченияСубконтоЗначениямиРазрезовРаспределения(ОписаниеЗапроса, ОператорЗапроса, РазрезыРаспределения);
	
	Для Каждого ОписаниеВыражения Из Выражения Цикл
		
		ИмяПоляСубконто   = СтрШаблон(ШаблонИменПоляСубконто, ОписаниеВыражения.Ключ);
		ИндексПоляСубконто = ОписаниеЗапроса.Колонки.Индекс(ОписаниеЗапроса.Колонки.Найти(ИмяПоляСубконто));
		ОператорЗапроса.ВыбираемыеПоля[ИндексПоляСубконто] = Новый ВыражениеСхемыЗапроса(ОписаниеВыражения.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыраженияОграниченияСубконтоЗначениямиРазрезовРаспределения(ОписаниеЗапроса, ОператорЗапроса, РазрезыРаспределения)
	
	Выражения = Новый Соответствие; // Ключ - "1", "2", "3"; Значение - Строка, выражение
	
	// Пример выражения:
	// ЕСТЬNULL(ВЫБОР
	// 		КОГДА СубконтоЗатрат.ВидСубконто1 = &ВидСубконтоНоменклатурнаяГруппа
	// 			ТОГДА ВЫРАЗИТЬ(Расходы.Субконто1 КАК Справочник.НоменклатурныеГруппы)
	// 		КОГДА СубконтоЗатрат.ВидСубконто1 = &ВидСубконтоСтатьяЗатрат
	// 			ТОГДА ВЫРАЗИТЬ(Расходы.Субконто1 КАК Справочник.СтатьиЗатрат)
	// 		КОГДА СубконтоЗатрат.ВидСубконто1 = &ВидСубконтоПродукция
	// 			ТОГДА ВЫРАЗИТЬ(Расходы.Субконто1 КАК Справочник.Номенклатура)
	// 	КОНЕЦ, ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО))
	
	ШаблонВыраженияСубконто      = "ЕСТЬNULL(%1, ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию%2, НЕОПРЕДЕЛЕНО))"; //%1 - ШаблонКонструкцииВыбор, %2 - номер субконто
	
	ШаблонКонструкцииВыбор       = "ВЫБОР
	                               |%1
	                               |	КОНЕЦ"; // %1 - ШаблонВариантаВыбораСубконто
	
	ШаблонВариантаВыбораСубконто = " 		КОГДА СубконтоЗатрат.ВидСубконто%1 = &ВидСубконто%2
	                               | 			ТОГДА %3"; //%3 - см. ТекстВыраженияЗначениеСубконто
	
	ШаблонИменПоляСубконто       = "Субконто%1";
	
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		КлючСубконто      = XMLСтрока(НомерСубконто);
		ИмяПоляСубконто   = СтрШаблон(ШаблонИменПоляСубконто, КлючСубконто);
		ВыражениеСубконто = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(ОписаниеЗапроса, ОператорЗапроса, ИмяПоляСубконто);
		
		ВариантыВыбораСубконто = Новый Массив;
		Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
			
			Если Не ЗначениеЗаполнено(ОписаниеРазрезаРаспределения.ВидСубконто) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗначениеСубконто = ТекстВыраженияЗначениеСубконто(
				ВыражениеСубконто,
				ОписаниеРазрезаРаспределения.ВидСубконто);
			
			ТекстВариантаВыбораСубконто = СтрШаблон(
				ШаблонВариантаВыбораСубконто,
				КлючСубконто,
				ОписаниеРазрезаРаспределения.Имя,
				ТекстЗначениеСубконто);
				
			ВариантыВыбораСубконто.Добавить(ТекстВариантаВыбораСубконто);
			
		КонецЦикла;
		
		КонструкцияВыбор = СтрШаблон(ШаблонКонструкцииВыбор, СтрСоединить(ВариантыВыбораСубконто, Символы.ПС));
		ТекстВыражениеСубконтоПриведенное = СтрШаблон(ШаблонВыраженияСубконто, КонструкцияВыбор, КлючСубконто);
		
		Выражения.Вставить(КлючСубконто, ТекстВыражениеСубконтоПриведенное);
		
	КонецЦикла;
	
	Возврат Выражения;
	
КонецФункции

Процедура ДополнитьОператорЗапросаПолямиРазрезовРаспределенияИзСубконто(ОписаниеЗапроса, ОператорЗапроса, ОписаниеИсточника, РазрезыРаспределения)
	
	// См. также УстановитьВыраженияСубконтоПоРазрезамРаспределения
	
	ШаблонИменПоляСубконто = "Субконто%1";
	
	НастроитьСоединениеСубконтоЗатрат(ОписаниеЗапроса, ОператорЗапроса);
	
	// Пример выражения:
	//ЕСТЬNULL(ВЫБОР
	//		КОГДА СубконтоЗатрат.ВидСубконто1 = &ВидСубконтоНоменклатурнаяГруппа
	//			ТОГДА ВЫРАЗИТЬ(Расходы.Субконто1 КАК Справочник.НоменклатурныеГруппы)
	//		КОГДА СубконтоЗатрат.ВидСубконто2 = &ВидСубконтоНоменклатурнаяГруппа
	//			ТОГДА ВЫРАЗИТЬ(Расходы.Субконто2 КАК Справочник.НоменклатурныеГруппы)
	//		КОГДА СубконтоЗатрат.ВидСубконто3 = &ВидСубконтоНоменклатурнаяГруппа
	//			ТОГДА ВЫРАЗИТЬ(Расходы.Субконто3 КАК Справочник.НоменклатурныеГруппы)
	//	КОНЕЦ, &ЗначениеПоУмолчаниюНоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	
	ШаблонВыраженияПоля          = "ЕСТЬNULL(%1, %2)"; //%1 - ШаблонКонструкцииВыбор, %2 - ПараметрЗначениеПоУмолчанию
	ШаблонКонструкцииВыбор       = "ВЫБОР
	                               |%1
	                               |	КОНЕЦ"; // %1 - ШаблонВариантаВыбораСубконто
	ШаблонВариантаВыбораСубконто = " 		КОГДА СубконтоЗатрат.ВидСубконто%1 = &ВидСубконто%2
	                               | 			ТОГДА %3"; //%3 - см. ТекстВыраженияЗначениеСубконто
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеРазрезаРаспределения.ВидСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка = ОписаниеЗапроса.Колонки.Найти(ОписаниеРазрезаРаспределения.Имя);
		Если Колонка <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантыВыбораСубконто = Новый Массив;
		Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			
			КлючСубконто      = XMLСтрока(НомерСубконто);
			ИмяПоляСубконто   = СтрШаблон(ШаблонИменПоляСубконто, КлючСубконто);
			ВыражениеСубконто = СтрШаблон("%1.%2", ОписаниеИсточника.Псевдоним, ИмяПоляСубконто);
			
			ТекстЗначениеСубконто = ТекстВыраженияЗначениеСубконто(
				ВыражениеСубконто,
				ОписаниеРазрезаРаспределения.ВидСубконто);
			
			ТекстВариантаВыбораСубконто = СтрШаблон(
				ШаблонВариантаВыбораСубконто,
				КлючСубконто,
				ОписаниеРазрезаРаспределения.Имя,
				ТекстЗначениеСубконто);
				
			ВариантыВыбораСубконто.Добавить(ТекстВариантаВыбораСубконто);
			
		КонецЦикла;
		
		ПараметрЗначениеПоУмолчанию = СтрШаблон("&ЗначениеПоУмолчанию%1", ОписаниеРазрезаРаспределения.Имя);
		
		КонструкцияВыбор = СтрШаблон(ШаблонКонструкцииВыбор, СтрСоединить(ВариантыВыбораСубконто, Символы.ПС));
		ТекстВыражения = СтрШаблон(ШаблонВыраженияПоля, КонструкцияВыбор, ПараметрЗначениеПоУмолчанию);
		
		ОператорЗапроса.ВыбираемыеПоля.Добавить(ТекстВыражения);
		НоваяКолонка = ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1];
		НоваяКолонка.Псевдоним = ОписаниеРазрезаРаспределения.Имя;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВыраженияСубконтоПоРазрезамРаспределения(ОписаниеЗапроса, ОператорЗапроса, ОписаниеТаблицыРасходы, РазрезыРаспределения)
	
	// См. также ДополнитьОператорЗапросаПолямиРазрезовРаспределенияИзСубконто
	
	НастроитьСоединениеСубконтоЗатрат(ОписаниеЗапроса, ОператорЗапроса);
	
	// Пример выражения:
	//	ВЫБОР
	//		КОГДА СубконтоЗатрат.ВидСубконто1 = &ВидСубконтоНоменклатурнаяГруппа
	//			ТОГДА НовыеРасходы.НоменклатурнаяГруппа
	//		КОГДА СубконтоЗатрат.ВидСубконто1 = &ВидСубконтоСтатьяЗатрат
	//			ТОГДА НовыеРасходы.СтатьяЗатрат
	//		КОГДА СубконтоЗатрат.ВидСубконто1 = &ВидСубконтоПродукция
	//			ТОГДА НовыеРасходы.Продукция
	//		ИНАЧЕ ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО)
	//	КОНЕЦ
	ШаблонВыраженияСубконто      = "ЕСТЬNULL(%1, ЕСТЬNULL(СубконтоЗатрат.ЗначениеПоУмолчанию%2, НЕОПРЕДЕЛЕНО))"; //%1 - ШаблонКонструкцииВыбор, %2 - номер субконто
	ШаблонКонструкцииВыбор       = "ВЫБОР
	                               |%1
	                               |	КОНЕЦ"; // %1 - ШаблонВариантаВыбораСубконто
	ШаблонВариантаВыбораСубконто = " 		КОГДА СубконтоЗатрат.ВидСубконто%1 = &ВидСубконто%2
	                               | 			ТОГДА %3.%2";
	
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		КлючСубконто      = XMLСтрока(НомерСубконто);
		
		ВариантыВыбораСубконто = Новый Массив;
		Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
			
			Если Не ЗначениеЗаполнено(ОписаниеРазрезаРаспределения.ВидСубконто) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстВариантаВыбораСубконто = СтрШаблон(
				ШаблонВариантаВыбораСубконто,
				КлючСубконто,
				ОписаниеРазрезаРаспределения.Имя,
				ОписаниеТаблицыРасходы.Псевдоним);
				
			ВариантыВыбораСубконто.Добавить(ТекстВариантаВыбораСубконто);
			
		КонецЦикла;
		
		КонструкцияВыбор       = СтрШаблон(ШаблонКонструкцииВыбор, СтрСоединить(ВариантыВыбораСубконто, Символы.ПС));
		ТекстВыражениеСубконто = СтрШаблон(ШаблонВыраженияСубконто, КонструкцияВыбор, КлючСубконто);
		
		ИмяПоляСубконто   = СтрШаблон("Субконто%1", КлючСубконто);
		ИндексПоляСубконто = ОписаниеЗапроса.Колонки.Индекс(ОписаниеЗапроса.Колонки.Найти(ИмяПоляСубконто));
		ОператорЗапроса.ВыбираемыеПоля[ИндексПоляСубконто] = Новый ВыражениеСхемыЗапроса(ТекстВыражениеСубконто);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстВыраженияЗначениеСубконто(ВыражениеСубконто, ВидСубконто)
	
	ТипЗначенияСубконто = ВидСубконто.ТипЗначения;
	
	Если ТипЗначенияСубконто.Типы().Количество() > 1 Тогда
		ТипРазрезаРаспределения = Неопределено;
	Иначе
		ТипРазрезаРаспределения = ТипЗначенияСубконто.Типы()[0];
	КонецЕсли;
	
	Если ТипРазрезаРаспределения = Неопределено Тогда
		// Приведение типа в запросе невозможно
		Возврат ВыражениеСубконто;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипРазрезаРаспределения) Тогда
		// Для нессылочных типов приведение не поддерживаем
		Возврат ВыражениеСубконто;
	КонецЕсли;
	
	ШаблонЗначенияСубконто = "ВЫРАЗИТЬ(%1 КАК %2)";
	ИмяТипаРазрезаРаспределенияВЗапросе = ОбщегоНазначения.ИмяТаблицыПоСсылке(ТипЗначенияСубконто.ПривестиЗначение(Неопределено));
	Возврат СтрШаблон(ШаблонЗначенияСубконто, ВыражениеСубконто, ИмяТипаРазрезаРаспределенияВЗапросе);

КонецФункции

Процедура УстановитьПолеМожетБытьПриемником(ОписаниеЗапроса, ОператорЗапроса, ШаблонИменПоляСубконто, РазрезыРаспределения)
	
	ВыраженияОграничения = ВыраженияОграниченияСубконтоЗначениямиРазрезовРаспределения(
		ОписаниеЗапроса,
		ОператорЗапроса,
		РазрезыРаспределения);
	
	ЭлементыУсловия = Новый Массив;
	Для Каждого ОписаниеВыраженияОграничения Из ВыраженияОграничения Цикл
		
		ВыражениеСубконто = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(
			ОписаниеЗапроса,
			ОператорЗапроса,
			СтрШаблон(ШаблонИменПоляСубконто, ОписаниеВыраженияОграничения.Ключ));
			
		ЭлементыУсловия.Добавить(СтрШаблон("%1 = (%2)", ВыражениеСубконто, ОписаниеВыраженияОграничения.Значение));
		
	КонецЦикла;
	
	ТекстУсловия = СтрСоединить(ЭлементыУсловия, Символы.ПС + "И ");
	
	ИндексПоляМожетБытьПриемником = ОписаниеЗапроса.Колонки.Индекс(ОписаниеЗапроса.Колонки.Найти("МожетБытьПриемником"));
	ОператорЗапроса.ВыбираемыеПоля[ИндексПоляМожетБытьПриемником] = Новый ВыражениеСхемыЗапроса(ТекстУсловия);
	
КонецПроцедуры

Процедура УстановитьПараметрыРазрезовРаспределения(Запрос, РазрезыРаспределения)
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		
		Запрос.УстановитьПараметр(
			"ЗначениеПоУмолчанию" + ОписаниеРазрезаРаспределения.Имя,
			ОписаниеРазрезаРаспределения.ЗначениеПоУмолчанию);
		
		Если ЗначениеЗаполнено(ОписаниеРазрезаРаспределения.ВидСубконто) Тогда
			Запрос.УстановитьПараметр(
				"ВидСубконто" + ОписаниеРазрезаРаспределения.Имя,
				ОписаниеРазрезаРаспределения.ВидСубконто);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПорядокРазрезовРаспределения(КоллекцияПолей, РазрезыРаспределения)
	
	КоллекцияПолей.Очистить();
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		КоллекцияПолей.Добавить(ОписаниеРазрезаРаспределения.Имя);
	КонецЦикла;
	КоллекцияПолей.Добавить("Номенклатура");
	
КонецПроцедуры

Процедура УстановитьИндексВременнойТаблицыРасходы(ОписаниеИндексаВременнойТаблицы, РазрезыРаспределения)
	
	ОписаниеИндексаВременнойТаблицы.Очистить();
	УстановитьПорядокРазрезовРаспределения(ОписаниеИндексаВременнойТаблицы, РазрезыРаспределения);
	ОписаниеИндексаВременнойТаблицы.Добавить("МожетБытьПриемником");
	
КонецПроцедуры

Процедура НастроитьСоединениеСубконтоЗатрат(ОписаниеЗапроса, ОператорЗапроса)
	
	ОписаниеТаблицыСубконтоЗатрат = УстановитьСоединениеСубконтоЗатрат(ОписаниеЗапроса, ОператорЗапроса);
	
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		КлючСубконто = XMLСтрока(НомерСубконто);
		
		ИмяПоля = "ВидСубконто" + КлючСубконто;
		Если ОписаниеТаблицыСубконтоЗатрат.ДоступныеПоля.Найти(ИмяПоля) = Неопределено Тогда
			ОписаниеТаблицыСубконтоЗатрат.ДоступныеПоля.Добавить(ИмяПоля, Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
		КонецЕсли;
		
		ИмяПоля = "ЗначениеПоУмолчанию" + КлючСубконто;
		Если ОписаниеТаблицыСубконтоЗатрат.ДоступныеПоля.Найти(ИмяПоля) = Неопределено Тогда
			ОписаниеТаблицыСубконтоЗатрат.ДоступныеПоля.Добавить(ИмяПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьСоединениеСубконтоЗатрат(ОписаниеЗапроса, ОператорЗапроса)
	
	ИсточникСубконтоЗатрат = ОператорЗапроса.Источники.НайтиПоПсевдониму("СубконтоЗатрат");
	Если ИсточникСубконтоЗатрат <> Неопределено Тогда
		Возврат ИсточникСубконтоЗатрат.Источник;
	КонецЕсли;
	
	ВыражениеПоляСчет = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(ОписаниеЗапроса, ОператорЗапроса, "Счет");
	УсловиеСоединения = СтрШаблон("%1 = СубконтоЗатрат.Счет", ВыражениеПоляСчет);
	
	ИсточникСубконтоЗатрат = ОператорЗапроса.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "СубконтоЗатрат", "СубконтоЗатрат");
	
	ОписаниеТаблицыСубконтоЗатрат = ИсточникСубконтоЗатрат.Источник;
	ОписаниеТаблицыСубконтоЗатрат.ДоступныеПоля.Добавить("Счет", Тип("ПланСчетовСсылка.Хозрасчетный"));
	
	ОператорЗапроса.Источники[0].Соединения.Добавить(ИсточникСубконтоЗатрат, УсловиеСоединения);
	
	Возврат ОписаниеТаблицыСубконтоЗатрат;
		
КонецФункции

Функция ЭтоОписаниеВременнойТаблицыСхемыЗапроса(ОписаниеИсточника)
	
	ТипОписания = ТипЗнч(ОписаниеИсточника);
	Возврат ТипОписания = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") // Описание отсутствует в пакете запросов
		Или ТипОписания = Тип("ТаблицаСхемыЗапроса");                 // Описание содержится в этом же пакете
		
КонецФункции

Процедура ДополнитьТекстЗапросаПолямиРазрезовРаспределения(ТекстЗапроса, РазрезыРаспределения)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
			
			Если ОператорЗапроса.Источники.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеИсточника = ОператорЗапроса.Источники[0].Источник;
			Если Не ЭтоОписаниеВременнойТаблицыСхемыЗапроса(ОписаниеИсточника) Тогда
				Продолжить;
			КонецЕсли;
			
			ДополнитьОператорЗапросаПолямиРазрезовРаспределения(
				ОписаниеЗапроса,
				ОператорЗапроса,
				ОписаниеИсточника,
				РазрезыРаспределения);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура ДополнитьОператорЗапросаПолямиРазрезовРаспределения(ОписаниеЗапроса, ОператорЗапроса, ОписаниеИсточника, РазрезыРаспределения)
	
	ПустоеВыражениеСхемыЗапроса = Новый ВыражениеСхемыЗапроса("");
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		
		ИндексКолонки = Неопределено;
		Колонка = ОписаниеЗапроса.Колонки.Найти(ОписаниеРазрезаРаспределения.Имя);
		Если Колонка <> Неопределено Тогда
			
			ИндексКолонки = ОписаниеЗапроса.Колонки.Индекс(Колонка);
			// Поле может быть уже определено
			// Если в запросе несколько операторов, и в один из них были добавлены поля, приведшие к появлению новой колонки,
			// то в версии 8.3.12 возможна ситуация, когда в остальных операторах количество полей будет меньше, чем количество колонок.
			Если ИндексКолонки < ОператорЗапроса.ВыбираемыеПоля.Количество() Тогда
				ВыражениеПоля = ОператорЗапроса.ВыбираемыеПоля[ИндексКолонки];
				Если ВыражениеПоля <> ПустоеВыражениеСхемыЗапроса Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОписаниеИсточника.ДоступныеПоля.Найти(ОписаниеРазрезаРаспределения.Имя) = Неопределено Тогда
			ОписаниеИсточника.ДоступныеПоля.Добавить(ОписаниеРазрезаРаспределения.Имя);
		КонецЕсли;
		
		ТекстВыражения = СтрШаблон("%1.%2", ОписаниеИсточника.Псевдоним, ОписаниеРазрезаРаспределения.Имя);
		
		Если ИндексКолонки <> Неопределено Тогда
			ОператорЗапроса.ВыбираемыеПоля.Добавить(ТекстВыражения, ИндексКолонки);
		Иначе
			ОператорЗапроса.ВыбираемыеПоля.Добавить(ТекстВыражения);
			НоваяКолонка = ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1];
			НоваяКолонка.Псевдоним = ОписаниеРазрезаРаспределения.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОператорЗапросаЗначениямиПоУмолчаниюРазрезовРаспределения(ОписаниеЗапроса, ОператорЗапроса, РазрезыРаспределения)
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		
		Колонка = ОписаниеЗапроса.Колонки.Найти(ОписаниеРазрезаРаспределения.Имя);
		Если Колонка <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрЗначениеПоУмолчанию = СтрШаблон("&ЗначениеПоУмолчанию%1", ОписаниеРазрезаРаспределения.Имя);
		
		ОператорЗапроса.ВыбираемыеПоля.Добавить(ПараметрЗначениеПоУмолчанию);
		НоваяКолонка = ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1];
		НоваяКолонка.Псевдоним = ОписаниеРазрезаРаспределения.Имя;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьУсловияСоединенияПолямиРазрезовРаспределения(ИсточникСлева, ИсточникСправа, РазрезыРаспределения)
	
	СоединяемыеТаблицы = Новый Массив;
	СоединяемыеТаблицы.Добавить(ИсточникСлева.Источник);
	СоединяемыеТаблицы.Добавить(ИсточникСправа.Источник);
	
	ШаблонУсловия = СтрШаблон("%1.%%1 = %2.%%1", ИсточникСлева.Источник.Псевдоним, ИсточникСправа.Источник.Псевдоним); //%%1 - имя поля
	
	УсловияСоединения = Новый Массив;
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		
		Для Каждого ОписаниеТаблицы Из СоединяемыеТаблицы Цикл
			
			Если ОписаниеТаблицы.ДоступныеПоля.Найти(ОписаниеРазрезаРаспределения.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеТаблицы.ДоступныеПоля.Добавить(ОписаниеРазрезаРаспределения.Имя, ОписаниеРазрезаРаспределения.ТипЗначения);
			
		КонецЦикла;
		
		УсловияСоединения.Добавить(СтрШаблон(ШаблонУсловия, ОписаниеРазрезаРаспределения.Имя));
		
	КонецЦикла;
	
	ЗаданноеСоединение = ИсточникСлева.Соединения.НайтиПоПсевдониму(ИсточникСправа.Источник.Псевдоним);
	
	// В версии 8.3.12
	// - условия левых соединений должны быть представлены набором записей коллекции соединений,
	//   потому что изменение условий одного из соединений может привести к потере остальных записей соединения с этой же таблицей
	// - добавление в качестве условий соединений остальных типов может привести к несовместимости соединений,
	//   поэтому они представляются в одном выражении.
	Если ЗаданноеСоединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее Тогда
		Для Каждого Условие Из УсловияСоединения Цикл
			ИсточникСлева.Соединения.Добавить(ИсточникСправа.Источник.Псевдоним, Условие);
		КонецЦикла;
	Иначе
		УсловияСоединения.Добавить(ЗаданноеСоединение.Условие);
		ЗаданноеСоединение.Условие = Новый ВыражениеСхемыЗапроса(СтрСоединить(УсловияСоединения, Символы.ПС + "И "));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходныеДанные

Функция МаксимальныйИдентификаторКлючиВершин(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КлючиВершин.Идентификатор), -1) КАК МаксимальныйИдентификатор
	|ИЗ
	|	КлючиВершин КАК КлючиВершин";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); // Всегда будет одна запись
	
	Возврат Выборка.МаксимальныйИдентификатор;
	
КонецФункции

Процедура СоздатьРасходы(МенеджерВременныхТаблиц, ПравилаРаспределения, ТаблицыБазРаспределения, МаксимальныйИдентификатор, РазрезыРаспределения)
	
	// Большая часть аналитики расходов уже получена из первичных документов и помещена в КлючиВершин.
	// Из них нам нужны не все - только ключи расходов
	СоздатьКлючиВершинРасходов(МенеджерВременныхТаблиц);
	
	// Дополним эти данные аналитикой расходов, которые могут понадобиться в ходе распределения,
	// выражены в виде субконто, но еще не содержатся в таблице КлючиВершин:
	// - из баз распределения к правилам РаспределитьНаСубконто
	// - наборы аналитики с эталонным (незаполненным) значением поля Номенклатура.
	//   Это поле нужно для идентификации вершин, но не используется в распределении
	//   (расходы переносятся с вершин с заполненной аналитикой на эталонные вершины с незаполненной аналитикой).
	
	СоздатьКлючиВершинРасходовБазРаспределения(МенеджерВременныхТаблиц, ПравилаРаспределения, ТаблицыБазРаспределения);
	
	СоздатьКлючиВершинПриемниковНаСубконто(МенеджерВременныхТаблиц, РазрезыРаспределения);// Базы + Эталонные
	
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "КлючиВершинРасходовБазРаспределения");
	
	ДополнитьКлючиВершинРасходовПриемникамиНаСубконто(МенеджерВременныхТаблиц, МаксимальныйИдентификатор); // Обновлена КлючиВершинРасходов
	
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "КлючиВершинПриемниковНаСубконто");
	
	// Теперь представим полную коллекцию ключей расходов в виде аналитики распределения расходов.
	// Результат поместим во временную таблицу Расходы
	//
	// Ключ расходов может содержать заполненную пользовательскую аналитику - 
	// субконто, кроме перечисленных явно в РазрезыРаспределения().
	// Кроме того, в составе ключа могут быть значения, не соответствующие типам субконто.
	// В результате одному набору аналитики распределения, предусмотренной в этом модуле, может соответствовать несколько ключей.
	// Чтобы это не приводило к искажению распределения, важно, чтобы при распределении "на расходы" 
	// (т.е. с помощью действий РаспределитьНаРасходы и ВыделитьНалоговыйУчет)
	// одному набору аналитики соответствовал ровно один ключ.
	// Считаем, что для распределения расходов подходят только те ключи, в которых все значения пользовательской аналитики "эталонные"
	// - для аналитики расходов - соответствуют по типу видам субконто
	// - для остальных субконто - равны значению по умолчанию.
	// То есть, подходят только такие ключи, у которых МожетБытьПриемником
	// Если подходящего ключа нет, то создадим его при распределении "на расходы" в обычном порядке.
	//
	// По этой же причине в таблице Расходы хранятся и значения Субконто1, Субконто2, Субконто3.
	// Это позволяет избежать потери значений пользовательской аналитики при преобразовании данных 
	// о новых расходах из баз распределения в аналитику расходов.
	// Сохраненные значения субконто используются в ОбновитьКлючиВершин(), когда по данным таблицы Расходы формируются новые ключи аналитики.
	
	// Запрос модифицируется, дополняется:
	// - полями, выбираемыми из значений субконто
	// - значениями по умолчанию полей, заполняемых в ходе распределения
	// - выражением для поля МожетБытьПриемником
	// - индексом по полям разрезов распределения 
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Расходы.Идентификатор КАК Идентификатор,
	|	Расходы.Счет КАК Счет,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Расходы.Подразделение КАК Справочник.ПодразделенияОрганизаций), ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	Расходы.Субконто1 КАК Субконто1,
	|	Расходы.Субконто2 КАК Субконто2,
	|	Расходы.Субконто3 КАК Субконто3,
	|	Расходы.Номенклатура КАК Номенклатура,
	|	Расходы.КорСчет КАК КорСчет,
	|	ИСТИНА КАК МожноРаспределить,
	|	ИСТИНА КАК МожноВыделитьНалоговыйУчет,
	|	ИСТИНА КАК МожетБытьПриемником
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	КлючиВершинРасходов КАК Расходы";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ИсточникЗапроса = ОператорЗапроса.Источники[0].Источник;
	
	ДополнитьОператорЗапросаПолямиРазрезовРаспределенияИзСубконто(
		ОписаниеЗапроса,
		ОператорЗапроса,
		ИсточникЗапроса,
		РазрезыРаспределения);
		
	ДополнитьОператорЗапросаЗначениямиПоУмолчаниюРазрезовРаспределения(ОписаниеЗапроса, ОператорЗапроса, РазрезыРаспределения);
	УстановитьПолеМожетБытьПриемником(ОписаниеЗапроса, ОператорЗапроса, "Субконто%1", РазрезыРаспределения);
	УстановитьИндексВременнойТаблицыРасходы(ОписаниеЗапроса.Индекс, РазрезыРаспределения);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УстановитьПараметрыРазрезовРаспределения(Запрос, РазрезыРаспределения);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
	
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "КлючиВершинРасходов");
	
КонецПроцедуры

Процедура СоздатьКлючиВершинРасходов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ КлючиВершинРасходов
	|ИЗ
	|	КлючиВершин КАК КлючиВершин
	|ГДЕ
	|	КлючиВершин.РазделУчета = ""Расходы""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьКлючиВершинРасходовБазРаспределения(МенеджерВременныхТаблиц, ПравилаРаспределения, ТаблицыБазРаспределения)
	
	// Создадим таблицу КлючиВершинРасходовБазРаспределения - она содержит различные ключи всех баз распределения с направлением "Субконто",
	// соответствующие расходам
	
	// Выборка из ИсточникТипа предотвращает редуцирование типов колонок до Неопределено
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
	|	&ПустоеПодразделение КАК Подразделение,
	|	ИсточникТипа.Значение КАК Субконто1,
	|	ИсточникТипа.Значение КАК Субконто2,
	|	ИсточникТипа.Значение КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет
	|ПОМЕСТИТЬ КлючиВершинРасходовБазРаспределения
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ИсточникТипа
	|ГДЕ
	|	ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	
	ВыраженияПолейБазыРаспределения = Новый Структура;
	ВыраженияПолейБазыРаспределения.Вставить("Счет",          "БазаРаспределения.Счет");
	ВыраженияПолейБазыРаспределения.Вставить("Подразделение", "ЕСТЬNULL(БазаРаспределения.Подразделение, &ПустоеПодразделение)");
	ВыраженияПолейБазыРаспределения.Вставить("Субконто1",     "ЕСТЬNULL(БазаРаспределения.Субконто1, НЕОПРЕДЕЛЕНО)");
	ВыраженияПолейБазыРаспределения.Вставить("Субконто2",     "ЕСТЬNULL(БазаРаспределения.Субконто2, НЕОПРЕДЕЛЕНО)");
	ВыраженияПолейБазыРаспределения.Вставить("Субконто3",     "ЕСТЬNULL(БазаРаспределения.Субконто3, НЕОПРЕДЕЛЕНО)");
	ВыраженияПолейБазыРаспределения.Вставить("Номенклатура",  "ЕСТЬNULL(БазаРаспределения.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))");
	ВыраженияПолейБазыРаспределения.Вставить("КорСчет",       "ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)");
	
	КолонкиЗапроса = Новый Структура;
	Для Каждого ОписаниеПоля Из ВыраженияПолейБазыРаспределения Цикл
		Колонка = ОписаниеЗапроса.Колонки.Найти(ОписаниеПоля.Ключ);
		ИндексКолонки = ОписаниеЗапроса.Колонки.Индекс(Колонка);
		КолонкиЗапроса.Вставить(ОписаниеПоля.Ключ, ИндексКолонки);
	КонецЦикла;
	
	ОбработанныеТаблицы = Новый Структура;
	
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если Правило.Действие <> "РаспределитьНаСубконто" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТаблицыБазРаспределения.Свойство(Правило.БазаРаспределения.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбработанныеТаблицы.Свойство(Правило.БазаРаспределения.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеТаблицы.Вставить(Правило.БазаРаспределения.Имя);
		
		ОператорЗапроса = ОписаниеЗапроса.Операторы.Добавить();
		
		ОператорЗапроса.ВыбиратьРазличные = Истина;
		ОператорЗапроса.ТипОбъединения    = ТипОбъединенияСхемыЗапроса.Объединить;
		
		ИсточникБазаРаспределения = ОператорЗапроса.Источники.Добавить(
			Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),
			Правило.БазаРаспределения.Имя,
			"БазаРаспределения");
			
		Для Каждого ОписаниеПоля Из ВыраженияПолейБазыРаспределения Цикл
			ИсточникБазаРаспределения.Источник.ДоступныеПоля.Добавить(ОписаниеПоля.Ключ);
			ИндексКолонки = КолонкиЗапроса[ОписаниеПоля.Ключ];
			ОператорЗапроса.ВыбираемыеПоля.Добавить(ОписаниеПоля.Значение, ИндексКолонки);
		КонецЦикла;
		
		// Ограничим выбираемые записи счетами расходов
		ИсточникСчетаРасходов = ОператорЗапроса.Источники.Добавить(
			Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),
			"СчетаРасходов",
			"СчетаРасходов");
			
		Если ИсточникСчетаРасходов.Источник.ДоступныеПоля.Найти("Счет") = Неопределено Тогда
			ИсточникСчетаРасходов.Источник.ДоступныеПоля.Добавить("Счет");
		КонецЕсли;
		
		ИсточникБазаРаспределения.Соединения.Добавить(
			ИсточникСчетаРасходов,
			"БазаРаспределения.Счет = СчетаРасходов.Счет");
			
		ИсточникБазаРаспределения.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьКлючиВершинПриемниковНаСубконто(МенеджерВременныхТаблиц, РазрезыРаспределения)
	
	// Получим новые наборы аналитики (которых не было выявлено из первичных документов, но уже известно, что они понадобятся).
	// Это базы распределения "на субконто" и наборы аналитики с незаполненной номенклатурой (см. СгруппироватьПоНоменклатуре).
	// 
	// В ходе распределения методами РаспределитьНаРасходы, ВыделитьНалоговыйУчет могут появляться и другие наборы аналитики,
	// однако сейчас их нельзя определить - они будут помещены в Расходы позже (см. СоздатьНовыеРасходы).
	// 
	// Важно, чтобы новые наборы сопровождались эталонными ключами.
	// При этом 
	// - "неэталонные" ключи с незаполненной номенклатурой не нужны, так как для распределения фактически применяется метод РаспределитьНаРасходы,
	//   который работает только с эталонными ключами.
	// - "неэталонные" ключи баз распределения "на субконто" нужны - для распределения важно, чтобы состав их аналитики был идентичен базам распределения.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Текст запроса модифицируется ниже, при этом имеет значение последовательность операторов в запросе:
	// во всех операторах, кроме первого, значения субконто приводятся к разрешенным для разрезов распределения. 
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.Субконто1 КАК Субконто1,
	|	Расходы.Субконто2 КАК Субконто2,
	|	Расходы.Субконто3 КАК Субконто3,
	|	Расходы.Номенклатура КАК Номенклатура,
	|	Расходы.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ КлючиВершинПриемниковНаСубконто
	|ИЗ
	|	КлючиВершинРасходовБазРаспределения КАК Расходы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расходы.Счет,
	|	Расходы.Подразделение,
	|	Расходы.Субконто1,
	|	Расходы.Субконто2,
	|	Расходы.Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	Расходы.КорСчет
	|ИЗ
	|	КлючиВершинРасходовБазРаспределения КАК Расходы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расходы.Счет,
	|	Расходы.Подразделение,
	|	Расходы.Субконто1,
	|	Расходы.Субконто2,
	|	Расходы.Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	Расходы.КорСчет
	|ИЗ
	|	КлючиВершинРасходов КАК Расходы
	|ГДЕ
	|	Расходы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	
	Для ИндексОператора = 1 По ОписаниеЗапроса.Операторы.Количество() - 1 Цикл
		ОграничитьСубконтоЗначениямиРазрезовРаспределения(
			ОписаниеЗапроса,
			ОписаниеЗапроса.Операторы[ИндексОператора],
			РазрезыРаспределения);
	КонецЦикла;
	УстановитьПараметрыРазрезовРаспределения(Запрос, РазрезыРаспределения);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьКлючиВершинРасходовПриемникамиНаСубконто(МенеджерВременныхТаблиц, МаксимальныйИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.Субконто1 КАК Субконто1,
	|	Расходы.Субконто2 КАК Субконто2,
	|	Расходы.Субконто3 КАК Субконто3,
	|	Расходы.Номенклатура КАК Номенклатура,
	|	Расходы.КорСчет КАК КорСчет
	|ИЗ
	|	КлючиВершинПриемниковНаСубконто КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиВершинРасходов КАК КлючиВершин
	|		ПО Расходы.Счет = КлючиВершин.Счет
	|			И Расходы.Подразделение = КлючиВершин.Подразделение
	|			И Расходы.Субконто1 = КлючиВершин.Субконто1
	|			И Расходы.Субконто2 = КлючиВершин.Субконто2
	|			И Расходы.Субконто3 = КлючиВершин.Субконто3
	|			И Расходы.Номенклатура = КлючиВершин.Номенклатура
	|			И Расходы.КорСчет = КлючиВершин.КорСчет
	|ГДЕ
	|	КлючиВершин.Счет ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	
	ДополнительныеКлючиВершин = Запрос.Выполнить().Выгрузить();
	// В версии 8.3.13 можно попробовать нумеровать ключи без передачи всех данных на сервер приложений
	
	Если ДополнительныеКлючиВершин.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	// Пронумеруем новые ключи расходов
	ДополнительныеКлючиВершин.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Для Каждого СтрокаТаблицы Из ДополнительныеКлючиВершин Цикл
		МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
		СтрокаТаблицы.Идентификатор = МаксимальныйИдентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НовыеКлючиВершин", ДополнительныеКлючиВершин);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ ВТ_НовыеКлючиВершинРасходов
	|ИЗ
	|	&НовыеКлючиВершин КАК КлючиВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ ВТ_СтарыеКлючиВершинРасходов
	|ИЗ
	|	КлючиВершинРасходов КАК КлючиВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КлючиВершинРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ КлючиВершинРасходов
	|ИЗ
	|	ВТ_НовыеКлючиВершинРасходов КАК КлючиВершин
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор,
	|	КлючиВершин.Счет,
	|	КлючиВершин.Подразделение,
	|	КлючиВершин.Субконто1,
	|	КлючиВершин.Субконто2,
	|	КлючиВершин.Субконто3,
	|	КлючиВершин.Номенклатура,
	|	КлючиВершин.КорСчет
	|ИЗ
	|	ВТ_СтарыеКлючиВершинРасходов КАК КлючиВершин
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НовыеКлючиВершинРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтарыеКлючиВершинРасходов";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеБазРаспределения

Функция НовыйТаблицыБазРаспределения()
	
	Возврат Новый Структура; // Ключ - имя таблицы; Значение - массив полей индекса
	
КонецФункции

Функция СоздатьБазыРаспределения(МенеджерВременныхТаблиц, ПравилаРаспределения, Период, Организация)
	
	СозданныеТаблицы = НовыйТаблицыБазРаспределения();
	
	// Общий запрос
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого ОписаниеПараметра Из ПравилаРаспределенияРасходов.ОбщиеПараметрыБазРаспределения(Период, Организация) Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);
	КонецЦикла;
	
	// Создадим временные таблицы, которые используются в запросах баз распределения
	// По окончании процедуры они будут удалены, поэтому важно запомнить таблицы, внешние по отношению к процедуре
	ВнешниеВременныеТаблицы = Новый Структура;
	Для Каждого ОписаниеТаблицы Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		ВнешниеВременныеТаблицы.Вставить(ОписаниеТаблицы.ПолноеИмя);
	КонецЦикла;
	
	ВыполненныеПакетыВременныхТаблиц = Новый Структура;
	
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если Не Правило.БазаРаспределения.Свойство("ПакетВременныхТаблиц") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыполненныеПакетыВременныхТаблиц.Свойство(Правило.БазаРаспределения.ПакетВременныхТаблиц) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполненныеПакетыВременныхТаблиц.Вставить(Правило.БазаРаспределения.ПакетВременныхТаблиц);
		
		// У каждого пакета могут быть свои параметры, поэтому для каждого пакета - свой запрос
		Для Каждого Параметр Из Правило.БазаРаспределения.ПараметрыВременныхТаблиц Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
			
		Запрос.Текст = Правило.БазаРаспределения.СоздатьВременныеТаблицы;
		Запрос.Выполнить();
			
	КонецЦикла;
	
	СозданныеВременныеТаблицы = Новый Массив;
	Для Каждого ОписаниеТаблицы Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		Если ВнешниеВременныеТаблицы.Свойство(ОписаниеТаблицы.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		СозданныеВременныеТаблицы.Добавить(ОписаниеТаблицы.ПолноеИмя);
	КонецЦикла;
	
	// Создадим таблицы с базами распределения
	ВыполненныеЗапросы = Новый Структура;
	
	// Разные методы используют разные наборы параметров, поэтому выполняем запрос в цикле
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если Не Правило.БазаРаспределения.Свойство("Имя") Тогда
			// Никакие данные (временная таблица) для этого правила не нужны
			Продолжить;
		КонецЕсли;
		
		Если ВыполненныеЗапросы.Свойство(Правило.БазаРаспределения.Имя) Тогда
			// Уже выполнялся
			Продолжить;
		КонецЕсли;
		
		ВыполненныеЗапросы.Вставить(Правило.БазаРаспределения.Имя);
		
		ИндексыТаблицы = Новый Массив;
		УстановитьТекстЗапросБазыРаспределенияКИсполнению(Запрос.Текст, Правило, ИндексыТаблицы);
		
		Если Правило.БазаРаспределения.Свойство("ПараметрыЗапроса") Тогда
			Для Каждого Параметр Из Правило.БазаРаспределения.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// Выполним запрос - создадим новую временную таблицу
		Запрос.Выполнить();
		
		Если Не ВременнаяТаблицаПустая(Правило.БазаРаспределения.Имя, МенеджерВременныхТаблиц) Тогда
			СозданныеТаблицы.Вставить(Правило.БазаРаспределения.Имя, ИндексыТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Уничтожим временные таблицы, которые использовались в запросах баз распределения
	Если ЗначениеЗаполнено(СозданныеВременныеТаблицы) Тогда
		СхемаЗапроса = Новый СхемаЗапроса; // Для удобства уже содержит ненужный пакет запросов, который удалим позже
		Для Каждого ИмяТаблицы Из СозданныеВременныеТаблицы Цикл
			ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
			ОписаниеЗапроса.ИмяТаблицы = ИмяТаблицы;
		КонецЦикла;
		СхемаЗапроса.ПакетЗапросов.Удалить(0);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат СозданныеТаблицы;
	
КонецФункции

Процедура УстановитьТекстЗапросБазыРаспределенияКИсполнению(ТекстЗапроса, Правило, Индексы)
	
	ТребуемыеМодификацииЗапроса = Новый Структура;
	
	ТребуетсяМодификация = Ложь;
	Если ЗначениеЗаполнено(Правило.ПоляИсточника) Тогда
		ТребуемыеМодификацииЗапроса.Вставить("Индексы");
	КонецЕсли;
	
	Если (Правило.Действие = "ВыделитьНалоговыйУчет" Или Правило.Действие = "РаспределитьНаРасходы")
		И Правило.ПоляПриемника.Свойство("Счет") Тогда
		ТребуемыеМодификацииЗапроса.Вставить("УсловияНаСчетаРасходов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТребуемыеМодификацииЗапроса) Тогда
		ТекстЗапроса = Правило.БазаРаспределения.ТекстЗапроса;
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Правило.БазаРаспределения.ТекстЗапроса);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеЗапроса.ТаблицаДляПомещения <>  Правило.БазаРаспределения.Имя Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТребуемыеМодификацииЗапроса.Свойство("УсловияНаСчетаРасходов") Тогда
			
			// Отбор по счетам базы распределения нужен для того, чтобы исключить появление в результате распределения на расходы
			// счетов, не являющихся счетами расходов.
			
			КолонкаСчет = ОписаниеЗапроса.Колонки.Найти("Счет");
			Если КолонкаСчет <> Неопределено Тогда
				
				ИндексКолонкиСчет = ОписаниеЗапроса.Колонки.Индекс(КолонкаСчет);
				
				ШаблонУсловия = "%1 В (ВЫБРАТЬ СчетаРасходов.Счет Из СчетаРасходов)";
				
				Для Каждого Оператор Из ОписаниеЗапроса.Операторы Цикл
					ВыражениеПоляСчет = Оператор.ВыбираемыеПоля[ИндексКолонкиСчет];
					Оператор.Отбор.Добавить(СтрШаблон(ШаблонУсловия, ВыражениеПоляСчет));
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуемыеМодификацииЗапроса.Свойство("Индексы") Тогда
			
			// Разные правила могут использовать одну и ту же таблицу базы распределения, но с разными наборами полей источника.
			// Поэтому индекс, определенный только по одному правилу, может оказаться неэффективным для других правил.
			// Сейчас реализованы два варианта установки индекса:
			// - по первому вхождению правила
			// - заданный разработчиком в тексте запроса таблицы базы распределения
			// См. также УстановитьИндексПолейИсточника()
			Если Не ЗначениеЗаполнено(ОписаниеЗапроса.Индекс) Тогда
				
				Для Каждого ПолеИндекса Из Правило.ПоляИсточника Цикл
					Индексы.Добавить(ПолеИндекса.Ключ);
					ОписаниеЗапроса.Индекс.Добавить(ПолеИндекса.Значение);
				КонецЦикла;
				
			Иначе
				
				// Фактическая модификация не требуется - устанавливаем по тексту запроса
				Для Каждого ПолеИндекса Из ОписаниеЗапроса.Индекс Цикл
					
					Для Каждого ОписаниеПоляИсточника Из Правило.ПоляИсточника Цикл
						
						Если ОписаниеПоляИсточника.Значение <> ПолеИндекса.Выражение.Псевдоним Тогда
							Продолжить;
						КонецЕсли;
						
						Индексы.Добавить(ОписаниеПоляИсточника.Ключ);
						Прервать;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция ВременнаяТаблицаПустая(Имя, МенеджерВременныхТаблиц)
	
	ШаблонТекстаЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ %1 КАК ДанныеТаблицы";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СтрШаблон(ШаблонТекстаЗапроса, Имя);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область РаспределениеРасходов

Функция ОтобратьРасходы(МенеджерВременныхТаблиц, ПравилоРаспределения, ИндексыТаблицыБазыРаспределения, РазрезыРаспределения)
	
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "РасходыПоПравилу");
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Расходы.Идентификатор КАК Идентификатор,
	|	Расходы.Номенклатура КАК Номенклатура,
	|	Расходы.МожноРаспределить КАК МожноРаспределить,
	|	Расходы.МожноВыделитьНалоговыйУчет КАК МожноВыделитьНалоговыйУчет
	|ПОМЕСТИТЬ РасходыПоПравилу
	|ИЗ
	|	Расходы КАК Расходы";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	ИсточникЗапроса = ОператорЗапроса.Источники[0].Источник;
	
	ДополнитьОператорЗапросаПолямиРазрезовРаспределения(ОписаниеЗапроса, ОператорЗапроса, ИсточникЗапроса, РазрезыРаспределения);
	
	Если ПравилоРаспределения.Действие = "РаспределитьНаСубконто" Тогда
		ОператорЗапроса.Отбор.Добавить("Расходы.МожноРаспределить");
		УстановитьИндексПолейИсточника(ОписаниеЗапроса, ПравилоРаспределения.ПоляИсточника, ИндексыТаблицыБазыРаспределения);
	ИначеЕсли ПравилоРаспределения.Действие = "РаспределитьНаРасходы" Тогда
		ОператорЗапроса.Отбор.Добавить("Расходы.МожноРаспределить");
		УстановитьИндексПолейИсточника(ОписаниеЗапроса, ПравилоРаспределения.ПоляИсточника, ИндексыТаблицыБазыРаспределения);
	ИначеЕсли ПравилоРаспределения.Действие = "ВыделитьНалоговыйУчет" Тогда
		ОператорЗапроса.Отбор.Добавить("Расходы.МожноВыделитьНалоговыйУчет");
		УстановитьИндексПолейИсточника(ОписаниеЗапроса, ПравилоРаспределения.ПоляИсточника, ИндексыТаблицыБазыРаспределения);
	Иначе  // Зафиксируем расходы
		ОператорЗапроса.Отбор.Добавить("Расходы.МожноВыделитьНалоговыйУчет");
		ОператорЗапроса.Отбор.Добавить("Расходы.МожноРаспределить");
	КонецЕсли;
	
	ДополнитьОтборРасходовПравиломРаспределения(ОператорЗапроса, ПравилоРаспределения);
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого ПолеОтбора Из ПравилоРаспределения.ОтборРасходов Цикл
		Запрос.УстановитьПараметр(ПолеОтбора.Ключ, ПолеОтбора.Значение);
	КонецЦикла;
	
	РезультатСозданияВременнойТаблицы = Запрос.Выполнить();
	Возврат СозданнаяТаблицаСодержитЗаписи(РезультатСозданияВременнойТаблицы);
	
КонецФункции

Процедура СгруппироватьПоНоменклатуре(МенеджерВременныхТаблиц, ПравилоРаспределения, РезультатРаспределения, РазрезыРаспределения)
	
	// См. также ДополнитьРезультатРаспределения
	
	Если ПравилоРаспределения.Действие <> "РаспределитьНаСубконто"
		И ПравилоРаспределения.Действие <> "РаспределитьНаРасходы"
		И ПравилоРаспределения.Действие <> "ВыделитьНалоговыйУчет" Тогда
		// Перечисленные действия работают только с расходами с незаполненной номенклатурой
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	// Группировка по номенклатуре выполняется перед распределением, то есть группируется не результат каждого распределения,
	// а только те расходы, которые действительно нужно распределить
	Запрос.Текст = // Дополняется разрезами распределения
	"ВЫБРАТЬ
	|	РезультатРаспределения.Идентификатор КАК Идентификатор,
	|	1 КАК База
	|ИЗ
	|	РасходыПоПравилу КАК РезультатРаспределения
	|ГДЕ
	|	РезультатРаспределения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезультатРаспределения.Идентификатор";
	
	ДополнитьТекстЗапросаПолямиРазрезовРаспределения(Запрос.Текст, РазрезыРаспределения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РезультатРаспределения.РаспределениеНаРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Правило = ПравилоРаспределения.Имя;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьРезультатРаспределения(МенеджерВременныхТаблиц, ПравилоРаспределения, РазрезыРаспределения)
	
	ПараметрыТекста = Новый Структура;
	
	Если ПравилоРаспределения.Действие = "РаспределитьНаСубконто" Тогда
		
		// Приемник выражен в виде набора субконто. 
		// Все поля берем из базы. 
		// Поле Номенклатура нужно для обслуживания настройки встречного выпуска 
		// и калькуляции себестоимости выпущенной продукции (услуг).
		// Не проверяем распределение "Само на себя".
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Расходы.Идентификатор КАК Идентификатор,
		|	БазаРаспределения.База КАК База,
		|	БазаРаспределения.Счет КАК Счет,
		|	БазаРаспределения.Подразделение КАК Подразделение,
		|	БазаРаспределения.Субконто1 КАК Субконто1,
		|	БазаРаспределения.Субконто2 КАК Субконто2,
		|	БазаРаспределения.Субконто3 КАК Субконто3,
		|	БазаРаспределения.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ РезультатРаспределения
		|ИЗ
		|	РасходыПоПравилу КАК Расходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ [БазаРаспределения] КАК БазаРаспределения
		|		ПО [УсловияСоединения]
		|
		|ГДЕ
		|	Расходы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И БазаРаспределения.База >= 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор";
			
		ЗаполнитьУсловияСоединения(ПараметрыТекста, ПравилоРаспределения);
		ПараметрыТекста.Вставить("БазаРаспределения", ПравилоРаспределения.БазаРаспределения.Имя);
		
	ИначеЕсли ПравилоРаспределения.Действие = "РаспределитьНаРасходы" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Расходы.Идентификатор КАК Идентификатор,
		|	БазаРаспределения.База
		|	[ПоляПриемника]
		|ПОМЕСТИТЬ РезультатРаспределения
		|ИЗ
		|	РасходыПоПравилу КАК Расходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ [БазаРаспределения] КАК БазаРаспределения
		|		ПО [УсловияСоединения]
		|
		|ГДЕ
		|	(БазаРаспределения.База IS NULL 
		|	ИЛИ НЕ ([РасходыСовпадают]))
		|	И Расходы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ЕСТЬNULL(БазаРаспределения.База, 0) >= 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор";
		
		ЗаполнитьПоляПриемника(ПараметрыТекста, ПравилоРаспределения, РазрезыРаспределения); // И РасходыСовпадают
		ЗаполнитьУсловияСоединения(ПараметрыТекста, ПравилоРаспределения);
		
		ПараметрыТекста.Вставить("БазаРаспределения", ПравилоРаспределения.БазаРаспределения.Имя);
		
	ИначеЕсли ПравилоРаспределения.Действие = "ВыделитьНалоговыйУчет" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Расходы.Идентификатор КАК Идентификатор,
		|	Неопределено КАК База,
		|	БазаРаспределения.ТипРазниц
		|	[ПоляПриемника]
		|ПОМЕСТИТЬ РезультатРаспределения
		|ИЗ
		|	РасходыПоПравилу КАК Расходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ [БазаРаспределения] КАК БазаРаспределения
		|		ПО [УсловияСоединения]
		|
		|ГДЕ
		|	НЕ ([РасходыСовпадают])
		|   И Расходы.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор";
		
		ЗаполнитьПоляПриемника(ПараметрыТекста, ПравилоРаспределения, РазрезыРаспределения); // И РасходыСовпадают
		ЗаполнитьУсловияСоединения(ПараметрыТекста, ПравилоРаспределения);
		ЗаполнитьОтборРасходов(ПараметрыТекста, ПравилоРаспределения);
		
		ПараметрыТекста.Вставить("БазаРаспределения", ПравилоРаспределения.БазаРаспределения.Имя);
		
	Иначе  // Зафиксируем расходы
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Расходы.Идентификатор,
		|	Неопределено КАК База
		|ПОМЕСТИТЬ РезультатРаспределения
		|ИЗ
		|	РасходыПоПравилу КАК Расходы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Расходы.Идентификатор";
			
		ЗаполнитьОтборРасходов(ПараметрыТекста, ПравилоРаспределения);
		
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыТекста);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого ПолеОтбора Из ПравилоРаспределения.ОтборРасходов Цикл
		Запрос.УстановитьПараметр(ПолеОтбора.Ключ, ПолеОтбора.Значение);
	КонецЦикла;
	
	РезультатСозданияВременнойТаблицы = Запрос.Выполнить();
	Возврат СозданнаяТаблицаСодержитЗаписи(РезультатСозданияВременнойТаблицы);
	
КонецФункции

Процедура ДополнитьОтборРасходовПравиломРаспределения(ОператорЗапроса, ПравилоРаспределения)
	
	Для Каждого ПолеОтбора Из ПравилоРаспределения.ОтборРасходов Цикл
		
		Шаблон = "Расходы.%1 = &%1";
		Если ТипЗнч(ПолеОтбора.Значение) = Тип("Массив")
			Или ТипЗнч(ПолеОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
			Шаблон = "Расходы.%1 В (&%1)";
		КонецЕсли;
		
		ОператорЗапроса.Отбор.Добавить(СтрШаблон(Шаблон, ПолеОтбора.Ключ));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтборРасходов(ПараметрыТекста, ПравилоРаспределения)
	
	ОтборРасходов = Новый Массив;
	
	Для Каждого ПолеОтбора Из ПравилоРаспределения.ОтборРасходов Цикл
		Если ПолеОтбора.Ключ = "Счет"
			Или ТипЗнч(ПолеОтбора.Значение) = Тип("Массив")
			Или ТипЗнч(ПолеОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
			ОтборРасходов.Добавить("И Расходы." + ПолеОтбора.Ключ + " В (&" + ПолеОтбора.Ключ + ")");
		Иначе
			ОтборРасходов.Добавить("И Расходы." + ПолеОтбора.Ключ + " = &" + ПолеОтбора.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ПодготовитьСекциюЗапроса(
		ПараметрыТекста, 
		"ОтборРасходов", 
		ОтборРасходов,
		"",  // Префикс секции
		""); // Разделитель
	
КонецПроцедуры

Процедура ЗаполнитьУсловияСоединения(ПараметрыТекста, ПравилоРаспределения)

	УсловияСоединения = Новый Массив;
	Для Каждого ПолеИсточника Из ПравилоРаспределения.ПоляИсточника Цикл
		УсловияСоединения.Добавить("Расходы." + ПолеИсточника.Ключ + " = БазаРаспределения." + ПолеИсточника.Значение);
	КонецЦикла;
	
	ПодготовитьСекциюЗапроса(
		ПараметрыТекста, 
		"УсловияСоединения", 
		УсловияСоединения, 
		"", // префикс секции 
		" И", // разделитель
		"ИСТИНА"); // текст для пустого списка
		
КонецПроцедуры

Процедура ЗаполнитьПоляПриемника(ПараметрыТекста, ПравилоРаспределения, РазрезыРаспределения)
	
	// Также заполняет РасходыСовпадают
	РасходыСовпадают = Новый Массив;
	ПоляПриемника    = Новый Массив;
	
	// Определим поля, которые отсутствуют в базе и должны быть "унаследованы" из источника
	ПоляИзИсточника = РазрезыРаспределения.ВыгрузитьКолонку("Имя"); // Все возможные поля
	
	Для Каждого ПолеПриемника Из ПравилоРаспределения.ПоляПриемника Цикл
		ПоляПриемника.Добавить("БазаРаспределения." + ПолеПриемника.Ключ + " КАК " + ПолеПриемника.Ключ);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПоляИзИсточника, ПолеПриемника.Ключ);
		РасходыСовпадают.Добавить("БазаРаспределения." + ПолеПриемника.Ключ + " = Расходы." + ПолеПриемника.Ключ);
	КонецЦикла;
	
	Если Не ПравилоРаспределения.ПоляПриемника.Свойство("Номенклатура") Тогда
		// Обязательное поле
		ПоляПриемника.Добавить("ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура");
	КонецЕсли;
	
	Для Каждого ПолеПриемника Из ПоляИзИсточника Цикл
		ПоляПриемника.Добавить("Расходы." + ПолеПриемника + " КАК " + ПолеПриемника);
	КонецЦикла;

	ПодготовитьСекциюЗапроса(
		ПараметрыТекста, 
		"ПоляПриемника", 
		ПоляПриемника,
		",");
	
	ПодготовитьСекциюЗапроса(
		ПараметрыТекста, 
		"РасходыСовпадают", 
		РасходыСовпадают, 
		"",      // префикс секции 
		" И",    // разделитель
		"Ложь"); // текст для пустого списка
	
КонецПроцедуры

Процедура УстановитьИндексПолейИсточника(ОписаниеЗапроса, ПоляИсточника, ИндексыТаблицыБазыРаспределения)
	
	// Полезный индекс должен содержать все или часть полей источника,
	// при этом должен включать поля индекса таблицы базы распределения - последовательно, с начала.
	// См. также УстановитьТекстЗапросБазыРаспределенияКИсполнению
	
	ОписаниеЗапроса.Индекс.Очистить();
	
	Для Каждого ИмяПоля Из ИндексыТаблицыБазыРаспределения Цикл
		
		Если Не ПоляИсточника.Свойство(ИмяПоля) Тогда
			Прервать;
		КонецЕсли;
		
		ОписаниеЗапроса.Индекс.Добавить(ИмяПоля);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСекциюЗапроса(ПараметрыТекста, ИмяСекции, ДанныеСекции, ПрефиксСекции = "", Разделитель = ",", ТекстНетДанных = "")
	
	Если ДанныеСекции.Количество() = 0 Тогда
		ПараметрыТекста.Вставить(ИмяСекции, ТекстНетДанных);
	Иначе
		ТекстСекции = СтрСоединить(ДанныеСекции, Разделитель + Символы.ПС);
		ПараметрыТекста.Вставить(ИмяСекции, ПрефиксСекции + ТекстСекции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатаИтерацииРаспределения

Процедура ДополнитьРезультатРаспределения(МенеджерВременныхТаблиц, ПравилоРаспределения, РезультатРаспределения, РазрезыРаспределения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПравилоРаспределения.Действие = "РаспределитьНаСубконто" Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатРаспределения.Идентификатор,
		|	РезультатРаспределения.Счет,
		|	РезультатРаспределения.Подразделение,
		|	РезультатРаспределения.Субконто1,
		|	РезультатРаспределения.Субконто2,
		|	РезультатРаспределения.Субконто3,
		|	РезультатРаспределения.Номенклатура,
		|	РезультатРаспределения.База
		|ИЗ
		|	РезультатРаспределения КАК РезультатРаспределения
		|ГДЕ
		|	НЕ РезультатРаспределения.База ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатРаспределения.Идентификатор,
		|	РезультатРаспределения.База";
		
		ХранилищеРезультата = РезультатРаспределения.РаспределениеНаСубконто;
		
	ИначеЕсли ПравилоРаспределения.Действие = "РаспределитьНаРасходы" Тогда
		
		// См. также СгруппироватьПоНоменклатуре
		
		Запрос.Текст = // дополняется полями разрезов распределения
		"ВЫБРАТЬ
		|	РезультатРаспределения.Идентификатор,
		|	РезультатРаспределения.Номенклатура,
		|	РезультатРаспределения.База
		|ИЗ
		|	РезультатРаспределения КАК РезультатРаспределения
		|ГДЕ
		|	НЕ РезультатРаспределения.База ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатРаспределения.Идентификатор,
		|	РезультатРаспределения.База";
		
		ДополнитьТекстЗапросаПолямиРазрезовРаспределения(Запрос.Текст, РазрезыРаспределения);
		
		ХранилищеРезультата = РезультатРаспределения.РаспределениеНаРасходы;
		
	ИначеЕсли ПравилоРаспределения.Действие = "ВыделитьНалоговыйУчет" Тогда
		
		Запрос.Текст = // дополняется полями разрезов распределения
		"ВЫБРАТЬ
		|	РезультатРаспределения.Идентификатор,
		|	РезультатРаспределения.Номенклатура,
		|	РезультатРаспределения.ТипРазниц
		|ИЗ
		|	РезультатРаспределения КАК РезультатРаспределения
		|ГДЕ
		|	НЕ РезультатРаспределения.База ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатРаспределения.Идентификатор";
		
		ДополнитьТекстЗапросаПолямиРазрезовРаспределения(Запрос.Текст, РазрезыРаспределения);
		
		ХранилищеРезультата = РезультатРаспределения.ОбособленныйНалоговыйУчет;
		
	ИначеЕсли ПравилоРаспределения.Действие = "Зафиксировать" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатРаспределения.Идентификатор
		|ИЗ
		|	РезультатРаспределения КАК РезультатРаспределения
		|ГДЕ
		|	НЕ РезультатРаспределения.База ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	РезультатРаспределения.Идентификатор";
		
		ХранилищеРезультата = РезультатРаспределения.ЗафиксированныеРасходы;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ХранилищеРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Правило = ПравилоРаспределения.Имя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьРасходыБезБазыРаспределения(МенеджерВременныхТаблиц, ПравилоРаспределения, РезультатРаспределения)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходыПоПравилу.Идентификатор
	|ИЗ
	|	РасходыПоПравилу КАК РасходыПоПравилу";
	
	ХранилищеРезультата = РезультатРаспределения.НеУдалосьРаспределить;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденнаяСтрока = ХранилищеРезультата.Найти(Выборка.Идентификатор, "Идентификатор");
		
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ХранилищеРезультата.Добавить();
			НоваяСтрока.Идентификатор = Выборка.Идентификатор;
			НоваяСтрока.Правило       = ПравилоРаспределения.Имя;
		Иначе
			НайденнаяСтрока.Правило   = ПравилоРаспределения.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьНеРаспределенныеРасходы(МенеджерВременныхТаблиц, ПравилоРаспределения, РезультатРаспределения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатРаспределения.Идентификатор
	|ИЗ
	|	РезультатРаспределения КАК РезультатРаспределения
	|ГДЕ
	|	РезультатРаспределения.База ЕСТЬ NULL ";
	
	ХранилищеРезультата = РезультатРаспределения.НеУдалосьРаспределить;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденнаяСтрока = ХранилищеРезультата.Найти(Выборка.Идентификатор, "Идентификатор");
		
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ХранилищеРезультата.Добавить();
			НоваяСтрока.Идентификатор = Выборка.Идентификатор;
			НоваяСтрока.Правило       = ПравилоРаспределения.Имя;
		Иначе
			НайденнаяСтрока.Правило   = ПравилоРаспределения.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьНовыеРасходы(МенеджерВременныхТаблиц, ПравилоРаспределения, МаксимальныйИдентификатор, РазрезыРаспределения)

	// Новые расходы не могут появиться при распределении на "Субконто", 
	// потому что при таком распределении аналитика расходов полностью получается из базы распределения.
	// Как следствие, до распределения уже известна аналитика, которая получится при таком распределении.
	Если ПравилоРаспределения.Действие <> "РаспределитьНаРасходы" 
		И ПравилоРаспределения.Действие <> "ВыделитьНалоговыйУчет" Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
		
	// Таблица Приемники содержит все наборы аналитики, которые будут являться приемниками расходов в результате распределения.
	// Затем из таблицы отбираются _новые_ наборы аналитики расходов
	// (для исключения старых добавляется соединение по полям разрезов распределения).
	//
	// Новые наборы появляются при распределении на расходы.
	// При этом распределение по правилам с признаком Выпуск может приводить к расходам с заполненным полем Номенклатура,
	// все остальные варианты распределения дают незаполненное.
	//
	// Поле МожетБытьПриемником в первом запросе используется для обеспечения индекса, эффективного для условий соединения.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК МожетБытьПриемником,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Приемники
	|ИЗ
	|	РезультатРаспределения КАК РезультатРаспределения
	|ГДЕ
	|	НЕ РезультатРаспределения.База ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА,
	|	РезультатРаспределения.Номенклатура
	|ИЗ
	|	РезультатРаспределения КАК РезультатРаспределения
	|ГДЕ
	|	НЕ РезультатРаспределения.База ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приемники.Номенклатура КАК Номенклатура
	|ИЗ
	|	ВТ_Приемники КАК Приемники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО Приемники.МожетБытьПриемником = Расходы.МожетБытьПриемником
	|			И Приемники.Номенклатура = Расходы.Номенклатура
	|ГДЕ
	|	Расходы.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Приемники";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	
	// Запрос создания таблицы дополняем стандартными полями
	ОписаниеЗапросаСозданиеТаблицы = СхемаЗапроса.ПакетЗапросов[0];
	Для Каждого ОператорЗапроса Из ОписаниеЗапросаСозданиеТаблицы.Операторы Цикл
		ТаблицаРезультатРаспределения = ОператорЗапроса.Источники[0].Источник;
		ДополнитьОператорЗапросаПолямиРазрезовРаспределения(
			ОписаниеЗапросаСозданиеТаблицы,
			ОператорЗапроса,
			ТаблицаРезультатРаспределения,
			РазрезыРаспределения);
	КонецЦикла;
	УстановитьИндексВременнойТаблицыРасходы(ОписаниеЗапросаСозданиеТаблицы.Индекс, РазрезыРаспределения);
	
	// Запрос выборки дополняем стандартными полями и включаем их в условия соединения
	ОписаниеЗапросаВыборка = СхемаЗапроса.ПакетЗапросов[1];
	ОператорЗапроса = ОписаниеЗапросаВыборка.Операторы[0];
	
	ИсточникПриемники = ОператорЗапроса.Источники.НайтиПоПсевдониму("Приемники");
	ДополнитьОператорЗапросаПолямиРазрезовРаспределения(
		ОписаниеЗапросаВыборка,
		ОператорЗапроса,
		ИсточникПриемники.Источник,
		РазрезыРаспределения);
	УстановитьПорядокРазрезовРаспределения(ОписаниеЗапросаВыборка.Порядок, РазрезыРаспределения);
	
	ИсточникРасходы   = ОператорЗапроса.Источники.НайтиПоПсевдониму("Расходы");
	ДополнитьУсловияСоединенияПолямиРазрезовРаспределения(ИсточникПриемники, ИсточникРасходы, РазрезыРаспределения);
	
	// Выполнение пакета
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НовыеРасходы = Новый ТаблицаЗначений;
	НовыеРасходы.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	ДобавитьКолонкиАналитикаРаспределения(НовыеРасходы, РазрезыРаспределения);
	НовыеРасходы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НовыеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
		НоваяСтрока.Идентификатор = МаксимальныйИдентификатор;
	КонецЦикла;
	// В версии 8.3.13 можно попробовать нумеровать ключи без передачи всех данных на сервер приложений
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НовыеРасходы", НовыеРасходы);
	Запрос.Текст = // Дополняется разрезами распределения
	"ВЫБРАТЬ
	|	НовыеРасходы.Идентификатор КАК Идентификатор,
	|	НовыеРасходы.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НовыеРасходы
	|ИЗ
	|	&НовыеРасходы КАК НовыеРасходы";
	
	ДополнитьТекстЗапросаПолямиРазрезовРаспределения(Запрос.Текст, РазрезыРаспределения);
	
	Запрос.Выполнить();
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьРасходы(МенеджерВременныхТаблиц, Действие, РазрезыРаспределения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатРаспределения.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_РаспределенныеРасходы
	|ИЗ
	|	РезультатРаспределения КАК РезультатРаспределения
	|ГДЕ
	|	НЕ РезультатРаспределения.База ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РезультатРаспределения.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатРаспределения.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_РасходыСгруппированныеПоНоменклатуре
	|ИЗ
	|	РасходыПоПравилу КАК РезультатРаспределения
	|ГДЕ
	|	РезультатРаспределения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РезультатРаспределения.Идентификатор";
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ЕстьНовыеРасходы = МенеджерВременныхТаблиц.Таблицы.Найти("НовыеРасходы") <> Неопределено;
	
	Если ЕстьНовыеРасходы Тогда
		ТребуетсяОбновлениеРасходов = Истина;
	Иначе
		ТребуетсяОбновлениеРасходов = Ложь;
		Для Каждого РезультатЗапроса Из РезультатыЗапросов Цикл
			Если Не СозданнаяТаблицаСодержитЗаписи(РезультатЗапроса) Тогда
				Продолжить;
			КонецЕсли;
			ТребуетсяОбновлениеРасходов = Истина;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТребуетсяОбновлениеРасходов Тогда
		УничтожитьТаблицу(МенеджерВременныхТаблиц, "ВТ_РаспределенныеРасходы");
		УничтожитьТаблицу(МенеджерВременныхТаблиц, "ВТ_РасходыСгруппированныеПоНоменклатуре");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МожноРаспределить",          Действие = "ВыделитьНалоговыйУчет"); // После остальных действий распределять нельзя
	Запрос.УстановитьПараметр("МожноВыделитьНалоговыйУчет", Ложь); // Любое действие с расходами приводит к тому, что больше нельзя выделить налоговый учет
	// См. также комментарий о порядке правил в НовыеПравилаРаспределения()
	
	// Текст запроса модифицируется:
	// - НовыеРасходы не используется, если отсутствует
	// - при создании СтарыеРасходы, Расходы добавляются поля разрезов распределения
	// - при выборе из НовыеРасходы - заполняются выражения для полей субконто (для этого используется Счет)
	// - Расходы индексируется
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Расходы.Идентификатор КАК Идентификатор,
	|	Расходы.Номенклатура КАК Номенклатура,
	|	Расходы.Счет КАК Счет,
	|	Расходы.Субконто1 КАК Субконто1,
	|	Расходы.Субконто2 КАК Субконто2,
	|	Расходы.Субконто3 КАК Субконто3,
	|	Расходы.МожноРаспределить КАК МожноРаспределить,
	|	Расходы.МожноВыделитьНалоговыйУчет КАК МожноВыделитьНалоговыйУчет,
	|	Расходы.МожетБытьПриемником КАК МожетБытьПриемником
	|ПОМЕСТИТЬ ВТ_СтарыеРасходы
	|ИЗ
	|	Расходы КАК Расходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Расходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.Идентификатор КАК Идентификатор,
	|	Расходы.Номенклатура КАК Номенклатура,
	|	Расходы.Счет КАК Счет,
	|	Расходы.Субконто1 КАК Субконто1,
	|	Расходы.Субконто2 КАК Субконто2,
	|	Расходы.Субконто3 КАК Субконто3,
	|	ВЫБОР
	|		КОГДА НЕ РасходыСгруппированныеПоНоменклатуре.Идентификатор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА РаспределенныеРасходы.Идентификатор ЕСТЬ NULL
	|			ТОГДА Расходы.МожноРаспределить
	|		ИНАЧЕ Расходы.МожноРаспределить
	|				И &МожноРаспределить
	|	КОНЕЦ КАК МожноРаспределить,
	|	ВЫБОР
	|		КОГДА НЕ РасходыСгруппированныеПоНоменклатуре.Идентификатор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА РаспределенныеРасходы.Идентификатор ЕСТЬ NULL
	|			ТОГДА Расходы.МожноВыделитьНалоговыйУчет
	|		ИНАЧЕ Расходы.МожноВыделитьНалоговыйУчет
	|				И &МожноВыделитьНалоговыйУчет
	|	КОНЕЦ КАК МожноВыделитьНалоговыйУчет,
	|	Расходы.МожетБытьПриемником КАК МожетБытьПриемником
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	ВТ_СтарыеРасходы КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаспределенныеРасходы КАК РаспределенныеРасходы
	|		ПО Расходы.Идентификатор = РаспределенныеРасходы.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасходыСгруппированныеПоНоменклатуре КАК РасходыСгруппированныеПоНоменклатуре
	|		ПО Расходы.Идентификатор = РасходыСгруппированныеПоНоменклатуре.Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НовыеРасходы.Идентификатор,
	|	НовыеРасходы.Номенклатура,
	|	НовыеРасходы.Счет,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ИСТИНА
	|ИЗ
	|	НовыеРасходы КАК НовыеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтарыеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РасходыСгруппированныеПоНоменклатуре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РаспределенныеРасходы";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОператоров = ОписаниеЗапроса.Операторы.Количество();
		Для НомерСКонца = 1 По КоличествоОператоров Цикл
			
			ИндексОператора = КоличествоОператоров - НомерСКонца;
			ОператорЗапроса = ОписаниеЗапроса.Операторы[ИндексОператора];
			
			Если ОператорЗапроса.Источники.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеИсточника = ОператорЗапроса.Источники[0].Источник;
			Если Не ЭтоОписаниеВременнойТаблицыСхемыЗапроса(ОписаниеИсточника) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЕстьНовыеРасходы И ОписаниеИсточника.ИмяТаблицы = "НовыеРасходы" Тогда
				ОписаниеЗапроса.Операторы.Удалить(ИндексОператора);
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_СтарыеРасходы" Тогда
				ДополнитьОператорЗапросаПолямиРазрезовРаспределения(
					ОписаниеЗапроса,
					ОператорЗапроса,
					ОписаниеИсточника,
					РазрезыРаспределения);
			КонецЕсли;
			
			Если ОписаниеЗапроса.ТаблицаДляПомещения = "Расходы" Тогда
				
				ДополнитьОператорЗапросаПолямиРазрезовРаспределения(
					ОписаниеЗапроса,
					ОператорЗапроса,
					ОписаниеИсточника,
					РазрезыРаспределения);
				
				Если ОписаниеИсточника.ИмяТаблицы = "НовыеРасходы" Тогда
					УстановитьВыраженияСубконтоПоРазрезамРаспределения(
						ОписаниеЗапроса,
						ОператорЗапроса,
						ОписаниеИсточника,
						РазрезыРаспределения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОписаниеЗапроса.ТаблицаДляПомещения = "Расходы" Тогда
			УстановитьИндексВременнойТаблицыРасходы(ОписаниеЗапроса.Индекс, РазрезыРаспределения);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	УстановитьПараметрыРазрезовРаспределения(Запрос, РазрезыРаспределения);
	
	Запрос.Выполнить();
	
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "НовыеРасходы");
	
КонецПроцедуры

Процедура УничтожитьТаблицу(МенеджерВременныхТаблиц, ИмяТаблицы)
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("УНИЧТОЖИТЬ %1", ИмяТаблицы);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СозданнаяТаблицаСодержитЗаписи(РезультатЗапросаСозданияВременнойТаблицы)
	
	// Результат запроса создания временной таблицы содержит одну колонку и одну строку с количеством строк в таблице
	ВыборкаКоличествоЗаписей = РезультатЗапросаСозданияВременнойТаблицы.Выбрать();
	ВыборкаКоличествоЗаписей.Следующий();
	Возврат ЗначениеЗаполнено(ВыборкаКоличествоЗаписей[РезультатЗапросаСозданияВременнойТаблицы.Колонки[0].Имя]);
	
КонецФункции

#КонецОбласти

#Область ПодготовкаВозвращаемыхДанных

Процедура ДобавитьКолонкиАналитикаРаспределения(ТаблицаЗначений, РазрезыРаспределения)
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		ТаблицаЗначений.Колонки.Добавить(ОписаниеРазрезаРаспределения.Имя, ОписаниеРазрезаРаспределения.ТипЗначения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКлючиВершин(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расходы.Идентификатор КАК Идентификатор,
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.Субконто1 КАК Субконто1,
	|	Расходы.Субконто2 КАК Субконто2,
	|	Расходы.Субконто3 КАК Субконто3,
	|	Расходы.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет
	|ПОМЕСТИТЬ ВТ_НовыеИдентификаторыВершин
	|ИЗ
	|	Расходы КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК ИдентификаторыВершин
	|		ПО Расходы.Идентификатор = ИдентификаторыВершин.Идентификатор
	|ГДЕ
	|	ИдентификаторыВершин.Идентификатор ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Новые.Счет КАК Счет,
	|	Новые.Подразделение КАК Подразделение,
	|	Новые.Субконто1 КАК Субконто1,
	|	Новые.Субконто2 КАК Субконто2,
	|	Новые.Субконто3 КАК Субконто3,
	|	Новые.Номенклатура КАК Номенклатура,
	|	Новые.КорСчет КАК КорСчет,
	|	МИНИМУМ(Новые.Идентификатор) КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_НовыеКлючиВершин
	|ИЗ
	|	ВТ_НовыеИдентификаторыВершин КАК Новые
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиВершин КАК Старые
	|		ПО Новые.Счет = Старые.Счет
	|			И Новые.Подразделение = Старые.Подразделение
	|			И Новые.Субконто1 = Старые.Субконто1
	|			И Новые.Субконто2 = Старые.Субконто2
	|			И Новые.Субконто3 = Старые.Субконто3
	|			И Новые.Номенклатура = Старые.Номенклатура
	|			И Новые.КорСчет = Старые.КорСчет
	|ГДЕ
	|	Старые.Счет ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Новые.Счет,
	|	Новые.Подразделение,
	|	Новые.Субконто1,
	|	Новые.Субконто2,
	|	Новые.Субконто3,
	|	Новые.Номенклатура,
	|	Новые.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.РазделУчета КАК РазделУчета,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ ВТ_СтарыеКлючиВершин
	|ИЗ
	|	КлючиВершин КАК КлючиВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.РазделУчета КАК РазделУчета,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет,
	|	КлючиВершин.НеОборотноеСубконто1 КАК НеОборотноеСубконто1,
	|	КлючиВершин.НеОборотноеСубконто2 КАК НеОборотноеСубконто2,
	|	КлючиВершин.НеОборотноеСубконто3 КАК НеОборотноеСубконто3
	|ПОМЕСТИТЬ ВТ_СтарыеИдентификаторыВершин
	|ИЗ
	|	ИдентификаторыВершин КАК КлючиВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КлючиВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИдентификаторыВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Новые.Идентификатор КАК Идентификатор,
	|	""Расходы"" КАК РазделУчета,
	|	Новые.Счет КАК Счет,
	|	Новые.Подразделение КАК Подразделение,
	|	Новые.Субконто1 КАК Субконто1,
	|	Новые.Субконто2 КАК Субконто2,
	|	Новые.Субконто3 КАК Субконто3,
	|	Новые.Номенклатура КАК Номенклатура,
	|	Новые.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ КлючиВершин
	|ИЗ
	|	ВТ_НовыеКлючиВершин КАК Новые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Старые.Идентификатор,
	|	Старые.РазделУчета,
	|	Старые.Счет,
	|	Старые.Подразделение,
	|	Старые.Субконто1,
	|	Старые.Субконто2,
	|	Старые.Субконто3,
	|	Старые.Номенклатура,
	|	Старые.КорСчет
	|ИЗ
	|	ВТ_СтарыеКлючиВершин КАК Старые
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Новые.Идентификатор КАК Идентификатор,
	|	""Расходы"" КАК РазделУчета,
	|	Новые.Счет КАК Счет,
	|	Новые.Подразделение КАК Подразделение,
	|	Новые.Субконто1 КАК Субконто1,
	|	Новые.Субконто2 КАК Субконто2,
	|	Новые.Субконто3 КАК Субконто3,
	|	Новые.Номенклатура КАК Номенклатура,
	|	Новые.КорСчет КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто1, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Новые.Субконто1
	|	КОНЕЦ КАК НеОборотноеСубконто1,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто2, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Новые.Субконто2
	|	КОНЕЦ КАК НеОборотноеСубконто2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто3, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Новые.Субконто3
	|	КОНЕЦ КАК НеОборотноеСубконто3
	|ПОМЕСТИТЬ ИдентификаторыВершин
	|ИЗ
	|	ВТ_НовыеИдентификаторыВершин КАК Новые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО Новые.Счет = ОборотныеСубконто.Счет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Старые.Идентификатор,
	|	Старые.РазделУчета,
	|	Старые.Счет,
	|	Старые.Подразделение,
	|	Старые.Субконто1,
	|	Старые.Субконто2,
	|	Старые.Субконто3,
	|	Старые.Номенклатура,
	|	Старые.КорСчет,
	|	Старые.НеОборотноеСубконто1,
	|	Старые.НеОборотноеСубконто2,
	|	Старые.НеОборотноеСубконто3
	|ИЗ
	|	ВТ_СтарыеИдентификаторыВершин КАК Старые
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Новые.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НовыеКлючиВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтарыеКлючиВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НовыеИдентификаторыВершин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтарыеИдентификаторыВершин";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПоместитьРезультатРаспределенияВоВременныеТаблицы(МенеджерВременныхТаблиц, РезультатРаспределения, РазрезыРаспределения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РаспределениеНаСубконто", РезультатРаспределения.РаспределениеНаСубконто);
	Запрос.УстановитьПараметр("ЗафиксированныеРасходы",  РезультатРаспределения.ЗафиксированныеРасходы);
	Запрос.УстановитьПараметр("НеУдалосьРаспределить",   РезультатРаспределения.НеУдалосьРаспределить);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатРаспределения.Правило КАК Правило,
	|	РезультатРаспределения.Идентификатор КАК Идентификатор,
	|	РезультатРаспределения.Счет КАК Счет,
	|	РезультатРаспределения.Подразделение КАК Подразделение,
	|	РезультатРаспределения.Субконто1 КАК Субконто1,
	|	РезультатРаспределения.Субконто2 КАК Субконто2,
	|	РезультатРаспределения.Субконто3 КАК Субконто3,
	|	РезультатРаспределения.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	РезультатРаспределения.База КАК База
	|ПОМЕСТИТЬ РаспределениеНаСубконто
	|ИЗ
	|	&РаспределениеНаСубконто КАК РезультатРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатРаспределения.Правило КАК Правило,
	|	РезультатРаспределения.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЗафиксированныеРасходы
	|ИЗ
	|	&ЗафиксированныеРасходы КАК РезультатРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РезультатРаспределения.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеУдалосьРаспределить.Идентификатор КАК Идентификатор,
	|	НеУдалосьРаспределить.Правило КАК Правило
	|ПОМЕСТИТЬ ВТ_НеУдалосьРаспределить
	|ИЗ
	|	&НеУдалосьРаспределить КАК НеУдалосьРаспределить
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеУдалосьРаспределить.Идентификатор КАК Идентификатор,
	|	НеУдалосьРаспределить.Правило КАК Правило
	|ПОМЕСТИТЬ НеУдалосьРаспределить
	|ИЗ
	|	ВТ_НеУдалосьРаспределить КАК НеУдалосьРаспределить
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО НеУдалосьРаспределить.Идентификатор = Расходы.Идентификатор
	|ГДЕ
	|	Расходы.МожноРаспределить
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НеУдалосьРаспределить";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("РаспределениеНаРасходы",    РезультатРаспределения.РаспределениеНаРасходы);
	Запрос.УстановитьПараметр("ОбособленныйНалоговыйУчет", РезультатРаспределения.ОбособленныйНалоговыйУчет);
	// Текст дополняется полями разрезов распределения и соответствующим индексом.
	// Поле МожетБытьПриемником в первом запросе используется для обеспечения индекса, эффективного для условий соединения
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатРаспределения.Правило КАК Правило,
	|	РезультатРаспределения.Идентификатор КАК Идентификатор,
	|	ИСТИНА КАК МожетБытьПриемником,
	|	РезультатРаспределения.Номенклатура КАК Номенклатура,
	|	РезультатРаспределения.База КАК База
	|ПОМЕСТИТЬ ВТ_РаспределениеНаРасходы
	|ИЗ
	|	&РаспределениеНаРасходы КАК РезультатРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатРаспределения.Правило КАК Правило,
	|	РезультатРаспределения.Идентификатор КАК Идентификатор,
	|	РезультатРаспределения.ТипРазниц КАК ТипРазниц,
	|	ИСТИНА КАК МожетБытьПриемником,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ОбособленныйНалоговыйУчет
	|ИЗ
	|	&ОбособленныйНалоговыйУчет КАК РезультатРаспределения";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
			ДополнитьОператорЗапросаПолямиРазрезовРаспределения(
				ОписаниеЗапроса,
				ОператорЗапроса,
				ОператорЗапроса.Источники[0].Источник,
				РазрезыРаспределения);
		КонецЦикла;
		
		УстановитьИндексВременнойТаблицыРасходы(ОписаниеЗапроса.Индекс, РазрезыРаспределения);
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
	
	// Текст запроса дополняется условиями соединения по полям разрезов распределения
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатРаспределения.Правило КАК Правило,
	|	РезультатРаспределения.Идентификатор КАК Источник,
	|	Расходы.Идентификатор КАК Приемник,
	|	РезультатРаспределения.База КАК База
	|ПОМЕСТИТЬ РаспределениеНаРасходы
	|ИЗ
	|	ВТ_РаспределениеНаРасходы КАК РезультатРаспределения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО РезультатРаспределения.МожетБытьПриемником = Расходы.МожетБытьПриемником
	|			И РезультатРаспределения.Номенклатура = Расходы.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатРаспределения.Правило КАК Правило,
	|	РезультатРаспределения.Идентификатор КАК Источник,
	|	Расходы.Идентификатор КАК Приемник,
	|	РезультатРаспределения.ТипРазниц КАК ТипРазниц
	|ПОМЕСТИТЬ ОбособленныйНалоговыйУчет
	|ИЗ
	|	ВТ_ОбособленныйНалоговыйУчет КАК РезультатРаспределения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|		ПО РезультатРаспределения.МожетБытьПриемником = Расходы.МожетБытьПриемником
	|			И РезультатРаспределения.Номенклатура = Расходы.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Для Каждого ОператорЗапроса Из ОписаниеЗапроса.Операторы Цикл
			ДополнитьУсловияСоединенияПолямиРазрезовРаспределения(
				ОператорЗапроса.Источники[0],
				ОператорЗапроса.Источники[1],
				РазрезыРаспределения);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
	
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "ВТ_РаспределениеНаРасходы");
	УничтожитьТаблицу(МенеджерВременныхТаблиц, "ВТ_ОбособленныйНалоговыйУчет");
	
КонецПроцедуры

#КонецОбласти
