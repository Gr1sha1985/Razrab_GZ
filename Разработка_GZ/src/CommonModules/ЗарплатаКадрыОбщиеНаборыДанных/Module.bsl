
#Область СлужебныйПрограммныйИнтерфейс

// Обрабатывает СКД отчетов в части общих источников данных, описанных в СКД
// См. например в текстах запросов СКД
// ПОМЕСТИТЬ ОбщиеЗапросы_НачисленияУдержания
// ВЫБРАТЬ ... ИЗ Представления_КадровыеДанныеСотрудников.
// 
// Параметры:
//  Объект - отчет
//  ДополнительныеПоляПредставлений - Структура - где ключи - имена представлений запросов,
//										значения - массив с описанием дополнительных полей.
//
Процедура ЗаполнитьОбщиеИсточникиДанныхОтчета(Объект, ДополнительныеПоляПредставлений = Неопределено, ТолькоРазрешенные = Истина) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ЗаполнитьОбщиеЗапросы(Объект.СхемаКомпоновкиДанных.НаборыДанных, ТолькоРазрешенные);
		ВывестиДополнительныеПоляПредставленийВОтчет(Объект, ДополнительныеПоляПредставлений);
		ЗаменитьПредставленияЗапросов(Объект.СхемаКомпоновкиДанных.НаборыДанных, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу периодов с заданной периодичностью, формируемой, с помощью,
// запроса, возвращаемого методом ЗапросВТПериоды.
// Создает в МенеджерВременныхТаблиц временную таблицу с именем <ИмяВТ> 
// и периодичностью <Периодичность>	
// за интервал с <НачалоИнтервала> по <ОкончаниеИнтервала>.
//
Процедура СоздатьВТПериоды(МенеджерВременныхТаблиц, НачалоИнтервала, ОкончаниеИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если НачалоИнтервала > ОкончаниеИнтервала Тогда
		ВызватьИсключение НСтр("ru='Дата окончания не может быть меньше даты начала.'")
	КонецЕсли;
	
	Запрос = ЗапросВТПериоды(НачалоИнтервала, ОкончаниеИнтервала, Периодичность, ИмяПоляПериод, ИмяВТ, ИспользоватьКонецПериода);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры


#Область ПроцедурыИФункцииИспользуемыеПриКонструированииЗапросов

// Возвращает фрагмент текста запроса, отделяющего один запрос от другого.
//
Функция РазделительЗапросов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

// Возвращает уникальное имя на основе переданного имени.
//
// Параметры:
//		ИмяТекстаЗапроса - Строка
//
// Возвращаемое значение:
//		Строка
//
Функция УникальноеИмяТекстаЗапроса(Знач ИмяТекстаЗапроса) Экспорт
	
	Возврат ИмяТекстаЗапроса + "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "x");
	
КонецФункции

// Производит замену ключевой фразы "ВЫБРАТЬ РАЗРЕШЕННЫЕ" на "ВЫБРАТЬ". Предполагается, что
// текст запроса изначально содержит фразу "ВЫБРАТЬ РАЗРЕШЕННЫЕ".
//
// Параметры:
//		ТекстЗапроса - Строка
//		ТолькоРазрешенные - Булево
//
Процедура УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные) Экспорт
	
	Если Не ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли; 
	
КонецПроцедуры

// Осуществляет замену имени временной таблицы. Если не указано новое имя 
// временной таблицы, производится удаление из текста запроса строки, осуществляющей
// создание временной таблицы. Если новое имя временной таблицы передано, то производится
// замена всех фрагментов текста, содержащих старое имя временной таблицы на новое имя.
//
// Параметры:
//	ТекстЗапроса
//	ТекущееИмяТаблицы
//	НовоеИмяТаблицы
//
Процедура ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, ТекущееИмяТаблицы, НовоеИмяТаблицы = "") Экспорт
	
	Если ПустаяСтрока(НовоеИмяТаблицы) Тогда
		ЗамещаемыйТекст = "";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ТекущееИмяТаблицы, "ПОМЕСТИТЬ " + НовоеИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет замену текста запроса, создающего временную таблицу на другой
//
// Параметры:
//		ТекстЗапроса								- Строка, исходный текст запроса
//		ИмяСоздаваемойТаблицы						- Строка, имя создаваемой таблицы,
//														текст запроса создания которой
//														будет подменяться новым
//		НовыйТекстЗапросаСозданияВременнойТаблицы	- Строка, текст запроса создания временной
//														таблицы, на который будет произведена
//														замена
//
// Возвращаемое значение:
//		Булево - Истина, если замена произведена.
//
Функция ЗаменитьЗапросСозданияВременнойТаблицы(ТекстЗапроса, ИмяСоздаваемойТаблицы, НовыйТекстЗапросаСозданияВременнойТаблицы) Экспорт
	
	ЗаменаВыполнена = Ложь;
	
	ТекстыЗапросов = СтрРазделить(ТекстЗапроса, ";");
	Для каждого ТекстПодзапроса Из ТекстыЗапросов Цикл
		
		ТекстПодзапросаВВерхнемРегистре = ВРег(ТекстПодзапроса);
		Если СтрНайти(ТекстПодзапросаВВерхнемРегистре, "ПОМЕСТИТЬ " + ВРег(ИмяСоздаваемойТаблицы) + Символы.ПС) > 0 Тогда
			
			ПозицияВыбрать = СтрНайти(ТекстПодзапросаВВерхнемРегистре, "ВЫБРАТЬ ");
			Если ПозицияВыбрать > 1 Тогда
				ТекстПодзапроса = Сред(ТекстПодзапроса, ПозицияВыбрать);
			КонецЕсли; 
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПодзапроса, НовыйТекстЗапросаСозданияВременнойТаблицы);
			ЗаменаВыполнена = Истина;
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ЗаменаВыполнена;
	
КонецФункции

// Копирует параметры запроса ЗапросИсточник в параметры запроса ЗапросПриемник.
//
// Параметры:
//		ЗапросПриемник - Запрос
//		ЗапросИсточник - Запрос
//
Процедура СкопироватьПараметрыЗапроса(ЗапросПриемник, ЗапросИсточник) Экспорт
	
	Для каждого Параметр Из ЗапросИсточник.Параметры Цикл
		
		ЗапросПриемник.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстОбъединенногоЗапроса(Знач ТекстЗапроса, Знач ТекстЗапроса1, Знач ТекстЗапроса2 = "", Знач ТекстЗапроса3 = "", Знач ТекстЗапроса4 = "", Знач ТекстЗапроса5 = "", Знач ТекстЗапроса6 = "", Знач ТекстЗапроса7 = "", Знач ТекстЗапроса8 = "", Знач ТекстЗапроса9 = "") Экспорт
	
	ОбъединяемыеЗапросы = Новый Массив;
	
	ОбъединяемыеЗапросы.Добавить(ТекстЗапроса);
	ОбъединяемыеЗапросы.Добавить(ТекстЗапроса1);
	
	Если Не ПустаяСтрока(ТекстЗапроса2) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса2);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса3) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса3);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса4) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса4);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса5) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса5);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса6) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса6);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса7) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса7);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса8) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса8);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса9) Тогда
		ОбъединяемыеЗапросы.Добавить(ТекстЗапроса9);
	КонецЕсли;
	
	Возврат СтрСоединить(ОбъединяемыеЗапросы, РазделительЗапросов());
	
КонецФункции

// Добавляет к тексту запроса, переданному в параметре ТекстЗапросаПриемник, текст запроса
// переданного в параметре ТекстЗапросаИсточник, через фрагмент текста разделения запросов
// см.РазделительЗапросов.
//
// Параметры:
//		ТекстЗапросаПриемник - Строка
//		ТекстЗапросаИсточник - Строка
//
Процедура ОбъединитьТекстыЗапросов(ТекстЗапросаПриемник, ТекстЗапросаИсточник) Экспорт
	
	Если ПустаяСтрока(ТекстЗапросаПриемник) Тогда
		ТекстЗапросаПриемник = ТекстЗапросаИсточник;
	ИначеЕсли Не ПустаяСтрока(ТекстЗапросаИсточник) Тогда
		ТекстЗапросаПриемник = ТекстОбъединенногоЗапроса(ТекстЗапросаПриемник, ТекстЗапросаИсточник);
	КонецЕсли;
	
КонецПроцедуры

// Объединяет два запроса в один. При этом производится копирование параметров
// см.СкопироватьПараметрыЗапроса и объединение текстов запросов см.ОбъединитьТекстыЗапросов.
//
// Параметры:
//		ЗапросПриемник - Запрос
//		ЗапросИсточник - Запрос
//
Процедура ОбъединитьЗапросы(ЗапросПриемник, ЗапросИсточник) Экспорт
	
	ОбъединитьТекстыЗапросов(ЗапросПриемник.Текст, ЗапросИсточник.Текст);
	СкопироватьПараметрыЗапроса(ЗапросПриемник, ЗапросИсточник);
	
КонецПроцедуры

// Добавляет к тексту запроса, переданному в параметре ТекстЗапроса, текст запроса
// уничтожения временной таблицы.
//
// Параметры:
//		ТекстЗапроса - Строка
//		ИмяВременнойТаблицы - Строка
//
Процедура ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВременнойТаблицы) Экспорт
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "", ТекстЗапроса + РазделительЗапросов()) + "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗапросыУничтоженияВременныхТаблиц(ТекстЗапроса, ИменаВременныхТаблицКУничтожению) Экспорт
	
	Для каждого ИмяВременнойТаблицы Из ИменаВременныхТаблицКУничтожению Цикл
		ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВременнойТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВЗапросСозданияВременнойТаблицыТекстУничтоженияВспомогательной(ТекстЗапроса, ИмяВременнойТаблицы) Экспорт
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) И ЗапросСозданияВременнойТаблицы(ТекстЗапроса) Тогда
		ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "", ТекстЗапроса + РазделительЗапросов()) + "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросСозданияВременнойТаблицы(ТекстЗапроса) Экспорт
	
	СозданиеВременнойТаблицы = Истина;
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		
		ТекстыЗапросов = СтрРазделить(ТекстЗапроса, ";");
		
		КоличествоЗапросов = ТекстыЗапросов.Количество();
		Для СдвигНомераЗапроса = 1 По КоличествоЗапросов Цикл
			
			ТекстПоследнегоЗапроса = ТекстыЗапросов[КоличествоЗапросов - СдвигНомераЗапроса];
			Если СтрНайти(ТекстПоследнегоЗапроса, "УНИЧТОЖИТЬ") = 0 Тогда
				
				Если СтрНайти(ВРег(ТекстПоследнегоЗапроса), "ПОМЕСТИТЬ ") = 0 Тогда
					СозданиеВременнойТаблицы = Ложь;
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СозданиеВременнойТаблицы;
	
КонецФункции

Функция ЗапросУничтоженияВТ(ИмяВременнойТаблицы) Экспорт
	ТекстЗапроса = " УНИЧТОЖИТЬ " + ИмяВременнойТаблицы; 
	
	Возврат Новый Запрос(ТекстЗапроса);
КонецФункции	

#КонецОбласти


#Область ПостроениеПредставленийВТИмяРегистра

Процедура ПриПолученииСвойствРегистра(ИмяРегистра, СтруктураОписанияРегистра)
	ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ПриПолученииСвойствРегистра(ИмяРегистра, СтруктураОписанияРегистра);	
КонецПроцедуры	

#КонецОбласти


#Область ПостроениеПредставленийВТИмяРегистра

// Добавляет в коллекцию описание отбора.
//
// Параметры:
//		КоллекцияОтборов 	- Массив
//		ЛевоеЗначение		- Строка
//		ВидСравнения		- Строка, допустимы условия, применяемые в текстах запросов.
//		ПравоеЗначение		- Любое значение, допустимое в условиях текстов запросов.
//		ОтносительныйПуть	- Булево, если истина, то в параметре ЛевоеЗначение должно содержаться
//								имя измерения, ресурса, реквизита регистра и перед именем через точку будет
//								подставляться имя таблицы из которой осуществляется выборка.
//
Процедура ДобавитьВКоллекциюОтбор(КоллекцияОтборов, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, ОтносительныйПуть = Истина) Экспорт
	
	Если КоллекцияОтборов = Неопределено Тогда
		КоллекцияОтборов = Новый Массив;
	КонецЕсли;
	
	ОписаниеОтбора = Новый Структура;
	ОписаниеОтбора.Вставить("ЛевоеЗначение", ЛевоеЗначение);
	ОписаниеОтбора.Вставить("ВидСравнения", ВидСравнения);
	ОписаниеОтбора.Вставить("ПравоеЗначение", ПравоеЗначение);
	ОписаниеОтбора.Вставить("ОтносительныйПуть", ОтносительныйПуть);
	
	КоллекцияОтборов.Добавить(ОписаниеОтбора);
	
КонецПроцедуры

// Возвращает описание регистра сведений или регистра накопления.
//
// Параметры:
//		ИмяРегистра - Строка, имя регистра сведений или регистра накопления, как задано в конфигураторе.
//		ИсключатьНеИспользуемые - Булево, если истина из обработки будут исключены имена измерений (реквизитов, ресурсов),
//							чьи имена начинаются со слова "Удалить".
//		
// Возвращаемое значение:
//		Структура:
//			* ИмяРегистра			- Строка.
//			* ТипРегистра			- Строка, "РегистрСведений" или "РегистрНакопления".
//			* Измерения 			- массив имен всех измерений регистра.
//			* Ресурсы 				- массив имен ресурсов, которые не имеют "пары" ...ПоОкончании, кроме ДействуетДо.
//			* Реквизиты 			- массив имен всех реквизитов.
// 			* СтандартныеРеквизиты 	- массив имен стандартных реквизитов.
//			* ИзмеренияДляПоиска	- Соответствие, содержит ключи имена измерений регистра в (верхнем регистре), значение -
//			                       Истина.
//			Для регистров сведений дополнительно содержит ключи:
//			* ВозвратныеРесурсы 	- массив имен ресурсов, которые имеют "пару" с именем ...ПоОкончании.
//			* Периодичность 		- Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений
//
Функция ОписаниеРегистра(Знач ИмяРегистра, Знач ИсключатьНеИспользуемые = Истина) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
		Если МетаданныеРегистра = Неопределено Тогда
			
			МетаданныеРегистра = Метаданные.РегистрыРасчета.Найти(ИмяРегистра);
			ТипРегистра = "РегистрРасчета";
			Если МетаданныеРегистра = Неопределено Тогда
				ВызватьИсключение НСтр("ru='Неизвестное имя регистра'") + " """ + ИмяРегистра + """";
			КонецЕсли;	
		Иначе
			ТипРегистра = "РегистрНакопления";		
		КонецЕсли;		
	Иначе
		ТипРегистра = "РегистрСведений";
	КонецЕсли;
	
	// Все измерения
	Измерения = Новый Массив;
	ИзмеренияДляПоиска = Новый Соответствие;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		Если ИсключатьНеИспользуемые И ИмяНеИспользуется(Измерение.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		Измерения.Добавить(Измерение.Имя);
		ИзмеренияДляПоиска.Вставить(ВРег(Измерение.Имя), Истина);
		
	КонецЦикла;
	
	ЕстьВозвратныеСобытия = Ложь;
	
	// Ресурсы
	Ресурсы = Новый Массив;
	ВозвратныеРесурсы = Новый Массив;
	ВозвратныеРесурсыДляПоиска = Новый Массив;
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ИсключатьНеИспользуемые И ИмяНеИспользуется(Ресурс.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Ресурс.Имя) = ВРег("ДействуетДо") Тогда
			ЕстьВозвратныеСобытия = Истина;
			Продолжить; // Не включаем ресурс ДействуетДо в список получаемых ресурсов.
		КонецЕсли;
		
		Если ВРег(Прав(Ресурс.Имя, 11)) <> ВРег("ПоОкончании") Тогда
			Ресурсы.Добавить(Ресурс.Имя);
		Иначе
			ИмяРесурса = Лев(Ресурс.Имя, СтрДлина(Ресурс.Имя) - 11);
			Если МетаданныеРегистра.Ресурсы.Найти(ИмяРесурса) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВозвратныеРесурсы.Добавить(ИмяРесурса);
			ВозвратныеРесурсыДляПоиска.Добавить(ВРег(ИмяРесурса));
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим из списка "простых" ресурсов те, которые являются "возвратными".
	Для Каждого Ресурс Из ВозвратныеРесурсы Цикл
		ИндексРесурса = Ресурсы.Найти(Ресурс);
		Если ИндексРесурса <> Неопределено Тогда
			Ресурсы.Удалить(ИндексРесурса);
		КонецЕсли;
	КонецЦикла;
	
	// Реквизиты
	Реквизиты = Новый Массив;
	РеквизитыСТипами = Новый Соответствие;
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		
		Если ИсключатьНеИспользуемые И ИмяНеИспользуется(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		Реквизиты.Добавить(Реквизит.Имя);
		РеквизитыСТипами.Вставить(Реквизит.Имя, Реквизит.Тип);
		
	КонецЦикла;
	
	// СтандартныеРеквизиты
	СтандартныеРеквизиты = Новый Массив;
	Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		
		Если СтандартныйРеквизит.Имя <> "Период" Тогда
			СтандартныеРеквизиты.Добавить(СтандартныйРеквизит.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОписанияРегистра = Новый Структура;
	СтруктураОписанияРегистра.Вставить("ИмяРегистра", ИмяРегистра);
	СтруктураОписанияРегистра.Вставить("ТипРегистра", ТипРегистра);
	СтруктураОписанияРегистра.Вставить("Измерения", Измерения);
	СтруктураОписанияРегистра.Вставить("Ресурсы", Ресурсы);
	СтруктураОписанияРегистра.Вставить("Реквизиты", Реквизиты);
	СтруктураОписанияРегистра.Вставить("РеквизитыСТипами", РеквизитыСТипами);
	СтруктураОписанияРегистра.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
	СтруктураОписанияРегистра.Вставить("ИзмеренияДляПоиска", ИзмеренияДляПоиска);
	СтруктураОписанияРегистра.Вставить("ЕстьВозвратныеСобытия", ЕстьВозвратныеСобытия);
	
	Если ТипРегистра = "РегистрСведений" Тогда
		
		СтруктураОписанияРегистра.Вставить("ВозвратныеРесурсы",	ВозвратныеРесурсы);
		СтруктураОписанияРегистра.Вставить("ВозвратныеРесурсыДляПоиска", ВозвратныеРесурсыДляПоиска);
		СтруктураОписанияРегистра.Вставить("Периодичность", МетаданныеРегистра.ПериодичностьРегистраСведений);

	КонецЕсли;
	
	Возврат СтруктураОписанияРегистра;
	
КонецФункции

// Возвращает описание регистра сведений.
//
// Параметры:
//		ИмяРегистра - Строка, имя регистра сведений, как задано в конфигураторе.
//		ИзмеренияФильтра - Строка, имена измерений, по которым строится фильтр, перечисленные через запятую.
//						 - Массив, имен измерений.
//		ИсключатьНеИспользуемые - Булево, если истина из обработки будут исключены имена измерений (реквизитов, ресурсов),
//							чьи имена начинаются со слова "Удалить".
//		
// Возвращаемое значение:
//		Структура	- Возвращаемая методом см. функцию ОписаниеРегистра, дополненная ключом:
//			* ИзмеренияФильтра 		- массив имен измерений по которым выполняется отбор.
//
Функция ОписаниеРегистраСведений(Знач ИмяРегистра, Знач ИзмеренияФильтра, Знач ИсключатьНеИспользуемые = Истина) Экспорт
	
	Если ТипЗнч(ИзмеренияФильтра) = Тип("Строка") Тогда
		МассивИзмеренийФильтра = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияФильтра, , , Истина);
	Иначе
		МассивИзмеренийФильтра = ИзмеренияФильтра;
	КонецЕсли;
	
	// Измерения для отбора
	ИзмеренияФильтра = Новый Массив;
	Для Каждого Измерение Из МассивИзмеренийФильтра Цикл
		
		Если ВРег(Измерение) = ВРег("Период")
			Или	ВРег(Измерение) = ВРег("ДатаНачала")
			Или ВРег(Измерение) = ВРег("ДатаОкончания") Тогда
			
			Продолжить;
			
		КонецЕсли;
		ИзмеренияФильтра.Добавить(Измерение);
		
	КонецЦикла;
	
	СтруктураОписанияРегистра = ОписаниеРегистра(ИмяРегистра, ИсключатьНеИспользуемые);
	СтруктураОписанияРегистра.Вставить("ИзмеренияФильтра", ИзмеренияФильтра);
	
	ПриПолученииСвойствРегистра(ИмяРегистра, СтруктураОписанияРегистра);
	
	Возврат СтруктураОписанияРегистра;
	
КонецФункции

// Возвращает описание источника данных - временная таблица.
//
// Параметры:
//		ТаблицаФильтра 		- Строка, имя временной таблицы
//					   		- ТаблицаЗначений
//								содержат обязательные колонки:
//									"Период" (для получения представлений среза первых или
//										среза последних)
//									"ДатаНачала" и "ДатаОкончания" (для получения таблицы регистра).
//		ИзмеренияФильтра 	- Строка, имена колонок таблицы равные именам измерений регистра,
//								по которым устанавливается фильтр, для колонок с именами отличающимися
//								от имен измерений, в значениях ключа "СоответствиеИзмеренийРегистраИзмерениямФильтра",
//								указывается соответствие имени измерения регистра имени колонки таблицы фильтра.
//								Допускается не указывать, когда ТаблицаФильтра имеет тип ТаблицаЗначений.
//
// Возвращаемое значение;
//		Структура
//			* ВременнаяТаблица 	- Булево, Истина для источника данных временная таблица, Ложь
//									для источника данных таблица значений.
//			* ТаблицаФильтра 	- Строка
//							 	- ТаблицаЗначений
//			* ИзмеренияФильтра 	- Строка.
//			* СоответствиеИзмеренийРегистраИзмерениямФильтра - Соответствие.
//
Функция ОписаниеФильтраДляСоздатьВТИмяРегистра(Знач ТаблицаФильтра, Знач ИзмеренияФильтра = "") Экспорт
	
	Возврат ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтра, ИзмеренияФильтра);
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистра.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 							- Неопределено - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 									- Массив - см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВключатьЗаписиНаНачалоПериода 			- Булево, если истина в результирующую таблицу будут
//															включены значения по измерениям фильтра на начало периода
//															(применимо при построении запросов к регистрам с периодичностью.
//															Секунда, День, Месяц, Квартал или Год).
//			* ИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка, задает имя временной таблицы записей на начало периода.
//			* ИспользуемоеИмяВременнойТаблицыЗаписейНаНачалоПериода - Строка, по окончании работы метода ЗапросВТИмяРегистра
//			                                                          будет сохранено имя временной таблицы, содержащей записи
//			                                                          на начало периода, если задано значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода, то будет
//			                                                          содержать значение
//			                                                          ИмяВременнойТаблицыЗаписейНаНачалоПериода.
//			* ОтборыЗаписейНаНачалоПериода 				- Массив, описаний отбора (см.ДобавитьВКоллекциюОтбор), применяется к таблице
//															формирующий записи на начало периода, при формировании результирующей таблицы.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистра() Экспорт
	
	Возврат ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	
КонецФункции

// Возвращает параметры построения для СоздатьВТИмяРегистраСрезПервых.
//
// Возвращаемое значение;
//		Структура:
//			* ИндексироватьПо 			- Неопределено 	- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* Отборы 					- Массив 		- см. функцию ПараметрыПостроенияВТИмяРегистра.
//			* ВсеЗаписи 				- Булево, если Истина в результирующую таблицу будут включены
//											записи таблицы фильтра, для которых нет записей в регистре.
//			* ВключаяГраницу 			- Булево, если Ложь из результирующей таблицы будут исключены
//											записи с периодами равными ограничивающим.
//			* ОтборыПрименяемыеКСрезу - Массив, коллекций, аналогичных коллекции ключа Отборы, но применяемый
//											к полученному срезу.
//
Функция ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез() Экспорт
	
	Возврат ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
КонецФункции

// Создает временную таблицу записей регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка, имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистра.
//		ИмяРезультирующейТаблицы 	- Строка, имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистра(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистра(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
	
КонецПроцедуры

// Создает временную таблицу среза первых регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка, имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка, имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистраСрезПервых(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПервых(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
	
КонецПроцедуры

// Создает временную таблицу среза последних регистра в менеджере временных таблиц, переданном в качестве параметра.
//
// Параметры:
//		ИмяРегистра 				- Строка, имя периодического регистра сведений, как  оно
//										задано в конфигураторе.
//		МенеджерВременныхТаблиц 	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 			- Булево
//		ОписаниеФильтра 			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
//		ПараметрыПостроения 		- Структура - см. функцию ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез.
//		ИмяРезультирующейТаблицы 	- Строка, имя создаваемой временной таблицы, если не задано, то
//										имя результирующей таблицы будет сформировано каК ВТ<ИмяРегистра>.
//					
Процедура СоздатьВТИмяРегистраСрезПоследних(Знач ИмяРегистра, МенеджерВременныхТаблиц, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяРезультирующейТаблицы = Неопределено) Экспорт
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПоследних(ИмяРегистра, МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяРезультирующейТаблицы);
	
КонецПроцедуры

// Возвращает запрос представления ВТИмяРегистра.
//
// Параметры:
//		ТолькоРазрешенные - Булево
//		ИмяРегистра - Строка, Имя регистра как задано в конфигураторе.
//		ПараметрыПостроения - Структура, см.ПараметрыПостроенияПредставленияВТТаблицаРегистра.
//		ИмяСоздаваемойТаблицы - Строка, если не указано, запрос будет создавать временную
//					таблицу ВТ<ИмяРегистра>
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистра(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	
	Возврат ЗарплатаКадрыПериодическиеРегистры.ЗапросВТИмяРегистра(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	
КонецФункции

// Возвращает запрос представления ВТИмяРегистраСрез.
//
// Параметры:
//		ТолькоРазрешенные 		- Булево
//		ИмяРегистра 			- Строка, Имя регистра как задано в конфигураторе.
//		ПараметрыПостроения 	- Структура, см.ПараметрыПостроенияПредставленияВТИмяРегистраСрез.
//		СрезПоследних			- Булево, если Истина - срез последних, если Ложь - Срез первых.
//		ИмяСоздаваемойТаблицы 	- Строка, если не указано, запрос будет создавать временную таблицу.
//									ВТ<ИмяРегистра>СрезПоследних или ВТ<ИмяРегистра>СрезПервых
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТИмяРегистраСрез(Знач ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач СрезПоследних = Истина, Знач ИмяСоздаваемойТаблицы = Неопределено) Экспорт
	
	Возврат ЗарплатаКадрыПериодическиеРегистры.ЗапросВТИмяРегистраСрез(ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы);
	
КонецФункции

#КонецОбласти

#Область ВыводВЗапросыСКДДополнительныхПолейЗапросовПредставлений

// Возвращает описание соединения для строки таблицы дополнительных полей
// см. ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений
// Используется, если данные расположены не во временной таблице запроса-представления,
// а в таблице базы данных.
//
// Возвращаемое значение:
//		Структура - с ключами:
//		* Источник					- Строка, ИмяИсточникаДанных (РегистрСведений.КадроваяИсторияСотрудников)
//		* Псевдоним					- Строка, псевдоним источника в запросе
//		* ТипСоединения				- ТипСоединенияСхемыЗапроса
//		* Условие					- Строка, строка условий соединения источника с таблицей запроса
//		* ПсевдонимИсточникаСвязи	- Строка, псевдоним источника связи, который используется в условии,
//										при установке условия этот псевдоним будет заменен на псевдоним
//										таблицы в схеме запроса, являющейся источником связи
//		* Соединения				- Массив, соединения с таблицами, для которых Источник, является Источником связи.
//
Функция ПустоеОписаниеСоединения() Экспорт
	
	Соединение = Новый Структура;
	Соединение.Вставить("Источник");
	Соединение.Вставить("Псевдоним");
	
	Соединение.Вставить("ТипСоединения", ТипСоединенияСхемыЗапроса.ЛевоеВнешнее);
	
	Соединение.Вставить("Условие");
	
	Соединение.Вставить("ПсевдонимИсточникаСвязи");
	Соединение.Вставить("Соединения", Новый Массив);
	
	Возврат Соединение;
	
КонецФункции

// Добавляет дополнительный псевдоним поля в строку таблицы дополнительных полей
// см. ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений
// Позволяет выводить в наборы данных, одни и те же поля под разными псевдонимами.
//
// Параметры:
//	СтрокаТаблицыДополнительныхПолейПредставлений	- СтрокаТаблицыЗначений, см. ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений
//	ПсевдонимВременнойТаблицы						- Строка, псевдоним временной таблицы (запроса представления) в которой
//														организовано получение данных
//	ПсевдонимПоля									- Строка
//	ПутьПоляСКД										- Строка
//	ЗаголовокПоляСКД								- Строка
//
Процедура ДобавитьПсевдонимПоля(СтрокаТаблицыДополнительныхПолейПредставлений, ПсевдонимВременнойТаблицы, ПсевдонимПоля, ПутьПоляСКД = "", ЗаголовокПоляСКД = "") Экспорт
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("ПсевдонимПоля", ПсевдонимПоля);
	ОписаниеПоля.Вставить("ЗаголовокПоляСКД", ЗаголовокПоляСКД);
	ОписаниеПоля.Вставить("ПутьПоляСКД", ПутьПоляСКД);
	
	СтрокаТаблицыДополнительныхПолейПредставлений.ПсевдонимыПолей.Вставить(ПсевдонимВременнойТаблицы, ОписаниеПоля);
	
КонецПроцедуры

// Возвращает таблицу значений, для формирования описаний полей выводимых в наборы
// данных СКД отчетов.
//
// Возвращаемое значение:
//		ТаблицаЗначений	- с колонками
//			* ИмяПоля						- Строка, например - "Должность"
//			* ПустоеЗначениеНаЯзыкеЗапросов	- Строка, например - "ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)"
//			* ЗаголовокПоляСКД				- Строка, например - НСтр("ru = 'Должность, занимаемая сотрудником'")
//			* ПутьПоляСКД					- Строка, например - "Работа,Должность"
//			* ПсевдонимыПолей				- Структура, заполняется с помощью ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля
//			* Соединения					- Массив
//
Функция ПустаяТаблицаДополнительныхПолейПредставлений() Экспорт
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	
	ПустаяТаблица.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	ПустаяТаблица.Колонки.Добавить("ПустоеЗначениеНаЯзыкеЗапросов", Новый ОписаниеТипов("Строка"));
	ПустаяТаблица.Колонки.Добавить("ЗаголовокПоляСКД", Новый ОписаниеТипов("Строка"));
	ПустаяТаблица.Колонки.Добавить("ПутьПоляСКД", Новый ОписаниеТипов("Строка"));
	ПустаяТаблица.Колонки.Добавить("ПсевдонимыПолей", Новый ОписаниеТипов("Структура"));
	ПустаяТаблица.Колонки.Добавить("Соединения", Новый ОписаниеТипов("Массив"));
	
	Возврат ПустаяТаблица;
	
КонецФункции

// Выводит в наборы данных - запросы СКД отчетов дополнительные поля данных.
//
// Параметры:	Отчет					        - ОтчетОбъект
//				ДополнительныеПоляПредставлений	- Структура, ключи имена временных таблиц в
//					которые выводятся поля, ключ ТаблицаЗначений
//					см. ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений
//					Ключ "-" соответствует результирующему запросу набора данных.
//
Процедура ВывестиВОтчетДополнительныеПоляПредставлений(Отчет, ДополнительныеПоляПредставлений) Экспорт
	
	ВывестиВНаборыДанныхДополнительныеПоляПредставлений(Отчет.СхемаКомпоновкиДанных.НаборыДанных, ДополнительныеПоляПредставлений);
	
КонецПроцедуры

// Выводит в наборы данных - запросы СКД отчетов дополнительные поля данных.
//
// Параметры:	Отчет					        - ОтчетОбъект
//				ДополнительныеПоляПредставлений	- Структура:
//					* Ключ     - имя временной таблицы, в которую выводятся поля, 
//					* Значение - ТаблицаЗначений - см. ПустаяТаблицаДополнительныхПолейПредставлений()
//
Процедура ВывестиДополнительныеПоляПредставленийВОтчет(Отчет, ДополнительныеПоляПредставлений) Экспорт
	
	Если ДополнительныеПоляПредставлений <> Неопределено
		И ДополнительныеПоляПредставлений.Количество() > 0 Тогда
		
		СообщатьОРасхожденияхВПутяхКДанным = Неопределено;
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("СообщатьОРасхожденияхВПутяхКДанным", СообщатьОРасхожденияхВПутяхКДанным);
		
		ВывестиДополнительныеПоляПредставленийВСКД(Отчет.СхемаКомпоновкиДанных, ДополнительныеПоляПредставлений, СообщатьОРасхожденияхВПутяхКДанным);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция возвращает запрос, формирующий временную таблицу периодов с заданной периодичностью.
//
// Параметры:
//	ОписаниеНачалаИнтервала - Строка, имя параметра в тексте запроса ("&НачалоПериода", "ДАТАВРЕМЯ(2013, 1, 1)").
//							- Дата, начальная дата интервала, за который формируются периоды.
//	ОписаниеОкончанияИнтервала -  Строка, имя параметра в тексте запроса,
//							- Дата, конечная дата интервала, за который формируются периоды.
//	Периодичность - периодичность, на которую будет разбиваться интервал.
//		По умолчанию <МЕСЯЦ>. Может принимать значения:	ГОД, КВАРТАЛ, МЕСЯЦ, ДЕНЬ.
//	ИмяПоляПериод - наименование колонки во временной таблице периодов. 
//		По умолчанию <Период>.
//	ИмяВТ - наименование временной таблицы периодов, по умолчанию <ВТПериоды>.
//	ИспользоватьКонецПериода - булево, необязательный, по умолчанию - Ложь. 
//		Определяет необходимость использовать в качестве значения последнюю секунду периода. 
//		То есть если Истина, то для периодичности месяц, 
//		временная таблица будет заполнена датами конца каждого месяца, 
//		и если ложь, то - датами начала.
//
Функция ЗапросВТПериоды(Знач ОписаниеНачалаИнтервала, Знач ОписаниеОкончанияИнтервала, Периодичность = "МЕСЯЦ", ИмяПоляПериод = "Период", ИмяВТ = "ВТПериоды", ИспользоватьКонецПериода = Ложь) Экспорт
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Дата")
		И ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Дата") Тогда
		
		Если ОписаниеОкончанияИнтервала < ОписаниеНачалаИнтервала Тогда
			
			ТекстИсключения = НСтр("ru='Дата окончания периода не может быть меньше даты начала'");
			ВызватьИсключение ТекстИсключения;
			
		Иначе
			
			ЛетВИнтервале = Год(ОписаниеОкончанияИнтервала) - Год(ОписаниеНачалаИнтервала);
			Если ЛетВИнтервале > 100 Тогда
				
				ТекстИсключения = НСтр("ru='Попытка получить данные за слишком большой интервал времени'")
					+ " (%1 " + НСтр("ru='лет'") + ": " + НСтр("ru='с'")+ " %2 " + НСтр("ru='по'") + " %3)";
				
				ТекстИсключения = СтрШаблон(ТекстИсключения, Формат(ЛетВИнтервале, "ЧГ="), Формат(ОписаниеНачалаИнтервала, "ДЛФ=D"), Формат(ОписаниеОкончанияИнтервала, "ДЛФ=D"));
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) КАК ИмяПоляПериод
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	ВТЦифры КАК Цифры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры1000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры10000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 9999)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Цифры100000
		|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ЧАС) > 99999)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ЧАС, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ЧАС) МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала";
	
	Если ВРег(Периодичность) <> "ГОД"
		И ВРег(Периодичность) <> "КВАРТАЛ"
		И ВРег(Периодичность) <> "МЕСЯЦ"
		И ВРег(Периодичность) <> "ДЕНЬ" Тогда
		
		ВызватьИсключение НСтр("ru='Невозможно сформировать запрос с переданными параметрами.'");
		
	КонецЕсли;
	
	Если ИспользоватьКонецПериода Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА", "КОНЕЦПЕРИОДА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЧАС", Периодичность);
	ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ИмяПоляПериод", "КАК " + ИмяПоляПериод);
	
	Если ИспользоватьКонецПериода Тогда
		НачалоПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "КОНЕЦПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	Иначе
		НачалоПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&НачалоИнтервала, " + ВРег(Периодичность) + ")";
		ОкончаниеПериодаИнтервалаПредставление = "НАЧАЛОПЕРИОДА(&ОкончаниеИнтервала, " + ВРег(Периодичность) + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериодаИнтервала", НачалоПериодаИнтервалаПредставление);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеПериодаИнтервала", ОкончаниеПериодаИнтервалаПредставление);
	
	Если ТипЗнч(ОписаниеНачалаИнтервала) = Тип("Строка") Тогда
		НачалоИнтервалаПредставление = ОписаниеНачалаИнтервала;
	Иначе
		НачалоИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеНачалаИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОкончанияИнтервала) = Тип("Строка") Тогда
		ОкончаниеИнтервалаПредставление = ОписаниеОкончанияИнтервала;
	Иначе
		ОкончаниеИнтервалаПредставление = "ДАТАВРЕМЯ(" + Формат(ОписаниеОкончанияИнтервала, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоИнтервала",
		"ВЫБОР КОГДА " + НачалоИнтервалаПредставление + " = ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДАТАВРЕМЯ(1980, 1, 1) ИНАЧЕ " + НачалоИнтервалаПредставление + " КОНЕЦ");
	
	ИмяОкончаниеИнтервала = "ОкончаниеИнтервала" + СтрЗаменить(ИмяВТ, "_", "");
	Запрос.УстановитьПараметр(ИмяОкончаниеИнтервала, ДобавитьМесяц(ТекущаяДатаСеанса(), 60));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОкончаниеИнтервала",
		"ВЫБОР КОГДА " + ОкончаниеИнтервалаПредставление+ " = КОНЕЦПЕРИОДА(ДАТАВРЕМЯ(1, 1, 1), " + ВРег(Периодичность) + ") ТОГДА &" + ИмяОкончаниеИнтервала + " ИНАЧЕ " + ОкончаниеИнтервалаПредставление+ " КОНЕЦ");
	
	ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТЦифры");
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Процедура ЗаполнитьОбщиеЗапросы(НаборыДанных, ТолькоРазрешенные = Истина) Экспорт
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") И СтрНайти(НаборДанных.Запрос, "ОбщиеЗапросы_") > 0 Тогда
			ТекстЗапроса = НаборДанных.Запрос;
			ЗаменитьОбщийТекстЗапросаОбщиеЗапросы(ТекстЗапроса, ТолькоРазрешенные);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбщиеЗапросы_", "ОбщиеЗапросы");
			НаборДанных.Запрос = ТекстЗапроса;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ЗаполнитьОбщиеЗапросы(НаборДанных.Элементы, ТолькоРазрешенные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьОбщийТекстЗапросаОбщиеЗапросы(ТекстЗапросаПриемник, ТолькоРазрешенные)
	МассивЗапросов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаПриемник, ";");
	СтрокаПОМЕСТИТЬ = "ПОМЕСТИТЬ ОБЩИЕЗАПРОСЫ_";
	РазделителиСлов = РазделителиСловТекстаЗапроса();
	
	Для Каждого ТекстЗапроса Из МассивЗапросов Цикл
		ПозицияСлова = СтрНайти(ВРег(ТекстЗапроса), СтрокаПОМЕСТИТЬ);
		Если ПозицияСлова > 0 Тогда
			ИмяИсточникаДанных = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПозицияСлова - СтрДлина(СтрокаПОМЕСТИТЬ) + 1);
			Для НомерСимвола = 1 По СтрДлина(ИмяИсточникаДанных) Цикл
				КодСимвола = КодСимвола(ИмяИсточникаДанных, НомерСимвола);
				Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
					ИмяИсточникаДанных = Лев(ИмяИсточникаДанных, НомерСимвола - 1);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ТекстЗапросаИсточник = ПолучитьТекстОбщегоЗапроса(ИмяИсточникаДанных, ТолькоРазрешенные);
			ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, ТекстЗапроса, ТекстЗапросаИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Функция ЗапросВТПредставленияОтработанноеВремя(ИмяВТНачисленияИУдержания, НачалоПериода, ОкончаниеПериода, ИмяВТОтработанноеВремя = "ВТОтработанноеВремя") Экспорт
	
	Возврат ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ЗапросВТПредставленияОтработанноеВремя(ИмяВТНачисленияИУдержания, НачалоПериода, ОкончаниеПериода, ИмяВТОтработанноеВремя);
	
КонецФункции

#Область ПроцедурыИФункцииВстраиванияЗапросов

Процедура ЗаменитьПредставленияЗапросов(НаборыДанных, Объект) Экспорт
	
	Для каждого НаборДанных Из НаборыДанных Цикл
	
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") И СтрНайти(НаборДанных.Запрос, "Представления_") > 0 Тогда
			ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(НаборДанных.Запрос, Объект.СхемаКомпоновкиДанных);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ЗаменитьПредставленияЗапросов(НаборДанных.Элементы, Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(ТекстЗапросаПриемник, СхемаКомпоновкиДанных = Неопределено) Экспорт
	
	ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, Символы.ВК + Символы.ПС, Символы.ПС);
	
	СоответствиеПараметров = Новый Структура;
	
	МассивЗапросов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаПриемник, ";");
	
	Для Каждого ТекстЗапроса Из МассивЗапросов Цикл
		
		ТекстЗапросаВРег = ВРег(ТекстЗапроса);
		
		ПозицияСловаПоместить = СтрНайти(ТекстЗапросаВРег, "ПОМЕСТИТЬ ");
		
		Если ПозицияСловаПоместить > 0 Тогда
			
			ПозицияСловаПредставления = СтрНайти(ТекстЗапросаВРег, "ПРЕДСТАВЛЕНИЯ_");
			
			ЭтоОписаниеПредставления = Ложь;
			
			Если ПозицияСловаПредставления > 0 
				И ПозицияСловаПредставления > ПозицияСловаПоместить Тогда
				
				ЭтоОписаниеПредставления = ПустаяСтрока(Сред(ТекстЗапросаВРег, ПозицияСловаПоместить + СтрДлина("ПОМЕСТИТЬ"), ПозицияСловаПредставления - ПозицияСловаПоместить - СтрДлина("ПОМЕСТИТЬ")));
				
			КонецЕсли;
			
			Если ЭтоОписаниеПредставления Тогда
				
				Запрос = ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров);
				
				Если Запрос <> Неопределено Тогда
					
					ТекстЗапросаИсточник = Запрос.Текст;
					
					ИмяИсточникаДанных = ПервоеСловоНачинаяСПозицииВТексте(ТекстЗапроса, ПозицияСловаПоместить + СтрДлина("ПОМЕСТИТЬ "));
					ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаИсточник, ИмяИсточникаДанных, СтрЗаменить(ИмяИсточникаДанных, "Представления_", "Представления"));
					
					ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(ТекстЗапросаИсточник, СхемаКомпоновкиДанных);
					
					ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, ТекстЗапроса, ТекстЗапросаИсточник);
					
					Если СхемаКомпоновкиДанных <> Неопределено И Запрос.Параметры.Количество() > 0 Тогда
						
						УдаляемыеПараметры = Новый Массив;
						Для Каждого КлючИЗначение Из Запрос.Параметры Цикл
							ИмяПараметра = КлючИЗначение.Ключ;
							Если СтрНайти(ИмяПараметра, "Представления_") = 0 Тогда
								Продолжить;
							КонецЕсли;
							НовоеИмяПараметра = СтрЗаменить(ИмяПараметра, "Представления_", "Представления");
							Запрос.Параметры.Вставить(НовоеИмяПараметра, КлючИЗначение.Значение);
							УдаляемыеПараметры.Добавить(ИмяПараметра);
						КонецЦикла;
						
						Для Каждого УдаляемыйПараметр Из УдаляемыеПараметры Цикл
							Запрос.Параметры.Удалить(УдаляемыйПараметр);	
						КонецЦикла;
						
						Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("Запрос") Тогда
							СкопироватьПараметрыЗапроса(СхемаКомпоновкиДанных, Запрос);
						ИначеЕсли ТипЗнч(СхемаКомпоновкиДанных) = Тип("ДинамическийСписок") Тогда
							СкопироватьПараметрыЗапросаВДинамическийСписок(СхемаКомпоновкиДанных, Запрос);
						Иначе
							СкопироватьПараметрыЗапросаВСКД(СхемаКомпоновкиДанных, Запрос);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ИмяИсточникаДанных = ПервоеСловоНачинаяСПозицииВТексте(ТекстЗапроса, ПозицияСловаПоместить + СтрДлина("ПОМЕСТИТЬ "));
				СоответствиеПараметров.Вставить(ИмяИсточникаДанных, Лев(ТекстЗапроса, ПозицияСловаПоместить - 1));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, "Представления_", "Представления");
	
КонецПроцедуры

Функция ПервоеСловоНачинаяСПозицииВТексте(Текст, Позиция) Экспорт
	
	ПервоеСлово = Прав(Текст, СтрДлина(Текст) - Позиция + 1);
	РазделителиСлов = РазделителиСловТекстаЗапроса();
	
	Для НомерСимвола = 1 По СтрДлина(ПервоеСлово) Цикл
		
		КодСимвола = КодСимвола(ПервоеСлово, НомерСимвола);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			ПервоеСлово = Лев(ПервоеСлово, НомерСимвола - 1);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПервоеСлово;
	
КонецФункции

Функция ПоляЗапроса(ТекстПолейЗапроса) Экспорт
	
	ПоляЗапроса = Новый Структура;
	СловоКАК = " КАК ";
	РазделителиСлов = РазделителиСловТекстаЗапроса();
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстПолейЗапроса) Цикл
		
		СтрокаТекста = СтрПолучитьСтроку(ТекстПолейЗапроса, НомерСтроки);
		ИмяИзмерения = СтрокаТекста;
		
		Если ПустаяСтрока(ИмяИзмерения) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяИзмеренияВРег = ВРег(ИмяИзмерения);
		ПоследнееВхождениеСловаКАК = СтрЧислоВхождений(ИмяИзмеренияВРег, СловоКАК);
		Если ПоследнееВхождениеСловаКАК = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияСловаКАК = СтрНайти(ИмяИзмеренияВРег, СловоКАК, , , ПоследнееВхождениеСловаКАК);
		Если ПозицияСловаКАК = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияСлова = ПозицияСловаКАК;
		Пока ПозицияСлова > 0 Цикл
			ИмяИзмерения = Сред(ИмяИзмерения, ПозицияСловаКАК + СтрДлина(СловоКАК));
			ПозицияСлова = СтрНайти(ВРег(ИмяИзмерения), СловоКАК);
		КонецЦикла;
		
		Для НомерСимвола = 1 По СтрДлина(ИмяИзмерения) Цикл
			КодСимвола = КодСимвола(ИмяИзмерения, НомерСимвола);
			Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
				ИмяИзмерения = Лев(ИмяИзмерения, НомерСимвола - 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Выражение = СокрЛП(Лев(СтрокаТекста, ПозицияСловаКАК));
		
		ПоляЗапроса.Вставить(ИмяИзмерения, Выражение);
		
	КонецЦикла;
	
	Возврат ПоляЗапроса;
	
КонецФункции

Функция МассивПолейЗапроса(ТекстПолейЗапроса) Экспорт
	
	ПоляТекстаЗапроса = ПоляЗапроса(ТекстПолейЗапроса);
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(ПоляТекстаЗапроса, "Ключ");
	
КонецФункции

Функция МассивИменВТИсточниковПараметров(ТекстЗапроса, ИмяИсточникаДанных) Экспорт
	
	МассивИменВТИсточниковПараметров = Новый Массив;
	
	ТекстСИЗ = СокрЛП(Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, ИмяИсточникаДанных)));
	ПозицияСловаИЗ = СтрНайти(ТекстСИЗ, "ИЗ" + Символы.ПС);
	Если ПозицияСловаИЗ > 0 Тогда
		ПозицияСловаГДЕ = СтрНайти(ТекстСИЗ, "ГДЕ" + Символы.ПС);
		ИменаИсточниковПараметров = СокрЛП(Сред(ТекстСИЗ, ПозицияСловаИЗ + 2, ?(ПозицияСловаГДЕ = 0, СтрДлина(ТекстСИЗ), ПозицияСловаГДЕ - ПозицияСловаИЗ - 2)));
		
		МассивИменВТИсточниковПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаИсточниковПараметров, , , Истина);
		
		Для ИндексЭлемента = 0 По МассивИменВТИсточниковПараметров.Количество() - 1 Цикл
			ИмяВТИсточникДанных = МассивИменВТИсточниковПараметров[ИндексЭлемента];
			ПозицияСловаКАК = СтрНайти(ВРег(ИмяВТИсточникДанных), " КАК ");
			Если ПозицияСловаКАК > 0 Тогда
				ИмяВТИсточникДанных = Лев(ИмяВТИсточникДанных, ПозицияСловаКАК - 1);
			КонецЕсли; 
			МассивИменВТИсточниковПараметров[ИндексЭлемента] = СокрЛП(ИмяВТИсточникДанных);
		КонецЦикла;
	КонецЕсли; 
	
	Возврат МассивИменВТИсточниковПараметров;
	
КонецФункции

Функция ПараметрыЗапроса(ТекстЗапроса, ИмяИсточникаДанных) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	
	ТекстСГДЕ = СокрЛП(Сред(ТекстЗапроса, СтрНайти(ТекстЗапроса, ИмяИсточникаДанных)));
	ПозицияСловаГДЕ = СтрНайти(ТекстСГДЕ, "ГДЕ" + Символы.ПС);
	
	Если ПозицияСловаГДЕ > 0 Тогда
		
		СтрокаПараметров = СокрЛП(Сред(ТекстСГДЕ, ПозицияСловаГДЕ + 3));
		
		ПозицияИндексировать = СтрНайти(СтрокаПараметров, "ИНДЕКСИРОВАТЬ ПО");
		Если ПозицияИндексировать > 0 Тогда
			СтрокаПараметров = СокрЛП(Лев(СтрокаПараметров, ПозицияИндексировать - 1));
		КонецЕсли;
		
		МассивСтрокПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, "И ");
		
		Для ИндексЭлемента = 0 По МассивСтрокПараметров.Количество() - 1 Цикл
			
			ПараметрСтрокой = МассивСтрокПараметров[ИндексЭлемента];
			
			Если СтрЧислоСтрок(ПараметрСтрокой) > 1 Тогда
				
				ПозицияОбъединить = СтрНайти(ПараметрСтрокой, ВРег("ОБЪЕДИНИТЬ"));
				Если ПозицияОбъединить > 0 Тогда
					ПараметрСтрокой = СокрЛП(Лев(ПараметрСтрокой, ПозицияОбъединить - 1));
				КонецЕсли; 
				
			КонецЕсли; 
			
			ПозицияРавно = СтрНайти(ПараметрСтрокой, "=");
			ИмяПараметра = СокрЛП(СтрЗаменить(Лев(ПараметрСтрокой, ПозицияРавно - 1), """", ""));
			ЗначениеПараметра = СокрЛП(СтрЗаменить(Сред(ПараметрСтрокой, ПозицияРавно + 1), """", ""));
			ПараметрыЗапроса.Вставить(ИмяПараметра, ЗначениеПараметра);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция КоллекцияОтборПоПараметрам(ПараметрыЗапроса) Экспорт
	
	Отбор = Новый Массив;
	
	ЛевоеЗначениеСтрока = "";
	ВидСравненияСтрока = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		
		Если СтрНайти(ВРег(Параметр.Ключ), "ЛЕВОЕЗНАЧЕНИЕ") = 1 Тогда
			ЛевоеЗначениеСтрока = Параметр.Значение;
		ИначеЕсли СтрНайти(ВРег(Параметр.Ключ), "ВИДСРАВНЕНИЯ") = 1 Тогда
			ВидСравненияСтрока =  Параметр.Значение;
		ИначеЕсли СтрНайти(ВРег(Параметр.Ключ), "ПРАВОЕЗНАЧЕНИЕ") = 1 Тогда
			
			ПравоеЗначениеСтрока =  Параметр.Значение;
			
			Если СтрНайти(ВРег(ПравоеЗначениеСтрока), "ВЫЧИСЛИТЬ(") Тогда
				Попытка
					ПравоеЗначениеУстанавливаемое = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПравоеЗначениеСтрока);
				Исключение
					ПравоеЗначениеУстанавливаемое = ПравоеЗначениеСтрока;
				КонецПопытки;
			Иначе
				ПравоеЗначениеУстанавливаемое = ПравоеЗначениеСтрока;
			КонецЕсли;
			
			ДобавитьВКоллекциюОтбор(Отбор, ЛевоеЗначениеСтрока, ВидСравненияСтрока, ПравоеЗначениеУстанавливаемое, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отбор;
	КонецЕсли;
	
КонецФункции

// Возвращает представление параметра текста запроса по имени.
//
// Параметры:
//		ИмяПараметра - Строка
//		ПараметрыЗапроса - Структура, см.ПараметрыЗапроса.
//		УдалитьИзКоллекции - Булево, если истина, после определения значения
//					параметр будет удален из коллекции параметров.
//
// Возвращаемое значение:
//		Строка - представление параметра в тексте запроса
//		Неопределено - если параметра с таким именем не было найдено.
//
Функция ПараметрЗапроса(ИмяПараметра, ПараметрыЗапроса, УдалитьИзКоллекции = Истина) Экспорт
	
	ПредставлениеЗначенияПараметра = Неопределено;
	Если ПараметрыЗапроса.Свойство(ИмяПараметра) Тогда
		
		ПредставлениеЗначенияПараметра = ПараметрыЗапроса[ИмяПараметра];
		Если УдалитьИзКоллекции Тогда
			ПараметрыЗапроса.Удалить(ИмяПараметра);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ПредставлениеЗначенияПараметра;
	
КонецФункции

#КонецОбласти

#Область ПостроениеПредставленийВТИмяРегистра

// Проверят на то, что имя поля начинается со слова "Удалить".
//
// Параметры:
//		ИмяПоля - Строка
//
// Возвращаемое значение:
//		Булево
//
Функция ИмяНеИспользуется(Знач ИмяПоля) Экспорт
	
	Возврат СтрНайти(ВРег(ИмяПоля), ВРег("Удалить")) = 1;
	
КонецФункции

Функция РазделителиСловТекстаЗапроса()
	
	Возврат Символы.ВК + Символы.ПС + " .,;	()/+";
	
КонецФункции

#КонецОбласти


#Область РаботаСоСхемойЗапроса

Функция ПсевдонимыИсточниковСхемыЗапроса(Схема, ИмяВТ) Экспорт
	
	Псевдонимы = Новый Структура;
	ЗапросПакета = ЗапросСхемыФормирующийВТ(Схема, ИмяВТ);
	Если ЗапросПакета <> Неопределено Тогда
		
		Для Каждого Оператор Из ЗапросПакета.Операторы Цикл
			ДобавитьПредставленияИсточникаОператораЗапроса(Псевдонимы, Оператор.Источники);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Псевдонимы;
	
КонецФункции

Функция ЗапросСхемыФормирующийВТ(Схема, ИмяВТ) Экспорт
	
	ПоследнийЗапрос = Неопределено;
	
	Для НомерЗапроса = 1 По Схема.ПакетЗапросов.Количество() Цикл
		
		ЗапросПакета = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество() - НомерЗапроса];
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			
			Если ЗапросПакета.ТаблицаДляПомещения = ИмяВТ Тогда
				ПоследнийЗапрос = ЗапросПакета;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоследнийЗапрос;
	
КонецФункции

Процедура ДобавитьСоединенияСТаблицейИсточников(Оператор, ИмяТаблицы, Соединения, ЛевыеСоединенияЗапроса = Неопределено) Экспорт
	
	Если Соединения.Количество() > 0 Тогда
		
		Источники = Оператор.Источники;
		ИсточникСвязи = Источники.НайтиПоИмени(ИмяТаблицы);
		
		ДобавитьСоединенияИсточнику(ИсточникСвязи, Соединения, Оператор, ЛевыеСоединенияЗапроса)
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСхемуЗапросыУничтоженияВременныхТаблиц(Схема, ИменаВТКУничтожению) Экспорт
	
	Для Каждого ИмяУничтожаемойТаблицы Из ИменаВТКУничтожению Цикл
		ДобавитьВСхемуЗапросУничтоженияВременнойТаблицы(Схема, ИмяУничтожаемойТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСхемуЗапросУничтоженияВременнойТаблицы(Схема, ИмяУничтожаемойТаблицы) Экспорт
	
	ЗапросПакета = Схема.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросПакета.ИмяТаблицы = ИмяУничтожаемойТаблицы;
	
КонецПроцедуры

Процедура ДобавитьСоединенияИсточнику(ИсточникСвязи, Соединения, Оператор, ЛевыеСоединенияЗапроса = Неопределено)
	
	Источники = Оператор.Источники;
	Для Каждого ОписаниеСоединения Из Соединения Цикл
		
		Если Не ПустаяСтрока(ОписаниеСоединения.ПсевдонимИсточникаСвязи) Тогда
			Условие = СтрЗаменить(ОписаниеСоединения.Условие, ОписаниеСоединения.ПсевдонимИсточникаСвязи + ".", ИсточникСвязи.Источник.Псевдоним + ".");
		Иначе
			Условие = ОписаниеСоединения.Условие;
		КонецЕсли;
		
		Источник = Источники.НайтиПоПсевдониму(ОписаниеСоединения.Псевдоним);
		Если Источник = Неопределено Тогда
			
			Источник = Источники.Добавить(ОписаниеСоединения.Источник, ОписаниеСоединения.Псевдоним);
			Если Источник.Соединения.Количество() > 0 Тогда
				Источник.Соединения.Очистить();
			КонецЕсли;
			
		Иначе
			
			СоединениеСИсточником = ИсточникСвязи.Соединения.НайтиПоПсевдониму(ОписаниеСоединения.Псевдоним);
			Если СоединениеСИсточником <> Неопределено
				И СтрНайти(СоединениеСИсточником.Условие, Условие) > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИсточникСвязи.Соединения.Добавить(Источник, Условие);
		ПоследнееСоединение = ИсточникСвязи.Соединения[ИсточникСвязи.Соединения.Количество() - 1];
		ПоследнееСоединение.ТипСоединения = ОписаниеСоединения.ТипСоединения;
		
		Если ЛевыеСоединенияЗапроса <> Неопределено
			И ПоследнееСоединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее Тогда
			
			ОписаниеЛевогоСоединения = Новый Структура;
			ОписаниеЛевогоСоединения.Вставить("ИмяТаблицы", ПоследнееСоединение.Источник.Источник.ИмяТаблицы);
			ОписаниеЛевогоСоединения.Вставить("Псевдоним", ПоследнееСоединение.Источник.Источник.Псевдоним);
			ОписаниеЛевогоСоединения.Вставить("Условие", ПоследнееСоединение.Условие);
			
			ЛевыеСоединенияЗапроса.Добавить(ОписаниеЛевогоСоединения);
			
		КонецЕсли;
		
		Если ОписаниеСоединения.Соединения.Количество() > 0 Тогда
			ДобавитьСоединенияИсточнику(Источник, ОписаниеСоединения.Соединения, Оператор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПредставленияИсточникаОператораЗапроса(Псевдонимы, Источники)
	
	Для Каждого Источник Из Источники Цикл
		
		Если ТипЗнч(Источник) = Тип("СоединениеИсточникаЗапросаСхемыЗапроса") Тогда
			
			Псевдонимы.Вставить(Источник.Источник.Источник.Псевдоним, Источник.Источник.Источник.ИмяТаблицы);
			ДобавитьПредставленияИсточникаОператораЗапроса(Псевдонимы, Источник.Источник.Соединения);
			
		Иначе
			
			Псевдонимы.Вставить(Источник.Источник.Псевдоним, Источник.Источник.ИмяТаблицы);
			ДобавитьПредставленияИсточникаОператораЗапроса(Псевдонимы, Источник.Соединения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ЗапросПредставленияПодразделенияСортировкиСотрудников() Экспорт
	
	Возврат ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ЗапросПредставленияПодразделенияСортировкиСотрудников();
	
КонецФункции

#Область ВыводВЗапросыСКДДополнительныхПолейЗапросовПредставлений

Процедура ВывестиДополнительныеПоляПредставленийВСКД(СКД, ДополнительныеПоляПредставлений, СообщатьОРасхожденияхВПутяхКДанным)
	
	ВывестиДополнительныеПоляПредставленийВНаборыДанныхСКД(СКД.НаборыДанных, ДополнительныеПоляПредставлений, СообщатьОРасхожденияхВПутяхКДанным);
	
КонецПроцедуры

Процедура ВывестиДополнительныеПоляПредставленийВЗапрос(Запрос, ДополнительныеПоляПредставлений, Знач ИмяТаблицыПредставления) Экспорт
	
	ОписаниеПредставлений = Новый Структура(ИмяТаблицыПредставления, ДополнительныеПоляПредставлений);
	ВывестиДополнительныеПоляПредставленийВТекстЗапроса(Запрос.Текст, ОписаниеПредставлений);
	
КонецПроцедуры

Процедура ВывестиДополнительныеПоляПредставленийВТекстЗапроса(ТекстЗапроса, ДополнительныеПоляПредставлений) Экспорт
	
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОбновитьТекстЗапроса = Ложь;
	Для Каждого ОписаниеПредставлений Из ДополнительныеПоляПредставлений Цикл
		
		Если ВывестиДополнительныеПоляПредставленийВСхемуЗапроса(Схема, ОписаниеПредставлений.Значение, ОписаниеПредставлений.Ключ) Тогда
			ОбновитьТекстЗапроса = Истина
		КонецЕсли;
	
	КонецЦикла;
	
	Если ОбновитьТекстЗапроса Тогда
		ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
КонецПроцедуры

Функция ВывестиДополнительныеПоляПредставленийВСхемуЗапроса(Схема, ДополнительныеПоляПредставлений, Знач ИмяТаблицыПредставления) Экспорт
	
	Если ИмяТаблицыПредставления = "_" Тогда
		ИмяТаблицыПредставления = "";
	КонецЕсли;
	
	ОбновитьТекстЗапроса = Ложь;
	
	ТаблицыИсточники = Новый Структура;
	Для Каждого ЗапросПакета Из Схема.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса")
			И ЗапросПакета.ТаблицаДляПомещения = ИмяТаблицыПредставления Тогда
			
			ОбновитьТекстЗапроса = Истина;
			
			Если Не ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения) Тогда
				ТаблицыИсточники.Вставить(ЗапросПакета.ТаблицаДляПомещения, ДополнительныеПоляПредставлений);
			КонецЕсли;
			
			ТекстЗапросаПакета = ЗапросПакета.ПолучитьТекстЗапроса();
			
			СхемаЗапросаПакета = Новый СхемаЗапроса;
			СхемаЗапросаПакета.УстановитьТекстЗапроса(ТекстЗапросаПакета);
			
			ПервыйЗапросПакета = СхемаЗапросаПакета.ПакетЗапросов[0];
			
			ИндексДобавленнойКолонки = ПервыйЗапросПакета.Колонки.Количество();
			Для Каждого Оператор Из ПервыйЗапросПакета.Операторы Цикл
				
				Для Каждого СтрокаОписанияПоля Из ДополнительныеПоляПредставлений Цикл
					
					Если ЗначениеЗаполнено(СтрокаОписанияПоля.Соединения) Тогда
						ДобавитьСоединенияСТаблицейИсточников(Оператор, Оператор.Источники[0].Источник.ИмяТаблицы, СтрокаОписанияПоля.Соединения)
					КонецЕсли;
					
					Если ПервыйЗапросПакета.Колонки.Найти(СтрокаОписанияПоля.ИмяПоля) = Неопределено Тогда
						
						Оператор.ВыбираемыеПоля.Добавить(СтрокаОписанияПоля.ПустоеЗначениеНаЯзыкеЗапросов, ИндексДобавленнойКолонки);
						ПервыйЗапросПакета.Колонки[ИндексДобавленнойКолонки].Псевдоним = СтрокаОписанияПоля.ИмяПоля;
						
						ИндексДобавленнойКолонки = ИндексДобавленнойКолонки + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Прервать;
				
			КонецЦикла;
			
			ЗапросПакета.УстановитьТекстЗапроса(СхемаЗапросаПакета.ПолучитьТекстЗапроса());
			
		Иначе
			
			Если ТаблицыИсточники.Количество() > 0 Тогда
				
				ТаблицаПолей = ПустаяТаблицаДополнительныхПолейПредставлений();
				Для Каждого ТаблицаИсточник Из ТаблицыИсточники Цикл
					
					ДобавлятьОписанияДополнительныхПолей = Истина;
					ИндексОператора = 0;
					
					Для Каждого Оператор Из ЗапросПакета.Операторы Цикл
						
						Для Каждого Источник Из Оператор.Источники Цикл
							
							Если ТипЗнч(Источник.Источник) = Тип("ТаблицаСхемыЗапроса") И Источник.Источник.ИмяТаблицы = ТаблицаИсточник.Ключ Тогда
								
								Для Каждого СтрокаОписанияПоля Из ТаблицаИсточник.Значение Цикл
									
									Если СтрокаОписанияПоля.ПсевдонимыПолей.Количество() > 0 Тогда
										
										Если СтрокаОписанияПоля.ПсевдонимыПолей.Свойство(Источник.Источник.Псевдоним) Тогда
											Псевдоним = СтрокаОписанияПоля.ПсевдонимыПолей[Источник.Источник.Псевдоним].ПсевдонимПоля;
										Иначе
											Продолжить;
										КонецЕсли;
										
									Иначе
										Псевдоним = СтрокаОписанияПоля.ИмяПоля;
									КонецЕсли;
									
									ВыражениеПоля = Источник.Источник.Псевдоним + "." + СтрокаОписанияПоля.ИмяПоля;
									
									КолонкаЗапросаПакета = ЗапросПакета.Колонки.Найти(Псевдоним);
									Если КолонкаЗапросаПакета = Неопределено Тогда
										
										Оператор.ВыбираемыеПоля.Добавить(ВыражениеПоля);
										ЗапросПакета.Колонки[ЗапросПакета.Колонки.Количество() - 1].Псевдоним = Псевдоним;
										
									ИначеЕсли КолонкаЗапросаПакета.Поля[ИндексОператора] = Неопределено Тогда
										
										ИндексКолонки = ЗапросПакета.Колонки.Индекс(КолонкаЗапросаПакета);
										Оператор.ВыбираемыеПоля.Добавить(ВыражениеПоля, ИндексКолонки);
										
									КонецЕсли;
									
									Если ДобавлятьОписанияДополнительныхПолей Тогда
										СтрокаПоля = ТаблицаПолей.Добавить();
										СтрокаПоля.ИмяПоля = Псевдоним;
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЦикла;
						
						ДобавлятьОписанияДополнительныхПолей = Ложь;
						ИндексОператора = ИндексОператора + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если ТаблицаПолей.Количество() > 0 И Не ПустаяСтрока(ЗапросПакета.ТаблицаДляПомещения) Тогда
					ТаблицыИсточники.Вставить(ЗапросПакета.ТаблицаДляПомещения, ТаблицаПолей);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбновитьТекстЗапроса;
	
КонецФункции

Процедура ВывестиДополнительныеПоляПредставленийВНаборыДанныхСКД(НаборыДанных, ДополнительныеПоляПредставлений, СообщатьОРасхожденияхВПутяхКДанным, УстанавливатьПутиСКД = Истина)
	
	КэшСведенийНаборовДанных = Новый Соответствие;
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ВывестиДополнительныеПоляПредставленийВНаборыДанныхСКД(НаборДанных.Элементы, ДополнительныеПоляПредставлений, СообщатьОРасхожденияхВПутяхКДанным, Ложь);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			ВывестиДополнительныеПоляПредставленийВТекстЗапроса(НаборДанных.Запрос, ДополнительныеПоляПредставлений);
		КонецЕсли;
		
		ДобавитьПоляНаборуДанныхСКД(НаборДанных, ДополнительныеПоляПредставлений, УстанавливатьПутиСКД, КэшСведенийНаборовДанных, СообщатьОРасхожденияхВПутяхКДанным);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляНаборуДанныхСКД(НаборДанных, ДополнительныеПоляПредставлений, УстанавливатьПутиСКД, КэшСведенийНаборовДанных, СообщатьОРасхожденияхВПутяхКДанным)
	
	Для Каждого ОписаниеПредставлений Из ДополнительныеПоляПредставлений Цикл
		
		Для Каждого СтрокаОписанияПоля Из ОписаниеПредставлений.Значение Цикл
			
			Если СтрокаОписанияПоля.ПсевдонимыПолей.Количество() > 0 Тогда
				
				Для Каждого ОписаниеПсевдонимаПоля Из СтрокаОписанияПоля.ПсевдонимыПолей Цикл
					
					ОписаниеПсевдонима = ОписаниеПсевдонимаПоля.Значение;
					ДобавитьПолеВНаборДанныхСКД(НаборДанных, ОписаниеПсевдонима.ПсевдонимПоля, ОписаниеПсевдонима, УстанавливатьПутиСКД, КэшСведенийНаборовДанных, СообщатьОРасхожденияхВПутяхКДанным);
					
				КонецЦикла;
				
			Иначе
				ДобавитьПолеВНаборДанныхСКД(НаборДанных, СтрокаОписанияПоля.ИмяПоля, СтрокаОписанияПоля, УстанавливатьПутиСКД, КэшСведенийНаборовДанных, СообщатьОРасхожденияхВПутяхКДанным);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолеВНаборДанныхСКД(НаборДанных, ИмяПоля, ОписаниеПоля, УстанавливатьПутиСКД, КэшСведенийНаборовДанных, СообщатьОРасхожденияхВПутяхКДанным)
	
	ОписанияНабора = КэшСведенийНаборовДанных.Получить(НаборДанных.Имя);
	Если ОписанияНабора = Неопределено Тогда
		
		ПоляНабора = Новый Соответствие;
		ПутиНабора = Новый Соответствие;
		
		ОписанияНабора = Новый Структура("ПоляНабора,ПутиНабора", ПоляНабора, ПутиНабора);
		КэшСведенийНаборовДанных.Вставить(НаборДанных.Имя, ОписанияНабора);
		
		Для Каждого ПолеНабора Из НаборДанных.Поля Цикл
			
			Если ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
				
				ПоляНабора.Вставить(ПолеНабора.Поле, ПолеНабора);
				ПутиНабора.Вставить(ПолеНабора.ПутьКДанным, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоляНабора = ОписанияНабора.ПоляНабора;
	ПутиНабора = ОписанияНабора.ПутиНабора;
	
	Поле = ПоляНабора.Получить(ИмяПоля);
	Если Поле = Неопределено Тогда
		
		Если ПутиНабора.Получить(ОписаниеПоля.ПутьПоляСКД) = Неопределено Тогда
			
			Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяПоля;
			
			Если Не ПустаяСтрока(ОписаниеПоля.ЗаголовокПоляСКД) Тогда
				Поле.Заголовок = ОписаниеПоля.ЗаголовокПоляСКД;
			ИначеЕсли Не ПустаяСтрока(ОписаниеПоля.ПутьПоляСКД) Тогда
				Поле.Заголовок = ЗаголовокПоПутиПоля(ОписаниеПоля.ПутьПоляСКД);
			Иначе
				Поле.Заголовок = ЗаголовокПоПутиПоля(Поле.Поле);
			КонецЕсли;
			
			Если УстанавливатьПутиСКД И Не ПустаяСтрока(ОписаниеПоля.ПутьПоляСКД) Тогда
				Поле.ПутьКДанным = ОписаниеПоля.ПутьПоляСКД;
			КонецЕсли;
			
			ПоляНабора.Вставить(ИмяПоля, Поле);
			ПутиНабора.Вставить(Поле.ПутьКДанным, Истина);
			
		КонецЕсли;
		
	Иначе
		
		Если СообщатьОРасхожденияхВПутяхКДанным = Истина
			И ОбщегоНазначения.РежимОтладки() Тогда
			
			Если ПутиНабора.Получить(Поле.ПутьКДанным) = Неопределено Тогда
				
				Если Поле.ПутьКДанным <> ОписаниеПоля.ПутьПоляСКД Тогда
					
					ТекстСообщения = ИмяПоля + " " + НСтр("ru='в отчете используется путь'") + " - " + Поле.ПутьКДанным;
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
				ПутиНабора.Вставить(Поле.ПутьКДанным, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокПоПутиПоля(ПутьКДанным, ФормироватьПолныйПуть = Ложь)
	
	ЗаголовокПоля = "";
	СловаПути = СтрРазделить(ПутьКДанным, ".");
	
	Если СловаПути.Количество() > 0 Тогда
		
		Если ФормироватьПолныйПуть Тогда
			СловаДляЗаголовка = СловаПути;
		Иначе
			СловаДляЗаголовка = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СловаПути[СловаПути.Количество() - 1]);
		КонецЕсли;
		
		ПредставленияЗаголовка = Новый Массив;
		
		Для Каждого СловоПути Из СловаДляЗаголовка Цикл
			
			ЗаголовокСловаПути = ЗаголовокПоИдентификатору(СловоПути);
			Если Не ПустаяСтрока(ЗаголовокСловаПути) Тогда
				ПредставленияЗаголовка.Добавить(ЗаголовокСловаПути);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СловаДляЗаголовка.Количество() > 0 Тогда
			ЗаголовокПоля = СтрСоединить(ПредставленияЗаголовка, ".");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаголовокПоля;
	
КонецФункции

Функция ЗаголовокПоИдентификатору(Знач Идентификатор)
	
	ЗаголовокИдентификатора = "";
	
	СловаЗаголовка = Новый Массив;
	
	СловоЗаголовка = "";
	ПредыдущийСимволВВерхнемРегистре = Ложь;
	
	ДлинаСлова = СтрДлина(Идентификатор);
	
	Для НомерСимвола = 1 По ДлинаСлова Цикл
		
		СимволСлова = Сред(Идентификатор, НомерСимвола, 1);
		
		Если СимволСлова = ВРег(СимволСлова) Тогда
			
			СледующийСимволВВерхнемРегистре = Истина;
			Если ПредыдущийСимволВВерхнемРегистре И НомерСимвола < ДлинаСлова Тогда
				
				СледующийСимвол = Сред(Идентификатор, НомерСимвола + 1, 1);
				СледующийСимволВВерхнемРегистре = (СледующийСимвол = ВРег(СледующийСимвол));
				
			КонецЕсли;
			
			Если ПредыдущийСимволВВерхнемРегистре И СледующийСимволВВерхнемРегистре Тогда
				СловоЗаголовка = ВРег(СловоЗаголовка) + СимволСлова;
			Иначе
				
				Если Не ПустаяСтрока(СловоЗаголовка) Тогда
					СловаЗаголовка.Добавить(СловоЗаголовка);
				КонецЕсли;
				
				Если СловаЗаголовка.Количество() = 0 Тогда
					СловоЗаголовка = СимволСлова;
				Иначе
					СловоЗаголовка = НРег(СимволСлова);
				КонецЕсли;
				
			КонецЕсли;
			
			ПредыдущийСимволВВерхнемРегистре = Истина;
			
		Иначе
			
			СловоЗаголовка = СловоЗаголовка + СимволСлова;
			ПредыдущийСимволВВерхнемРегистре = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СловоЗаголовка) Тогда
		СловаЗаголовка.Добавить(СловоЗаголовка);
	КонецЕсли;
	
	ЗаголовокИдентификатора = СтрСоединить(СловаЗаголовка, " ");
	
	Возврат ЗаголовокИдентификатора;
	
КонецФункции

Процедура ВывестиВНаборыДанныхДополнительныеПоляПредставлений(НаборыДанных, ДополнительныеПоляПредставлений)
	
	КэшСведенийНаборовДанных = Новый Соответствие;
	Для Каждого НаборДанных Из НаборыДанных Цикл
		ВывестиВНаборДанныхДополнительныеПоляПредставлений(НаборДанных, ДополнительныеПоляПредставлений, КэшСведенийНаборовДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВНаборДанныхДополнительныеПоляПредставлений(НаборДанных, ДополнительныеПоляПредставлений, КэшСведенийНаборовДанных = Неопределено) Экспорт
	
	Если КэшСведенийНаборовДанных = Неопределено Тогда
		КэшСведенийНаборовДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		ВывестиВНаборыДанныхДополнительныеПоляПредставлений(НаборДанных.Элементы, ДополнительныеПоляПредставлений);
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		
		ЗапросыНабора = СтрРазделить(НаборДанных.Запрос, ";");
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(ЗапросыНабора[ЗапросыНабора.Количество() - 1]);
		
		ЗапросПакета = Схема.ПакетЗапросов[0];
		ОператорПакета = ЗапросПакета.Операторы[0];
		
		Для Каждого ОписанияПолей Из ДополнительныеПоляПредставлений Цикл
			
			Если ОписанияПолей.Ключ = "_" Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаОписанияПоля Из ОписанияПолей.Значение Цикл
				
				Если СтрокаОписанияПоля.ПсевдонимыПолей.Количество() > 0 Тогда
					
					КоллекцияПсевдонимов = Новый Массив;
					Для Каждого ОписаниеПсевдонимов Из СтрокаОписанияПоля.ПсевдонимыПолей Цикл
						КоллекцияПсевдонимов.Добавить(ОписаниеПсевдонимов.Значение.ПсевдонимПоля);
					КонецЦикла;
					
				Иначе
					КоллекцияПсевдонимов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаОписанияПоля.ИмяПоля);
				КонецЕсли;
				
				Для Каждого ПсевдонимПоля Из КоллекцияПсевдонимов Цикл
					
					Если ЗапросПакета.Колонки.Найти(ПсевдонимПоля) = Неопределено Тогда
						ОператорПакета.ВыбираемыеПоля.Добавить(СтрокаОписанияПоля.ПустоеЗначениеНаЯзыкеЗапросов);
						ЗапросПакета.Колонки[ЗапросПакета.Колонки.Количество() - 1].Псевдоним = ПсевдонимПоля;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗапросыНабора[ЗапросыНабора.Количество() - 1] = Схема.ПолучитьТекстЗапроса();
		НаборДанных.Запрос = СтрСоединить(ЗапросыНабора, РазделительЗапросов());
		
	КонецЕсли;
	
	ДобавитьПоляНаборуДанныхСКД(НаборДанных, ДополнительныеПоляПредставлений, Истина, КэшСведенийНаборовДанных, Ложь);
	
КонецПроцедуры

#КонецОбласти

Процедура СкопироватьПараметрыЗапросаВСКД(СКД, Запрос)
	
	Если Запрос.Параметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрЗапроса Из Запрос.Параметры Цикл
		
		КоллекцияПараметров = СКД.Параметры;
		
		ПараметрСКД = КоллекцияПараметров.Найти(ПараметрЗапроса.Ключ);
		Если ПараметрСКД = Неопределено Тогда
			ПараметрСКД = КоллекцияПараметров.Добавить();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрСКД.Значение) Тогда
			
			ПараметрСКД.Значение = ПараметрЗапроса.Значение;
			ПараметрСКД.Имя = ПараметрЗапроса.Ключ;
			ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
			ПараметрСКД.ОграничениеИспользования = Истина;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьПараметрыЗапросаВДинамическийСписок(ДС, Запрос)
	
	Если Запрос.Параметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПараметрЗапроса Из Запрос.Параметры Цикл
		
		КоллекцияПараметров = ДС.Параметры.Элементы;
		
		ПараметрДС = КоллекцияПараметров.Найти(ПараметрЗапроса.Ключ);
		Если ПараметрДС = Неопределено Тогда
			ПараметрДС = КоллекцияПараметров.Добавить();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрДС.Значение) Тогда
			
			ПараметрДС.Значение = ПараметрЗапроса.Значение;
			ПараметрДС.Использование = Истина; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросПредставленияКадровыеДанныеСотрудниковАнализНачисленийИУдержаний(ТекстИсходногоЗапроса, ТолькоРазрешенные) Экспорт
	
	Возврат ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ЗапросПредставленияКадровыеДанныеСотрудниковАнализНачисленийИУдержаний(ТекстИсходногоЗапроса, ТолькоРазрешенные);
	
КонецФункции

Функция ПолучитьТекстОбщегоЗапроса(ИмяИсточникаДанных, ТолькоРазрешенные)
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Возврат ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ПолучитьТекстОбщегоЗапроса(ИмяИсточникаДанных, ТолькоРазрешенные);
	Иначе
		Возврат ЗарплатаКадрыОбщиеНаборыДанныхПовтИсп.ПолучитьТекстОбщегоЗапроса(ИмяИсточникаДанных, ТолькоРазрешенные);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров) Экспорт
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Возврат ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров);
	Иначе
		Возврат ЗарплатаКадрыОбщиеНаборыДанныхПовтИсп.ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров);
	КонецЕсли;
	
КонецФункции

#КонецОбласти
