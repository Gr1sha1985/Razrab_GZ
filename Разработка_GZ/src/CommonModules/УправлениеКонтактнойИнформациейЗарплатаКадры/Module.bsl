
#Область ПрограммныйИнтерфейс

// Функция возвращает юридический и фактический адреса, указанной организации.
//
// Параметры:
//			Организации			- Массив ссылок или ссылка на элемент справочника Организации.
//			ДатаАктуальности	- Дата
//
// Возвращаемое значение:
//			Соответствие:
//				Ключ 		- СправочникСсылка.Организации
//				Значение 	- Соответствие
//					Ключ - СправочникСсылка.ВидыКонтактнойИнформации
//					Значение - Структура
//						Представление
//						Город
//						ЗначенияПолей
//
Функция АдресаОрганизаций(Организации, Знач ДатаАктуальности = '00010101') Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТипСправочникСсылкаОрганизации = Тип("СправочникСсылка.Организации");
	
	// Определение соответствия видов контактной информации в зависимости от 
	// типа объекта, содержащего контактную информацию.
	СоответствиеАдресовОрганизаций = Новый Соответствие;
	
	СоответствиеВидов = Новый Соответствие;
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СоответствиеВидов.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	СоответствиеАдресовОрганизаций.Вставить(ТипСправочникСсылкаОрганизации, СоответствиеВидов);
	
	ЗарплатаКадрыПереопределяемый.ДополнитьСоответствиеАдресовОрганизаций(СоответствиеАдресовОрганизаций);
	
	// Деление организаций по типу объекта, содержащего контактную информацию.
	КоллекцияПоТипам = Новый Соответствие;
			
	Если ТипЗнч(Организации) = ТипСправочникСсылкаОрганизации Тогда
		КоллекцияПоТипам.Вставить(ТипСправочникСсылкаОрганизации, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации));
	Иначе
		КоллекцияПоТипам.Вставить(ТипСправочникСсылкаОрганизации, Организации);
	КонецЕсли;
	
	ЗарплатаКадрыПереопределяемый.ОпределитьТипыВладельцевАдресовОрганизаций(КоллекцияПоТипам);
	
	// Получение адресов
	Для каждого КоллекцияПоТипу Из КоллекцияПоТипам Цикл
		
		Если КоллекцияПоТипу.Ключ = Тип("СправочникСсылка.Организации") Тогда
			МассивСсылок = КоллекцияПоТипу.Значение;
			СоответствиеВидовКИ = СоответствиеАдресовОрганизаций.Получить(ТипСправочникСсылкаОрганизации);
		Иначе
			МассивСсылок = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияПоТипу.Значение, "Ключ");
			СоответствиеВидовКИ = СоответствиеАдресовОрганизаций.Получить(КоллекцияПоТипу.Ключ);
		КонецЕсли;
		
		ВидыАдресов = ОбщегоНазначения.ВыгрузитьКолонку(СоответствиеВидовКИ, "Ключ");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		УправлениеКонтактнойИнформацией.СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, МассивСсылок, , ВидыАдресов, ДатаАктуальности);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Объект КАК Объект,
			|	КонтактнаяИнформация.Вид,
			|	КонтактнаяИнформация.Представление,
			|	КонтактнаяИнформация.ЗначенияПолей
			|ИЗ
			|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация
			|ИТОГИ ПО
			|	Объект";
			
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизаций.Следующий() Цикл
			
			СоответствиеАдресовОрганизации = Новый Соответствие;
			ВыборкаПоВидам = ВыборкаОрганизаций.Выбрать();
			Пока ВыборкаПоВидам.Следующий() Цикл
				
				СтруктураАдреса = СтруктураПустогоАдресаОрганизации();
				ЗаполнитьЗначенияСвойств(СтруктураАдреса, ВыборкаПоВидам);
				
				АдресСтруктура = ЗарплатаКадры.СтруктураАдресаИзXML(
					ВыборкаПоВидам.ЗначенияПолей, ВыборкаПоВидам.Вид);
					
				Сокращение = "";
				Если АдресСтруктура.Свойство("Город") И НЕ ПустаяСтрока(АдресСтруктура.Город) Тогда
					СтруктураАдреса.Город = АдресСтруктура.Город;
					АдресСтруктура.Свойство("ГородСокращение", Сокращение);
				ИначеЕсли АдресСтруктура.Свойство("НаселенныйПункт") И НЕ ПустаяСтрока(АдресСтруктура.НаселенныйПункт) Тогда
					СтруктураАдреса.Город = АдресСтруктура.НаселенныйПункт;
					АдресСтруктура.Свойство("НаселенныйПунктСокращение", Сокращение);
				ИначеЕсли АдресСтруктура.Свойство("Регион") И НЕ ПустаяСтрока(АдресСтруктура.Регион) Тогда
					СтруктураАдреса.Город = АдресСтруктура.Регион;
					АдресСтруктура.Свойство("РегионСокращение", Сокращение);
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(СтруктураАдреса.Город) И НЕ ПустаяСтрока(Сокращение) Тогда
					СтруктураАдреса.Город = Сокращение + ". " + Лев(СтруктураАдреса.Город, СтрДлина(СтруктураАдреса.Город) - СтрДлина(Сокращение) - 1);
				КонецЕсли; 
				
				ВидАдреса = СоответствиеВидовКИ.Получить(ВыборкаПоВидам.Вид);
				СоответствиеАдресовОрганизации.Вставить(ВидАдреса, СтруктураАдреса);
				
			КонецЦикла; 
			
			Если КоллекцияПоТипу.Ключ = Тип("СправочникСсылка.Организации") Тогда
				СсылкаНаОрганизацию = ВыборкаОрганизаций.Объект;
			Иначе
				СсылкаНаОрганизацию = КоллекцияПоТипу.Значение.Получить(ВыборкаОрганизаций.Объект);
			КонецЕсли;
			ВозвращаемоеЗначение.Вставить(СсылкаНаОрганизацию, СоответствиеАдресовОрганизации);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структура адреса, поставляемую методом АдресаОрганизаций, по
// переданным параметрам Организации и виду адреса.
//
// Параметры:
//		АдресаОрганизаций - Соответствие, полученное с помощью метода АдресаОрганизаций.
//		Организация - СправочникСсылка.Организации
//		ВидАдреса - СправочникСсылка.ВидыКонтактнойИнформации
//
// ВозвращаемоеЗначение:
//		Структура - Ключи структуры описаны в описании метода АдресаОрганизаций.
//
Функция АдресОрганизации(АдресаОрганизаций, Организация, ВидАдреса) Экспорт
	
	АдресОрганизации = СтруктураПустогоАдресаОрганизации();
	
	АдресаОрганизации = АдресаОрганизаций.Получить(Организация);
	Если АдресаОрганизации <> Неопределено Тогда
		Адрес = АдресаОрганизации.Получить(ВидАдреса);
		Если Адрес <> Неопределено Тогда
				АдресОрганизации = Адрес;
		КонецЕсли; 
	КонецЕсли; 
		
	Возврат АдресОрганизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик для события формы ПриСозданииНаСервере, вызывается после вызова соответствующего метода подсистемы
// УправлениеКонтактнойИнформации. Дополняет элементы отображения полей ввода адресов, полями
// отображающими результаты проверки адресов на корректность.
//
// Параметры:
//    Форма - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода контактной 
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	ДополнитьФормуПолямиОтображенияПроверкиАдресов(Форма);
	ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма);
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму.
//
Процедура ОбновитьКонтактнуюИнформацию(Форма, Результат, ЗависимостиВидовАдресов = Неопределено) Экспорт
	
	Если Результат <> Неопределено И Результат.Свойство("ДобавляемыйВид") Тогда
		ДополнитьФормуПолямиОтображенияПроверкиАдресов(Форма);
	КонецЕсли;
	
	ЗаполнитьЗависимыеАдреса(Форма, Результат, ЗависимостиВидовАдресов);
	
	ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма);
	
КонецПроцедуры

// Обновляет представление и отображение поля ввода контактной информации.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Обновляемая форма.
//   ИмяПоляВводаПредставления - Строка - Имя поля ввода, связанного с реквизитом формы,
//       в котором хранится представление контактной информации.
//       Пример: "ПредставлениеАдресаОрганизации".
//   ЗначениеКонтактнойИнформации - Строка - Значение контактной информации в XML или JSON.
//   ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации - Адрес или Телефон.
//
Процедура ОбновитьПолеВводаКонтактнойИнформации(Форма, ИмяПоляВводаПредставления, ЗначениеКонтактнойИнформации, ТипКонтактнойИнформации) Экспорт
	
	ПолеВвода = Форма.Элементы.Найти(ИмяПоляВводаПредставления);
	Если ПолеВвода = Неопределено Тогда
		Возврат; // Элемент недоступен по правам или по ФО - обновлять не требуется.
	КонецЕсли;
	
	Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации);
	
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		Если ПустаяСтрока(Представление) Тогда
			Представление = НСтр("ru = '<Не заполнен>'");
			ПредставлениеРезультатаПроверки = НСтр("ru = 'Адрес не заполнен'");
			ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Иначе
			РезультатПроверки = РаботаСАдресами.ПроверитьАдрес(ЗначениеКонтактнойИнформации);
			Если РезультатПроверки.Результат = "Корректный" Тогда
				ПредставлениеРезультатаПроверки = НСтр("ru = 'Адрес введен правильно - в соответствии с требованиями'");
				ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			Иначе
				ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
				СообщенияПроверки = Новый Массив;
				СообщенияПроверки.Добавить(НСтр("ru = 'Адрес не соответствует адресному классификатору:'"));
				Для Каждого Ошибка Из РезультатПроверки.СписокОшибок Цикл
					СообщенияПроверки.Добавить(Ошибка.Представление);
				КонецЦикла;
				ПредставлениеРезультатаПроверки = СтрСоединить(СообщенияПроверки, Символы.ПС);
			КонецЕсли;
		КонецЕсли;
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = ПредставлениеРезультатаПроверки;
		ПолеВвода.ЦветТекста = ЦветТекста;
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		Если ПустаяСтрока(Представление) Тогда
			Представление = НСтр("ru = '<Не заполнен>'");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПолеВвода.ПутьКДанным, Представление);
	
КонецПроцедуры

// Возвращает сведения о телефоне.
//
// Параметры:
//   ЗначениеТелефона - Строка - Значение контактной информации типа "Телефон" в формате JSON.
//
// Возвращаемое значение:
//   Структура - См. УправлениеКонтактнойИнформацией.СведенияОТелефоне.
//
Функция СтруктураТелефона(ЗначениеТелефона) Экспорт
	Результат = УправлениеКонтактнойИнформацией.СведенияОТелефоне(ЗначениеТелефона);
	
	Результат.КодСтраны     = СокрЛП(Результат.КодСтраны);
	Результат.КодГорода     = СокрЛП(Результат.КодГорода);
	Результат.НомерТелефона = СокрЛП(Результат.НомерТелефона);
	Результат.Добавочный    = СокрЛП(Результат.Добавочный);
	Результат.Представление = СокрЛП(Результат.Представление);
	
	// Если ввести номер телефона в поле ввода без пробелов и разделителей (например: +79992223344),
	// то весь номер телефона запишется либо в код страны, либо в номер телефона, а все остальные поля окажутся пустыми.
	Если (Результат.КодГорода = "" 
			И Результат.НомерТелефона = "" 
			И (Результат.КодСтраны = Результат.Представление
				Или "+" + Результат.КодСтраны = Результат.Представление))
		Или (Результат.КодГорода = "" 
			И Результат.КодСтраны = "" 
			И Результат.НомерТелефона = Результат.Представление) Тогда
		Если СтрДлина(Результат.Представление) <= 10 Тогда
			Возврат Результат;
		КонецЕсли;
		Если СтрНачинаетсяС(Результат.Представление, "+") Тогда
			Результат.КодСтраны     = Лев(Результат.Представление, 2);
			Результат.КодГорода     = Сред(Результат.Представление, 3, 3);
			Результат.НомерТелефона = Сред(Результат.Представление, 6);
		Иначе
			Результат.КодСтраны     = Лев(Результат.Представление, 1);
			Результат.КодГорода     = Сред(Результат.Представление, 2, 3);
			Результат.НомерТелефона = Сред(Результат.Представление, 5);
			Если Не СтрНачинаетсяС(Результат.КодСтраны, "8") Тогда
				Результат.КодСтраны = "+" + Результат.КодСтраны;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Результат.КодСтраны <> "" И Не СтрНачинаетсяС(Результат.КодСтраны, "+") Тогда
			Результат.КодСтраны = "+" + Результат.КодСтраны;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает представление телефона.
//
// Параметры:
//   ЗначениеТелефона  - Строка    - Значение контактной информации типа "Телефон" (строка json или xml).
//                     - Структура - Результат функции УправлениеКонтактнойИнформациейЗарплатаКадры.СтруктураТелефона.
//   ОграничениеДлины  - Число     - Ограничение длины телефона.
//   ДляПечатиПоБуквам - Булево    - Если Истина то будет сформировано представление для функции
//                                   ПрямыеВыплатыПособийСоциальногоСтрахования.ВывестиТелефонПоБуквам.
//
// Возвращаемое значение:
//   Строка - Удобочитаемое представление телефона, например: "+7 123 456-78-90".
//
Функция ПредставлениеТелефона(ЗначениеТелефона, ОграничениеДлины, ДляПечатиПоБуквам = Ложь) Экспорт
	Если ТипЗнч(ЗначениеТелефона) = Тип("Структура") Тогда
		СтруктураТелефона = ЗначениеТелефона;
	Иначе
		СтруктураТелефона = СтруктураТелефона(ЗначениеТелефона);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтруктураТелефона.Представление) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивПредставлений = Новый Массив;
	
	Если ЗначениеЗаполнено(СтруктураТелефона.КодСтраны) Тогда
		МассивПредставлений.Добавить(СтруктураТелефона.КодСтраны);
	КонецЕсли;
	
	Если СтруктураТелефона.КодГорода <> "" Тогда
		РазделительКодаГорода = ?(МассивПредставлений.Количество() > 0, ?(ДляПечатиПоБуквам, "-", " "), "");
		МассивПредставлений.Добавить(РазделительКодаГорода + СтруктураТелефона.КодГорода);
	КонецЕсли;
	
	// Форматы номеров:
	// ххх-ххх-ххх
	// ххх-ххх-хх
	// ххх-хх-хх
	// хх-хх-хх
	// х-хх-хх
	// хх-хх
	НомерТелефона = СтрСоединить(СтрРазделить(СтруктураТелефона.НомерТелефона, " -()", Ложь), "");
	ДлинаНомера = СтрДлина(НомерТелефона);
	Если ДлинаНомера = 4 Тогда
		НомерТелефона = Лев(НомерТелефона, 2) + "-" + Сред(НомерТелефона, 3);
	ИначеЕсли ДлинаНомера = 5 Тогда
		НомерТелефона = Лев(НомерТелефона, 1) + "-" + Сред(НомерТелефона, 2, 2) + "-" + Сред(НомерТелефона, 4);
	ИначеЕсли ДлинаНомера = 6 Тогда
		НомерТелефона = Лев(НомерТелефона, 2) + "-" + Сред(НомерТелефона, 3, 2) + "-" + Сред(НомерТелефона, 5);
	ИначеЕсли ДлинаНомера = 7 Тогда
		НомерТелефона = Лев(НомерТелефона, 3) + "-" + Сред(НомерТелефона, 4, 2) + "-" + Сред(НомерТелефона, 6);
	ИначеЕсли ДлинаНомера >= 8 Тогда
		НомерТелефона = Лев(НомерТелефона, 3) + "-" + Сред(НомерТелефона, 4, 3) + "-" + Сред(НомерТелефона, 7);
	КонецЕсли;
	Если ДлинаНомера > 0 Тогда
		РазделительКодаГорода = ?(МассивПредставлений.Количество() > 0, ?(ДляПечатиПоБуквам, "-", " "), "");
		МассивПредставлений.Добавить(РазделительКодаГорода + НомерТелефона);
	КонецЕсли;
	
	Если СтруктураТелефона.Добавочный <> "" Тогда
		Если ДляПечатиПоБуквам Тогда
			МассивПредставлений.Добавить(" " + СтрШаблон(НСтр("ru = 'доб.%1'"), СтруктураТелефона.Добавочный));
		Иначе
			МассивПредставлений.Добавить(", " + СтрШаблон(НСтр("ru = 'доб. %1'"), СтруктураТелефона.Добавочный));
		КонецЕсли;
	КонецЕсли;
	
	Пока Истина Цикл
		Представление = СтрСоединить(МассивПредставлений, "");
		Если СтрДлина(Представление) <= ОграничениеДлины Тогда
			Возврат Представление;
		КонецЕсли;
		МассивПредставлений.Удалить(МассивПредставлений.ВГраница());
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет форму, содержащую контактную информацию предупреждающими
// надписями для полей содержащих адрес.
//
Процедура ДополнитьФормуПолямиОтображенияПроверкиАдресов(Форма)

	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		
		ПоложениеЗаголовкаВерх = ВРег(Форма.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ПоложениеЗаголовка) = ВРег("ПоложениеЗаголовкаЭлементаФормы.Верх");
		РоссийскиеАдреса = ЗарплатаКадрыПовтИсп.ВидыРоссийскихАдресов();
		
		Для Каждого КонтактнаяИнформация Из КоллекцияПолейКонтактнойИнформации Цикл
			
			Элемент = Форма.Элементы.Найти(КонтактнаяИнформация.ИмяРеквизита);
			Если Элемент <> Неопределено Тогда
				
				Если ПоложениеЗаголовкаВерх Тогда
					Элемент.ВысотаЗаголовка = 1;
				КонецЕсли;
				
				// Для полей контактной информации, содержащих телефонные номера ограничивается ширина.
				Если КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
					ИЛИ КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Факс
					ИЛИ КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				
					Элемент.Ширина = 20;
					
				// Поля, содержащие адрес дополняются, полями отображающими результаты проверки адресов.
				ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					
					Если Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
						Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
					КонецЕсли;
					
					Если ПоложениеЗаголовкаВерх Тогда
						Элемент.Ширина = 55;
						Элемент.Высота = 2;
					КонецЕсли;
					
					Если КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица Тогда
						
						Если ПоложениеЗаголовкаВерх Тогда
							Элемент.Ширина = 44;
						Иначе
							Элемент.Ширина = 47;
						КонецЕсли;
						
						ИмяГруппыАдресаПоПрописке = "ГруппаАдресПоПрописке" + Элемент.Имя;
						ГруппаАдресаПоПрописке = Форма.Элементы.Найти(ИмяГруппыАдресаПоПрописке);
						Если ГруппаАдресаПоПрописке = Неопределено Тогда
							
							ГруппаАдресаПоПрописке = Форма.Элементы.Найти(ИмяГруппыАдресаПоПрописке);
							Если ГруппаАдресаПоПрописке = Неопределено Тогда
								
								ГруппаАдресаПоПрописке = Форма.Элементы.Добавить(ИмяГруппыАдресаПоПрописке, Тип("ГруппаФормы"));
								
								ГруппаАдресаПоПрописке.Вид = ВидГруппыФормы.ОбычнаяГруппа;
								ГруппаАдресаПоПрописке.ОтображатьЗаголовок = Ложь;
								ГруппаАдресаПоПрописке.Отображение = ОтображениеОбычнойГруппы.Нет;
								ГруппаАдресаПоПрописке.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
								
								Форма.Элементы.Переместить(ГруппаАдресаПоПрописке, Элемент.Родитель, Элемент);
								Форма.Элементы.Переместить(Элемент, ГруппаАдресаПоПрописке);
								
							КонецЕсли;
							
							ЭлементДатаРегистрации = Форма.Элементы.Найти("ДатаРегистрации" + Элемент.Имя);
							Если ЭлементДатаРегистрации = Неопределено Тогда
								
								ЭлементДатаРегистрации = Форма.Элементы.Добавить("ДатаРегистрации" + Элемент.Имя, Тип("ПолеФормы"), ГруппаАдресаПоПрописке);
								
								ЭлементДатаРегистрации.Вид = ВидПоляФормы.ПолеВвода;
								ЭлементДатаРегистрации.ПутьКДанным = "ФизическоеЛицо.ДатаРегистрации";
								ЭлементДатаРегистрации.РастягиватьПоГоризонтали = Ложь;
								ЭлементДатаРегистрации.Ширина = 8;
								
								Если ПоложениеЗаголовкаВерх Тогда
									ЭлементДатаРегистрации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
									ЭлементДатаРегистрации.ВысотаЗаголовка = 1;
								Иначе
									ЭлементДатаРегистрации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
								КонецЕсли;
								
								ЭлементДатаРегистрации.УстановитьДействие("ПриИзменении", "Подключаемый_ФизлицоДатаРегистрацииПриИзменении");
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет предупреждающие надписи к элементу, содержащему адрес.
//
Процедура ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма)

	АдресныйКлассификаторЗагружен = Неопределено;
	ПроверенныеАдреса = Новый Соответствие;
	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		
		РоссийскиеАдреса = ЗарплатаКадрыПовтИсп.ВидыРоссийскихАдресов();
		Для Каждого КонтактнаяИнформация Из КоллекцияПолейКонтактнойИнформации Цикл
			
			Если КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				И РоссийскиеАдреса.Получить(КонтактнаяИнформация.Вид) = Истина Тогда
				
				Если АдресныйКлассификаторЗагружен = Неопределено Тогда
					АдресныйКлассификаторЗагружен = АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
				КонецЕсли;
				
				Элемент = Форма.Элементы.Найти(КонтактнаяИнформация.ИмяРеквизита);
				Если Элемент <> Неопределено Тогда
					
					УстановитьОтображениеПоляАдреса(
						Форма[Элемент.Имя],
						КонтактнаяИнформация.Значение,
						Элемент,
						Форма,
						КонтактнаяИнформация.Вид,
						АдресныйКлассификаторЗагружен,
						ПроверенныеАдреса,
						КонтактнаяИнформация.Комментарий);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Осуществляет проверку заполненного элемента содержащего адрес и выводит
// предупреждающие надписи.
//
Процедура УстановитьОтображениеПоляАдреса(Адрес, СписокПолей, Элемент, Форма, ВидАдреса, АдресныйКлассификаторЗагружен = Неопределено, ПроверенныеАдреса = Неопределено, Комментарий = "") Экспорт
	
	СообщенияПроверки = "";
	ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	Если ТипЗнч(ПроверенныеАдреса) = Тип("Соответствие") Тогда
		НастройкиОтображенияАдреса = ПроверенныеАдреса.Получить(Адрес);
	Иначе
		НастройкиОтображенияАдреса = Неопределено;
	КонецЕсли;
	
	Если НастройкиОтображенияАдреса = Неопределено Тогда
		
		Если Не ПустаяСтрока(Адрес) И Адрес <> НСтр("ru='Заполнить'") Тогда
		
			Если АдресныйКлассификаторЗагружен = Неопределено Тогда
				АдресныйКлассификаторЗагружен = АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
			КонецЕсли;
			
			Если Не АдресныйКлассификаторЗагружен Тогда

				СообщенияПроверки = НСтр("ru = 'Адресный классификатор не загружен'");
				РезультатПроверки = Неопределено;

			Иначе
				
				РезультатПроверки = ЗарплатаКадрыВызовСервера.ПроверитьАдрес(СписокПолей, ВидАдреса);
				Если РезультатПроверки.Результат <> "Корректный" Тогда
					
					Для каждого ЭлементОписанияОшибки Из РезультатПроверки.СписокОшибок Цикл
						СообщенияПроверки = СообщенияПроверки + ЭлементОписанияОшибки.Представление + Символы.ПС;
					КонецЦикла;
					СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
					
					СообщенияПроверки = НСтр("ru = 'Адрес не соответствует адресному классификатору'") + Символы.ПС + СообщенияПроверки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru = 'Адрес введен правильно - в соответствии с требованиями'"), СообщенияПроверки);
			ЗаголовокОшибкиДополнительный = СтрПолучитьСтроку(СообщенияПроверки, 1);
			СообщенияПроверки = СокрЛП(Сред(СообщенияПроверки, СтрДлина(ЗаголовокОшибкиДополнительный) + 1));
			
			Если РезультатПроверки = Неопределено ИЛИ РезультатПроверки.Результат <> "Корректный" Тогда
				ЦветТекстаПоля = ЦветаСтиля.ПоясняющийОшибкуТекст;
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		СообщенияПроверки = НастройкиОтображенияАдреса.СообщенияПроверки;
		ЦветТекстаПоля = НастройкиОтображенияАдреса.ЦветТекстаПоля;
	КонецЕсли;
	
	Если ТипЗнч(ПроверенныеАдреса) = Тип("Соответствие") Тогда
		ПроверенныеАдреса.Вставить(Адрес, Новый Структура("СообщенияПроверки,ЦветТекстаПоля", СообщенияПроверки, ЦветТекстаПоля));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		Элемент.Имя,
		"ЦветТекста",
		ЦветТекстаПоля);
	
	Если Не ПустаяСтрока(Комментарий) Тогда
		СообщенияПроверки = СообщенияПроверки + Символы.ПС + Комментарий;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		Элемент.Имя,
		СообщенияПроверки);

КонецПроцедуры

Функция СтруктураПустогоАдресаОрганизации()
	
	Возврат Новый Структура("Представление,Город,ЗначенияПолей", "", "", "");
	
КонецФункции

Процедура ЗаполнитьЗависимыеАдреса(Форма, Результат, ЗависимостиВидовАдресов)
	
	Если ЗависимостиВидовАдресов <> Неопределено
		И Результат <> Неопределено И Результат.Свойство("ИмяРеквизита") Тогда
		
		ИмяЭлемента = Результат.ИмяРеквизита;
		
		КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
			
			СтруктураПоиска = Новый Структура("ИмяРеквизита", ИмяЭлемента);
			НайденныеСтрокиТекущегоАдреса = КоллекцияПолейКонтактнойИнформации.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтрокиТекущегоАдреса.Количество() > 0 Тогда
				
				СтрокаТекущегоАдреса = НайденныеСтрокиТекущегоАдреса[0];
				Если НЕ ПустаяСтрока(СтрокаТекущегоАдреса.Значение) Тогда
					
					КоллекцияЗависимыхВидов = ЗависимостиВидовАдресов.Получить(СтрокаТекущегоАдреса.Вид);
					Если КоллекцияЗависимыхВидов <> Неопределено Тогда
						
						Для каждого ЭлементКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
							
							Для каждого ЗависимыйВид Из КоллекцияЗависимыхВидов Цикл
								Если ЭлементКонтактнойИнформации.Вид = ЗависимыйВид
									И ПустаяСтрока(ЭлементКонтактнойИнформации.Значение) Тогда
									
									ЭлементКонтактнойИнформации.Значение = СтрокаТекущегоАдреса.Значение;
									ЭлементКонтактнойИнформации.Представление = СтрокаТекущегоАдреса.Представление;
									Форма[ЭлементКонтактнойИнформации.ИмяРеквизита] = Форма[СтрокаТекущегоАдреса.ИмяРеквизита];
									
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
