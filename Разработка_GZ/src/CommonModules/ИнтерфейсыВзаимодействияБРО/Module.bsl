////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции интерфейсов взаимодействия БРО
// с другими библиотеками/конфигурациями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает признак - является ли организация иностранной в зависимости от ИНН.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//   Истина - организация является иностранной;
//   Ложь   - организация не является иностранной.
//
//
Функция ЭтоИностраннаяОрганизацияПоИНН(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННЮЛ");
	ИНН      = Сведения.ИННЮЛ;
	
	ЭтоИностраннаяОрганизация = СтрДлина(ИНН) > 4 И Лев(ИНН, 4) = "9909";
	
	Возврат ЭтоИностраннаяОрганизация;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с прикладным кодом
// автоматического заполнения данных статистической отчетности.

// Возвращает поля, которые не требуется заполнять.
//
Функция ПоляКоторыеНеВсегдаТребуетсяЗаполнять(ИмяРеглОтчета, ИмяФормы, Период) Экспорт
	
	НеТребуютсяПоляФормы = Новый Массив;
	
	// Проверка имеет смысл только для некоторых отчетов
	Если НЕ (ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП3"
		 ИЛИ ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП1"
		 ИЛИ ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП6") Тогда
		Возврат НеТребуютсяПоляФормы;
	КонецЕсли;
		
	// Если все разделы формы представлены в одном макете, а сам макет соответствует маске "[ИмяФормы]_%",
	// то массив незаполняемых полей можно сформировать, отфильтров имена областей макета по маске
	// (например, если не нужно заполнять раздел 2 и все поля второго раздела начинаются с "П02",
	// то в массив незаполняемых можно добавить имена всех областей макета, начинающиеся с "П02").
	МакетыФормыОтчета = Новый Массив;
	Для каждого МакетОтчета Из Метаданные.Отчеты[ИмяРеглОтчета].Макеты Цикл
		Если СтрНайти(МакетОтчета.Имя, ИмяФормы + "_") = 1 Тогда
			МакетыФормыОтчета.Добавить(МакетОтчета);
		КонецЕсли;
		Если МакетыФормыОтчета.Количество() > 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Функция не поддерживает отчеты, в которых форма разделена на несколько макетов.
	Если МакетыФормыОтчета.Количество() <> 1 Тогда
		Возврат НеТребуютсяПоляФормы;
	КонецЕсли;
		
	ПоследнийМесяцКвартала = Месяц(Период) % 3 = 0;
	ПоследнийМесяцГода = (Месяц(Период) = 12);
	
	МакетФормыОтчета = Отчеты[ИмяРеглОтчета].ПолучитьМакет(МакетыФормыОтчета[0].Имя);
		
	Если ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП3" Тогда
		
		// Разделы 2, 3 и 4 заполняются только в квартальных периодах
		Если НЕ ПоследнийМесяцКвартала Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П02");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П03");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П04");
		КонецЕсли;
		
		// Строка 50.а раздела 3 заполняется только за январь-декабрь
		Если НЕ ПоследнийМесяцГода Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П030005003");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П030005004");
		КонецЕсли;
		
	ИначеЕсли ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП1" Тогда
		
		// Строки 3, 4, 5 раздела 1 заполняется только в квартальный период.
		// Строка "Справочно:" раздела 5 заполняется только в квартальный период (с 2019 года исключена).
		Если НЕ ПоследнийМесяцКвартала Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001003");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001004");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001005");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "ПотребЭнерг");
		КонецЕсли;
		
	ИначеЕсли ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП6" Тогда
		
		// Раздел 3 заполняется только за полугодие
		Если Месяц(Период) <> 6 Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П03");
		КонецЕсли;
		
	ИначеЕсли ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФорма3ТОРГПМ" Тогда
		
		// Раздел 4 (появился с отчета за январь-декабрь 2020) заполняется только за январь-декабрь
		Если НЕ ПоследнийМесяцГода Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П000002");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеТребуютсяПоляФормы;
КонецФункции

// Краткое представление формы, которое выводится, например, в заголовке диалога настройки.
//
// Параметры:
//  РегламентированныйОтчет - ДокументСсылка.РегламентированныйОтчет
//
// Возвращаемое значение:
//   Строка - краткое представление формы.
//
Функция КраткоеПредставлениеФормы(РегламентированныйОтчет) Экспорт
	
	МетаОтчет = Метаданные.Отчеты.Найти(РегламентированныйОтчет.ИсточникОтчета);
	
	Если МетаОтчет = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если МетаОтчет.ОсновнаяФорма <> Неопределено Тогда
		КраткоеПредставление = СокрЛП(СтрЗаменить(СтрЗаменить(МетаОтчет.ОсновнаяФорма.Синоним, "Статистика:", ""), "Форма", ""));
	Иначе
		КраткоеПредставление = СокрЛП(СтрЗаменить(Лев(МетаОтчет.Синоним, СтрНайти(МетаОтчет.Синоним, """") - 1), "Форма", ""));
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

// Возвращает список классификаторов, про которые знает БРО.
// 
// Возвращаемое значение:
//   СписокЗначений - "ВидыДеятельности", "ВидыПродукцииОпт", "ВидыПродукцииПроизводство",
//                    "ВидыПродукцииРозница", "УслугиНаселению".
//
Функция ВидыКлассификаторов() Экспорт 
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ВидыДеятельности");
	Результат.Добавить("ВидыПродукцииОпт");
	Результат.Добавить("ВидыПродукцииПроизводство");
	Результат.Добавить("ВидыПродукцииРозница");
	Результат.Добавить("УслугиНаселению");
	
	Возврат Результат;
	
КонецФункции

// Возвращает список версий классификатора
//
// Параметры:
//  ВидКласификатора - строка
//
// Возвращаемое значение:
//   СписокЗначений - версии классификатора.
//   Например: для ВидКласификатора = "ВидыПродукцииОпт"
//   вернем список версий ("2010кв1", "2012кв1", "2013кв1", "2013кв4", "2014кв1")
//   с представлением.
//
Функция ВерсииКлассификатора(ВидКласификатора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ВидКласификатора = "ВидыДеятельности" Тогда
		Результат.Добавить("2010кв1", "2010");
		Результат.Добавить("2012кв1", "2012");
		Результат.Добавить("2014кв1", "2014");
	ИначеЕсли ВидКласификатора = "ВидыПродукцииОпт"
		Или ВидКласификатора = "ВидыПродукцииПроизводство"
		Или ВидКласификатора = "ВидыПродукцииРозница" Тогда
		Результат.Добавить("2010кв1", "2010");
		Результат.Добавить("2012кв1", "2012");
		Результат.Добавить("2013кв1", "2013, 1-3 кв.");
		Результат.Добавить("2013кв4", "2013, 4 кв.");
		Результат.Добавить("2014кв1", "2014");
	ИначеЕсли ВидКласификатора = "УслугиНаселению" Тогда
		Результат.Добавить("2010кв1", "2010");
		Результат.Добавить("2013кв1", "2013, 1-3 кв.");
		Результат.Добавить("2013кв4", "2013, 4 кв.");
		Результат.Добавить("2014кв1", "2014");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// По классификатору и версии вернем таблицу значений
//
// Параметры:
//   ВидКласификатора - строка
//   Версия - строка
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные классификатора.
//   Возвращаем таблицу значений с 4 колонками:
//   Код, Наименование, НаименованиеЕдиницыИзмерения, КодЕдиницыИзмерения
//   Все колонки имеют тип "строка"
//
Функция ДанныеКлассификатора(ВидКласификатора, ВерсияКлассификатора) Экспорт
	Если ВидКласификатора = "ВидыДеятельности" Тогда
		Возврат КлассификаторВидовДеятельности(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "ВидыПродукцииОпт" Тогда
		Возврат КлассификаторПродукцииОпт(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "ВидыПродукцииПроизводство" Тогда
		Возврат КлассификаторПродукцииПроизводство(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "ВидыПродукцииРозница" Тогда
		Возврат КлассификаторПродукцииРозница(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "УслугиНаселению" Тогда
		Возврат КлассификаторУслугНаселению(ВерсияКлассификатора);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции описания форм статистики.

// Функция читает структуру XML переданной формы статистики.
//
// Параметры:
// 	 ИмяОтчета - Строка - имя отчета.
//   ИмяСхемыВыгрузки - Строка - имя схемы выгрузки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содежит иерархию полей формы статистики.
//
Функция ПолучитьПоляФормыСтатистики(ИмяОтчета, ИмяСхемыВыгрузки) Экспорт
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Показатель",   ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки",  ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ИмяПоля",      ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("Родитель",     Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	ТаблицаПоказателей.Колонки.Добавить("Период",       Новый ОписаниеТипов("Строка"));// ТекущийПериод, ПредыдущийПериод или АналогичныйПериодПредыдущегоГода
	ТаблицаПоказателей.Колонки.Добавить("ЭтоГруппа",    Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателей.Колонки.Добавить("СНачалаГода",  Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателей.Колонки.Добавить("ЕстьЭлементы", Новый ОписаниеТипов("Булево"));
	
	ДеревоПоказателей = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяОтчета, ИмяСхемыВыгрузки);
	
	Для Каждого Тег_report Из ДеревоПоказателей.Строки	Цикл
		
		Если Тег_report.Код = "report" Тогда
			
			Для Каждого Тег_sections Из Тег_report.Строки Цикл
				
				Если Тег_sections.Код = "sections" Тогда
					
					Для Каждого Тег_section Из Тег_sections.Строки Цикл
						
						Если Тег_section.Код = "section" Тогда
							
							Группа = ТаблицаПоказателей.Добавить();
							
							Группа.Показатель 	= Тег_section.Представление;
							Группа.ЭтоГруппа 	= Истина;
							
							РодительРаздел = Группа;
							
							Для Каждого Тег_row Из Тег_section.Строки Цикл
								
								Если Тег_row.Код = "row" Тогда
									
									НаименованиеПоказателя = Тег_row.Представление;
									
									Строка = ТаблицаПоказателей.Добавить();
									
									Строка.Показатель 	= НаименованиеПоказателя;
									Строка.ЭтоГруппа 	= Истина;
									Строка.Родитель 	= РодительРаздел;
									Родитель 			= Строка;
									
									НомерСтроки = "";
									
									Для Каждого Тег_col Из Тег_row.Строки Цикл
										
										Если Тег_col.Код = "code" Тогда
											
											НомерСтроки	= Тег_col.ЗначениеПоУмолчанию;
											Родитель.Показатель = "Строка " + НомерСтроки + ": " + НаименованиеПоказателя;
										Иначе
											
											ИмяПоля = Тег_col.Ключ;
											
											Если ЗначениеЗаполнено(ИмяПоля) И ЭтоКодПоказателяП(ИмяПоля) Тогда 
												
												Строка = ТаблицаПоказателей.Добавить();
												
												Представление = Тег_col.Представление;
												
												Строка.ИмяПоля 			= ИмяПоля;
												Строка.Показатель 		= Тег_col.Представление;
												Строка.НомерСтроки 		= НомерСтроки;
												Строка.Родитель 		= Родитель;
												Родитель.ЕстьЭлементы 	= Истина;
												РодительРаздел.ЕстьЭлементы = Истина;
												
												Если СтрНайти(НРег(Представление),"за предыдущий") Тогда	
													
													Строка.Период = "ПредыдущийПериод";
													
												ИначеЕсли СтрНайти(НРег(Представление),"за соответствующий") Тогда
												
													Строка.Период = "АналогичныйПериодПредыдущегоГода";
													
												Иначе
													
													Строка.Период = "ТекущийПериод";
													
												КонецЕсли;
												
												Если СтрНайти(НРег(Представление),"с начала ") И СтрНайти(НРег(Представление)," года") Тогда	
													
													Строка.СНачалаГода = Истина;
													
												КонецЕсли;
												
											КонецЕсли;
											
										КонецЕсли;
										
									КонецЦикла; // col
									
								КонецЕсли;
								
							КонецЦикла; // row
							
						КонецЕсли;
						
					КонецЦикла; //section
					
				КонецЕсли	
				
			КонецЦикла;	// sections
			
		КонецЕсли;
		
	КонецЦикла; //report	
	
	Возврат	ТаблицаПоказателей;
	
КонецФункции	

// Функция считывает версии списков отчета.
//
// Парамеры: 
//   ИмяОтчета - Строка - идентификатор отчета, для которого нужно вернуть версии списков.
//
// Возвращаемое значение:
//   СписокЗначений - версии списков отчета.
//
Функция ПолучитьВерсииСписковОтчета(ИмяОтчета) Экспорт
	СписокВерсий = Новый СписокЗначений;
	ОтчетМетаданные = Метаданные.Отчеты.Найти(ИмяОтчета);
	
	Если ОтчетМетаданные = Неопределено Тогда 
		Возврат СписокВерсий;
	КонецЕсли;
		
	Для Каждого Макет Из ОтчетМетаданные.Макеты Цикл
		Если Лев(Макет.Имя,6) = "Списки" Тогда
			СписокВерсий.Добавить(Макет.Имя, Лев(СтрЗаменить(Макет.Имя, "Списки", ""), 4));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВерсий;
КонецФункции

// Функция возвращает структуру содержащую 2 параметра:
//
// Параметры:
//   ИмяКлассификатора - Строка
//   Назначение - Строка
// Возвращаемое значение:
//   Структура - расположение классификатор форм статистики.
//
Функция ПолучитьРасположениеКлассификатораСтатистики(ИмяКлассификатора, Назначение = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("ОтчетИсточникДанных, ОбластьИсточникДанных");
	
	Если ИмяКлассификатора = "КлассификаторВидовЭкономическойДеятельности" Тогда
		
		СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП1");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okved");
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторПродукцииПоВидамДеятельности" Тогда
		
		Если Назначение = "ВидыУслугРозница" Тогда
			СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаПУслуги");
			СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okp");
		Иначе
			СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП1");
			СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okp");
		КонецЕсли;
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторУслугНаселению" Тогда
		
		СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП5М");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okun");
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Получает данные переданного списка выбора отчета.
//
// Параметры:
//    ИмяОтчета - Строка - Идентификатор отчета содежащего искомый список.
//    ИмяМакета - Строка - Идентификатор макета в котором хранятся списки отчета.
//    ИмяСписка - Строка - Имя искомого списка в макете "Списки" отчета.
//    ДополнятьКодСлева - Булево - дополнять код слева (по умолчанию) символом "0"
//	                      до длины кода (по умолчанию) 12, длина кода и символ дополнения могут быть определены
//                        параметрами.
//	  ДлинаКода - Число - длина кода классификатора, коды классификатора будут приведены к этой длине.
//	  СимволДополненияКода - Строка - символ которым нужно дополнить код слева, до заданной длины.
//
// Возвращаемое значение:
// 	 ТаблицаЗначений - данные списка.
//
Функция ПолучитьЗначенияИзСпискаВыбораОтчета(ИмяОтчета, ИмяМакета, ИмяСписка, ДополнятьКодСлева = Ложь, ДлинаКода = Неопределено, СимволДополненияКода = "0") Экспорт
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	
	СпискиОтчета = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	
	//В полученном макете содержатся значения всех списков используемых в отчете
	//ищем переданный
	Список = СпискиОтчета.Области.Найти(ИмяСписка);
	
	Если Список = Неопределено Тогда
		Возврат ТаблицаПоказателей;
	КонецЕсли;
	
	Если Список.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		//заполнение дерева данными списка	
		ВерхОбласти = Список.Верх;
		НизОбласти = Список.Низ;
		
		НомерКолонки = 1;
		Область = СпискиОтчета.Область(ВерхОбласти - 1, НомерКолонки);
		ИмяКолонки = Область.Текст;
		ДлинаКодаКлассификатора = 20;
		
		Если ДлинаКода <> Неопределено Тогда
			
			ДлинаКодаКлассификатора = ДлинаКода;
			
		КонецЕсли;
		
		Пока ЗначениеЗаполнено(ИмяКолонки) Цикл
			
			Если ИмяКолонки = "id" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
			ИначеЕсли ИмяКолонки = "Text" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
			Иначе
				ТаблицаПоказателей.Колонки.Добавить(СтрЗаменить(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяКолонки, "")," ", "_"), Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
			КонецЕсли;
			
			НомерКолонки = НомерКолонки + 1;
			Область = СпискиОтчета.Область(ВерхОбласти - 1, НомерКолонки);
			ИмяКолонки = Область.Текст;
			
		КонецЦикла;
		
		Если ТаблицаПоказателей.Колонки.Количество() = 0 Тогда
			Возврат ТаблицаПоказателей;
		КонецЕсли;
		
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			
			СтрокаСписка = ТаблицаПоказателей.Добавить();
			
			Для Каждого Колонка Из ТаблицаПоказателей.Колонки Цикл
				
				ЗначениеКолнки = СокрП(СпискиОтчета.Область(НомСтр, ТаблицаПоказателей.Колонки.Индекс(Колонка) + 1).Текст);
				Если Колонка.Имя = "Код" И ДополнятьКодСлева Тогда
					
					ЗначениеКолнки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеКолнки, ДлинаКодаКлассификатора, СимволДополненияКода);
					
				КонецЕсли;
				
				СтрокаСписка[Колонка.Имя] = ЗначениеКолнки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;

	Если ТаблицаПоказателей.Колонки.Количество() <> 0 Тогда
		ТаблицаПоказателей.Сортировать(ТаблицаПоказателей.Колонки[0].Имя + " Возр");
	КонецЕсли;
	
	Возврат ТаблицаПоказателей;

КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с потребителями БРО.

// Формирует автоматически в фоне формы регламентированных отчетов для выбранных налоговых органов.
// Предназначена для автоформирования регл. отчетов:
//   "6-НДФЛ (с 2021 года)";
//   "6-НДФЛ";
//   "Декларация по ЕНВД (за периоды, начиная с 01.01.2016)".
//
// Параметры:
//   СтруктураПараметров - Структура - ключи:
//     "ИмяОтчета" - Строка - имя регламентированного отчета;
//     "Организация" - СправочникСсылка.Организации - ссылка на организацию;
//     "ДатаНачалаПериодаОтчета" - Дата - дата начала периода отчета;
//     "ДатаКонцаПериодаОтчета" - Дата - дата конца периода отчета;
//     "НалоговыеОрганы" - СписокЗначений - список элементов справочника "РегистрацииВНалоговомОргане";
//     "АдресВоВременномХранилищеРезультатаАвтоформирования" - Строка - адрес во временном хранилище результата автоформирования;
//   НеиспользуемыйАдресХранилища - Строка - обязателен для совместимости с БСП, если процедура применяется как
//                                           диспетчер запуска автоформирования регламентированных отчетов в фоне
//                                           (необязателен в остальных случаях).
//
Процедура СформироватьАвтоматическиРеглОтчетВФоне(СтруктураПараметров, НеиспользуемыйАдресХранилища = "") Экспорт
	
	ИмяОтчета = СтруктураПараметров.ИмяОтчета;
	Организация = СтруктураПараметров.Организация;
	ДатаНачалаПериодаОтчета = СтруктураПараметров.ДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета = СтруктураПараметров.ДатаКонцаПериодаОтчета;
	НалоговыеОрганы = СтруктураПараметров.НалоговыеОрганы;
	АдресВоВременномХранилищеРезультатаАвтоформирования = СтруктураПараметров.АдресВоВременномХранилищеРезультатаАвтоформирования;
	
	ИмяФормыОтчета = Неопределено;
	СтруктураПараметров.Свойство("ИмяФормыОтчета", ИмяФормыОтчета);
	
	ПараметрыАвтоФормирования = Новый Структура;
	
	Если ИмяОтчета = "РегламентированныйОтчет6_НДФЛ" Тогда
		
		ПараметрыАвтоФормирования.Вставить("ИсточникОтчета", ИмяОтчета);
		ПараметрыАвтоФормирования.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
		ПараметрыАвтоФормирования.Вставить("Организация",    Организация);
		ПараметрыАвтоФормирования.Вставить("ДатаНачала",     ДатаНачалаПериодаОтчета);
		ПараметрыАвтоФормирования.Вставить("ДатаОкончания",  ДатаКонцаПериодаОтчета);
		
	КонецЕсли;
	
	РезультатАвтоформирования = Новый Массив;
	
	Для Каждого НалоговыйОрган Из НалоговыеОрганы Цикл
		
		ПараметрыАвтоФормирования.Вставить("КПП", НалоговыйОрган.Значение.КПП);
		ПараметрыАвтоФормирования.Вставить("НалоговыйОрган", НалоговыйОрган.Значение.Код);
		ПараметрыАвтоФормирования.Вставить("ОКТМО", НалоговыйОрган.Значение.КодПоОКТМО);
		ПараметрыАвтоФормирования.Вставить("РегистрацияВНалоговомОргане", НалоговыйОрган.Значение);
		ПараметрыАвтоФормирования.Вставить("РезультатАвтоформирования", РезультатАвтоформирования);
		
		СформироватьАвтоматическиРеглОтчет(ИмяОтчета,
										   Организация,
										   ДатаНачалаПериодаОтчета,
										   ДатаКонцаПериодаОтчета,
										   ,
										   ИмяФормыОтчета,
										   ПараметрыАвтоФормирования);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ПараметрыАвтоФормирования.РезультатАвтоформирования,
								  АдресВоВременномХранилищеРезультатаАвтоформирования);
	
КонецПроцедуры

// Процедура обновляет сохраненные данные регламентированного отчета 
// заданного вида для указанной организации за нужный отчетный период.
//
// Параметры:
//	 ИсточникОтчета - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
// 	 Организация - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаНачала - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//   ДатаОкончания - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регламентированный отчет, данные которого нужно получить.
//
// Пример:
//   ИнтерфейсыВзаимодействия.ОбновитьДанныеРеглОтчета("РегламентированныйОтчетРСВ1", Организация, '20120101', '20121231', СсылкаНаСохрРеглОтчет);
//
Процедура ОбновитьДанныеРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет) Экспорт
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания, СсылкаНаСохрРеглОтчет);
	
	Если ИмяФормыОтчета = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось обновить данные отчета!'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(ДатаОкончания);
	КонецЕсли;
	
	Если ИмяФормыОтчета = "ФормаОтчета2010Кв4" Тогда
		
		ОбновитьРеглОтчетРСВ1ФормаОтчета2010Кв4(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
		
	ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2011Кв1" Тогда
		
		ОбновитьРеглОтчетРСВ1ФормаОтчета2011Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
		
	ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2012Кв1" Тогда
		
		ОбновитьРеглОтчетРСВ1ФормаОтчета2012Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
		
	ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2013Кв1" Тогда
		
		ОбновитьРеглОтчетРСВ1ФормаОтчета2013Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
		
	ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2014Кв1" Тогда
		
		ОбновитьРеглОтчетРСВ1ФормаОтчета2014Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
			
	ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
		
		ОбновитьРеглОтчетРСВ1ФормаОтчета2015Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
			
	КонецЕсли;
	
КонецПроцедуры

// Функция автоматически формирует регламентированный отчет заданного вида для указанной организации
// за нужный отчетный период, сохраняет его в ИБ и возвращает ссылку.
//
// Параметры:
//   ИсточникОтчета      - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
//   Организация         - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаНачала          - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//   ДатаОкончания       - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   КорректирующийОтчет - Булево - признак корректирующего отчета.
//   ИмяФормыОтчета      - Строка - строка с именем формы регламентированного отчета (определяет нужную из форм,
//                                  действующих в отчетном периоде).
//   ПараметрыАвтоФормирования - Структура - параметры автоматического формирования регл. отчета.
//
// Возвращемое значение:
//   ДокументСсылка.РегламентированныйОтчет - ссылка на документ "РегламентированныйОтчет".
//
// Пример:
//   ИнтерфейсыВзаимодействия.СформироватьАвтоматическиРеглОтчет("РегламентированныйОтчетРСВ1", Организация, '20120101', '20121231');
//
Функция СформироватьАвтоматическиРеглОтчет(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет = Ложь,
										   ИмяФормыОтчета = Неопределено, ПараметрыАвтоФормирования = Неопределено) Экспорт
	
	Если ИмяФормыОтчета = Неопределено Тогда
		ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания);
	КонецЕсли;
	
	Если ИмяФормыОтчета = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать отчет!'");
		Сообщение.Сообщить();
		
		Возврат ИмяФормыОтчета;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(ДатаОкончания);
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
		
		Если ИмяФормыОтчета = "ФормаОтчета2010Кв4" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2010Кв4(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2011Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2011Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2012Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2012Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2013Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2013Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2014Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2014Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2015Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет);
			
		КонецЕсли;
		
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчет6НДФЛ" Тогда
		
		Если ИмяФормыОтчета = "ФормаОтчета2016Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчет6НДФЛФормаОтчета2016Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2017Кв4" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчет6НДФЛФормаОтчета2017Кв4(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования);
			
		КонецЕсли;
		
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" Тогда
		
		Если ИмяФормыОтчета = "ФормаОтчета2016Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2016Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2017Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2017Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2018Кв1(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв3" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2018Кв3(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв4" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2018Кв4(
			ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования);
			
		КонецЕсли;
		
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
		
		Если ИмяФормыОтчета = "ФормаОтчета2021Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыАвтоФормирования, КорректирующийОтчет);
			
		ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыАвтоФормирования, КорректирующийОтчет);
			
		КонецЕсли;
		
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетСтатистикаФорма1Предприниматель" Тогда
		
		Если ИмяФормыОтчета = "ФормаОтчета2020Кв1" Тогда
			
			Возврат СформироватьАвтоматическиРеглОтчетСтатистикаФорма1Предприниматель(ПараметрыАвтоФормирования, КорректирующийОтчет);
			
		КонецЕсли;
		
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(ИсточникОтчета,
			  	ИмяФормыОтчета).АвтоФормированиеНаСервере Тогда
						
		ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ИмяФормыОтчета);
	
		ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
		
		Возврат ОтчетОбъект.СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоФормирования, КорректирующийОтчет);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура устанавливает значение реквизита "Вид" формы РСВ-1.
//
// Параметры:
//   Ссылка              - ДокументСсылка.РегламентированныйОтчет - ссылка на регл. отчет.
//   КорректирующаяФорма - Булево - признак корректирующей формы.
//
Процедура УстановитьВидФормыРСВ_1(Ссылка, КорректирующаяФорма) Экспорт
	
	ОбъектРегОтчет = Ссылка.ПолучитьОбъект();
	ОбъектРегОтчет.Вид = ?(КорректирующаяФорма, 1, 0);
	ОбъектРегОтчет.Записать();
	
КонецПроцедуры

// Функция определяет для организации, подключен ли документооборот с контролирующим органом.
//
// Параметры:
//  Организация			 - СправочникСсылка.Организации - Организация, для которой определяется
//		наличие подключенного документооборота с контролирующим органом.
//  КонтролирующийОрган	 - Перечисление.ТипыКонтролирующихОрганов - контролирующий орган, для 
//		которого определяется наличие подключения.
// Возвращаемое значение:
//  Булево - Истина, если документооборот с контролирующим органом подключен.
Функция ПодключенДокументооборотСКонтролирующимОрганом(
		Организация = Неопределено, 
		КонтролирующийОрган = Неопределено,
		ВыполнятьВПривилегированномРежиме = Истина) Экспорт
		
	Если ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ДокументооборотСКонтролирующимиОрганами) Тогда
		
		КонтекстЭДОСервер = Обработки.ДокументооборотСКонтролирующимиОрганами.Создать();
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ДокументооборотПодключен = КонтекстЭДОСервер.ПодключенДокументооборотСКонтролирующимОрганом(Организация, КонтролирующийОрган);
		Иначе
			ДокументооборотПодключен = КонтекстЭДОСервер.ХотяБыОднаОрганизацияИспользуетДокументооборот();
		КонецЕсли;
		
	Иначе
		ДокументооборотПодключен = Ложь;
	КонецЕсли;
	
	Возврат ДокументооборотПодключен;
	
КонецФункции

// Функция определяет, имеет ли организация учетную запись.
//
// Параметры:
//  Организация			 - СправочникСсылка.Организации - Организация, для которой определяется
//		наличие подключенного документооборота с контролирующим органом.
// Возвращаемое значение:
//  Булево - Истина, учетная запись есть.
Функция ОрганизацияИмеетУчетнуюЗапись(Организация = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация, 
			"ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Если РеквизитыОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			Возврат ЗначениеЗаполнено(РеквизитыОрганизации.УчетнаяЗаписьОбмена);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ПометкаУдаления = ЛОЖЬ
			|	И Организации.УчетнаяЗаписьОбмена <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиДокументооборота.ПустаяСсылка)
			|	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выбрать().Количество() > 0;
		
	КонецЕсли;
	
КонецФункции

// Конструктор параметров автоматического формирования регламентированных отчетов без открытия формы.
//
// Возвращаемое значение:
//   Структура - Содержит ключи с параметрами автоформирования.
//
Функция НовыйПараметрыАвтоформированияОтчета() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИсточникОтчета", "");
	Параметры.Вставить("ИмяФормыОтчета", "");
	Параметры.Вставить("Организация");
	Параметры.Вставить("ДатаНачала", Дата(1, 1, 1));
	Параметры.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Параметры.Вставить("ЗаполнятьВнешнимиДанными", Ложь);
	Параметры.Вставить("ВнешниеДанные");
	Параметры.Вставить("СсылкаНаСохрРеглОтчет");
	Параметры.Вставить("Ошибки", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает справки о доходах и суммах налога физических лиц из регламентированных отчетов
// "6-НДФЛ (с 2021 года)".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация    - СправочникСсылка.Организации - организация, для которой будет выполняться поиск
//                        отчетов "6-НДФЛ (с 2021 года)";
//     * ДатаОкончания  - Дата - дата окончания отчетного периода для поиска отчетов "6-НДФЛ (с 2021 года)";
//     * ИмяФормыОтчета - Строка - имя формы отчета "6-НДФЛ (с 2021 года)", например, "ФормаОтчета2021Кв1"
//                        (необязательное свойство; если отсутствует, значение будет получено автоматически).
//
// Возвращаемое значение:
//  Массив - массив структур с данными отчетов (пустой массив, если отчетов не найдено).
//  Каждая структура (случай непустого массива) - Структура - имеет свойства:
//     * НомерКорректировки - Число - номер корректировки из отчета "6-НДФЛ (с 2021 года)";
//     * СправкиОДоходахИСуммахНалогаФизическихЛиц - ДеревоЗначений - справки о доходах и
//                            суммах налога физических лиц из отчета "6-НДФЛ (с 2021 года)".
//
Функция СправкиОДоходахИСуммахНалогаФизическихЛицИзОтчетов6_НДФЛ(СтруктураПараметров) Экспорт
	
	МассивДанныхОтчетов = Новый Массив;
	
	ИсточникОтчета = "РегламентированныйОтчет6_НДФЛ";
	
	ДатаОкончания = НачалоДня(КонецКвартала(СтруктураПараметров.ДатаОкончания));
	
	ИмяФормы = Неопределено;
	СтруктураПараметров.Свойство("ИмяФормыОтчета", ИмяФормы);
	
	Если ИмяФормы = Неопределено Тогда
		ИмяФормы = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
		ИсточникОтчета, ДатаОкончания);
	КонецЕсли;
	
	Если ИмяФормы = Неопределено Тогда
		Возврат МассивДанныхОтчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания",  НачалоДня(КонецКвартала(СтруктураПараметров.ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",    СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ИмяФормы",       ИмяФормы);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйОтчет.Ссылка,
	|	РегламентированныйОтчет.Вид КАК Вид
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления
	|	И ВЫРАЗИТЬ(РегламентированныйОтчет.ВыбраннаяФорма КАК СТРОКА(18)) = &ИмяФормы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид ВОЗР";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ИмяРаздела = "Приложение1";
		Выборка = Результат.Выбрать();
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв1") Тогда
			
			Пока Выборка.Следующий() Цикл
				
				ДанныеОтчета = Выборка.Ссылка.ДанныеОтчета.Получить();
				
				Если НЕ ДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
					
					СтруктураДанныхОтчета = Новый Структура;
					СтруктураДанныхОтчета.Вставить("НомерКорректировки", Выборка.Вид);
					СтруктураДанныхОтчета.Вставить("СправкиОДоходахИСуммахНалогаФизическихЛиц",
					ДанныеОтчета.ДанныеМногоуровневыхРазделов[ИмяРаздела]);
					
					МассивДанныхОтчетов.Добавить(СтруктураДанныхОтчета);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивДанныхОтчетов;
	
КонецФункции

// Возвращает персонифицированные сведения о застрахованных лицах из регламентированных отчетов
// "Расчет по страховым взносам".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация    - СправочникСсылка.Организации - организация, для которой будет выполняться поиск отчетов
//                        "Расчет по страховым взносам";
//     * ДатаОкончания  - Дата - дата окончания отчетного периода для поиска отчетов "Расчет по страховым взносам";
//     * ИмяФормыОтчета - Строка - имя формы отчета "Расчет по страховым взносам", например, "ФормаОтчета2020Кв1"
//                        (необязательное свойство; если отсутствует, значение будет получено автоматически).
//
// Возвращаемое значение:
//  Массив - массив структур с данными отчетов (пустой массив, если отчетов не найдено).
//  Каждая структура (случай непустого массива) - Структура - имеет свойства:
//     * НомерКорректировки - Число - номер корректировки из отчета "Расчет по страховым взносам";
//     * ПерсонифицированныеСведенияОЗастрахованныхЛицах - ДеревоЗначений - персонифицированные
//                     сведения о застрахованных лицах из отчета "Расчет по страховым взносам".
//
Функция ПерсонифицированныеСведенияОЗастрахованныхЛицахИзРасчетовПоСтраховымВзносам(СтруктураПараметров) Экспорт
	
	МассивДанныхОтчетов = Новый Массив;
	
	ИсточникОтчета = "РегламентированныйОтчетРасчетПоСтраховымВзносам";
	
	ДатаОкончания = НачалоДня(КонецКвартала(СтруктураПараметров.ДатаОкончания));
	
	ИмяФормы = Неопределено;
	СтруктураПараметров.Свойство("ИмяФормыОтчета", ИмяФормы);
	
	Если ИмяФормы = Неопределено Тогда
		ИмяФормы = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания);
	КонецЕсли;
	
	Если ИмяФормы = Неопределено Тогда
		Возврат МассивДанныхОтчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания",  НачалоДня(КонецКвартала(СтруктураПараметров.ДатаОкончания)));
	Запрос.УстановитьПараметр("Организация",    СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ИмяФормы",       ИмяФормы);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйОтчет.Ссылка,
	|	РегламентированныйОтчет.Вид КАК Вид
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления
	|	И ВЫРАЗИТЬ(РегламентированныйОтчет.ВыбраннаяФорма КАК СТРОКА(18)) = &ИмяФормы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид ВОЗР";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ИмяРаздела = "Раздел3";
		Выборка = Результат.Выбрать();
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв1") Тогда
			
			Пока Выборка.Следующий() Цикл
				
				ДанныеОтчета = Выборка.Ссылка.ДанныеОтчета.Получить();
				
				Если НЕ ДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
					
					СтруктураДанныхОтчета = Новый Структура;
					СтруктураДанныхОтчета.Вставить("НомерКорректировки", Выборка.Вид);
					СтруктураДанныхОтчета.Вставить("ПерсонифицированныеСведенияОЗастрахованныхЛицах",
					ДанныеОтчета.ДанныеМногоуровневыхРазделов[ИмяРаздела]);
					
					МассивДанныхОтчетов.Добавить(СтруктураДанныхОтчета);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2017Кв1") Тогда
			
			ИмяГруппы1 = "П00321М1";
			ИменаГраф1 = Новый Массив;
			ИменаГраф1.Добавить("П00321М119001");
			ИменаГраф1.Добавить("П00321М120001");
			ИменаГраф1.Добавить("П00321М121001");
			ИменаГраф1.Добавить("П00321М122001");
			ИменаГраф1.Добавить("П00321М123001");
			ИменаГраф1.Добавить("П00321М124001");
			
			ИмяГруппы2 = "П00322М1";
			ИменаГраф2 = Новый Массив;
			ИменаГраф2.Добавить("П00322М126001");
			ИменаГраф2.Добавить("П00322М127001");
			ИменаГраф2.Добавить("П00322М128001");
			ИменаГраф2.Добавить("П00322М129001");
			
			Пока Выборка.Следующий() Цикл
				
				ДанныеОтчета = Выборка.Ссылка.ДанныеОтчета.Получить();
				
				Если ДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
					
					ИмяРаздела = "Раздел3";
					
					ИмяГруппы1 = "П00321М1";
					ИменаГраф1 = Новый Массив;
					ИменаГраф1.Добавить("П00321М119001");
					ИменаГраф1.Добавить("П00321М120001");
					ИменаГраф1.Добавить("П00321М121001");
					ИменаГраф1.Добавить("П00321М122001");
					ИменаГраф1.Добавить("П00321М123001");
					ИменаГраф1.Добавить("П00321М124001");
					
					ИмяГруппы2 = "П00322М1";
					ИменаГраф2 = Новый Массив;
					ИменаГраф2.Добавить("П00322М126001");
					ИменаГраф2.Добавить("П00322М127001");
					ИменаГраф2.Добавить("П00322М128001");
					ИменаГраф2.Добавить("П00322М129001");
					
					СтарТаблица = ДанныеОтчета.ДанныеМногостраничныхРазделов[ИмяРаздела];
					
					ДеревоРаздела = Новый ДеревоЗначений;
					ДеревоРаздела.Колонки.Добавить("Данные");
					ДеревоРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
					
					Для Инд = 0 По СтарТаблица.Количество() - 1 Цикл
						
						СтарСтраница = СтарТаблица[Инд];
						СтарДанные = СтарСтраница.Данные;
						
						ДеревоРаздела.Строки.Добавить();
						ДеревоРаздела.Строки[Инд].Данные = Новый Структура;
						ДеревоДопСтрок1 = Новый ДеревоЗначений;
						ДеревоДопСтрок1.Колонки.Добавить("Данные");
						ДеревоДопСтрок1.Колонки.Добавить("ДанныеМногострочныхЧастей");
						ДеревоДопСтрок2 = Новый ДеревоЗначений;
						ДеревоДопСтрок2.Колонки.Добавить("Данные");
						ДеревоДопСтрок2.Колонки.Добавить("ДанныеМногострочныхЧастей");
						ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей = Новый Структура;
						ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей.Вставить(ИмяГруппы1, ДеревоДопСтрок1);
						ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей.Вставить(ИмяГруппы2, ДеревоДопСтрок2);
						
						// Немногострочные данные.
						Для каждого Пок Из СтарДанные Цикл
							Если Пок.Ключ = "П000030002001" ИЛИ Пок.Ключ = "П000030003001" ИЛИ Пок.Ключ = "П000030005001"
								ИЛИ СтрНачинаетсяС(Пок.Ключ, ИмяГруппы1) ИЛИ СтрНачинаетсяС(Пок.Ключ, ИмяГруппы2) Тогда
								Продолжить;
							КонецЕсли;
							ДеревоРаздела.Строки[Инд].Данные.Вставить(Пок.Ключ, Пок.Значение);
						КонецЦикла;
						
						// Многострочные данные 190-240.
						НомСтр = 1;
						_НомСтр = "_1";
						Пока СтарДанные.Свойство(ИменаГраф1[0] + _НомСтр) Цикл
							СтрокаМнЧ = ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей[ИмяГруппы1].Строки.Добавить();
							СтрокаМнЧ.Данные = Новый Структура;
							СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
							Для каждого ИмяГрафы Из ИменаГраф1 Цикл
								СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
							КонецЦикла;
							НомСтр = НомСтр + 1;
							_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
						КонецЦикла;
						
						// Многострочные данные 260-290.
						НомСтр = 1;
						_НомСтр = "_1";
						Пока СтарДанные.Свойство(ИменаГраф2[0] + _НомСтр) Цикл
							СтрокаМнЧ = ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей[ИмяГруппы2].Строки.Добавить();
							СтрокаМнЧ.Данные = Новый Структура;
							СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
							Для каждого ИмяГрафы Из ИменаГраф2 Цикл
								СтрокаМнЧ.Данные.Вставить(ИмяГрафы, СтарДанные[ИмяГрафы + _НомСтр]);
							КонецЦикла;
							НомСтр = НомСтр + 1;
							_НомСтр = "_" + Формат(НомСтр, "ЧГ=");
						КонецЦикла;
						
					КонецЦикла;
					
					ПерсонифицированныеСведенияОЗастрахованныхЛицах = ДеревоРаздела;
					
				Иначе
					
					ДеревоРаздела = ДанныеОтчета.ДанныеМногоуровневыхРазделов[ИмяРаздела];
					
					Если НЕ ДеревоРаздела.Строки[0].Данные.Свойство("П000030004001") Тогда
						
						ЗаполненРаздел = Ложь;
						
						Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
							
							Данные = СтраницаРаздела.Данные;
							Для каждого Пок Из Данные Цикл
								ЗаполненРаздел = (ЗаполненРаздел ИЛИ ЗначениеЗаполнено(Пок.Значение));
								Если ЗаполненРаздел Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							Если ЗаполненРаздел Тогда
								Прервать;
							КонецЕсли;
							
							ИменаГруппМнЧ = Новый Массив;
							ИменаГруппМнЧ.Добавить(ИмяГруппы1);
							ИменаГруппМнЧ.Добавить(ИмяГруппы2);
							
							Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
								
								ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
								МассивИменГраф = ?(ИмяГруппы = ИмяГруппы1, ИменаГраф1, ИменаГраф2);
								
								Для Каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
									
									Для каждого ИмяГрафы Из МассивИменГраф Цикл
										ЗаполненРаздел = (ЗаполненРаздел ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы]));
										Если ЗаполненРаздел Тогда
											Прервать;
										КонецЕсли;
									КонецЦикла;
									
									Если ЗаполненРаздел Тогда
										Прервать;
									КонецЕсли;
									
								КонецЦикла;
								
								Если ЗаполненРаздел Тогда
									Прервать;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла;
						
						// Заполнение строки 040 (случай сохраненных данных отчета предыдущей версии).
						Для Инд = 0 По ДеревоРаздела.Строки.Количество() - 1 Цикл
							Если ЗаполненРаздел Тогда
								ДеревоРаздела.Строки[Инд].Данные.Вставить("П000030004001", Формат(Инд + 1, "ЧГ="));
							Иначе
								ДеревоРаздела.Строки[Инд].Данные.Вставить("П000030004001", "");
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					ПерсонифицированныеСведенияОЗастрахованныхЛицах = ДеревоРаздела;
					
				КонецЕсли;
				
				СтруктураДанныхОтчета = Новый Структура;
				СтруктураДанныхОтчета.Вставить("НомерКорректировки", Выборка.Вид);
				СтруктураДанныхОтчета.Вставить("ПерсонифицированныеСведенияОЗастрахованныхЛицах",
				ПерсонифицированныеСведенияОЗастрахованныхЛицах);
				
				МассивДанныхОтчетов.Добавить(СтруктураДанныхОтчета);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивДанныхОтчетов;
	
КонецФункции

// Коды органов ФСГС, заменяемые в связи с поддержкой взаимодействия с ЦЕМПОС.
//
// Возвращаемое значение:
//  Соответствие - для кодов органов ФСГС возвращаются коды, на которые их следует заменить в справочниках
//                 (организаций, подразделений).
//
Функция СоответствиеЗаменяемыхКодовОргановФСГС(Знач ОпрашиватьСервис = Ложь) Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("01-00", "01-01-00");
	Результат.Вставить("02-00", "02-02-00");
	Результат.Вставить("23-00", "23-23-00");
	Результат.Вставить("23-99", "23-23-00");
	Результат.Вставить("52-00", "52-52-00");
	
	// 2018-08-22
	Результат.Вставить("07-00", "07-07-00");
	Результат.Вставить("06-00", "06-06-00");
	Результат.Вставить("09-00", "09-09-00");
	Результат.Вставить("09-01", "09-09-01");
	Результат.Вставить("10-00", "10-10-00");
	Результат.Вставить("15-00", "15-15-01");
	Результат.Вставить("26-00", "26-26-00");
	Результат.Вставить("29-00", "29-29-00");
	Результат.Вставить("51-00", "51-51-00");
	Результат.Вставить("68-00", "68-68-00");

	// 2018-09-19
	Результат.Вставить("04-00", "04-04-00");
	Результат.Вставить("08-00", "08-08-00");
	Результат.Вставить("12-00", "12-12-00");
	Результат.Вставить("21-00", "21-21-00");
	Результат.Вставить("22-00", "22-22-00");
	Результат.Вставить("30-00", "30-30-00");
	Результат.Вставить("35-00", "35-35-00");
	Результат.Вставить("91-00", "91-91-00");
	Результат.Вставить("92-00", "92-92-00");
	
	// 2018-09-21
	Результат.Вставить("48-00", "48-48-00");
		
	// 2018-10-22
	Результат.Вставить("27-00", "27-27-00");
	Результат.Вставить("49-00", "49-49-00");
	Результат.Вставить("79-00", "79-79-00");
	Результат.Вставить("87-00", "87-87-00");
	Результат.Вставить("67-00", "67-67-00");
	Результат.Вставить("59-00", "59-59-00");
	Результат.Вставить("13-00", "13-13-00");
	Результат.Вставить("32-00", "32-32-00");

	// 2018-11-19
	Результат.Вставить("03-00", "03-03-00");
	Результат.Вставить("11-00", "11-11-00");
	Результат.Вставить("31-00", "31-31-00");
	Результат.Вставить("47-00", "47-47-00");
	Результат.Вставить("48-00", "48-48-00");
	Результат.Вставить("53-00", "53-53-00");
	Результат.Вставить("55-00", "55-55-00");
	Результат.Вставить("56-00", "56-56-00");
	Результат.Вставить("78-00", "78-78-00");
	
	// 2018-12-19
	Результат.Вставить("60-00", "60-60-00");
	Результат.Вставить("62-00", "62-62-00");
	Результат.Вставить("70-00", "70-70-00");
	Результат.Вставить("20-00", "20-20-00");
	Результат.Вставить("14-00", "14-14-00");
	
	// 2018-12-24
	Результат.Вставить("64-05", "64-64-05");
	
	Если ТекущаяДатаСеанса() > '2019-01-21' Тогда
		Результат.Вставить("05-00", "05-05-00");
		Результат.Вставить("17-00", "17-17-00");
		Результат.Вставить("19-00", "19-19-00");
		Результат.Вставить("24-00", "24-24-00");
		Результат.Вставить("42-00", "42-42-00");
		Результат.Вставить("73-00", "73-73-00");
		Результат.Вставить("74-00", "74-74-00");
		Результат.Вставить("76-00", "76-76-00");
	КонецЕсли;
	
	Если ОпрашиватьСервис Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		КлючОбъекта = "regservice.keydisk.ru/GetCemposRecipientList";
		ДатаЗапроса = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "ДатаПоследнегоУдачногоЗапроса");
		
		ДатаСервера = ТекущаяДатаСеанса();
		Если ДатаЗапроса <> Неопределено И ДатаЗапроса + 86400 > ДатаСервера И ДатаЗапроса < ДатаСервера Тогда 
			ДанныеЗапроса = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "ДанныеПоследнегоУдачногоЗапроса");
			Если ТипЗнч(ДанныеЗапроса) = Тип("Соответствие") Тогда 
				Возврат ДанныеЗапроса;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСоединения = Новый Структура("Таймаут", 5);
		URL = "http://regservice.keydisk.ru/regservice.asmx/GetCemposRecipientList";
		Соединение = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(URL, ПараметрыСоединения);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Запрос = Новый HTTPЗапрос("/regservice.asmx/GetCemposRecipientList", Заголовки);
		Запрос.УстановитьТелоИзСтроки("regionCode=");
		
		Попытка
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		Исключение
			Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами.Получение изменений кодов органов ФСГС на ЦЕМПОС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
			
			Возврат Результат;
			
		КонецПопытки;
		
		Если Ответ.КодСостояния = 200 Тогда			
			НормализованныйОтвет = НормализоватьЗаменуКодовЦЕМПОС(Ответ.ПолучитьТелоКакСтроку());
			Если ТипЗнч(НормализованныйОтвет) = Тип("Соответствие") Тогда 
				ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ДатаПоследнегоУдачногоЗапроса", ТекущаяДатаСеанса());
				ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ДанныеПоследнегоУдачногоЗапроса", НормализованныйОтвет);
			КонецЕсли;
			
			Возврат НормализованныйОтвет;
			
		Иначе
			Ошибка = Ответ.ПолучитьТелоКакСтроку();
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами.Получение изменений кодов органов ФСГС на ЦЕМПОС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает значения показателей экземпляра раздела регламентированного отчета.
// Для работы требуется наличие одноименной экспортной процедуры в модуле объекта
// регламентированного отчета, для которой предусмотрена аналогичная параметризация.
//
// Параметры:
//   ПараметрыРасчета - Cтруктура со свойствами:
//     * ИмяОтчета   - Строка - имя регламентированного отчета (обязательное);
//     * ИмяФормы    - Строка - имя формы регламентированного отчета (обязательное);
//     * ИмяРаздела  - Строка - имя раздела регламентированного отчета (обязательное);
//     * Разрядность - Число  - число знаков дробной части, до которых округлять (0 - до целого, 1 - до десятых, т.д.),
//                              значение по умолчанию 0.
//     * Класс       - Число  - соответствует формату отображаемого значения (1 - в единицах, 1000 - в тысячах,
//                     1000000 - в миллионах, т.д.), значение по умолчанию 1.
//   Данные - Структура - немногострочные данные раздела регламентированного отчета: ключ - имя показателя,
//            значение - значение показателя.
//
// Пример параметризации:
//	ПараметрыРасчета = Новый Структура;
//	ПараметрыРасчета.Вставить("ИмяОтчета",  "РегламентированныйОтчетЗемельныйНалог");
//	ПараметрыРасчета.Вставить("ИмяФормы",   "ФормаОтчета2018Кв1");
//	ПараметрыРасчета.Вставить("ИмяРаздела", "Раздел2");
//
Процедура РассчитатьПоказателиРеглОтчета(ПараметрыРасчета, Данные) Экспорт
	
	Если Метаданные.Отчеты.Найти(ПараметрыРасчета.ИмяОтчета) = Неопределено
		ИЛИ Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отч = РегламентированнаяОтчетность.РеглОтчеты(ПараметрыРасчета.ИмяОтчета, , Ложь);
	
	НаименованиеТипа = "ОтчетМенеджер.РегламентированныйОтчетЗемельныйНалог";
	
	Если ТипЗнч(Отч) = Тип(НаименованиеТипа) Тогда
		ОбъектОтчет = Отч.Создать();
	ИначеЕсли ТипЗнч(Отч) = Тип("ОтчетОбъект") Тогда
		ОбъектОтчет = Отч;
	Иначе
		ОбъектОтчет = Отчеты[ПараметрыРасчета.ИмяОтчета].Создать();
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("Разрядность") Тогда
		ПараметрыРасчета.Вставить("Разрядность", 0);
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("Класс") Тогда
		ПараметрыРасчета.Вставить("Класс", 1);
	КонецЕсли;
	
	ОбъектОтчет.РассчитатьПоказателиРеглОтчета(ПараметрыРасчета, Данные);
	
КонецПроцедуры

// Машиночитаемые бланки персонифицированных сведений о застрахованных лицах, сформированные алгоритмами печати
// отчета "Расчет по страховым взносам".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация (обязательное) - СправочникСсылка.Организации - организация (см. в форме "Расчет по страховым
//                   взносам");
//     * МассивФизическихЛиц (обязательное) - Массив - произвольные идентификаторы, используемые для отбора сведений,
//                   а также устанавливаемые в качестве Ключей в возвращаемое Соответствие (в случае отсутствия
//                   указанных идентификаторов, в качестве Ключей в возвращаемое Соответствие устанавливаются
//                   сгенерированные значения уникальных идентификаторов);
//     * ДатаПодписи (обязательное) - Дата - дата подписи (см. в форме "Расчет по страховым взносам");
//     * ДатаКонцаПериодаОтчета (обязательное) - Дата - дата конца квартала, определяющая расчетный (отчетный) период
//                   (см. в форме "Расчет по страховым взносам");
//     * ДатаНачалаПериодаОтчета (необязательное) - Дата - дата начала расчетного (отчетного) периода (см. в форме
//                   "Расчет по страховым взносам"; если отсутствует, будет установлена дата начала календарного года,
//                   получанная из ДатаКонцаПериодаОтчета).
//
// Возвращаемое значение:
//  Соответствие или Неопределено. Ключи Соответствия идентифицируют физических лиц, а сопоставляемые с ними Значения -
//  Массивы Табличных документов (бланков). Неопределено будет возвращено, если отсутствует возможность сформировать
//  бланки при заданных параметрах.
//
Функция ПерсонифицированныеСведенияОЗастрахованныхЛицахДляПечати(ПараметрыПечати) Экспорт
	
	ИсточникОтчета = "РегламентированныйОтчетРасчетПоСтраховымВзносам";
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
	ИсточникОтчета, ПараметрыПечати.ДатаКонцаПериодаОтчета);
	
	Если НЕ ЗначениеЗаполнено(ИмяФормыОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ИмяФормыОтчета);
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыПечати.Вставить("ИсточникОтчета", ИсточникОтчета);
	ПараметрыПечати.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	
	Возврат ОтчетОбъект.ПерсонифицированныеСведенияОЗастрахованныхЛицахДляПечати(ПараметрыПечати);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции автозаполнения по данным ИБ конфигурации - потребителя БРО.

// Процедура получает из коллекции раздел отчета и проверяет, что он может быть заполнен в этом модуле
//
// Параметры:
//   Контейнер - Структура - данные регл. отчета.
//   ИмяРазделаБРО - Строка - имя раздела регл. отчета.
//
// Возвращаемое значение:
//   ТаблицаЗначений - разделы отчета.
//
Функция РазделБРО(Контейнер, ИмяРазделаБРО) Экспорт
	
	Если Не Контейнер.Свойство(ИмяРазделаБРО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделБРО = Контейнер[ИмяРазделаБРО];
	
	Если ТипЗнч(РазделБРО) <> Тип("ТаблицаЗначений") 
		И ТипЗнч(РазделБРО) <> Тип("ДанныеФормыКоллекция") Тогда
		// Не умеем такие обрабатывать.
		Возврат Неопределено;
	КонецЕсли;
	
	Если РазделБРО.Количество() = 0 Тогда
		// Не можем заполнить - должна быть как минимум одна страница,
		// предоставляющая перечень полей и типы данных в них.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РазделБРО;
	
КонецФункции

// Добавляет новую страницу.
//
Процедура ДобавитьСтраницуБРО(РазделБРО) Экспорт
	
	НоваяСтраница = РазделБРО.Добавить();
	Образец = РазделБРО[0];
	НоваяСтраница.Данные = ОбщегоНазначения.СкопироватьРекурсивно(Образец.Данные);
	
КонецПроцедуры

// Распаковывает показатели.
//
Функция РаспаковатьПоказателиБРО(СтраницаБРО) Экспорт
	
	// Техническая особенность БРО:
	// показатели хранятся внутри списка значений, в котором всегда одна строка.
	ХранилищеПоказателейБРО = СтраницаБРО.Данные;
	Если ХранилищеПоказателейБРО.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиБРО = ХранилищеПоказателейБРО[0].Значение;
	Если ТипЗнч(ПоказателиБРО) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоказателиБРО;
	
КонецФункции

// Помещает значение показателя на страницу.
//
Процедура ПоместитьЗначениеПоказателяНаСтраницуБРО(СтраницаБРО, НомерЯчейкиБРО, Значение) Экспорт
	
	ПоказателиБРО = РаспаковатьПоказателиБРО(СтраницаБРО);
	Если ПоказателиБРО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// БРО предоставляет контейнер, инициализированный номерами ячеек.
	Если Не ПоказателиБРО.Свойство(НомерЯчейкиБРО) Тогда
		Возврат;
	КонецЕсли;
	
	// В ходе заполнения нельзя менять тип значения в контейнере.
	ТекущееЗначение = ПоказателиБРО[НомерЯчейкиБРО];
	ДопустимыйТип   = ТипЗнч(ТекущееЗначение);
	
	Если ТипЗнч(Значение) = ДопустимыйТип Тогда
		ПоказателиБРО.Вставить(НомерЯчейкиБРО, Значение);
	Иначе
		// Очистка значения.
		ОписаниеТипов = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДопустимыйТип));
		ПоказателиБРО.Вставить(НомерЯчейкиБРО, ОписаниеТипов.ПривестиЗначение(Значение));
	КонецЕсли;
	
КонецПроцедуры

// Определяет вид государственного органа, в который сдается отчет переданного вида.
//
// Параметры:
//   ИмяОтчета - Строка - название регламентированного отчета, см. ИмяРеглОтчета().
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыКонтролирующихОрганов - вид государственного органа.
//
Функция ВидКонтролирующегоОргана(ИмяОтчета) Экспорт
	
	Возврат РегламентированнаяОтчетность.ВидКонтролирующегоОргана(ИмяОтчета);
	
КонецФункции

#Область ПроцедурыИФункцииСпискаЗадачБухгалтера

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с сервисом "Список задач
// бухгалтера".

// Описывает перечень требований, которые могут быть исполнены объектами БРО.
//
// Возвращаемое значение:
//  Соответствие - 
//   Ключ - Строка, имя требования (может содержать точку - ".")
//   Значение - Строка, имя регл. отчета
Функция РеглОтчетыИсполнителиТребований() Экспорт
	Возврат РегламентированнаяОтчетностьПовтИсп.РеглОтчетыИсполнителиТребований();
КонецФункции

// Описывает перечень задач бухгалтера (налогов, отчетов), которые могут быть исполнены объектами БРО.
//
// Возвращаемое значение:
//  Соответствие - 
//   Ключ - Строка, имя задачи (не содержит точку - ".")
//   Значение - Массив строк - имен регл. отчетов
Функция РеглОтчетыИсполнителиЗадачБухгалтера() Экспорт
	
	НалогиОтчеты = Новый Соответствие;
	
	Для Каждого Требование Из РеглОтчетыИсполнителиТребований() Цикл
		ИмяНалогаОтчета = ИмяНалогаОтчета(Требование.Ключ);
		РеглОтчеты = НалогиОтчеты[ИмяНалогаОтчета];
		Если РеглОтчеты = Неопределено Тогда
			РеглОтчеты = Новый Массив;
			НалогиОтчеты.Вставить(ИмяНалогаОтчета, РеглОтчеты);
		КонецЕсли;
		РеглОтчеты.Добавить(Требование.Значение);
	КонецЦикла;
	
	Возврат НалогиОтчеты;
	
КонецФункции

// Определяет, обрабатывает ли БРО указанное требование.
//
// Параметры:
//   Требование - Строка - имя требования (может содержать точку - ".").
//
// Возвращаемое значение:
//   Булево - признак обработки БРО указанных требований.
//
Функция ТребованиеОбрабатывается(Требование) Экспорт
	
	Возврат ИмяРеглОтчета(Требование) <> Неопределено;
	
КонецФункции

// Описывает форму нового или существующего регл. отчета, который позволяет выполнить требование
//
// Параметры:
//   Требование    - Строка - имя требования (может содержать точку - ".").
//   Организация   - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - ссылка на элемент справочника "РегистрацииВНалоговомОргане".
//   НачалоПериода - Дата - дата начала периода.
//   КонецПериода  - Дата - дата окончания периода.
//   Периодичность - ПеречислениеСсылка.Периодичность - периодичность.
//
// Возвращаемое значение:
//   Структура - содержит ключи:
//     * Имя - Строка - имя формы;
//     * Параметры - Структура - параметры формы.
//
Функция ОписаниеФормыРеглОтчета(Требование, Организация, РегистрацияВНалоговомОргане, Знач НачалоПериода, Знач КонецПериода, Знач Периодичность) Экспорт

	ИмяРеглОтчета = ИмяРеглОтчета(Требование);
	
	Если ИмяРеглОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Особые случаи отчетов, которые предоставляются не только по окончанию отчетного периода, но и на отдельные даты.
	Если Требование = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации" Тогда

		// Отчет всегда имеет периодичность год, но для вновь созданных организаций также предоставляется на 1 число месяца,
		// следующего за месяцем регистрации организации.
		Периодичность = Перечисления.Периодичность.Год;
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, НачалоПериода);
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, КонецПериода);

	КонецЕсли;
	
	ОписаниеФормыРеглОтчета = Новый Структура;
	ОписаниеФормыРеглОтчета.Вставить("Имя",       "");
	ОписаниеФормыРеглОтчета.Вставить("Параметры", Новый Структура);
		
	ЭкземплярыРеглОтчета = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(ИмяРеглОтчета, Организация, НачалоДня(КонецПериода),, РегистрацияВНалоговомОргане);
	
	Если ЭкземплярыРеглОтчета.Количество() > 0
	   И ИмяРеглОтчета = "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников" Тогда
		
		Для Каждого ЭкземплярРеглОтчета Из ЭкземплярыРеглОтчета Цикл

			// При создании новой организации отчетов о среднесписочной численности могут быть несколько:
			//  - по состоянию на 1 число месяца, следующего за месяцем регистрации;
			//  - по состоянию на 1 января за предыдущий календарный год.
			ЭтоМесячныйОтчет = Требование = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации";
			ОтчетПоСостояниюНаДату = ЭкземплярРеглОтчета.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ДатаПериод;

			Если (ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) <> 1)
			 ИЛИ (НЕ ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) = 1) Тогда
				
				ОписаниеФормыРеглОтчета.Имя = "Документ.РегламентированныйОтчет.ФормаОбъекта";
				
				ОписаниеФормыРеглОтчета.Параметры.Вставить("Ключ", ЭкземплярРеглОтчета);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЭкземплярыРеглОтчета.Количество() > 0 Тогда
		
		ОписаниеФормыРеглОтчета.Имя = "Документ.РегламентированныйОтчет.ФормаОбъекта";
		
		ОписаниеФормыРеглОтчета.Параметры.Вставить("Ключ", ЭкземплярыРеглОтчета[0]);
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ОписаниеФормыРеглОтчета.Имя) Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыРеглОтчета(
			ИмяРеглОтчета, Организация, РегистрацияВНалоговомОргане, НачалоПериода, КонецПериода, Периодичность);
	
		Если ПараметрыОткрытия = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		ОписаниеФормыРеглОтчета.Имя = "Отчет." + ИмяРеглОтчета + ".Форма." + ПараметрыОткрытия.мВыбраннаяФорма;
		ОписаниеФормыРеглОтчета.Параметры = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОткрытия);
		
		// Особые случаи.
		//
		Если Требование = "БухгалтерскаяОтчетность.2013_НекоммерческиеОрганизации" Тогда
			
			ОписаниеФормыРеглОтчета.Параметры.Вставить("ЭтоБалансНекоммерческойОрганизации", Истина);
			
		ИначеЕсли Требование = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации" Тогда
			            			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				Организация, , "ДатаРегистрации");
			
            ОписаниеФормыРеглОтчета.Параметры.Вставить("ДатаРегистрацииОрганизации", ОргСведения.ДатаРегистрации);
			
        КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеФормыРеглОтчета;
	
КонецФункции

// Получает данные, сохраненные в регл. отчете - о суммах, которые следует уплатить по декларации.
//
// Параметры:
//   Требование - Строка - имя требования (может содержать точку - ".").
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - ссылка на элемент справочника "РегистрацииВНалоговомОргане".
//   ПериодДекларации - Дата - дата окончания периода (без времени).
//
// Возвращаемое значение:
//   Неопределено,
//   ТаблицаЗначений - описанная в НовыйТаблицаДанныхРеглОтчета().
//
Функция ДанныеРеглОтчетаДляУплатыНалога(Требование, Организация, РегистрацияВНалоговомОргане, ПериодДекларации) Экспорт
	
	ИмяРеглОтчета = ИмяРеглОтчета(Требование);
	
	Если ИмяРеглОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭкземплярРеглОтчета = АктуальныйОтчет(ИмяРеглОтчета, Организация, ПериодДекларации, РегистрацияВНалоговомОргане);
	
	Если ЗначениеЗаполнено(ЭкземплярРеглОтчета) Тогда
		Платежи = Отчеты[ИмяРеглОтчета].ДанныеРеглОтчета(ЭкземплярРеглОтчета);
	КонецЕсли;
	
	Если Платежи = Неопределено Тогда
		Платежи = НовыйТаблицаДанныхРеглОтчета();
	КонецЕсли;
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("Ссылка",              ЭкземплярРеглОтчета);
	ДанныеРеглОтчета.Вставить("ДатаПодписи",         ЭкземплярРеглОтчета.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("КодНалоговогоОргана", ЭкземплярРеглОтчета.КодНалоговогоОргана);
	ДанныеРеглОтчета.Вставить("Платежи",             Платежи);
	
	Возврат ДанныеРеглОтчета;
	
КонецФункции

// Возвращает последний отчет за налоговый период
//
// Параметры:
//  ИсточникОтчета - Строка - наименование регламентированного отчета (совпадает с именем объекта метаданных)
//  Организация - СправочникСсылка.Организации
//  ПериодДекларации  - Дата - правая граница отчетного периода
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ФормаОтчета - Строка
//
// Возвращаемое значение:
//   РегламентированныйОтчетСсылка
//
Функция АктуальныйОтчет(ИсточникОтчета, Организация, ПериодДекларации, РегистрацияВНалоговомОргане = Неопределено, ФормаОтчета = "") Экспорт
	
	АктуальныйОтчет = Документы.РегламентированныйОтчет.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда
		Возврат АктуальныйОтчет;
	КонецЕсли;
	
	КорректирующиеОтчеты = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
		ИсточникОтчета,
		Организация,
		НачалоДня(ПериодДекларации),
		Истина,
		РегистрацияВНалоговомОргане,
		ФормаОтчета);
	
	Если КорректирующиеОтчеты.Количество() > 0 Тогда
		
		АктуальныйОтчет = КорректирующиеОтчеты[0];
		
	Иначе
		
		ПервичныеОтчеты = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
			ИсточникОтчета,
			Организация,
			НачалоДня(ПериодДекларации),
			Ложь,
			РегистрацияВНалоговомОргане,
			ФормаОтчета);
		
		Если ПервичныеОтчеты.Количество() > 0 Тогда
			АктуальныйОтчет = ПервичныеОтчеты[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат АктуальныйОтчет;
	
КонецФункции

// Получает данные, сохраненные в уведомлении/уведомлениях - о суммах, которые следует уплатить по декларации.
//
// Параметры:
//   Требование  - Строка - имя требования (может содержать точку - ".").
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   Конец       - Дата - дата окончания периода (без времени).
//
// Возвращаемое значение:
//   Неопределено,
//   ТаблицаЗначений - описанная в НовыйТаблицаДанныхРеглОтчета().
//
Функция ДанныеУведомленияДляУплатыНалога(Требование, Организация, Конец) Экспорт
	РегНО = Неопределено;
	Платежи = Документы.УведомлениеОСпецрежимахНалогообложения.ДанныеУведомления(Требование, Организация, РегНО, Конец);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("Ссылка",              Неопределено);
	ДанныеРеглОтчета.Вставить("ДатаПодписи",         Неопределено);
	ДанныеРеглОтчета.Вставить("КодНалоговогоОргана", РегНО);
	ДанныеРеглОтчета.Вставить("Платежи",             Платежи);
	
	Возврат ДанныеРеглОтчета;
КонецФункции

// Информирует о необходимости платить торговый сбор в указанном периоде (по наличию/отсутствию уведомлений по форме ТС-1/ТС-2).
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   НачалоПериода - Дата - дата начала периода (без времени).
//   КонецПериода  - Дата - дата окончания периода (без времени).
//
// Возвращаемое значение:
//   Булево - Истина - организация должно платить торговый сбор в периоде (есть соответствующие уведомления),
//            Ложь - иначе.
//
Функция ПлательщикТорговогоСбора(НачалоПериода, КонецПериода, Организация) Экспорт
	НачалоПериодаПарам = ?(ЗначениеЗаполнено(НачалоПериода), НачалоДня(НачалоПериода), НачалоПериода);
	КонецПериодаПарам = ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода);
	Возврат Документы.УведомлениеОСпецрежимахНалогообложения.ПлательщикТорговогоСбора(НачалоПериодаПарам, КонецПериодаПарам, Организация);
КонецФункции 

// Описывает структуру таблицы значений с данными регл. отчета
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные регл. отчета.
//
Функция НовыйТаблицаДанныхРеглОтчета() Экспорт
	
	ТаблицаДанныхРеглОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Период",	  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("ОКАТО",  	  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("КБК",       Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Аванс",     Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Агент",     Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанныхРеглОтчета;
	
КонецФункции

// Предоставляет пользовательское представление формы регл. отчета.
//
// Параметры:
//   Требование   - Строка - имя требования (может содержать точку - ".").
//   ПериодОтчета - Дата - дата окончания периода (без времени).
//
// Возвращаемое значение:
//   Строка - представление формы регламентированного отчета.
//
Функция ПредставлениеФормыРегламентированногоОтчета(Требование, ПериодОтчета) Экспорт

	ИмяРеглОтчета = ИмяРеглОтчета(Требование);
	
	Если ИмяРеглОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФормыРеглОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИмяРеглОтчета, ПериодОтчета);
	
	Возврат Метаданные.Отчеты[ИмяРеглОтчета].Формы[ИмяФормыРеглОтчета].Синоним;
	
КонецФункции

// Определяет список регл. отчетов, которые не предназначены для выполнения каких-либо формализованных требований.
// Служит для проверки, что в календаре бухгалтера внесены все требования, которые может исполнять программа.
// 
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция РеглОтчетыСверхТребований() Экспорт
	
	РеглОтчетыСверхТребований = Новый Массив;
	
	РеглОтчеты = Новый Соответствие;
	// Составим список всех отчетов, затем исключим те, которые участвуют в выполнении тех или иных требований.
	// То, что останется - сверх требований.
	// Исключенными считаем элементы соответствия с значением Ложь.
	
	СписокОтчетов = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСписокРегламентированныхОтчетов();
	Для Каждого ЭлементСписка Из СписокОтчетов Цикл
		РеглОтчеты.Вставить(ЭлементСписка.Значение, Истина);
	КонецЦикла;
	
	ИсполнителиТребований = РеглОтчетыИсполнителиТребований();
	Для Каждого ЭлементСписка Из ИсполнителиТребований Цикл
		РеглОтчеты.Вставить(ЭлементСписка.Значение, Ложь);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из РеглОтчеты Цикл
		Если ЭлементСписка.Значение = Истина Тогда
			РеглОтчетыСверхТребований.Добавить(ЭлементСписка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеглОтчетыСверхТребований;
	
КонецФункции

// Определяет имя регл. отчета, который позволяет исполнить требование.
//
// Параметры:
//   Требование - Строка - имя требования (может содержать точку - ".").
//   ИсполнителиТребований - Соответствие - возвращаемое РеглОтчетыИсполнителиТребований().
//                           Следует передавать, если функция используется многократно (в цикле).
//
// Возвращаемое значение:
//   Строка - имя регламентированного отчета.
//
Функция ИмяРеглОтчета(Знач Требование, ИсполнителиТребований = Неопределено) Экспорт
	
	Требование = ВРег(Требование);
	
	Если ИсполнителиТребований = Неопределено Тогда
		ИсполнителиТребований = РеглОтчетыИсполнителиТребований();
	КонецЕсли;
	
	РегламентированныйОтчет = ИсполнителиТребований[Требование];
	
	Если РегламентированныйОтчет = Неопределено Тогда
		
		ИмяНалогаОтчета = ИмяНалогаОтчета(Требование);
		РегламентированныйОтчет = ИсполнителиТребований[ИмяНалогаОтчета];
		
	КонецЕсли;
	
	Возврат РегламентированныйОтчет;
	
КонецФункции

// Описывает регл. отчеты, экземпляры которых присутствуют в информационной базе.
// Такие отчеты должны быть видны в списке экземпляров отчетов, несмотря на настройки конфигурации.
//
// Параметры:
//   Организации - СправочникСсылка.Организации - ссылка на организацию.
//   РеглОтчеты - Массив - массив строк имен регл. отчетов, среди которых надо найти те, которые нельзя скрывать.
//
// Возвращаемое значение:
//   Массив строк - имена объектов метаданных "Отчет".
//
Функция РеглОтчетыКоторыеНельзяСкрыватьНастройкамиКонфигурации(Организации, РеглОтчеты = Неопределено) Экспорт
	
	НельзяСкрыватьОтчеты = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Если РеглОтчеты = Неопределено Тогда
		Запрос.УстановитьПараметр("РеглОтчеты",             Новый Массив);
		Запрос.УстановитьПараметр("НетОтбораПоРеглОтчетам", Истина);
	Иначе
		Запрос.УстановитьПараметр("РеглОтчеты",             РеглОтчеты);
		Запрос.УстановитьПараметр("НетОтбораПоРеглОтчетам", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегламентированныйОтчет.ИсточникОтчета КАК ИмяОтчета
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация В(&Организации)
	|	И (&НетОтбораПоРеглОтчетам
	|			ИЛИ РегламентированныйОтчет.ИсточникОтчета В (&РеглОтчеты))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НельзяСкрыватьОтчеты.Вставить(Выборка.ИмяОтчета);
	КонецЦикла;
	
	Возврат НельзяСкрыватьОтчеты;
	
КонецФункции

// Определяет имя задачи бухгалтера (налога, отчета) по имени требования.
// Имя требования начинается с имени задач. Имя задачи отделено точкой - "."
//
// Параметры:
//   Требование - Строка - имя требования (содержит точку - ".").
//
// Возвращаемое значение:
//   Строка - имя задачи (не содержит точку - ".").
//
Функция ИмяНалогаОтчета(Требование) Экспорт
	
	ПозицияТочки = СтрНайти(Требование, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат Требование;
	Иначе 
		Возврат Лев(Требование, ПозицияТочки - 1);
	КонецЕсли;
	
КонецФункции

// Процедура получает ссылки на сохраненные регламентированные отчеты заданного вида.
// В переданную таблицу ПараметрыРеглОтчетов добавляется колонка Документы с колонками:
//  * Ссылка                   - ДокументСсылка.РегламетированныйОтчет - Ссылка на отчет.
//  * Дата                     - Дата - Дата подписи регламентированного отчета.
//  * Статус                   - Строка - Описание статуса сдачи отчета.
//  * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности - Статус отправки через 1С-Отчетность.
//  * НаименованиеОтчета       - Строка - Пользовательское представление отчета.
//  * ФинансовыйПериод         - Строка - Пользовательское представление периода отчета.
//  * ВариантОтчета            - Строка - Описание варианта отчета (П - первичный, К/N - корректировочный).
//  * ПредставлениеКонтролирующегоОргана - Строка - Название контролирующего органа, в который предоставляется отчет.
//  * Комментарий                        - Строка - Пользовательский комментарий к отчету.
//
// Ссылки на регл. отчеты отсортированы в хронологическом порядке по убыванию.
//
//  Параметры:
//   * ПараметрыРеглОтчетов - ТаблицаЗначений - Определяет параметры отбора отчетов:
//   	** ИсточникОтчета      - Строка - Наименование регламентированного отчета (совпадает с именем объекта метаданных).
//   	** Организация         - СправочникСсылка.Организации - Организация отчета.
//   	** ДатаОкончания       - Дата (без времени) - Дата окончания отчетного периода (правая граница отчетного периода).
//   	** РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - Налоговый орган.
//   	** Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Может не заполняться, но должна присутствовать в таблице.
//   * ОтборПоВыбраннойФормеРеглОтчета - Булево - Признак, нужно ли, чтобы отчет был по форме, действующей в отчетном периоде.
//
Процедура ЗаполнитьСсылкиНаРеглОтчеты(ПараметрыРеглОтчетов, ОтборПоВыбраннойФормеРеглОтчета = Ложь) Экспорт
	
	// Индекс нужен для группировки нескольких документов по одному набору параметров.
	ПараметрыРеглОтчетов.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	ПараметрыРеглОтчетов.Колонки.Добавить("ВыбраннаяФорма", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
		
		ПараметрыРеглОтчета.Индекс = ПараметрыРеглОтчетов.Индекс(ПараметрыРеглОтчета);
		
		Если ОтборПоВыбраннойФормеРеглОтчета Тогда
			// Необходимо найти регл отчеты с актуальной в периоде формой.
			
			ВыбраннаяФорма = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
				ПараметрыРеглОтчета.ИсточникОтчета, ПараметрыРеглОтчета.ДатаОкончания);
			
			ПараметрыРеглОтчета.ВыбраннаяФорма = ?(ВыбраннаяФорма = Неопределено, "", ВыбраннаяФорма);
			
		Иначе
			// Необходимо найти отчеты с любой формой, не обязательно самой актуальной.
			
			ПараметрыРеглОтчета.ВыбраннаяФорма = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПараметрыРеглОтчетов", ПараметрыРеглОтчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыРеглОтчетов.Индекс КАК Индекс,
	|	ПараметрыРеглОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация КАК Организация,
	|	ПараметрыРеглОтчетов.ДатаОкончания КАК ДатаОкончания,
	|	ВЫРАЗИТЬ(ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане КАК Справочник.РегистрацииВНалоговомОргане) КАК РегистрацияВНалоговомОргане,

	|	ПараметрыРеглОтчетов.Правило КАК Правило
	|ПОМЕСТИТЬ ПараметрыРеглОтчетов
	|ИЗ
	|	&ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ИсточникОтчета,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыРеглОтчетов.Индекс КАК Индекс,
	|	РегламентированныйОтчет.Ссылка КАК Ссылка,
	|	РегламентированныйОтчет.Вид КАК Вид,
	|	РегламентированныйОтчет.Дата КАК ДатаОтчета,
	|	РегламентированныйОтчет.ДатаПодписи КАК Дата,
	|	ПараметрыРеглОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация КАК Организация,
	|	РегламентированныйОтчет.ДатаНачала КАК ДатаНачала,
	|	ПараметрыРеглОтчетов.ДатаОкончания КАК ДатаОкончания,
	|	ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РегламентированныйОтчет.ВыбраннаяФорма КАК ВыбраннаяФорма,
	|	ПараметрыРеглОтчетов.Правило КАК Правило,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.Статус, """""""") КАК Статус,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности, ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)) КАК СостояниеСдачиОтчетности,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.НаименованиеОтчета, """") КАК НаименованиеОтчета,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.ФинансовыйПериод, """") КАК ФинансовыйПериод,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.ВариантОтчета, """") КАК ВариантОтчета,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.ПредставлениеКонтролирующегоОргана, """") КАК ПредставлениеКонтролирующегоОргана,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.Комментарий, """") КАК Комментарий
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|		ПО РегламентированныйОтчет.Организация = ПараметрыРеглОтчетов.Организация
	|			И РегламентированныйОтчет.ИсточникОтчета = ПараметрыРеглОтчетов.ИсточникОтчета
	|			И РегламентированныйОтчет.ДатаОкончания = ПараметрыРеглОтчетов.ДатаОкончания
	|			И (ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|				ИЛИ РегламентированныйОтчет.КодНалоговогоОргана = ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО РегламентированныйОтчет.Организация = ЖурналОтчетовСтатусы.Организация
	|			И РегламентированныйОтчет.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыРеглОтчетов.Индекс,
	|	УведомлениеОСпецрежимахНО.Ссылка,
	|	0,
	|	УведомлениеОСпецрежимахНО.Дата,
	|	УведомлениеОСпецрежимахНО.ДатаПодписи,
	|	ПараметрыРеглОтчетов.ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ПараметрыРеглОтчетов.ДатаОкончания,
	|	ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане,
	|	УведомлениеОСпецрежимахНО.ИмяФормы,
	|	ПараметрыРеглОтчетов.Правило,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.СтатусОтправки, """"""""),
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.СостояниеСдачиОтчетности, ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)),
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.Наименование, """"),
	|	"""",
	|	0,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.ПредставлениеКонтролирующегоОргана, """"),
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.Комментарий, """")
	|ИЗ
	|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|		ПО УведомлениеОСпецрежимахНО.Организация = ПараметрыРеглОтчетов.Организация
	|			И УведомлениеОСпецрежимахНО.ИмяОтчета = ПараметрыРеглОтчетов.ИсточникОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналУведомленийСтатусы
	|		ПО УведомлениеОСпецрежимахНО.Организация = ЖурналУведомленийСтатусы.Организация
	|			И УведомлениеОСпецрежимахНО.Ссылка = ЖурналУведомленийСтатусы.Ссылка
	|			И (ЖурналУведомленийСтатусы.СтраницаЖурнала = ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Уведомления))
	|ГДЕ
	|	НЕ УведомлениеОСпецрежимахНО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс,
	|	ДатаОтчета УБЫВ,
	|	Вид УБЫВ";
	
	ПараметрыРеглОтчетов.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	МетаданныеЖурналОтчетовСтатусы = Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы;
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка", МетаданныеЖурналОтчетовСтатусы.Измерения.Ссылка.Тип);
	ТаблицаДокументы.Колонки.Добавить("Дата",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("СостояниеСдачиОтчетности",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	ТаблицаДокументы.Колонки.Добавить("ДатаНачала",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("ДатаОкончания",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("НаименованиеОтчета", МетаданныеЖурналОтчетовСтатусы.Реквизиты.НаименованиеОтчета.Тип);
	ТаблицаДокументы.Колонки.Добавить("ФинансовыйПериод",   МетаданныеЖурналОтчетовСтатусы.Реквизиты.ФинансовыйПериод.Тип);
	ТаблицаДокументы.Колонки.Добавить("ВариантОтчета",      МетаданныеЖурналОтчетовСтатусы.Реквизиты.ВариантОтчета.Тип);
	ТаблицаДокументы.Колонки.Добавить("РегистрацияВНалоговомОргане",        Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаДокументы.Колонки.Добавить("ПредставлениеКонтролирующегоОргана", МетаданныеЖурналОтчетовСтатусы.Реквизиты.ПредставлениеКонтролирующегоОргана.Тип);
	ТаблицаДокументы.Колонки.Добавить("Комментарий",                        МетаданныеЖурналОтчетовСтатусы.Реквизиты.Комментарий.Тип);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Поиск = Новый Структура("Индекс");
	
	Для каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
				
		ПараметрыРеглОтчета.Документы = ТаблицаДокументы.СкопироватьКолонки();
		Поиск.Индекс = ПараметрыРеглОтчета.Индекс;
		
		Пока Выборка.НайтиСледующий(Поиск) Цикл
						
			Если ОтборПоВыбраннойФормеРеглОтчета
				И ПараметрыРеглОтчета.ВыбраннаяФорма <> СокрЛП(Выборка.ВыбраннаяФорма) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыРеглОтчета.Документы.Добавить(), Выборка);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет пользовательское представление состояния передачи в учреждение отчета или иного документа
// - при передаче в электронном виде - состояние отправки;
// - при передаче иным способом - статус, установленный пользователем.
//
// Параметры:
//  Документ - ДокументСсылка, СправочникСсылка - отправляемый документ (отчет или уведомление).
// 
// Возвращаемое значение:
//  Строка - представление состояния передачи в учреждение.
//
Функция ПредставлениеСостоянияДокумента(Документ) Экспорт
	
	Состояние = СостояниеДокумента(Документ);
	Возврат Состояние.Представление;
	
КонецФункции

// Определяет сведения о состоянии передачи в учреждение отчета или иного документа
// - при передаче в электронном виде - состояние отправки;
// - при передаче иным способом - статус, установленный пользователем.
//
// Параметры:
//  Документ - ДокументСсылка, СправочникСсылка - отправляемый документ (отчет или уведомление).
// 
// Возвращаемое значение:
//  Структура
//    * Представление - Строка - представление состояния передачи в учреждение.
//    * Сдано         - Булево - Истина, если отчет сдан любым способом.
//    * Отправлено    - Булево - Истина, если отчет отправлен в учреждение в электронном виде.
//
Функция СостояниеДокумента(Документ) Экспорт
	
	Состояние = ИнтерфейсыВзаимодействияБРОКлиентСервер.НовыйСостояниеДокумента();
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Состояние;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Состояние;
	КонецЕсли;
	
	СостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Документ);
	
	Если СостояниеОтправки = Неопределено Тогда
		Возврат Состояние;
	КонецЕсли;
	
	Если Не СостояниеОтправки.Свойство("ТекущийЭтапОтправки") Тогда
		Возврат Состояние;
	КонецЕсли;
	
	ЭтапОтправки = СостояниеОтправки.ТекущийЭтапОтправки;
	
	Если ЭтапОтправки.Свойство("ТекстНадписи") Тогда
		Состояние.Представление = ЭтапОтправки.ТекстНадписи;
	КонецЕсли;
	
	Если Не ЭтапОтправки.Свойство("СостояниеСдачиОтчетности") Тогда
		Возврат Состояние;
	КонецЕсли;
	
	СостояниеСдачиОтчетности = ЭтапОтправки.СостояниеСдачиОтчетности;
	
	Если ЭтапОтправки.Свойство("ТекстСтатуса") Тогда
		Состояние.Статус = ЭтапОтправки.ТекстСтатуса;
	КонецЕсли;
	
	ДопускаетсяРучнойСтатус = ДопускаетсяРучнойСтатус(Документ, Состояние.Статус, СостояниеСдачиОтчетности);
	Если ДопускаетсяРучнойСтатус И Состояние.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой() Тогда
		
		// Статус, установленный вручную
		
		Состояние.ВРаботе       = Истина;
		Состояние.Представление = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаВРаботе();
		
	ИначеЕсли ДопускаетсяРучнойСтатус И Состояние.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой() Тогда
		
		// Статус, установленный вручную
		
		Состояние.Сдано         = Истина;
		Состояние.Представление = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаСдано();
		
	Иначе
		
		// Статус, установленный при автоматической отправке
		Состояние.Сдано      = (СостояниеСдачиОтчетности  = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота);
		Состояние.Отправлено = (СостояниеСдачиОтчетности <> Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат);
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Записывает в регистр сведений "Журнал отправок в контролирующие органы" значение статуса отправки,
// установленного вручную для объекта регламентированной отчетности, отображаемого на закладке "Уведомления"
// формы "1С-Отчетность".
//
// Параметры:
//   Документ - ДокументСсылка, СправочникСсылка - ссылка на объект регламентированной отчетности.
//   Статус - Строка - сохраняемый статус.
//
Процедура СохранитьСтатусОтправкиУведомления(Документ, Статус) Экспорт
	
	ВыборкаЖОКО = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.Выбрать(Новый Структура("Ссылка", Документ));
	
	Если ВыборкаЖОКО.Следующий() Тогда
		
		Если ДопускаетсяРучнойСтатус(Документ, Статус, ВыборкаЖОКО.СостояниеСдачиОтчетности) Тогда
			
			ЗаписьЖОКО = ВыборкаЖОКО.ПолучитьМенеджерЗаписи();
			ЗаписьЖОКО.СтатусОтправки = Статус;
			ЗаписьЖОКО.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет основные сведения о регламентированном отчете или уведомлении.
//
// Параметры:
//   Документ - ДокументСсылка - ссылка на регл. отчет.
//
// Возвращаемое значение:
//   Структура - структура
//				 из ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов()
//               дополненная ключом "ИсточникОтчета" - имя отчета или полное имя объекта метаданных
//				 (для отчетов не обрабатываемых БРО).
//
Функция СвойстваОтчета(Документ) Экспорт
	
	Результат = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов();
	Результат.Вставить("ИсточникОтчета", "");
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	СвойстваОтчета = КонтекстЭДОСервер.СвойстваОбъектовФормы1СОтчетность(Документ);
	Если СвойстваОтчета = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, СвойстваОтчета);
	Результат.ДатаОкончанияОП = РелевантнаяДатаОкончанияОтчетногоПериода(Результат);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ИсточникОтчета = РегламентированнаяОтчетностьВызовСервера.ИсточникРегламентированногоОтчета(Документ);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ВидУведомления = УведомлениеОСпецрежимахНалогообложенияВызовСервера.ВидУведомления(Документ);
		ИсточникОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
						 ВидУведомления);
	Иначе
		ИсточникОтчета = Документ.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	Результат.ИсточникОтчета = ИсточникОтчета;
	
	Возврат Результат;
	
КонецФункции

Функция ДопускаетсяРучнойСтатус(Ссылка, Статус, СостояниеСдачиОтчетности) Экспорт
	
	// Параметры - одноименные свойства записи регистра ЖурналОтчетовСтатусы
	
	Если Не РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(СостояниеСдачиОтчетности) Тогда
		// Обрабатывается подсистемой ЭДОсКО
		Возврат Ложь;
	КонецЕсли;
	
	РучныеСтатусы = РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(Ссылка);
	Если РучныеСтатусы.Найти(Статус) = Неопределено Тогда
		// Не обрабатывается подсистемой ручных статусов
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру с параметрами по умолчанию для открытия формы регламентированного отчета.
// 
// Параметры:
//	 ИмяРеглОтчета - Строка - Имя регламентированного отчета (совпадает с именем объекта метаданных).
//   Организация   - СправочникСсылка.Организации - Организации, по которой формируется отчет.
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - Регистрация в налоговом органе. Может быть не заполнена.
//   НачалоПериода - Дата - Дата начала периода.
//   КонецПериода  - Дата - Дата окончания периода.
//   Периодичность - ПеречислениеСсылка.Периодичность - Периодичность предоставления отчета.
//
// Возвращаемое значение:
//	Структура или Неопределено - Параметры открытия формы или Неопределено, если отчет не доступен.
//
Функция ПараметрыОткрытияФормыРеглОтчета(ИмяРеглОтчета, Организация, РегистрацияВНалоговомОргане, НачалоПериода, КонецПериода, Периодичность) Экспорт

	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИмяРеглОтчета);
	
	Если НЕ ПравоДоступаКОтчету = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяФормыРеглОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
		ИмяРеглОтчета, КонецПериода);
	
	Если НЕ ЗначениеЗаполнено(ИмяФормыРеглОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("мДатаНачалаПериодаОтчета", НачалоПериода);
	Параметры.Вставить("мДатаКонцаПериодаОтчета",  КонецПериода);
	Параметры.Вставить("мПериодичность",           Периодичность);
	Параметры.Вставить("Организация",              Организация);
	Параметры.Вставить("НалоговыйОрган",           РегистрацияВНалоговомОргане);
	Параметры.Вставить("мВыбраннаяФорма",          ИмяФормыРеглОтчета);
	Параметры.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
	Параметры.Вставить("БезОткрытияФормы",         Ложь);
	Параметры.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", Истина);

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированныхОтчетов

// Выгружает сохраненный регламентированный отчет без открытия формы в соответствии с форматом выгрузки.
// Выгрузка без открытия формы возможна только при условии, что данный отчет ее поддерживает.
//
// Параметры:
//   СохраненныйОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регл. отчет.
//   ДополнительныеПараметрыВыгрузки - Структура - необязательный параметр, используемый для передачи
//												   дополнительных параметров выгрузки регламентированного отчета:
//	   * РеглОтчетВыгружаетсяВБанк - Булево - признак выгрузки регламентированного отчета в кредитную организацию.
//											  Истина - регламентированный отчет выгружается в кредитную организацию.
//											  Ложь - регламентированный отчет выгружается в гос. орган.
//											  Используется при выгрузке следующих отчетов:
//											  - "РегламентированныйОтчетБухОтчетность",
//											  - "РегламентированныйОтчетБухОтчетностьМП".
//     * КешСхемВыгрузки - Структура - для оптимизации кешированием.
//     * Отбор - Структура - ключ = имя поля отбора; значение = значение отбора.
//
// Возвращаемое значение:
//   Структура - результат выгрузки (см. РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета()).
//
Функция ВыгрузитьРегламентированныйОтчет(СохраненныйОтчет, ДополнительныеПараметрыВыгрузки = Неопределено) Экспорт
	
	Результат = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	
	Если ТипЗнч(СохраненныйОтчет) <> Тип("ДокументСсылка.РегламентированныйОтчет")
	 ИЛИ СохраненныйОтчет.Пустая() Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
			НСтр("ru = 'Неверное значение сохраненного регламентированного отчета для выгрузки'"));
		
		Возврат Результат;
		
	КонецЕсли;
	
	РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СохраненныйОтчет,
		"Организация, ИсточникОтчета, ВыбраннаяФорма, КодНалоговогоОргана, ДатаНачала,
		| ДатаОкончания, ДатаПодписи, НаименованиеОтчета, ПредставлениеПериода");
	
	Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(РеквизитыОтчета.ИсточникОтчета,
		 РеквизитыОтчета.ВыбраннаяФорма).ВыгрузкаНаСервере Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выгрузка отчета %1 за %2 возможна только в форме, автоматическая выгрузка не поддерживается'"),
				РеквизитыОтчета.НаименованиеОтчета,
				РеквизитыОтчета.ПредставлениеПериода));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(
		РеквизитыОтчета.ИсточникОтчета,
		РеквизитыОтчета.ВыбраннаяФорма);
	
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("СохраненныйОтчет", СохраненныйОтчет);
	ПараметрыВыгрузки.Вставить("ИсточникОтчета", РеквизитыОтчета.ИсточникОтчета);
	ПараметрыВыгрузки.Вставить("ВыбраннаяФорма", РеквизитыОтчета.ВыбраннаяФорма);
	ПараметрыВыгрузки.Вставить("РезультатВыгрузки", Результат);
	
	Если ТипЗнч(ДополнительныеПараметрыВыгрузки) = Тип("Структура")
	   И ЗначениеЗаполнено(ДополнительныеПараметрыВыгрузки) Тогда
		
		Для Каждого ДополнительныйПараметрВыгрузки Из ДополнительныеПараметрыВыгрузки Цикл
		
			ПараметрыВыгрузки.Вставить(ДополнительныйПараметрВыгрузки.Ключ,
									   ДополнительныйПараметрВыгрузки.Значение);
		
		КонецЦикла;
	
	КонецЕсли;
			
	ТаблицаСообщений = Неопределено;
	
	ДанныеВыгрузки = ОтчетОбъект.УниверсальнаяВыгрузка(ПараметрыВыгрузки);
	
	Если ТипЗнч(ДанныеВыгрузки) = Тип("Структура") Тогда
		
		ДанныеВыгрузки.Свойство("ТаблицаСообщений", ТаблицаСообщений);
		
	ИначеЕсли ТипЗнч(ДанныеВыгрузки) = Тип("Массив") Тогда
		
		Для Каждого ЭлементДанных Из ДанныеВыгрузки Цикл
			
			Если ТипЗнч(ЭлементДанных) = Тип("Структура")
			   И ЭлементДанных.Свойство("ТаблицаСообщений", ТаблицаСообщений) Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаСообщений) <> Тип("ТаблицаЗначений") Тогда
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ШаблонСообщения = НСтр(
			"ru = 'Формат результата выгрузки регламентированного отчета %1 по форме %2 не соответствует ожидаемому'",
			КодОсновногоЯзыка);
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			РеквизитыОтчета.ИсточникОтчета, РеквизитыОтчета.ВыбраннаяФорма);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выгрузка регламентированного отчета без открытия формы.Обработка результата'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,
			СохраненныйОтчет,
			СообщениеОбОшибке);
			
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецЕсли;
	
	Для Каждого СтрокаОшибки Из ТаблицаСообщений Цикл
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат, СтрокаОшибки.Описание);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для переданного регламентированного отчета получает файлы документооборота с ФНС, в котором участвовал этот отчет.
//
// Параметры:
//  РегламентированныйОтчет - ДокументСсылка.РегламентированныйОтчет - отчет, по которому происходило электронное взаимодействие с ФНС.
//
// Возвращаемое значение:
//   Структура - описание архива с файлами отчета, квитанций и ЭЦП:
//		* ИмяФайла - имя архива с файлами;
//      * Адрес - адрес временного хранилища, куда был помещен файл архива;
//      * Всего - количество файлов в архиве;
//      * ОписаниеОшибки - если заполнено, то содержит текст ошибки, из-за которой не удалось сформировать архив.
//   ВключитьДополнительныеСведения - Булево - Если Истина, то в выгрузку добавляются pdf-файлы квитанций и извещение о вводе
//
Функция ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет, ВключитьДополнительныеСведения = Ложь) Экспорт
	
	СвойстваПакета = Новый Структура();
	СвойстваПакета.Вставить("ОписаниеОшибки", "");
	СвойстваПакета.Вставить("ИмяФайла",       "");
	СвойстваПакета.Вставить("Адрес",          "");
	СвойстваПакета.Вставить("Всего",          0);
	
	Если Не ЗначениеЗаполнено(РегламентированныйОтчет) Тогда
		СвойстваПакета.ОписаниеОшибки = НСтр("ru = 'Нет отчета для выгрузки!'");
		Возврат СвойстваПакета;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	// По ссылке на регламентированный отчет получаем ссылку на набор файлов (документооборот),
	// который участвовал в электронном взаимодействии с ФНС.
	
	СведенияПоОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(РегламентированныйОтчет);
	ВидКонтролирующегоОргана = КонтекстЭДОСервер.ТипКонтролирующегоОргана(СведенияПоОбъекту.ВидКонтролирующегоОргана);
	
	// Определеяем последнюю отправку.
	Отправка = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчета(ВидКонтролирующегоОргана, РегламентированныйОтчет);
	
	// Проверяем готовность документооборота к извлечению из базы.
	Если Не ЗначениеЗаполнено(Отправка) Тогда
		СвойстваПакета.ОписаниеОшибки = НСтр("ru = 'Нет информации для выгрузки!'");
		Возврат СвойстваПакета;
	КонецЕсли;
	
	ЦиклыОбмена = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отправка);
	КлючУникальности = Неопределено; // удалять после первого же запроса сервера с клиента
	
	СтатистикаПоЦиклам = КонтекстЭДОСервер.ПолучитьВыгружаемыеПакетыПоДокументооборотамСдачиОтчетностиВФНС(
		ЦиклыОбмена, 
		КлючУникальности, 
		Истина, 
		ВключитьДополнительныеСведения);
		
	РезультатЦО = СтатистикаПоЦиклам.Получить(Отправка);
	Если ТипЗнч(РезультатЦО) = Тип("Строка") Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при получении информации о документообороте!
								|%1'");
		СвойстваПакета.ОписаниеОшибки = СтрШаблон(ТекстОшибки, РезультатЦО);
		Возврат СвойстваПакета;
	КонецЕсли;
	
	Если РезультатЦО.ВАрхиве > 0 Тогда
		СвойстваПакета.ОписаниеОшибки = НСтр("ru = 'Часть файлов перемещена в архив. Не могу продолжить выгрузку!'");
		Возврат СвойстваПакета;
	КонецЕсли;
	
	// Извлекаем файлы, относящиеся к документообороту.
	Пакеты = КонтекстЭДОСервер.ПолучитьВыгружаемыеПакетыПоДокументооборотамСдачиОтчетностиВФНС(
		ЦиклыОбмена, 
		КлючУникальности, 
		Ложь, 
		ВключитьДополнительныеСведения);

	Пакет = Пакеты[Отправка]; // Соответствие: Ключ - Цикл обмена, Значение - Структура со свойствами.
	Если ТипЗнч(Пакет) = Тип("Строка")  Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при получении данных из информационной базы!
								|%1'");
		СвойстваПакета.ОписаниеОшибки = СтрШаблон(ТекстОшибки, Пакет);
		Возврат СвойстваПакета;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СвойстваПакета, Пакет);

	Возврат СвойстваПакета;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатногоБланкаРегламентированныхОтчетов

// Формирует печатный бланк без штрихкода PDF417 сохраненного регламентированного отчета без открытия формы.
//
// Параметры:
//   СохраненныйОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регламентированный отчет.
//
// Возвращаемое значение:
//   Структура - содержит ключи:
//     * АдресПечатногоБланка - Строка - адрес во временном хранилище, в котором располагается в формате
//										 PDF сформированный печатный бланк без штрихкода PDF417;
//     * ИмяФайлаПечатногоБланка - Строка - имя файла сформированного печатного бланка для сохранения.
//	 Если печатный бланк не сформирован, вместо структуры возвращается пустая строка.
//
Функция ПечатныйБланкРегламентированногоОтчета(СохраненныйОтчет) Экспорт
				
	Если НЕ ТипЗнч(СохраненныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
	 ИЛИ СохраненныйОтчет.Пустая() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать печатный бланк отчета.'");
		Сообщение.Сообщить();
		
		Возврат "";
		
	КонецЕсли;
	
	РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СохраненныйОтчет,
												 "ИсточникОтчета, ВыбраннаяФорма");
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(РеквизитыОтчета.ИсточникОтчета,
																		   РеквизитыОтчета.ВыбраннаяФорма);
	
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("СохраненныйОтчет", СохраненныйОтчет);
	ПараметрыПечати.Вставить("ВыбраннаяФорма",   РеквизитыОтчета.ВыбраннаяФорма);
				
	Если РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(РеквизитыОтчета.ИсточникОтчета,
		 	РеквизитыОтчета.ВыбраннаяФорма).ПечатьБезШтрихкодаPDF417НаСервере Тогда	
	
		Возврат ОтчетОбъект.ПечатныйБланк(ПараметрыПечати);
		
	КонецЕсли;
	
	Возврат "";
			
КонецФункции

#КонецОбласти

#Область РучнойВводСтатусовОтправки

// Записывает в регистр сведений "Журнал отчетов статусы" значение статуса отправки,
// установленного вручную в экранной форме объекта, отображаемого на закладке "Отчеты"
// формы "1С-Отчетность".
//
// Параметры:
//   СтруктураПараметров - Cтруктура со свойствами:
//     * СсылкаНаОбъект - ДокументСсылка, СправочникСсылка - ссылка на объект, отображаемый
//                        на закладке "Отчеты" формы "1С-Отчетность";
//     * Форма - ФормаКлиентскогоПриложения - экранная форма объекта, отображаемого на закладке "Отчеты"
//                                            формы "1С-Отчетность".
//     * Статус - Строка
//
Процедура СохранитьСтатусОтправки(СтруктураПараметров) Экспорт
	
	ВыборкаЖОС = РегистрыСведений.ЖурналОтчетовСтатусы.Выбрать(
	Новый Структура("Ссылка", СтруктураПараметров.СсылкаНаОбъект));
	
	Если ВыборкаЖОС.Следующий() Тогда
		
		Если РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(
			ВыборкаЖОС.СостояниеСдачиОтчетности) Тогда
			
			СтатусыОбъектов
			= РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(
			СтруктураПараметров.СсылкаНаОбъект);
			
			Если СтруктураПараметров.Свойство("Форма") Тогда
				ТекСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1'"), СтруктураПараметров.Форма.Элементы.НаименованиеЭтапа.Заголовок);
			ИначеЕсли СтруктураПараметров.Свойство("Статус") Тогда
				ТекСтатус = СтруктураПараметров.Статус;
			КонецЕсли;
			
			Если СтатусыОбъектов.Найти(ТекСтатус) <> Неопределено Тогда
				
				ЗаписьЖОС = ВыборкаЖОС.ПолучитьМенеджерЗаписи();
				ЗаписьЖОС.Статус = ТекСтатус;
				ЗаписьЖОС.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеНалоговогоПериода

// Определяет дату начала налогового периода с учетом даты регистрации организации (требований ст. 55 НК РФ). Налоговый
// период может быть расширен или отсутствовать, если организация зарегистрирована в конце обычного периода (например,
// 30 декабря). Налоговый период может быть сокращен, если организация зарегистрирована не в конце обычного периода
// (например, 10 января).
//
// Параметры:
//  Организация                              - СправочникСсылка.Организации - организация, для которой определяется
//                                             дата начала налогового периода;
//  Период                                   - Дата - дата в периоде, начало которого определяется;
//  ВариантРасширенногоПервогоПериода        - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода -
//                                             проверяемый вариант требований закона;
//  СтандартнаяДлительностьНалоговогоПериода - ПеречислениеСсылка.Периодичность - длительность налогового периода;
//  СокращатьНалоговыйПериод                 - Булево - Ложь, если для совместимости важно, чтобы дата регистрации
//                                                      возвращалась только для расширенного периода (не сокращенного),
//                                                      при этом ст. 55 будет выполнена в неполном объеме);
//                                                      Истина, если требуется выполнение ст. 55 в части сокращения
//                                                      периода.
//  ДатаРегистрации                          - Дата - дата регистрации организации;
//                                             если не передана, определяется из свойств организации.
//  ДатаПостановкиНаУчет                     - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение (варианты):
//  Дата         - дата начала налогового периода;
//  Неопределено - в этом периоде обязанностей налогоплательщика у организации нет.
// 
Функция НачалоНалоговогоПериода(Организация, Период, ВариантРасширенногоПервогоПериода,
	Знач СтандартнаяДлительностьНалоговогоПериода = Неопределено, СокращатьНалоговыйПериод = Истина,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.НачалоНалоговогоПериода(Организация,
	Период, ВариантРасширенногоПервогоПериода, СтандартнаяДлительностьНалоговогоПериода, СокращатьНалоговыйПериод,
	ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет границы ближайшего налогового периода с учетом даты регистрации (постановки на учет в качестве налогоплательщика).
//
// Параметры:
//  Организация                              - СправочникСсылка.Организации - организация, для которой определяются
//                                             границы ближайшего налогового периода;
//  Период                                   - Дата - дата в периоде, границы которого определяются;
//  ВариантРасширенногоПервогоПериода        - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода -
//                                             проверяемый вариант требований закона;
//  СтандартнаяДлительностьНалоговогоПериода - ПеречислениеСсылка.Периодичность - длительность налогового периода.
//  ДатаРегистрации                          - Дата - дата регистрации организации;
//                                             если не передана, определяется из свойств организации.
//  ДатаПостановкиНаУчет                     - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение:
//  Структура - границы периода
//    * Период - Дата - стандартное начало налогового периода (например, 01 июля для третьего квартала);
//    * Начало - Дата - фактическое начало налогового периода (может совпадать со стандартным началом или
//               датой регистрации организации;
//    * Конец  - Дата - дата с указанием времени.
// 
Функция БлижайшийНалоговыйПериод(Организация, Знач ПроверяемыйПериод, ВариантРасширенногоПервогоПериода,
	Знач СтандартнаяДлительностьНалоговогоПериода = Неопределено,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.БлижайшийНалоговыйПериод(Организация,
		ПроверяемыйПериод, ВариантРасширенногоПервогоПериода, СтандартнаяДлительностьНалоговогоПериода,
		ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет стандартную длительность налогового периода по переданному варианту периода регистрации организации.
//
// Параметры:
//  ВариантРасширенногоПервогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант
//                                      требований закона.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - длительность периода; пустая ссылка, если установить не удалось.
//
Функция СтандартнаяДлительностьНалоговогоПериода(Вариант) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.СтандартнаяДлительностьНалоговогоПериода(Вариант);
	
КонецФункции

// Определяет налоговый период, относящийся к дате регистрации (постановки на учет), пропускаемый для целей уплаты налогов
// (представления отчетов). Требования установлены ст. 55 НК РФ и п. 3 ст. 15 закона "О бухгалтерском учете".
//
// Например, если организация зарегистрирована в конце года, то некоторую отчетность за этот год она не представляет
// (и некоторые налоги не платит), а показатели деятельности за период с даты регистрации до конца следующего года
// включает в отчетность за следующий год. Таким образом, первый налоговый период у организации может быть длинее,
// чем последующие (т.е., может быть "расширенным").
//
// Другими словами, если дата регистрации попадает в определенные периоды, то не требуется представлять отчетность
// и/или уплачивать налоги за эти периоды.
//
// Законом определены несколько вариантов периодов, в зависимости от даты регистрации организации.
//
// Параметры:
//  Вариант         - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант требований закона;
//  Организация     - СправочникСсылка.Организации - организация, для которой определяется пропущенный период;
//  ДатаРегистрации - Дата - дата регистрации организации; если не передана, определяется из свойств организации;
//  ДатаПостановкиНаУчет - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение (варианты):
//  Дата         - дата начала пропущенного периода;
//  Неопределено - нет оснований для пропуска периода.
//
Функция ПропущенныйНалоговыйПериод(Вариант, Организация,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.ПропущенныйНалоговыйПериод(Вариант, Организация,
		ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет, что не требуется сдавать отчетность и уплачивать налог за переданный период.
//
// Параметры:
//  Организация                       - СправочникСсылка.Организации - проверяемая организация
//  Период                            - Дата - проверяемый период
//  ВариантРасширенногоПервогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант требований закона;
//  ДатаРегистрации                   - Дата - дата регистрации организации; если не передана, определяется из свойств организации;
//  ДатаПостановкиНаУчет              - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это пропущенный период
//              (организация зарегистрирована в декабре переданного года, и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодПропущен(Организация, Период, ВариантРасширенногоПервогоПериода,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.НалоговыйПериодПропущен(
		Организация, Период, ВариантРасширенногоПервогоПериода, ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет какой период расширяется в соответствии с выбранным вариантом.
// 
// Параметры:
//  ВариантРасширенногоПервогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант требований закона;
//
// Возвращаемое значение:
//  Истина - расширяемый налоговый период начинается с даты постановки на учет в качестве налогоплательщика;
//  Ложь - расширяемый налоговый период начинается с даты регистрации организации.
//
Функция ПервыйНалоговыйПериодНачинаетсяСДатыПостановкиНаУчет(ВариантРасширенногоПервогоПериода) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.ПервыйНалоговыйПериодНачинаетсяСДатыПостановкиНаУчет(ВариантРасширенногоПервогоПериода);
	
КонецФункции

#КонецОбласти

#Область ОбработкаАдресаВФорматеФИАС

// См. РегламентированнаяОтчетность.АдресВФорматеФИАС.
Функция АдресВФорматеФИАС(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат РегламентированнаяОтчетность.АдресВФорматеФИАС(Адрес, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Ранее функция использовалась в функционале "Монитор налогов и отчетности".
// Описывает структуру таблицы значений для получения списка регл. отчетов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - подготовленная таблица для получения списка регл. отчетов по периодам.
//
Функция ПараметрыСпискаРеглОтчетов() Экспорт
	
	ПараметрыРегОтчетности = Новый ТаблицаЗначений;
	ПараметрыРегОтчетности.Колонки.Добавить("ПолноеИмяПравила", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ПараметрыРегОтчетности.Колонки.Добавить("ПериодСобытия",    ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПараметрыРегОтчетности.Колонки.Добавить("ИмяРеглОтчета",    ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ПараметрыРегОтчетности.Колонки.Добавить("ВыбраннаяФорма",   ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат ПараметрыРегОтчетности;
	
КонецФункции

// Устарела. Ранее процедура использовалась в функционале "Монитор налогов и отчетности".
// Помещает в переданный менеджер временных таблиц сформированные сведения о регламентированной отчетности 
// в разрезе запрашиваемых правил и отчетных периодов.
//
// Параметры:
//  МенеджерВТ          - МенеджерВременныхТаблиц - исх. параметр, в менеджер помещается временная таблица "ВТ_РеглОтчеты" со следующими колонками:
//   * Ссылка           - ДокументСсылка.РегламентированныйОтчет - ссылка на отчет;
//   * ПериодСобытия    - Дата - финансовый период, к которому относится отчет;
//   * ПолноеИмяПравила - Строка - скомпонованное имя правила, формируемое как идентификатор(код) задачи-владельца правила + "." + идентификатор(код) самого правила;
//   * Статус           - Строка - состояние отправки отчета в контролирующие органы.
//  Организация                - СправочникСсылка.Организации - организация, по которой запрашивается отчетность.
//  ПараметрыСпискаРеглОтчетов - ТаблицаЗначений - см. функцию ПараметрыСпискаРеглОтчетов().
//
Процедура ПолучитьСписокРеглОтчетовПоПериодам(МенеджерВТ, Организация, ПараметрыСпискаРеглОтчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПараметрыСпискаРеглОтчетов", ПараметрыСпискаРеглОтчетов);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыСпискаРеглОтчетов.ИмяРеглОтчета КАК ИмяРеглОтчета,
	|	ВЫРАЗИТЬ(ПараметрыСпискаРеглОтчетов.ВыбраннаяФорма КАК СТРОКА(255)) КАК ВыбраннаяФорма,
	|	ПараметрыСпискаРеглОтчетов.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыСпискаРеглОтчетов.ПолноеИмяПравила КАК ПолноеИмяПравила
	|ПОМЕСТИТЬ ПараметрыРегОтчетности
	|ИЗ
	|	&ПараметрыСпискаРеглОтчетов КАК ПараметрыСпискаРеглОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(РегламентированныйОтчет.ВыбраннаяФорма КАК СТРОКА(255)) КАК ВыбраннаяФорма,
	|	РегламентированныйОтчет.ИсточникОтчета КАК ИсточникОтчета,
	|	РегламентированныйОтчет.Организация,
	|	РегламентированныйОтчет.ДатаНачала КАК ДатаНачала,
	|	РегламентированныйОтчет.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СписокРеглОтчетности
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Вид = 0
	|	И РегламентированныйОтчет.ПометкаУдаления = ЛОЖЬ
	|	И РегламентированныйОтчет.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсточникОтчета,
	|	ВыбраннаяФорма,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокРеглОтчетности.Ссылка КАК Ссылка,
	|	ПараметрыРегОтчетности.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыРегОтчетности.ПолноеИмяПравила КАК ПолноеИмяПравила
	|ПОМЕСТИТЬ ВТ_ЗаписанныеРеглОтчеты
	|ИЗ
	|	ПараметрыРегОтчетности КАК ПараметрыРегОтчетности
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокРеглОтчетности КАК СписокРеглОтчетности
	|		ПО (СписокРеглОтчетности.ИсточникОтчета = ПараметрыРегОтчетности.ИмяРеглОтчета)
	|			И (ПараметрыРегОтчетности.ПериодСобытия МЕЖДУ СписокРеглОтчетности.ДатаНачала И СписокРеглОтчетности.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаписанныеРеглОтчеты.Ссылка КАК Ссылка,
	|	ВТ_ЗаписанныеРеглОтчеты.ПериодСобытия КАК ПериодСобытия,
	|	ВТ_ЗаписанныеРеглОтчеты.ПолноеИмяПравила КАК ПолноеИмяПравила,
	|	ЖурналОтчетовСтатусы.Статус КАК Статус,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности
	|ИЗ
	|	ВТ_ЗаписанныеРеглОтчеты КАК ВТ_ЗаписанныеРеглОтчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО ВТ_ЗаписанныеРеглОтчеты.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|			И (ЖурналОтчетовСтатусы.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыРегОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокРеглОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗаписанныеРеглОтчеты";
	
	РеглОтчеты = Запрос.Выполнить().Выгрузить();
	РеглОтчеты.Индексы.Добавить("ПериодСобытия, ПолноеИмяПравила");
			
	Для Каждого РеглОтчет Из РеглОтчеты Цикл
		
		Если НЕ ЗначениеЗаполнено(РеглОтчет.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрНачинаетсяС(РеглОтчет.ПолноеИмяПравила, "СведенияОСреднесписочнойЧисленности") Тогда
			Продолжить;
		КонецЕсли;
		
		// При создании новой организации отчетов о среднесписочной численности может быть несколько:
		//  - по состоянию на 1 число месяца, следующего за месяцем регистрации;
		//  - по состоянию на 1 января за предыдущий календарный год.
		ЭтоМесячныйОтчет = РеглОтчет.ПолноеИмяПравила = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации";
		ОтчетПоСостояниюНаДату = РеглОтчет.Ссылка.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ДатаПериод;
		
		Если (ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) = 1)
		 ИЛИ (НЕ ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) <> 1) Тогда
			
		 	// Очистим ссылки на документ, если такой был найден, т.к. он относится к другому правилу.
			РеглОтчет.Ссылка = NULL;
			РеглОтчет.Статус = NULL;
			РеглОтчет.СостояниеСдачиОтчетности = NULL;
		   
		КонецЕсли;
				
	КонецЦикла;
	
	// По каждому виду отчета за каждый период оставляется одну ссылку 
	// на документ "Регламентированный отчет" и его состояния отправки.
	ИтоговыеРеглОтчеты = РеглОтчеты.СкопироватьКолонки();
	
	ОтчетыПоПериодам = РеглОтчеты.Скопировать(, "ПериодСобытия, ПолноеИмяПравила");
	ОтчетыПоПериодам.Свернуть("ПериодСобытия, ПолноеИмяПравила");
	Отбор = Новый Структура("ПериодСобытия, ПолноеИмяПравила");
	
	Для Каждого СтрокаПериода Из ОтчетыПоПериодам Цикл

		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПериода);

		НайденныеСтроки = РеглОтчеты.НайтиСтроки(Отбор);

		ЕстьОтчетВБазе = Ложь;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.Ссылка) Тогда
				НоваяСтрока = ИтоговыеРеглОтчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				ЕстьОтчетВБазе = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьОтчетВБазе Тогда
			// Отчет за период еще не был записан, добавляем пустую строку с именем отчета и периодом события.
			НоваяСтрока = ИтоговыеРеглОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериода);
			// В незаполенные поля записываем NULL как в случае отсутствия данных в результате запроса. 
			НоваяСтрока.Ссылка = NULL;
			НоваяСтрока.Статус = NULL;
			НоваяСтрока.СостояниеСдачиОтчетности = NULL;
		КонецЕсли;
		
	КонецЦикла;
	
	// Загружаем отфильтрованную таблицу регл.отчетов в запрос.
	Запрос.УстановитьПараметр("ИтоговыеРеглОтчеты", ИтоговыеРеглОтчеты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтоговыеРеглОтчеты.Ссылка,
	|	ИтоговыеРеглОтчеты.ПериодСобытия,
	|	ИтоговыеРеглОтчеты.Статус,
	|	ИтоговыеРеглОтчеты.СостояниеСдачиОтчетности,
	|	ИтоговыеРеглОтчеты.ПолноеИмяПравила
	|ПОМЕСТИТЬ ВТ_РеглОтчеты
	|ИЗ
	|	&ИтоговыеРеглОтчеты КАК ИтоговыеРеглОтчеты
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолноеИмяПравила,
	|	ПериодСобытия";

	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

// Проверяет наличие доступа к электронному документообороту.
// 
// Возвращаемое значение:
//  Булево - Истина, если доступ есть
//
Функция УТекущегоПользователяЕстьДоступКЭДО() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено;
	
КонецФункции

// Функция - Получить ответы на запрос ИОН
//
// Параметры:
//  Запрос	 - ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика - ссылка на запрос
// 
// Возвращаемое значение:
//  ТаблицаЗначений или Неопределено. Таблица значений имеет поля: ИмяФайла, Размер, ТипСодержимого, Данные, ВАрхиве.
//		Неопределено будет возвращено если у пользователя нет доступа к ЭДО.
//
Функция ПолучитьОтветыНаЗапросИОН(Запрос) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КонтекстЭДОСервер.ПолучитьОтветыНаЗапросИОН(Запрос, Истина);
	КонецЕсли;

КонецФункции

// Возвращает файлы регламентированного отчета, сохраненного в информационной базе, для передачи в банк
//
// Параметры:
//   СохраненныйОтчет - ДокументСсылка.РегламентированныйОтчет
//   БезБланков - Булево
//
// Возвращаемое значение:
//   Структура:
//     ОписаниеОшибки:
//       Строка - Подробное описание ошибки или пустая строка, если ошибок не было.
//     ФайлыОтчета:
//       Массив - содержит структуры:
//         * ВидФайла - Строка - вид файла отчета
//         * ИмяФайла - Строка - имя файла
//         * СодержимоеФайла - Произвольный - содержимое файла
//
Функция ФайлыРегламентированногоОтчета(СохраненныйОтчет, БезБланков = Ложь) Экспорт
	
	РезультатПолученияФайлов = Новый Структура("ОписаниеОшибки, ФайлыОтчета",
		"", Новый Массив);
	
	Если НЕ ТипЗнч(СохраненныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
	 ИЛИ СохраненныйОтчет.Пустая() Тогда
		РезультатПолученияФайлов.ОписаниеОшибки =
			НСтр("ru = 'Ошибка получения файлов регламентированного отчета из-за неверного аргумента функции'");
		Возврат РезультатПолученияФайлов;
	КонецЕсли;
	
	РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СохраненныйОтчет, "ИсточникОтчета, ВыбраннаяФорма");
	
	ПредусмотреноПолучениеФайловОтчета =
		РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(
		РеквизитыОтчета.ИсточникОтчета, РеквизитыОтчета.ВыбраннаяФорма).ПолучениеФайловОтчета;
	
	Если НЕ ПредусмотреноПолучениеФайловОтчета Тогда
		РезультатПолученияФайлов.ОписаниеОшибки =
			НСтр("ru = 'Для регламентированного отчета не предусмотрено получение файлов'");
		Возврат РезультатПолученияФайлов;
	КонецЕсли;
	
	ФайлыОтчета = РезультатПолученияФайлов.ФайлыОтчета;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегламентированныйОтчет", СохраненныйОтчет);
	
	Если НЕ БезБланков Тогда
		// Получение печатных бланков отчета
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидФайла,
			|	ДополнительныеФайлыРегламентированныхОтчетов.ИмяФайла КАК ИмяФайла,
			|	ДополнительныеФайлыРегламентированныхОтчетов.СодержимоеФайла КАК СодержимоеФайла
			|ИЗ
			|	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
			|ГДЕ
			|	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
			|	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО ""БланкОтчета.%""";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			РезультатПолученияФайлов.ОписаниеОшибки =
				НСтр("ru = 'Требуется подготовка отчета для отправки в банк. Откройте выбранную форму бухгалтерской отчетности и в меню кнопки «Еще» нажмите пункт «Подготовить для отправки в банк»'");
			Возврат РезультатПолученияФайлов;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			ФайлОтчета = Новый Структура;
			ФайлОтчета.Вставить("ВидФайла", Выборка.ВидФайла);
			ФайлОтчета.Вставить("ИмяФайла", Выборка.ИмяФайла);
			ФайлОтчета.Вставить("СодержимоеФайла", Выборка.СодержимоеФайла.Получить());
			
			ФайлыОтчета.Добавить(ФайлОтчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получение дополнительных файлов, не являющихся печатными бланками отчета
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидФайла,
		|	ДополнительныеФайлыРегламентированныхОтчетов.ИмяФайла КАК ИмяФайла,
		|	ДополнительныеФайлыРегламентированныхОтчетов.СодержимоеФайла КАК СодержимоеФайла
		|ИЗ
		|	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
		|ГДЕ
		|	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
		|	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла В (&ВидыОтчетов)";
	
	ВидыОтчетов = Новый Массив;
	ВидыОтчетов.Добавить("Пояснительная записка");
	ВидыОтчетов.Добавить("Аудиторское заключение");
	ВидыОтчетов.Добавить("Заявление союза сельхозпроизводителей");
	Запрос.УстановитьПараметр("ВидыОтчетов", ВидыОтчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФайлОтчета = Новый Структура;
		ФайлОтчета.Вставить("ВидФайла", Выборка.ВидФайла);
		ФайлОтчета.Вставить("ИмяФайла", Выборка.ИмяФайла);
		ФайлОтчета.Вставить("СодержимоеФайла", Выборка.СодержимоеФайла.Получить());
		
		ФайлыОтчета.Добавить(ФайлОтчета);
		
	КонецЦикла;
	
	Возврат РезультатПолученияФайлов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НормализоватьЗаменуКодовЦЕМПОС(Знач СтрокаXML)
	
	СоответствиеКодов = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ЧтениеXML.Прочитать();
	Исключение
		Возврат СоответствиеКодов;
	КонецПопытки;
	Если ЧтениеXML.Имя = "string" Тогда 
		ЧтениеXML.Прочитать();
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаXML = ЧтениеXML.Значение;
		КонецЕсли;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("КодРегиона",, "regionCode");
	ТаблицаИзменений.Колонки.Добавить("СтарыйКод",, "oldCode");
	ТаблицаИзменений.Колонки.Добавить("НовыйКод",, "newCode");
	ТаблицаИзменений.Колонки.Добавить("НачалоДействия",, "date");
	ТаблицаИзменений.Колонки.Добавить("НазваниеТОГС",, "recipientName");
	ТаблицаИзменений.Колонки.Добавить("Город",, "city");
			
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath("//recipient", ДокументDOM, Разыменователь, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	Узел = РезультатXPath.ПолучитьСледующий();
	Пока Узел <> Неопределено Цикл 
		СтарыйКод = "";
		НовыйКод = "";
		Для Каждого Вложенный Из Узел.ДочерниеУзлы Цикл
			Если Вложенный.ИмяЭлемента = "oldCode" Тогда 
				СтарыйКод = Вложенный.ТекстовоеСодержимое;
			ИначеЕсли Вложенный.ИмяЭлемента = "newCode" Тогда 
				НовыйКод = Вложенный.ТекстовоеСодержимое;
			ИначеЕсли Вложенный.ИмяЭлемента = "date" Тогда 
				Попытка
					НачалоДействия = XMLЗначение(Тип("Дата"), Вложенный.ТекстовоеСодержимое); // +03
					НачалоДействияGMT = УниверсальноеВремя(НачалоДействия, "GMT" + Прав(Вложенный.ТекстовоеСодержимое, 6)); // *00
				Исключение
					СтарыйКод = "";
					Прервать;
				КонецПопытки;
				Если НачалоДействияGMT > ТекущаяУниверсальнаяДата() Тогда 
					СтарыйКод = "";
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтарыйКод <> "" Тогда 
			СоответствиеКодов.Вставить(СтарыйКод, НовыйКод);
		КонецЕсли;
		Узел = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;

	Возврат СоответствиеКодов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с прикладным кодом
// автоматического заполнения данных статистической отчетности.

Функция КлассификаторВидовДеятельности(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okved", "pril_okved_51");
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okved", "pril_okved_51");
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okved", "pril_okved_51");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП2", "Списки2014кв1", "КодыОКВЭД", "ОКВЭД_51");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторПродукцииОпт(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_7", "okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2014кв1", "s_okp", "okp_7", "okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторПродукцииПроизводство(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okp", "pril_okp_50", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_50", "s_okp_ei_50");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_50", "s_okp_ei_50");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_55", "okp_ei_55");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2014кв1", "s_okp", "okp_55", "okp_ei_55");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторПродукцииРозница(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_6", "okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_6", "okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторУслугНаселению(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2010кв1", "s_okun");
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2013кв1", "s_okun");
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2013кв4", "s_okun");
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2014кв1", "s_okun");
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция ПустаяТаблица()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Строка64  = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(64, ДопустимаяДлина.Переменная));
	Строка512  = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код", Строка64);
	Результат.Колонки.Добавить("Наименование", Строка512);
	Результат.Колонки.Добавить("НаименованиеЕдиницыИзмерения", Строка64);
	Результат.Колонки.Добавить("КодЕдиницыИзмерения", Строка64);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИзМакета(ИмяОтчета, ИмяМакета, ИмяОбласти, ИмяОбластиСОтбором = "", ИмяОбластиСЕдиницамиИзмерения = "")
	
	Результат = ПустаяТаблица();
	
	Если Метаданные.Отчеты.Найти(ИмяОтчета) = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МакетСоставаПоказателей = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	Если ТипЗнч(МакетСоставаПоказателей) <> Тип("ТабличныйДокумент") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Строка16  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(16,  ДопустимаяДлина.Переменная));
	Строка128 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(128, ДопустимаяДлина.Переменная));
	Строка512 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная));
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Не (Область.Имя = ИмяОбласти Или Область.Имя = ИмяОбластиСОтбором Или Область.Имя = ИмяОбластиСЕдиницамиИзмерения) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",     Строка16   ,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",Строка512  ,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("НазваниеДоп",Строка128,, МакетСоставаПоказателей.Область(ВерхОбласти, 3, ВерхОбласти, 3).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" И КодПоказателя <> "" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = СокрЛП(КодПоказателя);
					НовСтрока.Название = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.НазваниеДоп = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОбластьСОтбором = ЗначениеЗаполнено(КоллекцияСписковВыбора[ИмяОбластиСОтбором]);
	ЕстьИмяОбластьСЕдиницамиИзмерения = ЗначениеЗаполнено(КоллекцияСписковВыбора[ИмяОбластиСЕдиницамиИзмерения]);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Область", КоллекцияСписковВыбора[ИмяОбласти]);
	Если ЕстьОбластьСОтбором Тогда
		Запрос.УстановитьПараметр("ОбластьСОтбором", КоллекцияСписковВыбора[ИмяОбластиСОтбором]);
	КонецЕсли;
	Если ЕстьИмяОбластьСЕдиницамиИзмерения Тогда
		Запрос.УстановитьПараметр("ОбластьСЕдиницамиИзмерения", КоллекцияСписковВыбора[ИмяОбластиСЕдиницамиИзмерения]);
	КонецЕсли;
	
	Если ЕстьОбластьСОтбором Тогда 
		Если ЕстьИмяОбластьСЕдиницамиИзмерения Тогда 
			
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название КАК Фильтр,
				|	Таб.НазваниеДоп КАК Название
				|ПОМЕСТИТЬ ВТ_ЕдИзм
				|ИЗ &ОбластьСЕдиницамиИзмерения КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код
				|ПОМЕСТИТЬ ВТ_Отбор
				|ИЗ &ОбластьСОтбором КАК Таб
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование,
				|	ТабЕдИзм.Название КАК НаименованиеЕдиницыИзмерения,
				|	ТабЕдИзм.Код КАК КодЕдиницыИзмерения
				|ИЗ
				|	ВТ_Таб КАК Таб
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕдИзм КАК ТабЕдИзм
				|	ПО Таб.Код = ТабЕдИзм.Фильтр
				|ГДЕ
				|	Таб.Код В (ВЫБРАТЬ Отбор.Код ИЗ ВТ_Отбор КАК Отбор)";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код
				|ПОМЕСТИТЬ ВТ_Отбор
				|ИЗ &ОбластьСОтбором КАК Таб
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование
				|ИЗ
				|	ВТ_Таб КАК Таб
				|ГДЕ
				|	Таб.Код В (ВЫБРАТЬ Отбор.Код ИЗ ВТ_Отбор КАК Отбор)";
		КонецЕсли;
	Иначе
		Если ЕстьИмяОбластьСЕдиницамиИзмерения Тогда 
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название КАК Фильтр,
				|	Таб.НазваниеДоп КАК Название
				|ПОМЕСТИТЬ ВТ_ЕдИзм
				|ИЗ &ОбластьСЕдиницамиИзмерения КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование,
				|	ТабЕдИзм.Название КАК НаименованиеЕдиницыИзмерения,
				|	ТабЕдИзм.Код КАК КодЕдиницыИзмерения
				|ИЗ
				|	ВТ_Таб КАК Таб
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕдИзм КАК ТабЕдИзм
				|	ПО Таб.Код = ТабЕдИзм.Фильтр";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование
				|ИЗ ВТ_Таб КАК Таб";
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из РезультатЗапроса Цикл
		НовСтр = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОбъединитьТаблицы(Таб1, Таб2)
	
	Результат = ПустаяТаблица();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб1", Таб1);
	Запрос.УстановитьПараметр("Таб2", Таб2);
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Таб.Код КАК Код,
		|	Таб.Наименование КАК Наименование,
		|	Таб.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|	Таб.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|ПОМЕСТИТЬ ВТ_ТАБ1
		|ИЗ &Таб1 КАК Таб
		|ИНДЕКСИРОВАТЬ ПО Код
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Код КАК Код,
		|	Таб.Наименование КАК Наименование,
		|	Таб.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|	Таб.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|ПОМЕСТИТЬ ВТ_ТАБ2
		|ИЗ &Таб2 КАК Таб
		|ИНДЕКСИРОВАТЬ ПО Код
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.Код КАК Код,
		|	Таб.Наименование КАК Наименование,
		|	Таб.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|	Таб.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таб2.Код КАК Код,
		|		Таб2.Наименование КАК Наименование,
		|		Таб2.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|		Таб2.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|	ИЗ
		|		ВТ_ТАБ2 КАК Таб2
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТАБ1 КАК Таб1
		|			ПО Таб2.Код = Таб1.Код
		|	ГДЕ
		|		Таб1.Код ЕСТЬ NULL 
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Таб1.Код,
		|		Таб1.Наименование,
		|		ВЫБОР
		|			КОГДА Таб1.НаименованиеЕдиницыИзмерения = """" И НЕ (Таб2.НаименованиеЕдиницыИзмерения ЕСТЬ NULL)
		|				ТОГДА Таб2.НаименованиеЕдиницыИзмерения
		|			ИНАЧЕ Таб1.НаименованиеЕдиницыИзмерения
		|		КОНЕЦ КАК НаименованиеЕдиницыИзмерения,
		|		ВЫБОР
		|			КОГДА Таб1.КодЕдиницыИзмерения = """" И НЕ (Таб2.КодЕдиницыИзмерения ЕСТЬ NULL)
		|				ТОГДА Таб2.КодЕдиницыИзмерения
		|			ИНАЧЕ Таб1.КодЕдиницыИзмерения
		|		КОНЕЦ КАК КодЕдиницыИзмерения
		|	ИЗ
		|		ВТ_ТАБ1 КАК Таб1
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТАБ2 КАК Таб2
		|			ПО Таб1.Код = Таб2.Код) КАК Таб";
		
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из РезультатЗапроса Цикл
		НовСтр = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции описания форм статистики.

Функция ЭтоКодПоказателяП(КодПок)
	
	Если СтрДлина(КодПок) < 9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По СтрДлина(КодПок) Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с БЗКБ.

# Область ПроцедурыИФункцииАвтоФормированияФормыРСВ1

Процедура ОбновитьРеглОтчетРСВ1ФормаОтчета2010Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет)
	
	ДанныеРеглОтчета = ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2010Кв4(СсылкаНаСохрРеглОтчет);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	РазделыОтчета.Вставить("Раздел12",  Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел12));
	РазделыОтчета.Вставить("Раздел30",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел30));
	РазделыОтчета.Вставить("Раздел41",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел41, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0004100010, "П0004100010"));
	РазделыОтчета.Вставить("Раздел42",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел42));
	РазделыОтчета.Вставить("Раздел43",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел43));
	РазделыОтчета.Вставить("Раздел50",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел50));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2010Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, СтруктураРеквизитовОтчета(ДанныеРеглОтчета));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	ЗаписатьРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураПараметров);
	
КонецПроцедуры

Процедура ОбновитьРеглОтчетРСВ1ФормаОтчета2011Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет)
	
	ДанныеРеглОтчета = ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2011Кв1(СсылкаНаСохрРеглОтчет);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	РазделыОтчета.Вставить("Раздел12",  Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел12));
	РазделыОтчета.Вставить("Раздел30",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел30));
	РазделыОтчета.Вставить("Раздел41",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел41, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0004100010, "П0004100010"));
	РазделыОтчета.Вставить("Раздел42",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел42));
	РазделыОтчета.Вставить("Раздел43",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел43));
	РазделыОтчета.Вставить("Раздел44",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел44));
	РазделыОтчета.Вставить("Раздел50",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел50));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2011Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, СтруктураРеквизитовОтчета(ДанныеРеглОтчета));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	ЗаписатьРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураПараметров);
	
КонецПроцедуры

Процедура ОбновитьРеглОтчетРСВ1ФормаОтчета2012Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет)
	
	ДанныеРеглОтчета = ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2012Кв1(СсылкаНаСохрРеглОтчет);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	РазделыОтчета.Вставить("Раздел1",   Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1));
	РазделыОтчета.Вставить("Раздел2",   Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел2));
	РазделыОтчета.Вставить("Раздел31",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел31, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0003100010, "П0003100010"));
	РазделыОтчета.Вставить("Раздел32",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел32));
	РазделыОтчета.Вставить("Раздел33",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел33));
	РазделыОтчета.Вставить("Раздел34",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел34));
	РазделыОтчета.Вставить("Раздел35",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел35, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0003500001, "П0003500001"));
	РазделыОтчета.Вставить("Раздел36",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел36));
	РазделыОтчета.Вставить("Раздел37",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел37));
	РазделыОтчета.Вставить("Раздел38",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел38));
	РазделыОтчета.Вставить("Раздел4",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0004000001, "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел5, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0005000001, "П0005000001"));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2012Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	ЗаписатьРеглОтчетРСВ1ФормаОтчета2012Кв1(СтруктураПараметров);
	
КонецПроцедуры

Процедура ОбновитьРеглОтчетРСВ1ФормаОтчета2013Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет)
	
	ДанныеРеглОтчета = ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2013Кв1(СсылкаНаСохрРеглОтчет);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	РазделыОтчета.Вставить("Раздел1",   Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1));
	РазделыОтчета.Вставить("Раздел2",   Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел2));
	РазделыОтчета.Вставить("Раздел22",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел22));
	РазделыОтчета.Вставить("Раздел31",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел31, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0003100001, "П0003100001"));
	РазделыОтчета.Вставить("Раздел32",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел32));
	РазделыОтчета.Вставить("Раздел34",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел34));
	РазделыОтчета.Вставить("Раздел35",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел35, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0003500001, "П0003500001"));
	РазделыОтчета.Вставить("Раздел36",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел36));
	РазделыОтчета.Вставить("Раздел37",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел37));
	РазделыОтчета.Вставить("Раздел38",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел38));
	РазделыОтчета.Вставить("Раздел4",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0004000001, "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел5, ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0005000001, "П0005000001"));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2013Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	ЗаписатьРеглОтчетРСВ1ФормаОтчета2013Кв1(СтруктураПараметров);
	
КонецПроцедуры

Процедура ОбновитьРеглОтчетРСВ1ФормаОтчета2014Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет)
	
	ДанныеРеглОтчета = ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2014Кв1(СсылкаНаСохрРеглОтчет);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	РазделыОтчета.Вставить("Раздел1",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1));
	РазделыОтчета.Вставить("Раздел21",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел21));
	РазделыОтчета.Вставить("Раздел22",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел22));
	РазделыОтчета.Вставить("Раздел24",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел24));
	РазделыОтчета.Вставить("Раздел31",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел31));
	РазделыОтчета.Вставить("Раздел33",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел33,
		ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0003500001, "П0003500001"));
	РазделыОтчета.Вставить("Раздел35",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел35));
	РазделыОтчета.Вставить("Раздел4",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4,
		ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0004000001, "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел5,
		ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0005000001, "П0005000001"));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2014Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация,
		ДатаНачала, ДатаОкончания, РазделыОтчета);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
		
	ЗаписатьРеглОтчетРСВ1ФормаОтчета2014Кв1(СтруктураПараметров);
	
КонецПроцедуры

Процедура ОбновитьРеглОтчетРСВ1ФормаОтчета2015Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет)
	
	ДанныеРеглОтчета = ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2015Кв1(СсылкаНаСохрРеглОтчет);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	РазделыОтчета.Вставить("Раздел1",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1));
	РазделыОтчета.Вставить("Раздел21",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел21));
	РазделыОтчета.Вставить("Раздел22",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел22));
	РазделыОтчета.Вставить("Раздел24",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Истина, ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел24));
	РазделыОтчета.Вставить("Раздел31",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел31));
	РазделыОтчета.Вставить("Раздел32",
		Новый Структура("МногостраничностьВРазделе, Данные",
		Ложь,   ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел32));
	РазделыОтчета.Вставить("Раздел4",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4,
		ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0004000001, "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, ДанныеРеглОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел5,
		ДанныеРеглОтчета.ДанныеМногострочныхРазделов.П0005000001, "П0005000001"));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2015Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация,
		ДатаНачала, ДатаОкончания, РазделыОтчета);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
		
	ЗаписатьРеглОтчетРСВ1ФормаОтчета2015Кв1(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетРСВ1ФормаОтчета2010Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, СтруктураРеквизитовОтчета)
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	ТаблицаСтраницРаздела12 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела12.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела12.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела12.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела12.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел12.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела12.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
	Контейнер.Вставить("Раздел12",  ТаблицаСтраницРаздела12);
	Контейнер.Вставить("Раздел30",  РазделыОтчета.Раздел30.Данные);
	Контейнер.Вставить("Раздел41",  РазделыОтчета.Раздел41.Данные);
	Контейнер.Вставить("Раздел41_ДанныеДопСтрок", РазделыОтчета.Раздел41.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел42",  РазделыОтчета.Раздел42.Данные);
	Контейнер.Вставить("Раздел43",  РазделыОтчета.Раздел43.Данные);
	Контейнер.Вставить("Раздел50",  РазделыОтчета.Раздел50.Данные);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
	
	РазделыОтчета.Раздел12.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела12 Цикл
		
		Стр = РазделыОтчета.Раздел12.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел41.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел41.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел41.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	Если РазделыОтчета.Раздел41.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел41.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетРСВ1ФормаОтчета2011Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, СтруктураРеквизитовОтчета)
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	ТаблицаСтраницРаздела12 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела12.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела12.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела12.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела12.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел12.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела12.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
	Контейнер.Вставить("Раздел12",  ТаблицаСтраницРаздела12);
	Контейнер.Вставить("Раздел30",  РазделыОтчета.Раздел30.Данные);
	Контейнер.Вставить("Раздел41",  РазделыОтчета.Раздел41.Данные);
	Контейнер.Вставить("Раздел41_ДанныеДопСтрок", РазделыОтчета.Раздел41.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел42",  РазделыОтчета.Раздел42.Данные);
	Контейнер.Вставить("Раздел43",  РазделыОтчета.Раздел43.Данные);
	Контейнер.Вставить("Раздел44",  РазделыОтчета.Раздел44.Данные);
	Контейнер.Вставить("Раздел50",  РазделыОтчета.Раздел50.Данные);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
	
	РазделыОтчета.Раздел12.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела12 Цикл
		
		Стр = РазделыОтчета.Раздел12.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел41.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел41.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел41.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	Если РазделыОтчета.Раздел41.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел41.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетРСВ1ФормаОтчета2012Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета)
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	ТаблицаСтраницРаздела2 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела2.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела2.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела2.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела2.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел2.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела2.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
	Контейнер.Вставить("Раздел1",   РазделыОтчета.Раздел1.Данные);
	Контейнер.Вставить("Раздел2",   ТаблицаСтраницРаздела2);
	Контейнер.Вставить("Раздел31",  РазделыОтчета.Раздел31.Данные);
	Контейнер.Вставить("Раздел31_ДанныеДопСтрок", РазделыОтчета.Раздел31.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел32",  РазделыОтчета.Раздел32.Данные);
	Контейнер.Вставить("Раздел33",  РазделыОтчета.Раздел33.Данные);
	Контейнер.Вставить("Раздел34",  РазделыОтчета.Раздел34.Данные);
	Контейнер.Вставить("Раздел35",  РазделыОтчета.Раздел35.Данные);
	Контейнер.Вставить("Раздел35_ДанныеДопСтрок", РазделыОтчета.Раздел35.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел36",  РазделыОтчета.Раздел36.Данные);
	Контейнер.Вставить("Раздел37",  РазделыОтчета.Раздел37.Данные);
	Контейнер.Вставить("Раздел38",  РазделыОтчета.Раздел38.Данные);
	Контейнер.Вставить("Раздел4",   РазделыОтчета.Раздел4.Данные);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок", РазделыОтчета.Раздел4.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел5",   РазделыОтчета.Раздел5.Данные);
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", РазделыОтчета.Раздел5.ДанныеДопСтрок);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
	
	РазделыОтчета.Раздел2.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела2 Цикл
		
		Стр = РазделыОтчета.Раздел2.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел31.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел31.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел31.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел35.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел35.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел35.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел4.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел4.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел4.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел5.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел5.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел5.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	Если РазделыОтчета.Раздел31.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел31.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел35.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел35.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел4.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел5.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел5.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетРСВ1ФормаОтчета2013Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета)
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	ТаблицаСтраницРаздела2 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела2.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела2.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела2.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела2.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел2.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела2.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
	Контейнер.Вставить("Раздел1",   РазделыОтчета.Раздел1.Данные);
	Контейнер.Вставить("Раздел2",   ТаблицаСтраницРаздела2);
	Контейнер.Вставить("Раздел22",  РазделыОтчета.Раздел22.Данные);
	Контейнер.Вставить("Раздел31",  РазделыОтчета.Раздел31.Данные);
	Контейнер.Вставить("Раздел31_ДанныеДопСтрок", РазделыОтчета.Раздел31.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел32",  РазделыОтчета.Раздел32.Данные);
	Контейнер.Вставить("Раздел34",  РазделыОтчета.Раздел34.Данные);
	Контейнер.Вставить("Раздел35",  РазделыОтчета.Раздел35.Данные);
	Контейнер.Вставить("Раздел35_ДанныеДопСтрок", РазделыОтчета.Раздел35.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел36",  РазделыОтчета.Раздел36.Данные);
	Контейнер.Вставить("Раздел37",  РазделыОтчета.Раздел37.Данные);
	Контейнер.Вставить("Раздел38",  РазделыОтчета.Раздел38.Данные);
	Контейнер.Вставить("Раздел4",   РазделыОтчета.Раздел4.Данные);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок", РазделыОтчета.Раздел4.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел5",   РазделыОтчета.Раздел5.Данные);
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", РазделыОтчета.Раздел5.ДанныеДопСтрок);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
	
	РазделыОтчета.Раздел2.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела2 Цикл
		
		Стр = РазделыОтчета.Раздел2.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел31.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел31.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел31.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел35.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел35.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел35.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел4.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел4.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел4.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел5.ДанныеДопСтрок Цикл
						
		Для Каждого Колонка Из РазделыОтчета.Раздел5.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел5.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	Если РазделыОтчета.Раздел31.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел31.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел35.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел35.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел35.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел35.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел35.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел35.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетРСВ1ФормаОтчета2014Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета)
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	ТаблицаСтраницРаздела21 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела21.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела21.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела21.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела21.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел21.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела21.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	ТаблицаСтраницРаздела24 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела24.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела24.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела24.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела24.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел24.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела24.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
	Контейнер.Вставить("Раздел1",   РазделыОтчета.Раздел1.Данные);
	Контейнер.Вставить("Раздел21",  ТаблицаСтраницРаздела21);
	Контейнер.Вставить("Раздел22",  РазделыОтчета.Раздел22.Данные);
	Контейнер.Вставить("Раздел24",  ТаблицаСтраницРаздела24);
	Контейнер.Вставить("Раздел31",  РазделыОтчета.Раздел31.Данные);
	Контейнер.Вставить("Раздел33",  РазделыОтчета.Раздел33.Данные);
	Контейнер.Вставить("Раздел33_ДанныеДопСтрок", РазделыОтчета.Раздел33.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел35",  РазделыОтчета.Раздел35.Данные);
	Контейнер.Вставить("Раздел4",   РазделыОтчета.Раздел4.Данные);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок", РазделыОтчета.Раздел4.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел5",   РазделыОтчета.Раздел5.Данные);
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", РазделыОтчета.Раздел5.ДанныеДопСтрок);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
	
	РазделыОтчета.Раздел21.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела21 Цикл
		
		Стр = РазделыОтчета.Раздел21.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	РазделыОтчета.Раздел24.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела24 Цикл
		
		Стр = РазделыОтчета.Раздел24.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел33.ДанныеДопСтрок Цикл
		
		Для Каждого Колонка Из РазделыОтчета.Раздел33.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел33.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел4.ДанныеДопСтрок Цикл
		
		Для Каждого Колонка Из РазделыОтчета.Раздел4.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел4.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел5.ДанныеДопСтрок Цикл
		
		Для Каждого Колонка Из РазделыОтчета.Раздел5.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел5.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	Если РазделыОтчета.Раздел33.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел33.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел4.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел5.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел5.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетРСВ1ФормаОтчета2015Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета)
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
	
	ТаблицаСтраницРаздела21 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела21.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела21.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела21.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела21.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел21.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела21.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	ТаблицаСтраницРаздела24 = Новый ТаблицаЗначений;
	ТаблицаСтраницРаздела24.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ТаблицаСтраницРаздела24.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ТаблицаСтраницРаздела24.Колонки.Добавить("Данные", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаСтраницРаздела24.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрТаблЗнач Из РазделыОтчета.Раздел24.Данные Цикл
		
		Стр = ТаблицаСтраницРаздела24.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		СтрокаСписка = Новый СписокЗначений();
		СтрокаСписка.Вставить(0, СтрТаблЗнач.Данные);
		Стр.Данные = СтрокаСписка;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
	Контейнер.Вставить("Раздел1",   РазделыОтчета.Раздел1.Данные);
	Контейнер.Вставить("Раздел21",  ТаблицаСтраницРаздела21);
	Контейнер.Вставить("Раздел22",  РазделыОтчета.Раздел22.Данные);
	Контейнер.Вставить("Раздел24",  ТаблицаСтраницРаздела24);
	Контейнер.Вставить("Раздел31",  РазделыОтчета.Раздел31.Данные);
	Контейнер.Вставить("Раздел32",  РазделыОтчета.Раздел32.Данные);
	Контейнер.Вставить("Раздел4",   РазделыОтчета.Раздел4.Данные);
	Контейнер.Вставить("Раздел4_ДанныеДопСтрок", РазделыОтчета.Раздел4.ДанныеДопСтрок);
	Контейнер.Вставить("Раздел5",   РазделыОтчета.Раздел5.Данные);
	Контейнер.Вставить("Раздел5_ДанныеДопСтрок", РазделыОтчета.Раздел5.ДанныеДопСтрок);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
	
	РазделыОтчета.Раздел21.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела21 Цикл
		
		Стр = РазделыОтчета.Раздел21.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	РазделыОтчета.Раздел24.Данные.Очистить();
	
	Для Каждого СтрТаблЗнач Из ТаблицаСтраницРаздела24 Цикл
		
		Стр = РазделыОтчета.Раздел24.Данные.Добавить();
		Стр.Представление = СтрТаблЗнач.Представление;
		Стр.АктивнаяСтраница = СтрТаблЗнач.АктивнаяСтраница;
		Стр.Данные = СтрТаблЗнач.Данные[0].Значение;
		Стр.АвтоматическоеПредставление = СтрТаблЗнач.АвтоматическоеПредставление;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел4.ДанныеДопСтрок Цикл
		
		Для Каждого Колонка Из РазделыОтчета.Раздел4.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел4.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	НомСтр = 1;
	
	Для Каждого ДопСтрока Из РазделыОтчета.Раздел5.ДанныеДопСтрок Цикл
		
		Для Каждого Колонка Из РазделыОтчета.Раздел5.ДанныеДопСтрок.Колонки Цикл
		
			РазделыОтчета.Раздел5.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
		
		КонецЦикла;
		
		НомСтр = НомСтр + 1;
		
	КонецЦикла;
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
	
	Если РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел4.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	Если РазделыОтчета.Раздел5.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел5.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2010Кв4(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "ОГРН");
	Сведения.Добавить("", "ОКАТО");
	Сведения.Добавить("", "РегистрационныйНомерФСС");
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрФакт");
	Сведения.Добавить("", "АдрПрописки");
	Сведения.Добавить("", "АдрМЖ");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	
	ИННЮЛ = "";
	КППЮЛ = "";
	НаимЮЛПол = "";
	ОГРН = "";
	ОКАТО = "";
	РегистрационныйНомерФСС = "";
	РегНомПФР = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаОкончания, "РегНомПФР").РегНомПФР;
	АдрЮР = "";
	АдрФакт = "";
	АдрПрописки = "";
	АдрМЖ = "";
	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
	ТелСлуж = "";
	
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);
	ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
	ОргСведения.Свойство("ОГРН", ОГРН);
	ОргСведения.Свойство("ОКАТО", ОКАТО);
	ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	ОргСведения.Свойство("АдрЮР", АдрЮР);
	ОргСведения.Свойство("АдрФакт", АдрФакт);
	ОргСведения.Свойство("АдрПрописки", АдрПрописки);
	ОргСведения.Свойство("АдрМЖ", АдрМЖ);
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	
	Если ПБОЮЛ Тогда
		
		НаимЮлПол = ФИО;
		Адрес = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ОргНазв = НаимЮЛПол;
	РазделыОтчета.Титульный.Данные.ПрПодп = "1";
	РазделыОтчета.Титульный.Данные.ОргПодписантФамилия = ФИОРук;
	РазделыОтчета.Титульный.Данные.ДокУпПред = "";
	РазделыОтчета.Титульный.Данные.ИНН = ИННЮЛ;
	РазделыОтчета.Титульный.Данные.КПП = КППЮЛ;
	РазделыОтчета.Титульный.Данные.ОГРН = ОГРН;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	РазделыОтчета.Титульный.Данные.ТелОрганизации = ТелОрганизации;
	РазделыОтчета.Титульный.Данные.ОКАТО = ОКАТО;
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(РазделыОтчета.Титульный.Данные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 РазделыОтчета.Титульный.Данные.ОКВЭД);
	
	Если СтрДлина(РегНомПФР) < 14 Тогда
		Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
		КонецЕсли;
		Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомРег = РегНомПФР;
	
	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		
		РазделыОтчета.Титульный.Данные.Адрес1 = СтруктураАдреса.Индекс;
		РазделыОтчета.Титульный.Данные.Адрес2 = СтруктураАдреса.Регион;
		РазделыОтчета.Титульный.Данные.Адрес3 = СтруктураАдреса.Район;
		РазделыОтчета.Титульный.Данные.Адрес4 = СтруктураАдреса.Город;
		РазделыОтчета.Титульный.Данные.Адрес5 = СтруктураАдреса.НаселенныйПункт;
		РазделыОтчета.Титульный.Данные.Адрес6 = СтруктураАдреса.Улица;
		РазделыОтчета.Титульный.Данные.Адрес7 = СтруктураАдреса.Дом;
		РазделыОтчета.Титульный.Данные.Адрес8 = СтруктураАдреса.Корпус;
		РазделыОтчета.Титульный.Данные.Адрес9 = СтруктураАдреса.Квартира;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2011Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "ОГРН");
	Сведения.Добавить("", "ОКАТО");
	Сведения.Добавить("", "РегистрационныйНомерФСС");
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрФакт");
	Сведения.Добавить("", "АдрПрописки");
	Сведения.Добавить("", "АдрМЖ");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	
	ИННЮЛ = "";
	КППЮЛ = "";
	НаимЮЛПол = "";
	ОГРН = "";
	ОКАТО = "";
	РегистрационныйНомерФСС = "";
	РегНомПФР = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаОкончания, "РегНомПФР").РегНомПФР;
	АдрЮР = "";
	АдрФакт = "";
	АдрПрописки = "";
	АдрМЖ = "";
	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
	ТелСлуж = "";
	
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);
	ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
	ОргСведения.Свойство("ОГРН", ОГРН);
	ОргСведения.Свойство("ОКАТО", ОКАТО);
	ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	ОргСведения.Свойство("АдрЮР", АдрЮР);
	ОргСведения.Свойство("АдрФакт", АдрФакт);
	ОргСведения.Свойство("АдрПрописки", АдрПрописки);
	ОргСведения.Свойство("АдрМЖ", АдрМЖ);
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	
	Если ПБОЮЛ Тогда
		
		НаимЮлПол = ФИО;
		Адрес = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ОргНазв = НаимЮЛПол;
	РазделыОтчета.Титульный.Данные.ПрПодп = "1";
	РазделыОтчета.Титульный.Данные.ОргПодписантФамилия = ФИОРук;
	РазделыОтчета.Титульный.Данные.ДокУпПред = "";
	РазделыОтчета.Титульный.Данные.ИНН = ИННЮЛ;
	РазделыОтчета.Титульный.Данные.КПП = КППЮЛ;
	РазделыОтчета.Титульный.Данные.ОГРН = ОГРН;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	РазделыОтчета.Титульный.Данные.ТелОрганизации = ТелОрганизации;
	РазделыОтчета.Титульный.Данные.ОКАТО = ОКАТО;
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(РазделыОтчета.Титульный.Данные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 РазделыОтчета.Титульный.Данные.ОКВЭД);
	
	Если СтрДлина(РегНомПФР) < 14 Тогда
		Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
		КонецЕсли;
		Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомРег = РегНомПФР;
	
	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		
		РазделыОтчета.Титульный.Данные.Адрес1 = СтруктураАдреса.Индекс;
		РазделыОтчета.Титульный.Данные.Адрес2 = СтруктураАдреса.Регион;
		РазделыОтчета.Титульный.Данные.Адрес3 = СтруктураАдреса.Район;
		РазделыОтчета.Титульный.Данные.Адрес4 = СтруктураАдреса.Город;
		РазделыОтчета.Титульный.Данные.Адрес5 = СтруктураАдреса.НаселенныйПункт;
		РазделыОтчета.Титульный.Данные.Адрес6 = СтруктураАдреса.Улица;
		РазделыОтчета.Титульный.Данные.Адрес7 = СтруктураАдреса.Дом;
		РазделыОтчета.Титульный.Данные.Адрес8 = СтруктураАдреса.Корпус;
		РазделыОтчета.Титульный.Данные.Адрес9 = СтруктураАдреса.Квартира;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2012Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "ОГРН");
	Сведения.Добавить("", "ОКАТО");
	Сведения.Добавить("", "РегистрационныйНомерФСС");
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрФакт");
	Сведения.Добавить("", "АдрПрописки");
	Сведения.Добавить("", "АдрМЖ");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	
	ИННЮЛ = "";
	КППЮЛ = "";
	НаимЮЛПол = "";
	ОГРН = "";
	ОКАТО = "";
	РегистрационныйНомерФСС = "";
	РегНомПФР = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаОкончания, "РегНомПФР").РегНомПФР;
	АдрЮР = "";
	АдрФакт = "";
	АдрПрописки = "";
	АдрМЖ = "";
	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
	ТелСлуж = "";
	
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);
	ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
	ОргСведения.Свойство("ОГРН", ОГРН);
	ОргСведения.Свойство("ОКАТО", ОКАТО);
	ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	ОргСведения.Свойство("АдрЮР", АдрЮР);
	ОргСведения.Свойство("АдрФакт", АдрФакт);
	ОргСведения.Свойство("АдрПрописки", АдрПрописки);
	ОргСведения.Свойство("АдрМЖ", АдрМЖ);
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	
	Если ПБОЮЛ Тогда
		
		НаимЮлПол = ФИО;
		Адрес = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ОргНазв = НаимЮЛПол;
	РазделыОтчета.Титульный.Данные.ПрПодп = "1";
	РазделыОтчета.Титульный.Данные.ОргПодписантФамилия = ФИОРук;
	РазделыОтчета.Титульный.Данные.ОргПредНаим = "";
	РазделыОтчета.Титульный.Данные.ДокУпПред = "";
	РазделыОтчета.Титульный.Данные.ИНН = ИННЮЛ;
	РазделыОтчета.Титульный.Данные.КПП = КППЮЛ;
	РазделыОтчета.Титульный.Данные.ОГРН = ОГРН;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	РазделыОтчета.Титульный.Данные.ТелОрганизации = ТелОрганизации;
	РазделыОтчета.Титульный.Данные.ОКАТО = ОКАТО;
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(РазделыОтчета.Титульный.Данные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 РазделыОтчета.Титульный.Данные.ОКВЭД);
	
	Если СтрДлина(РегНомПФР) < 14 Тогда
		Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
		КонецЕсли;
		Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомРег = РегНомПФР;
	
	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		
		РазделыОтчета.Титульный.Данные.Адрес1 = СтруктураАдреса.Индекс;
		РазделыОтчета.Титульный.Данные.Адрес2 = СтруктураАдреса.Регион;
		РазделыОтчета.Титульный.Данные.Адрес3 = СтруктураАдреса.Район;
		РазделыОтчета.Титульный.Данные.Адрес4 = СтруктураАдреса.Город;
		РазделыОтчета.Титульный.Данные.Адрес5 = СтруктураАдреса.НаселенныйПункт;
		РазделыОтчета.Титульный.Данные.Адрес6 = СтруктураАдреса.Улица;
		РазделыОтчета.Титульный.Данные.Адрес7 = СтруктураАдреса.Дом;
		РазделыОтчета.Титульный.Данные.Адрес8 = СтруктураАдреса.Корпус;
		РазделыОтчета.Титульный.Данные.Адрес9 = СтруктураАдреса.Квартира;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2013Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);

	Сведения = Новый СписокЗначений;

	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "ОГРН");
	Сведения.Добавить("", "ОКАТО");
	Сведения.Добавить("", "РегистрационныйНомерФСС");
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрФакт");
	Сведения.Добавить("", "АдрПрописки");
	Сведения.Добавить("", "АдрМЖ");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, Сведения);
	
	ИННЮЛ = "";
	КППЮЛ = "";
	НаимЮЛПол = "";
	ОГРН = "";
	ОКАТО = "";
	РегистрационныйНомерФСС = "";
	РегНомПФР = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаОкончания, "РегНомПФР").РегНомПФР;
	АдрЮР = "";
	АдрФакт = "";
	АдрПрописки = "";
	АдрМЖ = "";
	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	ФИОИсп = "";
	ТелИсп = "";
	ТелОрганизации = "";
	ТелСлуж = "";
	
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);
	ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
	ОргСведения.Свойство("ОГРН", ОГРН);
	ОргСведения.Свойство("ОКАТО", ОКАТО);
	ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	ОргСведения.Свойство("АдрЮР", АдрЮР);
	ОргСведения.Свойство("АдрФакт", АдрФакт);
	ОргСведения.Свойство("АдрПрописки", АдрПрописки);
	ОргСведения.Свойство("АдрМЖ", АдрМЖ);
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ФИО", ФИО);
	ОргСведения.Свойство("ФИОИсп", ФИОИсп);
	ОргСведения.Свойство("ТелИсп", ТелИсп);
	ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж", ТелСлуж);
	
	Если ПБОЮЛ Тогда
		
		НаимЮлПол = ФИО;
		Адрес = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук = ФИО;
		ФИОБух = "";
		ФИОИсп = "";
		ТелИсп = "";
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ОргНазв = НаимЮЛПол;
	РазделыОтчета.Титульный.Данные.ПрПодп = "1";
	РазделыОтчета.Титульный.Данные.ОргПодписантФамилия = ФИОРук;
	РазделыОтчета.Титульный.Данные.ОргПредНаим = "";
	РазделыОтчета.Титульный.Данные.ДокУпПред = "";
	РазделыОтчета.Титульный.Данные.ИНН = ИННЮЛ;
	РазделыОтчета.Титульный.Данные.КПП = КППЮЛ;
	РазделыОтчета.Титульный.Данные.ОГРН = ОГРН;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	РазделыОтчета.Титульный.Данные.ТелОрганизации = ТелОрганизации;
	РазделыОтчета.Титульный.Данные.ОКАТО = ОКАТО;
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(РазделыОтчета.Титульный.Данные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 РазделыОтчета.Титульный.Данные.ОКВЭД);
	
	Если СтрДлина(РегНомПФР) < 14 Тогда
		Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
		КонецЕсли;
		Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомРег = РегНомПФР;
	
	Если Не ПБОЮЛ Тогда
		Адрес = АдрЮр;
	КонецЕсли;
	
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Адрес);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		
		РазделыОтчета.Титульный.Данные.Адрес1 = СтруктураАдреса.Индекс;
		РазделыОтчета.Титульный.Данные.Адрес2 = СтруктураАдреса.Регион;
		РазделыОтчета.Титульный.Данные.Адрес3 = СтруктураАдреса.Район;
		РазделыОтчета.Титульный.Данные.Адрес4 = СтруктураАдреса.Город;
		РазделыОтчета.Титульный.Данные.Адрес5 = СтруктураАдреса.НаселенныйПункт;
		РазделыОтчета.Титульный.Данные.Адрес6 = СтруктураАдреса.Улица;
		РазделыОтчета.Титульный.Данные.Адрес7 = СтруктураАдреса.Дом;
		РазделыОтчета.Титульный.Данные.Адрес8 = СтруктураАдреса.Корпус;
		РазделыОтчета.Титульный.Данные.Адрес9 = СтруктураАдреса.Квартира;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2014Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "РегистрационныйНомерФСС");
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрФакт");
	Сведения.Добавить("", "АдрПрописки");
	Сведения.Добавить("", "АдрМЖ");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, Сведения);
	
	ИННЮЛ                   = "";
	КППЮЛ                   = "";
	НаимЮЛПол               = "";
	РегистрационныйНомерФСС = "";
	РегНомПФР               = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаОкончания, "РегНомПФР").РегНомПФР;
	АдрЮР                   = "";
	АдрФакт                 = "";
	АдрПрописки             = "";
	АдрМЖ                   = "";
	ФИОРук                  = "";
	ФИОБух                  = "";
	ФИО                     = "";
	ФИОИсп                  = "";
	ТелИсп                  = "";
	ТелОрганизации          = "";
	ТелСлуж                 = "";
	
	ОргСведения.Свойство("ИННЮЛ",                   ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ",                   КППЮЛ);
	ОргСведения.Свойство("НаимЮЛПол",               НаимЮЛПол);
	ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	ОргСведения.Свойство("АдрЮР",                   АдрЮР);
	ОргСведения.Свойство("АдрФакт",                 АдрФакт);
	ОргСведения.Свойство("АдрПрописки",             АдрПрописки);
	ОргСведения.Свойство("АдрМЖ",                   АдрМЖ);
	ОргСведения.Свойство("ФИОРук",                  ФИОРук);
	ОргСведения.Свойство("ФИОБух",                  ФИОБух);
	ОргСведения.Свойство("ФИО",                     ФИО);
	ОргСведения.Свойство("ФИОИсп",                  ФИОИсп);
	ОргСведения.Свойство("ТелИсп",                  ТелИсп);
	ОргСведения.Свойство("ТелОрганизации",          ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж",                 ТелСлуж);
	
	Если ПБОЮЛ Тогда
		
		НаимЮлПол      = ФИО;
		Адрес          = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук         = ФИО;
		ФИОБух         = "";
		ФИОИсп         = "";
		ТелИсп         = "";
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ОргНазв             = НаимЮЛПол;
	РазделыОтчета.Титульный.Данные.ПрПодп              = "1";
	РазделыОтчета.Титульный.Данные.ОргПодписантФамилия = ФИОРук;
	РазделыОтчета.Титульный.Данные.ОргПредНаим         = "";
	РазделыОтчета.Титульный.Данные.ДокУпПред           = "";
	РазделыОтчета.Титульный.Данные.ИНН                 = ИННЮЛ;
	РазделыОтчета.Титульный.Данные.КПП                 = КППЮЛ;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	РазделыОтчета.Титульный.Данные.ТелОрганизации = ТелОрганизации;
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(РазделыОтчета.Титульный.Данные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 РазделыОтчета.Титульный.Данные.ОКВЭД);
	
	Если СтрДлина(РегНомПФР) < 14 Тогда
		Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
		КонецЕсли;
		Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомРег = РегНомПФР;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2015Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Сведения = Новый СписокЗначений;
	
	Сведения.Добавить("", "ИННЮЛ");
	Сведения.Добавить("", "КППЮЛ");
	Сведения.Добавить("", "НаимЮЛПол");
	Сведения.Добавить("", "РегистрационныйНомерФСС");
	Сведения.Добавить("", "АдрЮР");
	Сведения.Добавить("", "АдрФакт");
	Сведения.Добавить("", "АдрПрописки");
	Сведения.Добавить("", "АдрМЖ");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ТелОрганизации");
	Сведения.Добавить("", "ТелСлуж");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, Сведения);
	
	ИННЮЛ                   = "";
	КППЮЛ                   = "";
	НаимЮЛПол               = "";
	РегистрационныйНомерФСС = "";
	РегНомПФР               = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаОкончания, "РегНомПФР").РегНомПФР;
	АдрЮР                   = "";
	АдрФакт                 = "";
	АдрПрописки             = "";
	АдрМЖ                   = "";
	ФИОРук                  = "";
	ФИОБух                  = "";
	ФИО                     = "";
	ФИОИсп                  = "";
	ТелИсп                  = "";
	ТелОрганизации          = "";
	ТелСлуж                 = "";
	
	ОргСведения.Свойство("ИННЮЛ",                   ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ",                   КППЮЛ);
	ОргСведения.Свойство("НаимЮЛПол",               НаимЮЛПол);
	ОргСведения.Свойство("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	ОргСведения.Свойство("АдрЮР",                   АдрЮР);
	ОргСведения.Свойство("АдрФакт",                 АдрФакт);
	ОргСведения.Свойство("АдрПрописки",             АдрПрописки);
	ОргСведения.Свойство("АдрМЖ",                   АдрМЖ);
	ОргСведения.Свойство("ФИОРук",                  ФИОРук);
	ОргСведения.Свойство("ФИОБух",                  ФИОБух);
	ОргСведения.Свойство("ФИО",                     ФИО);
	ОргСведения.Свойство("ФИОИсп",                  ФИОИсп);
	ОргСведения.Свойство("ТелИсп",                  ТелИсп);
	ОргСведения.Свойство("ТелОрганизации",          ТелОрганизации);
	ОргСведения.Свойство("ТелСлуж",                 ТелСлуж);
	
	Если ПБОЮЛ Тогда
		
		НаимЮлПол      = ФИО;
		Адрес          = АдрПрописки;
		ТелОрганизации = ТелСлуж;
		ФИОРук         = ФИО;
		ФИОБух         = "";
		ФИОИсп         = "";
		ТелИсп         = "";
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ОргНазв             = НаимЮЛПол;
	РазделыОтчета.Титульный.Данные.ПрПодп              = "1";
	РазделыОтчета.Титульный.Данные.ОргПодписантФамилия = ФИОРук;
	РазделыОтчета.Титульный.Данные.ОргПредНаим         = "";
	РазделыОтчета.Титульный.Данные.ДокУпПред           = "";
	РазделыОтчета.Титульный.Данные.ИНН                 = ИННЮЛ;
	РазделыОтчета.Титульный.Данные.КПП                 = КППЮЛ;
	
	РазрешенныеЗнаки = "0123456789";
	ОткорректированныйНомерТелефона = "";
	Для Инд = 1 По СтрДлина(ТелОрганизации) Цикл
		ТекущийСимвол = Сред(ТелОрганизации, Инд, 1);
		Если СтрНайти(РазрешенныеЗнаки, ТекущийСимвол) <> 0 Тогда
			ОткорректированныйНомерТелефона = ОткорректированныйНомерТелефона + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	ТелОрганизации = ОткорректированныйНомерТелефона;
	
	РазделыОтчета.Титульный.Данные.ТелОрганизации = ТелОрганизации;
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(РазделыОтчета.Титульный.Данные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 РазделыОтчета.Титульный.Данные.ОКВЭД);
	
	Если СтрДлина(РегНомПФР) < 14 Тогда
		Если Сред(РегНомПФР, 4, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,3) + "-" + Сред(РегНомПФР, 4);
		КонецЕсли;
		Если Сред(РегНомПФР, 8, 1) <> "-" Тогда
			РегНомПФР = Лев(РегНомПФР,7) + "-" + Сред(РегНомПФР, 8);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомРег = РегНомПФР;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2010Кв4(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел12" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СтруктураДанных;
	
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел41" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
				
	// Обычные разделы.
	//
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2011Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел12" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СтруктураДанных;
	
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел41" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
				
	// Обычные разделы.
	//
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2012Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел2" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СтруктураДанных;
	
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел31"
		  ИЛИ НаимРаздела = "Раздел35"
		  ИЛИ НаимРаздела = "Раздел4"
		  ИЛИ НаимРаздела = "Раздел5" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
				
	// Обычные разделы.
	//
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2013Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Раздел2" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СтруктураДанных;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел31"
		  ИЛИ НаимРаздела = "Раздел35"
		  ИЛИ НаимРаздела = "Раздел4"
		  ИЛИ НаимРаздела = "Раздел5" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
				
	// Обычные разделы.
	//
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2014Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
	
	// Многостраничные разделы.
	Если НаимРаздела = "Раздел21"
	 Или НаимРаздела = "Раздел24" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СтруктураДанных;
		
	// Многострочные разделы.
	ИначеЕсли НаимРаздела = "Раздел33"
		  ИЛИ НаимРаздела = "Раздел4"
		  ИЛИ НаимРаздела = "Раздел5" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2015Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
	
	// Многостраничные разделы.
	Если НаимРаздела = "Раздел21"
	 Или НаимРаздела = "Раздел24" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СтруктураДанных;
		
	// Многострочные разделы.
	ИначеЕсли НаимРаздела = "Раздел4"
		  ИЛИ НаимРаздела = "Раздел5" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, ИмяРаздела = "")
	
	Если ИмяРаздела = "Раздел12" Тогда // Раздел 1.2
		
		Для Каждого Страница Из РазделыОтчета.Раздел12.Данные Цикл
			
			Данные = Страница.Данные;
			
			//Раздел 2
			Данные.П000200020003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020103)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020203);
			Данные.П000200020004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020104)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020204);
			Данные.П000200020005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020105)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020205);
			Данные.П000200020006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020106)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020206);
			Данные.П000200021003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021103)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021203);
			Данные.П000200021004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021104)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021204);
			Данные.П000200021005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021105)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021205);
			Данные.П000200021006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021106)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021206);
			Данные.П000200021603 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021703)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021803);
			Данные.П000200021604 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021704)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021804);
			Данные.П000200021605 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021705)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021805);
			Данные.П000200021606 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021706)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021806);
			Данные.П000200022003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020103)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021103)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021403)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021703);
			Данные.П000200022004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020104)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021104)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021404)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021704);
			Данные.П000200022005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020105)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021105)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021405)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021705);
			Данные.П000200022006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020106)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021106)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021406)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021706);
			Данные.П000200022103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020203)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021203)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021503)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021803);
			Данные.П000200022104 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020204)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021204)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021504)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021804);
			Данные.П000200022105 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020205)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021205)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021505)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021805);
			Данные.П000200022106 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020206)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021206)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021506)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021806);
			
			//Раздел 1
			Если РазделыОтчета.Раздел12.Данные.Индекс(Страница) = 0 Тогда 
				Данные.П000100011003 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024103")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034103)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039103);
				Данные.П000100011103 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024104")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034104)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039104);
				Данные.П000100011203 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024105")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034105)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039105);
				Данные.П000100011303 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024106")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034106)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039106);
				Данные.П000100011004 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024203")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034203)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039203);
				Данные.П000100011104 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024204")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034204)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039204);
				Данные.П000100011204 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024205")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034205)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039205);
				Данные.П000100011304 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024206")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034206)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039206);
				Данные.П000100011005 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024303")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034303)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039303);
				Данные.П000100011105 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024304")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034304)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039304);
				Данные.П000100011205 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024305")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034305)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039305);
				Данные.П000100011305 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024306")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034306)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039306);
				Данные.П000100011006 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024403")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034403)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039403);
				Данные.П000100011106 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024404")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034404)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039404);
				Данные.П000100011206 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024405")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034405)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039405);
				Данные.П000100011306 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024406")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034406)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039406);
				Данные.П000100011403 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011103)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011203)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011303);
				Данные.П000100011404 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011104)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011204)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011304);
				Данные.П000100011405 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011105)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011205)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011305);
				Данные.П000100011406 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011106)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011206)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011306);
				Данные.П000100013003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010003)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011003)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012003);
				Данные.П000100013004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010004)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011004)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012004);
				Данные.П000100013005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010005)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011005)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012005);
				Данные.П000100013006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010006)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011006)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012006);
				Данные.П000100014403 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014103)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014203)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014303);
				Данные.П000100014404 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014104)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014204)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014304);
				Данные.П000100014405 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014105)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014205)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014305);
				Данные.П000100014406 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014106)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014206)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014306);
				Данные.П000100015003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013003)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014003);
				Данные.П000100015004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013004)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014004);
				Данные.П000100015005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013005)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014005);
				Данные.П000100015006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013006)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014006);
			Иначе
				Данные.П000100011003 = 0;
				Данные.П000100011103 = 0;
				Данные.П000100011203 = 0;
				Данные.П000100011303 = 0;
				Данные.П000100011004 = 0;
				Данные.П000100011104 = 0;
				Данные.П000100011204 = 0;
				Данные.П000100011304 = 0;
				Данные.П000100011005 = 0;
				Данные.П000100011105 = 0;
				Данные.П000100011205 = 0;
				Данные.П000100011305 = 0;
				Данные.П000100011006 = 0;
				Данные.П000100011106 = 0;
				Данные.П000100011206 = 0;
				Данные.П000100011306 = 0;
				Данные.П000100011403 = 0;
				Данные.П000100011404 = 0;
				Данные.П000100011405 = 0;
				Данные.П000100011406 = 0;
				Данные.П000100013003 = 0;
				Данные.П000100013004 = 0;
				Данные.П000100013005 = 0;
				Данные.П000100013006 = 0;
				Данные.П000100014403 = 0;
				Данные.П000100014404 = 0;
				Данные.П000100014405 = 0;
				Данные.П000100014406 = 0;
				Данные.П000100015003 = 0;
				Данные.П000100015004 = 0;
				Данные.П000100015005 = 0;
				Данные.П000100015006 = 0;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел30" Тогда  // Раздел 3.0
		
		РазделыОтчета.Раздел30.Данные.П000300030003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030203);
		
		РазделыОтчета.Раздел30.Данные.П000300030004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030204);
		
		РазделыОтчета.Раздел30.Данные.П000300030005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030205);
		
		РазделыОтчета.Раздел30.Данные.П000300030006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030206);
		
		РазделыОтчета.Раздел30.Данные.П000300031003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031203);
		
		РазделыОтчета.Раздел30.Данные.П000300031004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031204);
		
		РазделыОтчета.Раздел30.Данные.П000300031005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031205);
		
		РазделыОтчета.Раздел30.Данные.П000300031006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031206);
		
		РазделыОтчета.Раздел30.Данные.П000300031603 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031703)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031803);
		
		РазделыОтчета.Раздел30.Данные.П000300031604 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031704)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031804);
		
		РазделыОтчета.Раздел30.Данные.П000300031605 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031705)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031805);
		
		РазделыОтчета.Раздел30.Данные.П000300031606 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031706)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031806);
		
		РазделыОтчета.Раздел30.Данные.П000300032003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031403)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031703);
		
		РазделыОтчета.Раздел30.Данные.П000300032004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031404)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031704);
		
		РазделыОтчета.Раздел30.Данные.П000300032005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031405)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031705);
		
		РазделыОтчета.Раздел30.Данные.П000300032006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031406)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031706);
		
		РазделыОтчета.Раздел30.Данные.П000300032103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031503)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031803);
		
		РазделыОтчета.Раздел30.Данные.П000300032104 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031504)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031804);
		
		РазделыОтчета.Раздел30.Данные.П000300032105 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031505)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031805);
		
		РазделыОтчета.Раздел30.Данные.П000300032106 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031506)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031806);
		
		РазделыОтчета.Раздел30.Данные.П000300035003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035203);
		
		РазделыОтчета.Раздел30.Данные.П000300035004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035204);
		
		РазделыОтчета.Раздел30.Данные.П000300035005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035205);
		
		РазделыОтчета.Раздел30.Данные.П000300035006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035206);
		
		РазделыОтчета.Раздел30.Данные.П000300036003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036203);
		
		РазделыОтчета.Раздел30.Данные.П000300036004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036204);
		
		РазделыОтчета.Раздел30.Данные.П000300036005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036205);
		
		РазделыОтчета.Раздел30.Данные.П000300036006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036206);
		
		РазделыОтчета.Раздел30.Данные.П000300036303 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036403)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036503);
		
		РазделыОтчета.Раздел30.Данные.П000300036304 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036404)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036504);
		
		РазделыОтчета.Раздел30.Данные.П000300036305 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036405)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036505);
		
		РазделыОтчета.Раздел30.Данные.П000300036306 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036406)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036506);
		
		РазделыОтчета.Раздел30.Данные.П000300037003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036403);
		
		РазделыОтчета.Раздел30.Данные.П000300037004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036404);
		
		РазделыОтчета.Раздел30.Данные.П000300037005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036405);
		
		РазделыОтчета.Раздел30.Данные.П000300037006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036406);
		
		РазделыОтчета.Раздел30.Данные.П000300037103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036503);
		
		РазделыОтчета.Раздел30.Данные.П000300037104 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036504);
		
		РазделыОтчета.Раздел30.Данные.П000300037105 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036505);
		
		РазделыОтчета.Раздел30.Данные.П000300037106 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036506);
		
		РазделыОтчета.Раздел30.Данные.П000300038003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035003)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036003)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036303);
		
		РазделыОтчета.Раздел30.Данные.П000300038004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035004)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036004)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036304);
		
		РазделыОтчета.Раздел30.Данные.П000300038005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035005)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036005)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036305);
		
		РазделыОтчета.Раздел30.Данные.П000300038006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035006)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036006)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036306);
		
		РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел12");
		
	ИначеЕсли ИмяРаздела = "Раздел41" Тогда // Раздел 4.1
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел41.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001005;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001006;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001007;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001008;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002005", Колонка5);
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002006", Колонка6);
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002007", Колонка7);
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002008", Колонка8);
		
	ИначеЕсли ИмяРаздела = "Раздел42" Тогда // Раздел 4.2
		
		П000420042103 = РазделыОтчета.Раздел42.Данные.П000420042103;
		П000420042203 = РазделыОтчета.Раздел42.Данные.П000420042203;
		РазделыОтчета.Раздел42.Данные.П000420042303 = ? (П000420042103 <> 0, (П000420042203 / П000420042103) * 100, 0);
		П000420042104 = РазделыОтчета.Раздел42.Данные.П000420042104;
		П000420042204 = РазделыОтчета.Раздел42.Данные.П000420042204;
		РазделыОтчета.Раздел42.Данные.П000420042304 = ? (П000420042104 <> 0, (П000420042204 / П000420042104) * 100, 0);
		П000420042105 = РазделыОтчета.Раздел42.Данные.П000420042105;
		П000420042205 = РазделыОтчета.Раздел42.Данные.П000420042205;
		РазделыОтчета.Раздел42.Данные.П000420042305 = ? (П000420042105 <> 0, (П000420042205 / П000420042105) * 100, 0);
		П000420042106 = РазделыОтчета.Раздел42.Данные.П000420042106;
		П000420042206 = РазделыОтчета.Раздел42.Данные.П000420042206;
		РазделыОтчета.Раздел42.Данные.П000420042306 = ? (П000420042106 <> 0, (П000420042206 / П000420042106) * 100, 0);
		П000420042403 = РазделыОтчета.Раздел42.Данные.П000420042403;
		П000420042503 = РазделыОтчета.Раздел42.Данные.П000420042503;
		РазделыОтчета.Раздел42.Данные.П000420042603 = ? (П000420042403 <> 0, (П000420042503 / П000420042403) * 100, 0);
		П000420042404 = РазделыОтчета.Раздел42.Данные.П000420042404;
		П000420042504 = РазделыОтчета.Раздел42.Данные.П000420042504;
		РазделыОтчета.Раздел42.Данные.П000420042604 = ? (П000420042404 <> 0, (П000420042504 / П000420042404) * 100, 0);
		П000420042405 = РазделыОтчета.Раздел42.Данные.П000420042405;
		П000420042505 = РазделыОтчета.Раздел42.Данные.П000420042505;
		РазделыОтчета.Раздел42.Данные.П000420042605 = ? (П000420042405 <> 0, (П000420042505 / П000420042405) * 100, 0);
		П000420042406 = РазделыОтчета.Раздел42.Данные.П000420042406;
		П000420042506 = РазделыОтчета.Раздел42.Данные.П000420042506;
		РазделыОтчета.Раздел42.Данные.П000420042606 = ? (П000420042406 <> 0, (П000420042506 / П000420042406) * 100, 0);
		П000420042703 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042703);
		П000420042803 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042803);
		РазделыОтчета.Раздел42.Данные.П000420042903 = ? (П000420042703 <> 0, (П000420042803 / П000420042703) * 100, 0);
		П000420042704 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042704);
		П000420042804 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042804);
		РазделыОтчета.Раздел42.Данные.П000420042904 = ? (П000420042704 <> 0, (П000420042804 / П000420042704) * 100, 0);
		П000420042705 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042705);
		П000420042805 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042805);
		РазделыОтчета.Раздел42.Данные.П000420042905 = ? (П000420042705 <> 0, (П000420042805 / П000420042705) * 100, 0);
		П000420042706 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042706);
		П000420042806 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042806);
		РазделыОтчета.Раздел42.Данные.П000420042906 = ? (П000420042706 <> 0, (П000420042806 / П000420042706) * 100, 0);
		
	ИначеЕсли ИмяРаздела = "Раздел43" Тогда  // Раздел 4.3
		
		П000430043003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел43.Данные.П000430043003);
		П000430043103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел43.Данные.П000430043103);
		РазделыОтчета.Раздел43.Данные.П000430043203 = ?(П000430043003 <> 0, (П000430043103 / П000430043003) * 100, 0);
		
	ИначеЕсли ИмяРаздела = "Раздел50" Тогда // Раздел 5
		
		РазделыОтчета.Раздел50.Данные.П000500053003
		= ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500051003)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500052003);
			
		РазделыОтчета.Раздел50.Данные.П000500053004
		= ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500051004)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500052004);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел30");
		РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел41");
		РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел42");
		РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел43");
		РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел50");
		РасчетРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел12");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, ИмяРаздела = "")
	
	Если ИмяРаздела = "Раздел12" Тогда // Раздел 1.2
		
		Для Каждого Страница Из РазделыОтчета.Раздел12.Данные Цикл
			
			Данные = Страница.Данные;
			
			//Раздел 2
			Данные.П000200020003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020103)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020203);
			Данные.П000200020004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020104)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020204);
			Данные.П000200020005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020105)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020205);
			Данные.П000200020006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020106)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020206);
			Данные.П000200021003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021103)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021203);
			Данные.П000200021004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021104)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021204);
			Данные.П000200021005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021105)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021205);
			Данные.П000200021006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021106)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021206);
			Данные.П000200021603 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021703)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021803);
			Данные.П000200021604 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021704)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021804);
			Данные.П000200021605 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021705)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021805);
			Данные.П000200021606 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021706)
				+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021806);
			Данные.П000200022003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020103)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021103)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021403)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021703);
			Данные.П000200022004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020104)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021104)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021404)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021704);
			Данные.П000200022005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020105)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021105)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021405)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021705);
			Данные.П000200022006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020106)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021106)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021406)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021706);
			Данные.П000200022103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020203)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021203)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021503)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021803);
			Данные.П000200022104 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020204)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021204)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021504)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021804);
			Данные.П000200022105 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020205)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021205)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021505)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021805);
			Данные.П000200022106 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200020206)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021206)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021506)
				- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000200021806);
			
			//Раздел 1
			Если РазделыОтчета.Раздел12.Данные.Индекс(Страница) = 0 Тогда 
				Данные.П000100011003 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024103")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034103)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039103);
				Данные.П000100011103 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024104")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034104)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039104);
				Данные.П000100011203 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024105")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034105)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039105);
				Данные.П000100011303 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024106")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034106)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039106);
				Данные.П000100011004 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024203")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034203)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039203);
				Данные.П000100011104 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024204")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034204)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039204);
				Данные.П000100011204 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024205")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034205)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039205);
				Данные.П000100011304 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024206")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034206)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039206);
				Данные.П000100011005 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024303")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034303)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039303);
				Данные.П000100011105 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024304")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034304)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039304);
				Данные.П000100011205 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024305")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034305)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039305);
				Данные.П000100011305 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024306")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034306)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039306);
				Данные.П000100011006 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024403")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034403)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039403);
				Данные.П000100011106 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024404")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034404)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039404);
				Данные.П000100011206 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024405")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034405)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039405);
				Данные.П000100011306 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел12.Данные, "П000200024406")
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300034406)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300039406);
				Данные.П000100011403 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011103)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011203)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011303);
				Данные.П000100011404 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011104)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011204)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011304);
				Данные.П000100011405 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011105)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011205)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011305);
				Данные.П000100011406 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011106)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011206)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011306);
				Данные.П000100013003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010003)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011003)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012003);
				Данные.П000100013004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010004)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011004)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012004);
				Данные.П000100013005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010005)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011005)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012005);
				Данные.П000100013006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100010006)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100011006)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100012006);
				Данные.П000100014403 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014103)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014203)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014303);
				Данные.П000100014404 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014104)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014204)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014304);
				Данные.П000100014405 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014105)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014205)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014305);
				Данные.П000100014406 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014106)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014206)
					+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014306);
				Данные.П000100015003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013003)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014003);
				Данные.П000100015004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013004)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014004);
				Данные.П000100015005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013005)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014005);
				Данные.П000100015006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100013006)
					- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, Данные.П000100014006);
				Иначе
					Данные.П000100011003 = 0;
					Данные.П000100011103 = 0;
					Данные.П000100011203 = 0;
					Данные.П000100011303 = 0;
					Данные.П000100011004 = 0;
					Данные.П000100011104 = 0;
					Данные.П000100011204 = 0;
					Данные.П000100011304 = 0;
					Данные.П000100011005 = 0;
					Данные.П000100011105 = 0;
					Данные.П000100011205 = 0;
					Данные.П000100011305 = 0;
					Данные.П000100011006 = 0;
					Данные.П000100011106 = 0;
					Данные.П000100011206 = 0;
					Данные.П000100011306 = 0;
					Данные.П000100011403 = 0;
					Данные.П000100011404 = 0;
					Данные.П000100011405 = 0;
					Данные.П000100011406 = 0;
					Данные.П000100013003 = 0;
					Данные.П000100013004 = 0;
					Данные.П000100013005 = 0;
					Данные.П000100013006 = 0;
					Данные.П000100014403 = 0;
					Данные.П000100014404 = 0;
					Данные.П000100014405 = 0;
					Данные.П000100014406 = 0;
					Данные.П000100015003 = 0;
					Данные.П000100015004 = 0;
					Данные.П000100015005 = 0;
					Данные.П000100015006 = 0;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел30" Тогда  // Раздел 3.0
		
		РазделыОтчета.Раздел30.Данные.П000300030003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030203);
		
		РазделыОтчета.Раздел30.Данные.П000300030004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030204);
		
		РазделыОтчета.Раздел30.Данные.П000300030005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030205);
		
		РазделыОтчета.Раздел30.Данные.П000300030006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030206);
		
		РазделыОтчета.Раздел30.Данные.П000300031003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031203);
		
		РазделыОтчета.Раздел30.Данные.П000300031004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031204);
		
		РазделыОтчета.Раздел30.Данные.П000300031005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031205);
		
		РазделыОтчета.Раздел30.Данные.П000300031006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031206);
		
		РазделыОтчета.Раздел30.Данные.П000300031603 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031703)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031803);
		
		РазделыОтчета.Раздел30.Данные.П000300031604 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031704)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031804);
		
		РазделыОтчета.Раздел30.Данные.П000300031605 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031705)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031805);
		
		РазделыОтчета.Раздел30.Данные.П000300031606 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031706)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031806);
		
		РазделыОтчета.Раздел30.Данные.П000300032003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031403)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031703);
		
		РазделыОтчета.Раздел30.Данные.П000300032004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031404)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031704);
		
		РазделыОтчета.Раздел30.Данные.П000300032005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031405)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031705);
		
		РазделыОтчета.Раздел30.Данные.П000300032006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031406)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031706);
		
		РазделыОтчета.Раздел30.Данные.П000300032103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031503)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031803);
		
		РазделыОтчета.Раздел30.Данные.П000300032104 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031504)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031804);
		
		РазделыОтчета.Раздел30.Данные.П000300032105 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031505)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031805);
		
		РазделыОтчета.Раздел30.Данные.П000300032106 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300030206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031506)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300031806);
		
		РазделыОтчета.Раздел30.Данные.П000300035003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035203);
		
		РазделыОтчета.Раздел30.Данные.П000300035004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035204);
		
		РазделыОтчета.Раздел30.Данные.П000300035005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035205);
		
		РазделыОтчета.Раздел30.Данные.П000300035006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035206);
		
		РазделыОтчета.Раздел30.Данные.П000300036003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036103)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036203);
		
		РазделыОтчета.Раздел30.Данные.П000300036004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036104)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036204);
		
		РазделыОтчета.Раздел30.Данные.П000300036005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036105)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036205);
		
		РазделыОтчета.Раздел30.Данные.П000300036006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036106)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036206);
		
		РазделыОтчета.Раздел30.Данные.П000300036303 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036403)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036503);
		
		РазделыОтчета.Раздел30.Данные.П000300036304 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036404)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036504);
		
		РазделыОтчета.Раздел30.Данные.П000300036305 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036405)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036505);
		
		РазделыОтчета.Раздел30.Данные.П000300036306 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036406)
		+ ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036506);
		
		РазделыОтчета.Раздел30.Данные.П000300037003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036103)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036403);
		
		РазделыОтчета.Раздел30.Данные.П000300037004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036104)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036404);
		
		РазделыОтчета.Раздел30.Данные.П000300037005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036105)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036405);
		
		РазделыОтчета.Раздел30.Данные.П000300037006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036106)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036406);
		
		РазделыОтчета.Раздел30.Данные.П000300037103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036203)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036503);
		
		РазделыОтчета.Раздел30.Данные.П000300037104 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036204)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036504);
		
		РазделыОтчета.Раздел30.Данные.П000300037105 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036205)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036505);
		
		РазделыОтчета.Раздел30.Данные.П000300037106 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036206)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036506);
		
		РазделыОтчета.Раздел30.Данные.П000300038003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035003)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036003)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036303);
		
		РазделыОтчета.Раздел30.Данные.П000300038004 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035004)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036004)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036304);
		
		РазделыОтчета.Раздел30.Данные.П000300038005 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035005)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036005)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036305);
		
		РазделыОтчета.Раздел30.Данные.П000300038006 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300035006)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036006)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел30.Данные.П000300036306);
		
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел12");
		
	ИначеЕсли ИмяРаздела = "Раздел41" Тогда // Раздел 4.1
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел41.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001005;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001006;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001007;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел41.ДанныеДопСтрок[Ном - 1].П000410001008;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002005", Колонка5);
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002006", Колонка6);
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002007", Колонка7);
		РазделыОтчета.Раздел41.Данные.Вставить("П000410002008", Колонка8);
		
	ИначеЕсли ИмяРаздела = "Раздел42" Тогда // Раздел 4.2
		
		П000420042103 = РазделыОтчета.Раздел42.Данные.П000420042103;
		П000420042203 = РазделыОтчета.Раздел42.Данные.П000420042203;
		РазделыОтчета.Раздел42.Данные.П000420042303 = ? (П000420042103 <> 0, (П000420042203 / П000420042103) * 100, 0);
		П000420042104 = РазделыОтчета.Раздел42.Данные.П000420042104;
		П000420042204 = РазделыОтчета.Раздел42.Данные.П000420042204;
		РазделыОтчета.Раздел42.Данные.П000420042304 = ? (П000420042104 <> 0, (П000420042204 / П000420042104) * 100, 0);
		П000420042105 = РазделыОтчета.Раздел42.Данные.П000420042105;
		П000420042205 = РазделыОтчета.Раздел42.Данные.П000420042205;
		РазделыОтчета.Раздел42.Данные.П000420042305 = ? (П000420042105 <> 0, (П000420042205 / П000420042105) * 100, 0);
		П000420042106 = РазделыОтчета.Раздел42.Данные.П000420042106;
		П000420042206 = РазделыОтчета.Раздел42.Данные.П000420042206;
		РазделыОтчета.Раздел42.Данные.П000420042306 = ? (П000420042106 <> 0, (П000420042206 / П000420042106) * 100, 0);
		П000420042403 = РазделыОтчета.Раздел42.Данные.П000420042403;
		П000420042503 = РазделыОтчета.Раздел42.Данные.П000420042503;
		РазделыОтчета.Раздел42.Данные.П000420042603 = ? (П000420042403 <> 0, (П000420042503 / П000420042403) * 100, 0);
		П000420042404 = РазделыОтчета.Раздел42.Данные.П000420042404;
		П000420042504 = РазделыОтчета.Раздел42.Данные.П000420042504;
		РазделыОтчета.Раздел42.Данные.П000420042604 = ? (П000420042404 <> 0, (П000420042504 / П000420042404) * 100, 0);
		П000420042405 = РазделыОтчета.Раздел42.Данные.П000420042405;
		П000420042505 = РазделыОтчета.Раздел42.Данные.П000420042505;
		РазделыОтчета.Раздел42.Данные.П000420042605 = ? (П000420042405 <> 0, (П000420042505 / П000420042405) * 100, 0);
		П000420042406 = РазделыОтчета.Раздел42.Данные.П000420042406;
		П000420042506 = РазделыОтчета.Раздел42.Данные.П000420042506;
		РазделыОтчета.Раздел42.Данные.П000420042606 = ? (П000420042406 <> 0, (П000420042506 / П000420042406) * 100, 0);
		П000420042703 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042703);
		П000420042803 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042803);
		РазделыОтчета.Раздел42.Данные.П000420042903 = ? (П000420042703 <> 0, (П000420042803 / П000420042703) * 100, 0);
		П000420042704 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042704);
		П000420042804 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042804);
		РазделыОтчета.Раздел42.Данные.П000420042904 = ? (П000420042704 <> 0, (П000420042804 / П000420042704) * 100, 0);
		П000420042705 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042705);
		П000420042805 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042805);
		РазделыОтчета.Раздел42.Данные.П000420042905 = ? (П000420042705 <> 0, (П000420042805 / П000420042705) * 100, 0);
		П000420042706 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042706);
		П000420042806 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел42.Данные.П000420042806);
		РазделыОтчета.Раздел42.Данные.П000420042906 = ? (П000420042706 <> 0, (П000420042806 / П000420042706) * 100, 0);
		
	ИначеЕсли ИмяРаздела = "Раздел43" Тогда  // Раздел 4.3
		
		П000430043003 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел43.Данные.П000430043003);
		П000430043103 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел43.Данные.П000430043103);
		РазделыОтчета.Раздел43.Данные.П000430043203 = ?(П000430043003 <> 0, (П000430043103 / П000430043003) * 100, 0);
		
	ИначеЕсли ИмяРаздела = "Раздел44" Тогда // Раздел 4.4
		
		П000440043503 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел44.Данные.П000440043503);
		П000440043603 = ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел44.Данные.П000440043603);
		РазделыОтчета.Раздел44.Данные.П000440043703 = ?(П000440043503 <> 0, (П000440043603 / П000440043503) * 100, 0);
		
	ИначеЕсли ИмяРаздела = "Раздел50" Тогда // Раздел 5
		
		РазделыОтчета.Раздел50.Данные.П000500053003
		= ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500051003)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500052003);
			
		РазделыОтчета.Раздел50.Данные.П000500053004
		= ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500051004)
		- ОкруглитьЧислоПоФормату(СтруктураРеквизитовОтчета, РазделыОтчета.Раздел50.Данные.П000500052004);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел30");
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел41");
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел42");
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел43");
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел44");
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел50");
		РасчетРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураРеквизитовОтчета, РазделыОтчета, "Раздел12");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, ИмяРаздела = "")
	
	Если ИмяРаздела = "Раздел1" Тогда // Раздел 1
		
		РазделыОтчета.Раздел1.Данные.П000100013003 = РазделыОтчета.Раздел1.Данные.П000100010003
		+ РазделыОтчета.Раздел1.Данные.П000100011003
		+ РазделыОтчета.Раздел1.Данные.П000100012003;
		
		РазделыОтчета.Раздел1.Данные.П000100013004 = РазделыОтчета.Раздел1.Данные.П000100010004
		+ РазделыОтчета.Раздел1.Данные.П000100011004
		+ РазделыОтчета.Раздел1.Данные.П000100012004;
		
		РазделыОтчета.Раздел1.Данные.П000100013005 = РазделыОтчета.Раздел1.Данные.П000100010005
		+ РазделыОтчета.Раздел1.Данные.П000100011005
		+ РазделыОтчета.Раздел1.Данные.П000100012005;
		
		РазделыОтчета.Раздел1.Данные.П000100014403 = РазделыОтчета.Раздел1.Данные.П000100014103
		+ РазделыОтчета.Раздел1.Данные.П000100014203
		+ РазделыОтчета.Раздел1.Данные.П000100014303;
		
		РазделыОтчета.Раздел1.Данные.П000100014404 = РазделыОтчета.Раздел1.Данные.П000100014104
		+ РазделыОтчета.Раздел1.Данные.П000100014204
		+ РазделыОтчета.Раздел1.Данные.П000100014304;
		
		РазделыОтчета.Раздел1.Данные.П000100014405 = РазделыОтчета.Раздел1.Данные.П000100014105
		+ РазделыОтчета.Раздел1.Данные.П000100014205
		+ РазделыОтчета.Раздел1.Данные.П000100014305;
		
		РазделыОтчета.Раздел1.Данные.П000100015003 = РазделыОтчета.Раздел1.Данные.П000100013003
		- РазделыОтчета.Раздел1.Данные.П000100014003;
		
		РазделыОтчета.Раздел1.Данные.П000100015004 = РазделыОтчета.Раздел1.Данные.П000100013004
		- РазделыОтчета.Раздел1.Данные.П000100014004;
		
		РазделыОтчета.Раздел1.Данные.П000100015005 = РазделыОтчета.Раздел1.Данные.П000100013005
		- РазделыОтчета.Раздел1.Данные.П000100014005;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда // Раздел 2
		
		Для Каждого Страница Из РазделыОтчета.Раздел2.Данные Цикл
			
			Данные = Страница.Данные;
			
			Данные.П000200024003 = Данные.П000200020103
			+ Данные.П000200020303
			- Данные.П000200021103
			- Данные.П000200021303
			- Данные.П000200022103
			- Данные.П000200022303
			- Данные.П000200023103
			- Данные.П000200023303;
			
			Данные.П000200024004 = Данные.П000200020104
			+ Данные.П000200020304
			- Данные.П000200021104
			- Данные.П000200021304
			- Данные.П000200022104
			- Данные.П000200022304
			- Данные.П000200023104
			- Данные.П000200023304;
			
			Данные.П000200024005 = Данные.П000200020105
			+ Данные.П000200020305
			- Данные.П000200021105
			- Данные.П000200021305
			- Данные.П000200022105
			- Данные.П000200022305
			- Данные.П000200023105
			- Данные.П000200023305;
			
			Данные.П000200024006 = Данные.П000200020106
			+ Данные.П000200020306
			- Данные.П000200021106
			- Данные.П000200021306
			- Данные.П000200022106
			- Данные.П000200022306
			- Данные.П000200023106
			- Данные.П000200023306;
			
			Данные.П000200024103 = Данные.П000200020203
			- Данные.П000200021203
			- Данные.П000200022203
			- Данные.П000200023203;
			
			Данные.П000200024104 = Данные.П000200020204
			- Данные.П000200021204
			- Данные.П000200022204
			- Данные.П000200023204;
			
			Данные.П000200024105 = Данные.П000200020205
			- Данные.П000200021205
			- Данные.П000200022205
			- Данные.П000200023205;
			
			Данные.П000200024106 = Данные.П000200020206
			- Данные.П000200021206
			- Данные.П000200022206
			- Данные.П000200023206;
			
			Данные.П000200027503 = Данные.П000200027103
			- Данные.П000200027203
			- Данные.П000200027303
			- Данные.П000200027403;
			
			Данные.П000200027504 = Данные.П000200027104
			- Данные.П000200027204
			- Данные.П000200027304
			- Данные.П000200027404;
			
			Данные.П000200027505 = Данные.П000200027105
			- Данные.П000200027205
			- Данные.П000200027305
			- Данные.П000200027405;
			
			Данные.П000200027506 = Данные.П000200027106
			- Данные.П000200027206
			- Данные.П000200027306
			- Данные.П000200027406;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел1.Данные.П000100011003 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025003")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025203");
		РазделыОтчета.Раздел1.Данные.П000100011004 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025103");
		РазделыОтчета.Раздел1.Данные.П000100011005 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200027603");
		РазделыОтчета.Раздел1.Данные.П000100011103 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025004")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025204");
		РазделыОтчета.Раздел1.Данные.П000100011104 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025104");
		РазделыОтчета.Раздел1.Данные.П000100011105 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200027604");
		РазделыОтчета.Раздел1.Данные.П000100011203 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025005")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025205");
		РазделыОтчета.Раздел1.Данные.П000100011204 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025105");
		РазделыОтчета.Раздел1.Данные.П000100011205 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200027605");
		РазделыОтчета.Раздел1.Данные.П000100011303 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025006")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025206");
		РазделыОтчета.Раздел1.Данные.П000100011304 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200025106");
		РазделыОтчета.Раздел1.Данные.П000100011305 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000200027606");
		РазделыОтчета.Раздел1.Данные.П000100011403 = РазделыОтчета.Раздел1.Данные.П000100011103
		+ РазделыОтчета.Раздел1.Данные.П000100011203
		+ РазделыОтчета.Раздел1.Данные.П000100011303;
		РазделыОтчета.Раздел1.Данные.П000100011404 = РазделыОтчета.Раздел1.Данные.П000100011104
		+ РазделыОтчета.Раздел1.Данные.П000100011204
		+ РазделыОтчета.Раздел1.Данные.П000100011304;
		РазделыОтчета.Раздел1.Данные.П000100011405 = РазделыОтчета.Раздел1.Данные.П000100011105
		+ РазделыОтчета.Раздел1.Данные.П000100011205
		+ РазделыОтчета.Раздел1.Данные.П000100011305;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел31" Тогда // Раздел 3.1	
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел31.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310001005;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310001006;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310001007;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310001008;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел31.Данные.Вставить("П000310002005", Колонка5);
		РазделыОтчета.Раздел31.Данные.Вставить("П000310002006", Колонка6);
		РазделыОтчета.Раздел31.Данные.Вставить("П000310002007", Колонка7);
		РазделыОтчета.Раздел31.Данные.Вставить("П000310002008", Колонка8);
		
	ИначеЕсли ИмяРаздела = "Раздел32" Тогда // Раздел 3.2
		
		П000320032103 = РазделыОтчета.Раздел32.Данные.П000320032103;
		П000320032203 = РазделыОтчета.Раздел32.Данные.П000320032203;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032303", ? (П000320032103 <> 0, (П000320032203 / П000320032103) * 100, 0));
		
		П000320032104 = РазделыОтчета.Раздел32.Данные.П000320032104;
		П000320032204 = РазделыОтчета.Раздел32.Данные.П000320032204;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032304", ?(П000320032104 <> 0, (П000320032204 / П000320032104) * 100, 0));
		
		П000320032105 = РазделыОтчета.Раздел32.Данные.П000320032105;
		П000320032205 = РазделыОтчета.Раздел32.Данные.П000320032205;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032305", ?(П000320032105 <> 0, (П000320032205 / П000320032105) * 100, 0));
		
		П000320032106 = РазделыОтчета.Раздел32.Данные.П000320032106;
		П000320032206 = РазделыОтчета.Раздел32.Данные.П000320032206;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032306", ? (П000320032106 <> 0, (П000320032206 / П000320032106) * 100, 0));
		
	ИначеЕсли ИмяРаздела = "Раздел33" Тогда // Раздел 3.3
		
		П000330033103 = РазделыОтчета.Раздел33.Данные.П000330033103;
		П000330033203 = РазделыОтчета.Раздел33.Данные.П000330033203;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033303", ?(П000330033103 <> 0, (П000330033203 / П000330033103) * 100, 0));
		
		П000330033104 = РазделыОтчета.Раздел33.Данные.П000330033104;
		П000330033204 = РазделыОтчета.Раздел33.Данные.П000330033204;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033304", ?(П000330033104 <> 0, (П000330033204 / П000330033104) * 100, 0));
		
		П000330033105 = РазделыОтчета.Раздел33.Данные.П000330033105;
		П000330033205 = РазделыОтчета.Раздел33.Данные.П000330033205;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033305", ?(П000330033105 <> 0, (П000330033205 / П000330033105) * 100, 0));
		
		П000330033106 = РазделыОтчета.Раздел33.Данные.П000330033106;
		П000330033206 = РазделыОтчета.Раздел33.Данные.П000330033206;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033306", ?(П000330033106 <> 0, (П000330033206 / П000330033106) * 100, 0));
		
		П000330033403 = РазделыОтчета.Раздел33.Данные.П000330033403;
		П000330033503 = РазделыОтчета.Раздел33.Данные.П000330033503;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033603", ?(П000330033403 <> 0, (П000330033503 / П000330033403) * 100, 0));
		
		П000330033404 = РазделыОтчета.Раздел33.Данные.П000330033404;
		П000330033504 = РазделыОтчета.Раздел33.Данные.П000330033504;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033604", ?(П000330033404 <> 0, (П000330033504 / П000330033404) * 100, 0));
		
		П000330033405 = РазделыОтчета.Раздел33.Данные.П000330033405;
		П000330033505 = РазделыОтчета.Раздел33.Данные.П000330033505;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033605", ?(П000330033405 <> 0, (П000330033505 / П000330033405) * 100, 0));
		
		П000330033406 = РазделыОтчета.Раздел33.Данные.П000330033406;
		П000330033506 = РазделыОтчета.Раздел33.Данные.П000330033506;
		
		РазделыОтчета.Раздел33.Данные.Вставить("П000330033606", ?(П000330033406 <> 0, (П000330033506 / П000330033406) * 100, 0));
		
	ИначеЕсли ИмяРаздела = "Раздел34" Тогда  // Раздел 3.4	
		
		РазделыОтчета.Раздел34.Данные.Вставить("П000340034303", ?(РазделыОтчета.Раздел34.Данные.П000340034103 = 0, 0,
		РазделыОтчета.Раздел34.Данные.П000340034203
		/ РазделыОтчета.Раздел34.Данные.П000340034103 * 100));
		
		РазделыОтчета.Раздел34.Данные.Вставить("П000340034304", ?(РазделыОтчета.Раздел34.Данные.П000340034104 = 0, 0,
		РазделыОтчета.Раздел34.Данные.П000340034204
		/ РазделыОтчета.Раздел34.Данные.П000340034104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел35" Тогда  // Раздел 3.5
		
		Колонка3 = 0;
		Колонка4 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел35.ДанныеДопСтрок.Количество() Цикл
			
			Колонка3 = Колонка3 + РазделыОтчета.Раздел35.ДанныеДопСтрок[Ном - 1].П000350000103;
			Колонка4 = Колонка4 + РазделыОтчета.Раздел35.ДанныеДопСтрок[Ном - 1].П000350000104;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел35.Данные.Вставить("П000350000203", Колонка3);
		РазделыОтчета.Раздел35.Данные.Вставить("П000350000204", Колонка4);
		
	ИначеЕсли ИмяРаздела = "Раздел36" Тогда // Раздел 3.6
		
		РазделыОтчета.Раздел36.Данные.Вставить("П000360036303", ?(РазделыОтчета.Раздел36.Данные.П000360036103 = 0, 0,
		РазделыОтчета.Раздел36.Данные.П000360036203
		/ РазделыОтчета.Раздел36.Данные.П000360036103 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел37" Тогда // Раздел 3.7
		
		РазделыОтчета.Раздел37.Данные.Вставить("П000370037503", ?(РазделыОтчета.Раздел37.Данные.П000370037103 = 0, 0,
		(РазделыОтчета.Раздел37.Данные.П000370037203
		+ РазделыОтчета.Раздел37.Данные.П000370037303
		+ РазделыОтчета.Раздел37.Данные.П000370037403)
		/ РазделыОтчета.Раздел37.Данные.П000370037103 * 100));
		
		РазделыОтчета.Раздел37.Данные.Вставить("П000370037504", ?(РазделыОтчета.Раздел37.Данные.П000370037104 = 0, 0,
		(РазделыОтчета.Раздел37.Данные.П000370037204
		+ РазделыОтчета.Раздел37.Данные.П000370037304
		+ РазделыОтчета.Раздел37.Данные.П000370037404)
		/ РазделыОтчета.Раздел37.Данные.П000370037104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел38" Тогда  // Раздел 3.8	
		
		РазделыОтчета.Раздел38.Данные.Вставить("П000380038303", ?(РазделыОтчета.Раздел38.Данные.П000380038103 = 0, 0,
		РазделыОтчета.Раздел38.Данные.П000380038203
		/ РазделыОтчета.Раздел38.Данные.П000380038103 * 100));
		
		РазделыОтчета.Раздел38.Данные.Вставить("П000380038304", ?(РазделыОтчета.Раздел38.Данные.П000380038104 = 0, 0,
		РазделыОтчета.Раздел38.Данные.П000380038204
		/ РазделыОтчета.Раздел38.Данные.П000380038104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда // Раздел 4
		
		Колонка4 = 0;
		Колонка5 = 0;
		Колонка6 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() Цикл
			
			Колонка4 = Колонка4 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000104;
			Колонка5 = Колонка5 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000105;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000106;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000204", Колонка4);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000205", Колонка5);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000206", Колонка6);
		
		РазделыОтчета.Раздел1.Данные.П000100012003 = РазделыОтчета.Раздел4.Данные.П000400000204;
		РазделыОтчета.Раздел1.Данные.П000100012004 = РазделыОтчета.Раздел4.Данные.П000400000205;
		РазделыОтчета.Раздел1.Данные.П000100012005 = РазделыОтчета.Раздел4.Данные.П000400000206;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел5" Тогда // Раздел 5
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел5.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000150;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000160;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000170;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000180;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000250", Колонка5);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000260", Колонка6);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000270", Колонка7);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000280", Колонка8);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел5");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел4");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел38");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел37");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел36");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел35");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел34");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел33");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел32");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел31");
		РасчетРеглОтчетРСВ1ФормаОтчета2012Кв1(РазделыОтчета, "Раздел2");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, ИмяРаздела = "")
	
	Если ИмяРаздела = "Раздел1" Тогда // Раздел 1
		
		РазделыОтчета.Раздел1.Данные.П000100013003 = РазделыОтчета.Раздел1.Данные.П000100010003
		+ РазделыОтчета.Раздел1.Данные.П000100011003
		+ РазделыОтчета.Раздел1.Данные.П000100012003;
		
		РазделыОтчета.Раздел1.Данные.П000100013004 = РазделыОтчета.Раздел1.Данные.П000100010004
		+ РазделыОтчета.Раздел1.Данные.П000100011004
		+ РазделыОтчета.Раздел1.Данные.П000100012004;
		
		РазделыОтчета.Раздел1.Данные.П000100013005 = РазделыОтчета.Раздел1.Данные.П000100010005
		+ РазделыОтчета.Раздел1.Данные.П000100011005
		+ РазделыОтчета.Раздел1.Данные.П000100012005;
		
		РазделыОтчета.Раздел1.Данные.П000100013006 = РазделыОтчета.Раздел1.Данные.П000100010006
		+ РазделыОтчета.Раздел1.Данные.П000100011006
		+ РазделыОтчета.Раздел1.Данные.П000100012006;
		
		РазделыОтчета.Раздел1.Данные.П000100013007 = РазделыОтчета.Раздел1.Данные.П000100010007
		+ РазделыОтчета.Раздел1.Данные.П000100011007
		+ РазделыОтчета.Раздел1.Данные.П000100012007;
		
		РазделыОтчета.Раздел1.Данные.П000100014403 = РазделыОтчета.Раздел1.Данные.П000100014103
		+ РазделыОтчета.Раздел1.Данные.П000100014203
		+ РазделыОтчета.Раздел1.Данные.П000100014303;
		
		РазделыОтчета.Раздел1.Данные.П000100014404 = РазделыОтчета.Раздел1.Данные.П000100014104
		+ РазделыОтчета.Раздел1.Данные.П000100014204
		+ РазделыОтчета.Раздел1.Данные.П000100014304;
		
		РазделыОтчета.Раздел1.Данные.П000100014405 = РазделыОтчета.Раздел1.Данные.П000100014105
		+ РазделыОтчета.Раздел1.Данные.П000100014205
		+ РазделыОтчета.Раздел1.Данные.П000100014305;
		
		РазделыОтчета.Раздел1.Данные.П000100014406 = РазделыОтчета.Раздел1.Данные.П000100014106
		+ РазделыОтчета.Раздел1.Данные.П000100014206
		+ РазделыОтчета.Раздел1.Данные.П000100014306;
		
		РазделыОтчета.Раздел1.Данные.П000100014407 = РазделыОтчета.Раздел1.Данные.П000100014107
		+ РазделыОтчета.Раздел1.Данные.П000100014207
		+ РазделыОтчета.Раздел1.Данные.П000100014307;
		
		РазделыОтчета.Раздел1.Данные.П000100015003 = РазделыОтчета.Раздел1.Данные.П000100013003
		- РазделыОтчета.Раздел1.Данные.П000100014003;
		
		РазделыОтчета.Раздел1.Данные.П000100015004 = РазделыОтчета.Раздел1.Данные.П000100013004
		- РазделыОтчета.Раздел1.Данные.П000100014004;
		
		РазделыОтчета.Раздел1.Данные.П000100015005 = РазделыОтчета.Раздел1.Данные.П000100013005
		- РазделыОтчета.Раздел1.Данные.П000100014005;
		
		РазделыОтчета.Раздел1.Данные.П000100015006 = РазделыОтчета.Раздел1.Данные.П000100013006
		- РазделыОтчета.Раздел1.Данные.П000100014006;
		
		РазделыОтчета.Раздел1.Данные.П000100015007 = РазделыОтчета.Раздел1.Данные.П000100013007
		- РазделыОтчета.Раздел1.Данные.П000100014007;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда // Раздел 2
		
		Для Каждого Страница Из РазделыОтчета.Раздел2.Данные Цикл
			
			Данные = Страница.Данные;
			
			Данные.П000210024003 = Данные.П000210020103
			+ Данные.П000210020303
			- Данные.П000210021103
			- Данные.П000210021303
			- Данные.П000210022103
			- Данные.П000210022303
			- Данные.П000210023103
			- Данные.П000210023303;
			
			Данные.П000210024004 = Данные.П000210020104
			+ Данные.П000210020304
			- Данные.П000210021104
			- Данные.П000210021304
			- Данные.П000210022104
			- Данные.П000210022304
			- Данные.П000210023104
			- Данные.П000210023304;
			
			Данные.П000210024005 = Данные.П000210020105
			+ Данные.П000210020305
			- Данные.П000210021105
			- Данные.П000210021305
			- Данные.П000210022105
			- Данные.П000210022305
			- Данные.П000210023105
			- Данные.П000210023305;
			
			Данные.П000210024006 = Данные.П000210020106
			+ Данные.П000210020306
			- Данные.П000210021106
			- Данные.П000210021306
			- Данные.П000210022106
			- Данные.П000210022306
			- Данные.П000210023106
			- Данные.П000210023306;
			
			Данные.П000210024103 = Данные.П000210020203
			- Данные.П000210021203
			- Данные.П000210022203
			- Данные.П000210023203;
			
			Данные.П000210024104 = Данные.П000210020204
			- Данные.П000210021204
			- Данные.П000210022204
			- Данные.П000210023204;
			
			Данные.П000210024105 = Данные.П000210020205
			- Данные.П000210021205
			- Данные.П000210022205
			- Данные.П000210023205;
			
			Данные.П000210024106 = Данные.П000210020206
			- Данные.П000210021206
			- Данные.П000210022206
			- Данные.П000210023206;
			
			Данные.П000210027503 = Данные.П000210027103
			- Данные.П000210027203
			- Данные.П000210027303
			- Данные.П000210027403;
			
			Данные.П000210027504 = Данные.П000210027104
			- Данные.П000210027204
			- Данные.П000210027304
			- Данные.П000210027404;
			
			Данные.П000210027505 = Данные.П000210027105
			- Данные.П000210027205
			- Данные.П000210027305
			- Данные.П000210027405;
			
			Данные.П000210027506 = Данные.П000210027106
			- Данные.П000210027206
			- Данные.П000210027306
			- Данные.П000210027406;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел1.Данные.П000100011003 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025003")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025203");
		РазделыОтчета.Раздел1.Данные.П000100011004 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025103");
		РазделыОтчета.Раздел1.Данные.П000100011007 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210027603");
		РазделыОтчета.Раздел1.Данные.П000100011103 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025004")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025204");
		РазделыОтчета.Раздел1.Данные.П000100011104 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025104");
		РазделыОтчета.Раздел1.Данные.П000100011107 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210027604");
		РазделыОтчета.Раздел1.Данные.П000100011203 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025005")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025205");
		РазделыОтчета.Раздел1.Данные.П000100011204 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025105");
		РазделыОтчета.Раздел1.Данные.П000100011207 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210027605");
		РазделыОтчета.Раздел1.Данные.П000100011303 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025006")
		+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025206");
		РазделыОтчета.Раздел1.Данные.П000100011304 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210025106");
		РазделыОтчета.Раздел1.Данные.П000100011307 = СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел2.Данные, "П000210027606");
		РазделыОтчета.Раздел1.Данные.П000100011403 = РазделыОтчета.Раздел1.Данные.П000100011103
		+ РазделыОтчета.Раздел1.Данные.П000100011203
		+ РазделыОтчета.Раздел1.Данные.П000100011303;
		РазделыОтчета.Раздел1.Данные.П000100011404 = РазделыОтчета.Раздел1.Данные.П000100011104
		+ РазделыОтчета.Раздел1.Данные.П000100011204
		+ РазделыОтчета.Раздел1.Данные.П000100011304;
		РазделыОтчета.Раздел1.Данные.П000100011407 = РазделыОтчета.Раздел1.Данные.П000100011107
		+ РазделыОтчета.Раздел1.Данные.П000100011207
		+ РазделыОтчета.Раздел1.Данные.П000100011307;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда // Раздел 2.2
		
		РазделыОтчета.Раздел22.Данные.П000220028303 = РазделыОтчета.Раздел22.Данные.П000220028003
		- РазделыОтчета.Раздел22.Данные.П000220028103
		- РазделыОтчета.Раздел22.Данные.П000220028203;
		
		РазделыОтчета.Раздел22.Данные.П000220028304 = РазделыОтчета.Раздел22.Данные.П000220028004
		- РазделыОтчета.Раздел22.Данные.П000220028104
		- РазделыОтчета.Раздел22.Данные.П000220028204;
		
		РазделыОтчета.Раздел22.Данные.П000220028305 = РазделыОтчета.Раздел22.Данные.П000220028005
		- РазделыОтчета.Раздел22.Данные.П000220028105
		- РазделыОтчета.Раздел22.Данные.П000220028205;
		
		РазделыОтчета.Раздел22.Данные.П000220028306 = РазделыОтчета.Раздел22.Данные.П000220028006
		- РазделыОтчета.Раздел22.Данные.П000220028106
		- РазделыОтчета.Раздел22.Данные.П000220028206;
		
		РазделыОтчета.Раздел22.Данные.П000230029303 = РазделыОтчета.Раздел22.Данные.П000230029003
		- РазделыОтчета.Раздел22.Данные.П000230029103
		- РазделыОтчета.Раздел22.Данные.П000230029203;
		
		РазделыОтчета.Раздел22.Данные.П000230029304 = РазделыОтчета.Раздел22.Данные.П000230029004
		- РазделыОтчета.Раздел22.Данные.П000230029104
		- РазделыОтчета.Раздел22.Данные.П000230029204;
		
		РазделыОтчета.Раздел22.Данные.П000230029305 = РазделыОтчета.Раздел22.Данные.П000230029005
		- РазделыОтчета.Раздел22.Данные.П000230029105
		- РазделыОтчета.Раздел22.Данные.П000230029205;
		
		РазделыОтчета.Раздел22.Данные.П000230029306 = РазделыОтчета.Раздел22.Данные.П000230029006
		- РазделыОтчета.Раздел22.Данные.П000230029106
		- РазделыОтчета.Раздел22.Данные.П000230029206;
		
		РазделыОтчета.Раздел1.Данные.П000100011305 = РазделыОтчета.Раздел22.Данные.П000220028406;
		
		РазделыОтчета.Раздел1.Данные.П000100011306 = РазделыОтчета.Раздел22.Данные.П000230029406;
		
		РазделыОтчета.Раздел1.Данные.П000100011205 = РазделыОтчета.Раздел22.Данные.П000220028405;
		
		РазделыОтчета.Раздел1.Данные.П000100011206 = РазделыОтчета.Раздел22.Данные.П000230029405;
		
		РазделыОтчета.Раздел1.Данные.П000100011105 = РазделыОтчета.Раздел22.Данные.П000220028404;
		
		РазделыОтчета.Раздел1.Данные.П000100011106 = РазделыОтчета.Раздел22.Данные.П000230029404;
		
		РазделыОтчета.Раздел1.Данные.П000100011005 = РазделыОтчета.Раздел22.Данные.П000220028403;
		
		РазделыОтчета.Раздел1.Данные.П000100011006 = РазделыОтчета.Раздел22.Данные.П000230029403;
		
		РазделыОтчета.Раздел1.Данные.П000100011405 = РазделыОтчета.Раздел1.Данные.П000100011105
		+ РазделыОтчета.Раздел1.Данные.П000100011205
		+ РазделыОтчета.Раздел1.Данные.П000100011305;
		
		РазделыОтчета.Раздел1.Данные.П000100011406 = РазделыОтчета.Раздел1.Данные.П000100011106
		+ РазделыОтчета.Раздел1.Данные.П000100011206
		+ РазделыОтчета.Раздел1.Данные.П000100011306;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел31" Тогда // Раздел 3.1	
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел31.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310000105;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310000106;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310000107;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел31.ДанныеДопСтрок[Ном - 1].П000310000108;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел31.Данные.Вставить("П000310000205", Колонка5);
		РазделыОтчета.Раздел31.Данные.Вставить("П000310000206", Колонка6);
		РазделыОтчета.Раздел31.Данные.Вставить("П000310000207", Колонка7);
		РазделыОтчета.Раздел31.Данные.Вставить("П000310000208", Колонка8);
		
	ИначеЕсли ИмяРаздела = "Раздел32" Тогда // Раздел 3.2
		
		П000320032103 = РазделыОтчета.Раздел32.Данные.П000320032103;
		П000320032203 = РазделыОтчета.Раздел32.Данные.П000320032203;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032303", ? (П000320032103 <> 0, (П000320032203 / П000320032103) * 100, 0));
		
		П000320032104 = РазделыОтчета.Раздел32.Данные.П000320032104;
		П000320032204 = РазделыОтчета.Раздел32.Данные.П000320032204;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032304", ?(П000320032104 <> 0, (П000320032204 / П000320032104) * 100, 0));
		
		П000320032105 = РазделыОтчета.Раздел32.Данные.П000320032105;
		П000320032205 = РазделыОтчета.Раздел32.Данные.П000320032205;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032305", ?(П000320032105 <> 0, (П000320032205 / П000320032105) * 100, 0));
		
		П000320032106 = РазделыОтчета.Раздел32.Данные.П000320032106;
		П000320032206 = РазделыОтчета.Раздел32.Данные.П000320032206;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000320032306", ? (П000320032106 <> 0, (П000320032206 / П000320032106) * 100, 0));
		
		П000330033103 = РазделыОтчета.Раздел32.Данные.П000330033103;
		П000330033203 = РазделыОтчета.Раздел32.Данные.П000330033203;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033303", ? (П000330033103 <> 0, (П000330033203 / П000330033103) * 100, 0));
		
		П000330033104 = РазделыОтчета.Раздел32.Данные.П000330033104;
		П000330033204 = РазделыОтчета.Раздел32.Данные.П000330033204;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033304", ? (П000330033104 <> 0, (П000330033204 / П000330033104) * 100, 0));
		
		П000330033105 = РазделыОтчета.Раздел32.Данные.П000330033105;
		П000330033205 = РазделыОтчета.Раздел32.Данные.П000330033205;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033305", ? (П000330033105 <> 0, (П000330033205 / П000330033105) * 100, 0));
		
		П000330033106 = РазделыОтчета.Раздел32.Данные.П000330033106;
		П000330033206 = РазделыОтчета.Раздел32.Данные.П000330033206;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033306", ? (П000330033106 <> 0, (П000330033206 / П000330033106) * 100, 0));
		
		П000330033403 = РазделыОтчета.Раздел32.Данные.П000330033403;
		П000330033503 = РазделыОтчета.Раздел32.Данные.П000330033503;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033603", ? (П000330033403 <> 0, (П000330033503 / П000330033403) * 100, 0));
		
		П000330033404 = РазделыОтчета.Раздел32.Данные.П000330033404;
		П000330033504 = РазделыОтчета.Раздел32.Данные.П000330033504;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033604", ? (П000330033404 <> 0, (П000330033504 / П000330033404) * 100, 0));
		
		П000330033405 = РазделыОтчета.Раздел32.Данные.П000330033405;
		П000330033505 = РазделыОтчета.Раздел32.Данные.П000330033505;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033605", ? (П000330033405 <> 0, (П000330033505 / П000330033405) * 100, 0));
		
		П000330033406 = РазделыОтчета.Раздел32.Данные.П000330033406;
		П000330033506 = РазделыОтчета.Раздел32.Данные.П000330033506;
		
		РазделыОтчета.Раздел32.Данные.Вставить("П000330033606", ? (П000330033406 <> 0, (П000330033506 / П000330033406) * 100, 0));
		
	ИначеЕсли ИмяРаздела = "Раздел34" Тогда  // Раздел 3.4	
		
		РазделыОтчета.Раздел34.Данные.Вставить("П000340034303", ?(РазделыОтчета.Раздел34.Данные.П000340034103 = 0, 0,
		РазделыОтчета.Раздел34.Данные.П000340034203
		/ РазделыОтчета.Раздел34.Данные.П000340034103 * 100));
		
		РазделыОтчета.Раздел34.Данные.Вставить("П000340034304", ?(РазделыОтчета.Раздел34.Данные.П000340034104 = 0, 0,
		РазделыОтчета.Раздел34.Данные.П000340034204
		/ РазделыОтчета.Раздел34.Данные.П000340034104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел35" Тогда  // Раздел 3.5
		
		Колонка3 = 0;
		Колонка4 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел35.ДанныеДопСтрок.Количество() Цикл
			
			Колонка3 = Колонка3 + РазделыОтчета.Раздел35.ДанныеДопСтрок[Ном - 1].П000350000103;
			Колонка4 = Колонка4 + РазделыОтчета.Раздел35.ДанныеДопСтрок[Ном - 1].П000350000104;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел35.Данные.Вставить("П000350000203", Колонка3);
		РазделыОтчета.Раздел35.Данные.Вставить("П000350000204", Колонка4);
		
	ИначеЕсли ИмяРаздела = "Раздел36" Тогда // Раздел 3.6
		
		РазделыОтчета.Раздел36.Данные.Вставить("П000360036303", ?(РазделыОтчета.Раздел36.Данные.П000360036103 = 0, 0,
		РазделыОтчета.Раздел36.Данные.П000360036203
		/ РазделыОтчета.Раздел36.Данные.П000360036103 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел37" Тогда // Раздел 3.7
		
		РазделыОтчета.Раздел37.Данные.Вставить("П000370037503", ?(РазделыОтчета.Раздел37.Данные.П000370037103 = 0, 0,
		(РазделыОтчета.Раздел37.Данные.П000370037203
		+ РазделыОтчета.Раздел37.Данные.П000370037303
		+ РазделыОтчета.Раздел37.Данные.П000370037403)
		/ РазделыОтчета.Раздел37.Данные.П000370037103 * 100));
		
		РазделыОтчета.Раздел37.Данные.Вставить("П000370037504", ?(РазделыОтчета.Раздел37.Данные.П000370037104 = 0, 0,
		(РазделыОтчета.Раздел37.Данные.П000370037204
		+ РазделыОтчета.Раздел37.Данные.П000370037304
		+ РазделыОтчета.Раздел37.Данные.П000370037404)
		/ РазделыОтчета.Раздел37.Данные.П000370037104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел38" Тогда  // Раздел 3.8	
		
		РазделыОтчета.Раздел38.Данные.Вставить("П000380038303", ?(РазделыОтчета.Раздел38.Данные.П000380038103 = 0, 0,
		РазделыОтчета.Раздел38.Данные.П000380038203
		/ РазделыОтчета.Раздел38.Данные.П000380038103 * 100));
		
		РазделыОтчета.Раздел38.Данные.Вставить("П000380038304", ?(РазделыОтчета.Раздел38.Данные.П000380038104 = 0, 0,
		РазделыОтчета.Раздел38.Данные.П000380038204
		/ РазделыОтчета.Раздел38.Данные.П000380038104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда // Раздел 4
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		Колонка9 = 0;
		Колонка10 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000105;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000106;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000107;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000108;
			Колонка9 = Колонка9 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000109;
			Колонка10 = Колонка10 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000110;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000205", Колонка5);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000206", Колонка6);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000207", Колонка7);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000208", Колонка8);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000209", Колонка9);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000210", Колонка10);
		
		РазделыОтчета.Раздел1.Данные.П000100012003 = РазделыОтчета.Раздел4.Данные.П000400000205;
		
		РазделыОтчета.Раздел1.Данные.П000100012004 = РазделыОтчета.Раздел4.Данные.П000400000207;
		РазделыОтчета.Раздел1.Данные.П000100012005 = РазделыОтчета.Раздел4.Данные.П000400000208;
		РазделыОтчета.Раздел1.Данные.П000100012006 = РазделыОтчета.Раздел4.Данные.П000400000209;
		РазделыОтчета.Раздел1.Данные.П000100012007 = РазделыОтчета.Раздел4.Данные.П000400000210;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел5" Тогда // Раздел 5
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел5.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000150;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000160;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000170;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000180;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000250", Колонка5);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000260", Колонка6);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000270", Колонка7);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000280", Колонка8);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел5");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел4");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел38");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел37");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел36");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел35");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел34");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел32");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел31");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел22");
		РасчетРеглОтчетРСВ1ФормаОтчета2013Кв1(РазделыОтчета, "Раздел2");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, ИмяРаздела = "")
	
	Если ИмяРаздела = "Раздел1" Тогда // Раздел 1.
		
		// Расчет в стр. 130 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100013003
			= РазделыОтчета.Раздел1.Данные.П000100010003
			+ РазделыОтчета.Раздел1.Данные.П000100011003
			+ РазделыОтчета.Раздел1.Данные.П000100012003;
			
		РазделыОтчета.Раздел1.Данные.П000100013004
			= РазделыОтчета.Раздел1.Данные.П000100010004
			+ РазделыОтчета.Раздел1.Данные.П000100012004;
			
		РазделыОтчета.Раздел1.Данные.П000100013005
			= РазделыОтчета.Раздел1.Данные.П000100010005
			+ РазделыОтчета.Раздел1.Данные.П000100012005;
			
		РазделыОтчета.Раздел1.Данные.П000100013006
			= РазделыОтчета.Раздел1.Данные.П000100010006
			+ РазделыОтчета.Раздел1.Данные.П000100011006
			+ РазделыОтчета.Раздел1.Данные.П000100012006;
			
		РазделыОтчета.Раздел1.Данные.П000100013007
			= РазделыОтчета.Раздел1.Данные.П000100010007
			+ РазделыОтчета.Раздел1.Данные.П000100011007
			+ РазделыОтчета.Раздел1.Данные.П000100012007;
			
		РазделыОтчета.Раздел1.Данные.П000100013008
			= РазделыОтчета.Раздел1.Данные.П000100010008
			+ РазделыОтчета.Раздел1.Данные.П000100011008
			+ РазделыОтчета.Раздел1.Данные.П000100012008;
		
		// Расчет в стр. 144 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100014403
			= РазделыОтчета.Раздел1.Данные.П000100014103
			+ РазделыОтчета.Раздел1.Данные.П000100014203
			+ РазделыОтчета.Раздел1.Данные.П000100014303;
			
		РазделыОтчета.Раздел1.Данные.П000100014404
			= РазделыОтчета.Раздел1.Данные.П000100014104
			+ РазделыОтчета.Раздел1.Данные.П000100014204
			+ РазделыОтчета.Раздел1.Данные.П000100014304;
			
		РазделыОтчета.Раздел1.Данные.П000100014405
			= РазделыОтчета.Раздел1.Данные.П000100014105
			+ РазделыОтчета.Раздел1.Данные.П000100014205
			+ РазделыОтчета.Раздел1.Данные.П000100014305;
			
		РазделыОтчета.Раздел1.Данные.П000100014406
			= РазделыОтчета.Раздел1.Данные.П000100014106
			+ РазделыОтчета.Раздел1.Данные.П000100014206
			+ РазделыОтчета.Раздел1.Данные.П000100014306;
			
		РазделыОтчета.Раздел1.Данные.П000100014407
			= РазделыОтчета.Раздел1.Данные.П000100014107
			+ РазделыОтчета.Раздел1.Данные.П000100014207
			+ РазделыОтчета.Раздел1.Данные.П000100014307;
			
		РазделыОтчета.Раздел1.Данные.П000100014408
			= РазделыОтчета.Раздел1.Данные.П000100014108
			+ РазделыОтчета.Раздел1.Данные.П000100014208
			+ РазделыОтчета.Раздел1.Данные.П000100014308;
		
		// Расчет в стр. 150 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100015003
			= РазделыОтчета.Раздел1.Данные.П000100013003
			- РазделыОтчета.Раздел1.Данные.П000100014003;
		
		РазделыОтчета.Раздел1.Данные.П000100015004
			= РазделыОтчета.Раздел1.Данные.П000100013004
			- РазделыОтчета.Раздел1.Данные.П000100014004;
		
		РазделыОтчета.Раздел1.Данные.П000100015005
			= РазделыОтчета.Раздел1.Данные.П000100013005
			- РазделыОтчета.Раздел1.Данные.П000100014005;
		
		РазделыОтчета.Раздел1.Данные.П000100015006
			= РазделыОтчета.Раздел1.Данные.П000100013006
			- РазделыОтчета.Раздел1.Данные.П000100014006;
		
		РазделыОтчета.Раздел1.Данные.П000100015007
			= РазделыОтчета.Раздел1.Данные.П000100013007
			- РазделыОтчета.Раздел1.Данные.П000100014007;
		
		РазделыОтчета.Раздел1.Данные.П000100015008
			= РазделыОтчета.Раздел1.Данные.П000100013008
			- РазделыОтчета.Раздел1.Данные.П000100014008;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда // Раздел 2.1.
		
		Для Каждого Страница Из РазделыОтчета.Раздел21.Данные Цикл
			
			Данные = Страница.Данные;
			
			// Расчет в стр. 204 раздела 2.1.
			
			Данные.П000210020403
				= Данные.П000210020003
				- Данные.П000210020103
				- Данные.П000210020203
				- Данные.П000210020303;
			
			Данные.П000210020404
				= Данные.П000210020004
				- Данные.П000210020104
				- Данные.П000210020204
				- Данные.П000210020304;
			
			Данные.П000210020405
				= Данные.П000210020005
				- Данные.П000210020105
				- Данные.П000210020205
				- Данные.П000210020305;
			
			Данные.П000210020406
				= Данные.П000210020006
				- Данные.П000210020106
				- Данные.П000210020206
				- Данные.П000210020306;
			
			// Расчет в стр. 214 раздела 2.1.
			
			Данные.П000210021403
				= Данные.П000210021003
				- Данные.П000210021103
				- Данные.П000210021203
				- Данные.П000210021303;
			
			Данные.П000210021404
				= Данные.П000210021004
				- Данные.П000210021104
				- Данные.П000210021204
				- Данные.П000210021304;
			
			Данные.П000210021405
				= Данные.П000210021005
				- Данные.П000210021105
				- Данные.П000210021205
				- Данные.П000210021305;
			
			Данные.П000210021406
				= Данные.П000210021006
				- Данные.П000210021106
				- Данные.П000210021206
				- Данные.П000210021306;
			
		КонецЦикла;
		
		// Расчет по гр. 3 и 8 в стр. 110 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011003
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020503")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020603");
		
		РазделыОтчета.Раздел1.Данные.П000100011008
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021503");
		
		// Расчет по гр. 3 и 8 в стр. 111 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011103
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020504")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020604");
		
		РазделыОтчета.Раздел1.Данные.П000100011108
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021504");
		
		// Расчет по гр. 3 и 8 в стр. 112 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011203
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020505")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020605");
		
		РазделыОтчета.Раздел1.Данные.П000100011208
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021505");
		
		// Расчет по гр. 3 и 8 в стр. 113 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011303
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020506")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020606");
		
		РазделыОтчета.Раздел1.Данные.П000100011308
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021506");
		
		// Расчет по гр. 3 и 8 в стр. 114 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011403
			= РазделыОтчета.Раздел1.Данные.П000100011103
			+ РазделыОтчета.Раздел1.Данные.П000100011203
			+ РазделыОтчета.Раздел1.Данные.П000100011303;
		
		РазделыОтчета.Раздел1.Данные.П000100011408
			= РазделыОтчета.Раздел1.Данные.П000100011108
			+ РазделыОтчета.Раздел1.Данные.П000100011208
			+ РазделыОтчета.Раздел1.Данные.П000100011308;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда // Разделы 2.2, 2.3.
		
		// Расчет в стр. 223 раздела 2.2.
		
		РазделыОтчета.Раздел22.Данные.П000220022303
			= РазделыОтчета.Раздел22.Данные.П000220022003
			- РазделыОтчета.Раздел22.Данные.П000220022103;
		
		РазделыОтчета.Раздел22.Данные.П000220022304
			= РазделыОтчета.Раздел22.Данные.П000220022004
			- РазделыОтчета.Раздел22.Данные.П000220022104;
		
		РазделыОтчета.Раздел22.Данные.П000220022305
			= РазделыОтчета.Раздел22.Данные.П000220022005
			- РазделыОтчета.Раздел22.Данные.П000220022105;
		
		РазделыОтчета.Раздел22.Данные.П000220022306
			= РазделыОтчета.Раздел22.Данные.П000220022006
			- РазделыОтчета.Раздел22.Данные.П000220022106;
		
		// Расчет в стр. 233 раздела 2.3.
		
		РазделыОтчета.Раздел22.Данные.П000230023303
			= РазделыОтчета.Раздел22.Данные.П000230023003
			- РазделыОтчета.Раздел22.Данные.П000230023103;
		
		РазделыОтчета.Раздел22.Данные.П000230023304
			= РазделыОтчета.Раздел22.Данные.П000230023004
			- РазделыОтчета.Раздел22.Данные.П000230023104;
		
		РазделыОтчета.Раздел22.Данные.П000230023305
			= РазделыОтчета.Раздел22.Данные.П000230023005
			- РазделыОтчета.Раздел22.Данные.П000230023105;
		
		РазделыОтчета.Раздел22.Данные.П000230023306
			= РазделыОтчета.Раздел22.Данные.П000230023006
			- РазделыОтчета.Раздел22.Данные.П000230023106;
		
		// Расчет по гр. 6 и 7 в стр. 110 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011006
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022403;
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011007
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023403;
		
		// Расчет по гр. 6 и 7 в стр. 111 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011106
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022404;
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011107
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023404;
		
		// Расчет по гр. 6 и 7 в стр. 112 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011206
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022405;
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011207
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023405;
		
		// Расчет по гр. 6 и 7 в стр. 113 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011306
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022406;
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011307
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023406;
		
		// Расчет по гр. 6 и 7 в стр. 114 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011406
			= РазделыОтчета.Раздел1.Данные.П000100011106
			+ РазделыОтчета.Раздел1.Данные.П000100011206
			+ РазделыОтчета.Раздел1.Данные.П000100011306;
		
		РазделыОтчета.Раздел1.Данные.П000100011407
			= РазделыОтчета.Раздел1.Данные.П000100011107
			+ РазделыОтчета.Раздел1.Данные.П000100011207
			+ РазделыОтчета.Раздел1.Данные.П000100011307;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел24" Тогда // Раздел 2.4.
		
		Для Каждого Страница Из РазделыОтчета.Раздел24.Данные Цикл
			
			Данные = Страница.Данные;
			
			// Расчет в стр. 243 раздела 2.4.
			
			Данные.П000240024303
				= Данные.П000240024003
				- Данные.П000240024103;
			
			Данные.П000240024304
				= Данные.П000240024004
				- Данные.П000240024104;
			
			Данные.П000240024305
				= Данные.П000240024005
				- Данные.П000240024105;
			
			Данные.П000240024306
				= Данные.П000240024006
				- Данные.П000240024106;
			
			// Расчет в стр. 249 раздела 2.4.
			
			Данные.П000240024903
				= Данные.П000240024603
				- Данные.П000240024703;
			
			Данные.П000240024904
				= Данные.П000240024604
				- Данные.П000240024704;
			
			Данные.П000240024905
				= Данные.П000240024605
				- Данные.П000240024705;
			
			Данные.П000240024906
				= Данные.П000240024606
				- Данные.П000240024706;
			
			// Расчет в стр. 255 раздела 2.4.
			
			Данные.П000240025503
				= Данные.П000240025203
				- Данные.П000240025303;
			
			Данные.П000240025504
				= Данные.П000240025204
				- Данные.П000240025304;
			
			Данные.П000240025505
				= Данные.П000240025205
				- Данные.П000240025305;
			
			Данные.П000240025506
				= Данные.П000240025206
				- Данные.П000240025306;
			
			// Расчет в стр. 261 раздела 2.4.
			
			Данные.П000240026103
				= Данные.П000240025803
				- Данные.П000240025903;
			
			Данные.П000240026104
				= Данные.П000240025804
				- Данные.П000240025904;
			
			Данные.П000240026105
				= Данные.П000240025805
				- Данные.П000240025905;
			
			Данные.П000240026106
				= Данные.П000240025806
				- Данные.П000240025906;
			
			// Расчет в стр. 267 раздела 2.4.
			
			Данные.П000240026703
				= Данные.П000240026403
				- Данные.П000240026503;
			
			Данные.П000240026704
				= Данные.П000240026404
				- Данные.П000240026504;
			
			Данные.П000240026705
				= Данные.П000240026405
				- Данные.П000240026505;
			
			Данные.П000240026706
				= Данные.П000240026406
				- Данные.П000240026506;
			
		КонецЦикла;
		
		// Расчет по гр. 6 и 7 в стр. 110 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011006 = РазделыОтчета.Раздел22.Данные.П000220022403
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011007 = РазделыОтчета.Раздел22.Данные.П000230023403
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие);
		
		// Расчет по гр. 6 и 7 в стр. 111 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011106 = РазделыОтчета.Раздел22.Данные.П000220022404
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011107 = РазделыОтчета.Раздел22.Данные.П000230023404
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие);
		
		// Расчет по гр. 6 и 7 в стр. 112 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011206 = РазделыОтчета.Раздел22.Данные.П000220022405
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011207 = РазделыОтчета.Раздел22.Данные.П000230023405
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие);
		
		// Расчет по гр. 6 и 7 в стр. 113 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011306 = РазделыОтчета.Раздел22.Данные.П000220022406
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011307 = РазделыОтчета.Раздел22.Данные.П000230023406
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие);
		
		// Расчет по гр. 6 и 7 в стр. 114 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011406
			= РазделыОтчета.Раздел1.Данные.П000100011106
			+ РазделыОтчета.Раздел1.Данные.П000100011206
			+ РазделыОтчета.Раздел1.Данные.П000100011306;
			
		РазделыОтчета.Раздел1.Данные.П000100011407
			= РазделыОтчета.Раздел1.Данные.П000100011107
			+ РазделыОтчета.Раздел1.Данные.П000100011207
			+ РазделыОтчета.Раздел1.Данные.П000100011307;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел31" Тогда // Разделы 3.1, 3.2.
		
		// Расчет в стр. 323 раздела 3.1.
		
		П000320032103 = РазделыОтчета.Раздел31.Данные.П000320032103;
		П000320032203 = РазделыОтчета.Раздел31.Данные.П000320032203;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000320032303", ?(П000320032103 <> 0, (П000320032203 / П000320032103) * 100, 0));
		
		П000320032104 = РазделыОтчета.Раздел31.Данные.П000320032104;
		П000320032204 = РазделыОтчета.Раздел31.Данные.П000320032204;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000320032304", ?(П000320032104 <> 0, (П000320032204 / П000320032104) * 100, 0));
		
		П000320032105 = РазделыОтчета.Раздел31.Данные.П000320032105;
		П000320032205 = РазделыОтчета.Раздел31.Данные.П000320032205;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000320032305", ?(П000320032105 <> 0, (П000320032205 / П000320032105) * 100, 0));
		
		П000320032106 = РазделыОтчета.Раздел31.Данные.П000320032106;
		П000320032206 = РазделыОтчета.Раздел31.Данные.П000320032206;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000320032306", ?(П000320032106 <> 0, (П000320032206 / П000320032106) * 100, 0));
		
		// Расчет в стр. 333 раздела 3.2.
		
		П000330033103 = РазделыОтчета.Раздел31.Данные.П000330033103;
		П000330033203 = РазделыОтчета.Раздел31.Данные.П000330033203;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033303", ?(П000330033103 <> 0, (П000330033203 / П000330033103) * 100, 0));
		
		П000330033104 = РазделыОтчета.Раздел31.Данные.П000330033104;
		П000330033204 = РазделыОтчета.Раздел31.Данные.П000330033204;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033304", ?(П000330033104 <> 0, (П000330033204 / П000330033104) * 100, 0));
		
		П000330033105 = РазделыОтчета.Раздел31.Данные.П000330033105;
		П000330033205 = РазделыОтчета.Раздел31.Данные.П000330033205;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033305", ?(П000330033105 <> 0, (П000330033205 / П000330033105) * 100, 0));
		
		П000330033106 = РазделыОтчета.Раздел31.Данные.П000330033106;
		П000330033206 = РазделыОтчета.Раздел31.Данные.П000330033206;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033306", ?(П000330033106 <> 0, (П000330033206 / П000330033106) * 100, 0));
		
		// Расчет в стр. 336 раздела 3.2.
		
		П000330033403 = РазделыОтчета.Раздел31.Данные.П000330033403;
		П000330033503 = РазделыОтчета.Раздел31.Данные.П000330033503;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033603", ?(П000330033403 <> 0, (П000330033503 / П000330033403) * 100, 0));
		
		П000330033404 = РазделыОтчета.Раздел31.Данные.П000330033404;
		П000330033504 = РазделыОтчета.Раздел31.Данные.П000330033504;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033604", ?(П000330033404 <> 0, (П000330033504 / П000330033404) * 100, 0));
		
		П000330033405 = РазделыОтчета.Раздел31.Данные.П000330033405;
		П000330033505 = РазделыОтчета.Раздел31.Данные.П000330033505;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033605", ?(П000330033405 <> 0, (П000330033505 / П000330033405) * 100, 0));
		
		П000330033406 = РазделыОтчета.Раздел31.Данные.П000330033406;
		П000330033506 = РазделыОтчета.Раздел31.Данные.П000330033506;
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000330033606", ?(П000330033406 <> 0, (П000330033506 / П000330033406) * 100, 0));
		
	ИначеЕсли ИмяРаздела = "Раздел33" Тогда // Раздел 3.3, 3.4.
		
		// Расчет в стр. 343 раздела 3.3.
		
		РазделыОтчета.Раздел33.Данные.Вставить(
			"П000340034303", ?(РазделыОтчета.Раздел33.Данные.П000340034103 = 0, 0,
			РазделыОтчета.Раздел33.Данные.П000340034203 / РазделыОтчета.Раздел33.Данные.П000340034103 * 100));
		
		РазделыОтчета.Раздел33.Данные.Вставить(
			"П000340034304", ?(РазделыОтчета.Раздел33.Данные.П000340034104 = 0, 0,
			РазделыОтчета.Раздел33.Данные.П000340034204 / РазделыОтчета.Раздел33.Данные.П000340034104 * 100));
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 3.4.
		
		Колонка3 = 0;
		Колонка4 = 0;
		Для Ном = 1 По РазделыОтчета.Раздел33.ДанныеДопСтрок.Количество() Цикл
			Колонка3 = Колонка3 + РазделыОтчета.Раздел33.ДанныеДопСтрок[Ном - 1].П000350000103;
			Колонка4 = Колонка4 + РазделыОтчета.Раздел33.ДанныеДопСтрок[Ном - 1].П000350000104;
		КонецЦикла;
		РазделыОтчета.Раздел33.Данные.Вставить("П000350000203", Колонка3);
		РазделыОтчета.Раздел33.Данные.Вставить("П000350000204", Колонка4);
		
	ИначеЕсли ИмяРаздела = "Раздел35" Тогда // Разделы 3.5, 3.6.
		
		// Расчет в стр. 363 раздела 3.5.
		
		РазделыОтчета.Раздел35.Данные.Вставить(
			"П000360036303", ?(РазделыОтчета.Раздел35.Данные.П000360036103 = 0, 0,
			РазделыОтчета.Раздел35.Данные.П000360036203 / РазделыОтчета.Раздел35.Данные.П000360036103 * 100));
		
		// Расчет в стр. 375 раздела 3.6.
		
		РазделыОтчета.Раздел35.Данные.Вставить(
			"П000370037503", ?(РазделыОтчета.Раздел35.Данные.П000370037103 = 0, 0,
			 (РазделыОтчета.Раздел35.Данные.П000370037203
			+ РазделыОтчета.Раздел35.Данные.П000370037303
			+ РазделыОтчета.Раздел35.Данные.П000370037403)
			/ РазделыОтчета.Раздел35.Данные.П000370037103 * 100));

		РазделыОтчета.Раздел35.Данные.Вставить(
			"П000370037504", ?(РазделыОтчета.Раздел35.Данные.П000370037104 = 0, 0,
			 (РазделыОтчета.Раздел35.Данные.П000370037204
			+ РазделыОтчета.Раздел35.Данные.П000370037304
			+ РазделыОтчета.Раздел35.Данные.П000370037404)
			/ РазделыОтчета.Раздел35.Данные.П000370037104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда // Раздел 4.
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 4.
		
		Колонка6  = 0;
		Колонка7  = 0;
		Колонка8  = 0;
		Колонка9  = 0;
		Колонка10 = 0;
		Колонка11 = 0;
		Колонка12 = 0;
		Колонка13 = 0;
		Колонка14 = 0;
		
		СуммаРазд4Гр13СКодом1ВГр3 = 0;
		СуммаРазд4Гр13СКодом2ВГр3 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() Цикл
			
			Колонка6  = Колонка6  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000106;
			Колонка7  = Колонка7  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000107;
			Колонка8  = Колонка8  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000108;
			Колонка9  = Колонка9  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000109;
			Колонка10 = Колонка10 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000110;
			Колонка11 = Колонка11 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000111;
			Колонка12 = Колонка12 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000112;
			Колонка13 = Колонка13 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000113;
			Колонка14 = Колонка14 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000114;
			
			Если РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000103 = "1" Тогда
				
				// Вычисление значения, необходимого для расчета
				// по гр. 6 в стр. 120 раздела 1.
				// Суммируем значения по гр. 13 раздела 4,
				// при значении кода основания в гр. 3 равном "1".
				СуммаРазд4Гр13СКодом1ВГр3 = СуммаРазд4Гр13СКодом1ВГр3
					+ РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000113;
				
			ИначеЕсли РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000103 = "2" Тогда
				
				// Вычисление значения, необходимого для расчета
				// по гр. 7 в стр. 120 раздела 1.
				// Суммируем значения по гр. 13 раздела 4,
				// при значении кода основания в гр. 3 равном "2".
				СуммаРазд4Гр13СКодом2ВГр3 = СуммаРазд4Гр13СКодом2ВГр3
					+ РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000113;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000206", Колонка6);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000207", Колонка7);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000208", Колонка8);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000209", Колонка9);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000210", Колонка10);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000211", Колонка11);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000212", Колонка12);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000213", Колонка13);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000214", Колонка14);
		
		// Расчет по гр. 3 - 8 в стр. 120,
		// а также по гр. 3 и 4 в стр. 121 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100012003 = РазделыОтчета.Раздел4.Данные.П000400000206;
		РазделыОтчета.Раздел1.Данные.П000100012004 = РазделыОтчета.Раздел4.Данные.П000400000208;
		РазделыОтчета.Раздел1.Данные.П000100012005 = РазделыОтчета.Раздел4.Данные.П000400000210;
		РазделыОтчета.Раздел1.Данные.П000100012006
			= РазделыОтчета.Раздел4.Данные.П000400000211 + СуммаРазд4Гр13СКодом1ВГр3;
		РазделыОтчета.Раздел1.Данные.П000100012007
			= РазделыОтчета.Раздел4.Данные.П000400000212 + СуммаРазд4Гр13СКодом2ВГр3;
		РазделыОтчета.Раздел1.Данные.П000100012008 = РазделыОтчета.Раздел4.Данные.П000400000214;
		РазделыОтчета.Раздел1.Данные.П000100012103 = РазделыОтчета.Раздел4.Данные.П000400000207;
		РазделыОтчета.Раздел1.Данные.П000100012104 = РазделыОтчета.Раздел4.Данные.П000400000209;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел5" Тогда // Раздел 5.
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 5.
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел5.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000150;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000160;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000170;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000180;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000250", Колонка5);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000260", Колонка6);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000270", Колонка7);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000280", Колонка8);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел5");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел4");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел35");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел33");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел31");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел24");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел22");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел21");
		РасчетРеглОтчетРСВ1ФормаОтчета2014Кв1(РазделыОтчета, "Раздел1");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, ИмяРаздела = "")
	
	Если ИмяРаздела = "Раздел1" Тогда // Раздел 1.
		
		// Расчет в стр. 130 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100013003
			= РазделыОтчета.Раздел1.Данные.П000100010003
			+ РазделыОтчета.Раздел1.Данные.П000100011003
			+ РазделыОтчета.Раздел1.Данные.П000100012003;
			
		РазделыОтчета.Раздел1.Данные.П000100013004
			= РазделыОтчета.Раздел1.Данные.П000100010004
			+ РазделыОтчета.Раздел1.Данные.П000100012004;
			
		РазделыОтчета.Раздел1.Данные.П000100013005
			= РазделыОтчета.Раздел1.Данные.П000100010005
			+ РазделыОтчета.Раздел1.Данные.П000100012005;
			
		РазделыОтчета.Раздел1.Данные.П000100013006
			= РазделыОтчета.Раздел1.Данные.П000100010006
			+ РазделыОтчета.Раздел1.Данные.П000100011006
			+ РазделыОтчета.Раздел1.Данные.П000100012006;
			
		РазделыОтчета.Раздел1.Данные.П000100013007
			= РазделыОтчета.Раздел1.Данные.П000100010007
			+ РазделыОтчета.Раздел1.Данные.П000100011007
			+ РазделыОтчета.Раздел1.Данные.П000100012007;
			
		РазделыОтчета.Раздел1.Данные.П000100013008
			= РазделыОтчета.Раздел1.Данные.П000100010008
			+ РазделыОтчета.Раздел1.Данные.П000100011008
			+ РазделыОтчета.Раздел1.Данные.П000100012008;
		
		// Расчет в стр. 144 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100014403
			= РазделыОтчета.Раздел1.Данные.П000100014103
			+ РазделыОтчета.Раздел1.Данные.П000100014203
			+ РазделыОтчета.Раздел1.Данные.П000100014303;
			
		РазделыОтчета.Раздел1.Данные.П000100014404
			= РазделыОтчета.Раздел1.Данные.П000100014104
			+ РазделыОтчета.Раздел1.Данные.П000100014204
			+ РазделыОтчета.Раздел1.Данные.П000100014304;
			
		РазделыОтчета.Раздел1.Данные.П000100014405
			= РазделыОтчета.Раздел1.Данные.П000100014105
			+ РазделыОтчета.Раздел1.Данные.П000100014205
			+ РазделыОтчета.Раздел1.Данные.П000100014305;
			
		РазделыОтчета.Раздел1.Данные.П000100014406
			= РазделыОтчета.Раздел1.Данные.П000100014106
			+ РазделыОтчета.Раздел1.Данные.П000100014206
			+ РазделыОтчета.Раздел1.Данные.П000100014306;
			
		РазделыОтчета.Раздел1.Данные.П000100014407
			= РазделыОтчета.Раздел1.Данные.П000100014107
			+ РазделыОтчета.Раздел1.Данные.П000100014207
			+ РазделыОтчета.Раздел1.Данные.П000100014307;
			
		РазделыОтчета.Раздел1.Данные.П000100014408
			= РазделыОтчета.Раздел1.Данные.П000100014108
			+ РазделыОтчета.Раздел1.Данные.П000100014208
			+ РазделыОтчета.Раздел1.Данные.П000100014308;
		
		// Расчет в стр. 150 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100015003
			= РазделыОтчета.Раздел1.Данные.П000100013003
			- РазделыОтчета.Раздел1.Данные.П000100014003;
		
		РазделыОтчета.Раздел1.Данные.П000100015004
			= РазделыОтчета.Раздел1.Данные.П000100013004
			- РазделыОтчета.Раздел1.Данные.П000100014004;
		
		РазделыОтчета.Раздел1.Данные.П000100015005
			= РазделыОтчета.Раздел1.Данные.П000100013005
			- РазделыОтчета.Раздел1.Данные.П000100014005;
		
		РазделыОтчета.Раздел1.Данные.П000100015006
			= РазделыОтчета.Раздел1.Данные.П000100013006
			- РазделыОтчета.Раздел1.Данные.П000100014006;
		
		РазделыОтчета.Раздел1.Данные.П000100015007
			= РазделыОтчета.Раздел1.Данные.П000100013007
			- РазделыОтчета.Раздел1.Данные.П000100014007;
		
		РазделыОтчета.Раздел1.Данные.П000100015008
			= РазделыОтчета.Раздел1.Данные.П000100013008
			- РазделыОтчета.Раздел1.Данные.П000100014008;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда // Раздел 2.1.
		
		Для Каждого Страница Из РазделыОтчета.Раздел21.Данные Цикл
			
			Данные = Страница.Данные;
			
			// Расчет в стр. 204 раздела 2.1.
			
			Данные.П000210020403
				= Данные.П000210020003
				- Данные.П000210020103
				- Данные.П000210020203
				- Данные.П000210020303;
			
			Данные.П000210020404
				= Данные.П000210020004
				- Данные.П000210020104
				- Данные.П000210020204
				- Данные.П000210020304;
			
			Данные.П000210020405
				= Данные.П000210020005
				- Данные.П000210020105
				- Данные.П000210020205
				- Данные.П000210020305;
			
			Данные.П000210020406
				= Данные.П000210020006
				- Данные.П000210020106
				- Данные.П000210020206
				- Данные.П000210020306;
			
			// Расчет в стр. 213 раздела 2.1.
			
			Данные.П000210021303
				= Данные.П000210021003
				- Данные.П000210021103
				- Данные.П000210021203;
			
			Данные.П000210021304
				= Данные.П000210021004
				- Данные.П000210021104
				- Данные.П000210021204;
			
			Данные.П000210021305
				= Данные.П000210021005
				- Данные.П000210021105
				- Данные.П000210021205;
			
			Данные.П000210021306
				= Данные.П000210021006
				- Данные.П000210021106
				- Данные.П000210021206;
			
		КонецЦикла;
		
		// Расчет по гр. 3 и 8 в стр. 110 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011003
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020503")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020603");
		РазделыОтчета.Раздел1.Данные.П000100011003 = Макс(РазделыОтчета.Раздел1.Данные.П000100011003, 0);
		
		РазделыОтчета.Раздел1.Данные.П000100011008
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021403");
		РазделыОтчета.Раздел1.Данные.П000100011008 = Макс(РазделыОтчета.Раздел1.Данные.П000100011008, 0);
		
		// Расчет по гр. 3 и 8 в стр. 111 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011103
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020504")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020604");
		
		РазделыОтчета.Раздел1.Данные.П000100011108
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021404");
		
		// Расчет по гр. 3 и 8 в стр. 112 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011203
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020505")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020605");
		
		РазделыОтчета.Раздел1.Данные.П000100011208
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021405");
		
		// Расчет по гр. 3 и 8 в стр. 113 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011303
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020506")
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210020606");
		
		РазделыОтчета.Раздел1.Данные.П000100011308
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел21.Данные, "П000210021406");
		
		// Расчет по гр. 3 и 8 в стр. 114 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011403
			= РазделыОтчета.Раздел1.Данные.П000100011103
			+ РазделыОтчета.Раздел1.Данные.П000100011203
			+ РазделыОтчета.Раздел1.Данные.П000100011303;
		
		РазделыОтчета.Раздел1.Данные.П000100011408
			= РазделыОтчета.Раздел1.Данные.П000100011108
			+ РазделыОтчета.Раздел1.Данные.П000100011208
			+ РазделыОтчета.Раздел1.Данные.П000100011308;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда // Разделы 2.2, 2.3.
		
		// Расчет в стр. 223 раздела 2.2.
		
		РазделыОтчета.Раздел22.Данные.П000220022303
			= РазделыОтчета.Раздел22.Данные.П000220022003
			- РазделыОтчета.Раздел22.Данные.П000220022103;
		
		РазделыОтчета.Раздел22.Данные.П000220022304
			= РазделыОтчета.Раздел22.Данные.П000220022004
			- РазделыОтчета.Раздел22.Данные.П000220022104;
		
		РазделыОтчета.Раздел22.Данные.П000220022305
			= РазделыОтчета.Раздел22.Данные.П000220022005
			- РазделыОтчета.Раздел22.Данные.П000220022105;
		
		РазделыОтчета.Раздел22.Данные.П000220022306
			= РазделыОтчета.Раздел22.Данные.П000220022006
			- РазделыОтчета.Раздел22.Данные.П000220022106;
		
		// Расчет в стр. 233 раздела 2.3.
		
		РазделыОтчета.Раздел22.Данные.П000230023303
			= РазделыОтчета.Раздел22.Данные.П000230023003
			- РазделыОтчета.Раздел22.Данные.П000230023103;
		
		РазделыОтчета.Раздел22.Данные.П000230023304
			= РазделыОтчета.Раздел22.Данные.П000230023004
			- РазделыОтчета.Раздел22.Данные.П000230023104;
		
		РазделыОтчета.Раздел22.Данные.П000230023305
			= РазделыОтчета.Раздел22.Данные.П000230023005
			- РазделыОтчета.Раздел22.Данные.П000230023105;
		
		РазделыОтчета.Раздел22.Данные.П000230023306
			= РазделыОтчета.Раздел22.Данные.П000230023006
			- РазделыОтчета.Раздел22.Данные.П000230023106;
		
		// Расчет по гр. 6 и 7 в стр. 110 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011006
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022403;
		РазделыОтчета.Раздел1.Данные.П000100011006 = Макс(РазделыОтчета.Раздел1.Данные.П000100011006, 0);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011007
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023403;
		РазделыОтчета.Раздел1.Данные.П000100011007 = Макс(РазделыОтчета.Раздел1.Данные.П000100011007, 0);
		
		// Расчет по гр. 6 и 7 в стр. 111 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011106
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022404;
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011107
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023404;
		
		// Расчет по гр. 6 и 7 в стр. 112 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011206
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022405;
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011207
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023405;
		
		// Расчет по гр. 6 и 7 в стр. 113 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011306
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000220022406;
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011307
			= СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие)
			+ РазделыОтчета.Раздел22.Данные.П000230023406;
		
		// Расчет по гр. 6 и 7 в стр. 114 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011406
			= РазделыОтчета.Раздел1.Данные.П000100011106
			+ РазделыОтчета.Раздел1.Данные.П000100011206
			+ РазделыОтчета.Раздел1.Данные.П000100011306;
		
		РазделыОтчета.Раздел1.Данные.П000100011407
			= РазделыОтчета.Раздел1.Данные.П000100011107
			+ РазделыОтчета.Раздел1.Данные.П000100011207
			+ РазделыОтчета.Раздел1.Данные.П000100011307;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел24" Тогда // Раздел 2.4.
		
		Для Каждого Страница Из РазделыОтчета.Раздел24.Данные Цикл
			
			Данные = Страница.Данные;
			
			// Расчет в стр. 243 раздела 2.4.
			
			Данные.П000240024303
				= Данные.П000240024003
				- Данные.П000240024103;
			
			Данные.П000240024304
				= Данные.П000240024004
				- Данные.П000240024104;
			
			Данные.П000240024305
				= Данные.П000240024005
				- Данные.П000240024105;
			
			Данные.П000240024306
				= Данные.П000240024006
				- Данные.П000240024106;
			
			// Расчет в стр. 249 раздела 2.4.
			
			Данные.П000240024903
				= Данные.П000240024603
				- Данные.П000240024703;
			
			Данные.П000240024904
				= Данные.П000240024604
				- Данные.П000240024704;
			
			Данные.П000240024905
				= Данные.П000240024605
				- Данные.П000240024705;
			
			Данные.П000240024906
				= Данные.П000240024606
				- Данные.П000240024706;
			
			// Расчет в стр. 255 раздела 2.4.
			
			Данные.П000240025503
				= Данные.П000240025203
				- Данные.П000240025303;
			
			Данные.П000240025504
				= Данные.П000240025204
				- Данные.П000240025304;
			
			Данные.П000240025505
				= Данные.П000240025205
				- Данные.П000240025305;
			
			Данные.П000240025506
				= Данные.П000240025206
				- Данные.П000240025306;
			
			// Расчет в стр. 261 раздела 2.4.
			
			Данные.П000240026103
				= Данные.П000240025803
				- Данные.П000240025903;
			
			Данные.П000240026104
				= Данные.П000240025804
				- Данные.П000240025904;
			
			Данные.П000240026105
				= Данные.П000240025805
				- Данные.П000240025905;
			
			Данные.П000240026106
				= Данные.П000240025806
				- Данные.П000240025906;
			
			// Расчет в стр. 267 раздела 2.4.
			
			Данные.П000240026703
				= Данные.П000240026403
				- Данные.П000240026503;
			
			Данные.П000240026704
				= Данные.П000240026404
				- Данные.П000240026504;
			
			Данные.П000240026705
				= Данные.П000240026405
				- Данные.П000240026505;
			
			Данные.П000240026706
				= Данные.П000240026406
				- Данные.П000240026506;
			
		КонецЦикла;
		
		// Расчет по гр. 6 и 7 в стр. 110 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011006 = РазделыОтчета.Раздел22.Данные.П000220022403
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие);
		РазделыОтчета.Раздел1.Данные.П000100011006 = Макс(РазделыОтчета.Раздел1.Данные.П000100011006, 0);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011007 = РазделыОтчета.Раздел22.Данные.П000230023403
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024403", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025003", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025603", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026203", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026803", Условие);
		РазделыОтчета.Раздел1.Данные.П000100011007 = Макс(РазделыОтчета.Раздел1.Данные.П000100011007, 0);
		
		// Расчет по гр. 6 и 7 в стр. 111 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011106 = РазделыОтчета.Раздел22.Данные.П000220022404
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011107 = РазделыОтчета.Раздел22.Данные.П000230023404
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024404", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025004", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025604", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026204", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026804", Условие);
		
		// Расчет по гр. 6 и 7 в стр. 112 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011206 = РазделыОтчета.Раздел22.Данные.П000220022405
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011207 = РазделыОтчета.Раздел22.Данные.П000230023405
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024405", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025005", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025605", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026205", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026805", Условие);
		
		// Расчет по гр. 6 и 7 в стр. 113 раздела 1.
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "1");
		РазделыОтчета.Раздел1.Данные.П000100011306 = РазделыОтчета.Раздел22.Данные.П000220022406
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие);
		
		Условие = Новый Структура;
		Условие.Вставить("П000240001001", "2");
		РазделыОтчета.Раздел1.Данные.П000100011307 = РазделыОтчета.Раздел22.Данные.П000230023406
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240024406", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025006", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240025606", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026206", Условие)
			+ СуммаПоказателяПоВсемСтраницам(РазделыОтчета.Раздел24.Данные, "П000240026806", Условие);
		
		// Расчет по гр. 6 и 7 в стр. 114 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100011406
			= РазделыОтчета.Раздел1.Данные.П000100011106
			+ РазделыОтчета.Раздел1.Данные.П000100011206
			+ РазделыОтчета.Раздел1.Данные.П000100011306;
			
		РазделыОтчета.Раздел1.Данные.П000100011407
			= РазделыОтчета.Раздел1.Данные.П000100011107
			+ РазделыОтчета.Раздел1.Данные.П000100011207
			+ РазделыОтчета.Раздел1.Данные.П000100011307;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел31" Тогда // Раздел 3.1.
		
		// Расчет в стр. 343 раздела 3.1.
		
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000340034303", ?(РазделыОтчета.Раздел31.Данные.П000340034103 = 0, 0,
			РазделыОтчета.Раздел31.Данные.П000340034203 / РазделыОтчета.Раздел31.Данные.П000340034103 * 100));
		
		РазделыОтчета.Раздел31.Данные.Вставить(
			"П000340034304", ?(РазделыОтчета.Раздел31.Данные.П000340034104 = 0, 0,
			РазделыОтчета.Раздел31.Данные.П000340034204 / РазделыОтчета.Раздел31.Данные.П000340034104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел32" Тогда // Разделы 3.2, 3.3.
		
		// Расчет в стр. 363 раздела 3.2.
		
		РазделыОтчета.Раздел32.Данные.Вставить(
			"П000360036303", ?(РазделыОтчета.Раздел32.Данные.П000360036103 = 0, 0,
			РазделыОтчета.Раздел32.Данные.П000360036203 / РазделыОтчета.Раздел32.Данные.П000360036103 * 100));
		
		// Расчет в стр. 375 раздела 3.3.
		
		РазделыОтчета.Раздел32.Данные.Вставить(
			"П000370037503", ?(РазделыОтчета.Раздел32.Данные.П000370037103 = 0, 0,
			 (РазделыОтчета.Раздел32.Данные.П000370037203
			+ РазделыОтчета.Раздел32.Данные.П000370037303
			+ РазделыОтчета.Раздел32.Данные.П000370037403)
			/ РазделыОтчета.Раздел32.Данные.П000370037103 * 100));

		РазделыОтчета.Раздел32.Данные.Вставить(
			"П000370037504", ?(РазделыОтчета.Раздел32.Данные.П000370037104 = 0, 0,
			 (РазделыОтчета.Раздел32.Данные.П000370037204
			+ РазделыОтчета.Раздел32.Данные.П000370037304
			+ РазделыОтчета.Раздел32.Данные.П000370037404)
			/ РазделыОтчета.Раздел32.Данные.П000370037104 * 100));
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда // Раздел 4.
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 4.
		
		Колонка6  = 0;
		Колонка7  = 0;
		Колонка8  = 0;
		Колонка9  = 0;
		Колонка10 = 0;
		Колонка11 = 0;
		Колонка12 = 0;
		Колонка13 = 0;
		Колонка14 = 0;
		
		СуммаРазд4Гр13СКодом1ВГр3 = 0;
		СуммаРазд4Гр13СКодом2ВГр3 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() Цикл
			
			Колонка6  = Колонка6  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000106;
			Колонка7  = Колонка7  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000107;
			Колонка8  = Колонка8  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000108;
			Колонка9  = Колонка9  + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000109;
			Колонка10 = Колонка10 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000110;
			Колонка11 = Колонка11 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000111;
			Колонка12 = Колонка12 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000112;
			Колонка13 = Колонка13 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000113;
			Колонка14 = Колонка14 + РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000114;
			
			Если РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000103 = "1" Тогда
				
				// Вычисление значения, необходимого для расчета
				// по гр. 6 в стр. 120 раздела 1.
				// Суммируем значения по гр. 13 раздела 4,
				// при значении кода основания в гр. 3 равном "1".
				СуммаРазд4Гр13СКодом1ВГр3 = СуммаРазд4Гр13СКодом1ВГр3
					+ РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000113;
				
			ИначеЕсли РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000103 = "2" Тогда
				
				// Вычисление значения, необходимого для расчета
				// по гр. 7 в стр. 120 раздела 1.
				// Суммируем значения по гр. 13 раздела 4,
				// при значении кода основания в гр. 3 равном "2".
				СуммаРазд4Гр13СКодом2ВГр3 = СуммаРазд4Гр13СКодом2ВГр3
					+ РазделыОтчета.Раздел4.ДанныеДопСтрок[Ном - 1].П000400000113;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000206", Колонка6);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000207", Колонка7);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000208", Колонка8);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000209", Колонка9);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000210", Колонка10);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000211", Колонка11);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000212", Колонка12);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000213", Колонка13);
		РазделыОтчета.Раздел4.Данные.Вставить("П000400000214", Колонка14);
		
		// Расчет по гр. 3 - 8 в стр. 120,
		// а также по гр. 3 и 4 в стр. 121 раздела 1.
		
		РазделыОтчета.Раздел1.Данные.П000100012003 = РазделыОтчета.Раздел4.Данные.П000400000206;
		РазделыОтчета.Раздел1.Данные.П000100012004 = РазделыОтчета.Раздел4.Данные.П000400000208;
		РазделыОтчета.Раздел1.Данные.П000100012005 = РазделыОтчета.Раздел4.Данные.П000400000210;
		РазделыОтчета.Раздел1.Данные.П000100012006
			= РазделыОтчета.Раздел4.Данные.П000400000211 + СуммаРазд4Гр13СКодом1ВГр3;
		РазделыОтчета.Раздел1.Данные.П000100012007
			= РазделыОтчета.Раздел4.Данные.П000400000212 + СуммаРазд4Гр13СКодом2ВГр3;
		РазделыОтчета.Раздел1.Данные.П000100012008 = РазделыОтчета.Раздел4.Данные.П000400000214;
		РазделыОтчета.Раздел1.Данные.П000100012103 = РазделыОтчета.Раздел4.Данные.П000400000207;
		РазделыОтчета.Раздел1.Данные.П000100012104 = РазделыОтчета.Раздел4.Данные.П000400000209;
		
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел1");
		
	ИначеЕсли ИмяРаздела = "Раздел5" Тогда // Раздел 5.
		
		// Расчет в стр. "Итого ..." (после многострочной части) раздела 5.
		
		Колонка5 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		Колонка8 = 0;
		
		Для Ном = 1 По РазделыОтчета.Раздел5.ДанныеДопСтрок.Количество() Цикл
			
			Колонка5 = Колонка5 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000150;
			Колонка6 = Колонка6 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000160;
			Колонка7 = Колонка7 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000170;
			Колонка8 = Колонка8 + РазделыОтчета.Раздел5.ДанныеДопСтрок[Ном - 1].П000500000180;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000250", Колонка5);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000260", Колонка6);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000270", Колонка7);
		РазделыОтчета.Раздел5.Данные.Вставить("П000500000280", Колонка8);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел5");
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел4");
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел32");
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел31");
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел24");
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел22");
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел21");
		РасчетРеглОтчетРСВ1ФормаОтчета2015Кв1(РазделыОтчета, "Раздел1");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2010Кв4(ДеревоСтраницОтчета)

	ДеревоСтраницОтчета.Колонки.Добавить("Представление",            Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Титульный";
	СтрокаУровня1.Представление          = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел12";
	СтрокаУровня1.Представление          = "Раздел 1, Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел12";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел30";
	СтрокаУровня1.Представление          = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел30";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел41";
	СтрокаУровня1.Представление          = "Раздел 4.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел41";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел42";
	СтрокаУровня1.Представление          = "Раздел 4.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел42";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел43";
	СтрокаУровня1.Представление          = "Раздел 4.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел43";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел50";
	СтрокаУровня1.Представление          = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел50";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2011Кв1(ДеревоСтраницОтчета)

	ДеревоСтраницОтчета.Колонки.Добавить("Представление",            Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Титульный";
	СтрокаУровня1.Представление          = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел12";
	СтрокаУровня1.Представление          = "Раздел 1, Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел12";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел30";
	СтрокаУровня1.Представление          = "Раздел 3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел30";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел41";
	СтрокаУровня1.Представление          = "Раздел 4.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел41";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел42";
	СтрокаУровня1.Представление          = "Раздел 4.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел42";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел43";
	СтрокаУровня1.Представление          = "Раздел 4.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел43";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел44";
	СтрокаУровня1.Представление          = "Раздел 4.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел44";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел50";
	СтрокаУровня1.Представление          = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел50";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2012Кв1(ДеревоСтраницОтчета)

	ДеревоСтраницОтчета.Колонки.Добавить("Представление",            Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Титульный";
	СтрокаУровня1.Представление          = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел1";
	СтрокаУровня1.Представление          = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел2";
	СтрокаУровня1.Представление          = "Раздел 2";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел31";
	СтрокаУровня1.Представление          = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел32";
	СтрокаУровня1.Представление          = "Раздел 3.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел32";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел33";
	СтрокаУровня1.Представление          = "Раздел 3.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел33";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел34";
	СтрокаУровня1.Представление          = "Раздел 3.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел34";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел35";
	СтрокаУровня1.Представление          = "Раздел 3.5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел35";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел36";
	СтрокаУровня1.Представление          = "Раздел 3.6";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел36";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел37";
	СтрокаУровня1.Представление          = "Раздел 3.7";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел37";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел38";
	СтрокаУровня1.Представление          = "Раздел 3.8";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел38";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел4";
	СтрокаУровня1.Представление          = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел5";
	СтрокаУровня1.Представление          = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2013Кв1(ДеревоСтраницОтчета)

	ДеревоСтраницОтчета.Колонки.Добавить("Представление",            Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Титульный";
	СтрокаУровня1.Представление          = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел1";
	СтрокаУровня1.Представление          = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел2";
	СтрокаУровня1.Представление          = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел22";
	СтрокаУровня1.Представление          = "Раздел 2.2-2.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел2";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел31";
	СтрокаУровня1.Представление          = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел32";
	СтрокаУровня1.Представление          = "Раздел 3.2-3.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел32";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел34";
	СтрокаУровня1.Представление          = "Раздел 3.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел34";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел35";
	СтрокаУровня1.Представление          = "Раздел 3.5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел35";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел36";
	СтрокаУровня1.Представление          = "Раздел 3.6";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел36";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел37";
	СтрокаУровня1.Представление          = "Раздел 3.7";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел37";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел38";
	СтрокаУровня1.Представление          = "Раздел 3.8";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел38";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел4";
	СтрокаУровня1.Представление          = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел5";
	СтрокаУровня1.Представление          = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2014Кв1(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Титульный";
	СтрокаУровня1.Представление          = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел1";
	СтрокаУровня1.Представление          = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел21";
	СтрокаУровня1.Представление          = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел22";
	СтрокаУровня1.Представление          = "Раздел 2.2-2.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел22";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел24";
	СтрокаУровня1.Представление          = "Раздел 2.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел24";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел25";
	СтрокаУровня1.Представление          = "Раздел 2.5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел25";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел31";
	СтрокаУровня1.Представление          = "Раздел 3.1-3.2";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел33";
	СтрокаУровня1.Представление          = "Раздел 3.3-3.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел33";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел35";
	СтрокаУровня1.Представление          = "Раздел 3.5-3.6";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел35";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел4";
	СтрокаУровня1.Представление          = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел5";
	СтрокаУровня1.Представление          = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел6";
	СтрокаУровня1.Представление          = "Раздел 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел6";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2015Кв1(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Титульный";
	СтрокаУровня1.Представление          = "Титульный лист";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаТитульный";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел1";
	СтрокаУровня1.Представление          = "Раздел 1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел1";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел21";
	СтрокаУровня1.Представление          = "Раздел 2.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел21";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел22";
	СтрокаУровня1.Представление          = "Раздел 2.2-2.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел22";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел24";
	СтрокаУровня1.Представление          = "Раздел 2.4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел24";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел25";
	СтрокаУровня1.Представление          = "Раздел 2.5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел25";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел31";
	СтрокаУровня1.Представление          = "Раздел 3.1";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел31";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел32";
	СтрокаУровня1.Представление          = "Раздел 3.2-3.3";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел32";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел4";
	СтрокаУровня1.Представление          = "Раздел 4";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел4";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел5";
	СтрокаУровня1.Представление          = "Раздел 5";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел5";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы            = "Раздел6";
	СтрокаУровня1.Представление          = "Раздел 6";
	СтрокаУровня1.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел6";
	СтрокаУровня1.ОриентацияСтраницы     = "Портрет";
	СтрокаУровня1.ВыводНаПечать          = 1;
	СтрокаУровня1.ПоказатьСтраницу       = 1;
	
КонецПроцедуры

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2010Кв4(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			ПоказателиТаблПоле.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.НомРег = СокрЛП(ПоказателиТаблПоле.НомРег) + ПоказателиТаблПоле["НомРег" + Ном];
				ПоказателиТаблПоле.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомТФОМС1" Тогда
			ПоказателиТаблПоле.Вставить("НомТФОМС");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.НомТФОМС = СокрЛП(ПоказателиТаблПоле.НомТФОМС) + ПоказателиТаблПоле["НомТФОМС" + Ном];
				ПоказателиТаблПоле.Удалить("НомТФОМС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			ПоказателиТаблПоле.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				ПоказателиТаблПоле.ИНН = СокрЛП(ПоказателиТаблПоле.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				ПоказателиТаблПоле.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(ПоказателиТаблПоле.ИНН, 2) = "00" Тогда
				ПоказателиТаблПоле.ИНН = Сред(ПоказателиТаблПоле.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			ПоказателиТаблПоле.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				ПоказателиТаблПоле.КПП = СокрЛП(ПоказателиТаблПоле.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				ПоказателиТаблПоле.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРН");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРН = СокрЛП(ПоказателиТаблПоле.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРН" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРНИП1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРНИП");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРНИП = СокрЛП(ПоказателиТаблПоле.ОГРНИП) + ПоказателиТаблПоле["ОГРНИП" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРНИП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			ПоказателиТаблПоле.Вставить("ТелОрганизации");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ТелОрганизации = СокрЛП(ПоказателиТаблПоле.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации" + Ном];
				ПоказателиТаблПоле.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКАТО1" Тогда
			ПоказателиТаблПоле.Вставить("ОКАТО");
			Для Ном = 1 По 11 Цикл
				ПоказателиТаблПоле.ОКАТО = СокрЛП(ПоказателиТаблПоле.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
				ПоказателиТаблПоле.Удалить("ОКАТО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			ПоказателиТаблПоле.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				ПоказателиТаблПоле.ОКВЭД = СокрЛП(ПоказателиТаблПоле.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД" + Ном];
				ПоказателиТаблПоле.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКПО1" Тогда
			ПоказателиТаблПоле.Вставить("ОКПО");
			Для Ном = 1 По 10 Цикл
				ПоказателиТаблПоле.ОКПО = СокрЛП(ПоказателиТаблПоле.ОКПО) + ПоказателиТаблПоле["ОКПО" + Ном];
				ПоказателиТаблПоле.Удалить("ОКПО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКОПФ1" Тогда
			ПоказателиТаблПоле.Вставить("ОКОПФ");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.ОКОПФ = СокрЛП(ПоказателиТаблПоле.ОКОПФ) + ПоказателиТаблПоле["ОКОПФ" + Ном];
				ПоказателиТаблПоле.Удалить("ОКОПФ" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКФС1" Тогда
			ПоказателиТаблПоле.Вставить("ОКФС");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.ОКФС = СокрЛП(ПоказателиТаблПоле.ОКФС) + ПоказателиТаблПоле["ОКФС" + Ном];
				ПоказателиТаблПоле.Удалить("ОКФС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ПоказателиТаблПоле.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.НомерКорректировки = СокрЛП(ПоказателиТаблПоле.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				ПоказателиТаблПоле.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ПоказателиТаблПоле.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Период = СокрЛП(ПоказателиТаблПоле.Период) + ПоказателиТаблПоле["Период" + Ном];
				ПоказателиТаблПоле.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ПоказателиТаблПоле.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				ПоказателиТаблПоле.ОтчетГод = СокрЛП(ПоказателиТаблПоле.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				ПоказателиТаблПоле.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КолЗастрахованных1" Тогда
			ПоказателиТаблПоле.Вставить("КолЗастрахованных");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.КолЗастрахованных = СокрЛП(ПоказателиТаблПоле.КолЗастрахованных) + ПоказателиТаблПоле["КолЗастрахованных" + Ном];
				ПоказателиТаблПоле.Удалить("КолЗастрахованных" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СрСписЧисл1" Тогда
			ПоказателиТаблПоле.Вставить("СрСписЧисл");
			Для Ном = 1 По 5 Цикл
				ПоказателиТаблПоле.СрСписЧисл = СокрЛП(ПоказателиТаблПоле.СрСписЧисл) + ПоказателиТаблПоле["СрСписЧисл" + Ном];
				ПоказателиТаблПоле.Удалить("СрСписЧисл" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Тариф1" Тогда
			ПоказателиТаблПоле.Вставить("Тариф");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Тариф = СокрЛП(ПоказателиТаблПоле.Тариф) + ПоказателиТаблПоле["Тариф" + Ном];
				ПоказателиТаблПоле.Удалить("Тариф" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ПоказателиТаблПоле.Вставить("Прил");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Прил = СокрЛП(ПоказателиТаблПоле.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				ПоказателиТаблПоле.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2011Кв1(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			ПоказателиТаблПоле.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.НомРег = СокрЛП(ПоказателиТаблПоле.НомРег) + ПоказателиТаблПоле["НомРег" + Ном];
				ПоказателиТаблПоле.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомТФОМС1" Тогда
			ПоказателиТаблПоле.Вставить("НомТФОМС");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.НомТФОМС = СокрЛП(ПоказателиТаблПоле.НомТФОМС) + ПоказателиТаблПоле["НомТФОМС" + Ном];
				ПоказателиТаблПоле.Удалить("НомТФОМС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			ПоказателиТаблПоле.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				ПоказателиТаблПоле.ИНН = СокрЛП(ПоказателиТаблПоле.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				ПоказателиТаблПоле.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(ПоказателиТаблПоле.ИНН, 2) = "00" Тогда
				ПоказателиТаблПоле.ИНН = Сред(ПоказателиТаблПоле.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			ПоказателиТаблПоле.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				ПоказателиТаблПоле.КПП = СокрЛП(ПоказателиТаблПоле.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				ПоказателиТаблПоле.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРН");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРН = СокрЛП(ПоказателиТаблПоле.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРН" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРНИП1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРНИП");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРНИП = СокрЛП(ПоказателиТаблПоле.ОГРНИП) + ПоказателиТаблПоле["ОГРНИП" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРНИП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			ПоказателиТаблПоле.Вставить("ТелОрганизации");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ТелОрганизации = СокрЛП(ПоказателиТаблПоле.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации" + Ном];
				ПоказателиТаблПоле.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКАТО1" Тогда
			ПоказателиТаблПоле.Вставить("ОКАТО");
			Для Ном = 1 По 11 Цикл
				ПоказателиТаблПоле.ОКАТО = СокрЛП(ПоказателиТаблПоле.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
				ПоказателиТаблПоле.Удалить("ОКАТО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			ПоказателиТаблПоле.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				ПоказателиТаблПоле.ОКВЭД = СокрЛП(ПоказателиТаблПоле.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД" + Ном];
				ПоказателиТаблПоле.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКПО1" Тогда
			ПоказателиТаблПоле.Вставить("ОКПО");
			Для Ном = 1 По 10 Цикл
				ПоказателиТаблПоле.ОКПО = СокрЛП(ПоказателиТаблПоле.ОКПО) + ПоказателиТаблПоле["ОКПО" + Ном];
				ПоказателиТаблПоле.Удалить("ОКПО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКОПФ1" Тогда
			ПоказателиТаблПоле.Вставить("ОКОПФ");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.ОКОПФ = СокрЛП(ПоказателиТаблПоле.ОКОПФ) + ПоказателиТаблПоле["ОКОПФ" + Ном];
				ПоказателиТаблПоле.Удалить("ОКОПФ" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКФС1" Тогда
			ПоказателиТаблПоле.Вставить("ОКФС");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.ОКФС = СокрЛП(ПоказателиТаблПоле.ОКФС) + ПоказателиТаблПоле["ОКФС" + Ном];
				ПоказателиТаблПоле.Удалить("ОКФС" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ПоказателиТаблПоле.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.НомерКорректировки = СокрЛП(ПоказателиТаблПоле.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				ПоказателиТаблПоле.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ПоказателиТаблПоле.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Период = СокрЛП(ПоказателиТаблПоле.Период) + ПоказателиТаблПоле["Период" + Ном];
				ПоказателиТаблПоле.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ПоказателиТаблПоле.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				ПоказателиТаблПоле.ОтчетГод = СокрЛП(ПоказателиТаблПоле.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				ПоказателиТаблПоле.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КолЗастрахованных1" Тогда
			ПоказателиТаблПоле.Вставить("КолЗастрахованных");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.КолЗастрахованных = СокрЛП(ПоказателиТаблПоле.КолЗастрахованных) + ПоказателиТаблПоле["КолЗастрахованных" + Ном];
				ПоказателиТаблПоле.Удалить("КолЗастрахованных" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СрСписЧисл1" Тогда
			ПоказателиТаблПоле.Вставить("СрСписЧисл");
			Для Ном = 1 По 5 Цикл
				ПоказателиТаблПоле.СрСписЧисл = СокрЛП(ПоказателиТаблПоле.СрСписЧисл) + ПоказателиТаблПоле["СрСписЧисл" + Ном];
				ПоказателиТаблПоле.Удалить("СрСписЧисл" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Тариф1" Тогда
			ПоказателиТаблПоле.Вставить("Тариф");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Тариф = СокрЛП(ПоказателиТаблПоле.Тариф) + ПоказателиТаблПоле["Тариф" + Ном];
				ПоказателиТаблПоле.Удалить("Тариф" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ПоказателиТаблПоле.Вставить("Прил");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Прил = СокрЛП(ПоказателиТаблПоле.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				ПоказателиТаблПоле.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2012Кв1(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			ПоказателиТаблПоле.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.НомРег = СокрЛП(ПоказателиТаблПоле.НомРег) + ПоказателиТаблПоле["НомРег" + Ном];
				ПоказателиТаблПоле.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			ПоказателиТаблПоле.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				ПоказателиТаблПоле.ИНН = СокрЛП(ПоказателиТаблПоле.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				ПоказателиТаблПоле.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(ПоказателиТаблПоле.ИНН, 2) = "00" Тогда
				ПоказателиТаблПоле.ИНН = Сред(ПоказателиТаблПоле.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			ПоказателиТаблПоле.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				ПоказателиТаблПоле.КПП = СокрЛП(ПоказателиТаблПоле.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				ПоказателиТаблПоле.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРН");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРН = СокрЛП(ПоказателиТаблПоле.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРН" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРНИП1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРНИП");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРНИП = СокрЛП(ПоказателиТаблПоле.ОГРНИП) + ПоказателиТаблПоле["ОГРНИП" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРНИП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			ПоказателиТаблПоле.Вставить("ТелОрганизации");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.ТелОрганизации = СокрЛП(ПоказателиТаблПоле.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации" + Ном];
				ПоказателиТаблПоле.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКАТО1" Тогда
			ПоказателиТаблПоле.Вставить("ОКАТО");
			Для Ном = 1 По 11 Цикл
				ПоказателиТаблПоле.ОКАТО = СокрЛП(ПоказателиТаблПоле.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
				ПоказателиТаблПоле.Удалить("ОКАТО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			ПоказателиТаблПоле.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				ПоказателиТаблПоле.ОКВЭД = СокрЛП(ПоказателиТаблПоле.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД" + Ном];
				ПоказателиТаблПоле.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ПоказателиТаблПоле.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.НомерКорректировки = СокрЛП(ПоказателиТаблПоле.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				ПоказателиТаблПоле.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ПоказателиТаблПоле.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Период = СокрЛП(ПоказателиТаблПоле.Период) + ПоказателиТаблПоле["Период" + Ном];
				ПоказателиТаблПоле.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ПоказателиТаблПоле.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				ПоказателиТаблПоле.ОтчетГод = СокрЛП(ПоказателиТаблПоле.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				ПоказателиТаблПоле.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КолЗастрахованных1" Тогда
			ПоказателиТаблПоле.Вставить("КолЗастрахованных");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.КолЗастрахованных = СокрЛП(ПоказателиТаблПоле.КолЗастрахованных) + ПоказателиТаблПоле["КолЗастрахованных" + Ном];
				ПоказателиТаблПоле.Удалить("КолЗастрахованных" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СрСписЧисл1" Тогда
			ПоказателиТаблПоле.Вставить("СрСписЧисл");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.СрСписЧисл = СокрЛП(ПоказателиТаблПоле.СрСписЧисл) + ПоказателиТаблПоле["СрСписЧисл" + Ном];
				ПоказателиТаблПоле.Удалить("СрСписЧисл" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ПоказателиТаблПоле.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.Прил = СокрЛП(ПоказателиТаблПоле.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				ПоказателиТаблПоле.Удалить("Прил" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			ПоказателиТаблПоле.Вставить("СоставленаНа");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.СоставленаНа = СокрЛП(ПоказателиТаблПоле.СоставленаНа) + ПоказателиТаблПоле["СоставленаНа" + Ном];
				ПоказателиТаблПоле.Удалить("СоставленаНа" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2013Кв1(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			ПоказателиТаблПоле.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.НомРег = СокрЛП(ПоказателиТаблПоле.НомРег) + ПоказателиТаблПоле["НомРег" + Ном];
				ПоказателиТаблПоле.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			ПоказателиТаблПоле.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				ПоказателиТаблПоле.ИНН = СокрЛП(ПоказателиТаблПоле.ИНН) + ПоказателиТаблПоле["ИНН" + Ном];
				ПоказателиТаблПоле.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(ПоказателиТаблПоле.ИНН, 2) = "00" Тогда
				ПоказателиТаблПоле.ИНН = Сред(ПоказателиТаблПоле.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			ПоказателиТаблПоле.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				ПоказателиТаблПоле.КПП = СокрЛП(ПоказателиТаблПоле.КПП) + ПоказателиТаблПоле["КПП" + Ном];
				ПоказателиТаблПоле.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРН");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРН = СокрЛП(ПоказателиТаблПоле.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРН" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРНИП1" Тогда
			ПоказателиТаблПоле.Вставить("ОГРНИП");
			Для Ном = 1 По 15 Цикл
				ПоказателиТаблПоле.ОГРНИП = СокрЛП(ПоказателиТаблПоле.ОГРНИП) + ПоказателиТаблПоле["ОГРНИП" + Ном];
				ПоказателиТаблПоле.Удалить("ОГРНИП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			ПоказателиТаблПоле.Вставить("ТелОрганизации");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.ТелОрганизации = СокрЛП(ПоказателиТаблПоле.ТелОрганизации) + ПоказателиТаблПоле["ТелОрганизации" + Ном];
				ПоказателиТаблПоле.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКАТО1" Тогда
			ПоказателиТаблПоле.Вставить("ОКАТО");
			Для Ном = 1 По 11 Цикл
				ПоказателиТаблПоле.ОКАТО = СокрЛП(ПоказателиТаблПоле.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
				ПоказателиТаблПоле.Удалить("ОКАТО" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			ПоказателиТаблПоле.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				ПоказателиТаблПоле.ОКВЭД = СокрЛП(ПоказателиТаблПоле.ОКВЭД) + ПоказателиТаблПоле["ОКВЭД" + Ном];
				ПоказателиТаблПоле.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ПоказателиТаблПоле.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.НомерКорректировки = СокрЛП(ПоказателиТаблПоле.НомерКорректировки) + ПоказателиТаблПоле["НомерКорректировки" + Ном];
				ПоказателиТаблПоле.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ПоказателиТаблПоле.Вставить("Период");
			Для Ном = 1 По 2 Цикл
				ПоказателиТаблПоле.Период = СокрЛП(ПоказателиТаблПоле.Период) + ПоказателиТаблПоле["Период" + Ном];
				ПоказателиТаблПоле.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ПоказателиТаблПоле.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				ПоказателиТаблПоле.ОтчетГод = СокрЛП(ПоказателиТаблПоле.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				ПоказателиТаблПоле.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КолЗастрахованных1" Тогда
			ПоказателиТаблПоле.Вставить("КолЗастрахованных");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.КолЗастрахованных = СокрЛП(ПоказателиТаблПоле.КолЗастрахованных) + ПоказателиТаблПоле["КолЗастрахованных" + Ном];
				ПоказателиТаблПоле.Удалить("КолЗастрахованных" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СрСписЧисл1" Тогда
			ПоказателиТаблПоле.Вставить("СрСписЧисл");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.СрСписЧисл = СокрЛП(ПоказателиТаблПоле.СрСписЧисл) + ПоказателиТаблПоле["СрСписЧисл" + Ном];
				ПоказателиТаблПоле.Удалить("СрСписЧисл" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ПоказателиТаблПоле.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.Прил = СокрЛП(ПоказателиТаблПоле.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				ПоказателиТаблПоле.Удалить("Прил" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			ПоказателиТаблПоле.Вставить("СоставленаНа");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.СоставленаНа = СокрЛП(ПоказателиТаблПоле.СоставленаНа) + ПоказателиТаблПоле["СоставленаНа" + Ном];
				ПоказателиТаблПоле.Удалить("СоставленаНа" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2014Кв1(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			ПоказателиТаблПоле.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.НомРег = СокрЛП(ПоказателиТаблПоле.НомРег)
					+ ПоказателиТаблПоле["НомРег" + Ном];
				ПоказателиТаблПоле.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			ПоказателиТаблПоле.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				ПоказателиТаблПоле.ИНН = СокрЛП(ПоказателиТаблПоле.ИНН)
					+ ПоказателиТаблПоле["ИНН" + Ном];
				ПоказателиТаблПоле.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(ПоказателиТаблПоле.ИНН, 2) = "00" Тогда
				ПоказателиТаблПоле.ИНН = Сред(ПоказателиТаблПоле.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			ПоказателиТаблПоле.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				ПоказателиТаблПоле.КПП = СокрЛП(ПоказателиТаблПоле.КПП)
					+ ПоказателиТаблПоле["КПП" + Ном];
				ПоказателиТаблПоле.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			ПоказателиТаблПоле.Вставить("ТелОрганизации");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.ТелОрганизации = СокрЛП(ПоказателиТаблПоле.ТелОрганизации)
					+ ПоказателиТаблПоле["ТелОрганизации" + Ном];
				ПоказателиТаблПоле.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			ПоказателиТаблПоле.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				ПоказателиТаблПоле.ОКВЭД = СокрЛП(ПоказателиТаблПоле.ОКВЭД)
					+ ПоказателиТаблПоле["ОКВЭД" + Ном];
				ПоказателиТаблПоле.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ПоказателиТаблПоле.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.НомерКорректировки = СокрЛП(ПоказателиТаблПоле.НомерКорректировки)
					+ ПоказателиТаблПоле["НомерКорректировки" + Ном];
				ПоказателиТаблПоле.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ПоказателиТаблПоле.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				ПоказателиТаблПоле.ОтчетГод = СокрЛП(ПоказателиТаблПоле.ОтчетГод)
					+ ПоказателиТаблПоле["ОтчетГод" + Ном];
				ПоказателиТаблПоле.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КолЗастрахованных1" Тогда
			ПоказателиТаблПоле.Вставить("КолЗастрахованных");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.КолЗастрахованных = СокрЛП(ПоказателиТаблПоле.КолЗастрахованных)
					+ ПоказателиТаблПоле["КолЗастрахованных" + Ном];
				ПоказателиТаблПоле.Удалить("КолЗастрахованных" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СрСписЧисл1" Тогда
			ПоказателиТаблПоле.Вставить("СрСписЧисл");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.СрСписЧисл = СокрЛП(ПоказателиТаблПоле.СрСписЧисл)
					+ ПоказателиТаблПоле["СрСписЧисл" + Ном];
				ПоказателиТаблПоле.Удалить("СрСписЧисл" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ПоказателиТаблПоле.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.Прил = СокрЛП(ПоказателиТаблПоле.Прил)
					+ ПоказателиТаблПоле["Прил" + Ном];
				ПоказателиТаблПоле.Удалить("Прил" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			ПоказателиТаблПоле.Вставить("СоставленаНа");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.СоставленаНа = СокрЛП(ПоказателиТаблПоле.СоставленаНа)
					+ ПоказателиТаблПоле["СоставленаНа" + Ном];
				ПоказателиТаблПоле.Удалить("СоставленаНа" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2015Кв1(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "НомРег1" Тогда
			ПоказателиТаблПоле.Вставить("НомРег");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.НомРег = СокрЛП(ПоказателиТаблПоле.НомРег)
					+ ПоказателиТаблПоле["НомРег" + Ном];
				ПоказателиТаблПоле.Удалить("НомРег" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ИНН1" Тогда
			ПоказателиТаблПоле.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				ПоказателиТаблПоле.ИНН = СокрЛП(ПоказателиТаблПоле.ИНН)
					+ ПоказателиТаблПоле["ИНН" + Ном];
				ПоказателиТаблПоле.Удалить("ИНН" + Ном);
			КонецЦикла;
			Если Лев(ПоказателиТаблПоле.ИНН, 2) = "00" Тогда
				ПоказателиТаблПоле.ИНН = Сред(ПоказателиТаблПоле.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1" Тогда
			ПоказателиТаблПоле.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				ПоказателиТаблПоле.КПП = СокрЛП(ПоказателиТаблПоле.КПП)
					+ ПоказателиТаблПоле["КПП" + Ном];
				ПоказателиТаблПоле.Удалить("КПП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ТелОрганизации1" Тогда
			ПоказателиТаблПоле.Вставить("ТелОрганизации");
			Для Ном = 1 По 14 Цикл
				ПоказателиТаблПоле.ТелОрганизации = СокрЛП(ПоказателиТаблПоле.ТелОрганизации)
					+ ПоказателиТаблПоле["ТелОрганизации" + Ном];
				ПоказателиТаблПоле.Удалить("ТелОрганизации" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОКВЭД1" Тогда
			ПоказателиТаблПоле.Вставить("ОКВЭД");
			Для Ном = 1 По 8 Цикл
				ПоказателиТаблПоле.ОКВЭД = СокрЛП(ПоказателиТаблПоле.ОКВЭД)
					+ ПоказателиТаблПоле["ОКВЭД" + Ном];
				ПоказателиТаблПоле.Удалить("ОКВЭД" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ПоказателиТаблПоле.Вставить("НомерКорректировки");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.НомерКорректировки = СокрЛП(ПоказателиТаблПоле.НомерКорректировки)
					+ ПоказателиТаблПоле["НомерКорректировки" + Ном];
				ПоказателиТаблПоле.Удалить("НомерКорректировки" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ПоказателиТаблПоле.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				ПоказателиТаблПоле.ОтчетГод = СокрЛП(ПоказателиТаблПоле.ОтчетГод)
					+ ПоказателиТаблПоле["ОтчетГод" + Ном];
				ПоказателиТаблПоле.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "КолЗастрахованных1" Тогда
			ПоказателиТаблПоле.Вставить("КолЗастрахованных");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.КолЗастрахованных = СокрЛП(ПоказателиТаблПоле.КолЗастрахованных)
					+ ПоказателиТаблПоле["КолЗастрахованных" + Ном];
				ПоказателиТаблПоле.Удалить("КолЗастрахованных" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СрСписЧисл1" Тогда
			ПоказателиТаблПоле.Вставить("СрСписЧисл");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.СрСписЧисл = СокрЛП(ПоказателиТаблПоле.СрСписЧисл)
					+ ПоказателиТаблПоле["СрСписЧисл" + Ном];
				ПоказателиТаблПоле.Удалить("СрСписЧисл" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ПоказателиТаблПоле.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				ПоказателиТаблПоле.Прил = СокрЛП(ПоказателиТаблПоле.Прил)
					+ ПоказателиТаблПоле["Прил" + Ном];
				ПоказателиТаблПоле.Удалить("Прил" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "СоставленаНа1" Тогда
			ПоказателиТаблПоле.Вставить("СоставленаНа");
			Для Ном = 1 По 6 Цикл
				ПоказателиТаблПоле.СоставленаНа = СокрЛП(ПоказателиТаблПоле.СоставленаНа)
					+ ПоказателиТаблПоле["СоставленаНа" + Ном];
				ПоказателиТаблПоле.Удалить("СоставленаНа" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела12СтарогоОбразцаРСВ1ФормаОтчета2010Кв4(ДанныеРеглОтчета)
	
	Для Каждого СтраницаРаздела12 Из ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел12 Цикл
		
		Если СтраницаРаздела12.Данные.Свойство("П000200001001_1") Тогда
			
			СтраницаРаздела12.Данные.Вставить("П000200001001", СокрЛП(СтраницаРаздела12.Данные.П000200001001_1
				+ СтраницаРаздела12.Данные.П000200001001_2));
				
			Для Ном = 1 По 2 Цикл
				СтраницаРаздела12.Данные.Удалить("П000200001001_" + Ном);
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела12СтарогоОбразцаРСВ1ФормаОтчета2011Кв1(ДанныеРеглОтчета)
	
	Для Каждого СтраницаРаздела12 Из ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел12 Цикл
		
		Если СтраницаРаздела12.Данные.Свойство("П000200001001_1") Тогда
			
			СтраницаРаздела12.Данные.Вставить("П000200001001", СокрЛП(СтраницаРаздела12.Данные.П000200001001_1
				+ СтраницаРаздела12.Данные.П000200001001_2));
				
			Для Ном = 1 По 2 Цикл
				СтраницаРаздела12.Данные.Удалить("П000200001001_" + Ном);
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2012Кв1(ДанныеРеглОтчета)
	
	Для Каждого СтраницаРаздела2 Из ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел2 Цикл
		
		Если СтраницаРаздела2.Данные.Свойство("П000200001002") Тогда
			
			СтраницаРаздела2.Данные.Вставить("П000200001001", СокрЛП(СтраницаРаздела2.Данные.П000200001001 + СтраницаРаздела2.Данные.П000200001002));

			СтраницаРаздела2.Данные.Удалить("П000200001002");
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2013Кв1(ДанныеРеглОтчета)
	
	Для Каждого СтраницаРаздела2 Из ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел2 Цикл
		
		Если СтраницаРаздела2.Данные.Свойство("П000200001002") Тогда
			
			СтраницаРаздела2.Данные.Вставить("П000200001001", СокрЛП(СтраницаРаздела2.Данные.П000200001001 + СтраницаРаздела2.Данные.П000200001002));

			СтраницаРаздела2.Данные.Удалить("П000200001002");
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2014Кв1(ДанныеРеглОтчета)
	
	Для Каждого СтраницаРаздела21 Из ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел21 Цикл
		
		Если СтраницаРаздела21.Данные.Свойство("П000210001002") Тогда
			
			СтраницаРаздела21.Данные.Вставить("П000210001001",
				СокрЛП(СтраницаРаздела21.Данные.П000210001001
					 + СтраницаРаздела21.Данные.П000210001002));
			
			СтраницаРаздела21.Данные.Удалить("П000210001002");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2015Кв1(ДанныеРеглОтчета)
	
	Для Каждого СтраницаРаздела21 Из ДанныеРеглОтчета.ДанныеМногостраничныхРазделов.Раздел21 Цикл
		
		Если СтраницаРаздела21.Данные.Свойство("П000210001002") Тогда
			
			СтраницаРаздела21.Данные.Вставить("П000210001001",
				СокрЛП(СтраницаРаздела21.Данные.П000210001001
					 + СтраницаРаздела21.Данные.П000210001002));
			
			СтраницаРаздела21.Данные.Удалить("П000210001002");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2010Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел41", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001001", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001002", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001003", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001004", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001005", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001006", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001007", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001008", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел12", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел12 = ДанныеДопСтраниц.Раздел12.Добавить();
	ДопСтраницаРаздел12.Представление = "Лист N 1";
	ДопСтраницаРаздел12.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел12.АвтоматическоеПредставление = Истина;
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел12",   Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел12));
	РазделыОтчета.Вставить("Раздел30",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел41",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел41, "П0004100010"));
	РазделыОтчета.Вставить("Раздел42",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел43",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел50",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2010Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, СтруктураРеквизитовОтчета());
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, "001", "000");
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(ИсточникОтчета, ИмяФормыОтчета, "СоставПоказателей2010Кв4", СтруктураВариантыЗаполнения);
	
	СтруктураДокУпПред = Новый Структура;
	СтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	СтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	СтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	СтруктураДокУпПред.Вставить("КемВыдан", " ");
	
	НаименованияЭлементовАдреса = Новый Структура;
	НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
	НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
	НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2010Кв4(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("НомерПачки", 0);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "24/01/2011");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СтруктураДокУпПред);
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", Ложь);
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", Неопределено);
	
	Возврат ЗаписатьРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураПараметров);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2011Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел41", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001001", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001002", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001003", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001004", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001005", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001006", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001007", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Колонки.Добавить("П000410001008", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел41.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел12", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел12.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел12 = ДанныеДопСтраниц.Раздел12.Добавить();
	ДопСтраницаРаздел12.Представление = "Лист N 1";
	ДопСтраницаРаздел12.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел12.АвтоматическоеПредставление = Истина;
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел12",  Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел12));
	РазделыОтчета.Вставить("Раздел30",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел41",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел41, "П0004100010"));
	РазделыОтчета.Вставить("Раздел42",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел43",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел44",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел50",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2011Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, СтруктураРеквизитовОтчета());
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, "001", "000");
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(ИсточникОтчета, ИмяФормыОтчета, "СоставПоказателей2011Кв1", СтруктураВариантыЗаполнения);
	
	СтруктураДокУпПред = Новый Структура;
	СтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	СтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	СтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	СтруктураДокУпПред.Вставить("КемВыдан", " ");
	
	НаименованияЭлементовАдреса = Новый Структура;
	НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
	НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
	НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2011Кв1(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("НомерПачки", 0);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "24/01/2011");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СтруктураДокУпПред);
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", Ложь);
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", Неопределено);
	
	Возврат ЗаписатьРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураПараметров);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2012Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел31", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел35", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел4",  Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел5",  Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001001", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001002", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001003", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001004", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001005", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001006", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001007", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310001008", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Добавить();
	
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000101", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000121", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000122", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000103", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000104", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 5)));
	ДанныеДопСтрок.Раздел35.Добавить();
	
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000101", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000102", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000103", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000104", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000105", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000106", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Добавить();
	
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000110", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000120", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000131", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000132", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000141", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000142", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000150", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000160", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000170", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000180", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Лист N 1";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел1",   Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел2",   Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел2));
	РазделыОтчета.Вставить("Раздел31",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел31, "П0003100010"));
	РазделыОтчета.Вставить("Раздел32",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел33",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел34",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел35",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел35, "П0003500001"));
	РазделыОтчета.Вставить("Раздел36",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел37",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел38",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел4",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел4, "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел5, "П0005000001"));
			
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2012Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета);
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, "001", "000");
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(ИсточникОтчета, ИмяФормыОтчета, "СоставПоказателей2012Кв1", СтруктураВариантыЗаполнения);
	
	СтруктураДокУпПред = Новый Структура;
	СтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	СтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	СтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	СтруктураДокУпПред.Вставить("КемВыдан", " ");
	
	НаименованияЭлементовАдреса = Новый Структура;
	НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
	НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
	НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2012Кв1(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("НомерПачки", 0);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "10/05/2012");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СтруктураДокУпПред);
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", Ложь);
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", Неопределено);
	
	Возврат ЗаписатьРеглОтчетРСВ1ФормаОтчета2012Кв1(СтруктураПараметров);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2013Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел31", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел35", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел4",  Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел5",  Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000101", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000102", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000131", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000132", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000133", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000134", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000135", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000141", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000142", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000143", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000144", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000145", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000105", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000106", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000107", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Колонки.Добавить("П000310000108", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел31.Добавить();
	
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000101", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000121", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000122", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000103", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел35.Колонки.Добавить("П000350000104", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 5)));
	ДанныеДопСтрок.Раздел35.Добавить();
	
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000101", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000102", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000103", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000104", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000105", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000106", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000107", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000108", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000109", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000110", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Добавить();
	
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000110", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000120", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000131", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000132", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000141", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000142", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000150", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000160", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000170", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000180", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Лист N 1";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел1",   Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел2",   Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел2));
	РазделыОтчета.Вставить("Раздел22",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел31",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел31, "П0003100001"));
	РазделыОтчета.Вставить("Раздел32",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел34",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел35",  Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел35, "П0003500001"));
	РазделыОтчета.Вставить("Раздел36",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел37",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел38",  Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел4",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел4, "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",   Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок", Ложь, Новый Структура, ДанныеДопСтрок.Раздел5, "П0005000001"));
			
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2013Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета);
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, "001", "000");
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(ИсточникОтчета, ИмяФормыОтчета, "СоставПоказателей2013Кв1", СтруктураВариантыЗаполнения);
	
	СтруктураДокУпПред = Новый Структура;
	СтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("СерияРимскиеЦифры", " ");
	СтруктураДокУпПред.Вставить("СерияРусскиеБуквы", " ");
	СтруктураДокУпПред.Вставить("НомерУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("ДатаВыдачи", "");
	СтруктураДокУпПред.Вставить("КемВыдан", " ");
	
	НаименованияЭлементовАдреса = Новый Структура;
	НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
	НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
	НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2013Кв1(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("НомерПачки", 0);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/03/2013");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СтруктураДокУпПред);
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", Ложь);
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", Неопределено);
	
	Возврат ЗаписатьРеглОтчетРСВ1ФормаОтчета2013Кв1(СтруктураПараметров);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2014Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел33", Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел4",  Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел5",  Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел33.Колонки.Добавить("П000350000101",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел33.Колонки.Добавить("П000350000121",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Раздел33.Колонки.Добавить("П000350000122",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел33.Колонки.Добавить("П000350000103",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел33.Колонки.Добавить("П000350000104",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(8, 5)));
	ДанныеДопСтрок.Раздел33.Добавить();
	
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000101",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000102",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000103",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000104",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000105",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000106",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000107",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000108",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000109",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000110",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000111",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000112",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000113",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000114",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Добавить();
	
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000110",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000120",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000131",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000132",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000141",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000142",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000150",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000160",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000170",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000180",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел21", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел21 = ДанныеДопСтраниц.Раздел21.Добавить();
	ДопСтраницаРаздел21.Представление = "Лист N 1";
	ДопСтраницаРаздел21.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел21.АвтоматическоеПредставление = Истина;
	
	ДанныеДопСтраниц.Вставить("Раздел24", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел24 = ДанныеДопСтраниц.Раздел24.Добавить();
	ДопСтраницаРаздел24.Представление = "Лист N 1";
	ДопСтраницаРаздел24.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел24.АвтоматическоеПредставление = Истина;
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел1",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел21",
		Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел21));
	РазделыОтчета.Вставить("Раздел22",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел24",
		Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел24));
	РазделыОтчета.Вставить("Раздел31",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел33",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел33, "П0003500001"));
	РазделыОтчета.Вставить("Раздел35",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел4",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел4,  "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел5,  "П0005000001"));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2014Кв1(
		ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета);
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(
		ИсточникОтчета, ИмяФормыОтчета, "СоставПоказателей2014Кв1", СтруктураВариантыЗаполнения);
	
	СтруктураДокУпПред = Новый Структура;
	СтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("СерияРимскиеЦифры",           " ");
	СтруктураДокУпПред.Вставить("СерияРусскиеБуквы",           " ");
	СтруктураДокУпПред.Вставить("НомерУдостоверяющего",        " ");
	СтруктураДокУпПред.Вставить("ДатаВыдачи",                  "");
	СтруктураДокУпПред.Вставить("КемВыдан",                    " ");
	
	НаименованияЭлементовАдреса = Новый Структура;
	НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
	НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
	НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2014Кв1(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("НомерПачки", 0);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/01/2014");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СтруктураДокУпПред);
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", Ложь);
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", Неопределено);
	
	Возврат ЗаписатьРеглОтчетРСВ1ФормаОтчета2014Кв1(СтруктураПараметров);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетРСВ1ФормаОтчета2015Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел4",  Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел5",  Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000101",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000102",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000103",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000104",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000105",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000106",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000107",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000108",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000109",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000110",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000111",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000112",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000113",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000400000114",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел4.Добавить();
	
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000110",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(6, 0)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000120",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000131",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000132",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000141",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000142",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000150",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000160",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000170",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Колонки.Добавить("П000500000180",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(15, 2)));
	ДанныеДопСтрок.Раздел5.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел21", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел21.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел21 = ДанныеДопСтраниц.Раздел21.Добавить();
	ДопСтраницаРаздел21.Представление = "Лист N 1";
	ДопСтраницаРаздел21.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел21.АвтоматическоеПредставление = Истина;
	
	ДанныеДопСтраниц.Вставить("Раздел24", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("Данные", Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел24.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	ДопСтраницаРаздел24 = ДанныеДопСтраниц.Раздел24.Добавить();
	ДопСтраницаРаздел24.Представление = "Лист N 1";
	ДопСтраницаРаздел24.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел24.АвтоматическоеПредставление = Истина;
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел1",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел21",
		Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел21));
	РазделыОтчета.Вставить("Раздел22",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел24",
		Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел24));
	РазделыОтчета.Вставить("Раздел31",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел32",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь,   Новый Структура));
	РазделыОтчета.Вставить("Раздел4",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел4,  "П0004000001"));
	РазделыОтчета.Вставить("Раздел5",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел5,  "П0005000001"));
	
	ЗаполнитьРеглОтчетРСВ1ФормаОтчета2015Кв1(
		ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета);
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(
		ИсточникОтчета, ИмяФормыОтчета, "СоставПоказателей2015Кв1", СтруктураВариантыЗаполнения);
	
	СтруктураДокУпПред = Новый Структура;
	СтруктураДокУпПред.Вставить("НаименованиеУдостоверяющего", " ");
	СтруктураДокУпПред.Вставить("СерияРимскиеЦифры",           " ");
	СтруктураДокУпПред.Вставить("СерияРусскиеБуквы",           " ");
	СтруктураДокУпПред.Вставить("НомерУдостоверяющего",        " ");
	СтруктураДокУпПред.Вставить("ДатаВыдачи",                  "");
	СтруктураДокУпПред.Вставить("КемВыдан",                    " ");
	
	НаименованияЭлементовАдреса = Новый Структура;
	НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
	НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
	НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2015Кв1(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("НомерПачки", 0);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "11/03/2015");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СтруктураДокУпПред);
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", Ложь);
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", НаименованияЭлементовАдреса);
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникОтчета", ИсточникОтчета);
	СтруктураПараметров.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДатаНачала", ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания", ДатаОкончания);
	СтруктураПараметров.Вставить("РазделыОтчета", РазделыОтчета);
	СтруктураПараметров.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	СтруктураПараметров.Вставить("СсылкаНаСохрРеглОтчет", Неопределено);
	
	Возврат ЗаписатьРеглОтчетРСВ1ФормаОтчета2015Кв1(СтруктураПараметров);
	
КонецФункции

Функция ЗаписатьРеглОтчетРСВ1ФормаОтчета2010Кв4(СтруктураПараметров)
	
	ИсточникОтчета        = СтруктураПараметров.ИсточникОтчета;
	ИмяФормыОтчета        = СтруктураПараметров.ИмяФормыОтчета;
	Организация           = СтруктураПараметров.Организация;
	ДатаНачала            = СтруктураПараметров.ДатаНачала;
	ДатаОкончания         = СтруктураПараметров.ДатаОкончания;
	РазделыОтчета         = СтруктураПараметров.РазделыОтчета;
	ДанныеРеглОтчета      = СтруктураПараметров.ДанныеРеглОтчета;
	СсылкаНаСохрРеглОтчет = СтруктураПараметров.СсылкаНаСохрРеглОтчет;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
			
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "РСВ-1 ПФР";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.НомерПачки               = ДанныеРеглОтчета.НомерПачки;
    ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	НомерМесяца = Формат(ДатаОкончания, "ДФ=М");
	
	Если НЕ НомерМесяца = "12" Тогда  
		НомерМесяца = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерМесяца, 2, 0);
	КонецЕсли;
		
	РазделыОтчета.Титульный.Данные.Период = НомерМесяца;
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = Формат(ДанныеРеглОтчета.ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2010Кв4(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(ДанныеРеглОтчета.НомерПачки) Тогда
		
		ДанныеРеглОтчета.НомерПачки = НомерПачкиИзРегистра + 1;
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.НомерПачки = ДанныеРеглОтчета.НомерПачки;
		
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
		
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
				
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);

	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);

	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ДокументУпПред", ДанныеРеглОтчета.ДокументУпПред);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", ДанныеРеглОтчета.ДанныеОтчетаИзмененыВручную);
		
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
       	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		Если ДанныеРеглОтчета.НомерПачки > НомерПачкиИзРегистра Тогда
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод), ДанныеРеглОтчета.НомерПачки);
		КонецЕсли;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
		
	ДокументРегламентированныйОтчет.Разблокировать();
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетРСВ1ФормаОтчета2011Кв1(СтруктураПараметров)
	
	ИсточникОтчета        = СтруктураПараметров.ИсточникОтчета;
	ИмяФормыОтчета        = СтруктураПараметров.ИмяФормыОтчета;
	Организация           = СтруктураПараметров.Организация;
	ДатаНачала            = СтруктураПараметров.ДатаНачала;
	ДатаОкончания         = СтруктураПараметров.ДатаОкончания;
	РазделыОтчета         = СтруктураПараметров.РазделыОтчета;
	ДанныеРеглОтчета      = СтруктураПараметров.ДанныеРеглОтчета;
	СсылкаНаСохрРеглОтчет = СтруктураПараметров.СсылкаНаСохрРеглОтчет;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
			
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "РСВ-1 ПФР";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.НомерПачки               = ДанныеРеглОтчета.НомерПачки;
    ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	НомерМесяца = Формат(ДатаОкончания, "ДФ=М");
	
	Если НЕ НомерМесяца = "12" Тогда  
		НомерМесяца = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерМесяца, 2, 0);
	КонецЕсли;
		
	РазделыОтчета.Титульный.Данные.Период = НомерМесяца;
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = Формат(ДанныеРеглОтчета.ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2011Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(ДанныеРеглОтчета.НомерПачки) Тогда
		
		ДанныеРеглОтчета.НомерПачки = НомерПачкиИзРегистра + 1;
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.НомерПачки = ДанныеРеглОтчета.НомерПачки;
		
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
		
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
				
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);

	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);

	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ДокументУпПред", ДанныеРеглОтчета.ДокументУпПред);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", ДанныеРеглОтчета.ДанныеОтчетаИзмененыВручную);
		
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
       	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		Если ДанныеРеглОтчета.НомерПачки > НомерПачкиИзРегистра Тогда
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод), ДанныеРеглОтчета.НомерПачки);
		КонецЕсли;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
		
	ДокументРегламентированныйОтчет.Разблокировать();
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетРСВ1ФормаОтчета2012Кв1(СтруктураПараметров)
	
	ИсточникОтчета        = СтруктураПараметров.ИсточникОтчета;
	ИмяФормыОтчета        = СтруктураПараметров.ИмяФормыОтчета;
	Организация           = СтруктураПараметров.Организация;
	ДатаНачала            = СтруктураПараметров.ДатаНачала;
	ДатаОкончания         = СтруктураПараметров.ДатаОкончания;
	РазделыОтчета         = СтруктураПараметров.РазделыОтчета;
	ДанныеРеглОтчета      = СтруктураПараметров.ДанныеРеглОтчета;
	СсылкаНаСохрРеглОтчет = СтруктураПараметров.СсылкаНаСохрРеглОтчет;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
			
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "РСВ-1 ПФР";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.НомерПачки               = ДанныеРеглОтчета.НомерПачки;
    ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	НомерМесяца = Формат(ДатаОкончания, "ДФ=М");
	
	Если НЕ НомерМесяца = "12" Тогда  
		НомерМесяца = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерМесяца, 2, 0);
	КонецЕсли;
		
	РазделыОтчета.Титульный.Данные.Период = НомерМесяца;
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = Формат(ДанныеРеглОтчета.ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2012Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(ДанныеРеглОтчета.НомерПачки) Тогда
		
		ДанныеРеглОтчета.НомерПачки = НомерПачкиИзРегистра + 1;
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.НомерПачки = ДанныеРеглОтчета.НомерПачки;
		
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
		
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
				
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);

	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);

	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ДокументУпПред", ДанныеРеглОтчета.ДокументУпПред);
	
	СписокСохранения.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", ДанныеРеглОтчета.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	СписокСохранения.Вставить("НаименованияЭлементовАдреса", ДанныеРеглОтчета.НаименованияЭлементовАдреса);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", ДанныеРеглОтчета.ДанныеОтчетаИзмененыВручную);
		
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
       	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		Если ДанныеРеглОтчета.НомерПачки > НомерПачкиИзРегистра Тогда
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод), ДанныеРеглОтчета.НомерПачки);
		КонецЕсли;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
		
	ДокументРегламентированныйОтчет.Разблокировать();
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетРСВ1ФормаОтчета2013Кв1(СтруктураПараметров)
	
	ИсточникОтчета        = СтруктураПараметров.ИсточникОтчета;
	ИмяФормыОтчета        = СтруктураПараметров.ИмяФормыОтчета;
	Организация           = СтруктураПараметров.Организация;
	ДатаНачала            = СтруктураПараметров.ДатаНачала;
	ДатаОкончания         = СтруктураПараметров.ДатаОкончания;
	РазделыОтчета         = СтруктураПараметров.РазделыОтчета;
	ДанныеРеглОтчета      = СтруктураПараметров.ДанныеРеглОтчета;
	СсылкаНаСохрРеглОтчет = СтруктураПараметров.СсылкаНаСохрРеглОтчет;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
			
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "РСВ-1 ПФР";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.НомерПачки               = ДанныеРеглОтчета.НомерПачки;
    ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	НомерМесяца = Формат(ДатаОкончания, "ДФ=М");
	
	Если НЕ НомерМесяца = "12" Тогда  
		НомерМесяца = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(НомерМесяца, 2, 0);
	КонецЕсли;
		
	РазделыОтчета.Титульный.Данные.Период = НомерМесяца;
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = Формат(ДанныеРеглОтчета.ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2013Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(ДанныеРеглОтчета.НомерПачки) Тогда
		
		ДанныеРеглОтчета.НомерПачки = НомерПачкиИзРегистра + 1;
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.НомерПачки = ДанныеРеглОтчета.НомерПачки;
		
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
		
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
				
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
			
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);

	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);

	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ДокументУпПред", ДанныеРеглОтчета.ДокументУпПред);
	
	СписокСохранения.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", ДанныеРеглОтчета.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	СписокСохранения.Вставить("НаименованияЭлементовАдреса", ДанныеРеглОтчета.НаименованияЭлементовАдреса);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", ДанныеРеглОтчета.ДанныеОтчетаИзмененыВручную);
		
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
       	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		Если ДанныеРеглОтчета.НомерПачки > НомерПачкиИзРегистра Тогда
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод), ДанныеРеглОтчета.НомерПачки);
		КонецЕсли;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
		
	ДокументРегламентированныйОтчет.Разблокировать();
			
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетРСВ1ФормаОтчета2014Кв1(СтруктураПараметров)
	
	ИсточникОтчета        = СтруктураПараметров.ИсточникОтчета;
	ИмяФормыОтчета        = СтруктураПараметров.ИмяФормыОтчета;
	Организация           = СтруктураПараметров.Организация;
	ДатаНачала            = СтруктураПараметров.ДатаНачала;
	ДатаОкончания         = СтруктураПараметров.ДатаОкончания;
	РазделыОтчета         = СтруктураПараметров.РазделыОтчета;
	ДанныеРеглОтчета      = СтруктураПараметров.ДанныеРеглОтчета;
	СсылкаНаСохрРеглОтчет = СтруктураПараметров.СсылкаНаСохрРеглОтчет;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "РСВ-1 ПФР";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.НомерПачки               = ДанныеРеглОтчета.НомерПачки;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	НомерМесяца = Формат(ДатаОкончания, "ДФ=М");
	
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = НомерМесяца;
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = Формат(ДанныеРеглОтчета.ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2014Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(
		Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(ДанныеРеглОтчета.НомерПачки) Тогда
		
		ДанныеРеглОтчета.НомерПачки = НомерПачкиИзРегистра + 1;
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.НомерПачки = ДанныеРеглОтчета.НомерПачки;
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ДокументУпПред", ДанныеРеглОтчета.ДокументУпПред);
	
	СписокСохранения.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", ДанныеРеглОтчета.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	СписокСохранения.Вставить("НаименованияЭлементовАдреса", ДанныеРеглОтчета.НаименованияЭлементовАдреса);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", ДанныеРеглОтчета.ДанныеОтчетаИзмененыВручную);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		Если ДанныеРеглОтчета.НомерПачки > НомерПачкиИзРегистра Тогда
			
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(
				Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод), ДанныеРеглОтчета.НомерПачки);
			
		КонецЕсли;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетРСВ1ФормаОтчета2015Кв1(СтруктураПараметров)
	
	ИсточникОтчета        = СтруктураПараметров.ИсточникОтчета;
	ИмяФормыОтчета        = СтруктураПараметров.ИмяФормыОтчета;
	Организация           = СтруктураПараметров.Организация;
	ДатаНачала            = СтруктураПараметров.ДатаНачала;
	ДатаОкончания         = СтруктураПараметров.ДатаОкончания;
	РазделыОтчета         = СтруктураПараметров.РазделыОтчета;
	ДанныеРеглОтчета      = СтруктураПараметров.ДанныеРеглОтчета;
	СсылкаНаСохрРеглОтчет = СтруктураПараметров.СсылкаНаСохрРеглОтчет;
	                     	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "РСВ-1 ПФР";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.НомерПачки               = ДанныеРеглОтчета.НомерПачки;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	НомерМесяца = Формат(ДатаОкончания, "ДФ=М");
	
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = НомерМесяца;
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = Формат(ДанныеРеглОтчета.ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетРСВ1ФормаОтчета2015Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	НомерПачкиИзРегистра = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(
		Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод));
	
	Если НЕ ЗначениеЗаполнено(ДанныеРеглОтчета.НомерПачки) Тогда
		
		ДанныеРеглОтчета.НомерПачки = НомерПачкиИзРегистра + 1;
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.НомерПачки = ДанныеРеглОтчета.НомерПачки;
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
		
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ДокументУпПред", ДанныеРеглОтчета.ДокументУпПред);
	
	СписокСохранения.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", ДанныеРеглОтчета.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	СписокСохранения.Вставить("НаименованияЭлементовАдреса", ДанныеРеглОтчета.НаименованияЭлементовАдреса);
	
	СписокСохранения.Вставить("ДанныеОтчетаИзмененыВручную", ДанныеРеглОтчета.ДанныеОтчетаИзмененыВручную);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		Если ДанныеРеглОтчета.НомерПачки > НомерПачкиИзРегистра Тогда
			
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(
				Организация, Число(РазделыОтчета.Титульный.Данные.ОтчетГод), ДанныеРеглОтчета.НомерПачки);
			
		КонецЕсли;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2010Кв4(СсылкаНаСохрРеглОтчет)
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариантовАвтоЗаполнения;

	ДокРеглОтч = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	
	ДанныеРеглОтчета = Новый Структура;
	
	ДанныеРеглОтчета.Вставить("ДатаПодписи",              ДокРеглОтч.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения",         ДокРеглОтч.ЕдиницаИзмерения);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", ДокРеглОтч.ТочностьЕдиницыИзмерения);
	ДанныеРеглОтчета.Вставить("Комментарий",              ДокРеглОтч.Комментарий);
	ДанныеРеглОтчета.Вставить("НомерПачки",               ДокРеглОтч.НомерПачки);

	СписокСохранения = ДокРеглОтч.ДанныеОтчета.Получить();

	ДеревоНастройкиСтраниц = ДокРеглОтч.ДеревоНастройкиСтраниц.Получить();
	
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", Новый ДеревоЗначений);
		ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2010Кв4(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	Иначе
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоНастройкиСтраниц.Скопировать());
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	КонецЕсли;
		
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	КонецЕсли;
			
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", СписокСохранения.ФлПодсчетСтраниц);

	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", СписокСохранения.ФлОтклВыборЗначений);
	Если ДанныеРеглОтчета.ФлОтклВыборЗначений = Неопределено Тогда
		ДанныеРеглОтчета.ФлОтклВыборЗначений = Ложь;
	КонецЕсли;

	ДанныеРеглОтчета.Вставить("Автозаполнение", СписокСохранения.Автозаполнение);
	
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СписокСохранения.ДокументУпПред);
	Если ДанныеРеглОтчета.ДокументУпПред = Неопределено Тогда
		
		ДанныеРеглОтчета.ДокументУпПред = Новый Структура;
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРимскиеЦифры", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРусскиеБуквы", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НомерУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("ДатаВыдачи", "");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
		
	ДанныеРеглОтчета.Вставить("ВерсияФормы", СписокСохранения.ВерсияФормы);
		
	ДанныеРеглОтчета.Вставить("ПоказателиОтчета", СписокСохранения.ПоказателиОтчета);
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2010Кв4(ДанныеРеглОтчета.ПоказателиОтчета);
		
	КонвертироватьДанныеРаздела12СтарогоОбразцаРСВ1ФормаОтчета2010Кв4(ДанныеРеглОтчета);
			
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", СписокСохранения.ДанныеОтчетаИзмененыВручную);
			
	ДанныеРеглОтчета.Вставить("ВидДокумента", ДокРеглОтч.Вид);
		
	Если ДанныеРеглОтчета.ВидДокумента = Неопределено Тогда
		ДанныеРеглОтчета.ВидДокумента = 0;
	КонецЕсли;

	Если ДанныеРеглОтчета.ВидДокумента = 0 Тогда
		ДанныеРеглОтчета.Вставить("НомерКорректировки", 0);
	Иначе
		ДанныеРеглОтчета.Вставить("НомерКорректировки", ДанныеРеглОтчета.ВидДокумента);
		ДанныеРеглОтчета.ВидДокумента = 1;
	КонецЕсли;
	
	Возврат ДанныеРеглОтчета;
    		
КонецФункции

Функция ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2011Кв1(СсылкаНаСохрРеглОтчет)
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариантовАвтоЗаполнения;

	ДокРеглОтч = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	
	ДанныеРеглОтчета = Новый Структура;
	
	ДанныеРеглОтчета.Вставить("ДатаПодписи",              ДокРеглОтч.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения",         ДокРеглОтч.ЕдиницаИзмерения);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", ДокРеглОтч.ТочностьЕдиницыИзмерения);
	ДанныеРеглОтчета.Вставить("Комментарий",              ДокРеглОтч.Комментарий);
	ДанныеРеглОтчета.Вставить("НомерПачки",               ДокРеглОтч.НомерПачки);

	СписокСохранения = ДокРеглОтч.ДанныеОтчета.Получить();

	ДеревоНастройкиСтраниц = ДокРеглОтч.ДеревоНастройкиСтраниц.Получить();
	
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", Новый ДеревоЗначений);
		ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2011Кв1(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	Иначе
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоНастройкиСтраниц.Скопировать());
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	КонецЕсли;
		
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	КонецЕсли;
			
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", СписокСохранения.ФлПодсчетСтраниц);

	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", СписокСохранения.ФлОтклВыборЗначений);
	Если ДанныеРеглОтчета.ФлОтклВыборЗначений = Неопределено Тогда
		ДанныеРеглОтчета.ФлОтклВыборЗначений = Ложь;
	КонецЕсли;

	ДанныеРеглОтчета.Вставить("Автозаполнение", СписокСохранения.Автозаполнение);
	
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СписокСохранения.ДокументУпПред);
	Если ДанныеРеглОтчета.ДокументУпПред = Неопределено Тогда
		
		ДанныеРеглОтчета.ДокументУпПред = Новый Структура;
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРимскиеЦифры", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРусскиеБуквы", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НомерУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("ДатаВыдачи", "");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
		
	ДанныеРеглОтчета.Вставить("ВерсияФормы", СписокСохранения.ВерсияФормы);
		
	ДанныеРеглОтчета.Вставить("ПоказателиОтчета", СписокСохранения.ПоказателиОтчета);
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2011Кв1(ДанныеРеглОтчета.ПоказателиОтчета);
		
	КонвертироватьДанныеРаздела12СтарогоОбразцаРСВ1ФормаОтчета2011Кв1(ДанныеРеглОтчета);
			
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", СписокСохранения.ДанныеОтчетаИзмененыВручную);
			
	ДанныеРеглОтчета.Вставить("ВидДокумента", ДокРеглОтч.Вид);
		
	Если ДанныеРеглОтчета.ВидДокумента = Неопределено Тогда
		ДанныеРеглОтчета.ВидДокумента = 0;
	КонецЕсли;

	Если ДанныеРеглОтчета.ВидДокумента = 0 Тогда
		ДанныеРеглОтчета.Вставить("НомерКорректировки", 0);
	Иначе
		ДанныеРеглОтчета.Вставить("НомерКорректировки", ДанныеРеглОтчета.ВидДокумента);
		ДанныеРеглОтчета.ВидДокумента = 1;
	КонецЕсли;
	
	Возврат ДанныеРеглОтчета;
    		
КонецФункции

Функция ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2012Кв1(СсылкаНаСохрРеглОтчет)
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариантовАвтоЗаполнения;

	ДокРеглОтч = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	
	ДанныеРеглОтчета = Новый Структура;
	
	ДанныеРеглОтчета.Вставить("ДатаПодписи",              ДокРеглОтч.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения",         ДокРеглОтч.ЕдиницаИзмерения);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", ДокРеглОтч.ТочностьЕдиницыИзмерения);
	ДанныеРеглОтчета.Вставить("Комментарий",              ДокРеглОтч.Комментарий);
	ДанныеРеглОтчета.Вставить("НомерПачки",               ДокРеглОтч.НомерПачки);

	СписокСохранения = ДокРеглОтч.ДанныеОтчета.Получить();

	ДеревоНастройкиСтраниц = ДокРеглОтч.ДеревоНастройкиСтраниц.Получить();
	
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", Новый ДеревоЗначений);
		ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2012Кв1(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	Иначе
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоНастройкиСтраниц.Скопировать());
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	КонецЕсли;
		
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	КонецЕсли;
			
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", СписокСохранения.ФлПодсчетСтраниц);

	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", СписокСохранения.ФлОтклВыборЗначений);
	Если ДанныеРеглОтчета.ФлОтклВыборЗначений = Неопределено Тогда
		ДанныеРеглОтчета.ФлОтклВыборЗначений = Ложь;
	КонецЕсли;

	ДанныеРеглОтчета.Вставить("Автозаполнение", СписокСохранения.Автозаполнение);
	
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СписокСохранения.ДокументУпПред);
	Если ДанныеРеглОтчета.ДокументУпПред = Неопределено Тогда
		
		ДанныеРеглОтчета.ДокументУпПред = Новый Структура;
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРимскиеЦифры", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРусскиеБуквы", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НомерУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("ДатаВыдачи", "");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
		
	ДанныеРеглОтчета.Вставить("ВерсияФормы", СписокСохранения.ВерсияФормы);
		
	ДанныеРеглОтчета.Вставить("ПоказателиОтчета", СписокСохранения.ПоказателиОтчета);
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2012Кв1(ДанныеРеглОтчета.ПоказателиОтчета);
		
	КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2012Кв1(ДанныеРеглОтчета);
			
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", СписокСохранения.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
		
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", СписокСохранения.НаименованияЭлементовАдреса);
		
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", СписокСохранения.ДанныеОтчетаИзмененыВручную);
			
	Если ДанныеРеглОтчета.НаименованияЭлементовАдреса = Неопределено Тогда
		
		ДанныеРеглОтчета.НаименованияЭлементовАдреса = Новый Структура;
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ДокРеглОтч.Вид);
		
	Если ДанныеРеглОтчета.ВидДокумента = Неопределено Тогда
		ДанныеРеглОтчета.ВидДокумента = 0;
	КонецЕсли;

	Если ДанныеРеглОтчета.ВидДокумента = 0 Тогда
		ДанныеРеглОтчета.Вставить("НомерКорректировки", 0);
	Иначе
		ДанныеРеглОтчета.Вставить("НомерКорректировки", ДанныеРеглОтчета.ВидДокумента);
		ДанныеРеглОтчета.ВидДокумента = 1;
	КонецЕсли;
	
	Возврат ДанныеРеглОтчета;
    		
КонецФункции

Функция ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2013Кв1(СсылкаНаСохрРеглОтчет)
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариантовАвтоЗаполнения;

	ДокРеглОтч = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	
	ДанныеРеглОтчета = Новый Структура;
	
	ДанныеРеглОтчета.Вставить("ДатаПодписи",              ДокРеглОтч.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения",         ДокРеглОтч.ЕдиницаИзмерения);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", ДокРеглОтч.ТочностьЕдиницыИзмерения);
	ДанныеРеглОтчета.Вставить("Комментарий",              ДокРеглОтч.Комментарий);
	ДанныеРеглОтчета.Вставить("НомерПачки",               ДокРеглОтч.НомерПачки);

	СписокСохранения = ДокРеглОтч.ДанныеОтчета.Получить();

	ДеревоНастройкиСтраниц = ДокРеглОтч.ДеревоНастройкиСтраниц.Получить();
	
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", Новый ДеревоЗначений);
		ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2013Кв1(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	Иначе
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоНастройкиСтраниц.Скопировать());
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	КонецЕсли;
		
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	КонецЕсли;
			
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", СписокСохранения.ФлПодсчетСтраниц);

	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", СписокСохранения.ФлОтклВыборЗначений);
	Если ДанныеРеглОтчета.ФлОтклВыборЗначений = Неопределено Тогда
		ДанныеРеглОтчета.ФлОтклВыборЗначений = Ложь;
	КонецЕсли;

	ДанныеРеглОтчета.Вставить("Автозаполнение", СписокСохранения.Автозаполнение);
	
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СписокСохранения.ДокументУпПред);
	Если ДанныеРеглОтчета.ДокументУпПред = Неопределено Тогда
		
		ДанныеРеглОтчета.ДокументУпПред = Новый Структура;
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРимскиеЦифры", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРусскиеБуквы", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НомерУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("ДатаВыдачи", "");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
		
	ДанныеРеглОтчета.Вставить("ВерсияФормы", СписокСохранения.ВерсияФормы);
		
	ДанныеРеглОтчета.Вставить("ПоказателиОтчета", СписокСохранения.ПоказателиОтчета);
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2013Кв1(ДанныеРеглОтчета.ПоказателиОтчета);
		
	КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2013Кв1(ДанныеРеглОтчета);
			
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами", СписокСохранения.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
		
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", СписокСохранения.НаименованияЭлементовАдреса);
		
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", СписокСохранения.ДанныеОтчетаИзмененыВручную);
			
	Если ДанныеРеглОтчета.НаименованияЭлементовАдреса = Неопределено Тогда
		
		ДанныеРеглОтчета.НаименованияЭлементовАдреса = Новый Структура;
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ДокРеглОтч.Вид);
		
	Если ДанныеРеглОтчета.ВидДокумента = Неопределено Тогда
		ДанныеРеглОтчета.ВидДокумента = 0;
	КонецЕсли;

	Если ДанныеРеглОтчета.ВидДокумента = 0 Тогда
		ДанныеРеглОтчета.Вставить("НомерКорректировки", 0);
	Иначе
		ДанныеРеглОтчета.Вставить("НомерКорректировки", ДанныеРеглОтчета.ВидДокумента);
		ДанныеРеглОтчета.ВидДокумента = 1;
	КонецЕсли;
	
	Возврат ДанныеРеглОтчета;
    		
КонецФункции

Функция ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2014Кв1(СсылкаНаСохрРеглОтчет)
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариантовАвтоЗаполнения;
	
	ДокРеглОтч = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	
	ДанныеРеглОтчета = Новый Структура;
	
	ДанныеРеглОтчета.Вставить("ДатаПодписи",              ДокРеглОтч.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения",         ДокРеглОтч.ЕдиницаИзмерения);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", ДокРеглОтч.ТочностьЕдиницыИзмерения);
	ДанныеРеглОтчета.Вставить("Комментарий",              ДокРеглОтч.Комментарий);
	ДанныеРеглОтчета.Вставить("НомерПачки",               ДокРеглОтч.НомерПачки);
	
	СписокСохранения = ДокРеглОтч.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = ДокРеглОтч.ДеревоНастройкиСтраниц.Получить();
	
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", Новый ДеревоЗначений);
		ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2014Кв1(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	Иначе
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоНастройкиСтраниц.Скопировать());
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	КонецЕсли;
		
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", СписокСохранения.ФлПодсчетСтраниц);
	
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", СписокСохранения.ФлОтклВыборЗначений);
	Если ДанныеРеглОтчета.ФлОтклВыборЗначений = Неопределено Тогда
		ДанныеРеглОтчета.ФлОтклВыборЗначений = Ложь;
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("Автозаполнение", СписокСохранения.Автозаполнение);
	
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СписокСохранения.ДокументУпПред);
	
	Если ДанныеРеглОтчета.ДокументУпПред = Неопределено Тогда
		
		ДанныеРеглОтчета.ДокументУпПред = Новый Структура;
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРимскиеЦифры", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРусскиеБуквы", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НомерУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("ДатаВыдачи", "");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ВерсияФормы", СписокСохранения.ВерсияФормы);
	
	ДанныеРеглОтчета.Вставить("ПоказателиОтчета", СписокСохранения.ПоказателиОтчета);
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2014Кв1(
		ДанныеРеглОтчета.ПоказателиОтчета);
	
	КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2014Кв1(ДанныеРеглОтчета);
	
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами",
		СписокСохранения.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", СписокСохранения.НаименованияЭлементовАдреса);
	
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", СписокСохранения.ДанныеОтчетаИзмененыВручную);
	
	Если ДанныеРеглОтчета.НаименованияЭлементовАдреса = Неопределено Тогда
		
		ДанныеРеглОтчета.НаименованияЭлементовАдреса = Новый Структура;
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ДокРеглОтч.Вид);
	
	Если ДанныеРеглОтчета.ВидДокумента = Неопределено Тогда
		ДанныеРеглОтчета.ВидДокумента = 0;
	КонецЕсли;
	
	Если ДанныеРеглОтчета.ВидДокумента = 0 Тогда
		ДанныеРеглОтчета.Вставить("НомерКорректировки", 0);
	Иначе
		ДанныеРеглОтчета.Вставить("НомерКорректировки", ДанныеРеглОтчета.ВидДокумента);
		ДанныеРеглОтчета.ВидДокумента = 1;
	КонецЕсли;
	
	Возврат ДанныеРеглОтчета;
	
КонецФункции

Функция ВосстановитьСохраненныеДанныеРеглОтчетРСВ1ФормаОтчета2015Кв1(СсылкаНаСохрРеглОтчет)
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариантовАвтоЗаполнения;
	
	ДокРеглОтч = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	
	ДанныеРеглОтчета = Новый Структура;
	
	ДанныеРеглОтчета.Вставить("ДатаПодписи",              ДокРеглОтч.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения",         ДокРеглОтч.ЕдиницаИзмерения);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", ДокРеглОтч.ТочностьЕдиницыИзмерения);
	ДанныеРеглОтчета.Вставить("Комментарий",              ДокРеглОтч.Комментарий);
	ДанныеРеглОтчета.Вставить("НомерПачки",               ДокРеглОтч.НомерПачки);
	
	СписокСохранения = ДокРеглОтч.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = ДокРеглОтч.ДеревоНастройкиСтраниц.Получить();
	
	Если ДеревоНастройкиСтраниц = Неопределено Тогда
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", Новый ДеревоЗначений);
		ФормироватьСтруктуруСтраницРеглОтчетРСВ1ФормаОтчета2015Кв1(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	Иначе
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоНастройкиСтраниц.Скопировать());
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	КонецЕсли;
		
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", СписокСохранения.ФлПодсчетСтраниц);
	
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", СписокСохранения.ФлОтклВыборЗначений);
	Если ДанныеРеглОтчета.ФлОтклВыборЗначений = Неопределено Тогда
		ДанныеРеглОтчета.ФлОтклВыборЗначений = Ложь;
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("Автозаполнение", СписокСохранения.Автозаполнение);
	
	ДанныеРеглОтчета.Вставить("ДокументУпПред", СписокСохранения.ДокументУпПред);
	
	Если ДанныеРеглОтчета.ДокументУпПред = Неопределено Тогда
		
		ДанныеРеглОтчета.ДокументУпПред = Новый Структура;
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НаименованиеУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРимскиеЦифры", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("СерияРусскиеБуквы", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("НомерУдостоверяющего", " ");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("ДатаВыдачи", "");
		ДанныеРеглОтчета.ДокументУпПред.Вставить("КемВыдан", " ");
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ВерсияФормы", СписокСохранения.ВерсияФормы);
	
	ДанныеРеглОтчета.Вставить("ПоказателиОтчета", СписокСохранения.ПоказателиОтчета);
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразцаРеглОтчетРСВ1ФормаОтчета2015Кв1(
		ДанныеРеглОтчета.ПоказателиОтчета);
	
	КонвертироватьДанныеРаздела2СтарогоОбразцаРСВ1ФормаОтчета2015Кв1(ДанныеРеглОтчета);
	
	ДанныеРеглОтчета.Вставить("ОтображатьНулевыеЗначенияСтрок100и150Цифрами",
		СписокСохранения.ОтображатьНулевыеЗначенияСтрок100и150Цифрами);
	
	ДанныеРеглОтчета.Вставить("НаименованияЭлементовАдреса", СписокСохранения.НаименованияЭлементовАдреса);
	
	ДанныеРеглОтчета.Вставить("ДанныеОтчетаИзмененыВручную", СписокСохранения.ДанныеОтчетаИзмененыВручную);
	
	Если ДанныеРеглОтчета.НаименованияЭлементовАдреса = Неопределено Тогда
		
		ДанныеРеглОтчета.НаименованияЭлементовАдреса = Новый Структура;
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипДома",     "владение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКорпуса",  "строение");
		ДанныеРеглОтчета.НаименованияЭлементовАдреса.Вставить("ТипКвартиры", "оф.");
		
	КонецЕсли;
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ДокРеглОтч.Вид);
	
	Если ДанныеРеглОтчета.ВидДокумента = Неопределено Тогда
		ДанныеРеглОтчета.ВидДокумента = 0;
	КонецЕсли;
	
	Если ДанныеРеглОтчета.ВидДокумента = 0 Тогда
		ДанныеРеглОтчета.Вставить("НомерКорректировки", 0);
	Иначе
		ДанныеРеглОтчета.Вставить("НомерКорректировки", ДанныеРеглОтчета.ВидДокумента);
		ДанныеРеглОтчета.ВидДокумента = 1;
	КонецЕсли;
	
	Возврат ДанныеРеглОтчета;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииАвтоФормированияФормы6НДФЛ

Функция СформироватьАвтоматическиРеглОтчет6НДФЛФормаОтчета2017Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1",  Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел2",  Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010001001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002501",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010003001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010004001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010004501",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010005001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ДанныеДопСтрок.Раздел1.Добавить();
			
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020010001",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020011001",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020012001",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020013001",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020014001",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел2.Добавить();
				
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел1",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел1,  "П00001"));
	РазделыОтчета.Вставить("Раздел2",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел2,  "П00002"));
		
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если НЕ ЗаполнитьРеглОтчет6НДФЛФормаОтчета2017Кв4(
		ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования) Тогда
			
		Возврат Неопределено;
			
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	РазделыОтчета.Титульный.Данные.КПП            = СокрЛП(ПараметрыАвтоФормирования.КПП);
	РазделыОтчета.Титульный.Данные.НалоговыйОрган = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	РазделыОтчета.Титульный.Данные.ОКТМО          = СокрЛП(ПараметрыАвтоФормирования.ОКТМО);
	
	Если НЕ РазделыОтчета.Титульный.Данные.Свойство("КодФормыРеорганизации") Тогда
		РазделыОтчета.Титульный.Данные.Вставить("КодФормыРеорганизации", "");
		РазделыОтчета.Титульный.Данные.Вставить("ИННРеорганизованнойОрганизации", "");
		РазделыОтчета.Титульный.Данные.Вставить("КППРеорганизованнойОрганизации", "");
	КонецЕсли;
	
	ТаблицаВариантыЗаполненияРаздел1 = Новый ТаблицаЗначений;
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("КодПоказателя",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("ВариантЗаполнения",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("ЗначениеАвто",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("Дельта",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("Комментарий",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("КодПоказателяПоСтруктуре",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	ТаблицаВариантыЗаполненияРаздел2 = Новый ТаблицаЗначений;
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("КодПоказателя",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("ВариантЗаполнения",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("ЗначениеАвто",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("Дельта",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("Комментарий",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("КодПоказателяПоСтруктуре",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
	МассивВариантовЗаполненияСтраницРаздел1 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел1.Добавить(ТаблицаВариантыЗаполненияРаздел1);
	
	МассивВариантовЗаполненияСтраницРаздел2 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел2.Добавить(ТаблицаВариантыЗаполненияРаздел2);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	
	СтруктураВариантыЗаполнения.Вставить("Раздел1", МассивВариантовЗаполненияСтраницРаздел1);
	СтруктураВариантыЗаполнения.Вставить("Раздел2", МассивВариантовЗаполненияСтраницРаздел2);
		
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчет6НДФЛФормаОтчета2017Кв4(ДеревоСтраницОтчета);
	                                	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.НалоговыйОрган);
	ДанныеРеглОтчета.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/10/2017");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация",   Организация);
	ДополнительныеПараметры.Вставить("ДатаНачала",    ДатаНачала);
	ДополнительныеПараметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	Возврат ЗаписатьРеглОтчет6НДФЛФормаОтчета2017Кв4(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДанныеРеглОтчета,
													 ПараметрыАвтоФормирования, ДополнительныеПараметры);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчет6НДФЛФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1",  Новый ТаблицаЗначений);
	ДанныеДопСтрок.Вставить("Раздел2",  Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010001001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002501",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010003001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010004001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010004501",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010005001",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ДанныеДопСтрок.Раздел1.Добавить();
			
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020010001",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020011001",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020012001",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020013001",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел2.Колонки.Добавить("П000020014001",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(17, 2)));
	ДанныеДопСтрок.Раздел2.Добавить();
				
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный",
		Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	РазделыОтчета.Вставить("Раздел1",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел1,  "П00001"));
	РазделыОтчета.Вставить("Раздел2",
		Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел2,  "П00002"));
		
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если НЕ ЗаполнитьРеглОтчет6НДФЛФормаОтчета2016Кв1(
		ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования) Тогда
			
		Возврат Неопределено;
			
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	РазделыОтчета.Титульный.Данные.КПП            = СокрЛП(ПараметрыАвтоФормирования.КПП);
	РазделыОтчета.Титульный.Данные.НалоговыйОрган = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	РазделыОтчета.Титульный.Данные.ОКТМО          = СокрЛП(ПараметрыАвтоФормирования.ОКТМО);
			
	ТаблицаВариантыЗаполненияРаздел1 = Новый ТаблицаЗначений;
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("КодПоказателя",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("ВариантЗаполнения",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("ЗначениеАвто",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("Дельта",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("Комментарий",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаВариантыЗаполненияРаздел1.Колонки.Добавить("КодПоказателяПоСтруктуре",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	ТаблицаВариантыЗаполненияРаздел2 = Новый ТаблицаЗначений;
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("КодПоказателя",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("ВариантЗаполнения",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("ЗначениеАвто",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("Дельта",
	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("Комментарий",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаВариантыЗаполненияРаздел2.Колонки.Добавить("КодПоказателяПоСтруктуре",
	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
	МассивВариантовЗаполненияСтраницРаздел1 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел1.Добавить(ТаблицаВариантыЗаполненияРаздел1);
	
	МассивВариантовЗаполненияСтраницРаздел2 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел2.Добавить(ТаблицаВариантыЗаполненияРаздел2);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	
	СтруктураВариантыЗаполнения.Вставить("Раздел1", МассивВариантовЗаполненияСтраницРаздел1);
	СтруктураВариантыЗаполнения.Вставить("Раздел2", МассивВариантовЗаполненияСтраницРаздел2);
		
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчет6НДФЛФормаОтчета2016Кв1(ДеревоСтраницОтчета);
	                                	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.НалоговыйОрган);
	ДанныеРеглОтчета.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/01/2016");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация",   Организация);
	ДополнительныеПараметры.Вставить("ДатаНачала",    ДатаНачала);
	ДополнительныеПараметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	Возврат ЗаписатьРеглОтчет6НДФЛФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДанныеРеглОтчета,
													 ПараметрыАвтоФормирования, ДополнительныеПараметры);
	
КонецФункции

Функция ЗаполнитьРеглОтчет6НДФЛФормаОтчета2017Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования)
	
	РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
			
	КПП   = ПараметрыАвтоФормирования.КПП;
	КодНО = ПараметрыАвтоФормирования.НалоговыйОрган;
	ОКТМО = ПараметрыАвтоФормирования.ОКТМО;
			
	ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтатусПроверки = Истина;
			
	Если НЕ ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
									
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан КПП.'",
											   СокрЛП(Организация.Наименование),
			                                   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
						
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. КПП указан некорректно.'",
											   СокрЛП(Организация.Наименование),
											   СокрЛП(КПП), СокрЛП(КодНО),	СокрЛП(ОКТМО))));
			
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
						
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан код налогового органа.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрДлина(КодНО) = 4
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО) Тогда
				
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. код налогового органа указан некорректно.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан ОКТМО.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрДлина(ОКТМО) = 11
		И НЕ СтрДлина(ОКТМО) = 8 Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. ОКТМО указан некорректно.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодНО);
	ПараметрыОтбораРегистрацийВНО.Вставить("ОКТМО", ОКТМО);
	Если НЕ ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
		ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоФормирования.НомерКорректировки);
		ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоФормирования.ДатаПодписи);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура();
		Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
		Контейнер.Вставить("Раздел1",   РазделыОтчета.Раздел1.Данные);
		Контейнер.Вставить("Раздел1_ДанныеДопСтрок", РазделыОтчета.Раздел1.ДанныеДопСтрок);
		Контейнер.Вставить("Раздел2",   РазделыОтчета.Раздел2.Данные);
		Контейнер.Вставить("Раздел2_ДанныеДопСтрок", РазделыОтчета.Раздел2.ДанныеДопСтрок);
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
		
		НомСтр = 1;
		
		Для Каждого ДопСтрока Из РазделыОтчета.Раздел1.ДанныеДопСтрок Цикл
			
			Для Каждого Колонка Из РазделыОтчета.Раздел1.ДанныеДопСтрок.Колонки Цикл
				
				РазделыОтчета.Раздел1.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
				
			КонецЦикла;
			
			НомСтр = НомСтр + 1;
			
		КонецЦикла;
		
		НомСтр = 1;
		
		Для Каждого ДопСтрока Из РазделыОтчета.Раздел2.ДанныеДопСтрок Цикл
			
			Для Каждого Колонка Из РазделыОтчета.Раздел2.ДанныеДопСтрок.Колонки Цикл
				
				РазделыОтчета.Раздел2.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
				
			КонецЦикла;
			
			НомСтр = НомСтр + 1;
			
		КонецЦикла;
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
		
		Если РазделыОтчета.Раздел1.ДанныеДопСтрок.Количество() = 0 Тогда
			РазделыОтчета.Раздел1.ДанныеДопСтрок.Добавить();
		КонецЕсли;
		
		Если РазделыОтчета.Раздел2.ДанныеДопСтрок.Количество() = 0 Тогда
			РазделыОтчета.Раздел2.ДанныеДопСтрок.Добавить();
		КонецЕсли;
		
		// Расчет итого по строкам 130 и 140 раздела 2 (справочно).
		ИтогоСтр130 = 0;
		ИтогоСтр140 = 0;
		
		Ном = 1;
		Постфикс = "_1";
		
		ЕстьПокСтр130 = Истина;
		
		ЗначСтр130 = РазделыОтчета.Раздел2.Данные["П000020013001" + Постфикс];
		ЗначСтр140 = РазделыОтчета.Раздел2.Данные["П000020014001" + Постфикс];
		
		Пока ЕстьПокСтр130 Цикл
			
			ИтогоСтр130 = ИтогоСтр130 + ЗначСтр130;
			ИтогоСтр140 = ИтогоСтр140 + ЗначСтр140;
			
			Ном = Ном + 1;
			Постфикс = "_" + Формат(Ном, "ЧГ=");
			
			ЕстьПокСтр130 = РазделыОтчета.Раздел2.Данные.Свойство("П000020013001" + Постфикс);
			
			Если ЕстьПокСтр130 Тогда
				
				ЗначСтр130 = РазделыОтчета.Раздел2.Данные["П000020013001" + Постфикс];
				ЗначСтр140 = РазделыОтчета.Раздел2.Данные["П000020014001" + Постфикс];
				
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел2.Данные.Вставить("П000020013002", ИтогоСтр130);
		РазделыОтчета.Раздел2.Данные.Вставить("П000020014002", ИтогоСтр140);
		
	Иначе
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"".'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО),	СокрЛП(ОКТМО))));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция ЗаполнитьРеглОтчет6НДФЛФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования)
	
	РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
			
	КПП   = ПараметрыАвтоФормирования.КПП;
	КодНО = ПараметрыАвтоФормирования.НалоговыйОрган;
	ОКТМО = ПараметрыАвтоФормирования.ОКТМО;
			
	ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтатусПроверки = Истина;
			
	Если НЕ ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
									
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан КПП.'",
											   СокрЛП(Организация.Наименование),
			                                   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
						
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. КПП указан некорректно.'",
											   СокрЛП(Организация.Наименование),
											   СокрЛП(КПП), СокрЛП(КодНО),	СокрЛП(ОКТМО))));
			
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
						
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан код налогового органа.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрДлина(КодНО) = 4
		ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО) Тогда
				
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. код налогового органа указан некорректно.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не указан ОКТМО.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрДлина(ОКТМО) = 11
		И НЕ СтрДлина(ОКТМО) = 8 Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. ОКТМО указан некорректно.'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО), СокрЛП(ОКТМО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодНО);
	ПараметрыОтбораРегистрацийВНО.Вставить("ОКТМО", ОКТМО);
	Если НЕ ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
		ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоФормирования.НомерКорректировки);
		ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоФормирования.ДатаПодписи);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура();
		Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
		Контейнер.Вставить("Раздел1",   РазделыОтчета.Раздел1.Данные);
		Контейнер.Вставить("Раздел1_ДанныеДопСтрок", РазделыОтчета.Раздел1.ДанныеДопСтрок);
		Контейнер.Вставить("Раздел2",   РазделыОтчета.Раздел2.Данные);
		Контейнер.Вставить("Раздел2_ДанныеДопСтрок", РазделыОтчета.Раздел2.ДанныеДопСтрок);
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
		
		НомСтр = 1;
		
		Для Каждого ДопСтрока Из РазделыОтчета.Раздел1.ДанныеДопСтрок Цикл
			
			Для Каждого Колонка Из РазделыОтчета.Раздел1.ДанныеДопСтрок.Колонки Цикл
				
				РазделыОтчета.Раздел1.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
				
			КонецЦикла;
			
			НомСтр = НомСтр + 1;
			
		КонецЦикла;
		
		НомСтр = 1;
		
		Для Каждого ДопСтрока Из РазделыОтчета.Раздел2.ДанныеДопСтрок Цикл
			
			Для Каждого Колонка Из РазделыОтчета.Раздел2.ДанныеДопСтрок.Колонки Цикл
				
				РазделыОтчета.Раздел2.Данные.Вставить(Колонка.Имя + "_" + НомСтр, ДопСтрока[Колонка.Имя]);
				
			КонецЦикла;
			
			НомСтр = НомСтр + 1;
			
		КонецЦикла;
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета);
		
		Если РазделыОтчета.Раздел1.ДанныеДопСтрок.Количество() = 0 Тогда
			РазделыОтчета.Раздел1.ДанныеДопСтрок.Добавить();
		КонецЕсли;
		
		Если РазделыОтчета.Раздел2.ДанныеДопСтрок.Количество() = 0 Тогда
			РазделыОтчета.Раздел2.ДанныеДопСтрок.Добавить();
		КонецЕсли;
		
		// Расчет итого по строкам 130 и 140 раздела 2 (справочно).
		ИтогоСтр130 = 0;
		ИтогоСтр140 = 0;
		
		Ном = 1;
		Постфикс = "_1";
		
		ЕстьПокСтр130 = Истина;
		
		ЗначСтр130 = РазделыОтчета.Раздел2.Данные["П000020013001" + Постфикс];
		ЗначСтр140 = РазделыОтчета.Раздел2.Данные["П000020014001" + Постфикс];
		
		Пока ЕстьПокСтр130 Цикл
			
			ИтогоСтр130 = ИтогоСтр130 + ЗначСтр130;
			ИтогоСтр140 = ИтогоСтр140 + ЗначСтр140;
			
			Ном = Ном + 1;
			Постфикс = "_" + Формат(Ном, "ЧГ=");
			
			ЕстьПокСтр130 = РазделыОтчета.Раздел2.Данные.Свойство("П000020013001" + Постфикс);
			
			Если ЕстьПокСтр130 Тогда
				
				ЗначСтр130 = РазделыОтчета.Раздел2.Данные["П000020013001" + Постфикс];
				ЗначСтр140 = РазделыОтчета.Раздел2.Данные["П000020014001" + Постфикс];
				
			КонецЕсли;
			
		КонецЦикла;
		
		РазделыОтчета.Раздел2.Данные.Вставить("П000020013002", ИтогоСтр130);
		РазделыОтчета.Раздел2.Данные.Вставить("П000020014002", ИтогоСтр140);
		
	Иначе
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										   "ru='Форма 6-НДФЛ (Организация: %1, КПП: %2, код ИФНС: %3, ОКТМО: %4) не сформирована, т. к. не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"".'",
										   СокрЛП(Организация.Наименование),
										   СокрЛП(КПП), СокрЛП(КодНО),	СокрЛП(ОКТМО))));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Процедура СохранитьДанныеРазделаРеглОтчет6НДФЛФормаОтчета2017Кв4(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
				
	// Многострочные разделы.
	Если НаимРаздела = "Раздел1"
		  ИЛИ НаимРаздела = "Раздел2" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчет6НДФЛФормаОтчета2016Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета)
				
	// Многострочные разделы.
	Если НаимРаздела = "Раздел1"
		  ИЛИ НаимРаздела = "Раздел2" Тогда
		  
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчет6НДФЛФормаОтчета2017Кв4(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		                                                   	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
			
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчет6НДФЛФормаОтчета2016Кв1(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		                                                   	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
			
КонецПроцедуры

Функция ЗаписатьРеглОтчет6НДФЛФормаОтчета2017Кв4(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДанныеРеглОтчета,
												 ПараметрыАвтоФормирования, ДополнительныеПараметры)
	
	Организация   = ДополнительныеПараметры.Организация;
	ДатаНачала    = ДополнительныеПараметры.ДатаНачала;
	ДатаОкончания = ДополнительныеПараметры.ДатаОкончания;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	СсылкаНаСохрРеглОтчет = Неопределено;
	ПараметрыАвтоФормирования.Свойство("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "6-НДФЛ";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	МесяцОкончания = Месяц(ДатаОкончания);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = 21;
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = 31;
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = 33;
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = 34;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(Год(ДатаОкончания), "ЧГ=");
	
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
		
	ЗаполнитьСведенияОбОрганизацииРеглОтчет6НДФЛФормаОтчета2017Кв4(
	Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания, ПараметрыАвтоФормирования);
		
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	                      	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
		
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", ДанныеРеглОтчета.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
				
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
						
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчет6НДФЛФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДанныеРеглОтчета,
												 ПараметрыАвтоФормирования, ДополнительныеПараметры)
	
	Организация   = ДополнительныеПараметры.Организация;
	ДатаНачала    = ДополнительныеПараметры.ДатаНачала;
	ДатаОкончания = ДополнительныеПараметры.ДатаОкончания;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	СсылкаНаСохрРеглОтчет = Неопределено;
	ПараметрыАвтоФормирования.Свойство("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "6-НДФЛ";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	МесяцОкончания = Месяц(ДатаОкончания);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = 21;
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = 31;
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = 33;
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = 34;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(Год(ДатаОкончания), "ЧГ=");
	
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
		
	ЗаполнитьСведенияОбОрганизацииРеглОтчет6НДФЛФормаОтчета2016Кв1(
	Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания, ПараметрыАвтоФормирования);
		
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	                      	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
		
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", ДанныеРеглОтчета.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
				
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
						
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчет6НДФЛФормаОтчета2017Кв4(Организация, РазделыОтчета, ДатаПодписи,
	ДатаОкончания, ПараметрыАвтоФормирования)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Если ПБОЮЛ Тогда
		
		РазделыОтчета.Титульный.Данные.ПоМесту = "120";
		
	Иначе
		
		Если Организация = РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация) Тогда
			
			ОрганизацияКрупнейшийНалогоплательщик
			= Организация.Метаданные().Реквизиты.Найти("КрупнейшийНалогоплательщик") <> Неопределено
			И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КрупнейшийНалогоплательщик")) = Тип("Булево")
			И Организация.КрупнейшийНалогоплательщик;
			
			РазделыОтчета.Титульный.Данные.ПоМесту = ?(ОрганизацияКрупнейшийНалогоплательщик, "213", "214");
			
			РегистрацияВНалоговомОрганеВладелец = ПараметрыАвтоФормирования.РегистрацияВНалоговомОргане.Владелец;
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОрганеВладелец) Тогда
				
				РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка
				= Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистрацияВНалоговомОрганеВладелец));
				
				Если РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка Тогда
					
					РегистрацияВНалоговомОрганеВладелецЕстьРеквизитРегистрацияВНалоговомОргане
					= РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено;
					
					Если РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане")
						<> Неопределено И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОрганеВладелец,
						"РегистрацияВНалоговомОргане")) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
						И РегистрацияВНалоговомОрганеВладелец.РегистрацияВНалоговомОргане
						<> ПараметрыАвтоФормирования.РегистрацияВНалоговомОргане Тогда
						
						РазделыОтчета.Титульный.Данные.ПоМесту = "220";
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			РазделыОтчета.Титульный.Данные.ПоМесту = "220";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаСведений = "ИННЮЛ, НаимЮЛПол, НаимЮЛСокр, НаимНО, ТипНП, ТелОрганизации, ФИО";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
	
	РазделыОтчета.Титульный.Данные.ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
			
	Если ПБОЮЛ Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НаимОрг = НаименованиеОрганизации;
	РазделыОтчета.Титульный.Данные.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
	ЗаполнитьСведенияОПодписантах(Организация, РазделыОтчета, ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчет6НДФЛФормаОтчета2016Кв1(Организация, РазделыОтчета, ДатаПодписи,
	ДатаОкончания, ПараметрыАвтоФормирования)
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Если ПБОЮЛ Тогда
		
		РазделыОтчета.Титульный.Данные.ПоМесту = "120";
		
	Иначе
		
		Если Организация = РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация) Тогда
			
			ОрганизацияКрупнейшийНалогоплательщик
			= Организация.Метаданные().Реквизиты.Найти("КрупнейшийНалогоплательщик") <> Неопределено
			И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КрупнейшийНалогоплательщик")) = Тип("Булево")
			И Организация.КрупнейшийНалогоплательщик;
			
			РазделыОтчета.Титульный.Данные.ПоМесту = ?(ОрганизацияКрупнейшийНалогоплательщик, "213", "212");
			
			РегистрацияВНалоговомОрганеВладелец = ПараметрыАвтоФормирования.РегистрацияВНалоговомОргане.Владелец;
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОрганеВладелец) Тогда
				
				РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка
				= Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистрацияВНалоговомОрганеВладелец));
				
				Если РегистрацияВНалоговомОрганеВладелецЭтоСправочникСсылка Тогда
					
					РегистрацияВНалоговомОрганеВладелецЕстьРеквизитРегистрацияВНалоговомОргане
					= РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено;
					
					Если РегистрацияВНалоговомОрганеВладелец.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане")
						<> Неопределено И ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОрганеВладелец,
						"РегистрацияВНалоговомОргане")) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
						И РегистрацияВНалоговомОрганеВладелец.РегистрацияВНалоговомОргане
						<> ПараметрыАвтоФормирования.РегистрацияВНалоговомОргане Тогда
						
						РазделыОтчета.Титульный.Данные.ПоМесту = "220";
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			РазделыОтчета.Титульный.Данные.ПоМесту = "220";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаСведений = "ИННЮЛ, НаимЮЛПол, НаимЮЛСокр, НаимНО, ТипНП, ТелОрганизации, ФИО";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
	
	РазделыОтчета.Титульный.Данные.ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
			
	Если ПБОЮЛ Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НаимЮЛСокр) Тогда
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
		Иначе
			НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		КонецЕсли;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НаимОрг = НаименованиеОрганизации;
	РазделыОтчета.Титульный.Данные.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
	ЗаполнитьСведенияОПодписантах(Организация, РазделыОтчета, ДатаПодписи);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииАвтоФормированияФормыЕНВД

Функция СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2018Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ДанныеДопСтрок.Раздел1.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Новая страница";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	П0000200062 = Новый ТаблицаЗначений;
	П0000200062.Колонки.Добавить("П000020006201",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200062.Добавить();
	П0000200065 = Новый ТаблицаЗначений;
	П0000200065.Колонки.Добавить("П000020006501",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200065.Добавить();
	ДопСтраницаРаздел2.ДанныеДопСтрок = Новый Структура("П0000200062, П0000200065", П0000200062, П0000200065);
	
	ДанныеДопСтрок.Вставить("Раздел4", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(40)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040002003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040003003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(16)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040004003",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ДанныеДопСтрок.Раздел4.Добавить();
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел1", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел1, "П00001000"));
	
	РазделыОтчета.Вставить("Раздел2", Новый Структура(
		"МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел2));
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел4", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел4, "П00004000"));
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если НЕ ПараметрыАвтоФормирования.Свойство("РезультатАвтоформирования") Тогда
		ПараметрыАвтоФормирования.Вставить("РезультатАвтоформирования", Новый Массив);
	КонецЕсли;
		
	Если НЕ ПараметрыАвтоФормирования.Свойство("КПП")
	 ИЛИ НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ПараметрыАвтоФормирования.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организация.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	Организация.РегистрацияВНалоговомОргане.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организация
		|ГДЕ
		|	Организация.Ссылка = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("КПП") Тогда
				ПараметрыАвтоФормирования.Вставить("КПП", Выборка.КПП);
			КонецЕсли;
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
				ПараметрыАвтоФормирования.Вставить("НалоговыйОрган", Выборка.КодНалоговогоОргана);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеглОтчетЕНВДФормаОтчета2018Кв4(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	РазделыОтчета.Титульный.Данные.КПП1    = СокрЛП(ПараметрыАвтоФормирования.КПП);
	РазделыОтчета.Титульный.Данные.КодИМНС = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ТаблВЗ = Новый ТаблицаЗначений;
	ТаблВЗ.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблВЗ.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблВЗ.Колонки.Добавить("ЗначениеАвто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблВЗ.Колонки.Добавить("КодПоказателяПоСтруктуре", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	МассивВариантовЗаполненияСтраницРаздел1 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел1.Добавить(ТаблВЗ.Скопировать());
	
	МассивВариантовЗаполненияСтраницРаздел2 = Новый Массив;
	ТаблВЗРаздел2 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020007004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020008004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020009004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020010003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020011003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел2.Добавить(ТаблВЗРаздел2);
	
	МассивВариантовЗаполненияСтраницРаздел3 = Новый Массив;
	ТаблВЗРаздел3 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030004003";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030005003";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел3.Добавить(ТаблВЗРаздел3);
	
	МассивВариантовЗаполненияСтраницРаздел4 = Новый Массив;
	ТаблВЗРаздел4 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел4 = ТаблВЗРаздел4.Добавить();
	НовСтр_ТаблВЗРаздел4.КодПоказателя = "П000040015003";
	НовСтр_ТаблВЗРаздел4.ВариантЗаполнения = 5;
	МассивВариантовЗаполненияСтраницРаздел4.Добавить(ТаблВЗРаздел4);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	
	СтруктураВариантыЗаполнения.Вставить("Раздел1", МассивВариантовЗаполненияСтраницРаздел1);
	СтруктураВариантыЗаполнения.Вставить("Раздел2", МассивВариантовЗаполненияСтраницРаздел2);
	СтруктураВариантыЗаполнения.Вставить("Раздел3", МассивВариантовЗаполненияСтраницРаздел3);
	СтруктураВариантыЗаполнения.Вставить("Раздел4", МассивВариантовЗаполненияСтраницРаздел4);
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2018Кв4(ДеревоСтраницОтчета, Организация);
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИМНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ДанныеРеглОтчета.Вставить("КПП1", РазделыОтчета.Титульный.Данные.КПП1);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/10/2018");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СсылкаНаСохрРеглОтчет = Неопределено;
	ПараметрыАвтоФормирования.Свойство("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	Возврат ЗаписатьРеглОтчетЕНВДФормаОтчета2018Кв4(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2018Кв3(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ДанныеДопСтрок.Раздел1.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Новая страница";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	П0000200062 = Новый ТаблицаЗначений;
	П0000200062.Колонки.Добавить("П000020006201",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200062.Добавить();
	П0000200065 = Новый ТаблицаЗначений;
	П0000200065.Колонки.Добавить("П000020006501",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200065.Добавить();
	ДопСтраницаРаздел2.ДанныеДопСтрок = Новый Структура("П0000200062, П0000200065", П0000200062, П0000200065);
	
	ДанныеДопСтрок.Вставить("Раздел4", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(40)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040002003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040003003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(16)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040004003",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ДанныеДопСтрок.Раздел4.Добавить();
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел1", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел1, "П00001000"));
	
	РазделыОтчета.Вставить("Раздел2", Новый Структура(
		"МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел2));
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел4", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел4, "П00004000"));
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если НЕ ПараметрыАвтоФормирования.Свойство("РезультатАвтоформирования") Тогда
		ПараметрыАвтоФормирования.Вставить("РезультатАвтоформирования", Новый Массив);
	КонецЕсли;
		
	Если НЕ ПараметрыАвтоФормирования.Свойство("КПП")
	 ИЛИ НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ПараметрыАвтоФормирования.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организация.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	Организация.РегистрацияВНалоговомОргане.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организация
		|ГДЕ
		|	Организация.Ссылка = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("КПП") Тогда
				ПараметрыАвтоФормирования.Вставить("КПП", Выборка.КПП);
			КонецЕсли;
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
				ПараметрыАвтоФормирования.Вставить("НалоговыйОрган", Выборка.КодНалоговогоОргана);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеглОтчетЕНВДФормаОтчета2018Кв3(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	РазделыОтчета.Титульный.Данные.КПП1    = СокрЛП(ПараметрыАвтоФормирования.КПП);
	РазделыОтчета.Титульный.Данные.КодИМНС = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ТаблВЗ = Новый ТаблицаЗначений;
	ТаблВЗ.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблВЗ.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблВЗ.Колонки.Добавить("ЗначениеАвто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблВЗ.Колонки.Добавить("КодПоказателяПоСтруктуре", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	МассивВариантовЗаполненияСтраницРаздел1 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел1.Добавить(ТаблВЗ.Скопировать());
	
	МассивВариантовЗаполненияСтраницРаздел2 = Новый Массив;
	ТаблВЗРаздел2 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020007004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020008004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020009004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020010003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020011003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел2.Добавить(ТаблВЗРаздел2);
	
	МассивВариантовЗаполненияСтраницРаздел3 = Новый Массив;
	ТаблВЗРаздел3 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030004003";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030005003";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел3.Добавить(ТаблВЗРаздел3);
	
	МассивВариантовЗаполненияСтраницРаздел4 = Новый Массив;
	ТаблВЗРаздел4 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел4 = ТаблВЗРаздел4.Добавить();
	НовСтр_ТаблВЗРаздел4.КодПоказателя = "П000040015003";
	НовСтр_ТаблВЗРаздел4.ВариантЗаполнения = 5;
	МассивВариантовЗаполненияСтраницРаздел4.Добавить(ТаблВЗРаздел4);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	
	СтруктураВариантыЗаполнения.Вставить("Раздел1", МассивВариантовЗаполненияСтраницРаздел1);
	СтруктураВариантыЗаполнения.Вставить("Раздел2", МассивВариантовЗаполненияСтраницРаздел2);
	СтруктураВариантыЗаполнения.Вставить("Раздел3", МассивВариантовЗаполненияСтраницРаздел3);
	СтруктураВариантыЗаполнения.Вставить("Раздел4", МассивВариантовЗаполненияСтраницРаздел4);
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2018Кв3(ДеревоСтраницОтчета, Организация);
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИМНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ДанныеРеглОтчета.Вставить("КПП1", РазделыОтчета.Титульный.Данные.КПП1);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/07/2018");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СсылкаНаСохрРеглОтчет = Неопределено;
	ПараметрыАвтоФормирования.Свойство("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	Возврат ЗаписатьРеглОтчетЕНВДФормаОтчета2018Кв3(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2018Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ДанныеДопСтрок.Раздел1.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Новая страница";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	П0000200062 = Новый ТаблицаЗначений;
	П0000200062.Колонки.Добавить("П000020006201",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200062.Добавить();
	П0000200065 = Новый ТаблицаЗначений;
	П0000200065.Колонки.Добавить("П000020006501",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200065.Добавить();
	ДопСтраницаРаздел2.ДанныеДопСтрок = Новый Структура("П0000200062, П0000200065", П0000200062, П0000200065);
	
	ДанныеДопСтрок.Вставить("Раздел4", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(40)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040002003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040003003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(16)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040004003",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел4.Колонки.Добавить("П000040005003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ДанныеДопСтрок.Раздел4.Добавить();
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел1", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел1, "П00001000"));
	
	РазделыОтчета.Вставить("Раздел2", Новый Структура(
		"МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел2));
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел4", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел4, "П00004000"));
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если НЕ ПараметрыАвтоФормирования.Свойство("РезультатАвтоформирования") Тогда
		ПараметрыАвтоФормирования.Вставить("РезультатАвтоформирования", Новый Массив);
	КонецЕсли;
		
	Если НЕ ПараметрыАвтоФормирования.Свойство("КПП")
	 ИЛИ НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ПараметрыАвтоФормирования.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организация.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	Организация.РегистрацияВНалоговомОргане.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организация
		|ГДЕ
		|	Организация.Ссылка = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("КПП") Тогда
				ПараметрыАвтоФормирования.Вставить("КПП", Выборка.КПП);
			КонецЕсли;
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
				ПараметрыАвтоФормирования.Вставить("НалоговыйОрган", Выборка.КодНалоговогоОргана);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеглОтчетЕНВДФормаОтчета2018Кв1(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	РазделыОтчета.Титульный.Данные.КПП1    = СокрЛП(ПараметрыАвтоФормирования.КПП);
	РазделыОтчета.Титульный.Данные.КодИМНС = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ТаблВЗ = Новый ТаблицаЗначений;
	ТаблВЗ.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблВЗ.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблВЗ.Колонки.Добавить("ЗначениеАвто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблВЗ.Колонки.Добавить("КодПоказателяПоСтруктуре", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	МассивВариантовЗаполненияСтраницРаздел1 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел1.Добавить(ТаблВЗ.Скопировать());
	
	МассивВариантовЗаполненияСтраницРаздел2 = Новый Массив;
	ТаблВЗРаздел2 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020007004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020008004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020009004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020010003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020011003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел2.Добавить(ТаблВЗРаздел2);
	
	МассивВариантовЗаполненияСтраницРаздел3 = Новый Массив;
	ТаблВЗРаздел3 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030003503";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030004003";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел3.Добавить(ТаблВЗРаздел3);
	
	МассивВариантовЗаполненияСтраницРаздел4 = Новый Массив;
	ТаблВЗРаздел4 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел4 = ТаблВЗРаздел4.Добавить();
	НовСтр_ТаблВЗРаздел4.КодПоказателя = "П000040015003";
	НовСтр_ТаблВЗРаздел4.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел4.Добавить(ТаблВЗРаздел4);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	
	СтруктураВариантыЗаполнения.Вставить("Раздел1", МассивВариантовЗаполненияСтраницРаздел1);
	СтруктураВариантыЗаполнения.Вставить("Раздел2", МассивВариантовЗаполненияСтраницРаздел2);
	СтруктураВариантыЗаполнения.Вставить("Раздел3", МассивВариантовЗаполненияСтраницРаздел3);
	СтруктураВариантыЗаполнения.Вставить("Раздел4", МассивВариантовЗаполненияСтраницРаздел4);
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2018Кв1(ДеревоСтраницОтчета, Организация);
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИМНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ДанныеРеглОтчета.Вставить("КПП1", РазделыОтчета.Титульный.Данные.КПП1);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/01/2018");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СсылкаНаСохрРеглОтчет = Неопределено;
	ПараметрыАвтоФормирования.Свойство("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	Возврат ЗаписатьРеглОтчетЕНВДФормаОтчета2018Кв1(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2017Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ДанныеДопСтрок.Раздел1.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Новая страница";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	П0000200062 = Новый ТаблицаЗначений;
	П0000200062.Колонки.Добавить("П000020006201",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200062.Добавить();
	П0000200065 = Новый ТаблицаЗначений;
	П0000200065.Колонки.Добавить("П000020006501",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200065.Добавить();
	ДопСтраницаРаздел2.ДанныеДопСтрок = Новый Структура("П0000200062, П0000200065", П0000200062, П0000200065);
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел1", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел1, "П00001000"));
	
	РазделыОтчета.Вставить("Раздел2", Новый Структура(
		"МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел2));
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если НЕ ПараметрыАвтоФормирования.Свойство("РезультатАвтоформирования") Тогда
		ПараметрыАвтоФормирования.Вставить("РезультатАвтоформирования", Новый Массив);
	КонецЕсли;
		
	Если НЕ ПараметрыАвтоФормирования.Свойство("КПП")
	 ИЛИ НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ПараметрыАвтоФормирования.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организация.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	Организация.РегистрацияВНалоговомОргане.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организация
		|ГДЕ
		|	Организация.Ссылка = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("КПП") Тогда
				ПараметрыАвтоФормирования.Вставить("КПП", Выборка.КПП);
			КонецЕсли;
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
				ПараметрыАвтоФормирования.Вставить("НалоговыйОрган", Выборка.КодНалоговогоОргана);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеглОтчетЕНВДФормаОтчета2017Кв1(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	РазделыОтчета.Титульный.Данные.КПП1    = СокрЛП(ПараметрыАвтоФормирования.КПП);
	РазделыОтчета.Титульный.Данные.КодИМНС = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ТаблВЗ = Новый ТаблицаЗначений;
	ТаблВЗ.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблВЗ.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблВЗ.Колонки.Добавить("ЗначениеАвто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблВЗ.Колонки.Добавить("КодПоказателяПоСтруктуре", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	МассивВариантовЗаполненияСтраницРаздел1 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел1.Добавить(ТаблВЗ.Скопировать());
	
	МассивВариантовЗаполненияСтраницРаздел2 = Новый Массив;
	ТаблВЗРаздел2 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020007004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020008004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020009004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020010003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020011003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел2.Добавить(ТаблВЗРаздел2);
	
	МассивВариантовЗаполненияСтраницРаздел3 = Новый Массив;
	ТаблВЗРаздел3 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030004003";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел3.Добавить(ТаблВЗРаздел3);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	
	СтруктураВариантыЗаполнения.Вставить("Раздел1", МассивВариантовЗаполненияСтраницРаздел1);
	СтруктураВариантыЗаполнения.Вставить("Раздел2", МассивВариантовЗаполненияСтраницРаздел2);
	СтруктураВариантыЗаполнения.Вставить("Раздел3", МассивВариантовЗаполненияСтраницРаздел3);
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2017Кв1(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИМНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ДанныеРеглОтчета.Вставить("КПП1", РазделыОтчета.Титульный.Данные.КПП1);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/01/2017");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СсылкаНаСохрРеглОтчет = Неопределено;
	ПараметрыАвтоФормирования.Свойство("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	Возврат ЗаписатьРеглОтчетЕНВДФормаОтчета2017Кв1(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетЕНВДФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет, ПараметрыАвтоФормирования)
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел1", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010001003",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ДанныеДопСтрок.Раздел1.Колонки.Добавить("П000010002003",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ДанныеДопСтрок.Раздел1.Добавить();
	
	ДанныеДопСтраниц = Новый Структура;
	ДанныеДопСтраниц.Вставить("Раздел2", Новый ТаблицаЗначений);
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АктивнаяСтраница",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("АвтоматическоеПредставление",
		Новый ОписаниеТипов("Булево"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("Данные",
		Новый ОписаниеТипов("Структура"));
	ДанныеДопСтраниц.Раздел2.Колонки.Добавить("ДанныеДопСтрок",
		Новый ОписаниеТипов("Структура"));
	ДопСтраницаРаздел2 = ДанныеДопСтраниц.Раздел2.Добавить();
	ДопСтраницаРаздел2.Представление = "Новая страница";
	ДопСтраницаРаздел2.АктивнаяСтраница = Ложь;
	ДопСтраницаРаздел2.АвтоматическоеПредставление = Истина;
	П0000200062 = Новый ТаблицаЗначений;
	П0000200062.Колонки.Добавить("П000020006201",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200062.Добавить();
	П0000200065 = Новый ТаблицаЗначений;
	П0000200065.Колонки.Добавить("П000020006501",
		Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	П0000200065.Добавить();
	ДопСтраницаРаздел2.ДанныеДопСтрок = Новый Структура("П0000200062, П0000200065", П0000200062, П0000200065);
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел1", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел1, "П00001000"));
	
	РазделыОтчета.Вставить("Раздел2", Новый Структура(
		"МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел2));
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если НЕ ПараметрыАвтоФормирования.Свойство("РезультатАвтоформирования") Тогда
		ПараметрыАвтоФормирования.Вставить("РезультатАвтоформирования", Новый Массив);
	КонецЕсли;
	
	Если НЕ ПараметрыАвтоФормирования.Свойство("КПП")
	 ИЛИ НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ПараметрыАвтоФормирования.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организация.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	Организация.РегистрацияВНалоговомОргане.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организация
		|ГДЕ
		|	Организация.Ссылка = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("КПП") Тогда
				ПараметрыАвтоФормирования.Вставить("КПП", Выборка.КПП);
			КонецЕсли;
			
			Если НЕ ПараметрыАвтоФормирования.Свойство("НалоговыйОрган") Тогда
				ПараметрыАвтоФормирования.Вставить("НалоговыйОрган", Выборка.КодНалоговогоОргана);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗаполнитьРеглОтчетЕНВДФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	РазделыОтчета.Титульный.Данные.КПП1    = СокрЛП(ПараметрыАвтоФормирования.КПП);
	РазделыОтчета.Титульный.Данные.КодИМНС = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ТаблВЗ = Новый ТаблицаЗначений;
	ТаблВЗ.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
	ТаблВЗ.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ТаблВЗ.Колонки.Добавить("ЗначениеАвто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблВЗ.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблВЗ.Колонки.Добавить("КодПоказателяПоСтруктуре", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	МассивВариантовЗаполненияСтраницРаздел1 = Новый Массив;
	МассивВариантовЗаполненияСтраницРаздел1.Добавить(ТаблВЗ.Скопировать());
	
	МассивВариантовЗаполненияСтраницРаздел2 = Новый Массив;
	ТаблВЗРаздел2 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020007004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020008004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020009004";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020010003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	НовСтр_ТаблВЗРаздел2 = ТаблВЗРаздел2.Добавить();
	НовСтр_ТаблВЗРаздел2.КодПоказателя = "П000020011003";
	НовСтр_ТаблВЗРаздел2.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел2.Добавить(ТаблВЗРаздел2);
	
	МассивВариантовЗаполненияСтраницРаздел3 = Новый Массив;
	ТаблВЗРаздел3 = ТаблВЗ.Скопировать();
	НовСтр_ТаблВЗРаздел3 = ТаблВЗРаздел3.Добавить();
	НовСтр_ТаблВЗРаздел3.КодПоказателя = "П000030004003";
	НовСтр_ТаблВЗРаздел3.ВариантЗаполнения = 4;
	МассивВариантовЗаполненияСтраницРаздел3.Добавить(ТаблВЗРаздел3);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	
	СтруктураВариантыЗаполнения.Вставить("Раздел1", МассивВариантовЗаполненияСтраницРаздел1);
	СтруктураВариантыЗаполнения.Вставить("Раздел2", МассивВариантовЗаполненияСтраницРаздел2);
	СтруктураВариантыЗаполнения.Вставить("Раздел3", МассивВариантовЗаполненияСтраницРаздел3);
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2016Кв1(ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИМНС", РазделыОтчета.Титульный.Данные.КодИМНС);
	ДанныеРеглОтчета.Вставить("КПП1", РазделыОтчета.Титульный.Данные.КПП1);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы", "01/01/2016");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	ДанныеРеглОтчета.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	СсылкаНаСохрРеглОтчет = Неопределено;
	ПараметрыАвтоФормирования.Свойство("СсылкаНаСохрРеглОтчет", СсылкаНаСохрРеглОтчет);
	
	Возврат ЗаписатьРеглОтчетЕНВДФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета,
		Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет);
	
КонецФункции

Функция ЗаполнитьРеглОтчетЕНВДФормаОтчета2018Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования)
	
	РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
	
	КПП   = СокрЛП(ПараметрыАвтоФормирования.КПП);
	КодНО = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтатусПроверки = Истина;
	
	Если НЕ ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан КПП.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. КПП указан некорректно.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан код налогового органа.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ (СтрДлина(КодНО) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО)) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. код налогового органа указан некорректно.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодНО);
	Если НЕ ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(
	Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		ОпределятьТрудНаемныхРабочих
		= НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
		
		ИПИспользуетТрудНаемныхРаботников
		= РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация, ДатаНачала, ДатаОкончания);
		
		ДопПараметры = Новый Структура(
		"ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаКонцаПериодаОтчета",
		ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура;
		Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
		Контейнер.Вставить("Раздел2",   РазделыОтчета.Раздел2.Данные);
		Контейнер.Вставить("Раздел3",   РазделыОтчета.Раздел3.Данные);
		Контейнер.Вставить("Раздел4_ДанныеДопСтрок", РазделыОтчета.Раздел4.ДанныеДопСтрок);
		
		Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
			
			ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
			
			РазделыОтчета.Раздел2.Данные = Контейнер.Раздел2;
			РазделыОтчета.Раздел4.ДанныеДопСтрок = Контейнер.Раздел4_ДанныеДопСтрок;
			
		Иначе
			
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
				ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		Если РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() = 0 Тогда
			РазделыОтчета.Раздел4.ДанныеДопСтрок.Добавить();
		КонецЕсли;
		
		РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2018Кв4(
		РазделыОтчета.Раздел2.Данные, ДатаНачала, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ТаблицаДопСтрокРаздела4 = РазделыОтчета.Раздел4.ДанныеДопСтрок;
		
		ДанныеРаздел4 = РазделыОтчета.Раздел4.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела4.Количество() Цикл
			ДопСтрокаРаздела4 = ТаблицаДопСтрокРаздела4[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела4.Колонки Цикл
				ДанныеРаздел4.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела4[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
		// Расчет данных в разделе 2.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв4(РазделыОтчета, "Раздел2", ДатаОкончания);
		
		// Расчет данных в разделе 4.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв4(РазделыОтчета, "Раздел4");
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		// Сбор данных в раздел 3 из раздела 2.
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		ЗначП000030001003 = 0;
		Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			Если Не ЗначениеЗаполнено(СтраницаРаздела2.Данные.П000020003000) Тогда
				Продолжить;
			КонецЕсли;
			ЗначП000030001003 = ЗначП000030001003 + Окр(СтраницаРаздела2.Данные.П000020011003);
		КонецЦикла;
		ДанныеРаздел3.П000030001003 = ЗначП000030001003;
		
		// Сбор данных в раздел 3 из раздела 4.
		ЗначП000030004003 = 0;
		Для каждого ДопСтрока Из РазделыОтчета.Раздел4.ДанныеДопСтрок Цикл
			ЗначП000030004003 = ЗначП000030004003 + Окр(ДопСтрока.П000040005003);
		КонецЦикла;
		ДанныеРаздел3.П000030004003 = ЗначП000030004003;
		
		// Расчет данных в разделе 3.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв4(РазделыОтчета, "Раздел3");
		
		// Формирование раздела 1.
		ИтоговаяТаблица = Новый ТаблицаЗначений;
		ИтоговаяТаблица.Колонки.Добавить("ОКТМО");
		ИтоговаяТаблица.Колонки.Добавить("Сумма");
		
		Для Каждого СтраницаРаздела2 из ТаблицаРаздела2 Цикл
			ОКТМО = СокрЛП(СтраницаРаздела2.Данные.П000020003000);
			Если НЕ ПустаяСтрока(ОКТМО) Тогда
				НовСтр = ИтоговаяТаблица.Добавить();
				НовСтр.ОКТМО = ОКТМО;
				НовСтр.Сумма = Окр(СтраницаРаздела2.Данные.П000020011003);
			КонецЕсли;
		КонецЦикла;
		ИтоговаяТаблица.Свернуть("ОКТМО", "Сумма");
		
		ТаблицаДопСтрокРаздела1 = РазделыОтчета.Раздел1.ДанныеДопСтрок;
		ТаблицаДопСтрокРаздела1.Очистить();
		
		Раздел3Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Раздел3Строка050 = Окр(ДанныеРаздел3.П000030005003);
		
		ОсталосьОтразить = Раздел3Строка050;
		
		Если ИтоговаяТаблица.Количество() > 0 Тогда
			
			Для Инд = 0 По ИтоговаяТаблица.Количество() - 1 Цикл
				ТекСтр = ИтоговаяТаблица[Инд];
				
				ЭтоПоследняяСтрока = (Инд = ИтоговаяТаблица.Количество() - 1);
				Если ЭтоПоследняяСтрока Тогда
					// Учет округлений в последней строке.
					СуммаНалога = ОсталосьОтразить;
				Иначе
					Если Раздел3Строка010 = 0 Тогда
						СуммаНалога = 0;
					Иначе
						СуммаНалога = Окр(ТекСтр.Сумма * (Раздел3Строка050 / Раздел3Строка010), 2);
					КонецЕсли;
				КонецЕсли;
				
				НоваяДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1.Добавить();
				
				НоваяДопСтрокаРаздела1.П000010001003 = ТекСтр.ОКТМО;
				НоваяДопСтрокаРаздела1.П000010002003 = СуммаНалога;
				
				ОсталосьОтразить = ОсталосьОтразить - Окр(СуммаНалога);
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаДопСтрокРаздела1.Добавить();
			
		КонецЕсли;
		
		ДанныеРаздел1 = РазделыОтчета.Раздел1.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела1.Количество() Цикл
			ДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела1.Колонки Цикл
				ДанныеРаздел1.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела1[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"".'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьРеглОтчетЕНВДФормаОтчета2018Кв3(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования)
	
	РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
	
	КПП   = СокрЛП(ПараметрыАвтоФормирования.КПП);
	КодНО = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтатусПроверки = Истина;
	
	Если НЕ ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан КПП.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. КПП указан некорректно.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан код налогового органа.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ (СтрДлина(КодНО) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО)) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. код налогового органа указан некорректно.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодНО);
	Если НЕ ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(
	Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		ОпределятьТрудНаемныхРабочих
		= НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
		
		ИПИспользуетТрудНаемныхРаботников
		= РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация, ДатаНачала, ДатаОкончания);
		
		ДопПараметры = Новый Структура(
		"ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаКонцаПериодаОтчета",
		ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура;
		Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
		Контейнер.Вставить("Раздел2",   РазделыОтчета.Раздел2.Данные);
		Контейнер.Вставить("Раздел3",   РазделыОтчета.Раздел3.Данные);
		Контейнер.Вставить("Раздел4_ДанныеДопСтрок", РазделыОтчета.Раздел4.ДанныеДопСтрок);
		
		Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
			
			ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
			
			РазделыОтчета.Раздел2.Данные = Контейнер.Раздел2;
			РазделыОтчета.Раздел4.ДанныеДопСтрок = Контейнер.Раздел4_ДанныеДопСтрок;
			
		Иначе
			
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
				ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		Если РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() = 0 Тогда
			РазделыОтчета.Раздел4.ДанныеДопСтрок.Добавить();
		КонецЕсли;
		
		РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2018Кв3(
		РазделыОтчета.Раздел2.Данные, ДатаНачала, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ТаблицаДопСтрокРаздела4 = РазделыОтчета.Раздел4.ДанныеДопСтрок;
		
		ДанныеРаздел4 = РазделыОтчета.Раздел4.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела4.Количество() Цикл
			ДопСтрокаРаздела4 = ТаблицаДопСтрокРаздела4[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела4.Колонки Цикл
				ДанныеРаздел4.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела4[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
		// Расчет данных в разделе 2.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв3(РазделыОтчета, "Раздел2", ДатаОкончания);
		
		// Расчет данных в разделе 4.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв3(РазделыОтчета, "Раздел4");
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		// Сбор данных в раздел 3 из раздела 2.
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		ЗначП000030001003 = 0;
		Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			Если Не ЗначениеЗаполнено(СтраницаРаздела2.Данные.П000020003000) Тогда
				Продолжить;
			КонецЕсли;
			ЗначП000030001003 = ЗначП000030001003 + Окр(СтраницаРаздела2.Данные.П000020011003);
		КонецЦикла;
		ДанныеРаздел3.П000030001003 = ЗначП000030001003;
		
		// Сбор данных в раздел 3 из раздела 4.
		ЗначП000030004003 = 0;
		Для каждого ДопСтрока Из РазделыОтчета.Раздел4.ДанныеДопСтрок Цикл
			ЗначП000030004003 = ЗначП000030004003 + Окр(ДопСтрока.П000040005003);
		КонецЦикла;
		ДанныеРаздел3.П000030004003 = ЗначП000030004003;
		
		// Расчет данных в разделе 3.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв3(РазделыОтчета, "Раздел3");
		
		// Формирование раздела 1.
		ИтоговаяТаблица = Новый ТаблицаЗначений;
		ИтоговаяТаблица.Колонки.Добавить("ОКТМО");
		ИтоговаяТаблица.Колонки.Добавить("Сумма");
		
		Для Каждого СтраницаРаздела2 из ТаблицаРаздела2 Цикл
			ОКТМО = СокрЛП(СтраницаРаздела2.Данные.П000020003000);
			Если НЕ ПустаяСтрока(ОКТМО) Тогда
				НовСтр = ИтоговаяТаблица.Добавить();
				НовСтр.ОКТМО = ОКТМО;
				НовСтр.Сумма = Окр(СтраницаРаздела2.Данные.П000020011003);
			КонецЕсли;
		КонецЦикла;
		ИтоговаяТаблица.Свернуть("ОКТМО", "Сумма");
		
		ТаблицаДопСтрокРаздела1 = РазделыОтчета.Раздел1.ДанныеДопСтрок;
		ТаблицаДопСтрокРаздела1.Очистить();
		
		Раздел3Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Раздел3Строка050 = Окр(ДанныеРаздел3.П000030005003);
		
		ОсталосьОтразить = Раздел3Строка050;
		
		Если ИтоговаяТаблица.Количество() > 0 Тогда
			
			Для Инд = 0 По ИтоговаяТаблица.Количество() - 1 Цикл
				ТекСтр = ИтоговаяТаблица[Инд];
				
				ЭтоПоследняяСтрока = (Инд = ИтоговаяТаблица.Количество() - 1);
				Если ЭтоПоследняяСтрока Тогда
					// Учет округлений в последней строке.
					СуммаНалога = ОсталосьОтразить;
				Иначе
					Если Раздел3Строка010 = 0 Тогда
						СуммаНалога = 0;
					Иначе
						СуммаНалога = Окр(ТекСтр.Сумма * (Раздел3Строка050 / Раздел3Строка010), 2);
					КонецЕсли;
				КонецЕсли;
				
				НоваяДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1.Добавить();
				
				НоваяДопСтрокаРаздела1.П000010001003 = ТекСтр.ОКТМО;
				НоваяДопСтрокаРаздела1.П000010002003 = СуммаНалога;
				
				ОсталосьОтразить = ОсталосьОтразить - Окр(СуммаНалога);
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаДопСтрокРаздела1.Добавить();
			
		КонецЕсли;
		
		ДанныеРаздел1 = РазделыОтчета.Раздел1.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела1.Количество() Цикл
			ДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела1.Колонки Цикл
				ДанныеРаздел1.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела1[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"".'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьРеглОтчетЕНВДФормаОтчета2018Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования)
	
	РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
	
	КПП   = СокрЛП(ПараметрыАвтоФормирования.КПП);
	КодНО = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтатусПроверки = Истина;
	
	Если НЕ ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан КПП.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. КПП указан некорректно.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан код налогового органа.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ (СтрДлина(КодНО) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО)) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. код налогового органа указан некорректно.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодНО);
	Если НЕ ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(
	Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		ОпределятьТрудНаемныхРабочих
		= НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
		
		ИПИспользуетТрудНаемныхРаботников
		= РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация, ДатаНачала, ДатаОкончания);
		
		ДопПараметры = Новый Структура(
		"ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаКонцаПериодаОтчета",
		ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура;
		Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
		Контейнер.Вставить("Раздел2",   РазделыОтчета.Раздел2.Данные);
		Контейнер.Вставить("Раздел3",   РазделыОтчета.Раздел3.Данные);
		Контейнер.Вставить("Раздел4_ДанныеДопСтрок", РазделыОтчета.Раздел4.ДанныеДопСтрок);
		
		Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
			
			ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
			
			РазделыОтчета.Раздел2.Данные = Контейнер.Раздел2;
			РазделыОтчета.Раздел4.ДанныеДопСтрок = Контейнер.Раздел4_ДанныеДопСтрок;
			
		Иначе
			
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
				ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		Если РазделыОтчета.Раздел4.ДанныеДопСтрок.Количество() = 0 Тогда
			РазделыОтчета.Раздел4.ДанныеДопСтрок.Добавить();
		КонецЕсли;
		
		РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2018Кв1(
		РазделыОтчета.Раздел2.Данные, ДатаНачала, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ТаблицаДопСтрокРаздела4 = РазделыОтчета.Раздел4.ДанныеДопСтрок;
		
		ДанныеРаздел4 = РазделыОтчета.Раздел4.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела4.Количество() Цикл
			ДопСтрокаРаздела4 = ТаблицаДопСтрокРаздела4[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела4.Колонки Цикл
				ДанныеРаздел4.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела4[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
		// Расчет данных в разделе 2.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв1(РазделыОтчета, "Раздел2", ДатаОкончания);
		
		// Расчет данных в разделе 4.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв1(РазделыОтчета, "Раздел4");
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		// Сбор данных в раздел 3 из раздела 2.
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		ЗначП000030001003 = 0;
		Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			Если Не ЗначениеЗаполнено(СтраницаРаздела2.Данные.П000020003000) Тогда
				Продолжить;
			КонецЕсли;
			ЗначП000030001003 = ЗначП000030001003 + Окр(СтраницаРаздела2.Данные.П000020011003);
		КонецЦикла;
		ДанныеРаздел3.П000030001003 = ЗначП000030001003;
		
		// Сбор данных в раздел 3 из пояснительной записки.
		ЗначП000030003503 = 0;
		Для каждого ДопСтрока Из РазделыОтчета.Раздел4.ДанныеДопСтрок Цикл
			ЗначП000030003503 = ЗначП000030003503 + Окр(ДопСтрока.П000040005003);
		КонецЦикла;
		ДанныеРаздел3.П000030003503 = ЗначП000030003503;
		
		// Расчет данных в разделе 3.
		РасчетРеглОтчетЕНВДФормаОтчета2018Кв1(РазделыОтчета, "Раздел3");
		
		// Формирование раздела 1.
		ИтоговаяТаблица = Новый ТаблицаЗначений;
		ИтоговаяТаблица.Колонки.Добавить("ОКТМО");
		ИтоговаяТаблица.Колонки.Добавить("Сумма");
		
		Для Каждого СтраницаРаздела2 из ТаблицаРаздела2 Цикл
			ОКТМО = СокрЛП(СтраницаРаздела2.Данные.П000020003000);
			Если НЕ ПустаяСтрока(ОКТМО) Тогда
				НовСтр = ИтоговаяТаблица.Добавить();
				НовСтр.ОКТМО = ОКТМО;
				НовСтр.Сумма = Окр(СтраницаРаздела2.Данные.П000020011003);
			КонецЕсли;
		КонецЦикла;
		ИтоговаяТаблица.Свернуть("ОКТМО", "Сумма");
		
		ТаблицаДопСтрокРаздела1 = РазделыОтчета.Раздел1.ДанныеДопСтрок;
		ТаблицаДопСтрокРаздела1.Очистить();
		
		Раздел3Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Раздел3Строка040 = Окр(ДанныеРаздел3.П000030004003);
		
		ОсталосьОтразить = Раздел3Строка040;
		
		Если ИтоговаяТаблица.Количество() > 0 Тогда
			
			Для Инд = 0 По ИтоговаяТаблица.Количество() - 1 Цикл
				ТекСтр = ИтоговаяТаблица[Инд];
				
				ЭтоПоследняяСтрока = (Инд = ИтоговаяТаблица.Количество() - 1);
				Если ЭтоПоследняяСтрока Тогда
					// Учет округлений в последней строке.
					СуммаНалога = ОсталосьОтразить;
				Иначе
					Если Раздел3Строка010 = 0 Тогда
						СуммаНалога = 0;
					Иначе
						СуммаНалога = Окр(ТекСтр.Сумма * (Раздел3Строка040 / Раздел3Строка010), 2);
					КонецЕсли;
				КонецЕсли;
				
				НоваяДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1.Добавить();
				
				НоваяДопСтрокаРаздела1.П000010001003 = ТекСтр.ОКТМО;
				НоваяДопСтрокаРаздела1.П000010002003 = СуммаНалога;
				
				ОсталосьОтразить = ОсталосьОтразить - Окр(СуммаНалога);
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаДопСтрокРаздела1.Добавить();
			
		КонецЕсли;
		
		ДанныеРаздел1 = РазделыОтчета.Раздел1.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела1.Количество() Цикл
			ДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела1.Колонки Цикл
				ДанныеРаздел1.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела1[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"".'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьРеглОтчетЕНВДФормаОтчета2017Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования)
	
	РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
	
	КПП   = СокрЛП(ПараметрыАвтоФормирования.КПП);
	КодНО = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтатусПроверки = Истина;
	
	Если НЕ ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан КПП.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. КПП указан некорректно.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан код налогового органа.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ (СтрДлина(КодНО) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО)) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. код налогового органа указан некорректно.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодНО);
	Если НЕ ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(
	Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		ОпределятьТрудНаемныхРабочих
		= НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
		
		ИПИспользуетТрудНаемныхРаботников
		= РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация, ДатаНачала, ДатаОкончания);
		
		ДопПараметры = Новый Структура(
		"ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаКонцаПериодаОтчета",
		ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура;
		Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
		Контейнер.Вставить("Раздел2",   РазделыОтчета.Раздел2.Данные);
		Контейнер.Вставить("Раздел3",   РазделыОтчета.Раздел3.Данные);
		
		Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
			
			ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
			
			РазделыОтчета.Раздел2.Данные = Контейнер.Раздел2;
			
		Иначе
			
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
				ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2017Кв1(
		РазделыОтчета.Раздел2.Данные, ДатаНачала, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		// Расчет данных в разделе 2.
		РасчетРеглОтчетЕНВДФормаОтчета2017Кв1(РазделыОтчета, "Раздел2", ДатаОкончания);
		
		// Сбор данных в раздел 3 из раздела 2.
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		ЗначП000030001003 = 0;
		Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			Если Не ЗначениеЗаполнено(СтраницаРаздела2.Данные.П000020003000) Тогда
				Продолжить;
			КонецЕсли;
			ЗначП000030001003 = ЗначП000030001003 + Окр(СтраницаРаздела2.Данные.П000020011003);
		КонецЦикла;
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		ДанныеРаздел3.П000030001003 = ЗначП000030001003;
		
		// Расчет данных в разделе 3.
		РасчетРеглОтчетЕНВДФормаОтчета2017Кв1(РазделыОтчета, "Раздел3");
		
		// Формирование раздела 1.
		ИтоговаяТаблица = Новый ТаблицаЗначений;
		ИтоговаяТаблица.Колонки.Добавить("ОКТМО");
		ИтоговаяТаблица.Колонки.Добавить("Сумма");
		
		Для Каждого СтраницаРаздела2 из ТаблицаРаздела2 Цикл
			ОКТМО = СокрЛП(СтраницаРаздела2.Данные.П000020003000);
			Если НЕ ПустаяСтрока(ОКТМО) Тогда
				НовСтр = ИтоговаяТаблица.Добавить();
				НовСтр.ОКТМО = ОКТМО;
				НовСтр.Сумма = Окр(СтраницаРаздела2.Данные.П000020011003);
			КонецЕсли;
		КонецЦикла;
		ИтоговаяТаблица.Свернуть("ОКТМО", "Сумма");
		
		ТаблицаДопСтрокРаздела1 = РазделыОтчета.Раздел1.ДанныеДопСтрок;
		ТаблицаДопСтрокРаздела1.Очистить();
		
		Раздел3Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Раздел3Строка040 = Окр(ДанныеРаздел3.П000030004003);
		
		ОсталосьОтразить = Раздел3Строка040;
		
		Если ИтоговаяТаблица.Количество() > 0 Тогда
			
			Для Инд = 0 По ИтоговаяТаблица.Количество() - 1 Цикл
				ТекСтр = ИтоговаяТаблица[Инд];
				
				ЭтоПоследняяСтрока = (Инд = ИтоговаяТаблица.Количество() - 1);
				Если ЭтоПоследняяСтрока Тогда
					// Учет округлений в последней строке.
					СуммаНалога = ОсталосьОтразить;
				Иначе
					Если Раздел3Строка010 = 0 Тогда
						СуммаНалога = 0;
					Иначе
						СуммаНалога = Окр(ТекСтр.Сумма * (Раздел3Строка040 / Раздел3Строка010), 2);
					КонецЕсли;
				КонецЕсли;
				
				НоваяДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1.Добавить();
				
				НоваяДопСтрокаРаздела1.П000010001003 = ТекСтр.ОКТМО;
				НоваяДопСтрокаРаздела1.П000010002003 = СуммаНалога;
				
				ОсталосьОтразить = ОсталосьОтразить - Окр(СуммаНалога);
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаДопСтрокРаздела1.Добавить();
			
		КонецЕсли;
		
		ДанныеРаздел1 = РазделыОтчета.Раздел1.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела1.Количество() Цикл
			ДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела1.Колонки Цикл
				ДанныеРаздел1.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела1[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"".'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьРеглОтчетЕНВДФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ПараметрыАвтоФормирования)
	
	РезультатАвтоформирования = ПараметрыАвтоФормирования.РезультатАвтоформирования;
	
	КПП   = СокрЛП(ПараметрыАвтоФормирования.КПП);
	КодНО = СокрЛП(ПараметрыАвтоФормирования.НалоговыйОрган);
	
	ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтатусПроверки = Истина;
	
	Если НЕ ИП Тогда
		
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан КПП.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрДлина(КПП) = 9 Тогда
			
			РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. КПП указан некорректно.'",
			СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодНО) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не указан код налогового органа.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ (СтрДлина(КодНО) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНО)) Тогда
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. код налогового органа указан некорректно.'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ СтатусПроверки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ПараметрыОтбораРегистрацийВНО = Новый Структура;
	
	ПараметрыОтбораРегистрацийВНО.Вставить("КодНО", КодНО);
	Если НЕ ИП Тогда
		ПараметрыОтбораРегистрацийВНО.Вставить("КПП", КПП);
	КонецЕсли;
	
	РегистрацииВНО = РегламентированнаяОтчетность.РегистрацииОрганизацииВНалоговомОргане(
	Организация, ПараметрыОтбораРегистрацийВНО);
	
	Если РегистрацииВНО.Количество() > 0 Тогда
		
		ОпределятьТрудНаемныхРабочих
		= НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
		
		ИПИспользуетТрудНаемныхРаботников
		= РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация, ДатаНачала, ДатаОкончания);
		
		ДопПараметры = Новый Структура(
		"ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников",
		ИП, ОпределятьТрудНаемныхРабочих, ИПИспользуетТрудНаемныхРаботников);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация",             Организация);
		ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачала);
		ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаОкончания);
		ПараметрыОтчета.Вставить("РегистрацииВНО",          РегистрацииВНО);
		
		Контейнер = Новый Структура;
		Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
		Контейнер.Вставить("Раздел2",   РазделыОтчета.Раздел2.Данные);
		Контейнер.Вставить("Раздел3",   РазделыОтчета.Раздел3.Данные);
		
		Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
			
			ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
			
			РазделыОтчета.Раздел2.Данные = Контейнер.Раздел2;
			
		Иначе
			
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
				ИсточникОтчета, ИмяФормыОтчета, ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2016Кв1(
		РазделыОтчета.Раздел2.Данные, ДатаНачала, ДатаОкончания);
		
		ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
		
		// Расчет данных в разделе 2.
		РасчетРеглОтчетЕНВДФормаОтчета2016Кв1(РазделыОтчета, "Раздел2", ДатаОкончания);
		
		// Сбор данных в раздел 3 из раздела 2.
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		ЗначП000030001003 = 0;
		Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			Если Не ЗначениеЗаполнено(СтраницаРаздела2.Данные.П000020003000) Тогда
				Продолжить;
			КонецЕсли;
			ЗначП000030001003 = ЗначП000030001003 + Окр(СтраницаРаздела2.Данные.П000020011003);
		КонецЦикла;
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		ДанныеРаздел3.П000030001003 = ЗначП000030001003;
		
		// Расчет данных в разделе 3.
		РасчетРеглОтчетЕНВДФормаОтчета2016Кв1(РазделыОтчета, "Раздел3");
		
		// Формирование раздела 1.
		ИтоговаяТаблица = Новый ТаблицаЗначений;
		ИтоговаяТаблица.Колонки.Добавить("ОКТМО");
		ИтоговаяТаблица.Колонки.Добавить("Сумма");
		
		Для Каждого СтраницаРаздела2 из ТаблицаРаздела2 Цикл
			ОКТМО = СокрЛП(СтраницаРаздела2.Данные.П000020003000);
			Если НЕ ПустаяСтрока(ОКТМО) Тогда
				НовСтр = ИтоговаяТаблица.Добавить();
				НовСтр.ОКТМО = ОКТМО;
				НовСтр.Сумма = Окр(СтраницаРаздела2.Данные.П000020011003);
			КонецЕсли;
		КонецЦикла;
		ИтоговаяТаблица.Свернуть("ОКТМО", "Сумма");
		
		ТаблицаДопСтрокРаздела1 = РазделыОтчета.Раздел1.ДанныеДопСтрок;
		ТаблицаДопСтрокРаздела1.Очистить();
		
		Раздел3Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Раздел3Строка040 = Окр(ДанныеРаздел3.П000030004003);
		
		ОсталосьОтразить = Раздел3Строка040;
		
		Если ИтоговаяТаблица.Количество() > 0 Тогда
			
			Для Инд = 0 По ИтоговаяТаблица.Количество() - 1 Цикл
				ТекСтр = ИтоговаяТаблица[Инд];
				
				ЭтоПоследняяСтрока = (Инд = ИтоговаяТаблица.Количество() - 1);
				Если ЭтоПоследняяСтрока Тогда
					// Учет округлений в последней строке.
					СуммаНалога = ОсталосьОтразить;
				Иначе
					Если Раздел3Строка010 = 0 Тогда
						СуммаНалога = 0;
					Иначе
						СуммаНалога = Окр(ТекСтр.Сумма * (Раздел3Строка040 / Раздел3Строка010), 2);
					КонецЕсли;
				КонецЕсли;
				
				НоваяДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1.Добавить();
				
				НоваяДопСтрокаРаздела1.П000010001003 = ТекСтр.ОКТМО;
				НоваяДопСтрокаРаздела1.П000010002003 = СуммаНалога;
				
				ОсталосьОтразить = ОсталосьОтразить - Окр(СуммаНалога);
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаДопСтрокРаздела1.Добавить();
			
		КонецЕсли;
		
		ДанныеРаздел1 = РазделыОтчета.Раздел1.Данные;
		Для Инд = 1 По ТаблицаДопСтрокРаздела1.Количество() Цикл
			ДопСтрокаРаздела1 = ТаблицаДопСтрокРаздела1[Инд - 1];
			Постфикс = "_" + Формат(Инд, "ЧГ=");
			Для каждого Колонка Из ТаблицаДопСтрокРаздела1.Колонки Цикл
				ДанныеРаздел1.Вставить(Колонка.Имя + Постфикс, ДопСтрокаРаздела1[Колонка.Имя]);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		РезультатАвтоформирования.Добавить(НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ru='Декларация по ЕНВД (Организация: %1, КПП: %2, код ИФНС: %3) не сформирована, т. к. не найдена соответствующая запись в справочнике ""Регистрации в налоговом органе"".'",
		СокрЛП(Организация.Наименование), СокрЛП(КПП), СокрЛП(КодНО))));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2018Кв4(ТаблицаРаздела2, ДатаНачала, ДатаОкончания)
	
	// Подготовка расчетного календаря.
	РасчетныйКалендарь = Новый Массив;
	
	ПервыйМесяцКвартала = Месяц(ДатаНачала);
	ДеньПериода = НачалоДня(ДатаНачала);
	КонечнаяДата = КонецДня(ДатаОкончания);
	
	Пока ДеньПериода <= КонечнаяДата Цикл
		
		ДанныеРасчетногоКалендаря = Новый Структура;
		
		ДанныеРасчетногоКалендаря.Вставить("Дата", ДеньПериода);
		ДанныеРасчетногоКалендаря.Вставить("МесяцКвартала", Месяц(ДеньПериода) - ПервыйМесяцКвартала + 1);
		ДанныеРасчетногоКалендаря.Вставить("Деятельность", 0);
		
		РасчетныйКалендарь.Добавить(ДанныеРасчетногоКалендаря);
		
		ДеньПериода = ДеньПериода + 86400; // следующий день
		
	КонецЦикла;
	
	// Расчет дней осуществления деятельности в многостраничном разделе 2.
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ИдМСЧ_Раздел2_1 = "П0000200062";
	ИдМСЧ_Раздел2_2 = "П0000200065";
	
	Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
		
		ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные;
		
		РассчПоказатели = Новый Соответствие();
		РассчПоказатели.Вставить(1, "П000020007003");
		РассчПоказатели.Вставить(2, "П000020008003");
		РассчПоказатели.Вставить(3, "П000020009003");
		
		ЕстьСобытиеВМесяце = Новый Соответствие;
		ЕстьСобытиеВМесяце.Вставить(1, Ложь);
		ЕстьСобытиеВМесяце.Вставить(2, Ложь);
		ЕстьСобытиеВМесяце.Вставить(3, Ложь);
		
		ДатыСобытий = Новый ТаблицаЗначений;
		ДатыСобытий.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
		ДатыСобытий.Колонки.Добавить("ВидСобытия", ОписаниеТиповЧисло); // 0 - постановка, 1 - снятие
		
		ДатыСобытий.Индексы.Добавить("ДатаСобытия, ВидСобытия");
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаДаты = ДатыСобытий.Добавить();
				СтрокаДаты.ДатаСобытия = ЗначениеДаты;
				СтрокаДаты.ВидСобытия  = 0;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаПроверки = ДатыСобытий.Добавить();
				СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
				СтрокаПроверки.ВидСобытия  = 1;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		ДатыСобытий.Сортировать("ДатаСобытия, ВидСобытия");
		
		Если ДатыСобытий.Количество() > 0 Тогда
			Если НачалоДня(ДатыСобытий[0].ДатаСобытия) <> НачалоДня(ДатаНачала) Тогда
				НачальноеСостяние = 1 - ДатыСобытий[0].ВидСобытия;
				НачальноеСобытие = ДатыСобытий.Вставить(0);
				НачальноеСобытие.ДатаСобытия = НачалоДня(ДатаНачала);
				НачальноеСобытие.ВидСобытия = НачальноеСостяние
			КонецЕсли;
			
			Для Инд = 0 По ДатыСобытий.Количество() - 1 Цикл
				Событие = ДатыСобытий[Инд];
				ВедениеДеятельности = 1 - Событие.ВидСобытия; // 0 - деятельнось не велась, 1 - деятельность велась
				ДатаИзменения = НачалоДня(Событие.ДатаСобытия);
				Для Каждого ДеньКалендаря Из РасчетныйКалендарь Цикл
					Если ДеньКалендаря.Дата >= ДатаИзменения Тогда
						ДеньКалендаря.Деятельность = ВедениеДеятельности;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасчетногоКалендаря = Новый ТаблицаЗначений;
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Дата", ОписаниеТиповДата);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("МесяцКвартала", ОписаниеТиповЧисло);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Деятельность", ОписаниеТиповЧисло);
		
		Для Каждого ЭлементМассива Из РасчетныйКалендарь Цикл
			НоваяСтрока = ТаблицаРасчетногоКалендаря.Добавить();
			НоваяСтрока.Дата = ЭлементМассива.Дата;
			НоваяСтрока.МесяцКвартала = ЭлементМассива.МесяцКвартала;
			НоваяСтрока.Деятельность = ЭлементМассива.Деятельность;
		КонецЦикла;
		
		Для Инд = 1 По 3 Цикл
			Если ЕстьСобытиеВМесяце[Инд] Тогда
				СтрокиМесяца = ТаблицаРасчетногоКалендаря.НайтиСтроки(Новый Структура("МесяцКвартала", Инд));
				КалендарьМесяца = ТаблицаРасчетногоКалендаря.Скопировать(СтрокиМесяца);
				КоличествоДнейДеятельности = КалендарьМесяца.Итог("Деятельность");
			Иначе
				КоличествоДнейДеятельности = 0;
			КонецЕсли;
			ДанныеСтраницыРаздела2.Вставить(РассчПоказатели[Инд], КоличествоДнейДеятельности);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2018Кв3(ТаблицаРаздела2, ДатаНачала, ДатаОкончания)
	
	// Подготовка расчетного календаря.
	РасчетныйКалендарь = Новый Массив;
	
	ПервыйМесяцКвартала = Месяц(ДатаНачала);
	ДеньПериода = НачалоДня(ДатаНачала);
	КонечнаяДата = КонецДня(ДатаОкончания);
	
	Пока ДеньПериода <= КонечнаяДата Цикл
		
		ДанныеРасчетногоКалендаря = Новый Структура;
		
		ДанныеРасчетногоКалендаря.Вставить("Дата", ДеньПериода);
		ДанныеРасчетногоКалендаря.Вставить("МесяцКвартала", Месяц(ДеньПериода) - ПервыйМесяцКвартала + 1);
		ДанныеРасчетногоКалендаря.Вставить("Деятельность", 0);
		
		РасчетныйКалендарь.Добавить(ДанныеРасчетногоКалендаря);
		
		ДеньПериода = ДеньПериода + 86400; // следующий день
		
	КонецЦикла;
	
	// Расчет дней осуществления деятельности в многостраничном разделе 2.
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ИдМСЧ_Раздел2_1 = "П0000200062";
	ИдМСЧ_Раздел2_2 = "П0000200065";
	
	Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
		
		ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные;
		
		РассчПоказатели = Новый Соответствие();
		РассчПоказатели.Вставить(1, "П000020007003");
		РассчПоказатели.Вставить(2, "П000020008003");
		РассчПоказатели.Вставить(3, "П000020009003");
		
		ЕстьСобытиеВМесяце = Новый Соответствие;
		ЕстьСобытиеВМесяце.Вставить(1, Ложь);
		ЕстьСобытиеВМесяце.Вставить(2, Ложь);
		ЕстьСобытиеВМесяце.Вставить(3, Ложь);
		
		ДатыСобытий = Новый ТаблицаЗначений;
		ДатыСобытий.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
		ДатыСобытий.Колонки.Добавить("ВидСобытия", ОписаниеТиповЧисло); // 0 - постановка, 1 - снятие
		
		ДатыСобытий.Индексы.Добавить("ДатаСобытия, ВидСобытия");
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаДаты = ДатыСобытий.Добавить();
				СтрокаДаты.ДатаСобытия = ЗначениеДаты;
				СтрокаДаты.ВидСобытия  = 0;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаПроверки = ДатыСобытий.Добавить();
				СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
				СтрокаПроверки.ВидСобытия  = 1;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		ДатыСобытий.Сортировать("ДатаСобытия, ВидСобытия");
		
		Если ДатыСобытий.Количество() > 0 Тогда
			Если НачалоДня(ДатыСобытий[0].ДатаСобытия) <> НачалоДня(ДатаНачала) Тогда
				НачальноеСостяние = 1 - ДатыСобытий[0].ВидСобытия;
				НачальноеСобытие = ДатыСобытий.Вставить(0);
				НачальноеСобытие.ДатаСобытия = НачалоДня(ДатаНачала);
				НачальноеСобытие.ВидСобытия = НачальноеСостяние
			КонецЕсли;
			
			Для Инд = 0 По ДатыСобытий.Количество() - 1 Цикл
				Событие = ДатыСобытий[Инд];
				ВедениеДеятельности = 1 - Событие.ВидСобытия; // 0 - деятельнось не велась, 1 - деятельность велась
				ДатаИзменения = НачалоДня(Событие.ДатаСобытия);
				Для Каждого ДеньКалендаря Из РасчетныйКалендарь Цикл
					Если ДеньКалендаря.Дата >= ДатаИзменения Тогда
						ДеньКалендаря.Деятельность = ВедениеДеятельности;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасчетногоКалендаря = Новый ТаблицаЗначений;
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Дата", ОписаниеТиповДата);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("МесяцКвартала", ОписаниеТиповЧисло);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Деятельность", ОписаниеТиповЧисло);
		
		Для Каждого ЭлементМассива Из РасчетныйКалендарь Цикл
			НоваяСтрока = ТаблицаРасчетногоКалендаря.Добавить();
			НоваяСтрока.Дата = ЭлементМассива.Дата;
			НоваяСтрока.МесяцКвартала = ЭлементМассива.МесяцКвартала;
			НоваяСтрока.Деятельность = ЭлементМассива.Деятельность;
		КонецЦикла;
		
		Для Инд = 1 По 3 Цикл
			Если ЕстьСобытиеВМесяце[Инд] Тогда
				СтрокиМесяца = ТаблицаРасчетногоКалендаря.НайтиСтроки(Новый Структура("МесяцКвартала", Инд));
				КалендарьМесяца = ТаблицаРасчетногоКалендаря.Скопировать(СтрокиМесяца);
				КоличествоДнейДеятельности = КалендарьМесяца.Итог("Деятельность");
			Иначе
				КоличествоДнейДеятельности = 0;
			КонецЕсли;
			ДанныеСтраницыРаздела2.Вставить(РассчПоказатели[Инд], КоличествоДнейДеятельности);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2018Кв1(ТаблицаРаздела2, ДатаНачала, ДатаОкончания)
	
	// Подготовка расчетного календаря.
	РасчетныйКалендарь = Новый Массив;
	
	ПервыйМесяцКвартала = Месяц(ДатаНачала);
	ДеньПериода = НачалоДня(ДатаНачала);
	КонечнаяДата = КонецДня(ДатаОкончания);
	
	Пока ДеньПериода <= КонечнаяДата Цикл
		
		ДанныеРасчетногоКалендаря = Новый Структура;
		
		ДанныеРасчетногоКалендаря.Вставить("Дата", ДеньПериода);
		ДанныеРасчетногоКалендаря.Вставить("МесяцКвартала", Месяц(ДеньПериода) - ПервыйМесяцКвартала + 1);
		ДанныеРасчетногоКалендаря.Вставить("Деятельность", 0);
		
		РасчетныйКалендарь.Добавить(ДанныеРасчетногоКалендаря);
		
		ДеньПериода = ДеньПериода + 86400; // следующий день
		
	КонецЦикла;
	
	// Расчет дней осуществления деятельности в многостраничном разделе 2.
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ИдМСЧ_Раздел2_1 = "П0000200062";
	ИдМСЧ_Раздел2_2 = "П0000200065";
	
	Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
		
		ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные;
		
		РассчПоказатели = Новый Соответствие();
		РассчПоказатели.Вставить(1, "П000020007003");
		РассчПоказатели.Вставить(2, "П000020008003");
		РассчПоказатели.Вставить(3, "П000020009003");
		
		ЕстьСобытиеВМесяце = Новый Соответствие;
		ЕстьСобытиеВМесяце.Вставить(1, Ложь);
		ЕстьСобытиеВМесяце.Вставить(2, Ложь);
		ЕстьСобытиеВМесяце.Вставить(3, Ложь);
		
		ДатыСобытий = Новый ТаблицаЗначений;
		ДатыСобытий.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
		ДатыСобытий.Колонки.Добавить("ВидСобытия", ОписаниеТиповЧисло); // 0 - постановка, 1 - снятие
		
		ДатыСобытий.Индексы.Добавить("ДатаСобытия, ВидСобытия");
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаДаты = ДатыСобытий.Добавить();
				СтрокаДаты.ДатаСобытия = ЗначениеДаты;
				СтрокаДаты.ВидСобытия  = 0;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаПроверки = ДатыСобытий.Добавить();
				СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
				СтрокаПроверки.ВидСобытия  = 1;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		ДатыСобытий.Сортировать("ДатаСобытия, ВидСобытия");
		
		Если ДатыСобытий.Количество() > 0 Тогда
			Если НачалоДня(ДатыСобытий[0].ДатаСобытия) <> НачалоДня(ДатаНачала) Тогда
				НачальноеСостяние = 1 - ДатыСобытий[0].ВидСобытия;
				НачальноеСобытие = ДатыСобытий.Вставить(0);
				НачальноеСобытие.ДатаСобытия = НачалоДня(ДатаНачала);
				НачальноеСобытие.ВидСобытия = НачальноеСостяние
			КонецЕсли;
			
			Для Инд = 0 По ДатыСобытий.Количество() - 1 Цикл
				Событие = ДатыСобытий[Инд];
				ВедениеДеятельности = 1 - Событие.ВидСобытия; // 0 - деятельнось не велась, 1 - деятельность велась
				ДатаИзменения = НачалоДня(Событие.ДатаСобытия);
				Для Каждого ДеньКалендаря Из РасчетныйКалендарь Цикл
					Если ДеньКалендаря.Дата >= ДатаИзменения Тогда
						ДеньКалендаря.Деятельность = ВедениеДеятельности;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасчетногоКалендаря = Новый ТаблицаЗначений;
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Дата", ОписаниеТиповДата);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("МесяцКвартала", ОписаниеТиповЧисло);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Деятельность", ОписаниеТиповЧисло);
		
		Для Каждого ЭлементМассива Из РасчетныйКалендарь Цикл
			НоваяСтрока = ТаблицаРасчетногоКалендаря.Добавить();
			НоваяСтрока.Дата = ЭлементМассива.Дата;
			НоваяСтрока.МесяцКвартала = ЭлементМассива.МесяцКвартала;
			НоваяСтрока.Деятельность = ЭлементМассива.Деятельность;
		КонецЦикла;
		
		Для Инд = 1 По 3 Цикл
			Если ЕстьСобытиеВМесяце[Инд] Тогда
				СтрокиМесяца = ТаблицаРасчетногоКалендаря.НайтиСтроки(Новый Структура("МесяцКвартала", Инд));
				КалендарьМесяца = ТаблицаРасчетногоКалендаря.Скопировать(СтрокиМесяца);
				КоличествоДнейДеятельности = КалендарьМесяца.Итог("Деятельность");
			Иначе
				КоличествоДнейДеятельности = 0;
			КонецЕсли;
			ДанныеСтраницыРаздела2.Вставить(РассчПоказатели[Инд], КоличествоДнейДеятельности);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2017Кв1(ТаблицаРаздела2, ДатаНачала, ДатаОкончания)
	
	// Подготовка расчетного календаря.
	РасчетныйКалендарь = Новый Массив;
	
	ПервыйМесяцКвартала = Месяц(ДатаНачала);
	ДеньПериода = НачалоДня(ДатаНачала);
	КонечнаяДата = КонецДня(ДатаОкончания);
	
	Пока ДеньПериода <= КонечнаяДата Цикл
		
		ДанныеРасчетногоКалендаря = Новый Структура;
		
		ДанныеРасчетногоКалендаря.Вставить("Дата", ДеньПериода);
		ДанныеРасчетногоКалендаря.Вставить("МесяцКвартала", Месяц(ДеньПериода) - ПервыйМесяцКвартала + 1);
		ДанныеРасчетногоКалендаря.Вставить("Деятельность", 0);
		
		РасчетныйКалендарь.Добавить(ДанныеРасчетногоКалендаря);
		
		ДеньПериода = ДеньПериода + 86400; // следующий день
		
	КонецЦикла;
	
	// Расчет дней осуществления деятельности в многостраничном разделе 2.
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ИдМСЧ_Раздел2_1 = "П0000200062";
	ИдМСЧ_Раздел2_2 = "П0000200065";
	
	Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
		
		ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные;
		
		РассчПоказатели = Новый Соответствие();
		РассчПоказатели.Вставить(1, "П000020007003");
		РассчПоказатели.Вставить(2, "П000020008003");
		РассчПоказатели.Вставить(3, "П000020009003");
		
		ЕстьСобытиеВМесяце = Новый Соответствие;
		ЕстьСобытиеВМесяце.Вставить(1, Ложь);
		ЕстьСобытиеВМесяце.Вставить(2, Ложь);
		ЕстьСобытиеВМесяце.Вставить(3, Ложь);
		
		ДатыСобытий = Новый ТаблицаЗначений;
		ДатыСобытий.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
		ДатыСобытий.Колонки.Добавить("ВидСобытия", ОписаниеТиповЧисло); // 0 - постановка, 1 - снятие
		
		ДатыСобытий.Индексы.Добавить("ДатаСобытия, ВидСобытия");
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаДаты = ДатыСобытий.Добавить();
				СтрокаДаты.ДатаСобытия = ЗначениеДаты;
				СтрокаДаты.ВидСобытия  = 0;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаПроверки = ДатыСобытий.Добавить();
				СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
				СтрокаПроверки.ВидСобытия  = 1;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		ДатыСобытий.Сортировать("ДатаСобытия, ВидСобытия");
		
		Если ДатыСобытий.Количество() > 0 Тогда
			Если НачалоДня(ДатыСобытий[0].ДатаСобытия) <> НачалоДня(ДатаНачала) Тогда
				НачальноеСостяние = 1 - ДатыСобытий[0].ВидСобытия;
				НачальноеСобытие = ДатыСобытий.Вставить(0);
				НачальноеСобытие.ДатаСобытия = НачалоДня(ДатаНачала);
				НачальноеСобытие.ВидСобытия = НачальноеСостяние
			КонецЕсли;
			
			Для Инд = 0 По ДатыСобытий.Количество() - 1 Цикл
				Событие = ДатыСобытий[Инд];
				ВедениеДеятельности = 1 - Событие.ВидСобытия; // 0 - деятельнось не велась, 1 - деятельность велась
				ДатаИзменения = НачалоДня(Событие.ДатаСобытия);
				Для Каждого ДеньКалендаря Из РасчетныйКалендарь Цикл
					Если ДеньКалендаря.Дата >= ДатаИзменения Тогда
						ДеньКалендаря.Деятельность = ВедениеДеятельности;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасчетногоКалендаря = Новый ТаблицаЗначений;
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Дата", ОписаниеТиповДата);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("МесяцКвартала", ОписаниеТиповЧисло);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Деятельность", ОписаниеТиповЧисло);
		
		Для Каждого ЭлементМассива Из РасчетныйКалендарь Цикл
			НоваяСтрока = ТаблицаРасчетногоКалендаря.Добавить();
			НоваяСтрока.Дата = ЭлементМассива.Дата;
			НоваяСтрока.МесяцКвартала = ЭлементМассива.МесяцКвартала;
			НоваяСтрока.Деятельность = ЭлементМассива.Деятельность;
		КонецЦикла;
		
		Для Инд = 1 По 3 Цикл
			Если ЕстьСобытиеВМесяце[Инд] Тогда
				СтрокиМесяца = ТаблицаРасчетногоКалендаря.НайтиСтроки(Новый Структура("МесяцКвартала", Инд));
				КалендарьМесяца = ТаблицаРасчетногоКалендаря.Скопировать(СтрокиМесяца);
				КоличествоДнейДеятельности = КалендарьМесяца.Итог("Деятельность");
			Иначе
				КоличествоДнейДеятельности = 0;
			КонецЕсли;
			ДанныеСтраницыРаздела2.Вставить(РассчПоказатели[Инд], КоличествоДнейДеятельности);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДниОсуществленияДеятельностиЕНВДФормаОтчета2016Кв1(ТаблицаРаздела2, ДатаНачала, ДатаОкончания)
	
	// Подготовка расчетного календаря.
	РасчетныйКалендарь = Новый Массив;
	
	ПервыйМесяцКвартала = Месяц(ДатаНачала);
	ДеньПериода = НачалоДня(ДатаНачала);
	КонечнаяДата = КонецДня(ДатаОкончания);
	
	Пока ДеньПериода <= КонечнаяДата Цикл
		
		ДанныеРасчетногоКалендаря = Новый Структура;
		
		ДанныеРасчетногоКалендаря.Вставить("Дата", ДеньПериода);
		ДанныеРасчетногоКалендаря.Вставить("МесяцКвартала", Месяц(ДеньПериода) - ПервыйМесяцКвартала + 1);
		ДанныеРасчетногоКалендаря.Вставить("Деятельность", 0);
		
		РасчетныйКалендарь.Добавить(ДанныеРасчетногоКалендаря);
		
		ДеньПериода = ДеньПериода + 86400; // следующий день
		
	КонецЦикла;
	
	// Расчет дней осуществления деятельности в многостраничном разделе 2.
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ИдМСЧ_Раздел2_1 = "П0000200062";
	ИдМСЧ_Раздел2_2 = "П0000200065";
	
	Для каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
		
		ДанныеСтраницыРаздела2 = СтраницаРаздела2.Данные;
		
		РассчПоказатели = Новый Соответствие();
		РассчПоказатели.Вставить(1, "П000020007003");
		РассчПоказатели.Вставить(2, "П000020008003");
		РассчПоказатели.Вставить(3, "П000020009003");
		
		ЕстьСобытиеВМесяце = Новый Соответствие;
		ЕстьСобытиеВМесяце.Вставить(1, Ложь);
		ЕстьСобытиеВМесяце.Вставить(2, Ложь);
		ЕстьСобытиеВМесяце.Вставить(3, Ложь);
		
		ДатыСобытий = Новый ТаблицаЗначений;
		ДатыСобытий.Колонки.Добавить("ДатаСобытия", ОписаниеТиповДата);
		ДатыСобытий.Колонки.Добавить("ВидСобытия", ОписаниеТиповЧисло); // 0 - постановка, 1 - снятие
		
		ДатыСобытий.Индексы.Добавить("ДатаСобытия, ВидСобытия");
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_1 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаДаты = ДатыСобытий.Добавить();
				СтрокаДаты.ДатаСобытия = ЗначениеДаты;
				СтрокаДаты.ВидСобытия  = 0;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		НомСтр = 1;
		Пока ДанныеСтраницыРаздела2.Свойство(ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")) Цикл
			ЗначениеДаты = ДанныеСтраницыРаздела2[ИдМСЧ_Раздел2_2 + "01_" + Формат(НомСтр, "ЧГ=")];
			Если ЗначениеЗаполнено(ЗначениеДаты)
				И (НачалоДня(ДатаНачала) <= ЗначениеДаты
				И ЗначениеДаты <= КонецДня(ДатаОкончания)) Тогда
				СтрокаПроверки = ДатыСобытий.Добавить();
				СтрокаПроверки.ДатаСобытия = ЗначениеДаты;
				СтрокаПроверки.ВидСобытия  = 1;
				МесяцКварталаСобытия = Месяц(ЗначениеДаты) - ПервыйМесяцКвартала + 1;
				ЕстьСобытиеВМесяце.Вставить(МесяцКварталаСобытия, Истина);
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		ДатыСобытий.Сортировать("ДатаСобытия, ВидСобытия");
		
		Если ДатыСобытий.Количество() > 0 Тогда
			Если НачалоДня(ДатыСобытий[0].ДатаСобытия) <> НачалоДня(ДатаНачала) Тогда
				НачальноеСостяние = 1 - ДатыСобытий[0].ВидСобытия;
				НачальноеСобытие = ДатыСобытий.Вставить(0);
				НачальноеСобытие.ДатаСобытия = НачалоДня(ДатаНачала);
				НачальноеСобытие.ВидСобытия = НачальноеСостяние
			КонецЕсли;
			
			Для Инд = 0 По ДатыСобытий.Количество() - 1 Цикл
				Событие = ДатыСобытий[Инд];
				ВедениеДеятельности = 1 - Событие.ВидСобытия; // 0 - деятельнось не велась, 1 - деятельность велась
				ДатаИзменения = НачалоДня(Событие.ДатаСобытия);
				Для Каждого ДеньКалендаря Из РасчетныйКалендарь Цикл
					Если ДеньКалендаря.Дата >= ДатаИзменения Тогда
						ДеньКалендаря.Деятельность = ВедениеДеятельности;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасчетногоКалендаря = Новый ТаблицаЗначений;
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Дата", ОписаниеТиповДата);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("МесяцКвартала", ОписаниеТиповЧисло);
		ТаблицаРасчетногоКалендаря.Колонки.Добавить("Деятельность", ОписаниеТиповЧисло);
		
		Для Каждого ЭлементМассива Из РасчетныйКалендарь Цикл
			НоваяСтрока = ТаблицаРасчетногоКалендаря.Добавить();
			НоваяСтрока.Дата = ЭлементМассива.Дата;
			НоваяСтрока.МесяцКвартала = ЭлементМассива.МесяцКвартала;
			НоваяСтрока.Деятельность = ЭлементМассива.Деятельность;
		КонецЦикла;
		
		Для Инд = 1 По 3 Цикл
			Если ЕстьСобытиеВМесяце[Инд] Тогда
				СтрокиМесяца = ТаблицаРасчетногоКалендаря.НайтиСтроки(Новый Структура("МесяцКвартала", Инд));
				КалендарьМесяца = ТаблицаРасчетногоКалендаря.Скопировать(СтрокиМесяца);
				КоличествоДнейДеятельности = КалендарьМесяца.Итог("Деятельность");
			Иначе
				КоличествоДнейДеятельности = 0;
			КонецЕсли;
			ДанныеСтраницыРаздела2.Вставить(РассчПоказатели[Инд], КоличествоДнейДеятельности);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2018Кв4(НаимРаздела, ТабличныйДокумент, РазделыОтчета, ДопПараметры)
	
	// Многострочный раздел.
	Если НаимРаздела = "Раздел1"
		ИЛИ НаимРаздела = "Раздел4" Тогда
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Многостраничный раздел, имеющий две многострочные части.
	ИначеЕсли НаимРаздела = "Раздел2" Тогда
		
		Если Год(ДопПараметры["ДатаКонцаПериодаОтчета"]) >= 2020 Тогда
			ЗначениеК1 = 2.005;
		ИначеЕсли Год(ДопПараметры["ДатаКонцаПериодаОтчета"]) >= 2019 Тогда
			ЗначениеК1 = 1.915;
		Иначе
			ЗначениеК1 = 1.868;
		КонецЕсли;
		
		ТабличныйДокумент.Области.П000020005003.Значение = ЗначениеК1;
		ТабличныйДокумент.Области.П000020006003.Значение = 1;
		
		ТабличныйДокумент.Области.П000020006101.Значение = "";
		ТабличныйДокумент.Области.П000020006401.Значение = "";
		ТабличныйДокумент.Области.П000020006102.Значение = "V";
		ТабличныйДокумент.Области.П000020006402.Значение = "V";
		
		ТабличныйДокумент.Области.П000020007003.Значение = 0;
		ТабличныйДокумент.Области.П000020008003.Значение = 0;
		ТабличныйДокумент.Области.П000020009003.Значение = 0;
		
		ТабличныйДокумент.Области.П000020010503.Значение = 15;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СобратьДанные(ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		Если НаимРаздела = "Титульный" Тогда
			
			Если ДопПараметры.ИП Тогда
				ТабличныйДокумент.Области.ПоМесту.Значение = "120";
			Иначе
				ТабличныйДокумент.Области.ПоМесту.Значение = "214";
			КонецЕсли;
			
		ИначеЕсли НаимРаздела = "Раздел3" Тогда
			
			Если ДопПараметры.ОпределятьТрудНаемныхРабочих И ДопПараметры.ИП
				И НЕ ДопПараметры.ИПИспользуетТрудНаемныхРаботников Тогда
				ТабличныйДокумент.Области.П000030000503.Значение = "2";
			Иначе
				ТабличныйДокумент.Области.П000030000503.Значение = "1";
			КонецЕсли;
			
		КонецЕсли;
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2018Кв3(НаимРаздела, ТабличныйДокумент, РазделыОтчета, ДопПараметры)
	
	// Многострочный раздел.
	Если НаимРаздела = "Раздел1"
		ИЛИ НаимРаздела = "Раздел4" Тогда
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Многостраничный раздел, имеющий две многострочные части.
	ИначеЕсли НаимРаздела = "Раздел2" Тогда
		
		ЗначениеК1 = 1.868;
		
		ТабличныйДокумент.Области.П000020005003.Значение = ЗначениеК1;
		ТабличныйДокумент.Области.П000020006003.Значение = 1;
		
		ТабличныйДокумент.Области.П000020006101.Значение = "";
		ТабличныйДокумент.Области.П000020006401.Значение = "";
		ТабличныйДокумент.Области.П000020006102.Значение = "V";
		ТабличныйДокумент.Области.П000020006402.Значение = "V";
		
		ТабличныйДокумент.Области.П000020007003.Значение = 0;
		ТабличныйДокумент.Области.П000020008003.Значение = 0;
		ТабличныйДокумент.Области.П000020009003.Значение = 0;
		
		ТабличныйДокумент.Области.П000020010503.Значение = 15;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СобратьДанные(ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		Если НаимРаздела = "Титульный" Тогда
			
			Если ДопПараметры.ИП Тогда
				ТабличныйДокумент.Области.ПоМесту.Значение = "120";
			Иначе
				ТабличныйДокумент.Области.ПоМесту.Значение = "214";
			КонецЕсли;
			
		ИначеЕсли НаимРаздела = "Раздел3" Тогда
			
			Если ДопПараметры.ОпределятьТрудНаемныхРабочих И ДопПараметры.ИП
				И НЕ ДопПараметры.ИПИспользуетТрудНаемныхРаботников Тогда
				ТабличныйДокумент.Области.П000030000503.Значение = "2";
			Иначе
				ТабличныйДокумент.Области.П000030000503.Значение = "1";
			КонецЕсли;
			
		КонецЕсли;
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2018Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета, ДопПараметры)
	
	// Многострочный раздел.
	Если НаимРаздела = "Раздел1"
		ИЛИ НаимРаздела = "Раздел4" Тогда
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Многостраничный раздел, имеющий две многострочные части.
	ИначеЕсли НаимРаздела = "Раздел2" Тогда
		
		ЗначениеК1 = 1.868;
		
		ТабличныйДокумент.Области.П000020005003.Значение = ЗначениеК1;
		ТабличныйДокумент.Области.П000020006003.Значение = 1;
		
		ТабличныйДокумент.Области.П000020006101.Значение = "";
		ТабличныйДокумент.Области.П000020006401.Значение = "";
		ТабличныйДокумент.Области.П000020006102.Значение = "V";
		ТабличныйДокумент.Области.П000020006402.Значение = "V";
		
		ТабличныйДокумент.Области.П000020007003.Значение = 0;
		ТабличныйДокумент.Области.П000020008003.Значение = 0;
		ТабличныйДокумент.Области.П000020009003.Значение = 0;
		
		ТабличныйДокумент.Области.П000020010503.Значение = 15;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СобратьДанные(ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		Если НаимРаздела = "Титульный" Тогда
			
			Если ДопПараметры.ИП Тогда
				ТабличныйДокумент.Области.ПоМесту.Значение = "120";
			Иначе
				ТабличныйДокумент.Области.ПоМесту.Значение = "214";
			КонецЕсли;
			
		ИначеЕсли НаимРаздела = "Раздел3" Тогда
			
			Если ДопПараметры.ОпределятьТрудНаемныхРабочих И ДопПараметры.ИП
				И НЕ ДопПараметры.ИПИспользуетТрудНаемныхРаботников Тогда
				ТабличныйДокумент.Области.П000030000503.Значение = "2";
			Иначе
				ТабличныйДокумент.Области.П000030000503.Значение = "1";
			КонецЕсли;
			
		КонецЕсли;
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2017Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета, ДопПараметры)
	
	// Многострочный раздел.
	Если НаимРаздела = "Раздел1" Тогда
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Многостраничный раздел, имеющий две многострочные части.
	ИначеЕсли НаимРаздела = "Раздел2" Тогда
		
		ЗначениеК1 = ?(Год(ДопПараметры["ДатаКонцаПериодаОтчета"]) >= 2018, 1.868, 1.798);
		
		ТабличныйДокумент.Области.П000020005003.Значение = ЗначениеК1;
		ТабличныйДокумент.Области.П000020006003.Значение = 1;
		
		ТабличныйДокумент.Области.П000020006101.Значение = "";
		ТабличныйДокумент.Области.П000020006401.Значение = "";
		ТабличныйДокумент.Области.П000020006102.Значение = "V";
		ТабличныйДокумент.Области.П000020006402.Значение = "V";
		
		ТабличныйДокумент.Области.П000020007003.Значение = 0;
		ТабличныйДокумент.Области.П000020008003.Значение = 0;
		ТабличныйДокумент.Области.П000020009003.Значение = 0;
		
		ТабличныйДокумент.Области.П000020010503.Значение = 15;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СобратьДанные(ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		Если НаимРаздела = "Титульный" Тогда
			
			Если ДопПараметры.ИП Тогда
				ТабличныйДокумент.Области.ПоМесту.Значение = "120";
			Иначе
				ТабличныйДокумент.Области.ПоМесту.Значение = "214";
			КонецЕсли;
			
		ИначеЕсли НаимРаздела = "Раздел3" Тогда
			
			Если ДопПараметры.ОпределятьТрудНаемныхРабочих И ДопПараметры.ИП
				И НЕ ДопПараметры.ИПИспользуетТрудНаемныхРаботников Тогда
				ТабличныйДокумент.Области.П000030000503.Значение = "2";
			Иначе
				ТабличныйДокумент.Области.П000030000503.Значение = "1";
			КонецЕсли;
			
		КонецЕсли;
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2016Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета, ДопПараметры)
	
	// Многострочный раздел.
	Если НаимРаздела = "Раздел1" Тогда
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	// Многостраничный раздел, имеющий две многострочные части.
	ИначеЕсли НаимРаздела = "Раздел2" Тогда
		
		ТабличныйДокумент.Области.П000020005003.Значение = 1.798;
		ТабличныйДокумент.Области.П000020006003.Значение = 1;
		
		ТабличныйДокумент.Области.П000020006101.Значение = "";
		ТабличныйДокумент.Области.П000020006401.Значение = "";
		ТабличныйДокумент.Области.П000020006102.Значение = "V";
		ТабличныйДокумент.Области.П000020006402.Значение = "V";
		
		ТабличныйДокумент.Области.П000020007003.Значение = 0;
		ТабличныйДокумент.Области.П000020008003.Значение = 0;
		ТабличныйДокумент.Области.П000020009003.Значение = 0;
		
		ТабличныйДокумент.Области.П000020010503.Значение = 15;
		
		РазделыОтчета[НаимРаздела].Данные[0].Данные = СобратьДанные(ТабличныйДокумент);
		
	// Обычные разделы.
	Иначе
		
		Если НаимРаздела = "Титульный" Тогда
			
			Если ДопПараметры.ИП Тогда
				ТабличныйДокумент.Области.ПоМесту.Значение = "120";
			Иначе
				ТабличныйДокумент.Области.ПоМесту.Значение = "214";
			КонецЕсли;
			
		ИначеЕсли НаимРаздела = "Раздел3" Тогда
			
			Если ДопПараметры.ОпределятьТрудНаемныхРабочих И ДопПараметры.ИП
				И НЕ ДопПараметры.ИПИспользуетТрудНаемныхРаботников Тогда
				ТабличныйДокумент.Области.П000030000503.Значение = "2";
			Иначе
				ТабличныйДокумент.Области.П000030000503.Значение = "1";
			КонецЕсли;
			
		КонецЕсли;
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2018Кв4(ДеревоСтраницОтчета, Организация)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел4";
	СтрокаУровня1.Представление      = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = ?(ЭтоИП, 1, 0);
	СтрокаУровня1.ПоказатьСтраницу   = ?(ЭтоИП, 1, 0);
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2018Кв3(ДеревоСтраницОтчета, Организация)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел4";
	СтрокаУровня1.Представление      = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = ?(ЭтоИП, 1, 0);
	СтрокаУровня1.ПоказатьСтраницу   = ?(ЭтоИП, 1, 0);
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2018Кв1(ДеревоСтраницОтчета, Организация)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел4";
	СтрокаУровня1.Представление      = "Пояснительная записка";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = ?(ЭтоИП, 1, 0);
	СтрокаУровня1.ПоказатьСтраницу   = ?(ЭтоИП, 1, 0);
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2017Кв1(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетЕНВДФормаОтчета2016Кв1(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

Функция ЗаписатьРеглОтчетЕНВДФормаОтчета2018Кв4(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет = Неопределено)
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "Декларация по ЕНВД";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИМНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП1;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	МесяцОкончания = Месяц(ДатаОкончания);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = 21;
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = 22;
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = 23;
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = 24;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(Год(ДатаОкончания), "ЧГ=");
	
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2018Кв4(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", ДанныеРеглОтчета.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетЕНВДФормаОтчета2018Кв3(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет = Неопределено)
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "Декларация по ЕНВД";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИМНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП1;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	МесяцОкончания = Месяц(ДатаОкончания);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = 21;
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = 22;
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = 23;
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = 24;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(Год(ДатаОкончания), "ЧГ=");
	
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2018Кв3(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", ДанныеРеглОтчета.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетЕНВДФормаОтчета2018Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет = Неопределено)
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "Декларация по ЕНВД";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИМНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП1;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	МесяцОкончания = Месяц(ДатаОкончания);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = 21;
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = 22;
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = 23;
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = 24;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(Год(ДатаОкончания), "ЧГ=");
	
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2018Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", ДанныеРеглОтчета.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетЕНВДФормаОтчета2017Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет = Неопределено)
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "Декларация по ЕНВД";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИМНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП1;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	МесяцОкончания = Месяц(ДатаОкончания);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = 21;
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = 22;
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = 23;
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = 24;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(Год(ДатаОкончания), "ЧГ=");
	
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2017Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", ДанныеРеглОтчета.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетЕНВДФормаОтчета2016Кв1(ИсточникОтчета, ИмяФормыОтчета, Организация, ДатаНачала, ДатаОкончания, РазделыОтчета, ДанныеРеглОтчета, СсылкаНаСохрРеглОтчет = Неопределено)
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	Если ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		
		ДокументРегламентированныйОтчет = СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "Декларация по ЕНВД";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИМНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП1;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	МесяцОкончания = Месяц(ДатаОкончания);
	
	КодОтчетногоПериода = 0;
	Если МесяцОкончания = 3 Тогда
		КодОтчетногоПериода = 21;
	ИначеЕсли МесяцОкончания = 6 Тогда
		КодОтчетногоПериода = 22;
	ИначеЕсли МесяцОкончания = 9 Тогда
		КодОтчетногоПериода = 23;
	ИначеЕсли МесяцОкончания = 12 Тогда
		КодОтчетногоПериода = 24;
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.Период = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	РазделыОтчета.Титульный.Данные.ОтчетГод = Формат(Год(ДатаОкончания), "ЧГ=");
	
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2016Кв1(Организация, РазделыОтчета, ДанныеРеглОтчета.ДатаПодписи, ДатаОкончания);
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если ТипЗнч(Раздел.Значение.Данные) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеМногостраничныхРазделов.Вставить(Раздел.Ключ, Раздел.Значение.Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", ДанныеРеглОтчета.ВерсияФормы);
	
	СписокСохранения.Вставить("ФлПодсчетСтраниц", ДанныеРеглОтчета.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", ДанныеРеглОтчета.ФлОтклВыборЗначений);
	
	СписокСохранения.Вставить("Автозаполнение", ДанныеРеглОтчета.Автозаполнение);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", ДанныеРеглОтчета.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2018Кв4(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ТитульныйДанные = РазделыОтчета.Титульный.Данные;
	
	СведенияОбОрганизации
	= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	Организация, ДатаПодписи, "ИННЮЛ, НаимЮЛПол, ТелОрганизации, ФИО");
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ТитульныйДанные.Вставить("НаимОрг",        НаименованиеОрганизации);
	ТитульныйДанные.Вставить("ИНН1",           СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ТитульныйДанные.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(ТитульныйДанные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	
	ПереопределяемыеИменаПоказателей
	= Новый Структура("ИмяПоказателяКодНО,ИмяПоказателяКПП", "КодИМНС", "КПП1");
	
	ЗаполнитьСведенияОПодписантах(
	Организация, РазделыОтчета, ДатаПодписи, ПереопределяемыеИменаПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2018Кв3(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ТитульныйДанные = РазделыОтчета.Титульный.Данные;
	
	СведенияОбОрганизации
	= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	Организация, ДатаПодписи, "ИННЮЛ, НаимЮЛПол, ТелОрганизации, ФИО");
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ТитульныйДанные.Вставить("НаимОрг",        НаименованиеОрганизации);
	ТитульныйДанные.Вставить("ИНН1",           СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ТитульныйДанные.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(ТитульныйДанные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	
	ПереопределяемыеИменаПоказателей
	= Новый Структура("ИмяПоказателяКодНО,ИмяПоказателяКПП", "КодИМНС", "КПП1");
	
	ЗаполнитьСведенияОПодписантах(
	Организация, РазделыОтчета, ДатаПодписи, ПереопределяемыеИменаПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2018Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ТитульныйДанные = РазделыОтчета.Титульный.Данные;
	
	СведенияОбОрганизации
	= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	Организация, ДатаПодписи, "ИННЮЛ, НаимЮЛПол, ТелОрганизации, ФИО");
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ТитульныйДанные.Вставить("НаимОрг",        НаименованиеОрганизации);
	ТитульныйДанные.Вставить("ИНН1",           СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ТитульныйДанные.Вставить("ОКВЭД",          "");
	ТитульныйДанные.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(ТитульныйДанные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТитульныйДанные.ОКВЭД);
	
	ПереопределяемыеИменаПоказателей
	= Новый Структура("ИмяПоказателяКодНО,ИмяПоказателяКПП", "КодИМНС", "КПП1");
	
	ЗаполнитьСведенияОПодписантах(
	Организация, РазделыОтчета, ДатаПодписи, ПереопределяемыеИменаПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2017Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ТитульныйДанные = РазделыОтчета.Титульный.Данные;
	
	СведенияОбОрганизации
	= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	Организация, ДатаПодписи, "ИННЮЛ, НаимЮЛПол, ТелОрганизации, ФИО");
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ТитульныйДанные.Вставить("НаимОрг",        НаименованиеОрганизации);
	ТитульныйДанные.Вставить("ИНН1",           СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ТитульныйДанные.Вставить("ОКВЭД",          "");
	ТитульныйДанные.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(ТитульныйДанные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТитульныйДанные.ОКВЭД);
	
	ПереопределяемыеИменаПоказателей
	= Новый Структура("ИмяПоказателяКодНО,ИмяПоказателяКПП", "КодИМНС", "КПП1");
	
	ЗаполнитьСведенияОПодписантах(
	Организация, РазделыОтчета, ДатаПодписи, ПереопределяемыеИменаПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетЕНВДФормаОтчета2016Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ТитульныйДанные = РазделыОтчета.Титульный.Данные;
	
	СведенияОбОрганизации
	= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	Организация, ДатаПодписи, "ИННЮЛ, НаимЮЛПол, ТелОрганизации, ФИО");
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ТитульныйДанные.Вставить("НаимОрг",        НаименованиеОрганизации);
	ТитульныйДанные.Вставить("ИНН1",           СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ТитульныйДанные.Вставить("ОКВЭД",          "");
	ТитульныйДанные.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(ТитульныйДанные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТитульныйДанные.ОКВЭД);
	
	ПереопределяемыеИменаПоказателей
	= Новый Структура("ИмяПоказателяКодНО,ИмяПоказателяКПП", "КодИМНС", "КПП1");
	
	ЗаполнитьСведенияОПодписантах(
	Организация, РазделыОтчета, ДатаПодписи, ПереопределяемыеИменаПоказателей);
	
КонецПроцедуры

Процедура РасчетРеглОтчетЕНВДФормаОтчета2018Кв4(РазделыОтчета, ИмяРаздела = "", ДатаОкончания = Неопределено)
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		КоличествоДней = Новый Структура;
		КоличествоДней.Вставить("ПервыйМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -2))));
		КоличествоДней.Вставить("ВторойМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -1))));
		КоличествоДней.Вставить("ТретийМесяц", День(КонецМесяца(ДатаОкончания)));
		
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		
		Для Каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			
			Строка040 = Окр(СтраницаРаздела2.Данные.П000020004003);
			
			Строка050 = СтраницаРаздела2.Данные.П000020005003;
			Строка060 = СтраницаРаздела2.Данные.П000020006003;
			
			Строка070Графа2 = СтраницаРаздела2.Данные.П000020007002;
			Строка080Графа2 = СтраницаРаздела2.Данные.П000020008002;
			Строка090Графа2 = СтраницаРаздела2.Данные.П000020009002;
			
			Строка070Графа3 = СтраницаРаздела2.Данные.П000020007003;
			Строка080Графа3 = СтраницаРаздела2.Данные.П000020008003;
			Строка090Графа3 = СтраницаРаздела2.Данные.П000020009003;
			
			Строка070Графа3 = ?(Строка070Графа3 = 0, КоличествоДней.ПервыйМесяц, Строка070Графа3);
			Строка080Графа3 = ?(Строка080Графа3 = 0, КоличествоДней.ВторойМесяц, Строка080Графа3);
			Строка090Графа3 = ?(Строка090Графа3 = 0, КоличествоДней.ТретийМесяц, Строка090Графа3);
			
			// Учет времени осуществления деятельности.
			ЗначениеСтроки070Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка070Графа2 * Строка070Графа3 / КоличествоДней.ПервыйМесяц);
			
			ЗначениеСтроки080Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка080Графа2 * Строка080Графа3 / КоличествоДней.ВторойМесяц);
			
			ЗначениеСтроки090Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка090Графа2 * Строка090Графа3 / КоличествоДней.ТретийМесяц);
			
			СтраницаРаздела2.Данные.Вставить("П000020007004", ЗначениеСтроки070Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020008004", ЗначениеСтроки080Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020009004", ЗначениеСтроки090Графа4);
			
			Строка070Графа4 = Окр(СтраницаРаздела2.Данные.П000020007004);
			Строка080Графа4 = Окр(СтраницаРаздела2.Данные.П000020008004);
			Строка090Графа4 = Окр(СтраницаРаздела2.Данные.П000020009004);
			
			ЗначениеСтроки100 = Строка070Графа4 + Строка080Графа4 + Строка090Графа4;
			СтраницаРаздела2.Данные.Вставить("П000020010003", ЗначениеСтроки100);
			
			Строка100 = Окр(Число(Формат(СтраницаРаздела2.Данные.П000020010003, "ЧЦ=12;ЧДЦ=2;ЧН=")));
			
			ЗначениеСтроки110 = Окр(Строка100 * СтраницаРаздела2.Данные.П000020010503 / 100);
			СтраницаРаздела2.Данные.Вставить("П000020011003", ЗначениеСтроки110);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		ПрНпл = ДанныеРаздел3.П000030000503;
		
		Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Строка020 = Окр(ДанныеРаздел3.П000030002003);
		Строка030 = Окр(ДанныеРаздел3.П000030003003);
		Строка040 = Окр(ДанныеРаздел3.П000030004003);
		
		Если ПрНпл = "1" Тогда
			РазмерОграничения = Окр(Строка010 * 50/100);
			ЗначениеСтроки050 = Макс(РазмерОграничения, Строка010 - (Строка020 + Строка030));
			ЗначениеСтроки050 = Макс(0, ЗначениеСтроки050 - Строка040);
		Иначе
			ЗначениеСтроки050 = Макс(0, Строка010 - Строка030 - Строка040);
		КонецЕсли;
		
		ДанныеРаздел3.Вставить("П000030005003", ЗначениеСтроки050);
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		ДанныеДопСтрокРаздел4 = РазделыОтчета.Раздел4.ДанныеДопСтрок;
		
		ОбщаяСумма = 0;
		
		Для каждого ДопСтрока Из ДанныеДопСтрокРаздел4 Цикл
			ОбщаяСумма = ОбщаяСумма + Окр(ДопСтрока["П000040005003"]);
		КонецЦикла;
		
		ДанныеРаздел4 = РазделыОтчета.Раздел4.Данные;
		
		ДанныеРаздел4.П000040015003 = ОбщаяСумма;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетЕНВДФормаОтчета2018Кв3(РазделыОтчета, ИмяРаздела = "", ДатаОкончания = Неопределено)
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		КоличествоДней = Новый Структура;
		КоличествоДней.Вставить("ПервыйМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -2))));
		КоличествоДней.Вставить("ВторойМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -1))));
		КоличествоДней.Вставить("ТретийМесяц", День(КонецМесяца(ДатаОкончания)));
		
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		
		Для Каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			
			Строка040 = Окр(СтраницаРаздела2.Данные.П000020004003);
			
			Строка050 = СтраницаРаздела2.Данные.П000020005003;
			Строка060 = СтраницаРаздела2.Данные.П000020006003;
			
			Строка070Графа2 = СтраницаРаздела2.Данные.П000020007002;
			Строка080Графа2 = СтраницаРаздела2.Данные.П000020008002;
			Строка090Графа2 = СтраницаРаздела2.Данные.П000020009002;
			
			Строка070Графа3 = СтраницаРаздела2.Данные.П000020007003;
			Строка080Графа3 = СтраницаРаздела2.Данные.П000020008003;
			Строка090Графа3 = СтраницаРаздела2.Данные.П000020009003;
			
			Строка070Графа3 = ?(Строка070Графа3 = 0, КоличествоДней.ПервыйМесяц, Строка070Графа3);
			Строка080Графа3 = ?(Строка080Графа3 = 0, КоличествоДней.ВторойМесяц, Строка080Графа3);
			Строка090Графа3 = ?(Строка090Графа3 = 0, КоличествоДней.ТретийМесяц, Строка090Графа3);
			
			// Учет времени осуществления деятельности.
			ЗначениеСтроки070Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка070Графа2 * Строка070Графа3 / КоличествоДней.ПервыйМесяц);
			
			ЗначениеСтроки080Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка080Графа2 * Строка080Графа3 / КоличествоДней.ВторойМесяц);
			
			ЗначениеСтроки090Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка090Графа2 * Строка090Графа3 / КоличествоДней.ТретийМесяц);
			
			СтраницаРаздела2.Данные.Вставить("П000020007004", ЗначениеСтроки070Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020008004", ЗначениеСтроки080Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020009004", ЗначениеСтроки090Графа4);
			
			Строка070Графа4 = Окр(СтраницаРаздела2.Данные.П000020007004);
			Строка080Графа4 = Окр(СтраницаРаздела2.Данные.П000020008004);
			Строка090Графа4 = Окр(СтраницаРаздела2.Данные.П000020009004);
			
			ЗначениеСтроки100 = Строка070Графа4 + Строка080Графа4 + Строка090Графа4;
			СтраницаРаздела2.Данные.Вставить("П000020010003", ЗначениеСтроки100);
			
			Строка100 = Окр(Число(Формат(СтраницаРаздела2.Данные.П000020010003, "ЧЦ=12;ЧДЦ=2;ЧН=")));
			
			ЗначениеСтроки110 = Окр(Строка100 * СтраницаРаздела2.Данные.П000020010503 / 100);
			СтраницаРаздела2.Данные.Вставить("П000020011003", ЗначениеСтроки110);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		ПрНпл = ДанныеРаздел3.П000030000503;
		
		Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Строка020 = Окр(ДанныеРаздел3.П000030002003);
		Строка030 = Окр(ДанныеРаздел3.П000030003003);
		Строка040 = Окр(ДанныеРаздел3.П000030004003);
		
		Если ПрНпл = "1" Тогда
			РазмерОграничения = Окр(Строка010 * 50/100);
			ЗначениеСтроки050 = Макс(РазмерОграничения, Строка010 - (Строка020 + Строка030));
			ЗначениеСтроки050 = Макс(0, ЗначениеСтроки050 - Строка040);
		Иначе
			ЗначениеСтроки050 = Макс(0, Строка010 - Строка030 - Строка040);
		КонецЕсли;
		
		ДанныеРаздел3.Вставить("П000030005003", ЗначениеСтроки050);
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		ДанныеДопСтрокРаздел4 = РазделыОтчета.Раздел4.ДанныеДопСтрок;
		
		ОбщаяСумма = 0;
		
		Для каждого ДопСтрока Из ДанныеДопСтрокРаздел4 Цикл
			ОбщаяСумма = ОбщаяСумма + Окр(ДопСтрока["П000040005003"]);
		КонецЦикла;
		
		ДанныеРаздел4 = РазделыОтчета.Раздел4.Данные;
		
		ДанныеРаздел4.П000040015003 = ОбщаяСумма;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетЕНВДФормаОтчета2018Кв1(РазделыОтчета, ИмяРаздела = "", ДатаОкончания = Неопределено)
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		КоличествоДней = Новый Структура;
		КоличествоДней.Вставить("ПервыйМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -2))));
		КоличествоДней.Вставить("ВторойМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -1))));
		КоличествоДней.Вставить("ТретийМесяц", День(КонецМесяца(ДатаОкончания)));
		
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		
		Для Каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			
			Строка040 = Окр(СтраницаРаздела2.Данные.П000020004003);
			
			Строка050 = СтраницаРаздела2.Данные.П000020005003;
			Строка060 = СтраницаРаздела2.Данные.П000020006003;
			
			Строка070Графа2 = СтраницаРаздела2.Данные.П000020007002;
			Строка080Графа2 = СтраницаРаздела2.Данные.П000020008002;
			Строка090Графа2 = СтраницаРаздела2.Данные.П000020009002;
			
			Строка070Графа3 = СтраницаРаздела2.Данные.П000020007003;
			Строка080Графа3 = СтраницаРаздела2.Данные.П000020008003;
			Строка090Графа3 = СтраницаРаздела2.Данные.П000020009003;
			
			Строка070Графа3 = ?(Строка070Графа3 = 0, КоличествоДней.ПервыйМесяц, Строка070Графа3);
			Строка080Графа3 = ?(Строка080Графа3 = 0, КоличествоДней.ВторойМесяц, Строка080Графа3);
			Строка090Графа3 = ?(Строка090Графа3 = 0, КоличествоДней.ТретийМесяц, Строка090Графа3);
			
			// Учет времени осуществления деятельности.
			ЗначениеСтроки070Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка070Графа2 * Строка070Графа3 / КоличествоДней.ПервыйМесяц);
			
			ЗначениеСтроки080Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка080Графа2 * Строка080Графа3 / КоличествоДней.ВторойМесяц);
			
			ЗначениеСтроки090Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка090Графа2 * Строка090Графа3 / КоличествоДней.ТретийМесяц);
			
			СтраницаРаздела2.Данные.Вставить("П000020007004", ЗначениеСтроки070Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020008004", ЗначениеСтроки080Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020009004", ЗначениеСтроки090Графа4);
			
			Строка070Графа4 = Окр(СтраницаРаздела2.Данные.П000020007004);
			Строка080Графа4 = Окр(СтраницаРаздела2.Данные.П000020008004);
			Строка090Графа4 = Окр(СтраницаРаздела2.Данные.П000020009004);
			
			ЗначениеСтроки100 = Строка070Графа4 + Строка080Графа4 + Строка090Графа4;
			СтраницаРаздела2.Данные.Вставить("П000020010003", ЗначениеСтроки100);
			
			Строка100 = Окр(Число(Формат(СтраницаРаздела2.Данные.П000020010003, "ЧЦ=12;ЧДЦ=2;ЧН=")));
			
			ЗначениеСтроки110 = Окр(Строка100 * СтраницаРаздела2.Данные.П000020010503 / 100);
			СтраницаРаздела2.Данные.Вставить("П000020011003", ЗначениеСтроки110);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		ПрНпл = ДанныеРаздел3.П000030000503;
		
		Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Строка020 = Окр(ДанныеРаздел3.П000030002003);
		Строка030 = Окр(ДанныеРаздел3.П000030003003);
		Строка035 = Окр(ДанныеРаздел3.П000030003503);
		
		Если ПрНпл = "1" Тогда
			РазмерОграничения = Окр(Строка010 * 50/100);
			ЗначениеСтроки040 = Макс(РазмерОграничения, Строка010 - (Строка020 + Строка030));
			ЗначениеСтроки040 = Макс(0, ЗначениеСтроки040 - Строка035);
		Иначе
			ЗначениеСтроки040 = Макс(0, Строка010 - Строка030 - Строка035);
		КонецЕсли;
		
		ДанныеРаздел3.Вставить("П000030004003", ЗначениеСтроки040);
		
	ИначеЕсли ИмяРаздела = "Раздел4" Тогда
		
		ДанныеДопСтрокРаздел4 = РазделыОтчета.Раздел4.ДанныеДопСтрок;
		
		ОбщаяСумма = 0;
		
		Для каждого ДопСтрока Из ДанныеДопСтрокРаздел4 Цикл
			ОбщаяСумма = ОбщаяСумма + Окр(ДопСтрока["П000040005003"]);
		КонецЦикла;
		
		ДанныеРаздел4 = РазделыОтчета.Раздел4.Данные;
		
		ДанныеРаздел4.П000040015003 = ОбщаяСумма;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетЕНВДФормаОтчета2017Кв1(РазделыОтчета, ИмяРаздела = "", ДатаОкончания = Неопределено)
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		КоличествоДней = Новый Структура;
		КоличествоДней.Вставить("ПервыйМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -2))));
		КоличествоДней.Вставить("ВторойМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -1))));
		КоличествоДней.Вставить("ТретийМесяц", День(КонецМесяца(ДатаОкончания)));
		
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		
		Для Каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			
			Строка040 = Окр(СтраницаРаздела2.Данные.П000020004003);
			
			Строка050 = СтраницаРаздела2.Данные.П000020005003;
			Строка060 = СтраницаРаздела2.Данные.П000020006003;
			
			Строка070Графа2 = СтраницаРаздела2.Данные.П000020007002;
			Строка080Графа2 = СтраницаРаздела2.Данные.П000020008002;
			Строка090Графа2 = СтраницаРаздела2.Данные.П000020009002;
			
			Строка070Графа3 = СтраницаРаздела2.Данные.П000020007003;
			Строка080Графа3 = СтраницаРаздела2.Данные.П000020008003;
			Строка090Графа3 = СтраницаРаздела2.Данные.П000020009003;
			
			Строка070Графа3 = ?(Строка070Графа3 = 0, КоличествоДней.ПервыйМесяц, Строка070Графа3);
			Строка080Графа3 = ?(Строка080Графа3 = 0, КоличествоДней.ВторойМесяц, Строка080Графа3);
			Строка090Графа3 = ?(Строка090Графа3 = 0, КоличествоДней.ТретийМесяц, Строка090Графа3);
			
			// Учет времени осуществления деятельности.
			ЗначениеСтроки070Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка070Графа2 * Строка070Графа3 / КоличествоДней.ПервыйМесяц);
			
			ЗначениеСтроки080Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка080Графа2 * Строка080Графа3 / КоличествоДней.ВторойМесяц);
			
			ЗначениеСтроки090Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка090Графа2 * Строка090Графа3 / КоличествоДней.ТретийМесяц);
			
			СтраницаРаздела2.Данные.Вставить("П000020007004", ЗначениеСтроки070Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020008004", ЗначениеСтроки080Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020009004", ЗначениеСтроки090Графа4);
			
			Строка070Графа4 = Окр(СтраницаРаздела2.Данные.П000020007004);
			Строка080Графа4 = Окр(СтраницаРаздела2.Данные.П000020008004);
			Строка090Графа4 = Окр(СтраницаРаздела2.Данные.П000020009004);
			
			ЗначениеСтроки100 = Строка070Графа4 + Строка080Графа4 + Строка090Графа4;
			СтраницаРаздела2.Данные.Вставить("П000020010003", ЗначениеСтроки100);
			
			Строка100 = Окр(Число(Формат(СтраницаРаздела2.Данные.П000020010003, "ЧЦ=12;ЧДЦ=2;ЧН=")));
			
			ЗначениеСтроки110 = Окр(Строка100 * СтраницаРаздела2.Данные.П000020010503 / 100);
			СтраницаРаздела2.Данные.Вставить("П000020011003", ЗначениеСтроки110);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		ПрНпл = ДанныеРаздел3.П000030000503;
		
		Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Строка020 = Окр(ДанныеРаздел3.П000030002003);
		Строка030 = Окр(ДанныеРаздел3.П000030003003);
		
		Если ПрНпл = "1" Тогда
			РазмерОграничения = Окр(Строка010 * 50/100);
			ЗначениеСтроки040 = Макс(РазмерОграничения, Строка010 - (Строка020 + Строка030));
		Иначе
			ЗначениеСтроки040 = Макс(0, Строка010 - Строка030);
		КонецЕсли;
		
		ДанныеРаздел3.Вставить("П000030004003", ЗначениеСтроки040);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетЕНВДФормаОтчета2016Кв1(РазделыОтчета, ИмяРаздела = "", ДатаОкончания = Неопределено)
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		КоличествоДней = Новый Структура;
		КоличествоДней.Вставить("ПервыйМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -2))));
		КоличествоДней.Вставить("ВторойМесяц", День(КонецМесяца(ДобавитьМесяц(ДатаОкончания, -1))));
		КоличествоДней.Вставить("ТретийМесяц", День(КонецМесяца(ДатаОкончания)));
		
		ТаблицаРаздела2 = РазделыОтчета.Раздел2.Данные;
		
		Для Каждого СтраницаРаздела2 Из ТаблицаРаздела2 Цикл
			
			Строка040 = Окр(СтраницаРаздела2.Данные.П000020004003);
			
			Строка050 = СтраницаРаздела2.Данные.П000020005003;
			Строка060 = СтраницаРаздела2.Данные.П000020006003;
			
			Строка070Графа2 = СтраницаРаздела2.Данные.П000020007002;
			Строка080Графа2 = СтраницаРаздела2.Данные.П000020008002;
			Строка090Графа2 = СтраницаРаздела2.Данные.П000020009002;
			
			Строка070Графа3 = СтраницаРаздела2.Данные.П000020007003;
			Строка080Графа3 = СтраницаРаздела2.Данные.П000020008003;
			Строка090Графа3 = СтраницаРаздела2.Данные.П000020009003;
			
			Строка070Графа3 = ?(Строка070Графа3 = 0, КоличествоДней.ПервыйМесяц, Строка070Графа3);
			Строка080Графа3 = ?(Строка080Графа3 = 0, КоличествоДней.ВторойМесяц, Строка080Графа3);
			Строка090Графа3 = ?(Строка090Графа3 = 0, КоличествоДней.ТретийМесяц, Строка090Графа3);
			
			// Учет времени осуществления деятельности.
			ЗначениеСтроки070Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка070Графа2 * Строка070Графа3 / КоличествоДней.ПервыйМесяц);
			
			ЗначениеСтроки080Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка080Графа2 * Строка080Графа3 / КоличествоДней.ВторойМесяц);
			
			ЗначениеСтроки090Графа4 = Окр(
			Строка040 * Строка050 * Строка060 * Строка090Графа2 * Строка090Графа3 / КоличествоДней.ТретийМесяц);
			
			СтраницаРаздела2.Данные.Вставить("П000020007004", ЗначениеСтроки070Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020008004", ЗначениеСтроки080Графа4);
			СтраницаРаздела2.Данные.Вставить("П000020009004", ЗначениеСтроки090Графа4);
			
			Строка070Графа4 = Окр(СтраницаРаздела2.Данные.П000020007004);
			Строка080Графа4 = Окр(СтраницаРаздела2.Данные.П000020008004);
			Строка090Графа4 = Окр(СтраницаРаздела2.Данные.П000020009004);
			
			ЗначениеСтроки100 = Строка070Графа4 + Строка080Графа4 + Строка090Графа4;
			СтраницаРаздела2.Данные.Вставить("П000020010003", ЗначениеСтроки100);
			
			Строка100 = Окр(Число(Формат(СтраницаРаздела2.Данные.П000020010003, "ЧЦ=12;ЧДЦ=2;ЧН=")));
			
			ЗначениеСтроки110 = Окр(Строка100 * СтраницаРаздела2.Данные.П000020010503 / 100);
			СтраницаРаздела2.Данные.Вставить("П000020011003", ЗначениеСтроки110);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДанныеРаздел3 = РазделыОтчета.Раздел3.Данные;
		
		ПрНпл = ДанныеРаздел3.П000030000503;
		
		Строка010 = Окр(ДанныеРаздел3.П000030001003);
		Строка020 = Окр(ДанныеРаздел3.П000030002003);
		Строка030 = Окр(ДанныеРаздел3.П000030003003);
		
		Если ПрНпл = "1" Тогда
			РазмерОграничения = Окр(Строка010 * 50/100);
			ЗначениеСтроки040 = Макс(РазмерОграничения, Строка010 - Строка020);
		Иначе
			ЗначениеСтроки040 = Макс(0, Строка010 - Строка030);
		КонецЕсли;
		
		ДанныеРаздел3.Вставить("П000030004003", ЗначениеСтроки040);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииАвтоФормированияФормыУСН

Функция СформироватьАвтоматическиРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыАвтоформирования, КорректирующийОтчет)
	
	РазделыОтчета = НовыйРазделыРеглОтчетаУСНФормаОтчета2021Кв1();
	
	ЗаполнитьРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыАвтоформирования, КорректирующийОтчет, РазделыОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыАвтоформирования.Организация,
		РазделыОтчета,
		ДанныеРеглОтчета.ДатаПодписи,
		ПараметрыАвтоформирования.ДатаОкончания);
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(ПараметрыАвтоформирования.ИсточникОтчета,
		ПараметрыАвтоформирования.ИмяФормыОтчета,
		"СоставПоказателей2021Кв1",
		СтруктураВариантыЗаполнения);
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетУСНФормаОтчета2021Кв1(ДеревоСтраницОтчета);
	
	СкрытьРазделыПоОбъектуНалогообложенияРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыАвтоформирования.Организация,
		ПараметрыАвтоформирования.ДатаОкончания,
		ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.НалоговыйОрган);
	ДанныеРеглОтчета.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы","01/01/2021");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", Ложь);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	ПараметрыЗаписи.Вставить("СсылкаНаСохрРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		ПараметрыАвтоформирования.АдресВременногоХранилищаРасшифровки);
	
	Возврат ЗаписатьРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыЗаписи);
	
КонецФункции

Функция СформироватьАвтоматическиРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыАвтоформирования, КорректирующийОтчет)
	
	РазделыОтчета = НовыйРазделыРеглОтчетаУСНФормаОтчета2015Кв1();
	
	ЗаполнитьРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыАвтоформирования, КорректирующийОтчет, РазделыОтчета);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ЗаполнитьСведенияОбОрганизацииРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыАвтоформирования.Организация,
		РазделыОтчета,
		ДанныеРеглОтчета.ДатаПодписи,
		ПараметрыАвтоформирования.ДатаОкончания);
	
	РазделыОтчета.Титульный.Данные.НомерКорректировки = ?(КорректирующийОтчет, 1, 0);
	
	СтруктураВариантыЗаполнения = Новый Структура;
	ЗаполнитьНачальныеНастройки(ПараметрыАвтоформирования.ИсточникОтчета,
		ПараметрыАвтоформирования.ИмяФормыОтчета,
		"СоставПоказателей2015Кв1",
		СтруктураВариантыЗаполнения);
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	ФормироватьСтруктуруСтраницРеглОтчетУСНФормаОтчета2015Кв1(ДеревоСтраницОтчета);
	
	СкрытьРазделыПоОбъектуНалогообложенияРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыАвтоформирования.Организация,
		ПараметрыАвтоформирования.ДатаОкончания,
		ДеревоСтраницОтчета);
	
	ДанныеРеглОтчета.Вставить("ВидДокумента", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	ДанныеРеглОтчета.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ДанныеРеглОтчета.Вставить("ТочностьЕдиницыИзмерения", 0);
	ДанныеРеглОтчета.Вставить("Комментарий", "");
	ДанныеРеглОтчета.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.НалоговыйОрган);
	ДанныеРеглОтчета.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП);
	ДанныеРеглОтчета.Вставить("ДанныеВариантовАвтоЗаполнения", СтруктураВариантыЗаполнения);
	ДанныеРеглОтчета.Вставить("ВерсияФормы","01/04/2016");
	ДанныеРеглОтчета.Вставить("ФлПодсчетСтраниц", Неопределено);
	ДанныеРеглОтчета.Вставить("ФлОтклВыборЗначений", Ложь);
	ДанныеРеглОтчета.Вставить("ПечатьБезШтрихкодаРазрешена", Ложь);
	ДанныеРеглОтчета.Вставить("Автозаполнение", Ложь);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("ДанныеРеглОтчета", ДанныеРеглОтчета);
	ПараметрыЗаписи.Вставить("СсылкаНаСохрРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		ПараметрыАвтоформирования.АдресВременногоХранилищаРасшифровки);
	
	Возврат ЗаписатьРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыЗаписи);
	
КонецФункции

Функция НовыйРазделыРеглОтчетаУСНФормаОтчета2021Кв1()
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел3", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000101",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000102",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000103",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000104",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000105",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000106",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000107",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Добавить();
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел11", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел12", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел21", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел22", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел3, "П0000300001"));
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция НовыйРазделыРеглОтчетаУСНФормаОтчета2015Кв1()
	
	ДанныеДопСтрок = Новый Структура;
	ДанныеДопСтрок.Вставить("Раздел3", Новый ТаблицаЗначений);
	
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000101",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000102",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000103",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000104",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000105",
		Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000106",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Колонки.Добавить("П000030000107",
		Новый ОписаниеТипов("Число",    Новый КвалификаторыЧисла(14, 2, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДопСтрок.Раздел3.Добавить();
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел11", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел12", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел21", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел22", Новый Структура(
		"МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
	
	РазделыОтчета.Вставить("Раздел3", Новый Структура(
		"МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
		Ложь, Новый Структура, ДанныеДопСтрок.Раздел3, "П0000300001"));
	
	Возврат РазделыОтчета;
	
КонецФункции

Процедура ЗаполнитьРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыАвтоформирования, КорректирующийОтчет, РазделыОтчета)
	
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИП", ЭтоИП);
	ДопПараметры.Вставить("ОпределятьТрудНаемныхРабочих", ЭтоИП);
	ДопПараметры.Вставить("ИПИспользуетТрудНаемныхРаботников",
		РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация,
			ПараметрыАвтоформирования.ДатаНачала, ПараметрыАвтоформирования.ДатаОкончания));
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки");
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Раздел11", РазделыОтчета.Раздел11.Данные);
	Контейнер.Вставить("Раздел12", РазделыОтчета.Раздел12.Данные);
	Контейнер.Вставить("Раздел21", РазделыОтчета.Раздел21.Данные);
	Контейнер.Вставить("Раздел22", РазделыОтчета.Раздел22.Данные);
	Контейнер.Вставить("Раздел3",  РазделыОтчета.Раздел3.Данные);
	Контейнер.Вставить("Раздел3_ДанныеДопСтрок", РазделыОтчета.Раздел3.ДанныеДопСтрок);
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
			ИсточникОтчета,
			ИмяФормыОтчета,
			ПараметрыОтчета,
			Контейнер);
			
	КонецЕсли;
	
	Если РазделыОтчета.Раздел3.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел3.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
	Контейнер.Раздел3, Контейнер.Раздел3_ДанныеДопСтрок);
	
	ПараметрыАвтоформирования.Вставить("АдресВременногоХранилищаРасшифровки",
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
	РасчетРеглОтчетУСНФормаОтчета2021Кв1(РазделыОтчета, "", ДопПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыАвтоформирования, КорректирующийОтчет, РазделыОтчета)
	
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИП", ЭтоИП);
	ДопПараметры.Вставить("ОпределятьТрудНаемныхРабочих", ЭтоИП);
	ДопПараметры.Вставить("ИПИспользуетТрудНаемныхРаботников",
		РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация,
			ПараметрыАвтоформирования.ДатаНачала, ПараметрыАвтоформирования.ДатаОкончания));
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	
	ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки");
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Раздел11", РазделыОтчета.Раздел11.Данные);
	Контейнер.Вставить("Раздел12", РазделыОтчета.Раздел12.Данные);
	Контейнер.Вставить("Раздел21", РазделыОтчета.Раздел21.Данные);
	Контейнер.Вставить("Раздел22", РазделыОтчета.Раздел22.Данные);
	Контейнер.Вставить("Раздел3",  РазделыОтчета.Раздел3.Данные);
	Контейнер.Вставить("Раздел3_ДанныеДопСтрок", РазделыОтчета.Раздел3.ДанныеДопСтрок);
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
			ИсточникОтчета,
			ИмяФормыОтчета,
			ПараметрыОтчета,
			Контейнер);
			
	КонецЕсли;
	
	Если РазделыОтчета.Раздел3.ДанныеДопСтрок.Количество() = 0 Тогда
		РазделыОтчета.Раздел3.ДанныеДопСтрок.Добавить();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗаполнитьСтруктуруДанныхРазделаЗначениямиИзДопСтрок(
	Контейнер.Раздел3, Контейнер.Раздел3_ДанныеДопСтрок);
	
	ПараметрыАвтоформирования.Вставить("АдресВременногоХранилищаРасшифровки",
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
	РасчетРеглОтчетУСНФормаОтчета2015Кв1(РазделыОтчета, "", ДопПараметры);
	
КонецПроцедуры

Процедура РасчетРеглОтчетУСНФормаОтчета2021Кв1(РазделыОтчета, ИмяРаздела = "", ДопПараметры)
	
	ДанныеРаздел11 = РазделыОтчета.Раздел11.Данные;
	ДанныеРаздел12 = РазделыОтчета.Раздел12.Данные;
	ДанныеРаздел21 = РазделыОтчета.Раздел21.Данные;
	ДанныеРаздел22 = РазделыОтчета.Раздел22.Данные;
	ДанныеРаздел3  = РазделыОтчета.Раздел3.Данные;
	
	Если ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетУСНФормаОтчета2021Кв1(РазделыОтчета, "Раздел3",  ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2021Кв1(РазделыОтчета, "Раздел22", ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2021Кв1(РазделыОтчета, "Раздел21", ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2021Кв1(РазделыОтчета, "Раздел12", ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2021Кв1(РазделыОтчета, "Раздел11", ДопПараметры);
		
	ИначеЕсли ИмяРаздела = "Раздел11" Тогда
		
		// Строки 020, 040, 050, 070, 080 и 110 раздела 1.1 рассчитываются по данным раздела 2.1.
		
		// Стр. 100 разд. 1.1 = (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101,
		// если (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101 >= 0.
		Окр_П002110013303 = Окр(ДанныеРаздел21["П002110013303"]);
		Окр_П002110014303 = Окр(ДанныеРаздел21["П002110014303"]);
		Окр_П002120016303 = Окр(ДанныеРаздел21["П002120016303"]);
		Окр_П000110002003 = Окр(ДанныеРаздел11["П000110002003"]);
		Окр_П000110004003 = Окр(ДанныеРаздел11["П000110004003"]);
		Окр_П000110005003 = Окр(ДанныеРаздел11["П000110005003"]);
		Окр_П000110007003 = Окр(ДанныеРаздел11["П000110007003"]);
		Окр_П000110008003 = Окр(ДанныеРаздел11["П000110008003"]);
		Окр_П000110010103 = Окр(ДанныеРаздел11["П000110010103"]);
		ДанныеРаздел11.Вставить("П000110010003", Макс(0, Окр_П002110013303 - Окр_П002110014303
		- Окр_П002120016303 - (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003 + Окр_П000110007003
		- Окр_П000110008003) - Окр_П000110010103));
		
	ИначеЕсли ИмяРаздела = "Раздел12" Тогда
		
		// Строки 020, 040, 050, 070, 080 и 110 раздела 1.2 рассчитываются по данным раздела 2.2.
		
		// Стр. 100 разд. 1.2 = стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101,
		// если стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101 >= 0
		// и стр. 273 разд. 2.2 >= стр. 280 разд. 2.2.
		Окр_П000220027303 = Окр(ДанныеРаздел22["П000220027303"]);
		Окр_П000220028003 = Окр(ДанныеРаздел22["П000220028003"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		Окр_П000120004003 = Окр(ДанныеРаздел12["П000120004003"]);
		Окр_П000120005003 = Окр(ДанныеРаздел12["П000120005003"]);
		Окр_П000120007003 = Окр(ДанныеРаздел12["П000120007003"]);
		Окр_П000120008003 = Окр(ДанныеРаздел12["П000120008003"]);
		Окр_П000120010103 = Окр(ДанныеРаздел12["П000120010103"]);
		Если Окр_П000220027303 >= Окр_П000220028003 Тогда
			ДанныеРаздел12.Вставить("П000120010003", Макс(0, Окр_П000220027303 - (Окр_П000120002003
			+ Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003) - Окр_П000120010103));
		Иначе
			ДанныеРаздел12.Вставить("П000120010003", 0);
		КонецЕсли;
		
		// Стр. 120 разд. 1.2 = стр. 280 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101,
		// если стр. 280 разд. 2.2 > стр. 273 разд. 2.2
		// и стр. 280 разд. 2.2 > (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080 + стр. 101).
		Окр_П000220027303 = Окр(ДанныеРаздел22["П000220027303"]);
		Окр_П000220028003 = Окр(ДанныеРаздел22["П000220028003"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		Окр_П000120004003 = Окр(ДанныеРаздел12["П000120004003"]);
		Окр_П000120005003 = Окр(ДанныеРаздел12["П000120005003"]);
		Окр_П000120007003 = Окр(ДанныеРаздел12["П000120007003"]);
		Окр_П000120008003 = Окр(ДанныеРаздел12["П000120008003"]);
		Окр_П000120010103 = Окр(ДанныеРаздел12["П000120010103"]);
		Если Окр_П000220028003 > Окр_П000220027303 Тогда
			ДанныеРаздел12.Вставить("П000120012003", Макс(0, Окр_П000220028003 - (Окр_П000120002003
			+ Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003) - Окр_П000120010103));
		Иначе
			ДанныеРаздел12.Вставить("П000120012003", 0);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		ДанРазд = ДанныеРаздел21;
		
		// Расчет данных в подразделе 2.1.1 раздела 2.1.
		
		ПризнакСтавки = "1";
		Если ДанРазд["П002110012003"] = 8 ИЛИ ДанРазд["П002110012103"] = 8
			ИЛИ ДанРазд["П002110012203"] = 8 ИЛИ ДанРазд["П002110012303"] = 8 Тогда
			ПризнакСтавки = "2";
		КонецЕсли;
		ДанРазд.Вставить("П002110010103", ПризнакСтавки);
		
		// Для стр. 101 = "1": стр. 130 = стр. 110 х стр. 120 / 100.
		// Для стр. 101 = "2": стр. 130 = стр. 110 х стр. 120 / 100.
		Если ПризнакСтавки = "1" ИЛИ ПризнакСтавки = "2" Тогда
			ДанРазд.Вставить("П002110013003",
			Окр(Окр(ДанРазд["П002110011003"]) * ДанРазд["П002110012003"] / 100));
		Иначе
			ДанРазд.Вставить("П002110013003", 0);
		КонецЕсли;
		
		// Для стр. 101 = "1": стр. 131 = стр. 111 х стр. 121 / 100.
		// Для стр. 101 = "2": стр. 131 = стр. 111 х стр. 121 / 100, если стр. 121 = стр. 120;
		// стр. 131 = стр. 130 + (стр. 111 - стр. 110) х стр. 121 / 100, если стр. 121 > стр. 120.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П002110012103"] = ДанРазд["П002110012003"]) Тогда
			ДанРазд.Вставить("П002110013103",
			Окр(Окр(ДанРазд["П002110011103"]) * ДанРазд["П002110012103"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П002110012103"] > ДанРазд["П002110012003"] Тогда
			ДанРазд.Вставить("П002110013103", Окр(Окр(ДанРазд["П002110013003"])
			+ (Окр(ДанРазд["П002110011103"]) - Окр(ДанРазд["П002110011003"]))
			* ДанРазд["П002110012103"] / 100));
		Иначе
			ДанРазд.Вставить("П002110013103", 0);
		КонецЕсли;
		
		// Для стр. 101 = "1": стр. 132 = стр. 112 х стр. 122 / 100.
		// Для стр. 101 = "2": стр. 132 = стр. 112 х стр. 122 / 100, если стр. 122 = стр. 121;
		// стр. 132 = стр. 131 + (стр. 112 - стр. 111) х стр. 122 / 100, если стр. 122 > стр. 121.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П002110012203"] = ДанРазд["П002110012103"]) Тогда
			ДанРазд.Вставить("П002110013203",
			Окр(Окр(ДанРазд["П002110011203"]) * ДанРазд["П002110012203"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П002110012203"] > ДанРазд["П002110012103"] Тогда
			ДанРазд.Вставить("П002110013203", Окр(Окр(ДанРазд["П002110013103"])
			+ (Окр(ДанРазд["П002110011203"]) - Окр(ДанРазд["П002110011103"]))
			* ДанРазд["П002110012203"] / 100));
		Иначе
			ДанРазд.Вставить("П002110013203", 0);
		КонецЕсли;
		
		// Для стр. 101 = "1": стр. 133 = стр. 113 х стр. 123 / 100.
		// Для стр. 101 = "2": стр. 133 = стр. 113 х стр. 123 / 100, если стр. 123 = стр. 122;
		// стр. 133 = стр. 132 + (стр. 113 - стр. 112) х стр. 123 / 100, если стр. 123 > стр. 122.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П002110012303"] = ДанРазд["П002110012203"]) Тогда
			ДанРазд.Вставить("П002110013303",
			Окр(Окр(ДанРазд["П002110011303"]) * ДанРазд["П002110012303"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П002110012303"] > ДанРазд["П002110012203"] Тогда
			ДанРазд.Вставить("П002110013303", Окр(Окр(ДанРазд["П002110013203"])
			+ (Окр(ДанРазд["П002110011303"]) - Окр(ДанРазд["П002110011203"]))
			* ДанРазд["П002110012303"] / 100));
		Иначе
			ДанРазд.Вставить("П002110013303", 0);
		КонецЕсли;
		
		// Расчет данных в подразделе 2.1.2 раздела 2.1.
		
		// Для стр. 101 разд. 2.1.1 = "1": стр. 130 = стр. 110 х стр. 120 разд. 2.1.1 / 100.
		// Для стр. 101 разд. 2.1.1 = "2": стр. 130 = стр. 110 х стр. 120 / 100.
		Если ПризнакСтавки = "1" ИЛИ ПризнакСтавки = "2" Тогда
			ДанРазд.Вставить("П002120013003",
			Окр(Окр(ДанРазд["П002120011003"]) * ДанРазд["П002110012003"] / 100));
		Иначе
			ДанРазд.Вставить("П002120013003", 0);
		КонецЕсли;
		
		// Для стр. 101 разд. 2.1.1 = "1": стр. 131 = стр. 111 х стр. 121 разд. 2.1.1 / 100.
		// Для стр. 101 разд. 2.1.1 = "2": стр. 131 = стр. 111 х стр. 121 / 100, если стр. 121 = стр. 120;
		// стр. 131 = стр. 130 + (стр. 111 - стр. 110) х стр. 121 / 100, если стр. 121 > стр. 120.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П002110012103"] = ДанРазд["П002110012003"]) Тогда
			ДанРазд.Вставить("П002120013103",
			Окр(Окр(ДанРазд["П002120011103"]) * ДанРазд["П002110012103"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П002110012103"] > ДанРазд["П002110012003"] Тогда
			ДанРазд.Вставить("П002120013103", Окр(Окр(ДанРазд["П002120013003"])
			+ (Окр(ДанРазд["П002120011103"]) - Окр(ДанРазд["П002120011003"]))
			* ДанРазд["П002110012103"] / 100));
		Иначе
			ДанРазд.Вставить("П002120013103", 0);
		КонецЕсли;
		
		// Для стр. 101 разд. 2.1.1 = "1": стр. 132 = стр. 112 х стр. 122 разд. 2.1.1 / 100.
		// Для стр. 101 разд. 2.1.1 = "2": стр. 132 = стр. 112 х стр. 122 / 100, если стр. 122 = стр. 121;
		// стр. 132 = стр. 131 + (стр. 112 - стр. 111) х стр. 122 / 100, если стр. 122 > стр. 121.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П002110012203"] = ДанРазд["П002110012103"]) Тогда
			ДанРазд.Вставить("П002120013203",
			Окр(Окр(ДанРазд["П002120011203"]) * ДанРазд["П002110012203"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П002110012203"] > ДанРазд["П002110012103"] Тогда
			ДанРазд.Вставить("П002120013203", Окр(Окр(ДанРазд["П002120013103"])
			+ (Окр(ДанРазд["П002120011203"]) - Окр(ДанРазд["П002120011103"]))
			* ДанРазд["П002110012203"] / 100));
		Иначе
			ДанРазд.Вставить("П002120013203", 0);
		КонецЕсли;
		
		// Для стр. 101 разд. 2.1.1 = "1": стр. 133 = стр. 113 х стр. 123 разд. 2.1.1 / 100.
		// Для стр. 101 разд. 2.1.1 = "2": стр. 133 = стр. 113 х стр. 123 / 100, если стр. 123 = стр. 122;
		// стр. 133 = стр. 132 + (стр. 113 - стр. 112) х стр. 123 / 100, если стр. 123 > стр. 122.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П002110012303"] = ДанРазд["П002110012203"]) Тогда
			ДанРазд.Вставить("П002120013303",
			Окр(Окр(ДанРазд["П002120011303"]) * ДанРазд["П002110012303"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П002110012303"] > ДанРазд["П002110012203"] Тогда
			ДанРазд.Вставить("П002120013303", Окр(Окр(ДанРазд["П002120013203"])
			+ (Окр(ДанРазд["П002120011303"]) - Окр(ДанРазд["П002120011203"]))
			* ДанРазд["П002110012303"] / 100));
		Иначе
			ДанРазд.Вставить("П002120013303", 0);
		КонецЕсли;
		
		// Стр. 160 = стр. 130 - стр. 140, если стр. 130 - стр. 140 < стр. 150,
		// при этом стр. 160 <= (стр. 130 - стр. 140) разд. 2.1.1.
		// Стр. 160 = стр. 150, если стр. 130 - стр. 140 >= стр. 150,
		// при этом стр. 160 <= (стр. 130 - стр. 140) разд. 2.1.1.
		ДанРазд.Вставить("П002120016003", Мин(Окр(ДанРазд["П002110013003"])
		- Окр(ДанРазд["П002110014003"]), Мин(Окр(ДанРазд["П002120013003"])
		- Окр(ДанРазд["П002120014003"]), Окр(ДанРазд["П002120015003"]))));
		
		// Стр. 161 = стр. 131 - стр. 141, если стр. 131 - стр. 141 < стр. 151,
		// при этом стр. 161 <= (стр. 131 - стр. 141) разд. 2.1.1.
		// Стр. 161 = стр. 151, если стр. 131 - стр. 141 >= стр. 151,
		// при этом стр. 161 <= (стр. 131 - стр. 141) разд. 2.1.1.
		ДанРазд.Вставить("П002120016103", Мин(Окр(ДанРазд["П002110013103"])
		- Окр(ДанРазд["П002110014103"]), Мин(Окр(ДанРазд["П002120013103"])
		- Окр(ДанРазд["П002120014103"]), Окр(ДанРазд["П002120015103"]))));
		
		// Стр. 162 = стр. 132 - стр. 142, если стр. 132 - стр. 142 < стр. 152,
		// при этом стр. 162 <= (стр. 132 - стр. 142) разд. 2.1.1.
		// Стр. 162 = стр. 152, если стр. 132 - стр. 142 >= стр. 152,
		// при этом стр. 162 <= (стр. 132 - стр. 142) разд. 2.1.1.
		ДанРазд.Вставить("П002120016203", Мин(Окр(ДанРазд["П002110013203"])
		- Окр(ДанРазд["П002110014203"]), Мин(Окр(ДанРазд["П002120013203"])
		- Окр(ДанРазд["П002120014203"]), Окр(ДанРазд["П002120015203"]))));
		
		// Стр. 163 = стр. 133 - стр. 143, если стр. 133 - стр. 143 < стр. 153,
		// при этом стр. 163 <= (стр. 133 - стр. 143) разд. 2.1.1.
		// Стр. 163 = стр. 153, если стр. 133 - стр. 143 >= стр. 153,
		// при этом стр. 163 <= (стр. 133 - стр. 143) разд. 2.1.1.
		ДанРазд.Вставить("П002120016303", Мин(Окр(ДанРазд["П002110013303"])
		- Окр(ДанРазд["П002110014303"]), Мин(Окр(ДанРазд["П002120013303"])
		- Окр(ДанРазд["П002120014303"]), Окр(ДанРазд["П002120015303"]))));
		
		// Расчет данных раздела 1.1. по данным подразделов 2.1.1 и 2.1.2 раздела 2.1.
		
		// Стр. 020 разд. 1.1 = (стр. 130 - стр. 140) разд. 2.1.1 - стр. 160 разд. 2.1.2,
		// если (стр. 130 - стр. 140) разд. 2.1.1 - стр. 160 разд. 2.1.2 >= 0.
		Окр_П002110013003 = Окр(ДанРазд["П002110013003"]);
		Окр_П002110014003 = Окр(ДанРазд["П002110014003"]);
		Окр_П002120016003 = Окр(ДанРазд["П002120016003"]);
		ДанныеРаздел11.Вставить("П000110002003",
		Макс(0, Окр_П002110013003 - Окр_П002110014003 - Окр_П002120016003));
		
		// Стр. 040 разд. 1.1 = (стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2 - стр. 020,
		// если (стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2 - стр. 020 >= 0.
		Окр_П002110013103 = Окр(ДанРазд["П002110013103"]);
		Окр_П002110014103 = Окр(ДанРазд["П002110014103"]);
		Окр_П002120016103 = Окр(ДанРазд["П002120016103"]);
		Окр_П000110002003 = Окр(ДанныеРаздел11["П000110002003"]);
		ДанныеРаздел11.Вставить("П000110004003",
		Макс(0, Окр_П002110013103 - Окр_П002110014103 - Окр_П002120016103 - Окр_П000110002003));
		
		// Стр. 050 разд. 1.1 = стр. 020 - ((стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2),
		// если (стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2 - стр. 020 < 0.
		Окр_П002110013103 = Окр(ДанРазд["П002110013103"]);
		Окр_П002110014103 = Окр(ДанРазд["П002110014103"]);
		Окр_П002120016103 = Окр(ДанРазд["П002120016103"]);
		Окр_П000110002003 = Окр(ДанныеРаздел11["П000110002003"]);
		ДанныеРаздел11.Вставить("П000110005003",
		Макс(0, Окр_П000110002003 - (Окр_П002110013103 - Окр_П002110014103 - Окр_П002120016103)));
		
		// Стр. 070 разд. 1.1 = (стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд. 2.1.2 - (стр. 020 + стр. 040 - стр. 050),
		// если (стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд. 2.1.2 - (стр. 020 + стр. 040 - стр. 050) >= 0.
		Окр_П002110013203 = Окр(ДанРазд["П002110013203"]);
		Окр_П002110014203 = Окр(ДанРазд["П002110014203"]);
		Окр_П002120016203 = Окр(ДанРазд["П002120016203"]);
		Окр_П000110002003 = Окр(ДанныеРаздел11["П000110002003"]);
		Окр_П000110004003 = Окр(ДанныеРаздел11["П000110004003"]);
		Окр_П000110005003 = Окр(ДанныеРаздел11["П000110005003"]);
		ДанныеРаздел11.Вставить("П000110007003", Макс(0, Окр_П002110013203
		- Окр_П002110014203 - Окр_П002120016203 - (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003)));
		
		// Стр. 080 разд. 1.1 = (стр. 020 + стр. 040 - стр. 050) - ((стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд.
		// 2.1.2), если (стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд. 2.1.2 - (стр. 020 + стр. 040 - стр. 050) < 0.
		Окр_П002110013203 = Окр(ДанРазд["П002110013203"]);
		Окр_П002110014203 = Окр(ДанРазд["П002110014203"]);
		Окр_П002120016203 = Окр(ДанРазд["П002120016203"]);
		Окр_П000110002003 = Окр(ДанныеРаздел11["П000110002003"]);
		Окр_П000110004003 = Окр(ДанныеРаздел11["П000110004003"]);
		Окр_П000110005003 = Окр(ДанныеРаздел11["П000110005003"]);
		ДанныеРаздел11.Вставить("П000110008003", Макс(0, Окр_П000110002003
		+ Окр_П000110004003 - Окр_П000110005003 - (Окр_П002110013203 - Окр_П002110014203 - Окр_П002120016203)));
		
		// Стр. 100 разд. 1.1 = (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101,
		// если (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101 >= 0.
		Окр_П002110013303 = Окр(ДанРазд["П002110013303"]);
		Окр_П002110014303 = Окр(ДанРазд["П002110014303"]);
		Окр_П002120016303 = Окр(ДанРазд["П002120016303"]);
		Окр_П000110002003 = Окр(ДанныеРаздел11["П000110002003"]);
		Окр_П000110004003 = Окр(ДанныеРаздел11["П000110004003"]);
		Окр_П000110005003 = Окр(ДанныеРаздел11["П000110005003"]);
		Окр_П000110007003 = Окр(ДанныеРаздел11["П000110007003"]);
		Окр_П000110008003 = Окр(ДанныеРаздел11["П000110008003"]);
		Окр_П000110010103 = Окр(ДанныеРаздел11["П000110010103"]);
		ДанныеРаздел11.Вставить("П000110010003", Макс(0, Окр_П002110013303 - Окр_П002110014303
		- Окр_П002120016303 - (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003 + Окр_П000110007003
		- Окр_П000110008003) - Окр_П000110010103));
		
		// Стр. 110 разд. 1.1 = (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080)
		// - ((стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2),
		// если (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) < 0.
		Окр_П002110013303 = Окр(ДанРазд["П002110013303"]);
		Окр_П002110014303 = Окр(ДанРазд["П002110014303"]);
		Окр_П000110002003 = Окр(ДанныеРаздел11["П000110002003"]);
		Окр_П000110004003 = Окр(ДанныеРаздел11["П000110004003"]);
		Окр_П000110005003 = Окр(ДанныеРаздел11["П000110005003"]);
		Окр_П000110007003 = Окр(ДанныеРаздел11["П000110007003"]);
		Окр_П000110008003 = Окр(ДанныеРаздел11["П000110008003"]);
		ДанныеРаздел11.Вставить("П000110011003",
		Макс(0, Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003 + Окр_П000110007003
		- Окр_П000110008003 - (Окр_П002110013303 - Окр_П002110014303 - Окр_П002120016303)));
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		ДанРазд = ДанныеРаздел22;
		
		// Расчет данных раздела 2.2.
		
		ПризнакСтавки = "1";
		Если ДанРазд["П000220026003"] = 20 ИЛИ ДанРазд["П000220026103"] = 20
			ИЛИ ДанРазд["П000220026203"] = 20 ИЛИ ДанРазд["П000220026303"] = 20 Тогда
			ПризнакСтавки = "2";
		КонецЕсли;
		ДанРазд.Вставить("П000220020103", ПризнакСтавки);
		
		// Стр. 240 = стр. 210 - стр. 220, если стр. 210 - стр. 220 > 0.
		ДанРазд.Вставить("П000220024003",
		Макс(0, Окр(ДанРазд["П000220021003"]) - Окр(ДанРазд["П000220022003"])));
		
		// Стр. 241 = стр. 211 - стр. 221, если стр. 211 - стр. 221 > 0.
		ДанРазд.Вставить("П000220024103",
		Макс(0, Окр(ДанРазд["П000220021103"]) - Окр(ДанРазд["П000220022103"])));
		
		// Стр. 242 = стр. 212 - стр. 222, если стр. 212 - стр. 222 > 0.
		ДанРазд.Вставить("П000220024203",
		Макс(0, Окр(ДанРазд["П000220021203"]) - Окр(ДанРазд["П000220022203"])));
		
		// Стр. 243 = стр. 213 - стр. 223 - стр. 230, если стр. 213 - стр. 223 - стр. 230 > 0.
		ДанРазд.Вставить("П000220024303", Макс(0, Окр(ДанРазд["П000220021303"])
		- Окр(ДанРазд["П000220022303"]) - Окр(ДанРазд["П000220023003"])));
		
		// Стр. 250 = стр. 220 - стр. 210, если стр. 210 < стр. 220.
		ДанРазд.Вставить("П000220025003",
		Макс(0, Окр(ДанРазд["П000220022003"]) - Окр(ДанРазд["П000220021003"])));
		
		// Стр. 251 = стр. 221 - стр. 211, если стр. 211 < стр. 221.
		ДанРазд.Вставить("П000220025103",
		Макс(0, Окр(ДанРазд["П000220022103"]) - Окр(ДанРазд["П000220021103"])));
		
		// Стр. 252 = стр. 222 - стр. 212, если стр. 212 < стр. 222.
		ДанРазд.Вставить("П000220025203",
		Макс(0, Окр(ДанРазд["П000220022203"]) - Окр(ДанРазд["П000220021203"])));
		
		// Стр. 253 = стр. 223 - стр. 213, если стр. 213 < стр. 223.
		ДанРазд.Вставить("П000220025303",
		Макс(0, Окр(ДанРазд["П000220022303"]) - Окр(ДанРазд["П000220021303"])));
		
		// Для стр. 201 = "1": стр. 270 = стр. 240 х стр. 260 / 100.
		// Для стр. 201 = "2": стр. 270 = стр. 240 х стр. 260 / 100.
		Если ПризнакСтавки = "1" ИЛИ ПризнакСтавки = "2" Тогда
			ДанРазд.Вставить("П000220027003",
			Окр(Окр(ДанРазд["П000220024003"]) * ДанРазд["П000220026003"] / 100));
		Иначе
			ДанРазд.Вставить("П000220027003", 0);
		КонецЕсли;
		
		// Для стр. 201 = "1": стр. 271 = стр. 241 х стр. 261 / 100.
		// Для стр. 201 = "2": стр. 271 = стр. 241 х стр. 261 / 100, если стр. 261 = стр. 260;
		// стр. 271 = стр. 270 + (стр. 241 - стр. 240) х стр. 261 / 100, если стр. 261 > стр. 260.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П000220026103"] = ДанРазд["П000220026003"]) Тогда
			ДанРазд.Вставить("П000220027103",
			Окр(Окр(ДанРазд["П000220024103"]) * ДанРазд["П000220026103"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П000220026103"] > ДанРазд["П000220026003"] Тогда
			ДанРазд.Вставить("П000220027103", Окр(Окр(ДанРазд["П000220027003"])
			+ (Окр(ДанРазд["П000220024103"]) - Окр(ДанРазд["П000220024003"]))
			* ДанРазд["П000220026103"] / 100));
		Иначе
			ДанРазд.Вставить("П000220027103", 0);
		КонецЕсли;
		
		// Для стр. 201 = "1": стр. 272 = стр. 242 х стр. 262 / 100.
		// Для стр. 201 = "2": стр. 272 = стр. 242 х стр. 262 / 100, если стр. 262 = стр. 261;
		// стр. 272 = стр. 271 + (стр. 242 - стр. 241) х стр. 262 / 100, если стр. 262 > стр. 261.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П000220026203"] = ДанРазд["П000220026103"]) Тогда
			ДанРазд.Вставить("П000220027203",
			Окр(Окр(ДанРазд["П000220024203"]) * ДанРазд["П000220026203"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П000220026203"] > ДанРазд["П000220026103"] Тогда
			ДанРазд.Вставить("П000220027203", Окр(Окр(ДанРазд["П000220027103"])
			+ (Окр(ДанРазд["П000220024203"]) - Окр(ДанРазд["П000220024103"]))
			* ДанРазд["П000220026203"] / 100));
		Иначе
			ДанРазд.Вставить("П000220027203", 0);
		КонецЕсли;
		
		// Для стр. 201 = "1": стр. 273 = стр. 243 х стр. 263 / 100.
		// Для стр. 201 = "2": стр. 273 = стр. 243 х стр. 263 / 100, если стр. 263 = стр. 262;
		// стр. 273 = стр. 272 + (стр. 243 - стр. 242) х стр. 263 / 100, если стр. 263 > стр. 262.
		Если ПризнакСтавки = "1"
			ИЛИ (ПризнакСтавки = "2" И ДанРазд["П000220026303"] = ДанРазд["П000220026203"]) Тогда
			ДанРазд.Вставить("П000220027303",
			Окр(Окр(ДанРазд["П000220024303"]) * ДанРазд["П000220026303"] / 100));
		ИначеЕсли ПризнакСтавки = "2" И ДанРазд["П000220026303"] > ДанРазд["П000220026203"] Тогда
			ДанРазд.Вставить("П000220027303", Окр(Окр(ДанРазд["П000220027203"])
			+ (Окр(ДанРазд["П000220024303"]) - Окр(ДанРазд["П000220024203"]))
			* ДанРазд["П000220026303"] / 100));
		Иначе
			ДанРазд.Вставить("П000220027303", 0);
		КонецЕсли;
		
		// Если ИП и (2015 <= отч. год <= 2023) и (строки 260-263 раздела 2.2 = 0),
		// то стр. 280 = 0 (случай ИП с налоговыми каникулами).
		// Иначе стр. 280 = стр. 213 х 1 / 100 (налоговая ставка 1%).
		Если ДопПараметры.ИП И Год(ДопПараметры.ДатаОкончания) >= 2015 И Год(ДопПараметры.ДатаОкончания) <= 2023
			И ДанРазд["П000220026003"] = 0 И ДанРазд["П000220026103"] = 0
			И ДанРазд["П000220026203"] = 0 И ДанРазд["П000220026303"] = 0 Тогда
			ДанРазд.Вставить("П000220028003", 0);
		Иначе
			ДанРазд.Вставить("П000220028003", Окр(Окр(ДанРазд["П000220021303"]) / 100));
		КонецЕсли;
		
		// Расчет данных раздела 1.2. по данным раздела 2.2.
		
		// Стр. 020 разд. 1.2 = стр. 270 разд. 2.2.
		Окр_П000220027003 = Окр(ДанРазд["П000220027003"]);
		ДанныеРаздел12.Вставить("П000120002003", Окр_П000220027003);
		
		// Стр. 040 разд. 1.2 = стр. 271 разд. 2.2 - стр. 020,
		// если стр. 271 разд. 2.2 - стр. 020 >= 0.
		Окр_П000220027103 = Окр(ДанРазд["П000220027103"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		ДанныеРаздел12.Вставить("П000120004003", Макс(0, Окр_П000220027103 - Окр_П000120002003));
		
		// Стр. 050 разд. 1.2 = стр. 020 - стр. 271 разд. 2.2,
		// если стр. 271 разд. 2.2 - стр. 020 < 0.
		Окр_П000220027103 = Окр(ДанРазд["П000220027103"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		ДанныеРаздел12.Вставить("П000120005003", - Мин(0, Окр_П000220027103 - Окр_П000120002003));
		
		// Стр. 070 разд. 1.2 = стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050),
		// если стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050) >= 0.
		Окр_П000220027203 = Окр(ДанРазд["П000220027203"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		Окр_П000120004003 = Окр(ДанныеРаздел12["П000120004003"]);
		Окр_П000120005003 = Окр(ДанныеРаздел12["П000120005003"]);
		ДанныеРаздел12.Вставить("П000120007003",
		Макс(0, Окр_П000220027203 - (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003)));
		
		// Стр. 080 разд. 1.2 = (стр. 020 + стр. 040 - стр. 050) - стр. 272 разд. 2.2,
		// если стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050) < 0.
		Окр_П000220027203 = Окр(ДанРазд["П000220027203"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		Окр_П000120004003 = Окр(ДанныеРаздел12["П000120004003"]);
		Окр_П000120005003 = Окр(ДанныеРаздел12["П000120005003"]);
		ДанныеРаздел12.Вставить("П000120008003",
		- Мин(0, Окр_П000220027203 - (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003)));
		
		// Стр. 100 разд. 1.2 = стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101,
		// если стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101 >= 0
		// и стр. 273 разд. 2.2 >= стр. 280 разд. 2.2.
		Окр_П000220027303 = Окр(ДанРазд["П000220027303"]);
		Окр_П000220028003 = Окр(ДанРазд["П000220028003"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		Окр_П000120004003 = Окр(ДанныеРаздел12["П000120004003"]);
		Окр_П000120005003 = Окр(ДанныеРаздел12["П000120005003"]);
		Окр_П000120007003 = Окр(ДанныеРаздел12["П000120007003"]);
		Окр_П000120008003 = Окр(ДанныеРаздел12["П000120008003"]);
		Окр_П000120010103 = Окр(ДанныеРаздел12["П000120010103"]);
		Если Окр_П000220027303 >= Окр_П000220028003 Тогда
			ДанныеРаздел12.Вставить("П000120010003", Макс(0, Окр_П000220027303 - (Окр_П000120002003
			+ Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003) - Окр_П000120010103));
		Иначе
			ДанныеРаздел12.Вставить("П000120010003", 0);
		КонецЕсли;
		
		// Стр. 110 разд. 1.2 = (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 273 разд. 2.2,
		// если стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) < 0
		// и стр. 273 разд. 2.2 >= стр. 280 разд. 2.2
		// или (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 280 разд. 2.2,
		// если стр. 273 разд. 2.2 < стр. 280 разд. 2.2
		// и (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) > стр. 280 разд. 2.2.
		Окр_П000220027303 = Окр(ДанРазд["П000220027303"]);
		Окр_П000220028003 = Окр(ДанРазд["П000220028003"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		Окр_П000120004003 = Окр(ДанныеРаздел12["П000120004003"]);
		Окр_П000120005003 = Окр(ДанныеРаздел12["П000120005003"]);
		Окр_П000120007003 = Окр(ДанныеРаздел12["П000120007003"]);
		Окр_П000120008003 = Окр(ДанныеРаздел12["П000120008003"]);
		Если Окр_П000220027303 >= Окр_П000220028003 Тогда
			ДанныеРаздел12.Вставить("П000120011003", - Мин(0, Окр_П000220027303 - (Окр_П000120002003
			+ Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003)));
		Иначе
			ДанныеРаздел12.Вставить("П000120011003", Макс(0, (Окр_П000120002003 + Окр_П000120004003
			- Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003) - Окр_П000220028003));
		КонецЕсли;
		
		// Стр. 120 разд. 1.2 = стр. 280 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 101,
		// если стр. 280 разд. 2.2 > стр. 273 разд. 2.2
		// и стр. 280 разд. 2.2 > (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080 + стр. 101).
		Окр_П000220027303 = Окр(ДанРазд["П000220027303"]);
		Окр_П000220028003 = Окр(ДанРазд["П000220028003"]);
		Окр_П000120002003 = Окр(ДанныеРаздел12["П000120002003"]);
		Окр_П000120004003 = Окр(ДанныеРаздел12["П000120004003"]);
		Окр_П000120005003 = Окр(ДанныеРаздел12["П000120005003"]);
		Окр_П000120007003 = Окр(ДанныеРаздел12["П000120007003"]);
		Окр_П000120008003 = Окр(ДанныеРаздел12["П000120008003"]);
		Окр_П000120010103 = Окр(ДанныеРаздел12["П000120010103"]);
		Если Окр_П000220028003 > Окр_П000220027303 Тогда
			ДанныеРаздел12.Вставить("П000120012003", Макс(0, Окр_П000220028003 - (Окр_П000120002003
			+ Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003) - Окр_П000120010103));
		Иначе
			ДанныеРаздел12.Вставить("П000120012003", 0);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		// Для этого раздела при автоформировании не требуется расчет в строках многострочной части,
		// поскольку эти строки могут быть заполнены только интерактивно.
		
		// Расчет колонок в строке "Итого по отчету" раздела 3.
		Колонка3 = 0;
		Колонка4 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		
		Для каждого ДопСтрока Из РазделыОтчета.Раздел3.ДанныеДопСтрок Цикл
			
			Колонка3 = Колонка3 + Окр(ДопСтрока.П000030000103);
			Колонка4 = Колонка4 + Окр(ДопСтрока.П000030000104);
			Колонка6 = Колонка6 + Окр(ДопСтрока.П000030000106);
			Колонка7 = Колонка7 + Окр(ДопСтрока.П000030000107);
			
		КонецЦикла;
		
		ДанныеРаздел3.Вставить("П000030000203", Колонка3);
		ДанныеРаздел3.Вставить("П000030000204", Колонка4);
		ДанныеРаздел3.Вставить("П000030000206", Колонка6);
		ДанныеРаздел3.Вставить("П000030000207", Колонка7);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРеглОтчетУСНФормаОтчета2015Кв1(РазделыОтчета, ИмяРаздела = "", ДопПараметры)
	
	ДанныеРаздел11 = РазделыОтчета.Раздел11.Данные;
	ДанныеРаздел12 = РазделыОтчета.Раздел12.Данные;
	ДанныеРаздел21 = РазделыОтчета.Раздел21.Данные;
	ДанныеРаздел22 = РазделыОтчета.Раздел22.Данные;
	ДанныеРаздел3  = РазделыОтчета.Раздел3.Данные;
	
	Если ИмяРаздела = "" Тогда
		
		РасчетРеглОтчетУСНФормаОтчета2015Кв1(РазделыОтчета, "Раздел3",  ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2015Кв1(РазделыОтчета, "Раздел22", ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2015Кв1(РазделыОтчета, "Раздел21", ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2015Кв1(РазделыОтчета, "Раздел12", ДопПараметры);
		РасчетРеглОтчетУСНФормаОтчета2015Кв1(РазделыОтчета, "Раздел11", ДопПараметры);
		
	ИначеЕсли ИмяРаздела = "Раздел11" Тогда
		
		// Данные раздела 1.1 рассчитываются по данным раздела 2.1.
		
	ИначеЕсли ИмяРаздела = "Раздел12" Тогда
		
		// Данные раздела 1.2 рассчитываются по данным раздела 2.2.
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		// Расчет данных раздела 2.1.1.
		
		// Стр. 130 = стр. 110 х стр. 120 / 100.
		Окр_П002110011003 = Окр(ДанныеРаздел21.П002110011003);
		ДанныеРаздел21.П002110013003 = Окр_П002110011003
			* ДанныеРаздел21.П002110012003 / 100;
		
		// Стр. 131 = стр. 111 х стр. 121 / 100.
		Окр_П002110011103 = Окр(ДанныеРаздел21.П002110011103);
		ДанныеРаздел21.П002110013103 = Окр_П002110011103
			* ДанныеРаздел21.П002110012103 / 100;
		
		// Стр. 132 = стр. 112 х стр. 122 / 100.
		Окр_П002110011203 = Окр(ДанныеРаздел21.П002110011203);
		ДанныеРаздел21.П002110013203 = Окр_П002110011203
			* ДанныеРаздел21.П002110012203 / 100;
		
		// Стр. 133 = стр. 113 х стр. 123 / 100.
		Окр_П002110011303 = Окр(ДанныеРаздел21.П002110011303);
		ДанныеРаздел21.П002110013303 = Окр_П002110011303
			* ДанныеРаздел21.П002110012303 / 100;
		
		// Расчет данных раздела 2.1.2.
		
		// Стр. 130 = стр. 110 х стр. 120 разд. 2.1.1 / 100.
		Окр_П002120011003 = Окр(ДанныеРаздел21.П002120011003);
		ДанныеРаздел21.П002120013003 = Окр_П002120011003
			* ДанныеРаздел21.П002110012003 / 100;
		
		// Стр. 131 = стр. 111 х стр. 121 разд. 2.1.1 / 100.
		Окр_П002120011103 = Окр(ДанныеРаздел21.П002120011103);
		ДанныеРаздел21.П002120013103 = Окр_П002120011103
			* ДанныеРаздел21.П002110012103 / 100;
		
		// Стр. 132 = стр. 112 х стр. 122 разд. 2.1.1 / 100.
		Окр_П002120011203 = Окр(ДанныеРаздел21.П002120011203);
		ДанныеРаздел21.П002120013203 = Окр_П002120011203
			* ДанныеРаздел21.П002110012203 / 100;
		
		// Стр. 133 = стр. 113 х стр. 123 разд. 2.1.1 / 100.
		Окр_П002120011303 = Окр(ДанныеРаздел21.П002120011303);
		ДанныеРаздел21.П002120013303 = Окр_П002120011303
			* ДанныеРаздел21.П002110012303 / 100;
		
		// Стр. 160 = стр. 130 - стр. 140, если стр. 130 - стр. 140 < стр. 150,
		// при этом стр. 160 <= (стр. 130 - стр. 140) разд. 2.1.1.
		// Стр. 160 = стр. 150, если стр. 130 - стр. 140 >= стр. 150,
		// при этом стр. 160 <=( стр. 130 - стр. 140) разд. 2.1.1.
		Окр_П002120013003 = Окр(ДанныеРаздел21.П002120013003);
		Окр_П002120014003 = Окр(ДанныеРаздел21.П002120014003);
		Окр_П002120015003 = Окр(ДанныеРаздел21.П002120015003);
		Окр_П002110013003 = Окр(ДанныеРаздел21.П002110013003);
		Окр_П002110014003 = Окр(ДанныеРаздел21.П002110014003);
		ДанныеРаздел21.П002120016003
			= Мин(Окр_П002110013003 - Окр_П002110014003, Мин(Окр_П002120013003 - Окр_П002120014003, Окр_П002120015003));
		
		// Стр. 161 = стр. 131 - стр. 141, если стр. 131 - стр. 141 < стр. 151,
		// при этом стр. 161 <= (стр. 131 - стр. 141) разд. 2.1.1.
		// Стр. 161 = стр. 151, если стр. 131 - стр. 141 >= стр. 151,
		// при этом стр. 161 <=( стр. 131 - стр. 141) разд. 2.1.1.
		Окр_П002120013103 = Окр(ДанныеРаздел21.П002120013103);
		Окр_П002120014103 = Окр(ДанныеРаздел21.П002120014103);
		Окр_П002120015103 = Окр(ДанныеРаздел21.П002120015103);
		Окр_П002110013103 = Окр(ДанныеРаздел21.П002110013103);
		Окр_П002110014103 = Окр(ДанныеРаздел21.П002110014103);
		ДанныеРаздел21.П002120016103
			= Мин(Окр_П002110013103 - Окр_П002110014103, Мин(Окр_П002120013103 - Окр_П002120014103, Окр_П002120015103));
		
		// Стр. 162 = стр. 132 - стр. 142, если стр. 132 - стр. 142 < стр. 152,
		// при этом стр. 162 <= (стр. 132 - стр. 142) разд. 2.1.1.
		// Стр. 162 = стр. 152, если стр. 132 - стр. 142 >= стр. 152,
		// при этом стр. 162 <=( стр. 132 - стр. 142) разд. 2.1.1.
		Окр_П002120013203 = Окр(ДанныеРаздел21.П002120013203);
		Окр_П002120014203 = Окр(ДанныеРаздел21.П002120014203);
		Окр_П002120015203 = Окр(ДанныеРаздел21.П002120015203);
		Окр_П002110013203 = Окр(ДанныеРаздел21.П002110013203);
		Окр_П002110014203 = Окр(ДанныеРаздел21.П002110014203);
		ДанныеРаздел21.П002120016203
			= Мин(Окр_П002110013203 - Окр_П002110014203, Мин(Окр_П002120013203 - Окр_П002120014203, Окр_П002120015203));
		
		// Стр. 163 = стр. 133 - стр. 143, если стр. 133 - стр. 143 < стр. 153,
		// при этом стр. 163 <= (стр. 133 - стр. 143) разд. 2.1.1.
		// Стр. 163 = стр. 153, если стр. 133 - стр. 143 >= стр. 153,
		// при этом стр. 163 <=( стр. 133 - стр. 143) разд. 2.1.1.
		Окр_П002120013303 = Окр(ДанныеРаздел21.П002120013303);
		Окр_П002120014303 = Окр(ДанныеРаздел21.П002120014303);
		Окр_П002120015303 = Окр(ДанныеРаздел21.П002120015303);
		Окр_П002110013303 = Окр(ДанныеРаздел21.П002110013303);
		Окр_П002110014303 = Окр(ДанныеРаздел21.П002110014303);
		ДанныеРаздел21.П002120016303
			= Мин(Окр_П002110013303 - Окр_П002110014303, Мин(Окр_П002120013303 - Окр_П002120014303, Окр_П002120015303));
		
		// Расчет данных раздела 1.1. по данным разделов 2.1.1 и 2.1.2.
		
		// Стр. 020 разд. 1.1 = (стр. 130 - стр. 140) разд. 2.1.1 - стр. 160 разд. 2.1.2,
		// если (стр. 130 - стр. 140) разд. 2.1.1 - стр. 160 разд. 2.1.2 >= 0.
		Окр_П002110013003 = Окр(ДанныеРаздел21.П002110013003);
		Окр_П002110014003 = Окр(ДанныеРаздел21.П002110014003);
		Окр_П002120016003 = Окр(ДанныеРаздел21.П002120016003);
		ДанныеРаздел11.П000110002003 = Макс(0,
			Окр_П002110013003 - Окр_П002110014003 - Окр_П002120016003);
		
		// Стр. 040 разд. 1.1 = (стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2 - стр. 020,
		// если (стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2 - стр. 020 >= 0.
		Окр_П002110013103 = Окр(ДанныеРаздел21.П002110013103);
		Окр_П002110014103 = Окр(ДанныеРаздел21.П002110014103);
		Окр_П002120016103 = Окр(ДанныеРаздел21.П002120016103);
		
		Окр_П000110002003 = Окр(ДанныеРаздел11.П000110002003);
		ДанныеРаздел11.П000110004003 = Макс(0,
			Окр_П002110013103 - Окр_П002110014103 - Окр_П002120016103 - Окр_П000110002003);
		
		// Стр. 050 разд. 1.1 = стр. 020 - ((стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2),
		// если (стр. 131 - стр. 141) разд. 2.1.1 - стр. 161 разд. 2.1.2 - стр. 020 < 0.
		Окр_П002110013103 = Окр(ДанныеРаздел21.П002110013103);
		Окр_П002110014103 = Окр(ДанныеРаздел21.П002110014103);
		Окр_П002120016103 = Окр(ДанныеРаздел21.П002120016103);
		
		Окр_П000110002003 = Окр(ДанныеРаздел11.П000110002003);
		ДанныеРаздел11.П000110005003 = Макс(0,
			Окр_П000110002003 - (Окр_П002110013103 - Окр_П002110014103 - Окр_П002120016103));
		
		// Стр. 070 разд. 1.1 = (стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд. 2.1.2 - (стр. 020 + стр. 040 - стр. 050),
		// если (стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд. 2.1.2 - (стр. 020 + стр. 040 - стр. 050) >= 0.
		Окр_П002110013203 = Окр(ДанныеРаздел21.П002110013203);
		Окр_П002110014203 = Окр(ДанныеРаздел21.П002110014203);
		Окр_П002120016203 = Окр(ДанныеРаздел21.П002120016203);
		
		Окр_П000110002003 = Окр(ДанныеРаздел11.П000110002003);
		Окр_П000110004003 = Окр(ДанныеРаздел11.П000110004003);
		Окр_П000110005003 = Окр(ДанныеРаздел11.П000110005003);
		ДанныеРаздел11.П000110007003 = Макс(0,
			Окр_П002110013203 - Окр_П002110014203 - Окр_П002120016203
			- (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003));
		
		// Стр. 080 разд. 1.1 = (стр. 020 + стр. 040 - стр. 050) - ((стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд. 2.1.2),
		// если (стр. 132 - стр. 142) разд. 2.1.1 - стр. 162 разд. 2.1.2 - (стр. 020 + стр. 040 - стр. 050) < 0
		Окр_П002110013203 = Окр(ДанныеРаздел21.П002110013203);
		Окр_П002110014203 = Окр(ДанныеРаздел21.П002110014203);
		Окр_П002120016203 = Окр(ДанныеРаздел21.П002120016203);
		
		Окр_П000110002003 = Окр(ДанныеРаздел11.П000110002003);
		Окр_П000110004003 = Окр(ДанныеРаздел11.П000110004003);
		Окр_П000110005003 = Окр(ДанныеРаздел11.П000110005003);
		ДанныеРаздел11.П000110008003 = Макс(0,
			Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003
			- (Окр_П002110013203 - Окр_П002110014203 - Окр_П002120016203));
		
		// Стр. 100 разд. 1.1 = (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080),
		// если (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) >= 0.
		Окр_П002110013303 = Окр(ДанныеРаздел21.П002110013303);
		Окр_П002110014303 = Окр(ДанныеРаздел21.П002110014303);
		Окр_П002120016303 = Окр(ДанныеРаздел21.П002120016303);
	
		Окр_П000110002003 = Окр(ДанныеРаздел11.П000110002003);
		Окр_П000110004003 = Окр(ДанныеРаздел11.П000110004003);
		Окр_П000110005003 = Окр(ДанныеРаздел11.П000110005003);
		Окр_П000110007003 = Окр(ДанныеРаздел11.П000110007003);
		Окр_П000110008003 = Окр(ДанныеРаздел11.П000110008003);
		ДанныеРаздел11.П000110010003 = Макс(0,
			Окр_П002110013303 - Окр_П002110014303 - Окр_П002120016303
			- (Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003 + Окр_П000110007003 - Окр_П000110008003));
		
		// Стр. 110 разд. 1.1 = (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080)
		// - ((стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2),
		// если (стр. 133 - стр. 143) разд. 2.1.1 - стр. 163 разд. 2.1.2
		// - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) < 0.
		Окр_П002110013303 = Окр(ДанныеРаздел21.П002110013303);
		Окр_П002110014303 = Окр(ДанныеРаздел21.П002110014303);
		
		Окр_П000110002003 = Окр(ДанныеРаздел11.П000110002003);
		Окр_П000110004003 = Окр(ДанныеРаздел11.П000110004003);
		Окр_П000110005003 = Окр(ДанныеРаздел11.П000110005003);
		Окр_П000110007003 = Окр(ДанныеРаздел11.П000110007003);
		Окр_П000110008003 = Окр(ДанныеРаздел11.П000110008003);
		ДанныеРаздел11.П000110011003 = Макс(0,
			Окр_П000110002003 + Окр_П000110004003 - Окр_П000110005003 + Окр_П000110007003 - Окр_П000110008003
			- (Окр_П002110013303 - Окр_П002110014303 - Окр_П002120016303));
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		// Расчет данных раздела 2.2.
		
		// Стр. 240 = стр. 210 - стр. 220, если стр. 210 - стр. 220 > 0.
		Окр_П000220021003 = Окр(ДанныеРаздел22.П000220021003);
		Окр_П000220022003 = Окр(ДанныеРаздел22.П000220022003);
		ДанныеРаздел22.П000220024003 = Макс(0, Окр_П000220021003 - Окр_П000220022003);
		
		// Стр. 241 = стр. 211 - стр. 221, если стр. 211 - стр. 221 > 0.
		Окр_П000220021103 = Окр(ДанныеРаздел22.П000220021103);
		Окр_П000220022103 = Окр(ДанныеРаздел22.П000220022103);
		ДанныеРаздел22.П000220024103 = Макс(0, Окр_П000220021103 - Окр_П000220022103);
		
		// Стр. 242 = стр. 212 - стр. 222, если стр. 212 - стр. 222 > 0.
		Окр_П000220021203 = Окр(ДанныеРаздел22.П000220021203);
		Окр_П000220022203 = Окр(ДанныеРаздел22.П000220022203);
		ДанныеРаздел22.П000220024203 = Макс(0, Окр_П000220021203 - Окр_П000220022203);
		
		// Стр. 243 = стр. 213 - стр. 223 - стр. 230, если стр. 213 - стр. 223 - стр. 230 > 0.
		Окр_П000220021303 = Окр(ДанныеРаздел22.П000220021303);
		Окр_П000220022303 = Окр(ДанныеРаздел22.П000220022303);
		Окр_П000220023003 = Окр(ДанныеРаздел22.П000220023003);
		ДанныеРаздел22.П000220024303 = Макс(0,
			Окр_П000220021303 - Окр_П000220022303 - Окр_П000220023003);
		
		// Стр. 250 = стр. 220 - стр. 210, если стр. 210 < стр. 220.
		Окр_П000220021003 = Окр(ДанныеРаздел22.П000220021003);
		Окр_П000220022003 = Окр(ДанныеРаздел22.П000220022003);
		ДанныеРаздел22.П000220025003 = Макс(0, Окр_П000220022003 - Окр_П000220021003);
		
		// Стр. 251 = стр. 221 - стр. 211, если стр. 211 < стр. 221.
		Окр_П000220021103 = Окр(ДанныеРаздел22.П000220021103);
		Окр_П000220022103 = Окр(ДанныеРаздел22.П000220022103);
		ДанныеРаздел22.П000220025103 = Макс(0, Окр_П000220022103 - Окр_П000220021103);
		
		// Стр. 252 = стр. 222 - стр. 212, если стр. 212 < стр. 222.
		Окр_П000220021203 = Окр(ДанныеРаздел22.П000220021203);
		Окр_П000220022203 = Окр(ДанныеРаздел22.П000220022203);
		ДанныеРаздел22.П000220025203 = Макс(0, Окр_П000220022203 - Окр_П000220021203);
		
		// Стр. 253 = стр. 223 - стр. 213, если стр. 213 < стр. 223.
		Окр_П000220021303 = Окр(ДанныеРаздел22.П000220021303);
		Окр_П000220022303 = Окр(ДанныеРаздел22.П000220022303);
		ДанныеРаздел22.П000220025303 = Макс(0, Окр_П000220022303 - Окр_П000220021303);
		
		// Стр. 270 = стр. 240 х стр. 260 / 100.
		Окр_П000220024003 = Окр(ДанныеРаздел22.П000220024003);
		СтН_П000220026003 = ДанныеРаздел22.П000220026003;
		ДанныеРаздел22.П000220027003 = Окр_П000220024003 * СтН_П000220026003 / 100;
		
		// Стр. 271 = стр. 241 х стр. 261 / 100.
		Окр_П000220024103 = Окр(ДанныеРаздел22.П000220024103);
		СтН_П000220026103 = ДанныеРаздел22.П000220026103;
		ДанныеРаздел22.П000220027103 = Окр_П000220024103 * СтН_П000220026103 / 100;
		
		// Стр. 272 = стр. 242 х стр. 262 / 100.
		Окр_П000220024203 = Окр(ДанныеРаздел22.П000220024203);
		СтН_П000220026203 = ДанныеРаздел22.П000220026203;
		ДанныеРаздел22.П000220027203 = Окр_П000220024203 * СтН_П000220026203 / 100;
		
		// Стр. 273 = стр. 243 х стр. 263 / 100.
		Окр_П000220024303 = Окр(ДанныеРаздел22.П000220024303);
		СтН_П000220026303 = ДанныеРаздел22.П000220026303;
		ДанныеРаздел22.П000220027303 = Окр_П000220024303 * СтН_П000220026303 / 100;
		
		// Если ИП и (2015 <= отч. год <= 2023) и (строки 260-263 раздела 2.2 = 0),
		// то Стр. 280 = 0 (случай ИП с налоговыми каникулами).
		// Иначе Стр. 280 = стр. 213 х 1 / 100 (ставка налога 1%).
		Если ДопПараметры.ИП
			И Год(ДопПараметры.ДатаОкончания) >= 2015
			И Год(ДопПараметры.ДатаОкончания) <= 2023
			И ДанныеРаздел22.П000220026003 = 0
			И ДанныеРаздел22.П000220026103 = 0
			И ДанныеРаздел22.П000220026203 = 0
			И ДанныеРаздел22.П000220026303 = 0 Тогда
			ДанныеРаздел22.П000220028003 = 0;
		Иначе
			Окр_П000220021303 = Окр(ДанныеРаздел22.П000220021303);
			ДанныеРаздел22.П000220028003 = Окр_П000220021303 / 100;
		КонецЕсли;
		
		// Расчет данных раздела 1.2. по данным раздела 2.2.
		
		// Стр. 020 разд. 1.2 = стр. 270 разд. 2.2.
		ДанныеРаздел12.П000120002003 = ДанныеРаздел22.П000220027003;
		
		// Стр. 040 разд. 1.2 = стр. 271 разд. 2.2 - стр. 020,
		// если стр. 271 разд. 2.2 - стр. 020 >= 0.
		Окр_П000220027103 = Окр(ДанныеРаздел22.П000220027103);
		Окр_П000120002003 = Окр(ДанныеРаздел12.П000120002003);
		ДанныеРаздел12.П000120004003 = Макс(0, Окр_П000220027103 - Окр_П000120002003);
		
		// Стр. 050 разд. 1.2 = стр. 020 - стр. 271 разд. 2.2,
		// если стр. 271 разд. 2.2 - стр. 020 < 0.
		
		Окр_П000220027103 = Окр(ДанныеРаздел22.П000220027103);
		
		Окр_П000120002003 = Окр(ДанныеРаздел12.П000120002003);
		ДанныеРаздел12.П000120005003 = - Мин(0, Окр_П000220027103 - Окр_П000120002003);
		
		// Стр. 070 разд. 1.2 = стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050),
		// если стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050) >= 0.
		Окр_П000220027203 = Окр(ДанныеРаздел22.П000220027203);
		
		Окр_П000120002003 = Окр(ДанныеРаздел12.П000120002003);
		Окр_П000120004003 = Окр(ДанныеРаздел12.П000120004003);
		Окр_П000120005003 = Окр(ДанныеРаздел12.П000120005003);
		ДанныеРаздел12.П000120007003 = Макс(0,
			Окр_П000220027203 - (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003));
		
		// Стр. 080 разд. 1.2 = (стр. 020 + стр. 040 - стр. 050) - стр. 272 разд. 2.2,
		// если стр. 272 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050) < 0.
		Окр_П000220027203 = Окр(ДанныеРаздел22.П000220027203);
		
		Окр_П000120002003 = Окр(ДанныеРаздел12.П000120002003);
		Окр_П000120004003 = Окр(ДанныеРаздел12.П000120004003);
		Окр_П000120005003 = Окр(ДанныеРаздел12.П000120005003);
		ДанныеРаздел12.П000120008003 = - Мин(0,
			Окр_П000220027203 - (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003));
		
		// Стр. 100 разд. 1.2 = стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080),
		// если стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) >= 0
		// и стр. 273 разд. 2.2 >= стр. 280 разд. 2.2.
		Окр_П000220027303 = Окр(ДанныеРаздел22.П000220027303);
		Окр_П000220028003 = Окр(ДанныеРаздел22.П000220028003);
		Окр_П000120002003 = Окр(ДанныеРаздел12.П000120002003);
		Окр_П000120004003 = Окр(ДанныеРаздел12.П000120004003);
		Окр_П000120005003 = Окр(ДанныеРаздел12.П000120005003);
		Окр_П000120007003 = Окр(ДанныеРаздел12.П000120007003);
		Окр_П000120008003 = Окр(ДанныеРаздел12.П000120008003);
		Если Окр_П000220027303 >= Окр_П000220028003 Тогда
			ДанныеРаздел12.П000120010003 = Макс(0, Окр_П000220027303
				- (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003));
		Иначе
			ДанныеРаздел12.П000120010003 = 0;
		КонецЕсли;
		
		// Стр. 110 разд. 1.2 = (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 273 разд. 2.2,
		// если стр. 273 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) < 0
		// и стр. 273 разд. 2.2 >= стр. 280 разд. 2.2
		// или (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) - стр. 280 разд. 2.2,
		// если стр. 273 разд. 2.2 < стр. 280 разд. 2.2
		// и (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080) > стр. 280 разд. 2.2.
		Окр_П000220027303 = Окр(ДанныеРаздел22.П000220027303);
		Окр_П000220028003 = Окр(ДанныеРаздел22.П000220028003);
		
		Окр_П000120002003 = Окр(ДанныеРаздел12.П000120002003);
		Окр_П000120004003 = Окр(ДанныеРаздел12.П000120004003);
		Окр_П000120005003 = Окр(ДанныеРаздел12.П000120005003);
		Окр_П000120007003 = Окр(ДанныеРаздел12.П000120007003);
		Окр_П000120008003 = Окр(ДанныеРаздел12.П000120008003);
		Если Окр_П000220027303 >= Окр_П000220028003 Тогда
			ДанныеРаздел12.П000120011003 = - Мин(0,
				Окр_П000220027303
				- (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003));
		Иначе
			ДанныеРаздел12.П000120011003 = Макс(0,
				(Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003)
				- Окр_П000220028003);
		КонецЕсли;
		
		// Стр. 120 разд. 1.2 = стр. 280 разд. 2.2 - (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080),
		// если стр. 280 разд. 2.2 > стр. 273 разд. 2.2
		// и стр. 280 разд. 2.2 > (стр. 020 + стр. 040 - стр. 050 + стр. 070 - стр. 080).
		Окр_П000220027303 = Окр(ДанныеРаздел22.П000220027303);
		Окр_П000220028003 = Окр(ДанныеРаздел22.П000220028003);
		
		Окр_П000120002003 = Окр(ДанныеРаздел12.П000120002003);
		Окр_П000120004003 = Окр(ДанныеРаздел12.П000120004003);
		Окр_П000120005003 = Окр(ДанныеРаздел12.П000120005003);
		Окр_П000120007003 = Окр(ДанныеРаздел12.П000120007003);
		Окр_П000120008003 = Окр(ДанныеРаздел12.П000120008003);
		Если Окр_П000220028003 > Окр_П000220027303 Тогда
			ДанныеРаздел12.П000120012003 = Макс(0, Окр_П000220028003
				- (Окр_П000120002003 + Окр_П000120004003 - Окр_П000120005003 + Окр_П000120007003 - Окр_П000120008003));
		Иначе
			ДанныеРаздел12.П000120012003 = 0;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		// Для этого раздела при автоформировании не требуется расчет в строках многострочной части,
		// поскольку эти строки могут быть заполнены только интерактивно.
		
		// Расчет колонок в строке "Итого по отчету" раздела 3.
		Колонка3 = 0;
		Колонка4 = 0;
		Колонка6 = 0;
		Колонка7 = 0;
		
		Для каждого ДопСтрока Из РазделыОтчета.Раздел3.ДанныеДопСтрок Цикл
			
			Колонка3 = Колонка3 + Окр(ДопСтрока.П000030000103);
			Колонка4 = Колонка4 + Окр(ДопСтрока.П000030000104);
			Колонка6 = Колонка6 + Окр(ДопСтрока.П000030000106);
			Колонка7 = Колонка7 + Окр(ДопСтрока.П000030000107);
			
		КонецЦикла;
		
		ДанныеРаздел3.Вставить("П000030000203", Колонка3);
		ДанныеРаздел3.Вставить("П000030000204", Колонка4);
		ДанныеРаздел3.Вставить("П000030000206", Колонка6);
		ДанныеРаздел3.Вставить("П000030000207", Колонка7);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетУСНФормаОтчета2021Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ТитульныйДанные = РазделыОтчета.Титульный.Данные;
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, СтрокаСведений);
	
	ТитульныйДанные.Вставить("ИНН", СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ТитульныйДанные.Вставить("КПП", СокрЛП(СведенияОбОрганизации.КППЮЛ));
	
	КодНО = СведенияОбОрганизации.КодНО;
	Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
		КодНО = " " + КодНО;
	КонецЦикла;
	ТитульныйДанные.Вставить("НалоговыйОрган", КодНО);
	
	ПоМесту = "   ";
	Если СведенияОбОрганизации.ТипНП = 1 Тогда
		ПоМесту = "210";
	ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
		ПоМесту = "120";
	КонецЕсли;
	ТитульныйДанные.Вставить("ПоМесту", ПоМесту);
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
	ТитульныйДанные.Вставить("НаимОрг",
	?(ЭтоИП, СокрЛП(СведенияОбОрганизации.ФИО), СокрЛП(СведенияОбОрганизации.НаимЮлПол)));
	
	ТитульныйДанные.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
	// Код ОКТМО в разделах
	РазделыОтчета.Раздел11.Данные.Вставить("П000110001003", СокрЛП(СведенияОбОрганизации.ОКТМО));
	РазделыОтчета.Раздел12.Данные.Вставить("П000120001003", СокрЛП(СведенияОбОрганизации.ОКТМО));
	
	ЗаполнитьСведенияОПодписантах(Организация, РазделыОтчета, ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизацииРеглОтчетУСНФормаОтчета2015Кв1(Организация, РазделыОтчета, ДатаПодписи, ДатаОкончания)
	
	ТитульныйДанные = РазделыОтчета.Титульный.Данные;
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКАТО, ОКТМО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, СтрокаСведений);
	
	ТитульныйДанные.Вставить("ИНН", СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ТитульныйДанные.Вставить("КПП", СокрЛП(СведенияОбОрганизации.КППЮЛ));
	
	КодНО = СведенияОбОрганизации.КодНО;
	Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
		КодНО = " " + КодНО;
	КонецЦикла;
	ТитульныйДанные.Вставить("НалоговыйОрган", КодНО);
	
	ПоМесту = "   ";
	Если СведенияОбОрганизации.ТипНП = 1 Тогда
		ПоМесту = "210";
	ИначеЕсли СведенияОбОрганизации.ТипНП = 3 Тогда
		ПоМесту = "120";
	КонецЕсли;
	ТитульныйДанные.Вставить("ПоМесту", ПоМесту);
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
	ТитульныйДанные.Вставить("НаимОрг", ?(ЭтоИП,
		СокрЛП(СведенияОбОрганизации.ФИО),
		СокрЛП(СведенияОбОрганизации.НаимЮлПол)));
	
	ТитульныйДанные.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
	// Код ОКВЭД или ОКВЭД2
	ТитульныйДанные.Вставить("ОКВЭД", "");
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация", Организация);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", Число(СокрЛП(ТитульныйДанные.НомерКорректировки)));
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаОкончания);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТитульныйДанные.ОКВЭД);
	
	// Код ОКТМО в разделах
	РазделыОтчета.Раздел11.Данные.Вставить("П000110001003", СокрЛП(СведенияОбОрганизации.ОКТМО));
	РазделыОтчета.Раздел12.Данные.Вставить("П000120001003", СокрЛП(СведенияОбОрганизации.ОКТМО));
	
	ЗаполнитьСведенияОПодписантах(Организация, РазделыОтчета, ДатаПодписи);
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетУСНФормаОтчета2021Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета, ДопПараметры)
	
	Если НаимРаздела = "Раздел21" Тогда
		
		Если ДопПараметры.ОпределятьТрудНаемныхРабочих И ДопПараметры.ИП
			И НЕ ДопПараметры.ИПИспользуетТрудНаемныхРаботников Тогда
			ТабличныйДокумент.Области.П002110010203.Значение = "2";
		Иначе
			ТабличныйДокумент.Области.П002110010203.Значение = "1";
		КонецЕсли;
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	ИначеЕсли НаимРаздела = "Раздел3" Тогда
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеРазделаРеглОтчетУСНФормаОтчета2015Кв1(НаимРаздела, ТабличныйДокумент, РазделыОтчета, ДопПараметры)
	
	Если НаимРаздела = "Раздел21" Тогда
		
		Если ДопПараметры.ОпределятьТрудНаемныхРабочих И ДопПараметры.ИП
			И НЕ ДопПараметры.ИПИспользуетТрудНаемныхРаботников Тогда
			ТабличныйДокумент.Области.П002110010203.Значение = "2";
		Иначе
			ТабличныйДокумент.Области.П002110010203.Значение = "1";
		КонецЕсли;
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	ИначеЕсли НаимРаздела = "Раздел3" Тогда
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		ОбновитьСтруктуруМногострочногоРаздела(РазделыОтчета[НаимРаздела].ДанныеДопСтрок, ТабличныйДокумент);
		
	Иначе
		
		РазделыОтчета[НаимРаздела].Данные = СобратьДанные(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьРеглОтчетУСНФормаОтчета2021Кв1(ПараметрыЗаписи)
	
	ИсточникОтчета        = ПараметрыЗаписи.ИсточникОтчета;
	ИмяФормыОтчета        = ПараметрыЗаписи.ИмяФормыОтчета;
	Организация           = ПараметрыЗаписи.Организация;
	ДатаНачала            = ПараметрыЗаписи.ДатаНачала;
	ДатаОкончания         = ПараметрыЗаписи.ДатаОкончания;
	РазделыОтчета         = ПараметрыЗаписи.РазделыОтчета;
	ДанныеРеглОтчета      = ПараметрыЗаписи.ДанныеРеглОтчета;
	СохраняемыйРеглОтчет  = ПараметрыЗаписи.СсылкаНаСохрРеглОтчет;
	
	Если СохраняемыйРеглОтчет <> Неопределено Тогда
		
		Если ТипЗнч(СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НЕ СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = СохраняемыйРеглОтчет.ПолучитьОбъект();
			ДокументРегламентированныйОтчет.Заблокировать();
			
		ИначеЕсли ТипЗнч(СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = СохраняемыйРеглОтчет;
			ДокументРегламентированныйОтчет.Заблокировать();
			
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании декларации по УСН'"),
						ТипЗнч(СохраняемыйРеглОтчет)));
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "Декларация по УСН";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида
		= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	РазделыОтчета.Титульный.Данные.Период      = "34";
	РазделыОтчета.Титульный.Данные.ОтчетГод    = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	СписокСохранения = Новый Структура;
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого Раздел Из РазделыОтчета Цикл
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы",                   ДанныеРеглОтчета.ВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",              ДанныеРеглОтчета.ФлПодсчетСтраниц);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",           ДанныеРеглОтчета.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",                ДанныеРеглОтчета.Автозаполнение);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена",   ДанныеРеглОтчета.ПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", Ложь);
	Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		СписокСохранения.Вставить("СохранятьРасшифровку", Истина);
		СписокСохранения.Вставить("Расшифровка",
		ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки));
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьРеглОтчетУСНФормаОтчета2015Кв1(ПараметрыЗаписи)
	
	ИсточникОтчета        = ПараметрыЗаписи.ИсточникОтчета;
	ИмяФормыОтчета        = ПараметрыЗаписи.ИмяФормыОтчета;
	Организация           = ПараметрыЗаписи.Организация;
	ДатаНачала            = ПараметрыЗаписи.ДатаНачала;
	ДатаОкончания         = ПараметрыЗаписи.ДатаОкончания;
	РазделыОтчета         = ПараметрыЗаписи.РазделыОтчета;
	ДанныеРеглОтчета      = ПараметрыЗаписи.ДанныеРеглОтчета;
	СохраняемыйРеглОтчет  = ПараметрыЗаписи.СсылкаНаСохрРеглОтчет;
	
	Если СохраняемыйРеглОтчет <> Неопределено Тогда
		
		Если ТипЗнч(СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НЕ СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = СохраняемыйРеглОтчет.ПолучитьОбъект();
			ДокументРегламентированныйОтчет.Заблокировать();
			
		ИначеЕсли ТипЗнч(СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = СохраняемыйРеглОтчет;
			ДокументРегламентированныйОтчет.Заблокировать();
			
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании декларации по УСН'"),
						ТипЗнч(СохраняемыйРеглОтчет)));
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		ДокументРегламентированныйОтчет.Заблокировать();
		ДокументРегламентированныйОтчет.Дата = ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	Вариант = ДанныеРеглОтчета.ВидДокумента * ДанныеРеглОтчета.НомерКорректировки;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = "Декларация по УСН";
	ДокументРегламентированныйОтчет.ДатаНачала               = ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ДатаОкончания;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ДанныеРеглОтчета.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ДанныеРеглОтчета.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ДанныеРеглОтчета.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ДанныеРеглОтчета.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ДанныеРеглОтчета.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ДанныеРеглОтчета.КПП;
	ДокументРегламентированныйОтчет.Вид                      = Вариант;
	ДокументРегламентированныйОтчет.ПредставлениеВида
		= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	
	РазделыОтчета.Титульный.Данные.Период      = "34";
	РазделыОтчета.Титульный.Данные.ОтчетГод    = Формат(ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	СписокСохранения = Новый Структура;
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета);
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого Раздел Из РазделыОтчета Цикл
		Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
			ДанныеМногострочныхРазделов.Вставить(Раздел.Значение.ИдентификаторДопСтрок, Раздел.Значение.ДанныеДопСтрок);
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеРеглОтчета.ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы",                   ДанныеРеглОтчета.ВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",              ДанныеРеглОтчета.ФлПодсчетСтраниц);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",           ДанныеРеглОтчета.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",                ДанныеРеглОтчета.Автозаполнение);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена",   ДанныеРеглОтчета.ПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", Ложь);
	Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		СписокСохранения.Вставить("СохранятьРасшифровку", Истина);
		СписокСохранения.Вставить("Расшифровка",
		ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки));
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ДанныеРеглОтчета.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ДокументРегламентированныйОтчет.Разблокировать();
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Процедура ФормироватьСтруктуруСтраницРеглОтчетУСНФормаОтчета2021Кв1(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

Процедура ФормироватьСтруктуруСтраницРеглОтчетУСНФормаОтчета2015Кв1(ДеревоСтраницОтчета)
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();;
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

Процедура СкрытьРазделыПоОбъектуНалогообложенияРеглОтчетУСНФормаОтчета2021Кв1(Организация, ПериодОтчета, ДеревоСтраницОтчета)
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ОбъектНалогообложенияУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ПериодОтчета, Сведения);
	
	ВидОбъектаНалогообложения = "";
	
	ОргСведения.Свойство("ОбъектНалогообложенияУСН", ВидОбъектаНалогообложения);
	
	Если ВидОбъектаНалогообложения = 1 Тогда
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел12", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел22", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
	ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел11", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел21", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьРазделыПоОбъектуНалогообложенияРеглОтчетУСНФормаОтчета2015Кв1(Организация, ПериодОтчета, ДеревоСтраницОтчета)
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ОбъектНалогообложенияУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ПериодОтчета, Сведения);
	
	ВидОбъектаНалогообложения = "";
	
	ОргСведения.Свойство("ОбъектНалогообложенияУСН", ВидОбъектаНалогообложения);
	
	Если ВидОбъектаНалогообложения = 1 Тогда
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел12", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел22", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
	ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел11", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
		НастройкиСтраницыРаздела = ДеревоСтраницОтчета.Строки.Найти("Раздел21", "ИмяСтраницы");
		Если НастройкиСтраницыРаздела <> Неопределено Тогда
			НастройкиСтраницыРаздела.ВыводНаПечать    = 0;
			НастройкиСтраницыРаздела.ПоказатьСтраницу = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СформироватьАвтоматическиРеглОтчетСтатистикаФорма1Предприниматель(ПараметрыАвтоФормирования, КорректирующийОтчет) Экспорт
	
	ОтчетОбъект = ПараметрыАвтоФормирования.СсылкаНаСохрРеглОтчет;
	Если ТипЗнч(ОтчетОбъект) = Тип("ДокументСсылка.РегламентированныйОтчет")
	   И Не ОтчетОбъект.Пустая() Тогда
		ОтчетОбъект = ПараметрыАвтоФормирования.СсылкаНаСохрРеглОтчет.ПолучитьОбъект();
	КонецЕсли;
	Если ТипЗнч(ОтчетОбъект) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
		
		ОтчетОбъект.Заблокировать();
		ТекущиеДанные = ОтчетОбъект.ДанныеОтчета.Получить();
		
	Иначе
		
		ОтчетОбъект = Документы.РегламентированныйОтчет.СоздатьДокумент();
		ОтчетОбъект.Заблокировать();
		ОтчетОбъект.Дата = ПараметрыАвтоФормирования.ДатаОкончания;
		ОтчетОбъект.УстановитьВремя();
		ОтчетОбъект.УстановитьНовыйНомер();
		ТекущиеДанные = Неопределено;
		
	КонецЕсли;
	ВнешниеДанные = ПараметрыАвтоФормирования.ВнешниеДанные;
	
	ОтчетОбъект.ВидОтчетности      = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ОтчетОбъект.ИсточникОтчета     = ПараметрыАвтоФормирования.ИсточникОтчета;
	ОтчетОбъект.ВыбраннаяФорма     = ПараметрыАвтоФормирования.ИмяФормыОтчета;
	ОтчетОбъект.НаименованиеОтчета = НСтр("ru = 'Статистика: Форма 1-предприниматель'");
	ОтчетОбъект.ПредставлениеВида  = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(
		?(Не КорректирующийОтчет, 0, ВнешниеДанные.ПоказателиОтчета.ПолеТабличногоДокументаФормаОтчета.НомерКорректировки));
	ОтчетОбъект.ФорматВыгрузки     = "Автоматически";
	ОтчетОбъект.ДатаНачала         = ПараметрыАвтоФормирования.ДатаНачала;
	ОтчетОбъект.ДатаОкончания      = ПараметрыАвтоФормирования.ДатаОкончания;
	ОтчетОбъект.Периодичность      = Перечисления.Периодичность.Год;
	Если Не ЗначениеЗаполнено(ОтчетОбъект.ДатаПодписи) Тогда
		ОтчетОбъект.ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОтчетОбъект.Организация = ПараметрыАвтоФормирования.Организация;
	Если ЗначениеЗаполнено(ПараметрыАвтоФормирования.КПП) Тогда
		ОтчетОбъект.КПП = ПараметрыАвтоФормирования.КПП;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыАвтоФормирования.НалоговыйОрган) Тогда
		ОтчетОбъект.КодНалоговогоОргана = ПараметрыАвтоФормирования.НалоговыйОрган;
	КонецЕсли;
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура;
	
	СписокСохранения.Вставить("ПоказателиОтчета",            ВнешниеДанные.ПоказателиОтчета);
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ВнешниеДанные.ДанныеМногострочныхРазделов);
	
	СписокСохранения.Вставить("Адрес_JSON",  ВнешниеДанные.Адрес_JSON);
	СписокСохранения.Вставить("Адреса_JSON", ВнешниеДанные.Адреса_JSON);
	
	СписокСохранения.Вставить("ВерсияФормы",                   ВнешниеДанные.ВерсияФормы);
	СписокСохранения.Вставить("Авторасчет",                    ВнешниеДанные.Авторасчет);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",           ВнешниеДанные.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ВнешниеДанные.ДанныеВариантовАвтоЗаполнения);
	Если ТекущиеДанные <> Неопределено Тогда
		
		СписокСохранения.Авторасчет                    = ТекущиеДанные.Авторасчет;
		СписокСохранения.ФлОтклВыборЗначений           = ТекущиеДанные.ФлОтклВыборЗначений;
		СписокСохранения.ДанныеВариантовАвтоЗаполнения = ТекущиеДанные.ДанныеВариантовАвтоЗаполнения;
		
	КонецЕсли;
	
	ОтчетОбъект.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	Попытка
		
		ОтчетОбъект.Записать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыАвтоФормирования, ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ОтчетОбъект.Разблокировать();
	
	ПараметрыАвтоФормирования.РезультатАвтоформирования.Добавить(
		НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ru='Статистика: Форма 1-предприниматель (Организация: %1, ОКТМО: %4) сформирована.'",
			СокрЛП(ПараметрыАвтоФормирования.Организация), СокрЛП(ПараметрыАвтоФормирования.ОКТМО))));
	
	Возврат ОтчетОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьСведенияОПодписантах(Организация, РазделыОтчета, ДатаПодписи, ПереопределяемыеИменаПоказателей = Неопределено)
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	ИмяПоказателяКодНО = "НалоговыйОрган";
	ИмяПоказателяКПП = "КПП";
	Если ТипЗнч(ПереопределяемыеИменаПоказателей) = Тип("Структура") Тогда
		Если ПереопределяемыеИменаПоказателей.Свойство("ИмяПоказателяКодНО") Тогда
			ИмяПоказателяКодНО = ПереопределяемыеИменаПоказателей.ИмяПоказателяКодНО;
		КонецЕсли;
		Если ПереопределяемыеИменаПоказателей.Свойство("ИмяПоказателяКПП") Тогда
			ИмяПоказателяКПП = ПереопределяемыеИменаПоказателей.ИмяПоказателяКПП;
		КонецЕсли;
	КонецЕсли;
	КодНО = СокрЛП(РазделыОтчета.Титульный.Данные[ИмяПоказателяКодНО]);
	КПП = СокрЛП(РазделыОтчета.Титульный.Данные[ИмяПоказателяКПП]);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
			
	Иначе
			
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя  = СведенияОПредставителе.ДокументПредставителя;
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ПрПодп = ТипПодписанта;
	РазделыОтчета.Титульный.Данные.ОргПодписант = Подписант;
	РазделыОтчета.Титульный.Данные.ОргУп = НаименованиеОрганизацииПредставителя;
	РазделыОтчета.Титульный.Данные.ДокУпПред = ДокументПредставителя;
			
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки(ИсточникОтчета, ИмяФормыОтчета, ИмяМакета, СтруктураВариантыЗаполнения)
	
	МакетСоставаПоказателей = Отчеты[ИсточникОтчета].ПолучитьМакет(ИмяМакета);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
				МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ? (НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если НЕ Раздел.Значение.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеСтруктурыДанных(ИсточникОтчета, ИмяФормыОтчета, РазделыОтчета, ДопПараметры = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если (НЕ Раздел.Значение.МногостраничностьВРазделе
		   И Раздел.Значение.Данные.Количество() = 0)
		   ИЛИ (Раздел.Значение.МногостраничностьВРазделе
		   И Раздел.Значение.Данные[0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(Отчеты[ИсточникОтчета].ПолучитьМакет(ИмяФормыОтчета + "_" + Раздел.Ключ));
			
			Если ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда	
				
				Если ИмяФормыОтчета = "ФормаОтчета2010Кв4" Тогда
					СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2010Кв4(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2011Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2011Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2012Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2012Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2013Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2013Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2014Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2014Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетРСВ1ФормаОтчета2015Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				КонецЕсли;
				
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчет6НДФЛ" Тогда
				
				Если ИмяФормыОтчета = "ФормаОтчета2016Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчет6НДФЛФормаОтчета2016Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2017Кв4" Тогда
					СохранитьДанныеРазделаРеглОтчет6НДФЛФормаОтчета2017Кв4(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета);
				КонецЕсли;
				
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход" Тогда
				
				Если ИмяФормыОтчета = "ФормаОтчета2016Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2016Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета, ДопПараметры);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2017Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2017Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета, ДопПараметры);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2018Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета, ДопПараметры);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв3" Тогда
					СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2018Кв3(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета, ДопПараметры);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2018Кв4" Тогда
					СохранитьДанныеРазделаРеглОтчетЕНВДФормаОтчета2018Кв4(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета, ДопПараметры);
				КонецЕсли;
				
			ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
				
				Если ИмяФормыОтчета = "ФормаОтчета2021Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетУСНФормаОтчета2021Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета, ДопПараметры);
				ИначеЕсли ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
					СохранитьДанныеРазделаРеглОтчетУСНФормаОтчета2015Кв1(Раздел.Ключ, ТабличныйДокумент, РазделыОтчета, ДопПараметры);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтруктуруМногострочногоРаздела(ДанныеДопСтрок, ТабличныйДокумент)
	
	Для НомСтр = 1 По ДанныеДопСтрок.Количество() Цикл
		
		ТекСтрокаТаблицы = ДанныеДопСтрок[НомСтр - 1];
		
		Для Каждого Колонка Из ДанныеДопСтрок.Колонки Цикл
			
			ИмяЯчейки     = Колонка.Имя + "_" + НомСтр;
			ОбластьЯчейки = ТабличныйДокумент.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[Колонка.Имя] = ЗначениеЯчейки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СуммаПоказателяПоВсемСтраницам(ДанныеРаздела, Показатель, Условия = Неопределено)
	
	Результат = 0;
	
	Для Инд = 0 По ДанныеРаздела.Количество() - 1 Цикл
		
		Данные = ДанныеРаздела[Инд].Данные;
		
		Если НЕ Данные = Неопределено Тогда
			
			Если ((Условия = Неопределено) ИЛИ ВыполняютсяУсловияЗаполнения(Данные, Условия)) Тогда
				
				Результат = Результат + Данные[Показатель];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(СтруктураПриемник, СтруктураИсточник)
	
	Если ТипЗнч(СтруктураПриемник) <> Тип("Структура")
	 ИЛИ ТипЗнч(СтруктураИсточник) <> Тип("Структура") Тогда	
		// Ничего не получится
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементИсточника Из СтруктураИсточник Цикл
		
		ЗначениеПриемника = Неопределено;
		
		Если СтруктураПриемник.Свойство(ЭлементИсточника.Ключ, ЗначениеПриемника) Тогда
			
			Если ТипЗнч(ЗначениеПриемника) = Тип("Структура")
				И ТипЗнч(ЭлементИсточника.Значение) = Тип("Структура") Тогда
				// Вложенные структуры заполняем рекурсивно.
				ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(ЗначениеПриемника, ЭлементИсточника.Значение);
			Иначе
				ЗначениеПриемника = ЭлементИсточника.Значение;
			КонецЕсли;
			
			СтруктураПриемник.Вставить(ЭлементИсточника.Ключ, ЗначениеПриемника);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполняютсяУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	Для каждого Условие Из Условия Цикл
		Показатель = Условие.Ключ;
		ТребЗначение = Условие.Значение;
		ЗначениеПоказателя = СтруктураДанных[Показатель];
		Если ТребЗначение = Неопределено Тогда
			Результат = (ЗначениеПоказателя <> "");
		Иначе
			Результат = (ЗначениеПоказателя = ТребЗначение);
		КонецЕсли;
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СобратьДанные(ТабличныйДокумент)
	
	СтруктураДанных = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];
		
		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		 ИЛИ НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ОкруглитьЧислоПоФормату(СтруктураРеквизитов, ИсходноеЧисло)
	
	Делитель = СтруктураРеквизитов.СоответствиеЕдиницыИзмеренияДелителю["Окр"
		+ СтрЗаменить(СтруктураРеквизитов.ЕдиницаИзмерения, " ", "")];
	
	ОкругленноеЧисло = Окр(ИсходноеЧисло / Делитель, СтруктураРеквизитов.ТочностьЕдиницыИзмерения) * Делитель;
	
	Возврат ОкругленноеЧисло;
	
КонецФункции

Функция СтруктураРеквизитовОтчета(ДанныеОтчета = Неопределено)
	
	СтруктураРеквизитов = Новый Структура;
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитов.Вставить("СоответствиеЕдиницыИзмеренияДелителю", СоответствиеЕдиницыИзмеренияДелителю);
	
	Если ДанныеОтчета = Неопределено Тогда 
		СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
		СтруктураРеквизитов.Вставить("ТочностьЕдиницыИзмерения", 0);
	Иначе
		СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", ДанныеОтчета.ЕдиницаИзмерения);
		СтруктураРеквизитов.Вставить("ТочностьЕдиницыИзмерения", ДанныеОтчета.ТочностьЕдиницыИзмерения);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция РелевантнаяДатаОкончанияОтчетногоПериода(СвойстваОтчета)
	
	Если ТипЗнч(СвойстваОтчета.ДокСсылка) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат НачалоДня(СвойстваОтчета.ДатаОкончанияОП);
	КонецЕсли;
	
	ИсточникОтчета = РегламентированнаяОтчетностьВызовСервера.ИсточникРегламентированногоОтчета(СвойстваОтчета.ДокСсылка);
	Если СтрНайти(ИсточникОтчета, "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников") = 0 Тогда
		Возврат НачалоДня(СвойстваОтчета.ДатаОкончанияОП);
	КонецЕсли;
	
	ДанныеОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваОтчета.ДокСсылка, "ДанныеОтчета");
	ПоказателиТабличногоДокумента = ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПоказателиТабличногоДокумента, "ДатаПериод") Тогда
		Возврат НачалоДня(НачалоДня(ПоказателиТабличногоДокумента.ДатаПериод) - 1);
	Иначе
		Возврат НачалоДня(СвойстваОтчета.ДатаОкончанияОП);
	КонецЕсли;
	
КонецФункции

Процедура НайтиОбластиТабличногоДокументаПоНачалуИмени(ИменаОбластей, ТабличныйДокумент, Знач НачалоИмени, Исключения = Неопределено)
	
	НачалоИмени = ВРег(НачалоИмени);
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		
		Если Исключения <> Неопределено Тогда
			Если Исключения.Найти(Область.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ВРег(Область.Имя), НачалоИмени) Тогда
			Если ИменаОбластей.Найти(Область.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИменаОбластей.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
