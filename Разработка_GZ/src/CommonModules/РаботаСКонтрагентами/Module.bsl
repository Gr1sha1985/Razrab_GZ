///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Контрагенты

// Возвращает сведения о юридическом лице из реестров ЕГРЮЛ, РАФП.
//
// Параметры:
//	ИНН - Строка - ИНН юридического лица.
//
// Возвращаемое значение:
//	- Структура - сведения о юридическом лице:
//	* ИНН - Строка - ИНН юридического лица.
//	* ЕГРЮЛ - Структура, Неопределено - сведения из ЮГРЮЛ. Поля:
//		** КПП - Строка - КПП юридического лица.
//		** Наименование - Строка - представление юридического лица в учетной программе.
//		** НаименованиеПолное - Строка - полное наименование юридического лица.
//		** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица.
//		** РегистрационныйНомер - Строка - ОГРН юридического лица.
//		** ПравоваяФорма - Строка, Неопределено - правовая форма юридического лица.
//		** Статус - Структура - текущий статус юридического лица.
//			Поля:
//			*** Код - Строка - код статуса;
//			*** Наименование - Строка - наименование статуса;
//		** РегистрирующийОрган - Структура - орган, зарегистрировавший юридическое лицо.
//			Поля:
//			*** Код - Строка - код органа;
//			*** Наименование - Строка - наименование органа;
//		** ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//			*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			*** Представление - Строка - представление адреса.
//			*** Комментарий - Строка - произвольный комментарий.
//			*** Корректный - Булево - адрес является корректным по данным ФИАС;
//		** Телефон - Структура, Неопределено - данные о телефоне.
//			*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			*** Представление - Строка - представление телефона.
//			*** Комментарий - Строка - произвольный комментарий.
//		** РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//			*** Код - Строка - код налогового органа.
//			*** Наименование - Строка - наименование налогового органа.
//			*** ОКТМО - Строка - код ОКТМО налогового органа.
//			*** ОКАТО - Строка - код ОКАТО налогового органа.
//			*** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//		** ДатаРегистрации - Дата - дата регистрации юридического лица.
//		** РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//			*** РегистрационныйНомерПФР - Строка - регистрационный номер юридического лица в ПФР.
//			*** КодОрганаПФР - Строка - код органа ПФР.
//			*** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//			*** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//		** РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//			*** РегистрационныйНомерФСС - Строка - регистрационный номер юридического лица в ФСС.
//			*** КодПодчиненности - Строка - код подчиненности органа ФСС.
//			*** КодОрганаФСС - Строка - код органа ФСС.
//			*** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//			*** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//		** Руководители - ТаблицаЗначений - сведения о руководителях. Колонки:
//			*** Должность - Строка - должность руководителя.
//			*** Фамилия - Строка - фамилия руководителя.
//			*** Имя - Строка - имя руководителя.
//			*** Отчество - Строка - отчество руководителя.
//			*** Представление - Строка - ФИО руководителя.
//			*** ИНН - Строка - ИНН руководителя.
//			*** ДатаЗаписи - Дата - дата записи о руководителе.
//		** ВидДеятельности - Структура - описание вида экономической деятельности. Поля:
//			*** Код - Строка - код вида деятельности;
//			*** Наименование - Строка- наименование вида деятельности;
//			*** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование;
//						   Значения: "ОКВЭД", "ОКВЭД2"
//		** ОткрытыеГосударственныеДанныеФНС - ТаблицаЗначений - открытые данные. Колонки:
//			*** Год - Число - год, за который указаны данные;
//			*** КоличествоСотрудников - Число, Неопределено - количество сотрудников;
//			*** УчастиеВКГН - Строка, Неопределено - участие в консолидированной группе налогоплательщиков;
//			*** НалогообложениеЕСХН, Неопределено - Булево - Истина, если применяется тип налогообложения ЕСХН;
//			*** НалогообложениеУСН, Неопределено - Булево - Истина, если применяется тип налогообложения УСН;
//			*** НалогообложениеЕНВД, Неопределено - Булево - Истина, если применяется тип налогообложения ЕНВД;
//			*** НалогообложениеСРП, Неопределено - Булево - Истина, если применяется тип налогообложения СРП;
//		** ИсторияРеквизитов - Структура - история изменения реквизитов юридического лица.
//			*** КПП - ТаблицаЗначений - история изменения значения реквизита КПП;
//				Колонки:
//				**** Дата - Дата - дата изменения КПП;
//				**** Значение - Строка - значение реквизита КПП;
//			*** Наименование - ТаблицаЗначений - история изменения наименования;
//				Колонки:
//				**** Дата - Дата - дата изменения наименования;
//				**** НаименованиеПолное - Строка - полное наименование юридического лица;
//				**** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица;
//			*** Адрес - ТаблицаЗначений - история изменения адреса;
//				Колонки:
//				**** Дата - Дата - дата изменения адреса;
//				**** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				**** Представление - Строка - представление адреса;
//				**** Комментарий - Строка - произвольный комментарий;
//			*** Статус - ТаблицаЗначений - история изменения статуса;
//				Колонки:
//				**** Дата - Дата - дата изменения наименования;
//				**** Код - Строка - код статуса;
//				**** Наименование - Строка - наименование статуса;
//			*** РеквизитыДиректора - ТаблицаЗначений - история изменения реквизитов директора;
//				Колонки:
//				**** Дата - Дата - дата изменения реквизитов директора;
//				**** ДатаОкончания - Дата - дата окончания действия реквизитов.
//					Пустая дата, если директор действующий;
//				**** ИНН - Строка - ИНН;
//				**** Фамилия - Строка - фамилия директора;
//				**** Имя - Строка - имя;
//				**** Отчество - Строка - отчество;
//				**** ВидДолжности - Строка - вид должности;
//				**** НаименованиеДолжности - Строка - наименование должности;
//	* РАФП - ТаблицаЗначений - сведения из РАФП. Колонки:
//			** КПП - Строка - КПП юридического лица;
//			** ВидОбособленногоПодразделения - Строка - вид обособленного подразделения;
//			** НаименованиеПолное - Строка - полное наименование представительства;
//			** РегистрацияВНалоговомОргане - Структура - информация о регистрации представительства
//														  в налоговом органе.
//				*** Код - Строка - код налогового органа.
//				*** Наименование - Строка - наименование налогового органа.
//				*** ДатаРегистрации - Дата - дата регистрации в налоговом органе;
//			** ЮридическийАдрес - Структура, Неопределено - юридический адрес:
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита;
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса;
//				*** Комментарий - Строка - произвольный комментарий;
//				*** Корректный - Булево - адрес является корректным по данным ФИАС;
//			** ВидДеятельности - Структура - описание основного вида экономической деятельности. Поля:
//				*** Код - Строка - код вида деятельности;
//				*** Наименование - Строка - наименование вида деятельности;
//				*** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование;
//						   Значения: "ОКВЭД", "ОКВЭД2"
//			** ПрочиеВидыДеятельности - ТаблицаЗначений - описание прочих видов экономической деятельности:
//				*** Код - Строка - код вида деятельности;
//				*** Наименование - Строка - наименование вида деятельности;
//				*** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование.
//						   Значения: "ОКВЭД", "ОКВЭД2";
//			** КоличествоИностранныхСотрудников - Число - количество иностранных сотрудников в представительстве;
//			** Руководитель - Структура, Неопределено - информация о руководителе:
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//				*** Представление - Строка - ФИО руководителя;
//				*** ДатаЗаписи - Дата - дата записи о руководителе;
//			** Аккредитация - Структура - информация об аккредитации представительства. Поля:
//				*** НомерЗаписиОбАккредитации - Строка - номер записи об аккредитации;
//				*** ДатаАккредитации - Дата - дата аккредитации;
//				*** КодУполномоченногоНалоговогоОргана - Строка - код уполномоченного налогового органа,
//					выполнившего аккредитацию представительства;
//				*** НаименованиеУполномоченногоНалоговогоОргана - Строка - наименование уполномоченного налогового органа,
//					выполнившего аккредитацию представительства;
//				*** ДатаОкончанияСрокаАккредитации - Дата - дата окончания срока аккредитации;
//				*** ДатаПродленияАккредитации - Дата - дата принятия решения о продлении срока аккредитации;
//				*** ДатаОкончанияСрокаПродленияАккредитации - Дата - дата окончания срока продления аккредитации;
//			** ИностранноеЮридическоеЛицо - Структура - данные иностранной компании. Поля:
//				*** НаименованиеПолное - Строка - полное наименование иностранного юридического лица;
//				*** КодСтраны - Число - код страны регистрации по ОКСМ;
//				*** Страна - Строка - наименование страны регистрации;
//				*** Адрес - Строка - адрес иностранного юридического лица в стране регистрации;
//				*** УставныйКапитал - Структура - информация об уставном капитале. Поля:
//					**** Размер - Число - размер уставного капитала;
//					**** КодВалюты - Число - код валюты уставного капитала по ОКВ;
//					**** НаименованиеВалюты - Строка - наименование валюты уставного капитала;
//				*** КодНалогоплательщика - Строка - код или аналог кода налогоплательщика иностранного
//											юридического лица в стране регистрации;
//				*** Регистрация - Структура - информация о регистрации в стране регистрации. Поля:
//					**** РегистрационныйНомер - Строка - регистрационный номер;
//					**** НаименованиеОргана - Строка - наименование органа регистрации в стране регистрации;
//					**** ОсобенностиРежимаРегистрации - Строка - описание особенности режима регистрации;
//
//	* ОписаниеОшибки - Строка - описание возникшей ошибки.
//		Для обработки ошибки на клиентской части необходимо использовать метод
//		РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция СведенияОЮридическомЛицеПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение сведений о юридическом лице по ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН", ИНН);
	Результат.Вставить("ЕГРЮЛ");
	Результат.Вставить("РАФП", НоваяТаблицаРАФП());
	Результат.Вставить("ОписаниеОшибки");
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН юридического лица.'");
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	URLОперации = URLRESTОперацииFindCounterAgentsByInn(ИНН);
	РезультатВызова = ПроверитьУслугуИВызватьОперациюRESTСервиса(
		ИдентификаторУслуги,
		URLОперации,
		ИдентификаторСервисаКонтрагент(),
		НСтр("ru='ИНН юридического лица должен состоять из 10 цифр.'"));
	ЗаполнитьЗначенияСвойств(Результат, РезультатВызова, "ОписаниеОшибки");
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтветаОбъект = РезультатВызова.ТелоОтветаОбъект;
	
	ЗначениеCorporation = ТелоОтветаОбъект.Получить("corporation");
	Если ЗначениеCorporation = Неопределено Тогда
		ЗначениеCorporations = ТелоОтветаОбъект.Получить("corporations");
		Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") И ЗначениеCorporations.Количество() > 0 Тогда
			ЗначениеCorporation = ЗначениеCorporations[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеCorporation <> Неопределено Тогда
		
		РеквизитыЮридическогоЛица = НовыеРеквизитыЮридическогоЛица();
		
		РеквизитыЮридическогоЛица.РегистрационныйНомер = ЗначениеCorporation.Получить("ogrn");
		ЗначениеKpp = ЗначениеCorporation.Получить("kpp");
		Если ЗначениеKpp <> Неопределено Тогда
			РеквизитыЮридическогоЛица.КПП = ЗначениеKpp.Получить("value");
		КонецЕсли;
		
		РеквизитыЮридическогоЛица.ДатаРегистрации = ДатаИзJSON(ЗначениеCorporation.Получить("registrationDate"));
		РеквизитыЮридическогоЛица.ИНН = ИНН;
		ЗаполнитьНаименованияЮридическогоЛица(ЗначениеCorporation.Получить("name"), РеквизитыЮридическогоЛица);
		ЗаполнитьКодОКВЭД(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьВидДеятельности(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьЮридическийАдрес(ЗначениеCorporation.Получить("address"), РеквизитыЮридическогоЛица);
		ЗаполнитьРегистрациюВНалоговомОргане(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьРеквизитыПенсионногоФонда(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьСведенияОРуководителях(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьИнформациюОСтатусеСтруктура(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьИнформациюОРегистрирующемОргане(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьОткрытыеГосударственныеДанныеФНС(ЗначениеCorporation.Получить("openDataInfo"), РеквизитыЮридическогоЛица);
		ЗаполнитьИсториюРеквизитовЮридическогоЛица(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		
		Если РеквизитыЮридическогоЛица.Руководители <> Неопределено Тогда
			УдалитьНеИспользуемыеКолонкиРуководителей(РеквизитыЮридическогоЛица.Руководители);
		КонецЕсли;
		
		Результат.ЕГРЮЛ = РеквизитыЮридическогоЛица;
		
	КонецЕсли;
	
	ЗначениеForeignRepresentations = ТелоОтветаОбъект.Получить("foreignRepresentations");
	Если ТипЗнч(ЗначениеForeignRepresentations) = Тип("Массив") Тогда
		
		Для Каждого ТекущийЭлементJSON Из ЗначениеForeignRepresentations Цикл
			
			СведенияОПредставительстве = Результат.РАФП.Добавить();
			ЗаполнитьСведенияОПредставительстве(СведенияОПредставительстве, ТекущийЭлементJSON);
			СведенияОбИностранномЮридическомЛице = НовыйСведенияОбИностранномЮридическомЛице();
			ЗаполнитьСведенияОбИностранномЮридическомЛице(СведенияОбИностранномЮридическомЛице, ТекущийЭлементJSON);
			
			// Дедубликация иностранных юр. лиц - для сокращения количества одинаковых объектов в памяти
			СведенияОбИностранномЮридическомЛицеДляВозврата = Неопределено;
			Для Каждого ТекущееРеквизитыПредставительств Из Результат.РАФП Цикл
				Если ЗначенияЭквивалентны(
					СведенияОбИностранномЮридическомЛице,
					ТекущееРеквизитыПредставительств.ИностранноеЮридическоеЛицо) Тогда
					СведенияОбИностранномЮридическомЛицеДляВозврата = ТекущееРеквизитыПредставительств.ИностранноеЮридическоеЛицо;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СведенияОПредставительстве.ИностранноеЮридическоеЛицо =
				?(СведенияОбИностранномЮридическомЛицеДляВозврата = Неопределено,
					СведенияОбИностранномЮридическомЛице,
					СведенияОбИностранномЮридическомЛицеДляВозврата);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение сведений о юридическом лице по ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращает реквизиты индивидуального предпринимателя по данным ЕГРИП - ФИО, свидетельство о регистрации,
// коды и т.д.
//
// Параметры:
//	ИНН - Строка - ИНН индивидуального предпринимателя, реквизиты которого надо получить.
//
// Возвращаемое значение:
//	- Структура - реквизиты индивидуального предпринимателя.
//		* ИНН - Строка - ИНН предпринимателя.
//		* Наименование - Строка - представление предпринимателя в учетной программе.
//		* НаименованиеПолное - Строка - фамилия, имя, отчество предпринимателя.
//		* НаименованиеСокращенное - Строка - фамилия, имя, отчество предпринимателя.
//		* ВидИП - Строка - вид предпринимателя.
//		* Фамилия - Строка - фамилия предпринимателя.
//		* Имя - Строка - имя предпринимателя.
//		* Отчество - Строка - отчество предпринимателя.
//		* РегистрационныйНомер - Строка - ОГРНИП.
//		* Пол - Строка, Неопределено - "1" - Мужской, "2" - Женский.
//		* КодСтраныГражданства - Строка, Неопределено - код страны.
//		* РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//			** Код - Строка - код налогового органа.
//			** Наименование - Строка - наименование налогового органа.
//			** ОКТМО - Строка - код ОКТМО налогового органа.
//			** ОКАТО - Строка - код ОКАТО налогового органа.
//			** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//		* ДатаРегистрации - Дата - дата регистрации предпринимателя.
//		* РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//			** РегистрационныйНомерПФР - Строка - регистрационный номер предпринимателя в ПФР.
//			** КодОрганаПФР - Строка - код органа ПФР.
//			** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//			** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//		* РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//			** РегистрационныйНомерФСС - Строка - регистрационный номер предпринимателя в ФСС.
//			** КодПодчиненности - Строка - код подчиненности органа ФСС.
//			** КодОрганаФСС - Строка - код органа ФСС.
//			** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//			** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//		* СвидетельствоОРегистрации - Структура, Неопределено - данные свидетельства.
//			** Серия - Строка - серия свидетельства.
//			** Номер - Строка - номер свидетельства.
//			** Дата - Дата - дата выдачи свидетельства.
//		* ВидДеятельности - Структура - описание вида экономической деятельности. Поля:
//			** Код - Строка - код вида деятельности;
//			** Наименование - Строка - наименование вида деятельности;
//			** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование;
//							   Значения: "ОКВЭД", "ОКВЭД2"
//		* ИсторияРеквизитов - Структура - история изменения реквизитов предпринимателя.
//			** ФИО - ТаблицаЗначений - история изменения ФИО;
//				Колонки:
//				*** Дата - Дата - дата изменения ФИО;
//				*** Фамилия - Строка - фамилия;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//			** Гражданство - ТаблицаЗначений - история изменения гражданства;
//				Колонки:
//				*** Дата - Дата - дата изменения гражданства;
//				*** КодСтраныГражданства - Строка, Неопределено - код страны;
//			** ОГРН - ТаблицаЗначений - история изменения ОГРН;
//				Колонки:
//				*** Дата - Дата - дата изменения ОГРН;
//				*** Значение - Строка - значение ОГРН;
//				*** ВидПредпринимателя - Структура - вид предпринимателя.
//					**** Дата - Дата - дата изменения вида предпринимателя;
//					**** Код - Строка - код вида предпринимателя;
//					**** Наименование - Строка - наименование вида предпринимателя;
//				*** Статус - Структура - статус предпринимателя.
//					**** Дата - Дата - дата изменения статуса;
//					**** Код - Строка - код статуса;
//					**** Наименование - Строка - наименование статуса;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//		* КодОКВЭД (Устарело) - Строка - устарело, следует использовать ВидДеятельности.Код, код основного
//								вида деятельности по классификатору ОКВЭД.
//		* ЭтоОКВЭД2 (Устарело) - Булево - устарело, следует использовать ВидДеятельности.Классификатор, код ОКВЭД
//								приведен по классификатору редакции 2 или редакции 1.
//
Функция РеквизитыПредпринимателяПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов предпринимателя для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НовыеРеквизитыПредпринимателя();
	Результат.ИНН = ИНН;
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН предпринимателя.'");
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	URLОперации = URLRESTОперацииFindPersonByInn(ИНН);
	РезультатВызова = ПроверитьУслугуИВызватьОперациюRESTСервиса(
		ИдентификаторУслуги,
		URLОперации,
		ИдентификаторСервисаКонтрагент(),
		НСтр("ru='ИНН предпринимателя должен состоять из 12 цифр.'"));
	ЗаполнитьЗначенияСвойств(Результат, РезультатВызова, "ОписаниеОшибки");
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтветаОбъект = РезультатВызова.ТелоОтветаОбъект;
	Если ТелоОтветаОбъект.Получить("inn") = Неопределено Тогда
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти данные для заполнения реквизитов предпринимателя по ИНН %1.'"),
			Результат.ИНН);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ЗаполнитьОсновныеРеквизитыПредпринимателя(ТелоОтветаОбъект, Результат);
	ЗаполнитьКодОКВЭД(ТелоОтветаОбъект, Результат);
	ЗаполнитьВидДеятельности(ТелоОтветаОбъект, Результат);
	ЗаполнитьРегистрациюВНалоговомОргане(ТелоОтветаОбъект, Результат);
	ЗаполнитьРеквизитыПенсионногоФонда(ТелоОтветаОбъект, Результат);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ТелоОтветаОбъект, Результат);
	ЗаполнитьСвидетельствоОРегистрации(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОСтатусеСтруктура(ТелоОтветаОбъект.Получить("registrationInfo"), Результат);
	ЗаполнитьИсториюРеквизитовПредпринимателя(ТелоОтветаОбъект, Результат);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов предпринимателя для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск юридических лиц по наименованию.
// Возвращаются основные реквизиты юридических лиц по данным ЕГРЮЛ.
//
// Параметры:
//	Наименование - Строка - одно или несколько слов из наименования юридического лица для поиска в ЕГРЮЛ.
//	КодРегиона - Строка, 2 - код региона в юридическом адресе для поиска в ЕГРЮЛ.
//	Адрес - Строка - одно или несколько слов из юридического адреса (от региона до улицы) для поиска в ЕГРЮЛ.
//
// Возвращаемое значение:
//	- Структура - реквизиты найденных юридических лиц. Содержание структуры:
//		* РеквизитыОрганизаций - Массив из Структура - реквизиты найденных контрагентов.
//			Если найдено больше 20 контрагентов - возвращаются реквизиты только первых 20.
//			Поля:
//			** ИНН - Строка - ИНН юридического лица.
//			** Наименование - Строка - наименование юридического лица.
//			** ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса.
//				*** Корректный - Булево - адрес является корректным по данным ФИАС;
//				*** Комментарий - Строка - произвольный комментарий.
//			** Руководители - ТаблицаЗначений - сведения о руководителях. Колонки:
//				*** Должность - Строка - должность руководителя.
//				*** Фамилия - Строка - фамилия руководителя.
//				*** Имя - Строка - имя руководителя.
//				*** Отчество - Строка - отчество руководителя.
//				*** Представление - Строка - ФИО руководителя.
//				*** ИНН - Строка - ИНН руководителя.
//				*** ДатаЗаписи - Дата - дата записи о руководителе.
//		* КоличествоНайденных - Число - общее количество найденных контрагентов (может быть больше 20).
//		* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с такими же параметрами.
//		* ОписаниеОшибки - Строка - служебный реквизит.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция ЮридическиеЛицаПоНаименованию(Знач Наименование, Знач КодРегиона = "", Знач Адрес = "") Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Асинхронный поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = Новый Структура;
	Результат.Вставить("РеквизитыОрганизаций", Новый Массив);
	Результат.Вставить("КоличествоНайденных", 0);
	Результат.Вставить("ОжиданиеОтвета", Ложь);
	Результат.Вставить("ОписаниеОшибки", Неопределено);
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не указано наименование юридического лица.'");
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	URLОперации = URLRESTОперацииFindCorporationsByName(Наименование, КодРегиона, Адрес);
	РезультатВызова = ПроверитьУслугуИВызватьОперациюRESTСервиса(ИдентификаторУслуги, URLОперации, ИдентификаторСервисаКонтрагент());
	ЗаполнитьЗначенияСвойств(Результат, РезультатВызова, "ОжиданиеОтвета, ОписаниеОшибки");
	
	Если Результат.ОжиданиеОтвета Или ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗначениеCorporations = РезультатВызова.ТелоОтветаОбъект.Получить("corporations");
	Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") Тогда
		Для каждого ТекущееCorporation Из ЗначениеCorporations Цикл
			РеквизитыОрганизации     = НовыеРеквизитыЮридическогоЛица();
			РеквизитыОрганизации.ИНН = ТекущееCorporation.Получить("inn");
			ЗаполнитьНаименованияЮридическогоЛица(ТекущееCorporation.Получить("name"), РеквизитыОрганизации);
			ЗаполнитьЮридическийАдрес(ТекущееCorporation.Получить("address"), РеквизитыОрганизации);
			ЗаполнитьСведенияОРуководителях(ТекущееCorporation, РеквизитыОрганизации);
			Результат.РеквизитыОрганизаций.Добавить(РеквизитыОрганизации);
			Если РеквизитыОрганизации.Руководители <> Неопределено Тогда
				УдалитьНеИспользуемыеКолонкиРуководителей(РеквизитыОрганизации.Руководители);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеFoundTotal = РезультатВызова.ТелоОтветаОбъект.Получить("totalFound");
	Результат.КоличествоНайденных = ?(ЗначениеFoundTotal = Неопределено, 0, ЗначениеFoundTotal);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Успешно завершен асинхронный поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о связях юридического лица, его руководителей и учредителей
// с другими лицами по данным ЕГРЮЛ.
//
// Параметры:
//	ИНН - Строка - ИНН юридического лица, информацию о связях которого надо получить.
//
// Возвращаемое значение:
//	- Структура - информация о связях юридического лица.
//		Содержит основные данные о юридическом лице - см. РеквизитыЮридическогоЛицаПоИНН.
//		Также содержит данные:
//		* Статус - Структура - текущий статус юридического лица.
//			Поля:
//			** Код - Строка - код статуса;
//			** Наименование - Строка - наименование статуса;
//		* РегистрирующийОрган - Структура - орган, зарегистрировавший юридическое лицо. Поля:
//			** Код - Строка - код органа;
//			** Наименование - Строка - наименование органа;
//		* УставныйКапитал - Число - размер уставного капитала, рублей.
//		* ВидыДеятельности - ТаблицаЗначений - информация о видах деятельности.
//			** Код - Строка - код вида деятельности;
//			** Наименование - Строка - наименование вида деятельности;
//			** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование;
//							   Значения: "ОКВЭД", "ОКВЭД2"
//			** КодОКВЭД (устарело) - Строка - код вида деятельности по классификатору ОКВЭД.
//											  Устарело, следует использовать Код.
//			** НаименованиеОКВЭД (устарело) - Строка - наименование вида деятельности по ОКВЭД,
//				сервисом не поставляется, должно заполняться из переопределяемого кода.
//											  Устарело, следует использовать Наименование.
//			** ЭтоОКВЭД2 (устарело) - Булево - код приведен по классификатору редакции 2 или редакции 1.
//											  Устарело, следует использовать Классификатор.
//		* Лицензии - ТаблицаЗначений - данные о полученных лицензиях.
//			** Лицензия - Строка - наименование лицензии.
//			** ОписаниеЛицензии - Строка - подробное описание лицензии.
//		* ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление адреса.
//			** Комментарий - Строка - произвольный комментарий.
//			** Корректный - Булево - адрес является корректным по данным ФИАС;
//		* ОрганизацииПоАдресу - ТаблицаЗначений - данные об организациях, зарегистрированных по тому же адресу.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//		* Руководители - ТаблицаЗначений - сведения о руководителях. Колонки:
//			** Должность - Строка - должность руководителя.
//			** Фамилия - Строка - фамилия руководителя.
//			** Имя - Строка - имя руководителя.
//			** Отчество - Строка - отчество руководителя.
//			** Представление - Строка - ФИО руководителя.
//			** ИНН - Строка - ИНН руководителя.
//			** ДатаЗаписи - Дата - дата записи о руководителе.
//			** ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где руководитель этой
//				организации также является руководителем. Колонки:
//				*** НаименованиеОрганизации - Строка - наименование организации.
//				*** ИНН - Строка - ИНН организации.
//				*** КодСтатуса - Строка - код текущего статуса организации.
//				*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//			** ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где руководитель этой организации является учредителем. Колонки:
//				*** НаименованиеОрганизации - Строка - наименование организации.
//				*** ИНН - Строка - ИНН организации.
//				*** КодСтатуса - Строка - код текущего статуса организации.
//				*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//				*** ПроцентКапитала - Число - процент в уставном капитале.
//				*** СуммаКапитала - Число - сумма взноса в уставный капитал.
//			** ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//		* УчрежденныеФирмы - ТаблицаЗначений - организации, где эта организация является учредителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//		* Учредители - ТаблицаЗначений - учредители этой организации.
//			** Учредитель - Строка - ФИО или наименование учредителя.
//			** ИНН - Строка - ИНН учредителя.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//			** ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где этот учредитель является руководителем.
//				*** НаименованиеОрганизации - Строка - наименование организации.
//				*** ИНН - Строка - ИНН организации.
//				*** КодСтатуса - Строка - код текущего статуса организации.
//				*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО учредителя, иначе по ИНН.
//			** ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где этот учредитель также является учредителем.
//				*** НаименованиеОрганизации - Строка - наименование организации.
//				*** ИНН - Строка - ИНН организации.
//				*** КодСтатуса - Строка - код текущего статуса организации.
//				*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//				*** ПроцентКапитала - Число - процент в уставном капитале.
//				*** СуммаКапитала - Число - сумма взноса в уставный капитал.
//			** ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО учредителя, иначе по ИНН.
//		* Подразделения - ТаблицаЗначений - филиалы и представительства юридического лица, указанные в Уставе.
//			** ОписаниеПодразделения - Строка - наименование подразделения.
//		* ИзмененияВРеестре - ТаблицаЗначений - данные об изменениях в ЕГРЮЛ по этому лицу.
//			** ДатаИзменения - Дата - дата внесения изменения.
//			** ГосударственныйОрган - Строка - орган, который внес изменение.
//			** ОписаниеИзменения - Строка - описание изменения.
//		* БухгалтерскаяОтчетность - ТаблицаЗначений - данные бухгалтерской отчетности, сданной в органы Росстата.
//			** Год - Число - год, за который была сдана отчетность.
//			** КодВалютыОтчетности - Строка - в рублях, в тысячах или в миллионах рублей.
//			** ТипОтчетности - Строка - обычная отчетность, упрощенная или отчетность НКО.
//			** Показатели - ТаблицаЗначений - показатели бухгалтерской отчетности.
//				*** Код - Строка - код показателя отчетности.
//				*** Значение - Число - значение показателя отчетности.
//		* ОткрытыеГосударственныеДанныеФНС - ТаблицаЗначений - открытые данные. Колонки:
//			** Год - Число - год, за который указаны данные;
//			** КоличествоСотрудников - Число, Неопределено - количество сотрудников;
//			** СуммаДоходов - Число, Неопределено - сумма доходов;
//			** СуммаРасходов - Число, Неопределено - сумма расходов;
//			** УчастиеВКГН - Строка - участия в консолидированной группе налогоплательщиков;
//			** НалогообложениеЕСХН - Булево, Неопределено - Истина, если применяется тип налогообложения ЕСХН;
//			** НалогообложениеУСН - Булево, Неопределено - Истина, если применяется тип налогообложения УСН;
//			** НалогообложениеЕНВД - Булево, Неопределено - Истина, если применяется тип налогообложения ЕНВД;
//			** НалогообложениеСРП - Булево, Неопределено - Истина, если применяется тип налогообложения СРП;
//			** СведенияОНалогах - ТаблицаЗначений - сведения о налогах. Колонки:
//				*** Наименование - Строка - наименование налога;
//				*** Уплачено - Число, Неопределено - сумма уплаченного налога. Неопределено - нет данных;
//				*** Задолженность - Число, Неопределено - сумма задолженности по налогу. Неопределено - нет данных;
//				*** Штраф - Число, Неопределено - сумма штрафа по налогу. Неопределено - нет данных;
//				*** Пени - Число, Неопределено - сумма пеней по налогу. Неопределено - нет данных;
//		* ИсторияРеквизитов - Структура - история изменения реквизитов юридического лица.
//			** КПП - ТаблицаЗначений - история изменения значения реквизита КПП;
//				Колонки:
//				*** Дата - Дата - дата изменения КПП;
//				*** Значение - Строка - значение реквизита КПП;
//			** Наименование - ТаблицаЗначений - история изменения наименования;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** НаименованиеПолное - Строка - полное наименование юридического лица;
//				*** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица;
//			** Адрес - ТаблицаЗначений - история изменения адреса;
//				Колонки:
//				*** Дата - Дата - дата изменения адреса;
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса;
//				*** Комментарий - Строка - произвольный комментарий;
//			** Статус - ТаблицаЗначений - история изменения статуса;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** Код - Строка - код статуса;
//				*** Наименование - Строка - наименование статуса;
//			** РеквизитыДиректора - ТаблицаЗначений - история изменения реквизитов директора;
//				Колонки:
//				*** Дата - Дата - дата изменения реквизитов директора;
//				*** ДатаОкончания - Дата - дата окончания действия реквизитов.
//					Пустая дата, если директор действующий;
//				*** ИНН - Строка - ИНН;
//				*** Фамилия - Строка - фамилия директора;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//				*** ВидДолжности - Строка - вид должности;
//				*** НаименованиеДолжности - Строка - наименование должности;
//		* ОрганизацииГдеРуководитель (Устарело) - ТаблицаЗначений - данные об организациях, где руководитель этой организации также является руководителем.
//			Устарело, следует использовать Руководители[0].ОрганизацииГдеРуководитель
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//		* ОрганизацииГдеРуководительПоФИО (Устарело) - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//			Устарело, следует использовать Руководители[0].ОрганизацииГдеРуководительПоФИО.
//		* ОрганизацииГдеУчредитель (Устарело) - ТаблицаЗначений - организации, где руководитель этой организации является учредителем.
//			Устарело, следует использовать Руководители[0].ОрганизацииГдеУчредитель.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//		* ОрганизацииГдеУчредительПоФИО (Устарело) - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//			Устарело, следует использовать Руководители[0].ОрганизацииГдеУчредительПоФИО.
//		* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с этими же параметрами.
//		* ОписаниеОшибки - Строка - служебный реквизит.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку;
//		* НаименованиеСтатуса - Строка - устарело, необходимо использовать Статус.Наименование - наименование текущего статуса;
//		* КодСтатуса - Строка - устарело, необходимо использовать Статус.Код - код текущего статуса.
//
Функция ИнформацияОСвязяхЮридическогоЛицаПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение данных досье юридического лица с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НоваяИнформацияОСвязяхЮридическогоЛица();
	Результат.ИНН = ИНН;
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН юридического лица.'");
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиИнформацияОСвязяхКонтрагентов();
	URLОперации = URLRESTОперацииFindCorporationTrustabilityByInn(ИНН);
	РезультатВызова = ПроверитьУслугуИВызватьОперациюRESTСервиса(
		ИдентификаторУслуги,
		URLОперации,
		ИдентификаторСервисаКонтрагент(),
		НСтр("ru='ИНН юридического лица должен состоять из 10 цифр.'"));
	ЗаполнитьЗначенияСвойств(Результат, РезультатВызова, "ОжиданиеОтвета, ОписаниеОшибки");
	Если Результат.ОжиданиеОтвета Или ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтветаОбъект = РезультатВызова.ТелоОтветаОбъект;
	Если ТелоОтветаОбъект.Получить("inn") = Неопределено Тогда
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти данные для Досье юридического лица с ИНН %1.'"),
			Результат.ИНН);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Результат.РегистрационныйНомер = ТелоОтветаОбъект.Получить("ogrn");
	ЗначениеKpp = ТелоОтветаОбъект.Получить("kpp");
	Если ЗначениеKpp <> Неопределено Тогда
		Результат.КПП = ЗначениеKpp.Получить("value");
	КонецЕсли;
	
	Результат.ДатаРегистрации = ДатаИзJSON(ТелоОтветаОбъект.Получить("registrationDate"));
	
	ЗаполнитьНаименованияЮридическогоЛица(ТелоОтветаОбъект.Получить("name"), Результат);
	ЗаполнитьЮридическийАдрес(ТелоОтветаОбъект.Получить("address"), Результат);
	ЗаполнитьРегистрациюВНалоговомОргане(ТелоОтветаОбъект, Результат);
	ЗаполнитьРеквизитыПенсионногоФонда(ТелоОтветаОбъект, Результат);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОСтатусе(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОСтатусеСтруктура(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОРегистрирующемОргане(ТелоОтветаОбъект, Результат);
	ЗаполнитьИсториюРеквизитовЮридическогоЛица(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОМассовостиАдреса(ТелоОтветаОбъект, Результат);
	ЗаполнитьКодОКВЭД(ТелоОтветаОбъект, Результат);
	ЗаполнитьВидДеятельности(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОВидахДеятельности(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОЛицензиях(ТелоОтветаОбъект, Результат);
	ЗаполнитьСведенияОРуководителях(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОбУчрежденныхФирмах(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОбУчредителях(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОбУставномКапитале(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОПодразделениях(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОбИзмененияхВРеестре(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОБухгалтерскойОтчетности(ТелоОтветаОбъект, Результат);
	ЗаполнитьОткрытыеГосударственныеДанныеФНС(ТелоОтветаОбъект.Получить("openDataInfo"), Результат);
	
	// Заполнение устаревших полей:
	Если Результат.Руководители.Количество() > 0 Тогда
		СтрокаРуководителя = Результат.Руководители[0];
		Результат.Руководитель = НовоеКонтактноеЛицо();
		ЗаполнитьЗначенияСвойств(Результат.Руководитель, СтрокаРуководителя);
		Результат.ОрганизацииГдеРуководитель = СтрокаРуководителя.ОрганизацииГдеРуководитель;
		Результат.ОрганизацииГдеРуководительПоФИО = СтрокаРуководителя.ОрганизацииГдеРуководительПоФИО;
		Результат.ОрганизацииГдеУчредитель = СтрокаРуководителя.ОрганизацииГдеУчредитель;
		Результат.ОрганизацииГдеУчредительПоФИО = СтрокаРуководителя.ОрганизацииГдеУчредительПоФИО;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение данных досье юридического лица с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращается информация о связях индивидуального предпринимателя с другими лицами по данным ЕГРЮЛ и ЕГРИП.
//
// Параметры:
//	ИНН - Строка - ИНН индивидуального предпринимателя, информацию о связях которого надо получить.
//
// Возвращаемое значение:
//	- Структура - информация о связях индивидуального предпринимателя.
//		Содержит основные данные о предпринимателе - см. РеквизитыПредпринимателяПоИНН.
//		Также содержит данные:
//		* Статус - Структура - текущий статус предпринимателя.
//			Поля:
//			** Код - Строка - код статуса;
//			** Наименование - Строка - наименование статуса;
//		* УставныйКапитал - Число - размер уставного капитала, рублей.
//		* ВидыДеятельности - ТаблицаЗначений - информация о видах деятельности.
//			** Код - Строка - код вида деятельности;
//			** Наименование - Строка - наименование вида деятельности;
//			** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование;
//							   Значения: "ОКВЭД", "ОКВЭД2"
//			** КодОКВЭД (устарело) - Строка - код вида деятельности по классификатору ОКВЭД.
//											  Устарело, следует использовать Код.
//			** НаименованиеОКВЭД (устарело) - Строка - наименование вида деятельности по ОКВЭД,
//				сервисом не поставляется, должно заполняться из переопределяемого кода.
//											  Устарело, следует использовать Наименование.
//			** ЭтоОКВЭД2 (устарело) - Булево - код приведен по классификатору редакции 2 или редакции 1.
//											  Устарело, следует использовать Классификатор.
//		* Лицензии - ТаблицаЗначений - данные о полученных лицензиях.
//			** Лицензия - Строка - наименование лицензии.
//			** ОписаниеЛицензии - Строка - подробное описание лицензии.
//		* ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где этот предприниматель является руководителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//		* ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО предпринимателя, иначе по ИНН.
//		* ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где этот предприниматель является учредителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//		* ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО предпринимателя, иначе по ИНН.
//		* ИзмененияВРеестре - ТаблицаЗначений - данные об изменениях в ЕГРИП по этому лицу.
//			** ДатаИзменения - Дата - дата внесения изменения.
//			** ГосударственныйОрган - Строка - орган, который внес изменение.
//			** ОписаниеИзменения - Строка - описание изменения;
//		* ИсторияРеквизитов - Структура - история изменения реквизитов предпринимателя.
//			** ФИО - ТаблицаЗначений - история изменения ФИО;
//				Колонки:
//				*** Дата - Дата - дата изменения ФИО;
//				*** Фамилия - Строка - фамилия;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//			** Гражданство - ТаблицаЗначений - история изменения гражданства;
//				Колонки:
//				*** Дата - Дата - дата изменения гражданства;
//				*** КодСтраныГражданства - Строка, Неопределено - код страны;
//			** ОГРН - ТаблицаЗначений - история изменения ОГРН;
//				Колонки:
//				*** Дата - Дата - дата изменения ОГРН;
//				*** Значение - Строка - значение ОГРН;
//				*** ВидПредпринимателя - Структура - вид предпринимателя.
//					**** Дата - Дата - дата изменения вида предпринимателя;
//					**** Код - Строка - код вида предпринимателя;
//					**** Наименование - Строка - наименование вида предпринимателя;
//				*** Статус - Структура - статус предпринимателя.
//					**** Дата - Дата - дата изменения статуса;
//					**** Код - Строка - код статуса;
//					**** Наименование - Строка - наименование статуса;
//		* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с этими же параметрами.
//		* ОписаниеОшибки - Строка - служебный реквизит.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//		* КодСтатуса - Строка - устарело, необходимо использовать Статус.Код - код текущего статуса.
//
Функция ИнформацияОСвязяхПредпринимателяПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение данных досье предпринимателя с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НоваяИнформацияОСвязяхПредпринимателя();
	Результат.ИНН = ИНН;
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН предпринимателя.'");
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиИнформацияОСвязяхКонтрагентов();
	URLОперации = URLRESTОперацииFindPersonTrustabilityByInn(ИНН);
	РезультатВызова = ПроверитьУслугуИВызватьОперациюRESTСервиса(
		ИдентификаторУслуги,
		URLОперации,
		ИдентификаторСервисаКонтрагент(),
		НСтр("ru='ИНН предпринимателя должен состоять из 12 цифр.'"));
	ЗаполнитьЗначенияСвойств(Результат, РезультатВызова, "ОжиданиеОтвета, ОписаниеОшибки");
	Если Результат.ОжиданиеОтвета Или ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтветаОбъект = РезультатВызова.ТелоОтветаОбъект;
	Если ТелоОтветаОбъект.Получить("inn") = Неопределено Тогда
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти данные для Досье предпринимателя с ИНН %1.'"),
			Результат.ИНН);
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ЗаполнитьОсновныеРеквизитыПредпринимателя(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОСтатусе(ТелоОтветаОбъект, Результат);
	ЗаполнитьКодОКВЭД(ТелоОтветаОбъект, Результат);
	ЗаполнитьВидДеятельности(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОВидахДеятельности(ТелоОтветаОбъект, Результат);
	ЗаполнитьРегистрациюВНалоговомОргане(ТелоОтветаОбъект, Результат);
	ЗаполнитьРеквизитыПенсионногоФонда(ТелоОтветаОбъект, Результат);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ТелоОтветаОбъект, Результат);
	ЗаполнитьСвидетельствоОРегистрации(ТелоОтветаОбъект, Результат);
	ЗаполнитьИнформациюОСтатусеСтруктура(ТелоОтветаОбъект.Получить("registrationInfo"), Результат);
	
	ЗаполнитьИнформациюОЛицензиях(ТелоОтветаОбъект, Результат);
	ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
		ТелоОтветаОбъект,
		Результат,
		Результат.ИНН);
	ЗаполнитьИнформациюОбИзмененияхВРеестре(ТелоОтветаОбъект, Результат);
	ЗаполнитьОткрытыеГосударственныеДанныеФНС(ТелоОтветаОбъект.Получить("openDataInfo"), Результат);
	
	ЗаполнитьИсториюРеквизитовПредпринимателя(ТелоОтветаОбъект, Результат);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершено получение данных досье предпринимателя с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о проверках юридических лиц и предпринимателей
// контролирующими органами по открытым данным единого реестра проверок.
//
// Параметры:
//	СписокИНН - Массив из Строка - ИНН юридических лиц и/или предпринимателей,
//		информацию о проверках которых необходимо получить.
//		Допустимое количество элементов - не более 1000.
//		При превышении допустимого количества вызывается исключение;
//	Плановые - Булево - требуется ли информация о плановых проверках;
//	Внеплановые - Булево - требуется ли информация о внеплановых проверках;
//	Завершенные - Булево - требуется ли информация о завершенных
//		проверках (плановых и внеплановых), по которым уже известен результат.
//	Незавершенные - Булево - требуется ли информация о незавершенных
//		проверках (плановых и внеплановых), результат по которым неизвестен;
//
// Возвращаемое значение:
//	- Структура - результат получения информации о проверках.
//	* Проверки - Соответствие - информация о проверках:
//		** Ключ - Строка - ИНН;
//		** Значение - ТаблицаЗначений - информация о проверках юридического лица
//			или предпринимателя с указанным ИНН.
//			Колонки таблицы:
//			*** Идентификатор - Строка - идентификатор проверки в едином реестре проверок;
//			*** ПлановаяПроверка - Булево - плановая проверка или внеплановая;
//			*** ПериодПроверки - Дата - месяц, в котором проводится проверка;
//			*** ДатаПроверки - Дата - дата начала проверки;
//			*** КонтролирующийОрган - Строка - орган, который проводит проверку;
//			*** АдресПроверки - Строка - адрес, по которому проводится проверка;
//			*** ЦельПроверки - Строка - с какой целью проводится проверка;
//			*** Длительность - Строка - длительность проверки;
//			*** Результат - Строка - описание результата проверки;
//			*** Нарушения - ТаблицаЗначений - найденные нарушения;
//				**** НомерНарушения - Число - номер по порядку;
//				**** Нарушение - Строка - описание нарушения;
//				**** НарушенныйАкт - Строка - нарушенный нормативный акт;
//				**** Предписание - Строка - выданное предписание о необходимости устранении нарушения;
//				**** Исполнение - Строка - информация об устранении нарушения;
//	* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный
//		вызов метода с этими же параметрами;
//	* ОписаниеОшибки - Строка - служебный реквизит.
//		Для обработки ошибки на клиентской части необходимо использовать метод
//		РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН(
	СписокИНН, Плановые, Внеплановые, Завершенные, Незавершенные) Экспорт
	
	Возврат ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИННСлужебная(
		СписокИНН, Плановые, Внеплановые, Завершенные, Незавершенные, Истина);
	
КонецФункции

#КонецОбласти

#Область ГосударственныеОрганы

// Возвращаются реквизиты налоговой инспекции по коду.
//
// Параметры:
//	КодНалоговогоОргана - Строка - код налогового органа.
//
// Возвращаемое значение:
//	- Структура - реквизиты налоговой инспекции.
//		* Код - Строка - код государственного органа;
//		* ИНН - Строка - ИНН;
//		* КПП - Строка - КПП;
//		* Наименование - Строка - наименование государственного органа;
//		* ПолноеНаименование - Строка - полное наименование государственного органа;
//		* Адрес - Строка - Юридический адрес;
//		* Телефон - Строка - Телефон;
//		* ЭлектроннаяПочта - Строка - адрес электронной почты;
//		* ИнтернетСайт - Строка - URL сайта государственного органа;
//		* ПлатежныеРеквизиты - Структура - платежные реквизиты налогового органа:
//			** ПолучательПлатежа - Строка - получатель платежа;
//			** РасчетныйСчет - Строка - расчетный счет;
//			** КоррСчет - Строка - корреспондентский счет;
//			** БИК - Строка - БИК банка;
//		* РегистрирующийОрганИП - Структура, Неопределено - реквизиты регистрирующего
//			органа индивидуальных предпринимателей:
//			** Код - Строка - код органа;
//			** Наименование - Строка - наименование органа;
//			** Адрес - Строка - юридический адрес;
//			** Телефон - Строка - Строка;
//			** Информация - Строка - информация;
//		* РегистрирующийОрганЮЛ - Структура, Неопределено - реквизиты регистрирующего органа юридических лиц.
//			Описание реквизитов см. в поле РегистрирующийОрганИП.
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыНалоговогоОрганаПоКоду(Знач КодНалоговогоОргана) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов налогового органа по коду %1'"),
			КодНалоговогоОргана),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НовыеРеквизитыГосударственногоОргана();
	Результат.Код = КодГосударственногоОрганаДляЗапросаРеквизитов("НалоговыйОрган", КодНалоговогоОргана);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаГосударственныеОрганы();
		ИмяМетода        = "findIfnsByCode";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findIfnsByCode"));
		ВходныеПараметры.Code = Результат.Код;
		
		ДополнительныеПараметры =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ = Прокси.findIfnsByCode(Результат.Код, ДополнительныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код налогового органа %1:'"), Результат.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Ответ,
		ОписаниеОшибки,
		"ГосОрганы",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = СокрЛП(Ответ.Code);
	Результат.ИНН = СокрЛП(Ответ.INN);
	Результат.КПП = СокрЛП(Ответ.KPP);
	Результат.Наименование = СокрЛП(Ответ.ShortName);
	Результат.ПолноеНаименование = СокрЛП(Ответ.FullName);
	Результат.Адрес   = СокрЛП(Ответ.Address);
	Результат.Телефон = СокрЛП(Ответ.Phone);
	Результат.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	Результат.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если Ответ.PaymentDetails <> Неопределено Тогда
		Результат.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		Результат.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		Результат.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		Результат.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	Если Ответ.RegistrationDetailsIP <> Неопределено Тогда
		Результат.РегистрирующийОрганИП.Код          = СокрЛП(Ответ.RegistrationDetailsIP.Code);
		Результат.РегистрирующийОрганИП.Наименование = СокрЛП(Ответ.RegistrationDetailsIP.FullName);
		Результат.РегистрирующийОрганИП.Адрес        = СокрЛП(Ответ.RegistrationDetailsIP.Address);
		Результат.РегистрирующийОрганИП.Телефон      = СокрЛП(Ответ.RegistrationDetailsIP.Phone);
		Результат.РегистрирующийОрганИП.Информация   = СокрЛП(Ответ.RegistrationDetailsIP.Information);
	КонецЕсли;
	Если Ответ.RegistrationDetailsUL <> Неопределено Тогда
		Результат.РегистрирующийОрганЮЛ.Код             = СокрЛП(Ответ.RegistrationDetailsUL.Code);
		Результат.РегистрирующийОрганЮЛ.Наименование    = СокрЛП(Ответ.RegistrationDetailsUL.FullName);
		Результат.РегистрирующийОрганЮЛ.Адрес           = СокрЛП(Ответ.RegistrationDetailsUL.Address);
		Результат.РегистрирующийОрганЮЛ.Телефон         = СокрЛП(Ответ.RegistrationDetailsUL.Phone);
		Результат.РегистрирующийОрганЮЛ.Информация      = СокрЛП(Ответ.RegistrationDetailsUL.Information);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов налогового органа по коду %1'"),
			КодНалоговогоОргана),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращаются реквизиты отделения ФСС по коду.
//
// Параметры:
//	КодОтделенияФСС - Строка - Код отделения ФСС.
//
// Возвращаемое значение:
//	- Структура - реквизиты отделения ФСС.
//		* Код - Строка - код государственного органа;
//		* ИНН - Строка - ИНН;
//		* КПП - Строка - КПП;
//		* Наименование - Строка - наименование государственного органа;
//		* ПолноеНаименование - Строка - полное наименование государственного органа;
//		* Адрес - Строка - Юридический адрес;
//		* Телефон - Строка - Телефон;
//		* ЭлектроннаяПочта - Строка - адрес электронной почты;
//		* ИнтернетСайт - Строка - URL сайта государственного органа;
//		* ПлатежныеРеквизиты - Структура - платежные реквизиты ФСС:
//			** ПолучательПлатежа - Строка - получатель платежа;
//			** РасчетныйСчет - Строка - расчетный счет;
//			** КоррСчет - Строка - корреспондентский счет;
//			** БИК - Строка - БИК банка;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыОтделенияФССПоКоду(Знач КодОтделенияФСС) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов ФСС по коду %1'"),
			КодОтделенияФСС),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НовыеРеквизитыГосударственногоОргана();
	Результат.Код = КодГосударственногоОрганаДляЗапросаРеквизитов("ОрганФСС", КодОтделенияФСС);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаГосударственныеОрганы();
		ИмяМетода        = "findFssByCode";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findFssByCode"));
		ВходныеПараметры.Code = Результат.Код;
		
		ДополнительныеПараметры =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ = Прокси.findFssByCode(Результат.Код, ДополнительныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ФСС %1:'"), Результат.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Ответ,
		ОписаниеОшибки,
		"ГосОрганы",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = СокрЛП(Ответ.Code);
	Результат.ИНН = СокрЛП(Ответ.INN);
	Результат.КПП = СокрЛП(Ответ.KPP);
	Результат.Наименование = СокрЛП(Ответ.ShortName);
	Результат.ПолноеНаименование = СокрЛП(Ответ.FullName);
	Результат.Адрес   = СокрЛП(Ответ.Address);
	Результат.Телефон = СокрЛП(Ответ.Phone);
	Результат.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	Результат.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если Результат.ПлатежныеРеквизиты <> Неопределено Тогда
		Результат.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		Результат.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		Результат.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		Результат.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов ФСС по коду %1'"),
			КодОтделенияФСС),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращаются реквизиты отделения ПФР по коду.
//
// Параметры:
//	КодОтделенияПФР - Строка - код отделения ПФР.
//
// Возвращаемое значение:
//	- Структура - реквизиты отделения ПРФ.
//		* Код - Строка - код государственного органа;
//		* ИНН - Строка - ИНН;
//		* КПП - Строка - КПП;
//		* Наименование - Строка - наименование государственного органа;
//		* ПолноеНаименование - Строка - полное наименование государственного органа;
//		* Адрес - Строка - Юридический адрес;
//		* Телефон - Строка - Телефон;
//		* ЭлектроннаяПочта - Строка - адрес электронной почты;
//		* ИнтернетСайт - Строка - URL сайта государственного органа;
//		* ПлатежныеРеквизиты - Структура - платежные реквизиты ПФР:
//			** ПолучательПлатежа - Строка - получатель платежа;
//			** РасчетныйСчет - Строка - расчетный счет;
//			** КоррСчет - Строка - корреспондентский счет;
//			** БИК - Строка - БИК банка;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыОтделенияПФРПоКоду(Знач КодОтделенияПФР) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов ПФР по коду %1'"),
			КодОтделенияПФР),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НовыеРеквизитыГосударственногоОргана();
	Результат.Код = КодГосударственногоОрганаДляЗапросаРеквизитов("ОрганПФР", КодОтделенияПФР);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаГосударственныеОрганы();
		ИмяМетода        = "findPfrByCode";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findPfrByCode"));
		ВходныеПараметры.Code = Результат.Код;
		
		ДополнительныеПараметры =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ = Прокси.findPfrByCode(Результат.Код, ДополнительныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ПФР %1:'"), Результат.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Ответ,
		ОписаниеОшибки,
		"ГосОрганы",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = СокрЛП(Ответ.Code);
	Результат.ИНН = СокрЛП(Ответ.INN);
	Результат.КПП = СокрЛП(Ответ.KPP);
	Результат.Наименование = СокрЛП(Ответ.ShortName);
	Результат.ПолноеНаименование = СокрЛП(Ответ.FullName);
	Результат.Адрес   = СокрЛП(Ответ.Address);
	Результат.Телефон = СокрЛП(Ответ.Phone);
	Результат.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	Результат.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если Результат.ПлатежныеРеквизиты <> Неопределено Тогда
		Результат.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		Результат.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		Результат.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		Результат.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов ПФР по коду %1'"),
			КодОтделенияПФР),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать РаботаСКонтрагентами.ЮридическиеЛицаПоНаименованию.
//
// Возвращают основные реквизиты юридических лиц по данным ЕГРЮЛ, подходящих по условиям поиска по наименованию.
//
// Параметры:
//	Наименование - Строка - одно или несколько слов из наименования юридического лица для поиска в ЕГРЮЛ.
//	КодРегиона - Строка, 2 - код региона в юридическом адресе для поиска в ЕГРЮЛ.
//	Адрес - Строка - одно или несколько слов из юридического адреса (от региона до улицы) для поиска в ЕГРЮЛ.
//
// Возвращаемое значение:
//	Структура - реквизиты найденных юридических лиц. Содержание структуры: 
//		* РеквизитыОрганизаций - Массив - реквизиты найденных контрагентов.
//			Если найдено больше 20 контрагентов - возвращаются реквизиты только первых 20.
//			Элементы массива - Структура с полями:
//			** ИНН - Строка - ИНН юридического лица.
//			** Наименование - Строка - наименование юридического лица.
//			** ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса.
//				*** Корректный - Булево - адрес является корректным по данным ФИАС;
//				*** Комментарий - Строка - произвольный комментарий.
//			** Руководитель - Структура, Неопределено - данные о руководителе.
//				*** Должность - Строка - должность руководителя.
//				*** Фамилия - Строка - фамилия руководителя.
//				*** Имя - Строка - имя руководителя.
//				*** Отчество - Строка - отчество руководителя.
//				*** Представление - Строка - ФИО руководителя.
//				*** ИНН - Строка - ИНН руководителя.
//				*** ДатаЗаписи - Дата - дата записи о руководителе.
//		* КоличествоНайденных - Число - общее количество найденных контрагентов (может быть больше 20).
//		* ОписаниеОшибки - Строка - служебный реквизит.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыЮридическихЛицПоНаименованию(Знач Наименование, Знач КодРегиона = "", Знач Адрес = "") Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыОрганизаций = Новый Структура("РеквизитыОрганизаций,КоличествоНайденных,ОписаниеОшибки",
		Новый Массив, 0, Неопределено);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаЮридическиеЛица();
		ИмяМетода    = "findCorporationsByName";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findCorporationsByName"));
		ВходныеПараметры.name       = Наименование;
		ВходныеПараметры.address    = Адрес;
		ВходныеПараметры.regionCode = КодРегиона;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findCorporationsByName(ВходныеПараметры);
			СписокXDTO = ?(Ответ.CorporationSearchResult = Неопределено,
				Неопределено,
				Ответ.CorporationSearchResult.РеквизитыЮрЛица);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Наименование - %1:'"), Наименование)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		СписокXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		РеквизитыОрганизаций);
	
	Если ЗначениеЗаполнено(РеквизитыОрганизаций.ОписаниеОшибки) Тогда
		Возврат РеквизитыОрганизаций;
	КонецЕсли;
	
	АдресныеСокращения = Неопределено;
	
	Для каждого ОбъектXDTO Из СписокXDTO Цикл
		
		РеквизитыОрганизации     = НовыеРеквизитыЮридическогоЛица();
		РеквизитыОрганизации.ИНН = ОбъектXDTO.ИНН;
		
		ЗаполнитьНаименованияЮридическогоЛицаXDTO(ОбъектXDTO, РеквизитыОрганизации);
		ЗаполнитьЮридическийАдресXDTO(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO, АдресныеСокращения);
		ЗаполнитьРуководителяИНомерТелефонаИзXDTO(ОбъектXDTO, РеквизитыОрганизации);
		РеквизитыОрганизаций.РеквизитыОрганизаций.Добавить(РеквизитыОрганизации);
		
	КонецЦикла;
	
	РеквизитыОрганизаций.КоличествоНайденных = Ответ.CorporationSearchResult.corporationsFound;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Успешно завершен поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыОрганизаций;
	
КонецФункции

// Устарела. Следует использовать РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН, поле ЕГРЮЛ.
//
// Возвращают реквизиты юридического лица по данным ЕГРЮЛ (наименование, адрес, коды и т.д.).
//
// Параметры:
//	ИНН - Строка - ИНН юридического лица, реквизиты которого надо получить.
//
// Возвращаемое значение:
//	Структура - реквизиты юридического лица.
//		* ИНН - Строка - ИНН юридического лица.
//		* КПП - Строка - КПП юридического лица.
//		* Наименование - Строка - представление юридического лица в учетной программе.
//		* НаименованиеПолное - Строка - полное наименование юридического лица.
//		* НаименованиеСокращенное - Строка - сокращенное наименование юридического лица.
//		* РегистрационныйНомер - Строка - ОГРН юридического лица.
//		* ПравоваяФорма - Строка, Неопределено - правовая форма юридического лица.
//		* Статус - Структура - текущий статус юридического лица.
//			Поля:
//			** Код - Строка - код статуса;
//			** Наименование - Строка - наименование статуса;
//		* РегистрирующийОрган - Структура - орган, зарегистрировавший юридическое лицо.
//			Поля:
//			** Код - Строка - код органа;
//			** Наименование - Строка - наименование органа;
//		* ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление адреса.
//			** Комментарий - Строка - произвольный комментарий.
//			** Корректный - Булево - адрес является корректным по данным ФИАС;
//		* Телефон - Структура, Неопределено - данные о телефоне.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление телефона.
//			** Комментарий - Строка - произвольный комментарий.
//		* Руководитель - Структура, Неопределено - данные о руководителе.
//			** Должность - Строка - должность руководителя.
//			** Фамилия - Строка - фамилия руководителя.
//			** Имя - Строка - имя руководителя.
//			** Отчество - Строка - отчество руководителя.
//			** Представление - Строка - ФИО руководителя.
//			** ИНН - Строка - ИНН руководителя.
//			** ДатаЗаписи - Дата - дата записи о руководителе.
//		* РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//			** Код - Строка - код налогового органа.
//			** Наименование - Строка - наименование налогового органа.
//			** ОКТМО - Строка - код ОКТМО налогового органа.
//			** ОКАТО - Строка - код ОКАТО налогового органа.
//			** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//		* ДатаРегистрации - Дата - дата регистрации юридического лица.
//		* РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//			** РегистрационныйНомерПФР - Строка - регистрационный номер юридического лица в ПФР.
//			** КодОрганаПФР - Строка - код органа ПФР.
//			** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//			** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//		* РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//			** РегистрационныйНомерФСС - Строка - регистрационный номер юридического лица в ФСС.
//			** КодПодчиненности - Строка - код подчиненности органа ФСС.
//			** КодОрганаФСС - Строка - код органа ФСС.
//			** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//			** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//		* КодОКВЭД - Строка - основной код по классификатору ОКВЭД.
//		* ЭтоОКВЭД2 - Булево - основной код приведен по классификатору редакции 2 или редакции 1.
//		* ИсторияРеквизитов - Структура - история изменения реквизитов юридического лица.
//			** КПП - ТаблицаЗначений - история изменения значения реквизита КПП;
//				Колонки:
//				*** Дата - Дата - дата изменения КПП;
//				*** Значение - Строка - значение реквизита КПП;
//			** Наименование - ТаблицаЗначений - история изменения наименования;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** НаименованиеПолное - Строка - полное наименование юридического лица;
//				*** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица;
//			** Адрес - ТаблицаЗначений - история изменения адреса;
//				Колонки:
//				*** Дата - Дата - дата изменения адреса;
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса;
//				*** Комментарий - Строка - произвольный комментарий;
//			** Статус - ТаблицаЗначений - история изменения статуса;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** Код - Строка - код статуса;
//				*** Наименование - Строка - наименование статуса;
//			** РеквизитыДиректора - ТаблицаЗначений - история изменения реквизитов директора;
//				Колонки:
//				*** Дата - Дата - дата изменения реквизитов директора;
//				*** ДатаОкончания - Дата - дата окончания действия реквизитов.
//					Пустая дата, если директор действующий;
//				*** ИНН - Строка - ИНН;
//				*** Фамилия - Строка - фамилия директора;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//				*** ВидДолжности - Строка - вид должности;
//				*** НаименованиеДолжности - Строка - наименование должности;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыЮридическогоЛицаПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов юридического лица для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыОрганизации = НовыеРеквизитыЮридическогоЛица();
	РеквизитыОрганизации.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаЮридическиеЛица();
		ИмяМетода        = "findCorporationByInn";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findCorporationByInn"));
		ВходныеПараметры.inn = ИНН;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findCorporationByInn(ВходныеПараметры);
			ОбъектXDTO = Ответ.РеквизитыЮрЛица;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		ОбъектXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		РеквизитыОрганизации);
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
		Возврат РеквизитыОрганизации;
	КонецЕсли;
	
	ЗаполнитьНаименованияЮридическогоЛицаXDTO(ОбъектXDTO, РеквизитыОрганизации);
	
	РеквизитыОрганизации.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	РеквизитыОрганизации.КПП = ОбъектXDTO.КПП;
	
	РеквизитыОрганизации.ДатаРегистрации = ОбъектXDTO.СвНаимЮЛ.ДатаОбрЮЛ;
	
	АдресныеСокращения = Неопределено;
	
	ЗаполнитьКодОКВЭДXDTO(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьРегистрациюВНалоговомОрганеXDTO(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьРеквизитыПенсионногоФондаXDTO(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахованияXDTO(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьЮридическийАдресXDTO(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO, АдресныеСокращения);
	ЗаполнитьРуководителяИНомерТелефонаИзXDTO(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьИсториюРеквизитовЮридическогоЛицаИзXDTO(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO, АдресныеСокращения);
	ЗаполнитьИнформациюОСтатусеСтруктураXDTO(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьИнформациюОРегистрирующемОрганеXDTO(ОбъектXDTO, РеквизитыОрганизации);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов юридического лица для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодсистемКонфигурации

// См. ОбновлениеИнформационнойБазыБИП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ВключитьПроверкуКонтрагентовВМоделиСервиса";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.2.1";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки";
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("c4bcb537-61e2-4fbf-af66-a5854048948f");
	Обработчик.Комментарий = НСтр("ru = 'Проверяет существование контрагентов по базе ФНС.
		|До завершения выполнения существование контрагента может быть определено не для всех контрагентов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.3.2.15";
	Обработчик.Процедура           = "ПроверкаКонтрагентовФНС.УстановитьРасписаниеПроверкиКэшаСостояний";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
КонецПроцедуры

// См. процедуру ИнтернетПоддержкаПользователей.ПриДобавленииПараметровРаботыКлиента.
//
Процедура ПриДобавленииПараметровРаботыКлиента(ПараметрыИПП) Экспорт
	
	ПараметрыРаботаСКонтрагентами = Новый Структура;
	
	СвойстваСправочниковТаблица = СвойстваСправочниковКонтрагентов();
	
	// Справочники для интерактивного выбора при создании элементов из Досье контрагента.
	СправочникиСозданиеИзДосье = Новый Массив;
	Для Каждого ОписаниеСправочника Из СвойстваСправочниковТаблица Цикл
		Если Не ОписаниеСправочника.ОтключитьСозданиеИзДосьеКонтрагента Тогда
			СправочникиСозданиеИзДосье.Добавить(
				Новый Структура("Имя, Синоним",
					ОписаниеСправочника.Имя,
					Метаданные.Справочники[ОписаниеСправочника.Имя].Синоним));
		КонецЕсли;
	КонецЦикла;
	ПараметрыРаботаСКонтрагентами.Вставить("СправочникиСозданиеИзДосье", СправочникиСозданиеИзДосье);
	
	ПараметрыИПП.Вставить("РаботаСКонтрагентами", ПараметрыРаботаСКонтрагентами);
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"api.orgregister.1c.ru",
		443,
		НСтр("ru = 'Сервис 1С:Контрагент'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"api.taxregister.1c.ru",
		443,
		НСтр("ru = 'Сервис 1С:Контрагент'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		ПроверкаКонтрагентовФНС.ХостСервисаПроверкиСостоянийФНС(),
		80,
		НСтр("ru = 'Сервис ФНС для проверки контрагентов'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// См. процедуру
// ИнтернетПоддержкаПользователей.ПриФормированииСпискаУслуг.
//
Процедура ПриФормированииСпискаУслуг(Услуги) Экспорт
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Автозаполнение реквизитов контрагентов'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Автозаполнение и проверка реквизитов ФНС, ФСС, ПФР'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиИнформацияОСвязяхКонтрагентов());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Досье контрагента'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиИнформацияОПроверкахКонтролирующимиОрганами());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Информация о плановых и внеплановых проверках организации'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаКэшаСостоянийФНС.ИмяМетода);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		КонецЕсли;
		
	Иначе
		
		// Запуск фонового задания после включения проверки не требуется.
		ПроверкаКонтрагентов.ВключитьВыключитьПроверкуКонтрагентов(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
//
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
	МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("ИспользуетсяПроверкаКонтрагентов", 
		Константы.ИспользоватьПроверкуКонтрагентов.Получить());
	
КонецПроцедуры

#КонецОбласти

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.Элементы.БИПГруппаПроверкаКонтрагентов.Видимость =
		Пользователи.ЭтоПолноправныйПользователь(, Истина)
		И (Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	Если Форма.Элементы.БИПГруппаПроверкаКонтрагентов.Видимость Тогда
		Форма.БИПИспользоватьПроверкуКонтрагентов = Константы.ИспользоватьПроверкуКонтрагентов.Получить();
		ПроверкаКонтрагентов.УстановитьВидимостьИЗаголовокПредупрежденияПроТестовыйРежим(
			Форма.Элементы.ПредупреждениеПроТестовыйРежимПроверкиКонтрагента);
		Форма.Элементы.ПредупреждениеПроТестовыйРежимПроверкиКонтрагента.ЦветФона =
			Метаданные.ЭлементыСтиля.ЦветФонаПоясненияОшибкиБИП.Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемБиблиотеки

// Регистрирует список сервисов, которые доступны для
// использования в конфигурации.
//
// Параметры:
//   СервисыСопровождения - Массив из Структура - сервисы доступные для использовании в конфигурации;
//     Значение - Структура - см. ПодключениеСервисовСопровождения.НовыйОписательСервиса().
//
// Пример:
//  ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
//  ОписательСервиса.Идентификатор   = "contragent";
//  ОписательСервиса.КартинкаСервиса = Метаданные.ОбщиеКартинки.Сервис1СКонтрагент;
//  ОписательСервиса.Наименование    = НСтр("ru = '1С:Контрагент'");
//  ОписательСервиса.ОписаниеСервиса = НСтр("ru = 'Быстрая проверка информации о контрагентах, автоматическое
//    |заполнение реквизитов контрагентов в различных документах и другие полезные функции.'");
//
//  СервисыСопровождения.Добавить(ОписательСервиса);
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
	ОписательСервиса = МодульПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор   = ИдентификаторСервиса();
	ОписательСервиса.Картинка        = Метаданные.ОбщиеКартинки.Сервис1СКонтрагент48;
	ОписательСервиса.Наименование    = НСтр("ru = '1С:Контрагент'");
	ОписательСервиса.Описание        = НСтр("ru = 'Быстрая проверка информации о контрагентах,
		| автоматическое заполнение реквизитов контрагентов в различных документах и другие полезные функции.'");
	
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Процедура ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки)
	
	ПараметрыСервиса = ПараметрыСервисаДоступность();
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL              = ПараметрыСервиса.URL;
	ПараметрыПодключения.URIПространстваИмен    = ПараметрыСервиса.URIПространстваИмен;
	ПараметрыПодключения.ИмяСервиса             = ПараметрыСервиса.Имя;
	ПараметрыПодключения.ИмяТочкиПодключения    = ПараметрыСервиса.ИмяТочкиПодключения;
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Ложь;
	ПараметрыПодключения.Таймаут                = 15;
	
	Попытка
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса. Не удалось получить описание сервиса. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Попытка
		Прокси.ping();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса. Ошибка при вызове операции ping(). %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьДоступностьRESTСервисаКонтрагент(ОписаниеОшибки)
	
	URLОперацииPing = URLRESTОперацииPing();
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса. Не удалось получить описание сервиса. %1
				|%2'"),
				URLОперацииPing,
				РезультатПроверки.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИННСлужебная(
	СписокИНН, Плановые, Внеплановые, Завершенные, Незавершенные, ПроверитьДоступностьСервиса) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение информации о проверках контрагентов. Количество ИНН: %1'"),
			СписокИНН.Количество()),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	МаксимальноеКоличествоИНН = 1000;
	Если СписокИНН.Количество() > МаксимальноеКоличествоИНН Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра ""СписокИНН"". Количество ИНН превышает %1.'"),
			Формат(МаксимальноеКоличествоИНН, "ЧГ=0"));
	КонецЕсли;
	
	Результат = НоваяИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН();
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиИнформацияОПроверкахКонтролирующимиОрганами();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	Если ПроверитьДоступностьСервиса Тогда
		ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаПроверкиФНС();
		ИмяМетода        = "findInspectionsByInnList";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findInspectionsByInnList"));
		Для Каждого ИНН Из СписокИНН Цикл
			ВходныеПараметры.innList.Добавить(СокрЛП(ИНН));
		КонецЦикла;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findInspectionsByInnList(ВходныеПараметры);
			ОбъектXDTO = Ответ.InspectionsList;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		ОбъектXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОжиданиеОтвета = ОбъектXDTO.awaitingResponse;
	Если Результат.ОжиданиеОтвета Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Ожидание ответа получение информации о проверках контрагентов'"),
			"Контрагент",
			ДополнительноеСобытиеПолучениеДанных());
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИНН Из СписокИНН Цикл
		Результат.Проверки.Вставить(ИНН, НоваяТаблицаПроверкиКонтролирующимиОрганами());
	КонецЦикла;
	
	Если ОбъектXDTO.Inspections <> Неопределено Тогда
		Для Каждого ЭлементСпискаXDTO Из ОбъектXDTO.Inspections Цикл
			ЗаполнитьИнформациюОПроверкахКонтролирующимиОрганами(
				ЭлементСпискаXDTO,
				Результат,
				Плановые,
				Внеплановые,
				Завершенные,
				Незавершенные);
		КонецЦикла;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Успешно завершено получение информации о проверках контрагентов.'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСправочниковКонтрагентов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	Результат.Колонки.Добавить("Имя"                                , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("Иерархический"                      , ОписаниеТипаБулево);
	Результат.Колонки.Добавить("РеквизитИНН"                        , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("РеквизитКПП"                        , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ОтключитьСозданиеИзДосьеКонтрагента", ОписаниеТипаБулево);
	
	РаботаСКонтрагентамиПереопределяемый.ПриОпределенииСвойствСправочниковКонтрагентов(Результат);
	
	Если Результат.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить свойства справочника Контрагенты.
			|Не заполнена реализация метода ПриОпределенииСвойствСправочниковКонтрагентов()
			|общего модуля РаботаСКонтрагентамиПереопределяемый.'");
	КонецЕсли;
	
	Результат.Колонки.Добавить("ТипСсылка", Новый ОписаниеТипов("Тип"));
	
	Для Каждого СтрокаОписаниеСправочника Из Результат Цикл
		СтрокаОписаниеСправочника.ТипСсылка = Тип("СправочникСсылка." + СтрокаОписаниеСправочника.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УслугаПодключена(ИдентификаторУслуги)
	
	Возврат ИнтернетПоддержкаПользователей.УслугаПодключена(ИдентификаторУслуги);
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса = Неопределено,
	ДополнительноеСобытие = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Сообщение);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса,
	ДополнительноеСобытие = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
	
	Если ИдентификаторСервиса = "Контрагент" Тогда
		Возврат НСтр("ru = 'Сервис данных единых гос_реестров'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "РАФП" Тогда
		Возврат НСтр("ru = 'Сервис данных аккредитованных филиалов представительств иностранных юр. лиц'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "ГосОрганы" Тогда
		Возврат НСтр("ru = 'Сервис данных гос_органов'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "ПроверкаКонтрагентов" Тогда
		Возврат НСтр("ru = 'Проверка контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат НСтр("ru = 'Работа с контрагентами'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецФункции

// Свойства справочника контрагенты.
//	Предназначена для определения имени справочника, имени реквизитов ИНН и КПП.
//
// Возвращаемое значение:
//	Структура - Структура с ключами Имя, ИНН и КПП справочника контрагенты.
//
Функция СвойстваСправочникаКонтрагенты(Ссылка, ИсключениеПриОтсутствииОписания = Истина) Экспорт
	
	СвойстваСправочников = СвойстваСправочниковКонтрагентов();
	СсылкаТипЗнч = ТипЗнч(Ссылка);
	СтрОписаниеСправочника = СвойстваСправочников.Найти(СсылкаТипЗнч, "ТипСсылка");
	Если СтрОписаниеСправочника = Неопределено И ИсключениеПриОтсутствииОписания Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует описание справочника с именем ""%1"" в методе ПриОпределенииСвойствСправочниковКонтрагентов()
				|общего модуля ИнтернетПоддержкаПользователейПереопределяемый.'"),
			Ссылка.Метаданные().Имя);
	КонецЕсли;
	
	Возврат СтрОписаниеСправочника;
	
КонецФункции

Функция ИдентификаторСервиса()
	
	Возврат "1C-Counteragent";
	
КонецФункции

Функция ИдентификаторСервисаКонтрагент()
	
	Возврат "Контрагент";
	
КонецФункции

Функция ЗначенияЭквивалентны(Значение1, Значение2)
	
	ТипЗначение1 = ТипЗнч(Значение1);
	ТипЗначение2 = ТипЗнч(Значение2);
	Если ТипЗначение1 = Тип("Массив") Или ТипЗначение1 = Тип("ФиксированныйМассив") Тогда
		
		Если ТипЗначение2 <> Тип("Массив") И ТипЗначение2 <> Тип("ФиксированныйМассив")
			Или Значение1.Количество() <> Значение2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Итератор = 0 По Значение1.ВГраница() Цикл
			Если Не ЗначенияЭквивалентны(Значение1[Итератор], Значение2[Итератор]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗначение1 = Тип("Структура") Или ТипЗначение1 = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ТипЗначение2 <> Тип("Структура") И ТипЗначение2 <> Тип("ФиксированнаяСтруктура")
			Или Значение1.Количество() <> Значение2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из Значение1 Цикл
			ЗначениеСвойства2 = Неопределено;
			Если Не Значение2.Свойство(КлючЗначение.Ключ, ЗначениеСвойства2) Тогда
				Возврат Ложь;
			КонецЕсли;
			Если Не ЗначенияЭквивалентны(КлючЗначение.Значение, ЗначениеСвойства2) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗначение1 = Тип("Соответствие") Или ТипЗначение1 = Тип("ФиксированноеСоответствие") Тогда
		
		Если ТипЗначение2 <> Тип("Соответствие") И ТипЗначение2 <> Тип("ФиксированноеСоответствие")
			Или Значение1.Количество() <> Значение2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Ключи1 = Новый Соответствие;
		Для Каждого КлючЗначение Из Значение1 Цикл
			Если Не ЗначенияЭквивалентны(КлючЗначение.Значение, Значение2.Получить(КлючЗначение.Ключ)) Тогда
				Возврат Ложь;
			КонецЕсли;
			Ключи1.Вставить(КлючЗначение.Ключ, Истина);
		КонецЦикла;
		
		// Проверить отсутствие ключей второго соответствия в первом
		Для Каждого КлючЗначение Из Значение2 Цикл
			Если Ключи1.Получить(КлючЗначение.Ключ) <> Истина Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Возврат (Значение1 = Значение2);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Тарификация

Функция ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов()
	
	Возврат "1c-counteragent-autocomplete-contractor-details";
	
КонецФункции

Функция ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов()
	
	Возврат "1c-counteragent-taxregister";
	
КонецФункции

Функция ИдентификаторУслугиИнформацияОСвязяхКонтрагентов()
	
	Возврат "1c-counteragent-contractor-record";
	
КонецФункции

Функция ИдентификаторУслугиИнформацияОПроверкахКонтролирующимиОрганами()
	
	Возврат "1c-counteragent-organization-audit";
	
КонецФункции

#КонецОбласти

#Область СервисыЗаполненияРеквизитов

#Область ОбщегоНазначения

Функция ПроксиСервиса(URLМестоположенияWSDL, URIПространстваИмен, ИмяСервиса, ИмяТочкиПодключения, ОписаниеОшибки)
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Создание WSПрокси с аутентификацией по тикету аутентификации.
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL           = URLМестоположенияWSDL;
		ПараметрыПодключения.URIПространстваИмен = URIПространстваИмен;
		ПараметрыПодключения.ИмяСервиса          = ИмяСервиса;
		ПараметрыПодключения.ИмяТочкиПодключения = ИмяТочкиПодключения;
		ПараметрыПодключения.Таймаут             = 60;
		
		ОшибкаАутентификации = Ложь;
		
		// Попытка создания объекта без аутентификации (по данным Кэш).
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
			ОшибкаАутентификации = (СтрНайти(ОписаниеОшибкиВРег, """STATUS"":401") > 0
				Или СтрНайти(ОписаниеОшибкиВРег, "SERVER-9:") > 0);
		КонецЕсли;
		
		Если ОшибкаАутентификации Тогда
			
			// Нет описания WSDL в кэше программных интерфейсов.
			// Получить новое описание с использованием тикета, новое описание
			// будет сохранено в кэше программных интерфейсов.
			ОписаниеОшибки = "";
			УстановитьПривилегированныйРежим(Истина);
			
			// Работа в модели сервиса.
			МодульИнтернетПоддержкаПользователейВМоделиСервиса =
				ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
			РезультатПолученияТикета = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLМестоположенияWSDL);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить тикет аутентификации для создания описания сервиса %1.
							|Код ошибки: %2.
							|Для аутентификации использован логин ""fresh"".'"),
						URLМестоположенияWSDL,
						РезультатПолученияТикета.КодОшибки),
					"РаботаСКонтрагентами");
				ПараметрыПодключения.ИмяПользователя = "fresh";
				ПараметрыПодключения.Пароль          = "fresh";
			Иначе
				ПараметрыПодключения.ИмяПользователя = "AUTH_TOKEN";
				ПараметрыПодключения.Пароль          = РезультатПолученияТикета.Тикет;
			КонецЕсли;
			
			Попытка
				Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		// Создание WSПрокси в обычном режиме с аутентификацией по логину и паролю.
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL           = URLМестоположенияWSDL;
		ПараметрыПодключения.URIПространстваИмен = URIПространстваИмен;
		ПараметрыПодключения.ИмяСервиса          = ИмяСервиса;
		ПараметрыПодключения.ИмяТочкиПодключения = ИмяТочкиПодключения;
		ПараметрыПодключения.ИмяПользователя     = ДанныеАутентификации.Логин;
		ПараметрыПодключения.Пароль              = ДанныеАутентификации.Пароль;
		ПараметрыПодключения.Таймаут             = 60;
		
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Процедура ЗаполнитьТикетАутентификации(ПроксиСервиса, АдресСервиса, ИмяМетода, ОписаниеОшибки)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Получение тикета.
	УстановитьПривилегированныйРежим(Истина);
	
	// Работа в модели сервиса.
	МодульИнтернетПоддержкаПользователейВМоделиСервиса =
		ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
	РезультатПолученияТикета = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
		АдресСервиса + "#" + ИмяМетода);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить тикет аутентификации для вызова операции %1 сервиса %2.
					|Код ошибки: %3.
					|Для аутентификации использован логин ""fresh"".'"),
				ИмяМетода,
				АдресСервиса,
				РезультатПолученияТикета.КодОшибки),
			"РаботаСКонтрагентами");
		ПроксиСервиса.Пользователь = "fresh";
		ПроксиСервиса.Пароль       = "fresh";
	Иначе
		ПроксиСервиса.Пользователь = "AUTH_TOKEN";
		ПроксиСервиса.Пароль       = РезультатПолученияТикета.Тикет;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыАутентификацииREST(URLОперации, ОписаниеОшибки)
	
	Результат = Новый Структура("Логин, Пароль");
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
		Иначе
			Результат.Логин = ДанныеАутентификации.Логин;
			Результат.Пароль = ДанныеАутентификации.Пароль;
		КонецЕсли;
		
	Иначе
		
		// Получение тикета.
		УстановитьПривилегированныйРежим(Истина);
		
		// Работа в модели сервиса.
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(URLОперации);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить тикет аутентификации для вызова операции %1.
						|Код ошибки: %2.
						|Для аутентификации использован логин ""fresh"".'"),
					URLОперации,
					РезультатПолученияТикета.КодОшибки),
				"РаботаСКонтрагентами");
			Результат.Логин = "fresh";
			Результат.Пароль = "fresh";
		Иначе
			Результат.Логин = "AUTH_TOKEN";
			Результат.Пароль = РезультатПолученияТикета.Тикет;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, Сервис, ИмяМетода, ИдентификаторУслуги, Результат)
	
	Если ОбъектXDTO <> Неопределено И Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	КодОсновногоЯзыка  = ОбщегоНазначения.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
	ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
	
	Если ОписаниеОшибкиВРег = ВРег("НеУказаныПараметрыАутентификации")
		Или ОписаниеОшибкиВРег = ВРег("НеУказанПароль") Тогда
		
		Результат.ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Интернет-поддержка пользователей не подключена.'"),
			Сервис,
			НСтр("ru='Аутентификация'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, """STATUS"":401") > 0
		Или СтрНайти(ОписаниеОшибкиВРег, "SERVER-9:") > 0 Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе. Обратитесь к администратору.'");
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка аутентификации в сервисе.
						|%1'"),
						ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", КодОсновногоЯзыка));
		Иначе
			Результат.ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Интернет-поддержка пользователей не подключена.
						|%1'"),
						ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", КодОсновногоЯзыка));
		КонецЕсли;
		
	ИначеЕсли ОписаниеОшибкиВРег = ВРег("УслугаНеПодключена") Тогда
		
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Услуга с идентификатором ""%1"" не подключена.'"),
				ИдентификаторУслуги),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-11:") > 0 
		Или СтрНайти(ОписаниеОшибкиВРег, "SERVER-12:") > 0 Тогда
		
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис 1С:Контрагент не подключен.
					|%1'"),
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-1:") > 0 Тогда
		
		Если ИмяМетода = "findCorporationByInn"
			ИЛИ ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН юридического лица.'");
		ИначеЕсли ИмяМетода = "findEntrepreneurByInn" 
			ИЛИ ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН предпринимателя.'");
		ИначеЕсли ИмяМетода = "findCorporationsByName" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указано наименование юридического лица.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН проверяемого лица.'");
		ИначеЕсли ИмяМетода = "findPfrByCode"
			Или ИмяМетода = "findFssByCode"
			Или ИмяМетода = "findIfnsByCode" Тогда
			Результат.ОписаниеОшибки  = НСтр("ru='Не указан код государственного органа.'");
		Иначе
			Результат.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-2:") > 0 Тогда
		
		Если ИмяМетода = "findCorporationByInn" 
			ИЛИ ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН юридического лица должен состоять из 10 цифр.'");
		ИначеЕсли ИмяМетода = "findEntrepreneurByInn" 
			ИЛИ ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН предпринимателя должен состоять из 12 цифр.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН проверяемого лица должен состоять из 10 или 12 цифр.'");
		Иначе
			Результат.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-3:") > 0 Тогда
		
		Если ИмяМетода = "findCorporationByInn" 
			ИЛИ ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН юридического лица должен содержать только цифры.'");
		ИначеЕсли ИмяМетода = "findEntrepreneurByInn" 
			ИЛИ ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН предпринимателя должен содержать только цифры.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН проверяемого лица должен содержать только цифры.'");
		ИначеЕсли ИмяМетода = "findPfrByCode"
			Или ИмяМетода = "findFssByCode"
			Или ИмяМетода = "findIfnsByCode" Тогда
			Результат.ОписаниеОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные о государственном органе с кодом %1 не найдены.'"),
				Результат.Код);
		Иначе
			Результат.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-4:") > 0 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.
					|%1'"),
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Вызов операций'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-7:") > 0 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru='Превышен лимит количества вызовов сервиса за один день'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-8:") > 0 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru='Отсутствует действующий договор ИТС'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли Не ЗначениеЗаполнено(ОписаниеОшибки) И ОбъектXDTO = Неопределено Тогда
		
		Если ИмяМетода = "findCorporationByInn"
			ИЛИ ИмяМетода = "findEntrepreneurByInn" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findCorporationsByName" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не удалось выполнить поиск по наименованию.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о проверках по ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о юридическом лице с ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о предпринимателе с ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findPfrByCode"
			Или ИмяМетода = "findFssByCode"
			Или ИмяМетода = "findIfnsByCode" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные о государственном органе с кодом %1 не найдены.'"),
				Результат.Код);
		КонецЕсли;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|Получен пустой ответ сервиса.'"),
				Результат.ОписаниеОшибки,
				ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	Иначе
		
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при работе с сервисом.
					|%1.'"),
				ОписаниеОшибки),
			Сервис,
			НСтр("ru='Ошибка'", КодОсновногоЯзыка));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительноеСобытиеПолучениеДанных()
	
	Возврат НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ДополнительныеПараметрыВызоваОперацииСервиса(ФабрикаXDTOСервиса, URIПространстваИмен)
	
	ИмяКонфигурации = ИнтернетПоддержкаПользователей.ИмяКонфигурации();
	ТипДополнительныеПараметрыXDTO = ФабрикаXDTOСервиса.Тип(URIПространстваИмен, "AdditionalParameters");
	ТипДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Тип(URIПространстваИмен, "AdditionalParameter");
	
	Результат = ФабрикаXDTOСервиса.Создать(ТипДополнительныеПараметрыXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "ConfigurationName";
	ДополнительныйПараметрXDTO.value = ИмяКонфигурации;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "SupportsCustomAddressElements";
	ДополнительныйПараметрXDTO.value = "true";
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "SupportsAddressFormatV2";
	ДополнительныйПараметрXDTO.value = "true";
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Контрагенты

Функция БазовыйURLСервиса()
	
	
	Возврат "https://api.orgregister.1c.ru";
	
КонецФункции

Функция URLRESTОперацииPing()
	
	Возврат БазовыйURLСервиса() + "/rest/availability/v1/ping";
	
КонецФункции

Функция URLRESTОперацииFindCounterAgentsByInn(ИНН)
	
	Возврат БазовыйURLСервиса() + "/rest/counter-agent/v1/find-counter-agents-by-inn?inn="
		+ КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция URLRESTОперацииFindCorporationTrustabilityByInn(ИНН)
	
	Возврат БазовыйURLСервиса() + "/rest/corporation/v1/find-corporation-trustability-by-inn?inn="
		+ КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция URLRESTОперацииFindCorporationsByName(Наименование, КодРегиона, Адрес)
	
	Возврат БазовыйURLСервиса() + "/rest/corporation/v1/find-corporations-by-name"
		+ "?name=" + КодироватьСтроку(Наименование, СпособКодированияСтроки.КодировкаURL)
		+ ?(ЗначениеЗаполнено(КодРегиона), "&regionCode=" + КодироватьСтроку(КодРегиона, СпособКодированияСтроки.КодировкаURL), "")
		+ ?(ЗначениеЗаполнено(Адрес), "&address=" + КодироватьСтроку(Адрес, СпособКодированияСтроки.КодировкаURL), "");
	
КонецФункции

Функция URLRESTОперацииFindPersonByInn(ИНН)
	
	Возврат БазовыйURLСервиса() + "/rest/person/v1/find-person-by-inn?inn="
		+ КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция URLRESTОперацииFindPersonTrustabilityByInn(ИНН)
	
	Возврат БазовыйURLСервиса() + "/rest/person/v1/find-person-trustability-by-inn?inn="
		+ КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

Функция ПроверитьУслугуИВызватьОперациюRESTСервиса(
	ИдентификаторУслуги,
	URLОперации,
	Сервис,
	ОписаниеОшибки400 = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки"  , "");
	Результат.Вставить("ТелоОтветаОбъект", "");
	Результат.Вставить("ОжиданиеОтвета"  , Ложь);
	
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Услуга с идентификатором ""%1"" не подключена.'"),
				ИдентификаторУслуги),
			Сервис,
			НСтр("ru='Доступ'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ПроверитьДоступностьRESTСервисаКонтрагент(Результат.ОписаниеОшибки);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Услуга с идентификатором ""%1"" не подключена.'"),
				ИдентификаторУслуги),
			Сервис,
			НСтр("ru='Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыАутентификации = ПараметрыАутентификацииREST(URLОперации, Результат.ОписаниеОшибки);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Интернет-поддержка пользователей не подключена.'"),
			Сервис,
			НСтр("ru='Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	СистИнфо = Новый СистемнаяИнформация;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("User-Agent",
		"1C-Enterprice-" + СистИнфо.ВерсияПриложения + ";" +
		"ISL-" + ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки() + ";");
	Заголовки.Вставить("configurationName", РаботаСКонтрагентамиСлужебныйПовтИсп.ИмяКонфигурацииBase64());
	ПараметрыВызоваОперации = Новый Структура;
	ПараметрыВызоваОперации.Вставить("Метод"       , "GET");
	ПараметрыВызоваОперации.Вставить("ФорматОтвета", 1);
	ПараметрыВызоваОперации.Вставить("Заголовки"   , Заголовки);
	ПараметрыВызоваОперации.Вставить("Таймаут"     , 30);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		ПараметрыАутентификации.Логин,
		ПараметрыАутентификации.Пароль,
		ПараметрыВызоваОперации);
	
	Если РезультатОперации.КодСостояния = 202 Тогда
		
		Результат.ОжиданиеОтвета = Истина;
		
	ИначеЕсли РезультатОперации.КодСостояния >= 200 И РезультатОперации.КодСостояния < 300 Тогда
		
		Попытка
			Результат.ТелоОтветаОбъект = ТелоОтветаОбъектИзСтроки(РезультатОперации.Содержимое);
		Исключение
			Результат.ОписаниеОшибки = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при обработке тела ответа операции %1 %2.
					|%3'"),
					ПараметрыВызоваОперации.Метод,
					URLОперации,
					Результат.КодСостояния,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Сервис,
				НСтр("ru='Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецПопытки;
		
	ИначеЕсли РезультатОперации.КодСостояния = 400 Тогда
		
		Результат.ОписаниеОшибки = ?(ОписаниеОшибки400 = Неопределено,
			НСтр("ru = 'Некорректный формат параметров запроса.'"),
			ОписаниеОшибки400);
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1,
				|%2",
				Результат.ОписаниеОшибки,
				РезультатОперации.ИнформацияОбОшибке),
			Сервис,
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ИначеЕсли РезультатОперации.КодСостояния = 401 Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе. Обратитесь к администратору.'");
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка аутентификации в сервисе.
						|%1'"),
						Результат.ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Иначе
			Результат.ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Интернет-поддержка пользователей не подключена.
						|%1'"),
						Результат.ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 402 Или РезультатОперации.КодСостояния = 403 Тогда
		
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Сервис 1С:Контрагент не подключен (403)'"),
			Сервис,
			НСтр("ru='Доступ'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ИначеЕсли РезультатОперации.КодСостояния = 429 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.'");
		ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Превышено количество попыток. Повторите попытку позже (429).'"),
			Сервис,
			НСтр("ru='Вызов операций сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	Иначе
		
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось вызвать операцию %1 %2 сервиса.
					|Ошибка при выполнении запроса.
					|Код состояния: %3
					|%4'"),
				ПараметрыВызоваОперации.Метод,
				URLОперации,
				РезультатОперации.КодСостояния,
				РезультатОперации.ИнформацияОбОшибке),
			Сервис,
			НСтр("ru='Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТелоОтветаОбъектИзСтроки(Строка)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	Возврат Результат;
	
КонецФункции

Функция ДатаИзJSON(ДатаСтрока)
	
	Возврат ?(ДатаСтрока = Неопределено, Неопределено, ПрочитатьДатуJSON(ДатаСтрока, ФорматДатыJSON.ISO));
	
КонецФункции

Функция ПараметрыСервисаПроверкиФНС()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/inspection/v1?wsdl");
	Результат.Вставить("Имя"                , "InspectionWsImplService");
	Результат.Вставить("URIПространстваИмен", "http://ws.inspection.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "InspectionWsImplPort");
	
	Возврат Результат;

КонецФункции

Функция ПараметрыСервисаДоступность()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/availability/v1?wsdl");
	Результат.Вставить("Имя"                , "AvailabilityWsImplService");
	Результат.Вставить("URIПространстваИмен", "http://ws.availability.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "AvailabilityWsImplPort");
	
	Возврат Результат;
	
КонецФункции

#Область ОписанияРеквизитов

Функция НовыеРеквизитыЮридическогоЛица()

	РеквизитыОрганизации = Новый Структура;
	
	// Заполняется на основе данных ЕГРЮЛ.
	РеквизитыОрганизации.Вставить("ИНН");
	РеквизитыОрганизации.Вставить("КПП");
	РеквизитыОрганизации.Вставить("Наименование");
	РеквизитыОрганизации.Вставить("НаименованиеПолное");
	РеквизитыОрганизации.Вставить("НаименованиеСокращенное");
	РеквизитыОрганизации.Вставить("РегистрационныйНомер");
	РеквизитыОрганизации.Вставить("Статус");
	РеквизитыОрганизации.Вставить("РегистрирующийОрган");
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыОрганизации.Вставить("ПравоваяФорма");
	РеквизитыОрганизации.Вставить("ЮридическийАдрес");
	РеквизитыОрганизации.Вставить("Телефон");
	РеквизитыОрганизации.Вставить("Руководители", НоваяТаблицаРуководителей());
	РеквизитыОрганизации.Вставить("РегистрацияВНалоговомОргане");
	РеквизитыОрганизации.Вставить("ДатаРегистрации");
	РеквизитыОрганизации.Вставить("РегистрацияВПенсионномФонде");
	РеквизитыОрганизации.Вставить("РегистрацияВФСС");
	РеквизитыОрганизации.Вставить("ВидДеятельности");
	РеквизитыОрганизации.Вставить("ОткрытыеГосударственныеДанныеФНС", НоваяТаблицаОткрытыеГосударственныеДанныеФНС());
	
	РеквизитыОрганизации.Вставить("ИсторияРеквизитов", НовыйИсторияРеквизитовЮридическогоЛица());
	
	// Служебный реквизит
	РеквизитыОрганизации.Вставить("ОписаниеОшибки");
	
	// Устаревшие поля
	РеквизитыОрганизации.Вставить("КодОКВЭД");
	РеквизитыОрганизации.Вставить("ЭтоОКВЭД2", Ложь);
	РеквизитыОрганизации.Вставить("Руководитель");
	
	Возврат РеквизитыОрганизации;

КонецФункции

Функция НоваяТаблицаРАФП()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("КПП", ТипСтрока);
	Результат.Колонки.Добавить("ВидОбособленногоПодразделения", ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеПолное", ТипСтрока);
	Результат.Колонки.Добавить("РегистрацияВНалоговомОргане");
	Результат.Колонки.Добавить("ЮридическийАдрес");
	Результат.Колонки.Добавить("ВидДеятельности");
	Результат.Колонки.Добавить("ПрочиеВидыДеятельности");
	Результат.Колонки.Добавить("КоличествоИностранныхСотрудников", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Руководитель");
	Результат.Колонки.Добавить("Аккредитация");
	Результат.Колонки.Добавить("ИностранноеЮридическоеЛицо");
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаОткрытыеГосударственныеДанныеФНС()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КоличествоСотрудников");
	Результат.Колонки.Добавить("СуммаДоходов");
	Результат.Колонки.Добавить("СуммаРасходов");
	Результат.Колонки.Добавить("УчастиеВКГН");
	Результат.Колонки.Добавить("НалогообложениеЕСХН");
	Результат.Колонки.Добавить("НалогообложениеУСН");
	Результат.Колонки.Добавить("НалогообложениеЕНВД");
	Результат.Колонки.Добавить("НалогообложениеСРП");
	Результат.Колонки.Добавить("СведенияОНалогах"); // НоваяТаблицаСведенияОНалогах()
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаСведенияОНалогах()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	Результат.Колонки.Добавить("Уплачено");
	Результат.Колонки.Добавить("Задолженность");
	Результат.Колонки.Добавить("Штраф");
	Результат.Колонки.Добавить("Пени");
	Результат.Колонки.Добавить("Сортировка");
	
	Возврат Результат;
	
КонецФункции

#Область ИсторияРеквизитовЮридическогоЛица

Функция НовыйИсторияРеквизитовЮридическогоЛица()
	
	Результат = Новый Структура;
	Результат.Вставить("КПП"               , НовыйТаблицаИсторияКПП());
	Результат.Вставить("Наименование"      , НовыйТаблицаИсторияНаименование());
	Результат.Вставить("Адрес"             , НовыйТаблицаИсторияАдрес());
	Результат.Вставить("Статус"            , НовыйТаблицаИсторияСтатус());
	Результат.Вставить("РеквизитыДиректора", НовыйТаблицаИсторияРеквизитыДиректора());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияКПП()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Дата"    , Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияНаименование()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                   , ТипДата);
	Результат.Колонки.Добавить("НаименованиеПолное"     , ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеСокращенное", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияАдрес()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                , ТипДата);
	Результат.Колонки.Добавить("КонтактнаяИнформация", ТипСтрока);
	Результат.Колонки.Добавить("Представление"       , ТипСтрока);
	Результат.Колонки.Добавить("Комментарий"         , ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияСтатус()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"        , ТипДата);
	Результат.Колонки.Добавить("Код"         , ТипСтрока);
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияРеквизитыДиректора()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"         , ТипДата);
	Результат.Колонки.Добавить("ДатаОкончания", ТипДата);
	Результат.Колонки.Добавить("ИНН", ТипСтрока);
	Результат.Колонки.Добавить("Фамилия", ТипСтрока);
	Результат.Колонки.Добавить("Имя", ТипСтрока);
	Результат.Колонки.Добавить("Отчество", ТипСтрока);
	Результат.Колонки.Добавить("ВидДолжности", ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеДолжности", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция НовыеРеквизитыПредпринимателя()

	РеквизитыПредпринимателя = Новый Структура;
	
	// Заполняется на основе данных ЕГРИП.
	РеквизитыПредпринимателя.Вставить("ИНН");
	РеквизитыПредпринимателя.Вставить("Наименование");
	РеквизитыПредпринимателя.Вставить("НаименованиеПолное");
	РеквизитыПредпринимателя.Вставить("НаименованиеСокращенное");
	РеквизитыПредпринимателя.Вставить("ВидИП");
	РеквизитыПредпринимателя.Вставить("Фамилия");
	РеквизитыПредпринимателя.Вставить("Имя");
	РеквизитыПредпринимателя.Вставить("Отчество");
	РеквизитыПредпринимателя.Вставить("РегистрационныйНомер");
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыПредпринимателя.Вставить("Пол");
	РеквизитыПредпринимателя.Вставить("КодСтраныГражданства");
	РеквизитыПредпринимателя.Вставить("РегистрацияВНалоговомОргане");
	РеквизитыПредпринимателя.Вставить("РегистрацияВПенсионномФонде");
	РеквизитыПредпринимателя.Вставить("РегистрацияВФСС");
	РеквизитыПредпринимателя.Вставить("ДатаРегистрации");
	РеквизитыПредпринимателя.Вставить("СвидетельствоОРегистрации");
	РеквизитыПредпринимателя.Вставить("ВидДеятельности");
	РеквизитыПредпринимателя.Вставить("Статус");
	
	РеквизитыПредпринимателя.Вставить("КодОКВЭД");
	РеквизитыПредпринимателя.Вставить("ЭтоОКВЭД2", Ложь);
	
	РеквизитыПредпринимателя.Вставить("ИсторияРеквизитов", НовыйИсторияРеквизитовПредпринимателя());
	
	РеквизитыПредпринимателя.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыПредпринимателя;

КонецФункции

#Область ИсторияРеквизитовПредпринимателя

Функция НовыйИсторияРеквизитовПредпринимателя()
	
	Результат = Новый Структура;
	Результат.Вставить("ФИО"        , НовыйТаблицаИсторияФИО());
	Результат.Вставить("Гражданство", НовыйТаблицаИсторияГражданство());
	Результат.Вставить("ОГРН"       , НовыйТаблицаИсторияОГРНПредпринимателя());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияФИО()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"    , ТипДата);
	Результат.Колонки.Добавить("Фамилия" , ТипСтрока);
	Результат.Колонки.Добавить("Имя"     , ТипСтрока);
	Результат.Колонки.Добавить("Отчество", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияГражданство()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                , ТипДата);
	Результат.Колонки.Добавить("КодСтраныГражданства", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияОГРНПредпринимателя()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"    , ТипДата);
	Результат.Колонки.Добавить("Значение", ТипСтрока);
	Результат.Колонки.Добавить("ВидПредпринимателя");
	Результат.Колонки.Добавить("Статус");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИсторияВидПредпринимателя()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата"        , '00010101');
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИсторияСтатусПредпринимателя()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата"        , '00010101');
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция НоваяИнформацияОСвязяхЮридическогоЛица()

	ИнформацияОСвязях = НовыеРеквизитыЮридическогоЛица();
	
	// Дополнительная информация о юридическом лице и его связях.
	ИнформацияОСвязях.Вставить("НаименованиеСтатуса");
	ИнформацияОСвязях.Вставить("КодСтатуса");
	
	ИнформацияОСвязях.Вставить("УставныйКапитал");
	
	ИнформацияОСвязях.Вставить("ВидыДеятельности", НоваяТаблицаВидыДеятельности());
	
	ИнформацияОСвязях.Вставить("Лицензии", НоваяТаблицаЛицензии());
	
	// Все организации, которые зарегистрированы по тому же адресу, что и эта организация.
	ИнформацияОСвязях.Вставить("ОрганизацииПоАдресу", НоваяТаблицаОрганизации());
	
	// Все организации, где эта организация является учредителем.
	ИнформацияОСвязях.Вставить("УчрежденныеФирмы", НоваяТаблицаОрганизацииГдеУчредитель());
	
	// Все учредители этой организации.
	ИнформацияОСвязях.Вставить("Учредители", НоваяТаблицаУчредители());
	
	ИнформацияОСвязях.Вставить("Подразделения", НоваяТаблицаПодразделения());
	
	ИнформацияОСвязях.Вставить("ИзмененияВРеестре", НоваяТаблицаИзмененияВРеестре());
	
	ИнформацияОСвязях.Вставить("БухгалтерскаяОтчетность", НоваяТаблицаБухгалтерскаяОтчетность());
	
	ИнформацияОСвязях.Вставить("ОжиданиеОтвета", Ложь);
	
	// Устаревшие поля
	// Все организации, где этот руководитель является руководителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководитель"     , НоваяТаблицаОрганизации());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководительПоФИО", Ложь);
	
	// Все организации, где этот руководитель является учредителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредитель"     , НоваяТаблицаОрганизацииГдеУчредитель());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредительПоФИО", Ложь);
	
	Возврат ИнформацияОСвязях;

КонецФункции

Функция НовоеКонтактноеЛицо()

	Результат = Новый Структура;
	Результат.Вставить("Должность");
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("Представление");
	Результат.Вставить("ИНН");
	Результат.Вставить("ДатаЗаписи");
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаРуководителей()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Должность"                                   , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Фамилия"                                     , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Имя"                                         , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отчество"                                    , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление"                               , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН"                                         , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаЗаписи"                                  , Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ОрганизацииГдеРуководитель"); // НоваяТаблицаОрганизации()
	Результат.Колонки.Добавить("ОрганизацииГдеУчредитель"); // НоваяТаблицаОрганизацииГдеУчредитель()
	Результат.Колонки.Добавить("ОрганизацииГдеРуководительПоФИО", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОрганизацииГдеУчредительПоФИО"  , Новый ОписаниеТипов("Булево"));
	Возврат Результат;
	
КонецФункции

Функция НоваяИнформацияОСвязяхПредпринимателя()

	ИнформацияОСвязях = НовыеРеквизитыПредпринимателя();
	
	// Дополнительная информация о предпринимателе и его связях.
	
	ИнформацияОСвязях.Вставить("НаименованиеСтатуса");
	ИнформацияОСвязях.Вставить("КодСтатуса");
	
	ИнформацияОСвязях.Вставить("ВидыДеятельности", НоваяТаблицаВидыДеятельности());
	
	ИнформацияОСвязях.Вставить("Лицензии", НоваяТаблицаЛицензии());
	
	// Все организации, где этот предприниматель является руководителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководитель",      НоваяТаблицаОрганизации());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководительПоФИО", Ложь);
	
	// Все организации, где этот предприниматель является учредителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредитель",      НоваяТаблицаОрганизацииГдеУчредитель());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредительПоФИО", Ложь);
	
	ИнформацияОСвязях.Вставить("ИзмененияВРеестре", НоваяТаблицаИзмененияВРеестре());
	
	// Служебный реквизит
	ИнформацияОСвязях.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат ИнформацияОСвязях;

КонецФункции

Функция НоваяИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН()

	Информация = Новый Структура;
	
	Информация.Вставить("Проверки"      , Новый Соответствие);
	Информация.Вставить("ОписаниеОшибки", "");
	Информация.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат Информация;

КонецФункции

Функция НоваяКонтактнаяИнформация()

	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация");
	Результат.Вставить("Представление");
	Результат.Вставить("Комментарий");
	Возврат Результат;

КонецФункции

Функция НоваяРегистрацияВНалоговомОргане()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("ОКТМО");
	Результат.Вставить("ОКАТО");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВПенсионномФонде()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерПФР");
	Результат.Вставить("КодОрганаПФР");
	Результат.Вставить("НаименованиеОрганаПФР");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВФСС()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерФСС");
	Результат.Вставить("КодПодчиненности");
	Результат.Вставить("КодОрганаФСС");
	Результат.Вставить("НаименованиеОрганаФСС");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НовоеСвидетельствоОРегистрации()
	
	Результат = Новый Структура;
	Результат.Вставить("Серия");
	Результат.Вставить("Номер");
	Результат.Вставить("Дата");
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаВидыДеятельности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код",           Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Классификатор", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("КодОКВЭД",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОКВЭД", Новый ОписаниеТипов("Строка"));
	// ЭтоОКВЭД2 = Истина - код в строке по классификатору редакции 2, Ложь - редакции 1.
	Результат.Колонки.Добавить("ЭтоОКВЭД2",         Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаЛицензии()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Лицензия",         Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОписаниеЛицензии", Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаИзмененияВРеестре()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаИзменения",        Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ГосударственныйОрган", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОписаниеИзменения",    Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаПодразделения()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОписаниеПодразделения", Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаОрганизации()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН",                     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаОрганизацииГдеУчредитель()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроцентКапитала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6)));
	Результат.Колонки.Добавить("СуммаКапитала",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаУчредители()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Учредитель", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроцентКапитала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6)));
	Результат.Колонки.Добавить("СуммаКапитала",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("ОрганизацииГдеРуководитель");
	Результат.Колонки.Добавить("ОрганизацииГдеРуководительПоФИО", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОрганизацииГдеУчредитель");
	Результат.Колонки.Добавить("ОрганизацииГдеУчредительПоФИО", Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаБухгалтерскаяОтчетность()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Год"                , Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КодВалютыОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипОтчетности"      , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатели"); // см. НоваяТаблицаБухгалтерскаяОтчетностьПоказатели
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаБухгалтерскаяОтчетностьПоказатели()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаПроверкиКонтролирующимиОрганами()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор"      , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПлановаяПроверка"   , Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПериодПроверки"     , Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаПроверки"       , Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КонтролирующийОрган", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("АдресПроверки"      , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЦельПроверки"       , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Длительность"       , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Результат"          , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Нарушения"); // см. НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерНарушения", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Нарушение",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НарушенныйАкт",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Предписание",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Исполнение",     Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НовыйСведенияОбИностранномЮридическомЛице()
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеПолное");
	Результат.Вставить("КодСтраны");
	Результат.Вставить("Страна");
	Результат.Вставить("Адрес");
	Результат.Вставить("УставныйКапитал");
	Результат.Вставить("КодНалогоплательщика");
	Результат.Вставить("Регистрация");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеРеквизитов

Процедура ЗаполнитьНаименованияЮридическогоЛица(НаименованиеJSON, Реквизиты)
	
	Если НаименованиеJSON <> Неопределено Тогда
		
		Реквизиты.Наименование = СокрЛП(Строка(НаименованиеJSON.Получить("commonName")));
		Реквизиты.НаименованиеПолное = НаименованиеJSON.Получить("fullName");
		Реквизиты.НаименованиеСокращенное = СокрЛП(Строка(НаименованиеJSON.Получить("shortName")));
		Реквизиты.ПравоваяФорма = НаименованиеJSON.Получить("organizationForm");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(Объект, АдресныеСокращения = Неопределено)
	
	Если АдресныеСокращения = Неопределено Тогда
		
		АдресныеСокращенияСоответствие = АдресныйКлассификатор.СокращенияАдресныхОбъектов(Новый Массив);
		ТипСтрока = Новый ОписаниеТипов("Строка");
		АдресныеСокращения = Новый ТаблицаЗначений;
		АдресныеСокращения.Колонки.Добавить("АдресныйОбъект", ТипСтрока);
		АдресныеСокращения.Колонки.Добавить("СокращениеОбъекта", ТипСтрока);
		АдресныеСокращения.Колонки.Добавить("ДлинаПредставленияОбъекта",
			Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
		Для Каждого КлючЗначение Из АдресныеСокращенияСоответствие Цикл
			СтрокаСокращение = АдресныеСокращения.Добавить();
			СтрокаСокращение.АдресныйОбъект    = ВРег(КлючЗначение.Ключ);
			СтрокаСокращение.СокращениеОбъекта = КлючЗначение.Значение;
			СтрокаСокращение.ДлинаПредставленияОбъекта = СтрДлина(КлючЗначение.Ключ);
		КонецЦикла;
		
		// Сортировка по убыванию длины для исключения
		// включения адресных объектов друг в друга.
		АдресныеСокращения.Сортировать("ДлинаПредставленияОбъекта Убыв");
		
	КонецЕсли;
	
	Для Каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ЗначениеСвойства = Объект[СвойствоОбъекта.Имя];
		Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
			
			ЗначениеСвойства = СокрЛП(ЗначениеСвойства);
			ДваПробела = "  ";
			Пока СтрНайти(ЗначениеСвойства, ДваПробела) > 0 Цикл
				// Удаление лишних разделителей.
				ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства, ДваПробела, " ");
			КонецЦикла;
			
			ЗначениеВРег = ВРег(ЗначениеСвойства);
			ДлинаЗначения = СтрДлина(ЗначениеСвойства);
			Для Итератор = 0 По АдресныеСокращения.Количество() - 1 Цикл
				СтрокаСокращение = АдресныеСокращения[Итератор];
				Если (ДлинаЗначения > СтрокаСокращение.ДлинаПредставленияОбъекта
					И Сред(ЗначениеСвойства, ДлинаЗначения - СтрокаСокращение.ДлинаПредставленияОбъекта, 1) = " " // Должен быть пробел перед адресным объектом.
					Или ДлинаЗначения = СтрокаСокращение.ДлинаПредставленияОбъекта)
					И Прав(ЗначениеВРег, СтрокаСокращение.ДлинаПредставленияОбъекта) = СтрокаСокращение.АдресныйОбъект Тогда
					Объект[СвойствоОбъекта.Имя] = Лев(ЗначениеСвойства, ДлинаЗначения - СтрокаСокращение.ДлинаПредставленияОбъекта)
							+ СтрокаСокращение.СокращениеОбъекта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(ЗначениеСвойства, АдресныеСокращения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОргане(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеTaxInspectionRegistrationInfo = ТелоОтветаОбъект.Получить("taxInspectionRegistrationInfo");
	
	Если ЗначениеTaxInspectionRegistrationInfo <> Неопределено Тогда
		
		Реквизиты.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
		Реквизиты.РегистрацияВНалоговомОргане.Код             = ЗначениеTaxInspectionRegistrationInfo.Получить("inspectionCode");
		Реквизиты.РегистрацияВНалоговомОргане.Наименование    = ЗначениеTaxInspectionRegistrationInfo.Получить("inspectionName");
		Реквизиты.РегистрацияВНалоговомОргане.ДатаРегистрации = ДатаИзJSON(ЗначениеTaxInspectionRegistrationInfo.Получить("registrationDate"));
		
		ЗначениеAddress = ТелоОтветаОбъект.Получить("address");
		Если ЗначениеAddress <> Неопределено Тогда
			
			ЗначениеOktmo = ЗначениеAddress.Получить("oktmo");
			Если ЗначениеOktmo <> Неопределено Тогда
				Реквизиты.РегистрацияВНалоговомОргане.ОКТМО = ЗначениеOktmo;
			КонецЕсли;
			
			ЗначениеOkato = ЗначениеAddress.Получить("okato");
			Если ЗначениеOkato <> Неопределено Тогда
				Реквизиты.РегистрацияВНалоговомОргане.ОКАТО = ЗначениеOkato;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодОКВЭД(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеEconomicActivityInfo = ТелоОтветаОбъект.Получить("economicActivityInfo");
	Если ЗначениеEconomicActivityInfo <> Неопределено Тогда
		
		ЗначениеMainActivity = ЗначениеEconomicActivityInfo.Получить("mainActivity");
		Если ЗначениеMainActivity <> Неопределено Тогда
			Реквизиты.КодОКВЭД = ЗначениеMainActivity.Получить("code");
			Реквизиты.ЭтоОКВЭД2 = (ЗначениеMainActivity.Получить("classifierType") = "ОКВЭД2");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидДеятельности(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеEconomicActivityInfo = ТелоОтветаОбъект.Получить("economicActivityInfo");
	Если ЗначениеEconomicActivityInfo <> Неопределено Тогда
		
		ЗначениеMainActivity = ЗначениеEconomicActivityInfo.Получить("mainActivity");
		Если ЗначениеMainActivity <> Неопределено Тогда
			ВидДеятельности = НовыйОписаниеВидаДеятельности();
			ВидДеятельности.Код = ЗначениеMainActivity.Получить("code");
			ВидДеятельности.Наименование = ЗначениеMainActivity.Получить("name");
			ВидДеятельности.Классификатор = ЗначениеMainActivity.Получить("classifierType");
			Реквизиты.ВидДеятельности = ВидДеятельности;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОписаниеВидаДеятельности()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("Классификатор");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИнформациюОВидахДеятельности(ТелоОтветаОбъект, Результат, ВключатьОсновной = Истина, ИмяРеквизита = "ВидыДеятельности")
	
	ЗначениеEconomicActivityInfo = ТелоОтветаОбъект.Получить("economicActivityInfo");
	Если ТипЗнч(ЗначениеEconomicActivityInfo) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВключатьОсновной Тогда
		ЗначениеMainActivity = ЗначениеEconomicActivityInfo.Получить("mainActivity");
		Если ЗначениеMainActivity <> Неопределено Тогда
			Если Результат[ИмяРеквизита] = Неопределено Тогда
				Результат[ИмяРеквизита] = НоваяТаблицаВидыДеятельности();
			КонецЕсли;
			НоваяСтрока = Результат[ИмяРеквизита].Добавить();
			НоваяСтрока.Код = ЗначениеMainActivity.Получить("code");
			НоваяСтрока.Наименование = ЗначениеMainActivity.Получить("name");
			НоваяСтрока.Классификатор = ЗначениеMainActivity.Получить("classifierType");
			
			НоваяСтрока.КодОКВЭД  = НоваяСтрока.Код;
			НоваяСтрока.НаименованиеОКВЭД = НоваяСтрока.Наименование;
			НоваяСтрока.ЭтоОКВЭД2 = (НоваяСтрока.Классификатор = "ОКВЭД2");
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеAdditionalActivities = ЗначениеEconomicActivityInfo.Получить("additionalActivities");
	Если ТипЗнч(ЗначениеAdditionalActivities) = Тип("Массив") Тогда
		Если Результат[ИмяРеквизита] = Неопределено Тогда
			Результат[ИмяРеквизита] = НоваяТаблицаВидыДеятельности();
		КонецЕсли;
		Для Каждого ТекущееAdditionalActivities Из ЗначениеAdditionalActivities Цикл
			НоваяСтрока = Результат[ИмяРеквизита].Добавить();
			НоваяСтрока.Код = ТекущееAdditionalActivities.Получить("code");
			НоваяСтрока.Наименование = ТекущееAdditionalActivities.Получить("name");
			НоваяСтрока.Классификатор = ТекущееAdditionalActivities.Получить("classifierType");
			
			НоваяСтрока.КодОКВЭД  = НоваяСтрока.Код;
			НоваяСтрока.НаименованиеОКВЭД = НоваяСтрока.Наименование;
			НоваяСтрока.ЭтоОКВЭД2 = (НоваяСтрока.Классификатор = "ОКВЭД2");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОЛицензиях(ТелоОтветаОбъект, ИнформацияОСвязях)
	
	ЗначениеLicenseInfos = ТелоОтветаОбъект.Получить("licenseInfos");
	Если ТипЗнч(ЗначениеLicenseInfos) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееLicenseInfos Из ЗначениеLicenseInfos Цикл
		НоваяСтрока = ИнформацияОСвязях.Лицензии.Добавить();
		НоваяСтрока.Лицензия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 от %2'"),
			ТекущееLicenseInfos.Получить("number"),
			Формат(ДатаИзJSON(ТекущееLicenseInfos.Получить("date")), "ДЛФ=D"));
		ЗначениеActivityTypes = ТекущееLicenseInfos.Получить("activityTypes");
		Если ТипЗнч(ЗначениеActivityTypes) = Тип("Массив") Тогда
			ОписаниеЛицензии = "";
			Для каждого ТекущееActivityTypes Из ЗначениеActivityTypes Цикл
				ОписаниеЛицензии = ОписаниеЛицензии + ?(ПустаяСтрока(ОписаниеЛицензии), "", ", ") + ТекущееActivityTypes;
			КонецЦикла;
			НоваяСтрока.ОписаниеЛицензии = ОписаниеЛицензии;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОПодразделениях(ТелоОтветаОбъект, ИнформацияОСвязях)
	
	ЗначениеUnitInfos = ТелоОтветаОбъект.Получить("unitInfos");
	Если ТипЗнч(ЗначениеUnitInfos) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееUnitInfos Из ЗначениеUnitInfos Цикл
		
		ОписаниеПодразделения = "";
		ЗначениеAddress = ТекущееUnitInfos.Получить("address");
		Если ЗначениеAddress <> Неопределено Тогда
			ОписаниеПодразделения = АдресКИИзJSON(ЗначениеAddress).Представление;
		Иначе
			ЗначениеForeignAddress = ТекущееUnitInfos.Получить("foreignAddress");
			Если ЗначениеForeignAddress <> Неопределено Тогда
				ОписаниеПодразделения = ЗначениеForeignAddress;
			Иначе
				ЗначениеName = ТекущееUnitInfos.Получить("name");
				Если ЗначениеName <> Неопределено Тогда
					ОписаниеПодразделения = ЗначениеName;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеПодразделения) Тогда
			НоваяСтрока = ИнформацияОСвязях.Подразделения.Добавить();
			НоваяСтрока.ОписаниеПодразделения = ОписаниеПодразделения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбИзмененияхВРеестре(ТелоОтветаОбъект, ИнформацияОСвязях)
	
	ЗначениеRegistryRecordInfos = ТелоОтветаОбъект.Получить("registryRecordInfos");
	Если ТипЗнч(ЗначениеRegistryRecordInfos) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееRegistryRecordInfos Из ЗначениеRegistryRecordInfos Цикл
		НоваяСтрока = ИнформацияОСвязях.ИзмененияВРеестре.Добавить();
		НоваяСтрока.ДатаИзменения = ДатаИзJSON(ТекущееRegistryRecordInfos.Получить("date"));
		НоваяСтрока.ГосударственныйОрган = ТекущееRegistryRecordInfos.Получить("taxInspectionName");
		НоваяСтрока.ОписаниеИзменения = "";
		ЗначениеType = ТекущееRegistryRecordInfos.Получить("type");
		Если ЗначениеType <> Неопределено Тогда
			НоваяСтрока.ОписаниеИзменения = НоваяСтрока.ОписаниеИзменения + ЗначениеType;
		КонецЕсли;
		ЗначениеCertificateInfos = ТекущееRegistryRecordInfos.Получить("certificateInfos");
		Если ТипЗнч(ЗначениеCertificateInfos) = Тип("Массив") Тогда
			Для Каждого ТекущееCertificateInfos Из ЗначениеCertificateInfos Цикл
				НоваяСтрока.ОписаниеИзменения = НоваяСтрока.ОписаниеИзменения + ?(ПустаяСтрока(НоваяСтрока.ОписаниеИзменения), "", Символы.ПС)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Выдано свидетельство %1 %2'"), 
						ТекущееCertificateInfos.Получить("series"),
						ТекущееCertificateInfos.Получить("number"));
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУчрежденныхФирмах(Объект, ИнформацияОСвязях)
	
	ЗначениеFoundedCorporations = Объект.Получить("foundedCorporations");
	Если ТипЗнч(ЗначениеFoundedCorporations) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущееFoundedCorporations Из ЗначениеFoundedCorporations Цикл
		ЗаполнитьСтрокуОбУчредителе(ТекущееFoundedCorporations, ИнформацияОСвязях.УчрежденныеФирмы);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУчредителях(Объект, ИнформацияОСвязях)
	
	ЗначениеFounderInfos = Объект.Получить("founderInfos");
	Если ТипЗнч(ЗначениеFounderInfos) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееFounderInfos Из ЗначениеFounderInfos Цикл
		
		СтрокаУчредителя = ИнформацияОСвязях.Учредители.Добавить();
		СтрокаУчредителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
		СтрокаУчредителя.ОрганизацииГдеУчредитель   = НоваяТаблицаОрганизацииГдеУчредитель();
		СтрокаУчредителя.ИНН = ТекущееFounderInfos.Получить("inn");
		
		СтрокаУчредителя.СуммаКапитала   = ТекущееFounderInfos.Получить("capitalTotalValue");
		СтрокаУчредителя.ПроцентКапитала = ТекущееFounderInfos.Получить("capitalPercent");
		
		ЗначениеType = ТекущееFounderInfos.Получить("type");
		Если ЗначениеType = "PERSON" Тогда
			
			// Учредители - физические лица.
			СтрокаУчредителя.Учредитель = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 %2 %3'"),
				ТекущееFounderInfos.Получить("lastName"),
				ТекущееFounderInfos.Получить("name"),
				ТекущееFounderInfos.Получить("patronymic")));
			
			ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
				ТекущееFounderInfos,
				СтрокаУчредителя,
				СтрокаУчредителя.ИНН);
			
		Иначе
			
			Если ЗначениеType = "CORPORATION" Тогда
				// Учредители - российские юридические лица.
				СтрокаУчредителя.Учредитель = ТекущееFounderInfos.Получить("name");
			ИначеЕсли ЗначениеType = "FOREIGN_CORPORATION" Тогда
				// Учредители - иностранные юридические лица.
				СтрокаУчредителя.Учредитель = ТекущееFounderInfos.Получить("name");
				ЗначениеCountryName = ТекущееFounderInfos.Получить("countryName");
				Если ЗначениеCountryName <> Неопределено Тогда
					СтрокаУчредителя.Учредитель = СтрокаУчредителя.Учредитель + " (" + ЗначениеCountryName + ")";
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеFoundedCorporations = ТекущееFounderInfos.Получить("foundedCorporations");
			Если ТипЗнч(ЗначениеFoundedCorporations) = Тип("Соответствие") Тогда
				ЗначениеCorporations = ЗначениеFoundedCorporations.Получить("corporations");
				Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") Тогда
					Для Каждого ТекущееCorporations Из ЗначениеCorporations Цикл
						ЗаполнитьСтрокуОбУчредителе(ТекущееCorporations, СтрокаУчредителя.ОрганизацииГдеУчредитель);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвязанныеОрганизацииФизическогоЛица(ТелоОтветаОбъект, Результат, ИННФизЛица)
	
	// Организации, где это физическое лицо является руководителем.
	Если ЗначениеЗаполнено(ИННФизЛица) Тогда
		ЗначениеHeadedCorporations = ТелоОтветаОбъект.Получить("headedCorporationsByInn");
		ЗначениеFoundedCorporations = ТелоОтветаОбъект.Получить("foundedCorporationsByInn");
	Иначе
		ЗначениеHeadedCorporations = ТелоОтветаОбъект.Получить("headedCorporationsByPersonFullName");
		ЗначениеFoundedCorporations = ТелоОтветаОбъект.Получить("foundedCorporationsByPersonFullName");
		Результат.ОрганизацииГдеРуководительПоФИО = Истина;
		Результат.ОрганизацииГдеУчредительПоФИО = Истина;
	КонецЕсли;
	
	// Организации, где это физическое лицо является руководителем.
	Если ТипЗнч(ЗначениеHeadedCorporations) = Тип("Соответствие") Тогда
		ЗначениеCorporations = ЗначениеHeadedCorporations.Получить("corporations");
		Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") Тогда
			Для Каждого ТекущееCorporations Из ЗначениеCorporations Цикл
				ЗаполнитьСтрокуОбОрганизации(ТекущееCorporations, Результат.ОрганизацииГдеРуководитель);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Организации, где это физическое лицо является учредителем.
	Если ТипЗнч(ЗначениеFoundedCorporations) = Тип("Соответствие") Тогда
		ЗначениеCorporations = ЗначениеFoundedCorporations.Получить("corporations");
		Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") Тогда
			Для Каждого ТекущееCorporations Из ЗначениеCorporations Цикл
				ЗаполнитьСтрокуОбУчредителе(ТекущееCorporations, Результат.ОрганизацииГдеУчредитель);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУставномКапитале(ОбъектXDTO, ИнформацияОСвязях)
	
	ЗначениеAuthorizedCapital = ОбъектXDTO.Получить("authorizedCapital");
	Если ЗначениеAuthorizedCapital <> Неопределено Тогда
		ЗначениеAuthorizedCapitalValue = ЗначениеAuthorizedCapital.Получить("value");
		Если ЗначениеAuthorizedCapitalValue <> Неопределено Тогда
			ИнформацияОСвязях.УставныйКапитал = Число(ЗначениеAuthorizedCapital.Получить("value"));
		КонецЕсли;
	ИначеЕсли ИнформацияОСвязях.Учредители.Количество() > 0 Тогда
		ИнформацияОСвязях.УставныйКапитал = ИнформацияОСвязях.Учредители.Итог("СуммаКапитала");
	КонецЕсли;
	
	Если ИнформацияОСвязях.УставныйКапитал = Неопределено Тогда
		ИнформацияОСвязях.УставныйКапитал = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОСтатусе(ТелоОтветаОбъект, Данные)
	
	ЗначениеStatus = ТелоОтветаОбъект.Получить("status");
	Если ЗначениеStatus <> Неопределено Тогда
		Данные.КодСтатуса = ЗначениеStatus.Получить("code");
		Данные.НаименованиеСтатуса = ЗначениеStatus.Получить("name");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОМассовостиАдреса(ТелоОтветаОбъект, ИнформацияОСвязях)
	
	ЗначениеLinkedCorporationsByAddress = ТелоОтветаОбъект.Получить("linkedCorporationsByAddress");
	Если ТипЗнч(ЗначениеLinkedCorporationsByAddress) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееLinkedCorporationsByAddress Из ЗначениеLinkedCorporationsByAddress Цикл
		ЗаполнитьСтрокуОбОрганизации(ТекущееLinkedCorporationsByAddress, ИнформацияОСвязях.ОрганизацииПоАдресу);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОБухгалтерскойОтчетности(ТелоОтветаОбъект, ИнформацияОСвязях)
	
	ЗначениеFinancialStatements = ТелоОтветаОбъект.Получить("financialStatements");
	Если ТипЗнч(ЗначениеFinancialStatements) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееFinancialStatements Из ЗначениеFinancialStatements Цикл
		
		НоваяСтрока = ИнформацияОСвязях.БухгалтерскаяОтчетность.Добавить();
		НоваяСтрока.Год = ТекущееFinancialStatements.Получить("year");
		НоваяСтрока.КодВалютыОтчетности = ТекущееFinancialStatements.Получить("currencyCode");
		НоваяСтрока.ТипОтчетности       = ТекущееFinancialStatements.Получить("type");
		НоваяСтрока.Показатели          = НоваяТаблицаБухгалтерскаяОтчетностьПоказатели();
		ЗначениеArticles = ТекущееFinancialStatements.Получить("articles");
		Если ТипЗнч(ЗначениеArticles) = Тип("Массив") Тогда
			Для Каждого ТекущееArticles Из ЗначениеArticles Цикл
				НоваяСтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
				НоваяСтрокаПоказателя.Код      = ТекущееArticles.Получить("code");
				НоваяСтрокаПоказателя.Значение = ТекущееArticles.Получить("value");
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПенсионногоФонда(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеPensionFundRegistrationInfo = ТелоОтветаОбъект.Получить("pensionFundRegistrationInfo");
	Если ЗначениеPensionFundRegistrationInfo <> Неопределено Тогда
		
		РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
		РегистрацияВПФР.РегистрационныйНомерПФР = ЗначениеPensionFundRegistrationInfo.Получить("registrationNumber");
		РегистрацияВПФР.КодОрганаПФР            = ЗначениеPensionFundRegistrationInfo.Получить("fundCode");
		РегистрацияВПФР.НаименованиеОрганаПФР   = ЗначениеPensionFundRegistrationInfo.Получить("fundName");
		РегистрацияВПФР.ДатаРегистрации         = ДатаИзJSON(ЗначениеPensionFundRegistrationInfo.Получить("registrationDate"));
		
		Если РегистрацияВПФР.РегистрационныйНомерПФР <> Неопределено Тогда
			РегистрацияВПФР.РегистрационныйНомерПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
				Лев(РегистрацияВПФР.РегистрационныйНомерПФР, 3),
				Сред(РегистрацияВПФР.РегистрационныйНомерПФР,4, 3),
				Прав(РегистрацияВПФР.РегистрационныйНомерПФР, 6));
		КонецЕсли;
		Если РегистрацияВПФР.КодОрганаПФР <> Неопределено Тогда
			РегистрацияВПФР.КодОрганаПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2'"), 
				Лев(РегистрацияВПФР.КодОрганаПФР, 3), Прав(РегистрацияВПФР.КодОрганаПФР, 3));
		КонецЕсли;
		
		Реквизиты.РегистрацияВПенсионномФонде = РегистрацияВПФР;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеSocialInsuranceFundRegistrationInfo = ТелоОтветаОбъект.Получить("socialInsuranceFundRegistrationInfo");
	Если ЗначениеSocialInsuranceFundRegistrationInfo <> Неопределено Тогда
		
		РегистрацияВФСС = НоваяРегистрацияВФСС();
		РегистрацияВФСС.РегистрационныйНомерФСС = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("registrationNumber");
		РегистрацияВФСС.КодПодчиненности = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("subordinationCode");
		РегистрацияВФСС.КодОрганаФСС = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("fundCode");
		РегистрацияВФСС.НаименованиеОрганаФСС = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("fundName");
		РегистрацияВФСС.ДатаРегистрации = ДатаИзJSON(ЗначениеSocialInsuranceFundRegistrationInfo.Получить("registrationDate"));
		Реквизиты.РегистрацияВФСС = РегистрацияВФСС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОсновныеРеквизитыПредпринимателя(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеPerson = ТелоОтветаОбъект.Получить("person");
	Если ТипЗнч(ЗначениеPerson) = Тип("Соответствие") Тогда
		Реквизиты.Фамилия  = ЗначениеPerson.Получить("lastName");
		Реквизиты.Имя      = ЗначениеPerson.Получить("name");
		Реквизиты.Отчество = ЗначениеPerson.Получить("patronymic");
		ЗначениеGender = ЗначениеPerson.Получить("gender");
		Если ЗначениеGender = "женский" Тогда
			Реквизиты.Пол = "2";
		ИначеЕсли ЗначениеGender = "мужской" Тогда
			Реквизиты.Пол = "1";
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"), 
		Реквизиты.Фамилия,
		Реквизиты.Имя,
		Реквизиты.Отчество);
	
	ВидИП = Неопределено;
	ЗначениеRegistrationInfo = ТелоОтветаОбъект.Получить("registrationInfo");
	Если ТипЗнч(ЗначениеRegistrationInfo) = Тип("Соответствие") Тогда
		Реквизиты.РегистрационныйНомер = ЗначениеRegistrationInfo.Получить("ogrn");
		Реквизиты.ДатаРегистрации = ДатаИзJSON(ЗначениеRegistrationInfo.Получить("registrationDate"));
		ВидИП = ЗначениеRegistrationInfo.Получить("typeFullName");
		ЗначениеStatus = ЗначениеRegistrationInfo.Получить("status");
		Если ТипЗнч(ЗначениеStatus) = Тип("Соответствие")
			И Реквизиты.Свойство("КодСтатуса") Тогда
			Реквизиты.КодСтатуса = ЗначениеStatus.Получить("code");
			Реквизиты.НаименованиеСтатуса = ЗначениеStatus.Получить("name");
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.ВидИП = ВидИП;
	
	Если ВидИП = "Индивидуальный предприниматель" Тогда
		Реквизиты.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Индивидуальный предприниматель %1'"),
			Реквизиты.Наименование);
		Реквизиты.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИП %1'"),
			Реквизиты.Наименование);
	Иначе
		Реквизиты.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Индивидуальный предприниматель %1 %2'"),
			ВидИП,
			Реквизиты.Наименование);
		Реквизиты.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИП %1 %2'"),
			ВидИП,
			Реквизиты.Наименование);
	КонецЕсли;
	
	ЗначениеCitizenship = ТелоОтветаОбъект.Получить("citizenship");
	Если ЗначениеCitizenship <> Неопределено Тогда
		Реквизиты.КодСтраныГражданства = ЗначениеCitizenship.Получить("countryCode");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвидетельствоОРегистрации(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеRegistryRecordInfos = ТелоОтветаОбъект.Получить("registryRecordInfos");
	Если ТипЗнч(ЗначениеRegistryRecordInfos) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Свидетельство = НовоеСвидетельствоОРегистрации();
	Свидетельство.Дата = '00010101';
	Для Каждого ТекущееRegistryRecordInfos Из ЗначениеRegistryRecordInfos Цикл
		ЗначениеCertificateInfos = ТекущееRegistryRecordInfos.Получить("certificateInfos");
		Если ТипЗнч(ЗначениеCertificateInfos) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеDate = ДатаИзJSON(ТекущееRegistryRecordInfos.Получить("date"));
		Для Каждого ТекущееCertificateInfos Из ЗначениеCertificateInfos Цикл
			ЗначениеCertificateDate = ДатаИзJSON(ТекущееCertificateInfos.Получить("date"));
			Если ЗначениеЗаполнено(ЗначениеCertificateDate) Тогда
				ДатаЗап = ЗначениеCertificateDate;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеDate) Тогда
				ДатаЗап = ЗначениеDate;
			Иначе
				ДатаЗап = '00010101';
			КонецЕсли;
			Если ДатаЗап > Свидетельство.Дата Тогда
				Свидетельство.Дата  = ДатаЗап;
				Свидетельство.Серия = ТекущееCertificateInfos.Получить("series");
				Свидетельство.Номер = Прав("000000000" + ТекущееCertificateInfos.Получить("number"), 9);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Свидетельство.Дата > '00010101' Тогда
		Реквизиты.СвидетельствоОРегистрации = Свидетельство;
	КонецЕсли
	
КонецПроцедуры

Процедура ЗаполнитьИсториюРеквизитовПредпринимателя(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеHistory = ТелоОтветаОбъект.Получить("history");
	Если ТипЗнч(ЗначениеHistory) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИсторияФИО(ЗначениеHistory.Получить("names"), Реквизиты.ИсторияРеквизитов.ФИО);
	ЗаполнитьИсторияГражданство(ЗначениеHistory.Получить("citizenships"), Реквизиты.ИсторияРеквизитов.Гражданство);
	ЗаполнитьИсторияОГРН(ЗначениеHistory.Получить("registrations"), Реквизиты.ИсторияРеквизитов.ОГРН);
	
КонецПроцедуры

Процедура ЗаполнитьИсторияФИО(ЗначениеNames, Таблица)
	
	Если ТипЗнч(ЗначениеNames) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеNames Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		НоваяСтрока.Фамилия = ЭлементСписка.Получить("lastName");
		НоваяСтрока.Имя = ЭлементСписка.Получить("name");
		НоваяСтрока.Отчество = ЭлементСписка.Получить("patronymic");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияГражданство(ЗначениеCitizenships, Таблица)
	
	Если ТипЗнч(ЗначениеCitizenships) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеCitizenships Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		НоваяСтрока.КодСтраныГражданства = ЭлементСписка.Получить("countryCode");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияОГРН(ЗначениеRegistrations, Таблица)
	
	Если ТипЗнч(ЗначениеRegistrations) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеRegistrations Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата     = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		НоваяСтрока.Значение = ЭлементСписка.Получить("ogrn");
		
		ВидИП = ЭлементСписка.Получить("typeFullName");
		Если ВидИП <> Неопределено Тогда
			НоваяСтрока.ВидПредпринимателя = НовыйИсторияВидПредпринимателя();
			НоваяСтрока.ВидПредпринимателя.Дата = НоваяСтрока.Дата;
			НоваяСтрока.ВидПредпринимателя.Код = ЭлементСписка.Получить("typeCode");
			НоваяСтрока.ВидПредпринимателя.Наименование = ЭлементСписка.Получить("typeFullName");
		КонецЕсли;
		
		ЗначениеStatus = ЭлементСписка.Получить("status");
		Если ЗначениеStatus <> Неопределено Тогда
			НоваяСтрока.Статус = НовыйИсторияСтатусПредпринимателя();
			НоваяСтрока.Статус.Дата = ДатаИзJSON(ЗначениеStatus.Получить("fromDate"));
			НоваяСтрока.Статус.Код = ЗначениеStatus.Получить("code");
			НоваяСтрока.Статус.Наименование = ЗначениеStatus.Получить("name");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЮридическийАдрес(АдресJSON, Реквизиты, Фабрика = Неопределено, АдресныеСокращения = Неопределено)
	
	Если АдресJSON <> Неопределено Тогда
		
		Реквизиты.ЮридическийАдрес = АдресКИИзJSON(АдресJSON);
		Реквизиты.ЮридическийАдрес.Вставить("Корректный", (АдресJSON.Получить("valid") = Истина));
		
	КонецЕсли;
	
КонецПроцедуры

Функция АдресКИИзJSON(АдресJSON)
	
	АдресСтруктура = РаботаСАдресамиКлиентСервер.ПоляАдреса();
	
	АдресСтруктура.ТипАдреса = "Муниципальный";
	Если АдресJSON.Получить("addressType") = "ADMINISTRATIVE" Тогда
		АдресСтруктура.ТипАдреса = "Административно-территориальный";
	КонецЕсли;
	
	ЗначениеCountry = АдресJSON.Получить("country");
	Если ЗначениеЗаполнено(ЗначениеCountry) Тогда
		АдресСтруктура.Страна = ЗначениеCountry;
	КонецЕсли;
	
	ЗначениеCountryCode = АдресJSON.Получить("countryCode");
	Если ЗначениеЗаполнено(ЗначениеCountryCode) Тогда
		АдресСтруктура.КодСтраны = ЗначениеCountryCode;
	КонецЕсли;
	
	ЗначениеValue = АдресJSON.Получить("valueWithPostalCode");
	Если ЗначениеЗаполнено(ЗначениеValue) Тогда
		АдресСтруктура.Представление = ЗначениеValue;
	КонецЕсли;
	
	Если АдресJSON.Получить("unrecognizedPart") <> Неопределено Тогда
		// Если есть нераспознанная часть, тогда в комментарий кладется весь адрес в текстовом представлении
		АдресСтруктура.Комментарий = АдресСтруктура.Представление;
	КонецЕсли;
	
	ЗначениеComment = АдресJSON.Получить("comment");
	Если ЗначениеComment <> Неопределено Тогда
		АдресСтруктура.Комментарий = ЗначениеComment;
	КонецЕсли;
	
	ЗначениеMunValue = АдресJSON.Получить("munValue");
	Если ЗначениеЗаполнено(ЗначениеMunValue) Тогда
		АдресСтруктура.МуниципальноеПредставление = ЗначениеMunValue;
	КонецЕсли;
	
	ЗначениеPostalCode = АдресJSON.Получить("postalCode");
	Если ЗначениеЗаполнено(ЗначениеPostalCode) Тогда
		АдресСтруктура.Индекс = ЗначениеPostalCode;
	КонецЕсли;
	
	ЗначениеAreaCode = АдресJSON.Получить("areaCode");
	Если ЗначениеЗаполнено(ЗначениеAreaCode) Тогда
		АдресСтруктура.КодРегиона = ЗначениеAreaCode;
	КонецЕсли;
	
	ЗначениеArea = АдресJSON.Получить("area");
	Если ЗначениеЗаполнено(ЗначениеArea) Тогда
		АдресСтруктура.Регион = ЗначениеArea;
	КонецЕсли;
	
	ЗначениеAreaType = АдресJSON.Получить("areaType");
	Если ЗначениеЗаполнено(ЗначениеAreaType) Тогда
		АдресСтруктура.РегионСокращение = ЗначениеAreaType;
	КонецЕсли;
	
	ЗначениеDistrict = АдресJSON.Получить("district");
	Если ЗначениеЗаполнено(ЗначениеDistrict) Тогда
		АдресСтруктура.Район = ЗначениеDistrict;
	КонецЕсли;
	
	ЗначениеDistrictType = АдресJSON.Получить("districtType");
	Если ЗначениеЗаполнено(ЗначениеDistrictType) Тогда
		АдресСтруктура.РайонСокращение = ЗначениеDistrictType;
	КонецЕсли;
	
	ЗначениеMunDistrict = АдресJSON.Получить("munDistrict");
	Если ЗначениеЗаполнено(ЗначениеMunDistrict) Тогда
		АдресСтруктура.МуниципальныйРайон = ЗначениеMunDistrict;
	КонецЕсли;
	
	ЗначениеMunDistrictType = АдресJSON.Получить("munDistrictType");
	Если ЗначениеЗаполнено(ЗначениеMunDistrictType) Тогда
		АдресСтруктура.МуниципальныйРайонСокращение = ЗначениеMunDistrictType;
	КонецЕсли;
	
	ЗначениеCity = АдресJSON.Получить("city");
	Если ЗначениеЗаполнено(ЗначениеCity) Тогда
		АдресСтруктура.Город = ЗначениеCity;
	КонецЕсли;
	
	ЗначениеCityType = АдресJSON.Получить("cityType");
	Если ЗначениеЗаполнено(ЗначениеCityType) Тогда
		АдресСтруктура.ГородСокращение = ЗначениеCityType;
	КонецЕсли;
	
	ЗначениеSettlement = АдресJSON.Получить("settlement");
	Если ЗначениеЗаполнено(ЗначениеSettlement) Тогда
		АдресСтруктура.Поселение = ЗначениеSettlement;
	КонецЕсли;
	
	ЗначениеSettlementType = АдресJSON.Получить("settlementType");
	Если ЗначениеЗаполнено(ЗначениеSettlementType) Тогда
		АдресСтруктура.ПоселениеСокращение = ЗначениеSettlementType;
	КонецЕсли;
	
	ЗначениеCityDistrict = АдресJSON.Получить("cityDistrict");
	Если ЗначениеЗаполнено(ЗначениеCityDistrict) Тогда
		АдресСтруктура.ВнутригородскойРайон = ЗначениеCityDistrict;
	КонецЕсли;
	
	ЗначениеCityDistrictType = АдресJSON.Получить("cityDistrictType");
	Если ЗначениеЗаполнено(ЗначениеCityDistrictType) Тогда
		АдресСтруктура.ВнутригородскойРайонСокращение = ЗначениеCityDistrictType;
	КонецЕсли;
	
	ЗначениеLocality = АдресJSON.Получить("locality");
	Если ЗначениеЗаполнено(ЗначениеLocality) Тогда
		АдресСтруктура.НаселенныйПункт = ЗначениеLocality;
	КонецЕсли;
	
	ЗначениеLocalityType = АдресJSON.Получить("localityType");
	Если ЗначениеЗаполнено(ЗначениеLocalityType) Тогда
		АдресСтруктура.НаселенныйПунктСокращение = ЗначениеLocalityType;
	КонецЕсли;
	
	ЗначениеTerritory = АдресJSON.Получить("territory");
	Если ЗначениеЗаполнено(ЗначениеTerritory) Тогда
		АдресСтруктура.Территория = ЗначениеTerritory;
	КонецЕсли;
	
	ЗначениеTerritoryType = АдресJSON.Получить("territoryType");
	Если ЗначениеЗаполнено(ЗначениеTerritoryType) Тогда
		АдресСтруктура.ТерриторияСокращение = ЗначениеTerritoryType;
	КонецЕсли;
	
	ЗначениеStreet = АдресJSON.Получить("street");
	Если ЗначениеЗаполнено(ЗначениеStreet) Тогда
		АдресСтруктура.Улица = ЗначениеStreet;
	КонецЕсли;
	
	ЗначениеStreetType = АдресJSON.Получить("streetType");
	Если ЗначениеЗаполнено(ЗначениеStreetType) Тогда
		АдресСтруктура.УлицаСокращение = ЗначениеStreetType;
	КонецЕсли;
	
	ЗначениеHouse = АдресJSON.Получить("house");
	Если ЗначениеЗаполнено(ЗначениеHouse) Тогда
		АдресСтруктура.Здание.Номер = ЗначениеHouse;
	КонецЕсли;
	
	ЗначениеHouseType = АдресJSON.Получить("houseType");
	Если ЗначениеЗаполнено(ЗначениеHouseType) Тогда
		АдресСтруктура.Здание.ТипЗдания = ВРег(Лев(ЗначениеHouseType, 1)) + Сред(ЗначениеHouseType, 2);
	КонецЕсли;
	
	ЗначениеStead = АдресJSON.Получить("stead");
	Если ЗначениеЗаполнено(ЗначениеStead) И АдресСтруктура.Свойство("НомерЗемельногоУчастка") Тогда
		АдресСтруктура.НомерЗемельногоУчастка = ЗначениеStead;
	КонецЕсли;
	
	ЗначениеBuildings = АдресJSON.Получить("buildings");
	Если ТипЗнч(ЗначениеBuildings) = Тип("Массив") Тогда
		Для Каждого ТекущийКорпусJSON Из ЗначениеBuildings Цикл
			ЗначениеType = ТекущийКорпусJSON.Получить("type");
			ТипКорпуса = ВРег(Лев(ЗначениеType, 1)) + Сред(ЗначениеType, 2);
			АдресСтруктура.Корпуса.Добавить(
				Новый Структура("ТипКорпуса, Тип, Номер",
					ТипКорпуса,
					ТипКорпуса,
					ТекущийКорпусJSON.Получить("number")));
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеApartments = АдресJSON.Получить("apartments");
	Если ТипЗнч(ЗначениеApartments) = Тип("Массив") Тогда
		Для Каждого ТекущееПомещениеJSON Из ЗначениеApartments Цикл
			ЗначениеType = ТекущееПомещениеJSON.Получить("type");
			ТипПомещения = ВРег(Лев(ЗначениеType, 1)) + Сред(ЗначениеType, 2);
			АдресСтруктура.Помещения.Добавить(
				Новый Структура("ТипПомещения, Тип, Номер",
					ТипПомещения,
					ТипПомещения,
					ТекущееПомещениеJSON.Получить("number")));
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеId = АдресJSON.Получить("id");
	Если ЗначениеЗаполнено(ЗначениеId) Тогда
		АдресСтруктура.ИдентификаторАдресногоОбъекта = Новый УникальныйИдентификатор(ЗначениеId);
	КонецЕсли;
	
	ЗначениеHouseId = АдресJSON.Получить("houseId");
	Если ЗначениеЗаполнено(ЗначениеHouseId) Тогда
		АдресСтруктура.ИдентификаторДома = Новый УникальныйИдентификатор(ЗначениеHouseId);
	КонецЕсли;
	
	ЗначениеSteadId = АдресJSON.Получить("steadId");
	Если ЗначениеЗаполнено(ЗначениеSteadId) И АдресСтруктура.Свойство("ИдентификаторЗемельногоУчастка") Тогда
		АдресСтруктура.ИдентификаторЗемельногоУчастка = Новый УникальныйИдентификатор(ЗначениеSteadId);
	КонецЕсли;
	
	ЗначениеAreaId = АдресJSON.Получить("areaId");
	Если ЗначениеЗаполнено(ЗначениеAreaId) Тогда
		АдресСтруктура.Идентификаторы.РегионИдентификатор = Новый УникальныйИдентификатор(ЗначениеAreaId);
	КонецЕсли;
	
	ЗначениеDistrictId = АдресJSON.Получить("districtId");
	Если ЗначениеЗаполнено(ЗначениеDistrictId) Тогда
		АдресСтруктура.Идентификаторы.РайонИдентификатор = Новый УникальныйИдентификатор(ЗначениеDistrictId);
	КонецЕсли;
	
	ЗначениеMunDistrictId = АдресJSON.Получить("munDistrictId");
	Если ЗначениеЗаполнено(ЗначениеMunDistrictId) Тогда
		АдресСтруктура.Идентификаторы.МуниципальныйРайонИдентификатор = Новый УникальныйИдентификатор(ЗначениеMunDistrictId);
	КонецЕсли;
	
	ЗначениеCityId = АдресJSON.Получить("cityId");
	Если ЗначениеЗаполнено(ЗначениеCityId) Тогда
		АдресСтруктура.Идентификаторы.ГородИдентификатор = Новый УникальныйИдентификатор(ЗначениеCityId);
	КонецЕсли;
	
	ЗначениеSettlementId = АдресJSON.Получить("settlementId");
	Если ЗначениеЗаполнено(ЗначениеSettlementId) Тогда
		АдресСтруктура.Идентификаторы.ПоселениеИдентификатор = Новый УникальныйИдентификатор(ЗначениеSettlementId);
	КонецЕсли;
	
	ЗначениеCityDistrictId = АдресJSON.Получить("cityDistrictId");
	Если ЗначениеЗаполнено(ЗначениеCityDistrictId) Тогда
		АдресСтруктура.Идентификаторы.ВнутригородскойРайонИдентификатор = Новый УникальныйИдентификатор(ЗначениеCityDistrictId);
	КонецЕсли;
	
	ЗначениеLocalityId = АдресJSON.Получить("localityId");
	Если ЗначениеЗаполнено(ЗначениеLocalityId) Тогда
		АдресСтруктура.Идентификаторы.НаселенныйПунктИдентификатор = Новый УникальныйИдентификатор(ЗначениеLocalityId);
	КонецЕсли;
	
	ЗначениеTerritoryId = АдресJSON.Получить("territoryId");
	Если ЗначениеЗаполнено(ЗначениеTerritoryId) Тогда
		АдресСтруктура.Идентификаторы.ТерриторияИдентификатор = Новый УникальныйИдентификатор(ЗначениеTerritoryId);
	КонецЕсли;
	
	ЗначениеStreetId = АдресJSON.Получить("streetId");
	Если ЗначениеЗаполнено(ЗначениеStreetId) Тогда
		АдресСтруктура.Идентификаторы.УлицаИдентификатор = Новый УникальныйИдентификатор(ЗначениеStreetId);
	КонецЕсли;
	
	ЗначениеOktmo = АдресJSON.Получить("oktmo");
	Если ЗначениеЗаполнено(ЗначениеOktmo) Тогда
		АдресСтруктура.ДополнительныеКоды.ОКТМО = ЗначениеOktmo;
	КонецЕсли;
	
	ЗначениеOkato = АдресJSON.Получить("okato");
	Если ЗначениеЗаполнено(ЗначениеOkato) Тогда
		АдресСтруктура.ДополнительныеКоды.ОКАТО = ЗначениеOkato;
	КонецЕсли;
	
	ЗначениеIfnsFlCode = АдресJSON.Получить("ifnsFlCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsFlCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодИФНСФЛ = ЗначениеIfnsFlCode;
	КонецЕсли;
	
	ЗначениеIfnsUlCode = АдресJSON.Получить("ifnsUlCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsUlCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодИФНСЮЛ = ЗначениеIfnsUlCode;
	КонецЕсли;
	
	ЗначениеIfnsFlAreaCode = АдресJSON.Получить("ifnsFlAreaCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsFlAreaCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодУчасткаИФНСФЛ = ЗначениеIfnsFlAreaCode;
	КонецЕсли;
	
	ЗначениеIfnsUlAreaCode = АдресJSON.Получить("ifnsUlAreaCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsUlAreaCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодУчасткаИФНСЮЛ = ЗначениеIfnsUlAreaCode;
	КонецЕсли;
	
	Результат = НоваяКонтактнаяИнформация();
	Результат.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
		АдресСтруктура,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	Если АдресСтруктура.ТипАдреса = "Административно-территориальный" Тогда
		Результат.Представление = АдресСтруктура.Представление;
	Иначе
		Результат.Представление = АдресСтруктура.МуниципальноеПредставление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСведенияОРуководителях(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеHeadPersonInfo = ТелоОтветаОбъект.Получить("headPersonInfo");
	Если ТипЗнч(ЗначениеHeadPersonInfo) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеDirector = ЗначениеHeadPersonInfo.Получить("director");
	Если ТипЗнч(ЗначениеDirector) = Тип("Соответствие") Тогда
		ЗаполнитьСтрокаРуководителя(Реквизиты.Руководители.Добавить(), ЗначениеDirector);
	КонецЕсли;
	
	ЗначениеOtherProxies = ЗначениеHeadPersonInfo.Получить("otherProxies");
	Если ТипЗнч(ЗначениеOtherProxies) = Тип("Массив") Тогда
		Для Каждого ТекущееOtherProxies Из ЗначениеOtherProxies Цикл
			Если ТипЗнч(ТекущееOtherProxies) = Тип("Соответствие") Тогда
				ЗаполнитьСтрокаРуководителя(Реквизиты.Руководители.Добавить(), ТекущееOtherProxies);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокаРуководителя(СтрокаРуководителя, ДанныеОбъект)
	
	ЗначениеLastName = ДанныеОбъект.Получить("lastName");
	Если ЗначениеLastName <> Неопределено Тогда
		СтрокаРуководителя.Фамилия = ЗначениеLastName;
	КонецЕсли;
	ЗначениеName = ДанныеОбъект.Получить("name");
	Если ЗначениеName <> Неопределено Тогда
		СтрокаРуководителя.Имя = ЗначениеName;
	КонецЕсли;
	ЗначениеPatronymic = ДанныеОбъект.Получить("patronymic");
	Если ЗначениеPatronymic <> Неопределено Тогда
		СтрокаРуководителя.Отчество = ЗначениеPatronymic;
	КонецЕсли;
	ЗначениеPosition = ДанныеОбъект.Получить("position");
	Если ЗначениеPosition <> Неопределено Тогда
		СтрокаРуководителя.Должность = ЗначениеPosition;
	КонецЕсли;
	ЗначениеInn = ДанныеОбъект.Получить("inn");
	Если ЗначениеInn <> Неопределено Тогда
		СтрокаРуководителя.ИНН = ЗначениеInn;
	КонецЕсли;
	ЗначениеFromDate = ДанныеОбъект.Получить("fromDate");
	Если ЗначениеFromDate <> Неопределено Тогда
		СтрокаРуководителя.ДатаЗаписи = ДатаИзJSON(ЗначениеFromDate);
	КонецЕсли;
	
	СтрокаРуководителя.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"),
		СтрокаРуководителя.Фамилия,
		СтрокаРуководителя.Имя,
		СтрокаРуководителя.Отчество));
	
	СтрокаРуководителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
	СтрокаРуководителя.ОрганизацииГдеУчредитель = НоваяТаблицаОрганизацииГдеУчредитель();
	
	ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
		ДанныеОбъект,
		СтрокаРуководителя,
		СтрокаРуководителя.ИНН);
	
КонецПроцедуры

Процедура ЗаполнитьИсториюРеквизитовЮридическогоЛица(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеHistory = ТелоОтветаОбъект.Получить("history");
	Если ЗначениеHistory = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияРеквизитов = Реквизиты.ИсторияРеквизитов;
	ЗаполнитьИсторияКПП(ЗначениеHistory.Получить("kpps"), ИсторияРеквизитов.КПП);
	ЗаполнитьИсторияНаименование(ЗначениеHistory.Получить("names"), ИсторияРеквизитов.Наименование);
	ЗаполнитьИсторияАдрес(ЗначениеHistory.Получить("addresses"), ИсторияРеквизитов.Адрес);
	ЗаполнитьИсторияСтатус(ЗначениеHistory.Получить("statuses"), ИсторияРеквизитов.Статус);
	ЗаполнитьИсторияРеквизитыДиректора(ЗначениеHistory.Получить("headPersons"), ИсторияРеквизитов.РеквизитыДиректора);
	
КонецПроцедуры

Процедура ЗаполнитьИсторияКПП(ИсторияKpp, Таблица)
	
	Если ТипЗнч(ИсторияKpp) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееИсторияKpp Из ИсторияKpp Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата     = ДатаИзJSON(ТекущееИсторияKpp.Получить("fromDate"));
		НоваяСтрока.Значение = ТекущееИсторияKpp.Получить("value");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияНаименование(ЗначениеNames, Таблица)
	
	Если ТипЗнч(ЗначениеNames) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеNames Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		
		НаименованиеСтруктура = Новый Структура;
		НаименованиеСтруктура.Вставить("НаименованиеПолное");
		НаименованиеСтруктура.Вставить("НаименованиеСокращенное");
		НаименованиеСтруктура.Вставить("Наименование");
		НаименованиеСтруктура.Вставить("ПравоваяФорма");
		ЗаполнитьНаименованияЮридическогоЛица(ЭлементСписка, НаименованиеСтруктура);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НаименованиеСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияАдрес(ЗначениеAddresses, Таблица)
	
	Если ТипЗнч(ЗначениеAddresses) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеAddresses Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		АдресСтруктура = АдресКИИзJSON(ЭлементСписка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АдресСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияСтатус(ЗначениеStatuses, Таблица)
	
	Если ТипЗнч(ЗначениеStatuses) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеStatuses Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		ЗначениеCode = ЭлементСписка.Получить("code");
		Если ЗначениеCode <> Неопределено Тогда
			НоваяСтрока.Код = ЗначениеCode;
		КонецЕсли;
		
		ЗначениеName = ЭлементСписка.Получить("name");
		Если ЗначениеName <> Неопределено Тогда
			НоваяСтрока.Наименование = ЗначениеName;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияРеквизитыДиректора(ЗначениеHeadPersons, Таблица)
	
	Если ТипЗнч(ЗначениеHeadPersons) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеHeadPersons Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		НоваяСтрока.ДатаОкончания = ДатаИзJSON(ЭлементСписка.Получить("toDate"));
		НоваяСтрока.ИНН = ЭлементСписка.Получить("inn");
		
		ЗначениеLastName = ЭлементСписка.Получить("lastName");
		Если ЗначениеLastName <> Неопределено Тогда
			НоваяСтрока.Фамилия = ЗначениеLastName;
		КонецЕсли;
		ЗначениеName = ЭлементСписка.Получить("name");
		Если ЗначениеName <> Неопределено Тогда
			НоваяСтрока.Имя = ЗначениеName;
		КонецЕсли;
		ЗначениеPatronymic = ЭлементСписка.Получить("patronymic");
		Если ЗначениеPatronymic <> Неопределено Тогда
			НоваяСтрока.Отчество = ЗначениеPatronymic;
		КонецЕсли;
		ЗначениеPositionType = ЭлементСписка.Получить("positionType");
		Если ЗначениеPositionType <> Неопределено Тогда
			НоваяСтрока.ВидДолжности = ЗначениеPositionType;
		КонецЕсли;
		ЗначениеPosition = ЭлементСписка.Получить("position");
		Если ЗначениеPosition <> Неопределено Тогда
			НоваяСтрока.НаименованиеДолжности = ЗначениеPosition;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтрокуОбОрганизации(ОрганизацияОбъект, ТаблицаДанных)
	
	РеквизитыЮЛ = НовыеРеквизитыЮридическогоЛица();
	ЗаполнитьНаименованияЮридическогоЛица(ОрганизацияОбъект.Получить("name"), РеквизитыЮЛ);
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.НаименованиеОрганизации = РеквизитыЮЛ.НаименованиеСокращенное;
	НоваяСтрока.ИНН = ОрганизацияОбъект.Получить("inn");
	ЗаполнитьИнформациюОСтатусе(ОрганизацияОбъект, НоваяСтрока);
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ЗаполнитьСтрокуОбУчредителе(Объект, ТаблицаДанных)
	
	НоваяСтрока = ЗаполнитьСтрокуОбОрганизации(Объект, ТаблицаДанных);
	ЗначениеCapitalShare = Объект.Получить("capitalShare");
	
	Если ЗначениеCapitalShare <> Неопределено Тогда
		ЗначениеNominalValue = ЗначениеCapitalShare.Получить("nominalValue");
		Если ЗначениеNominalValue <> Неопределено Тогда
			НоваяСтрока.СуммаКапитала   = Число(ЗначениеNominalValue);
		КонецЕсли;
		ЗначениеPercent = ЗначениеCapitalShare.Получить("percent");
		Если ЗначениеPercent <> Неопределено Тогда
			НоваяСтрока.ПроцентКапитала = Число(ЗначениеPercent);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОПроверкахКонтролирующимиОрганами(
	ОбъектXDTO,
	ИнформацияОПроверках,
	Плановые,
	Внеплановые,
	Завершенные,
	Незавершенные)
	
	Если НЕ Завершенные И НЕ Незавершенные Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоЗавершенные   = Завершенные И НЕ Незавершенные;
	ТолькоНезавершенные = НЕ Завершенные И Незавершенные;
	
	// Внеплановые проверки.
	Если Внеплановые И ОбъектXDTO.InspectionsUnregular294 <> Неопределено Тогда
		Для каждого ПроверкиЗаМесяц Из ОбъектXDTO.InspectionsUnregular294 Цикл
			Если ПроверкиЗаМесяц.InspectionUnregular294 <> Неопределено Тогда
				
				ГодПроверки    = ПроверкиЗаМесяц.YEAR;
				МесяцПроверки  = ПроверкиЗаМесяц.MONTH;
				ПериодПроверки = Дата(ГодПроверки, МесяцПроверки, 1);
				
				Для каждого СтрокаПроверки Из ПроверкиЗаМесяц.InspectionUnregular294 Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаПроверки.KO_NAME) Тогда 
						Продолжить; // Пропускаем записи с пустым контролирующим органом.
					КонецЕсли;
					Завершена = СтрокаПроверки.InspectionResult294 <> Неопределено;
					Если ТолькоЗавершенные И НЕ Завершена
						ИЛИ ТолькоНезавершенные И Завершена Тогда
						Продолжить;
					КонецЕсли;
					
					ТаблицаПроверок = ИнформацияОПроверках.Проверки[СтрокаПроверки.INN];
					Если ТаблицаПроверок = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаПроверок.Добавить();
					НоваяСтрока.Идентификатор    = Формат(СтрокаПроверки.ERPID, "ЧГ=");
					НоваяСтрока.ПлановаяПроверка = Ложь;
					НоваяСтрока.ПериодПроверки   = ПериодПроверки;
					ДатаНачала = ?(ЗначениеЗаполнено(СтрокаПроверки.START_DATE), 
						СтрокаПроверки.START_DATE, ПериодПроверки);
					ДатаКонца  = ?(ЗначениеЗаполнено(СтрокаПроверки.END_DATE), 
						СтрокаПроверки.END_DATE, КонецМесяца(ДатаНачала));
					НоваяСтрока.ДатаПроверки = ДатаНачала;
					НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='с %1 по %2'"), 
						Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаКонца, "ДЛФ=D"));
					НоваяСтрока.КонтролирующийОрган = СокрЛП(СтрокаПроверки.KO_NAME);
					НоваяСтрока.АдресПроверки = ?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_II), 
						СокрЛП(СтрокаПроверки.ADR_SEC_II), СокрЛП(СтрокаПроверки.ADR_SEC_I));
					НоваяСтрока.ЦельПроверки = СокрЛП(СтрокаПроверки.INSP_TARGET);
					НоваяСтрока.Нарушения    = НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами();
					
					Если Завершена Тогда
						
						Если СтрокаПроверки.InspectionResult294.InspectionViolations294 <> Неопределено Тогда
							Для каждого СтрокаНарушения Из СтрокаПроверки.InspectionResult294.InspectionViolations294 Цикл
								НоваяСтрокаНарушения = НоваяСтрока.Нарушения.Добавить();
								НоваяСтрокаНарушения.НомерНарушения = СтрокаНарушения.Violation_ID;
								НоваяСтрокаНарушения.Нарушение      = СтрокаНарушения.Violation_Note;
								НоваяСтрокаНарушения.НарушенныйАкт  = СтрокаНарушения.Violation_Act;
								НоваяСтрокаНарушения.Предписание    = СтрокаНарушения.Injunction_Note;
								НоваяСтрокаНарушения.Исполнение     = СтрокаНарушения.Injunction_Execution;
							КонецЦикла;
						КонецЕсли;
						
						КоличествоНарушений = НоваяСтрока.Нарушения.Количество();
						Если КоличествоНарушений = 0 Тогда
							НоваяСтрока.Результат = НСтр("ru='Нарушений не выявлено'");
						Иначе
							НоваяСтрока.Нарушения.Сортировать("НомерНарушения");
							НоваяСтрока.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
								НСтр("ru=';Выявлено %1 нарушение;;Выявлено %1 нарушения;Выявлено %1 нарушений;'"),
								КоличествоНарушений);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Плановые проверки.
	Если Плановые
		И ОбъектXDTO.InspectionsRegular294 <> Неопределено Тогда
		Для каждого ПроверкиЗаМесяц Из ОбъектXDTO.InspectionsRegular294 Цикл
			Если ПроверкиЗаМесяц.InspectionRegular294 <> Неопределено Тогда
				
				ГодПроверки    = ПроверкиЗаМесяц.YEAR;
				МесяцПроверки  = ПроверкиЗаМесяц.MONTH;
				ПериодПроверки = Дата(ГодПроверки, МесяцПроверки, 1);
				
				Для каждого СтрокаПроверки Из ПроверкиЗаМесяц.InspectionRegular294 Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаПроверки.KO_NAME) Тогда 
						Продолжить; // Пропускаем записи с пустым контролирующим органом.
					КонецЕсли;
					Завершена = СтрокаПроверки.InspectionResult294 <> Неопределено;
					Если ТолькоЗавершенные И НЕ Завершена
						ИЛИ ТолькоНезавершенные И Завершена Тогда
						Продолжить;
					КонецЕсли;
					
					ТаблицаПроверок = ИнформацияОПроверках.Проверки[СтрокаПроверки.INN];
					Если ТаблицаПроверок = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаПроверок.Добавить();
					НоваяСтрока.Идентификатор    = Формат(СтрокаПроверки.ERPID, "ЧГ=");
					НоваяСтрока.ПлановаяПроверка = Истина;
					НоваяСтрока.ПериодПроверки   = ПериодПроверки;
					ДатаНачала = ?(ЗначениеЗаполнено(СтрокаПроверки.START_DATE), 
						СтрокаПроверки.START_DATE, ПериодПроверки);
					Если ЗначениеЗаполнено(СтрокаПроверки.DURATION_SEC_II) Тогда
						Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 рабочих дней'"), СтрокаПроверки.DURATION_SEC_II);
					ИначеЕсли ЗначениеЗаполнено(СтрокаПроверки.DURATION_SEC_I) Тогда
						Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 рабочих часов'"), СтрокаПроверки.DURATION_SEC_I);
					Иначе
						Длительность = "";
					КонецЕсли;
					НоваяСтрока.ДатаПроверки = ДатаНачала;
					Если ЗначениеЗаполнено(Длительность) Тогда
						НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='с %1, %2'"), Формат(ДатаНачала, "ДЛФ=D"), Длительность);
					Иначе
						НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='с %1'"), Формат(ДатаНачала, "ДЛФ=D"));
					КонецЕсли;
					НоваяСтрока.КонтролирующийОрган = СокрЛП(СтрокаПроверки.KO_NAME);
					НоваяСтрока.АдресПроверки = ?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_IV), СокрЛП(СтрокаПроверки.ADR_SEC_IV),
						?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_III), СокрЛП(СтрокаПроверки.ADR_SEC_III), 
							СокрЛП(СтрокаПроверки.ADR_SEC_I)));
					НоваяСтрока.ЦельПроверки = СокрЛП(СтрокаПроверки.INSP_TARGET);
					НоваяСтрока.Нарушения    = НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами();
					
					Если Завершена Тогда
						
						Если СтрокаПроверки.InspectionResult294.InspectionViolations294 <> Неопределено Тогда
							Для каждого СтрокаНарушения Из СтрокаПроверки.InspectionResult294.InspectionViolations294 Цикл
								НоваяСтрокаНарушения = НоваяСтрока.Нарушения.Добавить();
								НоваяСтрокаНарушения.НомерНарушения = СтрокаНарушения.Violation_ID;
								НоваяСтрокаНарушения.Нарушение      = СтрокаНарушения.Violation_Note;
								НоваяСтрокаНарушения.НарушенныйАкт  = СтрокаНарушения.Violation_Act;
								НоваяСтрокаНарушения.Предписание    = СтрокаНарушения.Injunction_Note;
								НоваяСтрокаНарушения.Исполнение     = СтрокаНарушения.Injunction_Execution;
							КонецЦикла;
						КонецЕсли;
						
						КоличествоНарушений = НоваяСтрока.Нарушения.Количество();
						Если КоличествоНарушений = 0 Тогда
							НоваяСтрока.Результат = НСтр("ru='Нарушений не выявлено'");
						Иначе
							НоваяСтрока.Нарушения.Сортировать("НомерНарушения");
							НоваяСтрока.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
								НСтр("ru=';Выявлено %1 нарушение;;Выявлено %1 нарушения;Выявлено %1 нарушений;'"),
								КоличествоНарушений);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ИнформацияОПроверках.Проверки Цикл
		ТаблицаПроверок = КлючЗначение.Значение;
		ТаблицаПроверок.Сортировать("ПериодПроверки,ДатаПроверки,КонтролирующийОрган");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОСтатусеСтруктура(ТелоОтветаОбъект, Данные)
	
	Если ТипЗнч(ТелоОтветаОбъект) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеStatus = ТелоОтветаОбъект.Получить("status");
	Если ЗначениеStatus <> Неопределено Тогда
		СтатусСтруктура = НовыйДанныеСтатуса();
		СтатусСтруктура.Код = ЗначениеStatus.Получить("code");
		СтатусСтруктура.Наименование = ЗначениеStatus.Получить("name");
		Данные.Статус = СтатусСтруктура;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОРегистрирующемОргане(ТелоОтветаОбъект, Данные)
	
	ЗначениеRegisteredStateAgencyCode = ТелоОтветаОбъект.Получить("registeredStateAgencyCode");
	ЗначениеRegisteredStateAgencyName = ТелоОтветаОбъект.Получить("registeredStateAgencyName");
	Если ЗначениеRegisteredStateAgencyCode <> Неопределено
		Или ЗначениеRegisteredStateAgencyName <> Неопределено Тогда
		Данные.РегистрирующийОрган = НовыйДанныеРегистрирующегоОргана();
		Данные.РегистрирующийОрган.Код = ЗначениеRegisteredStateAgencyCode;
		Данные.РегистрирующийОрган.Наименование = ЗначениеRegisteredStateAgencyName;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйДанныеСтатуса()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"                , "");
	Результат.Вставить("Наименование"       , "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеРегистрирующегоОргана()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьОткрытыеГосударственныеДанныеФНС(ЗначениеOpenDataInfo, Реквизиты)
	
	Если ТипЗнч(ЗначениеOpenDataInfo) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееOpenDataInfo Из ЗначениеOpenDataInfo Цикл
		
		СтрокаОткрытыеГосударственныеДанныеФНС = Реквизиты.ОткрытыеГосударственныеДанныеФНС.Добавить();
		ЗначениеYear = ТекущееOpenDataInfo.Получить("year");
		Если ЗначениеYear <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.Год = ЗначениеYear;
		КонецЕсли;
		
		ЗначениеWorkerCount = ТекущееOpenDataInfo.Получить("workerCount");
		Если ЗначениеWorkerCount <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.КоличествоСотрудников = ЗначениеWorkerCount;
		КонецЕсли;
		
		ЗначениеIncomeSum = ТекущееOpenDataInfo.Получить("incomeSum");
		Если ЗначениеIncomeSum <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.СуммаДоходов = Число(ЗначениеIncomeSum);
		КонецЕсли;
		
		ЗначениеOutcomeSum = ТекущееOpenDataInfo.Получить("outcomeSum");
		Если ЗначениеOutcomeSum <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.СуммаРасходов = Число(ЗначениеOutcomeSum);
		КонецЕсли;
		
		ЗначениеParticipationInKGN = ТекущееOpenDataInfo.Получить("participationInKGN");
		Если ЗначениеParticipationInKGN <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.УчастиеВКГН = ЗначениеParticipationInKGN;
		КонецЕсли;
		
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеЕСХН = (ТекущееOpenDataInfo.Получить("usesTaxModeESHN") = Истина);
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеУСН = (ТекущееOpenDataInfo.Получить("usesTaxModeUSN") = Истина);
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеЕНВД = (ТекущееOpenDataInfo.Получить("usesTaxModeENVD") = Истина);
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеСРП = (ТекущееOpenDataInfo.Получить("usesTaxModeSRP") = Истина);
		
		СтрокаОткрытыеГосударственныеДанныеФНС.СведенияОНалогах = НоваяТаблицаСведенияОНалогах();
		
		ЗначениеTaxes = ТекущееOpenDataInfo.Получить("taxes");
		Если ТипЗнч(ЗначениеTaxes) = Тип("Массив") Тогда
			Для Каждого ТекущееPaidTaxes Из ЗначениеTaxes Цикл
				СтрокаСведенияОНалогах = СтрокаОткрытыеГосударственныеДанныеФНС.СведенияОНалогах.Добавить();
				ЗначениеName = ТекущееPaidTaxes.Получить("name");
				Если ЗначениеName <> Неопределено Тогда
					СтрокаСведенияОНалогах.Наименование = ЗначениеName;
				КонецЕсли;
				СтрокаСведенияОНалогах.Сортировка = ТекущееPaidTaxes.Получить("sorting");
				ЗначениеPaid = ТекущееPaidTaxes.Получить("paid");
				Если ЗначениеPaid <> Неопределено Тогда
					СтрокаСведенияОНалогах.Уплачено = 
						?(СтрокаСведенияОНалогах.Уплачено = Неопределено, 0, СтрокаСведенияОНалогах.Уплачено)
						+ Число(ЗначениеPaid);
				КонецЕсли;
				ЗначениеDebt = ТекущееPaidTaxes.Получить("debt");
				Если ЗначениеDebt <> Неопределено Тогда
					СтрокаСведенияОНалогах.Задолженность =
						?(СтрокаСведенияОНалогах.Задолженность = Неопределено, 0, СтрокаСведенияОНалогах.Задолженность)
						+ Число(ЗначениеDebt);
				КонецЕсли;
				ЗначениеFine = ТекущееPaidTaxes.Получить("fine");
				Если ЗначениеFine <> Неопределено Тогда
					СтрокаСведенияОНалогах.Пени =
						?(СтрокаСведенияОНалогах.Пени = Неопределено, 0, СтрокаСведенияОНалогах.Пени)
						+ Число(ЗначениеFine);
				КонецЕсли;
				ЗначениеPenalty = ТекущееPaidTaxes.Получить("penalty");
				Если ЗначениеPenalty <> Неопределено Тогда
					СтрокаСведенияОНалогах.Штраф =
						?(СтрокаСведенияОНалогах.Штраф = Неопределено, 0, СтрокаСведенияОНалогах.Штраф)
						+ Число(ЗначениеPenalty);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПредставительстве(СведенияОПредставительстве, СведенияJSON)
	
	ЗначениеRepresentationInfo = СведенияJSON.Получить("representationInfo");
	Если ТипЗнч(ЗначениеRepresentationInfo) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПредставительстве.КПП = ЗначениеRepresentationInfo.Получить("kpp");
	СведенияОПредставительстве.ВидОбособленногоПодразделения = ЗначениеRepresentationInfo.Получить("type");
	СведенияОПредставительстве.НаименованиеПолное = ЗначениеRepresentationInfo.Получить("nameFull");
	
	РегистрацияВНалоговомОргане = Новый Структура;
	РегистрацияВНалоговомОргане.Вставить("Код", ЗначениеRepresentationInfo.Получить("inspectionCode"));
	РегистрацияВНалоговомОргане.Вставить("Наименование", ЗначениеRepresentationInfo.Получить("inspectionName"));
	РегистрацияВНалоговомОргане.Вставить("ДатаРегистрации", ДатаИзJSON(ЗначениеRepresentationInfo.Получить("registrationDate")));
	Если РегистрацияВНалоговомОргане.Код <> Неопределено
		Или РегистрацияВНалоговомОргане.Наименование <> Неопределено
		Или РегистрацияВНалоговомОргане.ДатаРегистрации <> Неопределено Тогда
		СведенияОПредставительстве.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	ЗаполнитьЮридическийАдрес(ЗначениеRepresentationInfo.Получить("address"), СведенияОПредставительстве);
	ЗаполнитьВидДеятельности(ЗначениеRepresentationInfo, СведенияОПредставительстве);
	ЗаполнитьИнформациюОВидахДеятельности(ЗначениеRepresentationInfo, СведенияОПредставительстве, Ложь, "ПрочиеВидыДеятельности");
	
	СведенияОПредставительстве.КоличествоИностранныхСотрудников = ЗначениеRepresentationInfo.Получить("foreignEmployeesCount");
	ЗначениеHeadPerson = ЗначениеRepresentationInfo.Получить("headPerson");
	Если ТипЗнч(ЗначениеHeadPerson) = Тип("Соответствие") Тогда
		Руководитель = Новый Структура;
		Руководитель.Вставить("Фамилия", ЗначениеHeadPerson.Получить("lastName"));
		Руководитель.Вставить("Имя", ЗначениеHeadPerson.Получить("name"));
		Руководитель.Вставить("Отчество", ЗначениеHeadPerson.Получить("patronymic"));
		Руководитель.Вставить("Представление",
			СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru='%1 %2 %3'"),
				Руководитель.Фамилия,
				Руководитель.Имя,
				Руководитель.Отчество)));
		СведенияОПредставительстве.Руководитель = Руководитель;
	КонецЕсли;
	
	ЗначениеAccreditationInfo = ЗначениеRepresentationInfo.Получить("accreditationInfo");
	Если ТипЗнч(ЗначениеAccreditationInfo) = Тип("Соответствие") Тогда
		Аккредитация = Новый Структура;
		Аккредитация.Вставить("НомерЗаписиОбАккредитации", ЗначениеAccreditationInfo.Получить("recordNumber"));
		Аккредитация.Вставить("ДатаАккредитации", ДатаИзJSON(ЗначениеAccreditationInfo.Получить("accreditationDate")));
		Аккредитация.Вставить("КодУполномоченногоНалоговогоОргана", ЗначениеAccreditationInfo.Получить("inspectionCode"));
		Аккредитация.Вставить("НаименованиеУполномоченногоНалоговогоОргана", ЗначениеAccreditationInfo.Получить("inspectionName"));
		Аккредитация.Вставить("ДатаОкончанияСрокаАккредитации", ДатаИзJSON(ЗначениеAccreditationInfo.Получить("accreditationEndDate")));
		Аккредитация.Вставить("ДатаПродленияАккредитации", ДатаИзJSON(ЗначениеAccreditationInfo.Получить("prolongationDate")));
		Аккредитация.Вставить("ДатаОкончанияСрокаПродленияАккредитации", ДатаИзJSON(ЗначениеAccreditationInfo.Получить("prolongationEndDate")));
		СведенияОПредставительстве.Аккредитация = Аккредитация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбИностранномЮридическомЛице(СведенияОбИностранномЮридическомЛице, СведенияJSON)
	
	ЗначениеForeignCompanyInfo = СведенияJSON.Получить("foreignCompanyInfo");
	Если ТипЗнч(ЗначениеForeignCompanyInfo) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбИностранномЮридическомЛице.НаименованиеПолное = ЗначениеForeignCompanyInfo.Получить("nameFull");
	ЗначениеCountryCode = ЗначениеForeignCompanyInfo.Получить("countryCode");
	Если ЗначениеCountryCode <> Неопределено Тогда
		СведенияОбИностранномЮридическомЛице.КодСтраны = Число(ЗначениеCountryCode);
	КонецЕсли;
	
	СведенияОбИностранномЮридическомЛице.Страна = ЗначениеForeignCompanyInfo.Получить("countryName");
	СведенияОбИностранномЮридическомЛице.Адрес = ЗначениеForeignCompanyInfo.Получить("address");
	
	ЗначениеAuthorizedCapital = ЗначениеForeignCompanyInfo.Получить("authorizedCapital");
	Если ТипЗнч(ЗначениеAuthorizedCapital) = Тип("Соответствие") Тогда
		УставныйКапитал = Новый Структура;
		ЗначениеValue = ЗначениеAuthorizedCapital.Получить("value");
		Если ЗначениеValue <> Неопределено Тогда
			УставныйКапитал.Вставить("Размер", Число(ЗначениеValue));
		КонецЕсли;
		ЗначениеCurrencyCode = ЗначениеAuthorizedCapital.Получить("currencyCode");
		Если ЗначениеCurrencyCode <> Неопределено Тогда
			УставныйКапитал.Вставить("КодВалюты", Число(ЗначениеCurrencyCode));
		КонецЕсли;
		ЗначениеCurrencyName = ЗначениеAuthorizedCapital.Получить("currencyName");
		Если ЗначениеCurrencyName <> Неопределено Тогда
			УставныйКапитал.Вставить("НаименованиеВалюты", ЗначениеCurrencyName);
		КонецЕсли;
		СведенияОбИностранномЮридическомЛице.УставныйКапитал = УставныйКапитал;
	КонецЕсли;
	
	СведенияОбИностранномЮридическомЛице.КодНалогоплательщика = ЗначениеForeignCompanyInfo.Получить("taxCode");
	
	Регистрация = Новый Структура;
	Регистрация.Вставить("РегистрационныйНомер", ЗначениеForeignCompanyInfo.Получить("registrationNumber"));
	Регистрация.Вставить("НаименованиеОргана", ЗначениеForeignCompanyInfo.Получить("registrationAuthority"));
	Регистрация.Вставить("ОсобенностиРежимаРегистрации", ЗначениеForeignCompanyInfo.Получить("registrationPeculiarity"));
	
	СведенияОбИностранномЮридическомЛице.Регистрация = Регистрация;
	
КонецПроцедуры

Процедура УдалитьНеИспользуемыеКолонкиРуководителей(Руководители)

	// Удаление лишних полей в таблице Руководители.
	// Сервис для операции поиска по ИНН всегда возвращает
	// null для полей:
	//  - foundedCorporationsByPersonFullName;
	//  - headedCorporationsByInn;
	//  - headedCorporationsByPersonFullName;
	Если Руководители <> Неопределено Тогда
		КолонкиДляУдаления = Новый Массив;
		КолонкиДляУдаления.Добавить("ОрганизацииГдеРуководитель");
		КолонкиДляУдаления.Добавить("ОрганизацииГдеРуководительПоФИО");
		КолонкиДляУдаления.Добавить("ОрганизацииГдеУчредитель");
		КолонкиДляУдаления.Добавить("ОрганизацииГдеУчредительПоФИО");
		
		Для Каждого Колонка Из КолонкиДляУдаления Цикл
			Если Руководители.Колонки.Найти(Колонка) <> Неопределено Тогда
				Руководители.Колонки.Удалить(Колонка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;


КонецПроцедуры

#Область УстаревшиеМетоды

Процедура ЗаполнитьИсториюРеквизитовЮридическогоЛицаИзXDTO(ОбъектXDTO, Реквизиты, Фабрика, АдресныеСокращения)
	
	Если ТипЗнч(ОбъектXDTO.ИсторияРеквизитовЮЛ) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияРеквизитовXDTO = ОбъектXDTO.ИсторияРеквизитовЮЛ;
	ИсторияРеквизитов     = Реквизиты.ИсторияРеквизитов;
	ЗаполнитьИсторияКППИзXDTO(ИсторияРеквизитовXDTO.кпп, ИсторияРеквизитов.КПП);
	ЗаполнитьИсторияНаименованиеИзXDTO(ИсторияРеквизитовXDTO.СвНаимЮЛ, ИсторияРеквизитов.Наименование);
	ЗаполнитьИсторияАдресИзXDTO(ИсторияРеквизитовXDTO.СвАдрес, ИсторияРеквизитов.Адрес, Фабрика, АдресныеСокращения);
	ЗаполнитьИсторияСтатусИзXDTO(ИсторияРеквизитовXDTO.СвСтатус, ИсторияРеквизитов.Статус);
	ЗаполнитьИсторияРеквизитыДиректораИзXDTO(ИсторияРеквизитовXDTO.РеквизитыДиректора, ИсторияРеквизитов.РеквизитыДиректора);
	
КонецПроцедуры

Процедура ЗаполнитьИсторияКППИзXDTO(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата     = ЭлементСпискаXDTO.from;
		НоваяСтрока.Значение = ЭлементСпискаXDTO.value;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияНаименованиеИзXDTO(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Общество с ограниченной ответственностью");
	ПравовыеФормы.Добавить("Закрытое акционерное общество");
	ПравовыеФормы.Добавить("Открытое акционерное общество");
	ПравовыеФормы.Добавить("Публичное акционерное общество");
	ПравовыеФормы.Добавить("Акционерное общество");
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		Если ЭлементСпискаXDTO.НаимЮЛПолн <> Неопределено Тогда
			НоваяСтрока.НаименованиеПолное = ЭлементСпискаXDTO.НаимЮЛПолн.value;
		КонецЕсли;
		Если ЭлементСпискаXDTO.НаимЮЛСокр <> Неопределено Тогда
			НоваяСтрока.НаименованиеСокращенное = ЭлементСпискаXDTO.НаимЮЛСокр.value;
		КонецЕсли;
		
		// Преобразование полного наименования.
		Для Каждого ПравоваяФорма Из ПравовыеФормы Цикл
			Если ВРег(ПравоваяФорма) = ВРег(Лев(НоваяСтрока.НаименованиеПолное, СтрДлина(ПравоваяФорма))) Тогда
				НоваяСтрока.НаименованиеПолное = ПравоваяФорма + Сред(НоваяСтрока.НаименованиеПолное, СтрДлина(ПравоваяФорма) + 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Преобразование сокращенного наименования.
		Если Не ЗначениеЗаполнено(НоваяСтрока.НаименованиеСокращенное)
			Или Не ЗначениеЗаполнено(СтрЗаменить(НоваяСтрока.НаименованиеСокращенное, "-", ""))
			Или ВРег(НоваяСтрока.НаименованиеСокращенное) = "НЕТ" Тогда
			НоваяСтрока.НаименованиеСокращенное = НоваяСтрока.НаименованиеПолное;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияАдресИзXDTO(ОбъектСписокXDTO, Таблица, Фабрика, АдресныеСокращения)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		
		АдресСтруктура = АдресКИИзXDTO(ЭлементСпискаXDTO.Адрес, Фабрика, АдресныеСокращения);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АдресСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияСтатусИзXDTO(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		
		Если ЭлементСпискаXDTO.Код <> Неопределено Тогда
			НоваяСтрока.Код = ЭлементСпискаXDTO.Код.value;
		КонецЕсли;
		Если ЭлементСпискаXDTO.Наименование <> Неопределено Тогда
			НоваяСтрока.Наименование = ЭлементСпискаXDTO.Наименование.value;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияРеквизитыДиректораИзXDTO(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		НоваяСтрока.ДатаОкончания = ЭлементСпискаXDTO.to;
		НоваяСтрока.ИНН = ЭлементСпискаXDTO.ИНН;
		
		Если ЭлементСпискаXDTO.фамилия <> Неопределено Тогда
			НоваяСтрока.Фамилия = ТРег(ЭлементСпискаXDTO.фамилия.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.имя <> Неопределено Тогда
			НоваяСтрока.Имя = ТРег(ЭлементСпискаXDTO.имя.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.отчество <> Неопределено Тогда
			НоваяСтрока.Отчество = ТРег(ЭлементСпискаXDTO.отчество.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.видДолжности <> Неопределено Тогда
			НоваяСтрока.ВидДолжности = ЭлементСпискаXDTO.видДолжности.value;
		КонецЕсли;
		Если ЭлементСпискаXDTO.наименованиеДолжности <> Неопределено Тогда
			НоваяСтрока.НаименованиеДолжности = ПредложениеСЗаглавнойБуквы(ЭлементСпискаXDTO.наименованиеДолжности.value);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРуководителяИНомерТелефонаИзXDTO(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвУправлДеят <> Неопределено
		И ОбъектXDTO.СвУправлДеят.СведДолжнФЛ <> Неопределено Тогда
		Если ОбъектXDTO.СвУправлДеят.СведДолжнФЛ.Количество() = 1 Тогда
			ПолучитьДанныеОРуководителеИНомерТелефонаИзXDTO(ОбъектXDTO.СвУправлДеят.СведДолжнФЛ[0], Реквизиты, Ложь);
		Иначе
			Для каждого СведенияОДолжности Из ОбъектXDTO.СвУправлДеят.СведДолжнФЛ Цикл
				Если ПолучитьДанныеОРуководителеИНомерТелефонаИзXDTO(СведенияОДолжности, Реквизиты) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция АдресКИИзXDTO(АдресXDTO, Фабрика, АдресныеСокращения)
	
	Если АдресXDTO.Состав.Тип() = Фабрика.Тип("http://company1c.com/orgregister/base", "АдресРФ") Тогда
		Возврат АдресРФВерсия1(АдресXDTO, Фабрика, АдресныеСокращения);
	Иначе
		Возврат АдресРФВерсия2(АдресXDTO);
	КонецЕсли;
	
КонецФункции

Функция ПредложениеСЗаглавнойБуквы(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Возврат ВРег(Лев(Строка, 1)) + НРег(Сред(Строка, 2))
	Иначе
		Возврат Строка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеОРуководителеИНомерТелефонаИзXDTO(СведенияОДолжности, Данные, ПроверитьДолжность = Истина)
	
	Если ПроверитьДолжность Тогда
		Если СтрНайти(ВРег(СведенияОДолжности.НаимВидДолжн), "РУКОВОДИТЕЛЬ") = 0 
			ИЛИ СведенияОДолжности.ФИО = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Руководитель
	СтруктураКИ = НовоеКонтактноеЛицо();
	СтруктураКИ.Фамилия    = ТРег(СведенияОДолжности.ФИО.Фамилия);
	СтруктураКИ.Имя        = ТРег(СведенияОДолжности.ФИО.Имя);
	СтруктураКИ.Отчество   = ТРег(СведенияОДолжности.ФИО.Отчество);
	СтруктураКИ.Должность  = ПредложениеСЗаглавнойБуквы(СведенияОДолжности.НаимДолжн);
	СтруктураКИ.ИНН        = СведенияОДолжности.ИННФл;
	СтруктураКИ.ДатаЗаписи = СведенияОДолжности.ДатаНачДейств;
	СтруктураКИ.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"),
		СтруктураКИ.Фамилия,
		СтруктураКИ.Имя,
		СтруктураКИ.Отчество));
	
	Данные.Руководитель = СтруктураКИ;
	
	// Номер телефона.
	Если ЗначениеЗаполнено(СведенияОДолжности.НомТел) Тогда
		ПространствоИменКИ = ПространствоИменКИ();
		КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
		КИ.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "НомерТелефона"));
		Если Лев(СведенияОДолжности.НомТел, 1) = "(" Тогда
			КонецКодаГорода     = СтрНайти(СведенияОДолжности.НомТел, ")");
			КИ.Состав.КодГорода = Сред(СведенияОДолжности.НомТел, 2, КонецКодаГорода - 2);
			КИ.Состав.Номер     = Сред(СведенияОДолжности.НомТел, КонецКодаГорода + 1);
		Иначе
			КИ.Состав.Номер = СведенияОДолжности.НомТел;
		КонецЕсли;
		КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			КИ,
			Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
		СтруктураКИ = НоваяКонтактнаяИнформация();
		СтруктураКИ.КонтактнаяИнформация =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				КИ,
				Перечисления.ТипыКонтактнойИнформации.Телефон);
		СериализацияОбъектаXDTO(КИ);
		СтруктураКИ.Представление = КИ.Представление;
		
		Данные.Телефон = СтруктураКИ;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция АдресРФВерсия1(АдресXDTO, Фабрика, АдресныеСокращения)
	
	ПространствоИменКИ      = ПространствоИменКИ();
	ПространствоИменАдресов = ПространствоИмен();
	
	АдресРФ_КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменАдресов, "АдресРФ"));
	
	ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(АдресXDTO.Состав, АдресныеСокращения);
	ЗаполнитьОбъектXDTOКонтактнойИнформации(ФабрикаXDTO, АдресРФ_КИ, АдресXDTO.Состав);
	
	КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
	КИ.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "Адрес"));
	КИ.Состав.Страна = АдресXDTO.Страна;
	КИ.Состав.Состав = АдресРФ_КИ;
	КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		КИ,
		Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес));
	
	Результат = НоваяКонтактнаяИнформация();
	Результат.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
		КИ,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	Результат.Представление = КИ.Представление;
	
	Возврат Результат;
	
КонецФункции

Функция АдресРФВерсия2(АдресXDTO)
	
	АдресСтруктура = РаботаСАдресамиКлиентСервер.ПоляАдреса();
	АдресСостав = АдресXDTO.Состав;
	
	АдресСтруктура.ТипАдреса = "Административно-территориальный";
	Если ЗначениеЗаполнено(АдресСостав.ТипАдреса) Тогда
		АдресСтруктура.ТипАдреса = АдресСостав.ТипАдреса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Страна) Тогда
		АдресСтруктура.Страна = АдресСостав.Страна;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.КодСтраны) Тогда
		АдресСтруктура.КодСтраны = АдресСостав.КодСтраны;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Представление) Тогда
		АдресСтруктура.Представление = АдресСостав.Представление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.МуниципальноеПредставление) Тогда
		АдресСтруктура.МуниципальноеПредставление = АдресСостав.МуниципальноеПредставление;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Индекс) Тогда
		АдресСтруктура.Индекс = АдресСостав.Индекс;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.КодРегиона) Тогда
		АдресСтруктура.КодРегиона = АдресСостав.КодРегиона;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Регион) Тогда
		АдресСтруктура.Регион = АдресСостав.Регион;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.РегионСокращение) Тогда
		АдресСтруктура.РегионСокращение = АдресСостав.РегионСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Район) Тогда
		АдресСтруктура.Район = АдресСостав.Район;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.РайонСокращение) Тогда
		АдресСтруктура.РайонСокращение = АдресСостав.РайонСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.МуниципальныйРайон) Тогда
		АдресСтруктура.МуниципальныйРайон = АдресСостав.МуниципальныйРайон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.МуниципальныйРайонСокращение) Тогда
		АдресСтруктура.МуниципальныйРайонСокращение = АдресСостав.МуниципальныйРайонСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Город) Тогда
		АдресСтруктура.Город = АдресСостав.Город;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ГородСокращение) Тогда
		АдресСтруктура.ГородСокращение = АдресСостав.ГородСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Поселение) Тогда
		АдресСтруктура.Поселение = АдресСостав.Поселение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ПоселениеСокращение) Тогда
		АдресСтруктура.ПоселениеСокращение = АдресСостав.ПоселениеСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ВнутригородскойРайон) Тогда
		АдресСтруктура.ВнутригородскойРайон = АдресСостав.ВнутригородскойРайон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ВнутригородскойРайонСокращение) Тогда
		АдресСтруктура.ВнутригородскойРайонСокращение = АдресСостав.ВнутригородскойРайонСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.НаселенныйПункт) Тогда
		АдресСтруктура.НаселенныйПункт = АдресСостав.НаселенныйПункт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.НаселенныйПунктСокращение) Тогда
		АдресСтруктура.НаселенныйПунктСокращение = АдресСостав.НаселенныйПунктСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Территория) Тогда
		АдресСтруктура.Территория = АдресСостав.Территория;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ТерриторияСокращение) Тогда
		АдресСтруктура.ТерриторияСокращение = АдресСостав.ТерриторияСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Улица) Тогда
		АдресСтруктура.Улица = АдресСостав.Улица;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.УлицаСокращение) Тогда
		АдресСтруктура.УлицаСокращение = АдресСостав.УлицаСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Здание) Тогда
		АдресСтруктура.Здание.Номер = АдресСостав.Здание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ЗданиеСокращение) Тогда
		АдресСтруктура.Здание.ТипЗдания = АдресСостав.ЗданиеСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.Участок) И АдресСтруктура.Свойство("НомерЗемельногоУчастка") Тогда
		АдресСтруктура.НомерЗемельногоУчастка = АдресСостав.Участок;
	КонецЕсли;
	
	Если ТипЗнч(АдресСостав.Корпуса) = Тип("ОбъектXDTO") И ТипЗнч(АдресСостав.Корпуса.Корпус) = Тип("СписокXDTO") Тогда
		Для Каждого ТекущийКорпус Из АдресСостав.Корпуса.Корпус Цикл
			АдресСтруктура.Корпуса.Добавить(Новый Структура("ТипКорпуса, Тип, Номер", ТекущийКорпус.Тип, ТекущийКорпус.Тип, ТекущийКорпус.Номер));
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(АдресСостав.Помещения) = Тип("ОбъектXDTO") И ТипЗнч(АдресСостав.Помещения.Помещение) = Тип("СписокXDTO") Тогда
		Для Каждого ТекущееПомещение Из АдресСостав.Помещения.Помещение Цикл
			АдресСтруктура.Помещения.Добавить(Новый Структура("ТипПомещения, Тип, Номер", ТекущееПомещение.Тип, ТекущееПомещение.Тип, ТекущееПомещение.Номер));
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ИдентификаторАдресногоОбъекта) Тогда
		АдресСтруктура.ИдентификаторАдресногоОбъекта = Новый УникальныйИдентификатор(АдресСостав.ИдентификаторАдресногоОбъекта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ЗданиеИдентификатор) Тогда
		АдресСтруктура.ИдентификаторДома = Новый УникальныйИдентификатор(АдресСостав.ЗданиеИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.УчастокИдентификатор) И АдресСтруктура.Свойство("ИдентификаторЗемельногоУчастка") Тогда
		АдресСтруктура.ИдентификаторЗемельногоУчастка = Новый УникальныйИдентификатор(АдресСостав.УчастокИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.РегионИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.РегионИдентификатор = Новый УникальныйИдентификатор(АдресСостав.РегионИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.РайонИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.РайонИдентификатор = Новый УникальныйИдентификатор(АдресСостав.РайонИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.МуниципальныйРайонИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.МуниципальныйРайонИдентификатор = Новый УникальныйИдентификатор(АдресСостав.МуниципальныйРайонИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ГородИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.ГородИдентификатор = Новый УникальныйИдентификатор(АдресСостав.ГородИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ПоселениеИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.ПоселениеИдентификатор = Новый УникальныйИдентификатор(АдресСостав.ПоселениеИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ВнутригородскойРайонИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.ВнутригородскойРайонИдентификатор = Новый УникальныйИдентификатор(АдресСостав.ВнутригородскойРайонИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.НаселенныйПунктИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.НаселенныйПунктИдентификатор = Новый УникальныйИдентификатор(АдресСостав.НаселенныйПунктИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ТерриторияИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.ТерриторияИдентификатор = Новый УникальныйИдентификатор(АдресСостав.ТерриторияИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.УлицаИдентификатор) Тогда
		АдресСтруктура.Идентификаторы.УлицаИдентификатор = Новый УникальныйИдентификатор(АдресСостав.УлицаИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ОКТМО) Тогда
		АдресСтруктура.ДополнительныеКоды.ОКТМО = АдресСостав.ОКТМО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.ОКАТО) Тогда
		АдресСтруктура.ДополнительныеКоды.ОКАТО = АдресСостав.ОКАТО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.КодИФНСФЛ) Тогда
		АдресСтруктура.ДополнительныеКоды.КодИФНСФЛ = АдресСостав.КодИФНСФЛ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.КодИФНСЮЛ) Тогда
		АдресСтруктура.ДополнительныеКоды.КодИФНСЮЛ = АдресСостав.КодИФНСЮЛ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.КодУчасткаИФНСФЛ) Тогда
		АдресСтруктура.ДополнительныеКоды.КодУчасткаИФНСФЛ = АдресСостав.КодУчасткаИФНСФЛ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСостав.КодУчасткаИФНСЮЛ) Тогда
		АдресСтруктура.ДополнительныеКоды.КодУчасткаИФНСЮЛ = АдресСостав.КодУчасткаИФНСЮЛ;
	КонецЕсли;
	
	Результат = НоваяКонтактнаяИнформация();
	Результат.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
		АдресСтруктура,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Если АдресСтруктура.ТипАдреса = "Административно-территориальный" Тогда
		Результат.Представление = АдресСтруктура.Представление;
	Иначе
		Результат.Представление = АдресСтруктура.МуниципальноеПредставление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СериализацияОбъектаXDTO(ОбъектXDTO)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	Если ОбъектXDTO <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	КонецЕсли;
	
	Возврат СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

Процедура ЗаполнитьОбъектXDTOКонтактнойИнформации(
	Фабрика,
	Объект,
	ИсходныйОбъект,
	ПутьРодительскогоСвойства = "<Корень>",
	ОтключитьПреобразование = Ложь)
	
	Для каждого СвойствоИсходногоОбъекта Из ИсходныйОбъект.Свойства() Цикл
		
		ПутьТекущегоСвойства = ПутьРодительскогоСвойства + "." + СвойствоИсходногоОбъекта.Имя;
		
		СвойствоОбъекта = Объект.Свойства().Получить(СвойствоИсходногоОбъекта.Имя);
		Если СвойствоОбъекта <> Неопределено Тогда
			
			ЗначениеСвойства = ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя];
			Если ЗначениеСвойства = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				
				ОтключитьПреобразованиеВложенныхЗначений =
					(ПутьТекущегоСвойства = "<Корень>.ДопАдрЭл[].Номер"
						И (ЗначениеСвойства.Тип = "1080"
						Или ЗначениеСвойства.Тип = "1090"
						Или ЗначениеСвойства.Тип = "Другое"));
				
				Объект[СвойствоОбъекта.Имя] = Фабрика.Создать(СвойствоОбъекта.Тип);
				ЗаполнитьОбъектXDTOКонтактнойИнформации(
					Фабрика,
					Объект[СвойствоОбъекта.Имя],
					ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя],
					ПутьТекущегоСвойства,
					ОтключитьПреобразованиеВложенныхЗначений);
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
				
				Для Каждого ИсходныйЭлемент Из ЗначениеСвойства Цикл
					
					Элемент = Фабрика.Создать(СвойствоОбъекта.Тип);
					ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Элемент, ИсходныйЭлемент, ПутьТекущегоСвойства + "[]", Ложь);
					Объект[СвойствоОбъекта.Имя].Добавить(Элемент);
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
				
				Если ОтключитьПреобразование Тогда
					Объект[СвойствоОбъекта.Имя] = ЗначениеСвойства;
				Иначе
					МассивСлов      = СтрРазделить(ЗначениеСвойства, " ", Ложь);
					МаксИндексСлова = ?(МассивСлов.Количество() = 1, 0, МассивСлов.Количество() - 2);
					Для ИндексСлова = 0 По МаксИндексСлова Цикл
						Если ЭтоЗаписьЧисловогоЭлементаАдреса(МассивСлов[ИндексСлова]) Тогда
							МассивСлов[ИндексСлова] = ВРег(МассивСлов[ИндексСлова]);
						Иначе
							МассивЧастейСлова = СтрРазделить(МассивСлов[ИндексСлова], ".", Истина);
							Для ИндексЧастиСлова = 0 По МассивЧастейСлова.Количество() - 1 Цикл
								МассивЧастейСлова[ИндексЧастиСлова] = ТРег(МассивЧастейСлова[ИндексЧастиСлова]);
							КонецЦикла;
							МассивСлов[ИндексСлова] = СтрСоединить(МассивЧастейСлова, ".");
						КонецЕсли;
					КонецЦикла;
					Объект[СвойствоОбъекта.Имя] = СтрСоединить(МассивСлов, " ");
				КонецЕсли;
				
			Иначе
				
				Объект[СвойствоОбъекта.Имя] = ЗначениеСвойства;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоЗаписьЧисловогоЭлементаАдреса(Знач ПроверяемаяСтрока)

	ЧастиРимскихЧисел = "IVXLCDM-(),0123456789";
	ДлинаСтроки = СтрДлина(ПроверяемаяСтрока);
	ПроверяемаяСтрока = ВРег(ПроверяемаяСтрока);
	
	Для НомерЗнака = 1 По ДлинаСтроки Цикл
		Если СтрНайти(ЧастиРимскихЧисел, Сред(ПроверяемаяСтрока, НомерЗнака, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция ПространствоИмен()
	Возврат "http://www.v8.1c.ru/ssl/contactinfo_ru";
КонецФункции

Функция ПространствоИменКИ()
	Возврат Метаданные.ПакетыXDTO.КонтактнаяИнформация.ПространствоИмен;
КонецФункции

Функция ПараметрыСервисаЮридическиеЛица()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/corporation/v1?wsdl");
	Результат.Вставить("Имя"                , "CorpWsImplService");
	Результат.Вставить("URIПространстваИмен", "http://ws.corporation.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "CorpWsImplPort");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНаименованияЮридическогоЛицаXDTO(ОбъектXDTO, Реквизиты)
	
	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Общество с ограниченной ответственностью");
	ПравовыеФормы.Добавить("Закрытое акционерное общество");
	ПравовыеФормы.Добавить("Открытое акционерное общество");
	ПравовыеФормы.Добавить("Публичное акционерное общество");
	ПравовыеФормы.Добавить("Акционерное общество");
	Если ОбъектXDTO.СвНаимЮЛ.ОПФ <> Неопределено Тогда
		ПравоваяФормаОбъекта = Строка(ОбъектXDTO.СвНаимЮЛ.ОПФ.ПолнНаимОПФ);
		Реквизиты.ПравоваяФорма = ПравоваяФормаОбъекта;
		Если ПравовыеФормы.Найти(ПравоваяФормаОбъекта) = Неопределено Тогда
			ПравовыеФормы.Добавить(ПравоваяФормаОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.НаименованиеПолное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛПолн;
	Для каждого ПравоваяФорма Из ПравовыеФормы Цикл
		Если ВРег(ПравоваяФорма) = ВРег(Лев(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма))) Тогда
			Реквизиты.НаименованиеПолное = ПравоваяФорма + Сред(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма) + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты.НаименованиеСокращенное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛСокр;
	Если НЕ ЗначениеЗаполнено(Реквизиты.НаименованиеСокращенное) 
		ИЛИ НЕ ЗначениеЗаполнено(СтрЗаменить(Реквизиты.НаименованиеСокращенное, "-", "")) 
		ИЛИ ВРег(Реквизиты.НаименованиеСокращенное) = "НЕТ" Тогда
		Реквизиты.НаименованиеСокращенное = Реквизиты.НаименованиеПолное;
	КонецЕсли;
	
	Реквизиты.Наименование = Реквизиты.НаименованиеСокращенное;
	Поз = СтрНайти(Реквизиты.Наименование, """");
	Если Поз > 0 И Поз <= 10 Тогда
		Реквизиты.Наименование = СокрП(Сред(Реквизиты.Наименование, Поз)) + " " + СокрП(Лев(Реквизиты.Наименование, Поз-1));
		Реквизиты.Наименование = СтрЗаменить(Реквизиты.Наименование, """", "");
	Иначе
		Поз = СтрНайти(Реквизиты.Наименование, "«");
		Если Поз > 0 И Поз <= 10 Тогда
			Реквизиты.Наименование = СокрП(Сред(Реквизиты.Наименование, Поз)) + " " + СокрП(Лев(Реквизиты.Наименование, Поз-1));
			Реквизиты.Наименование = СтрЗаменить(Реквизиты.Наименование, "«", "");
			Реквизиты.Наименование = СтрЗаменить(Реквизиты.Наименование, "»", "");
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.Наименование = СокрЛП(Реквизиты.Наименование);
	
КонецПроцедуры

Процедура ЗаполнитьКодОКВЭДXDTO(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвОКВЭД <> Неопределено Тогда
		
		СписокОКВЭД = ОбъектXDTO.СвОКВЭД;
		КодОКВЭД  = "";
		ДатаОКВЭД = '00010101';
		ЭтоОКВЭД2 = Ложь;
		Для Каждого ЭлементОКВЭД Из СписокОКВЭД Цикл
			Если ЭлементОКВЭД.ДатаНачДейств > ДатаОКВЭД
				И ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				ДатаОКВЭД = ЭлементОКВЭД.ДатаНачДейств;
				КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
				ЭтоОКВЭД2 = ЭлементОКВЭД.Свойства().Получить("ПрВерсОКВЭД") <> Неопределено
					И ЭлементОКВЭД.ПрВерсОКВЭД = "2014";
			КонецЕсли;
		КонецЦикла;
		Реквизиты.КодОКВЭД  = КодОКВЭД;
		Реквизиты.ЭтоОКВЭД2 = ЭтоОКВЭД2;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОрганеXDTO(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвУчетНО <> Неопределено
		И ОбъектXDTO.СвУчетНО.СвНО <> Неопределено Тогда
		
		Реквизиты.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
		
		Реквизиты.РегистрацияВНалоговомОргане.Код             = ОбъектXDTO.СвУчетНО.СвНО.КодНО;
		Реквизиты.РегистрацияВНалоговомОргане.Наименование    = ОбъектXDTO.СвУчетНО.СвНО.НаимНО;
		Реквизиты.РегистрацияВНалоговомОргане.ДатаРегистрации = ОбъектXDTO.СвУчетНО.ДатаПостУч;
		
		Если ОбъектXDTO.Свойства().Получить("СвАдрес") <> Неопределено // Адрес есть только у юридических лиц.
			И ОбъектXDTO.СвАдрес <> Неопределено 
			И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
			
			Адрес = ОбъектXDTO.СвАдрес.Адрес;
			Реквизиты.РегистрацияВНалоговомОргане.ОКТМО = Адрес.Состав.ОКТМО;
			Реквизиты.РегистрацияВНалоговомОргане.ОКАТО = Адрес.Состав.ОКАТО;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПенсионногоФондаXDTO(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегПФ <> Неопределено Тогда
		
		РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
		
		РегистрационныйНомерПФР = ОбъектXDTO.СвРегПФ.РегНомПФ;
		РегистрационныйНомерПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
			Лев(РегистрационныйНомерПФР, 3), Сред(РегистрационныйНомерПФР,4, 3), Прав(РегистрационныйНомерПФР, 6));
		РегистрацияВПФР.РегистрационныйНомерПФР = РегистрационныйНомерПФР;
		Если ОбъектXDTO.СвРегПФ.СвОргПФ <> Неопределено Тогда
			КодОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.КодПФ;
			КодОрганаПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2'"), 
				Лев(КодОрганаПФР, 3), Прав(КодОрганаПФР, 3));
			РегистрацияВПФР.КодОрганаПФР          = КодОрганаПФР;
			РегистрацияВПФР.НаименованиеОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.НаимПФ;
		КонецЕсли;
		РегистрацияВПФР.ДатаРегистрации = ОбъектXDTO.СвРегПФ.ДатаРег;
		
		Реквизиты.РегистрацияВПенсионномФонде = РегистрацияВПФР;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФондаСоциальногоСтрахованияXDTO(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегФСС <> Неопределено Тогда
		
		РегистрацияВФСС = НоваяРегистрацияВФСС();
		
		Если СтрДлина(ОбъектXDTO.СвРегФСС.РегНомФСС) <= 10 Тогда
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(ОбъектXDTO.СвРегФСС.РегНомФСС);
			РегистрацияВФСС.КодПодчиненности        = "";
		Иначе
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(Лев(ОбъектXDTO.СвРегФСС.РегНомФСС, 10));
			РегистрацияВФСС.КодПодчиненности        = СокрЛП(Сред(ОбъектXDTO.СвРегФСС.РегНомФСС, 11));
			Если СтрДлина(РегистрацияВФСС.КодПодчиненности) <> 5 Тогда
				РегистрацияВФСС.КодПодчиненности = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектXDTO.СвРегФСС.СвОргФСС <> Неопределено Тогда
			РегистрацияВФСС.КодОрганаФСС            = ОбъектXDTO.СвРегФСС.СвОргФСС.КодФСС;
			РегистрацияВФСС.НаименованиеОрганаФСС   = ОбъектXDTO.СвРегФСС.СвОргФСС.НаимФСС;
		КонецЕсли;
		РегистрацияВФСС.ДатаРегистрации = ОбъектXDTO.СвРегФСС.ДатаРег;
		
		Реквизиты.РегистрацияВФСС = РегистрацияВФСС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЮридическийАдресXDTO(ОбъектXDTO, Реквизиты, Фабрика, АдресныеСокращения)
	
	Если ОбъектXDTO.СвАдрес <> Неопределено 
		И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
		
		Реквизиты.ЮридическийАдрес = АдресКИ(ОбъектXDTO.СвАдрес.Адрес, Фабрика, АдресныеСокращения);
		Реквизиты.ЮридическийАдрес.Вставить("Корректный", ОбъектXDTO.СвАдрес.validAddress);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОСтатусеСтруктураXDTO(ОбъектXDTO, Данные)
	
	Если ОбъектXDTO.СвСтатус_РО <> Неопределено 
		И ОбъектXDTO.СвСтатус_РО.СвСтатус <> Неопределено Тогда
		СтатусСтруктура = НовыйДанныеСтатуса();
		СтатусСтруктура.Код = ОбъектXDTO.СвСтатус_РО.СвСтатус.КодСтатус;
		СтатусСтруктура.Наименование = ОбъектXDTO.СвСтатус_РО.СвСтатус.НаимСтатус;
		Данные.Статус = СтатусСтруктура;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОРегистрирующемОрганеXDTO(ОбъектXDTO, Данные)
	
	Если ОбъектXDTO.СвСтатус_РО <> Неопределено
		И ОбъектXDTO.СвСтатус_РО.СвРегОрг <> Неопределено Тогда
		Данные.РегистрирующийОрган = НовыйДанныеРегистрирующегоОргана();
		Данные.РегистрирующийОрган.Код = ОбъектXDTO.СвСтатус_РО.СвРегОрг.КодНО;
		Данные.РегистрирующийОрган.Наименование = ОбъектXDTO.СвСтатус_РО.СвРегОрг.НаимНО;
	КонецЕсли;

КонецПроцедуры

Функция АдресКИ(АдресXDTO, Фабрика, АдресныеСокращения)
	
	Если АдресXDTO.Состав.Тип() = Фабрика.Тип("http://company1c.com/orgregister/base", "АдресРФ") Тогда
		Возврат АдресРФВерсия1(АдресXDTO, Фабрика, АдресныеСокращения);
	Иначе
		Возврат АдресРФВерсия2(АдресXDTO);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ГосударственныеОрганы

Функция ПараметрыСервисаГосударственныеОрганы()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/taxregister/v3?wsdl");
	Результат.Вставить("Имя"                , "TaxWsImpl3Service");
	Результат.Вставить("URIПространстваИмен", "http://ws.taxregister.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "TaxWsImpl3Port");
	
	Возврат Результат;
	
КонецФункции

Функция КодГосударственногоОрганаДляЗапросаРеквизитов(ВидГосударственногоОргана, КодГосударственногоОргана)
	
	Если ВидГосударственногоОргана = "НалоговыйОрган" Тогда
		Возврат Лев(СокрЛП(КодГосударственногоОргана), 4);
	ИначеЕсли ВидГосударственногоОргана = "ОрганПФР" Тогда
		Возврат Лев(СокрЛП(КодГосударственногоОргана), 3);
	ИначеЕсли ВидГосударственногоОргана = "ОрганФСС" Тогда
		Возврат Лев(СокрЛП(КодГосударственногоОргана), 4);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение параметра ""ВидГосударственногоОргана"" (%1).'"),
			ВидГосударственногоОргана);
	КонецЕсли;
	
КонецФункции

Функция НовыеРеквизитыГосударственногоОргана()

	РеквизитыГосударственногоОргана = Новый Структура;
	
	// Заполняется на основе данных ФИАС.
	
	РеквизитыГосударственногоОргана.Вставить("Код");
	РеквизитыГосударственногоОргана.Вставить("ИНН");
	РеквизитыГосударственногоОргана.Вставить("КПП");
	РеквизитыГосударственногоОргана.Вставить("Наименование");
	РеквизитыГосударственногоОргана.Вставить("ПолноеНаименование");
	РеквизитыГосударственногоОргана.Вставить("Адрес");
	РеквизитыГосударственногоОргана.Вставить("Телефон");
	РеквизитыГосударственногоОргана.Вставить("ЭлектроннаяПочта");
	РеквизитыГосударственногоОргана.Вставить("ИнтернетСайт");
	РеквизитыГосударственногоОргана.Вставить("ПлатежныеРеквизиты");
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганИП");
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганЮЛ");
	
	РеквизитыГосударственногоОргана.ПлатежныеРеквизиты = НовыеПлатежныеРеквизиты();
	РеквизитыГосударственногоОргана.РегистрирующийОрганИП = НовыеРегистрирующийОрган();
	РеквизитыГосударственногоОргана.РегистрирующийОрганЮЛ = НовыеРегистрирующийОрган();
	
	РеквизитыГосударственногоОргана.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыГосударственногоОргана;

КонецФункции

Функция НовыеПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура;
	
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа");
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет");
	ПлатежныеРеквизиты.Вставить("КоррСчет");
	ПлатежныеРеквизиты.Вставить("БИК");
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

Функция НовыеРегистрирующийОрган()
	
	РегистрирующийОрган = Новый Структура;
	
	РегистрирующийОрган.Вставить("Код");
	РегистрирующийОрган.Вставить("Наименование");
	РегистрирующийОрган.Вставить("Адрес");
	РегистрирующийОрган.Вставить("Телефон");
	РегистрирующийОрган.Вставить("Информация");
	
	Возврат РегистрирующийОрган;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеМетодыДляВыполненияВФоне

Процедура СведенияОЮридическомЛицеПоИННВФоне(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(
		СведенияОЮридическомЛицеПоИНН(Параметры.ИНН),
		АдресРезультата);
	
КонецПроцедуры

Процедура РеквизитыПредпринимателяПоИННВФоне(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(
		РеквизитыПредпринимателяПоИНН(Параметры.ИНН),
		АдресРезультата);
	
КонецПроцедуры

Процедура ЮридическиеЛицаПоНаименованиюВФоне(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(
		ЮридическиеЛицаПоНаименованию(Параметры.Наименование, Параметры.КодРегиона, Параметры.Адрес),
		АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
