
#Область ПрограммныйИнтерфейс

// Устанавливает видимость команды отправки по электронной почте на форме.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить видимость команды.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	ДоступнаОтправкаПисем = ПравоДоступа("Вывод", Метаданные)
		И РаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем()
		И ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ОтправитьПоЭлектроннойПочте);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ОтправитьПоЭлектроннойПочте") Тогда
		Форма.Элементы.ОтправитьПоЭлектроннойПочте.Видимость = ДоступнаОтправкаПисем;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ОтправитьПоЭлектроннойПочтеВсеДействия") Тогда
		Форма.Элементы.ОтправитьПоЭлектроннойПочтеВсеДействия.Видимость = ДоступнаОтправкаПисем;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает адреса электронной почты из контактной информации одного или нескольких контрагентов и контактных лиц.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, Массив - ссылка на контрагента или массив ссылок.
//
// Возвращаемое значение:
//  Массив - содержит структуры с адресом электронной почты и владельцем контактной информации.
//           Состав ключей структуры см. НовыеПараметрыПолучателя().
//
Функция АдресаЭлектроннойПочты(Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Получатели = ОтправкаПочтовыхСообщенийПереопределяемый.АдресаЭлектроннойПочты(Контрагент);
	
	Если НЕ ЗначениеЗаполнено(Получатели) ИЛИ НЕ ТипЗнч(Получатели) = Тип("Массив") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Получатели;
	
КонецФункции

// Формирует таблицу с описанием команд отправки по электронной почте и помещает ее во временное хранилище.
//
// Параметры:
//   ИмяФормыДокумента       - Строка - Имя формы с подключенной общей командой ОтправитьПоЭлектроннойПочте.
//   ИмяМенеджераОтправки    - Строка - Полное имя метаданных отправляемого документа.
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой
//                                                       надо поместить данные.
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция АдресКомандОтправки(ИмяФормыДокумента, ИмяМенеджераОтправки, УникальныйИдентификатор) Экспорт
	
	КомандыОтправки = ОтправкаПочтовыхСообщений.КомандыОтправкиФормы(ИмяФормыДокумента, ИмяМенеджераОтправки);
	
	НайденныеКоманды = КомандыОтправки.НайтиСтроки(Новый Структура("СкрытаФункциональнымиОпциями", Ложь));
	
	Если НайденныеКоманды.Количество() > 0 Тогда
		ДобавитьКомандыОтправки(НайденныеКоманды);
	КонецЕсли;
	
	АдресКомандОтправки = ПоместитьВоВременноеХранилище(КомандыОтправки, УникальныйИдентификатор);
	
	Возврат АдресКомандОтправки;
	
КонецФункции

// Формирует структуру параметров электронного письма для отправки отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см.ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет.
//  ДополнительныеПараметры - Структура - см.ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет.
//
// Возвращаемое значение:
//  Структура - Структура параметров для передачи в функцию РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Функция ПараметрыЭлектронногоПисьмаДляОтчетов(ПараметрыОтчета, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПисьма = НовыеПараметрыПисьма();
	
	Если Не ЕстьПравоВывода() Тогда
		Возврат ПараметрыПисьма;
	КонецЕсли;
	
	Вложения = ПоместитьТабличныйДокументОтчетаВоВременноеХранилище(ПараметрыОтчета, ДополнительныеПараметры);
	
	Получатель = "";
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Если ДополнительныеПараметры.Свойство("ДопВложения") Тогда
			ДополнитьВложения(Вложения, ДополнительныеПараметры.ДопВложения);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("Контрагент") Тогда
			Получатель = АдресаЭлектроннойПочты(ДополнительныеПараметры.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПисьма = ОписьВложенийПисьма(Вложения);
	
	ПараметрыПисьма.Получатель = Получатель;
	ПараметрыПисьма.Тема       = ПараметрыОтчета.Заголовок;
	ПараметрыПисьма.Текст      = ТекстПисьма;
	ПараметрыПисьма.Вложения   = Вложения;
	
	ДополнитьПараметрыПисьма(ПараметрыПисьма);
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПисьма, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Формирует структуру параметров электронного письма для отправки документа.
//
// Параметры:
//  НаборПечатныхФорм - Массив - содержит структуры с табличными документами и объектами печати.
//   см.ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику и УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати.
//  МенеджерПечати - Строка - имя менеджера печати.
//  ДополнительныеПараметры - Структура - дополнительные параметры для сохранения печатных форм:
//   * УпаковатьВАрхив - Булево - упаковать печатные формы в архив.
//   * ФорматыСохранения - Массив - содержит формат сохранения файлов см. ТипФайлаТабличногоДокумента.
//
// Возвращаемое значение:
//  Структура - Структура параметров для передачи в функцию РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Функция ПараметрыЭлектронногоПисьма(НаборПечатныхФорм, МенеджерПечати, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПисьма = НовыеПараметрыПисьма();
	
	Если Не ЕстьПравоВывода() Тогда
		Возврат ПараметрыПисьма;
	КонецЕсли;
	
	ПечатныеФормыПоОбъектам = Новый ТаблицаЗначений;
	ПечатныеФормыПоОбъектам.Колонки.Добавить("Объект");
	ПечатныеФормыПоОбъектам.Колонки.Добавить("ПечатныеФормы");
	ПечатныеФормыПоОбъектам.Индексы.Добавить("Объект");
	
	Вложения = ПоместитьТабличныеДокументыВоВременноеХранилище(НаборПечатныхФорм, ПечатныеФормыПоОбъектам, ДополнительныеПараметры);
	
	Если Вложения.Количество() > 0 Тогда
		
		ПараметрыПисьма.Вложения = Вложения;
		
		ОбъектыПечати = Новый Массив;
		ФормироватьЭД = Новый Соответствие;
		Для Каждого ПечатныеФормы Из НаборПечатныхФорм Цикл
			ОбъектыПечатиПоПечатнойФорме = ПечатныеФормы.ОбъектыПечати.ВыгрузитьЗначения();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПечати, ОбъектыПечатиПоПечатнойФорме);
			ПолноеИмяОбъекта = ОбъектыПечатиПоПечатнойФорме[0].Метаданные().ПолноеИмя();
			Если ПечатныеФормы.ПараметрыВывода.Свойство("ФормироватьЭД") И ПечатныеФормы.ПараметрыВывода.ФормироватьЭД Тогда
				ФормироватьЭД.Вставить(ПолноеИмяОбъекта, Истина);
			ИначеЕсли ФормироватьЭД.Получить(ПолноеИмяОбъекта) = Неопределено Тогда
				ФормироватьЭД.Вставить(ПолноеИмяОбъекта, Ложь);
			КонецЕсли;
		КонецЦикла;
		
		ОбъектыПечати = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыПечати);
		
		КоличествоЭД = ПрисоединитьЭлектронныеДокументы(ОбъектыПечати, Вложения, ФормироватьЭД);
		
		ЗаполнитьТемуПолучателяПисьма(ОбъектыПечати,
			ПечатныеФормыПоОбъектам,
			ПараметрыПисьма,
			КоличествоЭД);
		
	КонецЕсли;
	
	ОтправкаПочтовыхСообщенийПереопределяемый.ПараметрыЭлектронногоПисьма(ПараметрыПисьма, НаборПечатныхФорм, МенеджерПечати, ДополнительныеПараметры);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Заполняет параметры письма для отправки по электронной почте чека НПД.
//
// Параметры:
//  АдресЭлектроннойПочты	 - Строка - Адрес электронной почты, на которое отправляется письмо с чеком.
//  ТекстПисьма				 - ФорматированныйДокумент - тело письма.
//  ТемаПисьма				 - Строка - Тема письма.
//  ВложенияПисьма			 - Массив - Массив структур, которые содержат описание присоединенных файлов.
// 
// Возвращаемое значение:
//   - Структура - Параметры, которые можно передать в РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение для отправки письма.
//
Функция ПараметрыПисьмаЧекаНПД(АдресЭлектроннойПочты, ТекстПисьма, ТемаПисьма, ВложенияПисьма) Экспорт
	
	ПараметрыПисьма = Новый Структура();
	
	Если Не ЕстьПравоВывода() Тогда
		Возврат ПараметрыПисьма;
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Кому", АдресЭлектроннойПочты);
	
	ПараметрыСкрытыхКопий = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ПараметрыОтправкиСкрытыхКопий");
	Если ПараметрыСкрытыхКопий.ОтправлятьСкрытыеКопии Тогда
		ПараметрыПисьма.Вставить("СкрытыеКопии", ПараметрыСкрытыхКопий.АдресПолучателяСкрытойКопии);
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	ПараметрыПисьма.Вставить("Вложения", ВложенияПисьма);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Заполняет тему, текст и получателя электронного письма.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты.
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица содержащая сформированные печатные формы.
//  ПараметрыПисьма - Структура - параметры письма см. РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//  КоличествоЭД - Число - Количество пакетов с электронными документами.
//
Процедура ЗаполнитьТемуПолучателяПисьма(МассивОбъектов, КоллекцияПечатныхФорм, ПараметрыПисьма, КоличествоЭД = 0, ПараметрыВывода = Неопределено) Экспорт
	
	ЗаполнитьТемуПолучателяПисьма = Ложь;
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") И МассивОбъектов.Количество() > 0 Тогда
		ЗаполнитьТемуПолучателяПисьма = Истина;
	КонецЕсли;
	
	Если ПараметрыВывода = Неопределено Тогда
		ПараметрыВывода = Новый Структура;
	КонецЕсли; 
	
	Если ЗаполнитьТемуПолучателяПисьма Тогда
		
		Если ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Организации") Тогда
			ПараметрыПисьма.Вставить("ВыбиратьПолучателей", Истина);
			ЗаполнитьТемуТелоПисьмаСКарточкойОрганизации(МассивОбъектов, ПараметрыПисьма, КоллекцияПечатныхФорм);
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(МассивОбъектов[0])) Тогда
			ЗаполнитьТемуТелоПисьмаСДокументом(МассивОбъектов, ПараметрыПисьма, ПараметрыВывода, КоллекцияПечатныхФорм, КоличествоЭД);
		Иначе
			ЗаполнитьТемуТелоПисьма(МассивОбъектов, ПараметрыПисьма, КоллекцияПечатныхФорм);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнитьПараметрыПисьма(ПараметрыПисьма);
	
КонецПроцедуры

// Устанавливает соединение с сервером электронной почты.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для соединения.
//  ДляПолучения - Булево - Если Истина, то соединение может быть использовано для загрузки почтовых сообщений.
//  Протокол - ПротоколИнтернетПочты - Протокол используемый для загрузки почтовых сообщений. По умолчанию - POP3.
//
// Возвращаемое значение:
//  ИнтернетПочта - если с сервером удалось установить соединение.
//  Неопределено - если при установки соединения возникло исключение.
//
Функция УстановитьСоединениеССервером(УчетнаяЗапись, ДляПолучения = Ложь, Протокол = Неопределено) Экспорт
	
	Соединение = Новый ИнтернетПочта;
	ИнтернетПочтовыйПрофиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения);
	
	Если Протокол = Неопределено Тогда
		Протокол = ПротоколИнтернетПочты.POP3;
	КонецЕсли;
	
	Попытка
		Соединение.Подключиться(ИнтернетПочтовыйПрофиль, Протокол);
		Возврат Соединение;
		
	Исключение
		КодОсновногоЯзыка  = ОбщегоНазначения.КодОсновногоЯзыка();
		ИмяСобытия = НСтр("ru = 'Установка соединения с сервером электронной почты'", КодОсновногоЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
		
	КонецПопытки;
КонецФункции

// Подготавливает опись переданных файлов в формате HTML.
//
// Параметры:
//  Вложения - СписокЗначений, Структура, Соответствие - коллекция файлов. Для списка значений как наименование файла
//              в описи используется Представление. Для структуры или соответствия Ключ.
//
// Возвращаемое значение:
//  Строка - описание переданных файлов в формате HTML.
//
Функция ОписьВложенийПисьма(Вложения) Экспорт
	
	ТекстПисьма = НСтр("ru = 'К письму приложены файлы:'");
	
	Если ТипЗнч(Вложения) = Тип("СписокЗначений") Тогда
		Для Каждого Вложение Из Вложения Цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС + СтрШаблон(НСтр("ru='- %1'"), Вложение.Представление);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Вложения) = Тип("Структура") ИЛИ ТипЗнч(Вложения) = Тип("Соответствие") Тогда
		Для Каждого Вложение Из Вложения Цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС + СтрШаблон(НСтр("ru='- %1'"), Вложение.Ключ);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Вложения) = Тип("Массив") Тогда
		Для Каждого Вложение Из Вложения Цикл
			Если ТипЗнч(Вложение) = Тип("Структура") И Вложение.Свойство("Представление") Тогда
				ТекстПисьма = ТекстПисьма + Символы.ПС + СтрШаблон(НСтр("ru='- %1'"), Вложение.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПодготовитьТекстПисьма(ТекстПисьма);
	
КонецФункции

// Определяет наиболее подходящее наименование для переданной ссылки контрагента
// в зависимости от типа справочника.
//
// Параметры:
//  Ссылка - СправочникСсылка.Контрагенты, СправочникСсылка.Организации, СправочникСсылка.ФизическиеЛица.
//
// Возвращаемое значение:
//  Строка - Наименование.
//
Функция НаименованиеКонтрагента(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ИменаРеквизитовОбъекта = Новый Соответствие;
	
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Контрагенты")   , "НаименованиеПолное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Организации")   , "НаименованиеСокращенное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.ФизическиеЛица"), "Наименование");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИменаРеквизитовОбъекта[ТипЗнч(Ссылка)]);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеОтправкиПисьма(ПараметрыПисьма) Экспорт
	
	Если ТипЗнч(ПараметрыПисьма) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыПисьма.Свойство("ПолучателиСообщения") ИЛИ НЕ ПараметрыПисьма.Свойство("Кому") Тогда
		Возврат;
	КонецЕсли;
	
	ПолучателиСообщения = ПараметрыПисьма.ПолучателиСообщения;
	
	Если ТипЗнч(ПолучателиСообщения) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучателиСообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = ПолучателиСообщения[0].ИсточникКонтактнойИнформации;
	Адреса = Новый Массив;
	
	Для Каждого ПолучательОтправленногоПисьма Из ПараметрыПисьма.Кому Цикл
		ТребуетсяСохранитьАдрес = Истина;
		Для Каждого Контакт Из ПолучателиСообщения Цикл
			Если ПолучательОтправленногоПисьма.Адрес = Контакт.Адрес Тогда
				ТребуетсяСохранитьАдрес = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяСохранитьАдрес Тогда
			Адреса.Добавить(ПолучательОтправленногоПисьма.Адрес);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Адреса.Количество() > 0 Тогда
		СохранитьАдресаЭлектроннойПочты(Контрагент, Адреса);
	КонецЕсли;
	
КонецПроцедуры

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ТребуетсяВходНаСерверПередОтправкой КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP";
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				УстановитьПривилегированныйРежим(Истина);
				Результат.ПарольIMAP = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				УстановитьПривилегированныйРежим(Истина);
				Результат.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
			КонецЕсли;
			УстановитьПривилегированныйРежим(Истина);
			Результат.ПарольSMTP = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "ПарольSMTP");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список команд отправки для указанной формы.
//
// Параметры:
//  ИмяФормыДокумента - Строка - полное имя формы, для которой необходимо получить список команд отправки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в КомандыОтправки().
//
Функция КомандыОтправкиФормы(ИмяФормыДокумента, ИмяМенеджераОтправки) Экспорт
	
	КомандыОтправки = КомандыОтправки();
	КомандыОтправки.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	
	МенеджерОтправки = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераОтправки);
	МенеджерОтправки.ДобавитьКомандыОтправки(КомандыОтправки);
	
	Для Каждого КомандаОтправки Из КомандыОтправки Цикл
		Если ПустаяСтрока(КомандаОтправки.МенеджерПечати) Тогда
			КомандаОтправки.МенеджерПечати = ИмяМенеджераОтправки;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыОтправки, ИмяМенеджераОтправки);
	
	Для Каждого КомандаОтправки Из КомандыОтправки Цикл
		Если КомандаОтправки.Порядок = 0 Тогда
			КомандаОтправки.Порядок = 50;
		КонецЕсли;
	КонецЦикла;
	
	КомандыОтправки.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормыДокумента, ".", Истина);
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыОтправки.Количество() + 1 По 0 Цикл
		КомандаОтправки = КомандыОтправки[-НомерСтроки];
		СписокФорм = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КомандаОтправки.СписокФорм, ",", Истина);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыОтправки.Удалить(КомандаОтправки);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандОтправкиПоФункциональнымОпциям(КомандыОтправки);
	
	Возврат КомандыОтправки;
	
КонецФункции

Функция ПечатныеФормы(ОписаниеКоманды) Экспорт
	
	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(ОписаниеКоманды.МенеджерПечати,
		ОписаниеКоманды.Идентификатор, ОписаниеКоманды.ОбъектыОтправки, ОписаниеКоманды.ДополнительныеПараметры);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПечатныеФормыИзВнешнегоИсточника(ОписаниеКоманды) Экспорт
	
	ПараметрыВывода = Неопределено;
	ОбъектыОтправки = Новый СписокЗначений;
	Результат = Неопределено;
	
	ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ОписаниеКоманды.Ссылка,
		ОписаниеКоманды.ПараметрыИсточника, Результат, ОбъектыОтправки, ПараметрыВывода);
	
	ТабличныеДокументы = Новый СписокЗначений;
	Для Каждого ПечатнаяФорма Из Результат Цикл
		ТабличныеДокументы.Добавить(ПечатнаяФорма.ТабличныйДокумент, ПечатнаяФорма.СинонимМакета);
	КонецЦикла;
	
	ПечатныеФормы = Новый Структура;
	ПечатныеФормы.Вставить("ОбъектыПечати"     , ОбъектыОтправки);
	ПечатныеФормы.Вставить("ПараметрыВывода"   , ПараметрыВывода);
	ПечатныеФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ОтправитьУПД(ОписаниеКоманды, ЕстьОшибки) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(ОписаниеКоманды.ОбъектыОтправки);
	
	ПечатныеФормы = Неопределено;
	Если НастройкиПечати.УниверсальныеПередаточныеДокументы.Количество() > 0 Тогда
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
				"Обработка.ПечатьУПД",
				НастройкиПечати.СписокМакетов,
				НастройкиПечати.УниверсальныеПередаточныеДокументы,
				ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПечатныеФормы = Неопределено ИЛИ ПечатныеФормы.ТабличныеДокументы.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ОтправитьУКД(ОписаниеКоманды, ЕстьОшибки) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхКорректировочныхДокументов(ОписаниеКоманды.ОбъектыОтправки);
	
	ПечатныеФормы = Неопределено;
	Если НастройкиПечати.УниверсальныеКорректировочныеДокументы.Количество() > 0 Тогда
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
							"Обработка.ПечатьУКД",
							НастройкиПечати.СписокМакетов,
							НастройкиПечати.УниверсальныеКорректировочныеДокументы,
							ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПечатныеФормы = Неопределено ИЛИ ПечатныеФормы.ТабличныеДокументы.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат ПечатныеФормы
	
КонецФункции

Функция ОтправитьСчетФактураВыданный(ОписаниеКоманды, ЕстьОшибки) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(ОписаниеКоманды.ОбъектыОтправки);
	
	Если НастройкиПечати.СчетаФактуры.Количество() > 0 Тогда
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
				"Документ.СчетФактураВыданный",
				НастройкиПечати.СписокМакетов,
				НастройкиПечати.СчетаФактуры,
				ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		ТекстСообщения = НСтр("ru='По документу %1 счет-фактура не выписан.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ДокументБезСчетаФактуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	Если ПечатныеФормы = Неопределено ИЛИ ПечатныеФормы.ТабличныеДокументы.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат ПечатныеФормы
	
КонецФункции

Функция ОтправитьСчетНаОплатуПокупателю(ОписаниеКоманды, ЕстьОшибки) Экспорт
	
	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
		"Обработка.ПечатьСчетаНаОплату",
		ОписаниеКоманды.Идентификатор,
		ОписаниеКоманды.ОбъектыОтправки,
		ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ПечатныеФормы.ТабличныеДокументы.Количество() = 0 Тогда
		ЕстьОшибки    = Истина;
		ПечатныеФормы = Неопределено;
	КонецЕсли;
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция НовыеПараметрыПолучателя() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выбран"                      , Ложь);
	Результат.Вставить("ИсточникКонтактнойИнформации", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("Адрес"                       , "");
	Результат.Вставить("Представление"               , "");
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПолучателяПоУмолчанию(Контакты) Экспорт
	
	Контрагенты = ОбщегоНазначения.ВыгрузитьКолонку(Контакты, "ИсточникКонтактнойИнформации", Истина);
	Контакты.Индексы.Добавить("КонтактноеЛицо");
	Если Контрагенты.Количество() > 1 Тогда
		Контакты.Индексы.Добавить("ИсточникКонтактнойИнформации");
	КонецЕсли;
	
	Для каждого Контрагент Из Контрагенты Цикл
		Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Продолжить;
		Иначе
			ОсновноеКонтактноеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОсновноеКонтактноеЛицо");
			
			Контакт = Контакты.Найти(ОсновноеКонтактноеЛицо, "КонтактноеЛицо");
			Если Контакт <> Неопределено Тогда
				Контакт.Выбран = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Контакт = Контакты.Найти(Контрагент, "КонтактноеЛицо");
		Если Контакт <> Неопределено Тогда
			Контакт.Выбран = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Контрагенты.Количество() = 1 Тогда
			Контакты.ЗаполнитьЗначения(Истина, "Выбран");
		Иначе
			КонтактыКонтрагента = Контакты.НайтиСтроки(Новый Структура("ИсточникКонтактнойИнформации", Контрагент));
			Для каждого КонтактКонтрагента Из КонтактыКонтрагента Цикл
				КонтактКонтрагента.Выбран = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьПравоВывода()
	
	Возврат ПравоДоступа("Вывод", Метаданные);
	
КонецФункции

Функция ПрисоединитьЭлектронныеДокументы(СериализуемыеОбъекты, Вложения, ФормироватьЭД)
	
	КоличествоЭД = 0;
	
	СериализуемыеОбъектыПоТипам = ОбщегоНазначенияБП.РазложитьСписокПоТипамОбъектов(СериализуемыеОбъекты);
	Для Каждого ТипСериализуемогоОбъекта Из СериализуемыеОбъектыПоТипам Цикл
		
		Если НЕ ФормироватьЭД[ТипСериализуемогоОбъекта.Ключ.ПолноеИмя()] Тогда
			Продолжить;
		КонецЕсли;
		
		ПакетыЭД = ЭлектронноеВзаимодействиеБП.СериализоватьОбъекты(ТипСериализуемогоОбъекта.Значение);
		КоличествоДокументовВПакете = ?(ЗначениеЗаполнено(ПакетыЭД), ПакетыЭД.Количество(), 0);
		
		Если КоличествоДокументовВПакете > 0 Тогда
			
			Для Каждого ПакетЭД Из ПакетыЭД Цикл
				Вложения.Добавить(ПакетЭД);
			КонецЦикла;
			
			КоличествоЭД = КоличествоЭД + КоличествоДокументовВПакете;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоЭД;
	
КонецФункции

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(ТабличныеДокументы, ПечатныеФормыПоОбъектам, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Новый Массив;
	УпаковатьВАрхив = Ложь;
	ФорматыСохранения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		СтандартныеПодсистемыСервер.ТипФайлаТабличногоДокументаPDF());
	
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("УпаковатьВАрхив"  , УпаковатьВАрхив);
		ДополнительныеПараметры.Свойство("ФорматыСохранения", ФорматыСохранения);
	КонецЕсли;
	
	Если УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ОбработанныеПечатныеФормы = Новый Массив;
	
	Для Каждого ПечатныйФормы Из ТабличныеДокументы Цикл
		ПечатныеФормыПоОбъектам(ПечатныеФормыПоОбъектам, ПечатныйФормы);
	КонецЦикла;
	
	Для Каждого Объект Из ПечатныеФормыПоОбъектам Цикл
		
		Для Каждого ПечатнаяФормаОбъекта Из Объект.ПечатныеФормы Цикл
			
			ПечатнаяФорма = ПечатнаяФормаОбъекта.Значение;
			
			Если ПечатнаяФорма.Вывод = ИспользованиеВывода.Запретить Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТипФайла Из ФорматыСохранения Цикл
				
				СтрокиНастроекФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла));
				Если СтрокиНастроекФормата.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НастройкиФормата = СтрокиНастроекФормата[0];
				
				ИмяФайла = ИмяФайлаПечатнойФормы(Объект.Объект, ПечатнаяФормаОбъекта.Ключ, НастройкиФормата.Расширение);
				ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
				
				ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
				ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
				
				Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
					ВставитьКартинкиВHTML(ПолноеИмяФайла);
				КонецЕсли;
				
				Если УпаковатьВАрхив Тогда 
					ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
				Иначе
					
					ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
					
					ОписаниеФайла = Новый Структура;
					ОписаниеФайла.Вставить("Представление", ИмяФайла);
					ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
					
					Результат.Добавить(ОписаниеФайла);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если УпаковатьВАрхив Тогда
		ЗаписьZipФайла.Записать();
		
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление"            , ПечатнаяФормаОбъекта.Ключ.Представление + ".zip");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		Результат.Добавить(ОписаниеФайла);
		
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Функция ПоместитьТабличныйДокументОтчетаВоВременноеХранилище(ПараметрыОтчета, ДополнительныеПараметры = Неопределено)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Вложения") Тогда
		Возврат ДополнительныеПараметры.Вложения;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	ТабличныйДокумент = ПараметрыОтчета.ТабличныйДокумент;
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки);
	
	Если ТабличныйДокумент.Вывод = ИспользованиеВывода.Запретить Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ИмяФайла") Тогда
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	Иначе
		ИмяФайла = ПараметрыОтчета.Заголовок;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ОграничитьДлинуИмениФайла(ИмяФайла, "xls");
	
	ПолноеИмяФайла = УникальноеИмяФайла(ПолныйПутьКФайлу + ИмяФайла);
	
	ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	
	Результат.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый УникальныйИдентификатор), ИмяФайла);
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьВложения(Вложения, ВложенияКДополнению)
	
	Для Каждого ОписаниеВложения Из ВложенияКДополнению Цикл
		// Ключ - адрес двоичных данных во временном хранилище, значение - имя файла для отображения во вложениях.
		Вложения.Добавить(ОписаниеВложения.Ключ, ОписаниеВложения.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатныеФормыПоОбъектам(ПечатныеФормыПоОбъектам, ПечатнаяФорма)
	
	Для Каждого ОбъектПечати Из ПечатнаяФорма.ОбъектыПечати Цикл
		ИмяОбласти = ОбъектПечати.Представление;
		Для Каждого ПечатнаяФормаДокумента Из ПечатнаяФорма.ТабличныеДокументы Цикл
			Область = ПечатнаяФормаДокумента.Значение.Области.Найти(ИмяОбласти);
			Если Область = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТабличныйДокумент = ПечатнаяФормаДокумента.Значение.ПолучитьОбласть(Область.Верх, , Область.Низ);
			Свойства = "АвтоМасштаб, Вывод, ВысотаСтраницы, ДвусторонняяПечать, Защита, ИмяПринтера, КодЯзыкаМакета,
				|КоличествоЭкземпляров, МасштабПечати, ОриентацияСтраницы, ПолеСверху, ПолеСлева, ПолеСнизу, ПолеСправа,
				|РазборПоКопиям, РазмерКолонтитулаСверху, РазмерКолонтитулаСнизу, РазмерСтраницы, ТочностьПечати,
				|ЧерноБелаяПечать, ШиринаСтраницы, ЭкземпляровНаСтранице";
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФормаДокумента.Значение, Свойства);
			ПечатныеФормыОбъекта = ПечатныеФормыПоОбъектам.Найти(ОбъектПечати.Значение, "Объект");
			Если ПечатныеФормыОбъекта = Неопределено Тогда
				ОписаниеПечатнойФормы = Новый Соответствие;
				ОписаниеПечатнойФормы.Вставить(ПечатнаяФормаДокумента, ТабличныйДокумент);
				ОписаниеОтправляемогоОбъекта = ПечатныеФормыПоОбъектам.Добавить();
				ОписаниеОтправляемогоОбъекта.Объект        = ОбъектПечати.Значение;
				ОписаниеОтправляемогоОбъекта.ПечатныеФормы = ОписаниеПечатнойФормы;
			Иначе
				ПечатныеФормыОбъекта.ПечатныеФормы.Вставить(ПечатнаяФормаДокумента, ТабличныйДокумент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяФайлаПечатнойФормы(ОбъектПечати, НазваниеПечатнойФормы, Расширение)
	
	Если ОбщегоНазначения.ЭтоДокумент(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектПечати))) Тогда
		ПараметрыДляВставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПечати, "Дата,Номер");
		ПараметрыДляВставки.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ПараметрыДляВставки.Номер, Истина);
		ПараметрыДляВставки.Дата = Формат(ПараметрыДляВставки.Дата, "ДЛФ=DD");
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы", НазваниеПечатнойФормы);
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] № [Номер] от [Дата]'");
	Иначе
		ПараметрыДляВставки = Новый Структура;
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы",НазваниеПечатнойФормы);
		ПараметрыДляВставки.Вставить("ПредставлениеОбъекта", Строка(ОбъектПечати));
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] [ПредставлениеОбъекта]'");
	КонецЕсли;
	
	ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыДляВставки);
	ОграничитьДлинуИмениФайла(ИмяФайла, Расширение);
	Возврат ИмяФайла;
	
КонецФункции

// В некоторых файловых системах существует ограничение на максимальный размер относительного имени файла в 255 байт.
// Процедура проверяет соответствие переданного имени файла требованиям и в случае необходимости обрезает имя файла
// до допустимого размера.
Процедура ОграничитьДлинуИмениФайла(ИмяФайла, Расширение)
	
	// В UTF-16 один символ занимает 2 байта, следовательно, максимальная длина имени файла с расширением составит
	// 255/2 = 127 символа. 1 символ резервируем на ".", разделитель между именем файла и его расширением.
	МаксимальныйРазмерИмениФайлаБезРасширения = 126 - СтрДлина(Расширение);
	
	Если СтрДлина(ИмяФайла) > МаксимальныйРазмерИмениФайлаБезРасширения Тогда
		ИмяФайла = Лев(ИмяФайла, МаксимальныйРазмерИмениФайлаБезРасширения);
	КонецЕсли;
	
	Если Прав(ИмяФайла, 1) = "." Тогда
		ИмяФайла = ИмяФайла + Расширение;
	Иначе
		ИмяФайла = ИмяФайла + "." + Расширение;
	КонецЕсли
	
КонецПроцедуры

Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

Процедура ОпределитьВидимостьКомандОтправкиПоФункциональнымОпциям(КомандыОтправки)
	
	Для НомерКоманды = -КомандыОтправки.Количество() + 1 По 0 Цикл
		
		ОписаниеКомандыОтправки = КомандыОтправки[-НомерКоманды];
		ФункциональныеОпцииКомандыОтправки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ОписаниеКомандыОтправки.ФункциональныеОпции, ",", Истина);
		ВидимостьКоманды = ФункциональныеОпцииКомандыОтправки.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыОтправки Цикл
			
			ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеКомандыОтправки.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КомандыОтправки() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("МенеджерПечати", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяКоманды", Новый ОписаниеТипов("Строка"));
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	
	// Имена форм для которых будет доступна команда. Разделитель - запятая
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	
	// Имена функциональных опций, влияющих на видимость команд. Разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКомандыОтправки(КомандыОтправки)
	
	Для Каждого КомандаОтправки Из КомандыОтправки Цикл
		НомерКоманды = КомандаОтправки.Владелец().Индекс(КомандаОтправки);
		ИмяКоманды = "КомандаОтправки" + НомерКоманды;
		КомандаОтправки.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
	ОтправкаПочтовыхСообщенийПереопределяемый.ДобавитьКомандыОтправки(КомандыОтправки);
	
КонецПроцедуры

Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

// Заполняет тему, текст и получателя электронного письма содержащего реквизиты организации
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты
//  ПараметрыПисьма  - Структура - структура содержащая параметры письма
//  ТаблицаПечатныхФорм - ТаблицаЗначений - содержит табличные документы печатных форм и их настройки.
//
Процедура ЗаполнитьТемуТелоПисьмаСКарточкойОрганизации(МассивОбъектов, ПараметрыПисьма, ТаблицаПечатныхФорм)
	
	ВсегоОрганизаций = МассивОбъектов.Количество();
	
	Если ВсегоОрганизаций = 1 Тогда
		ТекстНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивОбъектов[0], "НаименованиеСокращенное");
	ИначеЕсли ВсегоОрганизаций > 1 И ВсегоОрганизаций < 10 Тогда
		ТекстНаименование = "";
		Для Каждого Организация Из МассивОбъектов Цикл
			ТекстНаименование = ТекстНаименование 
				+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеСокращенное") + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстНаименование, 2);
	КонецЕсли;
	ТекстНаименование = УдалитьЛишниеПробелы(ТекстНаименование);
	ТемаПисьма = СтрШаблон(НСтр("ru='Реквизиты %1'"), ТекстНаименование);
	ТемаПисьмаИзменение = СтрШаблон(НСтр("ru='Внимание! Изменились реквизиты %1'"), ТекстНаименование);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("html");
	
	Если ТаблицаПечатныхФорм.Колонки.Найти("ТабличныйДокумент") <> Неопределено Тогда
		ПутьКДанным = "ТабличныйДокумент";
		ПечатнаяФормаРеквизитыОрганизации = ТаблицаПечатныхФорм[0][ПутьКДанным];
	Иначе
		ПутьКДанным = "ПечатныеФормы";
		ПечатныеФормыПоОбъектам = ТаблицаПечатныхФорм[0][ПутьКДанным];
		Для Каждого ПечатнаяФорма Из ПечатныеФормыПоОбъектам Цикл
			ПечатнаяФормаРеквизитыОрганизации = ПечатнаяФорма.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ПечатнаяФормаРеквизитыОрганизации.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	HTMLТабличногоДокумента = Новый ЧтениеHTML;
	HTMLТабличногоДокумента.ОткрытьФайл(ИмяФайла);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(HTMLТабличногоДокумента);
	ЭлементыTd = ДокументDOM.ПолучитьЭлементыПоИмени("td");
	
	ЭтоПервыйЭлемент = Истина;
	
	Для Каждого ЭлементTd Из ЭлементыTd Цикл
		
		// не обрабатываем пустые колонки
		Если ЭлементTd.ТекстовоеСодержимое = "" Тогда
			Продолжить;
		КонецЕсли;
		
		// колонки с неразрывным пробелом (&nbsp) в HTML используются для разделения групп реквизитов
		// заменяем такие колонки на пустые строки с переносом строки
		Если ЭлементTd.ТекстовоеСодержимое = Символ(160) Тогда
			ДобавитьТекстовыйУзел(ЭлементБлок, " ", Истина);
			Продолжить;
		КонецЕсли;
		
		// первый элемент карточки всегда наименование организации после которого нужно добавить перенос строки
		Если ЭтоПервыйЭлемент Тогда
			ДобавитьТекстовыйУзел(ЭлементБлок, СокрЛП(ЭлементTd.ТекстовоеСодержимое), Истина);
			ЭтоПервыйЭлемент = Ложь;
			Продолжить;
		КонецЕсли;
		
		// ИмяКласса - это адрес ячейки в табличном документе (R1C0, R1C1 итд), т.к. в ячейках *С1 находятся значения
		// реквизитов, то после них следует добавлять перенос строки
		Если Прав(ЭлементTd.ИмяКласса, 1) = "1" Тогда
			ДобавитьТекстовыйУзел(ЭлементБлок, СокрЛП(ЭлементTd.ТекстовоеСодержимое), Истина);
		Иначе
			ДобавитьТекстовыйУзел(ЭлементБлок, СокрЛП(ЭлементTd.ТекстовоеСодержимое));
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьПодпись(ЭлементБлок);
	ТекстПисьма = ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	ТекстПисьма = УдалитьЛишниеПробелы(ТекстПисьма);
	
	ПервыйДочерний = ЭлементБлок.ПервыйДочерний;
	ВставитьТекстовыйУзел(ЭлементБлок, ПервыйДочерний, ТемаПисьмаИзменение, Истина);
	ВставитьТекстовыйУзел(ЭлементБлок, ПервыйДочерний, "", Истина);
	ВставитьТекстовыйУзел(ЭлементБлок, ПервыйДочерний, НСтр("ru='Новые реквизиты'") + ":", Истина);
	ВставитьТекстовыйУзел(ЭлементБлок, ПервыйДочерний, "", Истина);
	ТекстПисьмаИзменение = ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	ТекстПисьмаИзменение = УдалитьЛишниеПробелы(ТекстПисьмаИзменение);
	
	ПараметрыПисьма.Тема  = ТемаПисьма;
	ПараметрыПисьма.Текст = ТекстПисьма;
	
	Если НЕ ПараметрыПисьма.Свойство("ШаблоныПисьма") Тогда
		ПараметрыПисьма.Вставить("ШаблоныПисьма", Новый СписокЗначений);
	КонецЕсли;
	ПараметрыПисьма.ШаблоныПисьма.Добавить(ТекстПисьма, ТемаПисьма);
	ПараметрыПисьма.ШаблоныПисьма.Добавить(ТекстПисьмаИзменение, ТемаПисьмаИзменение);
	
КонецПроцедуры

// Получает текст HTML из объекта ДокументHTML
//
// Параметры
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML)
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Получает объект ДокументHTML из обычного текста
//
// Параметры
//  Текст  - Строка - текст из которого будет создан документ HTML
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML
//
Функция ПолучитьДокументHTMLИзОбычногоТекста(Текст)
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ДобавитьТекстовыйУзел(ЭлементБлок, СтрПолучитьСтроку(Текст, НомерСтроки),
			?(НомерСтроки = КоличествоСтрок, Ложь, Истина));
	КонецЦикла;
	
	ДобавитьПодпись(ЭлементБлок);
	
	Возврат ДокументHTML;
	
КонецФункции

// Добавляет текстовый узел в ДокументHTML
//
// Параметры
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент
//  Текст  - Строка - содержимое текстового узла
//  ДобавлятьПереносСтроки - Булево - при установке в Истина добавляет тэг переноса строки
//
// Возвращаемое значение:
//   ЭлементHTML   - добавленный элемент
//
Процедура ДобавитьТекстовыйУзел(ЭлементРодитель, Текст, ДобавлятьПереносСтроки = Ложь)
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьТекстовыйУзел(ЭлементРодитель, СледующийЭлемент, Текст, ДобавлятьПереносСтроки = Ложь)
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	ЭлементРодитель.ВставитьПеред(ТекстовыйУзел, СледующийЭлемент);
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ВставитьПеред(ДокументВладелец.СоздатьЭлемент("br"), СледующийЭлемент);
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьЛишниеПробелы(ИсходнаяСтрока)
	
	Пока СтрНайти(ИсходнаяСтрока, "  ") > 0 Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "  ", " ");
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция ОписаниеТиповИзСтроки(СтрокаОписанияТипов)
	
	СтруктураДопустимыхТипов = Новый Структура(СтрокаОписанияТипов);
	МассивДопустимыхТипов = Новый Массив;
	
	Для каждого ЭлементСтруктуры Из СтруктураДопустимыхТипов Цикл
		
		МассивДопустимыхТипов.Добавить(Тип("СправочникСсылка."+ЭлементСтруктуры.Ключ));
		
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(МассивДопустимыхТипов);
	
КонецФункции

Функция ПолучитьЗначениеОбщегоРеквизита(СтруктураТипов, ИмяРеквизита, ОписаниеДопустимыхТипов = Неопределено)
	
	Перем ТекстЗапроса;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоДокументу = "
	|	%ИмяДокумента%.%ИмяРеквизита% КАК %ИмяРеквизита%
	|ИЗ
	|	Документ.%ИмяДокумента% КАК %ИмяДокумента%
	|ГДЕ
	|	%ИмяДокумента%.Ссылка В(&СписокДокументов%ИмяДокумента%)";
	
	ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "%ИмяРеквизита%", ИмяРеквизита);
	
	Для каждого КлючИЗначение Из СтруктураТипов Цикл
		
		ИмяДокумента = КлючИЗначение.Ключ.Имя;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, КлючИЗначение.Ключ)
			Или ОбщегоНазначения.ЭтоСтандартныйРеквизит(КлючИЗначение.Ключ.СтандартныеРеквизиты, ИмяРеквизита) Тогда
			
			
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				
				ТекстЗапроса = ТекстЗапроса+"
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ";
				
			Иначе
				
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаПоДокументу, "%ИмяДокумента%", ИмяДокумента);
			
			Запрос.УстановитьПараметр("СписокДокументов"+ИмяДокумента, КлючИЗначение.Значение);
			
		КонецЕсли;
		
		Если ИмяРеквизита = "Контрагент" И ИмяДокумента = "КорректировкаДолга" Тогда
			
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				
				ТекстЗапроса = ТекстЗапроса+"
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ";
				
			Иначе
				
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	КорректировкаДолга.КонтрагентДебитор КАК Контрагент
			|ИЗ
			|	Документ.КорректировкаДолга КАК КорректировкаДолга
			|ГДЕ
			|	КорректировкаДолга.Ссылка В (&СписокДокументовКорректировкаДолга)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкаДолга.КонтрагентКредитор
			|ИЗ
			|	Документ.КорректировкаДолга КАК КорректировкаДолга
			|ГДЕ
			|	КорректировкаДолга.Ссылка В (&СписокДокументовКорректировкаДолга)";
			
			Запрос.УстановитьПараметр("СписокДокументовКорректировкаДолга", КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Если Выборка.Следующий() Тогда
				Если ОписаниеДопустимыхТипов = Неопределено Тогда
					Возврат Выборка[ИмяРеквизита];
				Иначе
					Возврат ОписаниеДопустимыхТипов.ПривестиЗначение(Выборка[ИмяРеквизита]);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПредставлениеСПрефиксом(Префикс, Значение)
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат "";
	Иначе
		Возврат " "+Префикс+" "+Значение;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПолучателяСкрытойКопии(ПараметрыПисьма)
	
	ПараметрыСкрытыхКопий = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ПараметрыОтправкиСкрытыхКопий");
	Если ПараметрыСкрытыхКопий.ОтправлятьСкрытыеКопии Тогда
		АдресПолучателяСкрытойКопии = ПараметрыСкрытыхКопий.АдресПолучателяСкрытойКопии;
	Иначе
		АдресПолучателяСкрытойКопии = "";
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("АдресПолучателяСкрытойКопии", АдресПолучателяСкрытойКопии);
	
КонецПроцедуры

Процедура СохранитьАдресаЭлектроннойПочты(Контрагент, Адреса)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	
	ДоступенВвводНесколькихЗначений = ВидКИ.РазрешитьВводНесколькихЗначений;
	
	ПараметрыОтбора = Новый Структура("Вид", ВидКИ);
	НайденныеСтрокиКИ = Контрагент.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	АдресЗаполнен = НайденныеСтрокиКИ.Количество() > 0;
	
	Если НЕ ДоступенВвводНесколькихЗначений И АдресЗаполнен Тогда
		Возврат;
	ИначеЕсли НЕ ДоступенВвводНесколькихЗначений Тогда
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контрагент, Адреса[0], ВидКИ);
		Возврат;
	КонецЕсли;
	
	Приемник = Контрагент.ПолучитьОбъект();
	
	Для Каждого Адрес Из Адреса Цикл
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Приемник, Адрес, ВидКИ, , Ложь);
		
	КонецЦикла;
	
	Приемник.Записать();
	
КонецПроцедуры

Функция ПодготовитьТекстПисьма(ТекстПисьма) Экспорт
	
	ДокументHTML = ПолучитьДокументHTMLИзОбычногоТекста(ТекстПисьма);
	ТекстПисьма  = ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
	Возврат ТекстПисьма;
	
КонецФункции

Функция НовыеПараметрыПисьма() Экспорт
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Отправитель"                , Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
	ПараметрыПисьма.Вставить("Получатель"                 , "");
	ПараметрыПисьма.Вставить("Тема"                       , "");
	ПараметрыПисьма.Вставить("Текст"                      , "");
	ПараметрыПисьма.Вставить("Вложения"                   , Новый Массив);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки"  , Истина);
	ПараметрыПисьма.Вставить("ВыбиратьПолучателей"        , Ложь);
	ПараметрыПисьма.Вставить("ШаблоныПисьма"              , Новый СписокЗначений);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Процедура ДополнитьПараметрыПисьма(ПараметрыПисьма) Экспорт
	
	ДобавитьПолучателяСкрытойКопии(ПараметрыПисьма);
	ДобавитьУчетнуюЗаписьОтправителя(ПараметрыПисьма);
	
КонецПроцедуры

Процедура ЗаполнитьТемуТелоПисьма(МассивОбъектов, ПараметрыПисьма, КоллекцияПечатныхФорм)
	
	ТекстПисьма = НСтр("ru = 'К письму приложены документы:'");
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		ПутьКДанным = "";
		Если КоллекцияПечатныхФорм.Колонки.Найти("СинонимМакета") <> Неопределено Тогда
			ПутьКДанным = "СинонимМакета";
		ИначеЕсли КоллекцияПечатныхФорм.Колонки.Найти("Название") <> Неопределено Тогда
			ПутьКДанным = "Название";
		Иначе
			СведенияОбъектаПечати = КоллекцияПечатныхФорм.Найти(Объект, "Объект");
			Для Каждого ПечатнаяФорма Из СведенияОбъектаПечати.ПечатныеФормы Цикл
				ТекстПисьма = ТекстПисьма + Символы.ПС + СтрШаблон(НСтр("ru = '- %1'"), ПечатнаяФорма.Ключ.Представление);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				ТекстПисьма = ТекстПисьма + Символы.ПС + СтрШаблон(НСтр("ru = '- %1'"), ПечатнаяФорма[ПутьКДанным]);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТекстПисьма = ПодготовитьТекстПисьма(ТекстПисьма);
	
	ПараметрыПисьма.Текст = УдалитьЛишниеПробелы(ТекстПисьма);
	
КонецПроцедуры

Функция НовыйПолучатель()
	
	Получатель = Новый Структура("Контрагент, Выбран");
	
	Возврат Получатель;
	
КонецФункции

Процедура ДобавитьПолучателя(Получатели, Контрагент, Выбран)
	
	Для Каждого Получатель Из Получатели Цикл
		// Проверим, что этого получателя еще нет.
		Если Получатель.Контрагент = Контрагент Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Получатель = НовыйПолучатель();
	Получатель.Контрагент = Контрагент;
	Получатель.Выбран     = Выбран;
	
	Получатели.Добавить(Получатель);
	
КонецПроцедуры

Процедура ДополнитьОбъектыПечатиДокументамиКомплекта(ОбъектыПечати, ДокументыКомплекта)
	Если ДокументыКомплекта = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого КлючИЗначение Из ДокументыКомплекта Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПечати, КлючИЗначение.Значение, Истина);
		ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(КлючИЗначение.Значение) Тогда 
			ОбъектыПечати.Добавить(КлючИЗначение.Значение);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьТемуТелоПисьмаСДокументом(МассивОбъектов, ПараметрыПисьма, ПараметрыВывода, КоллекцияПечатныхФорм, КоличествоЭД)
	Перем ДокументыКомплекта;
	
	ОбъектыПечати = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОбъектов);
	
	// Дополним объекты печати отдельными документами для печати комплекта
	Если ПараметрыВывода.Свойство("ДокументыКомплекта", ДокументыКомплекта) Тогда
		Для каждого ОбъектПечати Из МассивОбъектов Цикл
			ДополнитьОбъектыПечатиДокументамиКомплекта(ОбъектыПечати, ДокументыКомплекта[ОбъектПечати]);
		КонецЦикла; 
	КонецЕсли; 
	
	СтруктураТиповОбъектыПечати = ОбщегоНазначенияБП.РазложитьСписокПоТипамОбъектов(ОбъектыПечати);
	
	Отправитель = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Организация", ОписаниеТиповИзСтроки("Организации"));
	
	ОписаниеДопустимыхТиповКонтрагента = ОписаниеТиповИзСтроки("Контрагенты, Организации, ФизическиеЛица");
	Получатель  = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Контрагент", ОписаниеДопустимыхТиповКонтрагента);
	
	Если Получатель = Неопределено Тогда
		ПодотчетноеЛицо = ПолучитьЗначениеОбщегоРеквизита(
			СтруктураТиповОбъектыПечати, "ФизЛицо", ОписаниеДопустимыхТиповКонтрагента);
		Дата = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Дата");
		Если ЗначениеЗаполнено(ПодотчетноеЛицо) И ЗначениеЗаполнено(Отправитель) И ЗначениеЗаполнено(Дата)
			И СтруктураТиповОбъектыПечати[Метаданные.Документы.АвансовыйОтчет] <> Неопределено Тогда
			СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Отправитель, Дата);
			
			ПодразделениеОтветственныхЛиц = ПолучитьЗначениеОбщегоРеквизита(
				СтруктураТиповОбъектыПечати, "ПодразделениеОрганизации");
			
			ДанныеПодотчетногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
				Отправитель, ПодотчетноеЛицо, Дата);
			
			Если ЗначениеЗаполнено(ДанныеПодотчетногоЛица.ПодразделениеОрганизации) Тогда
				ПодразделениеОтветственныхЛиц = ДанныеПодотчетногоЛица.ПодразделениеОрганизации;
			КонецЕсли;
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(
				Отправитель, Дата, ПодразделениеОтветственныхЛиц);
			
			Получатель = Новый Массив;
			ДобавитьПолучателя(Получатель, ПодотчетноеЛицо, Истина);
			ДобавитьПолучателя(Получатель, Руководители.ГлавныйБухгалтер, Ложь);
			ДобавитьПолучателя(Получатель, Руководители.Руководитель, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПисьма.Получатель = АдресаЭлектроннойПочты(Получатель);
	
	КоличествоВложений = 0;
	Если ПараметрыПисьма.Свойство("Вложения") Тогда
		КоличествоВложений = ПараметрыПисьма.Вложения.Количество();
	КонецЕсли;
	
	ПредставлениеПолучателя = "";
	Если Получатель <> Неопределено И ТипЗнч(Получатель) <> Тип("Массив") Тогда
		ПредставлениеПолучателя = ПолучитьПредставлениеСПрефиксом(НСтр("ru='для'"),
			НаименованиеКонтрагента(Получатель));
	КонецЕсли;
	
	ПредставлениеОтправителя = "";
	Если Отправитель <> Неопределено Тогда
		ПредставлениеОтправителя = ПолучитьПредставлениеСПрефиксом(НСтр("ru='от'"),
			НаименованиеКонтрагента(Отправитель));
	КонецЕсли;
	
	ТемаПисьма = СтрШаблон(НСтр("ru='Документы %1 %2'"),
		ПредставлениеПолучателя,
		ПредставлениеОтправителя);
	
	ТекстПисьма = СтрШаблон(НСтр("ru = 'К письму приложены документы %1 %2:'"),
		ПредставлениеПолучателя,
		ПредставлениеОтправителя);
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	ЗапросСхемы.ВыбиратьРазрешенные = Истина;
	
	ЭтоПервыйОператорВыбора = Истина;
	Для Каждого ТипОбъекта Из СтруктураТиповОбъектыПечати Цикл
		
		ЕстьРеквизитСумма  = ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", ТипОбъекта.Ключ);
		ЕстьРеквизитВалюта = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", ТипОбъекта.Ключ);
		
		Если ЭтоПервыйОператорВыбора Тогда
			ЭтоПервыйОператорВыбора = Ложь;
			ОператорВыбора = ЗапросСхемы.Операторы[0];
		Иначе
			ОператорВыбора = ЗапросСхемы.Операторы.Добавить();
		КонецЕсли;
		
		Источник = ОператорВыбора.Источники.Добавить("Документ." + ТипОбъекта.Ключ.Имя, "ВыгружаемыйДокумент");
		
		ОператорВыбора.ВыбираемыеПоля.Добавить("ВыгружаемыйДокумент.Ссылка");
		ИмяПоляСумма = ?(ЕстьРеквизитСумма, "ВыгружаемыйДокумент.СуммаДокумента", "0");
		ОператорВыбора.ВыбираемыеПоля.Добавить(ИмяПоляСумма);
		ИмяПоляВалюта = ?(ЕстьРеквизитВалюта, "ВыгружаемыйДокумент.ВалютаДокумента", "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
		ОператорВыбора.ВыбираемыеПоля.Добавить(ИмяПоляВалюта);
		
		НаименованиеОтбора = "МассивОбъектов" + ТипОбъекта.Ключ.Имя;
		ОператорВыбора.Отбор.Добавить("ВыгружаемыйДокумент.Ссылка В(&" + НаименованиеОтбора + ")");
		Запрос.УстановитьПараметр(НаименованиеОтбора, ТипОбъекта.Значение);
	КонецЦикла;
	
	ЗапросСхемы.Колонки[0].Псевдоним = "Ссылка";
	ЗапросСхемы.Колонки[1].Псевдоним = "СуммаДокумента";
	ЗапросСхемы.Колонки[2].Псевдоним = "ВалютаДокумента";
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТаблицаСведенийОбъектовПечати = Неопределено;
	Иначе
		ТаблицаСведенийОбъектовПечати = РезультатЗапроса.Выгрузить();
		ТаблицаСведенийОбъектовПечати.Индексы.Добавить("Ссылка");
	КонецЕсли;

	Для Каждого Объект Из МассивОбъектов Цикл
		
		ТекстСуммаДокумента  = "";
		
		Если ТаблицаСведенийОбъектовПечати <> Неопределено Тогда
			СведенияОбъектаПечати = ТаблицаСведенийОбъектовПечати.Найти(Объект, "Ссылка");
			Если ЗначениеЗаполнено(СведенияОбъектаПечати.СуммаДокумента) Тогда
				Шаблон = Нстр("ru='на сумму %1 %2'");
				ТекстСуммаДокумента = СтрШаблон(Шаблон,
					Формат(СведенияОбъектаПечати.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"),
					СведенияОбъектаПечати.ВалютаДокумента);
			КонецЕсли;
		КонецЕсли;
		
		ПутьКДанным = "";
		Если КоллекцияПечатныхФорм.Колонки.Найти("СинонимМакета") <> Неопределено Тогда
			ПутьКДанным = "СинонимМакета";
		ИначеЕсли КоллекцияПечатныхФорм.Колонки.Найти("Название") <> Неопределено Тогда
			ПутьКДанным = "Название";
		Иначе
			СведенияОбъектаПечати = КоллекцияПечатныхФорм.Найти(Объект, "Объект");
			Для Каждого ПечатнаяФорма Из СведенияОбъектаПечати.ПечатныеФормы Цикл
				ТекстПисьма = ТекстПисьма + Символы.ПС + СтрШаблон(НСтр("ru = '- %1 %2'"),
				ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Объект, ПечатнаяФорма.Ключ.Представление),
					ТекстСуммаДокумента);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				ТекстСуммыОбъектаПечати = Новый Соответствие;
				
				Если ПараметрыВывода.Свойство("ДокументыКомплекта") 
					И ПараметрыВывода.ДокументыКомплекта[Объект] <> Неопределено
					И ПараметрыВывода.ДокументыКомплекта[Объект][ПечатнаяФорма[ПутьКДанным]] <> Неопределено Тогда
					
					ДокументыКомплекта = ПараметрыВывода.ДокументыКомплекта[Объект][ПечатнаяФорма[ПутьКДанным]];
					
					// Под одной печатной формой в комплекте может быть как один документ, так и несколько (например счетов)
					Если ТипЗнч(ДокументыКомплекта) <> Тип("Массив") Тогда
						ДокументыКомплекта = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыКомплекта);
					КонецЕсли;
					
					Шаблон = Нстр("ru='на сумму %1 %2'");
					
					Для каждого ДокументКомлекта Из ДокументыКомплекта Цикл
						Если ТаблицаСведенийОбъектовПечати <> Неопределено Тогда
							СведенияОбъектаПечати = ТаблицаСведенийОбъектовПечати.Найти(ДокументКомлекта, "Ссылка");
						Иначе
							СведенияОбъектаПечати = Неопределено;
						КонецЕсли; 
						
						Если СведенияОбъектаПечати <> Неопределено 
							И ЗначениеЗаполнено(СведенияОбъектаПечати.СуммаДокумента) Тогда
							
							ТекстСуммаДокументаКомплекта = СтрШаблон(Шаблон,
								Формат(СведенияОбъектаПечати.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"),
								СведенияОбъектаПечати.ВалютаДокумента);
								
							ТекстСуммыОбъектаПечати.Вставить(ДокументКомлекта, ТекстСуммаДокументаКомплекта);
						Иначе
							ТекстСуммыОбъектаПечати.Вставить(ДокументКомлекта, ТекстСуммаДокумента);
						КонецЕсли;
					КонецЦикла; 
				Иначе
					ТекстСуммыОбъектаПечати.Вставить(Объект, ТекстСуммаДокумента);
				КонецЕсли;
				
				Для каждого КлючИЗначение Из ТекстСуммыОбъектаПечати Цикл
					ТекстПисьма = ТекстПисьма + Символы.ПС + СтрШаблон(НСтр("ru = '- %1 %2'"),
						ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(КлючИЗначение.Ключ, ПечатнаяФорма[ПутьКДанным]),
						КлючИЗначение.Значение);
				КонецЦикла; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоВложений > 0 И КоличествоЭД > 0 Тогда
		НачальныйИндекс = КоличествоВложений - КоличествоЭД;
		Для Индекс = НачальныйИндекс По КоличествоВложений - 1 Цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС+ СтрШаблон(НСтр("ru = '- %1'"),
				ПараметрыПисьма.Вложения[Индекс].Представление);
		КонецЦикла;
	КонецЕсли;
	
	ТекстПисьма = ПодготовитьТекстПисьма(ТекстПисьма);
	
	ПараметрыПисьма.Тема  = УдалитьЛишниеПробелы(ТемаПисьма);
	ПараметрыПисьма.Текст = УдалитьЛишниеПробелы(ТекстПисьма);
	
КонецПроцедуры

Процедура ДобавитьПодпись(ЭлементРодитель)
	
	Подпись = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("Подпись");
	
	Если НЕ ЗначениеЗаполнено(Подпись) Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(Подпись);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	ЭлементыР = ДокументDOM.ПолучитьЭлементыПоИмени("p");
	
	ЭлементРодитель.ДобавитьДочерний(ЭлементРодитель.ДокументВладелец.СоздатьЭлемент("br"));
	ЭлементРодитель.ДобавитьДочерний(ЭлементРодитель.ДокументВладелец.СоздатьЭлемент("br"));
	
	Для Каждого ЭлементР Из ЭлементыР Цикл
		ЭлементРодитель.ДобавитьДочерний(ЭлементР.КлонироватьУзел(Истина));
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьУчетнуюЗаписьОтправителя(ПараметрыПисьма)
	
	УчетнаяЗапись = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("УчетнаяЗаписьЭлектроннойПочты");
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ПараметрыПисьма.Вставить("Отправитель", УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти