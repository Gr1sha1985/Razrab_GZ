
#Область ПрограммныйИнтерфейс

// Выполняет необходимые проверки и запросы пользователю перед записью организации.
// При ответе пользователя о необходимости обработки вызывает сервер.
// Параметры:
//	ДанныеОрганизации - данные формы, соответствующие Организации.
//	Форма - форма справочника
//	Отказ - признак отказа от записи.
//	ОповещениеЗавершения - описание оповещения, выполняемого после завершения процедуры.
Процедура ФормаОрганизацииПередЗаписью(ДанныеОрганизации, Форма, Отказ, ОповещениеЗавершения = Неопределено, ЗакрытьПослеЗаписи = Истина) Экспорт
	
	Перем НеобходимостьОбработки;
	
	ТекущееСостояниеОрганизации = Новый Структура("Ссылка,ПрименятьРайонныйКоэффициент,ПрименятьСевернуюНадбавку");
	
	ТекущееСостояниеОрганизации.Ссылка = ДанныеОрганизации.Ссылка;
	ТекущееСостояниеОрганизации.ПрименятьРайонныйКоэффициент = ДанныеОрганизации.ПрименятьРайонныйКоэффициент;
	ТекущееСостояниеОрганизации.ПрименятьСевернуюНадбавку = ДанныеОрганизации.ПрименятьСевернуюНадбавку;
	
	ЗарплатаКадрыВызовСервера.НеобходимостьОбработкиДанныхПриЗаписиОрганизации(ТекущееСостояниеОрганизации, НеобходимостьОбработки);
	
	ДополнительныеОбработки = Новый Массив;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Отказ", Отказ);
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ДополнительныеПараметры.Вставить("НеобходимостьОбработки", НеобходимостьОбработки);
	ДополнительныеПараметры.Вставить("ДополнительныеОбработки", ДополнительныеОбработки);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если НеобходимостьОбработки.ОбработатьСН Тогда
		// Запрос про северную надбавку.
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы отменили применение северных надбавок для организации ""%1"". 
						|Размер северной надбавки будет удален для всех сотрудников организации. 
						|Предыдущие результаты расчетов сохранятся, но в дальнейшем начисление северных надбавок выполняться не будет.
						|Удалить северные надбавки?'"), ДанныеОрганизации.Наименование);
		Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюОбработатьСНЗавершение", ЭтотОбъект, ДополнительныеПараметры);				
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Иначе 
		ФормаОрганизацииПередЗаписьюОбработатьРК(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ОбработкаОповещения
// формы организации.
Процедура ОрганизацииФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОтредактированаИстория" И (Параметр.ИмяРегистра = "ИсторияРегистрацийВОрганеПФР" Или Параметр.ИмяРегистра = "ТерриториальныеУсловияПФР") Тогда
		РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(Форма, Форма.ОрганизацияСсылка, ИмяСобытия, Параметр, Источник);
		Если Параметр.ИмяРегистра = "ИсторияРегистрацийВОрганеПФР" Тогда 
			Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодПриИзменении
// формы организации.
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодПриИзменении(Форма) Экспорт
	
	ВводМесяцаПриИзменении(Форма, "ИсторияРегистрацийВОрганеПФР.Период", "ИсторияРегистрацийВОрганеПФРПериодСтрокой", Форма.Модифицированность);
	Если Форма.ИсторияРегистрацийВОрганеПФР.Период <> НачалоКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период) Тогда
		Форма.ИсторияРегистрацийВОрганеПФР.Период = НачалоКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
		Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодНачалоВыбора
// формы организации.
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбора(Форма) Экспорт
	
	ПутьРеквизита = "ИсторияРегистрацийВОрганеПФР.Период";
	ПутьРеквизитаПредставления = "ИсторияРегистрацийВОрганеПФРПериодСтрокой";
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита);
	
	ДополнительныеПараметры = Новый Структура("Форма, ПутьРеквизита, ПутьРеквизитаПредставления", Форма, ПутьРеквизита, ПутьРеквизитаПредставления);
	Оповещение = Новый ОписаниеОповещения("ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Квартал", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбора.
//
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	
	ВыбранноеЗначение = НачалоКвартала(ВыбранноеЗначение);
	Значение = ВыбранноеЗначение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение);
	Представление = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизитаПредставления, Представление);
	
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодРегулирование
// формы организации.
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодРегулирование(Форма, Направление) Экспорт
	
	ВводМесяцаРегулирование(Форма, "ИсторияРегистрацийВОрганеПФР.Период", "ИсторияРегистрацийВОрганеПФРПериодСтрокой", Направление * 3, Форма.Модифицированность);
	Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
	
КонецПроцедуры

// Запускает фоновое задание, восстанавливающее начальные значения законодательных классификаторов.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, в которой расположена команда вызывающая команда.
//       Обновление вызывающей формы может быть реализовано в процедуре ОбработкаОповещения
//       с условием ИмяСобытия = "ВосстановленыНачальныеЗначения".
//
Процедура ВосстановитьНачальныеЗначения(Форма) Экспорт
	ВосстановитьНачальныеЗначенияСлужебный(Форма, "");
КонецПроцедуры

// Обработчик, вызываемый при начале работы системы.
//
// Параметры:
//		Параметры - описание см ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// См. ОбновлениеИнформационнойБазыКлиентПереопределяемый.ПриНажатииНаГиперссылкуВДокументеОписанияОбновлений.
Процедура ПриНажатииНаГиперссылкуВДокументеОписанияОбновлений(Знач Область) Экспорт
	
	Если Область.Имя = "_АктуализироватьАдресныйКлассификатор" Тогда
		ОткрытьФорму("РегистрСведений.АдресныеОбъекты.Форма.АктуализацияУстаревшегоКлассификатора");
	КонецЕсли;

КонецПроцедуры

// См. ОбновлениеИнформационнойБазыКлиентПереопределяемый.ПриОпределенииВозможностиОбновления.
Процедура ПриОпределенииВозможностиОбновления(Знач ВерсияДанных) Экспорт
	
	// Поддерживается обновление пустой ИБ.
	Если ВерсияДанных = "0.0.0.0" Или Не ЗначениеЗаполнено(ВерсияДанных) Тогда
		Возврат;
	КонецЕсли;
	
	// Поддерживается обновление с минимальной версии.
	МинимальнаяВерсия = ЗарплатаКадрыКлиентСервер.МинимальнаяВерсия();
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияДанных, МинимальнаяВерсия) >= 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Не поддерживается обновление с версии, которая ниже минимальной.
	Сообщение = НСтр("ru = 'Обновление на текущую версию допустимо только с версии %1 и выше.
		|(Недопустимая попытка обновления с версии %2)
		|Необходимо восстановить информационную базу из резервной копии
		|и повторить обновление согласно файлу 1cv8upd.htm'");
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, МинимальнаяВерсия, ВерсияДанных);
	ВызватьИсключение Сообщение;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

// СтандартныеПодсистемы.РаботаСФайлами

// См. Обработка.РаботаСФайлами.РедактированиеТекстовогоФайла.ЗаписатьТекст.
Процедура РаботаСФайламиЗаписатьТекст(ДанныеФайла, ТекстовыйДокумент, ИмяФайла, Кодировка) Экспорт
	ЗаписатьBOM = Истина;
	ПерсонифицированныйУчетКлиент.ПриОпределенииПараметровРедактированияПрисоединенныхФайлов(ДанныеФайла, ЗаписатьBOM);
	Если ЗаписатьBOM Тогда
		ТекстовыйДокумент.Записать(ИмяФайла, Кодировка);
	Иначе
		#Если ВебКлиент Тогда
			Обработчик = Новый ОписаниеОповещения("РаботаСФайламиПослеЗаписиДвоичныхДанных", ЭтотОбъект);
			ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ТекстовыйДокумент.ПолучитьТекст(), Кодировка, Ложь);
			ДвоичныеДанные.НачатьЗапись(Обработчик, ИмяФайла);
		#Иначе
			Поток = Новый ФайловыйПоток(ИмяФайла, РежимОткрытияФайла.Создать);
			ЗаписьТекста = Новый ЗаписьТекста(Поток, Кодировка, , , Ложь);
			ЗаписьТекста.Записать(ТекстовыйДокумент.ПолучитьТекст());
			ЗаписьТекста.Закрыть();
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// РегламентированнаяОтчетность

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьРасшифровкуОтчета.
Процедура ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	ЗарплатаКадрыКлиентВнутренний.ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
КонецПроцедуры

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.ПерейтиВРабочееМестоПФР.
Процедура ПерейтиВРабочееМестоПодготовкиКвартальнойОтчетностиПФР(Организация, ОтчетныйПериод) Экспорт
	ПерсонифицированныйУчетКлиент.ПерейтиВРабочееМестоПодготовкиКвартальнойОтчетностиПФР(Организация, ОтчетныйПериод);
КонецПроцедуры

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.Печать.
Процедура ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
	ЗарплатаКадрыКлиентВнутренний.ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка);
КонецПроцедуры

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить.
Процедура ВыгрузитьДокументОтчетности(Ссылка, УникальныйИдентификаторФормы) Экспорт
	ЗарплатаКадрыКлиентВнутренний.ВыгрузитьДокументОтчетности(Ссылка, УникальныйИдентификаторФормы);
КонецПроцедуры

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект.
Процедура СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка) Экспорт
	ЗарплатаКадрыКлиентВнутренний.СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка);
КонецПроцедуры

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов.
Процедура ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(ПараметрыПроверки) Экспорт
	Настройки = НастройкиТипа(ТипЗнч(ПараметрыПроверки.Владелец));
	Если Не Настройки.ПоказыватьКомандыРаботыСФайлами Тогда
		ПараметрыПроверки.СтандартнаяОбработка = Ложь;
		ПараметрыПроверки.ТекстПредупреждения = НСтр("ru = 'Присоединение файлов к отчетам данного вида из формы списка отчетов не предусмотрено.'");
	КонецЕсли;
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуСотрудникаНаРеквизите.
Процедура ОткрытьФормуСотрудникаНаРеквизите(Сотрудник, НаименованиеРеквизита, СтандартнаяОбработка) Экспорт
	
	Если СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Сотрудник);
	ПараметрыОткрытия.Вставить("ИмяРеквизита", НаименованиеРеквизита);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ВыбратьСотрудникаИзСписка.
Процедура ВыбратьСотрудникаИзСписка(ОповещениеОЗавершении, Сотрудник, Организация, ВладелецФормы, СтандартнаяОбработка) Экспорт
	
	Если СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Отборы = Новый Структура;
		Отборы.Вставить("ТекущаяОрганизация", Организация);
		
		ПараметрыОткрытия.Вставить("Отбор", Отборы);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыОткрытия, ВладелецФормы, , , , ОповещениеОЗавершении);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите.
Процедура ОткрытьФормуВладельцаЭЦПНаРеквизите(ВладелецЭЦП, НаименованиеРеквизита) Экспорт
	
	// Определяем соответствие имен реквизитов мастера и имен реквизитов формы организации.
	СоответствиеИмен = Новый Структура();
	
	// СоответствиеИмен.Вставить(<имя поля мастера>, <Имя элемента управления формы владельца ЭЦП>).
	СоответствиеИмен.Вставить("СНИЛС",	"ФизлицоСтраховойНомерПФР");
	СоответствиеИмен.Вставить("ФИО", 	"ФИО");
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ", ВладелецЭЦП);
	
	Если СоответствиеИмен.Свойство(НаименованиеРеквизита) Тогда
		ПараметрыОткрытия.Вставить("ИмяРеквизита", СоответствиеИмен[НаименованиеРеквизита]);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуОрганизацииНаРеквизите.
Процедура ОткрытьФормуОрганизацииНаРеквизите(Организация,НаименованиеРеквизита) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	
	Если НаименованиеРеквизита = "КПП" Тогда
		ИмяФормы = "ОбщаяФорма.РедактированиеРегистрацииВНалоговомОргане";
		ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Организация);
	Иначе
		ИмяФормы = "Справочник.Организации.ФормаОбъекта";
		ПараметрыОткрытия.Вставить("Ключ", Организация);
	КонецЕсли;
	
	Если Не ПустаяСтрока(НаименованиеРеквизита) Тогда
		ПараметрыОткрытия.Вставить("ИмяРеквизита", НаименованиеРеквизита);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыОткрытия);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя.
Процедура ПолучитьИсполнителя(Организация, ВладелецЭЦП, ВыполняемоеОповещение) Экспорт
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Организация", Организация);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТекущаяСтрока", ВладелецЭЦП);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, , , , , ВыполняемоеОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПоказатьСостояниеОтправкиОтчета.
Процедура ПоказатьСостояниеОтправкиОтчета(Ссылка, СтандартнаяОбработка) Экспорт
	
	УчетПособийСоциальногоСтрахованияКлиент.ПоказатьСостояниеОтправкиОтчета(Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера
// и ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя.
Процедура ОткрытьФормуСведенийОтветственныхЛиц(Организация) Экспорт
	ЗарплатаКадрыКлиентВнутренний.ОткрытьФормуСведенийОтветственныхЛиц(Организация);
КонецПроцедуры

// Конец РегламентированнаяОтчетность

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Начиная с версии БРО 1.1.12 следует удалить места использования.
// См. РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьНастройкиЗаполненияОтчета.
Процедура ПроверитьНастройкиЗаполненияОтчета(ПараметрыОтчета, ВыполняемоеОповещение, СтандартнаяОбработка = Истина) Экспорт
	
	ЗарплатаКадрыКлиентВнутренний.ПроверитьНастройкиЗаполненияОтчета(ПараметрыОтчета, ВыполняемоеОповещение, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Подключает обработчик ожидания перед запуском обработчика события (активизация строки списка, запуск расчета и др.).
//
// Параметры:
//		Форма
//		ИмяОбработчикаОжидания
//		ФлагНеобходимостиОбработкиСобытия - Булево, используется, когда форме нужно выполнить какие то действия
//					в обработчике перед записью или при активизации другой строки списка.
//
Процедура ПодключитьОбработчикОжиданияОбработкиСобытия(Форма, ИмяОбработчикаОжидания, ФлагНеобходимостиОбработкиСобытия = Неопределено) Экспорт
	
	ПериодОжидания = ПериодОжиданияЗапускаОбработчикаСобытия();
	Если ПериодОжидания > 0 Тогда
		Форма.ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, ПериодОжидания, Истина);
	КонецЕсли; 
	
	ФлагНеобходимостиОбработкиСобытия = Истина;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Проверка заполнения свойств.

// Проверяет заполнение реквизитов переданного объекта по заданным правилам.
// Формирует и выводит сообщение у поля управляемой формы, связанного с реквизитом объекта.
// 
// Параметры:
//	ПроверяемыйОбъект    - Произвольный - любой объект с доступом к полям по имени.
//	ПроверяемыеСвойства  - Структура    - свойства, заполнение которых нужно проверить:
//  	* Ключ     - Строка - имя проверяемого свойства, 
//		* Значение - Строка - сообщение об ошибке, если свойство не заполнено.
//	СообщитьПользователю - Булево       - сообщать пользователю о незаполненных свойствах.
//
// Возвращаемое значение:
//	Булево - Истина, если все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваЗаполнены(ПроверяемыйОбъект, ПроверяемыеСвойства, СообщитьПользователю = Истина) Экспорт
	Возврат 
		ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(
			ПроверяемыйОбъект, 
			ПроверяемыеСвойства, 
			?(СообщитьПользователю, ОбщегоНазначенияКлиент, Неопределено));
КонецФункции

// Проверяет заполнение реквизитов формы по заданным правилам.
// 
// Параметры:
//	ПроверяемаяФорма     - ФормаКлиентскогоПриложения - форма, заполнение реквизитов которой проверяется.
//	ПроверяемыеСвойства	 - СписокЗначений   - свойства, заполнение которых нужно проверить:
//  	* Значение      - Строка - путь к данным формы, 
//		* Представление - Строка - сообщение об ошибке, если свойство не заполнено.
//	СообщитьПользователю - Булево           - сообщать пользователю о незаполненных свойствах.
//								
// Возвращаемое значение:
//	Булево - Истина, если все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваФормыЗаполнены(ПроверяемаяФорма, ПроверяемыеСвойства, СообщитьПользователю = Ложь) Экспорт
	Возврат 
		ЗарплатаКадрыКлиентСервер.СвойстваФормыЗаполнены(
			ПроверяемаяФорма, 
			ПроверяемыеСвойства, 
			?(СообщитьПользователю, ОбщегоНазначенияКлиент, Неопределено));
КонецФункции

// Проверяет заполнение реквизита "Организация" у переданного объекта.
// Если поле "Организация" не заполнено, выводит на экран окно предупреждения.
// 
// Параметры:
//	ПроверяемыйОбъект   - Произвольный - любой объект с доступом к полям по имени и имеющий свойство "Организация".
//	ТекстПредупреждения	- Строка, ФорматированнаяСтрока - Текст предупреждения о незаполненной организации. 
//                                                        Необязательный, по умолчанию: 
//                                                        "Для заполнения документа необходимо выбрать организацию."						
//                                                        Если передано пустое значение, предупреждение не выводится. 
//	Заголовок           - Строка                        - заголовок окна предупреждения. 
//                                                        Необязательный, по умолчанию: 
//                                                        "Ошибка заполнения"						
//
//	Возвращаемое значение:
//		Булево - Истина, если организация заполнена, Ложь - в противном случае. 
//			
Функция ОрганизацияЗаполнена(ПроверяемыйОбъект, Знач ТекстПредупреждения = Неопределено, Знач Заголовок = Неопределено) Экспорт
	
	Если ТекстПредупреждения = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru='Для заполнения документа необходимо выбрать организацию.'")
	КонецЕсли;	
	Если Заголовок = Неопределено Тогда
		Заголовок = НСтр("ru = 'Ошибка заполнения'")
	КонецЕсли;	
	
	ОрганизацияЗаполнена = ЗначениеЗаполнено(ПроверяемыйОбъект["Организация"]); // АПК:1297 не локализуется, имя поля.
	
	Если Не ОрганизацияЗаполнена И ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения, , Заголовок);
	КонецЕсли;
	
	Возврат ОрганизацияЗаполнена;
	
КонецФункции

// Обработчики событий поля ввода.

Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////

// Обработчик события, связанного с редактированием места рождения.
// Событие НачалоВыбора в поля место рождения в таблице.
Процедура МестоРожденияВТаблицеНачалоВыбора(МестоРождения, МестоРожденияПредставление, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", МестоРождения);
	
	Оповещение = Новый ОписаниеОповещения("МестоРожденияВТаблицеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВводМестаРождения", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура МестоРожденияВТаблицеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеМестаРождения = Неопределено;
	
	Если Результат <> Неопределено Тогда
		ДанныеМестаРождения = Новый Структура;
		ДанныеМестаРождения.Вставить("МестоРождения", Результат);
		ДанныеМестаРождения.Вставить("МестоРожденияПредставление", ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(Результат));
	КонецЕсли;	
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДанныеМестаРождения);
	КонецЕсли;
	
КонецПроцедуры

// Редактирование данных физического лица.
Процедура ОткрытьФормуФизическогоЛицаДляРедактирования(ФизическоеЛицо, ИмяЭлемента) Экспорт 
	
	СтруктураСоответствияПолей = СоответствиеПолейФормыДокументаПолямФормыФизическогоЛица();
	Параметры = Новый Структура("Ключ, ТекущийЭлемент", ФизическоеЛицо, СтруктураСоответствияПолей[ИмяЭлемента]);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Параметры);
	
КонецПроцедуры

// Редактирование данных СКЕ.
Процедура ОткрытьФормуРедактированияСамостоятельнойКлассификационнойЕдиницы(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма, ЗаписатьЭлемент", Форма, Истина);
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРедактированияСамостоятельнойКлассификационнойЕдиницыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьЭлемент = Ложь;
		ОткрытьФормуРедактированияСамостоятельнойКлассификационнойЕдиницыЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм КлючевыеРеквизитыЗаполненияФормы
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
//

// Процедура очищает таблицы формы подключенные к механизму.
Процедура КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(Форма) Экспорт
	МассивИменТаблиц = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицы);
		Таблица.Очистить();
	КонецЦикла; 
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
КонецПроцедуры

#КонецОбласти

#Область УправлениеОтборамиВФормахСДинамическимСписком

// Возвращает значения заполнения, передаваемые при создании нового документа из формы списка журнала
// см. описание ЗарплатаКадры.ДинамическийСписокПередНачаломДобавления.
//
// Параметры:
//		Форма - Форма списка журнала документов
//		ПараметрыОткрытия - Структура, в которую будут добавлены значения для открытия нового документа
//		ТипДокумента - тип создаваемого документа.
//
Процедура ДинамическийСписокПередНачаломДобавления(Форма, ПараметрыОткрытия, ТипДокумента, ИмяПоляСотрудник = "Сотрудник", ИмяПоляФизическоеЛицо = "ФизическоеЛицо") Экспорт
	
	// Получим физическое лицо из параметров критерия отбора
	Если Форма.ИспользоватьКритерийОтбора Тогда
		НайденныеСтроки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ТипПараметра", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")));
		
		Если НайденныеСтроки.Количество() > 0
			И Форма[НайденныеСтроки[0].ИмяРеквизитаФормыПараметраИспользование] = Истина Тогда
			
			ФизическоеЛицо = Форма[НайденныеСтроки[0].ИмяРеквизитаФормыПараметра];
		Иначе
			ФизическоеЛицо = Неопределено;
		КонецЕсли;
	Иначе
		ФизическоеЛицо = Неопределено;
	КонецЕсли;
	
	// Получим организацию, установленную в отборе
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	ПользовательскиеНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки;
	ФиксированныеОтборы = ЗарплатаКадрыКлиентСервер.ФиксированныйОтборДинамическогоСписка(Форма, Список);
	
	ОрганизацияОтбора = Неопределено;
	Для каждого НастройкаКомпоновщика Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			Если НастройкаКомпоновщика.ДоступныеПоляОтбора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДоступноеПолеВыбораОрганизация = НастройкаКомпоновщика.ДоступныеПоляОтбора.Элементы.Найти("Организация");
			Если ДоступноеПолеВыбораОрганизация = Неопределено Или ДоступноеПолеВыбораОрганизация.Тип <> Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ЭлементОтбора Из НастройкаКомпоновщика.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ДоступноеПолеВыбораОрганизация.Поле И ЭлементОтбора.Использование Тогда
					ОрганизацияОтбора = ЭлементОтбора.ПравоеЗначение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ОрганизацияОтбора = Неопределено Тогда
				ОрганизацияФиксированногоОтбора = ФиксированныеОтборы.Получить(ДоступноеПолеВыбораОрганизация.Поле);
				Если ОрганизацияФиксированногоОтбора <> Неопределено Тогда
					ОрганизацияОтбора = ФиксированныеОтборы.Получить(ДоступноеПолеВыбораОрганизация.Поле).ПравоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадрыВызовСервера.ДинамическийСписокПередНачаломДобавления(ПараметрыОткрытия, ФизическоеЛицо, ОрганизацияОтбора, ТипДокумента, ИмяПоляСотрудник, ИмяПоляФизическоеЛицо);
	
КонецПроцедуры

// Устанавливает отбор динамического списка по выбранному значению параметра отбора
//
// Параметры:
//		Форма - форма списка динамического списка
//		ИмяЭлемента - имя изменяемого элемента формы.
//
Процедура ПараметрОтбораНаФормеСДинамическимСпискомПриИзменении(Форма, ИмяЭлемента) Экспорт
	
	ОписаниеИзменения = ОписаниеИзмененияПараметраОтбораДинамическогоСписка(Форма, ИмяЭлемента);
	УстановитьПараметрДинамическогоСпискаПоОписаниюИзменения(Форма, ОписаниеИзменения);
	
КонецПроцедуры

Функция ОписаниеИзмененияПараметраОтбора() Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяПараметра", "");
	Описание.Вставить("ИзменениеЗначения", Ложь);
	Описание.Вставить("ИзменениеИспользования", Ложь);
	Описание.Вставить("Использование", Ложь);
	Описание.Вставить("Значение", Неопределено);
	Описание.Вставить("ЕстьМодификация", Ложь);
	Возврат Описание;

КонецФункции

// Возвращает описание изменения параметра отбора динамического списка и настраивает элементы управления отбора.
//
// Параметры:
//  Форма		- Форма  - Форма с динамическим списком.
//  ИмяЭлемента - Строка - Имя измененного элемента формы.
// 
// Возвращаемое значение:
//  Структура - Описание изменения параметра отбора.
//   * ИмяПараметра            - Строка       - Имя параметра отбора.
//   * ИзменениеЗначения       - Булево       - Истина если изменено значение параметра отбора.
//   * ИзменениеИспользования  - Булево       - Истина если изменено использование параметра отбора.
//   * Использование           - Булево       - Текущее использование параметра отбора.
//   * Значение                - Произвольный - Текущее значение параметра отбора.
//   * ЕстьМодификация         - Булево       - Истина если параметр отбора применяется с модифицированным запросом.
//   * ОписаниеМодификации     - Структура    - Свойство присутствует только если ЕстьМодификация = Истина
//         свойства см. в ЗарплатаКадрыРасширенныйКлиент.ОписаниеМодификацииДинамическогоСписка.
//
Функция ОписаниеИзмененияПараметраОтбораДинамическогоСписка(Форма, ИмяЭлемента) Экспорт
	
	Описание = ОписаниеИзмененияПараметраОтбора();
	
	Строки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяЭлементаФормыПараметра", ИмяЭлемента));
	Если Строки.Количество() > 0 Тогда
		// Изменение значения параметра, установим использование.
		СтрокаПараметра = Строки[0];
		
		Описание.ИзменениеЗначения = Истина;
		Описание.ИзменениеИспользования = Не Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование];
		Описание.Использование = Истина;
		
		Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование] = Истина;
		
	Иначе
		
		Строки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяЭлементаФормыПараметраИспользование", ИмяЭлемента));
		Если Строки.Количество() > 0 Тогда
			// Изменение использования параметра.
			СтрокаПараметра = Строки[0];
			
			Описание.ИзменениеИспользования = Истина;
			Описание.Использование = Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование];
			
		Иначе
			Возврат Описание;
		КонецЕсли;
		
	КонецЕсли;
	
	Описание.ИмяПараметра = СтрокаПараметра.ИмяПараметра;
	Описание.Значение = Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметра];
	
	ЗарплатаКадрыКлиентВнутренний.ДобавитьОписаниеМодификацииДинамическогоСписка(Описание, СтрокаПараметра);
	
	Возврат Описание;
	
КонецФункции

// Устанавливает отбор динамического списка по описанию изменения параметра.
//
// Параметры:
//  Форма             - Форма     - форма списка динамического списка
//  ОписаниеИзменения - Структура - Описание изменения параметра отбора динамического списка,
//                                  свойства см. в ОписаниеИзмененияПараметраОтбораДинамическогоСписка.
//
Процедура УстановитьПараметрДинамическогоСпискаПоОписаниюИзменения(Форма, ОписаниеИзменения) Экспорт
	
	Если ОписаниеИзменения.ЕстьМодификация И ОписаниеИзменения.ОписаниеМодификации.ИзменениеЗапроса Тогда
		Форма.НастроитьДинамическийСписокНаСервере(ОписаниеИзменения.ОписаниеМодификации);
	КонецЕсли;
	
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		ОписаниеИзменения.ИмяПараметра,
		ОписаниеИзменения.Значение,
		ОписаниеИзменения.Использование);
	
КонецПроцедуры

#КонецОбласти

Процедура КомментарийНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Знач ИмяРеквизита = "Объект.Комментарий", Знач Заголовок = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		Форма,
		ИмяРеквизита,
		Заголовок);
	
КонецПроцедуры

#Область ЗаконодательныеЗначения

// Запускает фоновое задание, восстанавливающее начальные значения законодательных классификаторов.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, в которой расположена команда вызывающая команда.
//   ИменаОбъектовМетаданных - Строка - Полные имена классификаторов, данные которых необходимо сбросить.
//   ОповещениеЗавершения - ОписаниеОповещения - Необязательный. Описание процедуры обновления данных вызывающей формы,
//         которую необходимо вызвать после завершения фонового задания.
//       В 1 параметре процедуры передается информация о фоновом задании:
//         Неопределено или Структура с полями: Статус ("Выполнено" или "Ошибка"),
//         АдресРезультата, КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки.
//       Если не указано, то обновление вызывающей формы может быть реализовано в процедуре ОбработкаОповещения
//         с условием ИмяСобытия = "ВосстановленыНачальныеЗначения".
//       Примечание. Обработка ошибок выполнится автоматически.
//   ТекстВопроса - Строка - Необязательный. Текст вопроса, который необходимо задать при сбросе значений.
//
Процедура ВосстановитьНачальныеЗначенияСлужебный(Форма, ИменаОбъектовМетаданных, ОповещениеЗавершения = Неопределено, ТекстВопроса = "") Экспорт
	Контекст = Новый Структура("Форма, ИменаОбъектовМетаданных, ОповещениеЗавершения", Форма, ИменаОбъектовМетаданных, ОповещениеЗавершения);
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияПослеОтветаНаВопрос", ЭтотОбъект, Контекст);
	
	Если ТекстВопроса = "" Тогда
		Если ИменаОбъектовМетаданных = "" Тогда
			ТекстВопроса = НСтр("ru='При восстановлении начальных значений, в справочниках будет произведен поиск и пометка на удаление
				|задвоенных элементов, замена ссылок помеченных на удаление элементов, создание недостающих элементов, выполнена очистка
				|записей регистров сведений и произведено заполнение регистров заново.
				|
				|Восстановить начальные значения?'");
		ИначеЕсли СтрНачинаетсяС(ИменаОбъектовМетаданных, "Справочник.") Тогда
			ТекстВопроса = НСтр("ru='При восстановлении начальных значений будет произведен поиск и пометка на удаление
				|задвоенных элементов, замена ссылок помеченных на удаление элементов, создание недостающих элементов.
				|
				|Восстановить начальные значения?'");
		ИначеЕсли СтрНачинаетсяС(ИменаОбъектовМетаданных, "РегистрСведений.") Тогда
			ТекстВопроса = НСтр("ru='При восстановлении начальных значений будет выполнена очистка записей регистра
				|и произведено заполнение регистра заново.
				|
				|Восстановить начальные значения?'");
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// Продолжение процедуры ВосстановитьНачальныеЗначенияСлужебный.
Процедура ВосстановитьНачальныеЗначенияПослеОтветаНаВопрос(Результат, Контекст) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗадания = ЗарплатаКадрыВызовСервера.ВосстановитьНачальныеЗначения(Контекст.ИменаОбъектовМетаданных, Контекст.Форма.УникальныйИдентификатор);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияПослеЗавершенияФоновогоЗадания", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ПараметрыЗадания, ОбработчикЗавершения);
КонецПроцедуры

// Продолжение процедуры ВосстановитьНачальныеЗначенияСлужебный.
//   Обработчик завершения длительной операции по восстановлению начальных значений.
//
// Параметры:
//   Задание - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено.
//       * Статус - Строка - "Выполнено", если задание было успешно выполнено;
//           "Ошибка", если задание завершено с ошибкой.
//       * АдресРезультата  - Строка - адрес временного хранилища, в которое будет
//           помещен (или уже помещен) результат работы процедуры.
//       * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат,
//           содержит адрес дополнительного временного хранилища,
//           в которое будет помещен (или уже помещен) результат работы процедуры.
//       * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//       * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//       * Сообщения - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю, 
//           сформированных в процедуре-обработчике длительной операции.
//   ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
//
Процедура ВосстановитьНачальныеЗначенияПослеЗавершенияФоновогоЗадания(Задание, Контекст) Экспорт
	Статус = ?(Задание = Неопределено, "Отменено", Задание.Статус);
	
	// Обработка ошибок фонового задания.
	Если Статус = "Ошибка" Тогда
		Кратко = НСтр("ru = 'При восстановлении начальных значений возникла ошибка:'") + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		ИнформированиеПользователяКлиент.Предупредить(Кратко, Задание.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	// Актуализация формы.
	Если Контекст.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершения, Задание);
	Иначе
		ЭлементСписок = Контекст.Форма.Элементы.Найти("Список");
		Если ЭлементСписок <> Неопределено Тогда
			ЭлементСписок.Обновить();
		КонецЕсли;
		Если Статус = "Выполнено" Тогда
			ПоказатьОповещениеПользователя(, , НСтр("ru = 'Начальные значения восстановлены.'"), БиблиотекаКартинок.Успешно32);
			Оповестить("ВосстановленыНачальныеЗначения");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Открывает форму редактирования законодательных значений
//
Процедура ОткрытьОбработкуРедактированиеЗаконодательныхЗначений() Экспорт
	ЗарплатаКадрыКлиентВнутренний.ОткрытьОбработкуРедактированиеЗаконодательныхЗначений();
КонецПроцедуры

#КонецОбласти

#Область РедактированиеИстории

Функция ЗаблокироватьОбъектВФормеВладельцеПриРедактированииИстории(Форма) Экспорт
	
	Если Не Форма.ВладелецФормы.ЗаблокироватьОбъектВФормеВладельце() Тогда
		
		СотрудникиКлиентСервер.УстановитьРежимТолькоПросмотрВФормеРедактированияИстории(Форма);
		Форма.Модифицированность = Ложь;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает период ожидания формы, перед запуском обработчиков событий.
//
Функция ПериодОжиданияЗапускаОбработчикаСобытия()
	
	ПериодОжидания = 0;
	#Если ВебКлиент Тогда
		ПериодОжидания = 1;
	#Иначе
		ПериодОжидания = 0.1;
	#КонецЕсли
	
	Возврат ПериодОжидания;
	
КонецФункции

Функция СоответствиеПолейФормыДокументаПолямФормыФизическогоЛица()
	
	СтруктураСоответствия = Новый Структура();
	СтруктураСоответствия.Вставить("Фамилия", "Наименование");
	СтруктураСоответствия.Вставить("Имя", "Наименование");
	СтруктураСоответствия.Вставить("Отчество", "Наименование");
	СтруктураСоответствия.Вставить("Пол", "ФизлицоПол");
	СтруктураСоответствия.Вставить("ДатаРождения", "ФизлицоДатаРождения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "ФизическоеЛицоМестоРождения");
	СтруктураСоответствия.Вставить("Гражданство", "ГражданствоФизическихЛицСтрана");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("Телефоны", "ГруппаКонтактнаяИнформация");	
	СтруктураСоответствия.Вставить("ДокументУдостоверяющийЛичность", "ДокументыФизическихЛицВидДокумента"); 
	СтруктураСоответствия.Вставить("АдресЭлектроннойПочты", "ГруппаКонтактнаяИнформация"); 
	
	Возврат СтруктураСоответствия;
	
КонецФункции

Процедура ОткрытьФормуРедактированияРегистрацииВНалоговомОргане(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма, ЗаписатьЭлемент", Форма, Истина);
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРедактированияРегистрацииВНалоговомОрганеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьЭлемент = Ложь;
		ОткрытьФормуРедактированияРегистрацииВНалоговомОрганеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияРегистрацииВНалоговомОрганеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ДополнительныеПараметры.ЗаписатьЭлемент И Не Форма.Записать() Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Форма.Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеРегистрацииВНалоговомОргане", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаЗначенийСтроковогоРеквизита(Элемент, СтандартнаяОбработка, ВидСтроки, ПредставлениеСписка, ПредставлениеЗначения) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСтроки", ВидСтроки);
	ПараметрыФормы.Вставить("ПредставлениеСписка", ПредставлениеСписка);
	ПараметрыФормы.Вставить("ПредставлениеЗначения", ПредставлениеЗначения);
	
	ОткрытьФорму("РегистрСведений.ЗначенияСтроковыхРеквизитов.ФормаСписка", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПодборЗначенияСтроковогоРеквизита(Текст, ДанныеВыбора, СтандартнаяОбработка, ВидСтроки) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = ЗарплатаКадрыВызовСервера.ДанныеАвтоподбораЗначенияСтроковогоРеквизита(Текст, ВидСтроки);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаОрганизацииПередЗаписью

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьСНЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ДополнительныеПараметры.Отказ = Истина;
		ДополнительныеПараметры.ДанныеОрганизации.ПрименятьСевернуюНадбавку = Истина;
		Возврат;
	Иначе
		// Необходимо удалить северные надбавки.
		ДополнительныеПараметры.ДополнительныеОбработки.Добавить("УдалитьСН");
		ФормаОрганизацииПередЗаписьюОбработатьРК(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьРК(ДополнительныеПараметры) 
	
	Если ДополнительныеПараметры.НеобходимостьОбработки.ОбработатьРК Тогда
		// Запрос про районный коэффициент.
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы отменили применение районного коэффициента для организации ""%1"". 
						|Размер районного коэффициента будет удален для всех подразделений этой организации. 
						|Предыдущие результаты расчетов сохранятся, но в дальнейшем доплата по районному коэффициенту выполняться не будет.
						|Удалить районные коэффициенты?'"), ДополнительныеПараметры.ДанныеОрганизации.Наименование);
		Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюОбработатьРКЗавершение", ЭтотОбъект, ДополнительныеПараметры);				
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Иначе 
		ФормаОрганизацииПередЗаписьюОбработатьПФР(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьРКЗавершение(Ответ, ДополнительныеПараметры) Экспорт 

	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ДополнительныеПараметры.Отказ = Истина;
		ДополнительныеПараметры.ДанныеОрганизации.ПрименятьРайонныйКоэффициент = Истина;
		Возврат;
	Иначе
		// Необходимо удалить районные коэффициенты.
		ДополнительныеПараметры.ДополнительныеОбработки.Добавить("УдалитьРК");
		ФормаОрганизацииПередЗаписьюОбработатьПФР(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьПФР(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДополнительныеОбработки.Количество() > 0 Тогда
		// По умолчанию - отказ от записи.
		ДополнительныеПараметры.Отказ = Истина;
		ОценкаПроизводительностиКлиент.ЗамерВремени("СохранениеИзмененийВЗарплатеОрганизации");
		ЗарплатаКадрыВызовСервера.ОбработкаДанныхПриЗаписиОрганизации(ДополнительныеПараметры.ДанныеОрганизации.Ссылка, ДополнительныеПараметры.ДополнительныеОбработки);
		// Если обработка данных удачно выполнена - запись выполняется.
		ДополнительныеПараметры.Отказ = Ложь;
	КонецЕсли;
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились сведения о регистрации в органе ПФР'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании Вы изменили сведения о регистрации в органе ПФР. 
		|Если Вы исправили прежние сведения о регистрации (они были ошибочными), нажмите ""Исправлена ошибка"".
		|Если сведения о регистрации изменились с %1, нажмите ""%2""'"), 
		Формат(ДополнительныеПараметры.Форма.ИсторияРегистрацийВОрганеПФР.Период, "ДФ='к ""кв."" ггг ""г.""'"),
		ТекстКнопкиДа);
		
	Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюОбработатьПФРЗавершение", ЭтотОбъект, ДополнительныеПараметры);	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ДополнительныеПараметры.Форма, "ИсторияРегистрацийВОрганеПФР", ТекстВопроса, ТекстКнопкиДа, ДополнительныеПараметры.Отказ, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьПФРЗавершение(Отказ, ДополнительныеПараметры) Экспорт 

	ДополнительныеПараметры.ДанныеОрганизации.РегистрационныйНомерПФР = ДополнительныеПараметры.Форма.ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	
	Если Отказ Тогда
		ДополнительныеПараметры.Отказ = Истина; 
		Возврат;
	КонецЕсли;
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились сведения о территориальных условиях ПФР'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании Вы изменили сведения о территориальных условиях ПФР.
		|Если Вы исправили прежние сведения о территориальных условиях (они были ошибочными), нажмите ""Исправлена ошибка"".
		|Если сведения о территориальных условиях ПФР изменились с %1, нажмите ""%2""'"), 
		Формат(ДополнительныеПараметры.Форма.ТерриториальныеУсловияПФР.Период, "ДФ='к ""кв."" ггг ""г.""'"),
		ТекстКнопкиДа);
		
	Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры);	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ДополнительныеПараметры.Форма,"ТерриториальныеУсловияПФР", ТекстВопроса, ТекстКнопкиДа, ДополнительныеПараметры.Отказ, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если Отказ Тогда
		ДополнительныеПараметры.Отказ = Истина; 
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена", Истина);
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ПараметрыЗаписи);
	ИначеЕсли Форма.Записать(ПараметрыЗаписи) И ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда 
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Определяет сведения о типе, необходимые в контексте клиента.
Функция НастройкиТипа(Тип)
	Результат = Новый Структура("ПоказыватьКомандыРаботыСФайлами", Истина);
	
	УчетПособийСоциальногоСтрахованияКлиент.ПриОпределенииНастроекТипа(Тип, Результат);
	ПерсонифицированныйУчетКлиент.ПриОпределенииНастроекТипа(Тип, Результат);
	УчетНДФЛКлиент.ПриОпределенииНастроекТипа(Тип, Результат);
	
	Возврат Результат;
КонецФункции

// Продолжение процедуры РаботаСФайламиЗаписатьТекст.
Процедура РаботаСФайламиПослеЗаписиДвоичныхДанных(ДополнительныеПараметры) Экспорт
	Возврат; // Обработка результата не требуется.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

Процедура ОткрытьФормуРедактированияСамостоятельнойКлассификационнойЕдиницыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ДополнительныеПараметры.ЗаписатьЭлемент И Не Форма.Записать() Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Форма.Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСамостоятельнойКлассификационнойЕдиницы", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

#КонецОбласти