#Область ПрограммныйИнтерфейс

// Параметры:
//  Логин - Строка 
//  Пароль - Строка
//
Процедура ПриВыполненииАвторизации(ПараметрыАвторизации) Экспорт
	
КонецПроцедуры

Процедура ПередЗаписьюРаспознанногоДокумента(
		ДокументОбъект,
		РезультатОбратнойСвязи = Неопределено
	) Экспорт
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		ПараметрНомер = "";
		ПараметрДата = "";
		ПараметрСумма = "";
		
		ОсновныеРеквизиты = Новый Структура;
		Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
			
			Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
				ОсновныеРеквизиты.Вставить("Покупатель", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПродавецОрганизация", "Организация");
			Иначе
				ОсновныеРеквизиты.Вставить("Продавец", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПокупательОрганизация", "Организация");
			КонецЕсли;
		ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
			
			Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
				ОсновныеРеквизиты.Вставить("Покупатель", "Контрагент");
				ОсновныеРеквизиты.Вставить("Исполнитель", "Организация");
			Иначе
				ОсновныеРеквизиты.Вставить("Продавец", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПокупательОрганизация", "Организация");
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ДокументОбъект.РеквизитыДокумента Цикл
			Если СтрокаТаблицы.ИмяРеквизита = "НомерДокумента" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрНомер = СтрокаТаблицы.Значение;
				Иначе
					ПараметрНомер = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ИмяРеквизита = "ДатаДокумента" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрДата = Формат(СтрокаТаблицы.Значение, "ДФ='dd.MM.yyyy'"); // + НСтр("ru = ' г.'");
				Иначе
					ПараметрДата = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ИмяРеквизита = "ИтогоВсего" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрСумма = СтрокаТаблицы.Значение;
				Иначе
					ПараметрСумма = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли ОсновныеРеквизиты.Свойство(СтрокаТаблицы.ИмяРеквизита) Тогда
				ДокументОбъект[ОсновныеРеквизиты[СтрокаТаблицы.ИмяРеквизита]] = СтрокаТаблицы.Значение;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаНаименование = НСтр("ru = '№ %1 от %2'");
		Если ЗначениеЗаполнено(ПараметрСумма)Тогда
			СтрокаНаименование = СтрокаНаименование + НСтр("ru = ' на сумму %3'");
		КонецЕсли;
		ДокументОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименование, ПараметрНомер, ПараметрДата, ПараметрСумма);
		
		Если РезультатОбратнойСвязи <> Неопределено Тогда
			РезультатОбратнойСвязи.НомерРаспознанногоДокумента = ДокументОбъект.Номер;
			РезультатОбратнойСвязи.ЭтоВходящийДокумент = (ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
			РезультатОбратнойСвязи.НомерДокумента = ПараметрНомер;
			РезультатОбратнойСвязи.ДатаДокумента = ПараметрДата;
			РезультатОбратнойСвязи.СуммаДокумента = ПараметрСумма;
			РезультатОбратнойСвязи.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Контрагент);
			РезультатОбратнойСвязи.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Организация);
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ДокументОбъект.ТипДокумента) Тогда
			ДокументОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"), ДокументОбъект.ТипДокумента, ДокументОбъект.Дата);
		ИначеЕсли ДокументОбъект.ТребуетсяОплата Тогда
			ДокументОбъект.Наименование = НСтр("ru = 'Требуется оплата'");
		Иначе
			ДокументОбъект.Наименование = НСтр("ru = 'Неопознанный документ'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСопоставленииТиповДокументов(СоответствиеТиповДокументов) Экспорт
	
КонецПроцедуры

Процедура ПриСопоставленииРеквизитовДокумента(ТипДокумента, СопоставленныеРеквизиты) Экспорт
	
КонецПроцедуры

Функция ПриПриведенииТипаРеквизитаВОбъекте(
		МетаданныеОбъекта,
		ПереданноеЗначение,
		ТипЭтогоЗначения,
		ТипРеквизитаВОбъекте
	) Экспорт
	
	Если ТипРеквизитаВОбъекте = Тип("ПеречислениеСсылка.ВидыСтавокНДС")
		И ТипЭтогоЗначения = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		
		Результат = Перечисления.ВидыСтавокНДС.ВидСтавки(ПереданноеЗначение);
	Иначе
		Результат = ПереданноеЗначение;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ПриОпределенииЮрФизЛицаПоОрганизационнойФорме(Результат) Экспорт
	
	Значение = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Результат.Вставить("публичное акционерное общество", Значение);
	Результат.Вставить("открытое акционерное общество", Значение);
	Результат.Вставить("закрытое акционерное общество", Значение);
	Результат.Вставить("общество с ограниченной ответственностью", Значение);
	Результат.Вставить("акционерное общество", Значение);
	Результат.Вставить("федеральное государственное унитарное предприятие", Значение);
	Результат.Вставить("пао", Значение);
	Результат.Вставить("оао", Значение);
	Результат.Вставить("зао", Значение);
	Результат.Вставить("ооо", Значение);
	Результат.Вставить("ао", Значение);
	Результат.Вставить("фгуп", Значение);
	
	Значение = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Результат.Вставить("индивидуальный предприниматель", Значение);
	Результат.Вставить("ип", Значение);
	
КонецПроцедуры

// В параметре Параметры.ТекстЗапросаКандидаты требуется выбрать:
// - Ссылка
// - ДополнительнаяСсылка
// - Все поля, добавленные в параметр ВесаРеквизитовПредварительнойОценки
// или оставить параметр пустым, тогда будет составлен запрос по-умолчанию к объекту метаданного.
//
Процедура ПриОпределенииПараметровНечеткогоПоиска(Параметры, МетаданныеОбъекта) Экспорт
	
	// БУХ
	Если МетаданныеОбъекта = Метаданные.Справочники.Номенклатура Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("НаименованиеПолное", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Артикул", "Артикул");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.ВесаРеквизитов.Вставить("Артикул", 0.1);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("НаименованиеПолное");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Артикул");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НаименованиеПолное", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Артикул", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.Контрагенты
		Или МетаданныеОбъекта = Метаданные.Справочники.Организации Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("НаименованиеПолное", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("ИНН", "ИНН");
		Параметры.СоответствиеРеквизитов.Вставить("КПП", "КПП");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.ВесаРеквизитов.Вставить("ИНН", 1);
		Параметры.ВесаРеквизитов.Вставить("КПП", 0.5);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("НаименованиеПолное");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("ИНН");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НаименованиеПолное", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("ИНН", 1);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("КПП", 0);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.Банки Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Код", "Код");
		Параметры.ВесаРеквизитов.Вставить("Код", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Код");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Код", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.КлассификаторЕдиницИзмерения Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Код", "Код");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 0.75);
		Параметры.ВесаРеквизитов.Вставить("Код", 1);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Код");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.75);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Код", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.ДоговорыКонтрагентов Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Номер", "Номер");
		Параметры.СоответствиеРеквизитов.Вставить("Дата", "Дата");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		
		Параметры.ВесаРеквизитов.Вставить("Номер", 1);
		Параметры.ВесаРеквизитов.Вставить("Дата", 0.75);
		Параметры.ВесаРеквизитов.Вставить("Наименование", 0.75);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("Номер");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Дата");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Номер", 1);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Дата", 0.75);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.75);
		
	Иначе
		
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 1);
		
	КонецЕсли;
	// БУХ конец
	
КонецПроцедуры

Процедура ПриЗаполненииРаспознанногоДокумента(ДокументОбъект, ДокументСсылка) Экспорт
	
	ПроверяемыеРеквизиты = Новый Структура;
	ПроверяемыеРеквизиты.Вставить("Исполнитель", Неопределено);
	ПроверяемыеРеквизиты.Вставить("ПродавецОрганизация", Неопределено);
	ПроверяемыеРеквизиты.Вставить("ПокупательОрганизация", Неопределено);
	ПроверяемыеРеквизиты.Вставить("СуммаВключаетНДС", Ложь);
	ПроверяемыеРеквизиты.Вставить("ТекстНДС", "");
	ПроверяемыеРеквизиты.Вставить("ИтогоСумма", 0);
	ПроверяемыеРеквизиты.Вставить("ИтогоСуммаНДС", 0);
	ПроверяемыеРеквизиты.Вставить("ИтогоВсего", 0);
	
	Для Каждого РеквизитШапки Из ДокументОбъект.РеквизитыДокумента Цикл
		// Если Грузоотправитель совпадает с полем Продавец или Грузополучатель - с полем Покупатель, 
		// тогда Значение нужно оставить пустым
		Если РеквизитШапки.ИмяРеквизита = "Грузоотправитель" Тогда
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Продавец", "ИмяРеквизита");
			Если НайденнаяСтрока <> Неопределено И РеквизитШапки.Значение = НайденнаяСтрока.Значение Тогда
				РеквизитШапки.Значение = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли РеквизитШапки.ИмяРеквизита = "Грузополучатель" Тогда
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Покупатель", "ИмяРеквизита");
			Если НайденнаяСтрока <> Неопределено И РеквизитШапки.Значение = НайденнаяСтрока.Значение Тогда
				РеквизитШапки.Значение = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли РеквизитШапки.ИмяРеквизита = "СуммаВключаетНДС" Тогда
			СтароеЗначение = РеквизитШапки.Значение;
			
			Если СтрНачинаетсяС(РеквизитШапки.РаспознанныйТекст, "В том числе НДС") Тогда
				РеквизитШапки.Значение = Истина;
			Иначе
				// "Без налога (НДС)"
				// "Сумма НДС"
				РеквизитШапки.Значение = Ложь;
			КонецЕсли;
			
			ПроверяемыеРеквизиты.Вставить("СуммаВключаетНДС", РеквизитШапки.Значение);
			ПроверяемыеРеквизиты.Вставить("ТекстНДС", РеквизитШапки.РаспознанныйТекст);
			ПроверяемыеРеквизиты.Вставить("ИзмениласьСуммаВключаетНДС", СтароеЗначение <> РеквизитШапки.Значение);
		ИначеЕсли ПроверяемыеРеквизиты.Свойство(РеквизитШапки.ИмяРеквизита) Тогда
			ПроверяемыеРеквизиты.Вставить(РеквизитШапки.ИмяРеквизита, РеквизитШапки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПродавецОрганизация) И НЕ ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПокупательОрганизация) Тогда
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		Иначе
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		КонецЕсли;
	ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.Исполнитель) И НЕ ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПокупательОрганизация) Тогда
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		Иначе
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		КонецЕсли;
	КонецЕсли;
	
	// На основании направления можно определить Контрагента и Организацию, а по ним заполнить Договор
	// 
	ПараметрыВыбораДоговора = РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора(ДокументОбъект);
	ЕстьНезаполненныйПараметр = Ложь;
	Для Каждого ПараметрВыбора Из ПараметрыВыбораДоговора Цикл
		Если Не ЗначениеЗаполнено(ПараметрВыбора.Значение) Тогда
			// для массива тоже подходит. т.е. при условии ТипЗнч(ПараметрВыбора.Значение) = Тип("Массив")
			ЕстьНезаполненныйПараметр = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНезаполненныйПараметр Тогда
		// Используем заполнение без нечеткого поиска
		РаспознаваниеДокументовСлужебный.ЗаполнитьДоговорКонтрагента(ДокументОбъект);
	Иначе
		
		ОтборМетаданных = Новый Массив;
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"Владелец", "=", ПараметрыВыбораДоговора.Контрагент));
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"Организация", "=", ПараметрыВыбораДоговора.Организация));
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"ВидДоговора", "В", ПараметрыВыбораДоговора.ВидыДоговоров));
		
		ДанныеПоиска = Новый Структура;
		РеквизитыПоиска = Новый Структура; // Ключ - имя реквизита из РаспознанныйДокумент.РеквизитыДокумента, Значение - имя реквизита объекта метаданных
		РеквизитыПоиска.Вставить("НомерДоговора", "Номер");
		РеквизитыПоиска.Вставить("ДатаДоговора", "Дата");
		РеквизитыПоиска.Вставить("Договор", "Наименование");
		
		Для Каждого ИмяРеквизита Из РеквизитыПоиска Цикл
			Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита.Ключ);
			СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
			Если СтрокиПоиска.Количество() <> 0 Тогда
				ЗначениеПоиска = СтрокиПоиска[0].РаспознанныйТекст;
				//ЗначениеПоиска = СтрокиПоиска[0].Значение;
				//Если Не ЗначениеЗаполнено(ЗначениеПоиска) Тогда
				//	// Пустую дату и т.д. заменяем на пустую строку
				//	ЗначениеПоиска = "";
				//КонецЕсли;
			Иначе
				ЗначениеПоиска = Неопределено;
			КонецЕсли;
			
			ДанныеПоиска.Вставить(ИмяРеквизита.Значение, ЗначениеПоиска);
		КонецЦикла;
		
		Тип = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			ДанныеПоиска,
			Тип,
			,
			ОтборМетаданных,
			ДокументОбъект.ИдентификаторРезультата
		);
		РаспознаваниеДокументовСлужебный.ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Договор", Кандидаты);
		
		Отбор = Новый Структура("ИмяРеквизита", "Договор");
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Реквизит = СтрокиПоиска[0];
			Если Реквизит.УверенностьНайденногоЗначения >= РаспознаваниеДокументовСлужебный.ГраницаПроблемныхЗначений()
				И НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение))
				И НЕ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(Реквизит.ИмяРеквизита, Реквизит.РаспознанныйТекст) Тогда
				
				Реквизит.Значение = Реквизит.НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// На основании Контрагента, Организации, Валюты из Договора, данных о Банке и Счете можно найти банковский счет
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьБанковскийСчет(ДокументОбъект);
	КонецЕсли;
	
	ТаблицаДокумента = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	
	Если ПроверяемыеРеквизиты.Свойство("ИзмениласьСуммаВключаетНДС") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, ПроверяемыеРеквизиты.СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		
		// Определение ставки НДС
		Если ПроверяемыеРеквизиты.ТекстНДС = "Без налога (НДС)" Тогда
			СтавкаНДС = Новый Структура("Числом, Ссылкой", 0, Перечисления.СтавкиНДС.БезНДС);
		Иначе 
			СтавкаНДС = РаспознаваниеДокументовБП.ОпределитьСтавкуНДС(ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС);
		КонецЕсли;
		
		Если СтавкаНДС = Неопределено Тогда
			// Ставку НДС не удалось определить по полям итогов. Будем брать из номенклатуры
			ВсяНоменклатура = ТаблицаДокумента.ВыгрузитьКолонку("Номенклатура");
			НДСПоНоменклатуре = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсяНоменклатура, "ВидСтавкиНДС");
			
			// ДанныеНДС содержит ВидСтавкиНДС, преобразуем ее в ставку НДС по дате документа
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ДатаДокумента", "ИмяРеквизита");
			Если НайденнаяСтрока = Неопределено Тогда
				НДСПоНоменклатуре = Неопределено;
			Иначе
				ДатаДокумента = НайденнаяСтрока.Значение;
				Для Каждого ЭлементНДС Из НДСПоНоменклатуре Цикл
					НДСПоНоменклатуре.Вставить(ЭлементНДС.Ключ, Перечисления.СтавкиНДС.СтавкаНДС(ЭлементНДС.Значение, ДатаДокумента));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Цена");
		ПоляПроверки.Добавить("Количество");
		ПоляПроверки.Добавить("Сумма");
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			// Восстановление нулей и потерянных запятых
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки, ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС);
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьПотеряннуюЗапятую(СтрокаТаблицы, ПоляПроверки, ДокументОбъект);
			
			// Пытаемся восстановить ставку НДС
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				Если СтавкаНДС <> Неопределено Тогда
					СтрокаТаблицы.СтавкаНДС = СтавкаНДС.Ссылкой;
					СтавкаНДСЧислом = СтавкаНДС.Числом;
				ИначеЕсли НДСПоНоменклатуре <> Неопределено Тогда
					СтрокаТаблицы.СтавкаНДС = НДСПоНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
					СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
					СтрокаТаблицы.СуммаНДС = РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, ПроверяемыеРеквизиты.СуммаВключаетНДС, СтавкаНДСЧислом);
					СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПроверяемыеРеквизиты.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
		
		// Этот расчет происходит до того, как пользователь что-то увидит + в УПД, Торг12 и Счетах-фактурах
		// введены 4 колонки, которые можно легко сверить для каждой строки по формулам:
		// 1) Если (Сумма без НДС) + (Сумма НДС) = (Сумма с НДС), то проверить и при необходимости восстановить Ставку НДС.
		// 2) Если (Сумма без НДС) * (100 + Ставка НДС)/100 = (Сумма с НДС), то проверить и при необходимости восстановить Сумму НДС.
		
		// Если СуммаВключаетНДС = Истина, то такая проверка не пройдет и ее нужно исключить. Но для этих трех документов
		// при печате на бумаге Сумма без НДС не должна совпадать с колонкой Всего даже на нетиповых документах.
		Если Не ПроверяемыеРеквизиты.СуммаВключаетНДС Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
				СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				СложениемСовпало = (СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего);
				УмножениемСовпало = (Окр(СтрокаТаблицы.Сумма * (100 + СтавкаНДСЧислом)/100, 2) = СтрокаТаблицы.Всего);
				Если СложениемСовпало Или УмножениемСовпало Тогда
					Если Не СложениемСовпало Тогда
						СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего - СтрокаТаблицы.Сумма;
					ИначеЕсли Не УмножениемСовпало Тогда
						СтруктураСтавкиНДС = РаспознаваниеДокументовБП.ОпределитьСтавкуНДС(СтрокаТаблицы.Всего, СтрокаТаблицы.СуммаНДС);
						Если СтруктураСтавкиНДС <> Неопределено Тогда
							СтрокаТаблицы.СтавкаНДС = СтруктураСтавкиНДС.Ссылкой;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Всего");
		ПоляПроверки.Добавить("СуммаНДС");
		ПоляПроверки.Добавить("Сумма");
		
		Счетчик = 0;
		РаспознаваниеДокументовСлужебный.ВосстановлениеПо2Формулам(ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПоляПроверки);
		НеобходимоПроверять = Истина;
		Пока НеобходимоПроверять И Счетчик < 5 Цикл
			Счетчик = Счетчик + 1;
			НеобходимоПроверять = РаспознаваниеДокументовСлужебный.ВосстановлениеПо1ФормулеСУверенностью(ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПроверяемыеРеквизиты.ИтогоСумма);
			НеобходимоПроверять = НеобходимоПроверять Или РаспознаваниеДокументовСлужебный.ВосстановлениеПо2Формулам(ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПоляПроверки);
		КонецЦикла;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Цена");
		ПоляПроверки.Добавить("Количество");
		СтрокаСДатой = ДокументОбъект.РеквизитыДокумента.Найти("ДатаДокумента", "ИмяРеквизита");
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Если СтрокаСДатой <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "ВидСтавкиНДС");
				СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, СтрокаСДатой.Значение);
			КонецЕсли;
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки, ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС);
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьПотеряннуюЗапятую(СтрокаТаблицы, ПоляПроверки, ДокументОбъект);
		КонецЦикла;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(ДокументОбъект, ТаблицаДокумента);
	
КонецПроцедуры

Процедура ПриЗаполненииПараметровВыбораДоговора(ДокументОбъект, ПараметрыВыбораДоговора) Экспорт
	
	ВидыДоговоров = Новый Массив;
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;
	
	ПараметрыВыбораДоговора.Вставить("ВидыДоговоров", ВидыДоговоров);
	
КонецПроцедуры

Процедура ПриЗаполненииДоговораКонтрагента(ДоговорКонтрагента, ДокументОбъект, ПараметрыДоговора) Экспорт
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ПараметрыДоговора.Организация) Или Не ЗначениеЗаполнено(ПараметрыДоговора.Контрагент) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыДоговора.НомерДоговора) Тогда
		ДополнительныеПараметрыПоиска.Вставить("Номер", Новый Структура("ЗначениеОтбора", ПараметрыДоговора.НомерДоговора));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыДоговора.ДатаДоговора) Тогда
		ДополнительныеПараметрыПоиска.Вставить("Дата", Новый Структура("ЗначениеОтбора", ПараметрыДоговора.ДатаДоговора));
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
		ПараметрыДоговора.Контрагент, ПараметрыДоговора.Организация, ПараметрыДоговора.ВидыДоговоров, ДополнительныеПараметрыПоиска);
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
			ПараметрыДоговора.Контрагент, ПараметрыДоговора.Организация, ПараметрыДоговора.ВидыДоговоров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаполненииБанковскогоСчета(Счет, ДокументОбъект, ПараметрыСчета) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		// Проверим соответствие счета и владельца, т.к. нечеткий поиск этого пока не делает
		Если ПараметрыСчета.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Владелец") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Тут можно использовать поиск по данным из ПараметрыСчета (реквизиты "Банк", "БанкНаименование", "БанкСчет"), но
	// для демонстрации заполняем основным банковским счетом владельца
	
	ВалютаОплаты = РаспознаваниеДокументовСлужебный.ВалютаОплаты(ПараметрыСчета.Договор);
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(Счет, ПараметрыСчета.Владелец, ВалютаОплаты, Истина);
	
КонецПроцедуры

Процедура ПриЗаполненииВалютыОплаты(ДоговорКонтрагента, ВалютаОплаты) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
			ВалютаОплаты = ВалютаРегламентированногоУчета;
		Иначе
			ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
	Иначе
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииСтавкиНДС(СтавкаНДСЧислом, СтавкаНДС, ПрименяютсяСтавки4и2 = Ложь) Экспорт
	
	СтавкаНДСЧислом = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС, ПрименяютсяСтавки4и2);
	
КонецПроцедуры

Процедура ПриОпределенииПроверяемыхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Договор");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Склад");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОбработкеПроверкиЗаполненияРеквизитов(ДокументОбъект, ТаблицаПроблем) Экспорт
	
КонецПроцедуры

Процедура ПриЗаполненииНовогоЭлементаСправочника(СправочникОбъект, ДанныеДляЗаполнения) Экспорт
	
	СправочникОбъект.Заполнить(ДанныеДляЗаполнения);
	
КонецПроцедуры

Процедура ПриСозданииДокументаНаОснованииРаспознанного(ДокументОбъект, РаспознанныйДокумент, ПараметрыЗаполнения) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриПроведенииДокументаНаОснованииРаспознанного(ДокументОбъект) Экспорт
	
	
	
КонецПроцедуры

Процедура ПриСозданииСчетФактуры(ПараметрыСоздания, СчетФактураСсылка = Неопределено) Экспорт
	
	// БУХ
	
	ТипДокументаСтрокой = ПараметрыСоздания.ТипДокументаСтрокой;
	Основание = ПараметрыСоздания.Основание;
	ПараметрыЗаполнения = ПараметрыСоздания.ПараметрыЗаполнения;
	
	ДанныеСчетаФактуры = Неопределено;
	
	Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
		ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание = Основание;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = ПараметрыЗаполнения.НомерВходящегоДокумента;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = ПараметрыЗаполнения.ДатаВходящегоДокумента;
			
		ДанныеСчетаФактуры = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
			ПараметрыСозданияСчетаФактуры);
	Иначе
		ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
		ПараметрыСозданияСчетаФактуры.Основание = Основание;
		ДанныеСчетаФактуры = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСозданияСчетаФактуры);
		Если ДанныеСчетаФактуры <> Неопределено Тогда
			СчетФактураОбъект = ДанныеСчетаФактуры.Ссылка.ПолучитьОбъект();
			СчетФактураОбъект.Номер = ПараметрыЗаполнения.НомерВходящегоДокумента;
			СчетФактураОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСчетаФактуры <> Неопределено Тогда 
		СчетФактураСсылка = ДанныеСчетаФактуры.Ссылка;
	КонецЕсли;
	
	// Конец БУХ
	
КонецПроцедуры

Процедура ПриОпределенииПараметровСозданияНоменклатуры(Параметры) Экспорт
	
	// БУХ
	МетаданныеНоменклатура = Метаданные.Справочники.Номенклатура;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.СтандартныеРеквизиты.Наименование);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.Артикул);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.СтандартныеРеквизиты.Родитель);
	Параметр.ОписаниеЭлемента = РаспознаваниеДокументов.ОписаниеЭлемента();
	Параметр.ОписаниеЭлемента.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.ВидНоменклатуры);
	
	// Ставка НДС (хранение - перечисление "ВидыСтавокНДС", выбор - перечисление "СтавкиНДС")
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита();
	Параметр.ОписаниеРеквизита.Имя = "СтавкаНДС";
	Параметр.ОписаниеРеквизита.Синоним = "Ставка НДС";
	Параметр.ОписаниеРеквизита.Тип = Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС");
	Параметр.ОписаниеРеквизита.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.ЕдиницаИзмерения);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.НоменклатурнаяГруппа);
	
	// Конец БУХ
	
КонецПроцедуры

Процедура ОбработкаСозданияНоменклатуры(РезультатСсылка, ДанныеЗаполнения) Экспорт
	
	// БУХ
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяНоменклатура, ДанныеЗаполнения);
	НоваяНоменклатура.Заполнить(ДанныеЗаполнения);
	
	НоваяНоменклатура.НаименованиеПолное = НоваяНоменклатура.Наименование;
	НоваяНоменклатура.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(ДанныеЗаполнения.СтавкаНДС);
	
	Если НоваяНоменклатура.ПроверитьЗаполнение() Тогда
		НоваяНоменклатура.Записать();
		РезультатСсылка = НоваяНоменклатура.Ссылка;
	КонецЕсли;
	// Конец БУХ
	
КонецПроцедуры

Процедура ПриЗаполненииПараметровСозданияНовогоЭлемента(СвязанныеКолонки, ИмяЭлемента, ТипДокумента, Направление) Экспорт
	
	Если ИмяЭлемента = "Номенклатура" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Номенклатура", Истина, Истина, "НаименованиеПолное"));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "Артикул", "Артикул", Истина, Ложь));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный, ВыборГруппИЭлементов", "Родитель", "Родитель", "Входит в группу", Ложь, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"), Ложь, ГруппыИЭлементы.Группы));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЕдиницаИзмерения", "ЕдиницаИзмерения", "Единица измерения", Ложь, ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка"), Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ВидСтавкиНДС", "СтавкаНДС", "% НДС", Ложь, ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"), Ложь));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ВидНоменклатуры", "Вид номенклатуры", Ложь, ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "ЕдиницаИзмерения" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Наименование", "ЕдиницаИзмерения", "Наименование", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Код", "КодЕдиницыИзмерения", "Код", Истина, Истина));
	ИначеЕсли ИмяЭлемента = "СтранаПроисхождения" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Наименование", "СтранаПроисхождения", "Наименование", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Код", "КодСтраныПроисхождения", "Код", Истина, Истина));
	ИначеЕсли ИмяЭлемента = "НомерГТД" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Код", "НомерГТД", "Номер", Истина, Истина));
		
	ИначеЕсли ИмяЭлемента = "БанковскийСчетКонтрагента" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный, ПодходящиеОбязательноеРавенство",
			"Владелец", "Продавец", "Контрагент", Истина, ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "НомерСчета", "БанковскийСчетКонтрагента", "Номер счета", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "Банк", "Банк", "Банк", Истина, ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка"), Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ВалютаДенежныхСредств", "Валюта", Ложь, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина));
	ИначеЕсли ИмяЭлемента = "БанковскийСчетОрганизации" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный, ПодходящиеОбязательноеРавенство",
			"Владелец", "ПродавецОрганизация", "Контрагент", Истина, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "НомерСчета", "БанковскийСчетОрганизации", "Номер счета", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "Банк", "Банк", "Банк", Истина, ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка"), Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ВалютаДенежныхСредств", "Валюта", Ложь, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина));
		
	ИначеЕсли ИмяЭлемента = "Продавец" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Продавец", "Наименование", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППродавца", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППродавца", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "ПродавецОрганизация" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "ПродавецОрганизация", Истина, Истина, "НаименованиеПолное,НаименованиеСокращенное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППродавца", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППродавца", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Покупатель" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Покупатель", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППокупателя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППокупателя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "ПокупательОрганизация" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "ПокупательОрганизация", Истина, Истина, "НаименованиеПолное,НаименованиеСокращенное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППокупателя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППокупателя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Грузоотправитель" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Грузоотправитель", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКППГрузоотправителя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКППГрузоотправителя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННГрузоотправителя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КППГрузоотправителя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Грузополучатель" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Грузополучатель", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКППГрузополучателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКППГрузополучателя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННГрузополучателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КППГрузополучателя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Договор" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
			"ВидДоговора", "Вид договора", Истина, Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка(), Истина));
		
		Если Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Владелец", "Покупатель", "Контрагент", Истина, Справочники.Контрагенты.ПустаяСсылка(), Истина));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Организация", "ПродавецОрганизация", "Организация", Истина, Справочники.Организации.ПустаяСсылка(), Истина));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Владелец", "Продавец", "Контрагент", Истина, Справочники.Контрагенты.ПустаяСсылка(), Истина));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Организация", "ПокупательОрганизация", "Организация", Истина, Справочники.Организации.ПустаяСсылка(), Истина));
		КонецЕсли;
		
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный",
			"Наименование", "Договор", "Наименование", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный",
			"Номер", "НомерДоговора", "Номер договора", Истина, Ложь));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
			"Дата", "ДатаДоговора", "Дата договора", Истина, '00010101', Ложь));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПередЗаписьюФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	
	
КонецПроцедуры

Процедура ПослеЗаписиФормыРаспознаванияНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

Процедура ПриИзмененииКолонкиНаСервере(Объект, СтрокаТаблицы, ИмяРеквизита, НомерСтрокиТаблицы, ВыбранноеЗначение) Экспорт
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииКолонки(Объект, СтрокаТаблицы, ИмяРеквизита, ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСкладПоУмолчанию() Экспорт
	
	СкладПоУмолчанию = Справочники.Склады.ПолучитьСкладПоУмолчанию();
	Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
		Возврат СкладПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРаспознования = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если ЗначениеЗаполнено(НастройкиРаспознования.СкладПоУмолчанию) Тогда
		Возврат НастройкиРаспознования.СкладПоУмолчанию;
	КонецЕсли;
	
	Возврат Справочники.Склады.ПустаяСсылка();
	
КонецФункции

#КонецОбласти
