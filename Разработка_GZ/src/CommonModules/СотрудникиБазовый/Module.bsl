#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ФОИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ФОИспользоватьНачислениеЗарплаты ИЛИ ФОИспользоватьКадровыйУчет Тогда
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
			
			Справочники.Сотрудники.ДобавитьКомандуПечатиЛичнойКарточкиТ2(КомандыПечати);
			
			ДобавитьКомандыПечатиТрудовогоДоговораМикропредприятий(КомандыПечати);
			
			Справочники.Сотрудники.ДобавитьКомандуПечатиПриказаОПриеме(КомандыПечати);
			Справочники.Сотрудники.ДобавитьКомандуПечатиПриказаОПереводе(КомандыПечати);
			
		КонецЕсли; 
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь)
			ИЛИ ПравоДоступа("Просмотр", Метаданные.Документы.Увольнение) Тогда
			
			Справочники.Сотрудники.ДобавитьКомандуПечатиПриказаОбУвольнении(КомандыПечати);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФОИспользоватьНачислениеЗарплаты Тогда
		
		Отчеты.ПечатнаяФормаСправкаОСреднемЗаработке.ДобавитьКомандуПечати(КомандыПечати);
		
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеНалоговИВзносов,ЧтениеНалоговИВзносов", , Ложь) Тогда
			Справочники.Сотрудники.ДобавитьКомандуПечатиКарточкиУчетаСтраховыхВзносов(КомандыПечати);
			Справочники.Сотрудники.ДобавитьКомандуПечатиРегистраНалоговогоУчетаПоНДФЛ(КомандыПечати);
		КонецЕсли; 
		
	КонецЕсли;
	
	Справочники.Сотрудники.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	
КонецПроцедуры

Процедура ДобавитьКомандыПечатиТрудовогоДоговораМикропредприятий(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Справочник.Сотрудники";
	КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговорМикропредприятий";
	КомандаПечати.Представление = НСтр("ru = 'Трудовой договор (микропредприятий)'");
	КомандаПечати.Порядок = 15;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТрудовойДоговорМикропредприятий") Тогда
		ПечатьТрудовойДоговорМикропредприятий(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т1") Тогда
		ПечатьТ1(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т2") Тогда
		ПечатьТ2(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т5") Тогда
		ПечатьТ5(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т8") Тогда
		ПечатьТ8(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;	
	
КонецПроцедуры

#Область ТрудовойДоговорМикропредприятий

Процедура ПечатьТрудовойДоговорМикропредприятий(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ТрудовойДоговорМикропредприятий", НСтр("ru='Трудовой договор (микропредприятий)'"),
		ТрудовойДоговорМикропредприятий(
			УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТрудовойДоговорМикропредприятий"),
			МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , 
		"ОбщийМакет.ПФ_MXL_ТрудовойДоговорМикропредприятий");
КонецПроцедуры

Функция ТрудовойДоговорМикропредприятий(Макет, МассивОбъектов, ОбъектыПечати, ПараметрыВывода, ДистанционныеРаботы = Ложь, ДоговорСНадомником = Ложь) Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ТрудовойДоговорМикропредприятий";
	
	ДанныеДоговоров = ДанныеТрудовыхДоговоров(МассивОбъектов, ДистанционныеРаботы, ДоговорСНадомником);
	Для каждого ДанныеДоговора Из ДанныеДоговоров Цикл
		
		Если МассивОбъектов.Количество() = 1
			И ЗначениеЗаполнено(ДанныеДоговора.EMail) Тогда
			
			ПараметрыВывода.ПараметрыОтправки.Получатель = ДанныеДоговора.EMail;
			ПараметрыВывода.ПараметрыОтправки.Тема = НСтр("ru='Трудовой договор'");
			
			Если ЗначениеЗаполнено(ДанныеДоговора.РаботаТрудовойДоговорНомерНаПечать) Тогда
				ПараметрыВывода.ПараметрыОтправки.Тема = ПараметрыВывода.ПараметрыОтправки.Тема + " №" + ДанныеДоговора.РаботаТрудовойДоговорНомерНаПечать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДоговора.РаботаТрудовойДоговорДатаОформления) Тогда
				
				ПараметрыВывода.ПараметрыОтправки.Тема = ПараметрыВывода.ПараметрыОтправки.Тема
					+ " " + НСтр("ru='от'") + " " + ДанныеДоговора.РаботаТрудовойДоговорДатаОформления;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если НомерСтрокиНачало > 1 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТаблицаТрудовогоДоговора = Новый ТабличныйДокумент;
		
		ПараметрыНумерации = Новый Структура;
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, 1);
		УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, 1);
		
		ТрудовойДоговорВывестиРаздел("Шапка", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОбщиеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ПраваИОбязанностиРаботодателя", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОплатаТрудаРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_РабочееВремяИВремяОтдыхаРаботника", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОхранаТруда", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_СоциальноеСтрахованиеИИныеГарантии", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИныеУсловияТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ИзменениеУсловийТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ОтветственностьСторонТрудовогоДоговора", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Раздел_ЗаключительныеПоложения", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		ТрудовойДоговорВывестиРаздел("Подвал", ТаблицаТрудовогоДоговора, Макет, ДанныеДоговора, ПараметрыНумерации);
		
		ДокументРезультат.Вывести(ТаблицаТрудовогоДоговора);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДанныеДоговора.СсылкаНаОбъект);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеТрудовыхДоговоров(МассивОбъектов, ДистанционныеРаботы, ДоговорСНадомником)
	
	ДанныеТрудовыхДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивПриказовОПриеме = Новый Массив;
	
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ВыводПоСсылкеНаСотрудника = Ложь;
	
	Если ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ВыводПоСсылкеНаСотрудника = Истина;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиДляПечатиТрудовыхДоговоров
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&МассивОбъектов)";
		
		Запрос.Выполнить();
		
		Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДляПечатиТрудовыхДоговоров");
		
		Описатель.ИмяВТКадровыеДанныеСотрудников = "ВТСотрудникиСДаннымиОПриеме";
		
		Если ИспользоватьКадровыйУчет Тогда
			КадровыеДанныеПриема = "ДатаПриема,ПриказОПриеме";
		Иначе
			КадровыеДанныеПриема = "ДатаПриема";
		КонецЕсли;
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, КадровыеДанныеПриема);
		
		Если ИспользоватьКадровыйУчет Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиСДаннымиОПриеме.ПриказОПриеме
				|ИЗ
				|	ВТСотрудникиСДаннымиОПриеме КАК СотрудникиСДаннымиОПриеме
				|ГДЕ
				|	ЕСТЬNULL(СотрудникиСДаннымиОПриеме.ПриказОПриеме, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)";
			
			МассивПриказовОПриеме = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПриказОПриеме");
			
		КонецЕсли;
		
	Иначе
		МассивПриказовОПриеме = ОбщегоНазначения.СкопироватьРекурсивно(МассивОбъектов);
	КонецЕсли;
	
	Если ИспользоватьКадровыйУчет Тогда
		
		СоздатьВТДанныеДокументовПриемНаРаботу(Запрос.МенеджерВременныхТаблиц, МассивПриказовОПриеме);
		Если ВыводПоСсылкеНаСотрудника Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПриказыОПриеме.Ссылка,
				|	СотрудникиСДаннымиОПриеме.Сотрудник,
				|	СотрудникиСДаннымиОПриеме.ДатаПриема КАК Период,
				|	СотрудникиСДаннымиОПриеме.ДатаПриема КАК Дата,
				|	ПриказыОПриеме.ДлительностьИспытательногоСрока,
				|	ПриказыОПриеме.РазрешениеНаРаботу,
				|	ПриказыОПриеме.РазрешениеНаПроживание,
				|	ПриказыОПриеме.УсловияОказанияМедпомощи,
				|	ПриказыОПриеме.Руководитель,
				|	ПриказыОПриеме.ДолжностьРуководителя
				|ПОМЕСТИТЬ ВТДанныеПриказовОПриеме
				|ИЗ
				|	ВТДанныеДокументов КАК ПриказыОПриеме
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСДаннымиОПриеме КАК СотрудникиСДаннымиОПриеме
				|		ПО ПриказыОПриеме.Ссылка = СотрудникиСДаннымиОПриеме.ПриказОПриеме";
			
			Запрос.Выполнить();
			
		Иначе
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПриказыОПриеме.Сотрудник,
				|	ПриказыОПриеме.Дата КАК ДатаПриема,
				|	ПриказыОПриеме.Ссылка КАК ПриказОПриеме
				|ПОМЕСТИТЬ ВТСотрудникиСДаннымиОПриеме
				|ИЗ
				|	ВТДанныеДокументов КАК ПриказыОПриеме
				|ГДЕ
				|	ПриказыОПриеме.Ссылка В(&МассивОбъектов)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПриказыОПриеме.Ссылка,
				|	ПриказыОПриеме.Сотрудник,
				|	ПриказыОПриеме.Дата КАК Период,
				|	ПриказыОПриеме.Дата,
				|	ПриказыОПриеме.ДлительностьИспытательногоСрока,
				|	ПриказыОПриеме.РазрешениеНаРаботу,
				|	ПриказыОПриеме.РазрешениеНаПроживание,
				|	ПриказыОПриеме.УсловияОказанияМедпомощи,
				|	ПриказыОПриеме.Руководитель,
				|	ПриказыОПриеме.ДолжностьРуководителя
				|ПОМЕСТИТЬ ВТДанныеПриказовОПриеме
				|ИЗ
				|	ВТДанныеДокументов КАК ПриказыОПриеме
				|ГДЕ
				|	ПриказыОПриеме.Ссылка В(&МассивОбъектов)";
			
			Запрос.Выполнить();
		
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиСДаннымиОПриеме.Сотрудник КАК Ссылка,
			|	СотрудникиСДаннымиОПриеме.Сотрудник,
			|	СотрудникиСДаннымиОПриеме.ДатаПриема КАК Период,
			|	СотрудникиСДаннымиОПриеме.ДатаПриема КАК Дата,
			|	0 КАК ДлительностьИспытательногоСрока,
			|	NULL КАК РазрешениеНаРаботу,
			|	NULL КАК РазрешениеНаПроживание,
			|	NULL КАК УсловияОказанияМедпомощи,
			|	NULL КАК Руководитель,
			|	NULL КАК ДолжностьРуководителя
			|ПОМЕСТИТЬ ВТДанныеПриказовОПриеме
			|ИЗ
			|	ВТСотрудникиСДаннымиОПриеме КАК СотрудникиСДаннымиОПриеме";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "Руководитель", "ВТДанныеПриказовОПриеме");
	
	СоздатьВТКадровыеДанныеТрудовогоДоговора(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиСДаннымиОПриеме", "Сотрудник,ДатаПриема");
	
	НачисленияСотрудников = Новый Соответствие;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПлановыеНачисления) Тогда
		
		ЗапросНачислений = КадровыйУчет.ЗапросВТПлановыеНачисленияСотрудников(Истина, "ВТПлановыеНачисления", "ВТКадровыеДанныеТрудовогоДоговора");
		ЗапросНачислений.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросНачислений.Выполнить();
		
		КатегорииСдельнойОплатыТруда = РасчетЗарплаты.КатегорииСдельнойОплатыТруда();
		ЗапросНачислений.УстановитьПараметр("КатегорииСдельнойОплатыТруда", КатегорииСдельнойОплатыТруда);
		
		КатегорииКомпенсаций = РасчетЗарплаты.КатегорииНачисленийКомпенсационныхВыплат();
		ЗапросНачислений.УстановитьПараметр("КатегорииКомпенсаций", КатегорииКомпенсаций);
		
		ЗапросНачислений.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.Период КАК Период,
			|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
			|	ПлановыеНачисления.Начисление,
			|	ПлановыеНачисления.ОсновнойПоказатель,
			|	ПлановыеНачисления.ЗначениеОсновногоПоказателя,
			|	ПлановыеНачисления.Размер,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ПлановыеНачисления.НачислениеТарифнойСтавки, ЛОЖЬ) = ИСТИНА
			|				И НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииСдельнойОплатыТруда)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоТарифнаяСтавка,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ПлановыеНачисления.НачислениеТарифнойСтавки, ЛОЖЬ) = ИСТИНА
			|				И НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииСдельнойОплатыТруда)
			|			ТОГДА ЛОЖЬ
			|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииСдельнойОплатыТруда)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоСдельнаяОплатаТруда,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ПлановыеНачисления.НачислениеТарифнойСтавки, ЛОЖЬ) = ИСТИНА
			|				И НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииСдельнойОплатыТруда)
			|			ТОГДА ЛОЖЬ
			|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииСдельнойОплатыТруда)
			|			ТОГДА ЛОЖЬ
			|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииКомпенсаций)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоКомпенсация,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ПлановыеНачисления.НачислениеТарифнойСтавки, ЛОЖЬ) = ИСТИНА
			|				И НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииСдельнойОплатыТруда)
			|			ТОГДА ЛОЖЬ
			|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииСдельнойОплатыТруда)
			|			ТОГДА ЛОЖЬ
			|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииКомпенсаций)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЭтоНадбавка
			|ИЗ
			|	ВТПлановыеНачисления КАК ПлановыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО ПлановыеНачисления.Начисление = Начисления.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Начисления.РеквизитДопУпорядочивания";
		
		УстановитьДанныеТарифнойСтавки = Истина;
		
		ВыборкаНачислений = ЗапросНачислений.Выполнить().Выбрать();
		Пока ВыборкаНачислений.Следующий() Цикл
			
			Периоды = НачисленияСотрудников.Получить(ВыборкаНачислений.Период);
			Если Периоды = Неопределено Тогда
				Периоды = Новый Соответствие;
				НачисленияСотрудников.Вставить(ВыборкаНачислений.Период, Периоды);
			КонецЕсли;
			
			ОписаниеНачислений = Периоды.Получить(ВыборкаНачислений.Сотрудник);
			Если ОписаниеНачислений = Неопределено Тогда
				
				УстановитьДанныеТарифнойСтавки = Истина;
				
				ОписаниеНачислений = Новый Структура;
				ОписаниеНачислений.Вставить("ТарифнаяСтавка", Новый Структура("Начисление,ОсновнойПоказатель,ЗначениеОсновногоПоказателя,Размер"));
				ОписаниеНачислений.Вставить("СдельнаяОплатаТруда", Новый Структура("Начисление,Размер"));
				ОписаниеНачислений.Вставить("Компенсации", Новый Массив);
				ОписаниеНачислений.Вставить("Надбавки", Новый Массив);
				
				Периоды.Вставить(ВыборкаНачислений.Сотрудник, ОписаниеНачислений);
				
			КонецЕсли;
			
			Если УстановитьДанныеТарифнойСтавки И ВыборкаНачислений.ЭтоТарифнаяСтавка Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеНачислений.ТарифнаяСтавка, ВыборкаНачислений);
				УстановитьДанныеТарифнойСтавки = Ложь;
				
			ИначеЕсли УстановитьДанныеТарифнойСтавки И ВыборкаНачислений.ЭтоСдельнаяОплатаТруда Тогда
				
				ЗаполнитьЗначенияСвойств(ОписаниеНачислений.СдельнаяОплатаТруда, ВыборкаНачислений);
				УстановитьДанныеТарифнойСтавки = Ложь;
				
			Иначе
				
				ОписаниеНачисления = Новый Структура("РаботаОплатаТрудаНачисление,РаботаОплатаТрудаРазмер");
				ОписаниеНачисления.РаботаОплатаТрудаНачисление = ВыборкаНачислений.Начисление;
				ОписаниеНачисления.РаботаОплатаТрудаРазмер = ВыборкаНачислений.Размер;
				
				Если ВыборкаНачислений.ЭтоКомпенсация Тогда
					ОписаниеНачислений.Компенсации.Добавить(ОписаниеНачисления);
				Иначе
					ОписаниеНачислений.Надбавки.Добавить(ОписаниеНачисления);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КадровыеДанные.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТКадровыеДанныеТрудовогоДоговора КАК КадровыеДанные
		|ГДЕ
		|	ЕСТЬNULL(КадровыеДанные.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1 не принят на работу'"),
			Выборка.Сотрудник);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Организация,
		|	КадровыеДанные.Период
		|ИЗ
		|	ВТКадровыеДанныеТрудовогоДоговора КАК КадровыеДанные";
	
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ТелефонОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ФаксОрганизации", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресЮридический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("АдресФактический", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "ФаксОрганизации");
		
		УстановитьПривилегированныйРежим(Истина);
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		УстановитьПривилегированныйРежим(Ложь);
		
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
		
		Если ОргСведения.Свойство("НаимЮЛПол") Тогда
			НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		КонецЕсли;
		
		Если ОргСведения.Свойство("ИННЮЛ") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ИНН = ОргСведения.ИННЮЛ;
		КонецЕсли;
		
		Если ОргСведения.Свойство("КППЮЛ") Тогда
			НоваяСтрокаСведенияОбОрганизациях.КПП = ОргСведения.КППЮЛ;
		КонецЕсли;
		
		Если ОргСведения.Свойство("ТелОрганизации") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ТелефонОрганизации = ОргСведения.ТелОрганизации;
		КонецЕсли;
		
		Если ОргСведения.Свойство("ФаксОрганизации") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ФаксОрганизации = ОргСведения.ФаксОрганизации;
		КонецЕсли;
		
		ОписаниеЮридическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресЮридический = ОписаниеЮридическогоАдреса.Представление;
		
		ОписаниеФактическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
			АдресаОрганизаций,
			Выборка.Организация,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.АдресФактический = ОписаниеФактическогоАдреса.Представление;
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбОрганизациях.Период КАК Период,
		|	СведенияОбОрганизациях.Организация КАК Организация,
		|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СведенияОбОрганизациях.ИНН КАК ИНН,
		|	СведенияОбОрганизациях.КПП КАК КПП,
		|	СведенияОбОрганизациях.ТелефонОрганизации КАК ТелефонОрганизации,
		|	СведенияОбОрганизациях.ФаксОрганизации КАК ФаксОрганизации,
		|	СведенияОбОрганизациях.АдресЮридический КАК ОрганизацияАдресЮридический,
		|	СведенияОбОрганизациях.АдресФактический КАК ОрганизацияАдресФактический,
		|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК ОрганизацияГородФактическогоАдреса
		|ПОМЕСТИТЬ ВТДанныеОрганизаций
		|ИЗ
		|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСДаннымиОПриеме.Сотрудник КАК СсылкаНаОбъект,
		|	СотрудникиСДаннымиОПриеме.Сотрудник КАК Сотрудник,
		|	СотрудникиСДаннымиОПриеме.ДатаПриема КАК РаботаДатаПриема,
		|	КадровыеДанныеСотрудников.Подразделение КАК РаботаПодразделениеНаПечать,
		|	КадровыеДанныеСотрудников.Должность КАК РаботаДолжность,
		|	КадровыеДанныеСотрудников.ВидЗанятости КАК РаботаВидЗанятости,
		|	ДанныеОрганизаций.Организация КАК Организация,
		|	ДанныеОрганизаций.ИНН КАК РаботаОрганизацияИНН,
		|	ДанныеОрганизаций.КПП КАК РаботаОрганизацияКПП,
		|	ДанныеОрганизаций.ТелефонОрганизации КАК ТелефонОрганизации,
		|	ДанныеОрганизаций.ФаксОрганизации КАК ФаксОрганизации,
		|	ДанныеОрганизаций.ОрганизацияАдресЮридический КАК РаботаОрганизацияЮрАдрес,
		|	ДанныеОрганизаций.ОрганизацияАдресФактический КАК РаботаОрганизацияФактАдрес,
		|	ДанныеОрганизаций.ОрганизацияГородФактическогоАдреса КАК РаботаОрганизацияГородФактическогоАдреса,
		|	Организации.НаименованиеСокращенное КАК РаботаОрганизацияНаименованиеСокращенное,
		|	Организации.НаименованиеПолное КАК РаботаОрганизацияНаименованиеПолное,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.Страна КАК Страна,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ЛичныеДанныеФИОФамилияИмяОтчество,
		|	КадровыеДанныеСотрудников.АдресМестаПроживанияПредставление КАК ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживания,
		|	КадровыеДанныеСотрудников.ДокументПредставление КАК ЛичныеДанныеДокументУдостоверяющийЛичностьПредставление,
		|	КадровыеДанныеСотрудников.СтраховойНомерПФР КАК ЛичныеДанныеСтраховойНомерПФР,
		|	КадровыеДанныеСотрудников.КлассУсловийТруда КАК УсловияТрудаНаРабочемМесте,
		|	КадровыеДанныеСотрудников.EMailПредставление КАК EMail,
		|	ДанныеПриказовОПриеме.ДлительностьИспытательногоСрока КАК РаботаТрудовойДоговорДлительностьИспытательногоСрока,
		|	ДанныеПриказовОПриеме.РазрешениеНаРаботу КАК РазрешениеНаРаботу,
		|	ДанныеПриказовОПриеме.РазрешениеНаПроживание КАК РазрешениеНаПроживание,
		|	ДанныеПриказовОПриеме.УсловияОказанияМедпомощи КАК РаботаУсловияОказанияМедпомощи,
		|	ДанныеПриказовОПриеме.ДолжностьРуководителя КАК РаботаТрудовойДоговорДолжностьРуководителяВРодительномПадеже,
		|	ФИОРуководителя.ФИОПолные КАК РаботаТрудовойДоговорРуководительФамилияИмяОтчествоВРодительномПадеже,
		|	ФИОРуководителя.Пол КАК РаботаТрудовойДоговорРуководительПол
		|ИЗ
		|	ВТСотрудникиСДаннымиОПриеме КАК СотрудникиСДаннымиОПриеме
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПриказовОПриеме КАК ДанныеПриказовОПриеме
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|			ПО ДанныеПриказовОПриеме.Дата = ФИОРуководителя.Дата
		|				И ДанныеПриказовОПриеме.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ПО СотрудникиСДаннымиОПриеме.ДатаПриема = ДанныеПриказовОПриеме.Дата
		|			И СотрудникиСДаннымиОПриеме.Сотрудник = ДанныеПриказовОПриеме.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеТрудовогоДоговора КАК КадровыеДанныеСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|				ПО ДанныеОрганизаций.Организация = Организации.Ссылка
		|			ПО КадровыеДанныеСотрудников.Организация = ДанныеОрганизаций.Организация
		|				И КадровыеДанныеСотрудников.Период = ДанныеОрганизаций.Период
		|		ПО СотрудникиСДаннымиОПриеме.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И СотрудникиСДаннымиОПриеме.ДатаПриема = КадровыеДанныеСотрудников.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДоговора = ПараметрыТрудовогоДоговора(ДистанционныеРаботы, ДоговорСНадомником);
		
		ЗаполнитьЗначенияСвойств(ДанныеДоговора, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.РаботаДатаПриема) Тогда
			ДанныеДоговора.РаботаДатаПриема = Формат(Выборка.РаботаДатаПриема, "ДЛФ=DD");
			ДанныеДоговора.РаботаТрудовойДоговорДатаОформления = Выборка.РаботаДатаПриема;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РаботаВидЗанятости) Тогда
			
			Если Выборка.РаботаВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
				ДанныеДоговора.РаботаВидЗанятостиНаПечать = НСтр("ru='по основной работе'");
			Иначе
				ДанныеДоговора.РаботаВидЗанятостиНаПечать = НСтр("ru='по совместительству'");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.УсловияТрудаНаРабочемМесте) Тогда
			ДанныеДоговора.УсловияТрудаНаРабочемМесте = Выборка.УсловияТрудаНаРабочемМесте;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РаботаОрганизацияКПП) Тогда
			ДанныеДоговора.РаботаОрганизацияИНН = ДанныеДоговора.РаботаОрганизацияИНН + " / " + Выборка.РаботаОрганизацияКПП;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РаботаТрудовойДоговорРуководительФамилияИмяОтчествоВРодительномПадеже) Тогда
			
			РезультатСклонения = "";
			Если ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.РаботаТрудовойДоговорРуководительФамилияИмяОтчествоВРодительномПадеже, 2,
				РезультатСклонения, Выборка.РаботаТрудовойДоговорРуководительПол, Выборка.ФизическоеЛицо) Тогда
				
				ДанныеДоговора.РаботаТрудовойДоговорРуководительФамилияИмяОтчествоВРодительномПадеже = РезультатСклонения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоговора.РаботаТрудовойДоговорДлительностьИспытательногоСрока) Тогда
			ДанныеДоговора.РаботаТрудовойДоговорУстановкаИспытательногоСрока = НСтр("ru='устанавливается'");
		КонецЕсли;
		
		ДанныеДоговора.РаботаИныеДокументыИностранныхГражданНаПечать = "";
		
		Если ЗначениеЗаполнено(Выборка.РазрешениеНаПроживание) Тогда
			ДанныеДоговора.РаботаИныеДокументыИностранныхГражданНаПечать = Выборка.РазрешениеНаПроживание
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РазрешениеНаРаботу) Тогда
			
			Если ЗначениеЗаполнено(ДанныеДоговора.РаботаИныеДокументыИностранныхГражданНаПечать) Тогда
				
				ДанныеДоговора.РаботаИныеДокументыИностранныхГражданНаПечать =
					ДанныеДоговора.РаботаИныеДокументыИностранныхГражданНаПечать + ";" + Символы.ПС;
				
			КонецЕсли;
			
			ДанныеДоговора.РаботаИныеДокументыИностранныхГражданНаПечать =
				ДанныеДоговора.РаботаИныеДокументыИностранныхГражданНаПечать
				+ Выборка.РазрешениеНаРаботу;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РаботаТрудовойДоговорДолжностьРуководителяВРодительномПадеже) Тогда
			
			ДанныеДоговора.РаботаТрудовойДоговорДолжностьРуководителяВРодительномПадеже =
				СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Выборка.РаботаТрудовойДоговорДолжностьРуководителяВРодительномПадеже), 2, Выборка.РаботаТрудовойДоговорДолжностьРуководителяВРодительномПадеже);
			
		КонецЕсли;
		
		Периоды = НачисленияСотрудников.Получить(Выборка.Период);
		Если Периоды <> Неопределено Тогда
			
			ОписанияНачислений = Периоды.Получить(Выборка.Сотрудник);
			Если ОписанияНачислений <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(ОписанияНачислений.ТарифнаяСтавка.Начисление) Тогда
					ДанныеДоговора.ТарифнаяСтавка = ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(ОписанияНачислений.ТарифнаяСтавка);
				ИначеЕсли ЗначениеЗаполнено(ОписанияНачислений.СдельнаяОплатаТруда.Начисление) Тогда
					
					ДанныеДоговора.СдельнаяОплатаТруда = Строка(ОписанияНачислений.СдельнаяОплатаТруда.Начисление);
					Если ЗначениеЗаполнено(ОписанияНачислений.СдельнаяОплатаТруда.Размер) Тогда
						ДанныеДоговора.СдельнаяОплатаТруда = ДанныеДоговора.СдельнаяОплатаТруда + " " + Формат(ОписанияНачислений.СдельнаяОплатаТруда.Размер, "ЧДЦ=2");
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеДоговора.КомпенсационныеВыплаты = ОписанияНачислений.Компенсации;
				ДанныеДоговора.СтимулирующиеВыплаты = ОписанияНачислений.Надбавки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеТрудовыхДоговоров.Добавить(ДанныеДоговора);
		
	КонецЦикла;
	
	Возврат ДанныеТрудовыхДоговоров;
	
КонецФункции

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов)
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема КАК Дата,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Номер КАК НомерДок,
		|	ПриемНаРаботу.Дата КАК ДатаДок,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.УсловияПриема,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока,
		|	ПриемНаРаботу.РазрешениеНаРаботу,
		|	ПриемНаРаботу.РазрешениеНаПроживание,
		|	ПриемНаРаботу.УсловияОказанияМедпомощи
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Проведен
		|	И ПриемНаРаботу.Ссылка В(&МассивОбъектов)";
		
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Ссылка В(&МассивОбъектов)", "ПриемНаРаботу.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТКадровыеДанныеТрудовогоДоговора(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников)
	
	// Получение кадровых данных сотрудника.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		ИмяВременнойТаблицыОтборовСотрудников,
		ИменаПолейВременнойТаблицыОтборовСотрудников);
	
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеТрудовогоДоговора";
	
	КадровыеДанные =
		"ГоловнаяОрганизация,
		|Организация,
		|Подразделение,
		|Должность,
		|ВидЗанятости,
		|ФИОПолные,
		|АдресМестаПроживанияПредставление,
		|ДокументПредставление,
		|Страна,
		|КлассУсловийТруда,
		|СтраховойНомерПФР,
		|ПроцентСевернойНадбавки,
		|ТарифнаяСтавка,
		|EMailПредставление";
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
КонецПроцедуры

Функция ПараметрыТрудовогоДоговора(ДистанционныеРаботы = Ложь, ДоговорСНадомником = Ложь)
	
	ПараметрыДоговора = Новый Структура;
	
	ПараметрыДоговора.Вставить("СсылкаНаОбъект");
	
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорНомерНаПечать", "__________");
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорДатаОформления");
	
	ПараметрыДоговора.Вставить("ТрудовойДоговорНаДистанционныеРаботы", ДистанционныеРаботы);
	ПараметрыДоговора.Вставить("ТрудовойДоговорСНадомником", ДоговорСНадомником);
	ПараметрыДоговора.Вставить("ТрудовойДоговорСИностранцем", Ложь);
	
	ПараметрыДоговора.Вставить("ЛичныеДанныеФИОФамилияИмяОтчество");
	ПараметрыДоговора.Вставить("ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживания");
	ПараметрыДоговора.Вставить("ЛичныеДанныеДокументУдостоверяющийЛичностьПредставление");
	ПараметрыДоговора.Вставить("ЛичныеДанныеСтраховойНомерПФР");
	
	ПараметрыДоговора.Вставить("РаботаУсловияОказанияМедпомощи");
	ПараметрыДоговора.Вставить("РаботаИныеДокументыИностранныхГражданНаПечать");
	
	ПараметрыДоговора.Вставить("РаботаДатаПриема");
	ПараметрыДоговора.Вставить("РаботаПодразделениеНаПечать");
	ПараметрыДоговора.Вставить("РаботаДолжность");
	ПараметрыДоговора.Вставить("УсловияТрудаНаРабочемМесте");
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорСрочностьТрудовогоДоговора", НСтр("ru='трудовой договор на неопределенный срок'"));
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорУстановкаИспытательногоСрока", НСтр("ru='не устанавливается'"));
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорДлительностьИспытательногоСрока");
	ПараметрыДоговора.Вставить("РаботаВидЗанятостиНаПечать");
	ПараметрыДоговора.Вставить("ПараметрыДанныхДолжностныеОбязанностиОпределены", НСтр("ru='в должностной инструкции'"));
	
	ПараметрыДоговора.Вставить("ТарифнаяСтавка");
	ПараметрыДоговора.Вставить("СдельнаяОплатаТруда");
	ПараметрыДоговора.Вставить("КомпенсационныеВыплаты", Новый Массив);
	ПараметрыДоговора.Вставить("СтимулирующиеВыплаты", Новый Массив);
	
	ПараметрыДоговора.Вставить("РаботаГрафикРаботыОписаниеДлительностиРабочейНедели", НСтр("ru='40 часов в неделю'"));
	ПараметрыДоговора.Вставить("РаботаГрафикРаботыОписаниеДлительностиРабочейНеделиВДняхНаПечать", НСтр("ru='пятидневная с двумя выходными днями'"));
	ПараметрыДоговора.Вставить("РаботаГрафикРаботыПродолжительностьРабочегоДня", 8);
	
	ПараметрыДоговора.Вставить("РаботаПраваНаОтпускКоличествоДнейОбщегоОтпуска", 28);
	ПараметрыДоговора.Вставить("РаботаПраваНаОтпускКоличествоДнейЗаВредность", 0);
	ПараметрыДоговора.Вставить("РаботаПраваНаОтпускКоличествоДнейСеверного", 0);
	
	ПараметрыДоговора.Вставить("РаботаОрганизацияНаименованиеПолное");
	ПараметрыДоговора.Вставить("РаботаОрганизацияНаименованиеСокращенное");
	ПараметрыДоговора.Вставить("РаботаОрганизацияГородФактическогоАдреса");
	ПараметрыДоговора.Вставить("РаботаОрганизацияЮрАдрес");
	ПараметрыДоговора.Вставить("РаботаОрганизацияФактАдрес");
	ПараметрыДоговора.Вставить("РаботаОрганизацияИНН");
	
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорДолжностьРуководителяВРодительномПадеже");
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорРуководительФамилияИмяОтчествоВРодительномПадеже");
	ПараметрыДоговора.Вставить("РаботаТрудовойДоговорОснованиеПредставителя", НСтр("ru='Устава'"));
	
	ПараметрыДоговора.Вставить("EMail");
	
	Возврат ПараметрыДоговора;
	
КонецФункции

Функция ПредставлениеТарифнойСтавкиДоговоровМикропредприятий(ОписаниеТарифнойСтавки)
	
	ПредставлениеТарифнойСтавки = "";
	
	ПредставлениеТарифнойСтавки = Строка(ОписаниеТарифнойСтавки.Начисление);
	Если ЗначениеЗаполнено(ОписаниеТарифнойСтавки.Размер) Тогда
		ПредставлениеТарифнойСтавки = ПредставлениеТарифнойСтавки + " " + Формат(ОписаниеТарифнойСтавки.Размер, "ЧДЦ=2");
	КонецЕсли;
	
	Возврат ПредставлениеТарифнойСтавки;
	
КонецФункции

Процедура ТрудовойДоговорВывестиРаздел(ИмяОбласти, ДокументРезультат, Макет, ДанныеДоговора, ПараметрыНумерации)
	
	Если ИмяОбласти = "Раздел_ОхранаТруда"
		И (ДанныеДоговора.ТрудовойДоговорНаДистанционныеРаботы
			Или ДанныеДоговора.ТрудовойДоговорСНадомником) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбластьНачалаРаздела = Новый ТабличныйДокумент;
	НомерОбласти = 1;
	
	ОбластьРаздела = Макет.ПолучитьОбласть(ИмяОбласти);
	Для каждого ВложеннаяОбласть Из ОбластьРаздела.Области Цикл
		
		Если ОбластьРаздела.Области.Количество() > 1 И ВложеннаяОбласть.Имя = ИмяОбласти Тогда
			Продолжить;
		КонецЕсли;
		
		ВыводимаяОбласть = ОбластьРаздела.ПолучитьОбласть(ВложеннаяОбласть.Имя);
		
		Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление"
				Или ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
			
			Если ВложеннаяОбласть.Имя = "Пункт_14_б_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.КомпенсационныеВыплаты;
			ИначеЕсли ВложеннаяОбласть.Имя = "Пункт_14_в_Начисление" Тогда
				КоллекцияСтрок = ДанныеДоговора.СтимулирующиеВыплаты;
			Иначе
				КоллекцияСтрок = Новый Массив;
			КонецЕсли;
			
			Если КоллекцияСтрок.Количество() = 0 Тогда
				
				ВыводимаяОбласть.Параметры.РаботаОплатаТрудаНачисление =
					Символы.ПС
					+ Символы.ПС
					+ Символы.ПС
					+ Символы.ПС;
				
			Иначе
				
				ОбластьТаблицы = Новый ТабличныйДокумент;
				Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
					
					ВыводимаяОбласть.Параметры.Заполнить(СтрокаКоллекции);
					ВыводимаяОбласть.Параметры.РаботаОплатаТрудаРазмер = Формат(ВыводимаяОбласть.Параметры.РаботаОплатаТрудаРазмер, "ЧДЦ=2");
					ОбластьТаблицы.Вывести(ВыводимаяОбласть);
					
				КонецЦикла;
				
				ВыводимаяОбласть = ОбластьТаблицы;
				
			КонецЕсли;
			
		Иначе
			
			ВыводимаяОбласть.Параметры.Заполнить(ПараметрыНумерации);
			ВыводимаяОбласть.Параметры.Заполнить(ДанныеДоговора);
			
		КонецЕсли;
		
		Если НомерОбласти > 2 Тогда
			ДокументРезультат.Вывести(ВыводимаяОбласть);
		Иначе
			
			ОбластьНачалаРаздела.Вывести(ВыводимаяОбласть);
			Если НомерОбласти = 2 Тогда
				
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьНачалаРаздела) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ОбластьНачалаРаздела);
				ОбластьНачалаРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерОбласти = НомерОбласти + 1;
		
		Если СтрДлина(ВложеннаяОбласть.Имя) = 8 И СтрНайти(ВложеннаяОбласть.Имя, "Пункт_") = 1 Тогда
			ПараметрыНумерации.НомерПункта = ПараметрыНумерации.НомерПункта + 1;
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, 1);
		ИначеЕсли СтрЧислоВхождений(ВложеннаяОбласть.Имя, "_") = 2 Тогда
			УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерПодпункта + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьНачалаРаздела <> Неопределено Тогда
		
		Если Не ДокументРезультат.ПроверитьВывод(ОбластьНачалаРаздела) Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьНачалаРаздела);
		
	КонецЕсли;
	
	Если СтрНайти(ИмяОбласти, "Раздел_") = 1 Тогда
		УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, ПараметрыНумерации.НомерРаздела + 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНомерРазделаВПараметрахНумерации(ПараметрыНумерации, Знач НомерРаздела)
	
	ПараметрыНумерации.Вставить("НомерРаздела", НомерРаздела);
	ПараметрыНумерации.Вставить("НомерРазделаВРимскойНотации",
		СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(НомерРаздела, Ложь));
	
КонецПроцедуры

Процедура УстановитьНомерПунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПункта)
	
	ПараметрыНумерации.Вставить("НомерПункта", НомерПункта);
	
КонецПроцедуры

Процедура УстановитьНомерПодпунктаВПараметрахНумерации(ПараметрыНумерации, Знач НомерПодпункта)
	
	ПараметрыНумерации.Вставить("НомерПодпункта", НомерПодпункта);
	ПараметрыНумерации.Вставить("НомерПодпунктаБуквой", Сред("абвгдежзиклмнопрстуфхцчшщ", НомерПодпункта, 1));
	
КонецПроцедуры

#КонецОбласти

#Область Т1

Процедура ПечатьТ1(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПечатьТ1ПоДокументам(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Иначе
		ПечатьТ1ПоСправочнику(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	КонецЕсли	
КонецПроцедуры

Процедура ПечатьТ1ПоДокументам(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
	СписокПриказов = Новый Соответствие;
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивОбъектов, "ПриказОПриеме");
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		Если ЗначениеЗаполнено(ДанныеСотрудника.ПриказОПриеме) Тогда
			СписокПриказов.Вставить(ДанныеСотрудника.ПриказОПриеме);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru='По сотруднику %1 не найден приказ о приеме'"), ДанныеСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеСотрудника.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПриказов.Количество() > 0 Тогда
		Документы.ПриемНаРаботу.Печать(
			ОбщегоНазначения.ВыгрузитьКолонку(СписокПриказов, "Ключ"),
			ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, МассивОбъектов);
	Иначе
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т1",
			НСтр("ru = 'Приказ о приеме (Т-1)'"),
			Новый ТабличныйДокумент);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПечатьТ1ПоСправочнику(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Запрос.Параметры.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,Подразделение,Должность,ДатаПриема,ТабельныйНомер,ФИОПолные,Пол");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ТаблицаОтветственныхЛиц = Новый ТаблицаЗначений;
	ТаблицаОтветственныхЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("РуководительРасшифровкаПодписи", Новый ОписаниеТипов("Строка"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("ДолжностьРуководителя", Новый ОписаниеТипов("Строка"));
	
	Сведения = Новый СписокЗначений;
	// Получаем данные из глобальной общей функции.
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ДолжнРук");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			
			НоваяСтрокаОтветственныхЛиц = ТаблицаОтветственныхЛиц.Добавить();
			НоваяСтрокаОтветственныхЛиц.Организация = Выборка.Организация;
			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
			ОргСведения.Свойство("ФИОРук", НоваяСтрокаОтветственныхЛиц.РуководительРасшифровкаПодписи);
			ОргСведения.Свойство("ДолжнРук", НоваяСтрокаОтветственныхЛиц.ДолжностьРуководителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтветственныхЛиц", ТаблицаОтветственныхЛиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтветственныхЛиц.Организация КАК Организация,
		|	ТаблицаОтветственныхЛиц.РуководительРасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ТаблицаОтветственныхЛиц.ДолжностьРуководителя КАК ДолжностьРуководителя
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	&ТаблицаОтветственныхЛиц КАК ТаблицаОтветственныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК СсылкаНаОбъект,
		|	КадровыеДанныеСотрудников.Сотрудник КАК РаботаСотрудник,
		|	КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СсылкаНаОбъектОрганизацияНаименованиеСокращенное,
		|	КадровыеДанныеСотрудников.Организация.КодПоОКПО КАК СсылкаНаОбъектОрганизацияКодПоОКПО,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК РаботаДатаПриема,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ЛичныеДанныеФИОПолные,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК РаботаСотрудникКод,
		|	КадровыеДанныеСотрудников.Подразделение КАК РаботаПодразделение,
		|	КадровыеДанныеСотрудников.Должность.Наименование КАК РаботаДолжность,
		|	КадровыеДанныеСотрудников.Пол КАК ЛичныеДанныеПол,
		|	ОтветственныеЛица.РуководительРасшифровкаПодписи КАК СсылкаНаОбъектРуководительРасшифровкаПодписи,
		|	ОтветственныеЛица.ДолжностьРуководителя КАК СсылкаНаОбъектДолжностьРуководителя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|		ПО КадровыеДанныеСотрудников.Организация = ОтветственныеЛица.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	СсылкаНаОбъект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеСсылок = Новый ДеревоЗначений;
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъект");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияНаименованиеСокращенное");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияКодПоОКПО");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДата");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("ЛичныеДанныеФИОФамилияИмяОтчествоВВинительномПадеже");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудникТабельныйНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаПодразделениеНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДатаПриема");
	ДанныеСсылок.Колонки.Добавить("РаботаДолжность");
	ДанныеСсылок.Колонки.Добавить("РаботаСведенияОбОплатеТрудаТарифнаяСтавкаНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаУсловияПриема");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудник");
	ДанныеСсылок.Колонки.Добавить("РаботаТрудовойДоговорДатаОформленияНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаТрудовойДоговорНомер");
	ДанныеСсылок.Колонки.Добавить("РаботаДлительностьИспытательногоСрока");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДолжностьРуководителя");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектРуководительРасшифровкаПодписи");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОзнакомленияРаботника");
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("СсылкаНаОбъект") Цикл
			
			Если ЗначениеЗаполнено(Выборка.РаботаДатаПриема) Тогда
				
				СтрокаСсылки = ДанныеСсылок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Выборка);
				
				Если Не ЗначениеЗаполнено(СтрокаСсылки.СсылкаНаОбъектДата) Тогда
					СтрокаСсылки.СсылкаНаОбъектДата = ТекущаяДатаСеанса();
				КонецЕсли;
				
				СтрокаСсылки.ЛичныеДанныеФИОФамилияИмяОтчествоВВинительномПадеже =
					ЗарплатаКадрыОтчеты.ПросклоненныеФИО(Выборка.ЛичныеДанныеФИОПолные, 4, Выборка.ЛичныеДанныеПол);
				
				СтрокаСсылки.РаботаСотрудникТабельныйНомерНаПечать = ЗарплатаКадрыОтчеты.ТабельныйНомерНаПечать(Выборка.РаботаСотрудникКод);
				СтрокаСсылки.РаботаПодразделениеНаПечать = ЗарплатаКадрыОтчеты.ПодразделениеНаПечать(Выборка.РаботаПодразделение);
				
				СтрокаСсылки.РаботаТрудовойДоговорДатаОформленияНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью('00010101');
				СтрокаСсылки.РаботаТрудовойДоговорНомер = "_____";
				
				СтрокаСсылки.СсылкаНаОбъектДатаОзнакомленияРаботника = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(СтрокаСсылки.СсылкаНаОбъектДата);
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаСотрудника = СтрокаСсылки.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаСсылки);
					
				КонецЦикла;
				
			Иначе
				
				ТекстСообщения = СтрШаблон(НСтр("ru='Сотрудник %1 не оформлен на работу'"), Выборка.РаботаСотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.РаботаСотрудник);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Если ДанныеСсылок.Строки.Количество() > 0 Тогда
		КадровыйУчет.ВывестиНаПечатьТ1(ДокументРезультат, ДанныеСсылок.Строки, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т1"), , ОбъектыПечати);
	КонецЕсли;
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т1",
		НСтр("ru = 'Приказ о приеме (Т-1)'"),
		ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

Процедура ПечатьТ2(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОтчетТ2 = Отчеты.УнифицированнаяФормаТ2.Создать();
	ОтчетТ2.ИнициализироватьОтчет();
	ОтчетТ2.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетТ2.СхемаКомпоновкиДанных.ВариантыНастроек.Т2.Настройки);
	
	Отбор = ОтчетТ2.КомпоновщикНастроек.Настройки.Отбор;
	
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, МассивОбъектов);
	
	ОтчетТ2.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОтчетТ2.СкомпоноватьРезультат(ДокументРезультат);
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т2", НСтр("ru='Личная карточка (Т-2)'"),
		ДокументРезультат, ,);
		
КонецПроцедуры

#Область Т5

Процедура ПечатьТ5(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПечатьТ5ПоДокументам(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Иначе
		ПечатьТ5ПоСправочнику(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	КонецЕсли	
КонецПроцедуры

Процедура ПечатьТ5ПоДокументам(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
		СписокПриказов = Новый Массив;
		
		ПоследниеКадровыеПереводы = Справочники.Сотрудники.ПоследниеКадровыеПереводы(МассивОбъектов);
		Для Каждого СотрудникПеревод Из ПоследниеКадровыеПереводы Цикл
			Если ЗначениеЗаполнено(СотрудникПеревод.Регистратор) Тогда
				СписокПриказов.Добавить(СотрудникПеревод.Регистратор);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru='По сотруднику %1 не найден приказ о переводе'"), СотрудникПеревод.Сотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СотрудникПеревод.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокПриказов.Количество() > 0 Тогда
			Документы.КадровыйПеревод.Печать(
				СписокПриказов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, МассивОбъектов);
		Иначе
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ПФ_MXL_Т5",
				НСтр("ru = 'Приказ о переводе (Т-5)'"),
				Новый ТабличныйДокумент);
		КонецЕсли;
		
КонецПроцедуры

Процедура ПечатьТ5ПоСправочнику(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Запрос.Параметры.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,Подразделение,Должность,ДатаПриема,ТабельныйНомер,ФИОПолные,Пол");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ТаблицаОтветственныхЛиц = Новый ТаблицаЗначений;
	ТаблицаОтветственныхЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("РуководительРасшифровкаПодписи", Новый ОписаниеТипов("Строка"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("ДолжностьРуководителя", Новый ОписаниеТипов("Строка"));
	
	Сведения = Новый СписокЗначений;
	// Получаем данные из глобальной общей функции.
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ДолжнРук");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			
			НоваяСтрокаОтветственныхЛиц = ТаблицаОтветственныхЛиц.Добавить();
			НоваяСтрокаОтветственныхЛиц.Организация = Выборка.Организация;
			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
			ОргСведения.Свойство("ФИОРук", НоваяСтрокаОтветственныхЛиц.РуководительРасшифровкаПодписи);
			ОргСведения.Свойство("ДолжнРук", НоваяСтрокаОтветственныхЛиц.ДолжностьРуководителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтветственныхЛиц", ТаблицаОтветственныхЛиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтветственныхЛиц.Организация КАК Организация,
		|	ТаблицаОтветственныхЛиц.РуководительРасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ТаблицаОтветственныхЛиц.ДолжностьРуководителя КАК ДолжностьРуководителя
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	&ТаблицаОтветственныхЛиц КАК ТаблицаОтветственныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК СсылкаНаОбъект,
		|	КадровыеДанныеСотрудников.Сотрудник КАК РаботаСотрудник,
		|	КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СсылкаНаОбъектОрганизацияНаименованиеСокращенное,
		|	КадровыеДанныеСотрудников.Организация.КодПоОКПО КАК СсылкаНаОбъектОрганизацияКодПоОКПО,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК РаботаДатаПриема,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ЛичныеДанныеФИОПолные,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК РаботаСотрудникКод,
		|	КадровыеДанныеСотрудников.Подразделение КАК РаботаПодразделение,
		|	КадровыеДанныеСотрудников.Должность.Наименование КАК РаботаДолжность,
		|	КадровыеДанныеСотрудников.Пол КАК ЛичныеДанныеПол,
		|	ОтветственныеЛица.РуководительРасшифровкаПодписи КАК СсылкаНаОбъектРуководительРасшифровкаПодписи,
		|	ОтветственныеЛица.ДолжностьРуководителя КАК СсылкаНаОбъектДолжностьРуководителя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|		ПО КадровыеДанныеСотрудников.Организация = ОтветственныеЛица.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	СсылкаНаОбъект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеСсылок = Новый ДеревоЗначений;
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъект");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияНаименованиеСокращенное");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияКодПоОКПО");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДата");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДатаНачалаПеревода");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудник");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудникТабельныйНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("ЛичныеДанныеФИОФамилияИмяОтчествоВВинительномПадеже");
	ДанныеСсылок.Колонки.Добавить("РаботаВидПеревода");
	ДанныеСсылок.Колонки.Добавить("РаботаПодразделениеПрежнееНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДолжностьПрежняя");
	ДанныеСсылок.Колонки.Добавить("РаботаПричинаПеревода");
	ДанныеСсылок.Колонки.Добавить("РаботаПодразделениеНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДолжность");
	ДанныеСсылок.Колонки.Добавить("РаботаСведенияОбОплатеТрудаТарифнаяСтавкаНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаОснованиеПеревода");
	ДанныеСсылок.Колонки.Добавить("РаботаТрудовойДоговорДатаОформленияНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаТрудовойДоговорНомер");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДолжностьРуководителя");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектРуководительРасшифровкаПодписи");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОзнакомленияРаботника");
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("СсылкаНаОбъект") Цикл
			
			Если ЗначениеЗаполнено(Выборка.РаботаДатаПриема) Тогда
				
				СтрокаСсылки = ДанныеСсылок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Выборка);
				
				Если Не ЗначениеЗаполнено(СтрокаСсылки.СсылкаНаОбъектДата) Тогда
					СтрокаСсылки.СсылкаНаОбъектДата = ТекущаяДатаСеанса();
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаСсылки.РаботаДатаНачалаПеревода) Тогда
					СтрокаСсылки.РаботаДатаНачалаПеревода = СтрокаСсылки.СсылкаНаОбъектДата;
				КонецЕсли;
				
				СтрокаСсылки.ЛичныеДанныеФИОФамилияИмяОтчествоВВинительномПадеже =
					ЗарплатаКадрыОтчеты.ПросклоненныеФИО(Выборка.ЛичныеДанныеФИОПолные, 4, Выборка.ЛичныеДанныеПол);
				
				СтрокаСсылки.РаботаСотрудникТабельныйНомерНаПечать = ЗарплатаКадрыОтчеты.ТабельныйНомерНаПечать(Выборка.РаботаСотрудникКод);
				СтрокаСсылки.РаботаПодразделениеНаПечать = ЗарплатаКадрыОтчеты.ПодразделениеНаПечать(Выборка.РаботаПодразделение);
				
				СтрокаСсылки.РаботаВидПеревода = НСтр("ru='постоянно'");
				
				СтрокаСсылки.РаботаТрудовойДоговорДатаОформленияНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью('00010101');
				СтрокаСсылки.РаботаТрудовойДоговорНомер = "_____";
				
				СтрокаСсылки.СсылкаНаОбъектДатаОзнакомленияРаботника = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(СтрокаСсылки.СсылкаНаОбъектДата);
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаСотрудника = СтрокаСсылки.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаСсылки);
					
				КонецЦикла;
				
			Иначе
				
				ТекстСообщения = СтрШаблон(НСтр("ru='Сотрудник %1 не оформлен на работу'"), Выборка.РаботаСотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.РаботаСотрудник);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Если ДанныеСсылок.Строки.Количество() > 0 Тогда
		КадровыйУчет.ВывестиНаПечатьТ5(ДокументРезультат, ДанныеСсылок.Строки, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т5"), , ОбъектыПечати);
	КонецЕсли;
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т5",
		НСтр("ru = 'Приказ о переводе (Т-5)'"),
		ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область Т8

Процедура ПечатьТ8(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПечатьТ8ПоДокументам(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Иначе
		ПечатьТ8ПоСправочнику(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	КонецЕсли	
КонецПроцедуры

Процедура ПечатьТ8ПоДокументам(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СписокПриказов = Новый Соответствие;
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивОбъектов, "ПриказОбУвольнении");
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		Если ЗначениеЗаполнено(ДанныеСотрудника.ПриказОбУвольнении) Тогда
			СписокПриказов.Вставить(ДанныеСотрудника.ПриказОбУвольнении);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru='По сотруднику %1 не найден приказ об увольнении'"), ДанныеСотрудника.Сотрудник);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеСотрудника.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПриказов.Количество() > 0 Тогда
		Документы.Увольнение.Печать(
			ОбщегоНазначения.ВыгрузитьКолонку(СписокПриказов, "Ключ"),
			ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, МассивОбъектов);
	Иначе
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_Т8",
			НСтр("ru = 'Приказ об увольнении (Т-8)'"),
			Новый ТабличныйДокумент);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПечатьТ8ПоСправочнику(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Запрос.Параметры.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,Подразделение,Должность,ДатаУвольнения,ТабельныйНомер,ФИОПолные,Пол");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ТаблицаОтветственныхЛиц = Новый ТаблицаЗначений;
	ТаблицаОтветственныхЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("РуководительРасшифровкаПодписи", Новый ОписаниеТипов("Строка"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("ДолжностьРуководителя", Новый ОписаниеТипов("Строка"));
	
	Сведения = Новый СписокЗначений;
	// Получаем данные из глобальной общей функции.
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ДолжнРук");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			
			НоваяСтрокаОтветственныхЛиц = ТаблицаОтветственныхЛиц.Добавить();
			НоваяСтрокаОтветственныхЛиц.Организация = Выборка.Организация;
			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
			ОргСведения.Свойство("ФИОРук", НоваяСтрокаОтветственныхЛиц.РуководительРасшифровкаПодписи);
			ОргСведения.Свойство("ДолжнРук", НоваяСтрокаОтветственныхЛиц.ДолжностьРуководителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтветственныхЛиц", ТаблицаОтветственныхЛиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтветственныхЛиц.Организация КАК Организация,
		|	ТаблицаОтветственныхЛиц.РуководительРасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ТаблицаОтветственныхЛиц.ДолжностьРуководителя КАК ДолжностьРуководителя
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	&ТаблицаОтветственныхЛиц КАК ТаблицаОтветственныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК СсылкаНаОбъект,
		|	КадровыеДанныеСотрудников.Сотрудник КАК РаботаСотрудник,
		|	КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СсылкаНаОбъектОрганизацияНаименованиеСокращенное,
		|	КадровыеДанныеСотрудников.Организация.КодПоОКПО КАК СсылкаНаОбъектОрганизацияКодПоОКПО,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК РаботаДатаУвольнения,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК ЛичныеДанныеФИОПолные,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК РаботаСотрудникКод,
		|	КадровыеДанныеСотрудников.Подразделение КАК РаботаПодразделение,
		|	КадровыеДанныеСотрудников.Должность.Наименование КАК РаботаДолжность,
		|	КадровыеДанныеСотрудников.Пол КАК ЛичныеДанныеПол,
		|	ОтветственныеЛица.РуководительРасшифровкаПодписи КАК СсылкаНаОбъектРуководительРасшифровкаПодписи,
		|	ОтветственныеЛица.ДолжностьРуководителя КАК СсылкаНаОбъектДолжностьРуководителя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|		ПО КадровыеДанныеСотрудников.Организация = ОтветственныеЛица.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	СсылкаНаОбъект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеСсылок = Новый ДеревоЗначений;
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъект");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияНаименованиеСокращенное");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектОрганизацияКодПоОКПО");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДата");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДатаУвольненияНаПечать");
	ДанныеСсылок.Колонки.Добавить("ЛичныеДанныеФИОФамилияИмяОтчествоВВинительномПадеже");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудникТабельныйНомерНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаПодразделениеНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаДолжность");
	ДанныеСсылок.Колонки.Добавить("РаботаСотрудник");
	ДанныеСсылок.Колонки.Добавить("РаботаСтатьяТКРФНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаОснованиеУвольнения");
	ДанныеСсылок.Колонки.Добавить("РаботаТрудовойДоговорДатаОформленияНаПечать");
	ДанныеСсылок.Колонки.Добавить("РаботаТрудовойДоговорНомер");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДолжностьРуководителя");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектРуководительРасшифровкаПодписи");
	ДанныеСсылок.Колонки.Добавить("СсылкаНаОбъектДатаОзнакомленияРаботника");
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("СсылкаНаОбъект") Цикл
			
			Если ЗначениеЗаполнено(Выборка.РаботаДатаУвольнения) Тогда
				
				СтрокаСсылки = ДанныеСсылок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСсылки, Выборка);
				
				Если Не ЗначениеЗаполнено(СтрокаСсылки.СсылкаНаОбъектДата) Тогда
					СтрокаСсылки.СсылкаНаОбъектДата = ТекущаяДатаСеанса();
				КонецЕсли;
				
				СтрокаСсылки.ЛичныеДанныеФИОФамилияИмяОтчествоВВинительномПадеже =
					ЗарплатаКадрыОтчеты.ПросклоненныеФИО(Выборка.ЛичныеДанныеФИОПолные, 4, Выборка.ЛичныеДанныеПол);
				
				СтрокаСсылки.РаботаСотрудникТабельныйНомерНаПечать = ЗарплатаКадрыОтчеты.ТабельныйНомерНаПечать(Выборка.РаботаСотрудникКод);
				СтрокаСсылки.РаботаПодразделениеНаПечать = ЗарплатаКадрыОтчеты.ПодразделениеНаПечать(Выборка.РаботаПодразделение);
				
				СтрокаСсылки.РаботаДатаУвольненияНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Выборка.РаботаДатаУвольнения);
				
				СтрокаСсылки.РаботаТрудовойДоговорДатаОформленияНаПечать = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью('00010101');
				СтрокаСсылки.РаботаТрудовойДоговорНомер = "_____";
				
				СтрокаСсылки.СсылкаНаОбъектДатаОзнакомленияРаботника = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(СтрокаСсылки.СсылкаНаОбъектДата);
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаСотрудника = СтрокаСсылки.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаСсылки);
					
				КонецЦикла;
				
			Иначе
				
				ТекстСообщения = СтрШаблон(НСтр("ru='Сотруднику %1 не оформлено увольнение'"), Выборка.РаботаСотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.РаботаСотрудник);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Если ДанныеСсылок.Строки.Количество() > 0 Тогда
		КадровыйУчет.ВывестиНаПечатьТ8(ДокументРезультат, ДанныеСсылок.Строки, УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т8"), , ОбъектыПечати);
	КонецЕсли;
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_Т8",
		НСтр("ru = 'Приказ об увольнении (Т-8)'"),
		ДокументРезультат);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийМодуляМенеджера

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Перем Организация;
	Перем ГоловнаяОрганизация;
	
	РезультатЗапроса = Неопределено;
	
	Если Параметры.Свойство("СтрокаПоиска") 
		И НЕ ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		УстановитьПривилегированныйРежим(Истина);
		ФизическиеЛицаЗарплатаКадры.СоздатьВТПрежниеФИО(Запрос.МенеджерВременныхТаблиц, Ложь, Параметры.СтрокаПоиска);
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПрежниеФИО.ФИО КАК ФИО,
			|	ПрежниеФИО.Фамилия КАК Фамилия,
			|	ПрежниеФИО.Имя КАК Имя,
			|	ПрежниеФИО.Отчество КАК Отчество,
			|	ПрежниеФИО.Инициалы КАК Инициалы,
			|	Сотрудники.УточнениеНаименования КАК УточнениеНаименования,
			|	Сотрудники.ФизическоеЛицо.УточнениеНаименования КАК УточнениеНаименованияФизическогоЛица,
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	МАКСИМУМ(ПрежниеФИО.Период) КАК Период,
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления
			|ПОМЕСТИТЬ ВТВсеСовпадения
			|ИЗ
			|	ВТПрежниеФИО КАК ПрежниеФИО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ПрежниеФИО.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
			|
			|СГРУППИРОВАТЬ ПО
			|	ПрежниеФИО.ФИО,
			|	ПрежниеФИО.Фамилия,
			|	ПрежниеФИО.Имя,
			|	ПрежниеФИО.Отчество,
			|	ПрежниеФИО.Инициалы,
			|	Сотрудники.УточнениеНаименования,
			|	Сотрудники.Ссылка,
			|	Сотрудники.ПометкаУдаления,
			|	Сотрудники.ФизическоеЛицо.УточнениеНаименования
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Сотрудники.ФизическоеЛицо.ФИО,
			|	Сотрудники.ФизическоеЛицо.Фамилия,
			|	Сотрудники.ФизическоеЛицо.Имя,
			|	Сотрудники.ФизическоеЛицо.Отчество,
			|	Сотрудники.ФизическоеЛицо.Инициалы,
			|	Сотрудники.УточнениеНаименования,
			|	Сотрудники.ФизическоеЛицо.УточнениеНаименования,
			|	Сотрудники.Ссылка,
			|	ВЫРАЗИТЬ(NULL КАК БУЛЕВО),
			|	Сотрудники.ПометкаУдаления
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Наименование ПОДОБНО &СтрокаПоиска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВсеСовпадения.ФИО КАК ФИО,
			|	ВсеСовпадения.УточнениеНаименования КАК УточнениеНаименования,
			|	ВсеСовпадения.УточнениеНаименованияФизическогоЛица КАК УточнениеНаименованияФизическогоЛица,
			|	ВсеСовпадения.Сотрудник КАК Сотрудник,
			|	ВсеСовпадения.Период КАК Период,
			|	ВсеСовпадения.Сотрудник.Код КАК Код,
			|	ВсеСовпадения.ПометкаУдаления КАК ПометкаУдаления,
			|	ВсеСовпадения.Фамилия КАК Фамилия,
			|	ВсеСовпадения.Имя КАК Имя,
			|	ВсеСовпадения.Отчество КАК Отчество,
			|	ВсеСовпадения.Инициалы КАК Инициалы,
			|	ВсеСовпадения.Сотрудник.ФизическоеЛицо.ФИО КАК ФИОТекущее,
			|	ВсеСовпадения.Сотрудник.Наименование КАК Наименование
			|ИЗ
			|	ВТВсеСовпадения КАК ВсеСовпадения
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФИО";
			
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЕсли;
	
	Если РезультатЗапроса <> Неопределено И Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеВыбора = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		ДлинаСтрокиПоиска = СтрДлина(Параметры.СтрокаПоиска);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Период) Тогда
				
				Представление = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Выборка.ФИО, ДлинаСтрокиПоиска),
						Новый Шрифт( , , Истина),
						WebЦвета.Зеленый),
					Сред(Выборка.ФИО, ДлинаСтрокиПоиска + 1),
					?(ПустаяСтрока(Выборка.УточнениеНаименования), "", " " + Выборка.УточнениеНаименования));
				
				Если ЗначениеЗаполнено(Выборка.Фамилия) Тогда
					ФИОТекущее = Новый Структура("Фамилия,Имя,Отчество,Инициалы");
					ЗаполнитьЗначенияСвойств(ФИОТекущее, Выборка);
				Иначе
					ФИОТекущее = Выборка.ФИОТекущее;
				КонецЕсли;
				
				Представление = Новый ФорматированнаяСтрока(
					Представление,
					" (" + ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИОТекущее) + " " 
						+ НСтр("ru='с'") + " " + Формат(Выборка.Период, "ДЛФ=D") + " (" + Выборка.Код + "))");
				
			Иначе
				
				Представление = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Выборка.Наименование, ДлинаСтрокиПоиска),
						Новый Шрифт( , , Истина),
						WebЦвета.Зеленый),
					Сред(Выборка.Наименование, ДлинаСтрокиПоиска + 1) + " (" + Выборка.Код + ")");
				
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Выборка.Сотрудник, Представление, Выборка.ПометкаУдаления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.Отбор.Свойство("ТекущаяОрганизация", Организация);
	Параметры.Отбор.Свойство("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ГоловнаяОрганизация);
		Параметры.Отбор.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Иначе
		Параметры.Отбор.Удалить("ГоловнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Параметры.Отбор.Удалить("ТекущаяОрганизация");
	КонецЕсли;
	
	Параметры.Отбор.Удалить("ТекущееПодразделение");
	
	Если Организация <> НеОпределено Тогда
		// Если есть отбор по текущей организации - отрабатываем особенным образом.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
		
		Если ФОИспользоватьКадровыйУчет Тогда
			
			ЗапросТекст =
			"ВЫБРАТЬ *
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
			|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковИнтервальный.Сотрудник
			|			И (КадроваяИсторияСотрудниковИнтервальный.ДатаНачала В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					Т.ДатаНачала
			|				ИЗ
			|					РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК Т
			|				ГДЕ
			|					Сотрудники.Ссылка = Т.Сотрудник
			|					И &МаксимальнаяДатаНачалоДня МЕЖДУ Т.ДатаНачала И Т.ДатаОкончания
			|				УПОРЯДОЧИТЬ ПО
			|					Т.ДатаНачала УБЫВ))
			|ГДЕ
			|	ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
			|	И &ДополнительноеУсловие";
			
			Запрос.УстановитьПараметр("МаксимальнаяДатаНачалоДня", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
			
		Иначе
			
			ЗапросТекст =
				"ВЫБРАТЬ *
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|		ПО (ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка)
				|			И (ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
				|ГДЕ
				|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
				|	И &ДополнительноеУсловие";
			
		КонецЕсли;
		
		Если Параметры.Свойство("ДоступныНепринятые")
			И Параметры.ДоступныНеПринятые Тогда
			
			Если ЗначениеЗаполнено(Организация) Тогда
				
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ДополнительноеУсловие",
					"Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
					|	И &ДополнительноеУсловие");
				Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
			
		Иначе
			
			Если ФОИспользоватьКадровыйУчет Тогда
				
				Если Организация = НеОпределено Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "");
					
				ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "ЕСТЬNULL(КадроваяИсторияСотрудниковИнтервальный.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&Организация)
						|	И ");
					
				КонецЕсли;
				
			Иначе
				
				Если Организация = НеОпределено Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "");
					
				ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
					
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
						|	И ", "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&Организация)
						|	И ");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = ЗапросТекст;
		
		Если ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
			ИспользоватьДанныеВыбора = Истина;
		Иначе
			ИспользоватьДанныеВыбора = Ложь;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
		
		ИспользоватьДанныеВыбора = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ *
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	(ИСТИНА)
			|	И &ДополнительноеУсловие";
		
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Сотрудники, Параметры, Запрос, "Сотрудники", ИспользоватьДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = "ФормаСписка";
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ВыбраннаяФорма = "ФормаСписка";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяФорма) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли; 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
			Параметры.Отбор, 
			Справочники.Сотрудники.СтандартныйОтбор(),
			Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	// В базовой реализации поведение по умолчанию
КонецПроцедуры

#КонецОбласти

Функция СтандартныйОтбор() Экспорт
	Возврат Новый Структура("ВАрхиве", Ложь);
КонецФункции

Функция ПоследниеКадровыеПереводы(Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		ИзмеренияДаты.Добавить().Сотрудник = Сотрудник;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмеренияДаты.ДатаНачала КАК ДатаНачала,
		|	ИзмеренияДаты.ДатаОкончания КАК ДатаОкончания,
		|	ИзмеренияДаты.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&ИзмеренияДаты КАК ИзмеренияДаты";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "=", Перечисления.ВидыКадровыхСобытий.Перемещение);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
		ПараметрыПостроения,
		"ВТКадроваяИсторияСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
		,
		"ВТПлановыеНачисления");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник"),
		,
		"ВТПлановыеАвансы");
	
	ТипыКадровыхПереводов = Новый Массив;
	ТипыКадровыхПереводов.Добавить(Тип("ДокументСсылка.КадровыйПеревод"));
	
	Запрос.УстановитьПараметр("ТипыКадровыхПереводов", ТипыКадровыхПереводов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(КадроваяИсторияСотрудников.ПериодЗаписи) КАК ПериодЗаписи,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыКадроваяИсторияСотрудников
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПлановыеНачисления.ПериодЗаписи) КАК ПериодЗаписи,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеНачисления.Регистратор) В (&ТипыКадровыхПереводов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПлановыеАвансы.ПериодЗаписи) КАК ПериодЗаписи,
		|	ПлановыеАвансы.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыПлановыеАвансы
		|ИЗ
		|	ВТПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеАвансы.Регистратор) В (&ТипыКадровыхПереводов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеАвансы.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.ПериодЗаписи КАК Период,
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТКадровыеПереводы
		|ИЗ
		|	ВТПериодыКадроваяИсторияСотрудников КАК ПериодыРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ПериодыРегистра.ПериодЗаписи = КадроваяИсторияСотрудников.ПериодЗаписи
		|			И ПериодыРегистра.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ПериодЗаписи,
		|	ПлановыеНачисления.Регистратор,
		|	ПлановыеНачисления.Сотрудник
		|ИЗ
		|	ВТПериодыПлановыеНачисления КАК ПериодыРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ПО ПериодыРегистра.ПериодЗаписи = ПлановыеНачисления.ПериодЗаписи
		|			И ПериодыРегистра.Сотрудник = ПлановыеНачисления.Сотрудник
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеНачисления.Регистратор) В (&ТипыКадровыхПереводов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеАвансы.ПериодЗаписи,
		|	ПлановыеАвансы.Регистратор,
		|	ПлановыеАвансы.Сотрудник
		|ИЗ
		|	ВТПериодыПлановыеАвансы КАК ПериодыРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеАвансы КАК ПлановыеАвансы
		|		ПО ПериодыРегистра.ПериодЗаписи = ПлановыеАвансы.ПериодЗаписи
		|			И ПериодыРегистра.Сотрудник = ПлановыеАвансы.Сотрудник
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПлановыеАвансы.Регистратор) В (&ТипыКадровыхПереводов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(КадровыеПереводы.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК Период,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыПереводов
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПереводы КАК КадровыеПереводы
		|		ПО СотрудникиПериоды.Сотрудник = КадровыеПереводы.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПереводов.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(КадровыеПереводы.Регистратор) КАК Регистратор
		|ИЗ
		|	ВТПериодыПереводов КАК ПериодыПереводов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПереводы КАК КадровыеПереводы
		|		ПО ПериодыПереводов.Период = КадровыеПереводы.Период
		|			И ПериодыПереводов.Сотрудник = КадровыеПереводы.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыПереводов.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти
