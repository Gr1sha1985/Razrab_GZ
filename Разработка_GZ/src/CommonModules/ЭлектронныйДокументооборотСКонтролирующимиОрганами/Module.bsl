#Область ПрограммныйИнтерфейс

Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	// На основе https://its.1c.ru/db/elreps#content:74:hdoc
	
	НовыеРазрешения = Новый Массив;

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"regservice.keydisk.ru",
		80,
		НСтр("ru = 'Ключевой ресурс для работы сервиса, доступ обязателен'"));
	НовыеРазрешения.Добавить(Разрешение);

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"SMTP",
		"report.keydisk.ru",
		465,
		НСтр("ru = 'Обмен данными с контролирующими органами ФНС, ПФР, Росстат'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"SMTP",
		"report.keydisk.ru",
		25,
		НСтр("ru = 'Обмен данными с контролирующими органами ФНС, ПФР, Росстат'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"POP3",
		"report.keydisk.ru",
		110,
		НСтр("ru = 'Обмен данными с контролирующими органами ФНС, ПФР, Росстат'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"POP3",
		"report.keydisk.ru",
		995,
		НСтр("ru = 'Обмен данными с контролирующими органами ФНС, ПФР, Росстат'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"service.fsrar.ru",
		443,
		НСтр("ru = 'Отправка деклараций по оптовой торговле.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"service.alcolicenziat.ru",
		443,
		НСтр("ru = 'Отправка деклараций по розничной торговле.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"f4.fss.ru",
		80,
		НСтр("ru = 'Отправка 4-ФСС.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"docs.fss.ru",
		80,
		НСтр("ru = 'Отправка документа Реестр сведений, необходимых для назначения и выплаты пособий'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"docs.fss.ru",
		443,
		НСтр("ru = 'Отправка документа Реестр ЭЛН для отправки в ФСС, отчета Подтверждение вида деятельности.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"213.171.56.46",
		80,
		НСтр("ru = 'Отправка в Росприроднадзор.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"edata.customs.ru",
		443,
		НСтр("ru = 'Отправка в Росприроднадзор.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"nfo-report.1c.ru",
		443,
		НСтр("ru = 'Отправка в Банк России.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"reportbank.1c.ru",
		443,
		НСтр("ru = 'Отправка в Сбербанк.'"));
	НовыеРазрешения.Добавить(Разрешение);

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"websbor.gks.ru",
		80,
		НСтр("ru = 'Отправка в Росстат.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"online.gks.ru",
		80,
		НСтр("ru = 'Отправка в Росстат.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"downloads.1c.ru",
		80,
		НСтр("ru = 'Автоматическая загрузка и подключение внешних модулей отчетности, настроек сервиса.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"reputils.1c.ru",
		443,
		НСтр("ru = 'Возможность передачи диагностических отчетов в техподдержку «1С-Отчетности».'"));
	НовыеРазрешения.Добавить(Разрешение);

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		"callback.keydisk.ru",
		80,
		НСтр("ru = 'Возможность отправить заявку на обратный звонок техподдержки сервиса.'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"www.cryptopro.ru",
		443,
		НСтр("ru = 'Установка криптопровайдера КриптоПро CSP из помощника подключения сервиса «1С-Отчетность».'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"getserial.infotecs.ru",
		443,
		НСтр("ru = 'Установка криптопровайдера ViPNet CSP из помощника подключения сервиса «1С-Отченость».'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"sedo.fss.ru",
		443,
		НСтр("ru = 'Социальный электронный документооборот ФСС (СЭДО ФСС).'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.ДоверенностиНалогоплательщика);

КонецПроцедуры

Функция СоздатьОбъектДляРаботыСДвоичнымиДанными() Экспорт
	
	ДвДанные = НовыйОбъектДвоичныеДанные(Истина);
	Если ДвДанные = Неопределено Тогда
		
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
		
		Если ПодключитьВК(ПутьВК, Истина) Тогда
			
			ДвДанные = НовыйОбъектДвоичныеДанные(Ложь);
			Если ДвДанные = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвДанные;
	
КонецФункции

Функция НовыйОбъектДвоичныеДанные(ТихийРежим = Истина)
	
	Попытка
		
		ДвДанные = Новый("Addin.ЭДОNative.BinaryDataS");
		Возврат ДвДанные;
		
	Исключение
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = НСтр("ru='Не удалось создать объект для работы с двоичными данными.'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПодключитьВК(ПутьВК, ТихийРежим = Истина)
	
	Попытка
		КодВозврата = ПодключитьВнешнююКомпоненту(ПутьВК, "ЭДОNative");
	Исключение
		КодВозврата = Ложь;
	КонецПопытки;
	
	Если НЕ КодВозврата И НЕ ТихийРежим Тогда
		ТекстСообщения = НСтр("ru='Не удалось подключить внешнюю компоненту для работы с криптографией.'");
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
	КонецЕсли;
	
	Возврат КодВозврата;
	
КонецФункции

Процедура ПриЗаписиОрганизации(ОбъектЗаписи, Отказ) Экспорт 
		
	Если ЗначениеЗаполнено(ОбъектЗаписи.УчетнаяЗаписьОбмена) И Не ОбъектЗаписи.ПометкаУдаления
		И ОбъектЗаписи.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		ДокументооборотСКО.НастроитьОбменПоУчетнойЗаписи(ОбъектЗаписи.УчетнаяЗаписьОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодключенныеОрганизации(ОтборОрганизации = Неопределено) Экспорт
	
	ТипОтбораОрганизации = ТипЗнч(ОтборОрганизации);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	Организации.Ссылка КАК Ссылка
						  |ИЗ
						  |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
						  |	И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗаписьОбмена"
						  + ?(ОтборОрганизации <> Неопределено, ?(ТипОтбораОрганизации <> Тип("Массив"), "
						  |	И Организации.Ссылка = &ОтборОрганизации", "
						  |	И Организации.Ссылка В (&ОтборОрганизации)"), "") + "
						  |	И НЕ Организации.ПометкаУдаления
						  |	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗаписьОбмена", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОтборОрганизации", ОтборОрганизации);
	
	Попытка
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОтборОрганизации <> Неопределено И ТипОтбораОрганизации <> Тип("Массив") Тогда
		Результат = (ТаблицаЗапроса.Количество() > 0);
		
	Иначе
		Результат = Новый Массив;
		Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
			Результат.Добавить(СтрокаЗапроса.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаголовокГиперссылкиЗаявления(ФормаОрганизации, Организация, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗаголовокПервичногоЗаявления = НСтр("ru = 'Заявление на подключение к 1С-Отчетности'");
	ЗаголовокВторичногоЗаявления = НСтр("ru = 'Заявление на продление 1С-Отчетности или изменение реквизитов'");
	
	// Инициализируем контекст
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	// проверяем на наличие права к документообороту
	Если КонтекстЭДОСервер = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
	ПоддерживаетсяВторичноеЗаявление = КонтекстЭДОСервер.ПоддерживаетсяВторичноеЗаявление(Организация);
	
	Если ПоддерживаетсяВторичноеЗаявление Тогда
		Возврат ЗаголовокВторичногоЗаявления;
	Иначе
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
КонецФункции

#Область НоваяФормаРегламентированнойОтчетности

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности содания новый объектов из формы Отчетность
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений - Таблица, содержащая в себе описания объектов конфигураций-потребителей
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме создания отчета
//			- ТипОбъекта - Тип - Тип описываемого объекта
//			- ВидКонтролирующегоОргана - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетности
//			- ГруппаВДереве - Строка - Определяет имя группы, в которой будет отображаться объект в случае иерархическкого отображения списка объектов
//			- ВидДокумента - Перечисления.СтраницыЖурналаОтчетность - Определяет страницу формы Отчетность, на которой будет отображаться объект
//				Может принимать одно из следующих значений:
//						Перечисления.СтраницыЖурналаОтчетность.Уведомления
//						Перечисления.СтраницыЖурналаОтчетность.Отчеты
//			- НеОтправляетсяВКонтролирующийОрган - Булево - Истина, если объект не отправляется в контролирующий орган по ТКС
//			- ЯвляетсяАктуальным - Булево - Определяет, можно ли создавать новые объекты данного вида
//			- ИмяОсновногоМакетаДляПечати - Строка - имя макета, который будет использоваться для печати по умолчанию
//			- ВидЭлектронногоПредставления - СправочникСсылка.ВидыОтправляемыхДокументов - вид электронного представления (справочник 
//                                           ЭлектронныеПредставленияРегламентированныхОтчетов), соответствующий данному типу объекта. 
//                                           Неопределено, если такого вида отправляемого документа не существует.
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.Наименование                       = Метаданные.Справочники.ЗаявлениеОНазначенииПенсии.ПредставлениеОбъекта;
	НоваяСтрока.ТипОбъекта                         = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии");
	НоваяСтрока.ВидКонтролирующегоОргана           = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	НоваяСтрока.ГруппаВДереве                      = "Отчетность по физлицам";
	НоваяСтрока.ВидДокумента                       = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	НоваяСтрока.НеОтправляетсяВКонтролирующийОрган = Ложь;
	НоваяСтрока.ЯвляетсяАктуальным                 = Истина;
	НоваяСтрока.ИмяОсновногоМакетаДляПечати        = Неопределено;
	НоваяСтрока.ВидЭлектронногоПредставления       = Неопределено;
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.Наименование                       = Метаданные.Справочники.МакетыПенсионныхДел.ПредставлениеОбъекта;
	НоваяСтрока.ТипОбъекта                         = Тип("СправочникСсылка.МакетыПенсионныхДел");
	НоваяСтрока.ВидКонтролирующегоОргана           = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	НоваяСтрока.ГруппаВДереве                      = "Отчетность по физлицам";
	НоваяСтрока.ВидДокумента                       = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	НоваяСтрока.НеОтправляетсяВКонтролирующийОрган = Ложь;
	НоваяСтрока.ЯвляетсяАктуальным                 = Истина;
	НоваяСтрока.ИмяОсновногоМакетаДляПечати        = Неопределено;
	НоваяСтрока.ВидЭлектронногоПредставления       = Неопределено;
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.Наименование                       = Метаданные.Документы.УведомлениеОПолучателеДокументов.ПредставлениеОбъекта;
	НоваяСтрока.ТипОбъекта                         = Тип("ДокументСсылка.УведомлениеОПолучателеДокументов");
	НоваяСтрока.ВидКонтролирующегоОргана           = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	НоваяСтрока.ГруппаВДереве                      = "";
	НоваяСтрока.ВидДокумента                       = Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	НоваяСтрока.НеОтправляетсяВКонтролирующийОрган = Ложь;
	НоваяСтрока.ЯвляетсяАктуальным                 = Истина;
	НоваяСтрока.ИмяОсновногоМакетаДляПечати        = Неопределено;
	НоваяСтрока.ВидЭлектронногоПредставления       = Неопределено;
	
КонецПроцедуры

Процедура ОпределитьТаблицуОписанияОбъектовЗаявленияПоЭлДокументооборотуСПФР(ТаблицаОписания) Экспорт
	
	ГруппаВДереве = "Заявления по эл. документообороту с ПФР";
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.Наименование                       = Перечисления.ВидыЗаявленийНаЭДОВПФР.НаПодключение;
	НоваяСтрока.ТипОбъекта                         = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР");
	НоваяСтрока.ВидКонтролирующегоОргана           = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	НоваяСтрока.ГруппаВДереве                      = ГруппаВДереве;
	НоваяСтрока.ВидДокумента                       = Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	НоваяСтрока.НеОтправляетсяВКонтролирующийОрган = Ложь;
	НоваяСтрока.ЯвляетсяАктуальным                 = Истина;
	НоваяСтрока.ИмяОсновногоМакетаДляПечати        = Неопределено;
	НоваяСтрока.ВидЭлектронногоПредставления       = Неопределено;
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.Наименование                       = Перечисления.ВидыЗаявленийНаЭДОВПФР.НаОтключение;
	НоваяСтрока.ТипОбъекта                         = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР");
	НоваяСтрока.ВидКонтролирующегоОргана           = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	НоваяСтрока.ГруппаВДереве                      = ГруппаВДереве;
	НоваяСтрока.ВидДокумента                       = Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	НоваяСтрока.НеОтправляетсяВКонтролирующийОрган = Ложь;
	НоваяСтрока.ЯвляетсяАктуальным                 = Истина;
	НоваяСтрока.ИмяОсновногоМакетаДляПечати        = Неопределено;
	НоваяСтрока.ВидЭлектронногоПредставления       = Неопределено;
	
	НоваяСтрока = ТаблицаОписания.Добавить();
	НоваяСтрока.Наименование                       = Перечисления.ВидыЗаявленийНаЭДОВПФР.НаСертификат;
	НоваяСтрока.ТипОбъекта                         = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР");
	НоваяСтрока.ВидКонтролирующегоОргана           = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	НоваяСтрока.ГруппаВДереве                      = ГруппаВДереве;
	НоваяСтрока.ВидДокумента                       = Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	НоваяСтрока.НеОтправляетсяВКонтролирующийОрган = Ложь;
	НоваяСтрока.ЯвляетсяАктуальным                 = Истина;
	НоваяСтрока.ИмяОсновногоМакетаДляПечати        = Неопределено;
	НоваяСтрока.ВидЭлектронногоПредставления       = Неопределено;
	
КонецПроцедуры

#Область РаботаСРегистромСведенийЖурналОтправокВКонтролирующиеОрганы

Функция ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы() Экспорт

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Ссылка", 					Неопределено);
	ЗначенияЗаполнения.Вставить("ДатаСоздания", 			ТекущаяДатаСеанса());
	ЗначенияЗаполнения.Вставить("Наименование", 			"");
	ЗначенияЗаполнения.Вставить("ПредставлениеПериода", 	"");
	ЗначенияЗаполнения.Вставить("ВидКонтролирующегоОргана",	Неопределено);
	ЗначенияЗаполнения.Вставить("КодКонтролирующегоОргана",	"");
	ЗначенияЗаполнения.Вставить("Организация", 				Неопределено);
	ЗначенияЗаполнения.Вставить("ЕстьОтвет", 				Ложь);
	ЗначенияЗаполнения.Вставить("СтраницаЖурнала", 			Неопределено);
	ЗначенияЗаполнения.Вставить("ЕстьПриcоединенныйФайл",	Ложь);
	ЗначенияЗаполнения.Вставить("Комментарий",				"");
	ЗначенияЗаполнения.Вставить("ДатаНачала",				Дата(1,1,1));
	ЗначенияЗаполнения.Вставить("ДатаОкончания",			Дата(1,1,1));
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции	

Процедура СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(ЗначенияЗаполнения) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Объект 						= ЗначенияЗаполнения.Ссылка;
		Ссылка 						= Объект.Ссылка;
		ЭтоНовыйОбъект 				= Истина;
		СостояниеСдачиОтчетности 	= Неопределено;
		СтатусОтправки 				= Неопределено;
		Наименование 				= ЗначенияЗаполнения.Наименование;
		
		Если НЕ ЗначениеЗаполнено(Наименование) Тогда
			Наименование = Строка(Ссылка);
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьСтатусИСостояниеСдачиОтчетности(
			Ссылка, 
			ЗначенияЗаполнения.Организация, 
			ЗначенияЗаполнения.ВидКонтролирующегоОргана, 
			СостояниеСдачиОтчетности, 
			СтатусОтправки);
			
		Непрочтенное = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьНепрочтенность(
			Ссылка,
			"ЖурналОтправокВКонтролирующиеОрганы",
			СостояниеСдачиОтчетности,
			ЗначенияЗаполнения.СтраницаЖурнала);
		
		ЗначенияЗаполнения.Вставить("Ссылка", 								Ссылка);
		ЗначенияЗаполнения.Вставить("СтатусОтправки", 						СтатусОтправки);
		ЗначенияЗаполнения.Вставить("СостояниеСдачиОтчетности", 			СостояниеСдачиОтчетности);
		ЗначенияЗаполнения.Вставить("ПредставлениеКонтролирующегоОргана", 	ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения));
		ЗначенияЗаполнения.Вставить("ПометкаУдаления", 						Ссылка.ПометкаУдаления);
		ЗначенияЗаполнения.Вставить("Наименование", 						Наименование);
		ЗначенияЗаполнения.Вставить("НеОтправляетсяВКонтролирующийОрган", 	НЕ ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка));
		ЗначенияЗаполнения.Вставить("ЕстьКритическиеОшибкиОтправки", 		ЕстьКритическиеСообщения(Ссылка));
		ЗначенияЗаполнения.Вставить("Непрочтенное", 						Непрочтенное);
		ЗначенияЗаполнения.Вставить("ЕстьПриcоединенныйФайл",				РегламентированнаяОтчетность.ЕстьФайлыПрисоединенныеКОбъекту(Ссылка));
		ЗначенияЗаполнения.Вставить("ДатаОтправки", 						ПолучитьДатуОтправки(Ссылка, ЗначенияЗаполнения.ВидКонтролирующегоОргана));
		
		СтруктураКлюча = Новый Структура("Ссылка", Ссылка);
		Ключ = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		// Записываем данные в регистр
		НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		Если СтатусОтправки = Неопределено И СостояниеСдачиОтчетности = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения, , "СостояниеСдачиОтчетности, СтатусОтправки");
		Иначе
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения);
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Журнал отправок'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

КонецПроцедуры

Функция ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения)

	Представление = "";
	
	Если ТипЗнч(ЗначенияЗаполнения.Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами")
		И ЗначенияЗаполнения.Ссылка.Статус = Перечисления.СтатусыПисем.Полученное 
		И НЕ ЗначениеЗаполнено(ЗначенияЗаполнения.ВидКонтролирующегоОргана) Тогда
		
		ПоследнийЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(ЗначенияЗаполнения.Ссылка);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена) Тогда
				Представление = Строка(ПоследнийЦиклОбмена.ВнешняяОрганизация); 
			КонецЕсли;
		
	Иначе
		Представление = РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Снимает признак непрочтенности у ссылки в форме 1С-Отчетность.
// Признак непрочтенности устанавливается при достижении финального состояния (сдано, не сдано)
// автоматически.
//
// Параметры:
//  Ссылка	 - ДокументСсылка, СправочникСсылка - Ссылка на объект, отображаемый в форме 1С-Отчетность.
//
Процедура ОтметитьКакПрочтенное(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РАЗЛИЧНЫЕ ЖурналОтчетовСтатусы.Ссылка
		|ИЗ
		|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
		|ГДЕ
		|	ЖурналОтчетовСтатусы.Непрочтенное = ИСТИНА
		|	И ЖурналОтчетовСтатусы.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РАЗЛИЧНЫЕ ЖурналОтправокВКонтролирующиеОрганы.Ссылка
		|ИЗ
		|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|ГДЕ
		|	ЖурналОтправокВКонтролирующиеОрганы.Непрочтенное = ИСТИНА
		|	И ЖурналОтправокВКонтролирующиеОрганы.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ЭтоНепрочтенноеСообщение = НЕ Запрос.Выполнить().Пустой();
	Если ЭтоНепрочтенноеСообщение Тогда
		УстановитьНепрочтенность(Ссылка, Ложь);
	Иначе
		КонтекстЭДОСервер.ОтметитьСсылкуПоказаннойПользователю(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНепрочтенность(Ссылка, Непрочтенное) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИзменитьЗначениеВФорме1СОтчетность(
		Ссылка, 
		"Непрочтенное", 
		Непрочтенное);
		
	Если Непрочтенное = Ложь Тогда
		КонтекстЭДОСервер.ОтметитьСсылкуПоказаннойПользователю(Ссылка);
	КонецЕсли;

КонецПроцедуры

// Обновление ИБ.
Процедура ПеренестиПризнакНепрочтенности() Экспорт

	НовыйНаборДанных = РегистрыСведений.ЖурналНовыхСобытий.СоздатьНаборЗаписей();
	НовыйНаборДанных.Прочитать();
	Для Каждого Запись Из НовыйНаборДанных Цикл
		Запись.Просмотрено = Истина;
	КонецЦикла;
	НовыйНаборДанных.Записать();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьНепрочтеннаяПерепискаСКонтролирующимиОрганами.НепрочтенноеСообщение
		|ИЗ
		|	РегистрСведений.УдалитьНепрочтеннаяПерепискаСКонтролирующимиОрганами КАК УдалитьНепрочтеннаяПерепискаСКонтролирующимиОрганами";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		УстановитьНепрочтенность(
			ВыборкаДетальныеЗаписи.НепрочтенноеСообщение, 
			Истина);
			
	КонецЦикла;

КонецПроцедуры
 	
Функция ПолучитьДатуОтправки(Объект, Знач КонтролирующийОрган = "ФНС") Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат КонтекстЭДОСервер.ПолучитьДатуОтправки(Объект, КонтролирующийОрган);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗаписиОбъектовВРегистрЖурналОтправокВКонтролирующиеОрганы

Процедура ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЗаявленияВПФРВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЗаявленияВПФРВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьУведомлениеОПолучателеДокументовВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьУведомлениеОПолучателеДокументовВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПрочиеУведомленияВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваПрочихУведомлений(Объект);
	СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Функция СвойстваПрочихУведомлений(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	Наименование 						= Строка(Ссылка);
	ВидКонтролирующегоОргана 			= Неопределено;
	НеОтправляетсяВКонтролирующийОрган 	= Ложь;
	
	ТаблицаОписания = ТаблицаОписанияПрочихУведомлений();
	НайденнаяСтрока = ТаблицаОписания.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
	Если НайденнаяСтрока <> Неопределено Тогда
		Наименование 						= НайденнаяСтрока.Наименование;
		ВидКонтролирующегоОргана			= НайденнаяСтрока.ВидКонтролирующегоОргана;
		НеОтправляетсяВКонтролирующийОрган	= НайденнаяСтрока.НеОтправляетсяВКонтролирующийОрган;
	КонецЕсли;
	
	ЗначенияЗаполнения = ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана	= ВидКонтролирующегоОргана;
	
	ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаписатьУведомлениеОСпецрежимахНалогообложенияВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваУведомленияОСпецрежимахНалогообложения(Объект);
	СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
	Если Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы
		ИЛИ Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов Тогда
		
		Требование = УведомлениеОСпецрежимахНалогообложения.ПолучитьТребованиеИзУведомления(Объект.Ссылка);
		Если ЗначениеЗаполнено(Требование) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
			КоличествоОтветов = КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребования(Требование);
			КоличествоОтветов = КоличествоОтветов.Получить(Требование);
			
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИзменитьЗначениеВФорме1СОтчетность(
				Требование, 
				"ЕстьОтвет", 
				КоличествоОтветов > 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваУведомленияОСпецрежимахНалогообложения(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Строка(Объект.ВидУведомления);
	
	// Вид и код контролирующего органа
	Если Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЭтоУведомлениеВФНС(Объект.ВидУведомления) Тогда 
		ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
		Если ЗначениеЗаполнено(Объект.РегистрацияВИФНС) Тогда
			КодКонтролирующегоОргана	= Объект.РегистрацияВИФНС.Код;
		Иначе
			КодКонтролирующегоОргана	= "";
		КонецЕсли;
	ИначеЕсли Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеИсключенииПроверки
		И Метаданные.Отчеты.Найти("РегламентированноеУведомлениеИсключениеПроверки") <> Неопределено Тогда 
		
		ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка();
		КодКонтролирующегоОргана	= Отчеты.РегламентированноеУведомлениеИсключениеПроверки.ПолучитьНазваниеОргана(Объект);
		Если Не ЗначениеЗаполнено(КодКонтролирующегоОргана) Тогда 
			КодКонтролирующегоОргана = "-";
		КонецЕсли;
	ИначеЕсли Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеПостановкаОбъектаНВОС
		И Метаданные.Отчеты.Найти("РегламентированноеУведомлениеПостановкаОбъектаНВОС") <> Неопределено Тогда 
		
		ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.РПН;
	Иначе
		ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка();
		КодКонтролирующегоОргана	= "-";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.Дата;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.Комментарий 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Комментарий");
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаписатьМакетПенсионногоДелаВРегистрЖурналОтчетовСтатусы(Объект) Экспорт
	
	Свойства = СвойстваМакетаПенсионногоДела(Объект);
	РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(Свойства);
	
КонецПроцедуры

Функция СвойстваМакетаПенсионногоДела(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = СокрЛП(Объект.Наименование);
	
	// Вид и код контролирующего органа
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		КодКонтролирующегоОргана	= Объект.Получатель.Код;
	Иначе
		КодКонтролирующегоОргана	= "";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов();
	
	ЗначенияЗаполнения.ДокСсылка 				= Ссылка;
	ЗначенияЗаполнения.НаименованиеОтчета		= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ЗначенияЗаполнения.КодКонтролирующегоОргана	= КодКонтролирующегоОргана;
	ЗначенияЗаполнения.ДатаНачалаОП 			= НачалоДня(Ссылка.ДатаСоздания);
	ЗначенияЗаполнения.ДатаОкончанияОП			= КонецДня(Ссылка.ДатаСоздания);
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтатусОтправки			= "Не отправлялся";
	ЗначенияЗаполнения.ПредставлениеВида 		= " ";
	ЗначенияЗаполнения.ДатаСоздания			    = Ссылка.ДатаСоздания;
	ЗначенияЗаполнения.Комментарий			    = Ссылка.Комментарий;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаписатьЗаявлениеОНазначенииПенсииВРегистрЖурналОтчетовСтатусы(Объект) Экспорт
	
	Свойства = СвойстваЗаявленияОНазначенииПенсии(Объект);
	РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(Свойства);
	
КонецПроцедуры

Функция СвойстваЗаявленияОНазначенииПенсии(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = СокрЛП(Объект.Наименование);
	
	// Вид и код контролирующего органа
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		КодКонтролирующегоОргана	= Объект.Получатель.Код;
	Иначе
		КодКонтролирующегоОргана	= "";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов();
	
	ЗначенияЗаполнения.ДокСсылка 				= Ссылка;
	ЗначенияЗаполнения.НаименованиеОтчета		= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ЗначенияЗаполнения.КодКонтролирующегоОргана	= КодКонтролирующегоОргана;
	ЗначенияЗаполнения.ДатаНачалаОП 			= НачалоДня(Ссылка.ДатаСоздания);
	ЗначенияЗаполнения.ДатаОкончанияОП			= КонецДня(Ссылка.ДатаСоздания);
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтатусОтправки			= "Не отправлялся";
	ЗначенияЗаполнения.ПредставлениеВида 		= " ";
	ЗначенияЗаполнения.ДатаСоздания			    = Ссылка.ДатаСоздания;
	ЗначенияЗаполнения.Комментарий			    = Ссылка.Комментарий;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныхПроцедурИФункций

Функция ОпределитьНепрочтенность(
		Ссылка,
		ИмяРегистра,
		НовоеСостояниеСдачиОтчетности,
		СтраницаЖурнала) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение дополнительных свойств для отслеживания признака непрочтенности.
	НаборЗаписейДляЧтения = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписейДляЧтения.Отбор.Ссылка.Установить(Ссылка);
	НаборЗаписейДляЧтения.Прочитать();
	
	ПредыдущееСостояниеСдачиОтчетности 	= Неопределено;
	ПредыдущийПризнакНепрочтенное 		= Неопределено;
	Для каждого Запись Из НаборЗаписейДляЧтения Цикл
		ПредыдущееСостояниеСдачиОтчетности 	= Запись.СостояниеСдачиОтчетности;
		ПредыдущийПризнакНепрочтенное 		= Запись.Непрочтенное;
	КонецЦикла;
	
	ЭтоНовое = ПредыдущийПризнакНепрочтенное = Неопределено;
	
	Если ПредыдущийПризнакНепрочтенное = Истина Тогда // может быть Неопределено
		Возврат ПредыдущийПризнакНепрочтенное;
	КонецЕсли;
	
	ЭтоОтчетИлиУведомление = 
		СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Отчеты
		ИЛИ СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Уведомления;
			
	ОбъектИмеетОкончательныйСтатус = 
		НовоеСостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота 
		ИЛИ НовоеСостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
			
	СтатусИзменился = ПредыдущееСостояниеСдачиОтчетности <> НовоеСостояниеСдачиОтчетности;
	
	Если ЭтоОтчетИлиУведомление Тогда
		
		Если СтатусИзменился И ОбъектИмеетОкончательныйСтатус Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") 
			И Ссылка.Статус = Перечисления.СтатусыПисем.Исходящее Тогда
			// У исходящих писем непрочтенность не устанавливаем.
			Возврат ПредыдущийПризнакНепрочтенное;
		ИначеЕсли ЭтоНовое
			И ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами")
			И Ссылка.Статус = Перечисления.СтатусыПисем.Полученное Тогда
			Возврат Истина;
		ИначеЕсли ЭтоНовое
			И ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			Возврат Истина;
		ИначеЕсли СтатусИзменился И ОбъектИмеетОкончательныйСтатус Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредыдущийПризнакНепрочтенное;

КонецФункции

Функция ТаблицаОписанияПрочихУведомлений() Экспорт
	
	ТаблицаОписания = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	
	// оставляем в таблице только уведомления и нужные колонки
	ТаблицаОписанияУведомлений = ТаблицаОписания.Скопировать(Новый Структура("ВидДокумента", Перечисления.СтраницыЖурналаОтчетность.Уведомления));
		
	Возврат ТаблицаОписанияУведомлений;

КонецФункции

Процедура ПрисоединитьДерево(ДеревоПриемник, ПрисоединяемоеДерево) Экспорт
	
	СтрокиДереваПриемника = ДеревоПриемник.Строки;
	Для каждого СтрокаПрисоединяемогоДерева Из ПрисоединяемоеДерево.Строки Цикл
		НоваяСтрокаДереваПриемника = СтрокиДереваПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваПриемника, СтрокаПрисоединяемогоДерева);
		ПрисоединитьДерево(НоваяСтрокаДереваПриемника, СтрокаПрисоединяемогоДерева);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОпределитьСтатусИСостояниеСдачиОтчетности(Ссылка, Организация, ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки) Экспорт
	
	// Определяем текст статуса и цвет
	Если ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка) Тогда
		
		ТекущееСостояние = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиСтатуса(
			Ссылка, ВидКонтролирующегоОргана);
			
		Если ТекущееСостояние = Неопределено ИЛИ ТекущееСостояние.ТекущийЭтапОтправки = Неопределено Тогда
			СтатусОтправки 				= НСтр("ru = 'Не отправлено'");
			СостояниеСдачиОтчетности 	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
		Иначе
			ТекущийЭтап = ТекущееСостояние.ТекущийЭтапОтправки;
			
			СтатусОтправки 				= ТекущийЭтап.ТекстСтатуса;
			СостояниеСдачиОтчетности 	= ТекущийЭтап.СостояниеСдачиОтчетности;
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности);
		
	ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
		
		ТекущееСостояние = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиСтатуса(
			Ссылка, ВидКонтролирующегоОргана);
			
		Если ТекущееСостояние <> Неопределено И
			ТекущееСостояние.ТекущийЭтапОтправки <> Неопределено И 
			НЕ ТекущееСостояние.ТекущийЭтапОтправки.СтатусУстановленВручную Тогда

			ТекущийЭтап = ТекущееСостояние.ТекущийЭтапОтправки;
			
			СтатусОтправки 				= ТекущийЭтап.ТекстСтатуса;
			СостояниеСдачиОтчетности 	= ТекущийЭтап.СостояниеСдачиОтчетности;
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка) Экспорт
	
	ОбъектОтправляется = Истина;
	
	// Среди уведомлений о спецрежимах налогообложения есть те, которые не отправляются
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		Если ПравоДоступа("Чтение", Метаданные.Справочники.ВидыОтправляемыхДокументов) Тогда
			ВидыОтправляемыхУведомлений = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ВидыОтправляемыхУведомленийОСпецрежимахНалогообложения();
			Если ВидыОтправляемыхУведомлений.Найти(Ссылка.ВидУведомления) = Неопределено Тогда
				ОбъектОтправляется = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	// Регламентированные отчеты
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		РегламентированнаяОтчетность.РегламентированныйОтчетОтправляетсяВКонтролирующиеОрганы(Ссылка, ОбъектОтправляется);
		
	// Регламентированные отчеты
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии") Тогда
		
		ОбъектОтправляется = Ссылка.Получатель.ПринимаетЗаявленияОНазначенииИДоставкеПенсии;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР") Тогда
		
		ОбъектОтправляется = Истина;
		
	Иначе
		
		// Объекты, не входящие в БРО
		ТаблицаОписания = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
		СтрокаОписанияОбъекта = ТаблицаОписания.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
		Если СтрокаОписанияОбъекта <> Неопределено Тогда
			ОбъектОтправляется = НЕ СтрокаОписанияОбъекта.НеОтправляетсяВКонтролирующийОрган;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектОтправляется;

КонецФункции

Функция ЕстьКритическиеСообщения(Ссылка, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Ссылка <> Неопределено Тогда
		ДокСсылка = Ссылка.Ссылка;
		Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ПоказыватьПомеченныеНаУдаление = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоказыватьПомеченныеНаУдаление")
		И ДополнительныеПараметры.ПоказыватьПомеченныеНаУдаление;
		
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ЦиклОбмена = ДополнительныеПараметры.Отправка;
	Иначе
		ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ТранспортноеСообщение.Ссылка КАК Сообщение
		                      |ИЗ
		                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |ГДЕ
		                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
		                      |	И ТранспортноеСообщение.Тип В (&Тип)");
		
		Если НЕ ПоказыватьПомеченныеНаУдаление Тогда
			Запрос.Текст = Запрос.Текст + "
							  |	И ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления";
			Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
		
		ТипыКритическихОшибок = Новый Массив;
		ТипыКритическихОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка);
		ТипыКритическихОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР);
		ТипыКритическихОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС);
		ТипыКритическихОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС);
		Запрос.УстановитьПараметр("Тип", ТипыКритическихОшибок);
		
		КоличествоТранспортныхСообщенийСОшибками = Запрос.Выполнить().Выбрать().Количество();
	Иначе
		КоличествоТранспортныхСообщенийСОшибками = 0;
	КонецЕсли;
	
	Возврат КоличествоТранспортныхСообщенийСОшибками > 0;
	
КонецФункции

Функция ВидыЭлектронныхПредставленийВРазделеУведомления() Экспорт
	
	// Уведомления о спецрежимах налогоообложения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВидыОтправляемыхДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.ТипДокумента = &ТипДокумента";

	Запрос.УстановитьПараметр("ТипДокумента", Перечисления.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС);

	Выгрузка = Запрос.Выполнить().Выгрузить();
	ВидыЭлектронныхПредставлений = Выгрузка.ВыгрузитьКолонку("Ссылка");
	
	// Уведомления из конфигурации-потребителя
	ОписаниеОбъектовНеВходящихВБРО = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	Для каждого ОписаниеОбъекта Из ОписаниеОбъектовНеВходящихВБРО Цикл
		Если ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Уведомления 
			И ЗначениеЗаполнено(ОписаниеОбъекта.ВидЭлектронногоПредставления) Тогда
				
				// Проверка нужна чтобы предотвратить добавление дублей в массив 
				Если ВидыЭлектронныхПредставлений.Найти(ОписаниеОбъекта.ВидЭлектронногоПредставления) = Неопределено Тогда
					ВидыЭлектронныхПредставлений.Добавить(ОписаниеОбъекта.ВидЭлектронногоПредставления);
				КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЭлектронныхПредставлений;
	
КонецФункции

Функция ЭтотВидЭлектронногоПредставленияОтноситсяКРазделуУведомления(ВидОтчета) Экспорт
	
	ВидыОтчетовРазделаУведомления = ВидыЭлектронныхПредставленийВРазделеУведомления();
	Возврат ВидыОтчетовРазделаУведомления.Найти(ВидОтчета) <> Неопределено;
	
КонецФункции

Процедура ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ) Экспорт
	
	РегламентированнаяОтчетность.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТикетыВЗаявлении

Функция МодульИнтернетПоддержкаПользователей() Экспорт
	
	Попытка
		Возврат ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

#КонецОбласти

// Обновление ИБ
//
Процедура ЗаполнитьДатыОтправки(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналОтчетовСтатусы.Ссылка КАК Ссылка,
		|	ЖурналОтчетовСтатусы.ВидКонтролирующегоОргана КАК ВидКонтролирующегоОргана,
		|	ЖурналОтчетовСтатусы.ДатаОтправки КАК ДатаОтправки
		|ИЗ
		|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
		|ГДЕ
		|	ЖурналОтчетовСтатусы.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности В (&СостоянияСдачиОтчетности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка,
		|	ЖурналОтправокВКонтролирующиеОрганы.ВидКонтролирующегоОргана,
		|	ЖурналОтправокВКонтролирующиеОрганы.ДатаОтправки
		|ИЗ
		|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|ГДЕ
		|	ЖурналОтправокВКонтролирующиеОрганы.ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности В (&СостоянияСдачиОтчетности)";
	
	СостоянияСдачиОтчетности = Новый Массив;
	СостоянияСдачиОтчетности.Добавить(Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат);
	СостоянияСдачиОтчетности.Добавить(Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота);
	СостоянияСдачиОтчетности.Добавить(Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота);
	
	Запрос.УстановитьПараметр("СостоянияСдачиОтчетности", СостоянияСдачиОтчетности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			ДатаОтправкиОбъекта = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьДатуОтправки(
				ВыборкаДетальныеЗаписи.Ссылка, 
				ВыборкаДетальныеЗаписи.ВидКонтролирующегоОргана);
				
			Если ВыборкаДетальныеЗаписи.ДатаОтправки <> ДатаОтправкиОбъекта Тогда
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИзменитьЗначениеВФорме1СОтчетность(
					ВыборкаДетальныеЗаписи.Ссылка, 
					"ДатаОтправки", 
					ДатаОтправкиОбъекта);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = НСтр("ru='Ошибка заполнения даты отправки:'") + Символы.ПС +
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ЗаполнениеДатыОтправки", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ЗначенияЗаполнения)
	
	ТаблицаСвойств = РегламентированнаяОтчетность.ОпределитьСвойстваОбъектовДляОтображенияВФормеОтчетность(Ссылка);
	СвойстваСсылки = ТаблицаСвойств.Найти(Ссылка, "Ссылка");
	
	Если СвойстваСсылки <> Неопределено Тогда
		
		ЗначенияЗаполнения.ДатаСоздания = СвойстваСсылки.ДатаСоздания;
		Если ЗначениеЗаполнено(СвойстваСсылки.Наименование) Тогда
			ЗначенияЗаполнения.Наименование = СвойстваСсылки.Наименование;
		КонецЕсли;
		ЗначенияЗаполнения.ДатаСоздания 			= СвойстваСсылки.ДатаСоздания;
		ЗначенияЗаполнения.КодКонтролирующегоОргана = СвойстваСсылки.КодКонтролирующегоОргана;
		ЗначенияЗаполнения.Организация 				= СвойстваСсылки.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыПоТребованиюФНСПрограммныйИнтерфейс

//Обработчик обновления БРО 1.1.6
Процедура ЗаполнитьРегистрДокументыПоТребованиюФНС(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;

	УстановитьПривилегированныйРежим(Истина);

	СвойстваВладельцевЭД = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД);

	ОбработаноОбъектов = 0;
	
	Пока ОбработаноОбъектов < 1000 И Не Параметры.ОбработкаЗавершена Цикл
		СвойстваИсточников = Новый Соответствие;
		
		ВыборкаИсточников = ВыборкаИсточниковНеЗаписанныхВРегистрДокументыПоТребованиюФНС(Параметры);
		
		Если ЗначениеЗаполнено(ВыборкаИсточников) Тогда
			ОбработаноОбъектов = ОбработаноОбъектов + ВыборкаИсточников.Количество();
		КонецЕсли;
		
		СсылкаГраница = Неопределено;
		Если ЗначениеЗаполнено(ВыборкаИсточников) Тогда
			Пока ВыборкаИсточников.Следующий() Цикл
				СвойстваИсточников.Вставить(ВыборкаИсточников.Объект, Новый Массив);
				СсылкаГраница = ВыборкаИсточников.Объект;
			КонецЦикла;	
		КонецЕсли;
		Параметры.Вставить("СсылкаГраница", СсылкаГраница);
		
		Попытка
			// определение свойств источников
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников);
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
		
		// запись свойств источников в регистр
		СоответствиеВидовДокументовФНС = СоответствиеВидовДокументовФНС();
		
		Для каждого СвойстваИсточника Из СвойстваИсточников Цикл
			
			ИсточникСсылка = СвойстваИсточника.Ключ.Ссылка;
			МассивСтруктурСвойствИсточника = СвойстваИсточника.Значение;
			
			ВидДокументаФНСЭДСтрока = СвойстваВладельцевЭД[ИсточникСсылка];
			ВидДокументаФНСЭДПеречисление = СоответствиеВидовДокументовФНС[ВидДокументаФНСЭДСтрока];
			
			НачатьТранзакцию();
			Попытка
				
				Для каждого СтруктураСвойствИсточника Из МассивСтруктурСвойствИсточника Цикл
					ДобавитьЗаписьВДокументыПоТребованиюФНС(СтруктураСвойствИсточника, ИсточникСсылка, ВидДокументаФНСЭДПеречисление);
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыборкаСканированныхДокументов = ВыборкаСканированныхДокументовНеЗаписанныхВРегистрДокументыПоТребованиюФНС();
		
	Пока ВыборкаСканированныхДокументов.Следующий() Цикл
		
		СканированныйДокумент = ВыборкаСканированныхДокументов.Ссылка;
		
		Попытка
			
			// Запись в регистр
			ЗаписатьСканированныйДокументВРегистрДокументыПоТребованиюФНС(СканированныйДокумент);
			
		Исключение
		
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,, СканированныйДокумент,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры

//Обработчик обновления БРО
Процедура ДобавитьНовыеДокументыВРегистрДокументыПоТребованиюФНС(Параметры) Экспорт
	
	НовыеВиды = Новый Массив;
	НовыеВиды.Добавить("ПередачаТоваров");
	НовыеВиды.Добавить("ПередачаУслуг");
	НовыеВиды.Добавить("УПД");
	НовыеВиды.Добавить("УКД");
	
	ДобавитьНовыеВидыДокументовВРегистрДокументыПоТребованиюФНС(Параметры, НовыеВиды);
	
КонецПроцедуры

Процедура ДобавитьНовыеДокументыВРегистрДокументыПоТребованиюФНС_2(Параметры) Экспорт
	
	НовыеВиды = Новый Массив;
	НовыеВиды.Добавить("АктОРасхождениях");
	НовыеВиды.Добавить("АктНаПередачуПрав");
	НовыеВиды.Добавить("ДокументОбИзмененииСтоимости");
	
	ДобавитьНовыеВидыДокументовВРегистрДокументыПоТребованиюФНС(Параметры, НовыеВиды);
	
КонецПроцедуры

Процедура ДобавитьНовыеВидыДокументовВРегистрДокументыПоТребованиюФНС(Параметры, НовыеВиды) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;

	УстановитьПривилегированныйРежим(Истина);
	
	НовыйВидыПредставляемыхДокументов = Новый Массив;
	Для каждого ИмяНовогоВидаПредставляемыхДокументов Из НовыеВиды Цикл
		НовыйВидыПредставляемыхДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов[ИмяНовогоВидаПредставляемыхДокументов]);
	КонецЦикла; 
	
	СвойстваВсехВладельцевЭД = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВсехВладельцевЭД);
	
	// Среди свойств всех документов, имеющих электронные документы, оставляем только документы нужного вида.
	СвойстваВладельцевЭД = Новый Соответствие;
	Для каждого СвойстваОдногоВладельцаЭД Из СвойстваВсехВладельцевЭД Цикл
		
		ЭтоНовыйВидДокументов = НовыеВиды.Найти(СвойстваОдногоВладельцаЭД.Значение) <> Неопределено;
		Если ЭтоНовыйВидДокументов Тогда
			 СвойстваВладельцевЭД.Вставить(
			 	СвойстваОдногоВладельцаЭД.Ключ, 
				Перечисления.ВидыПредставляемыхДокументов[СвойстваОдногоВладельцаЭД.Значение]);
		КонецЕсли;
		 
	КонецЦикла;

	ОбработаноОбъектов = 0;
	
	Пока ОбработаноОбъектов < 1000 И Не Параметры.ОбработкаЗавершена Цикл
		СвойстваИсточников = Новый Соответствие;
		
		// Здесь оставляем только документы новых типов.
		Если Не Параметры.Свойство("МассивТипов") Тогда
			
			СоответствиеВидовДокументов = Новый Соответствие;
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(
				СоответствиеВидовДокументов);
			
			МассивТипов = Новый Массив;
			Для каждого элСоответствиеВидовДокументов Из СоответствиеВидовДокументов Цикл
				
				ЭтоНовыйВидДокументов = НовыйВидыПредставляемыхДокументов.Найти(элСоответствиеВидовДокументов.Ключ) <> Неопределено;
				Если ЭтоНовыйВидДокументов Тогда

					МассивТиповОдногоВида = элСоответствиеВидовДокументов.Значение;
					Для каждого ТипИсточника Из МассивТиповОдногоВида Цикл
						Если МассивТипов.Найти(ТипИсточника) = Неопределено Тогда
							МассивТипов.Добавить(ТипИсточника);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Параметры.Вставить("МассивТипов", МассивТипов);
			Параметры.Вставить("ТекущийЭлемент", 0);
			
		КонецЕсли;
		
		// Из БД выбираем все документы заданных типов
		ВыборкаИсточников = ВыборкаИсточниковНеЗаписанныхВРегистрДокументыПоТребованиюФНС(Параметры);
		
		Если ЗначениеЗаполнено(ВыборкаИсточников) Тогда
			ОбработаноОбъектов = ОбработаноОбъектов + ВыборкаИсточников.Количество();
		КонецЕсли;
		
		СсылкаГраница = Неопределено;
		Если ЗначениеЗаполнено(ВыборкаИсточников) Тогда
			Пока ВыборкаИсточников.Следующий() Цикл
				СвойстваИсточников.Вставить(ВыборкаИсточников.Объект, Новый Массив);
				СсылкаГраница = ВыборкаИсточников.Объект;
			КонецЦикла;	
		КонецЕсли;
		Параметры.Вставить("СсылкаГраница", СсылкаГраница);
		
		Попытка
			// определение свойств источников
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников);
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
		
		ОбъектыДляЗаписи = Новый Массив;
		
		// запись свойств источников в регистр
		Для каждого СвойстваИсточника Из СвойстваИсточников Цикл
			
			ИсточникСсылка = СвойстваИсточника.Ключ.Ссылка;
			МассивСтруктурСвойствИсточника = СвойстваИсточника.Значение;
			
			ВидДокументаФНС = СвойстваВладельцевЭД[ИсточникСсылка];
			
			Для каждого СтруктураСвойствИсточника Из МассивСтруктурСвойствИсточника Цикл
				
				ЭтоНовыйВидДокументов = НовыйВидыПредставляемыхДокументов.Найти(СтруктураСвойствИсточника.ВидДокументаФНС) <> Неопределено;
				Если ЭтоНовыйВидДокументов И СтруктураСвойствИсточника.ВидДокументаФНС = ВидДокументаФНС Тогда
					
					ДополнительныеПараметры = Новый Структура();
					ДополнительныеПараметры.Вставить("СтруктураСвойствИсточника", 	СтруктураСвойствИсточника);
					ДополнительныеПараметры.Вставить("ИсточникСсылка", 				ИсточникСсылка);
					ДополнительныеПараметры.Вставить("ВидДокументаФНС", 			ВидДокументаФНС);
					
					ОбъектыДляЗаписи.Добавить(ДополнительныеПараметры);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			
			Для каждого ОбъектДляЗаписи Из ОбъектыДляЗаписи Цикл
				ДобавитьЗаписьВДокументыПоТребованиюФНС(
					ОбъектДляЗаписи.СтруктураСвойствИсточника,
					ОбъектДляЗаписи.ИсточникСсылка,
					ОбъектДляЗаписи.ВидДокументаФНС);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДокументыПоТребованиюФНССлужебныеПроцедурыИФункции

Процедура ДобавитьЗаписьВДокументыПоТребованиюФНС(СтруктураСвойствИсточника, ИсточникСсылка, ВидДокументаФНСЭДПеречисление)

 	НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
	Если СтруктураСвойствИсточника.Свойство("Организация") Тогда
		НаборЗаписей.Отбор.Организация.Установить(СтруктураСвойствИсточника.Организация);
	КонецЕсли;
	Если СтруктураСвойствИсточника.Свойство("ВидДокументаФНС") Тогда
		НаборЗаписей.Отбор.ВидДокументаФНС.Установить(СтруктураСвойствИсточника.ВидДокументаФНС);
	КонецЕсли;
	Если СтруктураСвойствИсточника.Свойство("НомерСтрокиИсточника") Тогда
		НаборЗаписей.Отбор.НомерСтрокиИсточника.Установить(СтруктураСвойствИсточника.НомерСтрокиИсточника);
	КонецЕсли;
	НаборЗаписей.Отбор.Источник.Установить(ИсточникСсылка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Источник = ИсточникСсылка;
	ЗаполнитьЗначенияСвойств(Запись, СтруктураСвойствИсточника);
	СтруктураСвойствИсточника.Свойство("Дата",       Запись.ДатаДокумента);
	СтруктураСвойствИсточника.Свойство("Номер",      Запись.НомерДокумента);
	СтруктураСвойствИсточника.Свойство("СуммаВсего", Запись.СуммаДокумента);
	
	Запись.ЕстьЭлектронныйДокумент = (ВидДокументаФНСЭДПеречисление = Запись.ВидДокументаФНС);
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

Функция ВыборкаИсточниковНеЗаписанныхВРегистрДокументыПоТребованиюФНС(Параметры) Экспорт
	
	Если Не Параметры.Свойство("МассивТипов") Тогда
		СоответствиеВидовДокументов = Новый Соответствие;
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(
			СоответствиеВидовДокументов);
		
		МассивТипов = Новый Массив;
		Для каждого элСоответствиеВидовДокументов Из СоответствиеВидовДокументов Цикл
			МассивТиповОдногоВида = элСоответствиеВидовДокументов.Значение;
			Для каждого ТипИсточника Из МассивТиповОдногоВида Цикл
				Если МассивТипов.Найти(ТипИсточника) = Неопределено Тогда
					МассивТипов.Добавить(ТипИсточника);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(МассивТипов) Тогда
			Параметры.ОбработкаЗавершена = Истина;
			Возврат Неопределено;
		КонецЕсли;
		Параметры.Вставить("МассивТипов", МассивТипов);
		Параметры.Вставить("ТекущийЭлемент", 0);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РазмерВыборки = "1000";
	Иначе
		РазмерВыборки = "10000";
	КонецЕсли;
	
	Если Параметры.ТекущийЭлемент <= Параметры.МассивТипов.ВГраница() Тогда
		Пока Параметры.ТекущийЭлемент <= Параметры.МассивТипов.ВГраница() Цикл
			ТекущийТип = Параметры.МассивТипов[Параметры.ТекущийЭлемент];
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТип);			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				ПолноеИмяТипа 		= ОбъектМетаданных.ПолноеИмя();
				ИмяТипа 			= ОбъектМетаданных.Имя;
				
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ " + РазмерВыборки + "
				|	%1.Ссылка КАК Объект
				|ИЗ
				|	%2 КАК %1
				|ГДЕ
				|	НЕ %1.ПометкаУдаления";
				
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных)                                                   
				И ОбъектМетаданных.Иерархический
				И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И %1.ЭтоГруппа = ЛОЖЬ" 
				КонецЕсли;

				Если Параметры.Свойство("СсылкаГраница") И ЗначениеЗаполнено(Параметры.СсылкаГраница)
					И ТипЗнч(Параметры.СсылкаГраница) = ТекущийТип Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И %1.Ссылка < &СсылкаГраница";
					Запрос.УстановитьПараметр("СсылкаГраница", Параметры.СсылкаГраница);
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + 
				"
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка УБЫВ";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяТипа);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ПолноеИмяТипа);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() Тогда
					Параметры.ТекущийЭлемент = Параметры.ТекущийЭлемент + 1;
				Иначе
					Выборка = РезультатЗапроса.Выбрать();
					Возврат Выборка;
				КонецЕсли;
			Иначе
				Параметры.ТекущийЭлемент = Параметры.ТекущийЭлемент + 1;
			КонецЕсли;			
		КонецЦикла;
	Иначе
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецФункции

Функция ВыборкаСканированныхДокументовНеЗаписанныхВРегистрДокументыПоТребованиюФНС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка
	|ИЗ
	|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде КАК СканированныеДокументыДляПередачиВЭлектронномВиде
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоТребованиюФНС КАК ДокументыПоТребованиюФНС
	|		ПО ДокументыПоТребованиюФНС.СканированныйДокумент = СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка
	|ГДЕ
	|	ДокументыПоТребованиюФНС.СканированныйДокумент Есть NULL";
	
	
	// Выполнение полученного запроса
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Возврат РезультатЗапроса;
	
КонецФункции

// Вызывается из процедуры УстановленоСостояниеОбменЗавершен ОМ ОбменСКонтрагентамиПереопределяемый.
// Выполняет запись документов в регистр "Документы по требованию ФНС"
// в момент перехода электронных докуметов в состояние "завершено".
//
// Параметры:
//  Источники	 - Массив - Массив документов, из которых формировались и отправлялись электронные документы.
//		Типы документов определены в ОпределяемыйТип.ИсточникДокументаПоТребованиюФНСБРО
//
Процедура ЗаписатьИсточникиВРегистрДокументыПоТребованиюФНС(Источники) Экспорт
	
	Для каждого Источник Из Источники Цикл
		ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(Источник);
	КонецЦикла;
	
КонецПроцедуры
	
// Обработчик подписки на событие "ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС"
// Является исключением из стандарта "Использование признака ОбменДанными.Загрузка в обработчиках событий объекта",
// поскольку по-прежнему соблюдается правило "никакая бизнес-логика объекта не должна выполняться при записи объекта
// через механизм обмена данными, поскольку она уже была выполнена для объекта в том узле, где он был создан".
// Отклонение от стандарта (проверка находится не в начале), объясняется тем, что данная процедура используется
// не только при подписке, но так же вызывается из других мест.
Процедура ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(Знач Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыИсточников = Метаданные.РегистрыСведений.ДокументыПоТребованиюФНС.Измерения.Источник.Тип;
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник));
	Если ЭтоСсылка Тогда
		ТипИсточника = ТипЗнч(Источник);
	Иначе
		ТипИсточника = ТипЗнч(Источник.Ссылка);
	КонецЕсли;
		
	ЕстьВИсточникеИзмерении = ТипыИсточников.СодержитТип(ТипИсточника);
	
	Если НЕ ЕстьВИсточникеИзмерении Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Источник.Ссылка;
	
	Если Ссылка <> Источник Тогда
		// Источник - это объект
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") И Источник.ДополнительныеСвойства.ГрупповоеПерепроведение Тогда
			// При групповом перепроведении сведения не изменяются
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СвойстваИсточников = Новый Соответствие;
	СвойстваИсточников.Вставить(Ссылка, Новый Массив);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));			
	Если ОбъектМетаданных <> Неопределено Тогда
		Если НЕ (
		Метаданные.Справочники.Содержит(ОбъектМетаданных)                                                   
		И ОбъектМетаданных.Иерархический
		И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
		И Ссылка.ЭтоГруппа) Тогда
			//это не группа иерархического справочника
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников);
		КонецЕсли;
	КонецЕсли;	
	
	СвойстваИсточника = СвойстваИсточников[Ссылка];
	
	Если НЕ ЗначениеЗаполнено(СвойстваИсточника) Тогда
		//удалим ссылку на данный источник в сканированных документах
		УдалитьСсылкуНаИсточникВСканированныхДокументах(Ссылка);
	КонецЕсли;
	
	ОбновитьСвойстваИсточникаВРегистреДокументыПоТребованиюФНС(Ссылка, СвойстваИсточника);
	
КонецПроцедуры

Процедура УдалитьСсылкуНаИсточникВСканированныхДокументах(Источник)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка
		|ИЗ
		|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде КАК СканированныеДокументыДляПередачиВЭлектронномВиде
		|ГДЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектСпр = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСпр.Источник = Неопределено;
		ОбъектСпр.НомерСтрокиИсточника = 0;
		ОбъектСпр.Записать(); 
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьСканированныйДокументВРегистрДокументыПоТребованиюФНС(СканированныйДокумент) Экспорт

	Ссылка = СканированныйДокумент.Ссылка;
	Если Ссылка <> СканированныйДокумент Тогда
		Если СканированныйДокумент.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСканированногоДокумента = СвойстваСканированногоДокументаДляРегистраДокументыПоТребованиюФНС(Ссылка);
	ОбновитьСвойстваСканированногоДокументаВРегистреДокументыПоТребованиюФНС(Ссылка, СвойстваСканированногоДокумента);
	
КонецПроцедуры

// Обработчик подписки на событие "ЗаписатьЭлектронныйДокументВРегистрДокументыПоТребованиюФНС"
Процедура ЗаписатьЭлектронныйДокументВРегистрДокументыПоТребованиюФНС(ЭлектронныйДокумент) Экспорт

	ЭтоОбъект = Найти(Строка(ТипЗнч(ЭлектронныйДокумент)), "ДокументОбъект") <> 0;
	
	Если ЭтоОбъект И ЭлектронныйДокумент.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Ссылка = ЭлектронныйДокумент.Ссылка;

	ДокументИБ = Неопределено;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьВладельцаЭлектронногоДокумента(Ссылка, ДокументИБ);

	Если НЕ ЗначениеЗаполнено(ДокументИБ) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ДокументИБ) = Тип("Массив") Тогда
		МассивВладельцевЭД = ОбщегоНазначения.СкопироватьРекурсивно(ДокументИБ);
	Иначе
		МассивВладельцевЭД = Новый Массив;
		МассивВладельцевЭД.Добавить(ДокументИБ);
	КонецЕсли;
	
	СоответствиеВидДокументаИБ = Новый Соответствие;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СоответствиеВидДокументаИБ, МассивВладельцевЭД);
	
	Для каждого ДокументИБ Из МассивВладельцевЭД Цикл
		ВидДокументаФНССтрока = СоответствиеВидДокументаИБ[ДокументИБ];
		Если ЗначениеЗаполнено(ВидДокументаФНССтрока) Тогда
			ОбновитьНаличиеЭДВРегистреДокументыПоТребованиюФНС(ДокументИБ, ВидДокументаФНССтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваСканированногоДокументаДляРегистраДокументыПоТребованиюФНС(Ссылка) 

	ЗначенияЗаполнения = Новый Структура;
	
	//определим основные реквизиты сканированного документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Организация,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.ВидДокумента,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.НомерДокумента,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.ДатаДокумента,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.СуммаВсего,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Источник,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.НомерСтрокиИсточника,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Направление,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.ПометкаУдаления
		|ИЗ
		|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде КАК СканированныеДокументыДляПередачиВЭлектронномВиде
		|ГДЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка = &Ссылка";

	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗначенияЗаполнения.Вставить("ВидДокументаФНС", 			ВыборкаДетальныеЗаписи.ВидДокумента);
		ЗначенияЗаполнения.Вставить("Источник", 				ВыборкаДетальныеЗаписи.Источник);
		ЗначенияЗаполнения.Вставить("НомерСтрокиИсточника",		ВыборкаДетальныеЗаписи.НомерСтрокиИсточника);
		ЗначенияЗаполнения.Вставить("Организация", 				ВыборкаДетальныеЗаписи.Организация);
		ЗначенияЗаполнения.Вставить("Направление", 				ВыборкаДетальныеЗаписи.Направление);
		ЗначенияЗаполнения.Вставить("НомерДокумента", 			ВыборкаДетальныеЗаписи.НомерДокумента);
		ЗначенияЗаполнения.Вставить("ДатаДокумента", 			ВыборкаДетальныеЗаписи.ДатаДокумента);
		ЗначенияЗаполнения.Вставить("СуммаДокумента", 			ВыборкаДетальныеЗаписи.СуммаВсего);
		ЗначенияЗаполнения.Вставить("ПометкаУдаления", 			ВыборкаДетальныеЗаписи.ПометкаУдаления);
	КонецЕсли;
	
	//определим строкой свойство Контрагенты
	Организация = ВыборкаДетальныеЗаписи.Организация;
	ИННКППОрганизации = Новый Структура; //требуется для формирования представления контрагентов (из списка участников нужно убрать организацию)
	
	//Сведения об организации
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	ИНН = "";
	КПП = "";
	Если ЭтоПБОЮЛ Тогда
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННФЛ");	
		ИНН = СведенияОбОрганизации.ИННФЛ;
		
	Иначе
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННЮЛ, КППЮЛ");	
		ИНН = СведенияОбОрганизации.ИННЮЛ; 
		КПП = СведенияОбОрганизации.КППЮЛ; 
		
	КонецЕсли; 
	
	ИННКППОрганизации.Вставить("ИНН", ИНН);
	ИННКППОрганизации.Вставить("КПП", КПП);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоНаименование,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоИНН,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоКПП,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоФамилия,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоИмя,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоОтчество,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоИНН,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЯвляетсяЮрЛицом,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.Контрагент КАК КонтрагентСсылка
		|ИЗ
		|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.РеквизитыУчастников КАК СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников
		|ГДЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Контрагенты = "";
	СписокКонтрагентов = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент = "";
		Если ВыборкаДетальныеЗаписи.ЯвляетсяЮрЛицом Тогда
			Если ИННКППОрганизации.ИНН <> ВыборкаДетальныеЗаписи.ЮрЛицоИНН И ИННКППОрганизации.КПП <> ВыборкаДетальныеЗаписи.ЮрЛицоКПП Тогда
				Контрагент = ВыборкаДетальныеЗаписи.ЮрЛицоНаименование;	
			КонецЕсли; 
		Иначе
			Если ИННКППОрганизации.ИНН <> ВыборкаДетальныеЗаписи.ФизЛицоИНН Тогда
				Контрагент = СокрЛП(ВыборкаДетальныеЗаписи.ФизЛицоФамилия + " " + ВыборкаДетальныеЗаписи.ФизЛицоИмя + " " + ВыборкаДетальныеЗаписи.ФизЛицоОтчество);
			КонецЕсли; 
		КонецЕсли;	
		
		Если Контрагент <> "" Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КонтрагентСсылка) Тогда
				//заполнена ссылка на справочник, поэтому заменяем сформированное представление контрагента его наименованием
				Контрагент = Строка(ВыборкаДетальныеЗаписи.КонтрагентСсылка);	
			КонецЕсли;
			
			Если СписокКонтрагентов.НайтиПоЗначению(Контрагент) = Неопределено Тогда
				СписокКонтрагентов.Добавить(Контрагент);
				Контрагенты = Контрагенты + ", " + Контрагент;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Контрагенты = Сред(Контрагенты, 3); //отрезаем первую запятую
	ЗначенияЗаполнения.Вставить("КонтрагентПредставление", 	Контрагенты);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ОбновитьСвойстваСканированногоДокументаВРегистреДокументыПоТребованиюФНС(Ссылка, ЗначенияЗаполнения) 
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектУдален = ЗначенияЗаполнения.ПометкаУдаления;
		
		// Записываем данные в регистр
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.СканированныйДокумент.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			//данный сканированный документ еще не отражен в регистре
			
			Если НЕ ОбъектУдален Тогда
				//попытаемся найти строку, в которую его нужно вписать
				МенеджерЗаписи = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.СканированныйДокумент 	= Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка();
				МенеджерЗаписи.Организация				= ЗначенияЗаполнения.Организация;
				МенеджерЗаписи.ВидДокументаФНС 			= ЗначенияЗаполнения.ВидДокументаФНС;
				МенеджерЗаписи.Источник 				= ЗначенияЗаполнения.Источник;
				МенеджерЗаписи.НомерСтрокиИсточника		= ЗначенияЗаполнения.НомерСтрокиИсточника;
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					//есть такая строка
					//можно вносить данные в регистр только если по данному источнику нет ЭД
					Если НЕ МенеджерЗаписи.ЕстьЭлектронныйДокумент Тогда
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияЗаполнения);
						МенеджерЗаписи.Контрагент = Неопределено;	//очистим поле Контрагент, теперь эта запись завязана на скандокумент, а не на документ-источник
						МенеджерЗаписи.СканированныйДокумент = Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
				Иначе
					//нет такой строки
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияЗаполнения);
					МенеджерЗаписи.СканированныйДокумент = Ссылка;
					МенеджерЗаписи.Записать();
				КонецЕсли;
								
			КонецЕсли;
			
		Иначе
			//данный сканированный документ уже есть в регистре

			Если ОбъектУдален Тогда
				//нужно удалить ссылку на сканированной документ в регистре
				МассивСканДокументовДляУдаленияИзЖурнала = Новый Массив;
				МассивСканДокументовДляУдаленияИзЖурнала.Добавить(Ссылка);
				УдалитьИзЖурналаМассивСканДокументов(МассивСканДокументовДляУдаленияИзЖурнала);
			Иначе
				Запись = НаборЗаписей[0]; //запись со сканированным документом всего одна
				
				ИсточникЗаписи = Запись.Источник;
				ИсточникСканированногоДокумента = ЗначенияЗаполнения.Источник;
				
				ИсточникДляОбновления = Неопределено;
				Если ИсточникЗаписи <> ИсточникСканированногоДокумента Тогда
					//изменилась связь сканированного документа и источника (появилась, удалена или изменена)
					
					Если ЗначениеЗаполнено(ИсточникСканированногоДокумента) Тогда
						// связь сканированного документа и источника появилась или изменилась.
						
						Если ЗначениеЗаполнено(ИсточникЗаписи) Тогда
							// связь сканированного документа и источника изменилась
							// следует его прописать источник разорванной связи в новой строке, для этого обновим свойства всего источника после записи набора	
							ИсточникДляОбновления =  ИсточникЗаписи;
						КонецЕсли;
						
						// в этой строке сканированного документа источник будет прописан,
						// возможно его нужно убрать из других строк
						НаборЗаписейИсточника = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
						НаборЗаписейИсточника.Отбор.Источник.Установить(ИсточникСканированногоДокумента);
						НаборЗаписейИсточника.Отбор.СканированныйДокумент.Установить(Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка());
						НаборЗаписейИсточника.Отбор.ВидДокументаФНС.Установить(ЗначенияЗаполнения.ВидДокументаФНС);
						НаборЗаписейИсточника.Отбор.НомерСтрокиИсточника.Установить(ЗначенияЗаполнения.НомерСтрокиИсточника);
						НаборЗаписейИсточника.Записать();
					Иначе
						// связь сканированного документа и источника разорвана
						// из этой строки сканированного документа источник будет изъят,
						// следует его прописать в новой строке, для этого обновим свойства всего источника после записи набора
						ИсточникДляОбновления =  ИсточникЗаписи;
					КонецЕсли;
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения);	
				НаборЗаписей.Записать();
				
				Если ЗначениеЗаполнено(ИсточникДляОбновления) Тогда
					ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(ИсточникДляОбновления);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьСвойстваИсточникаВРегистреДокументыПоТребованиюФНС(Источник, МассивЗначенияЗаполнения)
	
	ЕстьПризнакНаличияЭлектронногоДокумента = 
		ТипЗнч(МассивЗначенияЗаполнения) = Тип("Массив")
		И МассивЗначенияЗаполнения.Количество() > 0
		И ТипЗнч(МассивЗначенияЗаполнения[0]) = Тип("Структура")
		И МассивЗначенияЗаполнения[0].Свойство("ЭлектронныйДокумент");
		
	Если НЕ ЕстьПризнакНаличияЭлектронногоДокумента Тогда
		
		МассивВладельцевЭД 	 = Новый Массив;
		МассивВладельцевЭД.Добавить(Источник);
		СвойстваВладельцевЭД = Новый Соответствие;
		
		// Определяем наличие электронного документа и его тип.
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваВладельцевЭлектронныхДокументов(
			СвойстваВладельцевЭД,
			МассивВладельцевЭД);
		
		СоответствиеВидовДокументовФНС 	= СоответствиеВидовДокументовФНС();
		ВидДокументаФНСЭДСтрока 		= СвойстваВладельцевЭД[Источник];
		ВидДокументаФНСЭДПеречисление 	= СоответствиеВидовДокументовФНС[ВидДокументаФНСЭДСтрока];
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыПоТребованиюФНС");
		ЭлементБлокировки.УстановитьЗначение("Источник", Источник);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Записываем данные в регистр
		// 1 фаза: найдем все прежние записи по данному источнику
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Источник.Установить(Источник);
		НаборЗаписей.Прочитать();
		МассивУдаляемыхЗаписей = Новый Массив;
		
		Для каждого Запись Из НаборЗаписей Цикл
			//для каждой записи найдем новые свойства по ключевым параметрам записи
			СтруктураСвойств = НайтиСтруктуруСвойствИсточникаПоКлючевымПолям(МассивЗначенияЗаполнения, Запись.ВидДокументаФНС, Запись.НомерСтрокиИсточника);
			Если СтруктураСвойств = Неопределено Тогда
				// новых свойств не найдено, нужно удалять либо всю запись, либо свойства источника из записи
				Если ЗначениеЗаполнено(Запись.СканированныйДокумент) Тогда
					//удаляем свойства источника из записи
					//не требуется, так как перед этим перезаписали сканированные документы по данному источнику, предварительно удалив источник.
				Иначе
					//удаляем всю запись
					МассивУдаляемыхЗаписей.Добавить(Запись);
				КонецЕсли;
			Иначе
				// найдены свойства, обновим их	
				Если ЗначениеЗаполнено(Запись.СканированныйДокумент) Тогда
					//оставляем в регистре реквизиты сканированного документа
				Иначе
					//записываем в регистр реквизиты документа-источника
					СтруктураСвойств.Свойство("Организация", 			Запись.Организация);
					СтруктураСвойств.Свойство("ВидДокументаФНС", 		Запись.ВидДокументаФНС);
					СтруктураСвойств.Свойство("НомерСтрокиИсточника", 	Запись.НомерСтрокиИсточника);
					СтруктураСвойств.Свойство("Направление", 			Запись.Направление);
					СтруктураСвойств.Свойство("Контрагент", 			Запись.Контрагент);
					СтруктураСвойств.Свойство("Дата", 					Запись.ДатаДокумента);
					СтруктураСвойств.Свойство("Номер", 					Запись.НомерДокумента);
					СтруктураСвойств.Свойство("СуммаВсего", 			Запись.СуммаДокумента);
					
					Запись.Источник = Источник;
					
					Если ЕстьПризнакНаличияЭлектронногоДокумента Тогда
						СтруктураСвойств.Свойство("ЭлектронныйДокумент", Запись.ЕстьЭлектронныйДокумент);
					Иначе
						Запись.ЕстьЭлектронныйДокумент = (ВидДокументаФНСЭДПеречисление = Запись.ВидДокументаФНС);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемаяЗапись Из МассивУдаляемыхЗаписей Цикл
			НаборЗаписей.Удалить(УдаляемаяЗапись);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		// 2 фаза: обойдем все новые свойства
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Источник.Установить(Источник);
		
		Для каждого СтруктураСвойств Из МассивЗначенияЗаполнения Цикл
			//если записей с такими ключевыми значениями нету - добавим
			НаборЗаписей.Отбор.ВидДокументаФНС.Установить(СтруктураСвойств.ВидДокументаФНС);
			Если СтруктураСвойств.Свойство("НомерСтрокиИсточника") Тогда
				НаборЗаписей.Отбор.НомерСтрокиИсточника.Установить(СтруктураСвойств.НомерСтрокиИсточника);
			КонецЕсли;
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				
				СтруктураСвойств.Свойство("Организация", 			Запись.Организация);
				СтруктураСвойств.Свойство("ВидДокументаФНС", 		Запись.ВидДокументаФНС);
				СтруктураСвойств.Свойство("НомерСтрокиИсточника", 	Запись.НомерСтрокиИсточника);
				СтруктураСвойств.Свойство("Направление", 			Запись.Направление);
				СтруктураСвойств.Свойство("Контрагент", 			Запись.Контрагент);
				СтруктураСвойств.Свойство("Дата", 					Запись.ДатаДокумента);
				СтруктураСвойств.Свойство("Номер", 					Запись.НомерДокумента);
				СтруктураСвойств.Свойство("СуммаВсего", 			Запись.СуммаДокумента);
				
				Запись.Источник = Источник;
				
				Если ЕстьПризнакНаличияЭлектронногоДокумента Тогда
					СтруктураСвойств.Свойство("ЭлектронныйДокумент", Запись.ЕстьЭлектронныйДокумент);
				Иначе
					Запись.ЕстьЭлектронныйДокумент = (ВидДокументаФНСЭДПеречисление = Запись.ВидДокументаФНС);
				КонецЕсли;
				
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьНаличиеЭДВРегистреДокументыПоТребованиюФНС(ДокументИБ, ВидДокументаФНССтрока) 
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ВидДокументаФНССтрока = Неопределено Тогда
			
			УдалитьНаличиеЭДДокументаИБ(ДокументИБ);
			
		Иначе
			
			МассивСканДокументовДляУдаленияИзЖурнала = Новый Массив;
			
			СоответствиеВидовДокументовФНС = СоответствиеВидовДокументовФНС();
			ВидДокументаФНСПеречисление = СоответствиеВидовДокументовФНС[ВидДокументаФНССтрока];
			Если ВидДокументаФНСПеречисление = Неопределено Тогда
				ВызватьИсключение "Не удалось определить вид документа ФНС";
			КонецЕсли;
			
			// Записываем данные в регистр
			НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидДокументаФНС.Установить(ВидДокументаФНСПеречисление);
			НаборЗаписей.Отбор.Источник.Установить(ДокументИБ);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			Иначе
				Для каждого Запись Из НаборЗаписей Цикл
					Запись.ЕстьЭлектронныйДокумент = Истина;
					Если ЗначениеЗаполнено(Запись.СканированныйДокумент) Тогда
						МассивСканДокументовДляУдаленияИзЖурнала.Добавить(Запись.СканированныйДокумент);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);	
			
			Если МассивСканДокументовДляУдаленияИзЖурнала.Количество() <> 0 Тогда
				УдалитьИзЖурналаМассивСканДокументов(МассивСканДокументовДляУдаленияИзЖурнала);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Документы по требованию ФНС'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьИзЖурналаМассивСканДокументов(МассивСканДокументов)
	
	Для каждого СканДокумент Из МассивСканДокументов Цикл
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.СканированныйДокумент.Установить(СканДокумент);
		НаборЗаписей.Прочитать();
		//запись со сканированным документом всего одна
		//проверим, есть ли источник по данной записи
		ИсточникДляОбновления = Неопределено;
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
			ИсточникДляОбновления = Запись.Источник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникДляОбновления) Тогда
			//нужно удалить ссылку сканированный документ и заполнить запись данными источника
			//удаление ссылки производится удалением записей и их восстановлением, но уже без ссылки на сканированный документ
			//это требуется для сохранения идентификатора записи
			ВременнаяТаблица = НаборЗаписей.Выгрузить(); 
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(); 
			СтрокаТаблицы = ВременнаяТаблица[0];
			
			СтрокаТаблицы.СканированныйДокумент = Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка();
			
			НовыйНаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
			НовыйНаборЗаписей.Отбор.Организация.Установить(СтрокаТаблицы.Организация);
			НовыйНаборЗаписей.Отбор.СканированныйДокумент.Установить(Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка());
			НовыйНаборЗаписей.Отбор.ВидДокументаФНС.Установить(СтрокаТаблицы.ВидДокументаФНС);
			НовыйНаборЗаписей.Отбор.Источник.Установить(ИсточникДляОбновления);
			НовыйНаборЗаписей.Отбор.НомерСтрокиИсточника.Установить(СтрокаТаблицы.НомерСтрокиИсточника);
			НовыйНаборЗаписей.Загрузить(ВременнаяТаблица);
			НовыйНаборЗаписей.Записать(); 
			
			ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(ИсточникДляОбновления);

		Иначе
			//нужно просто удалить набор записей
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(); 
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьНаличиеЭДДокументаИБ(ДокументИБ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыПоТребованиюФНС.Организация,
		|	ДокументыПоТребованиюФНС.ВидДокументаФНС,
		|	ДокументыПоТребованиюФНС.СканированныйДокумент,
		|	ДокументыПоТребованиюФНС.Источник,
		|	ДокументыПоТребованиюФНС.НомерСтрокиИсточника
		|ИЗ
		|	РегистрСведений.ДокументыПоТребованиюФНС КАК ДокументыПоТребованиюФНС
		|ГДЕ
		|	ДокументыПоТребованиюФНС.Источник = &Источник
		|	И ДокументыПоТребованиюФНС.ЕстьЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("Источник", ДокументИБ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ЕстьЭлектронныйДокумент = Ложь;	
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтруктуруСвойствИсточникаПоКлючевымПолям(МассивЗначенияЗаполнения, ВидДокументаФНС, НомерСтрокиИсточника) Экспорт

	Для каждого СтруктураСвойствИсточника Из МассивЗначенияЗаполнения Цикл
		
		СвойствоИсточника_ВидДокументаФНС = СтруктураСвойствИсточника.ВидДокументаФНС;
		//НомерСтрокиИсточника - необязательный реквизит источника, может отсутствовать в структуре свойств источника
		СвойствоИсточника_НомерСтрокиИсточника = ?(СтруктураСвойствИсточника.Свойство("НомерСтрокиИсточника"), СтруктураСвойствИсточника.НомерСтрокиИсточника, 0); 
		
		Если СвойствоИсточника_ВидДокументаФНС = ВидДокументаФНС
		И СвойствоИсточника_НомерСтрокиИсточника = НомерСтрокиИсточника Тогда
			Возврат СтруктураСвойствИсточника;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция СоответствиеВидовДокументовФНС() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Виды = КонтекстЭДОСервер.ВидыПредставляемыхДокументов();
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для каждого Вид Из Виды Цикл
		СоответствиеРезультат.Вставить(Вид.Имя, Вид.Значение); 
	КонецЦикла; 
	
	Возврат СоответствиеРезультат;
	
КонецФункции

Функция МассивДоступныхВидовДокументовИсточников() Экспорт
	
	СоответствиеВидовДокументов = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(СоответствиеВидовДокументов);
	
	МассивДоступныхВидов = Новый Массив;
	
	Для каждого элСоответствиеВидовДокументов Из СоответствиеВидовДокументов Цикл
		ВидДокументаФНС = элСоответствиеВидовДокументов.Ключ;
		МассивТиповОдногоВида = элСоответствиеВидовДокументов.Значение;
		Если МассивТиповОдногоВида.Количество() > 0 Тогда
			МассивДоступныхВидов.Добавить(ВидДокументаФНС);	
		КонецЕсли;
	КонецЦикла;

	Возврат МассивДоступныхВидов;
	
КонецФункции 

Функция СправочникКонтрагентовДоступен() Экспорт
	
	СправочникКонтрагенты = Метаданные.Справочники.Найти("Контрагенты");
	Если СправочникКонтрагенты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция РеквизитыСправочникаКонтрагентовДоступны() Экспорт
	
	СправочникКонтрагенты = Метаданные.Справочники.Найти("Контрагенты");
	Если СправочникКонтрагенты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СправочникКонтрагенты.Реквизиты.Найти("НаименованиеПолное") = Неопределено 
	ИЛИ СправочникКонтрагенты.Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено 
	ИЛИ СправочникКонтрагенты.Реквизиты.Найти("ИНН") = Неопределено 
	ИЛИ СправочникКонтрагенты.Реквизиты.Найти("КПП") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Заполняет значения элементов структуры, передаваемой в параметрах.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//	 СтруктураПараметров - структура. Возможные поля:
//     ОтпечатокСертификатаПодписи - Строка, 40
//     ЭлектроннаяПодписьВМоделиСервиса - Булево
//     КодНО - строка, заполняется кодом налогового органа из учетной записи при его заполненности, иначе - пустая строка
//     ТипКриптоПровайдера - строка, возможные значения
//       "VipNet"
//       "CryptoPro"
//       ""
// Примечание:
// Свойства ОтпечатокСертификатаПодписи, ЭлектроннаяПодписьВМоделиСервиса, КодНО заполняются при наличии учетной записи, привязанной к передаваемой организации,
// иначе остаются первоначальные значения
//
Процедура ЗаполнитьПараметрыДляФормыПодключенияКСервисуЭлектронныхДокументов(Организация, СтруктураПараметров) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	//заполенение полей ОтпечатокСертификатаПодписи, ЭлектроннаяПодписьВМоделиСервиса, КодНО
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УчетныеЗаписиДокументооборота.СертификатРуководителя,
		|	УчетныеЗаписиДокументооборота.ЭлектроннаяПодписьВМоделиСервиса,
		|	УчетныеЗаписиДокументооборота.НалоговыйОрган.Код КАК КодНО
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
		|		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписиДокументооборота.Ссылка
		|ГДЕ
		|	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
		|	И Организации.Ссылка = &ОрганизацияСсылка
		|	И НЕ Организации.ПометкаУдаления
		|	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если СтруктураПараметров.Свойство("ОтпечатокСертификатаПодписи") Тогда
			СтруктураПараметров.Вставить("ОтпечатокСертификатаПодписи", Выборка.СертификатРуководителя);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЭлектроннаяПодписьВМоделиСервиса") Тогда
			СтруктураПараметров.Вставить("ЭлектроннаяПодписьВМоделиСервиса", Выборка.ЭлектроннаяПодписьВМоделиСервиса);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КодНО") Тогда
			СтруктураПараметров.Вставить("КодНО", СокрЛП(Строка(Выборка.КодНО)));
		КонецЕсли;
		
	КонецЕсли; 	
	
	//заполенение поля ТипКриптоПровайдера
	Если СтруктураПараметров.Свойство("ТипКриптоПровайдера") Тогда
		Если СтруктураПараметров.Свойство("ЭлектроннаяПодписьВМоделиСервиса") И СтруктураПараметров.ЭлектроннаяПодписьВМоделиСервиса = Истина Тогда
			// поле структуры ЭлектроннаяПодписьВМоделиСервиса существует и равно Истине
			ТипКриптоПровайдера = "CryptoPro";
		Иначе
			
			ТипКриптоПровайдера = "";
			
			ПараметрыКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗаполнитьПараметрыКриптографии();
			
			Если ПараметрыКриптографии.ПрисутствуетЗаполненныйПараметр Тогда
				ПараметрыКриптоПровайдера = ПараметрыКриптографии.ПараметрыКриптографии;
				СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(
					ПараметрыКриптоПровайдера["ИмяКриптопровайдера"], ПараметрыКриптоПровайдера["ТипКриптопровайдера"]);
				
				Если СвойстваКриптопровайдера <> Неопределено
					И ТипЗнч(СвойстваКриптопровайдера.ТипКриптопровайдера) = Тип("ПеречислениеСсылка.ТипыКриптоПровайдеров") Тогда
					ИндексТипаКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.Индекс(СвойстваКриптопровайдера.ТипКриптопровайдера);
					ТипКриптоПровайдера = Метаданные.Перечисления.ТипыКриптоПровайдеров.ЗначенияПеречисления[ИндексТипаКриптопровайдера].Имя;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТипКриптоПровайдера", ТипКриптоПровайдера);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ПроставитьПризнакЗаключенногоСоглашенияСПФР() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ПроставитьПризнакЗаключенногоСоглашенияСПФР();
	
КонецПроцедуры

#Область ИсправлениеСтатусовОтправок2НДФЛ

Процедура ИсправитьНекорректныеСостоянияОтправок2НДФЛ() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ИсправитьНекорректныеСостоянияОтправок2НДФЛ();
	
КонецПроцедуры

Процедура ИсправитьНекорректныеСостоянияОтправок2НДФЛ_2() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ИсправитьНекорректныеСостоянияОтправок2НДФЛ_2();
	
КонецПроцедуры

Процедура ЗаписатьПоясненияКДекларацииПоНДСВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьПоясненияКДекларацииПоНДСВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьНекорректныеСостоянияОтправок2НДФЛ_1110307() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ИсправитьНекорректныеСостоянияОтправок2НДФЛ_1110307();
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСпособПолученияСертификата() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ЗаполнитьСпособПолученияСертификата();
	
КонецПроцедуры

Функция ПолучитьЗначениеУзлаXML(
		ДокументDOM,
		НазваниеУзла,
		ЗначениеПоУмолчанию = "",
		МассивВозможныхЗначений = Неопределено,
		ПризнакИсключения = Ложь,
		ТипЗначения = Неопределено,
		ЭтоМассивИменРодительскихУзлов = Ложь) Экспорт
	
	Если ДокументDOM = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	УзелDOM = ДокументDOM.ПолучитьЭлементыПоИмени(НазваниеУзла);
	
	ПодходящийЭлементDOM = Неопределено;
	Если МассивВозможныхЗначений <> Неопределено Тогда
		Для Каждого ЭлементDOM Из УзелDOM Цикл
			
			Если ЭтоМассивИменРодительскихУзлов Тогда
				Значение = ?(ЭлементDOM.РодительскийУзел <> Неопределено, ЭлементDOM.РодительскийУзел.ИмяУзла, "");
			Иначе
				Значение = НРег(ЭлементDOM.ТекстовоеСодержимое);
			КонецЕсли;
			
			Индекс = МассивВозможныхЗначений.Найти(Значение);
			Если (Индекс <> Неопределено И НЕ ПризнакИсключения)
				ИЛИ (Индекс = Неопределено И ПризнакИсключения) Тогда
				ПодходящийЭлементDOM = ЭлементDOM;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Если УзелDOM.Количество() > 0 Тогда
			ПодходящийЭлементDOM = УзелDOM[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ПодходящийЭлементDOM = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	ИначеЕсли НазваниеУзла = "Отпечаток" Тогда
		Возврат НРег(ПодходящийЭлементDOM.Текстовоесодержимое);
	ИначеЕсли ТипЗначения <> Неопределено Тогда
		Возврат XMLЗначение(ТипЗначения, ПодходящийЭлементDOM.Текстовоесодержимое);
	Иначе
		Возврат ПодходящийЭлементDOM.Текстовоесодержимое;
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьФайлXML(ИмяФайла) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ОбменССерверомСоздатьСервис(
		СпецОператорСвязи 		= Неопределено, 
		ЭтоВызовИзМастера 		= Ложь, 
		ТекстОшибокДляМастера 	= "", 
		ПараметрыРесурса 		= Неопределено, 
		ВыводитьСообщения 		= Истина) Экспорт
	
	Если ПараметрыРесурса = Неопределено Тогда
		Определение 				= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисОпределение");
		URIПространстваИменСервиса 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисURIПространстваИменСервиса");
		ИмяСервиса 					= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисИмяСервиса");
		ИмяТочкиПодключения 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СпецОператорСвязи, "ВебСервисИмяТочкиПодключения");
		
	Иначе
		Определение 				= ПараметрыРесурса.Определение;
		URIПространстваИменСервиса 	= ПараметрыРесурса.URIПространстваИменСервиса;
		ИмяСервиса 					= ПараметрыРесурса.ИмяСервиса;
		ИмяТочкиПодключения 		= ПараметрыРесурса.ИмяТочкиПодключения;
	КонецЕсли;
	
	Попытка
		
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL 				= Определение;
		ПараметрыПодключения.URIПространстваИмен 	= URIПространстваИменСервиса;
		ПараметрыПодключения.ИмяСервиса 			= ИмяСервиса;
		ПараметрыПодключения.ИмяТочкиПодключения 	= ИмяТочкиПодключения;
		ПараметрыПодключения.ИмяПользователя 		= "";
		ПараметрыПодключения.Пароль 				= "";
		ПараметрыПодключения.Таймаут 				= 200;
		
		Сервис = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		
		Возврат Сервис;
	Исключение
		
		Если ВыводитьСообщения Тогда
			
			Если НЕ ЭтоВызовИзМастера Тогда 
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(НСтр("ru = 'Ошибка соединения с сервисом регистрации!'"), 
							ЭтоВызовИзМастера, 
							ТекстОшибокДляМастера, 
							Истина);
		КонецЕсли;
						
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТипыАвтоотправляемыхСообщений() Экспорт

	Типы = Новый Массив;
	
	// ПФР
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР);
	
	// ФНС 534
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП);
	
	// Документ
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП);
	
	// Заявление
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП);
	
	// Росстат
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС);
	Типы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС);
	
	Возврат Типы;
	
КонецФункции

Функция ВсеОтправки(Ссылка) Экспорт
	
	// Внимание!
	// Сортировка результата должна оставаться именно такой,
	// поскольку на это заложились потребители.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТранспортноеСообщение.ПометкаУдаления КАК ПометкаУдаления,
	|	ТранспортноеСообщение.ЦиклОбмена КАК Отправка,
	|	ВЫБОР
	|		КОГДА ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация ССЫЛКА Справочник.НалоговыеОрганы
	|			ТОГДА ""ФНС""
	|		КОГДА ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация ССЫЛКА Справочник.ОрганыФСГС
	|			ТОГДА ""ФСГС""
	|		КОГДА ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация ССЫЛКА Справочник.ОрганыПФР
	|			ТОГДА ""ПФР""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидКонтролирующегоОргана,
	|	ВЫБОР
	|		КОГДА ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация ССЫЛКА Справочник.НалоговыеОрганы
	|				ИЛИ ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация ССЫЛКА Справочник.ОрганыФСГС
	|				ИЛИ ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация ССЫЛКА Справочник.ОрганыПФР
	|			ТОГДА ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация.Код
	|		ИНАЧЕ ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация
	|	КОНЕЦ КАК КодКонтролирующегоОргана,
	|	ТранспортноеСообщение.Получатель КАК Организация,
	|	ТранспортноеСообщение.ЦиклОбмена.ПредставлениеПериода КАК ПредставлениеПериода,
	|	ТранспортноеСообщение.ЦиклОбмена.ПредставлениеВидаДокумента КАК ПредставлениеВида,
	|	ТранспортноеСообщение.ДатаТранспорта КАК ДатаОтправки,
	|	ВЫБОР
	|		КОГДА ГОД(ТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия) = 3999
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия
	|	КОНЕЦ КАК ДатаЗавершения,
	|	ТранспортноеСообщение.ЦиклОбмена.Идентификатор КАК ИдентификаторОтправки,
	|	ТранспортноеСообщение.Ссылка КАК Сообщение
	|ИЗ
	|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	|ГДЕ
	|	(ТранспортноеСообщение.ЦиклОбмена.Предмет = &Ссылка
	|			ИЛИ &Ссылка В (ТранспортноеСообщение.ЦиклОбмена.ДополнительныеПредметы.Предмет))
	|	И ТранспортноеСообщение.ЦиклОбмена.Тип В(&Тип)
	|	И ТранспортноеСообщение.Тип В(&ТипПервичныхСообщений)
	|	И ТранспортноеСообщение.Статус = &СтатусОтправленное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтправкиФСС.ПометкаУдаления,
	|	ОтправкиФСС.Ссылка,
	|	""ФСС"",
	|	ОтправкиФСС.КодОрганаФСС,
	|	ОтправкиФСС.Организация,
	|	ОтправкиФСС.ПредставлениеПериода,
	|	ОтправкиФСС.ПредставлениеВидаДокумента,
	|	ОтправкиФСС.ДатаОтправки,
	|	ВЫБОР
	|		КОГДА ГОД(ОтправкиФСС.ДатаЗакрытия) = 3999
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ОтправкиФСС.ДатаЗакрытия
	|	КОНЕЦ,
	|	ОтправкиФСС.ИдентификаторОтправкиНаСервере,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.ОтправкиФСС КАК ОтправкиФСС
	|ГДЕ
	|	ОтправкиФСС.ОтчетСсылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтправкиФСРАР.ПометкаУдаления,
	|	ОтправкиФСРАР.Ссылка,
	|	""ФСРАР"",
	|	"""",
	|	ОтправкиФСРАР.Организация,
	|	ОтправкиФСРАР.ПредставлениеПериода,
	|	ОтправкиФСРАР.ПредставлениеВидаДокумента,
	|	ОтправкиФСРАР.ДатаОтправки,
	|	ВЫБОР
	|		КОГДА ГОД(ОтправкиФСРАР.ДатаЗакрытия) = 3999
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ОтправкиФСРАР.ДатаЗакрытия
	|	КОНЕЦ,
	|	ОтправкиФСРАР.ИдентификаторОтправкиНаСервере,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
	|ГДЕ
	|	ОтправкиФСРАР.ОтчетСсылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтправкиРПН.ПометкаУдаления,
	|	ОтправкиРПН.Ссылка,
	|	""РПН"",
	|	"""",
	|	ОтправкиРПН.Организация,
	|	ОтправкиРПН.ПредставлениеПериода,
	|	ОтправкиРПН.ПредставлениеВидаДокумента,
	|	ОтправкиРПН.ДатаОтправки,
	|	ВЫБОР
	|		КОГДА ГОД(ОтправкиРПН.ДатаЗакрытия) = 3999
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ОтправкиРПН.ДатаЗакрытия
	|	КОНЕЦ,
	|	ОтправкиРПН.ИдентификаторОтправкиНаСервере,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.ОтправкиРПН КАК ОтправкиРПН
	|ГДЕ
	|	ОтправкиРПН.ОтчетСсылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтправкиФТС.ПометкаУдаления,
	|	ОтправкиФТС.Ссылка,
	|	""ФТС"",
	|	"""",
	|	ОтправкиФТС.Организация,
	|	ОтправкиФТС.ПредставлениеПериода,
	|	ОтправкиФТС.ПредставлениеВидаДокумента,
	|	ОтправкиФТС.ДатаОтправки,
	|	ВЫБОР
	|		КОГДА ГОД(ОтправкиФТС.ДатаЗакрытия) = 3999
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ОтправкиФТС.ДатаЗакрытия
	|	КОНЕЦ,
	|	ОтправкиФТС.ИдентификаторОтправкиНаСервере,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.ОтправкиФТС КАК ОтправкиФТС
	|ГДЕ
	|	ОтправкиФТС.ОтчетСсылка = &Ссылка
	|";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВБанкРоссии") Тогда
		МодульДокументооборотСБанкомРоссии = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСБанкомРоссии");
		Запрос.Текст = Запрос.Текст + МодульДокументооборотСБанкомРоссии.ПолучитьТекстЗапросаДляВсеОтправки();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует(
			"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
		МодульДокументооборотСМинобороны = ОбщегоНазначения.ОбщийМодуль("ДокументооборотСМинобороны");
		Запрос.Текст = Запрос.Текст + МодульДокументооборотСМинобороны.ПолучитьТекстЗапросаДляВсеОтправки();
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОтправки УБЫВ";
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		Предмет = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(Ссылка);
	Иначе
		Предмет = Ссылка;
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", 				Предмет);
	Запрос.УстановитьПараметр("Тип", 					ДокументооборотСКОВызовСервера.ТипыЦикловОбмена());
	Запрос.УстановитьПараметр("ТипПервичныхСообщений", 	ДокументооборотСКОВызовСервера.ТипПервичныхСообщений());
	Запрос.УстановитьПараметр("СтатусОтправленное", 	Перечисления.СтатусыПисем.Отправленное);
	
	ВсеОтправки = Запрос.Выполнить().Выгрузить();
	
	Если Предмет = Неопределено Тогда
		ВсеОтправки.Очистить();
	КонецЕсли;
	
	Возврат ВсеОтправки;
	
КонецФункции

Функция ТипыОснованийИПодтверждений(ЦиклОбмена) Экспорт
	
	// определяем соответствие между типами сообщений-оснований и сообщений-подтверждений на них
	ТипыОснованийИПодтверждений = Новый Соответствие;
	
	// ФНС 534
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО , Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	
	// ФНС 534 2-НДФЛ
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	
	// ФНС 534 НФД
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	
	// ФНС 534 Представление
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	
	// ФНС 534 ИОН
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	
	// ПФР
	Если ЦиклОбмена.ФорматДокументооборота <> Перечисления.ФорматыДокументооборотаСПФР.ЭДОК Тогда
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР, Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР, Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР);
	КонецЕсли;
	
	// Росстат
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС);
	
	// ФНС 534 НФД НО
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП);
	
	// ФНС 534 ДРП НО
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ДокументНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП);
	
	// ФНС 534 Заявление
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП);
	ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП);
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП);
	КонецЕсли;
	
	Возврат ТипыОснованийИПодтверждений;

КонецФункции

Функция ВсеСообщенияЦиклаОбменаОтправленыПриняты(ЦиклОбмена) Экспорт
	
	Сообщения = ДокументооборотСКОВызовСервера.ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена);
	
	// удаляем из таблицы те сообщения, которые не были отправлены/приняты
	ЧислоСообщений = Сообщения.Количество();
	Для Инд = 1 По ЧислоСообщений Цикл
		
		ОбратныйИнд = ЧислоСообщений - Инд;
		ТекСтр = Сообщения[ОбратныйИнд];
		Если ТекСтр.Статус <> Перечисления.СтатусыПисем.Отправленное И ТекСтр.Статус <> Перечисления.СтатусыПисем.Полученное Тогда
			Сообщения.Удалить(ТекСтр);
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеТипы = Новый Массив;
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		
		Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
			
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОС Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие
		Или ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаПФР Тогда		
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Представление Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Документ Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ДокументНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаФСГС Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаШаблоновФСГС Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаШаблоновФСГС);
		
	КонецЕсли;
	
	Для Каждого ВозможныйТип Из ВозможныеТипы Цикл
		Если Сообщения.Найти(ВозможныйТип, "Тип") = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// ФНС 534
	Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
			Если НЕ АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена) Тогда
				Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО, "Тип") = Неопределено
				ИЛИ Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "Тип") = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			Если НЕ АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена) Тогда
				Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, "Тип") = Неопределено
				ИЛИ Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "Тип") = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление Тогда
			Если НЕ АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена) Тогда
				ОтсутствуетРезультатОбработки = (Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО, "Тип") = Неопределено
				И Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО, "Тип") = Неопределено);
				
				ОтсутствуетПодтвеждениеРезультатаОбработки = (Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП, "Тип") = Неопределено
				И Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "Тип") = Неопределено);
				
				Если ОтсутствуетРезультатОбработки ИЛИ ОтсутствуетПодтвеждениеРезультатаОбработки Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	// ПФР
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		Если НЕ АктуальноеПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(ЦиклОбмена) Тогда
			Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, "Тип") = Неопределено
			ИЛИ ЦиклОбмена.ФорматДокументооборота <> Перечисления.ФорматыДокументооборотаСПФР.ЭДОК
			И Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, "Тип") = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	// ФСГС
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда
		Если НЕ АктуальноеПодтверждениеПолученияОтчетностиФСГСЯвляетсяОтрицательным(ЦиклОбмена) Тогда
			Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС, "Тип") = Неопределено
			 ИЛИ Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС, "Тип") = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// проверяем, все ли подтверждения отправлены
	Если ЦиклОбмена.ДатаСоздания > '20090416' Тогда
		
		// определяем соответствие между типами сообщений-оснований и сообщений-подтверждений на них
		ТипыОснованийИПодтверждений = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ТипыОснованийИПодтверждений(ЦиклОбмена);
		
		// перебираем соответствие подтверждений основаниям
		Для Каждого ТипОснованияИПодтверждения Из ТипыОснованийИПодтверждений Цикл
			
			ТипОснования = ТипОснованияИПодтверждения.Ключ;
			ТипПодтверждения = ТипОснованияИПодтверждения.Значение;
			
			// для каждого основания...
			СообщенияОснования = Сообщения.НайтиСтроки(Новый Структура("Тип", ТипОснования));
			Для Каждого СообщениеОснование Из СообщенияОснования Цикл
				
				// ... ищем подтверждение, и если не находим, то возвращаем Ложь
				Если Сообщения.Найти(СообщениеОснование.Ссылка, "Основание") = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьСвойстваЦиклаОбмена(ЦиклОбмена, Предмет = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// получаем сообщения и отсортировываем их по дате
	СообщенияЦиклаОбмена = ДокументооборотСКОВызовСервера.ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена);
	Если СообщенияЦиклаОбмена.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СообщенияЦиклаОбмена.Сортировать("ДатаТранспорта УБЫВ");
	
	// инициализируем объект цикла для записи
	ОбъектЦиклОбмена = ЦиклОбмена.ПолучитьОбъект();
	Если ОбъектЦиклОбмена = Неопределено Тогда // значит, цикл обмена еще не записан
		Возврат Истина;
	КонецЕсли;
	
	// устанавливаем дату транспорта последнего сообщения
	ПоследнееСообщение = СообщенияЦиклаОбмена[0];
	ДатаТранспортаПоследнегоСообщения = ПоследнееСообщение.ДатаТранспорта;
	Если ОбъектЦиклОбмена.ДатаПоследнегоСообщения <> ПоследнееСообщение.ДатаТранспорта Тогда
		ОбъектЦиклОбмена.ДатаПоследнегоСообщения = ДатаТранспортаПоследнегоСообщения;
	КонецЕсли;
	
	// устанавливаем дату закрытия цикла обмена
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВсеСообщенияЦиклаОбменаОтправленыПриняты(ЦиклОбмена) Тогда
		ОбъектЦиклОбмена.ДатаЗакрытия = ДатаТранспортаПоследнегоСообщения;
	ИначеЕсли ОбъектЦиклОбмена.ДатаЗакрытия <> ПолучитьПустуюДатуЗавершенияЦиклаОбмена() Тогда
		ОбъектЦиклОбмена.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена();
	КонецЕсли;
	
	// устанавливаем циклу обмена идентификатор первичного сообщения при необходимости
	// только для формата документооборота, предшествующего 534
	Если ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС
	И ЦиклОбмена.ФорматДокументооборота <> Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		ТипПервичного = ПолучитьТипПервичногоСообщенияПоЦиклуОбмена(ЦиклОбмена);
		Если ТипПервичного <> Неопределено Тогда
			ПервичныеСообщения = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", ТипПервичного));
			Если ПервичныеСообщения.Количество() > 0 Тогда
				ПервичноеСообщение = ПервичныеСообщения[0];
				Если ОбъектЦиклОбмена.Идентификатор <> ПервичноеСообщение.ИдентификаторСообщения Тогда
					ОбъектЦиклОбмена.Идентификатор = ПервичноеСообщение.ИдентификаторСообщения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// устанавливаем предмет
	Если ЗначениеЗаполнено(Предмет) И ОбъектЦиклОбмена.Предмет <> Предмет Тогда
		ОбъектЦиклОбмена.Предмет = Предмет;
	КонецЕсли;
	
	// записываем, если объект изменялся
	Если ОбъектЦиклОбмена.Модифицированность() Тогда
		Попытка
			ОбъектЦиклОбмена.Записать();
		Исключение
			
			ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами.Обновить свойства цикла обмена'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия ,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставление);

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось обновить свойства родительского цикла обмена %1%2'"),
																						Символ(34) + ЦиклОбмена + Символ(34),
																						Символы.ПС + ПодробноеПредставление);
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
			
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПустуюДатуЗавершенияЦиклаОбмена() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

Процедура ЗаполнитьПериодЗапросовИОН() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ЗаполнитьПериодЗапросовИОН();
	
КонецПроцедуры

Процедура ЗаполнитьТипСверкиИОН() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ЗаполнитьТипСверкиИОН();
	
КонецПроцедуры

#КонецОбласти

Функция ВидОтправляемогоДокументаРеестраНДСПоСсылке(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		Возврат Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ДокументСсылка.ИсточникОтчета);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		Возврат ДокументСсылка.ВидОтчета;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьСведенияОСотруднике(Знач Сотрудник, Знач МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьСведенияОСотруднике(Сотрудник, МассивПоказателей, ДатаЗначения);
	
КонецФункции

// Получает сверку с контролирующим органом по переданным реквизитам
//
// Параметры:
//	Реквизиты - Структура - реквизиты, по которым нужно найти сверку.
//	КонтролирующийОрган - Строка - вид контролирующего органа.
//
Функция ПолучитьСуществующуюСверку(Реквизиты, КонтролирующийОрган) Экспорт
	
	Ссылка = Неопределено;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаПериода",    НачалоГода(Реквизиты.ПериодСобытия));
	Запрос.УстановитьПараметр("ПериодНачалаСобытия",  Реквизиты.ПериодНачалаСобытия);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", КонецМесяца(Реквизиты.ПериодСобытия));
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка КАК Ссылка
	|ИЗ
	|    Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика КАК ЗапросНаИнформационноеОбслуживаниеНалогоплательщика
	|ГДЕ
	|    ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Организация = &Организация
	|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ДатаНачалаПериода = &ДатаНачалаПериода
	|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ДатаОкончанияПериода <= &ДатаОкончанияПериода
	|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ВидУслуги В(&ВидыСверок)
	|    И НЕ ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПометкаУдаления";
	
	Если КонтролирующийОрган = "ФНС" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ДатаОкончанияПериода >= &ПериодНачалаСобытия";
		
		ВидыСверок = Новый Массив;
		ВидыСверок.Добавить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом);
		ВидыСверок.Добавить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате);
		Запрос.УстановитьПараметр("ВидыСверок", ВидыСверок);
		Если Реквизиты.Свойство("СписокКБК") Тогда
			ТекстОбъединить = "
			|ОБЪЕДИНИТЬ
			|";
			
			ТекстЗапроса2 =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|    ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка
			|ИЗ
			|    Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ЗапрашиваемыеНалоги КАК ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги
			|ГДЕ
			|    ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка.Организация = &Организация
			|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка.ДатаНачалаПериода = &ДатаНачалаПериода
			|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка.ДатаОкончанияПериода >= &ПериодНачалаСобытия
			|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка.ДатаОкончанияПериода <= &ДатаОкончанияПериода
			|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка.Получатель = &Получатель
			|    И НЕ ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.Ссылка.ПометкаУдаления
			|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.КБК В(&СписокКБК)
			|    И ЗапросНаИнформационноеОбслуживаниеНалогоплательщикаЗапрашиваемыеНалоги.ОКАТО = &ОКАТО";
			
			ЧастиЗапроса = Новый Массив;
			ЧастиЗапроса.Добавить(ТекстЗапроса);
			ЧастиЗапроса.Добавить(ТекстЗапроса2);
			ТекстЗапроса = СтрСоединить(ЧастиЗапроса, ТекстОбъединить);
			
			Запрос.УстановитьПараметр("Получатель", Реквизиты.РегистрацияВНалоговомОргане);
			Запрос.УстановитьПараметр("СписокКБК",  Реквизиты.СписокКБК);
			Запрос.УстановитьПараметр("ОКАТО",      СокрЛП(Реквизиты.ОКТМО));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ВидыСверок",  ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыУслугПриИОС.СправкаОСостоянииРасчетов));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ДатаНачалаПериода = &ДатаНачалаПериода", ".НаДату >= &ПериодНачалаСобытия");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ДатаОкончанияПериода <= &ДатаОкончанияПериода", ".НаДату <= &ДатаОкончанияПериода");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗапросНаИнформационноеОбслуживаниеНалогоплательщика", "ЗапросНаИнформационноеОбслуживаниеСтрахователя");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#Область ЗакладкаНовоеФормы1СОтчетность

// Возвращает таблицу новых сообщений 1С-Отчетности по организации.
// Параметры:
//   Организация - СправочникСсылка.Организации - если указан, то сообщения будут получены только по этой организации.
// Возвращаемое значение:
//   ТаблицаЗначений - новый сообщения.
//     ТипСообщения - Строка - может принимать значения: 
//                             ОтклоненныйОтчет, 
//                             Требование, 
//                             ВходящееПисьмо, 
//                             ОтветНаЗапрос, 
//                             СданныйОтчет.
//     Наименование - Строка - наименование отчета.
//     ДатаСообщения - Дата - дата сообщения.
//
Функция ПолучитьНовыеСообщенияОтчетности(Организация = Неопределено) Экспорт
	
	Сообщения = Новый ТаблицаЗначений;
	Сообщения.Колонки.Добавить("ТипСообщения", Новый ОписаниеТипов("Строка"));
	Сообщения.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Сообщения.Колонки.Добавить("ДатаСообщения", Новый ОписаниеТипов("Дата"));
	
	Выборка = ПолучитьНовыеСобытия(Организация);
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Сообщения.Добавить();
		НоваяСтрока.ТипСообщения = ОпределитьТипСообщения(Выборка);
		НоваяСтрока.Наименование = Выборка.Наименование;
		НоваяСтрока.ДатаСообщения = Выборка.ДатаСобытия;
	КонецЦикла;
	
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьТипСообщения(Выборка)
	
	ТипСообщения = "";
	
	Если Выборка.Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда 
		Если Выборка.Состояние = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
			ТипСообщения = "ОтклоненныйОтчет";
		ИначеЕсли Выборка.Состояние = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда
			ТипСообщения = "СданныйОтчет";
		КонецЕсли;
	ИначеЕсли Выборка.Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда
		ТипСообщения = "ОтветНаЗапрос";
	ИначеЕсли Выборка.Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
		Если Выборка.ТипОбъекта = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			ТипСообщения = "Требование";
		Иначе
			ТипСообщения = "ВходящееПисьмо";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипСообщения;
	
КонецФункции

Функция ПолучитьНовыеСобытия(Организация = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналНовыхСобытий.Наименование КАК Наименование,
	|	ТипЗначения(ЖурналНовыхСобытий.Ссылка) КАК ТипОбъекта,
	|	ЖурналНовыхСобытий.Состояние КАК Состояние,
	|	ЖурналНовыхСобытий.Группа КАК Группа,
	|	ЖурналНовыхСобытий.ДатаСобытия КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	|ГДЕ
	|	НЕ ЖурналНовыхСобытий.Просмотрено
	|	И ЖурналНовыхСобытий.Группа <> ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки)";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + "И ЖурналНовыхСобытий.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции


Процедура ЗаписатьСобытиеДокументооборотаСКО(Запись) Экспорт
	
	ТекущийСеансДокументооборотаСКО = ДокументооборотСКО.ТекущийСеансДокументооборотаСКО();
		
	Группа = ПолучитьГруппуНовогоСобытияДокументооборотаСКО(Запись);
	
	Если Не ЗначениеЗаполнено(Группа) Тогда
		НаборЗаписей = РегистрыСведений.ЖурналНовыхСобытий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Запись.Объект);
		НаборЗаписей.Записать(Истина);
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналНовыхСобытий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ссылка = Запись.Объект;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() 
		И (МенеджерЗаписи.Статус <> Запись.Статус 
		ИЛИ МенеджерЗаписи.Просмотрено <> Запись.Просмотрено
		ИЛИ МенеджерЗаписи.Скрыт <> Запись.Скрыт
		ИЛИ МенеджерЗаписи.ЕстьОтвет <> Запись.ЕстьОтвет
		ИЛИ МенеджерЗаписи.ЕстьКритическиеОшибкиОтправки <> Запись.ЕстьКритическиеОшибкиОтправки)
		ИЛИ Не МенеджерЗаписи.Выбран() Тогда
		
		УстановитьПризнакПоказатьПользователю(МенеджерЗаписи, Запись);
		
		МенеджерЗаписи.Ссылка 				= Запись.Объект;
		МенеджерЗаписи.СеансСвязи 			= ТекущийСеансДокументооборотаСКО;
		МенеджерЗаписи.Наименование 		= Запись.Наименование;	
		МенеджерЗаписи.Статус 				= Запись.Статус;
		МенеджерЗаписи.Организация 			= Запись.Организация;
		МенеджерЗаписи.ДатаСобытия 			= ТекущаяДатаСеанса();
		МенеджерЗаписи.КонтролирующийОрган 	= Запись.КонтролирующийОрган;
		МенеджерЗаписи.Группа 				= Группа;
		МенеджерЗаписи.Состояние 			= Запись.Состояние;
		МенеджерЗаписи.Порядок 				= ПолучитьПорядокНовогоСобытияДокументооборотаСКО(Запись, Группа);
		МенеджерЗаписи.ЕстьОтвет 			= ЕстьОтвет(Запись);
		МенеджерЗаписи.НеОтправляетсяВКонтролирующийОрган = Запись.НеОтправляетсяВКонтролирующийОрган;
		МенеджерЗаписи.ОтправленоПолучено 	= ПолучитьОтправленоПолученоНовогоСобытияДокументооборотаСКО(Запись);
		МенеджерЗаписи.ЕстьКритическиеОшибкиОтправки = Запись.ЕстьКритическиеОшибкиОтправки;
		МенеджерЗаписи.Просмотрено 			= Запись.Просмотрено;
		МенеджерЗаписи.Скрыт 				= Запись.Скрыт;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьОтвет(Запись)
	
	Если ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
		ИЛИ ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя")
		ИЛИ ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
		Возврат Запись.ЕстьОтвет;
	Иначе
		Возврат Ложь;
	КонецЕсли;       	
	
КонецФункции

Функция ПолучитьОтправленоПолученоНовогоСобытияДокументооборотаСКО(Запись)

	Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Входящие Тогда
		Если ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Объект, "ДатаОтправки");
		ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			ОписьВходящихДокументов = ДокументооборотСКОВызовСервера.ПолучитьОписьВходящихДокументовПоТребованию(Запись.Объект);
			Если ЗначениеЗаполнено(ОписьВходящихДокументов) Тогда
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписьВходящихДокументов, "ДатаОтправки");
			Иначе
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Объект, "ДатаДокумента");
			КонецЕсли;
		КонецЕсли;
	Иначе
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		Если Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСС(Запись.Объект);
			Если ПоследнийЦиклОбмена <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
					Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
				Иначе
					Возврат ПоследнийЦиклОбмена.ДатаОтправки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСРАР(Запись.Объект);
			Если ПоследнийЦиклОбмена <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
					Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
				Иначе
					Возврат ПоследнийЦиклОбмена.ДатаОтправки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВРПН(Запись.Объект);
			Если ПоследнийЦиклОбмена <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
					Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
				Иначе
					Возврат ПоследнийЦиклОбмена.ДатаОтправки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФТС(Запись.Объект);
			Если ПоследнийЦиклОбмена <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
					Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
				Иначе
					Возврат ПоследнийЦиклОбмена.ДатаОтправки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.БанкРоссии") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВБанкРоссии(Запись.Объект);
			Если ПоследнийЦиклОбмена <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
					Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
				Иначе
					Возврат ПоследнийЦиклОбмена.ДатаОтправки;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПоследнийЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Запись.Объект);
			Если ПоследнийЦиклОбмена <> Неопределено Тогда
				Возврат ПоследнийЦиклОбмена.ДатаПоследнегоСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьГруппуНовогоСобытияДокументооборотаСКО(Запись)

	ЗавершенныеСостояния = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Не сдано;Не принято в обработку;Сдано, требует уточнения;Сдано;Не принято;Принято;Доставлено;Сдан частично;Получен комментарий", ";");
		
	НезавершенныеСостояния = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Отправлено оператору;Отправлено в ФНС;Отправлено в ПФР;Отправлено в ФСС;Отправлено в Росстат;Отправлено в ФСРАР;Отправлено в РПН;Отправлено в ФТС;Принято в обработку;Отправлено в Банк России", ";");
	
	Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Входящие Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения;		
	ИначеЕсли (Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки ИЛИ Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ) 
		И (Запись.Статус = "Отказано" ИЛИ Запись.Статус = "Не найдено в реестре" ИЛИ Запись.Статус = "Готово") Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы;		
	ИначеЕсли ЗавершенныеСостояния.Найти(Запись.Статус) <> Неопределено Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки;		
	ИначеЕсли НезавершенныеСостояния.Найти(Запись.Статус) <> Неопределено Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки; 	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПорядокНовогоСобытияДокументооборотаСКО(Запись, Группа)
	
	Порядок = 0;
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
		Порядок = 0;	
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда
		Если Запись.Статус <> "Не отправлено" Тогда
			Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки
				И Запись.Статус = "Отказано" Тогда
				Порядок = 0;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ
				И Запись.Статус = "Не найдено в реестре" Тогда
				Порядок = 1;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки
				И Запись.Статус = "Готово" Тогда
				Порядок = 2;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ
				И Запись.Статус = "Готово" Тогда
				Порядок = 3;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Порядок = 0;
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Порядок = 0;
	КонецЕсли;
	
	Возврат Порядок;
	
КонецФункции

Функция ДатаПоследнегоОбновленияСобытий(ИнициаторСеанса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СеансыСвязиСКонтролирующимиОрганами.Окончание) КАК ДатаСобытия
	|ИЗ
	|	Справочник.СеансыСвязиСКонтролирующимиОрганами КАК СеансыСвязиСКонтролирующимиОрганами
	|ГДЕ
	|	СеансыСвязиСКонтролирующимиОрганами.Успешно";
	
	Если ЗначениеЗаполнено(ИнициаторСеанса) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СеансыСвязиСКонтролирующимиОрганами.ИнициаторСеанса = &ИнициаторСеанса";
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнициаторСеанса", ИнициаторСеанса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат '00010101';
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаСобытия;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьНадписьВремяОбновления(ДатаПоследнегоОбновления) Экспорт

	Если Не ЗначениеЗаполнено(ДатаПоследнегоОбновления) Тогда
		Возврат НСтр("ru = 'Обновлено только что'");
	КонецЕсли;
	
	ВременнаяРазница = ТекущаяУниверсальнаяДата() - ДатаПоследнегоОбновления;
	
	НадписьВремяОбновления = "";
	Если ВременнаяРазница < 0 Тогда
		НадписьВремяОбновления = "";
	ИначеЕсли ВременнаяРазница < 15 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено только что'");
	ИначеЕсли ВременнаяРазница < 30 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено 15 минут назад'");		
	ИначеЕсли ВременнаяРазница < 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено полчаса назад'");		
	ИначеЕсли ВременнаяРазница < 2 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено час назад'");		
	ИначеЕсли ВременнаяРазница < 24 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено несколько часов назад'");		
	ИначеЕсли ВременнаяРазница < 48 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено вчера'");		
	Иначе
		НадписьВремяОбновления = НСтр("ru = 'Обновлено несколько дней назад'");
	КонецЕсли;
	
	Возврат НадписьВремяОбновления;
	
КонецФункции

// Возвращает пустое дерево значений для сохранения списка новых событий 1С-Отчетности.
// 
// Возвращаемое значение:
//	ДеревоЗначений.
//
Функция НовоеДеревоНовыхСобытий() Экспорт

	// Внимание!
	// ---------
	// В форме ДлительноеДействие обработки ДокументооборотСКонтролирующимиОрганами 
	// есть аналогичный по структуре реквизит Новое.
	// При изменениях необходимо менять синхронно.
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ЗаголовокБлока",      ТипСтрока);
	Результат.Колонки.Добавить("Ссылка",              Неопределено);
	Результат.Колонки.Добавить("Организация",         ТипСтрока);
	Результат.Колонки.Добавить("Дата",                ТипСтрока);
	Результат.Колонки.Добавить("Статус",              ТипСтрока);
	Результат.Колонки.Добавить("КонтролирующийОрган", ТипСтрока);
	Результат.Колонки.Добавить("НеПрочитано",         ТипБулево);
	Результат.Колонки.Добавить("ЭтоЗаголовокБлока",   ТипБулево);
	Результат.Колонки.Добавить("ЭтоПодЗаголовок",     ТипБулево);
	Результат.Колонки.Добавить("ЭтоРазделитель",      ТипБулево);
	Результат.Колонки.Добавить("ЭтоОбъектСсылка",     ТипБулево);
	Результат.Колонки.Добавить("Наименование",        ТипСтрока);
	Результат.Колонки.Добавить("ЭтоСтатусСсылка",     ТипБулево);
	Результат.Колонки.Добавить("СостояниеСдачиОтчетности", Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	Результат.Колонки.Добавить("НеОтправляетсяВКонтролирующийОрган", ТипБулево);
	Результат.Колонки.Добавить("ЕстьОтвет",                          ТипБулево);
	Результат.Колонки.Добавить("Группа",                             Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами"));
	Результат.Колонки.Добавить("ЕстьКритическиеОшибкиОтправки",      ТипБулево);
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДеревоНовое(ДеревоНовое, ИнициаторСеанса = Неопределено, ТолькоНепоказанные = Ложь) Экспорт
	
	ДеревоНовое.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЖурналНовыхСобытий.Наименование,
	|	ЖурналНовыхСобытий.Ссылка КАК Объект,
	|	ЖурналНовыхСобытий.Статус,
	|	ЖурналНовыхСобытий.Организация,
	|	ЖурналНовыхСобытий.КонтролирующийОрган,
	|	ВЫБОР
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЖурналНовыхСобытий.Просмотрено
	|	КОНЕЦ КАК Просмотрено,
	|	ЖурналНовыхСобытий.Состояние,
	|	ВЫБОР
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения)
	|			ТОГДА 0
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы)
	|			ТОГДА 1
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки)
	|			ТОГДА 2
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки)
	|			ТОГДА 3
	|	КОНЕЦ КАК ГруппаПорядок,
	|	ЖурналНовыхСобытий.СеансСвязи,
	|	ЖурналНовыхСобытий.ДатаСобытия,
	|	ЖурналНовыхСобытий.Порядок КАК Порядок,
	|	ЖурналНовыхСобытий.ЕстьОтвет,
	|	ЖурналНовыхСобытий.НеОтправляетсяВКонтролирующийОрган,
	|	ЖурналНовыхСобытий.Группа КАК Группа,
	|	ЖурналНовыхСобытий.ОтправленоПолучено КАК ОтправленоПолучено,
	|	ЖурналНовыхСобытий.ЕстьКритическиеОшибкиОтправки
	|ИЗ
	|	РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	|ГДЕ
	|	(&ИспользоватьОтборИнициаторСеанса
	|				И ЖурналНовыхСобытий.СеансСвязи = ЗНАЧЕНИЕ(Справочник.СеансыСвязиСКонтролирующимиОрганами.ПустаяСсылка)
	|				И НЕ ЖурналНовыхСобытий.Просмотрено
	|			ИЛИ НЕ &ИспользоватьОтборИнициаторСеанса
	|				И (НЕ ЖурналНовыхСобытий.Просмотрено
	|					ИЛИ ЖурналНовыхСобытий.ДатаСобытия > &ДатаСобытия))
	|	И НЕ ЖурналНовыхСобытий.Скрыт
	|	И (&ТолькоНепоказанные
	|				И ЖурналНовыхСобытий.ПоказатьПользователю = ИСТИНА
	|			ИЛИ НЕ &ТолькоНепоказанные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналНовыхСобытий.Наименование,
	|	ЖурналНовыхСобытий.Ссылка,
	|	ЖурналНовыхСобытий.Статус,
	|	ЖурналНовыхСобытий.Организация,
	|	ЖурналНовыхСобытий.КонтролирующийОрган,
	|	ЛОЖЬ,
	|	ЖурналНовыхСобытий.Состояние,
	|	0,
	|	ЖурналНовыхСобытий.СеансСвязи,
	|	ЖурналНовыхСобытий.ДатаСобытия,
	|	ЖурналНовыхСобытий.Порядок,
	|	ЖурналНовыхСобытий.ЕстьОтвет,
	|	ЖурналНовыхСобытий.НеОтправляетсяВКонтролирующийОрган,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения),
	|	ЖурналНовыхСобытий.ОтправленоПолучено,
	|	ЖурналНовыхСобытий.ЕстьКритическиеОшибкиОтправки
	|ИЗ
	|	РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	|ГДЕ
	|	(&ИспользоватьОтборИнициаторСеанса
	|				И ЖурналНовыхСобытий.СеансСвязи = ЗНАЧЕНИЕ(Справочник.СеансыСвязиСКонтролирующимиОрганами.ПустаяСсылка)
	|				И НЕ ЖурналНовыхСобытий.Просмотрено
	|			ИЛИ НЕ &ИспользоватьОтборИнициаторСеанса
	|				И (НЕ ЖурналНовыхСобытий.Просмотрено
	|					ИЛИ ЖурналНовыхСобытий.ДатаСобытия > &ДатаСобытия))
	|	И ЖурналНовыхСобытий.КонтролирующийОрган = ""ФТС""
	|	И ЖурналНовыхСобытий.Статус = ""Получен комментарий""
	|	И НЕ ЖурналНовыхСобытий.Скрыт
	|	И (&ТолькоНепоказанные
	|				И ЖурналНовыхСобытий.ПоказатьПользователю = ИСТИНА
	|			ИЛИ НЕ &ТолькоНепоказанные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения),
	|	NULL,
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	1,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы),
	|	NULL,
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	2,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки),
	|	NULL,
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	3,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки),
	|	NULL,
	|	NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаПорядок,
	|	Просмотрено,
	|	ОтправленоПолучено УБЫВ
	|ИТОГИ ПО
	|	Группа";
	Запрос.УстановитьПараметр("ДатаСобытия", ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	Запрос.УстановитьПараметр("ИспользоватьОтборИнициаторСеанса", ЗначениеЗаполнено(ИнициаторСеанса));
	Запрос.УстановитьПараметр("ТолькоНепоказанные", ТолькоНепоказанные);
	
	ВыборкаГруппа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппа.Следующий() Цикл
		ВыборкаДетали = ВыборкаГруппа.Выбрать();
		
		ЗаполнитьСтрокиДерева(ДеревоНовое, ВыборкаДетали, ВыборкаГруппа.Группа, ИнициаторСеанса);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДерева(ДеревоНовое, ВыборкаДетали, Группа, ИнициаторСеанса)
	
	Если ИнициаторСеанса = Перечисления.ИнициаторыСеансовСвязиСКонтролирующимиОрганами.Автообмен
		И Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат;
	КонецЕсли;
	
	МассивНовые = Новый Массив;
	МассивСтарые = Новый Массив;
	
	Пока ВыборкаДетали.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетали.Объект) Тогда
			ЭлементДерева = ЭлементДерева();

			ЭлементДерева.Дата = Отступ(ВыборкаДетали.Просмотрено, Группа) + Формат(ВыборкаДетали.ОтправленоПолучено, "ДФ=dd.MM.yyyy");
			ЭлементДерева.Наименование = ВыборкаДетали.Наименование;
			ЭлементДерева.Ссылка = ВыборкаДетали.Объект;
			ЭлементДерева.КонтролирующийОрган = ВыборкаДетали.КонтролирующийОрган;
			ЭлементДерева.Статус = ВыборкаДетали.Статус;
			ЭлементДерева.Организация = ВыборкаДетали.Организация;
			ЭлементДерева.НеПрочитано = Не ВыборкаДетали.Просмотрено;
			ЭлементДерева.СостояниеСдачиОтчетности = ВыборкаДетали.Состояние;
			ЭлементДерева.ЕстьОтвет = ВыборкаДетали.ЕстьОтвет;
			ЭлементДерева.НеОтправляетсяВКонтролирующийОрган = ВыборкаДетали.НеОтправляетсяВКонтролирующийОрган;
			ЭлементДерева.Группа = Группа;
			ЭлементДерева.ЕстьКритическиеОшибкиОтправки = ВыборкаДетали.ЕстьКритическиеОшибкиОтправки;

			
			Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
				ЭлементДерева.ЭтоСтатусСсылка = (ЭлементДерева.Статус = "Подтвердите прием") ИЛИ (ЭлементДерева.Статус = "Получен комментарий");
			КонецЕсли;
			
			Если ВыборкаДетали.Просмотрено Тогда
				МассивСтарые.Добавить(ЭлементДерева);
			Иначе
				МассивНовые.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	СтрокаБлок = ДеревоНовое.Строки.Добавить();
	СтрокаБлок.ЭтоЗаголовокБлока = Истина;
	СтрокаБлок.ЗаголовокБлока = Строка(Группа);
	СтрокаБлок.Группа = Группа;
	
	Если МассивНовые.Количество() = 0 Тогда
		СтрокаСобытие = ДеревоНовое.Строки.Добавить();
		СтрокаСобытие.Наименование = Отступ() + НадписьНовыхНет(Группа);
	Иначе
		Для Каждого НовоеСобытие Из МассивНовые Цикл
			СтрокаСобытие = ДеревоНовое.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСобытие, НовоеСобытие);
		КонецЦикла;
	КонецЕсли;
	
	Если ИнициаторСеанса <> Перечисления.ИнициаторыСеансовСвязиСКонтролирующимиОрганами.Автообмен
		И Группа <> Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Если МассивСтарые.Количество() > 0 Тогда
			СтрокаБлок = ДеревоНовое.Строки.Добавить();
			СтрокаБлок.ЭтоПодЗаголовок = Истина;
			СтрокаБлок.ЗаголовокБлока = ЗаголовокНедавноПросмотренных(Группа);
			
			Для Каждого СтароеСобытие Из МассивСтарые Цикл
				СтрокаСобытие = СтрокаБлок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСобытие, СтароеСобытие);		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВерхнегоУровня = ДеревоНовое.Строки.Добавить();
	СтрокаВерхнегоУровня.ЭтоРазделитель = Истина;	
	
КонецПроцедуры

Функция Отступ(Просмотрено = Ложь, Группа = Неопределено)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки ИЛИ Не Просмотрено Тогда
		Возврат "     ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция НадписьНовыхНет(Группа)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения
		ИЛИ Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы
		ИЛИ Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Возврат НСтр("ru = 'Новых нет'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат НСтр("ru = 'Незавершенных нет'");
	КонецЕсли;
	
КонецФункции

Функция ЗаголовокНедавноПросмотренных(Группа)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
		Возврат НСтр("ru = 'Недавно полученные сообщения'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда
		Возврат НСтр("ru = 'Недавно обработанные запросы'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Возврат НСтр("ru = 'Недавно завершенные отправки'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ЭлементДерева()
	
	КлючиСтруктуры = "Дата, Наименование, Ссылка, КонтролирующийОрган, Статус, Организация,
					|НеПрочитано, СостояниеСдачиОтчетности, СостояниеСдачиОтчетности, ЕстьОтвет, 
					|НеОтправляетсяВКонтролирующийОрган, Группа, ЭтоСтатусСсылка,
					|ЕстьКритическиеОшибкиОтправки";
						
	ПустойЭлемент = Новый Структура(КлючиСтруктуры);
	
	Возврат ПустойЭлемент;
				
КонецФункции

Функция ЕстьИзмененияВДеревеНовых(НовоеДеревоНовых) Экспорт

	ЕстьИзмененияВНовыхСообщениях = Ложь;
	
	// Остались ли после удаления строки, которые есть только в новом дереве?
	Для Каждого Строка1Уровня Из НовоеДеревоНовых.Строки Цикл
		
		Если ЗначениеЗаполнено(Строка1Уровня.Ссылка) Тогда
			ЕстьИзмененияВНовыхСообщениях = Истина;
			Прервать;
		КонецЕсли;
		
		Для Каждого Строка2Уровня Из Строка1Уровня.Строки Цикл
			
			Если ЗначениеЗаполнено(Строка2Уровня.Ссылка) Тогда
				ЕстьИзмененияВНовыхСообщениях = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	Возврат ЕстьИзмененияВНовыхСообщениях;

КонецФункции

#КонецОбласти

// Обновление ИБ.
// Выполняет перенос данных из реквизита УдалитьВладелецЭЦППол в ВладелецЭЦППол в заявлении абонента.
//
Процедура СконвертироватьРеквизитыЗаявленияПо1СОтчетности() Экспорт
	
	Если Метаданные.Перечисления.Найти("УдалитьПолФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка,
		|	ЗаявлениеАбонентаСпецоператораСвязи.УдалитьВладелецЭЦППол
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.УдалитьВладелецЭЦППол <> &ПустаяСсылкаУдалитьПолФизическихЛиц
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ВладелецЭЦППол = &ПолФизическогоЛица";
		
	ПолФизическогоЛица = Перечисления["ПолФизическогоЛица"].ПустаяСсылка();
	Запрос.УстановитьПараметр("ПолФизическогоЛица", ПолФизическогоЛица);
	Запрос.УстановитьПараметр("ПустаяСсылкаУдалитьПолФизическихЛиц", Перечисления["УдалитьПолФизическихЛиц"].ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаявлениеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если ВыборкаДетальныеЗаписи.УдалитьВладелецЭЦППол = Перечисления["УдалитьПолФизическихЛиц"].Женский Тогда
			
			ЗаявлениеОбъект.ВладелецЭЦППол        = Перечисления.ПолФизическогоЛица.Женский;
			ЗаявлениеОбъект.УдалитьВладелецЭЦППол = Перечисления["УдалитьПолФизическихЛиц"].ПустаяСсылка();
			
		ИначеЕсли ВыборкаДетальныеЗаписи.УдалитьВладелецЭЦППол = Перечисления["УдалитьПолФизическихЛиц"].Мужской Тогда
			
			ЗаявлениеОбъект.ВладелецЭЦППол        = Перечисления.ПолФизическогоЛица.Мужской;
			ЗаявлениеОбъект.УдалитьВладелецЭЦППол = Перечисления["УдалитьПолФизическихЛиц"].ПустаяСсылка();
			
		КонецЕсли;
		ЗаявлениеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#Область НулеваяОтчетностьИ1СБизнесСтарт

Функция СсылкаПерейдитеНаПлатныйТариф() Экспорт
	
	Если ЭтоРежимБесплатнойНулевойОтчетности() Тогда
		
		ИмяКонстанты = "ОписаниеТарифовURL";
		
		Если Метаданные.Константы.Найти(ИмяКонстанты) = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат Константы[ИмяКонстанты].Получить();
		КонецЕсли;

	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ЭтоРежимБесплатнойНулевойОтчетности() Экспорт
	
	Если НЕ ЭтоРежимОграниченнойФункциональности() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		МодульБП = ОбщегоНазначения.ОбщийМодуль("ТарификацияБПВызовСервераПовтИсп");
		РазрешенУчетРегулярнойДеятельности = МодульБП.РазрешенУчетРегулярнойДеятельности();
		
		Возврат НЕ РазрешенУчетРегулярнойДеятельности;
	
	Исключение
		// Никакой обработки не требуется.
		// Попадание в исключение означает, что такого модуля БП3 в данном потребителе не существует.
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции

Функция ЭтоРежимОграниченнойФункциональности() Экспорт
	
	ЕстьБазоваяФункциональностьВМоделиСервиса = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса");
	
	Если НЕ ЕстьБазоваяФункциональностьВМоделиСервиса Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Это1СБизнесСтарт = Это1СБизнесСтарт();
	
	Если Это1СБизнесСтарт <> Истина Тогда // может быть Неопределено.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция Это1СБизнесСтарт() Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Это1СБизнесСтарт = Ложь;
	Попытка
		МодульБП = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияБП");
		Это1СБизнесСтарт = МодульБП.ОбслуживающаяОрганизацияИспользуетУпрощенныйРежимПодключенияК1СОтчетности();
	Исключение
		// Не требуется специальная обработка. 
		// Попадание в исключение означает, что такого модуля БП3 в данном потребителе не существует.
		Попытка
			Если ВРЕГ(Метаданные.Имя) = ВРЕГ("БухгалтерияПредприятияБазовая1") Тогда
				Если Метаданные.Константы.Найти("ПредпринимательВСервисе") <> Неопределено Тогда
					Это1СБизнесСтарт = Константы["ПредпринимательВСервисе"].Получить();
				КонецЕсли;
			КонецЕсли;
		Исключение
			// Попадание в исключение означает, что таких признаков в данном потребителе не существует.
		КонецПопытки;
	КонецПопытки; 
	
	Возврат Это1СБизнесСтарт;
	
КонецФункции

Функция КодРегистрацииПродуктаВМоделиСервиса(АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Выполнено", 		Ложь);
	ДополнительныеПараметры.Вставить("Результат", 		"");
	ДополнительныеПараметры.Вставить("ОписаниеОшибки", 	"");
	
	Попытка
	
		Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
			КодОбласти = 0;
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			КодОбласти = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
		КонецЕсли;
	
		Прокси = ПолучитьПроксиМенеджераСервиса();
		
		Результат_КодАбонента 	= "";
		Результат_АдресПартнера = "";
		Результат = Прокси.GetRegistrationCode(КодОбласти, Результат_КодАбонента, Результат_АдресПартнера);
		
		ДополнительныеПараметры.Выполнено = Истина;
		ДополнительныеПараметры.Результат = Результат_КодАбонента;
		
		ПоместитьВоВременноеХранилище(ДополнительныеПараметры, АдресХранилища);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами.Ошибка обращения к методу GetRegistrationCode веб-сервису '", 
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			Комментарий);
			
		ДополнительныеПараметры.ОписаниеОшибки = Комментарий;
			
		ПоместитьВоВременноеХранилище(ДополнительныеПараметры, АдресХранилища);
		
	КонецПопытки;
	
КонецФункции

Функция ОтослатьФайлВМенеджерСервиса(Данные, ИмяФайла)
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	Возврат МодульРаботаВМоделиСервиса.ПоместитьФайлВХранилищеМенеджераСервиса(Данные, ИмяФайла);
		
КонецФункции

Процедура ОтослатьПисьмоПартнеру(Заявление, Тариф) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		СведенияДляПисьма = Новый Структура;
		СведенияДляПисьма.Вставить("ИмяАбонента", 	Заявление.КраткоеНаименование);
		СведенияДляПисьма.Вставить("ИНН", 			Заявление.ИНН);
		СведенияДляПисьма.Вставить("КПП", 			Заявление.КПП);
		СведенияДляПисьма.Вставить("Тариф", 		Тариф);

		Телефон = "";
		Если ЗначениеЗаполнено(Заявление.ТелефонМобильныйДляАвторизации) Тогда
			Телефон = Заявление.ТелефонМобильныйДляАвторизации;
		ИначеЕсли ЗначениеЗаполнено(Заявление.ТелефонМобильный) Тогда
			Телефон = Заявление.ТелефонМобильный;
		ИначеЕсли ЗначениеЗаполнено(Заявление.ТелефонОсновной) Тогда
			Телефон = Заявление.ТелефонОсновной;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Телефон) Тогда
			СведенияДляПисьма.Вставить("ТелефонАбонента", Телефон);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявлениеАбонентаСпецоператораСвязиЭлектронныеДокументы.Файл КАК Файл
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи.ЭлектронныеДокументы КАК ЗаявлениеАбонентаСпецоператораСвязиЭлектронныеДокументы
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязиЭлектронныеДокументы.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Заявление);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ИдентификаторыФайлов = Новый Массив;
		НомераФайлов = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			ДополнительныеПараметры.ИдентификаторФормы 				= Неопределено;
			ДополнительныеПараметры.ПолучатьСсылкуНаДвоичныеДанные 	= Истина;
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.Файл, ДополнительныеПараметры);
			ИдентификаторФайла = ОтослатьФайлВМенеджерСервиса(ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла), ДанныеФайла.ИмяФайла);
			ИдентификаторыФайлов.Добавить(ИдентификаторФайла);
		КонецЦикла;
		
		Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
			КодОбласти = 0;
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			КодОбласти = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
		КонецЕсли;
		Прокси 		= ПолучитьПроксиМенеджераСервиса();
		КлючОбласти = Константы["КлючОбластиДанных"].Получить();
		
		Результат = Прокси.SendLetterToPartner(
			КодОбласти, 
			КлючОбласти,
			СериализаторXDTO.ЗаписатьXDTO(СведенияДляПисьма),
			СериализаторXDTO.ЗаписатьXDTO(ИдентификаторыФайлов)
		);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами.Ошибка обращения к методу SendLetterToPartner веб-сервису'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			Комментарий);
			
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьПроксиМенеджераСервиса()
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	
	Адрес 	= МодульРаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса() + "/ws/PrivateAPI?wsdl";
	Логин 	= МодульРаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
	Пароль 	= МодульРаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
	
	Опр = Новый WSОпределения(Адрес, Логин, Пароль,, 30);
	Прокси = Новый WSПрокси(Опр, "http://www.1c.ru/1cFresh/PrivateAPI/1.0", "PrivateAPI", "PrivateAPISoap",, 30);
	Прокси.Пользователь = Логин;
	Прокси.Пароль = Пароль;
	Возврат Прокси;
	
КонецФункции

Процедура НачатьОпределениеТекстаЗаявления(АдресХранилища, Заявление, АлгоритмКонтейнераКлючей) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.НачатьОпределениеТекстаЗаявления(АдресХранилища, Заявление, АлгоритмКонтейнераКлючей);
	
КонецПроцедуры

Процедура НачатьОтправкуОблачногоЗаявленияВБазуЗаявок(АдресХранилища, Заявление, АлгоритмКонтейнераКлючей) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.НачатьОтправкуОблачногоЗаявленияВБазуЗаявок(АдресХранилища, Заявление, АлгоритмКонтейнераКлючей);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСЭДОФСС

// Обработчик обновления БРО 1.2.1.36
Процедура ВключитьОбменСФССПриНеобходимости() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организации = КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
	Если Организации.Количество() > 0
		И ЭлектронныйДокументооборотСФСС.ТребуетсяЗапускРегламентногоЗаданияОбменаСФСС(Организации) Тогда
			ЭлектронныйДокументооборотСФСС.ВключитьОбменСФСС();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления БРО 1.2.1.53
Процедура СброситьПризнакПодпискиСтрахователяСЭДОФСС() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организации = КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбменаФСС();
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого Организация Из Организации Цикл
		КонтекстЭДОСервер.УстановитьПризнакСтраховательПодписанНаУведомленияПоЭЛН(Организация, Ложь);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЛисткамиНетрудоспособностиСФСС

// Возвращает параметры подключения к веб-сервису обмена с ФСС по электронным листкам нетрудоспособности или создает WSПрокси.
//
// Параметры:
//  Организация         - СправочникСсылка.Организации - организация.
//  Параметры           - Структура - может быть получена вызовом ПараметрыОбменаФССЭЛН():
//    * СоздаватьWSПрокси               - Булево - создавать объект доступа к веб-сервису.
//    * ТаймаутСоединения               - Число  - по умолчанию 30 сек.
//    * ТаймаутВызовов                  - Число  - по умолчанию 600 сек.
//    * ВозвращатьОписаниеОшибки        - Булево - по умолчанию Ложь, то есть при ошибках соединения возникает исключение.
//    * ВремяХраненияОписанияВебСервиса - Число  - по умолчанию 2 * 60 * 60 сек, при значении 0 описание веб-сервиса не кэшируется,
//                                                 при ошибке в случае ВозвращатьОписаниеОшибки = Истина возвращается более
//                                                 подробная информация, не только описание ошибки, но код и тип.
//
// Возвращаемое значение:
//  Структура:
//    * Определение                  - Строка       - ссылка на местоположение WSDL.
//    * URIПространстваИменСервиса   - Строка       - уникальный идентификатор пространства имен сервиса.
//    * ИмяСервиса                   - Строка       - имя веб-сервиса.
//    * ИмяТочкиПодключения          - Строка       - имя точки подключения веб-сервиса.
//    * WSПрокси                     - WSПрокси     - объект доступа к веб-сервису,
//                                     Неопределено - если Параметры.СоздаватьWSПрокси равно Ложь или при ошибке.
//    * ТипОшибки                    - Строка       - "ОшибкаСоединения" - не удалось соединиться с сервером,
//                                                  - "ОшибкаНаСервере"  - ошибка HTTP,
//                                                  - "НедостаточноПрав" - недостаточно прав для обмена;
//                                                    заполняется при ошибке подключения,
//                                                    если Параметры.ВозвращатьОписаниеОшибки = Истина.
//    * КодСостояния                 - Число        - код ошибки HTTP, например, 404 - страница не найдена,
//                                                    заполняется при ошибке подключения,
//                                                    если Параметры.ВозвращатьОписаниеОшибки = Истина.
//    * СообщениеОбОшибке            - Строка       - заполняется при ошибке подключения,
//                                                    если Параметры.ВозвращатьОписаниеОшибки = Истина.
//  Неопределено - недостаточно прав, при Параметры.ВозвращатьОписаниеОшибки = Ложь.
//
Функция НастройкиОбменаФССЭЛН(Организация, Параметры = Неопределено) Экспорт
	
	ПараметрыВызова = ПараметрыОбменаФССЭЛН();
	Если Параметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВызова, Параметры);
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Если ПараметрыВызова.ВозвращатьОписаниеОшибки Тогда
			Результат = Новый Структура;
			Результат.Вставить("Определение", 					"");
			Результат.Вставить("URIПространстваИменСервиса", 	"");
			Результат.Вставить("ИмяСервиса", 					"");
			Результат.Вставить("ИмяТочкиПодключения", 			"");
			Результат.Вставить("WSПрокси", 						Неопределено);
			Результат.Вставить("ТипОшибки", 					"НедостаточноПрав");
			Результат.Вставить("КодСостояния", 					0);
			Результат.Вставить("СообщениеОбОшибке", 			НСтр("ru = 'Недостаточно прав для обмена с контролирующими органами.'"));
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	ИспользоватьТестовыйСервер = КонтекстЭДОСервер.ИспользоватьТестовыйСерверФССЭЛН(Организация);
	
	Возврат КонтекстЭДОСервер.СерверПриемаОтчетностиФССЭЛН(ИспользоватьТестовыйСервер, ПараметрыВызова);
	
КонецФункции

// Возвращает структуру с параметрами для НастройкиОбменаФССЭЛН() и значениями по умолчанию.
//
// Возвращаемое значение:
//  Структура:
//    * СоздаватьWSПрокси               - Булево - создавать объект доступа к веб-сервису.
//    * ТаймаутСоединения               - Число  - по умолчанию 30 сек.
//    * ТаймаутВызовов                  - Число  - по умолчанию 600 сек.
//    * ВозвращатьОписаниеОшибки        - Булево - по умолчанию Ложь, то есть при ошибках соединения возникает исключение.
//    * ВремяХраненияОписанияВебСервиса - Число  - по умолчанию 2 * 60 * 60 сек, при значении 0 описание веб-сервиса не кэшируется,
//                                                 при ошибке в случае ВозвращатьОписаниеОшибки = Истина возвращается более
//                                                 подробная информация, не только описание ошибки, но код и тип.
//
Функция ПараметрыОбменаФССЭЛН() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СоздаватьWSПрокси", 				Истина);
	Результат.Вставить("ТаймаутСоединения", 				30);
	Результат.Вставить("ТаймаутВызовов", 					600);
	Результат.Вставить("ВозвращатьОписаниеОшибки", 			Ложь);
	Результат.Вставить("ВремяХраненияОписанияВебСервиса", 	2 * 60 * 60);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		ИменаСправочников.Вставить("ТранспортноеСообщениеКонтейнерыПрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область ПереходКоробкаОблакоИОбратно

Процедура ПередВыгрузкойДанных(Контейнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПередВыгрузкойДанных(Контейнер);
	
КонецПроцедуры

Процедура ПослеВыгрузкиДанных(Контейнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПослеВыгрузкиДанных(Контейнер);
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПослеЗагрузкиДанных(Контейнер);
	
	ЗапуститьПереносТранспортныхСообщенийВПрисоединенныеФайлы();
	
КонецПроцедуры

#КонецОбласти

#Область ПереносТранспортныхСообщенийВПрисоединенныеФайлы

//Обработчик обновления БРО 1.1.11.22
Процедура ЗапуститьПереносТранспортныхСообщенийВПрисоединенныеФайлы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеЗаданияПереноса = Метаданные.РегламентныеЗадания.ПереносСообщений1СОтчетностиВПрисоединенныеФайлы;
	
	Если РегламентныеЗаданияСервер.Задание(МетаданныеЗаданияПереноса) = Неопределено Тогда
		ЗапуститьПеренос = Ложь;
		
		ПериодПовтора = Константы.ПереносСообщений1СОтчетностиВПрисоединенныеФайлыПериодПовтора.Получить();
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораВТечениеДня = ?(ЗначениеЗаполнено(ПериодПовтора), ПериодПовтора, 3600);
		Расписание.ПериодПовтораДней 		= 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", 								МетаданныеЗаданияПереноса);
		ПараметрыЗадания.Вставить("Ключ", 										МетаданныеЗаданияПереноса.Ключ);
		ПараметрыЗадания.Вставить("Расписание", 								Расписание);
		ПараметрыЗадания.Вставить("Использование", 								ЗапуститьПеренос);
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 		МетаданныеЗаданияПереноса.ИнтервалПовтораПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 	МетаданныеЗаданияПереноса.КоличествоПовторовПриАварийномЗавершении);
		ПараметрыЗадания.Вставить("Наименование", 								МетаданныеЗаданияПереноса.Наименование);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСФСГС

Функция ПреобразоватьКодСтатистики2400(Знач Короткий, Знач ИНН, Знач КПП, Знач Адрес, Знач ЗаменаКодов)
	
	Короткий = СокрЛП(Короткий);
	
	Основные = Новый Соответствие;	
	ИсходныеКоды = Новый Массив;
	ИсходныеКоды.Добавить("17-00"); // Республика Тыва, ИНН 1701, 1702, 1703, 1704
	ИсходныеКоды.Добавить("19-00"); // Хакасия, ИНН 1901, 1902, 1903
	ИсходныеКоды.Добавить("24-00"); // Красноярский край ИНН 24*
	ИсходныеКоды.Добавить("24-24-00"); // Преобразованный код Красноярский край ИНН 24*
	
	Для Каждого КодИсходный Из ИсходныеКоды Цикл 
		КодЗамены = ЗаменаКодов.Получить(КодИсходный);
		Если КодЗамены = Неопределено Тогда 
			Основные.Вставить(КодИсходный, КодИсходный); 
		Иначе 
			Основные.Вставить(КодИсходный, КодЗамены); 
		КонецЕсли;
	КонецЦикла;
	
	// Ожидаются только коды 17-00, 19-00, 24-00, 24-24-00 для повторной обработки	
	НовыйКодСтатистики = Основные.Получить(Короткий);
	Если НовыйКодСтатистики = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВариантыПоиска = Новый Массив;
	
	КороткийИНН = СтрШаблон("%1-00", Лев(СокрЛ(ИНН), 2));
	КороткийКПП = СтрШаблон("%1-00", Лев(СокрЛ(КПП), 2));
	
	Если СтрНайти(НРег(Адрес), НРег("Хакасия Респ,")) > 0 Тогда 
		КороткийРегион = СтрШаблон("%1-00", "19");
	ИначеЕсли СтрНайти(НРег(Адрес), НРег("Красноярский край,")) > 0 Тогда 
		КороткийРегион = СтрШаблон("%1-00", "24");
	ИначеЕсли СтрНайти(НРег(Адрес), НРег("Тыва респ,")) > 0 Тогда 
		КороткийРегион = СтрШаблон("%1-00", "17");
	Иначе
		КороткийРегион = "00-00";
	КонецЕсли;
		
	Если (Короткий = "24-00") или (Короткий = "24-24-00") Тогда
		ВариантыПоиска.Добавить(КороткийРегион);
		ВариантыПоиска.Добавить(КороткийКПП);
		ВариантыПоиска.Добавить(КороткийИНН);
		ВариантыПоиска.Добавить(Короткий);
	Иначе
		ВариантыПоиска.Добавить(Короткий);
	КонецЕсли;
	
	Для Каждого Вариант Из ВариантыПоиска Цикл 
		НовыйКодСтатистики = Основные.Получить(Вариант);		
		Если НовыйКодСтатистики <> Неопределено Тогда 
			Возврат НовыйКодСтатистики;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЛюбоеСвойство(Стр, Ключ1 = Неопределено, Ключ2 = Неопределено, Ключ3 = Неопределено, ЗначениеПоУмолчанию = "")
	Если ТипЗнч(Стр) <> Тип("Структура") Тогда 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;	
	ЗначениеПоКлючу = Неопределено;
	Если Ключ1 <> Неопределено Тогда 
		Если Стр.Свойство(Ключ1, ЗначениеПоКлючу) Тогда 
			Возврат ЗначениеПоКлючу;
		КонецЕсли;
	КонецЕсли;
	Если Ключ2 <> Неопределено Тогда 
		Если Стр.Свойство(Ключ2, ЗначениеПоКлючу) Тогда 
			Возврат ЗначениеПоКлючу;
		КонецЕсли;
	КонецЕсли;
	Если Ключ3 <> Неопределено Тогда 
		Если Стр.Свойство(Ключ3, ЗначениеПоКлючу) Тогда 
			Возврат ЗначениеПоКлючу;
		КонецЕсли;
	КонецЕсли;	
	Возврат ЗначениеПоУмолчанию;	
КонецФункции
	
//Обработчик обновления БРО 1.1.12.26, 1.1.12.30
Процедура ЗаменитьВОрганизацияхИПодразделенияхКодОрганаФСГС(Знач ОпрашиватьСервис = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаменяемыеКодыОргановФСГС = ИнтерфейсыВзаимодействияБРО.СоответствиеЗаменяемыхКодовОргановФСГС(ОпрашиватьСервис);
	// Заменим коды органов ФСГС в справочнике организаций
	
	// Загрузим массив обработанных кодов
	// 	если сервис вернул тот же набор - выходим
	//	если появились новые коды - обрабатываем и сохраняем массив обработанных
	КлючОбъекта = "regservice.keydisk.ru/GetCemposRecipientList";
	УспешноЗамененныеКоды = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "УспешноЗамененныеКоды");
	Если УспешноЗамененныеКоды <> Неопределено И ТипЗнч(УспешноЗамененныеКоды) = Тип("Массив") Тогда 
		НеобработанныеКодыОргановФСГС = Новый Соответствие;
		Для Каждого Пара Из ЗаменяемыеКодыОргановФСГС Цикл 
			Если УспешноЗамененныеКоды.Найти(Пара.Ключ) = Неопределено Тогда 
				НеобработанныеКодыОргановФСГС.Вставить(Пара.Ключ, Пара.Значение);
			КонецЕсли;
		КонецЦикла;
		Если НеобработанныеКодыОргановФСГС.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		ЗаменяемыеКодыОргановФСГС = НеобработанныеКодыОргановФСГС;
	Иначе
		УспешноЗамененныеКоды = Новый Массив;
	КонецЕсли;
	
	// Для корректной работы алгоритм замены дополним связанные с 24-00 регионы
	Если ЗаменяемыеКодыОргановФСГС.Получить("24-24-00") <> Неопределено 
		Или ЗаменяемыеКодыОргановФСГС.Получить("24-00") <> Неопределено Тогда
		
		Если ТекущаяДатаСеанса() > '2019-01-20' Тогда
			ЗаменяемыеКодыОргановФСГС.Вставить("17-00", "17-17-00");
			ЗаменяемыеКодыОргановФСГС.Вставить("19-00", "19-19-00");
			ЗаменяемыеКодыОргановФСГС.Вставить("24-00", "24-24-00");
			ЗаменяемыеКодыОргановФСГС.Вставить("24-24-00", "24-24-00");
		КонецЕсли;
	
	КонецЕсли;
	
	ОшибокОбработки = 0;
		
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления";
		Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для каждого ОрганизацияСсылка Из Организации Цикл
			КодОрганаФСГС = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				ОрганизацияСсылка,, "КодОрганаФСГС").КодОрганаФСГС;
			
			Если ЗначениеЗаполнено(КодОрганаФСГС) Тогда					
				
				КодОрганаФСГС = СокрЛП(КодОрганаФСГС);					
				Если (КодОрганаФСГС = "24-00") Или (КодОрганаФСГС = "24-24-00") Тогда 
					Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
						ОрганизацияСсылка,, "АдрЮР, ИННЮЛ, КППЮЛ");
					
					НовыйКодОрганаФСГС = ПреобразоватьКодСтатистики2400(
						КодОрганаФСГС, 
						ЛюбоеСвойство(Сведения, "ИННЮЛ",  "ИНН"), 
						ЛюбоеСвойство(Сведения, "КППЮЛ", "КПП"), 
						Сведения.АдрЮР,
						ЗаменяемыеКодыОргановФСГС);
				Иначе
					НовыйКодОрганаФСГС = ЗаменяемыеКодыОргановФСГС[КодОрганаФСГС];
				КонецЕсли;					
				
				Если ЗначениеЗаполнено(НовыйКодОрганаФСГС) Тогда
					ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗадатьКодОрганаФСГСВОрганизации(
						ОрганизацияСсылка, НовыйКодОрганаФСГС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОшибокОбработки = ОшибокОбработки + 1;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'БРО. Замена кодов органов Росстата'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	// Заменим коды органов ФСГС в справочнике подразделений
	
	ИспользуетсяМеханизмНесколькихНаправлений = Ложь;
	Попытка
		СпрПодразделенияОрганизаций = РегламентированнаяОтчетностьПереопределяемый.ИмяСправочникаОбособленныхПодразделений();
		Если ЗначениеЗаполнено(СпрПодразделенияОрганизаций) Тогда
			РегламентированнаяОтчетностьПереопределяемый.ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям(ИспользуетсяМеханизмНесколькихНаправлений);
			
			Если ИспользуетсяМеханизмНесколькихНаправлений Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник." + СпрПодразделенияОрганизаций + " КАК ПодразделенияОрганизаций
					|ГДЕ
					|	НЕ ПодразделенияОрганизаций.ПометкаУдаления";
				ПодразделенияОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
				Для каждого ПодразделениеСсылка Из ПодразделенияОрганизаций Цикл
					КодОрганаФСГС = "";
					РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодОрганаФСГСПодразделения(ПодразделениеСсылка, КодОрганаФСГС);
					
					Если ЗначениеЗаполнено(КодОрганаФСГС) Тогда
						
						КодОрганаФСГС = СокрЛП(КодОрганаФСГС);					
						Если (КодОрганаФСГС = "24-00") Или (КодОрганаФСГС = "24-24-00") Тогда 
							
							Подразделение = Метаданные.Справочники.Найти(СпрПодразделенияОрганизаций);
							ЕстьКПП = Подразделение.Реквизиты.Найти("КПП") <> Неопределено;
							
							ЕстьКППвРегистрации = Ложь;
							Если Подразделение.Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено Тогда 
								РегВНалоговой = Метаданные.Справочники.Найти("РегистрацииВНалоговомОргане");
								Если РегВНалоговой <> Неопределено Тогда 
									ЕстьКППвРегистрации = РегВНалоговой.Реквизиты.Найти("КПП") <> Неопределено;
								КонецЕсли;
							КонецЕсли;
							
							Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
								ПодразделениеСсылка.Владелец,, "АдрЮР, ИННЮЛ, КППЮЛ");

							КППЮЛ = "";
							Если ЕстьКПП Тогда 
								КППЮЛ = ПодразделениеСсылка.КПП;
							ИначеЕсли ЕстьКППвРегистрации Тогда 
								КППЮЛ = ПодразделениеСсылка.РегистрацияВНалоговомОргане.КПП;
								Сведения.Вставить("КодНО", ПодразделениеСсылка.РегистрацияВНалоговомОргане.Код);
							КонецЕсли;
						
							НовыйКодОрганаФСГС = ПреобразоватьКодСтатистики2400(
								КодОрганаФСГС, 
								ЛюбоеСвойство(Сведения, "КодНО", "ИННЮЛ",  "ИНН"), 
								КППЮЛ, 
								"",
								ЗаменяемыеКодыОргановФСГС);
						Иначе						
							НовыйКодОрганаФСГС = ЗаменяемыеКодыОргановФСГС[КодОрганаФСГС];
						КонецЕсли;
					
						Если ЗначениеЗаполнено(НовыйКодОрганаФСГС) Тогда
							ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗадатьКодОрганаФСГСВПодразделении(
								ПодразделениеСсылка, НовыйКодОрганаФСГС);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОшибокОбработки = ОшибокОбработки + 1;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'БРО. Замена кодов органов Росстата'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Если ОшибокОбработки = 0 Тогда 
		Для Каждого Пара Из ЗаменяемыеКодыОргановФСГС Цикл 
			УспешноЗамененныеКоды.Добавить(Пара.Ключ);
		КонецЦикла;	
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "УспешноЗамененныеКоды", УспешноЗамененныеКоды);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФоноваяЗаменаВОрганизацияхИПодразделенияхКодОрганаФСГС(Знач ВсеПараметры, Знач Адрес = Неопределено) Экспорт
	
	ЗаменитьВОрганизацияхИПодразделенияхКодОрганаФСГС(ВсеПараметры[0]);
	
КонецПроцедуры

#КонецОбласти

Процедура ПолучитьКонтактыПФР(АдресХранилища, КодРегиона, КодПФР) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПолучитьКонтактыПФР(АдресХранилища, КодРегиона, КодПФР);
	
КонецПроцедуры

Процедура ОтправитьОбратнуюСвязьСервер(СпецоператорСвязи, АдресПакета) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ОтправитьОбратнуюСвязьСервер(СпецоператорСвязи, АдресПакета);
	
КонецПроцедуры

// Возвращает двоичные данные архива с оригиналом отчета, квитанцией о приеме
// и электронными подписями ФНС, для отправки финансовой очтетности в банки.
//
// Параметры:
//  Отчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный в базе
//          регламентированный отчет, принятый в ФНС.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные архива или неопределено, если невозможно сформировать архив с подписями.
//
Функция ДвДанныеПакетаДляПредоставленияПоМестуТребования(Отчет) Экспорт

	ПоследнийЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Отчет);
	
	Если ПоследнийЦиклОбмена = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось найти последнюю отправку отчета'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВсегоВАрхиве = 0;

	МассивИзОдного  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоследнийЦиклОбмена);
	Пакеты = КонтекстЭДОСервер.ПолучитьВыгружаемыеПакетыПоДокументооборотамСдачиОтчетностиВФНС(МассивИзОдного, Новый УникальныйИдентификатор);
	
	Если Пакеты.Количество() = 0 Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось выгрузить файлы пакета'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ЦО Из Пакеты Цикл
		РезультатЦО = ЦО.Значение;
		
		Если ТипЗнч(РезультатЦО) = Тип("Строка") Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(РезультатЦО);
			Возврат Неопределено;
		КонецЕсли;
			
		ВсегоВАрхиве = ВсегоВАрхиве + РезультатЦО.ВАрхиве;
	КонецЦикла;
	
	Если ВсегоВАрхиве > 0 Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку("Часть файлов перемещена в архив. Не могу продолжить выгрузку!");
		Возврат Неопределено;
	КонецЕсли;
	
	АдресДвДанных = Пакеты.Получить(ПоследнийЦиклОбмена).Адрес;
	
	Возврат ПолучитьИзВременногоХранилища(АдресДвДанных);

КонецФункции

Процедура ЗавершитьНастройкуЗаявлений() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ЗавершитьНастройкуЗаявлений(); 
	
КонецПроцедуры

Процедура ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы) Экспорт
	
	Идентификаторы.Добавить("VPNKeyTLS");
	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СравнитьТабличныеДокументыЗаявлений(Параметры) Экспорт
	Справочники.ЗаявлениеОНазначенииПенсии.СравнитьТабличныеДокументыЗаявлений(Параметры);
КонецПроцедуры

Функция ПолучитьТипПервичногоСообщенияПоЦиклуОбмена(ЦиклОбмена) Экспорт
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ДекларацияНП;
		КонецЕсли;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Заявление Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП;	
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Документ Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ДокументНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОС Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ОбращениеНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Представление Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ЗапросНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаФСГС Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаШаблоновФСГС Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаШаблоновФСГС;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаПФР Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
	Иначе
		Возврат Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция АктуальноеПодтверждениеПолученияОтчетностиФСГСЯвляетсяОтрицательным(ЦиклОбмена)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	ТранспортноеСообщение.Ссылка,
						  |	ТранспортноеСообщение.Дата КАК Дата,
						  |	ТранспортноеСообщение.ДатаТранспорта,
						  |	ТранспортноеСообщение.ПротоколСОшибкой
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
						  |	И ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |	И ТранспортноеСообщение.Тип = &Тип
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	Дата УБЫВ");
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПротоколСОшибкой;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция АктуальноеПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(ЦиклОбмена)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	ТранспортноеСообщение.Ссылка,
						  |	ТранспортноеСообщение.Дата КАК Дата,
						  |	ТранспортноеСообщение.ДатаТранспорта,
						  |	ТранспортноеСообщение.ПротоколСОшибкой
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
						  |	И ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |	И ТранспортноеСообщение.Тип = &Тип
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	Дата УБЫВ");
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПротоколСОшибкой;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						  |	ТранспортноеСообщение.Ссылка,
						  |	ТранспортноеСообщение.Дата КАК Дата,
						  |	ТранспортноеСообщение.ДатаТранспорта,
						  |	ТранспортноеСообщение.ПротоколСОшибкой
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
						  |	И ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |	И ТранспортноеСообщение.Тип В (&Тип)
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	Дата УБЫВ");
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	ТипыПротоколов = Новый Массив;
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
	Запрос.УстановитьПараметр("Тип", ТипыПротоколов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПротоколСОшибкой;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПризнакПоказатьПользователю(Приемник, Источник)

 	// Показываем пользователю, если изменился статус или это входящее письмо или требование.
	ЭтоПолученноеПисьмо 	= ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") 
		И Источник.Объект.Статус = Перечисления.СтатусыПисем.Полученное;
	ЭтоВходящееТребование 	= ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов");
	ИзменилсяСтатус 		= Приемник.Статус <> Источник.Статус И Приемник.Статус <> "" И Источник.Статус <> "";
	ЭтоНоваяЗапись 			= НЕ Приемник.Выбран();
	
	Если ИзменилсяСтатус И НЕ (ЭтоПолученноеПисьмо ИЛИ ЭтоВходящееТребование)
		ИЛИ ЭтоНоваяЗапись И (ЭтоПолученноеПисьмо ИЛИ ЭтоВходящееТребование) Тогда
		
		Приемник.ПоказатьПользователю = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтметитьДеревоПросмотренным(Новое) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	Иначе
		КонтекстЭДОСервер.ОтметитьДеревоПросмотренным(Новое);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИдентификаторАдресаФИАСФоновоеЗадание(Параметры) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПолучитьИдентификаторАдресаФИАСФоновоеЗадание(Параметры);
	
КонецПроцедуры

Функция ПолучитьФлагиИнтеграцииПоУмолчанию() Экспорт
	
	ФлагиУчета = Новый Структура();
	ФлагиУчета.Вставить("ИнтеграцияСБанком", Ложь);
	ФлагиУчета.Вставить("УчетИмпортныхТоваров", Ложь);
	ФлагиУчета.Вставить("УчетТаможенныхДекларацийЭкспорт", Ложь);
	ФлагиУчета.Вставить("УчетРозничнойПродажиАлкогольнойПродукцииПива", Ложь);
	ФлагиУчета.Вставить("ЗакупкаТоваровУслугДляКомитентов", Ложь);
	ФлагиУчета.Вставить("РеализацияТоваровУслугКомитентов", Ложь);
	ФлагиУчета.Вставить("Использовать1СОтчетностьПриИнтеграцииСБанком", Ложь);
	ФлагиУчета.Вставить("СервисЭлектронныхТрудовыхКнижек", Ложь);
	
	Возврат ФлагиУчета;
	
КонецФункции

// Проверяет возможность авторасшифровки входящих сообщений от контролирующих органов для указанной учетной записи.
// 
// Параметры:
//	УчетныеЗаписи - СправочникСсылка.УчетныеЗаписиДокументооборота, Массив, ФиксированныйМассив - Учетные записи, 
//                  для которой проверяется возможность авторасшифровки.
//
// Возвращаемое значение:
//	Булево - Истина, если авторасшифровка поддерживается, иначе - Ложь.
//
Функция ДоступнаАвторасшифровкаТранспортныхСообщений(УчетныеЗаписи) Экспорт

	Результат = Ложь;

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.
		ПолучитьПризнакДоступностиАвторасшифровкиТранспортныхСообщений(УчетныеЗаписи, Результат);
	
	Возврат Результат;

КонецФункции

Процедура ОтметитьСсылкуПоказаннойПользователю(Ссылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЖурналНовыхСобытий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора["ПоказатьПользователю"] = Ложь;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОпределениеИзмененныхПараметровПодключенияВФоне(Отпечатки, АдресРезультата) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ОпределениеИзмененныхПараметровПодключенияВФоне(Отпечатки, АдресРезультата);
	
КонецПроцедуры

// Организация фоновой расшифровки поступивших ТС для подписи в модели сервиса
//
Процедура РасшифроватьТранспортныеСообщенияВФоне(ПараметрыВызова, АдресРезультата) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.РасшифроватьТранспортныеСообщенияВФоне(ПараметрыВызова, АдресРезультата);

КонецПроцедуры

Процедура ПолучитьДанныеССервераКАФоновоеЗадание(Параметры) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПолучитьДанныеССервераКАФоновоеЗадание(Параметры);
	
КонецПроцедуры

#КонецОбласти