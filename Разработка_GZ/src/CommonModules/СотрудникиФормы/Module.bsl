////////////////////////////////////////////////////////////////////////////////
// СотрудникиФормы: методы, обслуживающие работу формы сотрудника.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает массив сотрудников физического лица.
//
// Параметры:
//  ФизическоеЛицо 		- СправочникСсылка.ФизическиеЛица, сотрудников которого необходимо получить.
//	ИсключаяСотрудника 	- СправочникСсылка.СотрудникиОрганизации, если задать, указанный сотрудник, будет исключен
//						из массива возвращаемых ссылок.
//	Организация			- СправочникСсылка.Организации, если задать, то будут отобраны сотрудники, имеющие отношение к
//						соответствующей ГоловнойОрганизации.
//
// Возвращаемое значение:
//   Массив   - Массив ссылок на сотрудников физического лица.
//
Функция СотрудникиФизическогоЛица(ФизическоеЛицо, ИсключаяСотрудника = Неопределено, Организация = Неопределено) Экспорт
	
	ОтбиратьВсехСотрудников = (ИсключаяСотрудника = Неопределено ИЛИ ИсключаяСотрудника = Справочники.Сотрудники.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтбиратьПоВсемГоловнымОрганизациям = Ложь;
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	Иначе
		ОтбиратьПоВсемГоловнымОрганизациям = Истина;
		ГоловнаяОрганизация = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И (&ОтбиратьВсехСотрудников
	|			ИЛИ Сотрудники.Ссылка <> &ИсключаяСотрудника)
	|	И (&ОтбиратьПоВсемГоловнымОрганизациям
	|			ИЛИ Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация)";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ОтбиратьВсехСотрудников", ОтбиратьВсехСотрудников);
	Запрос.УстановитьПараметр("ИсключаяСотрудника", ИсключаяСотрудника);
	Запрос.УстановитьПараметр("ОтбиратьПоВсемГоловнымОрганизациям", ОтбиратьПоВсемГоловнымОрганизациям);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

#Область ПостроительМеню

// Возвращает описание раздела меню, по переданным заголовку и коллекции полных
// имен объектов метаданных, вводимых на основании.
//
// Параметры:
//			Заголовок
//			ПунктыМеню 							- Массив полных имен объектов метаданных.
//			ИсключаемыеПункты					- Массив полных имен объектов метаданных, команды ввода
//													которых предполагается скрыть.
//			СобственныеПредставленияОбъектов	- Соответствие, ключ - полное имя объекта метаданных, значение - представление
//
// ВозвращаемоеЗначение:
//			РазделМеню
//
Функция РазделМеню(Заголовок, ПунктыМеню, ИсключаемыеПункты = Неопределено, СобственныеПредставленияОбъектов = Неопределено) Экспорт
	
	Подменю = ЗарплатаКадры.РазделМеню(Заголовок);
	Подменю.Вставить("ИменаНастроенныхОбъектовМетаданных", Новый Массив);
	
	ПредставленияДоступныхОбъектов = ЗарплатаКадры.ПредставленияДоступныхОбъектовМетаданных(ПунктыМеню, "Добавление", ИсключаемыеПункты, СобственныеПредставленияОбъектов);
	
	Если ПредставленияДоступныхОбъектов.Количество() > 0 Тогда
		ДобавитьПунктыВРазделМеню(Подменю, ПунктыМеню, ПредставленияДоступныхОбъектов);
	Иначе
		Подменю.ИменаНастроенныхОбъектовМетаданных = ПунктыМеню;
	КонецЕсли; 
	
	Возврат Подменю;
	
КонецФункции

#КонецОбласти

// Перечисление доступных ролей физического лица.
// 
// Возвращаемое значение:
// 	Структура - перечисляемые ключи и являются ролями.
// 		Конкретный набор ключей зависит от функциональности программы.
// 
Функция РолиФизическогоЛицаИсторииВзаимоотношений() Экспорт
	
	Роли = Новый Структура;
	СотрудникиФормыВнутренний.ЗаполнитьРолиФизическогоЛицаИсторииВзаимоотношений(Роли);
	Возврат Роли;
	
КонецФункции

Функция ИсторияВзаимоотношенийСКомпанией(ФизическиеЛица) Экспорт
	
	История = ТаблицаИсторииВзаимоотношений();
	ЗаполнитьИсториюВзаимоотношений(История, ФизическиеЛица);
	Возврат История;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	ТекстСообщенияОКонфликте = "";
	Если ЗначениеЗаполнено(ДатаПриема) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ВидЗанятости) Тогда
		
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		ЕстьОсновноеМестоРаботы = Ложь;
		
		СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ТабельныйНомер,Должность,ВидЗанятости,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаЗавершенияРаботы";
		ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФизическогоЛица(ФизическоеЛицо, Сотрудник), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
		
		МассивКонфликтныхРабочихМест = Новый Массив;
		Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
			
			Если НЕ (СтрокаТаблицаПоРабочимМестам.ОформленПоТрудовомуДоговору И СтрокаТаблицаПоРабочимМестам.ДатаПриема <= ДатаПриема
				И (СтрокаТаблицаПоРабочимМестам.ДатаЗавершенияРаботы > ДатаПриема ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаЗавершенияРаботы = '00010101000000')) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
				Если СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				ИначеЕсли СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство 
							И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли; 
			ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда 
				Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
						ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
						И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли;
			КонецЕсли;
			
			Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
					ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
					И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
				ЕстьОсновноеМестоРаботы = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивКонфликтныхРабочихМест.Количество() > 0 Тогда
			
			ТекстСообщенияОКонфликте = "";
			Для каждого СтрокаКонфликтногоСотрудника Из МассивКонфликтныхРабочихМест Цикл
				ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликте + Символы.ПС
					+ ТекстСообщенияОКонфликтеВидаЗанятости(
						ВидЗанятости,
						Организация,
						СтрокаКонфликтногоСотрудника.Организация,
						СтрокаКонфликтногоСотрудника.ВидЗанятости,
						СтрокаКонфликтногоСотрудника.ТабельныйНомер,
						СтрокаКонфликтногоСотрудника.Должность);
			КонецЦикла;	
					
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство И НЕ ЕстьОсновноеМестоРаботы Тогда
			ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщенияОКонфликте;
	
КонецФункции

#Область ОбработчикиСобытийФормыСотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		СотрудникиОбновитьЭлементыФормы(Форма);
	КонецЕсли;
	
	// ТехнологияСервиса.ИнформационныйЦентр
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(Форма, Форма.Элементы.ИнформационныеСсылки);
	// Конец ТехнологияСервиса.ИнформационныйЦентр
	
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект);	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	
КонецПроцедуры

Процедура СотрудникиПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекущаяОрганизация", Форма.ТекущаяОрганизация);
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ФизическоеЛицо) Тогда
		ТекущийОбъект.ФизическоеЛицо = Форма.ФизическоеЛицоСсылка;
	КонецЕсли;
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Если Не Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьСотрудникаСуществующегоФизическогоЛица", Истина);
		КонецЕсли;
		
		Если Форма.ФизическоеЛицоЗаблокировано Или Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			ЗаписатьФизическоеЛицоСотрудника(Форма);
		КонецЕсли;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СсылкаНового", Форма.СотрудникСсылка);
		
	КонецЕсли;
	
	ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, Форма.ФизическоеЛицоСсылка, "ФизическоеЛицо");
	
	ЗаполнитьРеквизитГоловнаяОрганизация(Форма, ТекущийОбъект);
	
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	СохранитьДанныеДополнительныхФорм(Форма, Отказ, ТекущийОбъект);
	
КонецПроцедуры

Процедура СотрудникиПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Форма.РазблокироватьДанныеФормыДляРедактирования();
	РазблокироватьДанныеДляРедактирования(Форма.ФизическоеЛицоСсылка, Форма.УникальныйИдентификатор);
	
	Если Форма.ИзмененыЛичныеДанные Или Форма.СозданиеНового Тогда
		Форма.СозданиеНового = Ложь;
		ПрочитатьДанныеСвязанныеССотрудником(Форма);
	КонецЕсли;
	
	Форма.СотрудникЗаблокирован = Ложь;
	Форма.ФизическоеЛицоЗаблокировано = Ложь;
	
	СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыФизическогоЛица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ФизическиеЛицаОбновитьЭлементыФормы(Форма);
		ОбновитьОтображениеФормыФизическогоЛица(Форма);
	КонецЕсли;
	
	НастроитьОтборИсторииВзаимоотношений(Форма, Форма.Элементы.ОтборИсторииПоГруппеРоли, Форма.ОтборИсторииПоГруппеРоли);
	УстановитьВидимостьКомандыНовоеМестоРаботы(Форма);
	
	Если ОбщегоНазначенияБЗК.ЗначениеСвойства(Форма.Параметры, "ВводАдреса") = Истина Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.ГруппаКонтактнаяИнформация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект);
	ОбновитьОтображениеФормыФизическогоЛица(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Для нового физического лица устанавливаем ссылку.
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	ЗапомнитьФамилиюИмяОтчествоФизическогоЛицаОбъектаФормы(Форма, ТекущийОбъект);
	ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, Форма.ФизическоеЛицоСсылка, "ФизическоеЛицо");
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);	
	СохранитьДанныеДополнительныхФорм(Форма, Отказ, ТекущийОбъект);
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Форма.ФизическоеЛицоЗаблокировано = Ложь;
	СотрудникиФормыВнутренний.ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
	ФизическиеЛицаЗарплатаКадры.ПроверитьУникальностьНаименованияФизическогоЛица(ФизическоеЛицоОбъект, Отказ);
	ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);			
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		ПроверитьСведенияОГражданствеИДокументеУдостоверяющемЛичность(Форма, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьСведенияОГражданствеИДокументеУдостоверяющемЛичность(Форма, Отказ) Экспорт
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка, Отказ);
	
	СтруктураВедущихОбъектов = Новый Структура("Физлицо", Форма.ФизическоеЛицоСсылка);
	Если Не РедактированиеПериодическихСведенийКлиентСервер.ЗаполненыЗначенияПоУмолчаниюПоСтруктуре(Форма, "ДокументыФизическихЛиц", СтруктураВедущихОбъектов) Тогда
		
		Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
			
			ЗарплатаКадры.ПроверитьКорректностьДаты(Форма.ФизическоеЛицоСсылка, Форма.ДокументыФизическихЛиц.ДатаВыдачи, "ДокументыФизическихЛиц.ДатаВыдачи",
				Отказ, НСтр("ru='Дата выдачи документа'"));
			
			Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.СрокДействия) Тогда
				
				ЗарплатаКадры.ПроверитьКорректностьДаты(Форма.ФизическоеЛицоСсылка, Форма.ДокументыФизическихЛиц.СрокДействия, "ДокументыФизическихЛиц.СрокДействия",
					Отказ, НСтр("ru='Срок действия документа'"), Форма.ДокументыФизическихЛиц.ДатаВыдачи, НСтр("ru='даты его выдачи'"));
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Документ: не заполнено поле ""Дата выдачи"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ДатаВыдачи", "ДокументыФизическихЛиц", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СотрудникиКлиентСервер.ПроверитьНаписаниеФИДокументаЛатинскими(Форма, "ДокументыФизическихЛиц", Отказ);
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка, Отказ);
	
КонецПроцедуры

Процедура ЗапомнитьФамилиюИмяОтчествоФизическогоЛицаОбъектаФормы(Форма, ФизическоеЛицоОбъект) Экспорт
	
	ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект, Форма.ФИОФизическихЛиц, "Фамилия,Имя,Отчество");
	Если Не ПустаяСтрока(Форма.ФИОФизическихЛиц.Фамилия) И Не ПустаяСтрока(Форма.ФИОФизическихЛиц.Имя) Тогда
		ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыСортировкиКоллекцияССотрудниками

Функция НастройкиСортировки() Экспорт 
	НастройкиСортировки = Новый Структура;
	
	ПоляЭлементаСортировки = "Порядок, Использовать";	
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ПодразделениеНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ПодразделениеНомер", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ПодразделениеПриоритет", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ДолжностьНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ДолжностьКраткоеНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ДолжностьПриоритет", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("СотрудникНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("СотрудникТабельныйНомер", НастройкиСортировкиПоПолю);
	
	Возврат НастройкиСортировки;
	
КонецФункции	

Функция НастройкиСортировкиПоУмолчанию() Экспорт 
	НастройкиСортировки = НастройкиСортировки();	
	
	СтрокаОписанияНастроек = РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.НастройкаУпорядочиванияСпискаСотрудников();
	
	ПоляСортировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписанияНастроек, ",");	
	
	Порядок = 0;
	Для Каждого Поле Из ПоляСортировки Цикл
		Порядок = Порядок + 1;	
		
		Если Поле = "Справочник.ПодразделенияОрганизаций.РеквизитДопУпорядочиванияИерархического" Тогда
			НастройкиСортировки.ПодразделениеПриоритет.Использовать = Истина;	
			НастройкиСортировки.ПодразделениеПриоритет.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.ПодразделенияОрганизаций.Наименование" Тогда
			НастройкиСортировки.ПодразделениеНаименование.Использовать = Истина;	
			НастройкиСортировки.ПодразделениеНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.ПодразделенияОрганизаций.Код" Тогда
			НастройкиСортировки.ПодразделениеНомер.Использовать = Истина;	
			НастройкиСортировки.ПодразделениеНомер.Порядок = Порядок;	
		ИначеЕсли Поле = "Справочник.Должности.РеквизитДопУпорядочивания" Тогда
			НастройкиСортировки.ДолжностьПриоритет.Использовать = Истина;	
			НастройкиСортировки.ДолжностьПриоритет.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Должности.Наименование" Тогда
			НастройкиСортировки.ДолжностьНаименование.Использовать = Истина;	
			НастройкиСортировки.ДолжностьНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Должности.НаименованиеКраткое" Тогда
			НастройкиСортировки.ДолжностьКраткоеНаименование.Использовать = Истина;	
			НастройкиСортировки.ДолжностьКраткоеНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Сотрудники.Наименование" Тогда
			НастройкиСортировки.СотрудникНаименование.Использовать = Истина;	
			НастройкиСортировки.СотрудникНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Сотрудники.Код" Тогда
			НастройкиСортировки.СотрудникТабельныйНомер.Использовать = Истина;	
			НастройкиСортировки.СотрудникТабельныйНомер.Порядок = Порядок;
		КонецЕсли;	
	КонецЦикла;	
		
	Возврат НастройкиСортировки;
КонецФункции

Функция СортируемаяКоллекцияСотрудников(Коллекция) Экспорт
	СортируемаяКоллекция = Новый Структура("Коллекция, ОписаниеКоллекции");	
	СортируемаяКоллекция.ОписаниеКоллекции = ОписаниеСортируемойКоллекцииСотрудников();
	СортируемаяКоллекция.Коллекция = Коллекция;
	
	Возврат СортируемаяКоллекция;
КонецФункции	

Процедура ДобавитьДополнительноеПолеСортировки(Коллекция, Поле, Тип) Экспорт
	Если Коллекция.ОписаниеКоллекции.ДополнительныеПоляСортировки = Неопределено Тогда
		Коллекция.ОписаниеКоллекции.ДополнительныеПоляСортировки = Новый Массив;
	КонецЕсли;
	
	ОписаниеПоля = ОписаниеПоляДопУпорядочиванияКоллекцииСотрудников(Поле, Тип);
	Коллекция.ОписаниеКоллекции.ДополнительныеПоляСортировки.Добавить(ОписаниеПоля);	
КонецПроцедуры	

Функция ОписаниеСортируемойКоллекцииСотрудников() Экспорт
	ОписаниеСортируемойКоллекции = Новый Структура;
	ОписаниеСортируемойКоллекции.Вставить("Псевдоним");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляПодразделение");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляДолжность");
	ОписаниеСортируемойКоллекции.Вставить("ЗначениеПоляПериод");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляПериод");	
	ОписаниеСортируемойКоллекции.Вставить("ДополнительныеПоляСортировки");	
	
	Возврат ОписаниеСортируемойКоллекции;
КонецФункции	

Функция ПорядокСтрокКоллекцийСотрудников(СортируемыеКоллекции, НастройкиСортировки = Неопределено) Экспорт
	ОписаниеСортируемыхКоллекция = Новый Массив;
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл
		ОписаниеСортируемыхКоллекция.Добавить(СортируемыеДанные.ОписаниеКоллекции);	
	КонецЦикла;	
	
	РезультатСортировки = Новый Структура;
	
	Если НастройкиСортировки = Неопределено Тогда
		НастройкиСортировки = НастройкиСортировкиПоУмолчанию();	
	КонецЕсли;	
	
	СортируемаяТаблица = ТаблицаСортировкиСотрудников(ОписаниеСортируемыхКоллекция);
	ТаблицаОтбораКадровыхДанных = ТаблицаОтбораКадровыхДанныхДляСортировкиКоллекцийСотрудников();
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл
		НеобходимоПолучатьКадровыеДанные = НеобходимоПолучатьКадровыеДанныеДляСортировки(СортируемыеДанные.ОписаниеКоллекции, НастройкиСортировки);
		
		ИндексСтроки = 0;
		Для Каждого СтрокаСортируемойТаблицы Из СортируемыеДанные.Коллекция Цикл	
			ДобавитьСтрокуВТаблицуСортировкиСотрудников(СортируемаяТаблица, СтрокаСортируемойТаблицы, ИндексСтроки, СортируемыеДанные.ОписаниеКоллекции);
			
			Если НеобходимоПолучатьКадровыеДанные Тогда	
				ДобавитьСтрокуВТаблицуОтбораКадровыхДанныхДляСортировки(ТаблицаОтбораКадровыхДанных, СтрокаСортируемойТаблицы, СортируемыеДанные.ОписаниеКоллекции);
			КонецЕсли;	
			
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;		
	КонецЦикла;	
	
	РезультатЗапросаСортировки = РезультатЗапросаСортировкиКоллекцииСотрудников(СортируемаяТаблица, НастройкиСортировки, ТаблицаОтбораКадровыхДанных, ОписаниеСортируемыхКоллекция);
	Выборка = РезультатЗапросаСортировки.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ПсевдонимТаблицы") Цикл		
		РезультатСортировкиКоллекции = РезультатСортировкиКоллекцииСотрудников();
		РезультатСортировки.Вставить(Выборка.ПсевдонимТаблицы, РезультатСортировкиКоллекции);
		
		Порядок = 1;
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = РезультатСортировкиКоллекции.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			СтрокаТаблицы.Порядок = Порядок;
			Порядок = Порядок + 1;
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат РезультатСортировки;
КонецФункции

Функция РезультатСортировкиКоллекцииСотрудников()
	РезультатСортировки = Новый ТаблицаЗначений;
	РезультатСортировки.Колонки.Добавить("ИндексСтрокиИсходнойТаблицы");
	РезультатСортировки.Колонки.Добавить("Порядок");
	
	РезультатСортировки.Колонки.Добавить("ПодразделениеПриоритет");
	РезультатСортировки.Колонки.Добавить("ПодразделениеНаименование");
	РезультатСортировки.Колонки.Добавить("ПодразделениеНомер");
	РезультатСортировки.Колонки.Добавить("ДолжностьПриоритет");
	РезультатСортировки.Колонки.Добавить("ДолжностьНаименование");
	РезультатСортировки.Колонки.Добавить("ДолжностьКраткоеНаименование");
	РезультатСортировки.Колонки.Добавить("СотрудникНаименование");
	РезультатСортировки.Колонки.Добавить("СотрудникТабельныйНомер");;

	Возврат РезультатСортировки;
КонецФункции	

Функция ОписаниеПоляДопУпорядочиванияКоллекцииСотрудников(Поле, Тип) Экспорт 
	Возврат Новый Структура("Поле, Тип", Поле, Тип);	
КонецФункции

Функция РезультатЗапросаСортировкиКоллекцииСотрудников(СортируемаяТаблица, НастройкиСортировки, ТаблицаОтбораКадровыхДанных, ОписаниеСортируемыхКоллекций)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТаблицаОтбораКадровыхДанных.Количество() > 0 Тогда
		ТаблицаОтбораКадровыхДанных.Свернуть("Сотрудник, Период");
		
		Запрос.УстановитьПараметр("ТаблицаОтбораКадровыхДанных", ТаблицаОтбораКадровыхДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОтбораКадровыхДанных.Сотрудник,
		|	ТаблицаОтбораКадровыхДанных.Период
		|ПОМЕСТИТЬ ВТТаблицаОтбора
		|ИЗ
		|	&ТаблицаОтбораКадровыхДанных КАК ТаблицаОтбораКадровыхДанных";
		
		Запрос.Выполнить();
		
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТТаблицаОтбора");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "Подразделение, Должность");
	КонецЕсли;	
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, СортируемаяТаблица, "ВТИсходныеДанные");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.Период,
	|	ИсходныеДанные.ИндексСтрокиИсходнойТаблицы,
	|	ИсходныеДанные.ПсевдонимТаблицы,
	|	&ПоляУпорядочивания
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ИсходныеДанные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ИсходныеДанные.Период = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныеДанные.ПсевдонимТаблицы,
	|	&Порядок";
		
	Если ТаблицаОтбораКадровыхДанных.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО ИсходныеДанные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИсходныеДанные.Период = КадровыеДанныеСотрудников.Период", "");
	КонецЕсли;	

	КадровыеДанныеВоВнешнейТаблице = ТаблицаОтбораКадровыхДанных.Количество() > 0;
	ПоляУпорядочивания = ПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(КадровыеДанныеВоВнешнейТаблице, НастройкиСортировки, ОписаниеСортируемыхКоллекций);
	
	ПоляПорядка = Новый Массив;
	БлокУпорядочить = Новый Массив;	
	
	Для Каждого ОписаниеПоля Из ПоляУпорядочивания Цикл
		ПоляПорядка.Добавить(ОписаниеПоля.Текст + " КАК " + ОписаниеПоля.Псевдоним);
		БлокУпорядочить.Добавить(ОписаниеПоля.Псевдоним);
	КонецЦикла;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляУпорядочивания", СтрСоединить(ПоляПорядка,  "," + Символы.ПС));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Порядок", СтрСоединить(БлокУпорядочить,  "," + Символы.ПС));
	
	Возврат Запрос.Выполнить();
КонецФункции	

Функция ПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(КадровыеДанныеВоВнешнейТаблице, НастройкиСортировки, ОписаниеСортируемыхКоллекций)
	ПоляУпорядочивания = Новый ТаблицаЗначений;
	ПоляУпорядочивания.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ПоляУпорядочивания.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ПоляУпорядочивания.Колонки.Добавить("Псевдоним", Новый ОписаниеТипов("Строка"));
	
	Если КадровыеДанныеВоВнешнейТаблице Тогда
		ШаблонПоляПодразделение = 
		"ВЫБОР
		|	КОГДА ИсходныеДанные.ЗаданоПолеПодразделение
		|			ИЛИ КадровыеДанныеСотрудников.Подразделение ЕСТЬ NULL 
		|		ТОГДА ИсходныеДанные.ПодразделениеПорядка.РеквизитУпорядочивания
		|	ИНАЧЕ КадровыеДанныеСотрудников.Подразделение.РеквизитУпорядочивания
		|КОНЕЦ";	
		ШаблонПоляДолжность = 
		"ВЫБОР
		|	КОГДА ИсходныеДанные.ЗаданоПолеДолжность
		|			ИЛИ КадровыеДанныеСотрудников.Должность ЕСТЬ NULL 
		|		ТОГДА ИсходныеДанные.ДолжностьПорядка.РеквизитУпорядочивания
		|	ИНАЧЕ КадровыеДанныеСотрудников.Должность.РеквизитУпорядочивания
		|КОНЕЦ";
	Иначе
		ШаблонПоляПодразделение = "ИсходныеДанные.ПодразделениеПорядка";
		ШаблонПоляДолжность = "ИсходныеДанные.ДолжностьПорядка";
	КонецЕсли;
	
	Для Каждого ЭлементСортировки Из НастройкиСортировки Цикл
		Если ЭлементСортировки.Значение.Использовать <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ПоляУпорядочивания.Добавить();
		СтрокаТаблицы.Порядок = ЭлементСортировки.Значение.Порядок;
		СтрокаТаблицы.Псевдоним = ЭлементСортировки.Ключ;
		
		Если ЭлементСортировки.Ключ = "ПодразделениеПриоритет" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляПодразделение, "РеквизитУпорядочивания", "РеквизитДопУпорядочиванияИерархического");	
		ИначеЕсли ЭлементСортировки.Ключ = "ПодразделениеНаименование" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляПодразделение, "РеквизитУпорядочивания", "Наименование");
		ИначеЕсли ЭлементСортировки.Ключ = "ПодразделениеНомер" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляПодразделение, "РеквизитУпорядочивания", "Код");
		ИначеЕсли ЭлементСортировки.Ключ = "ДолжностьПриоритет" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляДолжность, "РеквизитУпорядочивания", "РеквизитДопУпорядочивания");
		ИначеЕсли ЭлементСортировки.Ключ = "ДолжностьНаименование" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляДолжность, "РеквизитУпорядочивания", "Наименование");
		ИначеЕсли ЭлементСортировки.Ключ = "ДолжностьКраткоеНаименование" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляДолжность, "РеквизитУпорядочивания", "НаименованиеКраткое");	
		ИначеЕсли ЭлементСортировки.Ключ = "СотрудникНаименование" Тогда	
			СтрокаТаблицы.Текст = "ИсходныеДанные.Сотрудник.Наименование";
		ИначеЕсли ЭлементСортировки.Ключ = "СотрудникТабельныйНомер" Тогда	
			СтрокаТаблицы.Текст = "ИсходныеДанные.Сотрудник.Код";	
		КонецЕсли;			
	КонецЦикла;
	
	ПоляУпорядочивания.Сортировать("Порядок");
	Если ПоляУпорядочивания.Количество() > 0 Тогда
		Порядок = ПоляУпорядочивания[ПоляУпорядочивания.Количество() - 1].Порядок;
	Иначе
		Порядок = 0;
	КонецЕсли;	
	
	ДополнительныеПоляУпорядочивания = ДополнительныеПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(ОписаниеСортируемыхКоллекций);
		
	Для Каждого СтрокаТаблицыДопПорядка Из ДополнительныеПоляУпорядочивания Цикл
		Порядок = Порядок + 1;
		СтрокаТаблицы = ПоляУпорядочивания.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТаблицыДопПорядка);
		СтрокаТаблицы.Порядок = Порядок;
	КонецЦикла;	
	
	ПоляУпорядочивания.Сортировать("Порядок");
		
	Возврат ПоляУпорядочивания;
КонецФункции

Функция ДополнительныеПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(ОписаниеСортируемыхКоллекций)
	ПоляУпорядочивания = Новый ТаблицаЗначений;
	ПоляУпорядочивания.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ПоляУпорядочивания.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ПоляУпорядочивания.Колонки.Добавить("Псевдоним", Новый ОписаниеТипов("Строка"));
	
	ОписаниеПолейДопУпорядочивания = Новый Массив;
	
	Для Каждого ОписаниеКоллекции Из ОписаниеСортируемыхКоллекций Цикл
		Если ОписаниеКоллекции.ДополнительныеПоляСортировки <> Неопределено Тогда
			Сч = 1;
			Для Каждого ДополнительноеПоле Из ОписаниеКоллекции.ДополнительныеПоляСортировки Цикл
				Если ОписаниеПолейДопУпорядочивания.Количество() >= Сч Тогда
					ОписаниеПоляСортировки = ОписаниеПолейДопУпорядочивания[Сч - 1];
				Иначе 
					ОписаниеПоляСортировки = Новый Структура;
					ОписаниеПолейДопУпорядочивания.Добавить(ОписаниеПоляСортировки);
				КонецЕсли;	
				
				ОписаниеПоляСортировки.Вставить(ОписаниеКоллекции.Псевдоним, ДополнительноеПоле.Поле);
				
				Сч = Сч + 1;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
	Порядок = 1;	
	Для Каждого Описание Из ОписаниеПолейДопУпорядочивания Цикл	
		ЧастиТелаПоля = Новый Массив;
		ЧастиТелаПоля.Добавить("ВЫБОР");
		Для Каждого КлючЗначение Из Описание Цикл
			ЧастиТелаПоля.Добавить("КОГДА ИсходныеДанные.ПсевдонимТаблицы = """ + КлючЗначение.Ключ + """ ТОГДА " + "ИсходныеДанные." + КлючЗначение.Значение)		
		КонецЦикла;	
		ЧастиТелаПоля.Добавить("ИНАЧЕ 0");
		ЧастиТелаПоля.Добавить("КОНЕЦ");
		
		СтрокаТаблицы = ПоляУпорядочивания.Добавить();
		СтрокаТаблицы.Текст = СтрСоединить(ЧастиТелаПоля, Символы.ПС);
		СтрокаТаблицы.Псевдоним = "ПолеПорядка" + Порядок;
		СтрокаТаблицы.Порядок = Порядок;
		
		Порядок = Порядок + 1;
	КонецЦикла;	
	
	Возврат ПоляУпорядочивания
КонецФункции	

Функция ТаблицаСортировкиСотрудников(ОписаниеСортируемыхКоллекций)
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСортировки.Колонки.Добавить("ПодразделениеПорядка", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСортировки.Колонки.Добавить("ЗаданоПолеПодразделение", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("ДолжностьПорядка", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаСортировки.Колонки.Добавить("ЗаданоПолеДолжность", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаСортировки.Колонки.Добавить("ИндексСтрокиИсходнойТаблицы", Новый ОписаниеТипов("Число"));
	
	МаксимальнаяДлинаПсевдонима = 0;	
	Для Каждого ОписаниеКоллекции Из ОписаниеСортируемыхКоллекций Цикл
		Если МаксимальнаяДлинаПсевдонима < СтрДлина(ОписаниеКоллекции.Псевдоним) Тогда 
			МаксимальнаяДлинаПсевдонима = СтрДлина(ОписаниеКоллекции.Псевдоним);
		КонецЕсли;		
	КонецЦикла;	
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(МаксимальнаяДлинаПсевдонима);	
	ТаблицаСортировки.Колонки.Добавить("ПсевдонимТаблицы", Новый ОписаниеТипов("Строка",, КвалификаторСтроки));
	
	ТипыДополнительныхПолей = Новый Соответствие;
	
	Для Каждого ОписаниеКоллекции Из ОписаниеСортируемыхКоллекций Цикл
		Если ОписаниеКоллекции.ДополнительныеПоляСортировки <> Неопределено Тогда
			Для Каждого ОписаниеПоля Из ОписаниеКоллекции.ДополнительныеПоляСортировки Цикл
				ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеПоля.Поле, ".");
				
				ТипыПоля = ТипыДополнительныхПолей.Получить(ЧастиПути);
				Если ТипыПоля = Неопределено Тогда
					ТипыПоля = Новый Массив;
					ТипыДополнительныхПолей.Вставить(ЧастиПути[0], ТипыПоля);
				КонецЕсли;	
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыПоля, ОписаниеПоля.Тип.Типы());					
			КонецЦикла;			
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ДобавляемоеПоле Из ТипыДополнительныхПолей Цикл
		ТаблицаСортировки.Колонки.Добавить(ДобавляемоеПоле.Ключ, Новый ОписаниеТипов(ДобавляемоеПоле.Значение)); 		
	КонецЦикла;	
			
	Возврат ТаблицаСортировки;
КонецФункции

Процедура ДобавитьСтрокуВТаблицуСортировкиСотрудников(ТаблицаСортировки, СтрокаСортируемойКоллекция, ИндексСтрокиКоллекции, ОписаниеКоллекции)
	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаСортируемойКоллекция); 
	
	СтрокаТаблицы.Сотрудник = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляСотрудник];
	
	Если ОписаниеКоллекции.ИмяПоляПодразделение <> Неопределено Тогда 
		СтрокаТаблицы.ПодразделениеПорядка = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляПодразделение];
		СтрокаТаблицы.ЗаданоПолеПодразделение = Истина;
	КонецЕсли;
	Если ОписаниеКоллекции.ИмяПоляДолжность <> Неопределено Тогда
		СтрокаТаблицы.ДолжностьПорядка = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляДолжность];
		СтрокаТаблицы.ЗаданоПолеДолжность= Истина;
	КонецЕсли;	
	СтрокаТаблицы.ИндексСтрокиИсходнойТаблицы = ИндексСтрокиКоллекции;
	СтрокаТаблицы.ПсевдонимТаблицы = ОписаниеКоллекции.Псевдоним;
		
	Если ОписаниеКоллекции.ИмяПоляПериод <> Неопределено Тогда
		СтрокаТаблицы.Период = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляПериод];
	Иначе	
		СтрокаТаблицы.Период = ОписаниеКоллекции.ЗначениеПоляПериод;
	КонецЕсли;	
	
КонецПроцедуры	

Функция ТаблицаОтбораКадровыхДанныхДляСортировкиКоллекцийСотрудников()
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтбора.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаОтбора;
КонецФункции

Функция ДобавитьСтрокуВТаблицуОтбораКадровыхДанныхДляСортировки(ТаблицаОтбораКадровыхДанных, СтрокаСортируемойКоллекция, ОписаниеКоллекции)
	СтрокаТаблицыОтбора = ТаблицаОтбораКадровыхДанных.Добавить();
	СтрокаТаблицыОтбора.Сотрудник = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляСотрудник];
	
	Если ОписаниеКоллекции.ИмяПоляПериод <> Неопределено Тогда
		СтрокаТаблицыОтбора.Период = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляПериод];
	Иначе	
		СтрокаТаблицыОтбора.Период	= ОписаниеКоллекции.ЗначениеПоляПериод;
	КонецЕсли;	
	
КонецФункции	

Функция НеобходимоПолучатьКадровыеДанныеДляСортировки(ОписаниеСортируемойКоллекции, НастройкиСортировки)
	Если ОписаниеСортируемойКоллекции.ИмяПоляПодразделение <> Неопределено
		И ОписаниеСортируемойКоллекции.ИмяПоляДолжность <> Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли;	
						
	Возврат ИспользуютсяКадровыеДанныеВНастройкахСортировки(НастройкиСортировки);	
КонецФункции	

Функция ИспользуютсяКадровыеДанныеВНастройкахСортировки(НастройкиСортировки)
	Для Каждого ЭлементНастройки Из НастройкиСортировки Цикл
		Если (ЭлементНастройки.Ключ = "ПодразделениеПриоритет"
			Или ЭлементНастройки.Ключ = "ПодразделениеНаименование"
			Или ЭлементНастройки.Ключ = "ПодразделениеНомер"
			Или ЭлементНастройки.Ключ = "ДолжностьПриоритет"
			Или ЭлементНастройки.Ключ = "ДолжностьНаименование"
			Или ЭлементНастройки.Ключ = "ДолжностьКраткоеНаименование")
			И ЭлементНастройки.Значение.Использовать Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

#КонецОбласти

#Область МетодыСортировкиКоллекцияСФизическимиЛицами

Функция СортируемаяКоллекцияФизическихЛиц(Коллекция) Экспорт
	СортируемаяКоллекция = Новый Структура("Коллекция, ОписаниеКоллекции");	
	СортируемаяКоллекция.ОписаниеКоллекции = ОписаниеСортируемойКоллекцииФизическихЛиц();
	СортируемаяКоллекция.Коллекция = Коллекция;
	
	Возврат СортируемаяКоллекция;
КонецФункции	

Функция ОписаниеСортируемойКоллекцииФизическихЛиц() Экспорт
	ОписаниеСортируемойКоллекции = Новый Структура;
	ОписаниеСортируемойКоллекции.Вставить("Псевдоним");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляФизическоеЛицо", "ФизическоеЛицо");
	ОписаниеСортируемойКоллекции.Вставить("ДополнительныеПоляСортировки");
	
	Возврат ОписаниеСортируемойКоллекции;
КонецФункции

Функция ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Организация, ПериодПолученияКадровыхДанных, НастройкиСортировки = Неопределено) Экспорт 
	РезультатСортировки = Новый Структура;
	
	ОписаниеСортируемыхКоллекций = Новый Массив;
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл
		ОписаниеСортируемыхКоллекций.Добавить(СортируемыеДанные.ОписаниеКоллекции);	
	КонецЦикла;	
	
	Если НастройкиСортировки = Неопределено Тогда
		НастройкиСортировки = НастройкиСортировкиПоУмолчанию();	
	КонецЕсли;	
	
	СортируемаяТаблица = ТаблицаСортировкиФизическихЛиц(ОписаниеСортируемыхКоллекций);
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл	
		ИндексСтроки = 0;
		Для Каждого СтрокаСортируемойТаблицы Из СортируемыеДанные.Коллекция Цикл	
			ДобавитьСтрокуВТаблицуСортировкиФизическихЛиц(СортируемаяТаблица, СтрокаСортируемойТаблицы, ИндексСтроки, СортируемыеДанные.ОписаниеКоллекции, ПериодПолученияКадровыхДанных);
						
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;		
	КонецЦикла;	
	
	ЗаполнитьСотрудникаВТаблицеСортировкиФизическихЛиц(СортируемаяТаблица, Организация, ПериодПолученияКадровыхДанных);
	
	ТаблицаОтбораКадровыхДанных = ТаблицаОтбораКадровыхДанныхДляСортировкиКоллекцийСотрудников();
	
	Для Каждого СтрокаСортируемойТаблицы Из СортируемаяТаблица Цикл
		СтрокаТаблицыОтбора = ТаблицаОтбораКадровыхДанных.Добавить();
		СтрокаТаблицыОтбора.Сотрудник = СтрокаСортируемойТаблицы.Сотрудник;
		СтрокаТаблицыОтбора.Период = ПериодПолученияКадровыхДанных;
	КонецЦикла;	
		
	РезультатЗапросаСортировки = РезультатЗапросаСортировкиКоллекцииСотрудников(СортируемаяТаблица, НастройкиСортировки, ТаблицаОтбораКадровыхДанных, ОписаниеСортируемыхКоллекций);
	Выборка = РезультатЗапросаСортировки.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ПсевдонимТаблицы") Цикл		
		РезультатСортировкиКоллекции = РезультатСортировкиКоллекцииСотрудников();
		РезультатСортировки.Вставить(Выборка.ПсевдонимТаблицы, РезультатСортировкиКоллекции);
		
		Порядок = 1;
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = РезультатСортировкиКоллекции.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			СтрокаТаблицы.Порядок = Порядок;
			Порядок = Порядок + 1;
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат РезультатСортировки;
	
КонецФункции	

Функция ТаблицаСортировкиФизическихЛиц(ОписаниеСортируемыхКоллекция)
	ТаблицаСортировки = ТаблицаСортировкиСотрудников(ОписаниеСортируемыхКоллекция);
	
	Если ТаблицаСортировки.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ТаблицаСортировки.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;	
	
	Возврат ТаблицаСортировки;
КонецФункции

Процедура ДобавитьСтрокуВТаблицуСортировкиФизическихЛиц(ТаблицаСортировки, СтрокаСортируемойКоллекция, ИндексСтрокиКоллекции, ОписаниеКоллекции, ПериодПолученияКадровыхДанных)
	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаСортируемойКоллекция); 	
	СтрокаТаблицы.ФизическоеЛицо = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляФизическоеЛицо];
	СтрокаТаблицы.Период = ПериодПолученияКадровыхДанных;	
	СтрокаТаблицы.ПсевдонимТаблицы = ОписаниеКоллекции.Псевдоним;
	СтрокаТаблицы.ИндексСтрокиИсходнойТаблицы = ИндексСтрокиКоллекции;
КонецПроцедуры	

Процедура ЗаполнитьСотрудникаВТаблицеСортировкиФизическихЛиц(ТаблицаСортировки, Организация, ПериодПолученияКадровыхДанных)
	СписокФизическихЛиц = ТаблицаСортировки.ВыгрузитьКолонку("ФизическоеЛицо");	
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Истина, Организация, НачалоМесяца(ПериодПолученияКадровыхДанных));
	
	ОсновныеСотрудники.Индексы.Добавить("ФизическоеЛицо");
	
	Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
		НайденныеСтроки = ОсновныеСотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.Сотрудник = НайденныеСтроки[0].Сотрудник; 				
		КонецЕсли;			
	КонецЦикла;		
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедуры

Процедура ОбновитьОтображениеФормыФизическогоЛица(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Настройка команд панели навигации формы.
	СтруктураПараметровФО = Новый Структура;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.ФизическоеЛицоСсылка);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ОформленПоТрудовомуДоговору";
	
	СотрудникиФизическогоЛица = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	ОформленныеСотрудники = СотрудникиФизическогоЛица.НайтиСтроки(Новый Структура("ОформленПоТрудовомуДоговору", Истина));
	
	Если ОформленныеСотрудники.Количество() = 0 Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.ФизическоеЛицо);
	Иначе
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметровФО);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьОтображениеЛичныхДанных(Форма);
	
КонецПроцедуры

Процедура ОбновитьОтображениеПредупреждающихНадписей(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия ,Форма.Элементы.ДокументыФизическихЛицСерия, Форма);
		СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Номер ,Форма.Элементы.ДокументыФизическихЛицНомер, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОтображениеЛичныхДанных(Форма) Экспорт
	Форма.ФизическоеЛицоМестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(Форма.ФизическоеЛицо.МестоРождения);
	СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма, ТекущаяДатаСеанса());
	СотрудникиКлиентСервер.УстановитьВидимостьГруппыФамилияИмяЛатиницей(Форма, "ДокументыФизическихЛиц");
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(Форма);
	СотрудникиКлиентСервер.УстановитьВидимостьСтраныВыдачиДокумента(Форма);
КонецПроцедуры

Процедура ЗаписатьФизическоеЛицоСотрудника(Форма) Экспорт
	
	// Запись физического лица
	Если Форма.ФизическоеЛицоЗаблокировано ИЛИ Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
		
		// Проверим права на запись нового физлица.
		ПравоНаДобавлениеИзменениеФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() И НЕ ПравоНаДобавлениеИзменениеФизическихЛиц Тогда
			ВызватьИсключение НСТР("ru = 'Нет прав на запись нового физического лица. Сотрудник не записан.'");
		КонецЕсли;
	
		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Если ФизическоеЛицоОбъект.Ссылка.Пустая() Тогда
			ФизическоеЛицоОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
		КонецЕсли;
		
		ЗапомнитьФамилиюИмяОтчествоФизическогоЛицаОбъектаФормы(Форма, ФизическоеЛицоОбъект);
		
		ФизическоеЛицоОбъект.Записать();
		Форма.ИзмененыЛичныеДанные = Истина;
		
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			
			ГражданствоПоУмолчанию = Форма.ГражданствоФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			ЗаписатьЗначенияПоУмолчанию(ФизическоеЛицоОбъект.Ссылка,  ГражданствоПоУмолчанию);
			
		КонецЕсли;
		
		Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ФизическоеЛицоФормыСотрудника(ФизическоеЛицоСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизическоеЛицоСсылка";
		
	Запрос.УстановитьПараметр("ФизическоеЛицоСсылка", ФизическоеЛицоСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ФизическоеЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
	Иначе
		ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	КонецЕсли; 
	
	Возврат ФизическоеЛицоОбъект;
	
КонецФункции

Процедура ЗаписатьЗначенияПоУмолчанию(ФизическоеЛицоСсылка, ГражданствоПоУмолчанию) Экспорт
	
	СотрудникиФормыВнутренний.ЗаписатьЗначенияПоУмолчанию(ФизическоеЛицоСсылка, ГражданствоПоУмолчанию);
	
КонецПроцедуры

Процедура ЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ЗаполнитьПервоначальныеЗначения(Форма);
	
КонецПроцедуры

Процедура СотрудникиОбновитьЭлементыФормы(Форма)
	
	СотрудникиФормыВнутренний.СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации(Форма) Экспорт
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", ЗарплатаКадры.ГоловнаяОрганизация(Форма.ТекущаяОрганизация)));
	СотрудникиКлиентСервер.УстановитьВидЗанятостиНовогоСотрудника(Форма);
	
КонецПроцедуры

Процедура УстановитьСпособРасчетаАвансаПоУмолчанию(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты И НЕ Форма.ИспользоватьКадровыйУчет Тогда
		РасчетЗарплатыФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Форма.ТекущийСпособРасчетаАванса);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьРазмерАвансаПоУмолчанию(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхДляНачисленияЗарплаты И НЕ Форма.ИспользоватьКадровыйУчет Тогда
		Форма.РазмерАвансаВПроцентахПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Форма.ТекущаяОрганизация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитГоловнаяОрганизация(Форма, ТекущийОбъект)
	
	Если Не Форма.ИспользоватьКадровыйУчет Тогда
		
		Если ЗначениеЗаполнено(Форма.ТекущаяОрганизация) Тогда
			
			ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Форма.ТекущаяОрганизация);
			Если ТекущийОбъект.ГоловнаяОрганизация <> ГоловнаяОрганизация Тогда
				ТекущийОбъект.ГоловнаяОрганизация = ГоловнаяОрганизация;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.ГоловнаяОрганизация)
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Организации.Ссылка КАК Ссылка,
				|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
				|	Организации.ПометкаУдаления КАК ПометкаУдаления
				|ПОМЕСТИТЬ ВТОрганизации
				|ИЗ
				|	Справочник.Организации КАК Организации
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	ВТОрганизации КАК Организации
				|
				|УПОРЯДОЧИТЬ ПО
				|	Организации.ОбособленноеПодразделение,
				|	Организации.ПометкаУдаления УБЫВ";
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				ТекущийОбъект.ГоловнаяОрганизация = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список физлиц с похожими ФИО в виде таблицы значений ДанныеФизическихЛиц, содержащий
// данные по которым можно идентифицировать физическое лицо.
// Если найдены физические лица с похожими ФИО - сбрасывается  флаг ФизическоеЛицоУникально
// Если все из найденных физических лиц доступны - взводится флаг флаг ДанныеФизическихЛицДоступны
// При этом в ключах возвращаемой структуры возвращаются флаги возможности проверки недоступных
// физических лиц по ИНН или СНИЛС.
// 
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое уже сопоставлено с сотрудником.
// Возвращаемое значение:
//		Структура	- с ключами:
//						* Фамилия						- Строка
//						* Имя							- Строка
//						* Отчество						- Строка
//						* ФизическоеЛицоУникально 		- Булево
//						* ДанныеФизическихЛицДоступны	- Булево
//						* ДанныеФизическихЛиц			- ТаблицаЗначений с данными найденных физических лиц,
//							Содержит колонки:
//								* ФизическоеЛицо		- СправочникСсылка.ФизическиеЛица
//								* Фамилия				- Строка
//								* Имя					- Строка
//								* Отчество				- Строка
//								* ФИОПолные				- Строка
//								* ДатаРождения			- Дата
//								* Пол					- ПеречислениеСсылка.ПолФизическогоЛица
//								* ИНН					- Строка
//								* СтраховойНомерПФР		- Строка
//								* ДокументВид			- СправочникСсылка.ВидыДокументовФизическихЛиц
//								* ДокументСерия			- Строка
//								* ДокументНомер			- Строка
//								* ДокументДатаВыдачи	- Дата
//								* ДокументПредставление	- Строка
//						* ВозможнаПроверкаПоИНН			- Булево
//						* ВозможнаПроверкаПоСНИЛС		- Булево
//
Функция ПодобратьСписокФизЛиц(ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество, Знач Уточнение = Неопределено) Экспорт
	
	СтруктураВозврат = Новый Структура;
	СтруктураВозврат.Вставить("Фамилия", Фамилия);
	СтруктураВозврат.Вставить("Имя", Имя);
	СтруктураВозврат.Вставить("Отчество", Отчество);
	СтруктураВозврат.Вставить("ФизическоеЛицоУникально", Истина);
	СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Ложь);
	СтруктураВозврат.Вставить("ДанныеФизическихЛиц", Новый Массив);
	СтруктураВозврат.Вставить("ВозможнаПроверкаПоИНН", Ложь);
	СтруктураВозврат.Вставить("ВозможнаПроверкаПоСНИЛС", Ложь);
	
	Фамилия  = СОКРЛП(Фамилия);
	Имя 	 = СОКРЛП(Имя);
	Отчество = СОКРЛП(Отчество);
	Наименование = Фамилия + " " + Имя + " " + Отчество;
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат СтруктураВозврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПохожих = ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение); 
	МассивНайденных = ТаблицаПохожих.ВыгрузитьКолонку("Ссылка");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивНайденных.Количество() = 0 Тогда
		Возврат СтруктураВозврат;
	КонецЕсли;
		
	СтруктураВозврат.ФизическоеЛицоУникально = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивФизлиц", МассивНайденных);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&МассивФизлиц)";
	МассивДоступных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	СтруктураВозврат.ДанныеФизическихЛицДоступны = МассивДоступных.Количество() = МассивНайденных.Количество();
	ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Истина,
		МассивДоступных,
		"Фамилия,
		|Имя,
		|Отчество,
		|ФИОПолные,
		|ДатаРождения,
		|Пол,
		|ИНН,
		|СтраховойНомерПФР,
		|ДокументВид,
		|ДокументСерия,
		|ДокументНомер,
		|ДокументДатаВыдачи,
		|ДокументПредставление", 
		ТекущаяДатаСеанса());
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц") Тогда
		МодульАрхивФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АрхивФизическихЛиц");
		МодульАрхивФизическихЛиц.ДополнитьДанныеФизическихЛиц(ДанныеФизическихЛиц, МассивНайденных, СтруктураВозврат);
	КонецЕсли;
	СтруктураВозврат.ДанныеФизическихЛиц = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеФизическихЛиц);
	
	Если СтруктураВозврат.ДанныеФизическихЛицДоступны Тогда
		Возврат СтруктураВозврат;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивНайденных, МассивДоступных),
		"ИНН,СтраховойНомерПФР",
		ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(КадровыеДанныеФизическихЛиц.ИНН) КАК ИНН,
		|	МИНИМУМ(КадровыеДанныеФизическихЛиц.СтраховойНомерПФР) КАК СНИЛС
		|ПОМЕСТИТЬ ВТМинимальныеИННИСНИЛС
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА МинимальныеИННИСНИЛС.ИНН = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВозможнаПроверкаПоИНН,
		|	ВЫБОР
		|		КОГДА МинимальныеИННИСНИЛС.СНИЛС = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВозможнаПроверкаПоСНИЛС
		|ИЗ
		|	ВТМинимальныеИННИСНИЛС КАК МинимальныеИННИСНИЛС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврат, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции

// Возвращает список уточнений физлиц с такими же ФИО.
//
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое проверяем.
//		Фамилия, Имя, Отчество, Уточнение - проверяемые ФИО и уточнение.
//
Функция ПодобратьСписокУточненийТекущегоФизическогоЛица(ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество, Знач Уточнение = Неопределено) Экспорт
	
	СписокУточнений = Новый СписокЗначений;
	
	Фамилия		= СокрЛП(Фамилия);
	Имя			= СокрЛП(Имя);
	Отчество	= СокрЛП(Отчество);
	
	Наименование = Фамилия + " " + Имя + " " + Отчество;
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат СписокУточнений;
	КонецЕсли;
	
	ПохожиеФизическиеЛица = ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение, Истина, Истина);
	
	МассивУточнений = ПохожиеФизическиеЛица.ВыгрузитьКолонку("УточнениеНаименования");
	СписокУточнений.ЗагрузитьЗначения(МассивУточнений);
	
	Возврат СписокУточнений;
	
КонецФункции

// Возвращает запрос для проверки физических лиц с похожими ФИО
// с установленными параметрами для текущей проверки.
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое проверяем.
//		Фамилия, Имя, Отчество, Уточнение - проверяемые ФИО и уточнение.
//		ФИОПолностью - проверять полное совпадение ФИО (и возможно уточнения).
//		ТочноеСовпадение - полное совпадение фамилии, имени и отчества.
//
Функция ПохожиеФизическиеЛица(Знач ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество, Знач Уточнение = "", Знач ФИОПолностью = Ложь, ТочноеСовпадение = Ложь)
	
	Запрос = Новый Запрос;
	
	ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(Фамилия + " " + Имя + " " + Отчество);
	
	Фамилия = ЧастиИмени.Фамилия;
	Имя = ЧастиИмени.Имя;
	Отчество = ЧастиИмени.Отчество;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.УточнениеНаименования
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &ФизическоеЛицо
		|	И (ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
		|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
		|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
		|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчествоУточнение СПЕЦСИМВОЛ ""~"")";
	
	Если ТочноеСовпадение Тогда
		
		Запрос.УстановитьПараметр("ФамилияИмяОтчество", Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя) + ?(ПустаяСтрока(Отчество), "", " " + Отчество));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НаименованиеСлужебное", "ФИО");
		
	Иначе
		
		Фамилия = ФизическиеЛицаЗарплатаКадры.ФамилияДляПоиска(Фамилия);
		Имя = ФизическиеЛицаЗарплатаКадры.ИмяДляПоиска(Имя);
		Отчество = ФизическиеЛицаЗарплатаКадры.ОтчествоДляПоиска(Отчество);
		
		Запрос.УстановитьПараметр("ФамилияИмяОтчество", Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя) + ?(ПустаяСтрока(Отчество), "%", " " + Отчество));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("Фамилия", Фамилия);
	Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя));
	Запрос.УстановитьПараметр("ФамилияИмяОтчествоУточнение", Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя) + ?(ПустаяСтрока(Отчество), "", " " + Отчество) + ?(ПустаяСтрока(Отчество), "", " " + Уточнение));
	
	Если ФИОПолностью Тогда
		Запрос.УстановитьПараметр("Фамилия", Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя) + ?(ПустаяСтрока(Отчество), "", " " + Отчество));
		Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя) + ?(ПустаяСтрока(Отчество), "", " " + Отчество));
	КонецЕсли;
	
	ТаблицаПохожих = Запрос.Выполнить().Выгрузить();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц") Тогда
		МодульАрхивФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АрхивФизическихЛиц");
		МодульАрхивФизическихЛиц.ДополнитьТаблицуПохожихФизическихЛиц(ТаблицаПохожих, ЧастиИмени, ТочноеСовпадение, ФизическоеЛицоСсылка);
	КонецЕсли;
	
	Возврат ТаблицаПохожих;
	
КонецФункции

// Возвращает представление о конфликте рабочих мест
//
// Параметры:
//		ВидЗанятости						- ПеречислениеСсылка.ВидыЗанятости
//		Организация							- СправочникСсылка.Организации
//		КонфликтныйСотрудникОрганизация		- СправочникСсылка.Организации
//		КонфликтныйСотрудникВидЗанятости	- ПеречислениеСсылка.ВидыЗанятости
//		КонфликтныйСотрудникТабельныйНомер	- Строка
//		КонфликтныйСотрудникДолжность		- СправочникСсылка.Должности
//
// Возвращаемое значение:
//		Строка
//
Функция ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация, КонфликтныйСотрудникОрганизация = Неопределено, КонфликтныйСотрудникВидЗанятости = Неопределено, КонфликтныйСотрудникТабельныйНомер = "", КонфликтныйСотрудникДолжность = Неопределено) Экспорт
	ТекстСообщения = "";
	Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		ТекстСообщения =  НСтр("ru = 'Нельзя оформить сотрудника по основному месту работы, так как он уже работает в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		ТекстСообщения =  НСтр("ru = 'Нельзя оформить сотрудника на внешнее совместительство, так как он уже работает в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство И ЗначениеЗаполнено(КонфликтныйСотрудникВидЗанятости) Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя оформить сотрудника на внутреннее совместительство, так как он оформлен по основному виду занятости в %1.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя оформить сотрудника на внутреннее совместительство, так как он не работает в %1.'");
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		?(Организация <> КонфликтныйСотрудникОрганизация И КонфликтныйСотрудникОрганизация <> Неопределено, КонфликтныйСотрудникОрганизация, НСтр("ru = 'нашей организации'")),
		?(КонфликтныйСотрудникВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы, НСтр("ru = 'по основному месту работы'"), НСтр("ru = 'как внешний совместитель'")),
		КонфликтныйСотрудникТабельныйНомер,
		КонфликтныйСотрудникДолжность,);
КонецФункции

Функция ПолучитьВидЗанятостиДляНовогоСотрудника(Сотрудник, Организация, ФизическоеЛицо) Экспорт

	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли; 
	
	СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ВидЗанятости,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаЗавершенияРаботы";
	ТаблицаПоРабочимМестамПредварительно = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФизическогоЛица(ФизическоеЛицо), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	
	// Рассчитаем актуальность сотрудника.
	ТаблицаПоРабочимМестамПредварительно.Колонки.Добавить("СотрудникАктуален", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестамПредварительно Цикл
		СтрокаТаблицаПоРабочимМестам.СотрудникАктуален = СтрокаТаблицаПоРабочимМестам.ОформленПоТрудовомуДоговору И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
			И (СтрокаТаблицаПоРабочимМестам.ДатаЗавершенияРаботы > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаЗавершенияРаботы = '00010101000000');
		
	КонецЦикла;
	
	// Оставим записи только для актуальных сотрудников.
	ТаблицаПоРабочимМестам =  ТаблицаПоРабочимМестамПредварительно.Скопировать(ТаблицаПоРабочимМестамПредварительно.НайтиСтроки(Новый Структура("СотрудникАктуален", Истина)));	
	Если ТаблицаПоРабочимМестам.Количество() > 0 Тогда
		ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		// Есть актуальные рабочие места.
		// Проверим есть ли рабочие места по основному месту работы.
		СтруктураОтбора = Новый Структура("ВидЗанятости", ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы"));
		АктуальныеСотрудникиПоОсновномуМестуРаботы = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
		Если АктуальныеСотрудникиПоОсновномуМестуРаботы.Количество() > 0 Тогда
			// Проверим актуальные рабочие места с основным рабочим местом в выбранной организации.
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы"));
			АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает в этой организации по основному месту работы.
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
			Иначе
				// Основное место работы в другой организации.
				// Проверим рабочее места как внешнего совместителя в выбранной организации.
				СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство"));
				АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
				Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
					// Уже работает как внешний совместитель.
					Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
				Иначе
					// Значит можно предложить внешнее совместительство.
					Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство");
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Проверим вид занятости (внешнее совместительство) в выбранной организации.
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство"));
			АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает по совместительству.
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
			Иначе
				// Значит можно предложить основное место работы.
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Актуальных рабочих мест нет, значит основное место работы.
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
КонецФункции

Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор) Экспорт
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ЗаблокироватьСотрудникаПриРедактированииНаСервере(СотрудникСсылка, СотрудникВерсияДанных, ФормаУникальныйИдентификатор) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СотрудникСсылка, СотрудникВерсияДанных, ФормаУникальныйИдентификатор);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьОтображениеСпособовРасчетаАванса(Форма) Экспорт
	
	СотрудникиФормыВнутренний.УстановитьОтображениеСпособовРасчетаАванса(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЛичнымиДаннымиФизЛица

Функция ИзменяемыеПоляФизическогоЛица() Экспорт
	
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Пол", "ИзмененПол");
	ИзменяемыеПоля.Вставить("ДатаРождения", "ИзмененаДатаРождения");
	ИзменяемыеПоля.Вставить("ДатаРегистрации", "ИзмененаДатаРегистрации");
	ИзменяемыеПоля.Вставить("МестоРождения", "ИзмененоМестоРождения");
	ИзменяемыеПоля.Вставить("ГруппаДоступа", "ИзмененаГруппаДоступа");
	ИзменяемыеПоля.Вставить("ИНН", "ИННИзменен");
	ИзменяемыеПоля.Вставить("СтраховойНомерПФР", "СНИЛСИзменен");
	ИзменяемыеПоля.Вставить("УточнениеНаименования", "ИзмененоУточнениеНаименования");
	
	Возврат ИзменяемыеПоля;
	
КонецФункции

Процедура ОбновитьДанныеФизическогоЛица(Форма) Экспорт
	ПрочитатьДанныеСвязанныеССотрудником(Форма);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		ЗаполнитьФормуМестамиРаботы(Форма, "ДругиеРабочиеМеста");
	КонецЕсли;
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, ФизическоеЛицоСсылка, ПутьКДаннымФизическогоЛицаВФорме = "ФизическоеЛицо")
	
	ИзменяемыеПоля = ИзменяемыеПоляФизическогоЛица();
	
	Если ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = Ложь;
		КонецЦикла;
	Иначе
		СтарыеЛичныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицоСсылка, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ИзменяемыеПоля));
		ФизическоеЛицоДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымФизическогоЛицаВФорме);
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = (СтарыеЛичныеДанные[КлючИЗначение.Ключ] <> ФизическоеЛицоДанныеФормы[КлючИЗначение.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация = Неопределено) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация);
	
КонецПроцедуры	

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ);
	
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыЧтенияЗаписиДанныхФизическогоЛица

Процедура ИнициализироватьТекущиеДанныеСотрудника(Форма) Экспорт
	
	КлючиСтруктуры = КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
	
	КлючиСтруктурыТарифныхСтавок = КлючиСтруктурыТекущихТарифныхСтавокСотрудника();
	Если Не ПустаяСтрока(КлючиСтруктурыТарифныхСтавок) Тогда
		КлючиСтруктуры = КлючиСтруктуры + "," + КлючиСтруктурыТарифныхСтавок;
	КонецЕсли; 
	
	ТекущиеДанныеКакСтруктура = Новый Структура(КлючиСтруктуры);
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);
	
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	Возврат СотрудникиФормыВнутренний.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
КонецФункции

Функция КлючиСтруктурыТекущихТарифныхСтавокСотрудника() Экспорт
	Возврат СотрудникиФормыВнутренний.КлючиСтруктурыТекущихТарифныхСтавокСотрудника();
КонецФункции

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация = Неопределено, ИзФормыСотрудника = Ложь) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника);
	ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСтатусаНалогоплательщика

Функция ПолучитьСведенияОВычетахНДФЛ(ФизическоеЛицо) Экспорт
	
	ВозвращаемыйМассив = Новый Массив;
		
	Если Пользователи.РолиДоступны("ЧтениеНалоговИВзносов,ДобавлениеИзменениеНалоговИВзносов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ИмущественныеВычетыНДФЛ.ПрименятьВычетыС) КАК Период,
			|	ИмущественныеВычетыНДФЛ.Сотрудник КАК ФизическоеЛицо,
			|	ИмущественныеВычетыНДФЛ.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
			|ПОМЕСТИТЬ ВТПоследниеПериодыИмущественныхВычетов
			|ИЗ
			|	Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
			|ГДЕ
			|	ИмущественныеВычетыНДФЛ.Сотрудник = &ФизическоеЛицо
			|	И ИмущественныеВычетыНДФЛ.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ИмущественныеВычетыНДФЛ.Сотрудник,
			|	ИмущественныеВычетыНДФЛ.Организация.ГоловнаяОрганизация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации КАК МесяцРегистрации
			|ПОМЕСТИТЬ ВТСтандартныеВычетыПоНДФЛ
			|ИЗ
			|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
			|ГДЕ
			|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СтандартныеВычетыФизическихЛицНДФЛ.Период
			|ИЗ
			|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
			|ГДЕ
			|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
			|ПОМЕСТИТЬ ВТПоследнийМесяцВычетовНаДетей
			|ИЗ
			|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
			|ГДЕ
			|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо";
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(СтандартныеВычетыПоНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
			|ИЗ
			|	ВТСтандартныеВычетыПоНДФЛ КАК СтандартныеВычетыПоНДФЛ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.Регистратор КАК Регистратор,
			|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.КодВычетаЛичный КАК КодВычетаЛичный
			|ИЗ
			|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК СтандартныеВычетыФизическихЛицНДФЛСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтандартныеВычетыНаДетейНДФЛ.Регистратор КАК Регистратор,
			|	СтандартныеВычетыНаДетейНДФЛ.КодВычета КАК КодВычета,
			|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо КАК ДействуетДо,
			|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей КАК КоличествоДетей
			|ИЗ
			|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетовНаДетей КАК ПоследнийМесяцВычетовНаДетей
			|		ПО СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ПоследнийМесяцВычетовНаДетей.МесяцРегистрации
			|			И (СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо)
			|ГДЕ
			|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.Код,
			|	ДействуетДо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ИмущественныеВычетыНДФЛ.Ссылка) КАК Регистратор
			|ИЗ
			|	ВТПоследниеПериодыИмущественныхВычетов КАК ПоследниеПериодыИмущественныхВычетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
			|		ПО ПоследниеПериодыИмущественныхВычетов.ГоловнаяОрганизация = ИмущественныеВычетыНДФЛ.Организация.ГоловнаяОрганизация
			|			И ПоследниеПериодыИмущественныхВычетов.ФизическоеЛицо = ИмущественныеВычетыНДФЛ.Сотрудник
			|			И ПоследниеПериодыИмущественныхВычетов.Период = ИмущественныеВычетыНДФЛ.ПрименятьВычетыС
			|
			|СГРУППИРОВАТЬ ПО
			|	ПоследниеПериодыИмущественныхВычетов.ФизическоеЛицо,
			|	ПоследниеПериодыИмущественныхВычетов.ГоловнаяОрганизация";
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Для ИндексРезультата = 0 По 3 Цикл
			
			КлючиСтруктуры = "";
			Для Каждого Колонка Из МассивРезультатов[ИндексРезультата].Колонки Цикл
				КлючиСтруктуры = КлючиСтруктуры + ?(ПустаяСтрока(КлючиСтруктуры), "", ",") + Колонка.Имя;
			КонецЦикла;
			
			ТаблицаРезультата = МассивРезультатов[ИндексРезультата].Выгрузить();
			Если ИндексРезультата > 0 Тогда
				
				ИменаРеквизитовРегистраторов = "Дата,Номер,Организация";
				Если ИндексРезультата = 3 Тогда
					
					ИменаРеквизитовРегистраторов = ИменаРеквизитовРегистраторов + ",ПрименятьВычетыС,КодНалоговогоОргана,НалоговыйПериод";
					Для Каждого НазваниеВычета Из УчетНДФЛ.НазванияВычетовПредоставляемыхПоУведомлениюНО() Цикл
						ИменаРеквизитовРегистраторов = ИменаРеквизитовРегистраторов + "," + НазваниеВычета;
					КонецЦикла;
					
				КонецЕсли;
				
				КлючиСтруктуры = КлючиСтруктуры + "," + ИменаРеквизитовРегистраторов;
				МассивРегистраторов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРезультата, "Регистратор", Истина);
				
				РеквизитыРегистраторов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивРегистраторов, ИменаРеквизитовРегистраторов, Истина);
				
			Иначе
				ИменаРеквизитовРегистраторов = "";
			КонецЕсли;
			
			МассивСтруктур = Новый Массив;
			Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
				
				СтруктураСтрокиСтрокаРезультата = Новый Структура(КлючиСтруктуры);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиСтрокаРезультата, СтрокаРезультата);
				
				Если ИндексРезультата > 0 Тогда
					
					РеквизитыРегистратора = РеквизитыРегистраторов.Получить(СтруктураСтрокиСтрокаРезультата.Регистратор);
					Если РеквизитыРегистратора <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтруктураСтрокиСтрокаРезультата, РеквизитыРегистратора, ИменаРеквизитовРегистраторов);
					КонецЕсли;
					
				КонецЕсли;
				
				МассивСтруктур.Добавить(СтруктураСтрокиСтрокаРезультата);
				
			КонецЦикла;
			
			ВозвращаемыйМассив.Добавить(МассивСтруктур);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ВозвращаемыйМассив;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыДляДополненияФормыМестамиРаботы

Процедура УстановитьПараметрыИнфоНадписиФормыФизЛица(Форма)
	
	Если Форма.ИмеютсяАктуальныеСотрудники  Тогда
		
		ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 является нашим сотрудником. Ниже приведены места работы. Для перехода к полной информации о месте работы используйте соответствующую ссылку. Для заполнения информации о новом месте работы сотрудника используйте ссылку ""Новое место работы""'"),
			Форма.ФизическоеЛицоСсылка);
																							
	ИначеЕсли Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые Тогда
		
		ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 является нашим сотрудником. Для заполнения информации о месте работы, должности и окладе сотрудника используйте ссылку ""Новое место работы""'"),
			Форма.ФизическоеЛицоСсылка);
			
	Иначе
		
		ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не является нашим сотрудником. Для заполнения информации о месте работы, должности и окладе сотрудника используйте ссылку ""Новое место работы""'"),
			Форма.ФизическоеЛицоСсылка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НовоеМестоРаботы", "Видимость", Истина);
		
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		"Работа",
		ИнфоНадписьМестаРаботы);
	
КонецПроцедуры	

Функция ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДата, ВыводитьПодробнуюИнформацию = Ложь) 
	
	Возврат СотрудникиФормыВнутренний.ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДата, ВыводитьПодробнуюИнформацию);
	
КонецФункции

Функция ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации,ДатаСведений) 
	
	Возврат СотрудникиФормыВнутренний.ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений);
	
КонецФункции	

Процедура УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника)
	
	СотрудникиФормыВнутренний.УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника);
	
КонецПроцедуры

Функция ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение = Неопределено) Экспорт
	
	Возврат СотрудникиФормыВнутренний.ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение);
	
КонецФункции

Процедура ЗаполнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", СотрудникИсключение = Неопределено, ВыводитьПодробнуюИнформацию = Ложь) Экспорт
	
	ЧислоОтображаемыхМестРаботы = 4;
	
	СоответствиеКомандСотрудникам = Новый Соответствие;
	
	ТаблицаПоРабочимМестам = ДругиеРабочиеМеста(Форма.ФизическоеЛицоСсылка, СотрудникИсключение);
	
	// Удаляем записи с не заполненной организацией.
	МассивСтрокСПустойОрганизацией = ТаблицаПоРабочимМестам.НайтиСтроки(Новый Структура("Организация", NULL));
	Для Каждого ЭлементМассивСтрокСПустойОрганизацией Из МассивСтрокСПустойОрганизацией Цикл
		ТаблицаПоРабочимМестам.Удалить(ЭлементМассивСтрокСПустойОрганизацией);
	КонецЦикла;
	
	Форма.КоличествоСотрудников = 0;
	Если ВыводитьПодробнуюИнформацию Тогда
		Форма.ИмеютсяСотрудники = Ложь;
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
		Если Форма.КоличествоСотрудников >= ЧислоОтображаемыхМестРаботы Тогда
			Прервать;	
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицаПоРабочимМестам.Организация, "Наименование,НаименованиеСокращенное");
		УстановитьПривилегированныйРежим(Ложь);
		 
		Форма.КоличествоСотрудников = Форма.КоличествоСотрудников + 1;
		
		Если ВыводитьПодробнуюИнформацию Тогда
			ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, Форма.КоличествоСотрудников, ИмяГруппы, ИмяПоследнегоЭлементаГруппы);
		Иначе
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.Наименование) Тогда
				Продолжить;
			КонецЕсли;	
			ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, "ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, ИмяГруппы);
		КонецЕсли;	
			
		СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, СтрокаТаблицаПоРабочимМестам.Сотрудник);
		
		Если ВыводитьПодробнуюИнформацию Тогда
			Форма.ИмеютсяАктуальныеСотрудники = (Форма.ИмеютсяАктуальныеСотрудники Или СтрокаТаблицаПоРабочимМестам.СотрудникАктуален);
			Форма.ИмеютсяСотрудники = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаПоРабочимМестам.Количество() > ЧислоОтображаемыхМестРаботы Тогда
		ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию);
	КонецЕсли;	
	
	Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
	
КонецПроцедуры	

Процедура ОбработкаИзмененияДанныхОРабочемМесте(Форма, Сотрудник, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", ВыводитьПодробнуюИнформацию = Ложь) Экспорт 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;	
	
	ЧислоОтображаемыхМестРаботы = 4;
	СоответствиеКомандСотрудникам = Новый Соответствие;
	
	ТаблицаРабочиеМеста = ДругиеРабочиеМеста(Форма.ФизическоеЛицоСсылка);
	
	ТаблицаПоРабочимМестам = ТаблицаРабочиеМеста.Скопировать(Новый Структура("Сотрудник", Сотрудник));
	
	Если ТаблицаПоРабочимМестам.Количество() > 0 Тогда
		
		СтрокаТаблицаПоРабочимМестам = ТаблицаПоРабочимМестам[0];
		
		ИмяКоманды = ПолучитьИмяКомандыОткрытияФормыСотрудника(Сотрудник, Форма.СоответствиеКомандСотрудникам);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицаПоРабочимМестам.Организация) Тогда
			
			Если ИмяКоманды <> Неопределено Тогда
				
				УдалитьМестоРаботыВФорме(Форма, ИмяКоманды, ЧислоОтображаемыхМестРаботы, ВыводитьПодробнуюИнформацию);
				
			КонецЕсли;
			
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицаПоРабочимМестам.Организация, "Наименование,НаименованиеСокращенное");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ИмяКоманды = Неопределено Тогда
				
				СоответствиеКомандСотрудникам = Новый Соответствие;
				Если Форма.КоличествоСотрудников < ЧислоОтображаемыхМестРаботы Тогда 
					Форма.КоличествоСотрудников = Форма.КоличествоСотрудников + 1;
					
					Если ВыводитьПодробнуюИнформацию Тогда
						ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, Форма.КоличествоСотрудников, ИмяГруппы, ИмяПоследнегоЭлементаГруппы);
					Иначе
						ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, "ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, ИмяГруппы);
					КонецЕсли;
					СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, СтрокаТаблицаПоРабочимМестам.Сотрудник);
					
				ИначеЕсли ВыводитьПодробнуюИнформацию Тогда
					СместитьМестаРаботыВФорме(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, ЧислоОтображаемыхМестРаботы, Форма.СоответствиеКомандСотрудникам);
					Если Форма.Команды.Найти("ДругиеМестаРаботы") = Неопределено Тогда
						ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию);
					КонецЕсли;
				КонецЕсли;	
				
				Для Каждого КлючЗначение Из Форма.СоответствиеКомандСотрудникам Цикл
					СоответствиеКомандСотрудникам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);		
				КонецЦикла;	
				
				Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
				
			Иначе
				Форма.Элементы[ИмяКоманды].Заголовок = ЗаголовокКнопкиОткрытияСотрудника(СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), ВыводитьПодробнуюИнформацию);
				НомерСотрудника = СтрЗаменить(ИмяКоманды, "ОткрытьФормуСотрудника", "");
				Если ВыводитьПодробнуюИнформацию Тогда
					СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, ТекущаяДатаСеанса());	
					Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
						Форма[КлючЗначение.Ключ + НомерСотрудника] = КлючЗначение.Значение;
					КонецЦикла;	
					Форма["СотрудникАктуален" + НомерСотрудника] = СтрокаТаблицаПоРабочимМестам.СотрудникАктуален;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ВыводитьПодробнуюИнформацию Тогда
				Форма.ИмеютсяАктуальныеСотрудники = Ложь;
				Для Сч = 1 По Форма.КоличествоСотрудников Цикл
					Если Форма["СотрудникАктуален" + Сч] Тогда
						Форма.ИмеютсяАктуальныеСотрудники = Истина;
					КонецЕсли;	
				КонецЦикла;
				УстановитьПараметрыИнфоНадписиФормыФизЛица(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдалитьМестоРаботыВФорме(Форма, ИмяКоманды, ЧислоОтображаемыхМестРаботы, ВыводитьПодробнуюИнформацию)

	НомерСотрудника = Число(СтрЗаменить(ИмяКоманды, "ОткрытьФормуСотрудника", ""));
	
	СоответствиеКомандСотрудникам = Новый Соответствие;
	Для Каждого КлючЗначение Из Форма.СоответствиеКомандСотрудникам Цикл
		НомерСотрудникаСоответствия = Число(СтрЗаменить(КлючЗначение.Ключ, "ОткрытьФормуСотрудника", ""));
		Если НомерСотрудникаСоответствия < НомерСотрудника Тогда
			СоответствиеКомандСотрудникам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);		
		КонецЕсли; 
	КонецЦикла;	
	
	КоличествоСотрудников = Форма.КоличествоСотрудников;
	
	Если НомерСотрудника < КоличествоСотрудников Тогда
		
		Для Сч = НомерСотрудника По КоличествоСотрудников - 1 Цикл
			Если ВыводитьПодробнуюИнформацию Тогда
				Форма["ИнфоНадписьПериодРаботы" + Строка(Сч)] = Форма["ИнфоНадписьПериодРаботы" + Строка(Сч + 1)]; 
				Форма["ИнфоНадписьОрганизация" + Строка(Сч)]  = Форма["ИнфоНадписьОрганизация"+ Строка(Сч + 1)]; 
				Форма["ИнфоНадписьДолжность" + Строка(Сч)]	  = Форма["ИнфоНадписьДолжность" + Строка(Сч + 1)]; 
				Форма["ИнфоНадписьОклад" + Строка(Сч)]  = Форма["ИнфоНадписьОклад" + Строка(Сч + 1)]; 
				Форма["СотрудникАктуален" + Строка(Сч)] = Форма["СотрудникАктуален" + Строка(Сч + 1)];
			КонецЕсли;
			Форма.Элементы["ОткрытьФормуСотрудника" + Строка(Сч)].Заголовок = Форма.Элементы["ОткрытьФормуСотрудника" + Строка(Сч + 1)].Заголовок;
			СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Строка(Сч),  Форма.СоответствиеКомандСотрудникам["ОткрытьФормуСотрудника" + Строка(Сч + 1)]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыводитьПодробнуюИнформацию Тогда
		Форма.Элементы.Удалить(Форма.Элементы.Найти("ДанныеОРабочемМестеГруппа" + КоличествоСотрудников));
		Форма.Команды.Удалить(Форма.Команды.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников));
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("СотрудникАктуален" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьПериодРаботы" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьОрганизация" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьДолжность" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьОклад" + КоличествоСотрудников);
		
		Форма.ИзменитьРеквизиты(,МассивРеквизитов);
		
	Иначе	
		Форма.Элементы.Удалить(Форма.Элементы.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников + "Группа"));
		Форма.Команды.Удалить(Форма.Команды.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников));
	КонецЕсли;
	
	Форма.КоличествоСотрудников = КоличествоСотрудников - 1;
	Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
	Если Форма.КоличествоСотрудников < 4 И Форма.Команды.Найти("ДругиеМестаРаботы") <> Неопределено Тогда
		Если Форма.Команды.Найти("ДругиеМестаРаботы") Тогда
			Форма.Команды.Удалить("ДругиеМестаРаботы");
		КонецЕсли; 
		Если Форма.Элементы.Найти("ДругиеМестаРаботыКнопка") Тогда
			Форма.Элементы.Удалить("ДругиеМестаРаботыКнопка");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СместитьМестаРаботыВФорме(Форма, ДанныеСотрудника, РеквизитыОрганизации, ЧислоОтображаемыхМестРаботы, СоответствиеКомандСотрудникамДанныеФормы)
	СоответствиеКомандСотрудникам = Новый Соответствие;
	Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые = Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые Или Форма["СотрудникАктуален" + Строка(ЧислоОтображаемыхМестРаботы)]; 
	Для Сч = 0 По ЧислоОтображаемыхМестРаботы - 2 Цикл
		НомерМестаРаботы = ЧислоОтображаемыхМестРаботы - Сч;
		Форма["ИнфоНадписьПериодРаботы" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьПериодРаботы" + Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьОрганизация" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьОрганизация"+ Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьДолжность" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьДолжность" + Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьОклад" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьОклад" + Строка(НомерМестаРаботы - 1)]; 
		Форма["СотрудникАктуален" + Строка(НомерМестаРаботы)] = Форма["СотрудникАктуален" + Строка(НомерМестаРаботы - 1)];
		Форма.Элементы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы)].Заголовок = Форма.Элементы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы - 1)].Заголовок;
		СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы),  СоответствиеКомандСотрудникамДанныеФормы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы - 1)]);		
	КонецЦикла;	
	
	СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДатаСеанса());
	Форма.Элементы["ОткрытьФормуСотрудника1"].Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Истина);

	Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
		Форма[КлючЗначение.Ключ + "1"] = КлючЗначение.Значение;
	КонецЦикла;
	Форма["СотрудникАктуален1"] = ДанныеСотрудника.СотрудникАктуален;
	СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника1", ДанныеСотрудника.Сотрудник);
	
	СоответствиеКомандСотрудникамДанныеФормы = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам); 	
КонецПроцедуры	

Функция ПолучитьИмяКомандыОткрытияФормыСотрудника(Сотрудник, СоответствиеКомандСотрудникам)
	Для Каждого КлючЗначение Из СоответствиеКомандСотрудникам Цикл
		Если КлючЗначение.Значение = Сотрудник Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Неопределено;
КонецФункции	

Процедура ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, ДанныеСотрудника, РеквизитыОрганизации, НомерСотрудника, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "")
	
	МассивРеквизитов = Новый Массив;
	
	РеквизитСотрудникАктуален = Новый РеквизитФормы("СотрудникАктуален" + НомерСотрудника, Новый ОписаниеТипов("Булево"));
	МассивРеквизитов.Добавить(РеквизитСотрудникАктуален);
	
	РеквизитИнфоНадписьПериодРаботы = Новый РеквизитФормы("ИнфоНадписьПериодРаботы" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьПериодРаботы);
	
	РеквизитИнфоНадписьОрганизация = Новый РеквизитФормы("ИнфоНадписьОрганизация" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	РеквизитИнфоНадписьОрганизация.Заголовок = НСтр("ru = 'Организация'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьОрганизация);
	
	РеквизитИнфоНадписьДолжность = Новый РеквизитФормы("ИнфоНадписьДолжность" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	РеквизитИнфоНадписьДолжность.Заголовок = НСтр("ru = 'Должность'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьДолжность);
	
	РеквизитИнфоНадписьОклад = Новый РеквизитФормы("ИнфоНадписьОклад" + НомерСотрудника, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РеквизитИнфоНадписьОклад.Заголовок =  НСтр("ru = 'Оклад'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьОклад);

	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Форма[РеквизитСотрудникАктуален.Имя] = ДанныеСотрудника.СотрудникАктуален;
	
	Команда = Форма.Команды.Добавить("ОткрытьФормуСотрудника" + НомерСотрудника);
	Команда.Действие  = "Подключаемый_ОткрытьФормуСотрудника";
	Команда.Отображение  =  ОтображениеКнопки.Авто;
	
	ПоследнийЭлементГруппы = Форма.Элементы.Найти(ИмяПоследнегоЭлементаГруппы);
	
	ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Найти("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника);
	Если ГруппаФормыДанныеОРабочемМесте = Неопределено Тогда
		
		Если ПоследнийЭлементГруппы = Неопределено Тогда 
			ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы]);
		Иначе
			ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы], ПоследнийЭлементГруппы);
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппаФормыДанныеОРабочемМесте.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыДанныеОРабочемМесте.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормыДанныеОРабочемМесте.ОтображатьЗаголовок = Ложь;
	ГруппаФормыДанныеОРабочемМесте.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ПолеНадписи =  Форма.Элементы.Добавить("ИнфоНадписьПериодРаботы" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормыДанныеОРабочемМесте);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьПериодРаботы.Имя;
	ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ГруппаФормыДанныеОРабочемМестеГоризонтальная = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппа" + НомерСотрудника, Тип("ГруппаФормы"), ГруппаФормыДанныеОРабочемМесте);
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.ОтображатьЗаголовок = Ложь;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.РастягиватьПоВертикали = Ложь;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.РастягиватьПоГоризонтали = Ложь;
	
	Кнопка = Форма.Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), ГруппаФормыДанныеОРабочемМестеГоризонтальная);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Высота = 2;
	Кнопка.Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Истина);
	
	ГруппаФормы = Форма.Элементы.Вставить("ГруппаИнфоНадписи" + НомерСотрудника, Тип("ГруппаФормы"), ГруппаФормыДанныеОРабочемМестеГоризонтальная, Кнопка);
	ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.РастягиватьПоВертикали = Ложь;
	ГруппаФормы.РастягиватьПоГоризонтали = Ложь;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьОрганизация" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьОрганизация.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьДолжность" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьДолжность.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	Если ДанныеСотрудника.Владелец().Колонки.Найти("ТекущаяТарифнаяСтавка") <> Неопределено
		И ЗначениеЗаполнено(ДанныеСотрудника["ТекущаяТарифнаяСтавка"]) Тогда
		
		ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьОклад" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
		ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьОклад.Имя;
		ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
		ПолеНадписи.ТолькоПросмотр = Истина;
		ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ПолеНадписи.Ширина = 12;
		ПолеНадписи.РастягиватьПоГоризонтали = Истина;
		
	КонецЕсли;
	
	СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДатаСеанса());
	
	Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
		Форма[КлючЗначение.Ключ + НомерСотрудника] = КлючЗначение.Значение;
	КонецЦикла;
	
	УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника);
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, ДанныеСотрудника, РеквизитыОрганизации, ИмяКоманды, ИмяГруппы)
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "Подключаемый_ОткрытьФормуСотрудника";
	Команда.Отображение  =  ОтображениеКнопки.Авто;
	
	ГруппаФормы = Форма.Элементы.Вставить(Команда.Имя + "Группа", Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы]);
	ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.РастягиватьПоВертикали = Ложь;
	ГруппаФормы.РастягиватьПоГоризонтали = Ложь;
	
	Кнопка = Форма.Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), ГруппаФормы);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Высота = 2;
	Кнопка.ВысотаЗаголовка = 2;
	Кнопка.Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Ложь);
	
КонецПроцедуры

Процедура ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию)
	
	Команда = Форма.Команды.Добавить("ДругиеМестаРаботы");
	Команда.Действие = "Подключаемый_ДругиеМестаРаботы";
	Команда.Заголовок = НСтр("ru = 'Другие места работы'");
	Команда.Отображение = ОтображениеКнопки.Авто;
	
	Если ВыводитьПодробнуюИнформацию
		И Форма.Элементы.Найти("НовоеМестоРаботы") <> Неопределено Тогда
		
		Кнопка = Форма.Элементы.Вставить("ДругиеМестаРаботыКнопка", Тип("КнопкаФормы"), Форма.Элементы[ИмяГруппы], Форма.Элементы.НовоеМестоРаботы);
		
	Иначе
		Кнопка = Форма.Элементы.Вставить("ДругиеМестаРаботыКнопка", Тип("КнопкаФормы"), Форма.Элементы[ИмяГруппы]);
	КонецЕсли;
	
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.ИмяКоманды = Команда.Имя;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиФормыВнутренний.ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ);
	
КонецПроцедуры

Процедура УстановитьРежимыРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") Тогда

		ОбновитьРежимыРаботыФормы();
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьРежимыРаботыФормы() Экспорт
	
	СотрудникиФормыВнутренний.ОбновитьРежимыРаботыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДополнительнымиФормами

Процедура ПрочитатьДанныеИзХранилищаВФорму(Форма, ОписаниеДополнительнойФормы, АдресВХранилище) Экспорт
	
	РедактируемыеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Для каждого ДанныеФормы Из РедактируемыеДанные.ДополнительныеДанные Цикл
		
		Если ТипЗнч(ДанныеФормы.Значение) = Тип("Структура") Тогда
			
			Если Форма[ДанныеФормы.Ключ] = Неопределено Тогда
				Форма[ДанныеФормы.Ключ] = ДанныеФормы.Значение;
			Иначе
				ЗаполнитьЗначенияСвойств(Форма[ДанныеФормы.Ключ], ДанныеФормы.Значение);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеФормы.Значение) = Тип("Массив") Тогда
			Форма[ДанныеФормы.Ключ].Очистить();
			Для каждого ЗаписьДанных Из ДанныеФормы.Значение Цикл
				НоваяЗапись = Форма[ДанныеФормы.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);
			КонецЦикла;
		Иначе
			Форма[ДанныеФормы.Ключ] = ДанныеФормы.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеФормы Из РедактируемыеДанные.РеквизитыОбъекта Цикл
		
		ПутьКДанным = "";
		Если ОписаниеДополнительнойФормы.РеквизитыОбъекта.Свойство(ДанныеФормы.Ключ, ПутьКДанным) Тогда
			
			Если ТипЗнч(ДанныеФормы.Значение) = Тип("Массив") Тогда
				
				Данные = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
				Данные.Очистить();
				Для каждого ЗаписьДанных Из ДанныеФормы.Значение Цикл
					НоваяЗапись = Данные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);
				КонецЦикла;
				
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКДанным, ДанныеФормы.Значение);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, Форма) Экспорт
	
	ПомещаемыеДанные = Новый Структура;
	ПомещаемыеДанные.Вставить("ДополнительныеДанные", Новый Структура);
	ПомещаемыеДанные.Вставить("РеквизитыОбъекта", Новый Структура);
	
	Для каждого РедактируемыйРеквизит Из ОписаниеДополнительнойФормы.ДополнительныеДанные Цикл
		
		Если ТипЗнч(Форма[РедактируемыйРеквизит.Ключ]) = Тип("ДанныеФормыСтруктура") Тогда
			
			ПомещаемоеЗначение = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
				Форма[РедактируемыйРеквизит.Ключ], Метаданные.РегистрыСведений[РедактируемыйРеквизит.Ключ]);
			
		ИначеЕсли ТипЗнч(Форма[РедактируемыйРеквизит.Ключ]) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда
			
			Таблица = Форма[РедактируемыйРеквизит.Ключ].Выгрузить();
			ПомещаемоеЗначение = ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
			
		Иначе
			ПомещаемоеЗначение = Форма[РедактируемыйРеквизит.Ключ];
		КонецЕсли;
		
		ПомещаемыеДанные.ДополнительныеДанные.Вставить(РедактируемыйРеквизит.Ключ, ПомещаемоеЗначение);
		
	КонецЦикла;
	
	Для каждого РедактируемыйРеквизит Из ОписаниеДополнительнойФормы.РеквизитыОбъекта Цикл
		
		Данные = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РедактируемыйРеквизит.Значение);
		Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			РедактируемыеДанные = ОбщегоНазначения.ТаблицаЗначенийВМассив(Данные.Выгрузить());
		Иначе
			РедактируемыеДанные = Данные;
		КонецЕсли;
		
		ПомещаемыеДанные.РеквизитыОбъекта.Вставить(РедактируемыйРеквизит.Ключ, РедактируемыеДанные);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ПомещаемыеДанные, Форма.УникальныйИдентификатор);
	
КонецФункции

Процедура СохранитьДанныеДополнительныхФорм(Форма, Отказ, ТекущийОбъект) Экспорт
	
	Если ТипЗнч(Форма.ПрочитанныеДанныеФорм) = Тип("ФиксированноеСоответствие") Тогда
		Для каждого ИмяФормы Из Форма.ПрочитанныеДанныеФорм Цикл
			Форма.СохранитьДанныеДополнительнойФормы(ИмяФормы.Ключ, Отказ, ТекущийОбъект); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Частный случай для форм сотрудника.
Процедура СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ, ТекущийОбъект) Экспорт
	
	СотрудникиФормыВнутренний.СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПостроительМеню

// Устанавливает в форме объекта и списка справочника Сотрудники меню ввода на основании документов.
//
// Параметры:
//			Форма
//			ИменаКонтейнеров - строка, групп командной панели в которые встраивается меню, перечисленные
//						через запятую.
//			ПараметрыПостроения - Структура, содержащая кадровые данные сотрудника, для формы которого производится
//						построение меню (ОформленПоТрудовомуДоговору, ДатаУвольнения).
//
Процедура УстановитьМенюВводаНаОсновании(Форма, ИменаКонтейнеров, ПараметрыПостроения = Неопределено) Экспорт
	
	ОписаниеМеню = ОписаниеМенюВводаНаОсновании(ПараметрыПостроения);
	ЗарплатаКадры.УстановитьМенюВФорме(Форма, ОписаниеМеню, ИменаКонтейнеров);
	
КонецПроцедуры

// Добавляет пункты меню в раздел.
//
Процедура ДобавитьПунктыВРазделМеню(Подменю, ПунктыМеню, ПредставленияДоступныхОбъектов) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подменю.ИменаНастроенныхОбъектовМетаданных, ПунктыМеню);
	
	Для каждого ПунктМеню Из ПунктыМеню Цикл
		
		Если ПустаяСтрока(ПунктМеню) Тогда
			Подменю.Пункты.Добавить(ЗарплатаКадры.РазделительМеню());
			Продолжить;
		КонецЕсли; 
		
		ПредставлениеПункта = ПредставленияДоступныхОбъектов.Получить(ПунктМеню);
		Если ПредставлениеПункта = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяКоманды = ИмяКомандыВводаНаОсновании(ПунктМеню);
		
		Подменю.Пункты.Добавить(ЗарплатаКадры.ПунктМеню(
			ПредставлениеПункта, ИмяКоманды, "Подключаемый_ОформитьНаОсновании"));
		
	КонецЦикла;
			
КонецПроцедуры

// Возвращает массив полных имен объектов метаданных, основание для которых является
// элемент справочника Сотрудники, и которые не вошли в число настраиваемых.
//
Функция ПунктыМенюНеНастроенныхОбъектов(ОписаниеМеню) Экспорт
	
	ПунктыМеню = Новый Массив;
	ПунктыМенюНеНастроенныхОбъектов = Новый Массив;
	
	Если ОписаниеМеню.Свойство("ИменаНастроенныхОбъектовМетаданных") Тогда
		ИменаНастроенныхОбъектов = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеМеню.ИменаНастроенныхОбъектовМетаданных);
	Иначе
		ИменаНастроенныхОбъектов = Новый Массив;
	КонецЕсли;

	Для каждого ОписаниеРаздела Из ОписаниеМеню.Пункты Цикл
		Если ОписаниеРаздела.Вид = ВидГруппыФормы.Подменю Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаНастроенныхОбъектов, ОписаниеРаздела.ИменаНастроенныхОбъектовМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	МетаданныеСправочникаСотрудники = Метаданные.Справочники.Сотрудники;
	Для каждого Документ Из Метаданные.Документы Цикл
		
		Если Документ.ВводитсяНаОсновании.Содержит(МетаданныеСправочникаСотрудники) Тогда
			
			ИмяОбъектаМетаданных = 
				ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Документ) + "." + Документ.Имя;
				
			Если ИменаНастроенныхОбъектов.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
				ПунктыМенюНеНастроенныхОбъектов.Добавить(ИмяОбъектаМетаданных);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ПунктыМенюНеНастроенныхОбъектов.Количество() > 0 Тогда
		
		ПунктыМеню.Добавить("");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПунктыМеню, ПунктыМенюНеНастроенныхОбъектов);
		
	КонецЕсли; 
	
	Возврат ПунктыМеню;
	
КонецФункции

// Формирует имя команды по переданному полному имени объекта метаданных.
//
Функция ИмяКомандыВводаНаОсновании(ПолноеИмяОбъектаМетаданных)
	
	Возврат "КомандаВводаНаОсновании_" + СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "_");
	
КонецФункции

Функция ОписаниеМенюВводаНаОсновании(ПараметрыПостроения)
	
	Возврат СотрудникиФормыВнутренний.ОписаниеМенюВводаНаОсновании(ПараметрыПостроения);
	
КонецФункции

#КонецОбласти

#Область ИсторияВзаимоотношенийСКомпанией

Процедура ПеренестиИсториюВзаимоотношенийПоРезультатуДлительнойОперации(История, Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	История.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПолучитьИзВременногоХранилища(Результат.АдресРезультата), История); 

КонецПроцедуры

Функция ТаблицаИсторииВзаимоотношений()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Ссылка");
	Таблица.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Роль", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ГруппаРоли", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьИсториюВзаимоотношений(История, ФизическиеЛица)
	СотрудникиФормыВнутренний.ЗаполнитьИсториюВзаимоотношений(История, ФизическиеЛица);
КонецПроцедуры

Процедура НастроитьОтборИсторииВзаимоотношений(Форма, ПереключательОтбора, ЗначениеОтбора)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ПриНастройкеОтбораИсторииВзаимоотношенийФизическогоЛица(Форма, ПереключательОтбора);
	КонецЕсли;

	Если ПереключательОтбора.СписокВыбора.Количество() < 3 Тогда
		// Скрываем переключатель отбора: если в нем всего 2 значения (включая Все), то он не имеет смысла. 
		ПереключательОтбора.Видимость = Ложь;
	КонецЕсли;

	ЗначениеОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИсторияВзаимоотношений", "ОтборПоРоли", 0);
	СотрудникиКлиентСервер.УстановитьОтборИсторииРаботыПоГруппеРолейФизическогоЛица(Форма, ЗначениеОтбора);

КонецПроцедуры

Процедура СохранитьОтборИсторииВзаимоотношенийПоГруппеРолейФизическогоЛица(ЗначениеОтбора) Экспорт
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИсторияВзаимоотношений", "ОтборПоРоли", ЗначениеОтбора);
КонецПроцедуры

Процедура УстановитьВидимостьКомандыНовоеМестоРаботы(Форма)
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.Сотрудники) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "НовоеМестоРаботы", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
