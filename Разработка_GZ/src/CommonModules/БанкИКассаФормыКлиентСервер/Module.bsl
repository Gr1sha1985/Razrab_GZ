#Область СлужебныеПроцедурыИФункции

// Позволяет идентифицировать однострочную форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Булево
//
Функция ФормаДокументаОднострочная(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаДокументаОднострочная") > 0;
	
КонецФункции

// Позволяет идентифицировать форму, предназначенную для работы в режиме интеграции с банком
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
//  Булево - Истина, если форма предназначена для работы в режиме интеграции с банком
//
Функция ФормаДокументаИнтеграцииСБанком(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаДокументаОднострочнаяИнтеграцияСБанком") > 0;
	
КонецФункции

// Управляет видимостью набора полей аналитики учета, которые в однострочной форме документа движения денег могут выводиться
// - непосредственно на форме, если расшифровка суммы документа не требуется
// - в отдельной форме, если сумма расшифровывается несколькими строками.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - настраиваемая форма документа движения денег.
//  НазваниеТабличнойЧасти 
//             - Строка - имя поля, отображающего данные табличной части РасшифровкаПлатежа.
//               См. например, ПриходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа
//             - Неопределено - форма не предусматривает поля для отображения аналитики
//
Процедура УстановитьВидимостьПолейГруппыБезЗакрывающихДокументов(Форма, НазваниеТабличнойЧасти) Экспорт
	
	Если ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеТабличнойЧасти) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	НепосредственноеРедактирование = (Форма.Объект.РасшифровкаПлатежа.Количество() <= 1); // Непосредственно на основной форме, без формы расшифровки
	
	УстановитьВидимостьПоля(
		Форма.Элементы,
		"СтатьяДвиженияДенежныхСредствБезДокументов",
		НазваниеТабличнойЧасти,
		НепосредственноеРедактирование);
		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтражениеДоходаВидимость") Тогда
		
		УстановитьВидимостьПоля(
			Форма.Элементы,
			"ОтражениеДоходаПредставление",
			НазваниеТабличнойЧасти,
			Форма.ОтражениеДоходаВидимость И НепосредственноеРедактирование);
			
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью поля выбора отражения аванса в доходах.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - настраиваемая форма документа поступления денег.
//  НазваниеТабличнойЧасти 
//             - Строка - имя поля, отображающего данные табличной части РасшифровкаПлатежа.
//               См. например, ПриходныйКассовыйОрдерФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа
//             - Неопределено - форма не предусматривает поля для отображения табличной части.
//
Процедура УстановитьВидимостьОтраженияАванса(Форма, НазваниеТабличнойЧасти) Экспорт
	
	Если ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		// В режиме интеграции с банком отсутствует выбор варианта отражения аванса в НУ.
		Возврат;
	КонецЕсли;
	
	НепосредственноеРедактирование = (Форма.Объект.РасшифровкаПлатежа.Количество() <= 1); // Непосредственно на основной форме, без формы расшифровки
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтражениеАвансаВидимость") Тогда
		
		УстановитьВидимостьПоля(
			Форма.Элементы,
			"ОтражениеАвансаПредставление",
			НазваниеТабличнойЧасти,
			Форма.ОтражениеАвансаВидимость И НепосредственноеРедактирование);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьПоля(Элементы, СобственноеИмяПоля, ПрефиксСписка, УсловиеВидимости)
	
	ИмяПоля = ПрефиксСписка + СобственноеИмяПоля;
	
	Поле = Элементы.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле.Видимость = УсловиеВидимости;
	
КонецПроцедуры

#Область ОтражениеДоходов

// Проверяет настройку формы разработчиком для помещения элементов, управляющих отражением доходов.
// Если состав и свойства реквизитов формы не удовлетворяют требованиям - вызывается исключение.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - проверяемая форма.
//
Процедура ПроверитьВозможностьОтраженияДоходов(Форма) Экспорт
	
	ТекстИсключения = "";
	
	Если Не ФормаПоддерживаетОтражениеДоходов(Форма, ТекстИсключения) Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет настройку формы разработчиком для помещения элементов, управляющих отражением доходов.
// Если состав и свойства реквизитов формы не удовлетворяют требованиям - вызывается исключение.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - проверяемая форма.
//  СообщениеОбОшибке - Строка - при несоответствии требованиям будет заполнен информацией об ошибке.
//
// Возвращаемое значение:
//   Булево  - Истина, если состав и свойства реквизитов формы соответствуют требованиям.
//
Функция ФормаПоддерживаетОтражениеДоходов(Форма, СообщениеОбОшибке = "") Экспорт
	
	ИмяРеквизитаВариантыОтражения = ИмяРеквизитаВариантыОтраженияДоходов();
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаВариантыОтражения) Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В форме ""%1"" отсутствует реквизит для списка вариантов отражения доходов в налоговом учете.'"),
			Форма.ИмяФормы);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Форма[ИмяРеквизитаВариантыОтражения]) <> Тип("СписокЗначений") Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В форме ""%1"" назначен неверный тип реквизиту - списку вариантов отражения доходов в налоговом учете.'"),
			Форма.ИмяФормы);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает значение порядка отражения доходов по его представлению.
//
// Параметры:
// ОтражениеДоходовПредставление  - Строка - представление варианта отражения доходов
//  СписокВариантов               - СписокЗначений - список вариантов отражения доходов,
//                                  см. УчетКассовымМетодом.ДопустимыеВариантыОтраженияДоходов()
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ПорядокОтраженияАвансов, СправочникСсылка.Патенты, Строка  - порядок отражения доходов
//                                                                                   в соответствии со списком вариантов.
//
Функция ВариантОтраженияДоходовЗначение(ОтражениеДоходовПредставление, СписокВариантов) Экспорт
	
	ОтражениеДоходов = Неопределено;
	
	Для Каждого Вариант Из СписокВариантов Цикл
		Если СокрЛП(Вариант.Представление) = СокрЛП(ОтражениеДоходовПредставление) Тогда
			ОтражениеДоходов = Вариант.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтражениеДоходов;
	
КонецФункции

// Возвращает представление порядка отражения доходов по его значению.
//
// Параметры:
// ОтражениеДоходов  - ПеречислениеСсылка.ПорядокОтраженияАвансов, СправочникСсылка.Патенты, Строка  - порядок отражения доходов.
//  СписокВариантов               - СписокЗначений - список вариантов отражения доходов,
//                                  см. УчетКассовымМетодом.ДопустимыеВариантыОтраженияДоходов()
//
// Возвращаемое значение:
//  Строка  - представление порядка отражения доходов в соответствии со списком вариантов.
//
Функция ВариантОтраженияДоходовПредставление(ОтражениеДоходов, СписокВариантов) Экспорт
	
	Вариант = СписокВариантов.НайтиПоЗначению(ОтражениеДоходов);
	
	Если Вариант <> Неопределено Тогда
		Возврат Вариант.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает список вариантов отражения доходов, хранящийся в реквизитах формы.
// Данные списка предварительно должны быть заполнены с помощью БанкИКассаФормы.НастроитьВыборОтраженияДоходов.
// Заполнение списка здесь не проверяется.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма,
//           должна удовлетворять требованиям проверки ПроверитьВозможностьОтраженияДоходов().
//
// Возвращаемое значение:
//   СписокЗначений   - список вариантов отражения доходов.
//
Функция ВариантыОтраженияДоходов(Форма) Экспорт
	
	Возврат Форма[ИмяРеквизитаВариантыОтраженияДоходов()];
	
КонецФункции

// Возвращает имя обязательного реквизита форм, предназначенного для хранения
// списка вариантов отражения доходов.
//
// Возвращаемое значение:
//   Строка   - имя обязательного реквизита форм
//
Функция ИмяРеквизитаВариантыОтраженияДоходов()
	
	Возврат "ВариантыОтраженияДоходов";
	
КонецФункции

// Заполняет список выбора поля, предназначенного для настройки отражения доходов.
// Список заполняется представлениями переданных вариантов отражения доходов.
//
// Параметры:
//  СписокВыбора  - СписокЗначений - список выбора поля.
//
Процедура ОбновитьСписокВыбораОтраженияДоходов(СписокВыбора, СписокВариантов) Экспорт
	
	СписокВыбора.Очистить();
	
	// Строковые представления вариантов используются в списке выбора для того,
	// чтобы после выбора и до окончания редактирования строки текст в поле не очищался.
	Для Каждого Вариант Из СписокВариантов Цикл
		СписокВыбора.Добавить(Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
