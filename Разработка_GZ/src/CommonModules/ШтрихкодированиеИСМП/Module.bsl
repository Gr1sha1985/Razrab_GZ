#Область ПрограммныйИнтерфейс

// Приводит код маркировки к виду, необходимому для системы ИС МП.
// 
// Параметры:
//  СтрокаКодаМаркировки - Структура - Строка кода маркировки.
//  ПараметрыНормализации - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки
// Возвращаемое значение:
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиИСМП(СтрокаКодаМаркировки, ПараметрыНормализации) Экспорт
	
	ЗначениеДляПоиска = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализации);
	
	Возврат ЗначениеДляПоиска;
	
КонецФункции

// Получает вид продукции по GTIN на остатки.
// 
// Параметры:
// 	КодМаркировки - Строка                                    - Код маркировки.
// 	Организация   - Неопределено, ОпределяемыйТип.Организация - Организация, владелец GTIN на остатки.
// Возвращаемое значение:
// 	Неопределено, Массив из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции кода маркировки остатков.
Функция ВидыПродукцииПоКодуМаркировкиОстатков(КодМаркировки, Организация = Неопределено) Экспорт

	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировки);
	Если ДанныеРазбора = Неопределено Или Не ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивДанныхЗаполнения = Новый Массив;

	СтрокаДанных = Новый Структура(
		"GTIN, ВидПродукции, Номенклатура, Представление");
	СтрокаДанных.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;

	МассивДанныхЗаполнения.Добавить(СтрокаДанных);

	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		МассивДанныхЗаполнения, Организация, , "Представление");

	МассивРезультат = Новый Массив;
	ВидПродукции    = МассивДанныхЗаполнения[0].ВидПродукции;

	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		
		МассивРезультат.Добавить(ВидПродукции);
		
	Иначе
		
		Для Каждого ВидПродукции Из ДанныеРазбора.ВидыПродукции Цикл
			Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Тогда
				МассивРезультат.Добавить(ВидПродукции);
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;

	Возврат МассивРезультат;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует новую таблицу значений для поиска в пуле кодов маркировки.
// 
// Параметры:
//   КолонкиВЕТИС   - Булево - добавлять колонки специфики маркировки ВетИС.
// Возвращаемое значение:
//   ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш-сумма кода маркировки.
Функция НоваяТаблицаПоискаКодаМаркировкиВПуле(КолонкиВЕТИС = Ложь) Экспорт
	
	КодыМаркировки = Новый ТаблицаЗначений;
	КодыМаркировки.Колонки.Добавить(
		"КодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	КодыМаркировки.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип);
	КодыМаркировки.Колонки.Добавить(
		"ИсходныйКодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	
	Если КолонкиВЕТИС Тогда
		КодыМаркировки.Колонки.Добавить(
			"ИдентификаторПроисхожденияВЕТИС",
			Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
		КодыМаркировки.Колонки.Добавить(
			"Скоропортящаяся",
			Новый ОписаниеТипов("Булево"));
		КодыМаркировки.Колонки.Добавить(
			"ГоденДо",
			Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	Возврат КодыМаркировки;
	
КонецФункции

// Добавляет код маркировки в коллекцию для поиска в пуле.
// 
// Параметры:
// 	ДанныеСтроки   - Строка, СтрокаТаблицыЗначений - Значение кода маркировки или строка данных.
// 	КодыМаркировки - См. НоваяТаблицаПоискаКодаМаркировкивПуле.
// 	ЗаполнитьКолонкиВЕТИС - Булево - необходимость заполнения колонок с данными для маркировки ветис
//
Процедура ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(ДанныеСтроки, КодыМаркировки, ЗаполнитьКолонкиВЕТИС = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеСтроки) = Тип("Строка") Тогда
		
		НоваяСтрока                        = КодыМаркировки.Добавить();
		НоваяСтрока.КодМаркировки          = ДанныеСтроки;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		НоваяСтрока.ИсходныйКодМаркировки  = НоваяСтрока.КодМаркировки;
		
	Иначе
		
		НоваяСтрока                        = КодыМаркировки.Добавить();
		НоваяСтрока.КодМаркировки          = ДанныеСтроки.Штрихкод;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		НоваяСтрока.ИсходныйКодМаркировки  = НоваяСтрока.КодМаркировки;
		
		Если ЗаполнитьКолонкиВЕТИС Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки, "ИдентификаторПроисхожденияВЕТИС, ГоденДо, Скоропортящаяся");
		КонецЕсли;
		
		Если (ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или ДанныеСтроки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая)
			И ДанныеСтроки.ДанныеРазбора <> Неопределено
			И ДанныеСтроки.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И ДанныеСтроки.СоставКодаМаркировки.ВключаетМРЦ Тогда
			
			НастройкиСохраненияВПул = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
		
			НоваяСтрока = КодыМаркировки.Добавить();
			НоваяСтрока.КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеСтроки,
				ДанныеСтроки.ВидПродукции,
				НастройкиСохраненияВПул);
			НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
			НоваяСтрока.ИсходныйКодМаркировки  = ДанныеСтроки.Штрихкод;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск кодов маркировки в пуле, полчая дополнитени
// 
// Параметры:
// 	КодыМаркировки - См. НоваяТаблицаПоискаКодаМаркировкиВПуле.
// 	Поля - Строка - Поля пула кодов через запятую, при необходимости.
// 	ЕстьПоляВЕТИС - Булево - признак наличия полей ВетИС в таблице-источнике которые требуется сохранить
// Возвращаемое значение:
// ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Код маркировки.
// - а так же дополнительные запрашиваемые поля.
Функция РезультатПоискаВПулеКодовМаркировки(КодыМаркировки, Поля = "", ЕстьПоляВЕТИС = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.КодМаркировки          КАК КодМаркировки,
	|	Т.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	Т.ИсходныйКодМаркировки  КАК ИсходныйКодМаркировки,
	|	&ДополнительныеПоляИсточника
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	&КодыМаркировки КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|///////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ИсходныйКодМаркировки КАК КодМаркировки,
	|	&ДополнительныеПоляИсточника,
	|	&ДополнительныеПоляПула
	|ИЗ
	|	КодыМаркировки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки         = Т.КодМаркировки
	|		И ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки = Т.ХешСуммаКодаМаркировки
	|");
	Запрос.Параметры.Вставить("КодыМаркировки", КодыМаркировки);
	
	Запрос.УстановитьПараметр("ДополнительныеПоляИсточника", Истина);
	Запрос.УстановитьПараметр("ДополнительныеПоляПула", Истина);
	
	Если ЗначениеЗаполнено(Поля) Тогда
		МассивПолей = СтрРазделить(Поля, ",");
		ПоляЗапроса = Новый Массив;
		Для Каждого СтрокаПоле Из МассивПолей Цикл
			ПоляЗапроса.Добавить(СтрШаблон("ПулКодовМаркировкиСУЗ.%1 КАК %1", СтрокаПоле));
		КонецЦикла;
		ТекстПолей = СтрСоединить(ПоляЗапроса, "," + Символы.ПС);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляПула", ТекстПолей);
	КонецЕсли;
	
	Если ЕстьПоляВЕТИС Тогда
		ТекстПолей = 
		"Т.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
		|Т.ГоденДо КАК ГоденДо,
		|Т.Скоропортящаяся КАК Скоропортящаяся";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляИсточника", ТекстПолей);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаспределениеТоваровПоШтрихкодамУпаковок

// Подготавливает новую структуру параметров распределение для передачи в (См. РаспределениеШтрихкодовУпаковокПоТоварам)
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыУказанияСерий  - Структура, Неопределено - Параметры указания серий.
// * ДокументСсылка          - ДокументСсылка, ДанныеФормыСтруктура, ДокументОбъект - Ссылка на документ,
//                             объект документа или данные формы, связанные с объектом документа.
// * ДопустимыТоварыБезМарок - Булево                  - Возможнен режим, когда марок не достаточно на все товары.
Функция НовыеПараметрыРаспределенияШтрихкодовУпаковок() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДокументСсылка",          Неопределено);
	Параметры.Вставить("ПараметрыУказанияСерий",  Неопределено);
	Параметры.Вставить("ДопустимыТоварыБезМарок", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Распределяет штрихкоды упаковок по таблице товаров с учетом групповых упаковок.
// 
// Параметры:
// 	ПараметрыРаспределения - См. НовыеПараметрыРаспределенияШтрихкодовУпаковок.
// 	Товары                 - ТаблицаЗначений:
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура               - Номенклатура таблицы товаров.
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика таблицы товаров.
// 	 * Серия              - ОпределяемыйТип.СерияНоменклатуры          - Серия таблицы товаров.
// 	 * Количество         - Число                                      - Количество единиц товаров.
// 	 * КоличествоУпаковок - Число                                      - Количество упаковок товаров.
// 	МассивУпаковок         - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрикходы упаковок документа.
// Возвращаемое значение:
// 	Структура - Описание:
// * ЕстьОшибки - Булево           - Признак наличия ошибок распределения.
// * Ошибки     - Массив из Строка - Тексты ошибок распредления.
// * РаспределенныеСтроки          - Соответствие:
// 	* Ключ     - СтрокаТабличнойЧасти - Исходная строка таблицы товаров.
// 	* Значнеие - Массив из См. НовыйРезультатРаспределенияШтрихкодовПоТоварам - Результат распределения.
// * СтрокиБезШтрихкодов - Соответствие:
// 	* Ключ     - СтрокаТабличнойЧасти                                         - Исходная строка таблицы товаров.
// 	* Значнеие - Массив из См. НовыйРезультатРаспределенияШтрихкодовПоТоварам - Остаток для распределенных ранее строк.
Функция РаспределениеШтрихкодовУпаковокПоТоварам(ПараметрыРаспределения, Товары, МассивУпаковок) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("РаспределенныеСтроки", Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("СтрокиБезШтрихкодов",  Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("Ошибки",               Новый Массив());
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",           Ложь);
	
	ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ПараметрыРаспределения.ДокументСсылка);
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки);
	
	ПараметрыСканирования.ОтборПоВидуПродукции = Ложь;
	
	// Заполнение исходных данных для распределения
	
	ТаблицаТовары = Новый ТаблицаЗначений();
	ТаблицаТовары.Колонки.Добавить("Номенклатура",       Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",     Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Серия",              Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Склад",              Метаданные.ОпределяемыеТипы.Склад.Тип);
	ТаблицаТовары.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("ИспользоватьСерии",  Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Колонки.Добавить("ИндексСтроки",       ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	КэшированныеЗначения = Новый Структура();
	ИндексСтроки         = 0;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Склад)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ПараметрыРаспределения.ПараметрыУказанияСерий, "Склад") Тогда
			НоваяСтрока.Склад = ПараметрыРаспределения.ПараметрыУказанияСерий.Склад;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "КоличествоЕдиниц")
			И ЗначениеЗаполнено(СтрокаТовары.КоличествоЕдиниц) Тогда
			НоваяСтрока.Количество = СтрокаТовары.КоличествоЕдиниц;
		КонецЕсли;
		
		ИспользоватьСерии = Ложь;
		ШтрихкодированиеИСПереопределяемый.ПриОпределенииНеобходимостиВыбораСерии(
			НоваяСтрока,
			ПараметрыРаспределения.ПараметрыУказанияСерий,
			ИспользоватьСерии,
			КэшированныеЗначения);
		
		НоваяСтрока.ИспользоватьСерии = ИспользоватьСерии;
		НоваяСтрока.ИндексСтроки      = ИндексСтроки;
		ИндексСтроки                  = ИндексСтроки + 1;
		
	КонецЦикла;
	
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика");
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика, Склад");
	ТаблицаТовары.Сортировать("КоличествоУпаковок Убыв");
	
	// Формирование доступных значений штрихкодов
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(МассивУпаковок, ПараметрыСканирования);
	ТаблицаШтрихкоды  = ШтрихкодыУпаковок.МаркированныеТовары.СкопироватьКолонки();
	
	ДобавляемыеКолонки = Новый Структура();
	ДобавляемыеКолонки.Вставить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДобавляемыеКолонки.Вставить("КоличествоУпаковок",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДобавляемыеКолонки.Вставить("Приоритет",           ОбщегоНазначения.ОписаниеТипаЧисло(2));
	ДобавляемыеКолонки.Вставить("ИспользоватьСерии",   Новый ОписаниеТипов("Булево"));
	ДобавляемыеКолонки.Вставить("Склад",               Метаданные.ОпределяемыеТипы.Склад.Тип);
	ДобавляемыеКолонки.Вставить("ТребуетсяПолныйКод",  Новый ОписаниеТипов("Булево"));
	ДобавляемыеКолонки.Вставить("ПолныйКодУстановлен", Новый ОписаниеТипов("Булево"));
	
	Для Каждого КолонкаКлючИЗначение Из ДобавляемыеКолонки Цикл
		Если ТаблицаШтрихкоды.Колонки.Найти(КолонкаКлючИЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаШтрихкоды.Колонки.Добавить(КолонкаКлючИЗначение.Ключ, КолонкаКлючИЗначение.Значение);
	КонецЦикла;
	
	ЗаполнитьТаблицуШтрихкововИзДереваУпаковокРекурсивно(ТаблицаШтрихкоды, ШтрихкодыУпаковок.ДеревоУпаковок);
	
	Для Каждого СтрокаТовары Из ТаблицаШтрихкоды Цикл
		
		ИспользоватьСерии = Ложь;
		ШтрихкодированиеИСПереопределяемый.ПриОпределенииНеобходимостиВыбораСерии(
			СтрокаТовары,
			ПараметрыРаспределения.ПараметрыУказанияСерий,
			ИспользоватьСерии,
			КэшированныеЗначения);
		
		СтрокаТовары.ИспользоватьСерии = ИспользоватьСерии;
		
	КонецЦикла;
	
	УстановитьШтрихкодДляПечатиККТ(ТаблицаШтрихкоды);
	
	ТаблицаШтрихкоды.Сортировать("Приоритет Убыв");
	
	// Распределение
	
	Для Каждого СтрокаШтрихкод Из ТаблицаШтрихкоды Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаШтрихкод.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаШтрихкод.Характеристика);
		
		Если СтрокаШтрихкод.ИспользоватьСерии Тогда
			СтруктураПоиска.Вставить("Серия", СтрокаШтрихкод.Серия);
		КонецЕсли;
		
		НайденныйСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовары Из НайденныйСтрокиТовары Цикл
			
			КоличествоСписать         = СтрокаШтрихкод.Количество;
			КоличествоУпаковокСписать = КоличествоСписать;
			
			Если СтрокаТовары.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоСписать > СтрокаТовары.Количество Тогда
				Если СтрокаШтрихкод.КоличествоУпаковок > 0 Тогда
					КоличествоСписать = 0;
				Иначе
					КоличествоСписать         = СтрокаШтрихкод.Количество;
					КоличествоУпаковокСписать = СтрокаШтрихкод.КоличествоУпаковок;
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоСписать = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИсходнаяСтрокаТовары = Товары.Получить(СтрокаТовары.ИндексСтроки);
			
			ДанныеРаспределения = ВозвращаемоеЗначение.РаспределенныеСтроки.Получить(ИсходнаяСтрокаТовары);
			
			Если ДанныеРаспределения = Неопределено Тогда
				ДанныеРаспределения = Новый Массив;
				ВозвращаемоеЗначение.РаспределенныеСтроки.Вставить(ИсходнаяСтрокаТовары, ДанныеРаспределения);
			КонецЕсли;
			
			РезультатСписания = НовыйРезультатРаспределенияШтрихкодовПоТоварам();
			РезультатСписания.Количество         = КоличествоСписать;
			РезультатСписания.КоличествоУпаковок = КоличествоУпаковокСписать;
			РезультатСписания.Штрихкод           = СтрокаШтрихкод.Штрихкод;
			
			Если СтрокаШтрихкод.ТребуетсяПолныйКод И Не СтрокаШтрихкод.ПолныйКодУстановлен Тогда
				ВозвращаемоеЗначение.Ошибки.Добавить(
					СтрШаблон(
						НСтр("ru ='Не удалось найти полный код маркировки для: %1'"),
						СтрокаШтрихкод.Штрихкод));
			КонецЕсли;
			
			ДанныеРаспределения.Добавить(РезультатСписания);
			
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок - КоличествоУпаковокСписать;
			СтрокаТовары.Количество         = СтрокаТовары.Количество         - КоличествоСписать;
			
			СтрокаШтрихкод.Количество         = 0;
			СтрокаШтрихкод.КоличествоУпаковок = 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Контроль
	
	Для Каждого СтрокаШтрихкод Из ТаблицаШтрихкоды Цикл
		
		Если СтрокаШтрихкод.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = ИнтеграцияИС.ПредставлениеНоменклатуры(
			СтрокаШтрихкод.Номенклатура,
			СтрокаШтрихкод.Характеристика,,
			СтрокаШтрихкод.Серия);
			
		ВозвращаемоеЗначение.Ошибки.Добавить(
			СтрШаблон(
				НСтр("ru ='Не удалось распределить код маркировки по товарам:
					      |%1 (%2)'"),
				СтрокаШтрихкод.Штрихкод,
				Представление));
		
	КонецЦикла;
	
	ВидПродукцииПоНоменклатуре    = Новый Соответствие();
	ВидыПродукцииТестовогоПериода = ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииТестовогоПериода(
		ДанныеШапки.Дата);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидПродукции = ВидПродукцииПоНоменклатуре.Получить(СтрокаТовары.Номенклатура);
		Если ВидПродукции = Неопределено Тогда
			ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(СтрокаТовары.Номенклатура);
		КонецЕсли;
		
		Если Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатСписания = НовыйРезультатРаспределенияШтрихкодовПоТоварам();
		РезультатСписания.Количество         = СтрокаТовары.Количество;
		РезультатСписания.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок;
		
		ИсходнаяСтрокаТовары = Товары.Получить(СтрокаТовары.ИндексСтроки);
		
		ДанныеРаспределения = ВозвращаемоеЗначение.СтрокиБезШтрихкодов.Получить(ИсходнаяСтрокаТовары);
		Если ДанныеРаспределения = Неопределено Тогда
			ДанныеРаспределения = Новый Массив;
			ВозвращаемоеЗначение.СтрокиБезШтрихкодов.Вставить(ИсходнаяСтрокаТовары, ДанныеРаспределения);
		КонецЕсли;
		
		ДанныеРаспределения.Добавить(РезультатСписания);
		
		Если ВидыПродукцииТестовогоПериода.Найти(ВидПродукции) <> Неопределено
			Или ПараметрыРаспределения.ДопустимыТоварыБезМарок Тогда
			
			ДанныеРаспределения = ВозвращаемоеЗначение.РаспределенныеСтроки.Получить(ИсходнаяСтрокаТовары);
			
			Если ДанныеРаспределения = Неопределено Тогда
				ДанныеРаспределения = Новый Массив;
				ВозвращаемоеЗначение.РаспределенныеСтроки.Вставить(ИсходнаяСтрокаТовары, ДанныеРаспределения);
			КонецЕсли;
			
			ДанныеРаспределения.Добавить(РезультатСписания);
			
		Иначе
			
			Представление = ИнтеграцияИС.ПредставлениеНоменклатуры(
				СтрокаТовары.Номенклатура,
				СтрокаТовары.Характеристика,,
				СтрокаТовары.Серия);
			
			ВозвращаемоеЗначение.Ошибки.Добавить(
				СтрШаблон(
					НСтр("ru ='Не удалось распределить товар по кодам маркировки:
						      |%1'"),
					Представление));
			
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвращаемоеЗначение.ЕстьОшибки = (ВозвращаемоеЗначение.Ошибки.Количество() > 0);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область СлужебныеПроцедуры

Процедура ЗаполнитьТаблицуШтрихкововИзДереваУпаковокРекурсивно(ТаблицаПриемник, ДеревоУпаковок)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьТаблицуШтрихкововИзДереваУпаковокРекурсивно(ТаблицаПриемник, СтрокаДерева);
			Продолжить;
		ИначеЕсли Не ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции, Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.Количество         = 1;
		НоваяСтрока.КоличествоУпаковок = 0;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			НоваяСтрока.Приоритет          = 5;
			НоваяСтрока.КоличествоУпаковок = 1;
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаДерева.ВидПродукции) Тогда
				НоваяСтрока.Количество = СтрокаДерева.КоличествоПачек;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заменяет не полные данные по кодам маркировки для передачи в ККТ.
// 
// Параметры:
// 	Коллекция - ТаблицаЗначений - Таблица штрихкодов.
Процедура УстановитьШтрихкодДляПечатиККТ(Коллекция)
	
	ПолныйКодМОТП = Новый Соответствие();
	
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		
		Если СтрокаКоллекции.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
			И СтрокаКоллекции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаКоллекции.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
			И СтрокаКоллекции.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			
			Если СтрокаКоллекции.ДанныеРазбора = Неопределено
				Или (СтрокаКоллекции.ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
				 И СтрокаКоллекции.ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
			НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				СтрокаКоллекции.ДанныеРазбора, СтрокаКоллекции.ВидПродукции, ПараметрыНормализацииКМ);
			
			ПолныйКодМОТП.Вставить(НормализованныйКод, СтрокаКоллекции);
			СтрокаКоллекции.ТребуетсяПолныйКод = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолныйКодМОТП.Количество() > 0 Тогда 
		
		СтрокиДляОбработки = ШтрихкодированиеМОТП.УстановитьШтрихкодДляПечатиККТ(ПолныйКодМОТП);
		
		Для Каждого КлючИЗначение Из СтрокиДляОбработки Цикл
			
			СтрокаКоллекции = КлючИЗначение.Значение;
			Если СтрокаКоллекции.ТребуетсяПолныйКод
				И Не СтрокаКоллекции.ПолныйКодУстановлен
				И СтрокаКоллекции.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
				И СтрокаКоллекции.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
				
				СтрокаКоллекции.Штрихкод            = СтрШаблон("%1AAAA", КлючИЗначение.Ключ);
				СтрокаКоллекции.ПолныйКодУстановлен = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйРезультатРаспределенияШтрихкодовПоТоварам()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Количество",         0);
	ВозвращаемоеЗначение.Вставить("КоличествоУпаковок", 0);
	ВозвращаемоеЗначение.Вставить("Штрихкод",           "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

