
#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ОтработанноеВремяПоСотрудникам, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.ВзаиморасчетыССотрудниками.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fd8ef2c7-fa24-480f-84f2-b5b0481e212c"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений взаиморасчетов с сотрудниками.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.ЗарплатаКВыплате.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("69aa0568-f501-49fd-8e4e-4ab0534baa8d"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений зарплаты к выплате.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.ЗарплатаКВыплатеАвансом.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("74b1c9e3-6ab8-4092-b46c-2040a2da6919"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений зарплаты к выплате авансом.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.НачисленияУдержанияПоСотрудникам.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("06a949e3-f5cb-4065-b893-e96405219937"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений начислений и удержаний по сотрудникам.'");
	
КонецПроцедуры

#КонецОбласти

// Для методов служебного API использование не контролируем          
// АПК:581-выкл 
// АПК:299-выкл

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, описание см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Начисления - регистрируемые начисления.
//					Если передано Неопределено, то начисления не регистрируются.
//		ПрочиеДоходы - регистрируемые натуральные доходы.
//					Если передано Неопределено, то доходы не регистрируются.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//					если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьНачисления(ДанныеДляПроведения, Отказ, Начисления, ПрочиеДоходы, ЗаписыватьДвижения = Ложь) Экспорт
	
	Движения 			= ДанныеДляПроведения.Движения;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	ВыплатитьКакАванс 	= ДанныеДляПроведения.ВыплатитьКакАванс;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	ТаблицаНачислений 		= ТаблицаРаспределенияПоРабочимМестам();
	ТаблицаПрочихНачислений = ТаблицаРаспределенияПоРабочимМестам();
	СтрокиВзаиморасчетов    = Новый Массив;
	
	ВидыДоходаИсполнительногоПроизводства = ВидыДоходовИсполнительногоПроизводстваНачислений();
	
	Если Начисления <> Неопределено Тогда
		ПравилаУчетаНачислений = УчетНачисленнойЗарплатыПовтИсп.ПравилаУчетаНачисленийСотрудников();
		// Заполняем движения
		ДобавленныеСтрокиНачислений = Новый Массив;
		Для Каждого Строка Из Начисления Цикл
			ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			УчитыватьВоВзаиморасчетах = Истина;
			ПравилаУчетаНачисления = ПравилаУчетаНачислений[Строка.Начисление];
			Если ПравилаУчетаНачисления <> Неопределено Тогда
				ГруппаНачисленияУдержанияВыплаты = ПравилаУчетаНачисления.ГруппаНачисленияУдержанияВыплаты;
				УчитыватьВоВзаиморасчетах = ПравилаУчетаНачисления.УчитыватьВоВзаиморасчетах;
			КонецЕсли;
			НоваяСтрока = ТаблицаНачислений.Добавить();
			ДобавленныеСтрокиНачислений.Добавить(НоваяСтрока);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = ГруппаНачисленияУдержанияВыплаты;
			НоваяСтрока.ДанныеМежрасчетногоПериода  = ДанныеМежрасчетногоПериода;
			НоваяСтрока.УчитыватьВРаспределенииНДФЛ = ВыплатитьКакАванс;
			Если УчитыватьВоВзаиморасчетах Тогда
				СтрокиВзаиморасчетов.Добавить(НоваяСтрока);
			КонецЕсли;
			// Заполняем даты начала/окончания.
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаНачала) Тогда
				НоваяСтрока.ДатаНачала = ПериодРегистрации;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаОкончания) Тогда
				НоваяСтрока.ДатаОкончания = КонецМесяца(ПериодРегистрации);
			КонецЕсли;
			НоваяСтрока.ПериодДействия = НачалоМесяца(НоваяСтрока.ДатаНачала);
			НоваяСтрока.ВидДоходаИсполнительногоПроизводства = ВидыДоходаИсполнительногоПроизводства[Строка.Начисление];
		КонецЦикла;
		УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(ТаблицаНачислений, ПериодРегистрации);
		УчетНачисленнойЗарплатыВнутренний.ПриЗаполненииСтрокРегистрацииНачисленнойЗарплаты(ТаблицаНачислений, СтрокиВзаиморасчетов);
	КонецЕсли;
	
	// Перенесем начисления в коллекцию движений
	Если ТаблицаНачислений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если ПрочиеДоходы <> Неопределено Тогда
		Для Каждого Строка Из ПрочиеДоходы Цикл
			НоваяСтрока = ТаблицаПрочихНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.НачислениеУдержание = Строка.Начисление;
			НоваяСтрока.ДанныеМежрасчетногоПериода  = ДанныеМежрасчетногоПериода;
			НоваяСтрока.УчитыватьВРаспределенииНДФЛ = ВыплатитьКакАванс;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
			НоваяСтрока.ВидДоходаИсполнительногоПроизводства = ВидыДоходаИсполнительногоПроизводства[Строка.Начисление];
		КонецЦикла;
	КонецЕсли;
	
	// Перенесем удержания и прочие доходы в коллекцию движений
	Если ТаблицаПрочихНачислений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрочихНачислений, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И ПроведениеСервер.ЕстьНаборЗаписей(Движения, "НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		Если ТаблицаНачислений.Количество() + ТаблицаПрочихНачислений.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, Движения.НачисленияУдержанияПоСотрудникамАвансом);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрочихНачислений, Движения.НачисленияУдержанияПоСотрудникамАвансом);
			Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого Строка Из СтрокиВзаиморасчетов Цикл
			НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Если ВыплатитьКакАванс Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, 
				НачисленияДляВзаиморасчетов, Неопределено);
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				НачисленияДляВзаиморасчетов, Неопределено);
		Иначе 
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, ПорядокВыплаты,
				НачисленияДляВзаиморасчетов, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, описание см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Начисления - таблица значений.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//
Процедура ЗарегистрироватьОтработанноеВремя(ДанныеДляПроведения, Отказ, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	Движения 			= ДанныеДляПроведения.Движения;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ПериодДействия = НачалоМесяца(Строка.ДатаНачала);
		
		НоваяСтрока.Период = ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
		
	КонецЦикла;
	
	УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(Движения.ОтработанноеВремяПоСотрудникам, ПериодРегистрации, "Начисление");
	Движения.ОтработанноеВремяПоСотрудникам.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		ЕстьДвиженияОтработанноеВремяПоСотрудникамАвансом = Движения.Свойство("ОтработанноеВремяПоСотрудникамАвансом");
	Иначе
		ЕстьДвиженияОтработанноеВремяПоСотрудникамАвансом = Движения.Найти("ОтработанноеВремяПоСотрудникамАвансом") <> Неопределено;
	КонецЕсли;
	
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И ЕстьДвиженияОтработанноеВремяПоСотрудникамАвансом Тогда
		
		Если Движения.ОтработанноеВремяПоСотрудникам.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Движения.ОтработанноеВремяПоСотрудникам, Движения.ОтработанноеВремяПоСотрудникамАвансом);
			Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УчетНачисленнойЗарплатыВнутренний.ПриРегистрацииОтработанногоВремени(Движения, ЗаписыватьДвижения);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Удержания
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, Удержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ВыплатитьКакАванс 	= ДанныеДляПроведения.ВыплатитьКакАванс;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.НачислениеУдержание = Строка.Удержание;
		НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
	КонецЦикла;

	// Заполняем движения
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;

	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		
	КонецЕсли;

	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		Если ВыплатитьКакАванс Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, 
				Неопределено, УдержанияДляВзаиморасчетов);
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				Неопределено, УдержанияДляВзаиморасчетов);
		Иначе 
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, ПорядокВыплаты,
				Неопределено, УдержанияДляВзаиморасчетов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		РезультатыРасчетаНДФЛ
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, РезультатыРасчетаНДФЛ, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если РезультатыРасчетаНДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Авансом 			= ДанныеДляПроведения.Авансом;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ВыплатитьКакАванс 	= ДанныеДляПроведения.ВыплатитьКакАванс;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
		
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом;
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	КонецЕсли;

	ЕстьПодразделениеСотрудника = (РезультатыРасчетаНДФЛ.Колонки.Найти("ПодразделениеСотрудника") <> Неопределено);
	НетТерритории = (РезультатыРасчетаНДФЛ.Колонки.Найти("ТерриторияВыполненияРаботВОрганизации") = Неопределено);
	
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	Для Каждого Строка Из РезультатыРасчетаНДФЛ Цикл
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		Если Не Авансом Тогда
			НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		КонецЕсли;	
		НоваяСтрока.Организация			= Организация;
		Если ЕстьПодразделениеСотрудника Тогда
			НоваяСтрока.Подразделение = Строка.ПодразделениеСотрудника;
		КонецЕсли;
		Если НетТерритории Тогда
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = Строка.Подразделение;
		КонецЕсли;
		НоваяСтрока.НачислениеУдержание 				= Строка.ВидУдержания;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты 	= Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
	КонецЦикла;
	
	// Заполняем движения начислений (удержаний) удержанными суммами.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, ДвиженияНачисленийУдержаний);
	Если ПорядокВыплаты <> Неопределено И Не Авансом
		И ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс
		И Движения.Найти("НачисленияУдержанияПоСотрудникамАвансом") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
		
	КонецЕсли;

	ДвиженияНачисленийУдержаний.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		ДвиженияНачисленийУдержаний.Записать();
		ДвиженияНачисленийУдержаний.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Или Авансом Тогда
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		Если ВыплатитьКакАванс Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, 
				Неопределено, УдержанияДляВзаиморасчетов);
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				Неопределено, УдержанияДляВзаиморасчетов);
		ИначеЕсли Авансом Тогда
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленныйАванс(
				Движения, Отказ, 
				Организация, ПериодРегистрации, 
				Неопределено, УдержанияДляВзаиморасчетов);
		Иначе	
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
				Движения, Отказ, 
				Организация, ПериодРегистрации, ПорядокВыплаты, 
				Неопределено, УдержанияДляВзаиморасчетов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Регистрирует передачу налогов в налоговый орган.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево            - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации - организация
//		ПериодРегистрации - Дата - первое число месяца периода регистрации.
//		НалоговыйПериод   - Дата - первое декабря года налогового периода.
//		НДФЛ              - ТаблицаЗначений   - таблица с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо.
//			* Сумма          - Число                           - сумма налога.	
//
Процедура ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(Движения, Отказ, Организация, ПериодРегистрации, НалоговыйПериод, 
	НДФЛ, ЗаписыватьДвижения = Ложь) Экспорт

	Если НДФЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НДФЛ.ВыгрузитьКолонку("ФизическоеЛицо"));
	
	ПериодыРегистрации = Новый Массив;
	Период = ПериодРегистрации;
	Пока Период >= НачалоГода(НалоговыйПериод) Цикл
		ПериодыРегистрации.Добавить(Период);
		Период = ДобавитьМесяц(Период, -1);
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица",		ФизическиеЛица);
	Запрос.УстановитьПараметр("ПериодыРегистрации",	ПериодыРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.ПериодРегистрации КАК ПериодРегистрации,
	|	Остатки.Сотрудник КАК Сотрудник,
	|	Остатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Остатки.Подразделение КАК Подразделение,
	|	Остатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Остатки.СтатьяРасходов КАК СтатьяРасходов,
	|	Остатки.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	СУММА(Остатки.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период КАК ПериодРегистрации,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|		НачисленияУдержанияПоСотрудникам.Сумма КАК Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленияУдержанияПоСотрудникам.Период,
	|		НачисленияУдержанияПоСотрудникам.Сотрудник,
	|		НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|		НачисленияУдержанияПоСотрудникам.Подразделение,
	|		НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|		НачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|		НачисленияУдержанияПоСотрудникам.ВидДоходаИсполнительногоПроизводства,
	|		НачисленияУдержанияПоСотрудникам.Сумма
	|	ИЗ
	|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|	ГДЕ
	|		НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|		И НачисленияУдержанияПоСотрудникам.Период В(&ПериодыРегистрации)
	|		И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|		И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В(&ФизическиеЛица)
	|		И НачисленияУдержанияПоСотрудникам.Регистратор = &Регистратор) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ПериодРегистрации,
	|	Остатки.Сотрудник,
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов,
	|	Остатки.ВидДоходаИсполнительногоПроизводства";
	
	ИсчисленныеНалоги = Запрос.Выполнить().Выгрузить();
	
	НалогиДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНалоговПередаваемыхВНалоговыйОрган();
	
	Отбор = Новый Структура("ФизическоеЛицо, ПериодРегистрации");		
	Для Каждого Налог Из НДФЛ Цикл
		
		Отбор.ФизическоеЛицо = Налог.ФизическоеЛицо;
		
		НераспределеннаяСумма = Налог.Сумма;
		
		Для Каждого Период Из ПериодыРегистрации Цикл
			
			Отбор.ПериодРегистрации = Период;
			
			НалогиРаботникаВПериоде = ИсчисленныеНалоги.Скопировать(Отбор);
			
			ПогашаемаяСуммаВПериоде = МИН(НалогиРаботникаВПериоде.Итог("Сумма"), НераспределеннаяСумма);
			
			Если ПогашаемаяСуммаВПериоде = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(НалогиРаботникаВПериоде, "Сумма");
			РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(ПогашаемаяСуммаВПериоде, Коэффициенты);
			
			Для ИндексСтроки = 0 По НалогиРаботникаВПериоде.Количество() - 1 Цикл
			
				НалогРаботникаВПериоде = НалогиРаботникаВПериоде[ИндексСтроки];
				
				ПогашаемаяСумма = РаспределенныеСуммы[ИндексСтроки];
				
				НалогДляВзаиморасчетов = НалогиДляВзаиморасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НалогДляВзаиморасчетов, НалогРаботникаВПериоде);
				НалогДляВзаиморасчетов.Сумма = ПогашаемаяСумма;
				
				НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НачисленияУдержания, НалогРаботникаВПериоде);
				НачисленияУдержания.Период			= ПериодРегистрации;
				НачисленияУдержания.Организация		= Организация;
				НачисленияУдержания.ПериодДействия	= ПериодРегистрации;
				НачисленияУдержания.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛПередачаЗадолженностиВНалоговыйОрган;
				НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
				НачисленияУдержания.Сумма = ПогашаемаяСумма;
				НачисленияУдержания.РегистрацияВНалоговомОргане = Налог.РегистрацияВНалоговомОргане;
				
			КонецЦикла;	
			
			НераспределеннаяСумма = НераспределеннаяСумма - ПогашаемаяСуммаВПериоде;
			
			Если НераспределеннаяСумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(
		Движения, Отказ, Организация, ПериодРегистрации, НалогиДляВзаиморасчетов);
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		
		ВзаиморасчетыССотрудниками.ЗаписатьДвижения(Движения);
		
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Дорабатывает таблицу с данными расчета НДФЛ в вид, пригодный для регистрации в учете начисленной и удержанной зарплаты
// Вызывается перед ЗарегистрироватьНДФЛ
// Обрабатывает колонки НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13 если они есть.
Процедура ПодготовитьДанныеНДФЛКРегистрации(ТаблицаНДФЛ, Организация, ДатаОперации) Экспорт
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	ТаблицаНДФЛ = УчетНДФЛ.ТаблицаДвиженийСРегистрациейВНалоговомОргане(ТаблицаНДФЛ, "МесяцНалоговогоПериода");
	
	ЗаполнитьПодразделениеСотрудника = Ложь;
	Если ТаблицаНДФЛ.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда
		ТаблицаНДФЛ.Колонки.Добавить("ПодразделениеСотрудника");
		ЗаполнитьПодразделениеСотрудника = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(СтрокаТЗ, СтрокаТЗ.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
		Если ЗаполнитьПодразделениеСотрудника Тогда
			СтрокаТЗ.ПодразделениеСотрудника = СтрокаТЗ.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет регистрацию в учете начисленной зарплаты НДФЛ и корректировок выплаты.
// 	Параметры:
// 		ДанныеДляПроведения - Структура - см. ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения.
// 		НДФЛПоСотрудникам - ТаблицаЗначений
// 		КорректировкиВыплатыПоСотрудникам - ТаблицаЗначений
// 		ЗаписыватьДвижения - Булево.
//
Процедура ЗарегистрироватьНДФЛИКорректировкиВыплаты(ДанныеДляПроведения, Отказ, НДФЛПоСотрудникам, КорректировкиВыплатыПоСотрудникам, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		РезультатРасчетаНДФЛ 	= НДФЛПоСотрудникам;
		КорректировкиВыплаты    = КорректировкиВыплатыПоСотрудникам;
	Иначе
		РезультатРасчетаНДФЛ 	= РезультатыРаспределенияНДФЛ(ДанныеДляПроведения, НДФЛПоСотрудникам);
		КорректировкиВыплаты    = РезультатыРаспределенияКорректировокВыплаты(ДанныеДляПроведения, КорректировкиВыплатыПоСотрудникам);
	КонецЕсли;
	
	Если РезультатРасчетаНДФЛ <> Неопределено Тогда
		ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, РезультатРасчетаНДФЛ, ЗаписыватьДвижения);
	КонецЕсли;
	Если КорректировкиВыплаты <> Неопределено Тогда
		ЗарегистрироватьКорректировкиВыплаты(ДанныеДляПроведения, Отказ, КорректировкиВыплаты, ЗаписыватьДвижения);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для регистрации в учете возврата НДФЛ физлицу
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		РезультатыРасчетаНДФЛ - таблица значений с колонками.
//			ФизическоеЛицо - обязательная
//			Подразделение - обязательная
//          одна из пар колонок Сумма, СуммаКорректировкиВыплаты (необязательна при регистрации без распределения)
//          или НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//			
//		Допустимо присутствие других колонок в передаваемых таблицах
//
Процедура ЗарегистрироватьВозвратНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, КонецМесяца(ПериодРегистрации));
	ДанныеМежрасчетногоПериода = ?(ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
									Или ХарактерВыплаты = Неопределено, Ложь, Истина);
									
	УдержанияПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	
	Для Каждого СтрокаТаблицы Из РезультатыРасчетаНДФЛ Цикл
		// УдержанияПоРабочимМестам требует колонки ТерриторияВыполненияРаботВОрганизации и Подразделение.
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если Не ЗначениеЗаполнено(НоваяСтрока.ТерриторияВыполненияРаботВОрганизации) Тогда 
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		НоваяСтрока.Период = ПериодРегистрации;
		НоваяСтрока.ПериодДействия = ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		// Во взаиморасчеты передаем только СуммаКорректировкиВыплаты
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			Строка.СуммаКорректировкиВыплаты = Строка.Сумма;
			Строка.Сумма = 0;
		КонецЦикла;
		УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, УдержанияДляВзаиморасчетов);
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты, 
			Неопределено, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет регистрацию в учете начисленной зарплаты результатов перерасчета НДФЛ.
// 	Параметры:
// 		ДанныеДляПроведения - Структура - см. ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения.
// 		Отказ - Булево - признак отказа от заполнения движений..
// 		НДФЛ - ТаблицаЗначений
// 		КорректировкиВыплатыПоСотрудникам - ТаблицаЗначений
// 		ЗаписыватьДвижения - Булево.
//
Процедура ЗарегистрироватьПерерасчетНДФЛ(ДанныеДляПроведения, Отказ, НДФЛ, КорректировкиВыплатыПоСотрудникам, ЗаписыватьДвижения = Ложь) Экспорт

	РезультатРасчетаНДФЛ 	= РезультатыРаспределенияНДФЛ(ДанныеДляПроведения, НДФЛ);
	КорректировкиВыплаты    = РезультатыРаспределенияКорректировокВыплаты(ДанныеДляПроведения, КорректировкиВыплатыПоСотрудникам);
	
	Если РезультатРасчетаНДФЛ <> Неопределено Тогда
		ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, РезультатРасчетаНДФЛ, ЗаписыватьДвижения);
	КонецЕсли;
	Если КорректировкиВыплаты <> Неопределено Тогда
		ЗарегистрироватьКорректировкиВыплаты(ДанныеДляПроведения, Отказ, КорректировкиВыплаты, ЗаписыватьДвижения);
	КонецЕсли;

КонецПроцедуры

// Формирует временную таблицу ВТРаспределениеНачисленийТекущегоДокумента.
// Если ведется учет по статьям финансирования, таблица не формируется.
//
// Параметры:
// 	ДанныеДляПроведения - Структура, описание см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения.
// 
Процедура СоздатьВТРаспределениеНачисленийТекущегоДокумента(ДанныеДляПроведения) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Возврат;
	КонецЕсли;
	
	Движения 				= ДанныеДляПроведения.Движения;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	Авансом 				= ДанныеДляПроведения.Авансом;
	
	Если Авансом Тогда
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникамАвансом";
	Иначе
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникам";
	КонецЕсли;
	
	ДвиженияНачисленийУдержаний = Движения[ИмяТаблицыРегистра];
	
	ТаблицаДокумента = ДвиженияНачисленийУдержаний.Выгрузить();
	
	Отбор = Новый Структура("ГруппаНачисленияУдержанияВыплаты,Период", Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, ПериодРегистрации);
	Начисления = ТаблицаДокумента.Скопировать(Отбор);
	
	Отбор.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
	НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		Если ТипЗнч(СтрокаТЗ.НачислениеУдержание) = Тип("ПланВидовРасчетаСсылка.Начисления") Или СтрокаТЗ.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов Тогда
			ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	Отбор.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы;
	НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРаспределениеНачисленийТекущегоДокумента") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТРаспределениеНачисленийТекущегоДокумента");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленияДокумента", Начисления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДокумента.Сотрудник КАК Сотрудник,
	|	НачисленияДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	НачисленияДокумента.ТерриторияВыполненияРаботВОрганизации КАК Территория,
	|	НачисленияДокумента.МестоПолученияДохода КАК МестоПолученияДохода,
	|	НачисленияДокумента.НачислениеУдержание КАК Начисление,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	НачисленияДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияДокумента.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	НачисленияДокумента.ДатаНачала КАК ДатаНачала,
	|	НачисленияДокумента.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачисленийТекущегоДокумента
	|ИЗ
	|	&НачисленияДокумента КАК НачисленияДокумента
	|ГДЕ
	|	НачисленияДокумента.ИдентификаторСтроки > 0";
	// Условие "НачисленияДокумента.ИдентификаторСтроки > 0" учитывает исправление документа текущим периодом.
	Запрос.Выполнить();
	
КонецПроцедуры 

// Формирует пустую временную таблицу ВТРаспределениеНачисленийТекущегоДокумента.
// 
// Параметры:
// 		МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Процедура СоздатьПустуюВТРаспределениеНачисленийТекущегоДокумента(МенеджерВременныхТаблиц) Экспорт

	ПустоеЗначениеТерриторияНаЯзыкеЗапросов = УчетНачисленнойЗарплатыВнутренний.ПустоеЗначениеТерриторияНаЯзыкеЗапросов();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
	|	&ПустоеЗначениеТерриторияНаЯзыкеЗапросов КАК Территория,
	|	&ПустоеЗначениеТерриторияНаЯзыкеЗапросов КАК МестоПолученияДохода,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	0 КАК Сумма
	|ПОМЕСТИТЬ ВТРаспределениеНачисленийТекущегоДокумента";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПустоеЗначениеТерриторияНаЯзыкеЗапросов", ПустоеЗначениеТерриторияНаЯзыкеЗапросов);
	Запрос.Выполнить();

КонецПроцедуры

// Создает коллекцию сумм для распределения по рабочим местам (удержания, корректировки выплаты)
// Параметры:
//	Авансом - признак того, что коллекция создается для удержаний первой половины месяца. По умолчанию - Ложь.
//
// Возвращаемое значение: таблица значений 
//	
Функция ТаблицаРаспределенияПоРабочимМестам(Авансом = Ложь) Экспорт
	
	ИмяРегистраНачисленийУдержаний = "НачисленияУдержанияПоСотрудникам";
	Если Авансом Тогда
		ИмяРегистраНачисленийУдержаний = ИмяРегистраНачисленийУдержаний + "Авансом";
	КонецЕсли;
	
	УдержанияПоРабочимМестам = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления(ИмяРегистраНачисленийУдержаний);
	УдержанияПоРабочимМестам.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	ТипыПоляПервичныйРегистратор = ОтражениеЗарплатыВУчете.ТипыПоляПервичныйРегистратор();
	УдержанияПоРабочимМестам.Колонки.Добавить("ПервичныйРегистратор", Новый ОписаниеТипов(ТипыПоляПервичныйРегистратор));
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Возвращает признак межрасчетной выплаты с точки зрения учета начисленной зарплаты.
//
// Параметры:
// 	ПорядокВыплаты - Неопределено, ПеречислениеСсылка.ХарактерВыплатыЗарплаты.
//
// Возвращаемое значение:
// 	Булево.
//
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты) Экспорт

	Возврат ?(ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Или ПорядокВыплаты = Неопределено, Ложь, Истина);

КонецФункции

Функция ЗапросВТНачисленныеДоходы(ИмяВТНачисленныеДоходы  = "ВТНачисленныеДоходы") Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ЗапросВТНачисленныеДоходы(ИмяВТНачисленныеДоходы);
КонецФункции

#Область ВидыДоходовИсполнительногоПроизводства

// Возвращает виды доходов исполнительного производства начислений
//
// Возвращаемое значение:
// 	Соответствие:
// 	 	* Ключ     - ПланВидовРасчетаСсылка.Начисления, ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний
// 	 	* Значение - ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства
// 
Функция ВидыДоходовИсполнительногоПроизводстваНачислений() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ВидыДоходовИсполнительногоПроизводстваНачислений();
КонецФункции

// Возвращает виды доходов исполнительного производства всех ссылочных объектов указанного типа
//
// Параметры
// 	МетаданныеОбъекта - ОбъектМетаданных - Метаданные объекта.
//  ИмяРеквизита      - Строка           - Имя реквизита вида дохода исполнительного производства
// 	
// Возвращаемое значение:
// 	Соответствие:
// 	 	* Ключ     - ЛюбаяСсылка
// 	 	* Значение - ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства
// 
Функция ВидыДоходовИсполнительногоПроизводстваОбъектов(МетаданныеОбъекта, ИмяРеквизита = "ВидДоходаИсполнительногоПроизводства") Экспорт
	
	ВидыДоходовИсполнительногоПроизводства = Новый Соответствие;
	
	Запрос = Новый  Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	&Реквизит КАК ВидДоходаИсполнительногоПроизводства
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК Таблица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Реквизит", ИмяРеквизита);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДоходовИсполнительногоПроизводства.Вставить(Выборка.Ссылка, Выборка.ВидДоходаИсполнительногоПроизводства);
	КонецЦикла;	

	Возврат ВидыДоходовИсполнительногоПроизводства
	
КонецФункции	
	
// До появления обязанности передавать коды видов доходов в банк 
// виды доходов исполнительных не имеют прикладного смысла и должны быть очищены.
//
Процедура ОчиститьВидыДоходовИсполнительногоПроизводстваНабораЗаписей(НаборЗаписей, Знач ИменаПолейПериодов = "Период", Знач ИмяПоляВидаДохода = "ВидДоходаИсполнительногоПроизводства") Экспорт
	
	ПоляПериодов = ОбщегоНазначения.ВыгрузитьКолонку(Новый Структура(ИменаПолейПериодов), "Ключ");
	
	ПустойВидДохода = Перечисления.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка();
	Для Каждого Запись Из НаборЗаписей Цикл
		ОчищатьВидДохода = Ложь;
		Для Каждого ИмяПоляПериода Из ПоляПериодов Цикл
			Если Не ВидыДоходовИсполнительногоПроизводстваКлиентСервер.ВидДоходаОбязателенДляБанков(Запись[ИмяПоляПериода]) Тогда
				ОчищатьВидДохода = Истина;
				Прервать;
			КонецЕсли	
		КонецЦикла;	
		
		Если ОчищатьВидДохода Тогда
			Запись[ИмяПоляВидаДохода] = ПустойВидДохода;
		КонецЕсли	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВидыДоходовИсполнительногоПроизводстваРегистра(МетаданныеРегистра, ПараметрыОбновления, Знач ИменаПолейПериодов = "Период") Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Регистратор
	|ИЗ
	|	#Регистр КАК Регистр
	|ГДЕ
	|	&ПериодыДоНачалаПередачиВидаДоходаБанку
	|	И Регистр.ВидДоходаИсполнительногоПроизводства <> ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр(
		"ДатаНачалаПередачиВидаДоходаБанку", 
		ВидыДоходовИсполнительногоПроизводстваКлиентСервер.ДатаНачалаПередачиВидаДоходаБанку());
		
	ОтборПериодов = Новый Массив;
	Для Каждого ИмяПоляПериода Из ОбщегоНазначения.ВыгрузитьКолонку(Новый Структура(ИменаПолейПериодов), "Ключ") Цикл
		ОтборПериодов.Добавить(СтрШаблон("Регистр.%1 < &ДатаНачалаПередачиВидаДоходаБанку", ИмяПоляПериода));
	КонецЦикла;	
	ОтборПериодов = СтрСоединить(ОтборПериодов, " ИЛИ ");
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ПериодыДоНачалаПередачиВидаДоходаБанку", 
		СтрШаблон("(%1)", ОтборПериодов)); 
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"#Регистр",  
		МетаданныеРегистра.ПолноеИмя()); 
	
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(МетаданныеРегистра);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	Иначе
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	КонецЕсли;	
	
	КолонкиГруппировок = Новый Массив;
	КолонкиГруппировок.Добавить("Регистратор");
	Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		КолонкиГруппировок.Добавить("ВидДвижения");
	КонецЕсли;	
	КолонкиГруппировок.Добавить("Период");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		КолонкиГруппировок, 
		ОбщегоНазначения.ВыгрузитьКолонку(МетаданныеРегистра.Измерения, "Имя"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		КолонкиГруппировок, 
		ОбщегоНазначения.ВыгрузитьКолонку(МетаданныеРегистра.Реквизиты, "Имя"));
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(КолонкиГруппировок, "НомерСтроки");	
	КолонкиСуммирования = ОбщегоНазначения.ВыгрузитьКолонку(МетаданныеРегистра.Ресурсы, "Имя");
	
	КолонкиГруппировок  = СтрСоединить(КолонкиГруппировок, ", ");	
	КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ", ");	
	ОтборНулевыхСтрок = Новый Структура(КолонкиСуммирования, 0); // считаем, что ресурс единственный
	
	МенеджерРегистра = РегистрыНакопления[МетаданныеРегистра.Имя];
	
	ИспользованиеИтогов = МенеджерРегистра.ПолучитьИспользованиеИтогов();
	МенеджерРегистра.УстановитьИспользованиеИтогов(Ложь);
	
	ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
	Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
		
		ОписаниеБлокировки.ПоляБлокировки.Регистратор = ВыборкаОбновляемыхДанных.Регистратор;
		Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Продолжить	
		КонецЕсли;
		
		НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаОбновляемыхДанных.Регистратор);
		НаборЗаписей.Прочитать();
		
		ОчиститьВидыДоходовИсполнительногоПроизводстваНабораЗаписей(НаборЗаписей, ИменаПолейПериодов);
		
		ВыгруженныйНабор = НаборЗаписей.Выгрузить(, КолонкиГруппировок + "," + КолонкиСуммирования);
		ВыгруженныйНабор.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		Для Каждого НулеваяСтрока Из ВыгруженныйНабор.НайтиСтроки(ОтборНулевыхСтрок) Цикл
			ВыгруженныйНабор.Удалить(НулеваяСтрока)
		КонецЦикла;	
		НаборЗаписей.Загрузить(ВыгруженныйНабор);
		
		// АПК:1327-выкл Блокировка выполнена в ОбновлениеИБ.НачатьОбновлениеДанных
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		// АПК:1327-вкл
		
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);			
		
	КонецЦикла;
	
	МенеджерРегистра.УстановитьИспользованиеИтогов(ИспользованиеИтогов);
	
КонецПроцедуры

#КонецОбласти

// АПК:299-вкл
// АПК:581-вкл

#Область Отчеты

// Формирование отчета Анализ начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	УчетНачисленнойЗарплатыВнутренний.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	
КонецПроцедуры

// Возвращает описание добавляемых пользовательских полей.
//
// Возвращаемое значение:
//		Имя - Имя колонки
//		Заголовок - Представление колонки в отчете.
//		ПорядокКолонки - Порядок, в котором должна располагаться колонка отчета.
//		ПриоритетКолонки - Приоритет отображения колонки, как отдельной колонки.
//		НомерКолонки - Номер колонки - используется для получения имени параметра отчета ("Колонка" + НомерКолонки).
//		ДобавитьПользовательскоеПоле - Булево - Если Истина, то пользовательское поле добавляется в коллекцию
//		                                        "ПользовательскиеПоля" варианта отчета, Ложь - поле не добавляется в
//		                                        коллекцию.
//		ВыводитьНулевыеЗначения - Булево - Если Истина, то пользовательское поле выводится в отчет всегда, Ложь - поле не выводится в отчет, если оно нулевое
//		КатегорииКолонки - Массив - Категории, которые выводятся в колонке, используется при составлении условия в
//										выражении пользовательского поля.
//		ПользовательскоеУсловие - Строка - Условие, которое будет использовано в выражении пользовательского поля,
//										при использовании условия "КатегорииКолонки" игнорируются.
//		УсловиеИсключенияИзПрочих - Строка - Условие исключения суммы из колонки "ПрочиеНачисления" или "ПрочиеУдержания",
//										используется в паре с "ПользовательскоеУсловие".
//		РезультатУсловия - Строка - Результат выполнения условия, если в выражении нужно получить не сумму по начислению, а
//										например дни.
//		ВыводитьКолонку - Булево - Если Истина, то колонка будет включена в список выводимых колонок,
//										используется, например, если пользовательское поле нужно создать, но выводить в отчет в определенном месте
//										всегда.
//
Функция ПорядокДополнительныхНачисленийИУдержаний() Экспорт
	
	ТаблицаНачисленийИУдержаний = Новый ТаблицаЗначений;
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Имя", 								Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("Заголовок",							Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПорядокКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПриоритетКолонки",					Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("НомерКолонки",						Новый ОписаниеТипов("Число"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ДобавитьПользовательскоеПоле",		Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ВыводитьНулевыеЗначения",				Новый ОписаниеТипов("Булево"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КатегорииКолонки",					Новый ОписаниеТипов("Массив"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ПользовательскоеУсловие",				Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("УсловиеИсключенияИзПрочих",			Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("РезультатУсловия",					Новый ОписаниеТипов("Строка"));
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("ВыводитьКолонку",						Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаНачисленийИУдержаний;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49();
КонецФункции

Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей = "Начисления", НаАванс = Ложь) Экспорт
	УчетНачисленнойЗарплатыВнутренний.ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей, НаАванс);
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки);
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	Возврат УчетНачисленнойЗарплатыВнутренний.ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		КорректировкиВыплаты - таблица значений с корректировками выплаты.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьКорректировкиВыплаты(ДанныеДляПроведения, Отказ, КорректировкиВыплаты, ЗаписыватьДвижения = Ложь)

	Если КорректировкиВыплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	
	ДанныеМежрасчетногоПериода = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	КорректировкиПоРабочимМестам = ТаблицаРаспределенияПоРабочимМестам();
	Для Каждого СтрокаКорректировки Из КорректировкиВыплаты Цикл
		НоваяСтрока = КорректировкиПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		Если СтрокаКорректировки.КорректировкаВыплаты < 0 Тогда
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
		Иначе
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
		КонецЕсли;
		НоваяСтрока.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		НоваяСтрока.Сумма = СтрокаКорректировки.КорректировкаВыплаты;
	КонецЦикла;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		Взаиморасчеты = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
		Для Каждого СтрокаКорректировки Из КорректировкиПоРабочимМестам Цикл
			НоваяСтрока = Взаиморасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
			НоваяСтрока.СуммаКорректировкиВыплаты = НоваяСтрока.Сумма;
			НоваяСтрока.Сумма = 0;
		КонецЦикла;
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ПорядокВыплаты, 
			Неопределено, Взаиморасчеты);
	КонецЕсли;	
	
	// Инвертируем суммы НДФЛКЗачету для отражения в НачисленияУдержанияПоСотрудникам
	ОтборСтрок = Новый Структура("НачислениеУдержание", Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету);
	НайденныеСтроки = КорректировкиПоРабочимМестам.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Сумма = -НайденнаяСтрока.Сумма;
	КонецЦикла;
	
	// Заполняем движения начислений (удержаний) удержанными суммами.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КорректировкиПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция РезультатыРаспределенияНДФЛ(ДанныеДляПроведения, РезультатРасчетаНДФЛ)
	
	Если РезультатРасчетаНДФЛ = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли РезультатРасчетаНДФЛ.Количество() = 0 Тогда
		Возврат ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	КонецЕсли;
	
	Движения 				= ДанныеДляПроведения.Движения;
	Организация 			= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	ОкончательныйРасчет		= ДанныеДляПроведения.ОкончательныйРасчет;
	Авансом					= ДанныеДляПроведения.Авансом;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Если Авансом Тогда
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникамАвансом";
	Иначе
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникам";
	КонецЕсли;
	ДвиженияНачисленийУдержаний = Движения[ИмяТаблицыРегистра];
	
	ИсключаемыйРегистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	
	ТаблицаНДФЛ = ОтражениеЗарплатыВУчете.НоваяТаблицаРезультатРасчетаНДФЛ();
	
	СтрокиНДФЛ = Новый Соответствие;
	НоваяКоллекцияРаспределениеНДФЛ = РезультатРасчетаНДФЛ.СкопироватьКолонки();
	НоваяКоллекцияРаспределениеНДФЛ.Колонки.МесяцНалоговогоПериода.Имя = "ДатаПолученияДохода";
	ИдентификаторСтроки = 1;
	Для каждого СтрокаТЗ Из РезультатРасчетаНДФЛ Цикл
		Если СтрокаТЗ.Сумма <> 0 Тогда
			СтрокиНДФЛ.Вставить(ИдентификаторСтроки, СтрокаТЗ);
			НоваяСтрока = ТаблицаНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			НоваяСтрока.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
			НоваяСтрока.Территория 			= СтрокаТЗ.Подразделение;
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	УдалитьВТ = Новый Массив;

	ИмяВТРаспределениеНачислений = "ВТРаспределениеНачисленийТекущегоДокумента";
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТРаспределениеНачислений) Тогда
		СоздатьПустуюВТРаспределениеНачисленийТекущегоДокумента(МенеджерВременныхТаблиц);
		УдалитьВТ.Добавить(ИмяВТРаспределениеНачислений);
	КонецЕсли;
	
	Если Движения.Найти("СведенияОДоходахНДФЛ") <> Неопределено Тогда
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, Движения.СведенияОДоходахНДФЛ, Истина);
	КонецЕсли;
	
	Если Движения.Найти("ДокументыУчтенныеПриРасчетеНДФЛ") <> Неопределено
		И ПериодРегистрации >= ОтражениеЗарплатыВУчете.ДатаНачалаИспользованияОснованийВРаспределенииНДФЛ() Тогда
		ОснованияУчтенныеПриРасчетеНДФЛ = Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Выгрузить();
		ОтражениеЗарплатыВУчете.СоздатьВТУсловияОтбораДляРаспределенияНДФЛ(МенеджерВременныхТаблиц, ОснованияУчтенныеПриРасчетеНДФЛ, ИсключаемыйРегистратор);
		УдалитьВТ.Добавить("ВТУсловияОтбораДляРаспределенияНДФЛ");
		ОснованияУчтенныеПриРасчетеНДФЛ = Неопределено;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ФизическоеЛицо", Истина);
	УдержанияМассив 	 = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ВидУдержания", Истина);
	
	// Получение данных для распределения, ДанныеДляРаспределенияНДФЛ - структура
	// БазаВсеНачисления - таблица значений с базовыми начислениями
	// СтрокиУжеУдержано - соответствие, содержит данные об уже выполненных удержаниях по физическому лиц
	// в менеджере временных таблиц будет создана таблица ВТРаспределениеНачисленийДляБазыНДФЛ для получения базы НДФЛ.
	
	ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияНДФЛ();
	ПараметрыРаспределения.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
	ПараметрыРаспределения.Организация 				= Организация;
	ПараметрыРаспределения.ПериодРегистрации 		= ПериодРегистрации;
	ПараметрыРаспределения.МассивФизическихЛиц 		= ФизическиеЛицаМассив;
	ПараметрыРаспределения.МассивУдержаний 			= УдержанияМассив;
	ПараметрыРаспределения.ИсключаемыйРегистратор 	= ИсключаемыйРегистратор;
	ПараметрыРаспределения.ОкончательныйРасчет 		= ОкончательныйРасчет;
	ПараметрыРаспределения.ИмяВТДанныеТекущегоДокумента = ИмяВТРаспределениеНачислений;
	
	ДанныеДляРаспределенияНДФЛ = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияНДФЛ(ПараметрыРаспределения);
	УдалитьВТ.Добавить("ВТРаспределениеНачисленийДляБазыНДФЛ");
	
	БазаВсеНачисления = ДанныеДляРаспределенияНДФЛ.БазаВсеНачисления;
	СтрокиУжеУдержано = ДанныеДляРаспределенияНДФЛ.СтрокиУжеУдержано;
	
	БазаРасчетаНДФЛ = ОтражениеЗарплатыВУчете.БазаДляРаспределенияНДФЛ(ПараметрыРаспределения);
	
	РаспределениеНДФЛ = ОтражениеЗарплатыВУчете.НДФЛПоРабочимМестамИСтатьям(ТаблицаНДФЛ, БазаРасчетаНДФЛ, БазаВсеНачисления,
																				СтрокиУжеУдержано, Организация, ПериодРегистрации);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	Для каждого ЭлементКоллекции Из СтрокиНДФЛ Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеНДФЛ.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеНДФЛ.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.ДатаПолученияДохода 	= ЭлементКоллекции.Значение.МесяцНалоговогоПериода;
				НоваяСтрока.Сотрудник 				= СтрокаТЗ.Сотрудник;
				НоваяСтрока.ПодразделениеСотрудника = СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 			= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.СтатьяФинансирования 	= СтрокаТЗ.СтатьяФинансирования;
				НоваяСтрока.ВидДоходаИсполнительногоПроизводства = СтрокаТЗ.ВидДоходаИсполнительногоПроизводства;
				НоваяСтрока.Сумма 					= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат НоваяКоллекцияРаспределениеНДФЛ;
	
КонецФункции

Функция РезультатыРаспределенияКорректировокВыплаты(ДанныеДляПроведения, КорректировкиВыплаты)

	Если КорректировкиВыплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РаспределениеКорректировок = ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	Если КорректировкиВыплаты.Количество() = 0 Тогда
		Возврат РаспределениеКорректировок;
	КонецЕсли;
	
	Движения 				= ДанныеДляПроведения.Движения;
	Организация 			= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	ОкончательныйРасчет		= ДанныеДляПроведения.ОкончательныйРасчет;
	Авансом					= ДанныеДляПроведения.Авансом;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Если Авансом Тогда
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникамАвансом";
	Иначе
		ИмяТаблицыРегистра = "НачисленияУдержанияПоСотрудникам";
	КонецЕсли;
	ДвиженияНачисленийУдержаний = Движения[ИмяТаблицыРегистра];
	
	ИсключаемыйРегистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	
	НДФЛКЗачету = ОтражениеЗарплатыВУчете.НоваяТаблицаКорректировкиВыплаты();
	НДФЛЗачтено = ОтражениеЗарплатыВУчете.НоваяТаблицаКорректировкиВыплаты(); 
	
	СтрокиКорректировок = Новый Соответствие;
	НоваяКоллекцияКорректировкиВыплаты = Неопределено;
	Если КорректировкиВыплаты <> Неопределено Тогда
		НоваяКоллекцияКорректировкиВыплаты = КорректировкиВыплаты.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из КорректировкиВыплаты Цикл
			Сумма = СтрокаТЗ.КорректировкаВыплаты;
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокиКорректировок.Вставить(ИдентификаторСтроки, СтрокаТЗ);
			Если Сумма < 0 Тогда
				НоваяСтрока = НДФЛКЗачету.Добавить();
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
			ИначеЕсли Сумма > 0 Тогда
				НоваяСтрока = НДФЛЗачтено.Добавить();
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Сумма 				= Сумма;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
			КонецЕсли;
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЦикла;
	КонецЕсли;

	УдалитьВТ = Новый Массив;

	ИмяВТРаспределениеНачислений = "ВТРаспределениеНачисленийТекущегоДокумента";
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТРаспределениеНачислений) Тогда
		СоздатьПустуюВТРаспределениеНачисленийТекущегоДокумента(МенеджерВременныхТаблиц);
		УдалитьВТ.Добавить(ИмяВТРаспределениеНачислений);
	КонецЕсли;
	
	Если НДФЛКЗачету.Количество() > 0 Тогда
		
		Если Движения.Найти("СведенияОДоходахНДФЛ") <> Неопределено Тогда
			ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, Движения.СведенияОДоходахНДФЛ, Истина);
		КонецЕсли;
		
		Если Движения.Найти("ДокументыУчтенныеПриРасчетеНДФЛ") <> Неопределено
			И ПериодРегистрации >= ОтражениеЗарплатыВУчете.ДатаНачалаИспользованияОснованийВРаспределенииНДФЛ() Тогда
			ОснованияУчтенныеПриРасчетеНДФЛ = Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Выгрузить();
			ОтражениеЗарплатыВУчете.СоздатьВТУсловияОтбораДляРаспределенияНДФЛ(МенеджерВременныхТаблиц, ОснованияУчтенныеПриРасчетеНДФЛ, ИсключаемыйРегистратор);
			УдалитьВТ.Добавить("ВТУсловияОтбораДляРаспределенияНДФЛ");
			ОснованияУчтенныеПриРасчетеНДФЛ = Неопределено;
		КонецЕсли;
		
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛКЗачету, "ФизическоеЛицо", Истина);
		УдержанияМассив 	 = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛКЗачету, "ВидУдержания", Истина);
		
		// Получение данных для распределения, ДанныеДляРаспределенияНДФЛ - структура
		// БазаВсеНачисления - таблица значений с базовыми начислениями
		// СтрокиУжеУдержано - соответствие, содержит данные об уже выполненных удержаниях по физическому лиц
		// в менеджере временных таблиц будет создана таблица ВТРаспределениеНачисленийДляБазыНДФЛ для получения базы НДФЛ.
		
		ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияНДФЛ();
		ПараметрыРаспределения.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
		ПараметрыРаспределения.Организация 				= Организация;
		ПараметрыРаспределения.ПериодРегистрации 		= ПериодРегистрации;
		ПараметрыРаспределения.МассивФизическихЛиц 		= ФизическиеЛицаМассив;
		ПараметрыРаспределения.МассивУдержаний 			= УдержанияМассив;
		ПараметрыРаспределения.ИсключаемыйРегистратор 	= ИсключаемыйРегистратор;
		ПараметрыРаспределения.ОкончательныйРасчет 		= ОкончательныйРасчет;
		ПараметрыРаспределения.ИмяВТДанныеТекущегоДокумента = ИмяВТРаспределениеНачислений;
		
		ДанныеДляРаспределенияНДФЛ = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияНДФЛ(ПараметрыРаспределения);
		УдалитьВТ.Добавить("ВТРаспределениеНачисленийДляБазыНДФЛ");
		
		БазаВсеНачисления = ДанныеДляРаспределенияНДФЛ.БазаВсеНачисления;
		БазаРасчетаНДФЛ   = ОтражениеЗарплатыВУчете.БазаДляРаспределенияНДФЛ(ПараметрыРаспределения);
		
		РаспределениеНДФЛКЗачету = ОтражениеЗарплатыВУчете.КорректировкиВыплатыПоРабочимМестамИСтатьям(НДФЛКЗачету, БазаРасчетаНДФЛ, БазаВсеНачисления,
									Организация, ПериодРегистрации);
									
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РаспределениеНДФЛКЗачету, РаспределениеКорректировок);
		
	КонецЕсли;
	
	Если НДФЛЗачтено.Количество()>0 Тогда
		
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛЗачтено, "ФизическоеЛицо", Истина);
		УдержанияМассив 	 = Новый Массив;
		
		// Получение данных для распределения, ДанныеДляРаспределения - структура
		// БазаВсеНачисления - таблица значений с базовыми начислениями
		// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лиц.
		ПараметрыПолученияДанных = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных , ДанныеДляПроведения, "МенеджерВременныхТаблиц,Организация,ПериодРегистрации,ОкончательныйРасчет");
		ПараметрыПолученияДанных.ИмяВТДанныеТекущегоДокумента = ИмяВТРаспределениеНачислений;
		ИсключаемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыйРегистратор);
		ДанныеДляРаспределения = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияУдержаний(ФизическиеЛицаМассив, УдержанияМассив, ИсключаемыеРегистраторы, ПараметрыПолученияДанных);
		
		БазаВсеНачисления = ДанныеДляРаспределения.БазовыеНачисления;
		СтрокиУжеУдержано = ДанныеДляРаспределения.СтрокиУжеУдержано;
		
		// КорректировкиВыплаты могут служить базой для распределения, нужно переименовать колонку "КорректировкаВыплаты".
		БазаРасчетаНДФЛ = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(Организация, ПериодРегистрации, ФизическиеЛицаМассив, ИсключаемыйРегистратор);
		БазаРасчетаНДФЛ.Колонки.СуммаКорректировки.Имя = "Сумма";
		
		РаспределениеНДФЛЗачтено = ОтражениеЗарплатыВУчете.КорректировкиВыплатыПоРабочимМестамИСтатьям(НДФЛЗачтено, БазаРасчетаНДФЛ, БазаВсеНачисления,
									Организация, ПериодРегистрации);
									
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РаспределениеНДФЛЗачтено, РаспределениеКорректировок);
		
	КонецЕсли;
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	Для каждого ЭлементКоллекции Из СтрокиКорректировок Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеКорректировок.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияКорректировкиВыплаты.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияКорректировкиВыплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 			 = СтрокаТЗ.Сотрудник;
				НоваяСтрока.Подразделение 		 = СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 		 = СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.СтатьяФинансирования = СтрокаТЗ.СтатьяФинансирования;
				НоваяСтрока.ВидДоходаИсполнительногоПроизводства = СтрокаТЗ.ВидДоходаИсполнительногоПроизводства;
				НоваяСтрока.КорректировкаВыплаты = СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат НоваяКоллекцияКорректировкиВыплаты;
	
КонецФункции

#Область ФормированиеПечатныхФорм

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		УчетНачисленнойЗарплатыВнутренний.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
	КонецЕсли;
	
КонецПроцедуры

Функция РасчетныйЛистокПоДаннымДокумента(Организация, ФизическиеЛица, Месяц, ИсключаемыеСсылки = Неопределено, ДанныеДокумента = Неопределено) Экспорт
	
	ДокументРезультат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ОтчетРасчетныйЛисток = ЗарплатаКадрыОтчеты.ОтчетРасчетныйЛисток();
		
		Если ИсключаемыеСсылки <> Неопределено Тогда
			ПараметрИсключаемыеСсылки = ОтчетРасчетныйЛисток.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИсключаемыеСсылки");
			ПараметрИсключаемыеСсылки.Значение = ИсключаемыеСсылки;
		КонецЕсли;
		
		Если ДанныеДокумента <> Неопределено Тогда
			ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеДокумента", ДанныеДокумента);
			ОтчетРасчетныйЛисток.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредварительныйПросмотр", Ложь);
		КонецЕсли;
		
		ДокументРезультат = Отчеты.АнализНачисленийИУдержаний.РасчетныйЛисток(
			ФизическиеЛица, Организация, Месяц, ОтчетРасчетныйЛисток);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'Не удалось, сформировать отчет.'") + " " + КраткоеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДокументРезультат = Неопределено Тогда
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.АвтоМасштаб = Истина;
		ДокументРезультат.ОтображатьЗаголовки = Ложь;
		ДокументРезультат.ОтображатьСетку = Ложь;
		
	КонецЕсли; 
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти