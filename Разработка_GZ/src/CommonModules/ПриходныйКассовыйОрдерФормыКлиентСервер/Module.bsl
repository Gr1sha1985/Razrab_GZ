#Область СлужебныеФункцииИПроцедуры

// Показывает предупреждение что надо напечатать чек коррекции, 
// если по документу уже был напечатан чек
Процедура ПоказатьПредупреждениеПечатьЧека(Форма) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьФискальныеОперацииПоДокументу") Тогда
		ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	КонецЕсли; 
КонецПроцедуры

Функция ПараметрыУстановкиСвойствСубконто(Форма) Экспорт
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоКт",
		"ПодразделениеКт",
		"СубконтоКт",
		"ПодразделениеКт",
		"СчетУчетаРасчетовСКонтрагентом");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьИтоги(Форма) Экспорт
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
	
	ИтогоСуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ИтогоВсегоНДС     = РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если НЕ ФормаРасшифровкиПлатежа(Форма) Тогда
		Форма.ИтогоСуммаПлатежа = ИтогоСуммаПлатежа;
		Форма.ИтогоВсегоНДС     = ИтогоВсегоНДС;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка") Тогда
		Элементы.РасшифровкаВыручкиСуммаПлатежа.ТекстПодвала = Формат(ИтогоСуммаПлатежа, "ЧЦ=15; ЧДЦ=2");
		Элементы.РасшифровкаВыручкиСуммаНДС.ТекстПодвала     = Формат(ИтогоВсегоНДС,     "ЧЦ=15; ЧДЦ=2");
	Иначе
		Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
			Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(ИтогоСуммаПлатежа, "ЧЦ=15; ЧДЦ=2");
			Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(ИтогоВсегоНДС,     "ЧЦ=15; ЧДЦ=2");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДС(СтрокаПлатежа) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма) Экспорт
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма) Экспорт
	
	Объект = Форма.Объект;
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Объект.ВалютаДокумента,   СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента,      СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

Процедура УстановитьОграничениеТипаКонтрагента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеКредита") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Контрагент'");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru='Введите ИНН или наименование'");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Подотчетное лицо'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Банковский счет'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Склад'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаРаботником") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Работник'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.Заголовок       = НСтр("ru='Контрагент'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПодразделениеКт(Форма) Экспорт
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеКредита") Тогда
		Объект.ПодразделениеКт = Неопределено;
	Иначе
		Объект.ПодразделениеКт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораСчетаБанка(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетБанк.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораСчетаКассы(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив();
	Для каждого СтарыйПараметр Из Элементы.СчетКасса.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаРаботником") Тогда
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Ложь));
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетКасса.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте ИЛИ НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораВалютыДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	Если НЕ Форма.ОплатаВВалюте И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ВалютаРегламентированногоУчета));
	КонецЕсли;
	
	Элементы.ВалютаДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж) Экспорт
	
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

Процедура ОбновитьИтогиУСН(Форма) Экспорт
	
	Если Форма.ПрименениеУСН Тогда
		Объект = Форма.Объект;
		Если ФормаДокументаОднострочная(Форма) Тогда
			Объект.Графа5_УСН = Форма.РасшифровкаПлатежаДоходыУСН;
		Иначе
			РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
			Объект.Графа5_УСН = РасшифровкаПлатежа.Итог("ДоходыУСН");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеСтрокиВУСН(СтрокаТЧ, Форма) Экспорт
	
	Если Форма.ПрименениеУСН Тогда
		ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
		ДанныеСтроки = Новый Структура("СуммаПлатежа, ДоходыУСН, СчетУчетаРасчетовСКонтрагентом");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЧ);
		ПриходныйКассовыйОрдерФормыВызовСервера.ЗаполнитьОтражениеСтрокиВУСННаСервере(ДанныеСтроки, ПараметрыУСН);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтроки);
		
		ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПрочееТекстДоходыУСН(Форма) Экспорт
	
	Если НЕ Форма.ПрименениеУСН Тогда
			Форма.ПрочееТекстДоходыУСН = "";
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	ВалютаРегл = Форма.ВалютаРегламентированногоУчета;
	СтрФорматСумм = "Л=ru; ЧРД=,; ЧРГ=' '; ЧН=0; ЧГ=3,0";
	
	СуммаДоходыВсего = Объект.Графа4_УСН;
	
	ТекстДоходы = "";
	
	СуммаДоходыНеПринимаемые = СуммаДоходыВсего - Объект.Графа5_УСН;
	Если СуммаДоходыВсего = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Сумма документа не указана'");
	ИначеЕсли СуммаДоходыНеПринимаемые = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Доходы принимаются полностью'");
	ИначеЕсли Объект.Графа5_УСН = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Принимаемые доходы отсутствуют'");
	Иначе
		ТекстДоходы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Непринимаемые доходы: %1 %2'"),
			Формат(СуммаДоходыНеПринимаемые, СтрФорматСумм), ВалютаРегл);
	КонецЕсли;
	
	Форма.ПрочееТекстДоходыУСН = ТекстДоходы;
	
КонецПроцедуры

Процедура ЗаголовокГруппыРеквизитовПечатнойФормы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.ПринятоОт)
		ИЛИ ЗначениеЗаполнено(Объект.Основание)
		ИЛИ ЗначениеЗаполнено(Объект.Приложение) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Реквизиты печатной формы: '")
			+ ?(ЗначениеЗаполнено(Объект.ПринятоОт), СокрЛП(Строка(Объект.ПринятоОт)) + "; ", "")
			+ ?(ЗначениеЗаполнено(Объект.Основание), СокрЛП(Строка(Объект.Основание)) + "; ", "")
			+ ?(ЗначениеЗаполнено(Объект.Приложение), СокрЛП(Строка(Объект.Приложение)) + ";", "");
		ТекстЗаголовка = СокрЛП(ТекстЗаголовка);
		Если Прав(ТекстЗаголовка, 1) = ";" Тогда
			
			ФрагментТекста = Лев(ТекстЗаголовка, СтрДлина(ТекстЗаголовка) - 1);
			ТекстЗаголовка = ФрагментТекста + ?(Прав(ФрагментТекста, 1) = ".", "", ".");
			
		КонецЕсли;		
		УстановитьЗаголовокГруппы(Форма, "ГруппаРеквизитыПечатнойФормы", ТекстЗаголовка);
				
	Иначе
		
		УстановитьЗаголовокГруппы(Форма, "ГруппаРеквизитыПечатнойФормы", НСтр("ru = 'Реквизиты печатной формы'"));
		
	КонецЕсли;

КонецПроцедуры // ЗаголовокГруппыРеквизитовПечатнойФормы()

Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

Процедура ФормированиеПринятоОт(Форма, Знач ФизЛицо) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.Вставить("ПринятоОтФизЛицо", ФизЛицо);
	НовыеПараметры   = ПриходныйКассовыйОрдерФормыВызовСервера.НовыеПараметрыПриВыбореПринятоОт(ПараметрыОбъекта);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПринятоОт");
	
КонецПроцедуры

Функция ЕстьРасшифровкаПлатежа(ВидОперации) Экспорт
	
	ЕстьРасшифровка = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеЗайма")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПолучениеКредита");
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Если ЗначениеЗаполнено(ПараметрыОбъекта.УслугаНПД) Тогда
			СвойстваПлатежа.УслугаНПД = ПараметрыОбъекта.УслугаНПД;
		КонецЕсли;
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, Сделка,
			|ПрименениеУСН, ПрименяетсяОсобыйПорядокНалогообложения, ПлательщикНДС, ПлательщикНПД, УслугаНПД,
			|СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		Возврат ПриходныйКассовыйОрдерФормыВызовСервера.СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

Функция ПустаяСтруктураСвойстваПлатежа() Экспорт
	
	СвойстваПлатежа = Новый Структура;
	СвойстваПлатежа.Вставить("УслугаНПД", Неопределено);
	СвойстваПлатежа.Вставить("ДоговорКонтрагента", Неопределено);
	СвойстваПлатежа.Вставить("Сделка", Неопределено);
	СвойстваПлатежа.Вставить("СчетУчетаРасчетовСКонтрагентом", Неопределено);
	СвойстваПлатежа.Вставить("СчетУчетаРасчетовПоАвансам", Неопределено);
	СвойстваПлатежа.Вставить("ДоговорКонтрагентаВалютаВзаиморасчетов", Неопределено);
	СвойстваПлатежа.Вставить("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Ложь);
	СвойстваПлатежа.Вставить("СпособПогашенияЗадолженности", ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.Автоматически"));
	СвойстваПлатежа.Вставить("СтавкаНДС", Неопределено);
	СвойстваПлатежа.Вставить("КурсВзаиморасчетов", 0);
	СвойстваПлатежа.Вставить("КратностьВзаиморасчетов", 0);
	СвойстваПлатежа.Вставить("ПорядокОтраженияАванса", Неопределено);
	СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", Неопределено);
	
	Возврат СвойстваПлатежа;
	
КонецФункции
 
Функция ТекущиеПараметрыОбъекта(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, Контрагент, ВалютаДокумента, СчетКасса, ВыручкаСНТТ");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,    Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета",  Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                   Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("РозничнаяТорговляОблагаетсяЕНВД", Форма.РозничнаяТорговляОблагаетсяЕНВД);
	ПараметрыОбъекта.Вставить("ПлательщикНДС",                   Форма.ПлательщикНДС);
	ПараметрыОбъекта.Вставить("УчетВПродажныхЦенах",             Форма.УчетВПродажныхЦенах);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                   Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПлательщикЕНВД",                  Форма.ПлательщикЕНВД);
	ПараметрыОбъекта.Вставить("ПлательщикНПД",                   Форма.ПлательщикНПД);
	ПараметрыОбъекта.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Форма.ПрименяетсяОсобыйПорядокНалогообложения);
	
	СтатьяДДС = УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию(Объект.ВидОперации);
	Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств",
			?(Форма.СвойстваПлатежа = Неопределено, Неопределено, Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств));
	Иначе
		ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДДС);
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("УслугаНПД",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено, Форма.СвойстваПлатежа.УслугаНПД));
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура ИнициализироватьСвойстваПлатежа(Форма) Экспорт
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		Форма.СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаПлатежа = РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Доступность =
		СтрокаПлатежа.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
	Элементы.ГруппаСделка.Видимость = СтрокаПлатежа.СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
	
КонецПроцедуры

Процедура ДоступностьСтавкиНДС(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.РасшифровкаПлатежаСуммаНДС.ТолькоПросмотр = (Форма.РасшифровкаПлатежаСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") 
		Или Форма.РасшифровкаПлатежаСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	
КонецПроцедуры

#Область ОтражениеДоходов

Функция ИменаЭлементовОтраженияДохода() Экспорт
	
	Имена = Новый Массив;
	
	Имена.Добавить("РасшифровкаПлатежаОтражениеАвансаПредставление");
	Имена.Добавить("РасшифровкаПлатежаОтражениеДоходаПредставление");
	Имена.Добавить("РасшифровкаВыручкиОтражениеДоходаПредставление");
	
	Возврат Имена;
	
КонецФункции

#КонецОбласти

#Область РасшифровкаПлатежа

Функция СтруктураРеквизитовРасшифровкаПлатежа()
	
	Возврат Новый Структура("ДоговорКонтрагента,
		|УслугаНПД,
		|СпособПогашенияЗадолженности,
		|Сделка,
		|СтатьяДвиженияДенежныхСредств,
		|КурсВзаиморасчетов,
		|КратностьВзаиморасчетов,
		|СуммаПлатежа,
		|СуммаВзаиморасчетов,
		|СтавкаНДС,
		|СуммаНДС,
		|СчетНаОплату,
		|СчетУчетаРасчетовСКонтрагентом,
		|СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов,
		|ПорядокОтраженияАванса,
		|ОтражениеАвансаПредставление,
		|ОтражениеДоходаПредставление,
		|ДоходыУСН");
	
КонецФункции

Функция ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма) Экспорт
	
	РеквизитыРасшифровки = СтруктураРеквизитовРасшифровкаПлатежа();
	
	Результат = Новый Структура;
	Для каждого КлючИЗначение Из РеквизитыРасшифровки Цикл
		Результат.Вставить(КлючИЗначение.Ключ, Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ]);
	КонецЦикла;
	
	// Временные реквизиты формы
	Результат.Вставить("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Форма.ЕстьРасчетыВУсловныхЕдиницах);
	Результат.Вставить("ОтражениеАвансаПредставление",               Форма.РасшифровкаПлатежаОтражениеАвансаПредставление);
	
	Возврат Результат;
	
КонецФункции

// Переносит строку табличной части РасшифровкаПлатежа в реквизиты однострочной формы, если взведен флаг "ЗаполнитьРеквизитыФормы"
// или, наоборот, заполняет первую строку названной табличной части на основании реквизитов однострочной формы.
//
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения - однострочная форма ПКО
//  ЗаполнитьРеквизитыФормы	 - Булево - если ИСТИНА, то заполняются реквизиты однострочной формы, если Ложь - первая строка ТЧ
//  СтрокаПлатежа - Структура - данные строки табличной части, являющейся источником изменений.
//
Процедура ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, ЗаполнитьРеквизитыФормы = Ложь, СтрокаПлатежа = Неопределено) Экспорт
	
	Если НЕ ЗаполнитьРеквизитыФормы И НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если НЕ ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Если НЕ ЗаполнитьРеквизитыФормы Тогда
			Возврат;
		ИначеЕсли СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если НЕ ЗаполнитьРеквизитыФормы И СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураРеквизитовРасшифровкаПлатежа() Цикл
		Если ЗаполнитьРеквизитыФормы Тогда
			// Заполняются реквизиты однострочной формы
			Если СтрокаПлатежа <> Неопределено Тогда
				СтрокаПлатежа.Свойство(КлючИЗначение.Ключ, Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ]);
			Иначе
				Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ] = Объект.РасшифровкаПлатежа[0][КлючИЗначение.Ключ];
			КонецЕсли;
		Иначе
			// Заполняются реквизиты ТЧ документа
			Объект.РасшифровкаПлатежа[0][КлючИЗначение.Ключ] = Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаполнитьРеквизитыФормы Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НазваниеТаблицыРасшифровкиПлатежа(ВидОперации) Экспорт
	Перем НазваниеТабличнойЧасти;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка") Тогда
		НазваниеТабличнойЧасти = "РасшифровкаВыручки";
	Иначе // Название для других видов операций
		Если ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
			НазваниеТабличнойЧасти = "РасшифровкаПлатежа";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НазваниеТабличнойЧасти;
	
КонецФункции

Функция РасшифровкаПлатежаТекущиеДанные(Форма, Знач ТабличнаяЧасть = Неопределено) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Результат = Неопределено;
	Если ФормаДокументаОднострочная(Форма) Тогда
		Результат = ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма);
	Иначе
		Если ТабличнаяЧасть = Неопределено Тогда
			ТабличнаяЧасть = НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
		КонецЕсли;
		РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
		Если Элементы.Найти(ТабличнаяЧасть) <> Неопределено
			И Элементы[ТабличнаяЧасть].ТекущаяСтрока <> Неопределено Тогда
			Результат = РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы[ТабличнаяЧасть].ТекущаяСтрока);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Если РасшифровкаПлатежа.Количество() = 0 Тогда
				РасшифровкаПлатежа.Добавить();
			КонецЕсли;
			
			Результат = РасшифровкаПлатежа[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФормаДокументаОднострочная(Форма) Экспорт
	
	Возврат БанкИКассаФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
КонецФункции

Функция ПолучитьРасшифровкаПлатежа(Форма) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		// Это дополнительная форма редактирования табличной части.
		// Необходимые реквизиты документа хранятся в ней в качестве отдельных реквизитов.
		Объект = Форма;
	Иначе
		// Это основная форма документа, у нее есть реквизит Объект.
		Объект = Форма.Объект;
	КонецЕсли;
	
	Возврат Объект["РасшифровкаПлатежа"];
	
КонецФункции

Функция ФормаРасшифровкиПлатежа(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0;
	
КонецФункции

#КонецОбласти

#Область СчетаУчета

Функция ДокументМожетБытьОформленВВалюте(ВидОперации) Экспорт
	
	Возврат ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаРаботником")
		И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.РозничнаяВыручка")
		И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом");
	
КонецФункции

Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено) Экспорт
	
	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()
	
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПриходныйКассовыйОрдер",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);
	
	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетКасса");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеКт");
	КонецЕсли;
	
	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКасса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;
	
	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

