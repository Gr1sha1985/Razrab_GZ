#Область ОписаниеФормы

// Описывает "словарь" реквизитов, представленных в формах для отчетности.
// Это могут быть как реквизиты организации (основного объекта формы),
// так и реквизиты формы.
// Отличить одни от других можно с помощью функции РазмещениеДанныхФормыДляОтчетности.
//
Функция ВсеРеквизитыДляОтчетности(ЮридическоеФизическоеЛицо)
	
	ЭтоЮрлицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Реквизиты = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Реквизиты, ВсеРеквизитыОрганизацииДляОтчетности(ЭтоЮрлицо));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Реквизиты, ВсеРеквизитыКонтактнойИнформацииДляОтчетности(ЭтоЮрлицо));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Реквизиты, ВсеРеквизитыРуководителяДляОтчетности(ЭтоЮрлицо));
	
	Возврат Реквизиты;
	
КонецФункции

Функция ВсеРеквизитыОрганизацииДляОтчетности(ЭтоЮрлицо)
	
	Реквизиты = Новый Массив;
	
	Если ЭтоЮрлицо Тогда
		Реквизиты.Добавить("НаименованиеСокращенное");   // Только для юрлиц
		Реквизиты.Добавить("НаименованиеПолное");        // Только для юрлиц
	Иначе
		Реквизиты.Добавить("ФамилияИП");                 // Только для ИП
		Реквизиты.Добавить("ИмяИП");                     // Только для ИП
		Реквизиты.Добавить("ОтчествоИП");                // Только для ИП
	КонецЕсли;
	
	Реквизиты.Добавить("ИНН");
	
	Если ЭтоЮрлицо Тогда
		Реквизиты.Добавить("КПП");                       // Только для юрлиц
	КонецЕсли;
	
	Реквизиты.Добавить("ДатаРегистрации");
	
	Если НЕ ЭтоЮрлицо Тогда
		Реквизиты.Добавить("ИПРегистрационныйНомерПФР"); // Только для ИП
	КонецЕсли;
	
	Реквизиты.Добавить("РегистрационныйНомерПФР");
	Реквизиты.Добавить("РегистрационныйНомерФСС");
	Реквизиты.Добавить("КодПоОКПО");
	Реквизиты.Добавить("КодПоОКТМО");
	Реквизиты.Добавить("КодНалоговогоОргана");
	Реквизиты.Добавить("НаименованиеНалоговогоОргана");
	Реквизиты.Добавить("КодОрганаПФР");
	Реквизиты.Добавить("НаименованиеТерриториальногоОрганаПФР");
	Реквизиты.Добавить("КодПодчиненностиФСС");
	Реквизиты.Добавить("НаименованиеТерриториальногоОрганаФСС");
	Реквизиты.Добавить("КодОКВЭД2");
	Реквизиты.Добавить("НаименованиеОКВЭД2");
	Реквизиты.Добавить("ОГРН");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ВсеРеквизитыКонтактнойИнформацииДляОтчетности(ЭтоЮрлицо)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Телефон");
	Реквизиты.Добавить("Адрес");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ВсеРеквизитыРуководителяДляОтчетности(ЭтоЮрлицо)
	
	Реквизиты = Новый Массив;
	
	Если НЕ ЭтоЮрлицо Тогда
		// Реквизиты руководителя требуются только для юрлиц.
		Возврат Реквизиты;
	КонецЕсли;
	
	Реквизиты.Добавить("РуководительФамилия");
	Реквизиты.Добавить("РуководительИмя");
	Реквизиты.Добавить("РуководительОтчество");
	Реквизиты.Добавить("РуководительДолжность");
	
	Возврат Реквизиты;
	
КонецФункции

// Описывает размещение проверяемых реквизитов в форме
// 
// Возвращаемое значение:
//  Структура - перечень реквизитов, размещенных на форме отдельно от объекта организации
//   * Ключ - имя реквизита из словаря, приведенного в ВсеРеквизитыДляОтчетности()
//   * Значение - путь в форме к данным этого реквизита
//
Функция РазмещениеДанныхФормыДляОтчетности()
	
	Пути = Новый Структура;
	
	Пути.Вставить("КодПоОКТМО",            "КодПоОКТМО");
	
	Пути.Вставить("Адрес",                 "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	Пути.Вставить("Телефон",               "КонтактнаяИнформацияПолеТелефонОрганизации");
	
	Пути.Вставить("РуководительФамилия",   "РуководительФамилия");
	Пути.Вставить("РуководительИмя",       "РуководительИмя");
	Пути.Вставить("РуководительОтчество",  "РуководительОтчество");
	Пути.Вставить("РуководительДолжность", "РуководительДолжность");
	
	// Остальные реквизиты предполагаются в Объект (Объект.Наименование и т.п.)
	
	Возврат Пути;
	
КонецФункции

Функция СвязанныеДанные()
	
	// Группу связанных данных считаем атомарной:
	// должны быть заполнены все элементы группы или ни один из них.
	
	СвязанныеДанные = Новый Соответствие;
	// Для оптимизации группы описаны многократно - для каждого из элементов группы описана вся группа:
	// * ключ     - путь к данным, входящим в одну из групп
	// * значение - список путей к остальным данным, входящим в эту группу
	// См. также ОстальныеЭлементыГруппыСвязанных()
	
	// 1. Наименования обязательны, если указаны коды, и наоборот
	СвязанныеДанные.Вставить("Объект.КодОрганаПФР",                          "Объект.НаименованиеТерриториальногоОрганаПФР");
	СвязанныеДанные.Вставить("Объект.НаименованиеТерриториальногоОрганаПФР", "Объект.КодОрганаПФР");
	
	СвязанныеДанные.Вставить("Объект.НаименованиеТерриториальногоОрганаФСС", "Объект.КодПодчиненностиФСС");
	СвязанныеДанные.Вставить("Объект.КодПодчиненностиФСС",                   "Объект.НаименованиеТерриториальногоОрганаФСС");
	
	СвязанныеДанные.Вставить("Объект.НаименованиеОКВЭД2",                    "Объект.КодОКВЭД2");
	СвязанныеДанные.Вставить("Объект.КодОКВЭД2",                             "Объект.НаименованиеОКВЭД2");
	
	// 2. Законодательство РФ предполагает, что у человека обязательно есть имя и фамилия
	СвязанныеДанные.Вставить("РуководительФамилия",                          "РуководительИмя");
	СвязанныеДанные.Вставить("РуководительИмя",                              "РуководительФамилия");
	
	// 3. В программе код ОКТМО хранится в составе данных о налоговой инспекции и зависит от адреса
	СвязанныеДанные.Вставить("Объект.КодНалоговогоОргана",                   "КонтактнаяИнформацияПолеЮрАдресОрганизации,КодПоОКТМО,Объект.НаименованиеНалоговогоОргана");
	СвязанныеДанные.Вставить("Объект.НаименованиеНалоговогоОргана",          "КонтактнаяИнформацияПолеЮрАдресОрганизации,КодПоОКТМО,Объект.КодНалоговогоОргана");
	СвязанныеДанные.Вставить("КодПоОКТМО",                                   "КонтактнаяИнформацияПолеЮрАдресОрганизации,Объект.КодНалоговогоОргана,Объект.НаименованиеНалоговогоОргана");
	СвязанныеДанные.Вставить("КонтактнаяИнформацияПолеЮрАдресОрганизации",   "КодПоОКТМО,Объект.КодНалоговогоОргана,Объект.НаименованиеНалоговогоОргана");
	
	Возврат СвязанныеДанные;
	
КонецФункции

Функция СвязанныеНадписи()
	
	СвязанныеНадписи = Новый Соответствие;
	СвязанныеНадписи.Вставить("ЗаполнитьРеквизитыПоИНН",         "ИНН");
	СвязанныеНадписи.Вставить("ПояснениеНекорректныйИНН",        "ИНН");
	СвязанныеНадписи.Вставить("ПояснениеНекорректныйКодПоОКТМО", "КодПоОКТМО");
	СвязанныеНадписи.Вставить("ПодсказкаОКВЭД2",                 "КодОКВЭД2");
	
	Возврат СвязанныеНадписи;
	
КонецФункции

Функция ЗаголовкиРеквизитовФормыИсключения(ЮридическоеФизическоеЛицо)
	
	// Обычно заголовки реквизитов заданы в метаданных справочника.
	// Исключения описаны в функции
	
	ЭтоЮрлицо = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ОсобенныеРеквизиты = Новый Соответствие;
	
	ОсобенныеРеквизиты.Вставить("КодПоОКТМО", НСтр("ru = 'Код по ОКТМО'"));
	
	ОсобенныеРеквизиты.Вставить("Телефон", НСтр("ru = 'Телефон'"));
	Если ЭтоЮрлицо Тогда
		ОсобенныеРеквизиты.Вставить("Адрес", НСтр("ru = 'Юридический адрес'"));
	Иначе
		ОсобенныеРеквизиты.Вставить("Адрес", НСтр("ru = 'Адрес места жительства'"));
	КонецЕсли;
	
	ОсобенныеРеквизиты.Вставить("КодОКВЭД2",          НСтр("ru = 'Код основного вида деятельности'"));
	ОсобенныеРеквизиты.Вставить("НаименованиеОКВЭД2", НСтр("ru = 'Наименование основного вида деятельности'"));
	
	Если ЭтоЮрлицо Тогда
		ОсобенныеРеквизиты.Вставить("РуководительФамилия",   НСтр("ru = 'Фамилия руководителя'"));
		ОсобенныеРеквизиты.Вставить("РуководительИмя",       НСтр("ru = 'Имя руководителя'"));
		ОсобенныеРеквизиты.Вставить("РуководительОтчество",  НСтр("ru = 'Отчество руководителя'"));
		ОсобенныеРеквизиты.Вставить("РуководительДолжность", НСтр("ru = 'Должность руководителя'"));
	КонецЕсли;
	
	Возврат ОсобенныеРеквизиты;
	
КонецФункции

Функция ОписанияНезаполненныхЗначений()
	
	Описания = Новый Соответствие;
	
	Описания.Вставить(
		"КонтактнаяИнформацияПолеЮрАдресОрганизации",
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
		
	Возврат Описания;
		
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

Процедура НастроитьЭлементыКонтактнойИнформации(Форма) Экспорт
	
	// Инициализируем только адрес и телефон, представленные на форме реквизитами, созданными для них.
	// Остальные поля контактной информации не отображаются на форме.
	// Это обеспечивается последним параметром (ОтложеннаяИнициализация)
	
	ИсключаемыеВиды = Новый Массив();
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "КонтактныеДанные";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВиды;
	ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация = Истина;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(Форма, Форма.Объект, ПараметрыРазмещенияКонтактнойИнформации);
	
КонецПроцедуры

// Заполняет свойства объекта, хранящие контактную информацию и зависящие от адреса
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - форма организации с реквизитами из подсистемы контактной информации
//                     (в т.ч. КонтактнаяИнформацияОписаниеДополнительныхРеквизитов)
//  ТекущийОбъект	 - СправочникОбъект.Организации - записываемый объект
//  Отказ			 - Булево - возвращаемый параметр, Истина, если так скажет подсистема контактной информации
//
Процедура ПередЗаписьюКонтактнойИнформации(Форма, ТекущийОбъект, Отказ) Экспорт
	
	КонтейнерКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов; // Навязано подсистемой контактной информации
	ВидИнформацииАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	
	ВидыДополнительныхАдресов = Новый Массив;
	ВидыДополнительныхАдресов.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ВидыДополнительныхАдресов.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	
	АдресДоИзменения  = "";
	АдресаДоИзменения = Неопределено;
	ИзмененАдрес      = Истина;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		ВидыАдресов = Новый Массив;
		ВидыАдресов.Добавить(ВидИнформацииАдрес);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыАдресов, ВидыДополнительныхАдресов);
		
		АдресаДоИзменения = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийОбъект.Ссылка), , ВидыАдресов);
		
		АдресДоИзменения = УправлениеКонтактнойИнформациейБП.ЗначенияJSONВидаКонтактнойИнформации(
			АдресаДоИзменения, ВидИнформацииАдрес);
		АдресПослеИзменения = ОрганизацииФормыДляОтчетностиКлиентСервер.АдресОрганизацииЗначениеJSON(
			КонтейнерКонтактнойИнформации);
		ИзмененАдрес = (АдресДоИзменения <> АдресПослеИзменения);
		
	КонецЕсли;
	
	УстановитьКодРегиона(ТекущийОбъект, КонтейнерКонтактнойИнформации); // Код региона устанавливается в доп. свойствах объекта
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма, ТекущийОбъект, Отказ);
	
	Если Не ИзмененАдрес Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.КодОрганаФСГС = ""; // будет перезаполнен позже - см. УстановитьКодОрганаРосстата()
	
	Для Каждого ВидДополнительногоАдреса Из ВидыДополнительныхАдресов Цикл
		
		// Проверим, не задан ли особый адрес
		Если ЗначениеЗаполнено(АдресаДоИзменения) Тогда
			
			ДополнительныйАдресДоИзменения = УправлениеКонтактнойИнформациейБП.ЗначенияJSONВидаКонтактнойИнформации(
				АдресаДоИзменения, ВидДополнительногоАдреса);
			Если ЗначениеЗаполнено(ДополнительныйАдресДоИзменения) И ДополнительныйАдресДоИзменения <> АдресДоИзменения Тогда
				// был задан особый дополнительный адрес, он и останется
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеКонтактнойИнформациейБП.СкопироватьКонтактнуюИнформацию(ТекущийОбъект.КонтактнаяИнформация, ВидИнформацииАдрес, ВидДополнительногоАдреса);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЮридическийАдрес

// Определяет код региона по адресу организации и помещает его в дополнительные свойства
//  для использования в ходе записи.
//  Адрес хранится в форме с использованием подсистемы КонтактнаяИнформация и иметь путь КонтактнаяИнформацияПолеЮрАдресОрганизации.
//
// Параметры:
//  Объект												 - СправочникОбъект.Организации	 - модифицируемый объект
//  КонтактнаяИнформацияОписаниеДополнительныхРеквизитов - ДанныеФормыКоллекция - коллекция, содержащая сведения об адресах (см. подсистему КонтактнаяИнформация)
//
Процедура УстановитьКодРегиона(Объект, КонтактнаяИнформацияОписаниеДополнительныхРеквизитов) Экспорт
	
	ЗначениеАдресаJSON = ОрганизацииФормыДляОтчетностиКлиентСервер.АдресОрганизацииЗначениеJSON(
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
	
	КодРегиона = УправлениеКонтактнойИнформациейБП.КодРегионаПоАдресу(ЗначениеАдресаJSON);
	
	Объект.ДополнительныеСвойства.Вставить("КодРегиона", КодРегиона);
	
КонецПроцедуры

// Заполняет реквизиты организации по ее юридическому адресу
//
// Параметры:
//  Объект				- ДанныеФормыСтруктура - объект, представляющий в форме данные организации
//  КодПоОКТМО			- Строка - заполняемый код по ОКТМО
//  ЗначениеАдресаJSON  - см. АдресОрганизацииЗначениеJSON - данные об адресе
//
Процедура ЗаполнитьПоАдресу(Объект, КодПоОКТМО, ЗначениеАдресаJSON) Экспорт
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON, Объект.ЮридическоеФизическоеЛицо);
	
	Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодПоОКТМО) Тогда
		КодПоОКТМО = СведенияОНалоговомОргане.КодПоОКТМО;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
		Объект.КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОНалоговомОргане.НаименованиеНалоговогоОргана) Тогда
		Объект.НаименованиеНалоговогоОргана = СведенияОНалоговомОргане.НаименованиеНалоговогоОргана;
	КонецЕсли;
	
	Объект.КодОрганаФСГС = "";// Заполняется перед записью
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СистемаНалогообложения

// Выполняет первоначальную настройку элементов формы, отображающих выбранную организацией систему налогообложения
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы, содержащей реквизит СистемаНалогообложенияПредставление
//
Процедура НастроитьЭлементыСистемыНалогообложения(УсловноеОформление) Экспорт
	
	ИмяДанных = "СистемаНалогообложенияПредставление";
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ИмяДанных);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		ИмяДанных,
		ВидСравненияКомпоновкиДанных.Равно,
		ОрганизацииФормыКлиентСервер.ТекстВыбораЗначенияПоГиперссылке());
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

// Заполняет реквизиты формы, отображающие выбранные организацией систему налогообложения
//
// Параметры:
//  СистемаНалогообложенияПредставление	 - Строка - заполняемое представление системы налогообложения
//  Организация							 - СправочникСсылка.Организации - организация, реквизиты которой отображаются в форме
//
Процедура ПрочитатьСистемуНалогообложения(СистемаНалогообложенияПредставление, Организация) Экспорт
	
	СистемаНалогообложенияПредставление = ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ГосударственныеОрганы

// Конструирует коллекцию, описывающую коды государственных органов, на территории которых находится организация.
//
// Параметры:
//  Объект	 - СправочникОбъект.Организации, ДанныеФормыКоллекция - элемент справочника Организации
//             или данные формы, отображающие данные элемента
// 
// Возвращаемое значение:
//  Соответствие - коды гос. органов:
//    * Ключ - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид гос. органа
//    * Значение - Строка - код гос. органа
//
Функция КодыГосударственныхОрганов(Объект) Экспорт
	
	КодыГосударственныхОрганов = Новый Соответствие;
	КодыГосударственныхОрганов.Вставить(
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
		Объект.КодНалоговогоОргана);
	КодыГосударственныхОрганов.Вставить(
		Перечисления.ВидыГосударственныхОрганов.ОрганПФР,
		Объект.КодОрганаПФР);
	КодыГосударственныхОрганов.Вставить(
		Перечисления.ВидыГосударственныхОрганов.ОрганФСС,
		Объект.КодПодчиненностиФСС);
		
	Возврат КодыГосударственныхОрганов;
	
КонецФункции

// Получает из реквизитов формы информацию о налоговом органе (т.е. ту, что хранится в справочнике РегистрацииВНалоговомОргане)
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения - форма, в реквизитах которой хранятся данные
//  ПоляРегистрацииВНалоговомОргане	 - Структура - пути к данным о налоговом органе
//                                     * Ключ - имя реквизита справочника РегистрацииВНалоговомОргане
//                                     * Значение - путь к данным в форме
// 
// Возвращаемое значение:
//  Структура - данные о налоговом органе
//      * Ключ     - имя реквизита справочника РегистрацииВНалоговомОргане
//      * Значение - значение реквизита
//
Функция ЗначенияПолейРегистрацииВНалоговомОргане(Форма, ПоляРегистрацииВНалоговомОргане) Экспорт
	
	ЗначенияПолей = Новый Структура;
	
	Для Каждого ОписаниеПоля Из ПоляРегистрацииВНалоговомОргане Цикл
		ЗначениеПоля = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеПоля.Значение);
		ЗначенияПолей.Вставить(ОписаниеПоля.Ключ, ЗначениеПоля);
	КонецЦикла;
	
	Возврат ЗначенияПолей;
	
КонецФункции

// Выполняет действия, необходимые перед записью реквизитов ФНС и Росстата, редактируемых в форме организации.
// См. также ЗаписатьРегистрациюВНалоговомОргане()
//
// Платежные реквизиты гос. органов, хранящиеся в справочнике Контрагенты, записываются до записи Организации,
// с помощью РеквизитыГосударственногоОрганаПоКоду()
//
// Параметры:
//  Объект									 - СправочникОбъект.Организации - записываемый элемент справочника
//  ЗначенияКлючевыхПолейРегистрацииНаФорме	 - см. ЗначенияПолейРегистрацииВНалоговомОргане() - значения полей, заданных на форме и 
//                                             позволяющих идентифицировать запись справочника РегистрацииВНалоговомОргане
//
Процедура НачатьЗаписьРеквизитовГосударственныхОрганов(Объект, ЗначенияКлючевыхПолейРегистрацииНаФорме) Экспорт
	
	УстановитьКодОрганаРосстата(Объект);
	
	УстановитьРегистрациюВНалоговомОргане(Объект, ЗначенияКлючевыхПолейРегистрацииНаФорме);
	
КонецПроцедуры
	
// Определяет и устанавливает организации код органа Росстата.
// Перед применением метода в объекте должен быть определен код региона с помощью УстановитьКодРегиона()
//
// Параметры:
//  Объект - СправочникОбъект.Организации - модифицируемый объект
//
Процедура УстановитьКодОрганаРосстата(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Объект.ДополнительныеСвойства.Свойство("КодРегиона") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДополнительныеСвойства.КодРегиона) Тогда
		Возврат;
	КонецЕсли;
	
	КодРегионаСтрокой = Формат(Объект.ДополнительныеСвойства.КодРегиона, "ЧЦ=2; ЧН=; ЧВН=");
	
	ОтделенияРосстата = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтделенияРосстатаРегиона(КодРегионаСтрокой);
	Если ОтделенияРосстата.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КодОрганаФСГС = ОтделенияРосстата[0].КодТОГС;
		
КонецПроцедуры

Функция СведенияОНалоговомОрганеПоАдресу(Знач ЗначенияАдресаJSON, Знач ЮридическоеФизическоеЛицо)

	Сведения = Новый Структура();
	Сведения.Вставить("КодНалоговогоОргана",                "");
	Сведения.Вставить("КодПоОКТМО",                         "");
	Сведения.Вставить("КодПоОКАТО",                         "");
	Сведения.Вставить("НаименованиеНалоговогоОргана",       "");
	
	Если Не ЗначениеЗаполнено(ЗначенияАдресаJSON) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(ЗначенияАдресаJSON, "Сервис1С");
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЧисловойКодИФНС = СведенияОНалоговомОрганеПоАдресу.КодИФНСФЛ;
	Иначе
		ЧисловойКодИФНС = СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЧисловойКодИФНС) И Не ЗначениеЗаполнено(СведенияОНалоговомОрганеПоАдресу.ОКТМО) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	СтроковойКодИФНС = Формат(ЧисловойКодИФНС, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	НаименованиеНалоговогоОргана = ОрганизацииФормыДляОтчетностиВызовСервера.РеквизитыГосударственногоОрганаПоКоду(
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
		СтроковойКодИФНС);
	
	Сведения.КодНалоговогоОргана          = СтроковойКодИФНС;
	Сведения.КодПоОКТМО                   = Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0");
	Сведения.КодПоОКАТО                   = Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0");
	Сведения.НаименованиеНалоговогоОргана = НаименованиеНалоговогоОргана;
	
	Возврат Сведения;
		
КонецФункции

Процедура УстановитьРегистрациюВНалоговомОргане(Объект, ЗначенияКлючевыхПолейРегистрации)
	
	// Не используем управляемые блокировки,
	// потому что речь идет об изменении НСИ и вероятность взаимных изменений небольшая.
	// Не используем автоматические пессимистические объектные блокировки,
	// потому что структура данных не позволяет установить эксклюзивную блокировку
	// на сочетание ключевых полей регистрации в налоговом органе.
	
	КлючевыеПоляЗаполнены = Истина;
	Для Каждого КлючИЗначение Из ЗначенияКлючевыхПолейРегистрации Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		КлючевыеПоляЗаполнены = Ложь;
		Прервать;
	КонецЦикла;
	
	Если Не КлючевыеПоляЗаполнены Тогда
		// Недостаточно сведений о регистрации.
		Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Неопределено;
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		// в Объект.РегистрацияВНалоговомОргане может содержаться ссылка на новую регистрацию,
		// если предыдущая попытка записи организации не удалась.
		// В этом случае РегистрацияВНалоговомОргане == Неопределено
	КонецЕсли;
		
	Если РегистрацияВНалоговомОргане = Неопределено Тогда
		// Возможно, в информационной базе уже есть подходящая регистрация
		ИскатьРегистрациюПоКлючевымПолям = Истина;
	Иначе
		// Проверим, подходит ли эта регистрация. Если не подходит - поищем более подходящую, не найдем - очистим.
		КлючевыеПоляСовпадают = Истина;
		Для Каждого КлючИЗначение Из ЗначенияКлючевыхПолейРегистрации Цикл
			Если РегистрацияВНалоговомОргане[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			КлючевыеПоляСовпадают = Ложь;
			Прервать;
		КонецЦикла;
		ИскатьРегистрациюПоКлючевымПолям = Не КлючевыеПоляСовпадают;
	КонецЕсли;
	
	Если ИскатьРегистрациюПоКлючевымПолям Тогда
		
		// Не учитывается, что организация может быть обособленным подразделением,
		// так как процедура предназначена для форм, где не может быть обособленных подразделений
		
		Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
			Объект.Ссылка,
			Объект.КПП,
			Объект.КодНалоговогоОргана);
			
		Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
			РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Иначе
			РегистрацияВНалоговомОргане = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
	КонецЕсли;
	
КонецПроцедуры

#Область РегистрацииВНалоговомОргане

// Методы работы со справочником РегистрацииВНалоговомОргане

// Помещает в реквизиты формы значения реквизитов налогового органа
//
// Параметры:
//  РегистрацияВНалоговомОргане	 - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган, данные которого нужно прочитать
//  Форма						 - ФормаКлиентскогоПриложения - форма, в реквизиты которой следует поместить прочитанные реквизиты
//  ПоляРегистрацииНаФорме		 - Структура - описание реквизитов формы, предназначенных для работы с реквизитами налогового органа
//                                  * Ключ - имя реквизита справочника РегистрацииВНалоговомОргане
//                                  * Значение - путь в форме, отображающий значение этого реквизита
//
Процедура ПрочитатьДанныеНалоговогоОргана(РегистрацияВНалоговомОргане, Форма, ПоляРегистрацииНаФорме) Экспорт
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПолей = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ПоляРегистрацииНаФорме);
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, ИменаПолей);
	
	Для Каждого КлючИЗначение Из ПоляРегистрацииНаФорме Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма,
			КлючИЗначение.Значение,
			ЗначенияРеквизитов[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

// Записывает (создает, обновляет) элемент справочника РегистрацииВНалоговомОргане,
// соответствующий основной регистрации организации.
// Может вызываться из обработчика ПриЗаписи.
// До вызова следует в обработчике ПередЗаписью вызывать УстановитьРегистрациюВНалоговомОргане()
//
// Параметры:
//  Объект                       - СправочникОбъект.Организации - записываемый объект
//  ЗначенияПолейРегистрации	 - см. ЗначенияПолейРегистрацииВНалоговомОргане() - установленные при редактировании значения реквизитов налогового органа
//  РеквизитыНалоговогоОргана	 - см. ДанныеГосударственныхОрганов.НовыеРеквизитыГосударственногоОргана() - заранее полученные из открытых данных значения реквизитов налогового органа
//
Процедура ЗаписатьРегистрациюВНалоговомОргане(Объект, ЗначенияПолейРегистрации, РеквизитыНалоговогоОргана = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
	
	Если РегистрацияВНалоговомОргане = Неопределено Тогда
		
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		РегистрацияВНалоговомОргане.УстановитьСсылкуНового(Объект.РегистрацияВНалоговомОргане);
		
	ИначеЕсли Не РегистрацияВНалоговомОргане.ЭтоНовый() Тогда
		
		// Проверим, надо ли записывать - поменялось ли фактически что-то
		ВсеСвойстваСовпадают = Истина;
		Для Каждого КлючИЗначение Из ЗначенияПолейРегистрации Цикл
			Если РегистрацияВНалоговомОргане[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			ВсеСвойстваСовпадают = Ложь;
			Прервать;
		КонецЦикла;
		
		Если ВсеСвойстваСовпадают Тогда
			Объект.ДополнительныеСвойства.Удалить("РегистрацияВНалоговомОргане");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрацияВНалоговомОргане.Владелец = Объект.Ссылка;
	
	Для Каждого ОписаниеПоляРегистрации Из ЗначенияПолейРегистрации Цикл
		РегистрацияВНалоговомОргане[ОписаниеПоляРегистрации.Ключ] = ОписаниеПоляРегистрации.Значение;
	КонецЦикла;
	
	НаименованиеИзСправочника = ОрганизацииФормыДляОтчетностиВызовСервера.РеквизитыГосударственногоОрганаПоКоду(
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
		РегистрацияВНалоговомОргане.Код);
		
	Если Не ПустаяСтрока(НаименованиеИзСправочника) Тогда
		РегистрацияВНалоговомОргане.НаименованиеИФНС = НаименованиеИзСправочника;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("КодРегиона") Тогда
		РегистрацияВНалоговомОргане.КодРегиона = Объект.ДополнительныеСвойства.КодРегиона;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане.Записать();
	
	Объект.ДополнительныеСвойства.Удалить("РегистрацияВНалоговомОргане");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Руководитель

// Получает данные о руководителе организации из сведений об ответственных лицах
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, для которой требуются сведения о руководителе
//
// Возвращаемое значение:
//  Структура - сведения о руководителе, см. НовыйДанныеРуководителя()
//
Функция ДанныеРуководителя(Организация) Экспорт
	
	ДанныеРуководителя = НовыйДанныеРуководителя();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ДанныеРуководителя;
	КонецЕсли;
	
	// Не используется программный интерфейс ОтветственныеЛицаБП.ОтветственныеЛица(): эта функция
	// - получает данные по всем ответственным лицам, которые в данном случае не нужны (нужен только руководитель)
	// - не умеет возвращать Период, а здесь он нужен
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК РуководительПериод,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК РуководительФизЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК РуководительДолжность
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			,
	|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРуководителя, Выборка);
	КонецЕсли;
	
	Возврат ДанныеРуководителя;
	
КонецФункции

Функция НовыйДанныеРуководителя()
	
	ДанныеРуководителя = Новый Структура;
	
	ДанныеРуководителя.Вставить("РуководительФизЛицо",   Справочники.ФизическиеЛица.ПустаяСсылка());
	ДанныеРуководителя.Вставить("РуководительДолжность", Справочники.Должности.ПустаяСсылка());
	ДанныеРуководителя.Вставить("РуководительПериод",    '0001-01-01');
	
	Возврат ДанныеРуководителя;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеЕГР

// В форме организации заполняет реквизиты объекта и формы данными, полученными из госреестров.
//
// Параметры:
//  ОтветДанныхЕГР	- Структура - см. НовыйОтветДанныхЕГР(), результат запроса к сервису, предоставляющему данные госреестров
//  Форма  - ФормаКлиентскогоПриложения - форма элемента справочника Организации. 
//								Обязательные реквизиты формы:
//                              - Объект
//								- КодПоОКТМО
//								- КонтактнаяИнформацияОписаниеДополнительныхРеквизитов
//								- КонтактнаяИнформацияПолеТелефонОрганизации
//								- КонтактнаяИнформацияПолеЮрАдресОрганизации
//
Процедура ЗаполнитьДаннымиЕГР(ОтветДанныхЕГР, Форма) Экспорт
	
	Форма.Модифицированность = Истина;
	
	ДанныеЕГР = ПолучитьИзВременногоХранилища(ОтветДанныхЕГР.АдресДанных);
	УдалитьИзВременногоХранилища(ОтветДанныхЕГР.АдресДанных); // Самостоятельно очистим временное хранилище.
	
	Объект = Форма.Объект;
	
	// Общие реквизиты ИП и юр.лица.
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЕГР, "ИНН, ДатаРегистрации");
	// Для ИП наименования нельзя брать из данных реестра, так как там они не соответствуют правилам,
	// принятым в программе.
	
	Объект.ОГРН = ДанныеЕГР.РегистрационныйНомер;

	Если ДанныеЕГР.ЭтоОКВЭД2 Тогда
		Объект.КодОКВЭД2          = ДанныеЕГР.КодОКВЭД;
		Объект.НаименованиеОКВЭД2 = ОрганизацииФормыКлиентСервер.ПрочитатьОКВЭД2(Объект.КодОКВЭД2);
	КонецЕсли;
	// ОКВЭД1 не используется с 2017 года
	
	Если ОтветДанныхЕГР.КраткиеДанные.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		// Реквизиты юридического лица
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЕГР, "Наименование, НаименованиеПолное, НаименованиеСокращенное");
		
		Объект.КПП = ДанныеЕГР.КПП;
		ЗаполнитьКодыПравовойФормы(Объект, ДанныеЕГР.ПравоваяФорма);
		
		ЗаполнитьЭлементКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеТелефонОрганизации", ДанныеЕГР.Телефон);
		
		Если ЗначениеЗаполнено(ДанныеЕГР.ЮридическийАдрес) Тогда
			
			ЗаполнитьЭлементКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеЮрАдресОрганизации", ДанныеЕГР.ЮридическийАдрес);
			
			ЗаполнитьПоАдресу(Объект, Форма.КодПоОКТМО, ДанныеЕГР.ЮридическийАдрес.КонтактнаяИнформация);
			
		КонецЕсли;
		
		СведенияОРуководителе = Новый Структура;
		СведенияОРуководителе.Вставить("РуководительФамилия", "");
		СведенияОРуководителе.Вставить("РуководительИмя", "");
		СведенияОРуководителе.Вставить("РуководительОтчество", "");
		СведенияОРуководителе.Вставить("РуководительИНН", "");
		СведенияОРуководителе.Вставить("РуководительДолжность", Справочники.Должности.ПустаяСсылка());
		Если ЗначениеЗаполнено(ДанныеЕГР.Руководитель) Тогда
			СведенияОРуководителе.РуководительФамилия   = ДанныеЕГР.Руководитель.Фамилия;
			СведенияОРуководителе.РуководительИмя       = ДанныеЕГР.Руководитель.Имя;
			СведенияОРуководителе.РуководительОтчество  = ДанныеЕГР.Руководитель.Отчество;
			СведенияОРуководителе.РуководительИНН       = ДанныеЕГР.Руководитель.ИНН;
			СведенияОРуководителе.РуководительДолжность = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(ДанныеЕГР.Руководитель.Должность);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Форма, СведенияОРуководителе);
	
	ИначеЕсли ОтветДанныхЕГР.КраткиеДанные.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		// Реквизиты индивидуального предпринимателя.
		
		Объект.ФамилияИП  = ДанныеЕГР.Фамилия;
		Объект.ИмяИП      = ДанныеЕГР.Имя;
		Объект.ОтчествоИП = ДанныеЕГР.Отчество;
		
		Если ЗначениеЗаполнено(ДанныеЕГР.СвидетельствоОРегистрации) Тогда
			
			Объект.СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 №%2'"),
									ДанныеЕГР.СвидетельствоОРегистрации.Серия,
									ДанныеЕГР.СвидетельствоОРегистрации.Номер);
			Объект.СвидетельствоДатаВыдачи = ДанныеЕГР.СвидетельствоОРегистрации.Дата;
			
		КонецЕсли;
		
		// Данные о номере телефона и адресе физического лица ЕГРИП не предоставляет
		
	КонецЕсли;
	
	// Эти реквизиты могут быть определены по адресу - в ЗаполнитьПоАдресу().
	// А могут быть и не определены (например, для ИП или очищены при изменении адреса).
	// В последнем случае заполним их данными ЕГР
	Если ЗначениеЗаполнено(ДанныеЕГР.РегистрацияВНалоговомОргане) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
			Объект.КодНалоговогоОргана          = ДанныеЕГР.РегистрацияВНалоговомОргане.Код;
			Объект.НаименованиеНалоговогоОргана = ДанныеЕГР.РегистрацияВНалоговомОргане.Наименование;
			// сразу закешируем в информационной базе и платежные реквизиты
			ОрганизацииФормыДляОтчетностиВызовСервера.РеквизитыГосударственногоОрганаПоКоду(
				Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
				Объект.КодНалоговогоОргана);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Форма.КодПоОКТМО) Тогда
			Форма.КодПоОКТМО = ДанныеЕГР.РегистрацияВНалоговомОргане.ОКТМО;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЕГР.РегистрацияВПенсионномФонде) Тогда
		
		Если ОтветДанныхЕГР.КраткиеДанные.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Объект.ИПРегистрационныйНомерПФР = ДанныеЕГР.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;	
		Иначе
			Объект.РегистрационныйНомерПФР   = ДанныеЕГР.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
		КонецЕсли;
		
		Объект.КодОрганаПФР                          = ДанныеЕГР.РегистрацияВПенсионномФонде.КодОрганаПФР;
		Объект.НаименованиеТерриториальногоОрганаПФР = ДанныеЕГР.РегистрацияВПенсионномФонде.НаименованиеОрганаПФР;
		
		// сразу закешируем в информационной базе и платежные реквизиты
		ОрганизацииФормыДляОтчетностиВызовСервера.РеквизитыГосударственногоОрганаПоКоду(
			Перечисления.ВидыГосударственныхОрганов.ОрганПФР,
			Объект.КодОрганаПФР);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЕГР.РегистрацияВФСС) Тогда
		
		Объект.РегистрационныйНомерФСС = ДанныеЕГР.РегистрацияВФСС.РегистрационныйНомерФСС;
		
		Если ЗначениеЗаполнено(ДанныеЕГР.РегистрацияВФСС.КодПодчиненности) Тогда
			Объект.КодПодчиненностиФСС                   = ДанныеЕГР.РегистрацияВФСС.КодПодчиненности;
			Объект.НаименованиеТерриториальногоОрганаФСС = ДанныеЕГР.РегистрацияВФСС.НаименованиеОрганаФСС;
		Иначе
			// Нередко сведения отсутствуют в ЕГР
			Объект.КодПодчиненностиФСС = ОрганизацииФормыДляОтчетностиКлиентСервер.КодПодчиненностиФСС(
				Объект.РегистрационныйНомерФСС,
				Объект.ЮридическоеФизическоеЛицо,
				Объект.ОбособленноеПодразделение);
			Объект.НаименованиеТерриториальногоОрганаФСС = ОрганизацииФормыДляОтчетностиВызовСервера.РеквизитыГосударственногоОрганаПоКоду(
				Перечисления.ВидыГосударственныхОрганов.ОрганФСС,
				Объект.КодПодчиненностиФСС);
		КонецЕсли;
			
		// сразу закешируем в информационной базе и платежные реквизиты
		ОрганизацииФормыДляОтчетностиВызовСервера.РеквизитыГосударственногоОрганаПоКоду(
			Перечисления.ВидыГосударственныхОрганов.ОрганФСС,
			Объект.КодПодчиненностиФСС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодыПравовойФормы(Объект, ПравоваяФорма)
	
	// Определяем по соответствию имен правовой формы и кодов по классификаторам,
	// поставляемым в составе конфигурации
	КодыСтатистики = Справочники.Организации.КодыСтатистикиПоОрганизационноПравовойФорме(ПравоваяФорма);
	ЗаполнитьЗначенияСвойств(Объект, КодыСтатистики);
	
КонецПроцедуры

Процедура ЗаполнитьЭлементКонтактнойИнформации(Форма, ИмяРеквизита, КонтактнаяИнформация)
	
	// КонтактнаяИнформация - см. РаботаСКонтрагентами.НоваяКонтактнаяИнформация()
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Представление = КонтактнаяИнформация.Представление Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Представление = КонтактнаяИнформация.Представление;
	ДанныеСтроки.Значение = КонтактнаяИнформация.КонтактнаяИнформация;
	
	Форма[ИмяРеквизита] = ДанныеСтроки.Представление;
	
КонецПроцедуры

#КонецОбласти

#Область СокращеннаяФорма

// Скрывает заполненные и не обязательные реквизиты
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - настраиваемая форма 
//  ПроверяемыеДанные - Соответствие - перечень данных (путей к данным), подлежащих контролю
//  СвязанныеДанные   - См. СвязанныеДанные()
//  ОписанияНезаполненныхЗначений
//                    - См. ОписанияНезаполненныхЗначений()
//
Процедура СократитьФорму(Форма, ПроверяемыеДанные, СвязанныеДанные, ОписанияНезаполненныхЗначений)
	
	// Если ИНН заполнен, форма сокращается до обязательных незаполненных реквизитов
	СокращеннаяФорма = ПоказыватьФормуСокращенно(Форма);
	
	// Кнопка "Записать и закрыть" внизу отображается только для полной формы юридического лица.
	// В форме Предпринимателя такой кнопки нет.
	ЮридическоеФизическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо;
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Форма.Элементы.ЗаписатьИЗакрытьНиз.Видимость = НЕ СокращеннаяФорма;
	КонецЕсли;
	
	Если Не СокращеннаяФорма Тогда
		Возврат;
	КонецЕсли;
	
	// Отображаем все те, что должны быть заполнены, но не заполнены.
	// Если в группе не заполнен хотя бы один, показываем группу целиком.
	// Под "группами" здесь понимаются
	// - связанные данные, т.е. "атомарные" группы полей, которые обязательны к заполнению или все, или ни одно
	// - поля кадровых данных физлица, которые отображаются или все или ни одно,
	//   но обязательны к заполнению могут быть не все
	
	ОтображаемыеДанные = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ПроверяемыеДанные Цикл
		
		Если ОтображаемыеДанные[КлючИЗначение.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитЗаполнен(Форма, КлючИЗначение.Ключ, ОписанияНезаполненныхЗначений) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтображаемыеДанные.Вставить(КлючИЗначение.Ключ, Истина);
		
		Для Каждого Одногруппник Из ПутиКОстальнымДаннымГруппы(КлючИЗначение.Ключ, СвязанныеДанные) Цикл
			ОтображаемыеДанные.Вставить(Одногруппник, Истина);
		КонецЦикла;
		
	КонецЦикла;
	
	// Если в проверяемые реквизиты входит код по ОКТМО,
	// то его требуется отобразить не только в случае если он не заполнен, но и если он заполнен некорректно
	ПроверитьОКТМО = ПроверяемыеДанные.Получить("КодПоОКТМО");
	Если ПроверитьОКТМО <> Неопределено Тогда
		ОшибкиПроверкиОКТМО = ОрганизацииФормыДляОтчетностиКлиентСервер.ПроверитьКодПоОКТМО(Форма.КодПоОКТМО);
		Если ЗначениеЗаполнено(ОшибкиПроверкиОКТМО) Тогда
			ОтображаемыеДанные.Вставить("КодПоОКТМО", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьОтображаемыеДанныеПолямиРуководителя(ОтображаемыеДанные);
	
	// Отключим видимость элементов
	Для Каждого Элемент Из Форма.Элементы Цикл
		
		Если ТипЗнч(Элемент) <> Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтображаемыеДанные[Элемент.ПутьКДанным] = Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Управление видимостью связанных надписей
	Для Каждого СвязаннаяНадпись Из СвязанныеНадписи() Цикл
		Форма.Элементы[СвязаннаяНадпись.Ключ].Видимость = Форма.Элементы[СвязаннаяНадпись.Значение].Видимость;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоказыватьФормуСокращенно(Форма)
	
	// Если ИНН заполнен, форма сокращается до обязательных незаполненных реквизитов
	Возврат ЗначениеЗаполнено(Форма.Объект.ИНН);
	
КонецФункции

Процедура ДополнитьОтображаемыеДанныеПолямиРуководителя(ОтображаемыеДанные)
	
	// Отчество руководителя в отчетности, как правило, это формально необязательный реквизит.
	// Однако, отчество не обязательно только в том случае, если оно у человека отсутствует.
	// Другими словами, обязательность заполнения отчества в общем случае программа определить не может:
	// неизвестно, есть у человека отчество или нет.
	// Поэтому поля для ввода имени руководителя показываем все три, даже когда заполнение отчества не обязательно.
	
	// Поле Должность при вводе данных руководителя заполняется значением по умолчанию.
	// Поэтому, чтобы предотвратить заполнение "под капотом" неправильным значением, 
	// поле для ввода должности показываем, если требуется ввести данные руководителя,
	// даже если для конкретной формы должность не важна.
	
	ЕстьПоляРуководителя  = Ложь;
	РеквизитыРуководителя = ВсеРеквизитыРуководителяДляОтчетности(Истина);
	
	Для Каждого ИмяРеквизита Из РеквизитыРуководителя Цикл
		
		Если ОтображаемыеДанные[ИмяРеквизита] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьПоляРуководителя = Истина;
		Прервать;
		
	КонецЦикла;
	
	Если ЕстьПоляРуководителя Тогда
		Для Каждого ИмяРеквизита Из РеквизитыРуководителя Цикл
			ОтображаемыеДанные.Вставить(ИмяРеквизита, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияВФорме

// Проверяет заполнение реквизитов организации.
// Выполняет проверки, дополнительные к реализованным в модуле объекта.
// Перечень таких проверок может быть передан в форму при ее открытии.
// Если есть незаполненные реквизиты, то выдает сообщения пользователю.
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения - форма элемента справочника Организации.
//                                 Для формы предполагается
//                                 1. данные объекта в ней размещены в реквизите с именем Объект
//                                 2. состав, размещение и взаимосвязи полей соответствуют описаниям,
//                                    приведенным в области ОписаниеФормы
//  ПроверяемыеРеквизиты		 - Массив - имена реквизитов, для которых должна быть вызвана платформенная проверка
//  ХранилищеПроверяемыеДанные	 - Соответствие - имена реквизитов, заполнение которых должно быть проверено этой процедурой
//                                 * Ключ - путь к данным
//                                 * Значение - любое, кроме Неопределено
//                                 см. также ПроверяемыеДанные()
//                               - Строка - адрес временного хранилища, где размещено это Соответствие
//  Отказ						 - Булево - Истина, если что-то не заполнено
//
Процедура ПроверитьЗаполнение(Форма, ПроверяемыеРеквизиты, ХранилищеПроверяемыеДанные, Отказ) Экспорт
	
	Если ТипЗнч(ХранилищеПроверяемыеДанные) <> Тип("Строка") Тогда
		ПроверяемыеДанные = ХранилищеПроверяемыеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ХранилищеПроверяемыеДанные) Тогда
		ПроверяемыеДанные = ПолучитьИзВременногоХранилища(ХранилищеПроверяемыеДанные);
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыеДанные) <> Тип("Соответствие") Или Не ЗначениеЗаполнено(ПроверяемыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеРеквизитовФормы       = ОписаниеРеквизитовФормы(Форма.Объект.ЮридическоеФизическоеЛицо);
	РазмещениеРеквизитов          = РазмещениеДанныхФормыДляОтчетности();
	ОписанияНезаполненныхЗначений = ОписанияНезаполненныхЗначений();
	
	// Если заполнен любой из группы связанных данных, то должны быть заполнены все связанные,
	// даже если извне не требуется заполнение ни одного из них.
	// Это применимо только для несокращенной формы, так как в сокращенной вся группа будет скрыта,
	// если заполнение ни одного из одногруппников не требуется.
	Если Не ПоказыватьФормуСокращенно(Форма) Тогда
		
		ПроверяемыеДанные = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(ПроверяемыеДанные); // Дополняем только на время вызова проверки
		СвязанныеДанные   = СвязанныеДанные();
		
		Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитовФормы Цикл
		
			ПодозреваемыйВЗаполненности = ПутьКДанным(ОписаниеРеквизита.Имя, РазмещениеРеквизитов);
			
			Одногруппники = ПутиКОстальнымДаннымГруппы(ПодозреваемыйВЗаполненности, СвязанныеДанные);
			
			Если Не ЗначениеЗаполнено(Одногруппники) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не РеквизитЗаполнен(Форма, ПодозреваемыйВЗаполненности, ОписанияНезаполненныхЗначений) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Одногруппник Из Одногруппники Цикл
				ПроверяемыеДанные.Вставить(Одногруппник, Истина);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// О незаполненных реквизитах объектов сообщим. Сообщения будем выдавать в порядке следования полей на форме
	Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитовФормы Цикл
		
		ПутьКДанным = ПутьКДанным(ОписаниеРеквизита.Имя, РазмещениеРеквизитов);
		
		Если ПроверяемыеДанные[ПутьКДанным] = Неопределено Тогда
			// Проверять не требуется
			Продолжить;
		КонецЕсли;
		
		// отметим, что проверили
		Индекс = ПроверяемыеРеквизиты.Найти(ПутьКДанным);
		Если Индекс <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс); // Сейчас проверим сами
		КонецЕсли;
		
		Если РеквизитЗаполнен(Форма, ПутьКДанным, ОписанияНезаполненныхЗначений) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле",
			"Заполнение",
			ОписаниеРеквизита.Заголовок);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Неопределено,// КлючДанных
			,//Поле
			ПутьКДанным,// ПутьКДанным
			Отказ);
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(Форма, Форма.Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

// Помещает во временное хранилище перечень данных, заполнение которых контролируется в конкретном вызове формы.
// Перечень состоит из путей к данным реквизитов.
// Значение помещается в хранилище на время жизни формы.
//
// Параметры:
//  Организация                  - Справочник.Организации - организация, реквизиты которой редактируются
//  ПараметрПроверяемыеРеквизиты - Массив, Неопределено - перечень имен проверяемых реквизитов;
//                                 имена - в соответствии с ВсеРеквизитыДляОтчетности()
//  ПараметрКонтекст             - Структура, Неопределено - сведения, описывающие, для какой цели была вызвана форма.
//                                 Если эти сведения переданы, то перечень имен проверяемых реквизитов дополняется определенными исходя из контекста.
//                                 Ключи структуры:
//                                  * Период           - Дата   - период, к которому относится выполняемое действие, например, за который представляется декларация
//                                  * ИмяРеглОтчета    - Строка - (опционально) имя отчета, для работы с которым нужны реквизиты организации
//                                  * ПолноеИмяПравила - Строка - (опционально) имя правила, для выполнения которого нужны реквизиты организации
//                                  * Правило          - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - 
//                                                                (опционально) правило, для выполнения которого нужны реквизиты организации
//                                 Структура должна содержать ровно два свойства: Период и одно из опциональных.
//  АдресПроверяемыеДанные		 - Строка - возвращаемый параметр: адрес в хранилище, по которому размещен перечень проверяемых данных
//  ИдентификаторФормы			 - УникальныйИдентификатор - идентификатор формы, в которой будет проверяться заполнение реквизитов
//
Процедура УстановитьПроверяемыеДанные(Организация, ПараметрПроверяемыеРеквизиты, ПараметрКонтекст, АдресПроверяемыеДанные, ИдентификаторФормы) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресПроверяемыеДанные) Тогда
		// Проверяемые данные уже размещены в хранилище.
		// Предполагается, что проверяемые данные передаются в форму и не могут быть изменены в ходе работы формы,
		// поэтому если хранилище уже заполнено, то обновлять в нем данные незачем.
		Возврат;
	КонецЕсли;
	
	// Настроим проверку заполнения в соответствии с параметром формы
	ПроверяемыеРеквизиты = Новый Массив;
	Если ТипЗнч(ПараметрПроверяемыеРеквизиты) = Тип("Массив") Тогда
		// перечень реквизитов в готовом виде
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, ПараметрПроверяемыеРеквизиты);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКонтекст) = Тип("Структура") Тогда
		// информация, которая позволяет определить перечень реквизитов
		
		Период = ПараметрКонтекст.Период;
		
		Если ПараметрКонтекст.Свойство("ИмяРеглОтчета") Тогда
			ИмяРеглОтчета = ПараметрКонтекст.ИмяРеглОтчета;
		Иначе
			Если ПараметрКонтекст.Свойство("ПолноеИмяПравила") Тогда
				ПолноеИмяПравила = ПараметрКонтекст.ПолноеИмяПравила;
			Иначе
				ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(ПараметрКонтекст.Правило);
			КонецЕсли;
			ИмяРеглОтчета = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
		КонецЕсли;
			
		ПроверяемыеРеквизитыПоКонтексту = РегламентированнаяОтчетностьБП.РеквизитыОбязательныеДляОтчета(ИмяРеглОтчета, Организация, Период);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, ПроверяемыеРеквизитыПоКонтексту);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроверяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеДанные = ПроверяемыеДанные(ПроверяемыеРеквизиты);
	
	// Дополним проверяемые данным связанными реквизитами:
	// если требуется заполнение любого реквизита из группы связанных,
	// то требуется заполнение всех их.
	СвязанныеДанные = СвязанныеДанные();
	Для Каждого КлючИЗначение Из ПроверяемыеДанные Цикл
		Для Каждого Одногруппник Из ПутиКОстальнымДаннымГруппы(КлючИЗначение.Ключ, СвязанныеДанные) Цикл
			ПроверяемыеДанные.Вставить(Одногруппник, Истина);
		КонецЦикла;
	КонецЦикла;
	
	АдресПроверяемыеДанные = ПоместитьВоВременноеХранилище(ПроверяемыеДанные, ИдентификаторФормы);
	
КонецПроцедуры

// Настраивает свойства элементов формы в зависимости от требований к заполнению данных:
// 1. Если необходимо, сокращает форму - скрывает заполненные и не обязательные реквизиты
// 2. Отображает отметку незаполненного реквизитам, проверка которых должна быть выполнена дополнительно к проверкам, описанным для объекта метаданных.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - настраиваемая форма 
//  АдресПроверяемыеДанные	 - Строка - адрес временного хранилища, где размещен перечень данных, подлежащих контролю.
//                             См. УстановитьПроверяемыеДанные()
//
Процедура НастроитьПроверяемыеРеквизиты(Форма, АдресПроверяемыеДанные) Экспорт
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресПроверяемыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеДанные = ПолучитьИзВременногоХранилища(АдресПроверяемыеДанные);
	Если ТипЗнч(ПроверяемыеДанные) <> Тип("Соответствие") 
		Или Не ЗначениеЗаполнено(ПроверяемыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныеДанные               = СвязанныеДанные();
	ОписанияНезаполненныхЗначений = ОписанияНезаполненныхЗначений();
	
	СократитьФорму(Форма, ПроверяемыеДанные, СвязанныеДанные, ОписанияНезаполненныхЗначений);
	НастроитьОтметкуНезаполненного(Форма, ПроверяемыеДанные, СвязанныеДанные, ОписанияНезаполненныхЗначений);
	
КонецПроцедуры

// Настраивает элементы формы и условное оформление формы для отображения отметки незаполненного у тех реквизитов,
// проверка которых должна быть выполнена дополнительно к проверкам, описанным для объекта метаданных.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - настраиваемая форма 
//  ПроверяемыеДанные - Соответствие - перечень данных (путей к данным), подлежащих контролю
//  СвязанныеДанные   - См. СвязанныеДанные()
//  ОписанияНезаполненныхЗначений
//                    - См. ОписанияНезаполненныхЗначений()
//
Процедура НастроитьОтметкуНезаполненного(Форма, ПроверяемыеДанные, СвязанныеДанные, ОписанияНезаполненныхЗначений)
	
	// 1. Полям, отображающим проверяемые данные, включим отметку незаполненного
	// 2. Остальным (необязательным) полям, входящим в группы связанных, установим условное оформление,
	//    которое будет требовать заполнения всех полей в группе,
	//    если заполнено поле хотя бы одного элемента группы
	//    Второе применимо только для несокращенной формы, так как в сокращенной вся группа будет скрыта,
	//    если заполнение ни одного из одногруппников не требуется.
	
	СокращеннаяФорма = ПоказыватьФормуСокращенно(Форма);
	
	Для Каждого Элемент Из Форма.Элементы Цикл
		
		Если ТипЗнч(Элемент) <> Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверяемыеДанные[Элемент.ПутьКДанным] <> Неопределено Тогда
			
			// 1. автоотметка незаполненного - у проверяемых полей
		
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода
				Или Элемент.Вид = ВидПоляФормы.ПолеПереключателя
				Или Элемент.Вид = ВидПоляФормы.ПолеТекстовогоДокумента Тогда
			
				Элемент.АвтоОтметкаНезаполненного = Истина;
				
			ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
				
				// Незаполненные гиперссылки отмечаются цветом: используем условное оформление
				
				ТекстНезаполненного = ОписанияНезаполненныхЗначений[Элемент.ПутьКДанным];
				
				Если ТекстНезаполненного <> Неопределено Тогда
					
					ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
					
					КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элемент.Имя);
						
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
						ЭлементУО.Отбор,
						Элемент.ПутьКДанным,
						ВидСравненияКомпоновкиДанных.Равно,
						ТекстНезаполненного);
						
					ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Не СокращеннаяФорма Тогда
			
			// 2. Для непроверяемых требуем заполнить все поля группы, если заполнено любое из полей группы

			Одногруппники = ПутиКОстальнымДаннымГруппы(Элемент.ПутьКДанным, СвязанныеДанные);
			Если Не ЗначениеЗаполнено(Одногруппники) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
			
			// Действие:
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элемент.Имя);
			ТекстНезаполненного = ОписанияНезаполненныхЗначений[Элемент.ПутьКДанным];
			Если ТекстНезаполненного = Неопределено Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			Иначе
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
			КонецЕсли;
			
			// Условия:
			// a. Элемент не заполнен
			Если ТекстНезаполненного = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ЭлементУО.Отбор,
					Элемент.ПутьКДанным,
					ВидСравненияКомпоновкиДанных.НеЗаполнено);
			Иначе
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ЭлементУО.Отбор,
					Элемент.ПутьКДанным,
					ВидСравненияКомпоновкиДанных.Равно,
					ТекстНезаполненного);
			КонецЕсли;
			
			// b. Любой одногруппник заполнен
			ГруппаИли = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			Для Каждого Одногруппник Из Одногруппники Цикл
				ТекстНезаполненного = ОписанияНезаполненныхЗначений[Одногруппник];
				Если ТекстНезаполненного = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, Одногруппник, ВидСравненияКомпоновкиДанных.Заполнено);
				Иначе
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
						ГруппаИли,
						Одногруппник, 
						ВидСравненияКомпоновкиДанных.НеРавно,
						ТекстНезаполненного);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Конструирует коллекцию, содержащую имена и заголовки реквизитов формы.
// См. также ЗаголовкиРеквизитовФормыИсключения()
//
// Параметры:
//  ЮридическоеФизическоеЛицо	 - ПеречислениеСсылка.ЮридическоеФизическоеЛицо - тип организации, данные которой представлены в форме
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание реквизитов. 
//    Колонки:
//    * Имя - Строка - имя реквизита в соответствии со "словарем" ВсеРеквизитыДляОтчетности()
//    * Заголовок - Строка - заголовок реквизита
//
Функция ОписаниеРеквизитовФормы(ЮридическоеФизическоеЛицо) Экспорт
	
	ОписаниеРеквизитов = Новый ТаблицаЗначений;
	ОписаниеРеквизитов.Колонки.Добавить("Имя",       Новый ОписаниеТипов("Строка"));
	ОписаниеРеквизитов.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	
	ВсеРеквизиты        = ВсеРеквизитыДляОтчетности(ЮридическоеФизическоеЛицо);
	ЗаголовкиИсключения = ЗаголовкиРеквизитовФормыИсключения(ЮридическоеФизическоеЛицо);
	
	МетаданныеОрганизации = Метаданные.Справочники.Организации;
	
	Для каждого ИмяРеквизита Из ВсеРеквизиты Цикл
		
		// Сначала ищем среди явно заданных заголовков
		ЗаголовокРеквизита = ЗаголовкиИсключения[ИмяРеквизита];
		
		Если ЗаголовокРеквизита = Неопределено Тогда
			// Не нашли в особенностях, ищем в метаданных справочника
			МетаданныеРеквизита = МетаданныеОрганизации.Реквизиты.Найти(ИмяРеквизита);
			Если МетаданныеРеквизита = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаголовокРеквизита = МетаданныеРеквизита.Синоним;
			
		КонецЕсли;
		
		Запись = ОписаниеРеквизитов.Добавить();
		Запись.Имя       = ИмяРеквизита;
		Запись.Заголовок = ЗаголовокРеквизита;
		
	КонецЦикла;
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

Функция ПутьКДанным(ИмяРеквизита, РазмещениеРеквизитов)
	
	Путь = "";
	Если Не РазмещениеРеквизитов.Свойство(ИмяРеквизита, Путь) Тогда
		Путь = "Объект." + ИмяРеквизита;
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

Функция ПроверяемыеДанные(ПроверяемыеРеквизиты)
	
	ПроверяемыеДанные = Новый Соответствие; // Ключ - путь к данным, Значение - Истина
	
	РазмещениеРеквизитов = РазмещениеДанныхФормыДляОтчетности();
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		
		ПутьКДанным = ПутьКДанным(ИмяРеквизита, РазмещениеРеквизитов);
		
		ПроверяемыеДанные.Вставить(ПутьКДанным, Истина);
		
	КонецЦикла;
	
	Возврат ПроверяемыеДанные;
	
КонецФункции

Функция ПутиКОстальнымДаннымГруппы(ПутьКДанным, СвязанныеДанные)
	
	Результат = Новый Массив;
	
	Одногруппники = СвязанныеДанные[ПутьКДанным];
	Если Одногруппники = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СтрРазделить(Одногруппники, ",");
	
КонецФункции

Функция РеквизитЗаполнен(Форма, ПутьКДанным, ОписанияНезаполненныхЗначений)
	
	ТекстНезаполненного = ОписанияНезаполненныхЗначений[ПутьКДанным];
	
	ЗначениеРеквизита = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	Если ТекстНезаполненного <> Неопределено Тогда
		// Реквизиты, представленные на форме гиперссылками, следует обработать отдельно:
		// их незаполненное значение обозначено нестандартно - особым текстом
		Возврат ЗначениеРеквизита <> ТекстНезаполненного;
	Иначе
		Возврат ЗначениеЗаполнено(ЗначениеРеквизита);
	КонецЕсли;
	
КонецФункции

// Проверяет корректность заполнения реквизита ОКТМО на форме, в случае наличия ошибок выводит сообщение
//
// Параметры:
//
//  ОКТМО - Строка - значение кода по ОКТМО
//  ПутьКРеквизиту - Строка - путь к реквизиту на форме, используется для вывода сообщения
//  Отказ - Булево - признак отказа от выполнения действия
//
Процедура ПроверитьКодПоОКТМОНаФорме(ОКТМО, ПутьКРеквизиту, Отказ = Ложь) Экспорт
	
	ОшибкиЗаполненияОКТМО = ОрганизацииФормыДляОтчетностиКлиентСервер.ПроверитьКодПоОКТМО(ОКТМО);
	Если ЗначениеЗаполнено(ОшибкиЗаполненияОКТМО) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОшибкиЗаполненияОКТМО, , , ПутьКРеквизиту, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияВДанных

Функция РеквизитыЗаполнены(Организация, ПроверяемыеРеквизиты, НезаполненныеРеквизиты) Экспорт
	
	Если ПроверяемыеРеквизиты = Неопределено ИЛИ ПроверяемыеРеквизиты.Количество() = 0 Тогда
		// Нечего проверять.
		Возврат Истина;
	КонецЕсли;
	
	ЗначенияРеквизитов = ЗначенияПроверяемыхРеквизитов(Организация, ПроверяемыеРеквизиты);
	
	Результат = Истина;
	
	НезаполненныеРеквизиты = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитов[ИмяРеквизита]) Тогда
			Результат = Ложь;
			НезаполненныеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияПроверяемыхРеквизитов(Организация, ПроверяемыеРеквизиты)
	
	ЗначенияРеквизитов = Новый Структура(СтрСоединить(ПроверяемыеРеквизиты, ","));
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов,
		ПроверяемыеДанныеОрганизации(Организация, ПроверяемыеРеквизиты));
	
	// Реквизиты организации указываются в отчетности на дату подписи.
	// Дата подписи устанавливается в момент создания отчета по текущей дате,
	// поэтому периодические данные получаем по состоянию на текущую дату.
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов,
		ПроверяемыеДанныеКонтактнойИнформации(Организация, ПроверяемыеРеквизиты));
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов,
		ПроверяемыеДанныеРуководителя(Организация, ПроверяемыеРеквизиты));
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ПроверяемыеДанныеОрганизации(Организация, ПроверяемыеРеквизиты)
	
	ЭтоЮрлицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	ТребуемыеРеквизиты = ПересечениеМассивов(ПроверяемыеРеквизиты, ВсеРеквизитыОрганизацииДляОтчетности(ЭтоЮрлицо));
	
	ЗначенияРеквизитов = Новый Структура(СтрСоединить(ТребуемыеРеквизиты, ","));
	
	Если ТребуемыеРеквизиты.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.ФамилияИП КАК ФамилияИП,
	|	Организации.ИмяИП КАК ИмяИП,
	|	Организации.ОтчествоИП КАК ОтчествоИП,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	Организации.ОГРН,
	|	Организации.ДатаРегистрации КАК ДатаРегистрации,
	|	Организации.ИПРегистрационныйНомерПФР КАК ИПРегистрационныйНомерПФР,
	|	Организации.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	Организации.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.КодПоОКТМО, """") КАК КодПоОКТМО,
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.Код, """") КАК КодНалоговогоОргана,
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.НаименованиеИФНС, """") КАК НаименованиеНалоговогоОргана,
	|	Организации.КодОрганаПФР КАК КодОрганаПФР,
	|	Организации.НаименованиеТерриториальногоОрганаПФР КАК НаименованиеТерриториальногоОрганаПФР,
	|	Организации.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
	|	Организации.НаименованиеТерриториальногоОрганаФСС КАК НаименованиеТерриториальногоОрганаФСС,
	|	Организации.КодОКВЭД2 КАК КодОКВЭД2,
	|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД2
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ПроверяемыеДанныеКонтактнойИнформации(Организация, ПроверяемыеРеквизиты)
	
	ЭтоЮрлицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	ТребуемыеРеквизиты = ПересечениеМассивов(
		ПроверяемыеРеквизиты,
		ВсеРеквизитыКонтактнойИнформацииДляОтчетности(ЭтоЮрлицо));
	
	ЗначенияРеквизитов = Новый Структура(СтрСоединить(ТребуемыеРеквизиты, ","));
	
	Если ТребуемыеРеквизиты.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	ВсеВидыКИ = ВсеВидыПроверяемойКонтактнойИнформации();
	
	ОтборПоВидамКИ = Новый Массив;
	Для Каждого ИмяРеквизита Из ТребуемыеРеквизиты Цикл
		ОтборПоВидамКИ.Добавить(ВсеВидыКИ[ИмяРеквизита]);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация), , ОтборПоВидамКИ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ИмяРеквизита Из ТребуемыеРеквизиты Цикл
		
		ВидКИ = ВсеВидыКИ[ИмяРеквизита];
		
		СтрокаКонтактнойИнформации = УправлениеКонтактнойИнформациейБП.ЗначениеКонтактнойИнформацииИзТаблицы(
			Организация, ВидКИ, КонтактнаяИнформация);
		
		Если СтрокаКонтактнойИнформации = Неопределено Тогда
			// Контактная информация требуемого вида отсутствует, значение реквизита не заполнено.
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = Неопределено;
		
		Если НЕ ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
			ЗначениеРеквизита = СтрокаКонтактнойИнформации.Представление;
		ИначеЕсли НЕ ПустаяСтрока(СтрокаКонтактнойИнформации.Значение) Тогда
			ЗначениеРеквизита = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				СтрокаКонтактнойИнформации.Значение);
		ИначеЕсли НЕ ПустаяСтрока(СтрокаКонтактнойИнформации.ЗначенияПолей) Тогда
			ЗначениеРеквизита = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				СтрокаКонтактнойИнформации.ЗначенияПолей);
		КонецЕсли;
		
		ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ВсеВидыПроверяемойКонтактнойИнформации()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Результат.Вставить("Адрес",   Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверяемыеДанныеРуководителя(Организация, ПроверяемыеРеквизиты)
	
	ЭтоЮрлицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	ТребуемыеРеквизиты = ПересечениеМассивов(ПроверяемыеРеквизиты, ВсеРеквизитыРуководителяДляОтчетности(ЭтоЮрлицо));
	
	ЗначенияРеквизитов = Новый Структура(СтрСоединить(ТребуемыеРеквизиты, ","));
	
	Если ТребуемыеРеквизиты.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителя(Организация);
	
	// Заполнится должность, если требуется.
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, ДанныеРуководителя);
	
	// Заполним ФИО по кадровым данным физлица.
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов,
		ДанныеФизлицаРуководителя(ДанныеРуководителя.РуководительФизЛицо, ТребуемыеРеквизиты));
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ДанныеФизлицаРуководителя(Физлицо, ПроверяемыеРеквизиты)
	
	ДанныеФизлица = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(Физлицо) Тогда
		Возврат ДанныеФизлица;
	КонецЕсли;
	
	ТребуемыеПоляФизлица = Новый Массив;
	
	ВсеПоляФизлица = ВсеПоляКадровыхДанныхФизлица();
	
	Для Каждого КлючИЗначение Из ВсеПоляФизлица Цикл
		Если ПроверяемыеРеквизиты.Найти(КлючИЗначение.Значение) <> Неопределено Тогда
			ТребуемыеПоляФизлица.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуемыеПоляФизлица.Количество() = 0 Тогда
		Возврат ДанныеФизлица;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, Физлицо, ТребуемыеПоляФизлица);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат ДанныеФизлица;
	КонецЕсли;
	
	ФИОФизлица = КадровыеДанные[0];
	
	Для Каждого ИмяПоляФизлица Из ТребуемыеПоляФизлица Цикл
		
		ИмяРеквизита      = ВсеПоляФизлица[ИмяПоляФизлица];
		ЗначениеРеквизита = ФИОФизлица[ИмяПоляФизлица];
		
		ДанныеФизлица.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		
	КонецЦикла;
	
	Возврат ДанныеФизлица;
	
КонецФункции

Функция ВсеПоляКадровыхДанныхФизлица()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Фамилия",  "РуководительФамилия");
	Результат.Вставить("Имя",      "РуководительИмя");
	Результат.Вставить("Отчество", "РуководительОтчество");
	
	Возврат Результат;
	
КонецФункции

Функция ПересечениеМассивов(Массив1, Массив2)
	
	Результат = Новый Массив;
	
	УникальныеЗначения = Новый Соответствие;
	
	Для Каждого Значение Из Массив2 Цикл
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Для Каждого Значение Из Массив1 Цикл
		Если УникальныеЗначения[Значение] <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
