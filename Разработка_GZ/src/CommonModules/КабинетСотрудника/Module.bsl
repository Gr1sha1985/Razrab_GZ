#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.165";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.206";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("bf0e44ef-e92b-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ИнициализироватьРолиИсполнителейЗадач";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление ролей исполнителей задач.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.231";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5295d003-f66e-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьПубликациюПравНаВычеты";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации прав на вычеты.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.291";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.302";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a518af76-0896-11eb-8108-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника";
	Обработчик.Комментарий     = НСтр("ru = 'Настройка регламентного задания Проверка состояния сервиса ""1С:Кабинет сотрудника"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.451";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.УстановитьВерсияИзмененийКабинетСотрудника";
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступноИзменениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

Функция ДоступноЧтениеВариантаИспользованияСервиса() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.Константы.СервисКабинетСотрудникаВЛокальнойСети);

КонецФункции

#КонецОбласти


// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяСервисКабинетСотрудника;
	Настройка.ДоступноВАвтономномРабочемМесте = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника.ИмяМетода);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

Процедура ПриЗаписиПубликуемогоОбъекта(Объект) Экспорт
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектПубликации", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &ОбъектПубликации";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПредметПубликации 	= Объект.Ссылка;
		МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника
//	Параметры:
//		ВыполняетсяНачальнаяНастройка - булево;
//		ИспользуетсяСервисКабинетСотрудника - булево.
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника(Знач ВыполняетсяНачальнаяНастройка = Неопределено,
																   Знач ИспользуетсяСервисКабинетСотрудника = Неопределено) Экспорт
															   
	Если ВыполняетсяНачальнаяНастройка = Неопределено Тогда 
		 Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
			 Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
			 ВыполняетсяНачальнаяНастройка = Модуль.ВыполняетсяНачальнаяНастройкаПрограммы();
		 Иначе
			 ВыполняетсяНачальнаяНастройка = Ложь;
		 КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяСервисКабинетСотрудника = ?(ИспользуетсяСервисКабинетСотрудника <> Неопределено, ИспользуетсяСервисКабинетСотрудника,
																								 ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника"));
	ПоказыватьПриглашениеКабинетаСотрудника = НЕ (ВыполняетсяНачальнаяНастройка ИЛИ ИспользуетсяСервисКабинетСотрудника);
	
	Если ПоказыватьПриглашениеКабинетаСотрудника <> Константы.ПоказыватьПриглашениеКабинетСотрудника.Получить() Тогда
		Константы.ПоказыватьПриглашениеКабинетСотрудника.Установить(ПоказыватьПриглашениеКабинетаСотрудника);
	КонецЕсли;
КонецПроцедуры

// Устанавливает значение для ФО ПоказыватьПриглашениеКабинетСотрудника для базовой версии
//
Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии() Экспорт

	Если ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации() Тогда
		УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника();
	КонецЕсли;
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.СостояниеОтложенногоПодключенияКСервису);
	Типы.Добавить(Метаданные.РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиСервисаКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.ПравилаПубликацииКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника);
	Типы.Добавить(Метаданные.РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов);
	Типы.Добавить(Метаданные.РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ);
	Типы.Добавить(Метаданные.РегистрыСведений.ФизическиеЛицаКабинетСотрудника);
	Типы.Добавить(Метаданные.Константы.ИспользуетсяСервисКабинетСотрудника);
	Типы.Добавить(Метаданные.Константы.ПоказыватьПриглашениеКабинетСотрудника);
	Типы.Добавить(Метаданные.Константы.РегистрироватьВЖурналеСобытийЗапросы);
	Типы.Добавить(Метаданные.Константы.ВерсияИзмененийКабинетСотрудника);
	Типы.Добавить(Метаданные.Справочники.ШаблоныОтветовНаЗаявкиКабинетСотрудника);
	
	КабинетСотрудникаВнутренний.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	
КонецПроцедуры

// Получает данные расчетных листков.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации
// 	Месяц - Дата
// 	СписокФизическихЛиц - Массив
//
// 	Возвращаемое значение:
// 		Структура - данные расчетных листков
//
Функция ДанныеРасчетныхЛистовДляПубликации(Организация, Месяц, СписокФизическихЛиц) Экспорт
	
	Данные = Отчеты.АнализНачисленийИУдержаний.ДанныеРасчетныхЛистков(
		СписокФизическихЛиц, Организация, НачалоМесяца(Месяц), КонецМесяца(Месяц));
	
	Если ЗначениеЗаполнено(Данные.ДанныеРасчетныхЛистков) Тогда
		Данные.ДанныеРасчетныхЛистков.Вставить("КраткиеРасчетныеЛистыДокументы", КраткиеРасчетныеЛистыДокументы(Данные.ДанныеРасчетныхЛистков));
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Процедура ЗарегистрироватьОбновлениеВычетов(СписокФизическихЛиц) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновленияПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновленияПубликации.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И ФизическиеЛицаДляОбновленияПубликации.БылаОшибкаПриПубликации ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			МенеджерЗаписи.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКлючамиПриложения

Функция ЕстьКлючиПриложения()
	
	Возврат (КлючиПриложенияИзБезопасногоХранилища() <> Неопределено);
	
КонецФункции

Функция КлючиПриложенияИзБезопасногоХранилища() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Приложение.Ключи",
		"ИдентификаторКлиента,СекретКлиента");
	УстановитьПривилегированныйРежим(Ложь);

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

Процедура СохранитьКлючиПриложенияВБезопасномХранилище(ИдентификаторКлиента, СекретКлиента) Экспорт

	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Ключи",СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеТокенаАутентификации

Функция ТокенАутентификации(Соединение, ПараметрыСоединения)
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Приложение.Токен",
		"Токен,СрокГодностиТокена");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеВБезопасномХранилище.Токен <> Неопределено
		И ДанныеВБезопасномХранилище.СрокГодностиТокена <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеВБезопасномХранилище.СрокГодностиТокена Тогда
			Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
		Иначе
			Возврат ДанныеВБезопасномХранилище.Токен;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
	КонецЕсли;
	
КонецФункции

Функция НовыйТокенАутентификации(Соединение, ПараметрыСоединения)
	
	Токен = Неопределено;
	
	Если Не ЕстьКлючиПриложения() Тогда
		ОписаниеОшибки = НСтр("ru = 'Не заданы ключи приложения.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	КлючиПриложения = КлючиПриложенияИзБезопасногоХранилища();
	
	СтрокаBase64 = Base64Строка(
	ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиПриложения.ИдентификаторКлиента, КлючиПриложения.СекретКлиента)));
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыСоединения.ИмяСобытияЖР, ПараметрыСоединения.СтруктураАдресаПриложения, "POST", Запрос, Ответ);
		Возврат Токен;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Токен = РезультатЧтенияJSON["id_token"];
			СрокГодностиТокена = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Токен",Токен, "Токен");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Приложение.Токен",СрокГодностиТокена, "СрокГодностиТокена");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Токен) Тогда
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖРАутентификации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			Комментарий);
			
	КонецЕсли;
	
	Возврат Токен;

КонецФункции

#КонецОбласти

#Область ИспользованиеAPI

Функция ПараметрыПодключения(ИмяСобытияЖР)
	
	НастройкиСервиса = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтруктураАдресаПриложения = ОбщегоНазначенияКлиентСервер.СтруктураURI(НастройкиСервиса.АдресПриложения);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресПриложения", 			НастройкиСервиса.АдресПриложения);
	Результат.Вставить("СтруктураАдресаПриложения", СтруктураАдресаПриложения);
	Результат.Вставить("Соединение",				НовоеHTTPСоединение(СтруктураАдресаПриложения));
	Результат.Вставить("ШаблоныРесурсов",			ОписаниеAPIСервиса());
	Результат.Вставить("Ошибки",					Новый Массив);
	Результат.Вставить("БылиОшибки",				Ложь);
	Результат.Вставить("ИмяСобытияЖР",				ИмяСобытияЖР);
	Результат.Вставить("ВестиПротокол",				Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить());
	Возврат Результат;
	
КонецФункции

Функция HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, ИмяМетода, СтрокаТела = "", ИмяФайла = "")
	
	Ответ = Неопределено;
	
	Соединение = ПараметрыПодключения.Соединение;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Заголовки.Вставить("Content-Type", "application/octet-stream");
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	Токен = ТокенАутентификации(Соединение, ПараметрыПодключения);
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	Запрос = Новый HTTPЗапрос("/" + ПараметрыПодключения.СтруктураАдресаПриложения.ПутьНаСервере + РесурсСервиса, Заголовки);
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Запрос.УстановитьИмяФайлаТела(ИмяФайла);
	ИначеЕсли ЗначениеЗаполнено(СтрокаТела) Тогда
		Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	КонецЕсли;
	
	Если ПараметрыПодключения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос);
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыПодключения.ИмяСобытияЖР, ПараметрыПодключения.СтруктураАдресаПриложения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если ПараметрыПодключения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 401 Тогда
		Соединение = НовоеHTTPСоединение(ПараметрыПодключения.СтруктураАдресаПриложения);
		Токен = ТокенАутентификации(Соединение, ПараметрыПодключения);
		Если ЗначениеЗаполнено(Токен) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
		Попытка
			Если ПараметрыПодключения.ВестиПротокол Тогда
				ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос);
			КонецЕсли;
			Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
		Исключение
			ЗаписатьОшибкуВызова(ПараметрыПодключения.ИмяСобытияЖР, ПараметрыПодключения.Сервер, ИмяМетода, Запрос, , ОписаниеОшибки());
			Ответ = Неопределено;
		КонецПопытки;
		Если ПараметрыПодключения.ВестиПротокол Тогда
			ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, Запрос, Ответ);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ <> Неопределено И Ответ.КодСостояния >= 300
		И Не (Ответ.КодСостояния = 404 И ИмяМетода = "DELETE") Тогда
		ЗаписатьОшибкуВызова(ПараметрыПодключения.ИмяСобытияЖР, ПараметрыПодключения.СтруктураАдресаПриложения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ИдентификаторПриложенногоФайла(ПараметрыПодключения, Знач ПриложенныйФайл, Расширение) Экспорт
	
	Если ТипЗнч(ПриложенныйФайл) = Тип("ХранилищеЗначения") Тогда
		ПриложенныйФайл = ПриложенныйФайл.Получить();
	КонецЕсли;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	Если ТипЗнч(ПриложенныйФайл) = Тип("ТабличныйДокумент") Тогда
		ПриложенныйФайл.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
	ИначеЕсли ТипЗнч(ПриложенныйФайл) = Тип("СправочникСсылка.ФизическиеЛицаПрисоединенныеФайлы") Тогда
		ДвоичныеДанныеВложения = РаботаСФайлами.ДвоичныеДанныеФайла(ПриложенныйФайл);
		ДвоичныеДанныеВложения.Записать(ИмяВременногоФайла);
	Иначе
		Картинка = Новый Картинка(ПриложенныйФайл);
		Картинка.Записать(ИмяВременногоФайла);
	КонецЕсли;
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсФайлы(), "POST",, ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Возврат ОбъектОтвета.Получить("fileID");
	
КонецФункции

Функция ЗаполнитьПараметрыШаблонаURL(Знач ШаблонСтроки, Знач Параметры)
	Результат = ШаблонСтроки;
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "{" + Параметр.Ключ + "}", Параметр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОписаниеAPI

Функция ОписаниеAPIСервиса()
	
	ОписаниеAPI = Новый Соответствие;
	ОписаниеAPI.Вставить("ФизическиеЛица",									"/api/persons/{ID}");
	ОписаниеAPI.Вставить("ФизическиеЛица_Запросы_Изменения",				"/api/persons/information-change-requests/updates?version={version}&limit={limit}");
	ОписаниеAPI.Вставить("Организации",										"/api/employers/{ID}");
	ОписаниеAPI.Вставить("СтруктураПредприятия",							"/api/divisions/{ID}");
	ОписаниеAPI.Вставить("Должности",										"/api/positions/{ID}");
	ОписаниеAPI.Вставить("ШтатноеРасписание",								"/api/stafflist-positions/{ID}");
	ОписаниеAPI.Вставить("Сотрудники",										"/api/employees/{ID}");
	ОписаниеAPI.Вставить("ИнформацияОбОтпусках",							"/api/vacations/summaries/{ID}");
	ОписаниеAPI.Вставить("ПрименяемыеВычеты",								"/api/tax-deductions/{personID}/{employerID}");
	ОписаниеAPI.Вставить("СоставныеЧастиЗарплаты",							"/api/payslip-component-types/{ID}");
	ОписаниеAPI.Вставить("РасчетныеЛисты",									"/api/payslips/{personID}/{month}");
	ОписаниеAPI.Вставить("Справки2НДФЛ",									"/api/forms2NDFL/{ID}");
	ОписаниеAPI.Вставить("Справки2НДФЛ_Запросы_Изменения",					"/api/forms2NDFL/requests/updates?version={version}&limit={limit}");
	ОписаниеAPI.Вставить("Справки2НДФЛ_Запросы_Статусы",					"/api/forms2NDFL/requests/{requestID}/status/?status={status}");
	ОписаниеAPI.Вставить("ОтветыНаЗапросыСправок2НДФЛ",						"/api/forms2NDFL/responses/{ID}");
	ОписаниеAPI.Вставить("ЗаявленияНаОтпуск_Запросы_Изменения",				"/api/vacations/requests/updates?version={version}&limit={limit}");
	ОписаниеAPI.Вставить("СправкиСРаботы",									"/api/employment-certificates/{ID}");
	ОписаниеAPI.Вставить("СправкиСРаботы_Запросы_Изменения",				"/api/employment-certificates/requests/updates?version={version}&limit={limit}");
	ОписаниеAPI.Вставить("Файлы",											"/api/files/{ID}");
	ОписаниеAPI.Вставить("СправкиОбОстаткеОтпуска_Запросы_Изменения",		"/api/vacations/balance-reports/requests/updates?version={version}&limit={limit}");
	ОписаниеAPI.Вставить("ЗаявленияНаНалоговыеВычеты_Запросы_Изменения",	"/api/tax-deductions/requests/updates?version={version}&limit={limit}");
	ОписаниеAPI.Вставить("Отсутствия_Изменения",							"/api/absences/updates?version={version}&limit={limit}");
	ОписаниеAPI.Вставить("ВсеИзменения",									"/api/data/updates?version={version}&limit={limit}");
	
	
	Возврат ОписаниеAPI;
	
КонецФункции

Функция РесурсAPI() Экспорт
	
	Возврат "/api";
	
КонецФункции

Функция РесурсФизическиеЛица()
	
	Возврат РесурсAPI() + "/persons";
	
КонецФункции

Функция РесурсОрганизации()
	
	Возврат РесурсAPI() + "/employers";
	
КонецФункции

Функция РесурсСтруктураПредприятия()
	
	Возврат РесурсAPI() + "/divisions";
	
КонецФункции

Функция РесурсДолжности()
	
	Возврат РесурсAPI() + "/positions";
	
КонецФункции

Функция РесурсШтатноеРасписание()
	
	Возврат РесурсAPI() + "/stafflist-positions";
	
КонецФункции

Функция РесурсСотрудники()
	
	Возврат РесурсAPI() + "/employees";
	
КонецФункции

Функция РесурсПрименяемыеВычеты()
	
	Возврат РесурсAPI() + "/tax-deductions";
	
КонецФункции

Функция РесурсЗаявленияНаНалоговыеВычеты()
	
	Возврат РесурсПрименяемыеВычеты() + "/requests";
	
КонецФункции

Функция РесурсСоставныеЧастиЗарплаты()
	
	Возврат РесурсAPI() + "/payslip-component-types";
	
КонецФункции

Функция РесурсРасчетныеЛисты()
	
	Возврат РесурсAPI() + "/payslips";
	
КонецФункции

Функция РесурсЗапросыИзмененияЛичныхДанных()
	
	Возврат РесурсФизическиеЛица() + "/information-change-requests";
	
КонецФункции

Функция РесурсСправки2НДФЛ()
	
	Возврат РесурсAPI() + "/forms2NDFL";
	
КонецФункции

Функция РесурсЗапросыСправок2НДФЛ()
	
	Возврат РесурсСправки2НДФЛ() + "/requests";
	
КонецФункции

Функция РесурсОтветыНаЗапросыСправок2НДФЛ()
	
	Возврат РесурсСправки2НДФЛ() + "/responses";
	
КонецФункции

Функция РесурсСправкиСМестаРаботы()
	
	Возврат РесурсAPI() + "/employment-certificates";
	
КонецФункции

Функция РесурсЗапросыСправокСРаботы()
	
	Возврат РесурсСправкиСМестаРаботы() + "/requests";
	
КонецФункции

Функция РесурсЗаявленияНаОтпуск()
	
	Возврат РесурсAPI() + "/vacations/requests";
	
КонецФункции

Функция РесурсСправкиОбОстаткеОтпуска()
	
	Возврат РесурсAPI() + "/vacations/balance-reports";
	
КонецФункции

Функция РесурсЗапросыСправокОбОстаткеОтпуска()
	
	Возврат РесурсСправкиОбОстаткеОтпуска() + "/requests";
	
КонецФункции

Функция РесурсОтсутствия()
	
	Возврат РесурсAPI() + "/absences";
	
КонецФункции

Функция РесурсФайлы()
	
	Возврат РесурсAPI() + "/files";
	
КонецФункции

#КонецОбласти

#Область КонструкторыСоответствияПолей

Функция ОписаниеПолейОрганизаций()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"Организация");
	СоответствиеПолей.Вставить("name",		"Наименование");
	СоответствиеПолей.Вставить("taxID",		"ИНН");
	СоответствиеПолей.Вставить("isBranch",	"ОбособленноеПодразделение");
	СоответствиеПолей.Вставить("parentOrganizationID", "ГоловнаяОрганизация");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейСтруктурыПредприятия()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"СтруктураПредприятия");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("code",				"Код");
	СоответствиеПолей.Вставить("parentDivisionID",	"Родитель");
	СоответствиеПолей.Вставить("headID",			"ФизическоеЛицоРуководителя");
	СоответствиеПолей.Вставить("priority",			"Порядок");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейДолжностей()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",		"Должность");
	СоответствиеПолей.Вставить("name",		"Наименование");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейШтатногоРасписания()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",			"ПозицияШтатногоРасписания");
	СоответствиеПолей.Вставить("name",			"Наименование");
	СоответствиеПолей.Вставить("employerID",	"Организация");
	СоответствиеПолей.Вставить("divisionID",	"МестоВСтруктуреПредприятия");
	СоответствиеПолей.Вставить("positionID",	"Должность");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейФизическихЛиц()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"ФизическоеЛицо");
	СоответствиеПолей.Вставить("lastName",			"Фамилия");
	СоответствиеПолей.Вставить("firstName",			"Имя");
	СоответствиеПолей.Вставить("patronymic",		"Отчество");
	СоответствиеПолей.Вставить("initials",			"Инициалы");
	СоответствиеПолей.Вставить("gender",			"Пол");
	СоответствиеПолей.Вставить("birthDate",			"ДатаРождения");
	СоответствиеПолей.Вставить("taxID",				"ИНН");
	СоответствиеПолей.Вставить("insuranceNumber",	"СтраховойНомерПФР");
	СоответствиеПолей.Вставить("birthPlace",		"МестоРождения");
	СоответствиеПолей.Вставить("phoneNumber",		"ТелефонРабочийПредставление");
	СоответствиеПолей.Вставить("mobilePhoneNumber",	"ТелефонМобильныйПредставление");
	СоответствиеПолей.Вставить("eMail",				"EMailПредставление");
	СоответствиеПолей.Вставить("identityDocument",	ОписаниеПолейДокументВид());
	СоответствиеПолей.Вставить("registrationAddress", "АдресПоПропискеПредставление");
	СоответствиеПолей.Вставить("residentialAddress", "АдресМестаПроживанияПредставление");
	
	Возврат СоответствиеПолей;

КонецФункции

Функция ОписаниеПолейДокументВид()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("identityDocumentType",	"ДокументВид");
	СоответствиеПолей.Вставить("serias",				"ДокументСерия");
	СоответствиеПолей.Вставить("number",				"ДокументНомер");
	СоответствиеПолей.Вставить("issueDate",				"ДокументДатаВыдачи");
	СоответствиеПолей.Вставить("issuingAuthority",		"ДокументКемВыдан");
	СоответствиеПолей.Вставить("issuingAuthorityID",	"ДокументКодПодразделения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейСотрудников()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",					"Сотрудник");
	СоответствиеПолей.Вставить("personID",				"ФизическоеЛицо");
	СоответствиеПолей.Вставить("employmentDate",		"ДатаПриема");
	СоответствиеПолей.Вставить("staffListPositionID",	"ДолжностьПоШтатномуРасписанию");
	СоответствиеПолей.Вставить("employerID",			"Организация");
	СоответствиеПолей.Вставить("divisionID",			"МестоВСтруктуреПредприятия");
	СоответствиеПолей.Вставить("positionID",			"Должность");
	СоответствиеПолей.Вставить("transferDate",			"РабочееМестоПериодРегистрации");
	СоответствиеПолей.Вставить("employmentType",		"ВидЗанятости");
	СоответствиеПолей.Вставить("wageRate",				ОписаниеПолейТарифнойСтавки());
	Возврат СоответствиеПолей;

КонецФункции

Функция ОписаниеПолейТарифнойСтавки()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("value",			"ТарифнаяСтавка");
	СоответствиеПолей.Вставить("presentation",	"ПоказательТарифнойСтавки");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейСправокСРаботы() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",			"ЗаявкаСсылка");
	СоответствиеПолей.Вставить("requestID",		"ИдентификаторЗапроса");
	СоответствиеПолей.Вставить("employerID",	"Организация");
	СоответствиеПолей.Вставить("personID",		"ФизическоеЛицо");
	СоответствиеПолей.Вставить("attachment",	ОписаниеПолейВложения());
	СоответствиеПолей.Вставить("note",			"Комментарий");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейВложения()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("name",		"НаименованиеВложения");
	СоответствиеПолей.Вставить("extension",	"РасширениеВложения");
	СоответствиеПолей.Вставить("fileID ",	"ИдентификаторВложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейВходящийФайл()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("name",		"НаименованиеФайла");
	СоответствиеПолей.Вставить("extension",	"РасширениеФайла");
	СоответствиеПолей.Вставить("size",		"РазмерФайла");
	СоответствиеПолей.Вставить("ID",		"ИдентификаторФайла");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейЗапросовСправокНДФЛ()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",			"ИдентификаторЗапроса");
	СоответствиеПолей.Вставить("version",		"Версия");
	СоответствиеПолей.Вставить("dateCreated",	"ДатаСоздания");
	СоответствиеПолей.Вставить("personID",		"ФизическоеЛицо");
	СоответствиеПолей.Вставить("purpose",		"Назначение");
	СоответствиеПолей.Вставить("periodType",	"ТипПериода");
	СоответствиеПолей.Вставить("taxYear",		"НалоговыйПериод");
	СоответствиеПолей.Вставить("proofPeriod",	"КоличествоМесяцев");
	СоответствиеПолей.Вставить("note",			"Комментарий");
	СоответствиеПолей.Вставить("employerID",	"Организация");
	СоответствиеПолей.Вставить("incomePeriodStartDate", "НачалоПериода");
	СоответствиеПолей.Вставить("incomePeriodEndDate", 	"ОкончаниеПериода");
	Возврат СоответствиеПолей;

КонецФункции

Функция ОписаниеПолейОтсутствия()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",			"ИдентификаторЗапроса");
	СоответствиеПолей.Вставить("version",		"Версия");
	СоответствиеПолей.Вставить("dateCreated",	"ДатаСоздания");
	СоответствиеПолей.Вставить("personID",		"ФизическоеЛицо");
	СоответствиеПолей.Вставить("reason",		"Причина");
	СоответствиеПолей.Вставить("startDate",		"ДатаНачала");
	СоответствиеПолей.Вставить("endDate",		"ДатаОкончания");
	СоответствиеПолей.Вставить("note",			"Комментарий");
	СоответствиеПолей.Вставить("attachments",	"Вложения");
	СоответствиеПолей.Вставить("allDay",		"ВесьДень");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейЗаявленийНаОтпуск()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"ИдентификаторЗапроса");
	СоответствиеПолей.Вставить("version",			"Версия");
	СоответствиеПолей.Вставить("dateCreated",		"ДатаСоздания");
	СоответствиеПолей.Вставить("personID",			"ФизическоеЛицо");
	СоответствиеПолей.Вставить("startDate",			"ДатаНачала");
	СоответствиеПолей.Вставить("endDate",			"ДатаОкончания");
	СоответствиеПолей.Вставить("communicationType",	"СпособСвязи");
	СоответствиеПолей.Вставить("unpaid",			"ЗаСвойСчет");
	СоответствиеПолей.Вставить("approved",			"Согласован");
	СоответствиеПолей.Вставить("note",				"Комментарий");
	СоответствиеПолей.Вставить("deputyInfos",		"");
	СоответствиеПолей.Вставить("originalRequestID",	"");
	СоответствиеПолей.Вставить("signatories",		"");
	СоответствиеПолей.Вставить("attachments",		"Вложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейЗапросаСправокСРаботы()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",			"ИдентификаторЗапроса");
	СоответствиеПолей.Вставить("version",		"Версия");
	СоответствиеПолей.Вставить("dateCreated",	"ДатаСоздания");
	СоответствиеПолей.Вставить("personID",		"ФизическоеЛицо");
	СоответствиеПолей.Вставить("employerID",	"Организация");
	СоответствиеПолей.Вставить("purpose",		"НазначениеСтрокой");
	СоответствиеПолей.Вставить("note",			"Комментарий");
	СоответствиеПолей.Вставить("attachments",	"Вложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейЗапросаИзмененияЛичныхДанных()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",						"ИдентификаторЗапроса");
	СоответствиеПолей.Вставить("version",					"Версия");
	СоответствиеПолей.Вставить("dateCreated",				"ДатаСоздания");
	СоответствиеПолей.Вставить("personID",					"ФизическоеЛицо");
	СоответствиеПолей.Вставить("employerID",				"Организация");
	СоответствиеПолей.Вставить("changeName",				"ИзменитьФИО");
	СоответствиеПолей.Вставить("lastName",					"Фамилия");
	СоответствиеПолей.Вставить("firstName",					"Имя");
	СоответствиеПолей.Вставить("patronymic",				"Отчество");
	СоответствиеПолей.Вставить("changeIdentityDocument",	"ИзменитьДокумент");
	СоответствиеПолей.Вставить("identityDocument",			ОписаниеПолейДокументВид());
	СоответствиеПолей.Вставить("changePersonalPhone",		"ИзменитьНомерТелефона");
	СоответствиеПолей.Вставить("personalPhone",				"ЛичныйНомерТелефона");
	СоответствиеПолей.Вставить("changeAddress",				"ИзменитьАдрес");
	СоответствиеПолей.Вставить("registrationAddress",		"АдресРегистрации");
	СоответствиеПолей.Вставить("residentialAddress",		"АдресМестаПроживания");
	СоответствиеПолей.Вставить("note",						"Комментарий");
	СоответствиеПолей.Вставить("attachments",				"Вложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеПолейСправокОбОстаткеОтпуска() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("requestID",		"ИдентификаторЗапроса");
	СоответствиеПолей.Вставить("attachment",	ОписаниеПолейВложения());
	Возврат СоответствиеПолей;
	
КонецФункции

Функция НовоеОписаниеПоля(ИмяПоляСервиса, ИмяПоляКонфигурации, ТипПоля, ОписаниеПолей = Неопределено) Экспорт
	
	ОписаниеПоля = Новый Соответствие;
	ОписаниеПоля.Вставить("ИмяПоляСервиса", ИмяПоляСервиса);
	ОписаниеПоля.Вставить("ИмяПоляКонфигурации", ИмяПоляКонфигурации);
	ОписаниеПоля.Вставить("ТипПоля", ТипПоля);
	ОписаниеПоля.Вставить("ОписаниеПолей", ОписаниеПолей);
	Возврат ОписаниеПоля;
	
КонецФункции

Функция ОписаниеПолейПрименяемыеНалоговыеВычеты()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("employerID", "Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("personID", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("deductions", "ИнформацияОВычетах", Тип("ТаблицаЗначений"), ОписаниеПолейИнформацияОПримененииВычета()));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейИнформацияОПримененииВычета()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("startDate", "ДатаНачала", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("endDate", "ДатаОкончания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("amount", "РазмерВычета", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "ОписаниеВычета", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейОтветовНаЗапросыСправок2НДФЛ()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("requestID", "ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("employerID", "Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("personID", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("forms2NDFL", "Справки2НДФЛ", Тип("ТаблицаЗначений"), ОписаниеПолейСправок2НДФЛ()));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейСправок2НДФЛ()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("ID", "Справка2НДФЛ", Тип("ДокументСсылка.СправкаНДФЛ")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("taxYear", "НалоговыйПериод", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("incomeAmount", "СуммаДохода", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("taxAmount", "СуммаНалога", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("dateCreated", "ДатаСоздания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("attachment", "Вложение", Неопределено, ОписаниеПолейПриложенныйФайл()));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейЗапросаСправокОбОстаткеОтпуска()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("ID", "ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("version", "Версия", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("dateCreated", "ДатаСоздания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("personID", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейЗаявленийНаНалоговыеВычеты()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("ID", "ИдентификаторЗапроса", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("version", "Версия", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("dateCreated", "ДатаСоздания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("personID", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("employerID", "Организация", Тип("СправочникСсылка.Организации")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("applyMonth", "МесяцПрименения", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("personalDeduction", "ЭтоЛичныйВычет", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("childTaxDeductions", "ВычетыНаДетей", Тип("ТаблицаЗначений"), ОписаниеПолейВычетаНаДетей()));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("taxAuthorityNotices", "УведомленияИзНалоговой", Тип("ТаблицаЗначений"), ОписаниеПолейУведомленияИзНалоговой()));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("attachments", "Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейВычетаНаДетей()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("childSeniority", "СтаршинствоРебенка", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("childDisability", "РебенокИнвалид", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("singleParent", "РодительОдиночка", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("guardian", "ЗаявительОпекун", Тип("Булево")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("endDate", "ДатаОкончания", Тип("Дата")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("attachments", "Вложения", Тип("ТаблицаЗначений"), ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейУведомленияИзНалоговой()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("amount", "Размер", Тип("Число")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("attachment", "Вложение", Неопределено, ОписаниеПолейЗагружаемыйФайл()));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("note", "Комментарий", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейПриложенныйФайл()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("name", "НаименованиеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("size", "РазмерФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("fileID", "ИдентификаторФайла", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ОписаниеПолейЗагружаемыйФайл()
	
	ОписаниеПолей = Новый Массив;
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("name", "НаименованиеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("extension", "РасширениеФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("size", "РазмерФайла", Тип("Строка")));
	ОписаниеПолей.Добавить(НовоеОписаниеПоля("ID", "ИдентификаторФайла", Тип("Строка")));
	Возврат ОписаниеПолей;
	
КонецФункции

Функция НовоеОписаниеТиповПоля(ИмяПоля)
	
	ТипПоля = Новый ОписаниеТипов("Строка");
	Если ИмяПоля = "ФизическоеЛицо" Тогда
		ТипПоля = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ИмяПоля = "Организация" Тогда
		ТипПоля = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ИначеЕсли ИмяПоля = "ИзменитьФИО"
			Или ИмяПоля = "ИзменитьДокумент"
			Или ИмяПоля = "ИзменитьНомерТелефона"
			Или ИмяПоля = "ИзменитьАдрес"
			Или ИмяПоля = "ЗаСвойСчет"
			Или ИмяПоля = "ВесьДень" Тогда
		ТипПоля = Новый ОписаниеТипов("Булево");
	ИначеЕсли ИмяПоля = "Версия"
			Или ИмяПоля = "ЭтоЛичныйВычет"
			Или ИмяПоля = "НалоговыйПериод" Тогда
		ТипПоля = Новый ОписаниеТипов("Число");
	ИначеЕсли ИмяПоля = "Вложения" Тогда
		ТипПоля = Новый ОписаниеТипов("ТаблицаЗначений");
	ИначеЕсли ИмяПоля = "ДатаСоздания"
			Или ИмяПоля = "ДатаНачала"
			Или ИмяПоля = "ДатаОкончания"
			Или ИмяПоля = "МесяцПрименения"
			Или ИмяПоля = "ДокументДатаВыдачи"
			Или ИмяПоля = "НачалоПериода"
			Или ИмяПоля = "ОкончаниеПериода" Тогда
		ТипПоля = Новый ОписаниеТипов("Дата");
	КонецЕсли;
	Возврат ТипПоля;
	
КонецФункции

#КонецОбласти

#Область ФункцииПреобразованияПеречислений

Функция ПолФизическогоЛица(Пол)
	
	Результат = Неопределено;
	
	Если Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской") Тогда
		Результат = "male";
	ИначеЕсли Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский") Тогда
		Результат = "female";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидЗанятостиСотрудника(ВидЗанятости)
	
	Результат = Неопределено;
	
	Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		Результат = "mainWork";
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		Результат = "extraWorkExternal";
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
		Результат = "extraWorkInternal";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидДокументаФизическогоЛица(ВидДокумента)
	
	Результат = "other";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		КодМВД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "КодМВД");
		Если КодМВД = "21" Тогда
			Результат = "passport";
		ИначеЕсли КодМВД = "10" Тогда
			Результат = "foreignPassport";
		ИначеЕсли КодМВД = "12" Тогда
			Результат = "residenceCard";
		ИначеЕсли КодМВД = "14" Тогда
			Результат = "identityCard";
		ИначеЕсли КодМВД = "04" Тогда
			Результат = "militaryIdentityCard";
		ИначеЕсли КодМВД = "15" Тогда
			Результат = "residencePermission";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИБ

#Область ФункцииПолученияДанных

Функция ДанныеФизическихЛиц(ПараметрыПодключения, МассивОтбора)
	
	Результат = НовыйРезультатПолученияДанных();
	
	СоответствиеПолей = ОписаниеПолейФизическихЛиц();
	ВыбираемыеПоля = ВыбираемыеПоля(СоответствиеПолей);
	
	КадровыеДанные = СтрСоединить(ВыбираемыеПоля, ", ");
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивОтбора, КадровыеДанные);
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		СтрокаТЗ.МестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаТЗ.МестоРождения);
		Если ЗначениеЗаполнено(СтрокаТЗ.ТелефонРабочийПредставление) И СтрДлина(СтрокаТЗ.ТелефонРабочийПредставление) > 20 Тогда
			СтрокаТЗ.ТелефонРабочийПредставление = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЗ.ТелефонМобильныйПредставление) И СтрДлина(СтрокаТЗ.ТелефонМобильныйПредставление) > 20 Тогда
			СтрокаТЗ.ТелефонМобильныйПредставление = "";
		КонецЕсли;
		СтрокаТЗ.EMailПредставление = СокрЛП(СтрокаТЗ.EMailПредставление);
	КонецЦикла;
	
	Вложения = КабинетСотрудникаВнутренний.ФотографииФизическихЛиц(ТаблицаДанных.ВыгрузитьКолонку("ФизическоеЛицо"));
	Если ЗначениеЗаполнено(Вложения) Тогда
		СоответствиеПолей.Вставить("picture", ОписаниеПолейВложения());
		ДополнитьТаблицуКолонкамиВложения(ТаблицаДанных);
		ВыгрузитьВложенияВСервис(ПараметрыПодключения, ТаблицаДанных, Вложения, "ФизическоеЛицо", "Фотография", "jpg");
	КонецЕсли;
	
	Результат.ВыгрузитьДанные = ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДолжностей(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейДолжностей();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Ссылка В(&СписокОтбора)";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);

КонецФункции

Функция ДанныеОрганизаций(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейОрганизаций();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОтбора)";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеСтруктурыПредприятия(ПараметрыПодключения, МассивОтбора)
	
	Результат = НовыйРезультатПолученияДанных();
	
	СоответствиеПолей = ОписаниеПолейСтруктурыПредприятия();
		
	ТаблицаДанных = КабинетСотрудникаВнутренний.ДанныеСтруктурыПредприятия(МассивОтбора);
	
	Возврат  ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
КонецФункции

Функция ДанныеШтатногоРасписания(ПараметрыПодключения, МассивОтбора)
	
	СоответствиеПолей = ОписаниеПолейШтатногоРасписания();
	ТаблицаДанных = КабинетСотрудникаВнутренний.ДанныеШтатногоРасписания(МассивОтбора);
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.МестоВСтруктуреПредприятия) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);

КонецФункции

Функция ДанныеСотрудников(ПараметрыПодключения, МассивОтбора)
	
	Результат = НовыйРезультатПолученияДанных();
	
	СоответствиеПолей = ОписаниеПолейСотрудников();
	ВыбираемыеПоля = ВыбираемыеПоля(СоответствиеПолей);
	ВыбираемыеПоля.Добавить("Подразделение");
	
	ВедетсяШтатноеРасписание = Ложь;
	ТаблицаДанных = КабинетСотрудникаВнутренний.КадровыеДанныеСотрудников(МассивОтбора, ВыбираемыеПоля, ВедетсяШтатноеРасписание);
	
	// проверка отсутствия кадровых данных сотрудника
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Организация) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если Не ВедетсяШтатноеРасписание Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПозицииСотрудников = Новый Соответствие;
		Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
			ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
		КонецЦикла;
		
		Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
		СтруктураПредприятия = КабинетСотрудникаВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
		ПодразделенияПозиций = Новый Соответствие;
		Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
			ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			СтрокаТЗ.ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
			СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[СтрокаТЗ.ДолжностьПоШтатномуРасписанию];
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.ВыгрузитьДанные = ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей);
	
	Возврат Результат;

КонецФункции

Функция ДанныеОВычетах(ПараметрыПодключения, МассивОтбора)
	
	ОписаниеПолей = ОписаниеПолейПрименяемыеНалоговыеВычеты();
	ТаблицаДанных = ПрименяемыеВычеты(МассивОтбора, ТекущаяДатаСеанса());
	
	ФизическиеЛицаСВычетами  = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "ФизическоеЛицо", Истина);
	
	Результат = Новый Структура("Данные,ФизическиеЛицаБезВычетов");
	Результат.Данные = МассивИзТаблицы(ТаблицаДанных, ОписаниеПолей);
	Результат.ФизическиеЛицаБезВычетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОтбора, ФизическиеЛицаСВычетами);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеРасчетныхЛистов(Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц, ПовторнаяПубликация)
	
	Данные = ДанныеРасчетныхЛистовДляПубликации(Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц);
	Если Не ЗначениеЗаполнено(Данные.ДанныеРасчетныхЛистков) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРасчетныхЛистов = Данные.ДанныеРасчетныхЛистков.ДанныеРасчетныхЛистков;
	РасчетныеЛистыДокументы = Данные.ДанныеРасчетныхЛистков.КраткиеРасчетныеЛистыДокументы;
	
	ПерваяПоловинаМесяца = Ложь;
	ДанныеРасчетныхЛистов.Колонки.Добавить("ID",						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("section",					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("specificSalaryComponent",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("accrualType",				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("priority",					Новый ОписаниеТипов("Число"));
	ДанныеРасчетныхЛистов.Колонки.Добавить("name",						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ДанныеРасчетныхЛистов.Колонки.Добавить("amount",					Новый ОписаниеТипов("Число"));
	ДанныеРасчетныхЛистов.Колонки.Добавить("workplace",					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	Идентификаторы = ИдентификаторыСоставнойЧастиЗарплаты();
	НачисленияТарифнойСтавки = РасчетЗарплаты.НачисленияТарифнойСтавки();
	РегистраторыВыплаты = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеРасчетныхЛистов,"РегистраторВыплаты",Истина);
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеРасчетныхЛистов Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидРасчета) И Не ЗначениеЗаполнено(СтрокаДанных.Группа) Тогда
			СтрокиКУдалению.Добавить(СтрокаДанных);
			Продолжить;
		КонецЕсли;
		ОбработатьСтрокуДанных(СтрокаДанных, НачисленияТарифнойСтавки);
	КонецЦикла;
	
	Для каждого СтрокаДанных Из СтрокиКУдалению Цикл
		ДанныеРасчетныхЛистов.Удалить(СтрокаДанных);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеРасчетныхЛистов", ДанныеРасчетныхЛистов);
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеРасчетныхЛистов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеРасчетныхЛистов.Сотрудник КАК Сотрудник,
	|	ДанныеРасчетныхЛистов.amount КАК amount,
	|	ДанныеРасчетныхЛистов.workplace КАК workplace,
	|	ДанныеРасчетныхЛистов.priority КАК priority,
	|	ДанныеРасчетныхЛистов.accrualType КАК accrualType,
	|	ДанныеРасчетныхЛистов.section КАК section,
	|	ДанныеРасчетныхЛистов.specificSalaryComponent КАК specificSalaryComponent,
	|	ДанныеРасчетныхЛистов.name КАК name,
	|	ДанныеРасчетныхЛистов.ID КАК ID
	|ПОМЕСТИТЬ ВТДанныеСИдентификаторами
	|ИЗ
	|	&ДанныеРасчетныхЛистов КАК ДанныеРасчетныхЛистов
	|ГДЕ
	|	НЕ ДанныеРасчетныхЛистов.ID = """"
	|	И НЕ ДанныеРасчетныхЛистов.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ДанныеРасчетныхЛистов.amount = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСИдентификаторами.ID КАК ID,
	|	ВТДанныеСИдентификаторами.name КАК name,
	|	ВТДанныеСИдентификаторами.section КАК section,
	|	ВТДанныеСИдентификаторами.specificSalaryComponent КАК specificSalaryComponent,
	|	ВТДанныеСИдентификаторами.accrualType КАК accrualType,
	|	МИНИМУМ(ВТДанныеСИдентификаторами.priority) КАК priority
	|ИЗ
	|	ВТДанныеСИдентификаторами КАК ВТДанныеСИдентификаторами
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеСИдентификаторами.ID,
	|	ВТДанныеСИдентификаторами.name,
	|	ВТДанныеСИдентификаторами.section,
	|	ВТДанныеСИдентификаторами.specificSalaryComponent,
	|	ВТДанныеСИдентификаторами.accrualType
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеСИдентификаторами.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТДанныеСИдентификаторами.Сотрудник КАК Сотрудник,
	|	ВТДанныеСИдентификаторами.ID КАК ID,
	|	ВТДанныеСИдентификаторами.amount КАК amount,
	|	ВТДанныеСИдентификаторами.workplace КАК workplace
	|ИЗ
	|	ВТДанныеСИдентификаторами КАК ВТДанныеСИдентификаторами
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СоставныеЧастиЗарплаты = Новый Массив;
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СоставнаяЧастьЗарплаты = Новый Структура;
		Для Каждого КолонкаРезультатаЗапроса Из РезультатЗапроса[1].Колонки Цикл
			Если ЗначениеЗаполнено(Выборка[КолонкаРезультатаЗапроса.Имя]) Тогда
				СоставнаяЧастьЗарплаты.Вставить(КолонкаРезультатаЗапроса.Имя, Выборка[КолонкаРезультатаЗапроса.Имя]);
			КонецЕсли;
		КонецЦикла;
		СоставныеЧастиЗарплаты.Добавить(СоставнаяЧастьЗарплаты);
	КонецЦикла;
	
	ИнформацияОЗарплате = Новый Массив;
	ДанныеЛистков = РезультатЗапроса[2].Выгрузить();
	ДанныеЛистков.Индексы.Добавить("ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	Для каждого ЭлементКоллекции Из РасчетныеЛистыДокументы Цикл
		
		Отбор.ФизическоеЛицо = ЭлементКоллекции.Ключ;
		
		НайденныеСтроки = ДанныеЛистков.НайтиСтроки(Отбор);
		Компоненты = Новый Массив;
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			СтруктураКомпонента = Новый Структура;
			СтруктураКомпонента.Вставить("employerID", Организация);
			СтруктураКомпонента.Вставить("employeeID", СтрокаТЗ.Сотрудник);
			СтруктураКомпонента.Вставить("componentID", СтрокаТЗ.ID);
			СтруктураКомпонента.Вставить("amount", СтрокаТЗ.amount);
			СтруктураКомпонента.Вставить("workplace", СтрокаТЗ.workplace);
			Компоненты.Добавить(СтруктураКомпонента);
		КонецЦикла;
		
		Если Компоненты.Количество() = 0 И Не ПовторнаяПубликация Тогда
			// нет данных и это не повторная публикация
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("personID", 		Отбор.ФизическоеЛицо);
		Структура.Вставить("month", 		МесяцРасчетныхЛистов);
		Структура.Вставить("isFirstHalf", 	ПерваяПоловинаМесяца);
		Структура.Вставить("components", 	Компоненты);
		ИнформацияОЗарплате.Добавить(Структура);
	
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СоставныеЧастиЗарплаты", СоставныеЧастиЗарплаты);
	Результат.Вставить("ИнформацияОЗарплате", ИнформацияОЗарплате);
	Результат.Вставить("РасчетныеЛистыДокументы", РасчетныеЛистыДокументы);
	Возврат Результат;
	
КонецФункции

Функция КраткиеРасчетныеЛистыДокументы(ДанныеРасчетныхЛистковСтруктура)
	
	Результат = Новый Соответствие;
	
	ДанныеРасчетныхЛистков = ДанныеРасчетныхЛистковСтруктура.ДанныеРасчетныхЛистков;
	
	Для Каждого ОбщиеДанныеРасчетногоЛистка Из ДанныеРасчетныхЛистковСтруктура.ОбщиеДанныеРасчетныхЛистков Цикл
		
		ФизическоеЛицо = ОбщиеДанныеРасчетногоЛистка.Ключ;
		
		ДокументРезультат = КраткийРасчетныйЛист(ОбщиеДанныеРасчетногоЛистка.Значение, ДанныеРасчетныхЛистков.Скопировать(Новый Структура("ФизическоеЛицо", ФизическоеЛицо)));
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			Результат.Вставить(ФизическоеЛицо, ДокументРезультат);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КраткийРасчетныйЛист(ОбщиеДанныеРасчетногоЛистка, ДанныеРасчетногоЛистка)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.РазмерСтраницы = "A6";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_РасчетныйЛистокДляСервисаКабинетСотрудника");
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.Заполнить(ОбщиеДанныеРасчетногоЛистка);
	
	ПараметрыЗаполненияФИО = Новый Структура("ФИОТабельныйНомер", ОбщиеДанныеРасчетногоЛистка.ФизическоеЛицоФИО);
	Если ЗначениеЗаполнено(ОбщиеДанныеРасчетногоЛистка.РаботаСотрудникТабельныйНомерНаПечать) Тогда
		
		ПараметрыЗаполненияФИО.ФИОТабельныйНомер = ПараметрыЗаполненияФИО.ФИОТабельныйНомер
			+ " (" + ОбщиеДанныеРасчетногоЛистка.РаботаСотрудникТабельныйНомерНаПечать + ")";
		
	КонецЕсли;
	
	ОбластьШапки.Параметры.Заполнить(ПараметрыЗаполненияФИО);
	
	ДокументРезультат.Вывести(ОбластьШапки);
	
	ВыводимыеГруппы = Новый Массив;
	ВыводимыеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо"));
	ВыводимыеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено"));
	ВыводимыеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано"));
	ВыводимыеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено"));
	ВыводимыеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы"));
	ВыводимыеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно"));
	ВыводимыеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо"));
	
	Для Каждого Группа Из ВыводимыеГруппы Цикл
		
		ДанныеГруппы = ДанныеРасчетногоЛистка.Скопировать(Новый Структура("Группа", Группа));
		Если ДанныеГруппы.Количество() > 0 Тогда
			
			Если Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано")
				Или Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено") Тогда
				ДанныеГруппы.ЗаполнитьЗначения(Неопределено, "Сотрудник");
				ДанныеГруппы.Свернуть("ФизическоеЛицо,Сотрудник,Группа,ВидРасчета,РегистраторВыплаты,ПриоритетВидаРасчета,ПериодДействия", "Сумма");
			КонецЕсли;
			
			ДанныеВычисляемыеНаХоду = Новый Структура("Сумма", 0);
			Если Группа <> ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы")
				И Группа <> ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно") Тогда
				ДанныеВычисляемыеНаХоду.Сумма = ДанныеГруппы.Итог("Сумма");
			КонецЕсли;
			
			Если Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо")
				Или Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
				
				Если ДанныеВычисляемыеНаХоду.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо")
				Или Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
				
				Если ДанныеВычисляемыеНаХоду.Сумма > 0 Тогда
					ОбластьГруппы = Макет.ПолучитьОбласть("ДолгПредприятия");
				Иначе
					ОбластьГруппы = Макет.ПолучитьОбласть("ДолгРаботника");
				КонецЕсли;
				
			ИначеЕсли Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено") Тогда
				ОбластьГруппы = Макет.ПолучитьОбласть("Начислено");
			ИначеЕсли Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано") Тогда
				ОбластьГруппы = Макет.ПолучитьОбласть("Удержано");
			ИначеЕсли Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено") Тогда
				ОбластьГруппы = Макет.ПолучитьОбласть("Выплачено");
			ИначеЕсли Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы") Тогда
				ОбластьГруппы = Макет.ПолучитьОбласть("Льготы");
			ИначеЕсли Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно") Тогда
				ОбластьГруппы = Макет.ПолучитьОбласть("Справочно");
			ИначеЕсли Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
				ОбластьГруппы = Макет.ПолучитьОбласть("КонечноеСальдо");
			КонецЕсли;
			
			ОбластьГруппы.Параметры.Заполнить(ДанныеВычисляемыеНаХоду);
			ДокументРезультат.Вывести(ОбластьГруппы);
			
			Если Группа <> ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо")
				И Группа <> ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
				
				ПредставлениеРабочегоМеста = "";
				Для Каждого СтрокаДанных Из ДанныеГруппы Цикл
					
					Если Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено") Тогда
						
						Если Не ПустаяСтрока(ПредставлениеРабочегоМеста)
							И ПредставлениеРабочегоМеста <> СтрокаДанных.ПредставлениеРабочегоМеста Тогда
							
							ОбластьПредставлениеРабочегоМеста = Макет.ПолучитьОбласть("ПредставлениеРабочегоМеста");
							ОбластьПредставлениеРабочегоМеста.Параметры.Заполнить(СтрокаДанных);
							ДокументРезультат.Вывести(ОбластьПредставлениеРабочегоМеста);
							
						КонецЕсли;
						
						ПредставлениеРабочегоМеста = СтрокаДанных.ПредставлениеРабочегоМеста;
						
					КонецЕсли;
					
					ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
					ОбластьСтроки.Параметры.Заполнить(СтрокаДанных);
					Если Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено") Тогда
						Если ЗначениеЗаполнено(СтрокаДанных.ОплаченныеДниЧасы) Тогда
							ПараметрыЗаполненияВидаРасчета = Новый Структура("ВидРасчета");
							ПараметрыЗаполненияВидаРасчета.ВидРасчета = Строка(СтрокаДанных.ВидРасчета)
								+ " (" + СтрокаДанных.ОплаченныеДниЧасы + ")";
							ОбластьСтроки.Параметры.Заполнить(ПараметрыЗаполненияВидаРасчета);
						КонецЕсли;
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьСтроки);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбщиеДанныеРасчетногоЛистка.ТекстоваяИнформация) Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("ТекстоваяИнформация");
		ОбластьШапки.Параметры.Заполнить(ОбщиеДанныеРасчетногоЛистка);
		ДокументРезультат.Вывести(ОбластьШапки);
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ИдентификаторЗначенияПеречисления(Знач Значение)
	
	Если Не Метаданные.Перечисления.Содержит(Значение.Метаданные()) Тогда
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение НСтр("ru = 'Значение не является значением перечисления.'");
	КонецЕсли;
	
	Значение = ЗначениеВСтрокуВнутр(Значение);
	Значение = Сред(Значение, СтрНайти(Значение, ":") + 1, 32);
	Значение =
		Лев(Значение, 8)+ "-"
		+ Сред(Значение, 9, 4) + "-"
		+ Сред(Значение, 13, 4) + "-"
		+ Сред(Значение, 17, 4) + "-"
		+ Прав(Значение, 12);
	
	Возврат Значение;
	
КонецФункции

Процедура ОбработатьСтрокуДанных(СтрокаДанных, НачисленияТарифнойСтавки)
	
	Если СтрокаДанных.ВидРасчета = Неопределено Тогда
		СтрокаДанных.ID = ИдентификаторЗначенияПеречисления(СтрокаДанных.Группа);
		СтрокаДанных.ПриоритетВидаРасчета = 0;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(СтрокаДанных.ВидРасчета.Метаданные()) Тогда
		СтрокаДанных.ID = Строка(СтрокаДанных.ВидРасчета.УникальныйИдентификатор());
		СтрокаДанных.ПриоритетВидаРасчета = СтрокаДанных.ВидРасчета.РеквизитДопУпорядочивания;
	ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(СтрокаДанных.ВидРасчета.Метаданные()) Тогда
		СтрокаДанных.ID = ИдентификаторЗначенияПеречисления(СтрокаДанных.ВидРасчета);
		СтрокаДанных.ПриоритетВидаРасчета = 99;
	КонецЕсли;
	
	Если СтрокаДанных.ВидРасчета = Неопределено Тогда
		СтрокаДанных.name = Строка(СтрокаДанных.Группа);
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ВидРасчетаКраткоеНаименование) Тогда
		СтрокаДанных.name = СтрокаДанных.ВидРасчетаКраткоеНаименование;
	Иначе
		СтрокаДанных.name = Строка(СтрокаДанных.ВидРасчета);
	КонецЕсли;
	
	Если СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо") Тогда
		СтрокаДанных.section = "incomingBalance";
		Если СтрокаДанных.Сумма < 0 Тогда
			СтрокаДанных.specificSalaryComponent = "incomingEmployerDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг сотрудника на начало'");
			СтрокаДанных.ID = "2f576597-ec81-482e-a504-202004ac75c4";
		Иначе
			СтрокаДанных.specificSalaryComponent = "incomingEmployeeDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг предприятия на начало'");
			СтрокаДанных.ID = "a51bf7db-9fd5-451e-a3e4-7c4613b0a11b";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено") Тогда
		СтрокаДанных.section = "accruals";
		СтрокаДанных.accrualType = ТипНачисления(НачисленияТарифнойСтавки, СтрокаДанных.Группа, СтрокаДанных.ВидРасчета);
		СтрокаДанных.specificSalaryComponent = "";
		Если СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги") Тогда
			СтрокаДанных.specificSalaryComponent = "civilContractAcrual";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты") Тогда
			СтрокаДанных.specificSalaryComponent = "salaryDelayCompensation";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение")
			Или СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику") Тогда
			СтрокаДанных.specificSalaryComponent = "allowance";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано") Тогда
		СтрокаДанных.section = "deductions";
		Если СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму") Тогда
			СтрокаДанных.specificSalaryComponent = "loanInterestRepayment";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты") Тогда
			СтрокаДанных.specificSalaryComponent = "loanRepayment";
		ИначеЕсли СтрокаДанных.ВидРасчета = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ") Тогда
			СтрокаДанных.specificSalaryComponent = "tax";
		Иначе
			СтрокаДанных.specificSalaryComponent = "";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено") Тогда
		СтрокаДанных.section = "payouts";
		СтрокаДанных.specificSalaryComponent = "";
		Если ВедомостьНаВыплатуЗарплаты.ВидМестаВыплатыПоДокументу(СтрокаДанных.РегистраторВыплаты) = 
				Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
			СтрокаДанных.specificSalaryComponent = "bankPayment";
			СтрокаДанных.name = НСтр("ru = 'Выплата на карту'");
			СтрокаДанных.ID = "dd587525-ff57-4ebc-9ef7-5c0f9d515d08";
		ИначеЕсли ВедомостьНаВыплатуЗарплаты.ВидМестаВыплатыПоДокументу(СтрокаДанных.РегистраторВыплаты) = 
				Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			СтрокаДанных.specificSalaryComponent = "bankPayment";
			СтрокаДанных.name = НСтр("ru = 'Выплата на счет'");
			СтрокаДанных.ID = "669dbc3b-fcab-11ea-8106-4cedfb95099a";	
		Иначе
			СтрокаДанных.specificSalaryComponent = "cashPayment";
			СтрокаДанных.name = НСтр("ru = 'Выплата наличными'");
			СтрокаДанных.ID = "2a1c604e-8c6a-4b6c-a8d9-e984984f1c57";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
		СтрокаДанных.section = "outgoingBalance";
		Если СтрокаДанных.Сумма < 0 Тогда
			СтрокаДанных.specificSalaryComponent = "outgoingEmployerDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг сотрудника на конец'");
			СтрокаДанных.ID = "a110f6ae-17cf-4f8a-8545-6c86f3d45ac6";
		Иначе
			СтрокаДанных.specificSalaryComponent = "outgoingEmployeeDebt";
			СтрокаДанных.name = НСтр("ru = 'Долг предприятия на конец'");
			СтрокаДанных.ID = "375922cb-9d6a-4614-be5b-46e2cd2e1f12";
		КонецЕсли;
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно") Тогда
		СтрокаДанных.section = "additionalInfo";
		СтрокаДанных.specificSalaryComponent = "";
	ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы") Тогда
		СтрокаДанных.section = "benefits";
		СтрокаДанных.specificSalaryComponent = "";
	Иначе
		
		ИдентификаторНеизвестногоЗначения = "";
		Если Метаданные.Перечисления.Содержит(СтрокаДанных.Группа.Метаданные()) Тогда
			ИдентификаторНеизвестногоЗначения = ИдентификаторЗначенияПеречисления(СтрокаДанных.Группа);
		КонецЕсли;
		
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Данные расчетных листов содержат неизвестное значение группы начисления удержания выплаты.
											|Неизвестное значение: %1
											|Тип значения: %2
											|Идентификатор: %3'"), СтрокаДанных.Группа, ТипЗнч(СтрокаДанных.Группа), ИдентификаторНеизвестногоЗначения);
		
	КонецЕсли;
	СтрокаДанных.priority =
		(Перечисления.ГруппыНачисленияУдержанияВыплаты.Индекс(СтрокаДанных.Группа) + 1 )* 10000000
		+ ?(СтрокаДанных.ПриоритетВидаРасчета = Неопределено, 0, Число(СтрокаДанных.ПриоритетВидаРасчета));
	СтрокаДанных.amount = ?(СтрокаДанных.Сумма = Неопределено, 0, Число(СтрокаДанных.Сумма));
	СтрокаДанных.workplace = СтрокаДанных.ПредставлениеРабочегоМеста;
	
КонецПроцедуры

Функция ИдентификаторыСоставнойЧастиЗарплаты()
	
	Идентификаторы = Новый ТаблицаЗначений;
	Идентификаторы.Колонки.Добавить("section",					Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Идентификаторы.Колонки.Добавить("specificSalaryComponent",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Идентификаторы.Колонки.Добавить("accrualType",				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Идентификаторы.Колонки.Добавить("ID",						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "incomingBalance";
	НоваяСтрока.specificSalaryComponent = "incomingEmployerDebt";
	НоваяСтрока.ID = "2f576597-ec81-482e-a504-202004ac75c4";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "incomingBalance";
	НоваяСтрока.specificSalaryComponent = "incomingEmployeeDebt";
	НоваяСтрока.ID = "a51bf7db-9fd5-451e-a3e4-7c4613b0a11b";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.accrualType = "permanent";
	НоваяСтрока.ID = "192e35e6-5299-46a2-b0ab-af177d5521be";

	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.accrualType = "variable";
	НоваяСтрока.ID = "65f38e09-fb7c-4612-9326-9cd96e517333";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "civilContractAcrual";
	НоваяСтрока.ID = "28005886-0042-442a-94b5-5155eac0a3dd";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "salaryDelayCompensation";
	НоваяСтрока.ID = "057ca56e-0a6f-4708-96cb-772af62f1242";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "accruals";
	НоваяСтрока.specificSalaryComponent = "allowance";
	НоваяСтрока.ID = "91c006f8-0baa-4608-a449-4b56a95446bc";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "7787f7d9-826a-4dca-9e54-59185c73a1c6";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "loanInterestRepayment";
	НоваяСтрока.ID = "24d582cb-d3c2-4892-8187-30c32122a93c";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "loanRepayment";
	НоваяСтрока.ID = "28faac1b-0651-4953-bff9-d84ea990e333";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "deductions";
	НоваяСтрока.specificSalaryComponent = "tax";
	НоваяСтрока.ID = "52832021-8803-45a7-8212-804c51d7745e";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "payouts";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "7a8c743a-abb2-4ea5-bc3c-dd323c37530d";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "outgoingBalance";
	НоваяСтрока.specificSalaryComponent = "outgoingEmployerDebt";
	НоваяСтрока.ID = "a110f6ae-17cf-4f8a-8545-6c86f3d45ac6";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "outgoingBalance";
	НоваяСтрока.specificSalaryComponent = "outgoingEmployeeDebt";
	НоваяСтрока.ID = "375922cb-9d6a-4614-be5b-46e2cd2e1f12";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "additionalInfo";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "30efdd89-0845-42ec-b88b-fd0db9e44efc";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.section = "benefits";
	НоваяСтрока.specificSalaryComponent = "";
	НоваяСтрока.ID = "2001554d-6c89-4a3c-b905-4d31914d2b16";
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ТипНачисления(НачисленияТарифнойСтавки, Группа, Начисление)
	
	Результат = "";
	Если Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено") Тогда
		Результат = ?(НачисленияТарифнойСтавки.Найти(Начисление) = Неопределено, "variable", "permanent");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ДанныеОтветовНаЗапросыСправок2НДФЛ(ПараметрыПодключения, ЗаявкиКОбработке)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", ЗаявкиКОбработке);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаКабинетСправка2НДФЛ.Ссылка КАК Ссылка,
	|	ЗаявкаКабинетСправка2НДФЛ.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	ЗаявкаКабинетСправка2НДФЛ.Организация КАК Организация,
	|	ЗаявкаКабинетСправка2НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗаявкаКабинетСправка2НДФЛ.ОтветПоЗаявке КАК ОтветПоЗаявке
	|ПОМЕСТИТЬ ВТЗаявки
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ КАК ЗаявкаКабинетСправка2НДФЛ
	|ГДЕ
	|	ЗаявкаКабинетСправка2НДФЛ.Ссылка В(&Заявки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкиНДФЛ.СправкаНДФЛ КАК Ссылка,
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Заявки.Организация КАК Организация,
	|	Заявки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Заявки.ОтветПоЗаявке КАК ОтветПоЗаявке
	|ПОМЕСТИТЬ ВТСсылки
	|ИЗ
	|	ВТЗаявки КАК Заявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ.СправкиНДФЛ КАК СправкиНДФЛ
	|		ПО Заявки.Ссылка = СправкиНДФЛ.Ссылка
	|			И (СправкиНДФЛ.СправкаНДФЛ.Проведен)";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТДанныеСправок2НДФЛДляПубликации(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗапроса,
	|	Заявки.Организация КАК Организация,
	|	Заявки.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСсылки КАК Заявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗапроса,
	|	Заявки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Заявки.Организация КАК Организация,
	|	Заявки.Ссылка КАК Справка2НДФЛ,
	|	Заявки.ОтветПоЗаявке КАК Комментарий,
	|	ДанныеСправок2НДФЛ.ДатаСоздания КАК ДатаСоздания,
	|	ДанныеСправок2НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|	ДанныеСправок2НДФЛ.СуммаДохода КАК СуммаДохода,
	|	ДанныеСправок2НДФЛ.СуммаНалога КАК СуммаНалога
	|ИЗ
	|	ВТСсылки КАК Заявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСправок2НДФЛДляПубликации КАК ДанныеСправок2НДФЛ
	|		ПО Заявки.Ссылка = ДанныеСправок2НДФЛ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторЗапроса,
	|	ФизическоеЛицо,
	|	Организация";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатыЗапроса.ВГраница();
	
	ШаблонНаименованияФайла = НСтр("ru = '%1 Справка 2НФДЛ %2.%3'");
	РасширениеФайла = "pdf";
	ТаблицаДанных = РезультатыЗапроса[КоличествоРезультатов - 1].Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Справки2НДФЛ", Новый ОписаниеТипов("ТаблицаЗначений"));
	ВыборкаДанныеСправок = РезультатыЗапроса[КоличествоРезультатов].Выбрать();
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Отбор = Новый Структура("ИдентификаторЗапроса, Организация, ФизическоеЛицо");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокаТаблицы.Справки2НДФЛ = НоваяТаблицаИзОписания(ОписаниеПолейСправок2НДФЛ(), "ИмяПоляКонфигурации");
		ЕстьОшибки = Ложь;
		
		Пока ВыборкаДанныеСправок.НайтиСледующий(Отбор) Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДанныеСправок.Справка2НДФЛ) Тогда
				Продолжить;
			КонецЕсли;
			
			ТабДок = Документы.СправкаНДФЛ.СформироватьПечатнуюФорму2НДФЛ(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаДанныеСправок.Справка2НДФЛ),
						Новый СписокЗначений);
						
			ИдентификаторФайла = ИдентификаторПриложенногоФайла(ПараметрыПодключения, ТабДок, РасширениеФайла);
			Если ИдентификаторФайла = Неопределено Тогда
				// ошибка выгрузки файла
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = СтрокаТаблицы.Справки2НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанныеСправок);
			
			НоваяСтрока.ИдентификаторФайла = ИдентификаторФайла;
			НоваяСтрока.НаименованиеФайла  = СтрШаблон(ШаблонНаименованияФайла,
				ВыборкаДанныеСправок.ФизическоеЛицо, Формат(ВыборкаДанныеСправок.НалоговыйПериод, "ЧГ=0"), РасширениеФайла);
			НоваяСтрока.РасширениеФайла = РасширениеФайла;
			
		КонецЦикла;
		ВыборкаДанныеСправок.Сбросить();
		
		Если ЕстьОшибки Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем заявки, по которым не удалось выгрузить файлы.
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДанных.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат МассивИзТаблицы(ТаблицаДанных, ОписаниеПолейОтветовНаЗапросыСправок2НДФЛ());
	
КонецФункции

Функция ПрименяемыеВычеты(СписокФизическихЛиц, ДатаАктуальности)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерВычетовНДФЛСрезПоследних.КодВычета КАК КодВычета,
	|	РазмерВычетовНДФЛСрезПоследних.Размер КАК Размер
	|ИЗ
	|	РегистрСведений.РазмерВычетовНДФЛ.СрезПоследних(&ДатаАктуальности, ) КАК РазмерВычетовНДФЛСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	РазмерыВычетов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыВычетов.Вставить(Выборка.КодВычета, Выборка.Размер);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГода(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(ДатаАктуальности));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТРегистраторыИмущественныхВычетов
	|ИЗ
	|	Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.Проведен
	|	И ИмущественныеВычетыНДФЛ.ПрименятьВычетыС МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ИмущественныеВычетыНДФЛ.Сотрудник В(&СписокФизическихЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетовНаДетей
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо >= &ДатаНачала
	|	И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцРегистрации,
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(СтандартныеВычетыФизическихЛицНДФЛ.Период) КАК Период,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПоследнийМесяцВычетов
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.Организация КАК Организация,
	|	ИмущественныеВычетыНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	ИмущественныеВычетыНДФЛ.ПрименятьВычетыС КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ИмущественныеВычетыНДФЛ.ПрименятьВычетыС, ГОД) КАК ДатаОкончания,
	|	ИмущественныеВычетыНДФЛ.РасходыНаСтроительствоПриобретение КАК РасходыНаСтроительствоПриобретение,
	|	ИмущественныеВычетыНДФЛ.ПроцентыПоКредитам КАК ПроцентыПоКредитам,
	|	ИмущественныеВычетыНДФЛ.ПроцентыПриПерекредитовании КАК ПроцентыПриПерекредитовании,
	|	ИмущественныеВычетыНДФЛ.РасходыНаСвоеОбучение КАК РасходыНаСвоеОбучение,
	|	ИмущественныеВычетыНДФЛ.РасходыНаОбучениеДетей КАК РасходыНаОбучениеДетей,
	|	ИмущественныеВычетыНДФЛ.РасходыНаЛечение КАК РасходыНаЛечение,
	|	ИмущественныеВычетыНДФЛ.СтраховыеВзносыНаМедУслуги КАК СтраховыеВзносыНаМедУслуги,
	|	ИмущественныеВычетыНДФЛ.РасходыНаДорогостоящееЛечение КАК РасходыНаДорогостоящееЛечение,
	|	ИмущественныеВычетыНДФЛ.ВзносыНаДобровольноеСтрахованиеЖизни КАК ВзносыНаДобровольноеСтрахованиеЖизни
	|ИЗ
	|	ВТРегистраторыИмущественныхВычетов КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
	|		ПО Регистраторы.Ссылка = ИмущественныеВычетыНДФЛ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация КАК Организация,
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации КАК ДатаНачала,
	|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо КАК ДатаОкончания,
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета КАК КодВычета,
	|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей КАК КоличествоДетей,
	|	ВидыВычетовНДФЛ.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетовНаДетей КАК ПоследнийМесяцВычетовНаДетей
	|		ПО СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ПоследнийМесяцВычетовНаДетей.МесяцРегистрации
	|			И СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация = ПоследнийМесяцВычетовНаДетей.Организация
	|			И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = ПоследнийМесяцВычетовНаДетей.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СтандартныеВычетыНаДетейНДФЛ.КодВычета = ВидыВычетовНДФЛ.Ссылка
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.Код,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация КАК Организация,
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтандартныеВычетыФизическихЛицНДФЛ.Период КАК ДатаНачала,
	|	СтандартныеВычетыФизическихЛицНДФЛ.КодВычетаЛичный КАК КодВычета,
	|	ВидыВычетовНДФЛ.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследнийМесяцВычетов КАК ВТПоследнийМесяцВычетов
	|		ПО СтандартныеВычетыФизическихЛицНДФЛ.Период = ВТПоследнийМесяцВычетов.Период
	|			И СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = ВТПоследнийМесяцВычетов.ФизическоеЛицо
	|			И СтандартныеВычетыФизическихЛицНДФЛ.Регистратор.Организация = ВТПоследнийМесяцВычетов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СтандартныеВычетыФизическихЛицНДФЛ.КодВычетаЛичный = ВидыВычетовНДФЛ.Ссылка";
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10)));
	Таблица.Колонки.Добавить("ОписаниеВычета", Новый ОписаниеТипов("Строка"));
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.РасходыНаСтроительствоПриобретение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСтроительствоПриобретение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на жилье'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПоКредитам > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПоКредитам;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты по кредитам'");
		КонецЕсли;
		
		Если Выборка.ПроцентыПриПерекредитовании > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ПроцентыПриПерекредитовании;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Проценты при перекредитовании'");
		КонецЕсли;
		
		Если Выборка.РасходыНаСвоеОбучение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаСвоеОбучение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на свое обучение'");
		КонецЕсли;
		
		Если Выборка.РасходыНаОбучениеДетей > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаОбучениеДетей;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на обучение детей'");
		КонецЕсли;
		
		Если Выборка.РасходыНаЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на лечение'");
		КонецЕсли;
		
		Если Выборка.СтраховыеВзносыНаМедУслуги > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.СтраховыеВзносыНаМедУслуги;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Страховые взносы на медицинские услуги'");
		КонецЕсли;
		
		Если Выборка.РасходыНаДорогостоящееЛечение > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.РасходыНаДорогостоящееЛечение;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Расходы на дорогостоящее лечение'");
		КонецЕсли;
		
		Если Выборка.ВзносыНаДобровольноеСтрахованиеЖизни > 0 Тогда
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РазмерВычета = Выборка.ВзносыНаДобровольноеСтрахованиеЖизни;
			НоваяСтрока.ОписаниеВычета = НСтр("ru = 'Взносы на добровольное страхование жизни'");
		КонецЕсли;
	КонецЦикла;
		
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		ТекстРубли = НСтр("ru = 'р'");
		ОписаниеВычета = СтрШаблон("%1 %2. %3", РазмерВычета, ТекстРубли, Выборка.ПолноеНаименование);
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.РазмерВычета = Выборка.КоличествоДетей;
		НоваяСтрока.ОписаниеВычета = ОписаниеВычета;
	КонецЦикла;
	
	Выборка = РезультатыЗапроса[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		РазмерВычета = РазмерыВычетов[Выборка.КодВычета];
		ТекстРубли = НСтр("ru = 'р'");
		ОписаниеВычета = СтрШаблон("%1 %2. %3", РазмерВычета, ТекстРубли, Выборка.ПолноеНаименование);
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ОписаниеВычета = ОписаниеВычета;
	КонецЦикла;
	
	Результат = Таблица.Скопировать(, "Организация, ФизическоеЛицо");
	Результат.Свернуть("Организация, ФизическоеЛицо");
	Результат.Колонки.Добавить("ИнформацияОВычетах", Новый ОписаниеТипов("ТаблицаЗначений"));
	Для Каждого СтрокаТаблицы  Из Результат Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтрокаТаблицы.Организация);
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		ТаблицаИнформацияОВычетах = НоваяТаблицаИнформацияОВычетах();
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаИнформацияОВычетах.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
		СтрокаТаблицы.ИнформацияОВычетах = ТаблицаИнформацияОВычетах;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаИнформацияОВычетах()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ОписаниеВычета", Новый ОписаниеТипов("Строка"));
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция НовыйРезультатПолученияДанных()
	
	Результат = Новый Структура;
	Результат.Вставить("ВыгрузитьДанные", Новый Массив);
	Результат.Вставить("УдалитьДанные", Новый Массив);
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаИзОписания(ОписаниеПолей, СвойствоИменКолонок)
	
	Результат = Новый ТаблицаЗначений;
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ДобавитьКолонкиТаблицыПоОписанию(Результат, ОписаниеПоля["ОписаниеПолей"]);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ОписаниеПоля["ТипПоля"]);
			Результат.Колонки.Добавить(ОписаниеПоля[СвойствоИменКолонок], Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция МассивИзТаблицы(ТаблицаДанных, ОписаниеПолей) Экспорт
	
	Результат = Новый Массив;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		Результат.Добавить(СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПолей));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПолей)
	
	Результат = Новый Структура;
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			Значение = СтруктураИзСтрокиТаблицы(СтрокаТаблицыДанных, ОписаниеПоля["ОписаниеПолей"]);
		ИначеЕсли ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, ОписаниеПоля["ИмяПоляКонфигурации"]);
			Если ЗначениеЗаполнено(Значение) Тогда
				Значение = МассивИзТаблицы(Значение, ОписаниеПоля["ОписаниеПолей"]);
			КонецЕсли;
		Иначе
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, ОписаниеПоля["ИмяПоляКонфигурации"]);
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение)
				Или ТипЗнч(Значение) = Тип("Число") Тогда
			Результат.Вставить(ОписаниеПоля["ИмяПоляСервиса"], Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ВыбираемыеПоля(СоответствиеПолей)
	
	ВыбираемыеПоля = Новый Массив;
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		Поле = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(Поле) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Поле) = Тип("Соответствие") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыбираемыеПоля, ВыбираемыеПоля(Поле), Истина);
		ИначеЕсли ВыбираемыеПоля.Найти(Поле) = Неопределено Тогда
			ВыбираемыеПоля.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	Возврат ВыбираемыеПоля;
	
КонецФункции

Функция ТаблицаДанныхВМассив(ТаблицаДанных, СоответствиеПолей) Экспорт
	
	МассивЭлементов = Новый Массив;
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		МассивЭлементов.Добавить(СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, СоответствиеПолей));
	КонецЦикла;
	Возврат МассивЭлементов;
	
КонецФункции

Функция СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, СоответствиеПолей)
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда
			Значение = СтрокаТаблицыДанныхВСтруктуру(СтрокаТаблицыДанных, КлючИЗначение.Значение);
		Иначе
			Значение = ЗначениеПоИмениПоля(СтрокаТаблицыДанных, КлючИЗначение.Значение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение) Тогда
			Результат.Вставить(КлючИЗначение.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПоИмениПоля(СтрокаТаблицыДанных, Поле)
	
	Если Не ЗначениеЗаполнено(Поле) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВладелецСтроки = СтрокаТаблицыДанных.Владелец();
	Если ВладелецСтроки.Колонки.Найти(Поле) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтрокаТаблицыДанных[Поле];
	
КонецФункции

Процедура ДополнитьТаблицуКолонкамиВложения(ТаблицаДанных) Экспорт
	
	ТаблицаДанных.Колонки.Добавить("НаименованиеВложения",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ТаблицаДанных.Колонки.Добавить("РасширениеВложения",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаДанных.Колонки.Добавить("ИдентификаторВложения",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
КонецПроцедуры

#КонецОбласти

#Область Публикация

// Публикация расчетных листков из формы интеграции с сервисом.
Процедура ОпубликоватьРасчетныеЛистыЗаМесяцВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Месяц", ПараметрыПроцедуры.Месяц);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(&Месяц, ДЕНЬ) КАК Период,
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ПО ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = НачисленияУдержанияПоСотрудникам.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) = &Месяц)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|		ПО ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации") Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для выгрузки.'");
	КонецЕсли;
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "Организация");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанные.Организация КАК Организация,
	|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	|
	|УПОРЯДОЧИТЬ ПО
	|	КадровыеДанные.Организация,
	|	КадровыеДанные.ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Организация = Выборка.Организация;
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПубликацияРасчетныхЛистов());
		
		ВыгрузитьРасчетныеЛисты(ПараметрыПодключения,
			Выборка.Организация,
			ПараметрыПроцедуры.Месяц,
			СписокФизическихЛиц);
		
		Если ЗначениеЗаполнено(ПараметрыПодключения.Ошибки) Тогда
			ВызватьИсключение НСтр("ru = 'При выгрузке данных в сервис личных кабинетов произошли ошибки.'");
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОпубликоватьРасчетныеЛистыВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПубликацияРасчетныхЛистов());
	ВыгрузитьРасчетныеЛисты(ПараметрыПодключения,
		ПараметрыПроцедуры.Организация,
		ПараметрыПроцедуры.МесяцРасчетныхЛистов,
		ПараметрыПроцедуры.СписокФизическихЛиц,
		ПараметрыПроцедуры.ПовторнаяПубликация);
		
	Если ЗначениеЗаполнено(ПараметрыПодключения.Ошибки) Тогда
		ВызватьИсключение НСтр("ru = 'При выгрузке данных в сервис личных кабинетов произошли ошибки.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпубликоватьОтветственноеЛицоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СообщениеОбОшибке");
	
	БылиОшибки = ОпубликоватьОтветственноеЛицо(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ОпубликоватьОтветственноеЛицо(Ответственный) Экспорт
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал публикацию.
	УстановитьПривилегированныйРежим(Истина);

	// Регистрируем ответственного к публикации.
	МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизическоеЛицо = Ответственный;
	МенеджерЗаписи.Записать();
	
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений());
	РезультатВыгрузки = РезультатВыгрузкиФизическихЛиц(ПараметрыПодключения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ответственный));
	Если РезультатВыгрузки.БылиОшибки Тогда
		Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Ошибка.Ключ;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
			МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатВыгрузки.БылиОшибки;

КонецФункции

Процедура ОпубликоватьИзменения(ПараметрыПодключения, БылиОшибки)
	
	ПолучитьВерсиюПриложения();
	
	ОпубликоватьЗарегистрированныеИзменения(ПараметрыПодключения, БылиОшибки);
	ОпубликоватьЗарегистрированныеИзмененияЗаявок(ПараметрыПодключения, БылиОшибки);
	ОпубликоватьПрочиеИзменения(ПараметрыПодключения, БылиОшибки);
	
КонецПроцедуры

Процедура ОпубликоватьЗарегистрированныеИзменения(ПараметрыПодключения, БылиОшибки)
	
	ОтложенноеОбновлениеСписковПубликуемыхОбъектов();
	
	// Таблица с данными зарегистрированными к отправке.
	// Колонки таблицы: ПредметПубликации, ВерсияДанных, Публикуется, ТипДанных
	ТаблицаИзменений = ИзмененияДляПубликации();
	Если ТаблицаИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменений.Индексы.Добавить("ТипДанных,Публикуется");
	Отбор = Новый Структура("ТипДанных,Публикуется");
	Отбор.Публикуется = Истина;
	ТипыДанных = ТипыПубликуемыхДанных();
	
	Результат = НовыйРезультатВыгрузки();
	
	Отбор.ТипДанных = ТипыДанных["ФизическиеЛица"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиФизическихЛиц(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Организации"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиОрганизаций(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["СтруктураПредприятия"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиСтруктурыПредприятия(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Должности"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиДолжностей(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["ШтатноеРасписание"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиШтатногоРасписания(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	Отбор.ТипДанных = ТипыДанных["Сотрудники"];
	ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
	Если ТаблицаДляВыгрузки.Количество()>0 Тогда
		РезультатВыгрузки = РезультатВыгрузкиСотрудников(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ПредметПубликации"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
		Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
	КонецЕсли;
	
	ОтменитьРегистрациюИзмененийПоРезультатамПубликации(ТаблицаИзменений, Результат);
	
	БылиОшибки = Результат.БылиОшибки;
	
КонецПроцедуры

Процедура ОпубликоватьПрочиеИзменения(ПараметрыПодключения, БылиОшибки)
	
	Отбор = Новый Структура("Публикуется");
	Отбор.Публикуется = Истина;
	
	// Сведения о вычетах НДФЛ.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вычеты.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК Вычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ПО Вычеты.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО Вычеты.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|ГДЕ
	|	ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Результат = НовыйРезультатВыгрузки();
		
		ТаблицаИзменений = РезультатЗапроса.Выгрузить();
		ТаблицаИзменений.Индексы.Добавить("Публикуется");
		ТаблицаДляВыгрузки = ТаблицаИзменений.Скопировать(Отбор);
		Если ТаблицаДляВыгрузки.Количество()>0 Тогда
			РезультатВыгрузки = РезультатВыгрузкиПрименяемыхВычетов(ПараметрыПодключения, ТаблицаДляВыгрузки.ВыгрузитьКолонку("ФизическоеЛицо"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, РезультатВыгрузки.Выгружено);
			// Физические лица по которым заказали публикацию вычетов, но они не имеют вычетов.
			ФизическиеЛицаБезВычетов = РезультатВыгрузки.ФизическиеЛицаБезВычетов;
			// Включим этих физических лиц в список выгруженных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Выгружено, ФизическиеЛицаБезВычетов);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат.НеВыгружено, РезультатВыгрузки.НеВыгружено, Истина);
			Результат.БылиОшибки = ?(РезультатВыгрузки.БылиОшибки, Истина, Результат.БылиОшибки);
		КонецЕсли;
		
		Если ТаблицаИзменений.Количество() > 0 Тогда
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
				Блокировка.Заблокировать();
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
				Запрос.УстановитьПараметр("Выгружено", Результат.Выгружено);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ТаблицаИзменений.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
				|	ТаблицаИзменений.Публикуется КАК Публикуется
				|ПОМЕСТИТЬ ВТОтменитьИзменения
				|ИЗ
				|	&ТаблицаИзменений КАК ТаблицаИзменений
				|ГДЕ
				|	(ТаблицаИзменений.ФизическоеЛицо В (&Выгружено)
				|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОтменитьИзменения.ФизическоеЛицо КАК ФизическоеЛицо
				|ИЗ
				|	ВТОтменитьИзменения КАК ОтменитьИзменения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛица
				|		ПО ОтменитьИзменения.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
				|			И (ОтменитьИзменения.ВерсияДанных = ФизическиеЛица.ВерсияДанных
				|				ИЛИ НЕ ОтменитьИзменения.Публикуется)";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ФизическоеЛицо = Выборка.ФизическоеЛицо;
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				
				Если Результат.БылиОшибки Тогда
					Для Каждого Ошибка Из Результат.НеВыгружено Цикл
						МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ФизическоеЛицо = Ошибка.Ключ;
						МенеджерЗаписи.Прочитать();
						МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
						МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
						МенеджерЗаписи.Записать();
					КонецЦикла;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
				Результат.БылиОшибки = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		БылиОшибки = ?(Результат.БылиОшибки, Истина, БылиОшибки);
		
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ОпубликоватьПрочиеИзменения(ПараметрыПодключения, БылиОшибки);
	
КонецПроцедуры

Функция ИзмененияДляПубликации()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации КАК ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТВсеИзменения
	|ИЗ
	|	РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ВсеИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации КАК ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется
	|ПОМЕСТИТЬ ВТИзмененияПрочихОбъектов
	|ИЗ
	|	ВТВсеИзменения КАК ВсеИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО ВсеИзменения.ПредметПубликации = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	НЕ ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.ФизическиеЛица";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТВсеИзменения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.ПредметПубликации КАК ПредметПубликации,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ПубликуемыеОбъекты.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Публикуется,
	|	ТИПЗНАЧЕНИЯ(Изменения.ПредметПубликации) КАК ТипДанных
	|ИЗ
	|	ВТВсеИзменения КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО Изменения.ПредметПубликации = ПубликуемыеОбъекты.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|		ПО Изменения.ПредметПубликации = ОшибкиЗаполнения.ОбъектПубликации
	|ГДЕ
	|	Изменения.ПредметПубликации ССЫЛКА Справочник.ФизическиеЛица
	|	И ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных,
	|	ВсеИзменения.Публикуется,
	|	ТИПЗНАЧЕНИЯ(ВсеИзменения.ПредметПубликации)
	|ИЗ
	|	ВТИзмененияПрочихОбъектов КАК ВсеИзменения
	|ГДЕ
	|	НЕ ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеИзменения.ПредметПубликации,
	|	ВсеИзменения.ВерсияДанных,
	|	ВсеИзменения.Публикуется,
	|	ТИПЗНАЧЕНИЯ(ВсеИзменения.ПредметПубликации)
	|ИЗ
	|	ВТИзмененияПрочихОбъектов КАК ВсеИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|		ПО ВсеИзменения.ПредметПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ВсеИзменения.ПредметПубликации ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ОтменитьРегистрациюИзмененийПоРезультатамПубликации(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПредметПубликации КАК ПредметПубликации,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных,
		|	ТаблицаИзменений.Публикуется КАК Публикуется
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	(ТаблицаИзменений.ПредметПубликации В (&Выгружено)
		|			ИЛИ НЕ ТаблицаИзменений.Публикуется)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПредметПубликации КАК ПредметПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервисаКабинетСотрудника
		|		ПО ОтменитьИзменения.ПредметПубликации = ИзмененияДляСервисаКабинетСотрудника.ПредметПубликации
		|			И (ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервисаКабинетСотрудника.ВерсияДанных
		|				ИЛИ НЕ ОтменитьИзменения.Публикуется)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Выборка.ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Ошибка.Ключ;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецФункции

Процедура ОпубликоватьУдалениеДанных(ПараметрыПодключения, БылиОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДляУдаления.ОбъектДляУдаления КАК ОбъектДляУдаления,
	|	ТИПЗНАЧЕНИЯ(ОбъектыДляУдаления.ОбъектДляУдаления) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК ОбъектыДляУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДанных = ТипыПубликуемыхДанных();
	РесурсСервисаПоТипуДанных = Новый Соответствие;
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["ФизическиеЛица"], 		РесурсФизическиеЛица());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Организации"], 			РесурсОрганизации());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Должности"], 			РесурсДолжности());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["Сотрудники"], 			РесурсСотрудники());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["ШтатноеРасписание"], 	РесурсШтатноеРасписание());
	РесурсСервисаПоТипуДанных.Вставить(ТипыДанных["СтруктураПредприятия"], 	РесурсСтруктураПредприятия());
	
	УдаленныеОбъекты = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РесурсСервиса = РесурсСервисаПоТипуДанных[Выборка.ТипДанных];
		Если РесурсСервиса <> Неопределено Тогда
			Если РезультатУдаленияОбъектаИзСервиса(ПараметрыПодключения, РесурсСервиса, Выборка.ОбъектДляУдаления) Тогда
				УдаленныеОбъекты.Добавить(Выборка.ОбъектДляУдаления);
			Иначе
				БылиОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("УдаленныеОбъекты", УдаленныеОбъекты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыДляУдаления.ОбъектДляУдаления КАК ОбъектДляУдаления
	|ИЗ
	|	РегистрСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника КАК ОбъектыДляУдаления
	|ГДЕ
	|	НЕ ОбъектыДляУдаления.ОбъектДляУдаления В (&УдаленныеОбъекты)";
	НаборЗаписей = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ТипыПубликуемыхДанных()

	ОписаниеТиповДанных = Новый Соответствие;

	ОписаниеТиповДанных.Вставить("ФизическиеЛица", 			Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТиповДанных.Вставить("Организации", 			Тип("СправочникСсылка.Организации"));
	ОписаниеТиповДанных.Вставить("Должности", 				Тип("СправочникСсылка.Должности"));
	ОписаниеТиповДанных.Вставить("Сотрудники", 				Тип("СправочникСсылка.Сотрудники"));
	ОписаниеТиповДанных.Вставить("ШтатноеРасписание", 	 	КабинетСотрудникаВнутренний.ТипШтатноеРасписание());
	ОписаниеТиповДанных.Вставить("СтруктураПредприятия", 	КабинетСотрудникаВнутренний.ТипСтруктураПредприятия());
	
	Возврат ОписаниеТиповДанных;
	
КонецФункции

Функция НовыйРезультатВыгрузки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выгружено", Новый Массив);
	Результат.Вставить("НеВыгружено", Новый Соответствие);
	Результат.Вставить("БылиОшибки", Ложь);
	Возврат Результат;
	
КонецФункции

Функция СформироватьJSON(Значение)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ИмяФайла = "";
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудника"));
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;

	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Результат = ПолФизическогоЛица(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыЗанятости") Тогда
		Результат = ВидЗанятостиСотрудника(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
		Результат = ВидДокументаФизическогоЛица(Значение);
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Если Не Значение.Пустая() Тогда
			Результат = Строка(Значение.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, Знач РесурсСервиса, Знач Данные, ПолеКлюча, РезультатВыгрузки = Неопределено) Экспорт

	Если РезультатВыгрузки = Неопределено Тогда
		РезультатВыгрузки = НовыйРезультатВыгрузки();
	КонецЕсли;
	
	Если Не ТипЗнч(Данные) = Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru = 'Произошла ошибка при выгрузки коллекции в сервис. Ожидается массив.'");
	КонецЕсли;
	
	РазмерПакета = 100;
	КоличествоЭлементов = Данные.Количество();
	
	Если КоличествоЭлементов > РазмерПакета Тогда
		ДанныеПакета = Новый Массив;
		Пока РазмерПакета > 0 Цикл
			ДанныеПакета.Добавить(Данные[0]);
			Данные.Удалить(0);
			РазмерПакета = РазмерПакета - 1;
		КонецЦикла;
		РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, ПолеКлюча, РезультатВыгрузки);
	Иначе
		ДанныеПакета = Данные;
	КонецЕсли;
	
	СтрокаТела = СформироватьJSON(ДанныеПакета);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT", СтрокаТела);
	
	Если Ответ = Неопределено Тогда
		РезультатВыгрузки.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 204 Тогда
		Для Каждого СтрокаДанных Из ДанныеПакета Цикл
			РезультатВыгрузки.Выгружено.Добавить(СтрокаДанных[ПолеКлюча]);
		КонецЦикла;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		
		РезультатВыгрузки.БылиОшибки = Истина;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Результат = ОбъектОтвета["result"];
		Если Результат <> Неопределено Тогда
			Для Каждого ЭлементРезультат Из Результат Цикл
				КлючОбъекта = ДанныеПакета[Число(ЭлементРезультат["position"]) - 1][ПолеКлюча];
				РезультатВыгрузки.Выгружено.Добавить(КлючОбъекта);
			КонецЦикла;
		КонецЕсли;
		
		КоличествоЭлементов = ДанныеПакета.Количество();
		Ошибки = ОбъектОтвета["errors"];
		Если Не Ошибки = Неопределено Тогда
			Для Каждого ЭлементОшибки Из Ошибки Цикл
				НомерПозиции = Число(ЭлементОшибки["position"]);
				Если НомерПозиции <= КоличествоЭлементов Тогда
					КлючОбъекта = ДанныеПакета[НомерПозиции - 1][ПолеКлюча];
					РезультатВыгрузки.НеВыгружено.Вставить(КлючОбъекта, ОписаниеОшибкиВыгрузки(ЭлементОшибки));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ОписаниеОшибкиВыгрузки(ОбъектОшибка)
	
	Попытка
		Результат = НСтр("ru = 'Тип ошибки: %1
						|Код ошибки: %2
						|Описание: %3
						|Подробно:'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат, ОбъектОшибка["error"]["type"], ОбъектОшибка["error"]["code"], ОбъектОшибка["error"]["description"]);
	
		Для Каждого КлючЗначение Из ОбъектОшибка["error"]["value"] Цикл
			Результат = Результат + Символы.ПС + КлючЗначение.Ключ + ": " + КлючЗначение.Значение;
		КонецЦикла;
	Исключение
		Результат = НСтр("ru = 'Неизвестное описание ошибки.'");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатУдаленияОбъектаИзСервиса(ПараметрыПодключения, Знач РесурсСервиса, Ссылка)
	
	РесурсСервиса = СтрШаблон("%1/%2", РесурсСервиса , Строка(Ссылка.УникальныйИдентификатор()));
	
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "DELETE");
	
	Если Ответ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Ответ.КодСостояния = 204 Или Ответ.КодСостояния = 404 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВыгрузитьВложенияВСервис(ПараметрыПодключения, ТаблицаДанных, Вложения, ИмяПоляВладельца, НазваниеВложения, Расширение)
	
	РесурсСервиса = ЗаполнитьПараметрыШаблонаURL(ПараметрыПодключения.ШаблоныРесурсов.Получить("Файлы"), Новый Структура("ID", ""));
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		ХранилищеВложения = Вложения.Получить(СтрокаТаблицы[ИмяПоляВладельца]);
		Если Не ЗначениеЗаполнено(ХранилищеВложения) Тогда
			Продолжить;
		КонецЕсли;
		Вложение = ХранилищеВложения.Получить();
		Если ТипЗнч(Вложение) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		Картинка = Новый Картинка(Вложение);
		Картинка.Записать(ИмяВременногоФайла);
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "POST",, ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайла);
		Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка при публикации файла: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(СтрокаТаблицы.ФизическоеЛицо));
			ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР,
				УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		СтрокаТаблицы.ИдентификаторВложения = ОбъектОтвета.Получить("fileID");
		СтрокаТаблицы.РасширениеВложения = Расширение;
		СтрокаТаблицы.НаименованиеВложения = Строка(СтрокаТаблицы[ИмяПоляВладельца]) + " " + НазваниеВложения + "." + Расширение;
	КонецЦикла;
	
КонецПроцедуры

Функция СтатусЗапросаУстановлен(ПараметрыПодключения, Знач РесурсСервиса, ИдентификаторЗапроса, Статус)
	
	СтатусУстановлен = Истина;
	РесурсСервиса = РесурсСервиса + "/" + ИдентификаторЗапроса + "/status?status=" + Статус;
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT");
	Если Ответ = Неопределено Или Ответ.КодСостояния >= 300 Тогда
		СтатусУстановлен = Ложь;
	КонецЕсли;
	Возврат СтатусУстановлен;
	
КонецФункции

#Область ПроцедурыВыгрузкиОбъектовПоТипам

Функция РезультатВыгрузкиФизическихЛиц(ПараметрыПодключения, Список)
	
	Результат = НовыйРезультатВыгрузки();
	РесурсСервиса = РесурсФизическиеЛица();
	Данные = ДанныеФизическихЛиц(ПараметрыПодключения, Список);
	
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные.ВыгрузитьДанные, "ID");
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиОрганизаций(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсОрганизации();
	Данные = ДанныеОрганизаций(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСтруктурыПредприятия(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсСтруктураПредприятия();
	Данные = ДанныеСтруктурыПредприятия(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
		
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиДолжностей(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсДолжности();
	Данные = ДанныеДолжностей(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиШтатногоРасписания(ПараметрыПодключения, Список)

	РесурсСервиса = РесурсШтатноеРасписание();
	Данные = ДанныеШтатногоРасписания(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные, "ID");
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыгрузкиСотрудников(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсСотрудники();
	Данные = ДанныеСотрудников(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, Данные.ВыгрузитьДанные, "ID");
	
	Возврат Результат;
	
КонецФункции



Функция РезультатВыгрузкиПрименяемыхВычетов(ПараметрыПодключения, Список)
	
	РесурсСервиса = РесурсПрименяемыеВычеты();
	СведенияОВычетах = ДанныеОВычетах(ПараметрыПодключения, Список);
	Результат = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения, РесурсСервиса, СведенияОВычетах.Данные, "personID");
	Результат.Вставить("ФизическиеЛицаБезВычетов", СведенияОВычетах.ФизическиеЛицаБезВычетов);
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьРасчетныеЛисты(ПараметрыПодключения, Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц, ПовторнаяПубликация = Ложь)
	
	МесяцРасчетныхЛистов = НачалоМесяца(МесяцРасчетныхЛистов);
	Данные = ДанныеРасчетныхЛистов(Организация, МесяцРасчетныхЛистов, СписокФизическихЛиц, ПовторнаяПубликация);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
		ПараметрыПодключения,
		РесурсСоставныеЧастиЗарплаты(),
		Данные.СоставныеЧастиЗарплаты,
		"ID");
	
	Если РезультатВыгрузки.БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'При выгрузке составных частей зарплаты возникли ошибки. Подробности в журнале регистрации.'");
	КонецЕсли;

	ШаблонНаименованияФайла = НСтр("ru = '%1 Расчетный лист %2.%3'");
	ПериодСтрокой = Формат(МесяцРасчетныхЛистов, "ДФ='MMMM yyyy'");
	РасширениеФайла = "pdf";
	РасчетныеЛисткиКПубликации = Новый Массив;
	// Данные.ИнформацияОЗарплате - массив структур
	Для Каждого СтруктураИнформацияОЗарплате Из Данные.ИнформацияОЗарплате Цикл
		РасчетныйЛистДокумент = Данные.РасчетныеЛистыДокументы.Получить(СтруктураИнформацияОЗарплате.personID);
		Если РасчетныйЛистДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторФайла = ИдентификаторПриложенногоФайла(ПараметрыПодключения, РасчетныйЛистДокумент, РасширениеФайла);
		Если ИдентификаторФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПриложенныйФайл = Новый Структура;
		СтруктураПриложенныйФайл.Вставить("fileID", ИдентификаторФайла);
		СтруктураПриложенныйФайл.Вставить("name", СтрШаблон(ШаблонНаименованияФайла, СтруктураИнформацияОЗарплате.personID, ПериодСтрокой, РасширениеФайла));
		СтруктураПриложенныйФайл.Вставить("extension", РасширениеФайла);
		СтруктураИнформацияОЗарплате.Вставить("attachment", СтруктураПриложенныйФайл);
		РасчетныеЛисткиКПубликации.Добавить(СтруктураИнформацияОЗарплате);
	КонецЦикла;
	
	РезультатВыгрузки = РезультатВыгрузкиКоллекцииВСервис(
		ПараметрыПодключения,
		РесурсРасчетныеЛисты(),
		РасчетныеЛисткиКПубликации,
		"personID");
		
	Если РезультатВыгрузки.БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'При выгрузке расчетных листков возникли ошибки. Подробности в журнале регистрации.'");
	КонецЕсли;
		
	Успешно = Новый Массив;
		
	Для Каждого ЭлементДанных Из РасчетныеЛисткиКПубликации Цикл
		ЗаписатьРезультатВыгрузкиРасчетныхЛистов(
			Организация,
			ЭлементДанных.personID,
			МесяцРасчетныхЛистов,
			Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.Опубликован);
		Успешно.Добавить(ЭлементДанных.personID);
	КонецЦикла;
	
	Для Каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		Если Не Успешно.Найти(ФизическоеЛицо) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРезультатВыгрузкиРасчетныхЛистов(
			Организация,
			ФизическоеЛицо,
			МесяцРасчетныхЛистов,
			Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.ОшибкаОбработки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьРезультатВыгрузкиРасчетныхЛистов(Организация, ФизическоеЛицо, МесяцРасчетныхЛистов, СостояниеПубликации)
	
	МенеджерЗаписи = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицо;
	МенеджерЗаписи.Месяц = МесяцРасчетныхЛистов;
	МенеджерЗаписи.СостояниеПубликации = СостояниеПубликации;
	МенеджерЗаписи.Ответственный = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.ДатаПубликации = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

Процедура ОпубликоватьЗарегистрированныеИзмененияЗаявок(ПараметрыПодключения, БылиОшибки)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации КАК ПредметПубликации,
	|	ИзмененияДляСервиса.ВерсияДанных КАК ВерсияДанных,
	|	ТИПЗНАЧЕНИЯ(ИзмененияДляСервиса.ПредметПубликации) КАК ТипДанных
	|ИЗ
	|	РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипДанных";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменений = Результат.Выгрузить();
	ТаблицаИзменений.Индексы.Добавить("ТипДанных");
	Отбор = Новый Структура("ТипДанных");
	ТипыЗаявокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипДанных", Истина);
	
	Результат = НовыйРезультатВыгрузки();
	ИдентификаторыВыгруженныхЗаявок = Новый Массив;
	ИдентификаторыЗаявок = Новый Соответствие;
	
	Для каждого ТипЗаявкиСотрудника Из ТипыЗаявокСотрудников Цикл
		
		Отбор.ТипДанных = ТипЗаявкиСотрудника;
		ТаблицаЗаявок = ТаблицаИзменений.Скопировать(Отбор);
		
		ПубликуемыеЗаявки = ТаблицаЗаявок.ВыгрузитьКолонку("ПредметПубликации");
		Запрос.УстановитьПараметр("ПубликуемыеЗаявки", ПубликуемыеЗаявки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника,
		|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
		|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки
		|ИЗ
		|	#Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&ПубликуемыеЗаявки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипЗаявкиКабинетСотрудника";
		
		ИмяТаблицы = Метаданные.НайтиПоТипу(ТипЗаявкиСотрудника).ПолноеИмя();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ТипЗаявкиКабинетСотрудника") Цикл
			
			ТипЗаявки = Выборка.ТипЗаявкиКабинетСотрудника;
			ТипыЗаявокКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника;
			ЗаявлениеНаОтпуск = (ТипЗаявки = ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск);
			
			ДанныеДляВыгрузки = Новый ТаблицаЗначений;
			ДанныеДляВыгрузки.Колонки.Добавить("requestID");
			
			Если ЗаявлениеНаОтпуск Тогда 
				ДанныеДляВыгрузкиУчебныйОтпуск = Новый ТаблицаЗначений;
				ДанныеДляВыгрузкиУчебныйОтпуск.Колонки.Добавить("requestID");
			КонецЕсли;
			
			СостоянияЗаявок = Новый Соответствие;
			ЗаявкиКОбработке = Новый Массив;
			Пока Выборка.Следующий() Цикл
				ЗаявкиКОбработке.Добавить(Выборка.Ссылка);
				Если ЗаявлениеНаОтпуск И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "УчебныйОтпуск") Тогда
					НоваяСтрока = ДанныеДляВыгрузкиУчебныйОтпуск.Добавить();
				Иначе
					НоваяСтрока = ДанныеДляВыгрузки.Добавить();
				КонецЕсли;
				НоваяСтрока.requestID = Выборка.ИдентификаторЗаявки;
				СостоянияЗаявок.Вставить(Выборка.ИдентификаторЗаявки, Выборка.СостояниеЗаявки);
				ИдентификаторыЗаявок.Вставить(Выборка.ИдентификаторЗаявки, Выборка.Ссылка);
			КонецЦикла;
			
			ВыгружатьФайлы = Истина;
			Справка2НДФЛ = Ложь;
			
			Если ТипЗаявки = ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных Тогда
				ВыгружатьФайлы = Ложь;
				РесурсСервиса = РесурсЗапросыИзмененияЛичныхДанных();
				РесурсСтатусовСервиса = РесурсСервиса;
			ИначеЕсли ТипЗаявки = ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
				Справка2НДФЛ = Истина;
				ДанныеДляВыгрузки = ДанныеОтветовНаЗапросыСправок2НДФЛ(ПараметрыПодключения, ЗаявкиКОбработке);
				ДанныеДляВыгрузкиСФайлом = Новый Массив;
				Если ДанныеДляВыгрузки.Количество() > 0 Тогда
					Для каждого ЭлементДанных Из ДанныеДляВыгрузки Цикл
						Если ЭлементДанных.Свойство("forms2NDFL") Тогда
							ДанныеДляВыгрузкиСФайлом.Добавить(ЭлементДанных);	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				РесурсСервиса = РесурсОтветыНаЗапросыСправок2НДФЛ();
				РесурсСтатусовСервиса = РесурсЗапросыСправок2НДФЛ();
			ИначеЕсли ТипЗаявки = ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
				ДанныеДляВыгрузки = КабинетСотрудникаВнутренний.ДанныеСправокСРаботы(ПараметрыПодключения, ЗаявкиКОбработке);
				РесурсСервиса = РесурсСправкиСМестаРаботы();
				РесурсСтатусовСервиса = РесурсЗапросыСправокСРаботы();
			ИначеЕсли ТипЗаявки = ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск Тогда
				ВыгружатьФайлы = Ложь;
				РесурсСтатусовСервиса = РесурсЗаявленияНаОтпуск();
				РесурсСтатусовСервисаОтсутствие = РесурсОтсутствия();
			ИначеЕсли ТипЗаявки = ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
				ВыгружатьФайлы = Ложь;
				РесурсСтатусовСервиса = РесурсОтсутствия();
			ИначеЕсли ТипЗаявки = ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
				ДанныеДляВыгрузки = КабинетСотрудникаВнутренний.ДанныеСправокОбОстаткеОтпуска(ПараметрыПодключения, ЗаявкиКОбработке);
				РесурсСервиса = РесурсСправкиОбОстаткеОтпуска();
				РесурсСтатусовСервиса = РесурсЗапросыСправокОбОстаткеОтпуска();
			ИначеЕсли ТипЗаявки = ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты Тогда
				ВыгружатьФайлы = Ложь;
				РесурсСтатусовСервиса = РесурсЗаявленияНаНалоговыеВычеты();
			Иначе
				Продолжить;
			КонецЕсли;
			ИдентификаторыЗаявокСФайлами = Новый Соответствие;
			Если ВыгружатьФайлы Тогда
				РезультатВыгрузкиЗаявок = РезультатВыгрузкиКоллекцииВСервис(ПараметрыПодключения,
																			РесурсСервиса,
																			?(Справка2НДФЛ, ДанныеДляВыгрузкиСФайлом,
																							ДанныеДляВыгрузки),																																	
																			"requestID");
				Для каждого ЭлементМассива Из РезультатВыгрузкиЗаявок.Выгружено Цикл
					ИдентификаторыЗаявокСФайлами.Вставить(ЭлементМассива, Истина);
				КонецЦикла;
			КонецЕсли;
			
			Если Справка2НДФЛ Тогда
				Для Каждого ЭлементДанных Из ДанныеДляВыгрузкиСФайлом Цикл
					Если ИдентификаторыЗаявокСФайлами[ЭлементДанных.requestID] = Неопределено Тогда
						Результат.БылиОшибки = Истина;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗаявлениеНаОтпуск Тогда
				Для Каждого ЭлементДанных Из ДанныеДляВыгрузкиУчебныйОтпуск Цикл
					Если ВыгружатьФайлы И ИдентификаторыЗаявокСФайлами[ЭлементДанных.requestID] = Неопределено Тогда
						Результат.БылиОшибки = Истина;
						Продолжить;
					КонецЕсли;
					СтатусВыполнения = СостоянияЗаявок.Получить(ЭлементДанных.requestID);
					Если СтатусВыполнения = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
						СтатусВыполнения = "rejected";
					Иначе
						СтатусВыполнения = "completed";
					КонецЕсли;
					Если СтатусЗапросаУстановлен(ПараметрыПодключения, РесурсСтатусовСервисаОтсутствие, ЭлементДанных.requestID, СтатусВыполнения) Тогда
						ИдентификаторыВыгруженныхЗаявок.Добавить(ЭлементДанных.requestID);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			Для Каждого ЭлементДанных Из ДанныеДляВыгрузки Цикл
				Если ВыгружатьФайлы И ИдентификаторыЗаявокСФайлами[ЭлементДанных.requestID] = Неопределено И НЕ Справка2НДФЛ Тогда
					Результат.БылиОшибки = Истина;
					Продолжить;
				КонецЕсли;
				СтатусВыполнения = СостоянияЗаявок.Получить(ЭлементДанных.requestID);
				Если СтатусВыполнения = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
					СтатусВыполнения = "rejected";
				Иначе
					СтатусВыполнения = "completed";
				КонецЕсли;
				Если СтатусЗапросаУстановлен(ПараметрыПодключения, РесурсСтатусовСервиса, ЭлементДанных.requestID, СтатусВыполнения) Тогда
					ИдентификаторыВыгруженныхЗаявок.Добавить(ЭлементДанных.requestID);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Идентификатор Из ИдентификаторыВыгруженныхЗаявок Цикл
		ОпубликованнаяЗаявка = ИдентификаторыЗаявок[Идентификатор];
		Если ОпубликованнаяЗаявка <> Неопределено Тогда
			Результат.Выгружено.Добавить(ОпубликованнаяЗаявка);
		КонецЕсли;
	КонецЦикла;
	
	ОтменитьРегистрациюИзмененийЗаявокПоРезультатамПубликации(ТаблицаИзменений, Результат);
	
	БылиОшибки = ?(Результат.БылиОшибки, Истина, БылиОшибки);
	
КонецПроцедуры

Функция ОтменитьРегистрациюИзмененийЗаявокПоРезультатамПубликации(ТаблицаИзменений, РезультатВыгрузки)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаИзменений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПредметПубликации", "ПредметПубликации");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
		Запрос.УстановитьПараметр("Выгружено", РезультатВыгрузки.Выгружено);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзменений.ПредметПубликации КАК ПредметПубликации,
		|	ТаблицаИзменений.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьИзменения
		|ИЗ
		|	&ТаблицаИзменений КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.ПредметПубликации В(&Выгружено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.ПредметПубликации КАК ПредметПубликации
		|ИЗ
		|	ВТОтменитьИзменения КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
		|		ПО ОтменитьИзменения.ПредметПубликации = ИзмененияДляСервиса.ПредметПубликации
		|			И ОтменитьИзменения.ВерсияДанных = ИзмененияДляСервиса.ВерсияДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПредметПубликации = Выборка.ПредметПубликации;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Если РезультатВыгрузки.БылиОшибки Тогда
			Для Каждого Ошибка Из РезультатВыгрузки.НеВыгружено Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации = Ошибка.Ключ;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.БылаОшибкаПриПубликации = Истина;
				МенеджерЗаписи.ОписаниеОшибки = Ошибка.Значение;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВыгрузкиИзменений("", ОписаниеОшибки());
		РезультатВыгрузки.БылиОшибки = Истина;
	КонецПопытки;

КонецФункции

// Публикация расчетных листков после подключения к сервису.
Процедура ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков)

	Если ПериодыРасчетныхЛистков.Количество() = 0 Тогда
		Возврат
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиКПубликации
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|			ПО Сотрудники.ФизическоеЛицо = ОшибкиЗаполнения.ОбъектПубликации
	|		ПО ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации ССЫЛКА Справочник.Сотрудники
	|	И ОшибкиЗаполнения.ЕстьОшибки ЕСТЬ NULL";
	Запрос.Выполнить();
	Если Не ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиКПубликации") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого МесяцПубликации Из ПериодыРасчетныхЛистков Цикл
		
		ФизическиеЛицаПоОрганизациям = ФизическиеЛицаОрганизаций(МесяцПубликации, Запрос.МенеджерВременныхТаблиц);
		ПериодПубликации = НачалоМесяца(МесяцПубликации);
		
		Для Каждого ФизическиеЛицаОрганизации Из ФизическиеЛицаПоОрганизациям Цикл
			
			Организация = ФизическиеЛицаОрганизации.Ключ;
			СписокФизическихЛиц = ФизическиеЛицаОрганизации.Значение;
			
			ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПубликацияРасчетныхЛистов());
			
			ВыгрузитьРасчетныеЛисты(ПараметрыПодключения,
				Организация,
				ПериодПубликации,
				СписокФизическихЛиц);
			
			Если ЗначениеЗаполнено(ПараметрыПодключения.Ошибки) Тогда
				ВызватьИсключение НСтр("ru = 'При выгрузке данных в сервис личных кабинетов произошли ошибки.'");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Загрузка

#Область ПроцедурыЗагрузкиИОбработкиИзменений

Процедура ЗагрузитьИзмененияИзСервиса(ПараметрыПодключения, БылиОшибки)
	
	Лимит = 100;
	Результат = НовыйРезультатЗагрузкиЗаявок();
	
	ПервыйЗапрос = Истина;
	Пока ПервыйЗапрос Или Не Результат.БылиОшибки И Результат.КоличествоЗаявок = Лимит Цикл
		
		ПервыйЗапрос = Ложь;
		Результат.КоличествоЗаявок = 0;
		
		ВерсияИзменений = Константы.ВерсияИзмененийКабинетСотрудника.Получить();
		Результат.КоличествоЗаявок = 0;
		Ответ = ЗаявкиПользователейСервиса(ПараметрыПодключения, ВерсияИзменений, Лимит);
		Если Ответ.БылиОшибки Тогда
			Результат.БылиОшибки = Истина;
		ИначеЕсли ЗначениеЗаполнено(Ответ.Заявки) Тогда
			Результат = ОбработатьЗапросыЗаявок(ПараметрыПодключения, Ответ.Заявки);
		КонецЕсли;
		
	КонецЦикла;
	
	БылиОшибки = БылиОшибки Или Результат.БылиОшибки;
	
КонецПроцедуры

Функция ЗаявкиПользователейСервиса(ПараметрыПодключения, ВерсияИзменений, Лимит)
	
	Результат = Новый Структура("БылиОшибки,Заявки", Ложь);
	
	ПараметрыULR = Новый Структура;
	ПараметрыULR.Вставить("version", Формат(ВерсияИзменений + 1, "ЧН=0; ЧГ=0"));
	ПараметрыULR.Вставить("limit", Лимит);
	ШаблонРесурса = ПараметрыПодключения.ШаблоныРесурсов.Получить("ВсеИзменения");
	РесурсСервиса = ЗаполнитьПараметрыШаблонаURL(ШаблонРесурса,ПараметрыULR);
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	Если Ответ = Неопределено Тогда
		Результат.БылиОшибки = Истина;
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ИменаСвойствСервисаСоЗначениямиДата = ИменаСвойствСервисаСоЗначениямиДата();
		Результат.Заявки = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСервисаСоЗначениямиДата, ФорматДатыJSON.ISO, "ВосстановлениеJSON", ОбщегоНазначения.ОбщийМодуль("КабинетСотрудника"),, ИменаСвойствСервисаСоЗначениямиДата);	
	ИначеЕсли Ответ.КодСостояния = 204 Тогда
		// нет изменений
	Иначе
		ПараметрыПодключения.Ошибки.Добавить(Ответ.ПолучитьТелоКакСтроку());
		Результат.БылиОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбработатьЗапросыЗаявок(ПараметрыПодключения, Заявки)

	Результат = НовыйРезультатЗагрузкиЗаявок();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ТипЗаявки", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаявокКабинетСотрудника"));
	ТаблицаДанных.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаДанных.Колонки.Добавить("Заявка");
	
	ЗарегистрированныеЗаявки = Новый Соответствие;
	СписокФизическихЛиц = Новый Массив;
	КадровыеДанныеДляЗапросовСправокСРаботы = Новый Массив;
	
	ТипыОбрабатываемыхЗаявок = КабинетСотрудникаВнутренний.ТипыОбрабатываемыхЗаявок();
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ) <> Неопределено Тогда
		МассивОбъектов = Заявки["forms2NDFLRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаСправок = МассивОбъектовВТаблицу(МассивОбъектов, ОписаниеПолейЗапросовСправокНДФЛ());
			ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаСправок, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ,
					БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск) <> Неопределено Тогда
		МассивОбъектов = Заявки["vacationRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаОтпусков = МассивОбъектовВТаблицу(МассивОбъектов, ОписаниеПолейЗаявленийНаОтпуск());
			ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаОтпусков, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск,
					БизнесПроцессы.ЗаявкаСотрудникаОтпуск);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты) <> Неопределено Тогда
		МассивОбъектов = Заявки["taxDeductionRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаВычетов = ТаблицаИзОбъектовJSON(МассивОбъектов, ОписаниеПолейЗаявленийНаНалоговыеВычеты());
			ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаВычетов, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты,
					БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных) <> Неопределено Тогда
		МассивОбъектов = Заявки["personalInformationChangeRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаЛичныхДанных = МассивОбъектовВТаблицу(МассивОбъектов, ОписаниеПолейЗапросаИзмененияЛичныхДанных());
			ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаЛичныхДанных, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных,
					БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия) <> Неопределено Тогда
		МассивОбъектов = Заявки["absences"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаОтсутствий = МассивОбъектовВТаблицу(МассивОбъектов, ОписаниеПолейОтсутствия());
			
			ТаблицаУчебныеОтпуска 	= ТаблицаОтсутствий.СкопироватьКолонки();
			ТаблицаБольничные 		= ТаблицаОтсутствий.СкопироватьКолонки();
			ТаблицаПрочиеОтсутствия = ТаблицаОтсутствий.СкопироватьКолонки();
			Для каждого СтрокаТЗ Из ТаблицаОтсутствий Цикл
				ПричинаОтсутствия = ПричинаОтсутствияСервиса(СтрокаТЗ.Причина);
				Если ПричинаОтсутствия =  Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаУчебныеОтпуска.Добавить(), СтрокаТЗ);
				ИначеЕсли ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь
					Или ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаБольничные.Добавить(), СтрокаТЗ);
				Иначе
					ЗаполнитьЗначенияСвойств(ТаблицаПрочиеОтсутствия.Добавить(), СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаУчебныеОтпуска, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия,
					БизнесПроцессы.ЗаявкаСотрудникаОтпуск);
					
			ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаБольничные, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия,
					БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни);
					
			КабинетСотрудникаВнутренний.ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаПрочиеОтсутствия, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия);
					
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска) <> Неопределено Тогда
		МассивОбъектов = Заявки["vacationBalanceRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаСправокОтпуск = ТаблицаИзОбъектовJSON(МассивОбъектов, ОписаниеПолейЗапросаСправокОбОстаткеОтпуска());
			КабинетСотрудникаВнутренний.ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаСправокОтпуск, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыОбрабатываемыхЗаявок.Найти(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы) <> Неопределено Тогда
		МассивОбъектов = Заявки["certificatesFromEmployerRequests"];
		Если ЗначениеЗаполнено(МассивОбъектов) Тогда
			ТаблицаСправокСРаботы = МассивОбъектовВТаблицу(МассивОбъектов, ОписаниеПолейЗапросаСправокСРаботы());
			КабинетСотрудникаВнутренний.ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаСправокСРаботы, ЗарегистрированныеЗаявки, СписокФизическихЛиц,
					Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы);
			КадровыеДанныеДляЗапросовСправокСРаботы = КабинетСотрудникаВнутренний.КадровыеДанныеДляЗапросовСправокСРаботы(ТаблицаСправокСРаботы);
		КонецЕсли;
	КонецЕсли;
	
	РолиИсполнителейЗаявок = РолиИсполнителейЗаявокПоТипамЗапросов();
	ОбъектыАдресации = ОбъектыАдресацииЗаявок(СписокФизическихЛиц);
	
	Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(ОбъектыАдресации, "Значение", Истина);
	СрокиИсполненияЗаявок = Новый Соответствие;
	Для каждого ЭлементКоллекции Из РолиИсполнителейЗаявок Цикл
		СрокиИсполненияЗаявок.Вставить(ЭлементКоллекции.Значение, БизнесПроцессыЗаявокСотрудников.СрокиИсполненияЗаявок(ЭлементКоллекции.Значение, Подразделения));
	КонецЦикла;
	
	ТаблицаДанных.Сортировать("ВерсияИзменений");
	ВерсияДляЗаписи = 0;
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		Если ЗарегистрированныеЗаявки[СтрокаТЗ.Заявка.ИдентификаторЗапроса] = Истина Тогда
			// заявка уже зарегистрирована
			ВерсияДляЗаписи = СтрокаТЗ.ВерсияИзменений;
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
				РольИсполнителя = РолиИсполнителейЗаявок[СтрокаТЗ.ТипЗаявки];
				ОбработатьЗапросСправкиНДФЛ(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя);
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных Тогда
				РольИсполнителя = РолиИсполнителейЗаявок[СтрокаТЗ.ТипЗаявки];
				ОбработатьЗапросИзмененияЛичныхДанных(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя, ПараметрыПодключения);
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
				РольИсполнителя = РолиИсполнителейЗаявок[СтрокаТЗ.ТипЗаявки];
				КабинетСотрудникаВнутренний.ОбработатьЗапросСправокСРаботы(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя, ПараметрыПодключения, КадровыеДанныеДляЗапросовСправокСРаботы);
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск Тогда
				РольИсполнителя = РолиИсполнителейЗаявок[СтрокаТЗ.ТипЗаявки];
				ОбработатьЗапросЗаявлениеНаОтпуск(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя, ПараметрыПодключения);
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
				РольИсполнителя = РолиИсполнителейЗаявок[СтрокаТЗ.ТипЗаявки];
				КабинетСотрудникаВнутренний.ОбработатьЗапросСправокОбОстаткеОтпуска(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя);
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты Тогда
				РольИсполнителя = РолиИсполнителейЗаявок[СтрокаТЗ.ТипЗаявки];
				ОбработатьЗапросЗаявленияНаНалоговыеВычеты(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя, ПараметрыПодключения);
			ИначеЕсли СтрокаТЗ.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
				ПричинаОтсутствия = ПричинаОтсутствияСервиса(СтрокаТЗ.Заявка.Причина);
				Если ПричинаОтсутствия =  Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
					РольИсполнителя = РолиИсполнителейЗаявок[Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск];
					ОбработатьЗапросУчебныйОтпуск(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя, ПараметрыПодключения);
				ИначеЕсли ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь
					Или ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
					РольИсполнителя = РолиИсполнителейЗаявок[Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия];
					ОбработатьЗапросБольничный(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя, ПараметрыПодключения, ПричинаОтсутствия);
				Иначе
					РольИсполнителя = РолиИсполнителейЗаявок[Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия];
					КабинетСотрудникаВнутренний.ОбработатьЗапросЗаявкиНаОтсутствие(СтрокаТЗ.Заявка, ОбъектыАдресации, СрокиИсполненияЗаявок[РольИсполнителя], РольИсполнителя, ПараметрыПодключения, ПричинаОтсутствия);
				КонецЕсли;
			КонецЕсли;
			
			ВерсияДляЗаписи = СтрокаТЗ.ВерсияИзменений;
			
		Исключение
			// не удалось загрузить очередную заявку, прекращаем загрузку
			Результат.БылиОшибки = Истина;
			ЗаписатьОшибкуЗагрузкиИзменений(СтрокаТЗ.ТипЗаявки, ОписаниеОшибки());
			Прервать;
		КонецПопытки;
	
	КонецЦикла;
	
	Если ВерсияДляЗаписи <> 0 Тогда
		Константы.ВерсияИзмененийКабинетСотрудника.Установить(ВерсияДляЗаписи);
	КонецЕсли;

	Результат.КоличествоЗаявок = ТаблицаДанных.Количество();
	
	Возврат Результат;

КонецФункции

Процедура ОбработатьЗапросСправкиНДФЛ(СтрокаТаблицы, ОбъектыАдресации, СрокиИсполнения, РольИсполнителя)

	НачатьТранзакцию();
	Попытка
		
		ЗаявкаКабинета = НоваяЗаявка(БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ, СтрокаТаблицы.ИдентификаторЗапроса);
		
		ЗаявкаКабинета.Исполнитель = РольИсполнителя;
		ЗаявкаКабинета.ОсновнойОбъектАдресации = ОбъектыАдресации[СтрокаТаблицы.ФизическоеЛицо];
		ЗаявкаКабинета.СрокИсполнения = СтрокаТаблицы.ДатаСоздания + 86400 * СрокиИсполнения[ЗаявкаКабинета.ОсновнойОбъектАдресации];
		ЗаявкаКабинета.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НалоговыйПериод) Тогда
			НалоговыйПериод = СтрокаТаблицы.НалоговыйПериод;
		Иначе
			НалоговыйПериод = Год(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если СтрокаТаблицы.Назначение = "Подтверждение доходов" Тогда
			ЗаявкаКабинета.НачалоПериода = СтрокаТаблицы.НачалоПериода;
			ЗаявкаКабинета.ОкончаниеПериода = СтрокаТаблицы.ОкончаниеПериода;
		Иначе
			ЗаявкаКабинета.НалоговыйПериод = НалоговыйПериод;
		КонецЕсли;
		НаименованиеЗадачи = СтрШаблон(НСтр("ru = 'Запрос справки 2-НДФЛ для %1'"), Строка(СтрокаТаблицы.ФизическоеЛицо));
		Назначение = СтрокаТаблицы.Назначение; 
		
		Если Назначение = "Подтверждение доходов" Тогда
			ЗаявкаКабинета.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно;
		ИначеЕсли Назначение = "Декларирование доходов" Тогда
			ЗаявкаКабинета.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО;
		КонецЕсли;
		ЗаявкаКабинета.КомментарийСотрудника = СтрокаТаблицы.Комментарий;
		ЗаявкаКабинета.Предмет 			= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Наименование 	= НаименованиеЗадачи;
		ЗаявкаКабинета.Организация 		= СтрокаТаблицы.Организация;
		ЗаявкаКабинета.ФизическоеЛицо 	= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Записать();
		ЗаявкаКабинета.Старт();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьЗапросИзмененияЛичныхДанных(СтрокаТаблицы, ОбъектыАдресации, СрокиИсполнения, РольИсполнителя, ПараметрыПодключения)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаявкаКабинета = НоваяЗаявка(БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные, СтрокаТаблицы.ИдентификаторЗапроса);
		
		ЗаявкаКабинета.Исполнитель = РольИсполнителя;
		ЗаявкаКабинета.ОсновнойОбъектАдресации = ОбъектыАдресации[СтрокаТаблицы.ФизическоеЛицо];
		ЗаявкаКабинета.СрокИсполнения = СтрокаТаблицы.ДатаСоздания + 86400 * СрокиИсполнения[ЗаявкаКабинета.ОсновнойОбъектАдресации];
		ЗаявкаКабинета.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных;
		
		НаименованиеЗадачи = СтрШаблон(НСтр("ru = 'Изменение личных данных %1'"), Строка(СтрокаТаблицы.ФизическоеЛицо));
		Если СтрокаТаблицы.ИзменитьФИО Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Фамилия) Тогда
				ЗаявкаКабинета.Фамилия = СтрокаТаблицы.Фамилия;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
				ЗаявкаКабинета.Имя = СтрокаТаблицы.Имя;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Отчество) Тогда
				ЗаявкаКабинета.Отчество = СтрокаТаблицы.Отчество;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.ИзменитьДокумент Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументВид) Тогда
				ДокументВид = ВидыДокументовСервиса(СтрокаТаблицы.ДокументВид); 
				ЗаявкаКабинета.ДокументВид = ?(ДокументВид.Ссылка <> Неопределено, ДокументВид.Ссылка, ДокументВид.ТекстовоеПредставление);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументСерия) Тогда
				ЗаявкаКабинета.ДокументСерия = СтрокаТаблицы.ДокументСерия; 
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументНомер) Тогда
				ЗаявкаКабинета.ДокументНомер = СтрокаТаблицы.ДокументНомер;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументДатаВыдачи) Тогда
				ЗаявкаКабинета.ДокументДатаВыдачи = СтрокаТаблицы.ДокументДатаВыдачи;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументКемВыдан) Тогда
				ЗаявкаКабинета.ДокументКемВыдан = СтрокаТаблицы.ДокументКемВыдан;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументКодПодразделения) Тогда
				ЗаявкаКабинета.ДокументКодПодразделения = СтрокаТаблицы.ДокументКодПодразделения;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.ИзменитьНомерТелефона Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЛичныйНомерТелефона) Тогда
				ЗаявкаКабинета.НомерМобильногоТелефона = СтрокаТаблицы.ЛичныйНомерТелефона;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.ИзменитьАдрес Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.АдресРегистрации) Тогда
				ЗаявкаКабинета.АдресРегистрации = СтрокаТаблицы.АдресРегистрации;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.АдресМестаПроживания) Тогда
				ЗаявкаКабинета.АдресМестаПроживания = СтрокаТаблицы.АдресМестаПроживания;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Комментарий) Тогда
			ЗаявкаКабинета.КомментарийСотрудника = СтрокаТаблицы.Комментарий;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Вложения) Тогда
			ЗагрузитьФайлыЗаявки(ПараметрыПодключения, ЗаявкаКабинета, СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.Вложения);
		КонецЕсли;
		
		ЗаявкаКабинета.Предмет 			= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Наименование 	= НаименованиеЗадачи;
		ЗаявкаКабинета.ФизическоеЛицо 	= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Записать();
		ЗаявкаКабинета.Старт();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьЗапросЗаявлениеНаОтпуск(СтрокаТаблицы, ОбъектыАдресации, СрокиИсполнения, РольИсполнителя, ПараметрыПодключения)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаявкаКабинета = НоваяЗаявка(БизнесПроцессы.ЗаявкаСотрудникаОтпуск, СтрокаТаблицы.ИдентификаторЗапроса);
		
		ЗаявкаКабинета.Исполнитель = РольИсполнителя;
		ЗаявкаКабинета.ОсновнойОбъектАдресации = ОбъектыАдресации[СтрокаТаблицы.ФизическоеЛицо];
		ЗаявкаКабинета.СрокИсполнения = СтрокаТаблицы.ДатаСоздания + 86400 * СрокиИсполнения[ЗаявкаКабинета.ОсновнойОбъектАдресации];
		ЗаявкаКабинета.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Вложения) Тогда
			ЗагрузитьФайлыЗаявки(ПараметрыПодключения, ЗаявкаКабинета, СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.Вложения);
		КонецЕсли;
		
		НаименованиеЗадачи = СтрШаблон(НСтр("ru = 'Заявление на отпуск %1'"), Строка(СтрокаТаблицы.ФизическоеЛицо));
		ЗаявкаКабинета.КомментарийСотрудника = СтрокаТаблицы.Комментарий;
		ЗаявкаКабинета.ЗаСвойСчет 		= СтрокаТаблицы.ЗаСвойСчет;
		ЗаявкаКабинета.Наименование 	= НаименованиеЗадачи;
		ЗаявкаКабинета.ФизическоеЛицо 	= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Предмет 			= СтрокаТаблицы.ФизическоеЛицо;
		КоличествоДней = КабинетСотрудникаВнутренний.КоличествоДнейОтпускаФизическогоЛица(СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.ДатаНачала, СтрокаТаблицы.ДатаОкончания);
		ЗаявкаКабинета.КоличествоДнейОтпуска = КоличествоДней;
		ЗаявкаКабинета.ДатаНачалаОтпуска 	 = СтрокаТаблицы.ДатаНачала;
		ЗаявкаКабинета.ДатаОкончанияОтпуска  = СтрокаТаблицы.ДатаОкончания;
		ЗаявкаКабинета.Записать();
		ЗаявкаКабинета.Старт();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьЗапросЗаявленияНаНалоговыеВычеты(СтрокаТаблицы, ОбъектыАдресации, СрокиИсполнения, РольИсполнителя, ПараметрыПодключения)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаявкаКабинета = НоваяЗаявка(БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет, СтрокаТаблицы.ИдентификаторЗапроса);
		
		ЗаявкаКабинета.Исполнитель = РольИсполнителя;
		ЗаявкаКабинета.ОсновнойОбъектАдресации = ОбъектыАдресации[СтрокаТаблицы.ФизическоеЛицо];
		ЗаявкаКабинета.СрокИсполнения = СтрокаТаблицы.ДатаСоздания + 86400 * СрокиИсполнения[ЗаявкаКабинета.ОсновнойОбъектАдресации];
		ЗаявкаКабинета.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Вложения) Тогда
			ЗагрузитьФайлыЗаявки(ПараметрыПодключения, ЗаявкаКабинета, СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.Вложения);
		КонецЕсли;
		
		НаименованиеЗадачи = СтрШаблон(НСтр("ru = 'Заявление на налоговые вычеты %1'"), Строка(СтрокаТаблицы.ФизическоеЛицо));
		МесяцПрименения = Формат(СтрокаТаблицы.МесяцПрименения, "ДФ=dd.MM.yyyy");
		Если СтрокаТаблицы.ЭтоЛичныйВычет Тогда
			ЗаявкаКабинета.ЛичныйВычет = Истина;
		ИначеЕсли СтрокаТаблицы.ВычетыНаДетей.Количество() > 0 Тогда
			ЗаявкаКабинета.ВычетНаДетей = Истина;
		КонецЕсли;
		ЗаявкаКабинета.КомментарийСотрудника = СтрокаТаблицы.Комментарий;
		ЗаявкаКабинета.Наименование 	= НаименованиеЗадачи;
		ЗаявкаКабинета.ФизическоеЛицо 	= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Предмет 			= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.КомментарийСотрудника = СтрокаТаблицы.Комментарий;
		ЗаявкаКабинета.Организация 		= СтрокаТаблицы.Организация; 
		Для каждого ВычетНаРебенка Из СтрокаТаблицы.ВычетыНаДетей Цикл
			НовВычет = ЗаявкаКабинета.Вычеты.Добавить();
			НовВычет.ДействуетДо = ВычетНаРебенка.ДатаОкончания - 86400;
			НовВычет.ВидВычета = ОпределитьВидВычетаНаРебенка(ВычетНаРебенка);
		КонецЦикла;
		ЗаявкаКабинета.Записать();
		ЗаявкаКабинета.Старт();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьЗапросУчебныйОтпуск(СтрокаТаблицы, ОбъектыАдресации, СрокиИсполнения, РольИсполнителя, ПараметрыПодключения)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаявкаКабинета = НоваяЗаявка(БизнесПроцессы.ЗаявкаСотрудникаОтпуск, СтрокаТаблицы.ИдентификаторЗапроса);
		
		ЗаявкаКабинета.Исполнитель = РольИсполнителя;
		ЗаявкаКабинета.ОсновнойОбъектАдресации = ОбъектыАдресации[СтрокаТаблицы.ФизическоеЛицо];
		ЗаявкаКабинета.СрокИсполнения = СтрокаТаблицы.ДатаСоздания + 86400 * СрокиИсполнения[ЗаявкаКабинета.ОсновнойОбъектАдресации];
		ЗаявкаКабинета.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Вложения) Тогда
			ЗагрузитьФайлыЗаявки(ПараметрыПодключения, ЗаявкаКабинета, СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.Вложения);
		КонецЕсли;
		
		НаименованиеЗадачи = СтрШаблон(НСтр("ru = 'Заявление на учебный отпуск %1'"), Строка(СтрокаТаблицы.ФизическоеЛицо));
		ЗаявкаКабинета.КомментарийСотрудника = СтрокаТаблицы.Комментарий;
		ЗаявкаКабинета.Наименование 	 	= НаименованиеЗадачи;
		ЗаявкаКабинета.ФизическоеЛицо 	 	= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Предмет 				= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.ДатаНачалаОтпуска 	= СтрокаТаблицы.ДатаНачала;
		ЗаявкаКабинета.ДатаОкончанияОтпуска = СтрокаТаблицы.ДатаОкончания;
		ЗаявкаКабинета.УчебныйОтпуск 		= Истина;
		ЗаявкаКабинета.Записать();
		ЗаявкаКабинета.Старт();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьЗапросБольничный(СтрокаТаблицы, ОбъектыАдресации, СрокиИсполнения, РольИсполнителя, ПараметрыПодключения, ПричинаОтсутствия)
	
	НачатьТранзакцию();
	Попытка
		
		ЗаявкаКабинета = НоваяЗаявка(БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни, СтрокаТаблицы.ИдентификаторЗапроса);
		
		ЗаявкаКабинета.Исполнитель = РольИсполнителя;
		ЗаявкаКабинета.ОсновнойОбъектАдресации = ОбъектыАдресации[СтрокаТаблицы.ФизическоеЛицо];
		ЗаявкаКабинета.СрокИсполнения = СтрокаТаблицы.ДатаСоздания + 86400 * СрокиИсполнения[ЗаявкаКабинета.ОсновнойОбъектАдресации];
		ЗаявкаКабинета.ТипЗаявкиКабинетСотрудника = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Вложения) Тогда
			ЗагрузитьФайлыЗаявки(ПараметрыПодключения, ЗаявкаКабинета, СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.Вложения);
		КонецЕсли;
		
		Если ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь Тогда
			НаименованиеЗадачи = СтрШаблон(НСтр("ru = 'Отсутствие по болезни %1'"), Строка(СтрокаТаблицы.ФизическоеЛицо));
		Иначе
			ЗаявкаКабинета.ПоБеременности = Истина;
			НаименованиеЗадачи = СтрШаблон(НСтр("ru = 'Отпуск по беременности и родам %1'"), Строка(СтрокаТаблицы.ФизическоеЛицо));
		КонецЕсли;
		
		ЗаявкаКабинета.КомментарийСотрудника = СтрокаТаблицы.Комментарий;
		ЗаявкаКабинета.Наименование 	 	= НаименованиеЗадачи;
		ЗаявкаКабинета.ФизическоеЛицо 	 	= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.Предмет 				= СтрокаТаблицы.ФизическоеЛицо;
		ЗаявкаКабинета.ДатаНачалаОтсутствия 	= СтрокаТаблицы.ДатаНачала;
		ЗаявкаКабинета.ДатаОкончанияОтсутствия 	= СтрокаТаблицы.ДатаОкончания;
		ЗаявкаКабинета.СозданиеБольничногоЛиста = Истина;
		ЗаявкаКабинета.Записать();
		ЗаявкаКабинета.Старт();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		// вызывающий метод обрабатывает исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция НовыйРезультатЗагрузкиЗаявок()

	Возврат Новый Структура("БылиОшибки,КоличествоЗаявок", Ложь, 0);

КонецФункции

Функция РолиИсполнителейЗаявокПоТипамЗапросов()

	РолиИсполнителей = Новый Соответствие;
	РолиИсполнителей.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты, Справочники.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты);
	РолиИсполнителей.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск, Справочники.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск);
	РолиИсполнителей.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных, Справочники.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных);
	РолиИсполнителей.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия, Справочники.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий);
	РолиИсполнителей.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ, Справочники.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ);
	РолиИсполнителей.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска, Справочники.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков);
	РолиИсполнителей.Вставить(Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы, Справочники.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы);
	
	Возврат РолиИсполнителей;

КонецФункции

Процедура ЗаполнитьДанныеДляОбработкиЗаявок(ТаблицаДанных, ТаблицаЗаявок, ЗарегистрированныеЗаявки, СписокФизическихЛиц, ТипЗаявки, БизнесПроцессыМенеджер) Экспорт

	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
					ЗарегистрированныеЗаявки,
					ЗарегистрированныеЗаявки(ТаблицаЗаявок.ВыгрузитьКолонку("ИдентификаторЗапроса"), БизнесПроцессыМенеджер),
					Истина);
					
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц,
					ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаявок, "ФизическоеЛицо", Истина),
					Истина);
					
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТипЗаявки 		= ТипЗаявки;
		НоваяСтрока.ВерсияИзменений = СтрокаТЗ.Версия;
		НоваяСтрока.Заявка 			= СтрокаТЗ;
	КонецЦикла;

КонецПроцедуры

Функция ЗарегистрированныеЗаявки(ИдентификаторыЗаявок, БизнесПроцессМенеджер)

	Идентификаторы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыЗаявок", ИдентификаторыЗаявок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявка.ИдентификаторЗаявки КАК ИдентификаторЗаявки
	|ИЗ
	|	#Таблица КАК Заявка
	|ГДЕ
	|	Заявка.ИдентификаторЗаявки В(&ИдентификаторыЗаявок)";
	ИмяТаблицы = БизнесПроцессМенеджер.ПустаяСсылка().Метаданные().ПолноеИмя();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Идентификаторы.Вставить(Выборка.ИдентификаторЗаявки, Истина);
	КонецЦикла;
	
	Возврат Идентификаторы;

КонецФункции

Функция ОбъектыАдресацииЗаявок(СписокФизическихЛиц)

	ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Ложь, СписокФизическихЛиц, ТекущаяДатаСеанса());
	
	ОбъектыАдресации = Новый Соответствие;
	
	ОсновныеСотрудники = Новый Массив;
	Для каждого ЭлементКоллекции Из ОсновныеСотрудникиФизическихЛиц Цикл
		ОсновныеСотрудники.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	Если ВедетсяШтатноеРасписание Тогда
		КадровыеДанные = "МестоВСтруктуреПредприятия";
	Иначе
		КадровыеДанные = "Подразделение,Должность";
	КонецЕсли;
	
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные);
	Если Не ВедетсяШтатноеРасписание Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПозицииСотрудников = Новый Соответствие;
		Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
			ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
		КонецЦикла;
		
		Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
		СтруктураПредприятия = КабинетСотрудникаВнутренний.МестаПозицийВСтруктуреПредприятия(Позиции);
		ПодразделенияПозиций = Новый Соответствие;
		Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
			ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
		КонецЦикла;
		
		ТаблицаДанных.Колонки.Добавить("МестоВСтруктуреПредприятия");
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
			СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаДанных.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	ПустоеПодразделение = Новый(КабинетСотрудникаВнутренний.ТипСтруктураПредприятия());
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		Отбор.Сотрудник = ОсновныеСотрудникиФизическихЛиц[ФизическоеЛицо];
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
		Подразделение = ПустоеПодразделение;
		Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0].МестоВСтруктуреПредприятия) Тогда
			Подразделение = НайденныеСтроки[0].МестоВСтруктуреПредприятия;
		КонецЕсли;
		ОбъектыАдресации.Вставить(ФизическоеЛицо, Подразделение);
	КонецЦикла;
	
	Возврат ОбъектыАдресации;

КонецФункции

Функция НоваяЗаявка(БизнесПроцессМенеджер, ИдентификаторЗаявки) Экспорт
	
	Заявка = БизнесПроцессМенеджер.СоздатьБизнесПроцесс();
	Заявка.Дата 			= ТекущаяДатаСеанса();
	Заявка.Автор 			= Справочники.Пользователи.ПустаяСсылка();
	Заявка.Важность 		= Перечисления.ВариантыВажностиЗадачи.Обычная;
	Заявка.СостояниеЗаявки 	= Перечисления.СостоянияЗаявокКабинетСотрудника.Новая;
	Заявка.ИдентификаторЗаявки = ИдентификаторЗаявки;
	
	Возврат Заявка;
	
КонецФункции

Функция ОпределитьВидВычетаНаРебенка(ВычетНаРебенка)
	ТекстВычета = НСтр("ru = 'Вычет на'");
	
	СтаршинствоРебенка = "первого";
	Если ВычетНаРебенка.СтаршинствоРебенка = 1 Тогда
		СтаршинствоРебенка = НСтр("ru = 'первого'");
	ИначеЕсли ВычетНаРебенка.СтаршинствоРебенка = 2 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'второго'");
	ИначеЕсли ВычетНаРебенка.СтаршинствоРебенка = 3 Тогда
		СтаршинствоРебенка =  НСтр("ru = 'третьего или последующего'");
	КонецЕсли;
			
	Возврат (ТекстВычета + " " + СтаршинствоРебенка + " " + НСтр("ru = 'ребенка'") 
						 + ?(ВычетНаРебенка.РебенокИнвалид, НСтр("ru = '-инвалида'"), "")
						 + " " + ?(ВычетНаРебенка.ЗаявительОпекун, НСтр("ru = 'опекуну'"), НСтр("ru = 'родителю'")) 
						 + ?(ВычетНаРебенка.РодительОдиночка, " " + НСтр("ru = 'в двойном размере'"), ""));
КонецФункции

#КонецОбласти

Функция ИменаСвойствСервисаСоЗначениямиДата()
	
	Результат = Новый Массив;
	Результат.Добавить("dateCreated");
	Результат.Добавить("issueDate");
	Результат.Добавить("startDate");
	Результат.Добавить("endDate");
	Результат.Добавить("applyMonth");
	Результат.Добавить("incomePeriodStartDate");
	Результат.Добавить("incomePeriodEndDate");
	Возврат Результат;
	
КонецФункции

Функция ВосстановлениеJSON(Знач Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	Исключение
		Результат = Дата(1,1,1);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИзОбъектовJSON(ОбъектыJSON, ОписаниеПолей, ПрефиксПолей = "")
	
	Таблица = Новый ТаблицаЗначений;
	ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей, ПрефиксПолей);
	Для Каждого ОбъектJSON Из ОбъектыJSON Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьСтрокуТаблицыПоОписанию(НоваяСтрока, ОбъектJSON, ОписаниеПолей, ПрефиксПолей);
	КонецЦикла;
	Возврат Таблица;

КонецФункции

Процедура ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПолей, ПрефиксПолей = "")
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ДобавитьКолонкиТаблицыПоОписанию(Таблица, ОписаниеПоля["ОписаниеПолей"], ПрефиксПолей);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ОписаниеПоля["ТипПоля"]);
			Таблица.Колонки.Добавить(ПрефиксПолей + ОписаниеПоля["ИмяПоляКонфигурации"], Новый ОписаниеТипов(МассивТипов));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОбъектJSON, ОписаниеПолей, ПрефиксПолей = "")
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		ЗначениеJSON = ОбъектJSON.Получить(ОписаниеПоля["ИмяПоляСервиса"]);
		Если ЗначениеJSON = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеПоля["ТипПоля"] = Неопределено Тогда
			ЗаполнитьСтрокуТаблицыПоОписанию(СтрокаТаблицы, ОбъектJSON, ОписаниеПоля["ОписаниеПолей"], ПрефиксПолей);
		Иначе
			СтрокаТаблицы[ОписаниеПоля["ИмяПоляКонфигурации"]] = ПреобразоватьЗначениеJSON(ЗначениеJSON, ОписаниеПоля, ПрефиксПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьЗначениеJSON(ЗначениеJSON, ОписаниеПоля, ПрефиксПолей)
	
	Значение = ЗначениеJSON;
	Если ОписаниеПоля["ТипПоля"] = Тип("ТаблицаЗначений") Тогда
		Значение = ТаблицаИзОбъектовJSON(Значение, ОписаниеПоля["ОписаниеПолей"], ПрефиксПолей);
	ИначеЕсли ОписаниеПоля[ПрефиксПолей + "ИмяПоляКонфигурации"] = "ФизическоеЛицо" Тогда
		Значение = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение))
	ИначеЕсли ОписаниеПоля[ПрефиксПолей + "ИмяПоляКонфигурации"] = "Организация" Тогда
		Значение = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение))
	ИначеЕсли ОписаниеПоля[ПрефиксПолей + "ИмяПоляКонфигурации"] = "Назначение" Тогда
		Значение = НазначениеСправкиНДФЛСервиса(Значение);
	КонецЕсли;
	Возврат Значение;
	
КонецФункции

Функция МассивОбъектовВТаблицу(МассивОбъектов, СоответствиеПолей)
	
	Таблица = Новый ТаблицаЗначений;
	ДобавитьКолонкиТаблицыПоСоответствию(Таблица, СоответствиеПолей);
	Для Каждого СоответствиеОбъекта Из МассивОбъектов Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьСтрокуТаблицыПоСоответствию(НоваяСтрока, СоответствиеОбъекта, СоответствиеПолей);
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьКолонкиТаблицыПоСоответствию(Таблица, СоответствиеПолей)
	
	Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
		ИмяПоля = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ИмяПоля) = Тип("Соответствие") Тогда
			ДобавитьКолонкиТаблицыПоСоответствию(Таблица, ИмяПоля);
		Иначе
			Таблица.Колонки.Добавить(ИмяПоля, НовоеОписаниеТиповПоля(ИмяПоля));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыПоСоответствию(СтрокаТаблицы, СоответствиеОбъекта, СоответствиеПолей)
	
	Для Каждого КлючИЗначение Из СоответствиеОбъекта Цикл
		ИмяПоля = СоответствиеПолей.Получить(КлючИЗначение.Ключ);
		Если Не ЗначениеЗаполнено(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ИмяПоля) = Тип("Соответствие") Тогда
			ЗаполнитьСтрокуТаблицыПоСоответствию(СтрокаТаблицы, КлючИЗначение.Значение, ИмяПоля);
		Иначе
			СтрокаТаблицы[ИмяПоля] = ЗначениеИзСтрокиСервиса(КлючИЗначение.Значение, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеИзСтрокиСервиса(СтрокаЗначения, ИмяПоля)
	
	Значение = СтрокаЗначения;
	Если ИмяПоля = "ФизическоеЛицо" Тогда
		Значение = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаЗначения))
	ИначеЕсли ИмяПоля = "Организация" Тогда
		Значение = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаЗначения))
	ИначеЕсли ИмяПоля = "Назначение" Тогда
		Значение = НазначениеСправкиНДФЛСервиса(Значение);
	ИначеЕсли ИмяПоля = "Вложения" Тогда
		Значение = МассивОбъектовВТаблицу(Значение, ОписаниеПолейВходящийФайл());
	КонецЕсли;
	Возврат Значение;
	
КонецФункции

Функция НазначениеСправкиНДФЛСервиса(Назначение)
	
	Результат = Назначение;
	Если Назначение = "incomeProof" Тогда
		Результат = "Подтверждение доходов";
	ИначеЕсли Назначение = "declare" Тогда
		Результат = "Декларирование доходов";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ПричинаОтсутствияСервиса(ПричинаОтсутствия)
	
	Результат = ПричинаОтсутствия;
	Если ПричинаОтсутствия = "late" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание;
	ИначеЕсли ПричинаОтсутствия = "illness" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь;
	ИначеЕсли ПричинаОтсутствия = "vacation" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отпуск;
	ИначеЕсли ПричинаОтсутствия = "studyLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск;
	ИначеЕсли ПричинаОтсутствия = "unpaidLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускЗаСвойСчет;
	ИначеЕсли ПричинаОтсутствия = "maternityLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам;
	ИначеЕсли ПричинаОтсутствия = "parentalLeave" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком;
	ИначеЕсли ПричинаОтсутствия = "timeOff" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отгул;
	ИначеЕсли ПричинаОтсутствия = "businessTrip" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Командировка;
	ИначеЕсли ПричинаОтсутствия = "personalReason" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела;
	ИначеЕсли ПричинаОтсутствия = "invalidChildCare" Тогда
		Результат = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ВидыДокументовСервиса(ВидДокумента)
	
	ВидыДокументовФизическихЛиц = Справочники.ВидыДокументовФизическихЛиц;

	Результат = Новый Структура;
	
	Если ВидДокумента = "passport" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.ПаспортРФ);
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Паспорт гражданина РФ'"));
	ИначеЕсли ВидДокумента = "foreignPassport" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(10));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Иностранный паспорт'"));
	ИначеЕсли ВидДокумента = "residenceCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(12));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Вид на жительство'"));
	ИначеЕсли ВидДокумента = "identityCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(14));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Временное удостоверение личности гражданина РФ'"));
	ИначеЕсли ВидДокумента = "militaryIdentityCard" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.УдостоверениеОфицера);
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Удостоверение личности офицера'"));
	ИначеЕсли ВидДокумента = "residencePermission" Тогда
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(15));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Разрешение на временное проживание в Российской Федерации'"));
	Иначе
		Результат.Вставить("Ссылка", ВидыДокументовФизическихЛиц.НайтиПоКоду(91));
		Результат.Вставить("ТекстовоеПредставление", НСтр("ru = 'Иной документ'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьФайлыЗаявки(ПараметрыПодключения, Заявка, Владелец, ТаблицаВложений) Экспорт
	
	ШаблонРесурса = ПараметрыПодключения.ШаблоныРесурсов.Получить("Файлы");
	Для Каждого СтрокаТаблицы Из ТаблицаВложений Цикл
		
		РесурсСервиса = ЗаполнитьПараметрыШаблонаURL(ШаблонРесурса, Новый Структура("ID", СтрокаТаблицы.ИдентификаторФайла));
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
		Если Ответ = Неопределено Или Не Ответ.КодСостояния = 200 Тогда
			// вызывающий метод обрабатывает исключение
			ВызватьИсключение НСтр("ru = 'Произошла ошибка при загрузке файлов из сервиса. Подробности в журнале регистрации.'");
		КонецЕсли;
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Ответ.ПолучитьТелоКакДвоичныеДанные());
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание");
		ПараметрыФайла.ВладелецФайлов = Владелец;
		ПараметрыФайла.ИмяБезРасширения = СтрЗаменить(СтрокаТаблицы.НаименованиеФайла, "." + СтрокаТаблицы.РасширениеФайла, "");
		ПараметрыФайла.РасширениеБезТочки = СтрЗаменить(СтрокаТаблицы.РасширениеФайла, ".", "");
		ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ПараметрыФайла.Служебный = Истина;
		ПараметрыФайла.Описание = СтрШаблон("%1 %2", НСтр("ru = 'Приложение к заявке:'"), Строка(Заявка));
		
		НоваяСтрока = Заявка.ФайлыЗаявки.Добавить();
		НоваяСтрока.Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПравиламиПубликации

Процедура СоздатьВТШтатноеРасписание(МенеджерВТ) Экспорт
	
	КабинетСотрудникаВнутренний.СоздатьВТШтатноеРасписание(МенеджерВТ);
	
КонецПроцедуры

Процедура СохранитьНастройкиПубликацииВФоне(Параметры, АдресХранилища) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Параметры.НовыеНастройки);
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Истина);
		ОбновитьПубликуемыеОбъекты();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение(НСтр("ru = 'При записи правил публикации произошла ошибка.'")
			+ Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при сохранении настроек правил публикации.
// Выполняется полное обновление списков публикуемых объектов на основе правил публикации.
//
Процедура ОбновитьПубликуемыеОбъекты()
	
	КабинетСотрудникаВнутренний.ОбновитьСтруктуруПредприятия();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК Позиция,
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность,
	|	ШтатноеРасписание.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК Правила
	|		ПО (Правила.ОбъектПравила = ШтатноеРасписание.Ссылка)";
	// таблица значений всех публикуемых позиций
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаПозиций.Количество() = 0 Тогда
		РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		Возврат;
	КонецЕсли;
	
	ПубликуемыеПозиции     = ТаблицаПозиций.ВыгрузитьКолонку("Позиция");
	ПубликуемыеОрганизации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"Организация",Истина);
	ПубликуемыеДолжности   = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"Должность",Истина);
	ПубликуемыеПодразделенияПредприятия = КабинетСотрудникаВнутренний.ПубликуемаяСтруктураПредприятия(ПубликуемыеПозиции);
	
	ГоловныеОрганизации = Новый Массив;
	Для каждого Организация Из ПубликуемыеОрганизации Цикл
		ГоловныеОрганизации.Добавить(ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПубликуемыеОрганизации, ГоловныеОрганизации, Истина);
	
	ПозицииШР = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ПубликуемыеПозиции);
	ПубликуемыеФизическиеЛица 	= Новый Массив;
	ПубликуемыеСотрудники 		= Новый Массив;
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если Не ИспользоватьКадровыйУчет Тогда
		КадровыеДанныеСтрока = "Подразделение,Должность,ДатаПриема,ДатаУвольнения";
	Иначе
		КадровыеДанныеСтрока = "ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Подразделение,Должность";
		КонецЕсли;
	КонецЕсли;
	ПараметрыПолучения.КадровыеДанные = КадровыеДанныеСтрока;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ИспользоватьКадровыйУчет Тогда
		
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		
		УстановитьПривилегированныйРежим(Истина);
		КадровыеДанные = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Для каждого СтрокаТЗ Из КадровыеДанные Цикл
			Если ПозицииШР[СтрокаТЗ.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) Тогда
					Продолжить;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
					ПубликуемыеФизическиеЛица.Добавить(СтрокаТЗ.ФизическоеЛицо);
					ПубликуемыеСотрудники.Добавить(СтрокаТЗ.Сотрудник);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанные КАК КадровыеДанные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			
			УстановитьПривилегированныйРежим(Истина);
			КадровыеДанные = Запрос.Выполнить().Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанные Цикл
			Если ПозицииШР[СтрокаТЗ.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
				Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
					Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
					Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности
					Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
					
					ПубликуемыеФизическиеЛица.Добавить(СтрокаТЗ.ФизическоеЛицо);
					ПубликуемыеСотрудники.Добавить(СтрокаТЗ.Сотрудник);
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// добавляем в список ответственное лицо
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если ЗначениеЗаполнено(Настройки.Ответственный) Тогда
		ПубликуемыеФизическиеЛица.Добавить(Настройки.Ответственный);
	КонецЕсли;
	
	ПубликуемыеФизическиеЛица 	= ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПубликуемыеФизическиеЛица);
	ПубликуемыеСотрудники 		= ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПубликуемыеСотрудники);
	
	НаборЗаписей = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверитьЗаполнение");
	Для каждого ФизическоеЛицо Из ПубликуемыеФизическиеЛица Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
	КонецЦикла;
	Таблица = НаборЗаписей.Выгрузить();
	Запрос.УстановитьПараметр("ФизическиеЛица", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ФизическиеЛица КАК ФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК НовыеФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ПО НовыеФизическиеЛица.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	// таблица новых публикуемых физических лиц, для регистрации публикации изменений 
	ТаблицаИзменений = РезультатЗапроса.Выгрузить();
	// записываем список публикуемых физических лиц
	НаборЗаписей.Записать();
	
	// Регистрация новых физических лиц как изменения для публикации.
	// Дополнительно регистрируем физических лиц в ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		
		Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ПредметПубликации = СтрокаТЗ.ФизическоеЛицо;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
		
		Запись = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
		Запись.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
		
	КонецЦикла;
	
	// Очищаем сведения для отложенного обновления публикуемых объектов.
	НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	// Все публикуемые объекты, кроме физических лиц.
	НаборЗаписей = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей();
	Для каждого ОбъектПубликации Из ПубликуемыеСотрудники Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации = ОбъектПубликации;
	КонецЦикла;
	Для каждого ОбъектПубликации Из ПубликуемыеОрганизации Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации = ОбъектПубликации;
	КонецЦикла;
	Для каждого ОбъектПубликации Из ПубликуемыеПодразделенияПредприятия Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации = ОбъектПубликации;
	КонецЦикла;
	Для каждого ОбъектПубликации Из ПубликуемыеДолжности Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации = ОбъектПубликации;
	КонецЦикла;
	Для каждого ОбъектПубликации Из ПубликуемыеПозиции Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации = ОбъектПубликации;
	КонецЦикла;
	Таблица = НаборЗаписей.Выгрузить();
	Запрос.УстановитьПараметр("ПубликуемыеОбъекты", Таблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ПОМЕСТИТЬ ВТПубликуемыеОбъекты
	|ИЗ
	|	&ПубликуемыеОбъекты КАК ПубликуемыеОбъекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	ВТПубликуемыеОбъекты КАК НовыеПубликуемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО НовыеПубликуемыеОбъекты.ОбъектПубликации = ПубликуемыеОбъекты.ОбъектПубликации
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	// таблица новых публикуемых объектов, для регистрации публикации изменений
	ТаблицаИзменений = РезультатЗапроса.Выгрузить();
	ПубликуемыеОбъекты = Новый Массив;
	// записываем список публикуемых объектов
	НаборЗаписей.Записать();
	// Регистрация новых объектов
	НаборЗаписей = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
		Запись.ПредметПубликации = СтрокаТЗ.ОбъектПубликации;
		Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		Запись.Записать();
		ПубликуемыеОбъекты.Добавить(СтрокаТЗ.ОбъектПубликации);
	КонецЦикла;
	
	КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеПубликуемыхОбъектов(ПубликуемыеОбъекты);
	КабинетСотрудникаВнутренний.ОчиститьДанныеОбАктуальностиИнформацииОбОтпускеНепубликуемыхСотрудников();
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура ОбработатьИзменениеКадровойИстории(ИзменившиесяДанные) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Если ИзменившиесяДанные <> Неопределено И ИзменившиесяДанные.Количество() > 0 Тогда
		
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ИзменившиесяДанные, "Сотрудник", Истина);
		
		УстановитьПривилегированныйРежим(Истина);
		ГоловныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ГоловнойСотрудник");
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		Для каждого Сотрудник Из Сотрудники Цикл
			Если Сотрудник <> ГоловныеСотрудники[Сотрудник] Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Очистить();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Сотрудник = Сотрудник;
			НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
			НаборЗаписей.Записать();
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
		КабинетСотрудникаВнутренний.ОбработатьИзменениеКадровойИстории(ИзменившиесяДанные);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбъектПередЗаписью(Объект) Экспорт

	ИменаКонтролируемыхПолей = ИменаКонтролируемыхПолей(Объект);
	Если Объект.ЭтоНовый() Тогда
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхПолей);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, ИменаКонтролируемыхПолей);
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ПрежниеДанныеПубликуемогоОбъекта", ПрежниеДанныеОбъекта);
	
	КабинетСотрудникаВнутренний.ОбъектПередЗаписью(Объект);
	
КонецПроцедуры

Функция ИменаКонтролируемыхПолей(Объект)
	
	ИменаКонтролируемыхПолей = "";
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
		ИменаКонтролируемыхПолей = "Наименование";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Организации") Тогда
		ИменаКонтролируемыхПолей = "Наименование,ИНН,ГоловнаяОрганизация";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		ИменаКонтролируемыхПолей = "РеквизитДопУпорядочиванияИерархического";
	Иначе
		ИменаКонтролируемыхПолей = КабинетСотрудникаВнутренний.ИменаКонтролируемыхПолей(Объект);
	КонецЕсли;
	
	Возврат ИменаКонтролируемыхПолей;

КонецФункции

Процедура ОбъектПриЗаписи(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ПриЗаписиФизическогоЛица(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		ПриЗаписиПодразделенияОрганизации(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Организации")
		Или ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
		ПриЗаписиПубликуемогоОбъекта(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаИзменитьЛичныеДанные")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаНалоговыйВычет")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтпуск")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаСправка2НДФЛ")
			ИЛИ ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.ЗаявкаСотрудникаОтсутствиеПоБолезни") Тогда
		ПриЗаписиЗаявкиСотрудника(Объект);
	Иначе
		КабинетСотрудникаВнутренний.ОбъектПриЗаписи(Объект);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПриЗаписиФизическогоЛица(ФизическоеЛицо)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо = &ФизическоеЛицо";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПредметПубликации = ФизическоеЛицо.Ссылка;
		МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор);
		МенеджерЗаписи.Записать();
		ПроверитьЗаполнениеСвойствФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо.Ссылка));
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписиПодразделенияОрганизации(Подразделение)
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Подразделение.ДополнительныеСвойства.Свойство("ПрежниеДанныеПубликуемогоОбъекта", ЗначенияКонтролируемыхРеквизитов);
	Если Не КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	ПодразделениеПредприятия = КабинетСотрудникаВнутренний.ПодразделениеВСтруктуреПредприятия(Подразделение);
	Если ЗначениеЗаполнено(ПодразделениеПредприятия) Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектПубликации", ПодразделениеПредприятия.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъектыКабинетСотрудника
		|ГДЕ
		|	ПубликуемыеОбъектыКабинетСотрудника.ОбъектПубликации = &ОбъектПубликации";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПредметПубликации 	= Выборка.ОбъектПубликации;
				МенеджерЗаписи.ВерсияДанных 		= Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КонтролируемыеРеквизитыИзменились(ЗначенияКонтролируемыхРеквизитов, Объект)

	Если ЗначенияКонтролируемыхРеквизитов = Неопределено Тогда
		Возврат Истина;
	Иначе
		Для каждого ЭлементКоллекции Из ЗначенияКонтролируемыхРеквизитов Цикл
			Если Объект[ЭлементКоллекции.Ключ] <> ЭлементКоллекции.Значение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ИмущественныеВычетыНДФЛПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ИмущественныеВычетыНДФЛ.Регистратор = &Регистратор";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛиц);

КонецПроцедуры

Процедура ИмущественныеВычетыНДФЛПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизическихЛиц = НаборЗаписей.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	СписокФизическихЛицПередЗаписью = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ФизическиеЛицаОбновленияПубликацииВычетов", СписокФизическихЛицПередЗаписью);
	Если СписокФизическихЛиц <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФизическихЛиц, СписокФизическихЛицПередЗаписью ,Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновленияПубликации
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновленияПубликации.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И ФизическиеЛицаДляОбновленияПубликации.БылаОшибкаПриПубликации ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			МенеджерЗаписи.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОтложенноеОбновлениеСписковПубликуемыхОбъектов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК Сотрудники";
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСотрудников  = РезультатаЗапроса.Выгрузить();
	СписокСотрудников   = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "ФизическоеЛицо", Истина);
	
	Запрос.УстановитьПараметр("ФизическиеЛица", СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника
	|ГДЕ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо В(&ФизическиеЛица)";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если Не ИспользоватьКадровыйУчет Тогда
		КадровыеДанныеСтрока = "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
	Иначе
		КадровыеДанныеСтрока = "ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Организация,Подразделение,Должность";
		КонецЕсли;
	КонецЕсли;
	ПараметрыПолучения.КадровыеДанные = КадровыеДанныеСтрока;
	ПараметрыПолучения.СписокФизическихЛиц = СписокФизическихЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ИспользоватьКадровыйУчет Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Организация КАК Организация,
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные";
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		КадровыеДанные = КабинетСотрудникаВнутренний.КадровыеДанныеОбновляемыхСотрудников(Запрос.МенеджерВременныхТаблиц);
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли Не ВедетсяШтатноеРасписание Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Организация КАК Организация,
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ВидСобытия КАК ВидСобытия
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные";
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		КадровыеДанные = КабинетСотрудникаВнутренний.КадровыеДанныеОбновляемыхСотрудников(Запрос.МенеджерВременныхТаблиц);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// получим список публикуемых позиций
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДанные, "ДолжностьПоШтатномуРасписанию", Истина);
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПубликации.ОбъектПравила КАК Позиция
	|ИЗ
	|	РегистрСведений.ПравилаПубликацииКабинетСотрудника КАК ПравилаПубликации
	|ГДЕ
	|	ПравилаПубликации.ОбъектПравила В(&Позиции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПубликуемыеОбъекты.ОбъектПубликации КАК Позиция
	|ИЗ
	|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации В(&Позиции)";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[0].Выбрать();
	ПозицияЕстьВПравилах = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПозицияЕстьВПравилах.Вставить(Выборка.Позиция, Истина);
	КонецЦикла;
	Выборка = РезультатЗапроса[1].Выбрать();
	ПубликуемыеПозиции = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеПозиции.Вставить(Выборка.Позиция, Истина);
	КонецЦикла;
	
	ПозицииКПубликации 				= Новый Массив;
	СотрудникиКУдалению 			= Новый Массив;
	СотрудникиКПубликации 			= Новый Массив;
	ФизическиеЛицаКПубликации 		= Новый Массив;
	СотрудникиОтменаПубликации 		= Новый Массив;
	ФизическиеЛицаОтменаПубликации 	= Новый Массив;
	
	Если Не ИспользоватьКадровыйУчет Тогда
		
		РабочиеМестаФизическогоЛица = Новый Соответствие;
		Для каждого СтрокаТЗ Из КадровыеДанные Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДатаУвольнения) И ЗначениеЗаполнено(СтрокаТЗ.ДатаПриема) Тогда
				РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
				Если РабочиеМеста = Неопределено Тогда
					РабочиеМеста = Новый Массив;
				КонецЕсли;
				РабочиеМеста.Добавить(СтрокаТЗ);
				РабочиеМестаФизическогоЛица.Вставить(СтрокаТЗ.ФизическоеЛицо, РабочиеМеста);
			КонецЕсли;
		КонецЦикла;
		
		Отбор = Новый Структура("Сотрудник");
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			
			Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
			ДанныеСотрудника = КадровыеДанные.НайтиСтроки(Отбор);
			Если ДанныеСотрудника.Количество() = 0 
				Или ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаУвольнения) Тогда
				
				// нет кадровых данных или уволен
				Если ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
					
					// Физическое лицо публикуется, зарегистрируем удаление сотрудника.
					СотрудникиКУдалению.Добавить(СтрокаТЗ.Сотрудник);
					
					// Проверим наличие других рабочих мест на публикуемых позициях.
					ОтменитьПубликацию = Истина;
					РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
					Для каждого РабочееМесто Из РабочиеМеста Цикл
						Если РабочееМесто.Сотрудник = СтрокаТЗ.Сотрудник Тогда
							Продолжить;
						ИначеЕсли ПозицияЕстьВПравилах[РабочееМесто.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
							ОтменитьПубликацию = Ложь;
						КонецЕсли;
					КонецЦикла;
					Если ОтменитьПубликацию Тогда
						ФизическиеЛицаОтменаПубликации.Добавить(СтрокаТЗ.ФизическоеЛицо);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаПриема) Тогда
				
				Если ПозицияЕстьВПравилах[ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
					// прием или перевод на публикуемую позицию
					СотрудникиКПубликации.Добавить(СтрокаТЗ.Сотрудник);
					Если ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] = Неопределено Тогда
						ФизическиеЛицаКПубликации.Добавить(СтрокаТЗ.ФизическоеЛицо);
						// добавляем публикации других рабочих мест
						РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
						Для каждого РабочееМесто Из РабочиеМеста Цикл
							СотрудникиКПубликации.Добавить(РабочееМесто.Сотрудник);
						КонецЦикла;
					КонецЕсли;
					Если ПубликуемыеПозиции[ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию] = Неопределено Тогда
						ПозицииКПубликации.Добавить(ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию);
					КонецЕсли;
				Иначе
					// прием или перевод на непубликуемую позицию
					ЕстьПубликуемыеРабочиеМеста = Ложь;
					РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
					Для каждого РабочееМесто Из РабочиеМеста Цикл
						Если РабочееМесто.Сотрудник = СтрокаТЗ.Сотрудник Тогда
							Продолжить;
						КонецЕсли;
						Если ПубликуемыеПозиции[РабочееМесто.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
							// есть другое рабочее место на публикуемой позиции
							ЕстьПубликуемыеРабочиеМеста = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьПубликуемыеРабочиеМеста Тогда
						СотрудникиКПубликации.Добавить(СтрокаТЗ.Сотрудник);
					ИначеЕсли ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
						ФизическиеЛицаОтменаПубликации.Добавить(СтрокаТЗ.ФизическоеЛицо);
						СотрудникиОтменаПубликации.Добавить(СтрокаТЗ.Сотрудник);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		РабочиеМестаФизическогоЛица = Новый Соответствие;
		Для каждого СтрокаТЗ Из КадровыеДанные Цикл
			Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности
				Или СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
				Если РабочиеМеста = Неопределено Тогда
					РабочиеМеста = Новый Массив;
				КонецЕсли;
				РабочиеМеста.Добавить(СтрокаТЗ);
				РабочиеМестаФизическогоЛица.Вставить(СтрокаТЗ.ФизическоеЛицо, РабочиеМеста);
			КонецЕсли;
		КонецЦикла;
		
		КадровыеДанные.Индексы.Добавить("Сотрудник");
		Отбор = Новый Структура("Сотрудник");
		
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			
			Отбор.Сотрудник = СтрокаТЗ.Сотрудник;
			ДанныеСотрудника = КадровыеДанные.НайтиСтроки(Отбор);
			Если ДанныеСотрудника.Количество() = 0 
				Или Не ЗначениеЗаполнено(ДанныеСотрудника[0].ВидСобытия)
				Или ДанныеСотрудника[0].ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				// нет кадровых данных или уволен
				Если ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
					
					// Физическое лицо публикуется, зарегистрируем удаление сотрудника.
					СотрудникиКУдалению.Добавить(СтрокаТЗ.Сотрудник);
					
					// Проверим наличие других рабочих мест на публикуемых позициях.
					ОтменитьПубликацию = Истина;
					РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
					Если РабочиеМеста <> Неопределено Тогда
						Для каждого РабочееМесто Из РабочиеМеста Цикл
							Если РабочееМесто.Сотрудник = СтрокаТЗ.Сотрудник Тогда
								Продолжить;
							ИначеЕсли ПозицияЕстьВПравилах[РабочееМесто.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
								ОтменитьПубликацию = Ложь;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ОтменитьПубликацию Тогда
						ФизическиеЛицаОтменаПубликации.Добавить(СтрокаТЗ.ФизическоеЛицо);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника[0].ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
				
				Если ПозицияЕстьВПравилах[ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию] = Неопределено Тогда
					// перевод на непубликуемую позицию
					Если ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
						// Проверим наличие других рабочих мест на публикуемых позициях.
						ОтменитьПубликацию = Истина;
						РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
						Для каждого РабочееМесто Из РабочиеМеста Цикл
							Если РабочееМесто.Сотрудник = СтрокаТЗ.Сотрудник Тогда
								Продолжить;
							ИначеЕсли ПозицияЕстьВПравилах[РабочееМесто.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
								ОтменитьПубликацию = Ложь;
							КонецЕсли;
						КонецЦикла;
						Если ОтменитьПубликацию Тогда
							ФизическиеЛицаОтменаПубликации.Добавить(СтрокаТЗ.ФизическоеЛицо);
							Для каждого РабочееМесто Из РабочиеМеста Цикл
								СотрудникиОтменаПубликации.Добавить(РабочееМесто.Сотрудник);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				Иначе
					// перевод на публикуемую позицию
					СотрудникиКПубликации.Добавить(СтрокаТЗ.Сотрудник);
					Если ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] = Неопределено Тогда
						ФизическиеЛицаКПубликации.Добавить(СтрокаТЗ.ФизическоеЛицо);
						РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
						Для каждого РабочееМесто Из РабочиеМеста Цикл
							СотрудникиКПубликации.Добавить(РабочееМесто.Сотрудник);
						КонецЦикла;
					КонецЕсли;
					Если ПубликуемыеПозиции[ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию] = Неопределено Тогда
						ПозицииКПубликации.Добавить(ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДанныеСотрудника[0].ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или ДанныеСотрудника[0].ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
				Или ДанныеСотрудника[0].ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
				
				Если ПозицияЕстьВПравилах[ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
					// прием на публикуемую позицию
					СотрудникиКПубликации.Добавить(СтрокаТЗ.Сотрудник);
					Если ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] = Неопределено Тогда
						ФизическиеЛицаКПубликации.Добавить(СтрокаТЗ.ФизическоеЛицо);
						// добавляем публикации других рабочих мест
						РабочиеМеста = РабочиеМестаФизическогоЛица[СтрокаТЗ.ФизическоеЛицо];
						Для каждого РабочееМесто Из РабочиеМеста Цикл
							СотрудникиКПубликации.Добавить(РабочееМесто.Сотрудник);
						КонецЦикла;
					КонецЕсли;
					Если ПубликуемыеПозиции[ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию] = Неопределено Тогда
						ПозицииКПубликации.Добавить(ДанныеСотрудника[0].ДолжностьПоШтатномуРасписанию);
					КонецЕсли;
				ИначеЕсли ПубликуемыеФизическиеЛица[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
					// прием на непубликуемую позицию, но физическое лицо публикуемое
					СотрудникиКПубликации.Добавить(СтрокаТЗ.Сотрудник);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиОтменаПубликации, СотрудникиКУдалению, Истина);
	ПозицииКПубликации 				= ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПозицииКПубликации);
	СотрудникиКПубликации 			= ОбщегоНазначенияКлиентСервер.СвернутьМассив(СотрудникиКПубликации);
	ФизическиеЛицаОтменаПубликации 	= ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФизическиеЛицаОтменаПубликации);
	ФизическиеЛицаКПубликации 		= ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФизическиеЛицаКПубликации);
	СотрудникиОтменаПубликации 		= ОбщегоНазначенияКлиентСервер.СвернутьМассив(СотрудникиОтменаПубликации);
	
	ДолжностиКПубликации 	 = Новый Массив;
	ПодразделенияКПубликации = Новый Массив;
	Если ПозицииКПубликации.Количество() > 0 Тогда
		ДолжностиКПубликации = НовыеПубликуемыеДолжностиПозиций(ПозицииКПубликации);
		ПодразделенияКПубликации = КабинетСотрудникаВнутренний.НоваяПубликуемаяСтруктураПредприятияПозиций(ПозицииКПубликации);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого ОбъектПубликации Из ПозицииКПубликации Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ОбъектПубликации;
			Запись.Записать();
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = ОбъектПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Для каждого ОбъектПубликации Из ДолжностиКПубликации Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ОбъектПубликации;
			Запись.Записать();
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = ОбъектПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Для каждого ОбъектПубликации Из ПодразделенияКПубликации Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ОбъектПубликации;
			Запись.Записать();
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = ОбъектПубликации;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		Для каждого Сотрудник Из СотрудникиКПубликации Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = Сотрудник;
			Запись.Записать();
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = Сотрудник;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
			КабинетСотрудникаВнутренний.ДобавитьСотрудникиДляОбновленияПубликацииПравНаОтпуск(Сотрудник);
		КонецЦикла;
		
		Для каждого Сотрудник Из СотрудникиОтменаПубликации Цикл
			Запись = РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = Сотрудник;
			Запись.Удалить();
		КонецЦикла;
		
		Для каждого Сотрудник Из СотрудникиКУдалению Цикл
			Запись = РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектДляУдаления = Сотрудник;
			Запись.Записать();
		КонецЦикла;
		
		Для каждого ФизическоеЛицо Из ФизическиеЛицаКПубликации Цикл
			Запись = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо = ФизическоеЛицо;
			Запись.Записать();
			Запись = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ПредметПубликации = ФизическоеЛицо;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
			Запись = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо = ФизическоеЛицо;
			Запись.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			Запись.Записать();
		КонецЦикла;
		
		ПроверитьЗаполнениеСвойствФизическихЛиц(ФизическиеЛицаКПубликации);
		
		Для каждого ФизическоеЛицо Из ФизическиеЛицаОтменаПубликации Цикл
			Запись = РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ФизическоеЛицо = ФизическоеЛицо;
			Запись.Удалить();
			Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = ФизическоеЛицо;
			Запись.Удалить();
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиДляОбновленияПубликуемыхОбъектов КАК Сотрудники
		|ГДЕ
		|	НЕ Сотрудники.Сотрудник В (&СписокСотрудников)";
		НаборЗаписей = РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Функция НовыеПубликуемыеДолжностиПозиций(Позиции)
	
	Должности = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначенияРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Позиции, "Должность", Ложь);
	Для каждого ЭлементКоллекции Из ЗначенияРеквизита Цикл
		Должности.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	Должности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Должности);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должности", Должности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Должности КАК Должности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты
	|		ПО (ПубликуемыеОбъекты.ОбъектПубликации = Должности.Ссылка)
	|			И (ПубликуемыеОбъекты.ОбъектПубликации ССЫЛКА Справочник.Должности)
	|ГДЕ
	|	ПубликуемыеОбъекты.ОбъектПубликации ЕСТЬ NULL
	|	И Должности.Ссылка В(&Должности)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Процедура ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ТекущиеКадровыеДанныеСотрудниковПередЗаписью(НаборЗаписей);

КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	КабинетСотрудникаВнутренний.ТекущиеКадровыеДанныеСотрудниковПриЗаписи(НаборЗаписей);

КонецПроцедуры

Процедура ПриЗаписиЗаявкиСотрудника(Объект) Экспорт
	
	Если Не Объект.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПредметПубликации = Объект.Ссылка;
	МенеджерЗаписи.ВерсияДанных 	 = Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


#КонецОбласти

#Область ПроверкаПубликуемыхОбъектов

Процедура ПроверитьЗаполнениеПубликуемыхОбъектов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
	МассивФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	ПроверитьЗаполнениеСвойствФизическихЛиц(МассивФизическихЛиц);
	
КонецПроцедуры


Процедура ПроверитьЗаполнениеСвойствФизическихЛиц(МассивФизическихЛиц) Экспорт
	
	Если МассивФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации В(&ФизическиеЛица)";
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущиеОшибки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ТекущиеОшибки.Вставить(Выборка.ОбъектПубликации, Истина);
	КонецЦикла;
	
	ПроверяемыеДанные = "Пол,Фамилия,ТелефонМобильныйПредставление,EMailПредставление";
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивФизическихЛиц, ПроверяемыеДанные);
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонПодстроки = "%1" + Символы.ПС + "%2";
	
	Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		ЕстьОшибки = Ложь;
		ОписаниеОшибки = "";
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Пол) Тогда
			ЕстьОшибки = Истина;
			ОписаниеОшибки = НСтр("ru = 'Не указан пол'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Фамилия) Тогда
			ЕстьОшибки = Истина;
			Описание = НСтр("ru = 'Не указана фамилия'");
			ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки),Описание,СтрШаблон(ШаблонПодстроки, ОписаниеОшибки, Описание));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ТелефонМобильныйПредставление) И Не ЗначениеЗаполнено(СтрокаТЗ.EMailПредставление) Тогда
			ЕстьОшибки = Истина;
			Описание = НСтр("ru = 'Необходимо указать мобильный телефон или адрес электронной почты'");
			ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки),Описание,СтрШаблон(ШаблонПодстроки, ОписаниеОшибки, Описание));
		Иначе
			Если ЗначениеЗаполнено(СтрокаТЗ.ТелефонМобильныйПредставление) Тогда
				Если МобильныйТелефонУказанСОшибкой(СтрокаТЗ.ТелефонМобильныйПредставление) Тогда
					ЕстьОшибки = Истина;
					Описание = НСтр("ru = 'Мобильный телефон указан некорректно'");
					ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки),Описание,СтрШаблон(ШаблонПодстроки, ОписаниеОшибки, Описание));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
			Запись.ЕстьОшибки = Истина;
			Запись.ОписаниеОшибки = ОписаниеОшибки;
			Запись.Записать();
		ИначеЕсли ТекущиеОшибки[СтрокаТЗ.ФизическоеЛицо] <> Неопределено Тогда
			Запись = РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьМенеджерЗаписи();
			Запись.ОбъектПубликации = СтрокаТЗ.ФизическоеЛицо;
			Запись.Удалить();
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция МобильныйТелефонУказанСОшибкой(ТелефонСтрокой)
	
	ЕстьОшибка = Ложь;
	
	РазрешенныеСимволы = "- ()+0123456789";
	ТелефонЦифры = "";
	Для Сч=1 По СтрДлина(ТелефонСтрокой) Цикл
		ОчереднойСимвол = Сред(ТелефонСтрокой, Сч, 1);
		Если СтрНайти(РазрешенныеСимволы, ) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		ТелефонЦифры = ТелефонЦифры + ОчереднойСимвол;
	КонецЦикла;
	
	Если Лев(ТелефонСтрокой, 1) = "+" Тогда
		// код страны должен начинаться цифрой и не равен нулю
		Если СтрНайти("123456789", Сред(ТелефонСтрокой, 2, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(ТелефонЦифры) < 10 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ИменаСобытийЖурналаРегистрации

Функция НазваниеГруппыСобытийЖР()
	
	Возврат НСтр("ru = '1С:Кабинет сотрудника'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияЖРПолучениеИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Получение изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПередачаИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Публикация изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРУдалениеДанных()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Удаление данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРРегистрацияИзменений()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Регистрация изменений'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПубликацияРасчетныхЛистов()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Публикация расчетных листов'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРСостояниеСервиса()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Проверка состояния сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРПроверкаИспользуемойФункциональности()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Проверка используемой функциональности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияПротоколЗапрос() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол запрос'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПротоколОтвет() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол ответ'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияМенеджера() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Менеджер сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияОтключениеСервиса() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Отключение сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияЖРАутентификации() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПодключениеСервиса()
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Подключение сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияЖРНарушениеПравДоступа() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Нарушение прав доступа'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Процедура ЗаписатьОшибкуВызова(ИмяСобытияЖР, СтруктураАдресаПриложения, Метод, HTTPЗапрос, HTTPОтвет = Неопределено, ОписаниеОшибки = Неопределено)
	
	ЭтоПередачаФайла = (СтрНайти(HTTPЗапрос.АдресРесурса, РесурсФайлы()) > 0);
	
	АдресСервера = СтрШаблон( "%1://%2", СтруктураАдресаПриложения.Схема, СтруктураАдресаПриложения.ИмяСервера);
	
	ЗапросТекст = Метод + " " + АдресСервера + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		Если Не ЭтоПередачаФайла Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОписаниеОшибки = Неопределено Тогда
		ОтветТекст = ОтветТекст + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВыгрузкиИзменений(ТипИзменений, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при выгрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ТипИзменений, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПередачаИзменений(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЗагрузкиИзменений(ТипИзменений, ОписаниеОшибки)
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при загрузке %1
	|Описание ошибки:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, ТипИзменений, ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖРПолучениеИзменений(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, HTTPЗапрос)

	ЭтоПередачаФайла = (СтрНайти(HTTPЗапрос.АдресРесурса, РесурсФайлы()) > 0);
	
	АдресСервера = СтрШаблон( "%1://%2", ПараметрыПодключения.СтруктураАдресаПриложения.Схема, ПараметрыПодключения.СтруктураАдресаПриложения.ИмяСервера);
	
	ЗапросТекст = ИмяМетода + " " + АдресСервера + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	ТелоЗапроса = "";
	Если Не ЭтоПередачаФайла Тогда
		ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
		
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(ИмяСобытияПротоколЗапрос(), УровеньЖурналаРегистрации.Информация,,,Комментарий);	

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыПодключения, ИмяМетода, HTTPЗапрос, HTTPОтвет)

	ЭтоПередачаФайла = (СтрНайти(HTTPЗапрос.АдресРесурса, РесурсФайлы()) > 0);
	
	АдресСервера = СтрШаблон( "%1://%2", ПараметрыПодключения.СтруктураАдресаПриложения.Схема, ПараметрыПодключения.СтруктураАдресаПриложения.ИмяСервера);
	
	ЗапросТекст = ИмяМетода + " " + АдресСервера + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		Если Не ЭтоПередачаФайла Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если ЗначениеЗаполнено(ТелоОтвета) Тогда
				ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИмяСобытияПротоколОтвет(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры

Функция ПодробностиВЖурналеРегистрации()

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.'");

КонецФункции

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступнаПубликацияРасчетныхЛистков() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РасчетныеЛисткиКабинетСотрудника);

КонецФункции

#КонецОбласти

Функция НовоеHTTPСоединение(СтруктураURI, Таймаут = 100)
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Или ВРег(СтруктураURI.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	Возврат Соединение;
	
КонецФункции

// Процедура регламентного задания ОбменССервисомКабинетСотрудника
//
Процедура ОбменССервисомКабинетСотрудника() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника);
	Если ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗаданияПубликации()) Тогда
		Возврат;
	КонецЕсли;
	
	СервисКабинетСотрудникаВЛокальнойСети = Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить();
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();

	Если Настройки.СервисЗаблокирован Тогда
		// Сервис заблокирован.
		Возврат;
	КонецЕсли;
	
	Если Не Настройки.ВыполнятьРегламентноеЗадание Тогда
		// Реализации паузы первого запуска регламентного задания.
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.ВключитьВыполнениеРегламентногоЗадания();
		Возврат;
	КонецЕсли;
	
	Если Не СервисКабинетСотрудникаВЛокальнойСети И Не Настройки.ТестовыйТарифАктивирован Тогда
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			КабинетСотрудникаМенеджерСервиса.АктивироватьТестовыйТариф();
		КонецЕсли;
	ИначеЕсли Не СервисКабинетСотрудникаВЛокальнойСети И Не Настройки.СообщениеОбАктивацииТестовогоТарифаОтправлено Тогда
		КабинетСотрудникаМенеджерСервиса.ОтправитьСообщениеОбАктивацииТестовогоТарифа();
	КонецЕсли;
	
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновитьНастройкиФункциональностиСервиса();
	КонецЕсли;
		
	БылиОшибки = Ложь;
	Попытка
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений());
		ОпубликоватьИзменения(ПараметрыПодключения, БылиОшибки);
		
		ПараметрыПодключения.ИмяСобытияЖР = ИмяСобытияЖРУдалениеДанных();
		ОпубликоватьУдалениеДанных(ПараметрыПодключения, БылиОшибки);
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПолучениеИзменений());
		ЗагрузитьИзмененияИзСервиса(ПараметрыПодключения, БылиОшибки);
		
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обмен данными с сервисом 1С:Кабинет сотрудника завершен с ошибками.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеПубликацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал публикацию.
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновитьНастройкиФункциональностиСервиса();
	КонецЕсли;
	
	ОтложенноеОбновлениеСписковПубликуемыхОбъектов();
	
	БылиОшибки = Ложь;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляСервисаКабинетСотрудника");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		КабинетСотрудникаВнутренний.ДобавитьЭлементыБлокировкиПриОбновленииПубликации(Блокировка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛицаКабинетСотрудника";
		ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПубликуемыеОбъекты.ОбъектПубликации КАК ОбъектПубликации
		|ИЗ
		|	РегистрСведений.ПубликуемыеОбъектыКабинетСотрудника КАК ПубликуемыеОбъекты";
		ПрочиеПубликуемыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектПубликации");
		
		НаборЗаписейИзменения = РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписейВычеты    = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		Для каждого ОбъектПубликации Из ФизическиеЛица Цикл
			ЗаписьНабора = НаборЗаписейИзменения.Добавить();
			ЗаписьНабора.ПредметПубликации = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			ЗаписьНабора = НаборЗаписейВычеты.Добавить();
			ЗаписьНабора.ФизическоеЛицо = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		Для каждого ОбъектПубликации Из ПрочиеПубликуемыеОбъекты Цикл
			ЗаписьНабора = НаборЗаписейИзменения.Добавить();
			ЗаписьНабора.ПредметПубликации = ОбъектПубликации;
			ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		
		НаборЗаписейИзменения.Записать();
		НаборЗаписейВычеты.Записать();
		
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеПубликуемыхОбъектов(ПрочиеПубликуемыеОбъекты);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖРРегистрацияИзменений(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	
	Попытка
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений());
		ОпубликоватьИзменения(ПараметрыПодключения, БылиОшибки);
		
		ПараметрыПодключения.ИмяСобытияЖР = ИмяСобытияЖРУдалениеДанных();
		ОпубликоватьУдалениеДанных(ПараметрыПодключения, БылиОшибки);

	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обновление публикации в сервисе 1С:Кабинет сотрудника завершено с ошибками.'");
	КонецЕсли;

КонецПроцедуры

Функция ФизическиеЛицаОрганизаций(Месяц, МенеджерВременныхТаблиц)
	
	ФизическиеЛицаПоОрганизациям = Новый Соответствие;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоМесяца(Месяц);
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(Месяц);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиКПубликации КАК ПубликуемыеСотрудники
	|		ПО СотрудникиОрганизации.ФизическоеЛицо = ПубликуемыеСотрудники.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СписокФизическихЛиц = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() > 0 Тогда
			ФизическиеЛицаПоОрганизациям.Вставить(Выборка.Организация, СписокФизическихЛиц);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	Запрос.Выполнить();
	
	Возврат ФизическиеЛицаПоОрганизациям;
	
КонецФункции

Процедура ОчиститьДанныеПриОтключенииСервиса() Экспорт
	
	Константы.РегистрироватьВЖурналеСобытийЗапросы.Установить(Ложь);
	Константы.ВерсияИзмененийКабинетСотрудника.Установить(0);
	РегистрыСведений.ПравилаПубликацииКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ФизическиеЛицаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ПубликуемыеОбъектыКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.СотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ОбъектыДляУдаленияИзСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	
	КабинетСотрудникаВнутренний.ОчиститьДанныеПриОтключенииСервиса();
	
КонецПроцедуры

Процедура ВключитьНастройкиПрограммыПослеПодключенияСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	КонецЕсли;
	БизнесПроцессыЗаявокСотрудников.ИнициализироватьРолиИсполнителей();
	
	Попытка
		КабинетСотрудникаВнутренний.ОбновитьСтруктуруПредприятия();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ИмяСобытия = НазваниеГруппыСобытийЖР() + НСтр("ru = 'Не удалось обновить структуру предприятия'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
		
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	БизнесПроцессыЗаявокСотрудников.НачальноеЗаполнениеИсполнителейЗадач(ТекущийПользователь);
	
КонецПроцедуры

Функция КлючФоновогоЗаданияПубликации() Экспорт

	Возврат "ПубликацияВСервисе";

КонецФункции

Функция ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

Процедура ВыполнитьПубликациюПослеПодключенияКСервисуВФоне(ПериодыРасчетныхЛистков) Экспорт
	
	Попытка
		
		ПроверитьЗаполнениеПубликуемыхОбъектов();
		
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПередачаИзменений());
		ОпубликоватьИзменения(ПараметрыПодключения, Ложь);
		
		Если ПериодыРасчетныхЛистков.Количество() > 0 Тогда
			ОпубликоватьВсеРасчетныеЛисткиЗаПериоды(ПериодыРасчетныхЛистков);
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ПараметрыПодключения.ИмяСобытияЖР,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
		
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ИнициализироватьРолиИсполнителейЗадач(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьБизнесПроцессыИЗадачи.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	РолиИсполнителей = Новый Массив;
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РолиИсполнителей", РолиИсполнителей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Ссылка В(&РолиИсполнителей)
	|	И (НЕ РолиИсполнителей.ИспользуетсяСОбъектамиАдресации
	|			ИЛИ НЕ РолиИсполнителей.ИспользуетсяБезОбъектовАдресации
	|			ИЛИ РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации))";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.РолиИсполнителей", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РольИсполнителя = Выборка.Ссылка.ПолучитьОбъект();
		РольИсполнителя.ИспользуетсяСОбъектамиАдресации 	= Истина;
		РольИсполнителя.ИспользуетсяБезОбъектовАдресации 	= Истина;
		РольИсполнителя.ТипыОсновногоОбъектаАдресации 		= ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РольИсполнителя);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПубликациюПравНаВычеты(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновления
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновления.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛицаДляОбновления.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ОбработкаВыполнена Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "ПроверкаСостоянияСервисаКабинетСотрудника");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Не ЗначениеЗаполнено(Задания) Или Задания[0].Использование Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура УстановитьВерсияИзмененийКабинетСотрудника() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УдалитьВерсииЗаявокКабинетСотрудника.ВерсияИзменений) КАК ВерсияИзменений
	|ИЗ
	|	РегистрСведений.УдалитьВерсииЗаявокКабинетСотрудника КАК УдалитьВерсииЗаявокКабинетСотрудника";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Константы.ВерсияИзмененийКабинетСотрудника.Получить() <> Выборка.ВерсияИзменений Тогда
			Константы.ВерсияИзмененийКабинетСотрудника.Установить(Выборка.ВерсияИзменений);
		КонецЕсли;
		РегистрыСведений.УдалитьВерсииЗаявокКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияСервиса

// Процедура регламентного задания ПроверкаСостоянияСервисаКабинетСотрудника
Процедура ПроверкаСостоянияСервиса() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	
	ИСДоступна = СостояниеИнформационнойСистемы();
	Если ИСДоступна = Неопределено Тогда
		// Не удалось получить информацию о состоянии ИС.
		Возврат;
	КонецЕсли;
	
	СервисЗаблокирован = Не ИСДоступна;
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСостояниеБлокировкиСервиса(СервисЗаблокирован);

КонецПроцедуры

Функция СостояниеИнформационнойСистемы() Экспорт

	ИСДоступна = Неопределено;
	
	РесурсСервиса = "/api/application/access";
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРСостояниеСервиса());
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	
	Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		СостояниеДоступа = ОбъектОтвета["infosystemAccess"];
		Если ЗначениеЗаполнено(СостояниеДоступа) Тогда
			ИСДоступна = (СостояниеДоступа <> "denied"); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИСДоступна;

КонецФункции 

#КонецОбласти

#Область УправлениеИспользуемойФункциональности

Функция ОбновитьНастройкиФункциональностиСервиса() Экспорт

	Отказ = Ложь;
	Результат = Новый Структура("СообщениеОбОшибке");
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ВерсияПриложения = Настройки.ВерсияПриложения;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПриложения, "2.0.3.0") < 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ТекущиеИспользуемыеФункции();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТребуетсяОбновитьДоступнуюФункциональностьСервиса(Ответ.ИспользуемыеФункции) Тогда
		ДоступнаяФункциональностьСервиса = ДоступнаяФункциональностьСервиса();
		Ответ = УстановитьИспользуемыеФункции(ДоступнаяФункциональностьСервиса);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
		КонецЕсли;
	Иначе
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция УстановитьИспользуемыеФункции(ИспользуемыеФункции)

	Результат = Новый Структура("СообщениеОбОшибке");
	
	ТелоЗапроса = ТелоЗапросаИспользуемыеФункции(ИспользуемыеФункции);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = "/api/used-features";
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПроверкаИспользуемойФункциональности());
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT", СтрокаТела);
	
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТекущиеИспользуемыеФункции()

	Результат = Новый Структура("ИспользуемыеФункции, СообщениеОбОшибке");
	
	РесурсСервиса = "/api/used-features";
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПроверкаИспользуемойФункциональности());
	Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
	
	Если Ответ = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ИспользуемыеФункции = ИспользуемыеФункцииПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ДоступнаяФункциональностьСервиса() Экспорт

	Возврат КабинетСотрудникаВнутренний.ДоступнаяФункциональностьСервиса();

КонецФункции

Функция ТребуетсяОбновитьДоступнуюФункциональностьСервиса(ТекущаяФункциональность)

	ДоступнаяФункциональность = ДоступнаяФункциональностьСервиса();
	Для каждого ЭлементКоллекции Из ДоступнаяФункциональность Цикл
		Если ЭлементКоллекции.Значение <> ТекущаяФункциональность[ЭлементКоллекции.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция ТелоЗапросаИспользуемыеФункции(ИспользуемыеФункции)

	ТелоЗапроса = Новый Соответствие;
	ОписаниеОбъекта = ОписаниеОбъектаИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ТелоЗапроса.Вставить(ЭлементКоллекции.Ключ, ИспользуемыеФункции[ЭлементКоллекции.Значение]);
	КонецЦикла;
	
	Возврат ТелоЗапроса;

КонецФункции

Функция ИспользуемыеФункцииПоОтветуНаЗапрос(ОбъектОтвета)
	
	ОписаниеОбъекта = ОписаниеОбъектаИспользуемыеФункции();
	Описание 		= НовоеОписаниеИспользуемыеФункции();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Описание[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеОбъектаИспользуемыеФункции()

	Описание = Новый Соответствие;
	Описание.Вставить("salaryInfo", 						"ИнформацияОЗарплате");
	Описание.Вставить("taxDeductionApplication", 			"ЗаявленияНаВычетыНДФЛ");
	Описание.Вставить("absenceInfo", 						"РегистрацияОтсутствий");
	Описание.Вставить("personalReason", 					"ОтсутствиеПоЛичнымОбстоятельствам");
	Описание.Вставить("late", 								"Опоздание");
	Описание.Вставить("vacation", 							"Отпуск");
	Описание.Вставить("illness", 							"Болезнь");
	Описание.Вставить("businessTrip", 						"Командировка");
	Описание.Вставить("studyLeave", 						"УчебныйОтпуск");
	Описание.Вставить("unpaidLeave", 						"ОтпускБезОплаты");
	Описание.Вставить("timeOff", 							"Отгул");
	Описание.Вставить("maternityLeave", 					"ОтпускПоБеременностиИРодам");
	Описание.Вставить("parentalLeave", 						"ОтпускПоУходуЗаРебенком");
	Описание.Вставить("invalidChildCare", 					"УходЗаРебенкомИнвалидом");
	Описание.Вставить("vacationInfo", 						"ИнформацияОбОтпуске");
	Описание.Вставить("vacationScheduleInfo", 				"ГрафикОтпусков");
	Описание.Вставить("form2NDFLRequest", 					"ЗапросСправки2НДФЛ");
	Описание.Вставить("certificateFromEmployerRequest", 	"ЗапросСправкиСМестаРаботы");
	Описание.Вставить("employeeAddress", 					"АдресСотрудника");
	Описание.Вставить("personalContactInfo", 				"ЛичнаяКонтактнаяИнформация");
	Описание.Вставить("personalInformationChangeRequest", 	"ЗапросНаИзменениеЛичнойИнформации");
	
	Возврат Описание;

КонецФункции

Функция НовоеОписаниеИспользуемыеФункции() Экспорт

	Описание = Новый Структура;
	Описание.Вставить("ИнформацияОЗарплате");
	Описание.Вставить("ЗаявленияНаВычетыНДФЛ");
	Описание.Вставить("РегистрацияОтсутствий");
	Описание.Вставить("ОтсутствиеПоЛичнымОбстоятельствам");
	Описание.Вставить("Опоздание");
	Описание.Вставить("Отпуск");
	Описание.Вставить("Болезнь");
	Описание.Вставить("Командировка");
	Описание.Вставить("УчебныйОтпуск");
	Описание.Вставить("ОтпускБезОплаты");
	Описание.Вставить("Отгул");
	Описание.Вставить("ОтпускПоБеременностиИРодам");
	Описание.Вставить("ОтпускПоУходуЗаРебенком");
	Описание.Вставить("УходЗаРебенкомИнвалидом");
	Описание.Вставить("ИнформацияОбОтпуске");
	Описание.Вставить("ГрафикОтпусков");
	Описание.Вставить("ЗапросСправки2НДФЛ");
	Описание.Вставить("ЗапросСправкиСМестаРаботы");
	Описание.Вставить("АдресСотрудника");
	Описание.Вставить("ЛичнаяКонтактнаяИнформация");
	Описание.Вставить("ЗапросНаИзменениеЛичнойИнформации");
	
	Возврат Описание;

КонецФункции

#КонецОбласти

#Область РаботаСЛокальнымСервисом

Процедура ПодключениеКСервисуЛокальноФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СсылкаДляАдминистратора,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ВерсияПриложения = "";
	ИдентификаторПриложения = "";
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения 		= Параметры.АдресПриложения;
	Настройки.АбонентСервисаИнициализирован 				= Истина;
	Настройки.ТребуетсяОбновитьНастройкиФункциональности 	= Истина;
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьКлючиПриложенияВБезопасномХранилище(Параметры.ИдентификаторКлиента, Параметры.СекретКлиента);
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонСообщения = НСтр("ru='Подключение недоступно. Указаны неверные настройки подключения или недоступно приложение по адресу ""%1"". Обратитесь к вашему администратору.'");
	ТекстСообщенияОбОшибке = СтрШаблон(ШаблонСообщения, Параметры.АдресПриложения);
	
	// Получим токен аутентификации, это проверка правильности ввода данных настройки сервиса.
	ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияПодключениеСервиса());
	Соединение = ПараметрыПодключения.Соединение;
	Токен = ТокенАутентификации(Соединение, ПараметрыПодключения);
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Результат.СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Отказ = Истина
	КонецЕсли;
	
	// Запрос GET /application/info
	Если Не Отказ Тогда
		
		РесурсСервиса = "/api/application/info";
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
		ОтсутствуетИдентификатор = Ложь;
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			ВерсияПриложения 		= ОбъектОтвета["applicationVersion"];
			ИдентификаторПриложения = ОбъектОтвета["id"];
			Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
				ОтсутствуетИдентификатор = Истина;
				СообщениеОбОшибке = НСтр("ru='Подключение недоступно. Приложение еще не зарегистрировано, обратитесь к вашему администратору.'");
				Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Запрос PUT /application/settings
	Если Не Отказ Тогда
		
		НастройкаПриложения = Новый Соответствие;
		НастройкаПриложения.Вставить("applicationUrl", Параметры.АдресПриложения);
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, НастройкаПриложения);
		СтрокаТела = ЗаписьJSON.Закрыть();
		
		РесурсСервиса = "/api/application/settings";
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "PUT", СтрокаТела);
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
		Иначе
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Публикация ответственного
	Если Не Отказ Тогда
		БылиОшибки = ОпубликоватьОтветственноеЛицо(Параметры.Ответственный);
		Если БылиОшибки Тогда
			Результат.СообщениеОбОшибке = НСтр("ru='Не удалось опубликовать ответственное лицо.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Запрос POST /administrators
	Если Не Отказ Тогда
		
		Ответ = УстановитьАдминистратораПриложения(ПараметрыПодключения, Параметры.ОписаниеАдминистратора);
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			Результат.СсылкаДляАдминистратора = ОбъектОтвета["logonUrl"];
		Иначе
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Ключи");
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		ОбновитьНастройкиФункциональностиСервиса();
		
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Настройки.ИдентификаторПриложения 	= ИдентификаторПриложения;
		Настройки.Идентификатор 			= "local";
		Настройки.ВерсияПриложения 			= ВерсияПриложения;
		Настройки.Ответственный 			= Параметры.Ответственный;
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ОбновлениеОтветственногоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("НовыйОтветственный,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ТекстСообщенияОбОшибке = НСтр("ru='Не удалось изменить ответственное лицо.'");
	СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
	
	БылиОшибки = ОпубликоватьОтветственноеЛицо(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРПолучениеИзменений());
		Ответ = УстановитьАдминистратораПриложения(ПараметрыПодключения, Параметры.ОписаниеАдминистратора);
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			Результат.НовыйОтветственный = Параметры.Ответственный;
			Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
			Настройки.Ответственный = Параметры.Ответственный;
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
			НаборЗаписей.Записать();
		Иначе
			Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция УстановитьАдминистратораПриложения(ПараметрыПодключения, ОписаниеАдминистратора)

	ОписаниеОбъекта = Новый Соответствие();
	ОписаниеОбъекта.Вставить("personExternalID", ОписаниеАдминистратора.ФизическоеЛицо);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОписаниеОбъекта);
	СтрокаТела = ЗаписьJSON.Закрыть();
	
	РесурсСервиса = "/api/administrators";
	Возврат HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "POST", СтрокаТела);

КонецФункции

Процедура ПолучитьВерсиюПриложения()
	
	Если Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() Тогда
		
		ВерсияПриложения = Неопределено;
		ПараметрыПодключения = ПараметрыПодключения(ИмяСобытияЖРСостояниеСервиса());
		
		РесурсСервиса = "/api/application/info";
		Ответ = HTTPОтветСервиса(ПараметрыПодключения, РесурсСервиса, "GET");
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
			ВерсияПриложения = ОбъектОтвета["applicationVersion"];
		КонецЕсли;
		
		ВерсияПриложения = ?(ВерсияПриложения = Неопределено, "", ВерсияПриложения);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюПриложения(ВерсияПриложения);

	Иначе
		КабинетСотрудникаМенеджерСервиса.ПолучитьВерсиюПриложения();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти