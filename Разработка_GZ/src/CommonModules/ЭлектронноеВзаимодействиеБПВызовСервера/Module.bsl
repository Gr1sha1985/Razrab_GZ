
////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеБПВызовСервера: вспомогательные процедуры и функции БЭД
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ДиректБанк

Функция ВидимостьЭлементовДиректБанк(Организация, ДанныеБанкаСчета) Экспорт
	
	ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если ТипЗнч(ДанныеБанкаСчета) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ДанныеБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеБанкаСчета, "Банк, ВалютаДенежныхСредств");
		Банк = ДанныеБанковскогоСчета.Банк;
		ВалютаДенежныхСредств = ДанныеБанковскогоСчета.ВалютаДенежныхСредств;
	Иначе
		
		Банк = ДанныеБанкаСчета;
		
	КонецЕсли;
	
	Результат = "НеПоказывать";
	Если ВалютаДенежныхСредств <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета()
		Или Не (ЗначениеЗаполнено(Банк) И ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		
		НастройкаОбмена = Неопределено;
		
	Иначе
		
		НастройкаОбмена = ОбменСБанками.НастройкаОбмена(Организация, Банк);
		
	КонецЕсли;
	
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	РекомендуетсяПрямойОбменСБанком = Ложь;
	
	// Баннер директ-банка отображается у всех пользователей, который открыли элемент с баннером.
	// У этих пользователей может не быть доступа к банку и настройкам интеграции, поэтому
	// получать настройки интеграции нужно в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ВключенаИнтеграцияСБанком = ТипЗнч(Банк) = Тип("СправочникСсылка.Банки") И ЗначениеЗаполнено(Банк)
		И Справочники.НастройкиИнтеграцииСБанками.НастройкаИнтеграцииОрганизацииСБанком(Организация, Банк) <> Неопределено;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ВключенаИнтеграцияСБанком
		И Не ЗначениеЗаполнено(НастройкаОбмена)
		И ОбменСБанками.ВозможенПрямойОбменСБанком(БИК, 1, РекомендуетсяПрямойОбменСБанком) Тогда
		
		Результат = "ПоказатьГиперссылку";
		ВидимостьРекламы = ХранилищеОбщихНастроек.Загрузить("ВидимостьРекламыДиректБанк", БИК);
		ВидимостьРекламы = ?(ВидимостьРекламы = Неопределено, Истина, ВидимостьРекламы);
		Если ВидимостьРекламы И РекомендуетсяПрямойОбменСБанком Тогда
			
			Результат = "ПоказатьБаннер";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьНастройкуВидимостиРекламыДиректБанк(Банк, Видимость) Экспорт
	
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	ХранилищеОбщихНастроек.Сохранить("ВидимостьРекламыДиректБанк", БИК, Видимость);
	
КонецПроцедуры

// Получает данные выписки банка в текстовом формате
Функция ПолучитьДанныеВыпискиБанкаТекстовыйФормат(Знач СообщениеОбмена) Экспорт
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Организация, НастройкаОбмена, ВидЭД");
	Результат.Вставить("СсылкаНаХранилище", Неопределено);
	Результат.Вставить("МассивСчетов", Неопределено);
	
	Если НЕ Результат.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(СообщениеОбмена, Результат.СсылкаНаХранилище, Результат.МассивСчетов);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВыпискиБанкаВТекстовомФормате(Знач МассивВыписок) Экспорт
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

#КонецОбласти

#Область ЭлектронноеВзаимодействие

Функция ИмеетсяВозможностьЗагрузкиДанныхИзФайла() Экспорт
	
	Если РольДоступна("ПолныеПрава") Или РольДоступна("ДобавлениеИзменениеДанныхБухгалтерии") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ТекстОшибки = НСтр("ru = 'Выполнение операции:'")+ " " + ВидОперации + Символы.ПС + ПодробныйТекстОшибки;
	ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, КодСобытия);
	
КонецПроцедуры

Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта, ДополнительныеРеквизиты);
	
КонецФункции

Функция ЕстьПравоНастройкиЭДО() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиЭДО);
	
КонецФункции

#КонецОбласти

#Область КонвертацияФайлаВФорматФНС

Функция ОбработатьТабличныйДокументСервер(АдресФайла, РасширениеФайла, ИдентификаторФормы) Экспорт

	ВременныйФайл = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ВременныйФайл);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяВременногоФайла", ВременныйФайл);
	ПараметрыЗадания.Вставить("Расширение", РасширениеФайла);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ИдентификаторФормы, "ЭлектронноеВзаимодействиеБП.ПолучитьДанныеВФорматеБЭД", 
		ПараметрыЗадания, НСтр("ru = 'Преобразование табличного документа в формат БЭД'"));			
		
	Возврат Результат; 	 
	
КонецФункции

Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

Функция РазобратьПолученныеДанные(АдресХранилища, ИдентификаторФормы) Экспорт

	ПолученныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДанныеЭД = Новый Структура;
	Если Не ПолученныеДанные.Свойство("ТекстОшибки") Тогда
		
		ДанныеЭД.Вставить("АдресХранилища", ПоместитьВоВременноеХранилище(ПолученныеДанные.ДвоичныеДанные, ИдентификаторФормы));	
		Если ПолученныеДанные.Свойство("НомерСчФ") Тогда
			
			ДанныеЭД.Вставить("НомерСФ", ПолученныеДанные.НомерСчФ);
			ДанныеЭД.Вставить("ДатаСФ", ПолученныеДанные.ДатаСчФ);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеЭД.Вставить("ТекстОшибки", ПолученныеДанные.ТекстОшибки);
		
	КонецЕсли;		
	
	Возврат ДанныеЭД;

КонецФункции // РазобратьПолученныеДанные()

#КонецОбласти

#Область ЗагрузкаЭД

Функция ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы) Экспорт

	Возврат ЭлектронноеВзаимодействиеБП.ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы);
		
КонецФункции  

Функция СоздатьДокументИзЭД(СтруктураЭД) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.СоздатьДокументИзЭД(СтруктураЭД);
	
КонецФункции 

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция СписокНеСопоставленнойНоменклатуры(Знач Контрагент, Знач ДанныеФайлаРазбора) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.СписокНеСопоставленнойНоменклатуры(Контрагент, ДанныеФайлаРазбора);
	
КонецФункции

Функция РеквизитыНоменклатурыПоУмолчанию() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ВидНоменклатуры", Справочники.ВидыНоменклатуры.НайтиСоздатьЭлементыТовар());
	Результат.Вставить("СтавкаНДС"      , УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса()));
	Результат.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию());
	
	Возврат Результат;

КонецФункции

Функция СоздатьНоменклатуруПоДаннымКонтрагента(ДанныеНоменклатурыКонтрагента) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Создание номенклатуры по данным контрагентов'");
	
	ПараметрыПроцедуры = Новый Структура; 
	ПараметрыПроцедуры.Вставить("ДанныеНоменклатурыКонтрагента", ДанныеНоменклатурыКонтрагента);
	
 	Возврат ДлительныеОперации.ВыполнитьВФоне("ЭлектронноеВзаимодействиеБП.СоздатьНоменклатуруПоДаннымКонтрагентаВФоне",
		ПараметрыПроцедуры, ПараметрыВыполнения);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия,
														КодСобытия = 0,
														УровеньВажности = Неопределено,
														ОбъектМетаданных = Неопределено,
														ДанныеСсылка = Неопределено,
														РежимТранзакции = Неопределено)
	
	Уровень = "Общая подсистема";
	Если КодСобытия = 1 Тогда
		Уровень = "Обмен с банками";
	ИначеЕсли КодСобытия = 2 Тогда
		Уровень = "Обмен с контрагентами";
	ИначеЕсли КодСобытия = 3 Тогда
		Уровень = "Обмен с сайтами";
	ИначеЕсли КодСобытия = 4 Тогда
		Уровень = "Регламентные задания";
	КонецЕсли;
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	Шаблон = НСтр("ru = 'Электронное взаимодействие.%1'");
	ИмяСобытия = СтрЗаменить(Шаблон, "%1", Уровень);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

#КонецОбласти



