///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		НовыеРазрешения = Новый Массив;
		
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"webits.1c.ru",
			443,
			НСтр("ru = 'Сервис 1С-Такском'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Проверка возможности запуска Интернет-поддержки в соответствии с параметрами
// и местом (кнопкой) запуска. Возвращает управляющую структуру, описывающую
// действия, которые необходимо выполнить.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска (имя кнопки) механизма ИПП;
//	ПараметрыИнтернетПоддержки - Структура - параметры работы механизма
//		Интернет-поддержки.
//
// Возвращаемое значение:
// Структура - если запуск в текущем режиме работы запрещен:
//	* Действие  - Строка - действие, которое необходимо выполнить;
//	* Сообщение - Строка - если выполнение действия подразумевает показ сообщения
//						   пользователю;
// Неопределено - если запуск разрешен.
//
Функция ОпределитьВозможностьЗапускаПоМестуИПараметрам(МестоЗапуска, ПараметрыИнтернетПоддержки) Экспорт

	Результат = Неопределено;

	// Проверка возможности запуска
	ПриНачалеРаботыСистемы = ПараметрыИнтернетПоддержки.ПриНачалеРаботыСистемы;

	// Стандартная обработка при начале работы с программой
	Если ПриНачалеРаботыСистемы Тогда

		Если ПараметрыИнтернетПоддержки.РаботаВМоделиСервиса
			ИЛИ НЕ ПараметрыИнтернетПоддержки.ЗапускРазрешен Тогда
			Результат = Новый Структура("Действие", "Возврат");
		КонецЕсли;

	КонецЕсли;

	Если Результат = Неопределено Тогда

		Если ПараметрыИнтернетПоддержки.РаботаВМоделиСервиса Тогда

			Результат = Новый Структура("Действие,Сообщение",
				"ПоказатьСообщение",
				НСтр("ru = 'Использование Интернет-поддержки пользователей недоступно при работе в модели сервиса.'"));

		ИначеЕсли НЕ ПараметрыИнтернетПоддержки.ЗапускРазрешен Тогда

			Результат = Новый Структура("Действие,Сообщение",
				"ПоказатьСообщение",
				НСтр("ru = 'Недостаточно прав для запуска Интернет-поддержки пользователей. Обратитесь к администратору.'"));

		КонецЕсли;

		Если Результат = Неопределено Тогда
			
			ОписаниеДействия = Новый Структура;
			ОпределитьВозможностьЗапуска(
				МестоЗапуска,
				ПараметрыИнтернетПоддержки,
				ОписаниеДействия);

			Если ОписаниеДействия.Количество() > 0 Тогда
				Результат = ОписаниеДействия;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Результат <> Неопределено Тогда
		Результат.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверка, зарегистрирована ли конфигурация в сервисе Интернет-поддержки
// пользователей.
//
// Параметры:
//	ОшибкаДоступаКВебСервису - Булево - в параметре возвращается значение Истина,
//		если в процессе обращения к веб-сервису возникло исключение, ошибка
//		записывается в журнал регистрации;
//	ОписаниеСервисаИПП - Структура - описатель сервиса ИПП (см. функцию
//		НовыйОписаниеСервисаИПП());
//	ПараметрыИПП - Структура - параметры для работы с сервисом ИПП, полученные
//		ранее;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если конфигурация не зарегистрирована или возникло исключение
//		при обращении к сервису ИПП.
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт

	Попытка

		ОписаниеСервисаИПП = НовыйОписаниеСервисаИПП();

		// В качестве параметра метода передается имя конфигурации
		ОтветСервера = СервисИПП_isConfigurationSupported(
			ИнтернетПоддержкаПользователей.ИмяКонфигурации(),
			ОписаниеСервисаИПП);

		Возврат (ОтветСервера = Истина ИЛИ ОтветСервера = "true");

	Исключение
		ОшибкаОбращенияКВебСервису = Истина;
		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Формирует описание веб-сервиса из WSDL-документа для дальнейшей работы
// с веб-сервисом ИПП.
//
// Параметры:
// МестоположениеWSDL - Строка, Неопределено - URL расположения WSDL-документа;
//		Если не задан, тогда используется АдресWSDLСервисаБизнесПроцессов();
//
// Возвращаемое значение:
// Структура - описание соединения с сервисом ИПП:
//	* АдресWSDL - Строка - URL WSDL-документа;
//	* ТаймаутСети - Число - таймаут сетевого соединения;
//	* ФабрикаXDTO - ФабрикаXDTO - Фабрика XDTO веб-сервиса;
//	* URIСервиса - Строка - URI веб-сервиса ИПП;
//	* СоединениеПорта - HTTPСоединение - соединение с портом сервиса
//		для вызовов методов веб-сервиса;
//	* ИнтернетПрокси - ИнтернетПрокси - соединение прокси-сервера;
//	* ПараметрыПодключенияКПорту -Структура - см. функцию
//		НовыйПараметрыПолученияДокумента();
//
Функция НовыйОписаниеСервисаИПП(МестоположениеWSDL = Неопределено, Таймаут = -1) Экспорт

	Если МестоположениеWSDL = Неопределено Тогда
		МестоположениеWSDL = АдресWSDLСервисаБизнесПроцессов();
	КонецЕсли;

	ПроксиСервиса = НовыйПроксиВебСервиса(МестоположениеWSDL, Таймаут);

	Если НЕ ПустаяСтрока(ПроксиСервиса.КодОшибки) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при подключении к сервису Интернет-поддержки.'") + " "
			+ ПроксиСервиса.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("МестоположениеWSDL", МестоположениеWSDL);
	Результат.Вставить("ПроксиСервиса"     , ПроксиСервиса);
	Результат.Вставить("ФабрикаXDTO"       , ПроксиСервиса.ФабрикаXDTO);
	Результат.Вставить("URIСервиса"        , ПроксиСервиса.URIПространстваИмен);

	Результат.Вставить("ТаймаутСети", 30);

	Возврат Результат;

КонецФункции

Функция НовыйОпределенияСервиса(
	МестоположениеWSDL,
	Импорт = Ложь,
	ТаймаутПодключения = -1,
	НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДлительностьПолученияОписанияСервиса", 0);
	
	ДопПараметрыПолученияФайла = Новый Структура("ФорматОтвета, Таймаут", 1, ТаймаутПодключения);
	ДопПараметрыПолученияФайла.Вставить("НастройкиПрокси", НастройкиПрокси);
	ВремяНачалаЗагрузки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеWSDL = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		МестоположениеWSDL,
		,
		,
		ДопПараметрыПолученияФайла);
	Результат.ДлительностьПолученияОписанияСервиса =
		(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачалаЗагрузки);
	
	Если НЕ ПустаяСтрока(ОписаниеWSDL.КодОшибки) Тогда

		Результат.КодОшибки          = ОписаниеWSDL.КодОшибки;
		Результат.СообщениеОбОшибке  = ОписаниеWSDL.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка при получении WSDL-описания.'") + " "
				+ ОписаниеWSDL.ИнформацияОбОшибке;

		Возврат Результат;

	КонецЕсли;

	ТекстWSDL = ОписаниеWSDL.Содержимое;

	Попытка

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстWSDL);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);

	Исключение

		Результат.КодОшибки          = "ServerError";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при обработке WSDL-описания %1. %2'"),
				МестоположениеWSDL,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	URIСервисов = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace", "");

	Схемы         = Новый Массив;
	СервисыИПорты = Новый Массив;
	УзлыДирективыИмпорта = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "import");
	Если УзлыДирективыИмпорта.Количество() > 0 Тогда

		Для каждого УзелИмпорта Из УзлыДирективыИмпорта Цикл

			Если УзелИмпорта.URIПространстваИмен <> "http://schemas.xmlsoap.org/wsdl/" Тогда
				Продолжить;
			КонецЕсли;

			Location = ЗначениеАтрибутаУзлаDOM(УзлыДирективыИмпорта[0], "location", "");
			Если ПустаяСтрока(Location) Тогда
				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					НСтр("ru = 'Отсутствует location для директивы import.'");
				Возврат Результат;
			КонецЕсли;

			ОписаниеИмпорта = НовыйОпределенияСервиса(Location, Истина, ТаймаутПодключения, НастройкиПрокси);
			
			Результат.ДлительностьПолученияОписанияСервиса =
				Результат.ДлительностьПолученияОписанияСервиса
				+ ОписаниеИмпорта.ДлительностьПолученияОписанияСервиса;
			
			Если Не ПустаяСтрока(ОписаниеИмпорта.КодОшибки) Тогда
				Возврат ОписаниеИмпорта;
			КонецЕсли;

			// Обработка импорта
			Для каждого Схема Из ОписаниеИмпорта.Схемы Цикл
				Схемы.Добавить(Схема);
			КонецЦикла;

			Для каждого СервисИПорт Из ОписаниеИмпорта.СервисыИПорты Цикл
				СервисыИПорты.Добавить(СервисИПорт);
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

	// Создание фабрики XDTO

	УзлыОписанияТипов = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "types");
	Для каждого УзелТипов Из УзлыОписанияТипов Цикл

		УзлыСхем = УзелТипов.ПолучитьЭлементыПоИмени("http://www.w3.org/2001/XMLSchema", "schema");
		Для каждого УзелСхемы Из УзлыСхем Цикл

			Попытка
				ПостроительСхемы = Новый ПостроительСхемXML;
				СхемаДанных = ПостроительСхемы.СоздатьСхемуXML(УзелСхемы);
				Схемы.Добавить(СхемаДанных);
			Исключение

				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при обработке WSDL-описания %1. Ошибка построения схемы данных. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;

			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Если Импорт Тогда

		// Возвратить набор схем
		Результат.Вставить("Схемы", Схемы);

	Иначе

		// Создать фабрику XDTO сервиса
		Если Схемы.Количество() = 0 Тогда

			ФабрикаСервиса = Неопределено;

		Иначе

			Попытка

				НаборСхем = Новый НаборСхемXML;
				Для каждого Схема Из Схемы Цикл
					НаборСхем.Добавить(Схема);
				КонецЦикла;
				ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);

			Исключение

				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru = 'Некорректное WSDL-описание сервиса.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при обработке WSDL-описания %1. Ошибка при создании фабрики XDTO сервиса. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;

			КонецПопытки;

		КонецЕсли;

		Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);

	КонецЕсли;

	// Сервисы и порты
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "service");
	Для каждого УзелСервиса Из УзлыСервисов Цикл

		ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name", "");
		Если ПустаяСтрока(ИмяСервиса) Тогда
			Продолжить;
		КонецЕсли;

		УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "port");
		Для каждого УзелПорта Из УзлыПортов Цикл

			ИмяПорта = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name", "");
			Если ПустаяСтрока(ИмяПорта) Тогда
				Продолжить;
			КонецЕсли;

			УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/soap/", "address");
			Если УзлыАдреса.Количество() > 0 Тогда

				УзелАдреса = УзлыАдреса[0];
				АдресПорта = ЗначениеАтрибутаУзлаDOM(УзелАдреса, "location", "");
				Если НЕ ПустаяСтрока(АдресПорта) Тогда
					СервисИПорт = Новый Структура;
					СервисИПорт.Вставить("URI"           , URIСервисов);
					СервисИПорт.Вставить("Сервис"        , ИмяСервиса);
					СервисИПорт.Вставить("Порт"          , ИмяПорта);
					СервисИПорт.Вставить("Местоположение", АдресПорта);
					СервисыИПорты.Добавить(СервисИПорт);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Результат.Вставить("СервисыИПорты", СервисыИПорты);

	Возврат Результат;

КонецФункции

Функция ОпределенияСервиса(
	МестоположениеWSDL,
	ТаймаутПодключения = -1,
	НастройкиПрокси = Неопределено)

	ОписательОшибки = Неопределено;
	Попытка
		Если НастройкиПрокси = Неопределено Тогда
			Определения = Подключение1СТакскомСлужебныйПовтИсп.ОпределенияСервиса(
				МестоположениеWSDL,
				ОписательОшибки,
				ТаймаутПодключения);
		Иначе
			Определения = НовыйОпределенияСервиса(
				МестоположениеWSDL,
				,
				ТаймаутПодключения,
				НастройкиПрокси);
		КонецЕсли;
	Исключение
		Возврат ОписательОшибки;
	КонецПопытки;

	Возврат Определения;

КонецФункции

Функция НовыйПроксиВебСервиса(
	МестоположениеWSDL,
	ТаймаутПодключения = -1,
	НастройкиПрокси = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДлительностьПолученияОписанияСервиса", 0);
	
	URIПространстваИмен = Неопределено;
	ИмяСервиса          = Неопределено;
	ИмяТочкиПодключения = Неопределено;
	
	ОпределениеСервиса = ОпределенияСервиса(
		МестоположениеWSDL,
		ТаймаутПодключения,
		НастройкиПрокси);
	
	Результат.ДлительностьПолученияОписанияСервиса =
		Цел(ОпределениеСервиса.ДлительностьПолученияОписанияСервиса/1000);
	
	Если НЕ ПустаяСтрока(ОпределениеСервиса.КодОшибки) Тогда
		Результат.КодОшибки         = ОпределениеСервиса.КодОшибки;
		Результат.СообщениеОбОшибке = ОпределениеСервиса.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Ошибка при создании описания веб-сервиса.'") + " "
			+ ОпределениеСервиса.ИнформацияОбОшибке;
		Возврат Результат;
	КонецЕсли;

	НайденныйПорт = Неопределено;
	Для каждого СервисИПорт Из ОпределениеСервиса.СервисыИПорты Цикл

		Если (URIПространстваИмен = Неопределено ИЛИ СервисИПорт.URI = URIПространстваИмен)
			И (ИмяСервиса = Неопределено ИЛИ СервисИПорт.Сервис = ИмяСервиса)
			И (ИмяТочкиПодключения = Неопределено ИЛИ СервисИПорт.Порт = ИмяТочкиПодключения) Тогда
			НайденныйПорт = СервисИПорт;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если НайденныйПорт = Неопределено Тогда

		Результат.КодОшибки         = "InternalError";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не найдено определение сервиса.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при создании описания веб-сервиса %1. Определение сервиса не найдено.
					|URI пространства имен: %2;
					|Имя сервиса: %3;
					|Имя точки подключения: %4'"),
				МестоположениеWSDL,
				URIПространстваИмен,
				ИмяСервиса,
				ИмяТочкиПодключения);
		Возврат Результат;

	КонецЕсли;

	Результат.Вставить("ФабрикаXDTO"          , ОпределениеСервиса.ФабрикаXDTO);
	Результат.Вставить("АдресТочкиПодключения", НайденныйПорт.Местоположение);
	Результат.Вставить("URIПространстваИмен"  , НайденныйПорт.URI);

	Возврат Результат;

КонецФункции

// Прокси-функция для вызова метода isConfigurationSupported() веб-сервиса ИПП.
//
// Параметры:
// ИмяКонфигурации - Строка - имя текущей конфигурации;
// ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
// Булево - значение, возвращенное методом isConfigurationSupported()
//		веб-сервиса ИПП;
//
Функция СервисИПП_isConfigurationSupported(ИмяКонфигурации, ОписаниеСервисаИПП)

	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();

	ТипЗначенияСвойства = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupported",
		ОписаниеСервисаИПП);

	Если ТипЗначенияСвойства = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1).
			|Не удалось определить тип корневого свойства isConfigurationSupported.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ЗначениеXDTO = ОписаниеСервисаИПП.ФабрикаXDTO.Создать(ТипЗначенияСвойства, ИмяКонфигурации);

	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ЗначениеXDTO,
		"isConfigurationSupported",
		ОписаниеСервисаИПП.URIСервиса,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);

	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);

	ОписаниеОтветаSOAP = ОтправитьЗапросSOAP(
		ТекстКонверта,
		ОписаниеСервисаИПП.ПроксиСервиса,
		ОписаниеСервисаИПП.ТаймаутСети);

	Если НЕ ПустаяСтрока(ОписаниеОтветаSOAP.КодОшибки) Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1):'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ " " + ОписаниеОтветаSOAP.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТелоОтвета = ОписаниеОтветаSOAP.ТелоОтвета;

	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupportedResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1).
			|Не удалось определить тип корневого свойства isConfigurationSupportedResponse.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
		ТелоОтвета,
		ОписаниеСервисаИПП,
		ТипОбъекта);

	Если ОписаниеОтветаSOAP.Ошибка Тогда

		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции isConfigurationSupported сервиса (%1).'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ Символы.ПС
			+ ОписаниеОтветаSOAP.ИнформацияОбОшибке;

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Значение = ОписаниеОтветаSOAP.ВозвращенноеЗначение;

	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Прокси-функция для вызова метода process() веб-сервиса ИПП.
//
// Параметры:
//	ПараметрыЗапроса - ОбъектXDTO - параметры запроса метода process();
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ОбъектXDTO - значение, возвращенное методом process() веб-сервиса ИПП;
//
Функция СервисИПП_process(ПараметрыЗапроса, ОписаниеСервисаИПП, Таймаут = -1)

	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();

	ЗаписьКонверта.ЗаписатьНачалоЭлемента("m:processRequest");
	ЗаписьКонверта.ЗаписатьАтрибут("xmlns:m", ОписаниеСервисаИПП.URIСервиса);

	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ПараметрыЗапроса,
		"parameters",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);

	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </m:processRequest>

	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);

	ОписаниеОтветаSOAP = ОтправитьЗапросSOAP(
		ТекстКонверта,
		ОписаниеСервисаИПП.ПроксиСервиса,
		?(Таймаут = -1, ОписаниеСервисаИПП.ТаймаутСети, Таймаут));

	Если НЕ ПустаяСтрока(ОписаниеОтветаSOAP.КодОшибки) Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1):'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ " " + ОписаниеОтветаSOAP.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТелоОтвета = ОписаниеОтветаSOAP.ТелоОтвета;

	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("processResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).
			|Не удалось определить тип корневого свойства processResponse.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
		ТелоОтвета,
		ОписаниеСервисаИПП,
		ТипОбъекта);

	Если ОписаниеОтветаSOAP.Ошибка Тогда

		ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при вызове операции process сервиса (%1).'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ Символы.ПС
			+ ОписаниеОтветаSOAP.ИнформацияОбОшибке;

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Значение = ОписаниеОтветаSOAP.ВозвращенноеЗначение;

	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM - УзелDOM - узел DOM-документа;
//	ИмяАтрибута - Строка - полное имя атрибута;
//	ЗначениеЕслиНеНайдено - Произвольный - значение, которое необходимо
//		возвратить, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка - строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)

	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);

	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;

КонецФункции

// Возвращает тип значения корневого свойства пакета фабрики XDTO
// веб-сервиса ИПП.
//
// Параметры:
//	ИмяСвойства - Строка - имя корневого свойства;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ТипЗначенияXDTO, ТипОбъектаXDTO, Неопределено - возвращаемый тип корневого
//		свойства, Неопределено - если корневое свойство отсутствует.
//
Функция ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП(ИмяСвойства, ОписаниеСервисаИПП)

	Пакет            = ОписаниеСервисаИПП.ФабрикаXDTO.Пакеты.Получить(ОписаниеСервисаИПП.URIСервиса);
	КорневоеСвойство = Пакет.КорневыеСвойства.Получить(ИмяСвойства);
	Если КорневоеСвойство = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КорневоеСвойство.Тип;
	КонецЕсли;

КонецФункции

// Формирует объект тип ЗаписьXML с записанными SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML - объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP(СоответствияПространствИмен = Неопределено)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();

	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");

	Если СоответствияПространствИмен <> Неопределено Тогда
		Для каждого КлючЗначение Из СоответствияПространствИмен Цикл
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(
				КлючЗначение.Ключ,
				КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;

	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");

	Возврат ЗаписьXML;

КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта - ЗаписьXML - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка - текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта)

	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>

	Возврат ЗаписьКонверта.Закрыть();

КонецФункции

// Отправку SOAP-конверта веб-сервису ИПП и получение ответного SOAP-конверта.
//
// Параметры:
//	ТекстКонверта - Строка - текст конверта-запроса;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	Строка - текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ПроксиСервиса, Таймаут = -1, НастройкиПрокси = Неопределено)
	
	ИнтернетПоддержкаПользователей.ПроверитьURL(ПроксиСервиса.АдресТочкиПодключения);
	
	Результат = Новый Структура(
		"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, ТелоОтвета",
		"",
		"",
		Неопределено);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ФорматОтвета"            , 1);
	ДопПараметры.Вставить("Метод"                   , "POST");
	ДопПараметры.Вставить("ДанныеДляОбработки"      , ТекстКонверта);
	ДопПараметры.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметры.Вставить("Заголовки"               , Заголовки);
	ДопПараметры.Вставить("Таймаут"                 , Таймаут);
	ДопПараметры.Вставить("НастройкиПрокси"         , НастройкиПрокси);

	ОтветСервера = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		ПроксиСервиса.АдресТочкиПодключения, , , ДопПараметры);

	ЗаполнитьЗначенияСвойств(Результат, ОтветСервера, "КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	Если ПустаяСтрока(ОтветСервера.КодОшибки) Тогда
		Результат.ТелоОтвета = ОтветСервера.Содержимое;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета - Строка - тело SOAP-конверта-ответа;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//	ТипЗначения - ТипЗначенияXDTO, ТипОбъектаXDTO - тип читаемого значения;
//
// Возвращаемое значение:
//	ЗначениеXDTO, ОбъектXDTO - прочитанный ответ сервиса.
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипЗначения)

	Результат = Новый Структура;
	Результат.Вставить("Ошибка"              , Ложь);
	Результат.Вставить("СообщениеОбОшибке"   , "");
	Результат.Вставить("ИнформацияОбОшибке"  , "");
	Результат.Вставить("ВозвращенноеЗначение", Неопределено);

	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);

	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";

	Попытка

		// Переход к телу ответа
		Пока НЕ (НРег(ЧтениеОтвета.ЛокальноеИмя) = "body"
			И ЧтениеОтвета.URIПространстваИмен = URISOAP) Цикл
			Если НЕ ЧтениеОтвета.Прочитать() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// Переход к описанию объекта ответа
		ЧтениеОтвета.Прочитать();

	Исключение

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.ЛокальноеИмя) = "FAULT"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP Тогда

		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение

			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
			Результат.ИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Результат;

		КонецПопытки;

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Ошибка SOAP-сервера.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка SOAP-сервера. %1'"),
				ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения));
		Возврат Результат;

	КонецЕсли;

	Попытка
		Если ТипЗначения = Неопределено Тогда
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета);//, ТипЗначения);
		Иначе
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
		КонецЕсли;
	Исключение

		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный формат ответа.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный формат ответа SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;

	КонецПопытки;

	Результат.ВозвращенноеЗначение = Значение;

	Возврат Результат;

КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета - ЧтениеXML - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании
//		исключения SOAP;
//
// Возвращаемое значение:
// Структура - описание исключения SOAP-сервера:
//	* FaultCode - Строка - код ошибки;
//	* FaultString - Строка - строковое описание ошибки;
//	* FaultActor - Строка - источник ошибки;
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)

	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");

	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";

	Пока НЕ (ВРег(ЧтениеОтвета.ЛокальноеИмя) = "BODY"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP
		И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл

		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.ЛокальноеИмя);

			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда

				ЧтениеОтвета.Прочитать(); // Прочитать текст узла

				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;

				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента

			КонецЕсли;

		КонецЕсли;

		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ОписаниеИсключения;

КонецФункции

// Преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP - Структура - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка - пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)

	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = ИсключениеSOAP.FaultCode;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		Результат = Результат
			+ ?(ПустаяСтрока(Результат), "", " - ")
			+ ИсключениеSOAP.FaultString;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС + НСтр("ru = 'Источник ошибки:'") + " ")
			+ ИсключениеSOAP.FaultActor;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Преобразует ответ операции process() сервиса ИПП в последовательность команд
// во внутреннем представлении.
//
// Параметры:
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
// ОтветСервера - ОбъектXDTO - ответ сервиса, возвращенный операцией process();
// КонтекстОбработчика - - Структура - контекст клиент-серверного обработчика
//		команд (см. функцию НовыйКонтекстОбработчикаКоманд());
//
// Возвращаемое значение:
//	Массив - массив команд сервиса во внутреннем представлении.
//
Функция СтруктурироватьОтветСервера(
	ОсновныеПараметры,
	ОтветСервера,
	КонтекстОбработчика)

	МассивОтвета = Новый Массив;

	Попытка

		Для каждого КомандаСервера Из ОтветСервера.command Цикл

			СтруктураКоманды = Неопределено;

			ИмяТекКоманды = НРег(СокрЛП(КомандаСервера.name));

			Если ИмяТекКоманды = "ui.open" Тогда
				СтруктураКоманды = СтруктурироватьОткрытиеФормы(
					ОсновныеПараметры,
					КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.put" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.get" Тогда
				СтруктураКоманды = СтруктурироватьЧтениеПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.delete" Тогда
				СтруктураКоманды = СтруктурироватьУдалениеПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "ui.close" Тогда
				СтруктураКоманды = СтруктурироватьЗакрытиеФормы(
					ОсновныеПараметры,
					КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "system.halt" Тогда
				СтруктураКоманды = СтруктурироватьОстановкуМеханизма(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "launchservice" Тогда
				СтруктураКоманды = СтруктурироватьОтветСервераОПереходеБизнесПроцесса(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "message.show" ИЛИ ИмяТекКоманды = "question.show" Тогда
				СтруктураКоманды = СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "input.field" Тогда
				СтруктураКоманды = СтруктурироватьВводДанных(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.putorganizations" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.putadressclassifier" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "performtheaction" Тогда
				СтруктураКоманды = СтруктурированнаяКомандаВыполненияЗаданногоДействия(КомандаСервера);
				
			ИначеЕсли ИмяТекКоманды = "setcodesregion" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьПараметров(КомандаСервера);
				
			КонецЕсли;

			Если СтруктураКоманды <> Неопределено Тогда

				Если НЕ СтруктураКоманды.Свойство("ИмяКоманды") Тогда
					СтруктураКоманды.Вставить("ИмяКоманды", ИмяТекКоманды);
				КонецЕсли;

				МассивОтвета.Добавить(СтруктураКоманды);

			КонецЕсли;

			Если КонтекстОбработчика.ПроизошлаОшибка Тогда
				Возврат Неопределено;
			КонецЕсли;

		КонецЦикла;

	Исключение

		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");

		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. См. подробности в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";

		Возврат Неопределено;

	КонецПопытки;

	Если МассивОтвета.Количество() > 0 Тогда

		Для каждого СтруктураКоманды Из МассивОтвета Цикл
			СтруктураКоманды.ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));
		КонецЦикла;

		Возврат МассивОтвета;

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

// Преобразование команд "Сообщение пользователю" и "Вопрос пользователю" во
// внутреннее представление.
//
Функция СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	СписокКнопок = Новый СписокЗначений;
	ОписаниеТекКнопкиОтвета = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));

		Если ИмяТекПараметра = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "formmessage"
			ИЛИ ИмяТекПараметра = "messagetext" Тогда
			СтруктураКоманды.Вставить("ТекстСообщения", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "messagetype" ИЛИ ИмяТекПараметра = "questiontype" Тогда
			СтруктураКоманды.Вставить("Тип", НРег(СокрЛП(Строка(Параметр.value))));

		ИначеЕсли ИмяТекПараметра = "button" Тогда
			СписокКнопок.Добавить(НРег(СокрЛП(Строка(Параметр.value))));

		ИначеЕсли ИмяТекПараметра = "buttonvalue" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ЗначениеКнопки", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "buttontext" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ТекстКнопки", Строка(Параметр.value));

		КонецЕсли;

		Если ОписаниеТекКнопкиОтвета.Свойство("ЗначениеКнопки")
			И ОписаниеТекКнопкиОтвета.Свойство("ТекстКнопки") Тогда
			// Если получено описание очередной кнопки, тогда добавить ее в список кнопок
			СписокКнопок.Добавить(
				ОписаниеТекКнопкиОтвета.ЗначениеКнопки,
				ОписаниеТекКнопкиОтвета.ТекстКнопки);
			ОписаниеТекКнопкиОтвета = Новый Структура;
		КонецЕсли;

	КонецЦикла;

	Если НЕ СтруктураКоманды.Свойство("Заголовок") ИЛИ ПустаяСтрока(СтруктураКоманды.Заголовок) Тогда
		СтруктураКоманды.Вставить("Заголовок", НСтр("ru = 'Интернет-поддержка пользователей'"));
	КонецЕсли;

	Если СписокКнопок.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("Кнопки", СписокКнопок);
	КонецЕсли;

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Ввод данных" во внутреннее представление.
//
Функция СтруктурироватьВводДанных(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));

		Если ИмяТекПараметра = "caption" Тогда
			ПараметрыФормы.Вставить("ТекстЗаголовка", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "explanationtext" Тогда
			ПараметрыФормы.Вставить("ПоясняющийТекст", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "datatype" Тогда
			ПараметрыФормы.Вставить("ТипДанных", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "precision" Тогда
			ПараметрыФормы.Вставить("ТочностьЧисла", Строка(Параметр.value));

		КонецЕсли;

	КонецЦикла;

	СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Прочитать параметры" во внутреннее представление.
//
Функция СтруктурироватьЧтениеПараметров(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.type)) = "startup" Тогда
			СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.type));
		Иначе
			СтруктураПараметра = Новый Структура("Имя, БизнесПроцесс, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.bp),
				СокрЛП(Параметр.type));
		КонецЕсли;

		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры", 	МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Удалить параметры" во внутреннее представление.
//
Функция СтруктурироватьУдалениеПараметров(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
			СокрЛП(Параметр.name),
			СокрЛП(Параметр.type));

		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Открыть форму" во внутреннее представление.
//
Функция СтруктурироватьОткрытиеФормы(ОсновныеПараметры, КомандаСервера)

	СтруктураКоманды = Новый Структура;

	// Чтение общих параметров открытия формы
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(
				СокрЛП(Параметр.value),
				ОсновныеПараметры.МестоЗапуска);

			Если ПараметрыФормы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;

			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "text" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "formmessage" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "url" Тогда
			СтруктураКоманды.Вставить("УРЛ", СокрЛП(Параметр.value));
		КонецЕсли;

	КонецЦикла;

	Если СтруктураКоманды.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Преобразование команды "Закрыть форму" во внутреннее представление.
//
Функция СтруктурироватьЗакрытиеФормы(ОсновныеПараметры, КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(
				СокрЛП(Параметр.value),
				ОсновныеПараметры.МестоЗапуска);

			Если ПараметрыФормы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;

			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;

	КонецЦикла;

	Если СтруктураКоманды.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Вспомогательная функция для формирования параметров внутренней формы при
// выполнении команды "Открыть внутреннюю форму" и "Закрыть внутреннюю форму".
//
Функция ПараметрыВнутреннейФормы(ИндексФормы, МестоЗапуска)

	ПараметрыФормы = Новый Структура;

	Если ИндексФормы = "f2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ИнтернетПоддержкаПродуктаНеОказывается");

	ИначеЕсли ИндексФормы = "f4" ИЛИ ИндексФормы = "1" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ПодключениеИнтернетПоддержки");

	ИначеЕсли ИндексФормы = "f6" ИЛИ ИндексФормы = "2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ОбщаяРегНомер");

	ИначеЕсли ИндексФормы = "f7" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ОбщаяПинкод");

	ИначеЕсли ИндексФормы = "f10" ИЛИ ИндексФормы = "19" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ДополнительнаяИнформация");

	ИначеЕсли ИндексФормы = "f11" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ПодключениеИнтернетПоддержки");

	ИначеЕсли ИндексФормы = "c20" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ДействиеНеПоддерживается");

	ИначеЕсли ИндексФормы = "bh1" Тогда
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Интернет-поддержка пользователей'"));
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ВсплывающаяПодсказка");
		ПараметрыФормы.Вставить("УспешноеЗавершениеБизнесПроцесса", Истина);

	ИначеЕсли ИндексФормы = "ftx1" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.УникальныйИдентификаторАбонента");
		
	ИначеЕсли ИндексФормы = "ftx2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ЗаявкаНаРегистрациюАбонента");
		
	ИначеЕсли ИндексФормы = "ftx3" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ЛичныйКабинетАбонента");
		
	ИначеЕсли ИндексФормы = "ftx4" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.ИзменениеТарифа");
		
	ИначеЕсли ИндексФормы = "ftx5" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.Подключение1СТакском.Форма.РучнойВводУникальногоИдентификатора");
		
	Иначе
		
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", Неопределено);
		
	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

// Преобразование команды "Остановить механизм" во внутреннее представление.
//
Функция СтруктурироватьОстановкуМеханизма(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	МассивПараметров = Новый Массив;
	Попытка

		Если КомандаСервера.parameters <> Неопределено
			И КомандаСервера.parameters.parameter.Количество() > 0 Тогда

			Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

				СтруктураПараметра = Неопределено;

				Если НРег(СокрЛП(Параметр.name)) = "errorcode" Тогда
					СтруктураПараметра = Новый Структура("errorCode", СокрЛП(Параметр.value));
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;

				Если СтруктураПараметра <> Неопределено Тогда
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	Исключение
		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Изменить бизнес-процесс" во внутреннее представление.
//
Функция СтруктурироватьОтветСервераОПереходеБизнесПроцесса(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура(Параметр.name, Параметр.value);
		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Записать адресный классификатор" во
// внутреннее представление.
//
Функция СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера)

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураКоманды = Новый Структура;

	СписокСтран  = Новый СписокЗначений;
	РегионыСтран = Новый Соответствие;

	ПараметрыКоманды = КомандаСервера.parameters.parameter;

	Если ПараметрыКоманды.Количество() > 0 Тогда
		ПараметрыСписокСтран = ПараметрыКоманды[0].parameters.parameter;
	Иначе
		ПараметрыСписокСтран = Неопределено;
	КонецЕсли;

	Если ПараметрыСписокСтран <> Неопределено Тогда

		Для каждого Параметр Из ПараметрыСписокСтран Цикл

			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "country" Тогда

				НазваниеСтраны       = Строка(Параметр.value);
				ВложенныеПараметры   = Параметр.parameters.parameter;
				ИдентификаторСтраны  = Неопределено;
				СписокРегионовСтраны = Новый СписокЗначений;

				Если ВложенныеПараметры = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл

					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда

						ИдентификаторСтраны = Строка(ВложенныйПараметр.value);

					ИначеЕсли ИмяТекВлПараметра = "region" Тогда

						НазваниеРегиона            = Строка(ВложенныйПараметр.value);
						ВложенныеПараметрыРегионов = ВложенныйПараметр.parameters.parameter;
						ИдентификаторРегиона       = Неопределено;

						Если ВложенныеПараметрыРегионов = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Для каждого ВлПараметрРегиона Из ВложенныеПараметрыРегионов Цикл
							ИмяТекВлПараметраРегиона = НРег(СокрЛП(ВлПараметрРегиона.name));
							Если ИмяТекВлПараметраРегиона = "id" Тогда
								ИдентификаторРегиона = Строка(ВлПараметрРегиона.value);
								Прервать;
							КонецЕсли;
						КонецЦикла;

						Если ИдентификаторРегиона <> Неопределено Тогда
							СписокРегионовСтраны.Добавить(ИдентификаторРегиона, НазваниеРегиона);
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

				Если ИдентификаторСтраны <> Неопределено Тогда
					СписокСтран.Добавить(ИдентификаторСтраны, НазваниеСтраны);
					СписокРегионовСтраны.Вставить(0, "-1", НСтр("ru = '<не выбран>'"));
					РегионыСтран[ИдентификаторСтраны] = СписокРегионовСтраны;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СписокСтран.Вставить(0, "-1", НСтр("ru = '<не выбрана>'"));

	СтруктураКоманды.Вставить("Страны"      , СписокСтран);
	СтруктураКоманды.Вставить("РегионыСтран", РегионыСтран);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Записать данные организаций" во внутреннее
// представление.
//
Функция СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера)

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураКоманды = Новый Структура;

	СписокОрганизаций = Новый СписокЗначений;
	ДанныеОрганизаций = Новый Соответствие;
	ПараметрыКоманды  = КомандаСервера.parameters.parameter;

	ПараметрыСписокОрганизаций = Неопределено;
	Если ПараметрыКоманды.Количество() > 0 Тогда
		ВложенныеПараметрыОбъект = ПараметрыКоманды[0].parameters;
		Если ВложенныеПараметрыОбъект <> Неопределено Тогда
			ПараметрыСписокОрганизаций = ВложенныеПараметрыОбъект.parameter;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыСписокОрганизаций <> Неопределено Тогда

		Для каждого Параметр Из ПараметрыСписокОрганизаций Цикл

			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "organization" Тогда

				НазваниеОрганизации      = Строка(Параметр.value);
				ИдентификаторОрганизации = Неопределено;
				ДанныеТекОрганизации     = Новый Структура;

				Если Параметр.parameters = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ВложенныеПараметры = Параметр.parameters.parameter;

				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл

					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда
						ИдентификаторОрганизации = Строка(ВложенныйПараметр.value);
					Иначе
						ДанныеТекОрганизации.Вставить(ИмяТекВлПараметра, Строка(ВложенныйПараметр.value));
					КонецЕсли;

				КонецЦикла;

				Если ИдентификаторОрганизации <> Неопределено Тогда
					СписокОрганизаций.Добавить(ИдентификаторОрганизации, НазваниеОрганизации);
					ДанныеТекОрганизации.Вставить("НазваниеОрганизации", НазваниеОрганизации);
					ДанныеОрганизаций[ИдентификаторОрганизации] = ДанныеТекОрганизации;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СписокОрганизаций.Вставить(0, "-1", НСтр("ru = '<добавить новую организацию>'"));

	СтруктураКоманды.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураКоманды.Вставить("ДанныеОрганизаций", ДанныеОрганизаций);

	Возврат СтруктураКоманды;

КонецФункции

// Выполнение команды "Записать адресный классификатор".
//
Процедура ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды) Экспорт

	КСКонтекст.КонтекстРегистрации.Вставить("Страны"      , СтруктураКоманды.Страны);
	КСКонтекст.КонтекстРегистрации.Вставить("РегионыСтран", СтруктураКоманды.РегионыСтран);

КонецПроцедуры

// Выполнение команды "Записать данные организаций".
//
Процедура ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды) Экспорт

	КСКонтекст.КонтекстРегистрации = Новый Структура;
	КСКонтекст.КонтекстРегистрации.Вставить("СписокОрганизаций", СтруктураКоманды.СписокОрганизаций);
	КСКонтекст.КонтекстРегистрации.Вставить("ДанныеОрганизаций", СтруктураКоманды.ДанныеОрганизаций);

КонецПроцедуры

// Выполняет вызов операции process() сервиса ИПП. При вызове передаются
// необходимые параметры запроса.
//
// Параметры:
// ОпределениеWS - Структура - см. функцию НовыйОписаниеСервисаИПП().
// ПередаваемыеПараметрыЗапроса - Массив - массив элементов типа Структура:
//	* Значение - Строка, ДвоичныеДанные, Неопределено - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//	* БизнесПроцесс - Строка - имя бизнес-процесса;
// КонтекстОбработчика - Структура - см. функцию НовыйКонтекстОбработчикаКоманд();
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
//
Процедура ДобавитьКомандыСервиса(
	ОпределениеWS,
	ПередаваемыеПараметрыЗапроса,
	КонтекстОбработчика,
	ОсновныеПараметры,
	Таймаут = -1) Экспорт

	URIСервиса = ОпределениеWS.URIСервиса;

	ТипЗапроса       = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameters");
	ПараметрыЗапроса = ОпределениеWS.ФабрикаXDTO.Создать(ТипЗапроса);

	ТипОтвета        = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "ProcessResponseType");
	ОтветСервера     = ОпределениеWS.ФабрикаXDTO.Создать(ТипОтвета);

	ТипПараметр = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameter");

	// Добавление параметров запроса
	Если ПередаваемыеПараметрыЗапроса <> Неопределено Тогда

		ИндексПараметра = 0;
		ТипДвоичныеДанные = Тип("ДвоичныеДанные");
		Для каждого ПередаваемыйПараметр Из ПередаваемыеПараметрыЗапроса Цикл

			Если ТипЗнч(ПередаваемыйПараметр.Значение) <> ТипДвоичныеДанные Тогда
				ЗначениеПараметра = СокрЛП(Строка(ПередаваемыйПараметр.Значение));
			Иначе
				Попытка
					ЗначениеПараметра = ТекстВДвоичныйДанных(ПередаваемыйПараметр.Значение);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстИсключения = СтрЗаменить(НСтр("ru = 'Ошибка при преобразовании передаваемых данных. %1'"),
						"%1",
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ВызватьИсключение ТекстИсключения;
				КонецПопытки;
			КонецЕсли;

			// Определение объекта параметра (Объект XDTO).
			Параметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);

			Параметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
			Параметр.value = ЗначениеПараметра;
			Параметр.index = ИндексПараметра;

			БизнесПроцесс = Неопределено;
			ПередаваемыйПараметр.Свойство("БизнесПроцесс", БизнесПроцесс);
			Если БизнесПроцесс <> Неопределено Тогда
				Параметр.bp = СокрЛП(БизнесПроцесс);
			КонецЕсли;

			Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
				И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда
				ДобавитьВложенныеПараметры(
					Параметр,
					ПередаваемыйПараметр.ВложенныеПараметры,
					ОпределениеWS,
					ТипПараметр,
					ТипЗапроса);
			КонецЕсли;

			ПараметрыЗапроса.parameter.Добавить(Параметр);

			ИндексПараметра = ИндексПараметра + 1;

		КонецЦикла;

	КонецЕсли;

	ОтветСервера = Неопределено;

	// Выполнение метода "process" WEB-Сервиса.
	ОтветСервера = СервисИПП_process(ПараметрыЗапроса, ОпределениеWS, Таймаут);

	// Если контекста нет, то ничего не структурировать, т.к. выполнение команд не последует
	// в связи с тем, что обратная связь не требуется (используется, например, для закрытия
	// бизнес-процесса, чтобы освободить ресурсы на сервере).
	Если КонтекстОбработчика = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Преобразование ответа сервера из объекта XDTO в массив структур
	МассивСтруктурыКоманд = СтруктурироватьОтветСервера(
		ОсновныеПараметры,
		ОтветСервера,
		КонтекстОбработчика);

	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		Возврат;
	КонецЕсли;

	Если МассивСтруктурыКоманд = Неопределено ИЛИ МассивСтруктурыКоманд.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Пустой ответ сервера.'");
	КонецЕсли;

	// Вставка команд в начало стека команд
	КоличествоКомандСервера = МассивСтруктурыКоманд.Количество();
	Для ОбратныйИндекс = 1 По КоличествоКомандСервера Цикл
		КонтекстОбработчика.Команды.Вставить(0, МассивСтруктурыКоманд[КоличествоКомандСервера - ОбратныйИндекс]);
	КонецЦикла;

КонецПроцедуры

// Выполняет получение содержимого двоичных данных в виде текста.
// Параметры:
// ДвоичныеДанные - ДвоичныеДанные - двоичные данные, содержимое которых
//	необходимо получить в виде текста.
//
// Возвращаемое значение:
//	Строка - текст в двоичных данных;
//
Функция ТекстВДвоичныйДанных(ДвоичныеДанные)

	Результат = "";

	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанные.Записать(ИмяВремФайла);
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.Прочитать(ИмяВремФайла, , "");
	Результат = ТекДок.ПолучитьТекст();

	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
		Подключение1СТакскомВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Выполняет дополнительную проверку возможности запуска бизнес-процесса
// по точке входа и параметрам создания контекста взаимодействия.
//
// Параметры:
//	МестоЗапуска - Строка - точка входа бизнес-процесса.
//	ПараметрыИнтернетПоддержки - см. функцию
//		Подключение1СТакскомВызовСервера.ПараметрыСозданияКонтекста();
//	ОписаниеДействия - Структура - в структуре возвращается описание
//		выполняемого действия в случае запрета запуска бизнес-процесса.
//
Процедура ОпределитьВозможностьЗапуска(МестоЗапуска, ПараметрыИнтернетПоддержки, ОписаниеДействия)
	
	Если НЕ ПараметрыИнтернетПоддержки.ИспользоватьПодключение1СТакском Тогда
		
		ОписаниеДействия.Вставить("Действие", "ПоказатьСообщение");
		ОписаниеДействия.Вставить("Сообщение",
			НСтр("ru = 'Использование подключения 1С-Такском недоступно в текущем режиме работы.'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение параметра контекста.
//
Функция ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра) Экспорт

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	ОсновныеПараметры   = КСКонтекст.ОсновныеПараметры;

	ЗначениеПараметра = Неопределено;

	Если ИмяПараметра = "libraryVersion" Тогда
		ЗначениеПараметра = ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки();

	ИначеЕсли ИмяПараметра = "APIVersion" Тогда
		ЗначениеПараметра = Подключение1СТакскомКлиентСервер.ВерсияAPIСервисаБизнесПроцессов();

	ИначеЕсли ИмяПараметра = "versionPlatform" Тогда
		СистИнфо = Новый СистемнаяИнформация;
		ЗначениеПараметра = СистИнфо.ВерсияПриложения;

	ИначеЕсли ИмяПараметра = "nameConfiguration" Тогда
		ЗначениеПараметра = ИнтернетПоддержкаПользователей.ИмяКонфигурации();

	ИначеЕсли ИмяПараметра = "versionConfiguration" Тогда
		ЗначениеПараметра = ИнтернетПоддержкаПользователей.ВерсияКонфигурации();

	ИначеЕсли ИмяПараметра = "language" Тогда
		ЗначениеПараметра = ТекущийКодЛокализации();

	ИначеЕсли ИмяПараметра = "enterPoint" Тогда
		ЗначениеПараметра = СокрЛП(ОсновныеПараметры.МестоЗапуска);

	ИначеЕсли ИмяПараметра = "versionUpdateConfiguration" Тогда

		ЗначениеПараметра = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();

	Иначе

		ОписательПараметра = СессионныеПараметры.Получить(ИмяПараметра);
		Если ОписательПараметра <> Неопределено Тогда
			Возврат ОписательПараметра.Значение;
		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции


// Преобразование команды "performtheaction" во внутреннее представление.
//
Функция СтруктурированнаяКомандаВыполненияЗаданногоДействия(КомандаСервера)
	
	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл
		
		ИмяПараметра = НРег(СокрЛП(Параметр.name));
		Если ИмяПараметра = "action" Тогда
			
			Возврат Новый Структура("ИмяКоманды", "performtheaction." + НРег(СокрЛП(Параметр.value)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Преобразование команды "Записать параметры" во внутреннее представление.
//
Функция СтруктурироватьЗаписьПараметров(КомандаСервера)

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура;
		СтруктураПараметра.Вставить("Имя"             , СокрЛП(Параметр.name));
		СтруктураПараметра.Вставить("БизнесПроцесс"   , СокрЛП(Параметр.bp));
		СтруктураПараметра.Вставить("Значение"        , СокрЛП(Параметр.value));
		СтруктураПараметра.Вставить("ОбластьВидимости", СокрЛП(Параметр.type));
		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Возвращает URL веб-сервиса Интернет-поддержки пользователей.
//
Функция АдресWSDLСервисаБизнесПроцессов() Экспорт
	
	
	Возврат "https://webits.1c.ru/services/WebItsSimpleService?wsdl";
	
КонецФункции

// Определение имени URI веб-сервиса ИПП.
//
Функция URIСервисаСервисаБизнесПроцессов() Экспорт

	Возврат "https://ws.webits.onec.ru";

КонецФункции

// Добавляет вложенные параметры к параметрам запроса.
//
Процедура ДобавитьВложенныеПараметры(
	Параметр,
	ВложенныеПараметрыМассив,
	ОпределениеWS,
	ТипПараметр,
	ТипПараметры)

	Параметр.parameters = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметры);

	Индекс = 0;
	Для каждого ПередаваемыйПараметр Из ВложенныеПараметрыМассив Цикл

		ВложенныйПараметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);

		ВложенныйПараметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
		ВложенныйПараметр.value = СокрЛП(ПередаваемыйПараметр.Значение);
		ВложенныйПараметр.index = Индекс;

		Если ПередаваемыйПараметр.Свойство("БизнесПроцесс") Тогда
			Параметр.bp = СокрЛП(ПередаваемыйПараметр.БизнесПроцесс);
		КонецЕсли;

		Параметр.parameters.parameter.Добавить(ВложенныйПараметр);

		Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
			И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда

			ДобавитьВложенныеПараметры(
				ВложенныйПараметр,
				ПередаваемыйПараметр.ВложенныеПараметры,
				ОпределениеWS,
				ТипПараметр,
				ТипПараметры);

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьДополнительныеСтартовыеПараметрыЗапроса(КСКонтекст, ДопПараметрыЗапроса, ПараметрыЗапроса) Экспорт

	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Массив;
	КонецЕсли;

	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	Для каждого ДопПараметр Из ДопПараметрыЗапроса Цикл

		Параметр = Новый Структура;
		Параметр.Вставить("Имя"             , ДопПараметр.Имя);
		Параметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
		Параметр.Вставить("Значение"        , ДопПараметр.Значение);
		Параметр.Вставить("ОбластьВидимости", "sessionParameter");

		ПараметрыЗапроса.Добавить(Параметр);

	КонецЦикла;

	ДопПараметрыЗапроса.Очистить();

КонецПроцедуры


#КонецОбласти
