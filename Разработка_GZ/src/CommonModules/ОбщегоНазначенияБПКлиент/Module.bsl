
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает данные выбора из списка значений поля выбора.
// Поиск выполняется по всему представлению без учета регистра.
//
// Параметры:
//   СписокВыбора - СписокЗначений - список выбора
//   ПараметрыПолученияДанных - Структура - см. описание события АвтоПодбор
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ДанныеВыбораИзСписка(СписокВыбора, ПараметрыПолученияДанных) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбораДополнительно = Новый СписокЗначений;
	
	ПодстрокаПоиска = НРег(ПараметрыПолученияДанных.СтрокаПоиска);
	ДлинаПодстроки = СтрДлина(ПодстрокаПоиска);
	
	Для каждого ЭлементВыбора Из СписокВыбора Цикл
		
		Представление = ЭлементВыбора.Представление;
		Строка = НРег(Представление);
		ЧислоВхождений = СтрЧислоВхождений(Строка, ПодстрокаПоиска);
		Если ЧислоВхождений = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеПредставление = Новый Массив;
		
		ПодстрокаПоискаВНачалеСтроки = Ложь;
		
		НачальныйНомер = 1;
		Для НомерВхождения = 1 По ЧислоВхождений Цикл
			Позиция = СтрНайти(Строка, ПодстрокаПоиска, , НачальныйНомер);
			ПодстрокаПоискаВНачалеСтроки = (Позиция = 1);
			НовоеПредставление.Добавить(Сред(Представление, НачальныйНомер, Позиция - НачальныйНомер));
			НовоеПредставление.Добавить(Новый ФорматированнаяСтрока(
					Сред(Представление, Позиция, ДлинаПодстроки),
					,
					ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("РезультатУспехЦвет")));
			НачальныйНомер = Позиция + ДлинаПодстроки;
		КонецЦикла;
		
		Если НачальныйНомер <= СтрДлина(Представление) Тогда
			НовоеПредставление.Добавить(Сред(Представление, НачальныйНомер));
		КонецЕсли;
		
		Если ПодстрокаПоискаВНачалеСтроки Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, Новый ФорматированнаяСтрока(НовоеПредставление));
		Иначе
			ДанныеВыбораДополнительно.Добавить(ЭлементВыбора.Значение, Новый ФорматированнаяСтрока(НовоеПредставление));
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавляем в конец дополнительные данные
	Для Каждого ЭлементВыбора Из ДанныеВыбораДополнительно Цикл
		ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров) Экспорт

	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
	ПараметрыВыбора = Новый Структура();

	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		Если ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами") 
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

			СтандартнаяОбработка = Ложь;

			СтруктураПараметров  = Новый Структура;
			Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
				СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
				Если СписокПараметров.Свойство("Контрагент") Тогда
					СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
				КонецЕсли;
				Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
					СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
				КонецЕсли;
				Если СписокПараметров.Свойство("Дата") Тогда
					СтруктураПараметров.Вставить("Дата", Форма.Объект.Дата);
				КонецЕсли;
				Если СписокПараметров.Свойство("СчетУчета") Тогда
					СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
				КонецЕсли;
				Если СписокПараметров.Свойство("ОстаткиОбороты") Тогда
					СтруктураПараметров.Вставить("ОстаткиОбороты", СписокПараметров.ОстаткиОбороты);
				КонецЕсли;
				Если СписокПараметров.Свойство("РежимОтбораДокументов") Тогда
					СтруктураПараметров.Вставить("РежимОтбораДокументов", СписокПараметров.РежимОтбораДокументов);
				КонецЕсли;
				Если СписокПараметров.Свойство("ТипыДокументов") Тогда
					СтруктураПараметров.Вставить("ТипыДокументов", СписокПараметров.ТипыДокументов);
				Иначе
					СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);
				КонецЕсли;
			КонецЕсли;
			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
		ИначеЕсли ДанныеСчета["ВидСубконто" + Индекс] = ПредопределенноеЗначение(
			"ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии") 
			И ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"] = Элемент.ОграничениеТипа Тогда

			СтандартнаяОбработка = Ложь;

			СтруктураПараметров  = Новый Структура;
			СтруктураПараметров.Вставить("Организация", СписокПараметров.Организация);
			Если СписокПараметров.Свойство("Номенклатура") Тогда
				СтруктураПараметров.Вставить("Номенклатура", СписокПараметров.Номенклатура);
			КонецЕсли;
			Если СписокПараметров.Свойство("Склад") Тогда
				СтруктураПараметров.Вставить("Склад", СписокПараметров.Склад);
			КонецЕсли;
			Если СписокПараметров.Свойство("Дата") Тогда
				СтруктураПараметров.Вставить("КонецПериода", Форма.Объект.Дата);
			КонецЕсли;
			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетУчета", СписокПараметров.СчетУчета);
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипыДокументов", Элемент.ОграничениеТипа);

			ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
			ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПересчитатьСумму(Строка, СуммаВключаетНДС = Ложь, ЗначениеПустогоКоличества = 0, ПрименяютсяСтавки4и2 = Ложь, НалоговыйАгентПоФЗ335 = Ложь) Экспорт

	Строка.Сумма = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
	
	Если Строка.Свойство("СуммаСкидки") И Строка.Свойство("ПроцентСкидки") Тогда
		Строка.СуммаСкидки = Строка.Сумма * Строка.ПроцентСкидки / 100;
	КонецЕсли;
	
	Если Строка.Свойство("СтавкаНДС") И Строка.Свойство("Всего") Тогда
		ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС, ПрименяютсяСтавки4и2, НалоговыйАгентПоФЗ335);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС, ПрименяютсяСтавки4и2 = Ложь, НалоговыйАгентПоФЗ335 = Ложь) Экспорт
	Перем СуммаСкидки;
	
	Если Строка.Свойство("СуммаСкидки", СуммаСкидки) И СуммаСкидки > 0 Тогда
		Если Строка.Сумма > 0 Тогда
			Сумма = Строка.Сумма - Мин(СуммаСкидки, Строка.Сумма);
		Иначе
			Сумма = Строка.Сумма + Мин(СуммаСкидки, -Строка.Сумма);
		КонецЕсли; 
	Иначе
		Сумма = Строка.Сумма;
	КонецЕсли;
	
	Если НалоговыйАгентПоФЗ335 Тогда 
		Строка.СуммаНДС = 0;
	Иначе
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС, ПрименяютсяСтавки4и2));
	КонецЕсли;
	
	Строка.Всего    = Сумма + ?(СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

// Процедура вызывается из модуля формы документов при обработке оповещения
//
// Параметры:
//   Форма - Управляемая форма, для которой производится обработка оповещения
//   ДокументСсылка - ссылка на документ формы
//   ИмяСобытия - имя обрабатываемого события
//   Параметр - параметр, переданный в обработку оповещения
//   Источник - источник, переданный в обработку оповещения
Процедура ОбработкаОповещенияФормыДокумента(Форма, ДокументСсылка, ИмяСобытия, Параметр, Источник) Экспорт
	Если ИмяСобытия = "ВыполненаЗаписьДокумента" Тогда
		Если ДокументСсылка = Параметр.ДокументСсылка Тогда 
			Форма.Прочитать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

// Процедура показывает переданное сообщение в отдельной форме
// также в форме может быть отражена гиперссылка
//
// Параметры:
//  ПараметрыСообщения - Структура
//     - поля структуры:
//        - Заголовок            - Строка - текст заголовка формы
//        - Сообщение            - Строка - текст сообщения
//        - ГиперссылкаТекст     - Строка - (необязательный) представление объекта
//        - ГиперссылкаНавигация - Строка - (необязательный) навигационная ссылка объекта
//        - ГиперссылкаИмяФормы  - Строка - (необязательный) имя формы по гиперссылке
//        - ГиперссылкаПараметры - Строка - (необязательный) параметры формы по гиперссылке
//
Процедура ПоказатьСообщениеВФорме(ПараметрыСообщения) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ФормаСообщение", ПараметрыСообщения);
	
КонецПроцедуры

// Функция возвращает Истина, если при изменении даты документа требуется перечитать 
// настройки из базы данных на сервере.
//
Функция ТребуетсяВызовСервераПриИзмененииДатыДокумента(НоваяДата, ПредыдущаяДата,
			ВалютаДокумента = Неопределено, ВалютаРегламентированногоУчета = Неопределено) Экспорт
	
	Результат = (НачалоДня(НоваяДата) <> НачалоДня(ПредыдущаяДата));
	
	Если НЕ Результат
		И ЗначениеЗаполнено(ВалютаДокумента) 
		И ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		
		Если ВалютаРегламентированногоУчета <> ВалютаДокумента Тогда
			// Для валютных документов необходимо получение курсов валют на новую дату
			Результат = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, надо ли записать данные формы до выполнения над ними каких-либо команд.
Функция НадоЗаписать(Форма) Экспорт
	
	Возврат НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА УСТАНОВКИ ОСНОВНОЙ ОРГАНИЗАЦИИ
//

// Процедура устанавливает переданное значение в качестве основной организации
// текущего пользователя.
//
// Параметры
//  ОсновнаяОрганизация  - СправочникСсылка.Организации - организация,
//                         которая будет установлена в качестве основной организации.
//
Процедура УстановитьОсновнуюОрганизацию(ОсновнаяОрганизация, ПоказыватьОповещение = Истина) Экспорт

	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ОсновнаяОрганизация);
	
	Если ЗначениеЗаполнено(ОсновнаяОрганизация) И ПоказыватьОповещение Тогда
	
		ПоказатьОповещениеПользователя(НСтр("ru = 'Установлена основная организация:'"),
			ПолучитьНавигационнуюСсылку(ОсновнаяОрганизация), ОсновнаяОрганизация);
	
	КонецЕсли;
	
	Оповестить("ИзменениеОсновнойОрганизации", ОсновнаяОрганизация);

КонецПроцедуры

// Изменяет значение отбора в динамическом списке.
// Поиск производится по представлению в элементах отборов верхнего уровня.
//
// Надо анализировать возвращаемое значение - и если вернется
//  Неопределено (т.е. отбор не установлен по причине того, что в списке
//  нет отбора по основной организации (он исправлен вручную и т.п.)), то не надо
//  присваивать Неопределено специальному полю "ОтборПоОрганизации" в форме списка.
//
// Параметры
//  Список         - ДинамическийСписок - список, в котором необходимо изменить значение отбора.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция ИзменитьОтборПоОсновнойОрганизации(Список, ИмяРеквизита = "Организация", Знач ЗначениеОтбора = Неопределено) Экспорт

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, ИмяРеквизита);
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Если ТипЗнч(ЗначениеОтбора) <> Тип("СправочникСсылка.Организации")
			И ТипЗнч(ЗначениеОтбора) <> Тип("Массив")
			И ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
			ЗначениеОтбора = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив")
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ИспользованиеОтбора = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, ИмяРеквизита, ЗначениеОтбора, ВидСравненияОтбора, , ИспользованиеОтбора, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	Возврат ЗначениеОтбора;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБОЗРЕВАТЕЛЬ
//

Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, Знач Заголовок = "") Экспорт
	
	ОткрытьФорму("ОбщаяФорма.Обозреватель", 
		Новый Структура("АдресСтраницы,Заголовок", АдресСтраницы, Заголовок));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ГРУППОВОЕ ПЕРЕПРОВЕДЕНИЕ
//

// Открывает форму со списком ошибок, возникших при групповом перепроведении документов.
//
Процедура ОткрытьФормуОшибокПерепроведения(ВладелецФормы, АдресХранилищаСОшибками) Экспорт

	Если НЕ ЗначениеЗаполнено(АдресХранилищаСОшибками) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранилища", АдресХранилищаСОшибками);
	ОткрытьФорму("ОбщаяФорма.ФормаОшибокПроведения", ПараметрыФормы, ВладелецФормы, Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

// Устарела. Следует использовать ОбщегоНазначенияБПКлиентСервер.ОбработкаОтменыВыбораОрганизации()
Процедура ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация, Организация, ВключатьОбособленныеПодразделения) Экспорт
	
	ОбщегоНазначенияБПКлиентСервер.ОбработкаОтменыВыбораОрганизации(
		ПолеОрганизация,
		Организация,
		ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СоответствиеОрганизаций,
	Организация, ВключатьОбособленныеПодразделения) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Значение = СоответствиеОрганизаций[ВыбранноеЗначение];
		Если ТипЗнч(Значение) = Тип("Структура") Тогда 
			Организация = Значение.Организация;
			ВключатьОбособленныеПодразделения = Значение.ВключатьОбособленныеПодразделения;
		Иначе
			Организация = Неопределено;
			ВключатьОбособленныеПодразделения = Неопределено;
		КонецЕсли;
	Иначе
		Организация = Неопределено;
		ВключатьОбособленныеПодразделения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка, ПолеОрганизация, СоответствиеОрганизаций) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПолеОрганизация) Тогда
		Если СоответствиеОрганизаций.Свойство(ПолеОрганизация) Тогда
			Значение = СоответствиеОрганизаций[ПолеОрганизация];
			Если ТипЗнч(Значение) = Тип("Структура") Тогда				
				ПоказатьЗначение( , Значение.Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка основного интерфейса
//

Процедура ПредложитьИспользоватьОсновнойИнтерфейс(ВариантПредложения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВариантПредложения", ВариантПредложения);
	ОткрытьФорму("ОбщаяФорма.ПредложениеИспользоватьСтандартныйИнтерфейс", СтруктураПараметров);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для команд печати

Функция ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт 
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 1 Тогда 
		Возврат Новый Структура("ЗаголовокФормы", ПараметрКоманды[0]);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ВыполнитьКомандуПечатиПоУмолчанию(ОписаниеКоманды) Экспорт
	
	ОбъектыПечати = ОписаниеКоманды.ОбъектыПечати;
	СписокМакетов = ОбщегоНазначенияБПВызовСервера.ТипыПечатныхФормПоУмолчанию(ОбъектыПечати);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("ЖурналДокументов.Документы",
		СписокМакетов,
		ОбъектыПечати,
		ОписаниеКоманды.Форма,
		ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОбъектыПечати));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка актуальной версии конфигурации

Процедура ПредупредитьОНеобходимостиОбновленияПрограммы(ПараметрыРаботыКлиента) Экспорт
	
	ТекстСообщения =  НСтр("ru='Используемая сейчас версия конфигурации была выпущена более трех месяцев назад.
	|
	|За это время выпущена новая версия, в которой отражены изменения законодательства и форм отчетности. Новые версии всех конфигураций размещаются на Портале 1С:ИТС.
	|
	|'");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОткрытьОбновлениеПрограммы", Ложь);
	
	Если ПараметрыРаботыКлиента.ЭтоАдминистраторСистемы И ПараметрыРаботыКлиента.ЭтоГлавныйУзел Тогда
		
		#Если ВебКлиент Тогда
			Параметры.Вставить("ТекстСообщения", ТекстСообщения + НСтр("ru='Обновление конфигурации недоступно в веб-клиенте, рекомендуется открыть программу в тонком клиенте.'"));
			ОткрытьФорму("ОбщаяФорма.НерекомендуемаяВерсияКонфигурации", Параметры);
			Возврат;
		#КонецЕсли
		
		Параметры.Вставить("ТекстСообщения", ТекстСообщения + НСтр("ru='Вы можете обновить конфигурацию прямо сейчас.'"));
		Параметры.Вставить("ОткрытьОбновлениеПрограммы", Истина);
	Иначе
		Параметры.Вставить("ТекстСообщения", ТекстСообщения + НСтр("ru='Для обновления конфигурации обратитесь к ответственному за обновление.'"));
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НерекомендуемаяВерсияКонфигурации", Параметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие путеводителя по началу работу в 3.0

Процедура ОткрытьНачинаемРаботатьВ30(ИмяОбработки) Экспорт
	
	ОткрытьФорму("Обработка." + ИмяОбработки + ".Форма");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие формы монитора налогов и отчетов

Процедура ОткрытьМониторНалоговИОтчетности() Экспорт
	
	ОткрытьФорму("Обработка.МониторНалоговИОтчетности.Форма");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие свертки базы

Процедура ОткрытьСверткуБазы() Экспорт
	
	ОткрытьФорму("Обработка.СверткаИнформационнойБазы.Форма.Форма");
	
КонецПроцедуры

Процедура ОткрытьНалогиИОтчетыДляФормированияОстатковПоНДС(ПараметрыРаботыКлиента) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Настройки налогов и отчетов'"));
	ПараметрыОткрытия.Вставить("ИмяФормы", "ОбщаяФорма.НалогиИОтчеты");
	ПараметрыОткрытия.Вставить("ОписаниеОповещенияОЗакрытии");
	ПараметрыОткрытия.Вставить("РежимОткрытияОкна");
	ПараметрыОткрытия.Вставить("ПереопределенаНаСервере", Ложь);
	ПараметрыОткрытия.Вставить("ЗамерПроизводительности");
	ПараметрыОткрытия.Вставить("ОбработчикОткрытияФормы");
	ПараметрыОткрытия.Вставить("Владелец");
	ПараметрыОткрытия.Вставить("Уникальность");
	ПараметрыОткрытия.Вставить("Окно");
	ПараметрыОткрытия.Вставить("НавигационнаяСсылка");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ПараметрыРаботыКлиента.Организация);
	ПараметрыФормы.Вставить("ДатаНачалаВеденияРаздельногоУчетаНДС", 
		ПараметрыРаботыКлиента.ДатаНачалаВеденияРаздельногоУчетаНДС);
	ПараметрыФормы.Вставить("ФормированиеОстатковПоНДС", Истина);
	
	ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие формы оплаты сервиса

Процедура ОжидатьОткрытиеФормыОплатыСервиса(ФоновоеЗадание) Экспорт
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОткрытьОплатуСервиса", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОткрытьОплатуСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ПодпискаЗавершается = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ПодпискаЗавершается Тогда
			ОткрытьФорму("Обработка.ОплатаСервисаБП.Форма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка наличия организаций

Функция ПроверитьНаличиеОрганизаций() Экспорт
	
	РеквизитыОрганизацииЗаполнены = Истина;
	ИмяПараметра = "БухгалтерияПредприятия.РеквизитыОрганизацииЗаполнены";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Или Не ПараметрыПриложения[ИмяПараметра] Тогда
		
		Результат = ОбщегоНазначенияБПВызовСервера.НаличиеОрганизацийВУчетнойСистеме();
		РеквизитыОрганизацииЗаполнены = Результат.РеквизитыОрганизацииЗаполнены;
		ПараметрыПриложения.Вставить(ИмяПараметра, РеквизитыОрганизацииЗаполнены);
		Если Не РеквизитыОрганизацииЗаполнены Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНаличиеОрганизацийЗавершение", ЭтотОбъект);
			СписокКнопок = Новый СписокЗначений;
			Если Результат.ДоступноРедактированиеРеквизитовОрганизации Тогда
				
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить сейчас'"));
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Позже'"));
				ТекстВопроса = НСтр("ru = 'Для продолжения работы заполните свои реквизиты'");
				
			Иначе
				
				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
				ТекстВопроса = НСтр("ru = 'Не заполнены реквизиты организации. Обратитесь к администратору.'");
				
			КонецЕсли;
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыОрганизацииЗаполнены;
	
КонецФункции

Процедура ПроверитьНаличиеОрганизацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта");
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команда "Открыть" для реквизитов формы типа "Договор контрагента"
// наследует установленные параметры выбора и связи параметров выбора

Процедура ОткрытьДоговорКонтрагента(Форма, Элемент, Значение) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ТипЗнч(Элемент.СвязиПараметровВыбора) = Тип("ФиксированныйМассив") Тогда
		Для Каждого ЭлементСвязи Из Элемент.СвязиПараметровВыбора Цикл
			Если Найти(ЭлементСвязи.Имя, "Отбор.") > 0 Тогда
				ЗначенияЗаполнения.Вставить(СтрЗаменить(ЭлементСвязи.Имя, "Отбор.", ""), РазобратьПутьКДаннымФормы(Форма, ЭлементСвязи.ПутьКДанным));
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ПараметрыВыбора) = Тип("ФиксированныйМассив") Тогда
		Для Каждого ЭлементОтборов Из Элемент.ПараметрыВыбора Цикл
			Если Найти(ЭлементОтборов.Имя, "Отбор.") > 0 Тогда
				ЗначенияЗаполнения.Вставить(СтрЗаменить(ЭлементОтборов.Имя, "Отбор.", ""), ЭлементОтборов.Значение);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Значение);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции работы со списками в формах.

// Возвращает текущие данные динамического списка.
//
// Параметры:
//  Список  - <ДинамическийСписок> - динамический список.
//
// Возвращаемое значение:
//   <ДанныеФормыСтруктура>   - текущие данные списка.
//          Если в списке нет активной строки или активной является строка группировки - возвращается Неопределено.
//
Функция ТекущиеДанныеДинамическогоСписка(Список) Экспорт

	Если Список.ТекущиеДанные = Неопределено Тогда // Нет текущей строки.
		Возврат Неопределено;
	ИначеЕсли Список.ТекущиеДанные.Свойство("ГруппировкаСтроки") 
		И Список.ТекущиеДанные.ГруппировкаСтроки <> Неопределено Тогда // Это строка группировки.
		Возврат Неопределено;
	Иначе
		Возврат Список.ТекущиеДанные;
	КонецЕсли;

КонецФункции

// Устанавливает указанный статус выделенным документам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит реквизит Список.
//  СтатусДокумента - ПеречислениеСсылка - новый статус документов.
//
Процедура УстановитьСтатусыВыделенныхДокументов(Форма, СтатусДокумента) Экспорт
	
	ВыделенныеДокументы = ВыделенныеДокументы(Форма);
	Если ВыделенныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = ВыделенныеДокументы.СписокОсновныхДокументов;
	
	СтатусИзменен = ОбщегоНазначенияБПВызовСервера.УстановитьСтатусыДокументов(СписокДокументов, СтатусДокумента);
	Если Не СтатусИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ИзмененСтатусДокументов", СписокДокументов.ВыгрузитьЗначения()); // оповещение открытых форм документов
	
КонецПроцедуры

// Открывает форму, которая позволяет выбрать и установить нужный статус документам, выделенным в списке.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит реквизит Список.
//
Процедура ИзменитьСтатусыВыделенныхДокументов(Форма) Экспорт

	ВыделенныеДокументы = ВыделенныеДокументы(Форма);
	Если ВыделенныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = ВыделенныеДокументы.СписокОсновныхДокументов;
	ОткрытьФорму("ОбщаяФорма.ИзменитьСтатус",
		Новый Структура("СписокДокументов", СписокДокументов),
		Форма,
		Форма.КлючУникальности);
	
КонецПроцедуры
	
// Выводит оповещение о результате установки статуса документов.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - содержит реквизит Список.
//  СписокДокументов - СписокЗначений - ссылки на документы, которые изменили свой статус.
//  СтатусДокумента - ПеречислениеСсылка - основной статус, установленный документам.
//  ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус, установленный документам.
//
Процедура ОповеститьОбИзмененииСтатусовДокументов(Форма, СписокДокументов, СтатусДокумента, ДополнительныйСтатус = Неопределено) Экспорт
	
	Оповестить("ИзмененСтатусДокументов", СписокДокументов.ВыгрузитьЗначения()); // Оповещение открытых форм документов
	
	КоличествоДокументов = СписокДокументов.Количество();
	
	Если КоличествоДокументов > 1 Тогда
		Если СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыДокументовРеализации.Подписан") Тогда
			ПредставлениеСтатуса = НСтр("ru = 'Подписано'");
		ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыДокументовРеализации.НеПодписан") Тогда
			ПредставлениеСтатуса = НСтр("ru = 'Не подписано'");
		Иначе
			ПредставлениеСтатуса = Строка(СтатусДокумента);
		КонецЕсли;
	Иначе
		ПредставлениеСтатуса = Строка(СтатусДокумента);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДополнительныйСтатус) Тогда
		ПредставлениеСтатуса = ПредставлениеСтатуса + ", " + ДополнительныйСтатус;
	КонецЕсли;
	
	Если КоличествоДокументов = 1 Тогда
		
		ПоказатьОповещениеПользователя(ПредставлениеСтатуса,
			ПолучитьНавигационнуюСсылку(СписокДокументов[0].Значение),
			Строка(СписокДокументов[0].Значение),,
			СтатусОповещенияПользователя.Информация,
			"ОповеститьОбИзмененииСтатусовДокументов");
			
	Иначе
		
		ПредставлениеОписания = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			Нстр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документа'"), КоличествоДокументов);
		
		ПоказатьОповещениеПользователя(ПредставлениеСтатуса,
			,
			ПредставлениеОписания,,
			СтатусОповещенияПользователя.Информация,
			"ОповеститьОбИзмененииСтатусовДокументов");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие форм с ожиданием.

// В зависимости от предполагаемой производительности компьютера отрывает или сразу нужную форму, или сначала легкую
// форму "с котом", а затем тяжелую нужную форму.
//
// Параметры:
//  ПараметрыОткрытия - Структура - см. ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием() .
//  ПараметрыФормы - Структура или Неопределено - параметры, которые нужно передать в тяжелую форму.
//  ИгнорироватьСтатистику - Булево - если Истина, то открытие формы ожидания вне зависимости от статистики.
//
Процедура ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы = Неопределено,
			ИгнорироватьСтатистику = Ложь) Экспорт

	Если ИгнорироватьСтатистику Тогда
		ОжидаетсяДлительноеОткрытие = Истина;
	Иначе
		ОжидаетсяДлительноеОткрытие = ОбщегоНазначенияБПКлиентСервер.ОжидаетсяДлительноеОткрытиеФормы(ПараметрыОткрытия.ИмяФормы);
	КонецЕсли;
		
	Если ОжидаетсяДлительноеОткрытие Тогда		
		// На время ожидания откроем легкую форму "с котом".
		
		ПараметрыДлительнойФормы = Новый Структура;
		ПараметрыДлительнойФормы.Вставить("Заголовок",                 ПараметрыОткрытия.Заголовок);
		ПараметрыДлительнойФормы.Вставить("ПараметрыОткрываемойФормы", ПараметрыФормы);
		ПараметрыДлительнойФормы.Вставить("ПереопределенаНаСервере",   ПараметрыОткрытия.ПереопределенаНаСервере);
		
		ФормаОжидания = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперацияОткрытиеСписка",
			ПараметрыДлительнойФормы,
			ПараметрыОткрытия.Владелец,
			ПараметрыОткрытия.ИмяФормы,
			ПараметрыОткрытия.Окно,
			ПараметрыОткрытия.НавигационнаяСсылка);

		ФормаОжидания.ПараметрыОткрытияКлиент = ПараметрыОткрытия;
		
	Иначе // Сразу открываем большую форму.
		
		ОткрытьОсновнуюФорму(Ложь, ПараметрыОткрытия, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму, которая на малопроизводительных компьютерах может открываться долго.
//
// Параметры:
//  ОжидаетсяДлительноеОткрытие - Булево - Истина, если основная форма открыта из формы ожидания.
//  ПараметрыОткрытия - Структура - см. ПараметрыОткрытияФормы() .
//  ПараметрыФормы - Структура или Неопределено - параметры, которые нужно передать в тяжелую форму.
//
Процедура ОткрытьОсновнуюФорму(ОжидаетсяДлительноеОткрытие, ПараметрыОткрытия, ПараметрыФормы = Неопределено) Экспорт

	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	// Отключаем подписку на событие ОбработкаПолученияФормы(), если она определена для данного объекта.
	ПараметрыФормы.Вставить("ОтключитьОжиданиеПриОткрытииФорм", Истина);

	Если ПараметрыОткрытия.ЗамерПроизводительности = Истина Тогда
		// Bремя ключевой операции будет задано позже.
		ПараметрыФормы.Вставить("УИДЗамера", ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина));

	ИначеЕсли ТипЗнч(ПараметрыОткрытия.ЗамерПроизводительности) = Тип("Строка")
		И Не ПустаяСтрока(ПараметрыОткрытия.ЗамерПроизводительности) Тогда
		// Начинаем замер определенной ключевой операции.
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ПараметрыОткрытия.ЗамерПроизводительности);

	КонецЕсли;
	
	ВремяНачалаОткрытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ПараметрыОткрытия.ОбработчикОткрытияФормы <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ПараметрыОткрытия.ОбработчикОткрытияФормы, ПараметрыФормы);
		
	Иначе

		ОткрытьФорму(ПараметрыОткрытия.ИмяФормы,
			ПараметрыФормы,
			ПараметрыОткрытия.Владелец,
			ПараметрыОткрытия.Уникальность,
			ПараметрыОткрытия.Окно,
			ПараметрыОткрытия.НавигационнаяСсылка,
			ПараметрыОткрытия.ОписаниеОповещенияОЗакрытии,
			ПараметрыОткрытия.РежимОткрытияОкна);
			
	КонецЕсли;
	
	ЗамерОткрытия = Новый Структура;
	ЗамерОткрытия.Вставить("ВремяНачалаОткрытия",         ВремяНачалаОткрытия);
	ЗамерОткрытия.Вставить("ОжидаетсяДлительноеОткрытие", ОжидаетсяДлительноеОткрытие);
	ЗамерОткрытия.Вставить("ИмяФормы",                    ПараметрыОткрытия.ИмяФормы);
	
	ИмяПараметра = "БухгалтерияПредприятия.ЗамерОткрытия";
	ПараметрыПриложения.Вставить(ИмяПараметра, ЗамерОткрытия);
	ПодключитьОбработчикОжидания("Подключаемый_ДобавитьСтатистикуОткрытия", 0.1, Истина);
	
КонецПроцедуры

// Отражение проведенного замера открытия формы в общей статистике.
//
Процедура ДобавитьСтатистикуОткрытия() Экспорт
	
	ИмяПараметра = "БухгалтерияПредприятия.ЗамерОткрытия";
	ЗамерОткрытия = ПараметрыПриложения[ИмяПараметра];
	ВремяЗавершенияОткрытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяЗавершенияОткрытия - ЗамерОткрытия.ВремяНачалаОткрытия;	
	
	Если Не ЗамерОткрытия.ОжидаетсяДлительноеОткрытие
	   И Длительность <= ОбщегоНазначенияБПКлиентСервер.ПредельноеВремяОткрытияФормы() Тогда
		// Ожидаемо быстрое открытие формы.
		Возврат;
	КонецЕсли;
	
	ИмяПараметра = "БухгалтерияПредприятия.СтатистикаОткрытияФорм";
	СтатистикаОткрытияФорм = ПараметрыПриложения[ИмяПараметра];
	СохранитьСтатистику = Истина;
	Если СтатистикаОткрытияФорм = Неопределено Тогда // первый вызов первой формы за сеанс
		// Только инициализируем структуры. Время отрытия самой первой формы в сеансе не сохраняем как нерепрезентативное.
		СтатистикаОткрытияФорм = Новый Структура(
			"ОтключитьОжиданиеПриОткрытииФорм, МедленныйРежимРаботы, КоличествоОткрытий, ОткрывавшиесяФормы, ЗамерыОткрытий");
		ПараметрыПриложения.Вставить(ИмяПараметра, СтатистикаОткрытияФорм);

		// Признак, что функциональность не задействована.
		ОтключитьОжидание = ОбщегоНазначенияБПКлиентСервер.ОтключитьОжиданиеПриОткрытииФорм();
		СтатистикаОткрытияФорм.ОтключитьОжиданиеПриОткрытииФорм = ОтключитьОжидание;
		// Признак, что компьютер имеет слабые аппаратные характеристики.
		МедленныйРежимРаботы = ОбщегоНазначенияБПВызовСервера.ЭтоМедленныйРежимРаботы();
		СтатистикаОткрытияФорм.МедленныйРежимРаботы = МедленныйРежимРаботы;
		СтатистикаОткрытияФорм.КоличествоОткрытий = 0;
		// Список форм, длительности открытия которых входят в статистику.
		ОткрывавшиесяФормы = Новый Массив;
		СтатистикаОткрытияФорм.ОткрывавшиесяФормы = ОткрывавшиесяФормы;
		// Длительности и даты открытий форм.
		ЗамерыОткрытий = Новый Массив;
		СтатистикаОткрытияФорм.ЗамерыОткрытий = ЗамерыОткрытий;
		
	ИначеЕсли СтатистикаОткрытияФорм.ОтключитьОжиданиеПриОткрытииФорм Тогда
		
		СохранитьСтатистику = Ложь;
		
	Иначе
		
		ОткрывавшиесяФормы = СтатистикаОткрытияФорм.ОткрывавшиесяФормы;
		ЗамерыОткрытий = СтатистикаОткрытияФорм.ЗамерыОткрытий;
		
		// Добавим информацию текущего замера.	
		ПредыдущееОткрытие = ОткрывавшиесяФормы.Найти(ЗамерОткрытия.ИмяФормы);
		Если ПредыдущееОткрытие <> Неопределено Тогда // удалим описание предыдущего открытия этой формы

			ЗамерыОткрытий.Удалить(ПредыдущееОткрытие);
			ОткрывавшиесяФормы.Удалить(ПредыдущееОткрытие);
			
		КонецЕсли;
		
		ЗамерОткрытияСтатистика = Новый ФиксированнаяСтруктура("ДатаОткрытия, Длительность",
			ВремяЗавершенияОткрытия, Длительность);
		
		ОткрывавшиесяФормы.Вставить(0, ЗамерОткрытия.ИмяФормы);
		ЗамерыОткрытий.Вставить(0, ЗамерОткрытияСтатистика);
		СтатистикаОткрытияФорм.КоличествоОткрытий = СтатистикаОткрытияФорм.КоличествоОткрытий + 1;
		
		УдалитьНеактуальныеЗамеры(ОткрывавшиесяФормы, ЗамерыОткрытий, ВремяЗавершенияОткрытия);
		
	КонецЕсли;

	Если СохранитьСтатистику Тогда
		
		ОбщегоНазначенияБПВызовСервера.СохранитьСтатистикуОткрытияФорм(СтатистикаОткрытияФорм);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет из статистики информацию замеров, ставших неактуальными и превышающих рекомендуемый размер выборки.
//
// Параметры:
//  ОткрывавшиесяФормы - Массив - список форм, чьи замеры входят в статистику .
//  ЗамерыОткрытий - Массив - список дат и длительностей открытия форм.
//  ТекущаяДатаЗамера - Число - дата в миллисекундах, от которой отсчитывать устаревание замеров.
//
Процедура УдалитьНеактуальныеЗамеры(ОткрывавшиесяФормы, ЗамерыОткрытий, ТекущаяДатаЗамера)
	
	// Считаем, что замеры нужно удалять только при превышении количества строк в таблице более 10.
	ЖелаемоеКоличествоСтрокСтатистики = 10;
	
	КоличествоСтрокИсходное = ОткрывавшиесяФормы.Количество();
	Если КоличествоСтрокИсходное <= ЖелаемоеКоличествоСтрокСтатистики Тогда
		Возврат;
	КонецЕсли;
	
	// Сначала удалим все быстрые замеры, происходившие более 20 минут назад.
	ОтсечкаУстаревшихЗамеровПоВремени = ТекущаяДатаЗамера - ОбщегоНазначенияБПКлиентСервер.ПределОжидаемогоВытесненияИзКеша();
	ПредельнаяДлительность = ОбщегоНазначенияБПКлиентСервер.ПредельноеВремяОткрытияФормы();
	КоличествоСтрокТекущее = КоличествоСтрокИсходное;
	Для Счетчик = 1 По КоличествоСтрокИсходное Цикл
		
		ИндексФормы = КоличествоСтрокИсходное - Счетчик;
		ЗамерОткрытия = ЗамерыОткрытий[ИндексФормы];
		Если ЗамерОткрытия.Длительность > ПредельнаяДлительность
		 Или ЗамерОткрытия.ДатаОткрытия >= ОтсечкаУстаревшихЗамеровПоВремени Тогда
			Продолжить;
		КонецЕсли;
		
		ЗамерыОткрытий.Удалить(ИндексФормы);
		ОткрывавшиесяФормы.Удалить(ИндексФормы);
		КоличествоСтрокТекущее = КоличествоСтрокТекущее - 1;
		Если КоличествоСтрокТекущее <= ЖелаемоеКоличествоСтрокСтатистики Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрокИсходное = КоличествоСтрокТекущее;
	Если КоличествоСтрокИсходное <= ЖелаемоеКоличествоСтрокСтатистики Тогда
		Возврат;
	КонецЕсли;
	
	// Теперь удалим любые замеры, превышающие желаемый предел строк таблицы статистики.
	Для Счетчик = 1 По КоличествоСтрокИсходное - ЖелаемоеКоличествоСтрокСтатистики Цикл
		
		ИндексФормы = КоличествоСтрокИсходное - Счетчик;		
		ЗамерыОткрытий.Удалить(ИндексФормы);
		ОткрывавшиесяФормы.Удалить(ИндексФормы);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки синхронизации с календарем Google.

// Открывает форму настроек синхронизации списка задач с календарем Google.
// Дополнительно проверяет, что регламентное задание ОбновлениеЗадачБухгалтера включено.
//
Процедура ОткрытьФормуНастройкиСинхронизацииСКалендаремGoogle() Экспорт

	СостояниеРегЗадания = ВыполнениеЗадачБухгалтераВызовСервера.СостояниеРегламентногоЗаданияОбновленияЗадачБухгалтера();

	Если СостояниеРегЗадания.Использование Тогда
	
		ОткрытьФорму("РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle.Форма.НастройкаСинхронизацииСКалендаремGoogle");
	
	ИначеЕсли СостояниеРегЗадания.ЭтоПолноправныйПользователь Тогда

		ТекстВопроса = НСтр("ru = 'Для возможности синхронизации задач с календарем Google необходимо сначала включить регулярное обновление списка задач в программе, продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуНастройкиСинхронизацииСКалендаремGoogleЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Иначе
		// Регламентное задание отключено в базе администратором.
		ПоказатьПредупреждение(, НСтр("ru = 'Для возможности синхронизации задач с календарем Google необходимо сначала включить регулярное обновление списка задач в программе, обратитесь для этого к администратору.'"));

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с новостями

// Если для команды для раздела нет новостей программа предлагает перейти в форму всех новостей.
Процедура ЗавершитьПереопределениеСообщенияПриОтсутствииКонтекстныхНовостей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерейтиПоНавигационнойСсылке(ОбработкаНовостейКлиент.ПолучитьНавигационнуюСсылкуСпискаНовостей());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие формы со ссылками на основные разделы программы в сервисе Бизнес-Старт и Предприниматель 2015

Процедура ОткрытьНачалоРаботыВСервисе() Экспорт
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыВСервисе");
	
КонецПроцедуры

#Область ОтправкаЗаявокВSmartway

Процедура ОтправитьЗаявкуВSmartway(Организация) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЗаявкуВSmartwayЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОтправкаЗаявокВSmartway.Форма.Форма",
		Новый Структура("Организация", Организация),,,,, ОписаниеОповещения);

КонецПроцедуры

Процедура ОтправитьЗаявкуВSmartwayЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ОбщегоНазначенияБПВызовСервера.РезультатОтправкиЗаявкиВSmartway(РезультатЗакрытия);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПоказатьРезультатОтправкиЗаявкиВSmartway", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

Процедура ПоказатьРезультатОтправкиЗаявкиВSmartway(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаОтправлена = Ложь;
	Если ВРег(Результат.Статус) = ВРег("Выполнено") Тогда
		Данные = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ЗаявкаОтправлена = Данные.ЗаявкаОтправлена;
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	ЗаголовокПредупреждения = НСтр("ru = 'Отправка заявки в Smartway'");
	Если ЗаявкаОтправлена Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Спасибо, заявка отправлена! Скоро мы вам позвоним.'"),,
			ЗаголовокПредупреждения);
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Не удалось отправить заявку. Подробности в'"));
		МассивСтрок.Добавить(" ");
		Если ОбщегоНазначенияБПВызовСервера.ДоступенПросмотрЖурналаРегистрации() Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Журнале регистрации.'"),,,,
				"e1cib/app/Обработка.ЖурналРегистрации"));
		Иначе
			МассивСтрок.Добавить(НСтр("ru = 'Журнале регистрации.'"));
		КонецЕсли;
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока(МассивСтрок),,
			ЗаголовокПредупреждения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Устанавливает указанный статус оригинала счета-фактуры для выделенных документов.
//
// Параметры:
//  Форма        - УправляемаяФорма - содержит реквизит Список.
//  СтатусДокумента - ПеречислениеСсылка - новый статус документов.
//  ЭтоСписокСчетовФактур - Булево - Истина для списка полученных счетов-фактур.
//
Процедура УстановитьСтатусыОригиналаСчетаФактуры(Форма, СтатусДокумента, ЭтоСписокСчетовФактур = Ложь) Экспорт
	
	ВыделенныеДокументы = ВыделенныеДокументы(Форма, Истина);
	Если ВыделенныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСписокСчетовФактур Тогда 
		СписокСФ        = ВыделенныеДокументы.СписокОсновныхДокументов;
		СписокОснований = ВыделенныеДокументы.СписокСвязанныхДокументов;
	Иначе
		СписокСФ        = ВыделенныеДокументы.СписокСвязанныхДокументов;
		СписокОснований = ВыделенныеДокументы.СписокОсновныхДокументов;
	КонецЕсли;
	
	СтруктураСтатусов = ОбщегоНазначенияБПВызовСервера.УстановитьСтатусыОригиналаСчетовФактур(
		СписокСФ, СписокОснований, СтатусДокумента);
	
	// Оповещение открытых форм документов
	Если СтруктураСтатусов.СтатусСФИзменен Тогда 
		Оповестить("ИзмененСтатусДокументов", СписокСФ.ВыгрузитьЗначения());
	КонецЕсли;
	Если СтруктураСтатусов.СтатусОснованийИзменен Тогда 
		Оповестить("ИзмененСтатусДокументов", СписокОснований.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры

// Открывает страницу проверки "Проверьте, относится ли ваша деятельность к пострадавшим от коронавируса"
//
// Параметры:
//  ОсновнойКодОКВЭД - Строка - основной код ОКВЭД, передаваемый сервису в качестве параметра
//
Процедура ОткрытьПроверкуДеятельностиНаКоронавирус(ОсновнойКодОКВЭД) Экспорт
	
	URL = "https://its.1c.ru/anticrisis/affected";
	
	ПараметрыURL = Новый Массив;
	Если ЗначениеЗаполнено(ОсновнойКодОКВЭД) Тогда
		ПараметрыURL.Добавить(СтрШаблон("code=%1", ОсновнойКодОКВЭД));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыURL, ОбщегоНазначенияБПКлиентСервер.ИТС_ПараметрыUTM());
	
	АдресСервиса = ОбщегоНазначенияБПКлиентСервер.ДополнитьURLПараметрами(URL, ПараметрыURL);
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСервиса);
	
КонецПроцедуры

// Открывает страницу проверки включения организации в Реестр СМП
//
// Параметры:
//  ИНН - Строка - ИНН организации
//
Процедура ОткрытьПроверкуРеестрМСП(ИНН) Экспорт
	
	URL = "https://its.1c.ru/bmk/bp30/rmsp";
	
	ПараметрыURL = Новый Массив;
	Если ЗначениеЗаполнено(ИНН) Тогда
		ПараметрыURL.Добавить(СтрШаблон("inn=%1", ИНН));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыURL, ОбщегоНазначенияБПКлиентСервер.ИТС_ПараметрыUTM());
	
	АдресСервиса = ОбщегоНазначенияБПКлиентСервер.ДополнитьURLПараметрами(URL, ПараметрыURL);
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПриОткрытииПрограммы

Процедура ПослеЗапускаСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	//Если ПользователиКлиент.ЭтоСеансВнешнегоПользователя() Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПараметрыРаботыКлиентаПриЗапуске    = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	//ТекущемуПользователюСЭДОФССДоступен = ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюСЭДОФССДоступен;
	
	//ПодключениеОбработчикаОжиданияАвтообмена(ТекущемуПользователюСЭДОФССДоступен = Истина);
	
КонецПроцедуры

Процедура ОткрытьПомощникПереходаСРедакции20(Параметры, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнение", ЭтотОбъект, Параметры);
	
	ПараметрыФормы = Новый Структура("", );
	Форма = ОткрытьФорму("Обработка.ПомощникПереходаСРедакции20.Форма", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура ПоказатьРекомендуемуюВерсиюПлатформы(Параметры, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПродолжитьВыполнение", ЭтотОбъект, Параметры);
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РекомендуемаяВерсияПлатформы", ПараметрыРаботыКлиента.РекомендуемаяВерсияПлатформы);
	ПараметрыФормы.Вставить("ТекстСообщения", ПараметрыРаботыКлиента.ТекстСообщенияОРекомендуемойВерсииПлатформы);
	
	ОткрытьФорму("ОбщаяФорма.РекомендуемаяВерсияПлатформы", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура ПродолжитьВыполнение(РезультатВопроса, Параметры) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

Процедура ЗавершениеРаботыСистемы(ДополнительныеПараметры) Экспорт
	
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазобратьПутьКДаннымФормы(Источник, Путь)
	
	Если ПустаяСтрока(Путь) Тогда
		Возврат Источник;
	КонецЕсли;
	
	МассивЭлементов = СтрРазделить(Путь, ".");
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат Источник;
	КонецЕсли;
	
	ТекущийШаг = МассивЭлементов[0];
	МассивЭлементов.Удалить(0);
	НовыйПуть = СтрСоединить(МассивЭлементов, ".");
	
	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если ТекущийШаг = "Объект" Тогда
			Возврат РазобратьПутьКДаннымФормы(Источник.Объект, НовыйПуть);
		ИначеЕсли ТекущийШаг = "Элементы" Тогда
			Возврат РазобратьПутьКДаннымФормы(Источник.Элементы, НовыйПуть);
		КонецЕсли;
	ИначеЕсли ТекущийШаг = "ТекущиеДанные" Тогда
		Возврат РазобратьПутьКДаннымФормы(Источник.ТекущиеДанные, НовыйПуть);
	Иначе
		Возврат РазобратьПутьКДаннымФормы(Источник[ТекущийШаг], НовыйПуть);
	КонецЕсли;
	
	Возврат Источник;
	
КонецФункции

// Обработчик оповещения для асинхронного вопроса в процедуре ОткрытьФормуНастройкиСинхронизацииСКалендаремGoogle().
//
Процедура ОткрытьФормуНастройкиСинхронизацииСКалендаремGoogleЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтераВызовСервера.ВключитьАвтоматическоеОбновлениеЗадачБухгалтера();
	
	ОткрытьФорму("РегистрСведений.НастройкиСинхронизацииСКалендаремGoogle.Форма.НастройкаСинхронизацииСКалендаремGoogle");

КонецПроцедуры

// Формирирует список документов, выделенных в динамическом списке на форме, 
// и список документов связанных с выделенными (счета-фактуры, документы-основания).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит реквизит Список.
//  ОтбиратьСвязанныеДокументы - Булево - признак того, что нужно сформировать список документов,
//  связанных с выделенными (счета-фактуры, либо документы-основания счетов-фактур) для записи
//  статуса оригинала счета-фактуры.
// 
// Возвращаемое значение:
//   ВыделенныеДокументы - Структура с ключами:
//   *СписокОсновныхДокументов - СписокЗначений - содержит документы, из строк выделенных в списке.
//   *СписокСвязанныхДокументов - СписокЗначений - содержит список связанных с основным списком документов,
//    для которых необходимо поменять статус оригинала счета-фактуры.
//
Функция ВыделенныеДокументы(Форма, ОтбиратьСвязанныеДокументы = Ложь)
	
	Список = Форма.Элементы.Список;
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	
	СписокОсновныхДокументов  = Новый СписокЗначений;
	СписокСвязанныхДокументов = Новый СписокЗначений; 
	
	ЭтоСписокПолученныхСчетовФактур = Ложь;
	ПоказаноСообщениеПользователю   = Ложь;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущаяСтрока <> Неопределено Тогда
			ЭтоСписокПолученныхСчетовФактур = ТипЗнч(ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный");
			Если ОтбиратьСвязанныеДокументы 
				И НЕ ЭтоСписокПолученныхСчетовФактур Тогда
				// Добавляем в список документов только документы со счетами-фактурами.
				Если ТекущаяСтрока.СчетФактура = ПредопределенноеЗначение("Перечисление.СтатусыСчетаФактуры.Отсутствует")
					ИЛИ ТекущаяСтрока.СчетФактура = ПредопределенноеЗначение("Перечисление.СтатусыСчетаФактуры.НеТребуется") Тогда
					ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущаяСтрока.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ПоказаноСообщениеПользователю = Истина;
				Иначе
					СписокОсновныхДокументов.Добавить(ТекущаяСтрока.Ссылка);
				КонецЕсли;
			Иначе
				СписокОсновныхДокументов.Добавить(ТекущаяСтрока.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокОсновныхДокументов.Количество() = 0 Тогда
		Если НЕ ПоказаноСообщениеПользователю Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтбиратьСвязанныеДокументы Тогда
		
		Если ЭтоСписокПолученныхСчетовФактур Тогда
			// Необходимо получить документы-основания выделенных счетов-фактур.
			СписокСвязанныхДокументов = УчетНДСВызовСервера.СвязанныеДокументыОснованияСоСтатусомСФ(СписокОсновныхДокументов);
		Иначе
			// Необходимо получить связанные с выделенными основаниями счета-фактуры.
			СоответствиеОснованийСФ = УчетНДСВызовСервера.ПодчиненныеСчетаФактурыПолученные(СписокОсновныхДокументов);
			Для Каждого ЭлементСоответствия Из СоответствиеОснованийСФ Цикл
				СписокСвязанныхДокументов.Добавить(ЭлементСоответствия.Значение);
			КонецЦикла;
			// Переопределим список основных документов, т.к. в случае составления одного счета-фактуры к нескольким документам поступления
			// необходимо поменять статусы оригинала для нескольких записей.
			СписокОсновныхДокументов = УчетНДСВызовСервера.СвязанныеДокументыОснованияСоСтатусомСФ(СписокСвязанныхДокументов);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыделенныеДокументы = Новый Структура("СписокОсновныхДокументов, СписокСвязанныхДокументов", 
		СписокОсновныхДокументов, СписокСвязанныхДокументов);
		
	Возврат ВыделенныеДокументы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Открытие путеводителя по демо-базе

Процедура ОткрытьПутеводительПоДемоБазеПриЗапуске() Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если ЗначениеЗаполнено(ПараметрыРаботыКлиента.ИмяОбработкиПутеводительПоДемоБазе) Тогда
		ОткрытьФорму("ВнешняяОбработка."+ ПараметрыРаботыКлиента.ИмяОбработкиПутеводительПоДемоБазе +".Форма");
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие быстрый старт

Процедура ОткрытьБыстрыйСтарт(Знач ПараметрыФормы = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыФормы) = Тип("ФиксированнаяСтруктура") Тогда
		ПараметрыФормы = Новый Структура(ПараметрыФормы);
	ИначеЕсли ТипЗнч(ПараметрыФормы) <> Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.БыстрыйСтарт", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие регистрация организации

Процедура ОткрытьРегистрацияОрганизации(Знач НомерТекущегоШага = Неопределено) Экспорт
	
	НомерТекущегоШага = ?(НомерТекущегоШага = Неопределено, 1, НомерТекущегоШага);
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НомерТекущегоШага);
	
КонецПроцедуры

Процедура ОткрытьПомощникВнесенияИзменений(Знач НомерТекущегоШага = Неопределено) Экспорт
	
	РегистрацияОрганизацииКлиент.ОткрытьПомощникВнесенияИзменений();
	
КонецПроцедуры

Процедура ПоказатьСообщениеОСтарыхРеквизитахНалоговой() Экспорт
	
	ОбластиОбъектов = Новый СписокЗначений;
	
	ТабличныйДокумент = ОбщегоНазначенияБПВызовСервера.МакетСообщенияОСтарыхРеквизитахНалоговой();
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПечатнойФормы = "СообщениеОСтарыхРеквизитахНалоговой";
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Внимание!  С 06.02.2017 г. изменились реквизиты уплаты налогов и взносов'");
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'Изменились реквизиты уплаты налогов и взносов'");
	
	ОбъектыПечати = Новый СписокЗначений;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ПараметрыПечати.Вставить("ЗаголовокФормы", НСтр("ru = 'Внимание!  С 06.02.2017 г. изменились реквизиты уплаты налогов и взносов'"));
	
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, Неопределено, КлючУникальности);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие Проверки данных

Процедура ОткрытьПроверкуАналитикиСчетовУчетаКапитала() Экспорт
	
	ОткрытьФорму("Обработка.ПроверкаАналитикиСчетовУчетаКапитала.Форма");
	
КонецПроцедуры

Процедура ОткрытьПроверкуРеквизитовПлатежныхПоручений() Экспорт
	
	ОткрытьФорму("Обработка.ПроверкаРеквизитовПлатежныхПоручений.Форма");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Открытие Проверки счетов-фактур

Процедура ОткрытьПроверкуРегистрацииСчетовФактурНаАванс() Экспорт
	
	ОткрытьФорму("Обработка.ПроверкаРегистрацииСчетовФактурНаАванс.Форма");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновления

Процедура ПоказатьОбновления(ЗаголовокФормы = Неопределено) Экспорт
	
	ИмяМетаданных = "БП.РазделУчета.Обновления";
	
	Если ЗаголовокФормы = Неопределено Тогда
		ЗаголовокФормы = НСтр("ru='Обновления'");
	КонецЕсли;
	
	// По всем лентам новостей
	СписокЛентНовостей = Неопределено;
	// Отбор по новый / опытный пользователь
	//СписокЛентНовостей = ОбработкаНовостейПереопределяемыйПовтИсп.ПолучитьСписокЛентНовостейДляКонтекстныхНовостей();
	
	ОбработкаНовостейКлиент.ПоказатьКонтекстныеНовости(
		Неопределено, // ФормаВладелец
		СписокЛентНовостей, // СписокЛентНовостей
		ИмяМетаданных, // ИмяМетаданных
		"", // ИмяФормы,
		"", // ИмяСобытия
		Новый Структура("ЗаголовокФормы, СкрыватьКолонкуЛентаНовостей, СкрыватьКолонкуПодзаголовок, СкрыватьКолонкуДатаПубликации, ПоказыватьПанельНавигации, РежимОткрытияОкна",
			ЗаголовокФормы, // ЗаголовокФормы
			Ложь, // СкрыватьКолонкуЛентаНовостей
			Истина, // СкрыватьКолонкуПодзаголовок
			Ложь, // СкрыватьКолонкуДатаПубликации
			Ложь, // ПоказыватьПанельНавигации
			"Независимый" // РежимОткрытияОкна ("Независимый", "Блокировать окно владельца" (по-умолчанию), "Блокировать весь интерфейс")
		)
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отмена ЕНВД

Процедура ОткрытьФормуОтменаЕНВД(Параметры) Экспорт
	
	Если Параметры.КоличествоОрганизаций = 1 Тогда
		ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
		ПараметрыОткрытия.Заголовок = НСтр("ru = 'Настройки налогов и отчетов'");
		ПараметрыОткрытия.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты";
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Параметры.Организация);
		ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ОтменаЕНВД");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСЭДО ФСС

Процедура ПодключениеОбработчикаОжиданияАвтообмена(Подключать = Истина) Экспорт
	
	Если Подключать Тогда
		
		ПараметрыРаботыКлиентаПриЗапуске    = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
		ТекущемуПользователюСЭДОФССДоступен = ПараметрыРаботыКлиентаПриЗапуске.ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюСЭДОФССДоступен;
	
		// Проверяем, является ли текущий пользователь пользователем СЭДО ФСС
		Если ТекущемуПользователюСЭДОФССДоступен = Истина Тогда
			
			// если проверки пройдены, определяем интервал выполнения
			Интервал = 30 * 60; // 30 мин.
			ПодключитьОбработчикОжидания("ПолучитьИнформациюОВходящихСообщенияхСЭДОФСС", Интервал);
			
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикОжидания("ПолучитьИнформациюОВходящихСообщенияхСЭДОФСС");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьИнформациюОВходящихСообщенияхЗавершениеСЭДОФСС(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаРезультат = ПолучитьФорму("Документ.ИзвещениеФСС.Форма.ПоказСообщенийТребующихРасшифровки");
	ФормаРезультат.ПолучитьИОбработатьВходящиеКлиент();
	
КонецПроцедуры

#КонецОбласти