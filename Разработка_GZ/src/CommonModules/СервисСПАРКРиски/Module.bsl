///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРКРиски".
// ОбщийМодуль.СПАРКРиски.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИндексыСПАРККонтрагента

// Загружает агрегированную информацию о контрагентах и сохраняет ее в кэше.
// Предназначена для запуска в фоне.
//
// Параметры:
//  Параметры - Структура - структура с ключами:
//    * ОбластьДанных - Число - номер области данных или "-1", если ИБ работает не в модели сервиса;
//    * МассивОписанийКонтрагентов - Массив структур - список элементов, см.СПАРКРиски.НовыйОписаниеКонтрагента();
//  АдресРезультата - Строка - адрес временного хранилища, куда будет помещен результат.
//
Процедура ЗагрузитьИндексыКонтрагентовВФоне(Параметры, АдресРезультата) Экспорт

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");
	Если (ТипЗнч(Параметры) = ТипСтруктура)
			И (Параметры.Свойство("МассивОписанийКонтрагентов"))
			И (ТипЗнч(Параметры.МассивОписанийКонтрагентов) = ТипМассив) Тогда
		Результат = ЗагрузитьИндексыКонтрагентов(
			Параметры.ОбластьДанных,
			Параметры.МассивОписанийКонтрагентов,
			Неопределено);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	Иначе
		ПоместитьВоВременноеХранилище(Неопределено, АдресРезультата);
	КонецЕсли;

	ДлительныеОперации.СообщитьПрогресс(
		100,
		НСтр("ru='СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентовВФоне завершено'"),
		Новый Структура("АдресРезультата", АдресРезультата));

КонецПроцедуры

#КонецОбласти

#Область ПолучениеСправокЮридическихЛиц

// Начинает процесс подготовки справок по юридическим лицам в сервисе СПАРК.
// Возвращает идентификаторы справок, подготовка которых была начата в сервисе.
// Для проверки состояния подготовки справок необходимо использовать метод
// СостояниеПодготовкиСправок().
// При возникновении ошибки может быть возвращен неполный результат.
//
// Параметры:
//	СписокИНН - Массив - содержит элементы типа Строка.
//		ИНН контрагентов, справки по которым необходимо подготовить.
//
// Возвращаемое значение:
//	Структура:
//		* ДатаЗапроса - Дата - Дата запроса справок, возвращенная сервисом;
//		* ИдентификаторыСправок - Соответствие - идентификаторы справок,
//			по контрагентам:
//			** Ключ - Строка - ИНН контрагента;
//			** Значение - УникальныйИдентификатор - идентификатор
//					справки по контрагенту;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации.
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция НачатьПодготовкуСправокЮридическихЛиц(СписокИНН) Экспорт
	
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начало подготовки справок юридических лиц 1СПАРК Риски. Количество ИНН: %1'"),
			СписокИНН.Количество()));
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ИдентификаторыСправок", Новый Соответствие);
	Результат.Вставить("ДатаЗапроса"          , '00010101');
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не Пользователи.РолиДоступны("ЗапросНовойСправкиСПАРКРиски", , Ложь) Тогда
		Результат.ВидОшибки          = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Недостаточно прав для запроса новой справки 1СПАРК Риски.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
	КонецЕсли;
	
	Если Результат.ВидОшибки.Пустая() Тогда
		РазмерПорцииЗапроса = 100;
		ВГраница            = СписокИНН.ВГраница();
		НачальныйИндекс     = 0;
		// В сервисе существует ограничение по количеству ИНН в вызове.
		// Для потребителя сервис вызывается прозрачно - без разбиения списка.
		ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();
		Пока НачальныйИндекс <= ВГраница Цикл
			КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорцииЗапроса - 1, ВГраница);
			ВызватьОперациюНачатьПодготовкуСправокЮридическихЛиц(
				СписокИНН,
				НачальныйИндекс,
				КонечныйИндекс,
				Результат,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса);
			Если Не Результат.ВидОшибки.Пустая() Тогда
				// При ошибке вызова - возвратить результат.
				// При наличии успешных вызовов возвращается частичный результат.
				Прервать;
			КонецЕсли;
			НачальныйИндекс = КонечныйИндекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Если Результат.ВидОшибки.Пустая() Тогда
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Успешно завершено: начало подготовки справок 1СПАРК Риски.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет состояние подготовки справок юридических лиц в сервисе СПАРК.
// При возникновении ошибки может быть возвращен неполный результат.
//
// Параметры:
//	ИдентификаторыСправок - Массив - содержит элементы типа УникальныйИдентификатор.
//		Список идентификаторов справок, состояние подготовки
//		которых необходимо проверить.
//
// Возвращаемое значение:
//	Структура:
//		* СостояниеСправок - Соответствие - состояние подготовки справок:
//			** Ключ - УникальныйИдентификатор - идентификатор справки;
//			** Значение - Строка - состояние справки:
//				- "ВПроцессеПодготовки" - справка в процессе подготовки;
//				- "Подготовлена" - справка готова;
//				- "ОтсутствуетФайл" - файл справки отсутствует;
//				- "НеизвестныйИдентификатор" - передан неизвестный идентификатор справки;
//				- "НеизвестныйИНН" - передан неизвестный ИНН контрагента при
//					вызове метода НачатьПодготовкуСправок();
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция СостояниеПодготовкиСправокЮридическихЛиц(ИдентификаторыСправок) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("СостояниеСправок", Новый Соответствие);
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	РазмерПорцииЗапроса = 100;
	ВГраница            = ИдентификаторыСправок.ВГраница();
	НачальныйИндекс     = 0;
	// В сервисе существует ограничение по количеству идентификаторов в вызове.
	// Для потребителя сервис вызывается прозрачно - без разбиения списка.
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();
	Пока НачальныйИндекс <= ВГраница Цикл
		КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорцииЗапроса - 1, ВГраница);
		ВызватьОперациюСостояниеПодготовкиСправокЮридическихЛиц(
			ИдентификаторыСправок,
			НачальныйИндекс,
			КонечныйИндекс,
			Результат,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса);
		Если Не Результат.ВидОшибки.Пустая() Тогда
			// При ошибке вызова - возвратить результат.
			// При наличии успешных вызовов возвращается частичный результат.
			Прервать;
		КонецЕсли;
		НачальныйИндекс = КонечныйИндекс + 1;
	КонецЦикла;
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Получает файл подготовленной справки из сервиса СПАРК.
//
// Параметры:
//	ИдентификаторСправки - УникальныйИдентификатор - идентификатор
//		подготовленной справки (см. метод НачатьПодготовкуСправок()).
//
// Возвращаемое значение:
//	Структура:
//		* ФайлСправки - ДвоичныеДанные - двоичные данные полученного
//			файла справки;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ЗагрузитьФайлСправкиЮридическихЛиц(ИдентификаторСправки) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ФайлСправки", Неопределено);
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюЗагрузитьФайлСправкиЮридическихЛиц(
		ИдентификаторСправки,
		Результат,
		ДанныеАутентификации);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСправокИндивидуальныхПредпринимателей

// Начинает процесс подготовки справок по индивидуальным предпринимателям в сервисе СПАРК.
// Возвращает идентификаторы справок, подготовка которых была начата в сервисе.
// Для проверки состояния подготовки справок необходимо использовать метод
// СостояниеПодготовкиСправок().
// При возникновении ошибки может быть возвращен неполный результат.
//
// Параметры:
//	СписокИНН - Массив - содержит элементы типа Строка.
//		ИНН контрагентов, справки по которым необходимо подготовить.
//
// Возвращаемое значение:
//	Структура:
//		* ДатаЗапроса - Дата - Дата запроса справок, возвращенная сервисом;
//		* ИдентификаторыСправок - Соответствие - идентификаторы справок,
//			по контрагентам:
//			** Ключ - Строка - ИНН контрагента;
//			** Значение - УникальныйИдентификатор - идентификатор
//					справки по контрагенту;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации.
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция НачатьПодготовкуСправокИндивидуальныхПредпринимателей(СписокИНН) Экспорт
	
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начало подготовки индивидуальных предпринимателей 1СПАРК Риски. Количество ИНН: %1'"),
			СписокИНН.Количество()));
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ИдентификаторыСправок", Новый Соответствие);
	Результат.Вставить("ДатаЗапроса"          , '00010101');
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не Пользователи.РолиДоступны("ЗапросНовойСправкиСПАРКРиски", , Ложь) Тогда
		Результат.ВидОшибки          = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено;
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Недостаточно прав для запроса новой справки 1СПАРК Риски.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
	КонецЕсли;
	
	Если Результат.ВидОшибки.Пустая() Тогда
		РазмерПорцииЗапроса = 100;
		ВГраница            = СписокИНН.ВГраница();
		НачальныйИндекс     = 0;
		// В сервисе существует ограничение по количеству ИНН в вызове.
		// Для потребителя сервис вызывается прозрачно - без разбиения списка.
		ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();
		Пока НачальныйИндекс <= ВГраница Цикл
			КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорцииЗапроса - 1, ВГраница);
			ВызватьОперациюНачатьПодготовкуСправокИндивидуальныхПредпринимателей(
				СписокИНН,
				НачальныйИндекс,
				КонечныйИндекс,
				Результат,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса);
			Если Не Результат.ВидОшибки.Пустая() Тогда
				// При ошибке вызова - возвратить результат.
				// При наличии успешных вызовов возвращается частичный результат.
				Прервать;
			КонецЕсли;
			НачальныйИндекс = КонечныйИндекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Если Результат.ВидОшибки.Пустая() Тогда
		СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Успешно завершено: начало подготовки справок 1СПАРК Риски.'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет состояние подготовки справок индивидуальных предпринимателей в сервисе СПАРК.
// При возникновении ошибки может быть возвращен неполный результат.
//
// Параметры:
//	ИдентификаторыСправок - Массив - содержит элементы типа УникальныйИдентификатор.
//		Список идентификаторов справок, состояние подготовки
//		которых необходимо проверить.
//
// Возвращаемое значение:
//	Структура:
//		* СостояниеСправок - Соответствие - состояние подготовки справок:
//			** Ключ - УникальныйИдентификатор - идентификатор справки;
//			** Значение - Строка - состояние справки:
//				- "ВПроцессеПодготовки" - справка в процессе подготовки;
//				- "Подготовлена" - справка готова;
//				- "ОтсутствуетФайл" - файл справки отсутствует;
//				- "НеизвестныйИдентификатор" - передан неизвестный идентификатор справки;
//				- "НеизвестныйИНН" - передан неизвестный ИНН контрагента при
//					вызове метода НачатьПодготовкуСправок();
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция СостояниеПодготовкиСправокИндивидуальныхПредпринимателей(ИдентификаторыСправок) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("СостояниеСправок", Новый Соответствие);
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	РазмерПорцииЗапроса = 100;
	ВГраница            = ИдентификаторыСправок.ВГраница();
	НачальныйИндекс     = 0;
	// В сервисе существует ограничение по количеству идентификаторов в вызове.
	// Для потребителя сервис вызывается прозрачно - без разбиения списка.
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();
	Пока НачальныйИндекс <= ВГраница Цикл
		КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорцииЗапроса - 1, ВГраница);
		ВызватьОперациюСостояниеПодготовкиСправокИндивидуальныхПредпринимателей(
			ИдентификаторыСправок,
			НачальныйИндекс,
			КонечныйИндекс,
			Результат,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса);
		Если Не Результат.ВидОшибки.Пустая() Тогда
			// При ошибке вызова - возвратить результат.
			// При наличии успешных вызовов возвращается частичный результат.
			Прервать;
		КонецЕсли;
		НачальныйИндекс = КонечныйИндекс + 1;
	КонецЦикла;
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Получает файл подготовленной справки из сервиса СПАРК.
//
// Параметры:
//	ИдентификаторСправки - УникальныйИдентификатор - идентификатор
//		подготовленной справки (см. метод НачатьПодготовкуСправок()).
//
// Возвращаемое значение:
//	Структура:
//		* ФайлСправки - ДвоичныеДанные - двоичные данные полученного
//			файла справки;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ЗагрузитьФайлСправкиИндивидуальныхПредпринимателей(ИдентификаторСправки) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ФайлСправки", Неопределено);
	
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюЗагрузитьФайлСправкиИндивидуальныхПредпринимателей(
		ИдентификаторСправки,
		Результат,
		ДанныеАутентификации);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МониторингСобытийЮридическихЛиц

// Включает в сервисе СПАРК мониторинг событий по указанным контрагентам.
// Для проверки результата включения мониторинга событий необходимо использовать
// метод РезультатВключенияМониторингаСобытийЮридическихЛиц.
// Важно: при вызове допускается передавать не более 100 ИНН, при превышении
// количества ИНН вызывается исключение.
//
// Параметры:
//	СписокИПП - Массив - список ИНН контрагентов.
//		Допустимое количество ИНН - не более 100.
//
// Возвращаемое значение:
//	Структура:
//		* ИдентификаторЗаявки
//			- УникальныйИдентификатор - идентификатор заявки на включение мониторинга.
//			- Неопределено - при неуспешном вызове;
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - ошибка, возникшая при
//			обращении к сервису 1СПАРК Риски;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ВключитьМониторингСобытийЮридическихЛиц(
		СписокИПП,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ИдентификаторЗаявки", Неопределено);
	
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СписокИПП.Количество() > 100 Тогда
		ВызватьИсключение НСтр("ru = 'Исключительная ситуация при вызове метода СПАРК.ВключитьМониторингСобытийПоКонтрагентам().
			|Передано некорректное количество ИНН юридических лиц. Количество элементов списка превышает 100.'");
	КонецЕсли;
	
	ВызватьОперациюВключитьМониторингСобытийЮридическихЛиц(
		СписокИПП,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку результата запроса на включение мониторинга событий по контрагентам
// (метод ВключитьМониторингСобытийПоКонтрагентам()).
//
// Параметры:
//	ИдентификаторЗаявки - УникальныйИдентификатор - идентификатор заявки на включение мониторинга,
//		возвращенный методом ВключитьМониторингСобытийПоКонтрагентам().
//
// Возвращаемое значение:
//	Структура:
//		* Завершено - Булево - операция включения мониторинга завершена;
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - ошибка, возникшая при
//			обращении к сервису 1СПАРК Риски;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция РезультатВключенияМониторингаСобытийЮридическихЛиц(
		ИдентификаторЗаявки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("Завершено" , Ложь);

	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюРезультатВключенияМониторингаСобытийЮридическихЛиц(
		ИдентификаторЗаявки,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
		ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает список событий мониторинга юридических лиц в соответствии с указанным отбором.
//
// Параметры:
//	СписокИННИлиИдентификатор - Строка, УникальныйИдентификатор - параметры отбора операции.
//
// Возвращаемое значение:
//	Структура:
//		* СообщенияМониторинга - Соответствие - сообщения мониторинга:
//			** Ключ - Строка - ИНН контрагента;
//			** Значение - Массив - содержит элементы типа Структура.
//				Сообщения мониторинга по контрагенту.
//				Поля структуры:
//				*** ИдентификаторТипаСобытия - УникальныйИдентификатор - идентификатор типа
//					события мониторинга. Для получения описания типов событий мониторинга
//					необходимо использовать метод ТипыСобытийСообщенийМониторинга();
//				*** ДатаМониторинга - Дата - дата мониторинга события;
//				*** НовоеЗначение - Строка - новое значение;
//				*** СтароеЗначение - Строка - старое значение;
//		* ИдентификаторПоследнегоСобытия
//			- УникальныйИдентификатор - идентификатор последнего события;
//			- Неопределено - при отсутствии событий;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция СобытияМониторингаЮридическихЛиц(
		СписокИННИлиИдентификатор,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ИдентификаторыТиповСобытий,
		ДополнительныеПараметрыЗапроса) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();

	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеТипаСтрока                  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаДата                    = Новый ОписаниеТипов("Дата");
	ОписаниеТипаУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	СобытияТаблица = Новый ТаблицаЗначений;
	СобытияТаблица.Колонки.Добавить("ИНН"                     , ОписаниеТипаСтрока);
	СобытияТаблица.Колонки.Добавить("Идентификатор"           , ОписаниеТипаУникальныйИдентификатор);
	СобытияТаблица.Колонки.Добавить("ИдентификаторТипаСобытия", ОписаниеТипаУникальныйИдентификатор);
	СобытияТаблица.Колонки.Добавить("ДатаМониторинга"         , ОписаниеТипаДата);
	СобытияТаблица.Колонки.Добавить("НовоеЗначение"           , ОписаниеТипаСтрока);
	СобытияТаблица.Колонки.Добавить("СтароеЗначение"          , ОписаниеТипаСтрока);
	СобытияТаблица.Индексы.Добавить("ИНН"); // Для поиска событий по ИНН.
	
	Результат.Вставить("События"                       , СобытияТаблица);
	Результат.Вставить("ИдентификаторПоследнегоСобытия", Неопределено);
	
	ВызватьОперациюСобытияМониторингаЮридическихЛиц(
		СписокИННИлиИдентификатор,
		НачальныйИндекс,
		КонечныйИндекс,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	ИННВСобытиях = Новый Соответствие;
	Для Каждого ТекущееСобытие Из СобытияТаблица Цикл
		ИдентификаторыТиповСобытий[ТекущееСобытие.ИдентификаторТипаСобытия] = Истина;
		ИННВСобытиях[ТекущееСобытие.ИНН] = Истина;
	КонецЦикла;
	
	Результат.Вставить("СписокИНН", КлючиСоответствияВМассив(ИННВСобытиях));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МониторингСобытийИндивидуальныхПредпринимателей

// Включает в сервисе СПАРК мониторинг событий по указанным контрагентам.
// Для проверки результата включения мониторинга событий необходимо использовать
// метод РезультатВключенияМониторингаСобытийИндивидуальныхПредпринимателей.
// Важно: при вызове допускается передавать не более 100 ИНН, при превышении
// количества ИНН вызывается исключение.
//
// Параметры:
//	СписокИНН - Массив - список ИНН контрагентов.
//		Допустимое количество ИНН - не более 100.
//
// Возвращаемое значение:
//	Структура:
//		* ИдентификаторЗаявки
//			- УникальныйИдентификатор - идентификатор заявки на включение мониторинга.
//			- Неопределено - при неуспешном вызове;
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - ошибка, возникшая при
//			обращении к сервису 1СПАРК Риски;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ВключитьМониторингСобытийИндивидуальныхПредпринимателей(
		СписокИНН,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ИдентификаторЗаявки", Неопределено);
	
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СписокИНН.Количество() > 100 Тогда
		ВызватьИсключение НСтр("ru = 'Исключительная ситуация при вызове метода СПАРК.ВключитьМониторингСобытийПоКонтрагентам().
			|Передано некорректное количество ИНН юридических лиц. Количество элементов списка превышает 100.'");
	КонецЕсли;
	
	ВызватьОперациюВключитьМониторингСобытийИндивидуальныхПредпринимателей(
		СписокИНН,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку результата запроса на включение мониторинга событий по контрагентам
// (метод ВключитьМониторингСобытийПоКонтрагентам()).
//
// Параметры:
//	ИдентификаторЗаявки - УникальныйИдентификатор - идентификатор заявки на включение мониторинга,
//		возвращенный методом ВключитьМониторингСобытийПоКонтрагентам().
//
// Возвращаемое значение:
//	Структура:
//		* Завершено - Булево - операция включения мониторинга завершена;
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - ошибка, возникшая при
//			обращении к сервису 1СПАРК Риски;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция РезультатВключенияМониторингаСобытийИндивидуальныхПредпринимателей(
		ИдентификаторЗаявки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("Завершено" , Ложь);
	
	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюРезультатВключенияМониторингаСобытийИндивидуальныхПредпринимателей(
		ИдентификаторЗаявки,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
		ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает список событий мониторинга индивидуальных предпринимателей в соответствии с указанным отбором.
//
// Параметры:
//	СписокИННИлиИдентификатор - Строка, УникальныйИдентификатор - параметры отбора операции.
//
// Возвращаемое значение:
//	Структура:
//		* СообщенияМониторинга - Соответствие - сообщения мониторинга:
//			** Ключ - Строка - ИНН контрагента;
//			** Значение - Массив - содержит элементы типа Структура.
//				Сообщения мониторинга по контрагенту.
//				Поля структуры:
//				*** ИдентификаторТипаСобытия - УникальныйИдентификатор - идентификатор типа
//					события мониторинга. Для получения описания типов событий мониторинга
//					необходимо использовать метод ТипыСобытийСообщенийМониторинга();
//				*** ДатаМониторинга - Дата - дата мониторинга события;
//				*** НовоеЗначение - Строка - новое значение;
//				*** СтароеЗначение - Строка - старое значение;
//		* ИдентификаторПоследнегоСобытия
//			- УникальныйИдентификатор - идентификатор последнего события;
//			- Неопределено - при отсутствии событий;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "НеверныйЛогинИлиПароль" - не заполнен логин/пароль пользователя
//				Интернет-поддержки или некорректная пара логин/пароль;
//			- "ПревышеноКоличествоПопыток" - превышено количество попыток
//				вызова с некорректной парой логин/пароль;
//			- "ТребуетсяОплата" - требуется оплата использования сервиса
//				или превышен лимит;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция СобытияМониторингаИндивидуальныхПредпринимателей(
		СписокИННИлиИдентификатор,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ИдентификаторыТиповСобытий,
		ДополнительныеПараметрыЗапроса) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();

	ПередВызовомОперацииСервиса(Результат, , ДанныеАутентификации, Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеТипаСтрока                  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаДата                    = Новый ОписаниеТипов("Дата");
	ОписаниеТипаУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	СобытияТаблица = Новый ТаблицаЗначений;
	СобытияТаблица.Колонки.Добавить("ИНН"                     , ОписаниеТипаСтрока);
	СобытияТаблица.Колонки.Добавить("Идентификатор"           , ОписаниеТипаУникальныйИдентификатор);
	СобытияТаблица.Колонки.Добавить("ИдентификаторТипаСобытия", ОписаниеТипаУникальныйИдентификатор);
	СобытияТаблица.Колонки.Добавить("ДатаМониторинга"         , ОписаниеТипаДата);
	СобытияТаблица.Колонки.Добавить("НовоеЗначение"           , ОписаниеТипаСтрока);
	СобытияТаблица.Колонки.Добавить("СтароеЗначение"          , ОписаниеТипаСтрока);
	СобытияТаблица.Индексы.Добавить("ИНН"); // Для поиска событий по ИНН.
	
	Результат.Вставить("События"                       , СобытияТаблица);
	Результат.Вставить("ИдентификаторПоследнегоСобытия", Неопределено);
	
	ВызватьОперациюСобытияМониторингаИндивидуальныхПредпринимателей(
		СписокИННИлиИдентификатор,
		НачальныйИндекс,
		КонечныйИндекс,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ПослеВызоваОперацииСервиса(Результат);
	
	ИННВСобытиях = Новый Соответствие;
	Для Каждого ТекущееСобытие Из СобытияТаблица Цикл
		ИдентификаторыТиповСобытий[ТекущееСобытие.ИдентификаторТипаСобытия] = Истина;
		ИННВСобытиях[ТекущееСобытие.ИНН] = Истина;
	КонецЦикла;
	
	Результат.Вставить("СписокИНН", КлючиСоответствияВМассив(ИННВСобытиях));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТипыСобытий

// Возвращает список типов событий сообщений мониторинга.
//
// Возвращаемое значение:
//	Структура:
//		* ТипыСобытий - Соответствие - сообщения мониторинга:
//			** Ключ - УникальныйИдентификатор - идентификатор типа события;
//			** Значение - Структура - описание типа события. Поля структуры:
//				*** Название - Строка - название типа события события;
//				*** Описание - Строка - описание типа события;
//				*** Критичное - Булево - признак критичности событий данного типа.
//					Истина - событие критичное, Ложь - не критичное;
//				*** ИсполнительноеПроизводство - Булево - признак исполнительного производства.
//					Истина - это тип событие исполнительное производство;
//		* ВидОшибки - Строка - имя ошибки, возникшей при вызове сервиса СПАРК:
//			- "ИспользованиеЗапрещено" - использование сервиса запрещено в
//				текущем режиме работы или в соответствии с настройками ролей;
//			- "ОшибкаПодключения" - при подключении к сервису возникла ошибка;
//			- "ОшибкаСервиса" - при обработке запроса в сервисе возникла
//				внутренняя ошибка;
//			- "НеизвестнаяОшибка" - при вызове сервиса возникла неизвестная
//				(необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ТипыСобытийСообщенийМониторинга(ТелоОтвета = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	Результат.Вставить("ТипыСобытий", Новый Соответствие);

	ПередВызовомОперацииСервиса(Результат, , , Ложь);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВызватьОперациюТипыСобытийСообщенийМониторинга(Результат, ТелоОтвета);
	ПослеВызоваОперацииСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция НовыйРезультатВызоваСервиса() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОшибки"                              , Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка());
	Результат.Вставить("СообщениеОбОшибке"                      , "");
	Результат.Вставить("ИнформацияОбОшибке"                     , "");
	Результат.Вставить("СвойстваОшибки"                         , Новый Структура("Код", 0));
	Результат.Вставить("ЗаписыватьОшибкуВСтатусеИнформации"     , Ложь);
	Результат.Вставить("ДоступностьПодключенияТестовогоПериода" , "");
	Результат.Вставить("ОшибкаПриПроверкеТестовогоПериода" ,      Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ПередВызовомОперацииСервиса(
	Результат,
	ОбластьДанных = Неопределено,
	ДанныеАутентификации = Неопределено,
	ЗаполнитьДанныеАутентификации = Истина)
	
	Если Не Пользователи.РолиДоступны("ЧтениеДанныхСПАРКРиски", , Ложь) Тогда
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав для работы с сервисом 1СПАРК Риски.
			|Обратитесь к администратору.'");
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Недостаточно прав для работы с сервисом 1СПАРК Риски.'");
		СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
	КонецЕсли;
	
	Если ЗаполнитьДанныеАутентификации И Результат.ВидОшибки.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = СПАРКРиски.ДанныеАутентификацииПользователяИнтернетПоддержки(ОбластьДанных);
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			Результат.ВидОшибки          = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
			Результат.СообщениеОбОшибке  = НСтр("ru = 'Интернет-поддержка пользователей не подключена.'");
			Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
			// Ветвь сценария, не является ошибкой.
			СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВызоваОперацииСервиса(Результат)
	
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Если Результат.ЗаписыватьОшибкуВСтатусеИнформации Тогда
			СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Иначе
			СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		ИдентификаторСервиса = СПАРКРискиКлиентСервер.ИдентификаторСервиса();
		Идентификаторы       = Новый Массив;
		Идентификаторы.Добавить(ИдентификаторСервиса);
		МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
		РезультатПроверки = МодульПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(Идентификаторы);
		Результат.ДоступностьПодключенияТестовогоПериода = РезультатПроверки.СервисыСопровождения.Получить(ИдентификаторСервиса);
		Если РезультатПроверки.Ошибка Тогда
			Результат.СообщениеОбОшибке = РезультатПроверки.СообщениеОбОшибке;
			Результат.ОшибкаПриПроверкеТестовогоПериода = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	Если ДанныеАутентификации.Свойство("Тикет") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	КонецЕсли;
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРККонтрагента

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /organizationInfo

Процедура ВызватьОперациюИндексыСПАРКЮридическогоЛица(
		СписокИНН,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)

	URLОперации = URLОперацииСервиса("organizationInfo");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ТелоЗапроса = НовыйТелоЗапросаOrganizationInfo(
		СписокИНН,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);

	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ОбработатьТелоОтветаOrganizationInfo(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;

КонецПроцедуры

Функция НовыйТелоЗапросаOrganizationInfo(
	СписокИНН,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	// Начиная с версии БИП 2.2.3 изменился формат ответа.
	// Если в дополнительных параметрах указан "getStatusGuid" = Истина,
	// из ответа будут исключены события мониторинга, а также изменен состав
	// атрибутов.
	ДополнительныеПараметрыЗапроса.Вставить("getStatusGuidApiVersion", "true");
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		0,
		СписокИНН.ВГраница(),
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаOrganizationInfo(ТелоОтвета, Результат)

	//{
	//  "results": [
	//    {
	//      "inn": String,
	//      "indexes": {
	//        "totalIndex" : Long,
	//        "indexOfDueDiligence": Long,
	//        "failureScore": Long,
	//        "paymentIndex": Long,
	//        "acting": Boolean,
	//        "statusGuid": String,
	//        "statusDate": String(ISO),
	//        "showStatus": Boolean
	//      },
	//    }
	//  ]
	//}

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");
	ТипЧисло     = Тип("Число");
	ТипБулево    = Тип("Булево");
	ТипСтрока    = Тип("Строка");
	ТипДата      = Тип("Дата");

	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	ЧтениеОтвета.Закрыть();

	Если ТипЗнч(СтруктураОтвета) = ТипСтруктура Тогда
		Если СтруктураОтвета.Свойство("results")
				И ТипЗнч(СтруктураОтвета.results) = ТипМассив Тогда
			Для Каждого ТекущийРезультат Из СтруктураОтвета.results Цикл
				Если ТипЗнч(ТекущийРезультат) = ТипСтруктура Тогда
					Если ТекущийРезультат.Свойство("inn") Тогда
						// Таблица уже заполнена начальными данными по ИНН. Надо найти строку с таким ИНН и дозаполнить ее.
						СтрокиЗначенияИндекса = Результат.ЗначенияИндексов.НайтиСтроки(Новый Структура("ИНН", ТекущийРезультат.inn));
						Для Каждого СтрокаЗначенияИндекса Из СтрокиЗначенияИндекса Цикл
							// Найден ИНН - очистить вид ошибки.
							СтрокаЗначенияИндекса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
							Если ТекущийРезультат.Свойство("aggregatedIndex")
									И ТипЗнч(ТекущийРезультат.aggregatedIndex) = ТипСтруктура Тогда
								ИндексыСПАРККонтрагента = ТекущийРезультат.aggregatedIndex;
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"ИндексДолжнойОсмотрительности",
									"indexOfDueDiligence",
									ТипЧисло,
									-1);
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"ИндексФинансовогоРиска",
									"failureScore",
									ТипЧисло,
									-1);
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"ИндексПлатежнойДисциплины",
									"paymentIndex",
									ТипЧисло,
									-1);
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"СводныйИндикатор",
									"totalIndex",
									ТипЧисло,
									-1);
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"БухгалтерскаяОтчетность",
									"balanse1S",
									ТипЧисло,
									0);
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"Активен",
									"acting",
									ТипБулево,
									Ложь);
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"ОтображатьСтатус",
									"showStatus",
									ТипБулево,
									Истина);
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"ДатаСтатуса",
									"statusDate",
									ТипДата,
									'00010101');
								
								ПрочитатьЗначениеИзСтруктуры(
									СтрокаЗначенияИндекса,
									ИндексыСПАРККонтрагента,
									"ИдентификаторСтатуса",
									"statusGuid",
									ТипСтрока,
									"");
								
								Если НЕ ПустаяСтрока(СтрокаЗначенияИндекса.ИдентификаторСтатуса) Тогда
									Попытка
										ДанныеСтатуса = СПАРКРиски.ДанныеТипаСобытияПоИдентификатору(СтрокаЗначенияИндекса.ИдентификаторСтатуса);
										СтрокаЗначенияИндекса.Статус         = ДанныеСтатуса.Ссылка;
										СтрокаЗначенияИндекса.СтатусНазвание = ДанныеСтатуса.Название;
									Исключение
										СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									КонецПопытки;
								КонецЕсли;
								
								СтрокаЗначенияИндекса.ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо;
								
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /enterpreneur/info

Процедура ВызватьОперациюИндексыСПАРКИндивидуальногоПредпринимателя(
		СписокИНН,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)

	URLОперации = URLОперацииСервиса("enterpreneur/info");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ТелоЗапроса = НовыйТелоЗапросаEnterpreneurInfo(
		СписокИНН,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);

	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ОбработатьТелоОтветаEnterpreneurInfo(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;

КонецПроцедуры

Функция НовыйТелоЗапросаEnterpreneurInfo(
	СписокИНН,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		0,
		СписокИНН.ВГраница(),
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаEnterpreneurInfo(ТелоОтвета, Результат)

	//{
	//  "results": [
	//    {
	//      "acting": true,
	//      "inn": "string",
	//      "paymentIndex": 0,
	//      "showStatus": true,
	//      "statusDate": "2020-11-09T15:03:06.153Z",
	//      "statusGuid": "string",
	//      "totalIndex": 0
	//    }
	//  ]
	//}

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");
	ТипЧисло     = Тип("Число");
	ТипБулево    = Тип("Булево");
	ТипСтрока    = Тип("Строка");
	ТипДата      = Тип("Дата");

	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеОтвета, Ложь);
	ЧтениеОтвета.Закрыть();

	Если ТипЗнч(СтруктураОтвета) = ТипСтруктура Тогда
		Если СтруктураОтвета.Свойство("results")
				И ТипЗнч(СтруктураОтвета.results) = ТипМассив Тогда
			Для Каждого ТекущийРезультат Из СтруктураОтвета.results Цикл
				Если ТипЗнч(ТекущийРезультат) = ТипСтруктура Тогда
					Если ТекущийРезультат.Свойство("inn") Тогда
						// Таблица уже заполнена начальными данными по ИНН. Надо найти строку с таким ИНН и дозаполнить ее.
						СтрокиЗначенияИндекса = Результат.ЗначенияИндексов.НайтиСтроки(Новый Структура("ИНН", ТекущийРезультат.inn));
						Для Каждого СтрокаЗначенияИндекса Из СтрокиЗначенияИндекса Цикл
							// Найден ИНН - очистить вид ошибки.
							СтрокаЗначенияИндекса.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка();
							
							ПрочитатьЗначениеИзСтруктуры(
								СтрокаЗначенияИндекса,
								ТекущийРезультат,
								"ИндексПлатежнойДисциплины",
								"paymentIndex",
								ТипЧисло,
								-1);
							
							ПрочитатьЗначениеИзСтруктуры(
								СтрокаЗначенияИндекса,
								ТекущийРезультат,
								"Активен",
								"acting",
								ТипБулево,
								Ложь);
							
							ПрочитатьЗначениеИзСтруктуры(
								СтрокаЗначенияИндекса,
								ТекущийРезультат,
								"ОтображатьСтатус",
								"showStatus",
								ТипБулево,
								Истина);
							
							ПрочитатьЗначениеИзСтруктуры(
								СтрокаЗначенияИндекса,
								ТекущийРезультат,
								"ДатаСтатуса",
								"statusDate",
								ТипДата,
								'00010101');
							
							ПрочитатьЗначениеИзСтруктуры(
								СтрокаЗначенияИндекса,
								ТекущийРезультат,
								"ИдентификаторСтатуса",
								"statusGuid",
								ТипСтрока,
								"");
							
							// Для ИП эти индексы не передаются.
							СтрокаЗначенияИндекса.ИндексФинансовогоРиска        = -1;
							СтрокаЗначенияИндекса.СводныйИндикатор              = -1;
							СтрокаЗначенияИндекса.ИндексДолжнойОсмотрительности = -1;
							
							Если НЕ ПустаяСтрока(СтрокаЗначенияИндекса.ИдентификаторСтатуса) Тогда
								Попытка
									ДанныеСтатуса = СПАРКРиски.ДанныеТипаСобытияПоИдентификатору(
										СтрокаЗначенияИндекса.ИдентификаторСтатуса);
									СтрокаЗначенияИндекса.Статус         = ДанныеСтатуса.Ссылка;
									СтрокаЗначенияИндекса.СтатусНазвание = ДанныеСтатуса.Название;
								Исключение
									СПАРКРиски.ЗаписатьОшибкуВЖурналРегистрации(
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								КонецПопытки;
							КонецЕсли;
							
							СтрокаЗначенияИндекса.ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет строку таблицы значений значениями из структуры.
// В структуре может не быть какого-то значения - это проверяется.
//
// Параметры:
//  СтрокаТаблицыЗначений - Строка таблицы значений - приемник;
//  Данные                - Структура - Источник;
//  ИмяКолонки            - Строка - имя колонки приемника;
//  ИмяКлюча              - Строка - имя ключа источника;
//  ТипЗначения           - Тип - ожидаемое значение источника;
//  ЗначениеПоУмолчанию   - Произвольный - значение по-умолчанию.
//
Процедура ПрочитатьЗначениеИзСтруктуры(СтрокаТаблицыЗначений, Данные, ИмяКолонки, ИмяКлюча, ТипЗначения, ЗначениеПоУмолчанию)

	Если Данные.Свойство(ИмяКлюча) Тогда
		Если ТипЗнч(Данные[ИмяКлюча]) = ТипЗначения Тогда
			СтрокаТаблицыЗначений[ИмяКолонки] = Данные[ИмяКлюча];
		Иначе
			// Только "дата" может передаться как строка.
			ТипСтрока = Тип("Строка");
			ТипДата   = Тип("Дата");
			Если (ТипЗнч(Данные[ИмяКлюча]) = ТипСтрока)
					И (ТипЗначения = ТипДата) Тогда
				СтрокаТаблицыЗначений[ИмяКолонки] = ПрочитатьДатуJSON(Данные[ИмяКлюча], ФорматДатыJSON.ISO);
			Иначе
				СтрокаТаблицыЗначений[ИмяКолонки] = ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаТаблицыЗначений[ИмяКолонки] = ЗначениеПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеСправок

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /report/pdf/request

Процедура ВызватьОперациюНачатьПодготовкуСправокЮридическихЛиц(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("report/pdf/request");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаReportPdfRequest(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	// Протоколирование списка ИНН, для которого выполняется получение справок.
	ИННВЗапросе = Новый Массив;
	Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
		ИННВЗапросе.Добавить(СписокИНН[Итератор]);
	КонецЦикла;
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вызов операции ""Начать подготовку справок"" сервиса 1СПАРК.
				|ИНН: %1'"),
			СтрСоединить(ИННВЗапросе, ", ")));
	// Конец протоколирование.
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаReportPdfRequest(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаReportPdfRequest(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаReportPdfRequest(ТелоОтвета, Результат)
	
	//{
	//    "date": String(ISO),
	//    "results": [{
	//        "inn": String,
	//        "guid": String
	//    }]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "date" Тогда
				
				Результат.ДатаЗапроса = ПрочитатьДатуJSON(
					ЗначениеСвойстваJSON(
						ЧтениеОтвета,
						"0001-01-01T00:00:00"),
					ФорматДатыJSON.ISO);
				
			ИначеЕсли ИмяСвойства = "results" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					Продолжить;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
						И ТекущийУровень = 1 Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИНН                  = "";
							ИдентификаторЗапроса = "";
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						ТекущийУровень = ТекущийУровень - 1;
						Если ТекущийУровень = 1 Тогда
							// Прочитан очередной объект из results.
							Результат.ИдентификаторыСправок.Вставить(
								ИНН,
								Новый УникальныйИдентификатор(ИдентификаторЗапроса));
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "inn" Тогда
							ИНН = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "guid" Тогда
							ИдентификаторЗапроса = ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /report/pdf/check

Процедура ВызватьОперациюСостояниеПодготовкиСправокЮридическихЛиц(
	ИдентификаторыЗапросов,
	НачальныйИндекс,
	КонечныйИндекс,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("report/pdf/check");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаReportPdfCheck(
		ИдентификаторыЗапросов,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета  = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаReportPdfCheck(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаReportPdfCheck(
		ИдентификаторыЗапросов,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "guidList": [String],
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("guidList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторыЗапросов[Итератор]));
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаReportPdfCheck(ТелоОтвета, Результат)
	
	//{
	//    "results": [{
	//        "guid": String("InProgress", "Done", ...),
	//        "status": String
	//    }]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "results" Тогда
			
			ЧтениеОтвета.Прочитать();
			Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ЧтениеОтвета.Прочитать() Цикл
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
					И ТекущийУровень = 1 Тогда
					// Закончено чтение объектов из results.
					Прервать;
				КонецЕсли;
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
					ТекущийУровень = ТекущийУровень + 1;
					Если ТекущийУровень > 2 Тогда
						Продолжить;
					Иначе
						ИдентификаторСправки = "";
						СостояниеСправки     = "";
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
					ТекущийУровень = ТекущийУровень - 1;
					Если ТекущийУровень = 1 Тогда
						// Прочитан очередной объект из results.
						Результат.СостояниеСправок.Вставить(
							Новый УникальныйИдентификатор(ИдентификаторСправки),
							СостояниеСправки);
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
					И ТекущийУровень = 2 Тогда
					ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
					Если ИмяСвойства = "guid" Тогда
						ИдентификаторСправки = ЗначениеСвойстваJSON(
							ЧтениеОтвета,
							"");
					ИначеЕсли ИмяСвойства = "status" Тогда
						СостояниеСправки = ПредставлениеСостоянияСправкиВПрограммномИнтерфейсе(
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								""));
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /report/pdf/download

Процедура ВызватьОперациюЗагрузитьФайлСправкиЮридическихЛиц(
		ИдентификаторСправки,
		Результат,
		ДанныеАутентификации)
	
	URLОперации = URLОперацииСервиса("report/pdf/download");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаReportPdfDownload(
		ИдентификаторСправки,
		ДанныеАутентификации);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета, 18); // Возвратить HTTPОтвет
	Если Результат.ВидОшибки.Пустая() Тогда
		Результат.ФайлСправки = ТелоОтвета;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйТелоЗапросаReportPdfDownload(ИдентификаторСправки, ДанныеАутентификации)
	
	//{
	//  "authenticationInfo": {
	//    "authToken": "string",
	//    "login": "string",
	//    "password": "string"
	//  },
	//  "guid": "string",
	//  "params": [
	//    {
	//      "key": "string",
	//      "value": "string"
	//    }
	//  ]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("guid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторСправки));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /enterpreneur/report/pdf/request/create

Процедура ВызватьОперациюНачатьПодготовкуСправокИндивидуальныхПредпринимателей(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("enterpreneur/report/pdf/request/create");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаEnterpreneurReportPdfRequestCreate(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	// Протоколирование списка ИНН, для которого выполняется получение справок.
	ИННВЗапросе = Новый Массив;
	Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
		ИННВЗапросе.Добавить(СписокИНН[Итератор]);
	КонецЦикла;
	СПАРКРиски.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вызов операции ""Начать подготовку справок"" сервиса 1СПАРК.
				|ИНН: %1'"),
			СтрСоединить(ИННВЗапросе, ", ")));
	// Конец протоколирование.
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаEnterpreneurReportPdfRequestCreate(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаEnterpreneurReportPdfRequestCreate(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаEnterpreneurReportPdfRequestCreate(ТелоОтвета, Результат)
	
	//{
	//    "date": String(ISO),
	//    "results": [{
	//        "inn": String,
	//        "guid": String
	//    }]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "date" Тогда
				
				Результат.ДатаЗапроса = ПрочитатьДатуJSON(
					ЗначениеСвойстваJSON(
						ЧтениеОтвета,
						"0001-01-01T00:00:00"),
					ФорматДатыJSON.ISO);
				
			ИначеЕсли ИмяСвойства = "results" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					Продолжить;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
						И ТекущийУровень = 1 Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИНН                  = "";
							ИдентификаторЗапроса = "";
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						ТекущийУровень = ТекущийУровень - 1;
						Если ТекущийУровень = 1 Тогда
							// Прочитан очередной объект из results.
							Результат.ИдентификаторыСправок.Вставить(
								ИНН,
								Новый УникальныйИдентификатор(ИдентификаторЗапроса));
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "inn" Тогда
							ИНН = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "guid" Тогда
							ИдентификаторЗапроса = ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /enterpreneur/report/pdf/request/check

Процедура ВызватьОперациюСостояниеПодготовкиСправокИндивидуальныхПредпринимателей(
	ИдентификаторыЗапросов,
	НачальныйИндекс,
	КонечныйИндекс,
	Результат,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("enterpreneur/report/pdf/request/check");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаEnterpreneurReportPdfRequestCheck(
		ИдентификаторыЗапросов,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета  = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаEnterpreneurReportPdfRequestCheck(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаEnterpreneurReportPdfRequestCheck(
		ИдентификаторыЗапросов,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	//{
	//  "authenticationInfo": {
	//    "authToken": "string",
	//    "login": "string",
	//    "password": "string"
	//  },
	//  "guidList": [
	//    "string"
	//  ],
	//  "params": [
	//    {
	//      "key": "string",
	//      "value": "string"
	//    }
	//  ]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("guidList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторыЗапросов[Итератор]));
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаEnterpreneurReportPdfRequestCheck(ТелоОтвета, Результат)
	
	//{
	//    "results": [{
	//        "guid": String("InProgress", "Done", ...),
	//        "status": String
	//    }]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "results" Тогда
			
			ЧтениеОтвета.Прочитать();
			Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ЧтениеОтвета.Прочитать() Цикл
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
					И ТекущийУровень = 1 Тогда
					// Закончено чтение объектов из results.
					Прервать;
				КонецЕсли;
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
					ТекущийУровень = ТекущийУровень + 1;
					Если ТекущийУровень > 2 Тогда
						Продолжить;
					Иначе
						ИдентификаторСправки = "";
						СостояниеСправки     = "";
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
					ТекущийУровень = ТекущийУровень - 1;
					Если ТекущийУровень = 1 Тогда
						// Прочитан очередной объект из results.
						Результат.СостояниеСправок.Вставить(
							Новый УникальныйИдентификатор(ИдентификаторСправки),
							СостояниеСправки);
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
					И ТекущийУровень = 2 Тогда
					ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
					Если ИмяСвойства = "guid" Тогда
						ИдентификаторСправки = ЗначениеСвойстваJSON(
							ЧтениеОтвета,
							"");
					ИначеЕсли ИмяСвойства = "status" Тогда
						СостояниеСправки = ПредставлениеСостоянияСправкиВПрограммномИнтерфейсе(
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								""));
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /enterpreneur/report/pdf/download

Процедура ВызватьОперациюЗагрузитьФайлСправкиИндивидуальныхПредпринимателей(
		ИдентификаторСправки,
		Результат,
		ДанныеАутентификации)
	
	URLОперации = URLОперацииСервиса("enterpreneur/report/pdf/download");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаEnterpreneurReportPdfDownload(
		ИдентификаторСправки,
		ДанныеАутентификации);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета, 18); // Возвратить HTTPОтвет
	Если Результат.ВидОшибки.Пустая() Тогда
		Результат.ФайлСправки = ТелоОтвета;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйТелоЗапросаEnterpreneurReportPdfDownload(ИдентификаторСправки, ДанныеАутентификации)
	
	//{
	//  "authenticationInfo": {
	//    "authToken": "string",
	//    "login": "string",
	//    "password": "string"
	//  },
	//  "guid": "string",
	//  "params": [
	//    {
	//      "key": "string",
	//      "value": "string"
	//    }
	//  ]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("guid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторСправки));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#Область МониторингСобытий

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/organizations

Процедура ВызватьОперациюВключитьМониторингСобытийЮридическихЛиц(
	СписокИНН,
	Результат,
	ДанныеАутентификации,
	ДопПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/organizations");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringOrganizations(
		СписокИНН,
		ДанныеАутентификации,
		ДопПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringOrganizations(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringOrganizations(
	СписокИНН,
	ДанныеАутентификации,
	ДопПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		0,
		СписокИНН.ВГраница(),
		ДанныеАутентификации,
		ДопПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringOrganizations(ТелоОтвета, Результат)
	
	//{
	//    "queryGuid": String
	//}
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "queryGuid" Тогда
			
			Результат.ИдентификаторЗаявки = Новый УникальныйИдентификатор(
				ЗначениеСвойстваJSON(ЧтениеОтвета));
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/queryStatus

Процедура ВызватьОперациюРезультатВключенияМониторингаСобытийЮридическихЛиц(
		ИдентификаторЗаявки,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/queryStatus");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringQueryStatus(
		ИдентификаторЗаявки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringQueryStatus(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringQueryStatus(
		ИдентификаторЗаявки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "queryGuid" : String,
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("queryGuid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторЗаявки));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringQueryStatus(ТелоОтвета, Результат)
	
	//{
	//  "status": string
	//}
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "status" Тогда
				Результат.Завершено = (ЗначениеСвойстваJSON(ЧтениеОтвета) = "Done");
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/enterpreneur/request/create

Процедура ВызватьОперациюВключитьМониторингСобытийИндивидуальныхПредпринимателей(
	СписокИНН,
	Результат,
	ДанныеАутентификации,
	ДопПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/enterpreneur/request/create");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringEnterpreneur(
		СписокИНН,
		ДанныеАутентификации,
		ДопПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringentErpreneur(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringEnterpreneur(
	СписокИНН,
	ДанныеАутентификации,
	ДопПараметрыЗапроса)
	
	Возврат НовыйТелоЗапросаСписокИНН(
		СписокИНН,
		0,
		СписокИНН.ВГраница(),
		ДанныеАутентификации,
		ДопПараметрыЗапроса);
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringentErpreneur(ТелоОтвета, Результат)
	
	//{
	//    "queryGuid": String
	//}
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "queryGuid" Тогда
			
			Результат.ИдентификаторЗаявки = Новый УникальныйИдентификатор(
				ЗначениеСвойстваJSON(ЧтениеОтвета));
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/enterpreneur/request/check-status

Процедура ВызватьОперациюРезультатВключенияМониторингаСобытийИндивидуальныхПредпринимателей(
		ИдентификаторЗаявки,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/enterpreneur/request/check-status");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringEnterpreneurQueryStatus(
		ИдентификаторЗаявки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringEnterpreneurQueryStatus(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringEnterpreneurQueryStatus(
		ИдентификаторЗаявки,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	//{
	//    "authenticationInfo": {
	//        "authToken": "string",
	//        "login": "string",
	//        "password": "string"
	//    },
	//    "requestGuid" : String,
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("requestGuid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИдентификаторЗаявки));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringEnterpreneurQueryStatus(ТелоОтвета, Результат)
	
	//{
	//  "status": "string"
	//}
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "status"Тогда
			Результат.Завершено = (ЗначениеСвойстваJSON(ЧтениеОтвета) = "Done");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/events

Процедура ВызватьОперациюСобытияМониторингаЮридическихЛиц(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("monitoring/events");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаMonitoringEvents(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringEvents(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаMonitoringEvents(
		ПараметрОтбора,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "eventStartDate" : String,
	//    "lastEventGuid": String,
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ТипПараметрОтбора = ТипЗнч(ПараметрОтбора);
	Если ТипПараметрОтбора = Тип("Дата") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("eventStartDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаписатьДатуJSON(ПараметрОтбора, ФорматДатыJSON.ISO));
	ИначеЕсли ТипПараметрОтбора = Тип("УникальныйИдентификатор") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastEventGuid");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрОтбора));
	ИначеЕсли ТипПараметрОтбора = Тип("Массив") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("innList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
		Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
			ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрОтбора[Итератор]));
		КонецЦикла;
		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringEvents(ТелоОтвета, Результат)
	
	//{
	//  "lastEventGuid": String,
	//  "results": [
	//    {
	//      "inn": String,
	//      "events": [
	//        {
	//          "guid": String,
	//          "eventTypeGuid": String,
	//          "eventDate": String(ISO),
	//          "newValue": String,
	//          "oldValue": String,
	//          "IsActingNew": Boolean,
	//          "IsActingOld": Boolean
	//        },
	//      ]
	//    }
	//  ]
	//}
	
	// Метод гл. контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "lastEventGuid" Тогда
				
				ИдентификаторПоследнегоСобытияСтр = ЗначениеСвойстваJSON(ЧтениеОтвета);
				Если ИдентификаторПоследнегоСобытияСтр <> Неопределено Тогда
					Результат.ИдентификаторПоследнегоСобытия =
						Новый УникальныйИдентификатор(ИдентификаторПоследнегоСобытияСтр);
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "results" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда
					Продолжить;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректное значение свойства results. Ожидается тип значения Массив; Фактический тип значения: %1.'"),
						Строка(ЧтениеОтвета.ТипТекущегоЗначения));
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИНН = "";
						КонецЕсли;
						
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						
						ТекущийУровень = ТекущийУровень - 1;
						
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "inn" Тогда
							ИНН = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "events" Тогда
							ПрочитатьСобытияМониторинга(ЧтениеОтвета, Результат, ИНН);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Процедура ПрочитатьСобытияМониторинга(ЧтениеОтвета, Результат, ИНН)
	
	ЧтениеОтвета.Прочитать();
	Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда
		Возврат;
	ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение свойства results[].events. Ожидается тип значения Массив; Фактический тип значения: %1.'"),
			Строка(ЧтениеОтвета.ТипТекущегоЗначения));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
			// Закончено чтение объектов.
			Прервать;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ДанныеСобытия = Результат.События.Добавить();
			ДанныеСобытия.ИНН = ИНН;
			ПрочитатьТекущееСобытиеМониторинга(ЧтениеОтвета, ДанныеСобытия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьТекущееСобытиеМониторинга(ЧтениеОтвета, ДанныеСобытия)
	
	ТекущийУровень = 1;
	Пока ЧтениеОтвета.Прочитать() И ТекущийУровень > 0 Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			ТекущийУровень = ТекущийУровень - 1;
			Если ТекущийУровень = 0 Тогда
				// Закончено чтение объекта.
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "guid" Тогда
				ДанныеСобытия.Идентификатор =
					Новый УникальныйИдентификатор(ЗначениеСвойстваJSON(ЧтениеОтвета));
			ИначеЕсли ИмяСвойства = "eventTypeGuid" Тогда
				ДанныеСобытия.ИдентификаторТипаСобытия =
					Новый УникальныйИдентификатор(ЗначениеСвойстваJSON(ЧтениеОтвета));
			ИначеЕсли ИмяСвойства = "eventDate" Тогда
				ДатаСобытияСтр = ЗначениеСвойстваJSON(ЧтениеОтвета, "0001-01-01T00:00:00");
				ДанныеСобытия.ДатаМониторинга = ПрочитатьДатуJSON(ДатаСобытияСтр, ФорматДатыJSON.ISO);
			ИначеЕсли ИмяСвойства = "newValue" Тогда
				ДанныеСобытия.НовоеЗначение = ЗначениеСвойстваJSON( ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "oldValue" Тогда
				ДанныеСобытия.СтароеЗначение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /enterpreneur/events/search

Процедура ВызватьОперациюСобытияМониторингаИндивидуальныхПредпринимателей(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		Результат,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	URLОперации = URLОперацииСервиса("enterpreneur/events/search");
	ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТелоЗапроса = НовыйТелоЗапросаEnterpreneurMonitoringEventsSearch(
		СписокИНН,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса);
	
	ТелоОтвета = "";
	ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаEnterpreneurMonitoringEventsSearch(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйТелоЗапросаEnterpreneurMonitoringEventsSearch(
		ПараметрОтбора,
		НачальныйИндекс,
		КонечныйИндекс,
		ДанныеАутентификации,
		ДополнительныеПараметрыЗапроса)
	
	//{
	//  "authenticationInfo": {
	//    "authToken": "string",
	//    "login": "string",
	//    "password": "string"
	//  },
	//  "innList": [
	//    "string"
	//  ],
	//  "params": [
	//    {
	//      "key": "string",
	//      "value": "string"
	//    }
	//  ],
	//  "startId": 0
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ТипПараметрОтбора = ТипЗнч(ПараметрОтбора);
	Если ТипПараметрОтбора = Тип("Число") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("startId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрОтбора));
	ИначеЕсли ТипПараметрОтбора = Тип("Массив") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("innList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
		Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
			ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ПараметрОтбора[Итератор]));
		КонецЦикла;
		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаEnterpreneurMonitoringEventsSearch(ТелоОтвета, Результат)
	
	//{
	//  "continueId": String,
	//  "events": [
	//    {
	//      "inn": String,
	//      "events": [
	//        {
	//          "guid": String,
	//          "eventTypeGuid": String,
	//          "eventDate": String(ISO),
	//          "newValue": String,
	//          "oldValue": String,
	//          "IsActingNew": Boolean,
	//          "IsActingOld": Boolean
	//        },
	//      ]
	//    }
	//  ]
	//}
	
	// Метод гл. контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "continueId" Тогда
				
				ИдентификаторПоследнегоСобытияСтр = ЗначениеСвойстваJSON(ЧтениеОтвета);
				Если ИдентификаторПоследнегоСобытияСтр <> Неопределено Тогда
					Результат.ИдентификаторПоследнегоСобытия = ИдентификаторПоследнегоСобытияСтр;
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "events" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Null Тогда
					Продолжить;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректное значение свойства results. Ожидается тип значения Массив; Фактический тип значения: %1.'"),
						Строка(ЧтениеОтвета.ТипТекущегоЗначения));
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
						// Закончено чтение объектов из events.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						ДанныеСобытия = Результат.События.Добавить();
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "inn" Тогда
							ДанныеСобытия.ИНН = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "guid" Тогда
							ДанныеСобытия.Идентификатор =
								Новый УникальныйИдентификатор(ЗначениеСвойстваJSON(ЧтениеОтвета));
						ИначеЕсли ИмяСвойства = "eventTypeGuid" Тогда
							ДанныеСобытия.ИдентификаторТипаСобытия =
								Новый УникальныйИдентификатор(
									ЗначениеСвойстваJSON(ЧтениеОтвета));
						ИначеЕсли ИмяСвойства = "eventDate" Тогда
							ДатаСобытияСтр = ЗначениеСвойстваJSON(ЧтениеОтвета, "0001-01-01T00:00:00");
							ДанныеСобытия.ДатаМониторинга = ПрочитатьДатуJSON(ДатаСобытияСтр, ФорматДатыJSON.ISO);
						ИначеЕсли ИмяСвойства = "newValue" Тогда
							ДанныеСобытия.НовоеЗначение = ЗначениеСвойстваJSON( ЧтениеОтвета, "");
						ИначеЕсли ИмяСвойства = "oldValue" Тогда
							ДанныеСобытия.СтароеЗначение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов операции /monitoring/eventTypeList

Функция ВызватьОперациюТипыСобытийСообщенийМониторинга(Результат, ТелоОтвета)
	
	Если ТелоОтвета = Неопределено Тогда
		URLОперации = URLОперацииСервиса("monitoring/eventTypeList");
		ТелоЗапроса = НовыйТелоЗапросаMonitoringEventTypeList();
		ТелоОтвета = "";
		ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета);
		Если Не Результат.ВидОшибки.Пустая() Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ОбработатьТелоОтветаMonitoringEventTypeList(ТелоОтвета, Результат);
	Исключение
		ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке(), URLОперации, ТелоОтвета, Результат);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТелоЗапросаMonitoringEventTypeList()
	
	//{
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ОбработатьТелоОтветаMonitoringEventTypeList(ТелоОтвета, Результат)
	
	//{
	//  "results": [
	//    {
	//      "eventTypeGuid": string,
	//      "name": string,
	//      "description": string,
	//      "critical": boolean,
	//      "enforcementProceeding": boolean
	//     }
	//  ]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "results" Тогда
			
			ЧтениеОтвета.Прочитать();
			Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ЧтениеОтвета.Прочитать() Цикл
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
					И ТекущийУровень = 1 Тогда
					// Закончено чтение объектов из results.
					Прервать;
				КонецЕсли;
				
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
					ТекущийУровень = ТекущийУровень + 1;
					Если ТекущийУровень > 2 Тогда
						Продолжить;
					Иначе
						ИдентификаторТипаСобытия = ПустойИдентификатор;
						ДанныеТипаСобытия = Новый Структура;
						ДанныеТипаСобытия.Вставить("Название" ,                  "");
						ДанныеТипаСобытия.Вставить("Описание" ,                  "");
						ДанныеТипаСобытия.Вставить("Критичное",                  Ложь);
						ДанныеТипаСобытия.Вставить("ИсполнительноеПроизводство", Ложь);
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
					ТекущийУровень = ТекущийУровень - 1;
					Если ТекущийУровень = 1 Тогда
						// Прочитан очередной объект из results.
						Результат.ТипыСобытий.Вставить(ИдентификаторТипаСобытия, ДанныеТипаСобытия);
					КонецЕсли;
				ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
					И ТекущийУровень = 2 Тогда
					
					ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
					Если ИмяСвойства = "eventTypeGuid" Тогда
						ИдентификаторТипаСобытия =
							Новый УникальныйИдентификатор(
								ЗначениеСвойстваJSON(
									ЧтениеОтвета,
									""));
					ИначеЕсли ИмяСвойства = "name" Тогда
						ДанныеТипаСобытия.Название =
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
					ИначеЕсли ИмяСвойства = "description" Тогда
						ДанныеТипаСобытия.Описание =
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
					ИначеЕсли ИмяСвойства = "critical" Тогда
						ДанныеТипаСобытия.Критичное =
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								Ложь);
					ИначеЕсли ИмяСвойства = "enforcementProceeding" Тогда
						ДанныеТипаСобытия.ИсполнительноеПроизводство =
							ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВызововОперацийСервиса

// Получает тикет аутентификации при работе в модели сервиса.
//
Процедура ЗаполнитьТикетАутентификации(ДанныеАутентификации, URLОперации, Результат)

	Если ДанныеАутентификации.Свойство("Тикет") Тогда

		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации,
				ДанныеАутентификации.НомерОбласти);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			ДанныеАутентификации.Тикет = РезультатПолученияТикета.Тикет;
		Иначе
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаАутентификации;
			Результат.ЗаписыватьОшибкуВСтатусеИнформации =
				(РезультатПолученияТикета.КодОшибки = "ОперацияНеПоддерживается");
			Результат.СообщениеОбОшибке  = РезультатПолученияТикета.СообщениеОбОшибке;
			Результат.ИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ХостСервиса(Домен)
	
	
	Возврат "assessment.1c.ru";
	
КонецФункции

Функция URLОперацииСервиса(Операция)
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	Возврат "https://"
		+ ХостСервиса(НастройкиСоединения.ДоменРасположенияСерверовИПП)
		+ "/api/rest/"
		+ Операция;
	
КонецФункции

Процедура ПроверитьДоступностьСервиса(РезультатОперации)
	
	URLОперацииPing = URLОперацииСервиса("ping");
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
	
	Если ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Возврат;
		
	ИначеЕсли РезультатПроверки.ИмяОшибки = "ServerError" Тогда
		
		РезультатОперации.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса;
		РезультатОперации.СообщениеОбОшибке =
			НСтр("ru = 'Сервис временно недоступен.'")
			+ Символы.ПС
			+ РезультатПроверки.СообщениеОбОшибке;
		
	Иначе
		
		РезультатОперации.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения;
		РезультатОперации.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось подключиться к сервису.'")
			+ Символы.ПС
			+ РезультатПроверки.СообщениеОбОшибке;
		
	КонецЕсли;
	
	РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не удалось проверить доступность сервиса.'")
		+ Символы.ПС + РезультатПроверки.ИнформацияОбОшибке;
	
КонецПроцедуры

Процедура ВызватьОперациюСервиса(URLОперации, ТелоЗапроса, Результат, ТелоОтвета, ФорматТелаОтвета = 1)
	
	ПроверитьДоступностьСервиса(Результат);
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыПолученияСодержимого = Новый Структура;
	ПараметрыПолученияСодержимого.Вставить("Метод"                   , "POST");
	ПараметрыПолученияСодержимого.Вставить("ФорматОтвета"            , ФорматТелаОтвета);
	ПараметрыПолученияСодержимого.Вставить("Заголовки"               , Заголовки);
	ПараметрыПолученияСодержимого.Вставить("ДанныеДляОбработки"      , ТелоЗапроса);
	ПараметрыПолученияСодержимого.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыПолученияСодержимого.Вставить("Таймаут"                 , 60);
	
	РезультатЗагрузкиСодержимого = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыПолученияСодержимого);
	
	Если ПустаяСтрока(РезультатЗагрузкиСодержимого.КодОшибки) Тогда
		
		Если ТипЗнч(РезультатЗагрузкиСодержимого.Содержимое) = Тип("HTTPОтвет") Тогда
			ТелоОтвета = РезультатЗагрузкиСодержимого.Содержимое.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			ТелоОтвета = РезультатЗагрузкиСодержимого.Содержимое;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(РезультатЗагрузкиСодержимого.Содержимое) = Тип("HTTPОтвет") Тогда
			// Обработать тело ответа как строку.
			РезультатЗагрузкиСодержимого.Содержимое =
				РезультатЗагрузкиСодержимого.Содержимое.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		ПриОшибкеВызоваОперацииСервиса(РезультатЗагрузкиСодержимого, URLОперации, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеПараметрыВызоваОперацииСервиса() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса();
	
КонецФункции

Функция НовыйТелоЗапросаСписокИНН(
	СписокИНН,
	НачальныйИндекс,
	КонечныйИндекс,
	ДанныеАутентификации,
	ДополнительныеПараметрыЗапроса)
	
	//{
	//    "login": String,
	//    "password": String,
	//    "innList": [String],
	//    "params": [{
	//        "key": String,
	//        "value": String
	//    }]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("innList");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Итератор = НачальныйИндекс По КонечныйИндекс Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(СписокИНН[Итератор]);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("params");
	ЗаписатьДополнительныеПараметрыЗапроса(
		ЗаписьДанныхСообщения,
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция ПредставлениеСостоянияСправкиВПрограммномИнтерфейсе(СостояниеВСервисе)
	
	Если СостояниеВСервисе = "InProgress" Тогда
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.Готовится;
	ИначеЕсли СостояниеВСервисе = "Done" Тогда
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.Получена;
	ИначеЕсли СостояниеВСервисе = "UnknownINN" Тогда
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.НеизвестныйИНН;
	Иначе
		Возврат Перечисления.СостоянияСправкиСПАРКРиски.ОшибкаПодготовки;
	КонецЕсли;
	
КонецФункции

Процедура ПриОшибкеВызоваОперацииСервиса(РезультатЗагрузкиСодержимого, URLОперации, Результат)
	
	ШапкаИнформацииОбОшибке =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове операции %1 сервиса СПАРК.'"),
			URLОперации);
	
	Результат.СвойстваОшибки.Код = РезультатЗагрузкиСодержимого.КодСостояния;
	ПодвалСообщенияЖурналаРегистрации = "";
	Если ЭтоОбрабатываемыйКодОшибкиСервиса(РезультатЗагрузкиСодержимого.КодСостояния) Тогда
		// Если получен код состояния ответа, при котором тело описания ошибки
		// передается в установленном формате.
		Попытка
			// Заполняются Результат.СообщениеОбОшибке и Результат.СвойстваОшибки.
			ОбработатьТелоОшибки(РезультатЗагрузкиСодержимого, Результат);
		Исключение
			ПодвалСообщенияЖурналаРегистрации =
				НСтр("ru = 'Не удалось обработать описание ошибки.'")
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатЗагрузкиСодержимого.КодСостояния = 402 Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит;
		Результат.ЗаписыватьОшибкуВСтатусеИнформации = Истина;
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Требуется оплата сервиса.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 403 Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаАутентификации;
			Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации в сервисе 1СПАРК Риски.'");
			
		Иначе
			
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
			Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
				Результат.СообщениеОбОшибке = НСтр("ru = 'Неверный логин или пароль пользователя Интернет-поддержки.'");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 404 Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.НекорректныйЗапрос;
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Запрошенные данные не найдены.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодСостояния = 429 Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПревышеноКоличествоПопытокАутентификации;
		Если ПустаяСтрока(Результат.СообщениеОбОшибке) Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации.'");
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодОшибки = "ConnectError" Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось подключиться к сервису.'")
			+ Символы.ПС + РезультатЗагрузкиСодержимого.СообщениеОбОшибке;
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодОшибки = "ClientError" Тогда
		
		// Был передан некорректный запрос к серверу.
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить данные из сервиса СПАРК.'")
			+ Символы.ПС
			+ ?(ПустаяСтрока(Результат.СообщениеОбОшибке),
				РезультатЗагрузкиСодержимого.СообщениеОбОшибке,
				Результат.СообщениеОбОшибке);
		
	ИначеЕсли РезультатЗагрузкиСодержимого.КодОшибки = "ServerError" Тогда
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса;
		Результат.СообщениеОбОшибке = НСтр("ru = 'В сервисе возникли неполадки.'")
			+ Символы.ПС
			+ ?(ПустаяСтрока(Результат.СообщениеОбОшибке),
				РезультатЗагрузкиСодержимого.СообщениеОбОшибке,
				Результат.СообщениеОбОшибке);
		
	Иначе
		
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка при получении данных из сервиса 1СПАРК Риски.'")
			+ Символы.ПС + РезультатЗагрузкиСодержимого.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Результат.ИнформацияОбОшибке = ШапкаИнформацииОбОшибке
		+ Символы.ПС + Результат.СообщениеОбОшибке
		+ Символы.ПС + РезультатЗагрузкиСодержимого.ИнформацияОбОшибке
		+ Символы.ПС + ПодвалСообщенияЖурналаРегистрации;
	
КонецПроцедуры

Процедура ПриОшибкеОбработкиОтветаСервиса(ИнформацияОбОшибке, URLОперации, ТелоОтвета, Результат)
	
	Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при вызове операции %1 сервиса СПАРК.
			|Ошибка при обработке ответа сервиса. %2
			|Тело ответа: %3'"),
		URLОперации,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
		Лев(ТелоОтвета, 5120));
	
	Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса;
	Результат.СообщениеОбОшибке = НСтр("ru = 'Некорректный ответ сервиса.'");
	
КонецПроцедуры

Процедура ОбработатьТелоОшибки(РезультатЗагрузкиСодержимого, Результат)
	
	//{
	// "errorText": String,
	// "errorParams": [{
	//    "key": String,
	//    "value": String}]
	//}
	
	// Метод глобального контекста ПрочитатьJSON() не используется, т.к.
	// потребуется преобразование полученного значения в формат программного
	// интерфейса копированием значений.
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(РезультатЗагрузкиСодержимого.Содержимое);
	
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И ТекущийУровень = 1 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorText" Тогда
				
				Результат.СообщениеОбОшибке =
					ЗначениеСвойстваJSON(
						ЧтениеОтвета,
						"");
				
			ИначеЕсли ИмяСвойства = "errorParams" Тогда
				
				// Обработка свойств ошибки.
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
					Продолжить;
				КонецЕсли;
				
				Пока ЧтениеОтвета.Прочитать() Цикл
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
						И ТекущийУровень = 1 Тогда
						// Закончено чтение объектов из results.
						Прервать;
					КонецЕсли;
					
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
						ТекущийУровень = ТекущийУровень + 1;
						Если ТекущийУровень > 2 Тогда
							Продолжить;
						Иначе
							ИмяСвойстваОшибки      = "";
							ЗначениеСвойстваОшибки = "";
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
						ТекущийУровень = ТекущийУровень - 1;
						Если ТекущийУровень = 1 И Не ПустаяСтрока(ИмяСвойстваОшибки) Тогда
							// Прочитан очередной объект из errorParams.
							Результат.СвойстваОшибки.Вставить(ИмяСвойстваОшибки, ЗначениеСвойстваОшибки);
						КонецЕсли;
					ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
						И ТекущийУровень = 2 Тогда
						ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
						Если ИмяСвойства = "key" Тогда
							ИмяСвойстваОшибки = ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
						ИначеЕсли ИмяСвойства = "value" Тогда
							ЗначениеСвойстваОшибки = ЗначениеСвойстваJSON(
								ЧтениеОтвета,
								"");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Функция ЭтоОбрабатываемыйКодОшибкиСервиса(КодСостояния)
	
	Возврат (КодСостояния = 500
		Или КодСостояния = 400
		Или КодСостояния = 402
		Или КодСостояния = 403
		Или КодСостояния = 404
		Или КодСостояния = 429);
	
КонецФункции

Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1. Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьДополнительныеПараметрыЗапроса(
	ЗаписьПараметровЗапроса,
	ДополнительныеПараметрыЗапроса = Неопределено)
	
	ДопПараметрыЗапроса = ?(
		ДополнительныеПараметрыЗапроса = Неопределено,
		ДополнительныеПараметрыВызоваОперацииСервиса(),
		ДополнительныеПараметрыЗапроса);
	
	ЗаписьПараметровЗапроса.ЗаписатьНачалоМассива();
	
	Для каждого КлючЗначение Из ДопПараметрыЗапроса Цикл
		ЗаписатьДопПараметрЗапроса(
			ЗаписьПараметровЗапроса,
			КлючЗначение.Ключ,
			КлючЗначение.Значение);
	КонецЦикла;
	
	ЗаписьПараметровЗапроса.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ЗаписатьДопПараметрЗапроса(ЗаписьПараметровЗапроса, Имя, Значение)
	
	ЗаписьПараметровЗапроса.ЗаписатьНачалоОбъекта();
	ЗаписьПараметровЗапроса.ЗаписатьИмяСвойства("key");
	ЗаписьПараметровЗапроса.ЗаписатьЗначение(Имя);
	ЗаписьПараметровЗапроса.ЗаписатьИмяСвойства("value");
	ЗаписьПараметровЗапроса.ЗаписатьЗначение(Строка(Значение));
	ЗаписьПараметровЗапроса.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Загружает агрегированную информацию о контрагентах и сохраняет ее в кэше.
//
// Параметры:
//  ОбластьДанных - Число - номер области данных или "-1", если ИБ работает не в модели сервиса;
//  ОписаниеКонтрагентов - Массив структур - список элементов, см.СПАРКРиски.НовыйОписаниеКонтрагента();
//  ПараметрыВыполнения - Структура - Структура с ключами:
//   * ПроверитьСохраненноеСостояниеПодключенияКСервису - Булево - выполнить проверку подключения.
//
// Возвращаемое значение:
//	Структура:
//		* ЗначенияИндексов - ТаблицаЗначений:
//			** ИНН                           - <>
//			** ПодлежитПроверке              - <>
//			** ИндексДолжнойОсмотрительности - <>
//			** ИндексФинансовогоРиска        - <>
//			** ИндексПлатежнойДисциплины     - <>
//			** ИДОГрадация                   - <>
//			** ИФРГрадация                   - <>
//			** ИПДГрадация                   - <>
//			** Активен                       - <>
//			** ИдентификаторСтатуса          - <>
//			** ДатаСтатуса                   - <>
//			** КодСтатуса                    - <>
//			** ВидОшибки                     - <>
//		* ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - общий для всего запроса Вид ошибки;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое может быть
//			отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое может
//			быть записано в журнал регистрации;
//		* СвойстваОшибки - Структура - содержит детализированную информацию
//			о возникшей ошибке вызова операции сервиса СПАРК, которая может быть
//			дополнительно обработана вызывающим механизмом.
//			Поля структуры:
//				** Код - Число - код состояния, возвращенный сервисом.
//					Если сервис не был вызван, тогда значение 0;
//				** <Дополнительное поле> - Строка - дополнительные свойства,
//					возвращенные сервисом.
//
Функция ЗагрузитьИндексыКонтрагентов(
		ОбластьДанных,
		ОписаниеКонтрагентов,
		ПараметрыВыполнения = Неопределено) Экспорт
	
	Результат = НовыйРезультатВызоваСервиса();
	
	// Проверка, подключена ли интернет-поддержка.
	ДанныеАутентификации = Неопределено;
	ПередВызовомОперацииСервиса(
		Результат,
		?(ОбластьДанных = -1, Неопределено, ОбластьДанных),
		ДанныеАутентификации);
	
	Если НЕ Результат.ВидОшибки.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИндексыТаблица = ОписаниеТаблицыИндексов(ОписаниеКонтрагентов);
	Результат.Вставить("ЗначенияИндексов", ИндексыТаблица);
	
	ПолучитьДанныеИндексовИзСервиса(
		Результат,
		ДанныеАутентификации,
		ОписаниеКонтрагентов);
	
	// Заполнить градации индексов и признак ЮрЛица.
	Контрагенты = Новый Массив;
	Для Каждого ТекущийКонтрагент Из ОписаниеКонтрагентов Цикл
		Если ЗначениеЗаполнено(ТекущийКонтрагент.Контрагент) Тогда
			Контрагенты.Добавить(ТекущийКонтрагент.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСлужебныеДанныеИндексов(
		ОписаниеКонтрагентов,
		Результат);
	
	Если Контрагенты.Количество() > 0 Тогда
		ЗначенияРеквизитов = СПАРКРиски.ЗначенияРеквизитовКонтрагентов(Контрагенты);
	Иначе
		ЗначенияРеквизитов = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ОпределитьТипыСобытий(Результат);
	
	СохранитьДанныеИндексовВКэше(
		Результат,
		ЗначенияРеквизитов,
		ОписаниеКонтрагентов);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицыИндексов(ОписаниеКонтрагентов)
	
	ОписаниеТипаСобытия                 = Новый ОписаниеТипов("СправочникСсылка.ТипыСобытийСПАРКРиски");
	ОписаниеТипаГрадацияИндекса         = Новый ОписаниеТипов("ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски");
	ОписаниеТипаСтрока                  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло                   = Новый ОписаниеТипов("Число");
	ОписаниеТипаБулево                  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата                    = Новый ОписаниеТипов("Дата");
	ОписаниеТипаКонтрагентБИП           = Метаданные.ОпределяемыеТипы.КонтрагентБИП.Тип;
	ОписаниеТипаВидОшибки               = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОшибокСПАРКРиски");
	
	ИндексыТаблица = Новый ТаблицаЗначений;
	// Основные данные (results.inn);
	ИндексыТаблица.Колонки.Добавить("ИНН"                           , ОписаниеТипаСтрока);
	// Индексы (results.aggregatedIndex);
	ИндексыТаблица.Колонки.Добавить("СводныйИндикатор"              , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("ИндексДолжнойОсмотрительности" , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("ИндексПлатежнойДисциплины"     , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("ИндексФинансовогоРиска"        , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("БухгалтерскаяОтчетность"       , ОписаниеТипаЧисло);
	ИндексыТаблица.Колонки.Добавить("Активен"                       , ОписаниеТипаБулево);
	ИндексыТаблица.Колонки.Добавить("ОтображатьСтатус"              , ОписаниеТипаБулево);
	ИндексыТаблица.Колонки.Добавить("ИдентификаторСтатуса"          , ОписаниеТипаСтрока);
	ИндексыТаблица.Колонки.Добавить("ДатаСтатуса"                   , ОписаниеТипаДата);
	ИндексыТаблица.Колонки.Добавить("Статус"                        , ОписаниеТипаСобытия);
	ИндексыТаблица.Колонки.Добавить("СтатусНазвание"                , ОписаниеТипаСтрока);
	
	// Прочее;
	ИндексыТаблица.Колонки.Добавить("СводныйИндикаторГрадация"      , ОписаниеТипаГрадацияИндекса);
	ИндексыТаблица.Колонки.Добавить("ИДОГрадация"                   , ОписаниеТипаГрадацияИндекса);
	ИндексыТаблица.Колонки.Добавить("ИФРГрадация"                   , ОписаниеТипаГрадацияИндекса);
	ИндексыТаблица.Колонки.Добавить("ИПДГрадация"                   , ОписаниеТипаГрадацияИндекса);
	ИндексыТаблица.Колонки.Добавить("ПодлежитПроверке"              , ОписаниеТипаБулево);
	ИндексыТаблица.Колонки.Добавить("ВидОшибки"                     , ОписаниеТипаВидОшибки);
	ИндексыТаблица.Колонки.Добавить("ВидКонтрагента"               , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски"));
	
	// Ссылка на контрагента необходима для последующего заполнения кэша на клиенте.
	ИндексыТаблица.Колонки.Добавить("Контрагент"                    , ОписаниеТипаКонтрагентБИП);
	
	// Индексирование данных.
	ИндексыТаблица.Индексы.Добавить("ИНН");
	
	// Начальное заполнение таблицы по списку ИНН.
	Для Каждого ТекущийКонтрагент Из ОписаниеКонтрагентов Цикл
		НоваяСтрока = ИндексыТаблица.Добавить();
		НоваяСтрока.Контрагент = ТекущийКонтрагент.Контрагент;
		НоваяСтрока.ИНН        = ТекущийКонтрагент.ИНН; // Уже без пробелов.
		НоваяСтрока.Активен    = Истина;
		НоваяСтрока.ВидОшибки  = Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН; // Вид ошибки есть общий (для всего результата) и для каждого ИНН.
		НоваяСтрока.ИндексДолжнойОсмотрительности = -1;
		НоваяСтрока.ИндексПлатежнойДисциплины     = -1;
		НоваяСтрока.ИндексФинансовогоРиска        = -1;
	КонецЦикла;
	
	Возврат ИндексыТаблица;
	
КонецФункции

Процедура ПолучитьДанныеИндексовИзСервиса(
		Результат,
		ДанныеАутентификации,
		ОписаниеКонтрагентов)
	
	// В сервисе существует ограничение по количеству ИНН в вызове.
	// Для потребителя сервис вызывается прозрачно - без разбиения списка.
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыВызоваОперацииСервиса();
	
	НомерПачки        = 1;
	ПараметрСписокИНН = Новый Массив;
	ОбработанныеИНН   = Новый Соответствие;
	РазмерЗапроса     = 0;
	
	// 1. Запрос данных юридических лиц
	Для Каждого ТекущийКонтрагент Из ОписаниеКонтрагентов Цикл
		
		// Не заполненное значение может быть в случае если не завершено
		// отложенное обновление информационной базы.
		Если ЗначениеЗаполнено(ТекущийКонтрагент.ВидКонтрагента)
			И ТекущийКонтрагент.ВидКонтрагента <> Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбработанныеИНН[ТекущийКонтрагент.ИНН] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеИНН.Вставить(ТекущийКонтрагент.ИНН, Истина);
		
		ПараметрСписокИНН.Добавить(ТекущийКонтрагент.ИНН);
		РазмерЗапроса = РазмерЗапроса + 1;
		Если РазмерЗапроса >= 100 Тогда
			ВызватьОперациюИндексыСПАРКЮридическогоЛица(
				ПараметрСписокИНН,
				Результат,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса);
			НомерПачки = НомерПачки + 1;
			ПараметрСписокИНН = Новый Массив;
			РазмерЗапроса = 0;
			Если НЕ Результат.ВидОшибки.Пустая() Тогда
				// При ошибке вызова - возвратить результат.
				// При наличии успешных вызовов возвращается частичный результат.
				Прервать;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если РазмерЗапроса > 0 Тогда
		ВызватьОперациюИндексыСПАРКЮридическогоЛица(
			ПараметрСписокИНН,
			Результат,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса);
	КонецЕсли;
	
	ПослеВызоваОперацииСервиса(Результат);
	
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НомерПачки        = 1;
	ПараметрСписокИНН = Новый Массив;
	РазмерЗапроса     = 0;
	
	// 2. Запрос данных индивидуальных предпринимателей
	Для Каждого ТекущийКонтрагент Из ОписаниеКонтрагентов Цикл
		
		Если ТекущийКонтрагент.ВидКонтрагента <> Перечисления.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбработанныеИНН[ТекущийКонтрагент.ИНН] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеИНН.Вставить(ТекущийКонтрагент.ИНН, Истина);
		
		ПараметрСписокИНН.Добавить(ТекущийКонтрагент.ИНН);
		РазмерЗапроса = РазмерЗапроса + 1;
		Если РазмерЗапроса >= 100 Тогда
			ВызватьОперациюИндексыСПАРКИндивидуальногоПредпринимателя(
				ПараметрСписокИНН,
				Результат,
				ДанныеАутентификации,
				ДополнительныеПараметрыЗапроса);
			НомерПачки = НомерПачки + 1;
			ПараметрСписокИНН = Новый Массив;
			РазмерЗапроса = 0;
			Если НЕ Результат.ВидОшибки.Пустая() Тогда
				// При ошибке вызова - возвратить результат.
				// При наличии успешных вызовов возвращается частичный результат.
				Прервать;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если РазмерЗапроса > 0 Тогда
		ВызватьОперациюИндексыСПАРКИндивидуальногоПредпринимателя(
			ПараметрСписокИНН,
			Результат,
			ДанныеАутентификации,
			ДополнительныеПараметрыЗапроса);
	КонецЕсли;
	
	ПослеВызоваОперацииСервиса(Результат);

КонецПроцедуры

Процедура ЗаполнитьСлужебныеДанныеИндексов(ОписаниеКонтрагентов, Результат)
	
	Для Каждого ТекущаяСтрока Из Результат.ЗначенияИндексов Цикл
		ТекущаяСтрока.СводныйИндикаторГрадация = СПАРКРиски.ГрадацияИндекса(
			ТекущаяСтрока.СводныйИндикатор,
			"СводныйИндикатор");
		ТекущаяСтрока.ИДОГрадация = СПАРКРиски.ГрадацияИндекса(
			ТекущаяСтрока.ИндексДолжнойОсмотрительности,
			"ИндексДолжнойОсмотрительности");
		ТекущаяСтрока.ИФРГрадация = СПАРКРиски.ГрадацияИндекса(
			ТекущаяСтрока.ИндексФинансовогоРиска,
			"ИндексФинансовогоРиска");
		ТекущаяСтрока.ИПДГрадация = СПАРКРиски.ГрадацияИндекса(
			ТекущаяСтрока.ИндексПлатежнойДисциплины,
			"ИндексПлатежнойДисциплины");
		// В таблице Результат.ЗначенияИндексов невозможно корректно установить
		// признак "ПодлежитПроверке" из таблицы ЗначенияРеквизитов,
		// потому что в ЗначенияРеквизитов данные хранятся по контрагентам - т.е.
		// для одного ИНН, но разного контрагента
		// может быть разное значение "ПодлежитПроверке".
		ТекущаяСтрока.ПодлежитПроверке = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьТипыСобытий(Результат)
	
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Результат.ЗначенияИндексов) = Тип("ТаблицаЗначений")
		Или Результат.ЗначенияИндексов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЛокальныйЗначенияИндексов = Результат.ЗначенияИндексов;
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		ТаблицаИдентификаторов = ЛокальныйЗначенияИндексов.Скопировать(, "ИдентификаторСтатуса");
		ТаблицаИдентификаторов.Свернуть("ИдентификаторСтатуса");
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого ТекущийИдентификатор Из ТаблицаИдентификаторов Цикл
			Если НЕ ПустаяСтрока(ТекущийИдентификатор.ИдентификаторСтатуса) Тогда
				МассивИдентификаторов.Добавить(Новый УникальныйИдентификатор(ТекущийИдентификатор.ИдентификаторСтатуса));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивИдентификаторов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Спр.Идентификатор КАК Идентификатор,
				|	Спр.Ссылка        КАК ТипСобытияСсылка
				|ИЗ
				|	Справочник.ТипыСобытийСПАРКРиски КАК Спр
				|ГДЕ
				|	Спр.Идентификатор В (&Идентификаторы)
				|";
			Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
			РезультатЗапроса = Запрос.Выполнить();
			
			ТипыСобытийСохраненныеВИБ = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
			ТипыСобытийСохраненныеВИБ.Индексы.Добавить("Идентификатор");
			
			Если ТипыСобытийСохраненныеВИБ.Количество() < МассивИдентификаторов.Количество() Тогда
				
				ВидОшибкиДобавленияТиповСобытий = Неопределено;
				СПАРКРискиМониторингСобытий.ЗагрузитьНовыеТипыСобытий(
					МассивИдентификаторов,
					ТипыСобытийСохраненныеВИБ,
					ВидОшибкиДобавленияТиповСобытий);
				
				Если (ВидОшибкиДобавленияТиповСобытий <> Неопределено)
					И (ВидОшибкиДобавленияТиповСобытий <> Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка()) Тогда
					Результат.Вставить("ВидОшибки", ВидОшибкиДобавленияТиповСобытий);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить типы событий.
	Для Каждого ТекущаяСтрока Из ЛокальныйЗначенияИндексов Цикл
		Если НЕ ПустаяСтрока(ТекущаяСтрока.ИдентификаторСтатуса) Тогда
			ДанныеСтатуса = СПАРКРИски.ДанныеТипаСобытияПоИдентификатору(
				ТекущаяСтрока.ИдентификаторСтатуса);
			ТекущаяСтрока.Статус         = ДанныеСтатуса.Ссылка;
			ТекущаяСтрока.СтатусНазвание = ДанныеСтатуса.Название;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанныеИндексовВКэше(Результат, ЗначенияРеквизитов, ОписаниеКонтрагентов)
	
	ДатаОбновления = ТекущаяДатаСеанса();
	
	Если Не Результат.ВидОшибки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Результат.ЗначенияИндексов) = Тип("ТаблицаЗначений")
		Или Результат.ЗначенияИндексов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранять в кэше можно только в том случае, когда передали ссылку на Контрагента.
	ЛокальныйЗначенияИндексов = Результат.ЗначенияИндексов;
	ДописыватьОбластьДанных = (ЗначенияРеквизитов.Колонки.Найти("ОбластьДанных") <> Неопределено);
	Для Каждого ТекущийКонтрагент Из ОписаниеКонтрагентов Цикл
		Если НЕ ЗначениеЗаполнено(ТекущийКонтрагент.Контрагент) Тогда
			// Получение индексов инициировано,например, в форме нового элемента Контрагенты.
			// В этом случае ссылки еще нет и сохранять эти данные не нужно.
			Продолжить;
		КонецЕсли;
		// Найти данные для контрагента в результате веб-сервиса по ИНН.
		НайденнаяСтрока = ЛокальныйЗначенияИндексов.Найти(ТекущийКонтрагент.ИНН, "ИНН");
		Если НайденнаяСтрока <> Неопределено Тогда
			// Сохранение данных в кэше
			Если ДописыватьОбластьДанных Тогда
				СтрокиРеквизитов = ЗначенияРеквизитов.НайтиСтроки(
					Новый Структура("ИНН, Контрагент", ТекущийКонтрагент.ИНН, ТекущийКонтрагент.Контрагент));
				Если СтрокиРеквизитов.Количество() > 0 Тогда
					Для Каждого ТекущаяСтрокаСРеквизитами Из СтрокиРеквизитов Цикл
						ДанныеЗаписи = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденнаяСтрока);
						ДанныеЗаписи.Вставить("Контрагент"                        , ТекущийКонтрагент.Контрагент);
						ДанныеЗаписи.Вставить("ДатаОбновления"                    , ДатаОбновления);
						ДанныеЗаписи.Вставить("ТекстОшибки"                       , "");
						ДанныеЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", ТекущаяСтрокаСРеквизитами.ОбластьДанных);
						СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
					КонецЦикла;
				КонецЕсли;
			Иначе
				ДанныеЗаписи = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НайденнаяСтрока);
				ДанныеЗаписи.Вставить("Контрагент"    , ТекущийКонтрагент.Контрагент);
				ДанныеЗаписи.Вставить("ДатаОбновления", ДатаОбновления);
				ДанныеЗаписи.Вставить("ТекстОшибки"   , "");
				СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
			КонецЕсли;
		Иначе
			// Если значение по данному ИНН не вернули, значит этих данных нет в веб-сервисах.
			// Это может означать, что ИНН некорректный, передан ИНН НЕ юрлица (ИП?) и т.п.
			// В таком случае в регистр сведений необходимо в явном виде записать ошибку.
			Если ДописыватьОбластьДанных Тогда
				СтрокиРеквизитов = ЗначенияРеквизитов.НайтиСтроки(
					Новый Структура("ИНН, Контрагент", ТекущийКонтрагент.ИНН, ТекущийКонтрагент.Контрагент));
				Если СтрокиРеквизитов.Количество() > 0 Тогда
					Для Каждого ТекущаяСтрокаСРеквизитами Из СтрокиРеквизитов Цикл
						ДанныеЗаписи = Новый Структура();
						ДанныеЗаписи.Вставить("Контрагент"                        , ТекущийКонтрагент.Контрагент);
						ДанныеЗаписи.Вставить("ИНН"                               , ТекущийКонтрагент.ИНН);
						ДанныеЗаписи.Вставить("ДатаОбновления"                    , ДатаОбновления);
						ДанныеЗаписи.Вставить("ВидОшибки"                         , Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН);
						ДанныеЗаписи.Вставить("ТекстОшибки"                       , "");
						ДанныеЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", ТекущаяСтрокаСРеквизитами.ОбластьДанных);
						СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
					КонецЦикла;
				КонецЕсли;
			Иначе
				ДанныеЗаписи = Новый Структура();
				ДанныеЗаписи.Вставить("Контрагент"    , ТекущийКонтрагент.Контрагент);
				ДанныеЗаписи.Вставить("ИНН"           , ТекущийКонтрагент.ИНН);
				ДанныеЗаписи.Вставить("ДатаОбновления", ДатаОбновления);
				ДанныеЗаписи.Вставить("ВидОшибки"     , Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН);
				ДанныеЗаписи.Вставить("ТекстОшибки"   , "");
				СПАРКРиски.СохранитьЗначенияИндексовВКэше(ДанныеЗаписи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	// Сохранить таблицу обратно.
	Результат.Вставить("ЗначенияИндексов", ЛокальныйЗначенияИндексов);
	
КонецПроцедуры

Функция КлючиСоответствияВМассив(ПараметрСоответствие) Экспорт
	
	Результат = Новый Массив;
	Для Каждого КлючЗначение Из ПараметрСоответствие Цикл
		Результат.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
