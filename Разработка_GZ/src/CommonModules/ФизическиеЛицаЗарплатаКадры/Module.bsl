////////////////////////////////////////////////////////////////////////////////
// ФизическиеЛицаЗарплатаКадры: методы, дополняющие функциональность справочника
// 		ФизическиеЛица.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет в коллекцию описание проверяемых данных.
// 
// Параметры:
//		КоллекцияПравил - Массив, если передано Неопределено будет создан массив.
//		ПравилоПроверки - Строка, идентификатор правила проверки
//						доступные идентификаторы:
//							ИНН
//							СНИЛС
//							МестоРождения
//							Адрес
//		ПутьКДанным - Строка
//		ПредставлениеПроверяемогоЭлемента - Строка
//		ОбязательноКЗаполнению - Булево, по умолчанию Ложь.
//
Процедура ДобавитьПравилоПроверки(КоллекцияПравил, ПравилоПроверки, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = ПравилоПроверки;
	Правило.ПутьКДанным = ПутьКДанным;
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "УдостоверениеЛичности", для проверки документа,
// удостоверяющего личность.
// Описание одноименных параметров, см. ДобавитьПравилоПроверки.
//
// Параметры:
//		ПутьКДаннымСерииДокумента
//		ПутьКДаннымНомераДокумента
//		ПутьКДаннымДатыВыдачиДокумента
//      ПутьКДаннымКемВыданДокумент
//		ПроверятьДопустимыеВидыДокументовФНС - булево - определяет необходимость проверки виды документа с точки зрения ФНС.
//
Процедура ДобавитьПравилоПроверкиУдостоверенияЛичности(КоллекцияПравил, ПутьКДаннымВидДокумента, ПутьКДаннымСерииДокумента, ПутьКДаннымНомераДокумента, ПутьКДаннымДатыВыдачиДокумента, ПутьКДаннымКемВыданДокумент, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению = Ложь, ПроверятьДопустимыеВидыДокументовФНС = Ложь, ПроверятьКемВыданДатаВыдачи = Истина) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = "УдостоверениеЛичности";
	Правило.ПутьКДанным = ПутьКДаннымВидДокумента;
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	Правило.Вставить("ПроверятьДопустимыеВидыДокументовФНС", ПроверятьДопустимыеВидыДокументовФНС);
	Правило.Вставить("ПутьКДаннымСерииДокумента", ПутьКДаннымСерииДокумента);
	Правило.Вставить("ПутьКДаннымНомераДокумента", ПутьКДаннымНомераДокумента);
	Правило.Вставить("ПутьКДаннымДатыВыдачиДокумента", ПутьКДаннымДатыВыдачиДокумента);
	Правило.Вставить("ПутьКДаннымКемВыданДокумент", ПутьКДаннымКемВыданДокумент);
	Правило.Вставить("ПроверятьКемВыданДатаВыдачи", ПроверятьКемВыданДатаВыдачи);
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "УдостоверениеЛичностиИностранногоГражданина", для проверки документа,
// удостоверяющего личность.
// Описание одноименных параметров, см. ДобавитьПравилоПроверки.
//
// Параметры:
//		ПутьКДаннымСерииДокумента
//		ПутьКДаннымНомераДокумента
//		ПутьКДаннымДатыВыдачиДокумента
//      ПутьКДаннымКемВыданДокумент
//		ПроверятьДопустимыеВидыДокументовФНС - булево - определяет необходимость проверки виды документа с точки зрения ФНС.
//
Процедура ДобавитьПравилоПроверкиУдостоверенияЛичностиИностранногоГражданина(КоллекцияПравил, ПутьКДаннымВидДокумента,
	ПутьКДаннымСерииДокумента, ПутьКДаннымНомераДокумента, ПутьКДаннымДатыВыдачиДокумента, ПутьКДаннымКемВыданДокумент, 
	ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению = Ложь, ПроверятьДопустимыеВидыДокументовФНС = Ложь, 
	ПроверятьКемВыданДатаВыдачи = Истина) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = "УдостоверениеЛичностиИностранногоГражданина";
	Правило.ПутьКДанным = ПутьКДаннымВидДокумента;
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	Правило.Вставить("ПроверятьДопустимыеВидыДокументовФНС", ПроверятьДопустимыеВидыДокументовФНС);
	Правило.Вставить("ПутьКДаннымСерииДокумента", ПутьКДаннымСерииДокумента);
	Правило.Вставить("ПутьКДаннымНомераДокумента", ПутьКДаннымНомераДокумента);
	Правило.Вставить("ПутьКДаннымДатыВыдачиДокумента", ПутьКДаннымДатыВыдачиДокумента);
	Правило.Вставить("ПутьКДаннымКемВыданДокумент", ПутьКДаннымКемВыданДокумент);
	Правило.Вставить("ПроверятьКемВыданДатаВыдачи", ПроверятьКемВыданДатаВыдачи);
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "ДатаРождения", для проверки даты рождения.
// Описание одноименных параметров, см. ДобавитьПравилоПроверки.
//
// Параметры:
//		ДатаПроверки
//
Процедура ДобавитьПравилоПроверкиДатыРождения(КоллекцияПравил, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ДатаПроверки, ОбязательноКЗаполнению = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = "ДатаРождения";
	Правило.ПутьКДанным = ПутьКДанным;
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	Правило.Вставить("ДатаПроверки", ДатаПроверки);
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "ФИО", для проверки заполненности фамилии, имени, отчества.
// Описание одноименных параметров, см. ДобавитьПравилоПроверки.
//
// Параметры:
//		ПутьКДаннымФамилия
//		ПутьКДаннымИмя
//		ПутьКДаннымОтчество
//		ПутьКДаннымСтраныГражданства
//
Процедура ДобавитьПравилоПроверкиФИО(КоллекцияПравил, ПутьКДаннымФамилия, ПутьКДаннымИмя, ПутьКДаннымОтчество, ПутьКДаннымСтраныГражданства, ПредставлениеПроверяемогоЭлемента) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = "ФИО";
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = Истина;
	
	Правило.ПутьКДанным = ПутьКДаннымФамилия;
	Правило.Вставить("ПутьКДаннымИмя", ПутьКДаннымИмя);
	Правило.Вставить("ПутьКДаннымОтчество", ПутьКДаннымОтчество);
	Правило.Вставить("ПутьКДаннымСтраныГражданства", ПутьКДаннымСтраныГражданства);
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Проверяет заполнение коллекции данных физических лиц, заполняет коллекцию ошибок.
//
// Параметры:
//		КоллекцияДанныхФизическихЛиц - коллекция данных (массив структур, таблица значений).
//		ПравилаПроверки - массив, описаний правил проверки.
//		Ошибки - массив, описаний найденных ошибок.
//		Отказ
//
Процедура ПроверитьКоллекциюДанных(КоллекцияДанныхФизическихЛиц, ПравилаПроверки, Ошибки, Отказ = Ложь) Экспорт
	
	Для ИндексЭлемента = 0 По КоллекцияДанныхФизическихЛиц.Количество() - 1 Цикл
		
		ПроверитьДанныеФизическогоЛица(
			КоллекцияДанныхФизическихЛиц[ИндексЭлемента],
			ПравилаПроверки,
			Ошибки,
			Отказ,
			ИндексЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполнение данных физического лица, заполняет коллекцию ошибок.
//
// Параметры:
//		ДанныеФизическогоЛица
//		Ошибки
//		Отказ
//		НомерСтроки
//		ТолькоДляИностранныхГраждан
//
Процедура ПроверитьДанныеФизическогоЛица(ДанныеФизическогоЛица, ПравилаПроверки, Ошибки, Отказ = Ложь, 
	НомерСтроки = Неопределено) Экспорт
	
	ФизическиеЛицаЗарплатаКадрыВнутренний.ПроверитьДанныеФизическогоЛица(ДанныеФизическогоЛица, ПравилаПроверки, Ошибки, 
		Отказ, НомерСтроки);
	
КонецПроцедуры

// Выводит в окно сообщений ошибки проверки данных физических лиц.
//
// Параметры:
//		Ошибки - Соответствие массива описания ошибок физическим лицам.
//		Отказ
//
Процедура ВывестиОшибкиДанныхФизическогоЛица(Ошибки, Отказ = Ложь) Экспорт
	
	Для каждого ОшибкаДанных Из Ошибки Цикл
		
		ОписаниеОшибки = ОшибкаДанных.Значение;
		
		ОбщегоНазначения.СообщитьПользователю(
			ОписаниеОшибки.ТекстОшибки,
			,
			ОписаниеОшибки.ПолеФормы 
				+ ?(ОписаниеОшибки.НомерСтроки = Неопределено, "", "[" + ОписаниеОшибки.НомерСтроки + "]"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные физического лица, необходимые для БРО.
//
// Параметры:
// 		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо, данные которого нужно получить.
//		МассивПоказателей - Массив - данные физического лица которые нужно получить см.
//		                             РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице.
//		ДатаЗначения - Дата - дата на которую нужно получать периодические данные. По умолчанию данные будут получены на
//		                      текущую дату сеанса.
//
// Возвращаемое значение:
// 		Структура - см. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице.
//
Функция ДанныеФизическогоЛицаДляРегламентированнойОтчетности(ФизическоеЛицо, МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт 
	ПолучаемыеДанные = Новый Массив;
	ДанныеФизическогоЛица = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Если МассивПоказателей = Неопределено Тогда
		ПолучаемыеДанные.Добавить("ИНН");
		ПолучаемыеДанные.Добавить("Фамилия");
		ПолучаемыеДанные.Добавить("Имя");
		ПолучаемыеДанные.Добавить("Отчество");
		
		ДанныеФизическогоЛица.Вставить("ИНН");
		ДанныеФизическогоЛица.Вставить("Фамилия");
		ДанныеФизическогоЛица.Вставить("Имя");
		ДанныеФизическогоЛица.Вставить("Отчество");
	Иначе
		Для Каждого ЗапрашиваемыйПоказатель Из МассивПоказателей Цикл
			Если ЗапрашиваемыйПоказатель = "ИНН"
				Или ЗапрашиваемыйПоказатель = "Фамилия"
				Или ЗапрашиваемыйПоказатель = "Имя"
				Или ЗапрашиваемыйПоказатель = "Отчество" Тогда
				
				ПолучаемыеДанные.Добавить(ЗапрашиваемыйПоказатель);
			КонецЕсли;
			
			ДанныеФизическогоЛица.Вставить(ЗапрашиваемыйПоказатель);
		КонецЦикла;	
	КонецЕсли;	
	
	СписокФизическихЛиц = Новый Массив;
	СписокФизическихЛиц.Добавить(ФизическоеЛицо); 
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизическихЛиц, ПолучаемыеДанные, ДатаЗначения);
	
	Если КадровыеДанные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, КадровыеДанные[0]);
	КонецЕсли;
	
	Возврат ДанныеФизическогоЛица;
КонецФункции

// Склоняет переданные фамилию, имя, отчество.
// Возвращает признак, выполнено ли склонение.
// Параметры:
//   ФИО   - Строка - ФИО в именительном падеже.
//   Падеж - Число  - Падеж, в который необходимо поставить ФИО:
//                    1 - Именительный
//                    2 - Родительный
//                    3 - Дательный
//                    4 - Винительный
//                    5 - Творительный
//                    6 - Предложный.
//   Результат - Строка - возвращаемый результат склонения.
//   Пол - ПеречислениеСсылка.ПолФизическогоЛица - Пол физического лица, необязательный. 
//       - Число - 1 - мужской, 2 - женский.
//
// Возвращаемое значение:
//  Булево - Истина, если удалось просклонять ФИО
//
Функция Просклонять(Знач ФИО, Знач Падеж, Результат, Знач Пол = Неопределено, СсылкаНаОбъект = Неопределено) Экспорт
	
	ПолЧислом = Неопределено;
	Если ТипЗнч(Пол) = Тип("Число") Тогда
		ПолЧислом = Пол;
	Иначе
		Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			ПолЧислом = 1;
		ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ПолЧислом = 2;
		КонецЕсли;
	КонецЕсли;
	
	Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, Падеж, СсылкаНаОбъект, ПолЧислом);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Истина;
	Иначе
		Результат = ФИО;
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции

// Возвращает представление ФИО, для заполнения расшифровки подписи в виде "И. О. Фамилия".
// 
// Параметры:
//		ФИОПолные	- Строка
//					- Структура
//						* Фамилия	- Строка
//						* Имя		- Строка
//						* Отчество	- Строка
//						* Инициалы	- Строка
//
// Возвращаемое значение:
//		Строка
//
Функция РасшифровкаПодписи(Знач ФИОПолные) Экспорт
	
	Если ТипЗнч(ФИОПолные) = Тип("Структура")
		Или ТипЗнч(ФИОПолные) = Тип("ФиксированнаяСтруктура") Тогда
		
		Инициалы = Неопределено;
		ФИОПолные.Свойство("Инициалы", Инициалы);
		Если Не ЗначениеЗаполнено(Инициалы) Тогда
			Инициалы = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(ФИОПолные.Имя, ФИОПолные.Отчество)
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Инициалы) Тогда
			РасшифровкаПодписи = ФИОПолные.Фамилия;
		Иначе
			РасшифровкаПодписи = Инициалы + " " + ФИОПолные.Фамилия;
		КонецЕсли;
		
	Иначе
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
		Если ФИО.Количество() >= 3 Тогда
			РасшифровкаПодписи = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(ФИО[1], ФИО[2]) + " " + ФИО[0];
		Иначе
			РасшифровкаПодписи = ФИОПолные;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РасшифровкаПодписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает результат поиска физического лица по указанным реквизитам.
Функция ФизическоеЛицоПоСНИЛСИлиФИО(СНИЛС, Фамилия, Имя, Отчество) Экспорт
	Результат = Новый Структура("ФизическоеЛицо, ТекстОшибки", Неопределено, "");
	
	Если Не ЗначениеЗаполнено(СНИЛС) И Не ЗначениеЗаполнено(Фамилия) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не заполнен СНИЛС и ФИО'");
		Возврат Результат;
	КонецЕсли;
	
	Запрос = ЗапросДляПоискаФизическихЛицПоСНИЛСИлиФИО(СНИЛС, Фамилия, Имя, Отчество);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат.ФизическоеЛицо = Выборка.Ссылка;
		
		Если ЗначениеЗаполнено(СНИЛС) И СНИЛС <> Выборка.СНИЛС Тогда
			Если Не ЗначениеЗаполнено(Выборка.СНИЛС) Тогда
				Результат.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'У сотрудника ""%1"" не заполнен СНИЛС (в файле СНИЛС ""%2"").'"),
					Строка(Выборка.Ссылка),
					СНИЛС);
			Иначе
				Результат.ФизическоеЛицо = Неопределено;
				Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По СНИЛС ""%4"" сотрудник не найден, а по ФИО ""%1"" найден сотрудник ""%2"" с другим СНИЛС ""%3"".'"),
					ТРег(Фамилия) + " " + ТРег(Имя) + " " + ТРег(Отчество),
					Строка(Выборка.Ссылка),
					Выборка.СНИЛС,
					СНИЛС);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Параметры = Новый Массив;
		Подсказка = "";
		Если ЗначениеЗаполнено(СНИЛС) Тогда
			Параметры.Добавить(СтрШаблон(НСтр("ru = 'СНИЛС ""%1""'"), СНИЛС));
			Подсказка = Подсказка + " " + НСтр("ru = 'Проверьте что у сотрудника корректно заполнен СНИЛС.'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Фамилия) Тогда
			Параметры.Добавить(СтрШаблон(НСтр("ru = 'ФИО ""%1""'"), ТРег(Фамилия) + " " + ТРег(Имя) + " " + ТРег(Отчество)));
		КонецЕсли;
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден сотрудник по %1.%2'"),
			СтрСоединить(Параметры, ", "),
			Подсказка);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ПроверитьУникальностьНаименованияФизическогоЛица(ФизическоеЛицоОбъект, Отказ) Экспорт
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицоОбъект.ФИО);
	
	СписокУточнений = СотрудникиФормы.ПодобратьСписокУточненийТекущегоФизическогоЛица(ФизическоеЛицоОбъект.Ссылка, СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество, "");
	НайденноеЗначение = СписокУточнений.НайтиПоЗначению(ФизическоеЛицоОбъект.УточнениеНаименования);
	Если НайденноеЗначение <> Неопределено Тогда
		
		СтрокаПодстановки = НСтр("ru = 'В списке уже есть'") + " %1.";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ФизическоеЛицоОбъект.ФИО);
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru='Введите дополнительную строку по которой вы будете отличать этого человека'") + ".";
		
		Если СписокУточнений.Количество() <> 1 Или Не ПустаяСтрока(СписокУточнений[0].Значение) Тогда
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС + НСтр("ru='Для идентификации сотрудников уже использованы следующие дополнения'") + ":";
			
			Для каждого Уточнение Из СписокУточнений Цикл
				
				Если ПустаяСтрока(Уточнение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + "
					| - " + Уточнение.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.УточнениеНаименования", , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ФамилияДляПоиска(Знач Фамилия) Экспорт
	
	ПодготовитьКПоискуПоФИО(Фамилия); 
	Возврат ФамилияСлужебная(Фамилия);
	
КонецФункции

Функция ФамилияСлужебная(Знач Фамилия)
	
	Фамилия = ВРег(Фамилия);
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Фамилия);
	Возврат Фамилия;
	
КонецФункции

Функция ИмяДляПоиска(Знач Имя) Экспорт
	
	ПодготовитьКПоискуПоФИО(Имя); 
	Возврат ИмяСлужебное(Имя);
	
КонецФункции

Функция ИмяСлужебное(Знач Имя)
	
	Имя = ВРег(Имя);
	
	Если ЗначениеЗаполнено(Имя) И СтрНайти("НАТАЛЬЯ,НАТАЛИЯ", Имя) > 0 Тогда
		Имя = "НАТАЛЬИЯ";
	КонецЕсли;
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Имя);
	Возврат Имя;
	
КонецФункции

Функция ОтчествоДляПоиска(Знач Отчество) Экспорт
	
	ПодготовитьКПоискуПоФИО(Отчество); 
	Возврат ОтчествоСлужебное(Отчество);
	
КонецФункции

Функция ОтчествоСлужебное(Знач Отчество)
	
	Отчество = ВРег(Отчество);
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Отчество);
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить("ИЕВИЧ");
	МассивПодстрок.Добавить("ЬЕВИЧ");
	МассивПодстрок.Добавить("ИЕВНА");
	МассивПодстрок.Добавить("ЬЕВНА");
	НетЗаменыСимволов = Истина;
	Для каждого Стр Из МассивПодстрок Цикл
		ПозицияСимвола = СтрНайти(Отчество, Стр);
		Если ПозицияСимвола > 0 Тогда
			Отчество = Лев(Отчество,ПозицияСимвола-1) + "ИЬ" + Сред(Отчество,ПозицияСимвола+1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетЗаменыСимволов Тогда
		
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить("ЬЯНОВИЧ");
		МассивПодстрок.Добавить("ИЯНОВИЧ");
		МассивПодстрок.Добавить("ИАНОВИЧ");
		МассивПодстрок.Добавить("ЬЯНОВНА");
		МассивПодстрок.Добавить("ИЯНОВНА");
		МассивПодстрок.Добавить("ИАНОВНА");
		Для каждого Стр Из МассивПодстрок Цикл
			ПозицияСимвола = СтрНайти(Отчество, Стр);
			Если ПозицияСимвола > 0 Тогда
				Отчество = Лев(Отчество,ПозицияСимвола-1) + "ИЬЯА" + Сред(Отчество,ПозицияСимвола+2);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отчество;
	
КонецФункции

Функция КодСтраныДляОтчетности(СоответствиеКодовСтран, Гражданство, СтранаВыдачиДокумента) Экспорт 
	
	Страна = ?(ЗначениеЗаполнено(Гражданство), Гражданство, СтранаВыдачиДокумента);
	Возврат ?(ЗначениеЗаполнено(Страна), СоответствиеКодовСтран[Страна], СоответствиеКодовСтран[Справочники.СтраныМира.Россия]);
	
КонецФункции

// Рассчитывает количество полных лет человека по дате его рождения.
// См. ФизическиеЛицаЗарплатаКадрыКлиентСервер.Возраст
//
// Параметры:
//  ДатаРождения - Дата - дата рождения человека, возраст которого нужно рассчитать,
//  ДатаВозраста - Дата - необязательный, дата, на которую нужно рассчитать возраст,
//						если не указано, рассчитывается на текущую дату сеанса.
// 
// Возвращаемое значение:
//  Число, Неопределено - количество полных лет на указанную дату,
//						Неопределено, если дата рождения не заполнена.
//
Функция Возраст(ДатаРождения, ДатаВозраста = Неопределено) Экспорт
	
	Если ДатаВозраста = Неопределено Тогда
		ДатаВозраста = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ФизическиеЛицаЗарплатаКадрыКлиентСервер.Возраст(ДатаРождения, ДатаВозраста);
	
КонецФункции

// Формирует представление возраста человека.
// См. ФизическиеЛицаЗарплатаКадрыКлиентСервер.ПредставлениеВозраста
//
// Параметры:
//  ДатаРождения - Дата - дата рождения человека, возраст которого нужно рассчитать,
//  ДатаВозраста - Дата - необязательный, дата, на которую нужно рассчитать возраст,
//						если не указано, рассчитывается на текущую дату сеанса.
// 
// Возвращаемое значение:
//  Строка - количество полных лет (или месяцев, если возраст меньше года) на указанную дату с уточнением единицы времени.
//
// Пример:
//  "31 год", "28 лет", "42 года", "3 месяца" и т.д.
//
Функция ПредставлениеВозраста(ДатаРождения, ДатаВозраста = Неопределено) Экспорт
	
	Если ДатаВозраста = Неопределено Тогда
		ДатаВозраста = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ФизическиеЛицаЗарплатаКадрыКлиентСервер.ПредставлениеВозраста(ДатаРождения, ДатаВозраста);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ФизическоеЛицоПоСНИЛСИлиФИО.
// Возвращает массив ссылок на справочник физические лица, имеющие заданные Имя, Фамилию, Отчество и СНИЛС.
//
// Параметры:
//		Фамилия
//		Имя
//		Отчество
//		СНИЛС
//
// Возвращаемое значение:
//		Массив - ссылки на элементы справочника ФизическиеЛица.
//
Функция ФизическиеЛицаПоФИОИСНИЛС(Фамилия, Имя, Отчество, СНИЛС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
		|			&Период,
		|			Имя = &Имя
		|				И Отчество = &Отчество
		|				И Фамилия = &Фамилия
		|				И ФизическоеЛицо.СтраховойНомерПФР = &СНИЛС) КАК ФИОФизическихЛицСрезПоследних";

	Запрос.УстановитьПараметр("Имя", 		Имя);
	Запрос.УстановитьПараметр("Отчество", 	Отчество);
	Запрос.УстановитьПараметр("Фамилия", 	Фамилия);
	Запрос.УстановитьПараметр("Период", 	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СНИЛС", 		СНИЛС);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
	КонецЕсли;
	
	Возврат Новый Массив; 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаПерсональныхДанныхФизическихЛиц

// Осуществляет проверку данных физических лиц.
//
// Параметры:
//				Ссылка - Ссылка на объект - владелец проверяемых данных.
//				ДанныеДляПроверки - Коллекция проверяемых данных (например: спозиционированная выборка из результата запроса).
//				ПроверяемыеРеквизиты - Массив имен проверяемых реквизитов.
//				МассивНепроверяемыхРеквизитов - Массив имен реквизитов, исключаемых из проверки.
//				Дата - Дата, на которую осуществляется проверка данных.
//				ВыводитьСообщения - Булево, если истина, дополнительно к установке признака Отказ, осуществляется вывод сообщений.
//				Отказ
//				ВыполнятьПолнуюПроверку
//
Процедура ПроверитьПерсональныеДанныеСотрудника(Ссылка, ДанныеДляПроверки, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, Дата = '00010101', ВыводитьСообщения = Ложь, Отказ = Ложь, ВыполнятьПолнуюПроверку = Истина) Экспорт
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
	МассивНеПроверяемыхРеквизитов.Очистить();
	
	СтруктураПроверяемыхДанных = МенеджерОбъекта.ПолучитьСтруктуруПроверяемыхДанных();
	
	СтруктураПроверяемыхДокументов = Новый Структура("ВидДокумента,  СерияДокумента, НомерДокумента, ДатаВыдачи, КемВыдан");
	ЗаполнитьЗначенияСвойств(СтруктураПроверяемыхДокументов, ДанныеДляПроверки);
	
	ПредставленияПроверяемыхРеквизитов = МенеджерОбъекта.ПолучитьПредставленияПроверяемыхРеквизитов();
		
	СоответствиеРеквизитовФормеОбъекта = МенеджерОбъекта.ПолучитьСоответствиеРеквизитовФормеОбъекта(ДанныеДляПроверки);
		
	СоответствиеРеквизитовПутиВФормеОбъекта = МенеджерОбъекта.ПолучитьСоответствиеРеквизитовПутиВФормеОбъекта();
	
	СоответствиеРеквизитовОткрываемымОбъектам = МенеджерОбъекта.ПолучитьСоответствиеПроверяемыхРеквизитовОткрываемымОбъектам(Ссылка, ДанныеДляПроверки);
	
	Для Каждого КлючЗначение Из СтруктураПроверяемыхДанных Цикл
		СтруктураПроверяемыхДанных[КлючЗначение.Ключ] = Неопределено;
	КонецЦикла;
	
	СоответствиеПутейИИменПроверяемыхРеквизитов = Новый Структура;
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		ПутьКРеквизиту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита, ".");	
		
		СоответствиеПутейИИменПроверяемыхРеквизитов.Вставить(ПутьКРеквизиту[ПутьКРеквизиту.Количество() - 1], ИмяРеквизита);
	КонецЦикла;	
	
	ЗаполнитьЗначенияСвойств(СтруктураПроверяемыхДанных, ДанныеДляПроверки);

	ПроверитьОбязательныеПоля(Ссылка, СтруктураПроверяемыхДанных, ДанныеДляПроверки, СоответствиеПутейИИменПроверяемыхРеквизитов, СоответствиеРеквизитовФормеОбъекта, СоответствиеРеквизитовПутиВФормеОбъекта, СоответствиеРеквизитовОткрываемымОбъектам, ПредставленияПроверяемыхРеквизитов, МассивНепроверяемыхРеквизитов, ВыводитьСообщения, Отказ);
	
	Если ВыполнятьПолнуюПроверку Тогда
		ПроверитьЗаполнениеСтраховыхНомеровПФР(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения, Отказ);
	КонецЕсли;	
	
	Если ВыполнятьПолнуюПроверку Тогда
		ПроверитьМестоРождения(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения, Отказ);
	КонецЕсли;	
	
	Если ВыполнятьПолнуюПроверку Тогда
		ПроверитьДанныеУдостоверенийЛичности(Ссылка, Дата, СтруктураПроверяемыхДокументов, ДанныеДляПроверки, СоответствиеПутейИИменПроверяемыхРеквизитов, СоответствиеРеквизитовФормеОбъекта, СоответствиеРеквизитовПутиВФормеОбъекта, ПредставленияПроверяемыхРеквизитов, СоответствиеРеквизитовОткрываемымОбъектам, МассивНепроверяемыхРеквизитов, ВыводитьСообщения, Отказ);
	КонецЕсли;	
	
	Если ВыполнятьПолнуюПроверку Тогда
		ПроверитьЗаполнениеАдресов(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения, Отказ);
	КонецЕсли;	

	ПроверитьДатыРождения(Дата, СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения, Отказ);
	
	Если ВыполнятьПолнуюПроверку Тогда
		ПроверитьЗаполнениеИНН(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения, Отказ);
	КонецЕсли;	
			
КонецПроцедуры	

Процедура ПроверитьЗаполнениеИНН(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения = Истина, Отказ = Ложь)
	Перем ОткрываемыйОбъект;
	Если СтруктураПроверяемыхДанных.Свойство("ИНН") Тогда 
		Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("ИНН", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;	
		ТекстСообщения = "";
		Если Не ПустаяСтрока(СтруктураПроверяемыхДанных.ИНН) И НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтруктураПроверяемыхДанных.ИНН, Ложь, ТекстСообщения) Тогда
			Если ВыводитьСообщения Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2'"), ДанныеДляПроверки.СотрудникНаименование, ТекстСообщения);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, "ИНН", , Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПроверитьДатыРождения(Дата, СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения = Истина, Отказ = Ложь)
	Перем ОткрываемыйОбъект;
	
	Если СтруктураПроверяемыхДанных.Свойство("ДатаРожденияВСвидетельстве") Тогда
		Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("ДатаРожденияВСвидетельстве", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтруктураПроверяемыхДанных.ДатаРожденияВСвидетельстве) И СтруктураПроверяемыхДанных.ДатаРожденияВСвидетельстве > Дата Тогда
			Если ВыводитьСообщения Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: указанная в свидетельстве дата рождения не может быть больше даты подачи сведений.'"), ДанныеДляПроверки.СотрудникНаименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, "ДатаРождения",,Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если СтруктураПроверяемыхДанных.Свойство("ДатаРождения") Тогда
		Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("ДатаРождения", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтруктураПроверяемыхДанных.ДатаРождения) И СтруктураПроверяемыхДанных.ДатаРождения > Дата Тогда
			Если ВыводитьСообщения Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: дата рождения не может быть больше даты подачи сведений.'"), ДанныеДляПроверки.СотрудникНаименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, "ДатаРождения",,Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры	

Процедура ПроверитьОбязательныеПоля(Ссылка, СтруктураПроверяемыхДанных, ДанныеДляПроверки, СоответствиеПутейИИменПроверяемыхРеквизитов, СоответствиеРеквизитовФормеОбъекта, СоответствиеРеквизитовПутиВФормеОбъекта, СоответствиеРеквизитовОткрываемымОбъектам, ПредставленияПроверяемыхРеквизитов, МассивНепроверяемыхРеквизитов, ВыводитьСообщения = Истина, Отказ = Ложь)
	Перем ЗначениеДанныхСвидетельства;
	Перем ОткрываемыйОбъект;
	Для Каждого КлючЗначение Из СтруктураПроверяемыхДанных Цикл
		Если КлючЗначение.Значение = Неопределено Тогда 
			Продолжить;	
		КонецЕсли;	
		
		Если СоответствиеПутейИИменПроверяемыхРеквизитов.Свойство(КлючЗначение.Ключ) Тогда
			Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2'"), ДанныеДляПроверки.СотрудникНаименование, ПредставленияПроверяемыхРеквизитов[КлючЗначение.Ключ]);
				
				Если НЕ СоответствиеРеквизитовОткрываемымОбъектам.Свойство(КлючЗначение.Ключ, ОткрываемыйОбъект) Тогда
					ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
				КонецЕсли;	
				
				Если (СтруктураПроверяемыхДанных.Свойство(КлючЗначение.Ключ + "ВСвидетельстве", ЗначениеДанныхСвидетельства) И ЗначениеДанныхСвидетельства <> Неопределено) Или Прав(КлючЗначение.Ключ, 14) = "ВСвидетельстве" Тогда
					ОткрываемыйОбъект = Ссылка;
				Иначе
					ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
				КонецЕсли;	
				Если ВыводитьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, СоответствиеРеквизитовФормеОбъекта[КлючЗначение.Ключ], СоответствиеРеквизитовПутиВФормеОбъекта[КлючЗначение.Ключ], Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;
			МассивНепроверяемыхРеквизитов.Добавить(СоответствиеПутейИИменПроверяемыхРеквизитов[КлючЗначение.Ключ]);
		КонецЕсли;				
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеСтраховыхНомеровПФР(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения = Истина, Отказ = Ложь)
	Перем ОткрываемыйОбъект;
	
	Если СтруктураПроверяемыхДанных.Свойство("СтраховойНомерПФР") Тогда
		
		Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("СтраховойНомерПФР", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;	
		
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(СтруктураПроверяемыхДанных.СтраховойНомерПФР) И (Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СтруктураПроверяемыхДанных.СтраховойНомерПФР, ТекстСообщения)) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2'"), ДанныеДляПроверки.СотрудникНаименование, ТекстСообщения) + " ";
			Если ВыводитьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, "СтраховойНомерПФР",,Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Если СтруктураПроверяемыхДанных.Свойство("СтраховойНомерПФРВСвидетельстве") Тогда
		
		Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("СтраховойНомерПФРВСвидетельстве", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;	

		ТекстСообщения = "";
		Если ЗначениеЗаполнено(СтруктураПроверяемыхДанных.СтраховойНомерПФРВСвидетельстве) И (Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СтруктураПроверяемыхДанных.СтраховойНомерПФРВСвидетельстве, ТекстСообщения)) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2'"), ДанныеДляПроверки.СотрудникНаименование);		
			Если ВыводитьСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, "СтраховойНомерПФР",,Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроверитьМестоРождения(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения = Истина, Отказ = Ложь)
	Перем ОткрываемыйОбъект;
	
	Если СтруктураПроверяемыхДанных.Свойство("МестоРождения") Тогда
		
		Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("МестоРождения", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеДляПроверки.МестоРождения) Тогда 
			Если СокрЛП(СтрЗаменить(ДанныеДляПроверки.МестоРождения,",","")) = "" 
				Или СокрЛП(СтрЗаменить(ДанныеДляПроверки.МестоРождения,",","")) = "0" Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: не заполнено место рождения.'"), ДанныеДляПроверки.СотрудникНаименование);
				Если ВыводитьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, "ФизическоеЛицоМестоРождения", "ЭтаФорма",Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли; 
		КонецЕсли;	

	КонецЕсли;		
КонецПроцедуры	

Процедура ПроверитьДанныеУдостоверенийЛичности(Ссылка, Дата, СтруктураПроверяемыхДокументов, ДанныеДляПроверки, СоответствиеПутейИИменПроверяемыхРеквизитов, СоответствиеРеквизитовФормеОбъекта, СоответствиеРеквизитовПутиВФормеОбъекта, ПредставленияПроверяемыхРеквизитов,СоответствиеРеквизитовОткрываемымОбъектам, МассивНепроверяемыхРеквизитов, ВыводитьСообщения = Истина, Отказ = Истина)
	Перем ОткрываемыйОбъект;
	Для Каждого КлючЗначение Из СтруктураПроверяемыхДокументов Цикл
		Если КлючЗначение.Значение = Неопределено Тогда 
			Продолжить;	
		КонецЕсли;	
		
		Если СоответствиеПутейИИменПроверяемыхРеквизитов.Свойство(КлючЗначение.Ключ) Тогда
			Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2'"), ДанныеДляПроверки.СотрудникНаименование, ПредставленияПроверяемыхРеквизитов[КлючЗначение.Ключ]);
				
				Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство(КлючЗначение.Ключ) Тогда
					ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
				КонецЕсли;	
				
				Если ВыводитьСообщения Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, СоответствиеРеквизитовФормеОбъекта[КлючЗначение.Ключ], СоответствиеРеквизитовПутиВФормеОбъекта[КлючЗначение.Ключ], Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;
			МассивНепроверяемыхРеквизитов.Добавить(СоответствиеПутейИИменПроверяемыхРеквизитов[КлючЗначение.Ключ]);
		КонецЕсли;				
	КонецЦикла;	
	
	// Проверка правильности заполнения документа, удостоверяющего личность.
	Если СтруктураПроверяемыхДокументов.Свойство("ВидДокумента") Тогда	
		Если ЗначениеЗаполнено(СтруктураПроверяемыхДокументов.ВидДокумента) Тогда
			Если СтруктураПроверяемыхДокументов.Свойство("ДатаВыдачи") Тогда
				Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("ДатаВыдачи") Тогда
					ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
				КонецЕсли;
				
				Если СтруктураПроверяемыхДокументов.ДатаВыдачи <> Неопределено И СтруктураПроверяемыхДокументов.ДатаВыдачи > Дата Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: дата выдачи документа не может быть больше даты подачи сведений.'"), ДанныеДляПроверки.СотрудникНаименование);
					Если ВыводитьСообщения Тогда
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, СоответствиеРеквизитовФормеОбъекта.ДатаВыдачи, СоответствиеРеквизитовПутиВФормеОбъекта.ДатаВыдачи ,Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
			
			Если СтруктураПроверяемыхДокументов.Свойство("СерияДокумента") Тогда 	
				Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("СерияДокумента") Тогда
					ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
				КонецЕсли;
				
				ТекстОшибкиСерия = "";
				Если НЕ ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(ДанныеДляПроверки.ВидДокумента, ДанныеДляПроверки.СерияДокумента, ТекстОшибкиСерия) Тогда
					Если ВыводитьСообщения Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2.'"), ДанныеДляПроверки.СотрудникНаименование, ТекстОшибкиСерия);
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, СоответствиеРеквизитовФормеОбъекта.СерияДокумента, СоответствиеРеквизитовПутиВФормеОбъекта.СерияДокумента, Отказ);
					Иначе
						Отказ = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
				
			Если СтруктураПроверяемыхДокументов.Свойство("НомерДокумента") Тогда 
				Если ЗначениеЗаполнено(ДанныеДляПроверки.НомерДокумента) Тогда
					Если Не СоответствиеРеквизитовОткрываемымОбъектам.Свойство("НомерДокумента") Тогда
						ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
					КонецЕсли;
					
					ТекстОшибкиНомер = "";
					Если НЕ ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(ДанныеДляПроверки.ВидДокумента, ДанныеДляПроверки.НомерДокумента, ТекстОшибкиНомер) Тогда 
						Если ВыводитьСообщения Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2.'"), ДанныеДляПроверки.СотрудникНаименование, ТекстОшибкиНомер);
							ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, СоответствиеРеквизитовФормеОбъекта.НомерДокумента, СоответствиеРеквизитовПутиВФормеОбъекта.НомерДокумента, Отказ);
						Иначе
							Отказ = Истина;
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеАдресов(СтруктураПроверяемыхДанных, СоответствиеРеквизитовОткрываемымОбъектам, ДанныеДляПроверки, ВыводитьСообщения = Истина, Отказ = Ложь)
Перем ОткрываемыйОбъект;
	
	Если СтруктураПроверяемыхДанных.Свойство("АдресРегистрации") И ЗначениеЗаполнено(СтруктураПроверяемыхДанных.АдресРегистрации) Тогда
		АдресРегистрации = СтруктураПроверяемыхДанных.АдресРегистрации;
		
		Если НЕ СоответствиеРеквизитовОткрываемымОбъектам.Свойство("АдресРегистрации", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;
	ИначеЕсли СтруктураПроверяемыхДанных.Свойство("Адрес") И ЗначениеЗаполнено(СтруктураПроверяемыхДанных.Адрес) Тогда
		АдресРегистрации = СтруктураПроверяемыхДанных.Адрес;
		Если НЕ СоответствиеРеквизитовОткрываемымОбъектам.Свойство("Адрес", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;
	Иначе
		АдресРегистрации = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресРегистрации) Тогда 
		МассивОшибок = РаботаСАдресами.ПроверитьАдрес(АдресРегистрации);
		Если МассивОшибок.СписокОшибок.Количество() <> 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщенияПроверки = "";
				Для каждого СтруктураОшибки Из МассивОшибок.СписокОшибок Цикл
					СообщенияПроверки = СообщенияПроверки + СтруктураОшибки.Представление + Символы.ПС;
				КонецЦикла;
				СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: - поле ""Адрес регистрации"":'"), ДанныеДляПроверки.СотрудникНаименование);
				ТекстОшибки = ТекстОшибки + Символы.ПС + СообщенияПроверки;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,ОткрываемыйОбъект, ,,Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПроверяемыхДанных.Свойство("АдресФактический") Тогда
		Если НЕ СоответствиеРеквизитовОткрываемымОбъектам.Свойство("АдресФактический", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПроверяемыхДанных.АдресФактический) Тогда 
			МассивОшибок = РаботаСАдресами.ПроверитьАдрес(СтруктураПроверяемыхДанных.АдресФактический);
			Если МассивОшибок.СписокОшибок.Количество() <> 0 Тогда
				Если ВыводитьСообщения Тогда
					СообщенияПроверки = "";
					Для каждого СтруктураОшибки Из МассивОшибок.СписокОшибок Цикл
						СообщенияПроверки = СообщенияПроверки + СтруктураОшибки.Представление + Символы.ПС;
					КонецЦикла;
					СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: - поле ""Фактический адрес"":'"), ДанныеДляПроверки.СотрудникНаименование);
					ТекстОшибки = ТекстОшибки + Символы.ПС + СообщенияПроверки;
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, ,,Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПроверяемыхДанных.Свойство("АдресДляИнформирования") Тогда
		Если НЕ СоответствиеРеквизитовОткрываемымОбъектам.Свойство("АдресДляИнформирования", ОткрываемыйОбъект) Тогда
			ОткрываемыйОбъект = ДанныеДляПроверки.Сотрудник;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураПроверяемыхДанных.АдресДляИнформирования) Тогда 
			МассивОшибок = РаботаСАдресами.ПроверитьАдрес(СтруктураПроверяемыхДанных.АдресДляИнформирования);
			Если МассивОшибок.СписокОшибок.Количество() <> 0 Тогда
				Если ВыводитьСообщения Тогда
					СообщенияПроверки = "";
					Для каждого СтруктураОшибки Из МассивОшибок.СписокОшибок Цикл
						СообщенияПроверки = СообщенияПроверки + СтруктураОшибки.Представление + Символы.ПС;
					КонецЦикла;
					СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: - поле ""Адрес для информирования"":'"), ДанныеДляПроверки.СотрудникНаименование);
					ТекстОшибки = ТекстОшибки + Символы.ПС + СообщенияПроверки;
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ОткрываемыйОбъект, ,,Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТПрежниеФИО(МенеджерВременныхТаблиц, ТолькоРазрешенные, СтрокаПоиска, ИмяВТПрежниеФИО = "ВТПрежниеФИО") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", НаименованиеСлужебное(СтрокаПоиска) + "%");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФИОФизическихЛиц.Фамилия + ВЫБОР
		|		КОГДА ФИОФизическихЛиц.Имя = """"
		|			ТОГДА """"
		|		ИНАЧЕ "" "" + ФИОФизическихЛиц.Имя + ВЫБОР
		|				КОГДА ФИОФизическихЛиц.Отчество = """"
		|					ТОГДА """"
		|				ИНАЧЕ "" "" + ФИОФизическихЛиц.Отчество
		|			КОНЕЦ
		|	КОНЕЦ КАК ФИО,
		|	ФИОФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФИОФизическихЛиц.Период КАК Период,
		|	ФИОФизическихЛиц.Фамилия КАК Фамилия,
		|	ФИОФизическихЛиц.Имя КАК Имя,
		|	ФИОФизическихЛиц.Отчество КАК Отчество,
		|	ФИОФизическихЛиц.Инициалы КАК Инициалы
		|ПОМЕСТИТЬ ВТВсеПохожиеЗаписиФИО
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|ГДЕ
		|	ФИОФизическихЛиц.ФИОСлужебные ПОДОБНО &СтрокаПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФИОФизическихЛицСрезПоследних.Период КАК Период,
		|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПоследниеСведенияОФИО
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
		|			,
		|			ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					ВсеПохожиеЗаписиФИО.ФизическоеЛицо
		|				ИЗ
		|					ВТВсеПохожиеЗаписиФИО КАК ВсеПохожиеЗаписиФИО)) КАК ФИОФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПохожиеЗаписиФИО.ФИО КАК ФИО,
		|	ВсеПохожиеЗаписиФИО.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПохожиеЗаписиФИО.ФизическоеЛицо.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ВсеПохожиеЗаписиФИО.Период = ПоследниеСведенияОФИО.Период
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ ПоследниеСведенияОФИО.Период
		|	КОНЕЦ КАК Период,
		|	ВсеПохожиеЗаписиФИО.Фамилия КАК Фамилия,
		|	ВсеПохожиеЗаписиФИО.Имя КАК Имя,
		|	ВсеПохожиеЗаписиФИО.Отчество КАК Отчество,
		|	ВсеПохожиеЗаписиФИО.Инициалы КАК Инициалы
		|ПОМЕСТИТЬ ВТПрежниеФИО
		|ИЗ
		|	ВТВсеПохожиеЗаписиФИО КАК ВсеПохожиеЗаписиФИО
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеСведенияОФИО КАК ПоследниеСведенияОФИО
		|		ПО ВсеПохожиеЗаписиФИО.ФизическоеЛицо = ПоследниеСведенияОФИО.ФизическоеЛицо
		|ГДЕ
		|	ВсеПохожиеЗаписиФИО.Период <> ПоследниеСведенияОФИО.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеПохожиеЗаписиФИО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоследниеСведенияОФИО";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПрежниеФИО", ИмяВТПрежниеФИО);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОписаниеПравилаПроверкиДанных()
	
	Возврат Новый Структура("ПравилоПроверки, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению");	
	
КонецФункции

Процедура ПроверитьКоллекциюПравил(КоллекцияПравил)
	
	Если КоллекцияПравил = Неопределено Тогда
		КоллекцияПравил = Новый Массив;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПодготовитьКПоискуПоФИО(Представление)
	
	Представление = СтрЗаменить(Представление, "~", "~~");
	Представление = СтрЗаменить(Представление, "%", "~%");
	Представление = СтрЗаменить(Представление, "_", "~_");
	Представление = СтрЗаменить(Представление, "[", "~[");
	Представление = СтрЗаменить(Представление, "-", "~-");
	
КонецПроцедуры

Процедура ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Представление)
	
	Представление = СтрЗаменить(Представление, "Е", "&");
	Представление = СтрЗаменить(Представление, "Ё", "&");
	Представление = СтрЗаменить(Представление, "&", "ЕЁ");
	
КонецПроцедуры

Функция НаименованиеСлужебное(Наименование) Экспорт
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Наименование);
	Возврат НаименованиеСлужебноеПоЧастямИмени(СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество);
	
КонецФункции

Функция НаименованиеСлужебноеПоЧастямИмени(Фамилия, Имя, Отчество) Экспорт
	
	Возврат СокрЛП(
		ФамилияСлужебная(Фамилия) + " "
		+ ИмяСлужебное(Имя) + " "
		+ ОтчествоСлужебное(Отчество));
	
КонецФункции

Процедура ФормаВыбораСотрудниковПриСозданииНаСервере(Форма, Параметры) Экспорт
	
	ФизическиеЛицаЗарплатаКадрыВнутренний.ФормаВыбораСотрудниковПриСозданииНаСервере(Форма, Параметры);
	
КонецПроцедуры

Процедура ЗапомнитьРеквизитыПрежнегоСостоянияОбъекта(ФизическоеЛицо) Экспорт
	
	ФизическиеЛицаЗарплатаКадрыВнутренний.ЗапомнитьРеквизитыПрежнегоСостоянияОбъекта(ФизическоеЛицо);
	
КонецПроцедуры

// Наследник функции СотрудникиФормы.ПохожиеФизическиеЛица.
Функция ЗапросДляПоискаФизическихЛицПоСНИЛСИлиФИО(Знач СНИЛС, Знач Фамилия, Знач Имя, Знач Отчество)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ФизическиеЛица.СтраховойНомерПФР КАК СНИЛС,
	|	ФизическиеЛица.УточнениеНаименования КАК УточнениеНаименования,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.ПометкаУдаления
	|			ТОГДА 99
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &СНИЛС
	|			ТОГДА 1
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС
	|				И ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ТОГДА 2
	|		КОГДА ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ТОГДА 3
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС
	|				И ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ТОГДА 4
	|		КОГДА ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ТОГДА 5
	|		КОГДА ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС
	|				И ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ТОГДА 6
	|		КОГДА ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ТОГДА 7
	|	КОНЕЦ КАК ПриоритетТочности
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(ФизическиеЛица.СтраховойНомерПФР = &СНИЛС
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетТочности,
	|	ФизическиеЛица.ПометкаУдаления УБЫВ";
	
	Если Не ЗначениеЗаполнено(СНИЛС) Тогда // Отключение критериев поиска по СНИЛС.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.СтраховойНомерПФР = &СНИЛС",       "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.СтраховойНомерПФР = &ПустойСНИЛС", "ЛОЖЬ");
	Иначе
		Если СтрДлина(СНИЛС) = 11 И СтрНайти(СНИЛС, "-") = 0 Тогда
			СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СНИЛС);
		КонецЕсли;
		Запрос.УстановитьПараметр("СНИЛС",       СНИЛС);
		Запрос.УстановитьПараметр("ПустойСНИЛС", "");
	КонецЕсли;
	
	Если ТипЗнч(Фамилия) <> Тип("Строка") Или ПустаяСтрока(Фамилия) Тогда // Отключение критериев поиска по ФИО.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""", "ЛОЖЬ");
	Иначе
		Фамилия  = ФамилияДляПоиска(Фамилия);
		Имя      = ИмяДляПоиска(Имя);
		Отчество = ОтчествоДляПоиска(Отчество);
		
		ФамилияИмя         = Фамилия    + ?(ПустаяСтрока(Имя), "", " " + Имя);
		ФамилияИмяОтчество = ФамилияИмя + ?(ПустаяСтрока(Отчество), "%", " " + Отчество);
		
		Запрос.УстановитьПараметр("Фамилия",            Фамилия);
		Запрос.УстановитьПараметр("ФамилияИмя",         ФамилияИмя);
		Запрос.УстановитьПараметр("ФамилияИмяОтчество", ФамилияИмяОтчество);
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

#КонецОбласти