////////////////////////////////////////////////////////////////////////////////
// УчетЗарплаты: методы, используемые:
//               - при настройке зарплаты и кадров;
//               - при отражении зарплаты и налогов/взносов с ФОТ в учете;
//               - при получении сведений о документах подсистем учета зарплаты и кадров;
//               - ...
////////////////////////////////////////////////////////////////////////////////

#Область ИнтерфейсВзаимодейтвияБЗКБ

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС ВЗАИМОДЕЙСТВИЯ С БЗКБ
//
// Предназначена для генерации всех движений, связанных с отражением в регл. учете
//
// Параметры:
//	Движения
//	Отказ
//	Организация
//	ПериодРегистрации
//	ДанныеДляОтражения - таблицы движений
//
Процедура СформироватьДвиженияПоОтражениюЗарплатыВРегламентированномУчете(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляОтражения) Экспорт
		
	// Начисление зарплаты и налогов с ФОТ
	ДанныеПоЗарплате = Новый Структура;
	Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
		ДанныеПоЗарплате.Вставить("НачисленнаяЗарплатаИВзносы", ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы);
		Если ДанныеДляОтражения.Свойство("УдержаннаяЗарплата") Тогда
			ДанныеПоЗарплате.Вставить("УдержаннаяЗарплата", ДанныеДляОтражения.УдержаннаяЗарплата);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеДляОтражения.Свойство("НачисленныйНДФЛ") Тогда
		ДанныеПоЗарплате.Вставить("НачисленныйНДФЛ", ДанныеДляОтражения.НачисленныйНДФЛ);
	КонецЕсли;
	Если ДанныеПоЗарплате.Количество() <> 0 Тогда
		СформироватьДвиженияНачислениеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоЗарплате);
	КонецЕсли;
			
	Если ДанныеДляОтражения.Свойство("Депоненты") Тогда
		ДанныеПоДепонентам = ДанныеДляОтражения.Депоненты;
		Если ДанныеПоДепонентам.Количество() <> 0 Тогда
			СформироватьДвиженияДепонированиеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоДепонентам);
		КонецЕсли;
	КонецЕсли;
		
	Если ДанныеДляОтражения.Свойство("УдержаннаяЗарплата") Тогда
		ДанныеПоУдержаниям = ДанныеДляОтражения.УдержаннаяЗарплата;
		Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
			НачисленнаяЗарплатаИВзносы = ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы;
		Иначе
			НачисленнаяЗарплатаИВзносы = Неопределено;
		КонецЕсли;
		Если ДанныеПоУдержаниям.Количество() <> 0 Тогда
			СформироватьДвиженияУдержания(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоУдержаниям, НачисленнаяЗарплатаИВзносы);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("ОценочныеОбязательства") Тогда
		ДанныеПоРезервам = ДанныеДляОтражения.ОценочныеОбязательства;
		Если ДанныеПоРезервам.Количество() <> 0 Тогда
			СформироватьДвиженияНачислениеРезервов(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоРезервам);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Начисление

Процедура СформироватьДвиженияНачислениеЗарплаты(Движения, Отказ, Организация, Знач ПериодРегистрации, ДанныеДляОтражения)
	
	Дополнять         = Ложь;
	Реквизиты         = Неопределено;
	Регистратор       = Движения.Хозрасчетный.Отбор.Регистратор.Значение;
	ПериодРегистрации = ПолучитьПериодРегистрации(Регистратор, ПериодРегистрации);
	
	Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
		Параметры = ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы, Организация, ПериодРегистрации, Регистратор);
		Реквизиты = Параметры.Реквизиты[0];
		ТаблицаЗаработнойПлаты = Параметры.ТаблицаЗаработнойПлаты;
		Если ТаблицаЗаработнойПлаты.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"));
			ТаблицаЗаработнойПлаты.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов(Массив, , ));
		КонецЕсли;
		РазвернутьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты);
		Дополнять = Истина;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("НачисленныйНДФЛ") Тогда
		ПараметрыНДФЛ = ПодготовитьПараметрыПоОтражениюНДФЛВУчете(ДанныеДляОтражения.НачисленныйНДФЛ, Организация, ПериодРегистрации, Регистратор);
		ТаблицаНДФЛ = ПараметрыНДФЛ.ТаблицаНДФЛ;
		Если Реквизиты = Неопределено Тогда
			Реквизиты = ПараметрыНДФЛ.Реквизиты[0];
		КонецЕсли;
		
		ПроверитьЗаполненностьРегистрацииВНалоговомОргане(ТаблицаНДФЛ, Реквизиты, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНДФЛ = ДополнитьТаблицуНДФЛАналитикойПоРегистрации(ТаблицаНДФЛ, Организация);
		Если Дополнять Тогда
			ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗаработнойПлатыДаннымиПоНДФЛ(ТаблицаЗаработнойПлаты, ТаблицаНДФЛ, Организация, ПериодРегистрации, Регистратор);
		Иначе
			ТаблицаЗаработнойПлаты = ТаблицаНДФЛ;
			ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
			Дополнять = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты);
	
	СинхронизироватьПодразделенияИРегистрацииВНалоговомОргане(ТаблицаЗаработнойПлаты, Реквизиты);
	
	ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты);
	
	РаспределитьЗарплатуПоВидамДеятельности(ТаблицаЗаработнойПлаты, Организация, ПериодРегистрации);
	
	ПроверитьЗаполненностьСпособаОтраженияВУчете(ТаблицаЗаработнойПлаты, Реквизиты);
	
	СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
	// Проведение по подсистеме УСН
	УдержаннаяЗарплата = Неопределено;
	ДанныеДляОтражения.Свойство("УдержаннаяЗарплата", УдержаннаяЗарплата);
	
	СформироватьДвиженияПоРегистрамУСННачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, УдержаннаяЗарплата, Реквизиты, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	СформироватьДвиженияПоРегистрамИПНачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияДепонированиеЗарплаты(Движения, Отказ, Организация, Знач ПериодРегистрации, Депоненты)
	
	Регистратор            = Движения.Хозрасчетный.Отбор.Регистратор.Значение;
	ПериодРегистрации      = ПолучитьПериодРегистрации(Регистратор, ПериодРегистрации);
	Параметры              = ПодготовитьПараметрыПоОтражениюДепонентовУчете(Депоненты, Организация, ПериодРегистрации, Регистратор);
	Реквизиты              = Параметры.Реквизиты[0];
	ТаблицаЗаработнойПлаты = Параметры.ТаблицаДепонирование;
	Дополнять = Истина;
	
	ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты);
	
	РаспределитьЗарплатуПоВидамДеятельности(ТаблицаЗаработнойПлаты, Организация, ПериодРегистрации);
	
	ПроверитьЗаполненностьСпособаОтраженияВУчете(ТаблицаЗаработнойПлаты, Реквизиты);
	
	СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
	// Проведение по подсистеме УСН
	СформироватьДвиженияПоРегистрамУСННачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, , Реквизиты, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	СформироватьДвиженияПоРегистрамИПНачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура РазвернутьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты)
	
	ВидыОпераций = Новый Соответствие;
	ВидыОпераций.Вставить("ПФРНакопительная",
		Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть);
	ВидыОпераций.Вставить("ПФРСтраховая",
		Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть);
	ВидыОпераций.Вставить("ПФРПоСуммарномуТарифу",
		Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу);
	ВидыОпераций.Вставить("ПФРДоПредельнойВеличины",
		Перечисления.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины);
	ВидыОпераций.Вставить("ПФРСПревышения",
		Перечисления.ВидыОперацийПоЗарплате.ПФРСПревышения);
	ВидыОпераций.Вставить("ПФРНаДоплатуЛетчикам",
		Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ);
	ВидыОпераций.Вставить("ПФРНаДоплатуШахтерам",
		Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах",
		Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах",
		Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки",
		Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка",
		Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки",
		Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка",
		Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка);
	ВидыОпераций.Вставить("ФСС",
		Перечисления.ВидыОперацийПоЗарплате.ФСС);
	ВидыОпераций.Вставить("ФССНесчастныеСлучаи",
		Перечисления.ВидыОперацийПоЗарплате.ФССНС);
	ВидыОпераций.Вставить("ФФОМС",
		Перечисления.ВидыОперацийПоЗарплате.ФФОМС);
	ВидыОпераций.Вставить("ТФОМС",
		Перечисления.ВидыОперацийПоЗарплате.ТФОМС);
	
	МассивОперацийРасходовЗаСчетФСС = Новый Массив;
	МассивОперацийРасходовЗаСчетФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("ПФРНакопительная");
	МассивКолонок.Добавить("ПФРСтраховая");
	МассивКолонок.Добавить("ПФРПоСуммарномуТарифу");
	МассивКолонок.Добавить("ПФРДоПредельнойВеличины");
	МассивКолонок.Добавить("ПФРСПревышения");
	МассивКолонок.Добавить("ПФРНаДоплатуЛетчикам");
	МассивКолонок.Добавить("ПФРНаДоплатуШахтерам");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка");
	МассивКолонок.Добавить("ФСС");
	МассивКолонок.Добавить("ФССНесчастныеСлучаи");
	МассивКолонок.Добавить("ФФОМС");
	МассивКолонок.Добавить("ТФОМС");
	
	КоличествоИндексовМассива = МассивКолонок.Количество() - 1;
	
	ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	ТаблицаЗаработнойПлаты.Колонки.Добавить("ВедущийВидОперации",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	
	ТаблицаНалоговСФОТ = ТаблицаЗаработнойПлаты.СкопироватьКолонки();

	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		СтрокаТаблицы.ВедущийВидОперации = СтрокаТаблицы.ВидОперации;
		
		Для ИндексМассива = 0 По КоличествоИндексовМассива Цикл
			
			Если СтрокаТаблицы[МассивКолонок[ИндексМассива]] <> 0 Тогда
				НоваяСтрока = ТаблицаНалоговСФОТ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Сумма = СтрокаТаблицы[МассивКолонок[ИндексМассива]];
				Если МассивОперацийРасходовЗаСчетФСС.Найти(НоваяСтрока.ВидОперации) <> Неопределено Тогда
					НоваяСтрока.ВидОперацииРасходовЗаСчетФСС = НоваяСтрока.ВидОперации;
				КонецЕсли;
				НоваяСтрока.ВидОперации = ВидыОпераций.Получить(МассивКолонок[ИндексМассива]);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговСФОТ Цикл
		
		НоваяСтрока = ТаблицаЗаработнойПлаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	ТаблицаЗаработнойПлаты.Свернуть("ФизическоеЛицо, ВидОперации, Подразделение,
									|СпособОтраженияЗарплатыВБухучете, СтатьяРасходов, ОблагаетсяЕНВД,
									|ВидНачисленияОплатыТрудаДляНУ,
									|РегистрацияВНалоговомОргане,
									|ВидОперацииРасходовЗаСчетФСС,
									|ВедущийВидОперации", "Сумма");
	
КонецПроцедуры

Процедура ОчиститьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты)
	
	Отбор = Новый Структура("Сумма", 0);
	МассивСтрок = ТаблицаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		ТаблицаЗаработнойПлаты.Удалить(СтрокаМассива);
	КонецЦикла;
		
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = ПериодРегистрации;
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "СпособОтраженияЗарплатыВБухучете,"
	+ "СтатьяРасходов,"
	+ "ОблагаетсяЕНВД,"	
	+ "ВидНачисленияОплатыТрудаДляНУ,"
	+ "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,"
	+ "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,"
	+ "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,"
	+ "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,"
	+ "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,"
	+ "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,"
	+ "ПФРНаДоплатуЛетчикам,"
	+ "ПФРНаДоплатуШахтерам,"
	+ "ПФРНакопительная,"
	+ "ПФРСтраховая,"
	+ "ПФРПоСуммарномуТарифу,"
	+ "ПФРДоПредельнойВеличины,"
	+ "ПФРСПревышения,"
	+ "ТФОМС,"
	+ "ФСС,"
	+ "ФССНесчастныеСлучаи,"
	+ "ФФОМС,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаЗаработнойПлаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюНДФЛВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = КонецМесяца(ПериодРегистрации);
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "СтатьяРасходов,"
	+ "КПП,"
	+ "КодНалоговогоОргана,"
	+ "КодПоОКАТО,"
	+ "КодПоОКТМО,"
	+ "РегистрацияВНалоговомОргане,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаНДФЛ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюДепонентовУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = ПериодРегистрации;
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "СтатьяРасходов,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаДепонирование", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ДополнитьТаблицуЗаработнойПлатыДаннымиПоНДФЛ(НачисленнаяЗарплатаИВзносы, НачисленныйНДФЛ, Организация, ПериодРегистрации, Регистратор)
	
	ДополнятьТаблицуНДФЛ = Ложь;
	
	Если НачисленнаяЗарплатаИВзносы.Колонки.Найти("ВидОперацииРасходовЗаСчетФСС") = Неопределено Тогда
		НачисленнаяЗарплатаИВзносы.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	КонецЕсли;
	
	Если НачисленнаяЗарплатаИВзносы.Колонки.Найти("СтатьяРасходов") = Неопределено Тогда
		НачисленнаяЗарплатаИВзносы.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСН(Организация, ПериодРегистрации) Тогда
		
		Если НачисленнаяЗарплатаИВзносы.Колонки.Найти("ОтражениеВУСН") = Неопределено Тогда
			НачисленнаяЗарплатаИВзносы.Колонки.Добавить("ОтражениеВУСН", Новый ОписаниеТипов("ПеречислениеСсылка.ОтражениеВУСН"));
		КонецЕсли;
		
		Если НачисленнаяЗарплатаИВзносы.Колонки.Найти("РасчетныйДокумент") = Неопределено Тогда
			НачисленнаяЗарплатаИВзносы.Колонки.Добавить("РасчетныйДокумент", Метаданные.РегистрыНакопления.РасходыПриУСН.Измерения.РасчетныйДокумент.Тип);
		КонецЕсли;
		
		ДополнятьТаблицуНДФЛ = Истина;
		
		МассивОсновныхНачислений = Новый Массив;
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска);
		МассивОсновныхНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
		
		МассивОперацийРасходовПоСтрахованию = Новый Массив;
		МассивОперацийРасходовПоСтрахованию.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
		МассивОперацийРасходовПоСтрахованию.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
		МассивОперацийРасходовПоСтрахованию.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет);
		
		Если Месяц(Регистратор.Дата) >= Месяц(ПериодРегистрации) Тогда
			КонецПериодаОсмотра = КонецМесяца(ПериодРегистрации);
		Иначе
			КонецПериодаОсмотра = Регистратор.Дата;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Регистратор",                            Регистратор);
		Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы",             НачисленнаяЗарплатаИВзносы);
		Запрос.УстановитьПараметр("НачисленныйНДФЛ",                        НачисленныйНДФЛ);

		Запрос.УстановитьПараметр("МассивОсновныхНачислений",               МассивОсновныхНачислений);
		Запрос.УстановитьПараметр("НДФЛОсновныхНачислений",                 Перечисления.ВидыОперацийПоЗарплате.НДФЛ);
		
		Запрос.УстановитьПараметр("УсловныйВидОперации",                    Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход);
		
		Запрос.УстановитьПараметр("МассивОперацийРасходовПоСтрахованию",    МассивОперацийРасходовПоСтрахованию);
		
		Запрос.УстановитьПараметр("ДивидендыСотрудников",                   Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников);
		Запрос.УстановитьПараметр("НФДЛДивидендыСотрудникам",               Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам);
		
		Запрос.УстановитьПараметр("Дивиденды",                              Перечисления.ВидыОперацийПоЗарплате.Дивиденды);
		Запрос.УстановитьПараметр("НФДЛДивиденды",                          Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды);
		
		Запрос.УстановитьПараметр("ВыплатыБывшимСотрудникам",               Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам);
		Запрос.УстановитьПараметр("НДФЛРасчетыСБывшимиСотрудниками",        Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками);
		
		Запрос.УстановитьПараметр("ДоходыКонтрагентов",                     Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов);
		Запрос.УстановитьПараметр("НДФЛДоходыКонтрагентов",                 Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов);
		
		Запрос.УстановитьПараметр("ПрочиеРасчетыСПерсоналом",               Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом);
		Запрос.УстановитьПараметр("НДФЛПрочиеРасчетыСПерсоналом",           Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом);
		
		Запрос.УстановитьПараметр("НДФЛСПревышения",                        Перечисления.ВидыОперацийПоЗарплате.НДФЛСПревышения);
		
		Запрос.УстановитьПараметр("ПериодРегистрации",                      ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецПериодаОсмотра",                    КонецПериодаОсмотра);
		Запрос.УстановитьПараметр("Организация",                            Организация);
		Запрос.УстановитьПараметр("ВидРасходаНалоги",                       Перечисления.ВидыРасходовУСН.Налоги);
		Запрос.УстановитьПараметр("ВидРасходаЗарплата",                     Перечисления.ВидыРасходовУСН.Зарплата);
		Запрос.УстановитьПараметр("СчетУчетаНДФЛ",                          ПланыСчетов.Хозрасчетный.НДФЛ);
		Запрос.УстановитьПараметр("СчетУчетаНДФЛСвышеПредельнойВеличины",   ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины);
		
		Запрос.УстановитьПараметр("УчитыватьСтатьюРасходов",
			ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")
			ИЛИ Регистратор.Дата >= ДатаНачалаУчетаПрогрессивногоНДФЛ());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
		|	НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
		|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
		|	НачисленнаяЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
		|	НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВР_НачисленнаяЗарплатаИВзносы
		|ИЗ
		|	&НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БольничныйЛист.Ссылка КАК Ссылка,
		|	БольничныйЛист.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_БольничныеИОтпуска
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(&Регистратор) <> ТИП(Документ.БольничныйЛист)
		|	И ТИПЗНАЧЕНИЯ(&Регистратор) <> ТИП(Документ.Отпуск)
		|	И БольничныйЛист.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				ВР_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо
		|			ИЗ
		|				ВР_НачисленнаяЗарплатаИВзносы КАК ВР_НачисленнаяЗарплатаИВзносы)
		|	И БольничныйЛист.Организация = &Организация
		|	И НАЧАЛОПЕРИОДА(БольничныйЛист.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	БольничныйЛист.Ссылка,
		|	БольничныйЛист.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отпуск.Ссылка,
		|	Отпуск.ФизическоеЛицо
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(&Регистратор) <> ТИП(Документ.БольничныйЛист)
		|	И ТИПЗНАЧЕНИЯ(&Регистратор) <> ТИП(Документ.Отпуск)
		|	И Отпуск.ФизическоеЛицо В
		|			(ВЫБРАТЬ
		|				ВР_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо
		|			ИЗ
		|				ВР_НачисленнаяЗарплатаИВзносы КАК ВР_НачисленнаяЗарплатаИВзносы)
		|	И Отпуск.Организация = &Организация
		|	И НАЧАЛОПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Ссылка,
		|	Отпуск.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходыПриУСНОбороты.Регистратор КАК Регистратор,
		|	РасходыПриУСНОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
		|	СУММА(РасходыПриУСНОбороты.СуммаПриход - РасходыПриУСНОбороты.СуммаРасход) КАК СуммаПриход,
		|	РасходыПриУСНОбороты.ВидРасхода КАК ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета КАК СчетУчета,
		|	РасходыПриУСНОбороты.ОтражениеВУСН КАК ОтражениеВУСН
		|ПОМЕСТИТЬ ВТ_РасходыПриУСНОбороты
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Обороты(НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), Регистратор, Организация = &Организация) КАК РасходыПриУСНОбороты
		|ГДЕ
		|	РасходыПриУСНОбороты.Регистратор В
		|			(ВЫБРАТЬ
		|				ВТ_БольничныеИОтпуска.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТ_БольничныеИОтпуска)
		|	И РасходыПриУСНОбороты.СуммаПриход - РасходыПриУСНОбороты.СуммаРасход > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходыПриУСНОбороты.Регистратор,
		|	РасходыПриУСНОбороты.РасчетныйДокумент,
		|	РасходыПриУСНОбороты.ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета,
		|	РасходыПриУСНОбороты.ОтражениеВУСН
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасходыПриУСНОбороты.РасчетныйДокумент,
		|	РасходыПриУСНОбороты.РасчетныйДокумент,
		|	СУММА(-РасходыПриУСНОбороты.СуммаРасход),
		|	РасходыПриУСНОбороты.ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета,
		|	РасходыПриУСНОбороты.ОтражениеВУСН
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Обороты(НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), &КонецПериодаОсмотра, Регистратор, Организация = &Организация) КАК РасходыПриУСНОбороты
		|ГДЕ
		|	РасходыПриУСНОбороты.РасчетныйДокумент В
		|			(ВЫБРАТЬ
		|				ВТ_БольничныеИОтпуска.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТ_БольничныеИОтпуска)
		|	И РасходыПриУСНОбороты.РасчетныйДокумент <> РасходыПриУСНОбороты.Регистратор
		|	И РасходыПриУСНОбороты.СуммаРасход > 0
		|	И РасходыПриУСНОбороты.ВидРасхода = &ВидРасходаЗарплата
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходыПриУСНОбороты.РасчетныйДокумент,
		|	РасходыПриУСНОбороты.ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета,
		|	РасходыПриУСНОбороты.ОтражениеВУСН,
		|	РасходыПриУСНОбороты.РасчетныйДокумент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РасходыПриУСНОбороты.Регистратор КАК Регистратор,
		|	ВТ_РасходыПриУСНОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
		|	СУММА(ВТ_РасходыПриУСНОбороты.СуммаПриход) КАК СуммаПриход,
		|	ВТ_РасходыПриУСНОбороты.ВидРасхода КАК ВидРасхода,
		|	ВТ_РасходыПриУСНОбороты.СчетУчета КАК СчетУчета,
		|	ВТ_РасходыПриУСНОбороты.ОтражениеВУСН КАК ОтражениеВУСН
		|ПОМЕСТИТЬ ВТ_РасходыПриУСНОборотыСводная
		|ИЗ
		|	ВТ_РасходыПриУСНОбороты КАК ВТ_РасходыПриУСНОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_РасходыПриУСНОбороты.Регистратор,
		|	ВТ_РасходыПриУСНОбороты.РасчетныйДокумент,
		|	ВТ_РасходыПриУСНОбороты.ВидРасхода,
		|	ВТ_РасходыПриУСНОбороты.СчетУчета,
		|	ВТ_РасходыПриУСНОбороты.ОтражениеВУСН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходыПриУСНОбороты.Регистратор КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДокументыИсключения
		|ИЗ
		|	ВТ_БольничныеИОтпуска КАК ВТ_БольничныеИОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасходыПриУСНОборотыСводная КАК РасходыПриУСНОбороты
		|		ПО ВТ_БольничныеИОтпуска.Ссылка = РасходыПриУСНОбороты.Регистратор
		|ГДЕ
		|	РасходыПриУСНОбороты.ВидРасхода = &ВидРасходаНалоги
		|	И РасходыПриУСНОбороты.СчетУчета В (&СчетУчетаНДФЛ, &СчетУчетаНДФЛСвышеПредельнойВеличины)
		|	И РасходыПриУСНОбороты.Регистратор <> &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_БольничныеИОтпуска.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(РасходыПриУСНОбороты.СуммаПриход) КАК Сумма,
		|	РасходыПриУСНОбороты.ОтражениеВУСН КАК ОтражениеВУСН,
		|	РасходыПриУСНОбороты.РасчетныйДокумент КАК РасчетныйДокумент
		|ПОМЕСТИТЬ ВТ_РасходыМежрасчетныхВыплат
		|ИЗ
		|	ВТ_БольничныеИОтпуска КАК ВТ_БольничныеИОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасходыПриУСНОборотыСводная КАК РасходыПриУСНОбороты
		|		ПО ВТ_БольничныеИОтпуска.Ссылка = РасходыПриУСНОбороты.Регистратор
		|ГДЕ
		|	НЕ РасходыПриУСНОбороты.Регистратор В
		|				(ВЫБРАТЬ
		|					ВТ_ДокументыИсключения.Ссылка КАК Ссылка
		|				ИЗ
		|					ВТ_ДокументыИсключения)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходыПриУСНОбороты.РасчетныйДокумент,
		|	ВТ_БольничныеИОтпуска.ФизическоеЛицо,
		|	РасходыПриУСНОбороты.ОтражениеВУСН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
		|	НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
		|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
		|	НачисленнаяЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
		|	НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
		|	НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
		|	NULL КАК ОтражениеВУСН,
		|	NULL КАК РасчетныйДокумент
		|ПОМЕСТИТЬ ВТ_НачисленнаяЗарплатаИВзносы
		|ИЗ
		|	ВР_НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_РасходыМежрасчетныхВыплат.ФизическоеЛицо,
		|	ВТ_РасходыМежрасчетныхВыплат.Сумма,
		|	&УсловныйВидОперации,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_РасходыМежрасчетныхВыплат.ОтражениеВУСН,
		|	ВТ_РасходыМежрасчетныхВыплат.РасчетныйДокумент
		|ИЗ
		|	ВТ_РасходыМежрасчетныхВыплат КАК ВТ_РасходыМежрасчетныхВыплат
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленныйНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленныйНДФЛ.Сумма КАК Сумма,
		|	НачисленныйНДФЛ.ВидОперации КАК ВидОперации,
		|	НачисленныйНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВЫБОР
		|		КОГДА &УчитыватьСтатьюРасходов
		|			ТОГДА НачисленныйНДФЛ.СтатьяРасходов
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|	КОНЕЦ КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТ_НачисленныйНДФЛ
		|ИЗ
		|	&НачисленныйНДФЛ КАК НачисленныйНДФЛ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НачисленныйНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НачисленныйНДФЛ.ВидОперации КАК ВидОперации,
		|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
		|	ВЫБОР
		|		КОГДА &УчитыватьСтатьюРасходов
		|			ТОГДА ВТ_НачисленныйНДФЛ.СтатьяРасходов
		|		ИНАЧЕ ВТ_НачисленнаяЗарплатаИВзносы.СтатьяРасходов
		|	КОНЕЦ КАК СтатьяРасходов,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ВТ_НачисленныйНДФЛ.Сумма КАК СуммаНалога,
		|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма КАК СуммаДохода,
		|	ВТ_НачисленныйНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
		|	ВЫБОР
		|		КОГДА ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
		|				И ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОперацийРасходовПоСтрахованию)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|		ИНАЧЕ ВТ_НачисленнаяЗарплатаИВзносы.ОтражениеВУСН
		|	КОНЕЦ КАК ОтражениеВУСН,
		|	ВТ_НачисленнаяЗарплатаИВзносы.РасчетныйДокумент КАК РасчетныйДокумент
		|ПОМЕСТИТЬ ВТ_ПромежуточныйНДФЛ
		|ИЗ
		|	ВТ_НачисленнаяЗарплатаИВзносы КАК ВТ_НачисленнаяЗарплатаИВзносы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НачисленныйНДФЛ КАК ВТ_НачисленныйНДФЛ
		|		ПО ВТ_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ВТ_НачисленныйНДФЛ.ФизическоеЛицо
		|			И (ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОсновныхНачислений)
		|					И ВТ_НачисленныйНДФЛ.ВидОперации = &НДФЛОсновныхНачислений
		|				ИЛИ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ДивидендыСотрудников
		|					И ВТ_НачисленныйНДФЛ.ВидОперации = &НФДЛДивидендыСотрудникам
		|				ИЛИ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &Дивиденды
		|					И ВТ_НачисленныйНДФЛ.ВидОперации = &НФДЛДивиденды
		|				ИЛИ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ВыплатыБывшимСотрудникам
		|					И ВТ_НачисленныйНДФЛ.ВидОперации = &НДФЛРасчетыСБывшимиСотрудниками
		|				ИЛИ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ДоходыКонтрагентов
		|					И ВТ_НачисленныйНДФЛ.ВидОперации = &НДФЛДоходыКонтрагентов
		|				ИЛИ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ПрочиеРасчетыСПерсоналом
		|					И ВТ_НачисленныйНДФЛ.ВидОперации = &НДФЛПрочиеРасчетыСПерсоналом
		|				ИЛИ (ВТ_НачисленнаяЗарплатаИВзносы.СтатьяРасходов = ВТ_НачисленныйНДФЛ.СтатьяРасходов
		|					И ВТ_НачисленныйНДФЛ.ВидОперации = &НДФЛСПревышения))
		|			И (ВЫБОР
		|				КОГДА &УчитыватьСтатьюРасходов
		|					ТОГДА ВТ_НачисленнаяЗарплатаИВзносы.СтатьяРасходов = ВТ_НачисленныйНДФЛ.СтатьяРасходов
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НачисленныйНДФЛ.ФизическоеЛицо,
		|	ВТ_НачисленныйНДФЛ.ВидОперации,
		|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД,
		|	ВТ_НачисленныйНДФЛ.Сумма,
		|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма,
		|	ВТ_НачисленныйНДФЛ.РегистрацияВНалоговомОргане,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС,
		|	ВТ_НачисленнаяЗарплатаИВзносы.РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
		|				И ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОперацийРасходовПоСтрахованию)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|		ИНАЧЕ ВТ_НачисленнаяЗарплатаИВзносы.ОтражениеВУСН
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УчитыватьСтатьюРасходов
		|			ТОГДА ВТ_НачисленныйНДФЛ.СтатьяРасходов
		|		ИНАЧЕ ВТ_НачисленнаяЗарплатаИВзносы.СтатьяРасходов
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперации КАК ВидОперации,
		|	СУММА(ВТ_ПромежуточныйНДФЛ.СуммаНалога) КАК СуммаНалога,
		|	СУММА(ВТ_ПромежуточныйНДФЛ.СуммаДохода) КАК СуммаДохода,
		|	ВТ_ПромежуточныйНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТ_ПромежуточныйНДФЛИтог
		|ИЗ
		|	ВТ_ПромежуточныйНДФЛ КАК ВТ_ПромежуточныйНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперации,
		|	ВТ_ПромежуточныйНДФЛ.РегистрацияВНалоговомОргане
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперации КАК ВидОперации,
		|	ВТ_ПромежуточныйНДФЛ.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
		|	ВТ_ПромежуточныйНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
		|	ВТ_ПромежуточныйНДФЛ.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	ВТ_ПромежуточныйНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ВЫБОР
		|				КОГДА ЕСТЬNULL(СУММА(ВТ_ПромежуточныйНДФЛИтог.СуммаДохода), 0) = 0
		|					ТОГДА 0
		|				КОГДА ВТ_ПромежуточныйНДФЛ.СуммаДохода = СУММА(ВТ_ПромежуточныйНДФЛИтог.СуммаДохода)
		|					ТОГДА ВТ_ПромежуточныйНДФЛ.СуммаНалога
		|				ИНАЧЕ ВТ_ПромежуточныйНДФЛ.СуммаНалога * (ВТ_ПромежуточныйНДФЛ.СуммаДохода / СУММА(ВТ_ПромежуточныйНДФЛИтог.СуммаДохода))
		|			КОНЕЦ, 0) КАК ЧИСЛО(15, 0)) КАК Сумма,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
		|	ВТ_ПромежуточныйНДФЛ.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ВТ_ПромежуточныйНДФЛ.РасчетныйДокумент КАК РасчетныйДокумент
		|ИЗ
		|	ВТ_ПромежуточныйНДФЛ КАК ВТ_ПромежуточныйНДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПромежуточныйНДФЛИтог КАК ВТ_ПромежуточныйНДФЛИтог
		|		ПО ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо = ВТ_ПромежуточныйНДФЛИтог.ФизическоеЛицо
		|			И ВТ_ПромежуточныйНДФЛ.ВидОперации = ВТ_ПромежуточныйНДФЛИтог.ВидОперации
		|			И ВТ_ПромежуточныйНДФЛ.РегистрацияВНалоговомОргане = ВТ_ПромежуточныйНДФЛИтог.РегистрацияВНалоговомОргане
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперации,
		|	ВТ_ПромежуточныйНДФЛ.СпособОтраженияЗарплатыВБухУчете,
		|	ВТ_ПромежуточныйНДФЛ.СтатьяРасходов,
		|	ВТ_ПромежуточныйНДФЛ.ОблагаетсяЕНВД,
		|	ВТ_ПромежуточныйНДФЛ.СуммаНалога,
		|	ВТ_ПромежуточныйНДФЛ.СуммаДохода,
		|	ВТ_ПромежуточныйНДФЛ.РегистрацияВНалоговомОргане,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперацииРасходовЗаСчетФСС,
		|	ВТ_ПромежуточныйНДФЛ.ОтражениеВУСН,
		|	ВТ_ПромежуточныйНДФЛ.РасчетныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ВидОперации,
		|	РегистрацияВНалоговомОргане";
	
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			ЗаполнитьСтатьюРасходовПоВидуОперации(Результат);
		КонецЕсли;
		
		// корректировка погрешности вычисления
		СтруктураОтбора = Новый Структура();
		СтруктураОтбораНДФЛ = Новый Структура();
		
		Для Каждого СтрокаТаблицы ИЗ НачисленныйНДФЛ Цикл
			
			НачисленныйНДФЛСуммаНалога = СтрокаТаблицы.Сумма;
			НачисленныйНДФЛСуммаНалогаИсходный = СтрокаТаблицы.Сумма;
			
			СтруктураОтбора.Вставить("ФизическоеЛицо",              СтрокаТаблицы.ФизическоеЛицо);
			СтруктураОтбора.Вставить("ВидОперации",                 СтрокаТаблицы.ВидОперации);
			СтруктураОтбора.Вставить("РегистрацияВНалоговомОргане", СтрокаТаблицы.РегистрацияВНалоговомОргане);
			СтруктураОтбора.Вставить("СтатьяРасходов",              СтрокаТаблицы.СтатьяРасходов);
			
			МассивОтбора = Результат.НайтиСтроки(СтруктураОтбора);
			
			Если МассивОтбора.Количество() <> 0 Тогда
				Если МассивОтбора.Количество() = 1 Тогда
					Если МассивОтбора[0].Сумма <> СтрокаТаблицы.Сумма Тогда
						МассивОтбора[0].Сумма = СтрокаТаблицы.Сумма;
					КонецЕсли;
					
					СтруктураОтбораНДФЛ.Вставить("ФизическоеЛицо",             МассивОтбора[0].ФизическоеЛицо);
					СтруктураОтбораНДФЛ.Вставить("ВидОперации",                МассивОтбора[0].ВидОперации);
					СтруктураОтбораНДФЛ.Вставить("РегистрацияВНалоговомОргане",МассивОтбора[0].РегистрацияВНалоговомОргане);
					СтруктураОтбораНДФЛ.Вставить("СтатьяРасходов",             МассивОтбора[0].СтатьяРасходов);
					
					МассивОтбораНачисленныйНДФЛ = НачисленныйНДФЛ.НайтиСтроки(СтруктураОтбораНДФЛ);
					
					Если МассивОтбораНачисленныйНДФЛ.Количество() <> 0 Тогда
						СуммаНалогаНачисленного = 0;
						МассивСуммНалогаНачисленного = Новый Массив;
						Для Каждого СтрокаМассиваНалогаНачисленного ИЗ МассивОтбораНачисленныйНДФЛ Цикл
							СуммаНалогаНачисленного = СуммаНалогаНачисленного + СтрокаМассиваНалогаНачисленного.Сумма;
							МассивСуммНалогаНачисленного.Добавить(СтрокаМассиваНалогаНачисленного.Сумма);
						КонецЦикла;
						
						Если НачисленныйНДФЛСуммаНалогаИсходный - СуммаНалогаНачисленного <> 0 Тогда
							МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НачисленныйНДФЛСуммаНалогаИсходный, МассивСуммНалогаНачисленного, 0);
							Если МассивНовыхСумм <> Неопределено Тогда
								НомерСтроки = 0;
								Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
									СтрокаМассива.Сумма = СтрокаМассива.Сумма - МассивНовыхСумм[НомерСтроки];
									НомерСтроки = НомерСтроки + 1;
								КонецЦикла;
							КонецЕсли;
						Иначе
							Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
								СтрокаМассива.Сумма = 0;
							КонецЦикла;
						КонецЕсли; 
						
					КонецЕсли;
					
				Иначе
					СуммаНалога = 0;
					МассивСумм = Новый Массив;
					Для Каждого СтрокаМассива ИЗ МассивОтбора Цикл
						СуммаНалога = СуммаНалога + СтрокаМассива.Сумма;
						МассивСумм.Добавить(СтрокаМассива.Сумма);
						
						СтруктураОтбораНДФЛ.Вставить("ФизическоеЛицо",              СтрокаМассива.ФизическоеЛицо);
						СтруктураОтбораНДФЛ.Вставить("ВидОперации",                 СтрокаМассива.ВидОперации);
						СтруктураОтбораНДФЛ.Вставить("РегистрацияВНалоговомОргане", СтрокаМассива.РегистрацияВНалоговомОргане);
						СтруктураОтбораНДФЛ.Вставить("СтатьяРасходов",              СтрокаМассива.СтатьяРасходов);
					
						МассивОтбораНачисленныйНДФЛ = НачисленныйНДФЛ.НайтиСтроки(СтруктураОтбораНДФЛ);
						
						Если МассивОтбораНачисленныйНДФЛ.Количество() <> 0 Тогда
							СуммаНалогаНачисленного = 0;
							МассивСуммНалогаНачисленного = Новый Массив;
							Для Каждого СтрокаМассиваНалогаНачисленного ИЗ МассивОтбораНачисленныйНДФЛ Цикл
								СуммаНалогаНачисленного = СуммаНалогаНачисленного + СтрокаМассиваНалогаНачисленного.Сумма;
								МассивСуммНалогаНачисленного.Добавить(СтрокаМассиваНалогаНачисленного.Сумма);
							КонецЦикла;
							
							Если НачисленныйНДФЛСуммаНалогаИсходный - СуммаНалогаНачисленного <> 0 Тогда
								МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НачисленныйНДФЛСуммаНалогаИсходный, МассивСуммНалогаНачисленного, 0);
								Если МассивНовыхСумм <> Неопределено Тогда
									НомерСтроки = 0;
									Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
										СтрокаМассива.Сумма = СтрокаМассива.Сумма - МассивНовыхСумм[НомерСтроки];
										НомерСтроки = НомерСтроки + 1;
									КонецЦикла;
								КонецЕсли; 
							Иначе
								Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
									СтрокаМассива.Сумма = 0;
								КонецЦикла;
							КонецЕсли; 
							
						КонецЕсли;
						
					КонецЦикла;
						
					Если НачисленныйНДФЛСуммаНалога - СуммаНалога <> 0 Тогда
						МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НачисленныйНДФЛСуммаНалога, МассивСумм, 0);
						Если МассивНовыхСумм <> Неопределено Тогда
							НомерСтроки = 0;
							Для Каждого СтрокаМассива ИЗ МассивОтбора Цикл
								СтрокаМассива.Сумма = МассивНовыхСумм[НомерСтроки];
								НомерСтроки = НомерСтроки + 1;
							КонецЦикла;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Результат = НачисленныйНДФЛ;
	КонецЕсли;
	
	Для Каждого СтрокаРезультата ИЗ Результат Цикл
		НоваяСтрока = НачисленнаяЗарплатаИВзносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
	КонецЦикла;	
	
	Если ДополнятьТаблицуНДФЛ Тогда
		Для Каждого СтрокаРезультата ИЗ НачисленныйНДФЛ Цикл
			Если СтрокаРезультата.Сумма <> 0 Тогда
				НоваяСтрока = НачисленнаяЗарплатаИВзносы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
				НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат НачисленнаяЗарплатаИВзносы;
	
КонецФункции

Процедура ЗаполнитьСтатьюРасходовПоВидуОперации(ДанныеДляОтражения)

	СоответствиеОпераций = ОтражениеЗарплатыВБухучетеБазовый.СоответствиеВидОперацииСтатьяРасходов();
	
	Для каждого СтрокаТЗ Из ДанныеДляОтражения Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.СтатьяРасходов) Тогда
			СтрокаТЗ.СтатьяРасходов = СоответствиеОпераций[СтрокаТЗ.ВидОперации];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьТаблицуНДФЛАналитикойПоРегистрации(ТаблицаНДФЛ, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ТаблицаНДФЛ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ВидОперации,
	|	ТаблицаНДФЛ.СтатьяРасходов,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КПП КАК СТРОКА(9)) КАК КПП,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КодНалоговогоОргана КАК СТРОКА(4)) КАК КодНалоговогоОргана,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КодПоОКАТО КАК СТРОКА(11)) КАК КодПоОКАТО,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КодПоОКТМО КАК СТРОКА(11)) КАК КодПоОКТМО,
	|	ТаблицаНДФЛ.РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТ_ТаблицаНДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РегистрацииВНалоговомОргане.Ссылка) КАК Ссылка,
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.Код КАК КодНалоговогоОргана,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО
	|ПОМЕСТИТЬ ВТ_РегистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	(РегистрацииВНалоговомОргане.Владелец = &Организация
	|			ИЛИ РегистрацииВНалоговомОргане.Владелец.ГоловнаяОрганизация = &Организация)
	|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.Код,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНДФЛ.ФизическоеЛицо,
	|	СУММА(ВТ_ТаблицаНДФЛ.Сумма) КАК Сумма,
	|	ВТ_ТаблицаНДФЛ.ВидОперации,
	|	ВТ_ТаблицаНДФЛ.СтатьяРасходов,
	|	ВТ_ТаблицаНДФЛ.КПП,
	|	ВТ_ТаблицаНДФЛ.КодПоОКАТО,
	|	ВТ_ТаблицаНДФЛ.КодПоОКТМО,
	|	ВТ_РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТ_ДополненныеДанные
	|ИЗ
	|	ВТ_ТаблицаНДФЛ КАК ВТ_ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацииВНалоговомОргане КАК ВТ_РегистрацииВНалоговомОргане
	|		ПО ВТ_ТаблицаНДФЛ.КПП = ВТ_РегистрацииВНалоговомОргане.КПП
	|			И ВТ_ТаблицаНДФЛ.КодПоОКАТО = ВТ_РегистрацииВНалоговомОргане.КодПоОКАТО
	|			И ВТ_ТаблицаНДФЛ.КодПоОКТМО = ВТ_РегистрацииВНалоговомОргане.КодПоОКТМО
	|			И ВТ_ТаблицаНДФЛ.КодНалоговогоОргана = ВТ_РегистрацииВНалоговомОргане.КодНалоговогоОргана
	|ГДЕ
	|	ВТ_ТаблицаНДФЛ.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНДФЛ.ФизическоеЛицо,
	|	ВТ_ТаблицаНДФЛ.КодПоОКАТО,
	|	ВТ_ТаблицаНДФЛ.КодПоОКТМО,
	|	ВТ_ТаблицаНДФЛ.ВидОперации,
	|	ВТ_ТаблицаНДФЛ.СтатьяРасходов,
	|	ВТ_ТаблицаНДФЛ.КПП,
	|	ВТ_ТаблицаНДФЛ.КодНалоговогоОргана,
	|	ВТ_РегистрацииВНалоговомОргане.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНДФЛ.ФизическоеЛицо,
	|	СУММА(ВТ_ТаблицаНДФЛ.Сумма),
	|	ВТ_ТаблицаНДФЛ.ВидОперации,
	|	ВТ_ТаблицаНДФЛ.СтатьяРасходов,
	|	ВТ_ТаблицаНДФЛ.КПП,
	|	ВТ_ТаблицаНДФЛ.КодПоОКАТО,
	|	ВТ_ТаблицаНДФЛ.КодПоОКТМО,
	|	ВТ_ТаблицаНДФЛ.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_ТаблицаНДФЛ КАК ВТ_ТаблицаНДФЛ
	|ГДЕ
	|	ВТ_ТаблицаНДФЛ.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНДФЛ.ФизическоеЛицо,
	|	ВТ_ТаблицаНДФЛ.КодПоОКАТО,
	|	ВТ_ТаблицаНДФЛ.КодПоОКТМО,
	|	ВТ_ТаблицаНДФЛ.ВидОперации,
	|	ВТ_ТаблицаНДФЛ.СтатьяРасходов,
	|	ВТ_ТаблицаНДФЛ.КПП,
	|	ВТ_ТаблицаНДФЛ.КодНалоговогоОргана,
	|	ВТ_ТаблицаНДФЛ.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДополненныеДанные.ФизическоеЛицо,
	|	СУММА(ВТ_ДополненныеДанные.Сумма) КАК Сумма,
	|	ВТ_ДополненныеДанные.ВидОперации,
	|	ВТ_ДополненныеДанные.СтатьяРасходов,
	|	ВТ_ДополненныеДанные.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_ДополненныеДанные КАК ВТ_ДополненныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДополненныеДанные.ВидОперации,
	|	ВТ_ДополненныеДанные.СтатьяРасходов,
	|	ВТ_ДополненныеДанные.ФизическоеЛицо,
	|	ВТ_ДополненныеДанные.РегистрацияВНалоговомОргане";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты)
	
	ДополнитьТаблицуЗаработнойПлатыНедостающимиКолонками(ТаблицаЗаработнойПлаты);
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРСПревышения);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФСС);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФССНС);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС);
	
	МассивОперацийРасходовПоСтрахованию = Новый Массив;
	МассивОперацийРасходовПоСтрахованию.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	МассивОперацийРасходовПоСтрахованию.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	МассивОперацийРасходовПоСтрахованию.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет);
	
	МассивОперацийНезарплатногоНДФЛ = Новый Массив;
	МассивОперацийНезарплатногоНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки);
	МассивОперацийНезарплатногоНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов);
	МассивОперацийНезарплатногоНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган);
	МассивОперацийНезарплатногоНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками);
	МассивОперацийНезарплатногоНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды);
	МассивОперацийНезарплатногоНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам);
	МассивОперацийНезарплатногоНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом);
	
	МассивОперацийДивиденды = Новый Массив;
	МассивОперацийДивиденды.Добавить(Перечисления.ВидыОперацийПоЗарплате.Дивиденды);
	МассивОперацийДивиденды.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников);
	
	МассивСчетовУчетаНУ = Новый Массив;
	МассивСчетовУчетаНУ.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
	
	СчетУчетаНераспределеннаяПрибыль     = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
	СчетУчетаПрочиеРасходы               = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	РасходыПоУплатеСтраховыхВзносов =
		Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносов");
	ОплатаТрудаНеУчитываемаяДляНалогообложения =
		Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент( "ОплатаТрудаНеУчитываемаяДляНалогообложения");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы",                 ТаблицаЗаработнойПлаты);
	Запрос.УстановитьПараметр("МассивСчетовУчетаНУ",                        МассивСчетовУчетаНУ);
	Запрос.УстановитьПараметр("МассивОпераций",                             МассивОпераций);
	Запрос.УстановитьПараметр("СчетУчетаНераспределеннаяПрибыль",           СчетУчетаНераспределеннаяПрибыль);
	Запрос.УстановитьПараметр("СчетУчетаПрочиеРасходы",                     СчетУчетаПрочиеРасходы);
	Запрос.УстановитьПараметр("РасходыПоУплатеСтраховыхВзносов",            РасходыПоУплатеСтраховыхВзносов);
	Запрос.УстановитьПараметр("ОплатаТрудаНеУчитываемаяДляНалогообложения", ОплатаТрудаНеУчитываемаяДляНалогообложения);
	Запрос.УстановитьПараметр("МассивОперацийРасходовПоСтрахованию",        МассивОперацийРасходовПоСтрахованию);
	Запрос.УстановитьПараметр("МассивОперацийНезарплатногоНДФЛ",            МассивОперацийНезарплатногоНДФЛ);
	Запрос.УстановитьПараметр("МассивОперацийДивиденды",                    МассивОперацийДивиденды);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
	|	НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	|	НачисленнаяЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
	|	НачисленнаяЗарплатаИВзносы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	НачисленнаяЗарплатаИВзносы.ВедущийВидОперации КАК ВедущийВидОперации,
	|	НачисленнаяЗарплатаИВзносы.ОтражениеВУСН КАК ОтражениеВУСН,
	|	НачисленнаяЗарплатаИВзносы.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ ВТ_ТаблицаЗаработнойПлаты
	|ИЗ
	|	&НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗаработнойПлаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ТаблицаЗаработнойПлаты.Сумма КАК Сумма,
	|	ВТ_ТаблицаЗаработнойПлаты.ВидОперации КАК ВидОперации,
	|	ВТ_ТаблицаЗаработнойПлаты.СтатьяРасходов КАК СтатьяРасходов,
	|	ВТ_ТаблицаЗаработнойПлаты.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_ТаблицаЗаработнойПлаты.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СпособыОтраженияЗарплатыВБухУчете.Ссылка КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_ТаблицаЗаработнойПлаты.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаЗаработнойПлаты.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВТ_ТаблицаЗаработнойПлаты.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_ТаблицаЗаработнойПлаты.ВедущийВидОперации КАК ВедущийВидОперации,
	|	ВТ_ТаблицаЗаработнойПлаты.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВТ_ТаблицаЗаработнойПлаты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	СпособыОтраженияЗарплатыВБухУчете.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ПОМЕСТИТЬ ВТ_НачисленнаяЗарплатаИВзносы
	|ИЗ
	|	ВТ_ТаблицаЗаработнойПлаты КАК ВТ_ТаблицаЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтраженияЗарплатыВБухУчете
	|		ПО ВТ_ТаблицаЗаработнойПлаты.СпособОтраженияЗарплатыВБухУчете = СпособыОтраженияЗарплатыВБухУчете.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
	|	ВТ_НачисленнаяЗарплатаИВзносы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК Счет,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3,
	|	ЕСТЬNULL(ПорядокОтраженияЗарплатыВБухУчете.ОтражениеВУСН, ВТ_НачисленнаяЗарплатаИВзносы.ОтражениеВУСН) КАК ОтражениеВУСН,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|				И НЕ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОперацийДивиденды)
	|			ТОГДА &СчетУчетаПрочиеРасходы
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СчетНУ
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетНУ,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|				И НЕ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОперацийДивиденды)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|						ТОГДА &РасходыПоУплатеСтраховыхВзносов
	|					ИНАЧЕ &ОплатаТрудаНеУчитываемаяДляНалогообложения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ1
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоНУ1,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|				И НЕ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОперацийДивиденды)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ2
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоНУ2,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|				И НЕ ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОперацийДивиденды)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ3
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоНУ3,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВедущийВидОперации КАК ВедущийВидОперации,
	|	ВТ_НачисленнаяЗарплатаИВзносы.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ПОМЕСТИТЬ ВТ_ТаблицаСПроводками
	|ИЗ
	|	ВТ_НачисленнаяЗарплатаИВзносы КАК ВТ_НачисленнаяЗарплатаИВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|			И (ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ = ПорядокОтраженияЗарплатыВБухУчете.ЕНВД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСПроводками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ТаблицаСПроводками.Сумма КАК Сумма,
	|	ВТ_ТаблицаСПроводками.ВидОперации КАК ВидОперации,
	|	ВТ_ТаблицаСПроводками.СтатьяРасходов КАК СтатьяРасходов,
	|	ВТ_ТаблицаСПроводками.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_ТаблицаСПроводками.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_ТаблицаСПроводками.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаСПроводками.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Счет
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Счет
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Субконто1
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто1
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Субконто2
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто2
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Субконто3
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто3
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.ОтражениеВУСН
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.ОтражениеВУСН
	|	КОНЕЦ КАК ОтражениеВУСН,
	|	ВТ_ТаблицаСПроводками.СчетНУ КАК СчетНУ,
	|	ВТ_ТаблицаСПроводками.СубконтоНУ1 КАК СубконтоНУ1,
	|	ВТ_ТаблицаСПроводками.СубконтоНУ2 КАК СубконтоНУ2,
	|	ВТ_ТаблицаСПроводками.СубконтоНУ3 КАК СубконтоНУ3,
	|	ВТ_ТаблицаСПроводками.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_ТаблицаСПроводками.ВедущийВидОперации КАК ВедущийВидОперации,
	|	ВТ_ТаблицаСПроводками.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТ_ТаблицаСПроводками.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ПОМЕСТИТЬ ВТ_ИтоговаяТаблица
	|ИЗ
	|	ВТ_ТаблицаСПроводками КАК ВТ_ТаблицаСПроводками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО ВТ_ТаблицаСПроводками.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|			И (ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД)
	|			И (ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ИтоговаяТаблица.Сумма КАК Сумма,
	|	ВТ_ИтоговаяТаблица.ВидОперации КАК ВидОперации,
	|	ВТ_ИтоговаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВТ_ИтоговаяТаблица.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_ИтоговаяТаблица.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_ИтоговаяТаблица.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_ИтоговаяТаблица.Подразделение КАК Подразделение,
	|	ВТ_ИтоговаяТаблица.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА &СчетУчетаПрочиеРасходы
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Счет
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Счет
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА &РасходыПоУплатеСтраховыхВзносов
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто1
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто2
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто3
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.ОтражениеВУСН = ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка)
	|				И (ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОперацийРасходовПоСтрахованию)
	|					ИЛИ ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОперацийНезарплатногоНДФЛ)
	|					ИЛИ ВТ_ИтоговаяТаблица.ВидОперацииРасходовЗаСчетФСС В (&МассивОперацийРасходовПоСтрахованию))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.ОтражениеВУСН
	|	КОНЕЦ КАК ОтражениеВУСН,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА &СчетУчетаПрочиеРасходы
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СчетНУ
	|	КОНЕЦ КАК СчетНУ,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА &РасходыПоУплатеСтраховыхВзносов
	|					ИНАЧЕ &ОплатаТрудаНеУчитываемаяДляНалогообложения
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СубконтоНУ1
	|	КОНЕЦ КАК СубконтоНУ1,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СубконтоНУ2
	|	КОНЕЦ КАК СубконтоНУ2,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СубконтоНУ3
	|	КОНЕЦ КАК СубконтоНУ3,
	|	ВТ_ИтоговаяТаблица.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_ИтоговаяТаблица.ВедущийВидОперации КАК ВедущийВидОперации,
	|	ВТ_ИтоговаяТаблица.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.ОблагаетсяЕНВД
	|			ТОГДА ВТ_ИтоговаяТаблица.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНУ,
	|	ВТ_ИтоговаяТаблица.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ИЗ
	|	ВТ_ИтоговаяТаблица КАК ВТ_ИтоговаяТаблица";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РаспределитьЗарплатуПоВидамДеятельности(ТаблицаЗаработнойПлаты, Организация, ПериодРегистрации)
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПериодРегистрации < УчетЕНВДКлиентСервер.ДатаОтменыЕНВД() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ДоляПатента = УчетПСН.ДоляДоходовПатентнойСистемыНалогообложения(
		Организация, ПериодРегистрации, Перечисления.Периодичность.Месяц);
	
	Если ДоляПатента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПустойСчет     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	ПустоеСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	ОтражениеВУСН  = Перечисления.ОтражениеВУСН.НеПринимаются;
	
	ПустойСпособОтражения = Новый Структура("Счет, Субконто1, Субконто2, Субконто3, ОтражениеВУСН",
		ПустойСчет, ПустоеСубконто, ПустоеСубконто, ПустоеСубконто, ОтражениеВУСН);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗаработнойПлаты", ТаблицаЗаработнойПлаты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗаработнойПлаты.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ТаблицаЗаработнойПлаты.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельностиДляНалоговогоУчетаЗатрат
	|ПОМЕСТИТЬ ВТ_ТаблицаЗаработнойПлаты
	|ИЗ
	|	&ТаблицаЗаработнойПлаты КАК ТаблицаЗаработнойПлаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗаработнойПлаты.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете
	|ПОМЕСТИТЬ ВТ_РаспределяемыйСпособОтраженияВУчете
	|ИЗ
	|	ВТ_ТаблицаЗаработнойПлаты КАК ВТ_ТаблицаЗаработнойПлаты
	|ГДЕ
	|	ВТ_ТаблицаЗаработнойПлаты.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК Счет,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются) КАК ОтражениеВУСН
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|ГДЕ
	|	ПорядокОтраженияЗарплатыВБухУчете.ЕНВД
	|	И ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете В
	|			(ВЫБРАТЬ
	|				ВТ_РаспределяемыйСпособОтраженияВУчете.СпособОтраженияЗарплатыВБухУчете
	|			ИЗ
	|				ВТ_РаспределяемыйСпособОтраженияВУчете)";
	
	ТаблицаСпособовОтраженияВУчете = Запрос.Выполнить().Выгрузить();
	
	МассивРаспределяемыхСтрок = ТаблицаЗаработнойПлаты.НайтиСтроки(Новый Структура("ВидДеятельностиДляНалоговогоУчетаЗатрат",
		Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты));
	
	Для Каждого ЗаписьМассива Из МассивРаспределяемыхСтрок Цикл
		
		СпособОтражения = ТаблицаСпособовОтраженияВУчете.Найти(ЗаписьМассива.СпособОтраженияЗарплатыВБухУчете,
			"СпособОтраженияЗарплатыВБухУчете");
		
		Если СпособОтражения = Неопределено Тогда
			СпособОтражения = ПустойСпособОтражения;
		КонецЕсли;
		
		Если ДоляПатента = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(ЗаписьМассива, СпособОтражения);
			
		Иначе
			
			СуммаПоПатенту = Окр(ЗаписьМассива.Сумма * ДоляПатента, 2);
			ЗаписьМассива.Сумма = ЗаписьМассива.Сумма - СуммаПоПатенту;
			
			НоваяСтрока = ТаблицаЗаработнойПлаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьМассива);
			НоваяСтрока.Сумма = СуммаПоПатенту;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СпособОтражения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ВестиУчетПоРаботникам   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
		
	ТаблицаНачисленийУдержаний = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты,,,Реквизиты);
	ТаблицаНалоговВзносовСФОТ  = ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты,,,Реквизиты);
	ТаблицаДепонентов          = ПодготовитьТаблицуДепонентов(Реквизиты, ТаблицаЗаработнойПлаты);
	
	МассивТаблицПоЗаработнойПлате = Новый Массив;
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаНачисленийУдержаний);
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаНалоговВзносовСФОТ);
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаДепонентов);
	
	СодержанияПроводок = Новый Соответствие;	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход,
									НСтр("ru = 'Начислена заработная плата'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход,
									НСтр("ru = 'Начислен доход в натуральной форме'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход,
									НСтр("ru = 'Начислена заработная плата (сдельно)'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников,
									НСтр("ru = 'Начислены дивиденды'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Дивиденды,
									НСтр("ru = 'Начислены дивиденды'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов,
									НСтр("ru = 'Начислен доход прочему физическому лицу'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам,
									НСтр("ru = 'Начислен доход бывшему работнику'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа,
									НСтр("ru = 'Начислен доход по договору авторского заказа'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги,
									НСтр("ru = 'Начислен доход по договору гражданско-правового характера'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛ,
									НСтр("ru = 'Удержан НДФЛ'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛСПревышения,
									НСтр("ru = 'Удержан НДФЛ с доходов свыше предельной величины'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки,
									НСтр("ru = 'Доначислен НДФЛ'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам,
									НСтр("ru = 'Удержан НДФЛ с дивидендов'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды,
									НСтр("ru = 'Удержан НДФЛ с дивидендов'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом,
									НСтр("ru = 'Удержан НДФЛ по прочим расчетам с персоналом'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган,
									НСтр("ru = 'Задолженность по НДФЛ передана в налоговый орган'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов,
									НСтр("ru = 'Удержан НДФЛ по расчетам с прочими физическими лицами'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками,
									НСтр("ru = 'Удержан НДФЛ по расчетам с бывшим работником'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть,
									НСтр("ru = 'Накопительная часть трудовой пенсии'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть,
									НСтр("ru = 'Страховая часть трудовой пенсии'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу,
									НСтр("ru = 'Обязательное пенсионное страхование'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины,
									НСтр("ru = 'Обязательное пенсионное страхование'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРСПревышения,
									НСтр("ru = 'Обязательное пенсионное страхование по тарифу свыше предельной величины базы для начисления страховых взносов'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ,
									НСтр("ru = 'Взносы на доплату к пенсии членам летных экипажей'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры,
									НСтр("ru = 'Взносы на доплату к пенсии работникам угольной промышленности'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
									НСтр("ru = 'Дополнительные взносы на работников, занятым на работах с вредными условиями труда'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
									НСтр("ru = 'Дополнительные взносы на работников, занятым на работах с тяжелыми условиями труда'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
									НСтр("ru = 'Дополнительные взносы на работников, занятым на работах с вредными условиями труда при отсутствии спецоценки'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
									НСтр("ru = 'Дополнительные взносы на работников, занятым на работах с вредными условиями труда'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
									НСтр("ru = 'Дополнительные взносы на работников, занятым на работах с тяжелыми условиями труда при отсутствии спецоценки'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,
									НСтр("ru = 'Дополнительные взносы на работников, занятым на работах с тяжелыми условиями труда'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФСС,
									НСтр("ru = 'Расчеты по социальному страхованию'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФССНС,
									НСтр("ru = 'Расчеты по обязательному социальному страхованию от НС и ПЗ'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС,
									НСтр("ru = 'Федеральный фонд ОМС'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС,
									НСтр("ru = 'Территориальный фонд ОМС'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС,
									НСтр("ru = 'Расчеты по обязательному социальному страхованию от НС и ПЗ'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС,
									НСтр("ru = 'Расчеты по социальному страхованию'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Депонирование,
									НСтр("ru = 'Депонирование невыплаченной заработной платы'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента,
									НСтр("ru = 'Списание депонированной заработной платы'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом,
									НСтр("ru = 'Прочие расчеты с персоналом'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь,
									НСтр("ru = 'Материальная помощь'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель,
									НСтр("ru = 'Оплата больничного за счет работодателя'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты,
									НСтр("ru = 'Компенсация за задержку зарплаты'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск,
									НСтр("ru = 'Начислен ежегодный отпуск'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства,
									НСтр("ru = 'Начислен ежегодный отпуск за счет оценочных обязательств по отпускам'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы,
									НСтр("ru = 'Начислен ежегодный отпуск'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы,
									НСтр("ru = 'Начислен ежегодный отпуск за счет резервов отпусков'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска,
									НСтр("ru = 'Компенсация ежегодного отпуска'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства,
									НСтр("ru = 'Компенсация ежегодного отпуска за счете оценочных обязательств по отпускам'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение,
									НСтр("ru = 'Социальное пособие на погребение'"));
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	Для Каждого ТаблицаМассива ИЗ МассивТаблицПоЗаработнойПлате Цикл
		
		Если ТаблицаМассива.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьКолонкаСчетНУ = Ложь;
		Если ТаблицаМассива.Колонки.Найти("СчетНУ") <> Неопределено Тогда
			ЕстьКолонкаСчетНУ = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаМассива Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
				// не заполнены счет и аналитика
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УказанСчетНУ = Ложь;
			Если ЕстьКолонкаСчетНУ Тогда
				УказанСчетНУ = ЗначениеЗаполнено(СтрокаТаблицы.СчетНУ);
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
			
			Проводка.СчетДт = СтрокаТаблицы.Счет;
			
			Если СтрокаТаблицы.Счет = СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				Если ВестиУчетПоРаботникам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.Субконто2);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			КонецЕсли;
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете И СвойстваСчетаДт.НалоговыйУчет Тогда
				Если СтрокаТаблицы.Счет = СчетРасчетовСПерсоналомПоОплатеТруда Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;
				Иначе
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
					Если УказанСчетНУ Тогда
						Проводка.СуммаВРДт = СтрокаТаблицы.Сумма - Проводка.СуммаНУДт;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.КорСчет;
			
			Если СтрокаТаблицы.КорСчет = СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				Если ВестиУчетПоРаботникам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.КорСубконто2);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете И СвойстваСчетаКт.НалоговыйУчет Тогда
				Если СтрокаТаблицы.КорСчет = СчетРасчетовСПерсоналомПоОплатеТруда Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.Сумма;
				Иначе
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
					Если УказанСчетНУ Тогда
						Проводка.СуммаВРКт = СтрокаТаблицы.Сумма - Проводка.СуммаНУКт;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если УказанСчетНУ 
				И ОтражатьВНалоговомУчете Тогда
				
				// указан счет НУ - отличный от БУ
				// это в частности страховые взносы 
				// по переходящим отпускам
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНУ);
				Если НЕ СвойстваСчетаДт.НалоговыйУчет Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.СуммаНУДт   = СтрокаТаблицы.Сумма;
				Проводка.СуммаВРДт   = - СтрокаТаблицы.Сумма;
				Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
				
				Проводка.СчетДт = СтрокаТаблицы.СчетНУ;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = СтрокаТаблицы.КорСчет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция СоздатьКлючСортировки(ИсходныеДанные)
	
	ПриоритетВидаОперации = 1000;
	
	// Доходы
	// Диапазон ключей 1-100
	// 1-50   :: Доходы работников
	// 51-70  :: Договора
	// 71-80  :: Дивиденды
	// 81-100 :: Прочие

	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход Тогда
		ПриоритетВидаОперации = 1;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход Тогда
		ПриоритетВидаОперации = 2;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход Тогда
		ПриоритетВидаОперации = 3;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь Тогда
		ПриоритетВидаОперации = 4;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет Тогда
		ПриоритетВидаОперации = 5;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель Тогда
		ПриоритетВидаОперации = 6;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС Тогда
		ПриоритетВидаОперации = 7;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС Тогда
		ПриоритетВидаОперации = 8;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск Тогда
		ПриоритетВидаОперации = 9;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы Тогда
		ПриоритетВидаОперации = 10;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства Тогда
		ПриоритетВидаОперации = 11;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы Тогда
		ПриоритетВидаОперации = 12;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска Тогда
		ПриоритетВидаОперации = 31;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства Тогда
		ПриоритетВидаОперации = 32;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги Тогда
		ПриоритетВидаОперации = 51;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов Тогда
		ПриоритетВидаОперации = 52;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа Тогда
		ПриоритетВидаОперации = 53;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников Тогда
		ПриоритетВидаОперации = 71;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
		ПриоритетВидаОперации = 72;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом Тогда
		ПриоритетВидаОперации = 82;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента Тогда
		ПриоритетВидаОперации = 83;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам Тогда
		ПриоритетВидаОперации = 84;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение Тогда
		ПриоритетВидаОперации = 85;
	КонецЕсли;
	
	// Удержания
	// Диапазон ключей 201-300
	// 201-220 :: НДФЛ
	// 221-240 :: Исполительные документы
	// 241-260 :: Удержания текущей деятельности
	// 261-270 :: Удержания текущей деятельности (нарушения)
	// 271–280 :: Удержания добровольных взносов
	// 291-300 :: Прочие
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ Тогда
		ПриоритетВидаОперации = 201;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов Тогда
		ПриоритетВидаОперации = 202;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам Тогда
		ПриоритетВидаОперации = 203;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки Тогда
		ПриоритетВидаОперации = 204;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды Тогда
		ПриоритетВидаОперации = 205;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом Тогда
		ПриоритетВидаОперации = 206;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками Тогда
		ПриоритетВидаОперации = 207;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛСПревышения Тогда
		ПриоритетВидаОперации = 208;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты Тогда
		ПриоритетВидаОперации = 221;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Профвзносы Тогда
		ПриоритетВидаОперации = 241;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму Тогда
		ПриоритетВидаОперации = 242;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов Тогда
		ПриоритетВидаОперации = 243;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба Тогда
		ПриоритетВидаОперации = 261;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм Тогда
		ПриоритетВидаОперации = 262;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск Тогда
		ПриоритетВидаОперации = 263;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками Тогда
		ПриоритетВидаОперации = 264;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДСВ Тогда
		ПриоритетВидаОперации = 271;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ Тогда
		ПриоритетВидаОперации = 272;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ Тогда
		ПриоритетВидаОперации = 281;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму Тогда
		ПриоритетВидаОперации = 291;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты Тогда
		ПриоритетВидаОперации = 292;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты Тогда
		ПриоритетВидаОперации = 293;
	КонецЕсли;
	
	// Взносы
	// Диапазон ключей 301-400
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФСС Тогда
		ПриоритетВидаОперации = 301;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу Тогда
		ПриоритетВидаОперации = 302;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть Тогда
		ПриоритетВидаОперации = 303;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть Тогда
		ПриоритетВидаОперации = 304;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФФОМС Тогда
		ПриоритетВидаОперации = 305;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ТФОМС Тогда
		ПриоритетВидаОперации = 306;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФССНС Тогда
		ПриоритетВидаОперации = 307;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры Тогда
		ПриоритетВидаОперации = 308;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ Тогда
		ПриоритетВидаОперации = 309;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах Тогда
		ПриоритетВидаОперации = 310;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах Тогда
		ПриоритетВидаОперации = 311;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины Тогда
		ПриоритетВидаОперации = 312;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРСПревышения Тогда
		ПриоритетВидаОперации = 313;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки Тогда
		ПриоритетВидаОперации = 314;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка Тогда
		ПриоритетВидаОперации = 315;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки Тогда
		ПриоритетВидаОперации = 316;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка Тогда
		ПриоритетВидаОперации = 317;
	КонецЕсли;
	
	// Расчеты
	// Диапазон ключей 401-...
	// 401-410  :: Депоненты
	// 411-420  :: Компенсации
	// 421-430  :: Расчеты по налогам
	// 431-...  :: Расчеты по доходам
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Депонирование Тогда
		ПриоритетВидаОперации = 401;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента Тогда
		ПриоритетВидаОперации = 402;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты Тогда
		ПриоритетВидаОперации = 411;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган Тогда
		ПриоритетВидаОперации = 421;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок Тогда
		ПриоритетВидаОперации = 431;
	КонецЕсли;
	
	Возврат ПриоритетВидаОперации;
		
КонецФункции

Функция ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, УСН = Ложь, ИП = Ложь, Реквизиты)
	
	НовыйУчетПоДоговорамПодряда = Год(Реквизиты.Период) >= 2016;
	НовыйУчетПоБольничным       = Реквизиты.Период >= ДатаНачалаАдминистрированияСтраховыхВзносовФНС();
	НовыйУчетДивидендов         = Год(Реквизиты.Период) >= 2018;
	
	ТаблицаНачисленийИУдержаний = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСчет");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто1");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто2");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто3");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КлючСортировки");
	
	СчетУчетаНераспределеннаяПрибыль = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
	ЕстьУчетНУ = Ложь;
	Если ТаблицаЗаработнойПлаты.Найти(Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь, "ВидОперации") <> Неопределено
		ИЛИ ТаблицаЗаработнойПлаты.Найти(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы, "ВидОперации") <> Неопределено
		ИЛИ ТаблицаЗаработнойПлаты.Найти(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства , "ВидОперации") <> Неопределено
		ИЛИ ТаблицаЗаработнойПлаты.Найти(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства , "ВидОперации") <> Неопределено Тогда
		ЕстьУчетНУ = Истина;
	Иначе
		МассивСчетов = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
		Для Каждого Счет ИЗ МассивСчетов Цикл
			Если ТаблицаЗаработнойПлаты.Найти(Счет, "Счет") <> Неопределено Тогда
				ЕстьУчетНУ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Счета учета
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;             // 70
	РасчетыПоПредоставленнымЗаймам              = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;              // 73.01
	РасчетыПоПрочимОперациям                    = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям;                    // 73.03
	РасчетыПоВыплатеДоходов                     = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов;                     // 75.02
	ПрочиеРасчетыСРазнымиДебиторамиИКредиторами = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами; // 76.09
	ПрочиеРасчетыСФизическимиЛицами             = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;             // 76.10
	ПрочиеРасходы                               = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;                               // 91.02
	СчетРезерваОтпусков                         = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениям;     // 96.01.1
	РасчетыПоБольничнымФСС                      = ПланыСчетов.Хозрасчетный.ФСС;                                         // 69.01
	РасчетыПоБольничнымФССНС                    = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;                                   // 69.11
	СчетУчетаНДФЛ                               = ПланыСчетов.Хозрасчетный.НДФЛ;                                        // 68.01.1
	СчетУчетаНДФЛСвышеПредельнойВеличины        = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины;          // 68.01.2
	ПустойСчет                                  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	// Соответствие статей расходов и счетов учета
	СоответствиеСтатейРасходов = ПолучитьСоответствиеСтатейРасходов();
	
	// Аналитика учета
	ВидПлатежаВГосБюджет                        = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ВидПлатежаВГосБюджетАкт                     = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт;
	ВидПлатежаВГосБюджетРасходыПоСтрахованию    = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
	ВидыНачисленийОплатыТрудаДляНУ_пп7ст255     = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255;
	ВидыНачисленийОплатыТрудаДляНУ_пп8ст255     = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп8ст255;
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	СтатьиПрочихРасходов = КлассификаторыДоходовРасходов.НовыйКешГрупповойОперации(Справочники.ПрочиеДоходыИРасходы);
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Реквизиты.Организация));
	РезервОтпусковЭлемент  = НастройкиУчетаЗарплаты.РезервОтпусков;
	
	ВестиУчетПоРаботникам = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам")
			ИЛИ ((УСН ИЛИ ИП) И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии"));

	УчетРезервовОтпусковНУ                   = ВедетсяУчетРезервовОтпусковПоВидамУчета(Реквизиты.Организация, Реквизиты.Период, "НУ");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска
			Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто2 = СтрокаТаблицы.ВидНачисленияОплатыТрудаДляНУ;
				
			Иначе
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ВидНачисленияОплатыТрудаДляНУ;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС
				ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС Тогда
				Если (НЕ ЗначениеЗаполнено(НоваяСтрока.Счет)) // на случай когда счет не пришел
					ИЛИ // на случай когда счет задан и надо сохранить аналитику
					(ЗначениеЗаполнено(НоваяСтрока.Счет) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФССНС) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФСС))
					Тогда
					Если  СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС Тогда
						НоваяСтрока.Счет = РасчетыПоБольничнымФССНС;
					Иначе
						НоваяСтрока.Счет = РасчетыПоБольничнымФСС;
					КонецЕсли;
					Если НовыйУчетПоБольничным Тогда
						НоваяСтрока.Субконто1 = ВидПлатежаВГосБюджет;
					Иначе
						НоваяСтрока.Субконто1 = ВидПлатежаВГосБюджетРасходыПоСтрахованию;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если УчетРезервовОтпусковНУ
				И СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск Тогда
				ЕстьУчетНУ = Истина;
				НоваяСтрока.СчетНУ      = СчетРезерваОтпусков;
				НоваяСтрока.СубконтоНУ1 = РезервОтпусковЭлемент;
				НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
				НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто2 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			Иначе
				
				НоваяСтрока.КорСубконто1 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			КонецЕсли;
			
			НоваяСтрока.Счет      = СчетРезерваОтпусков;
			НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
			НоваяСтрока.Субконто2 = ПустоеСубконто;
			НоваяСтрока.Субконто3 = ПустоеСубконто;
			
			Если НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
				Если УчетРезервовОтпусковНУ
					И НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНУ) Тогда
					НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто2 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			Иначе
				
				НоваяСтрока.КорСубконто1 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства Тогда
				
				Если НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					Если УчетРезервовОтпусковНУ Тогда
						НоваяСтрока.СчетНУ      = СчетРезерваОтпусков;
						НоваяСтрока.СубконтоНУ1 = РезервОтпусковЭлемент;
						НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
						НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
					Иначе
						НоваяСтрока.СчетНУ      = СтрокаТаблицы.Счет;
						НоваяСтрока.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
						НоваяСтрока.СубконтоНУ2 = СтрокаТаблицы.Субконто2;
						НоваяСтрока.СубконтоНУ3 = СтрокаТаблицы.Субконто3;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Счет      = СчетРезерваОтпусков;
				НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
				НоваяСтрока.Субконто2 = ПустоеСубконто;
				НоваяСтрока.Субконто3 = ПустоеСубконто;
			
			ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы
				И НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
				
				НоваяСтрока.СчетНУ      = СчетРезерваОтпусков;
				НоваяСтрока.СубконтоНУ1 = РезервОтпусковЭлемент;
				НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
				НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто2 = ВидыНачисленийОплатыТрудаДляНУ_пп8ст255;
				
			Иначе
				
				НоваяСтрока.КорСубконто1 = ВидыНачисленийОплатыТрудаДляНУ_пп8ст255;
				
			КонецЕсли;
			
			НоваяСтрока.Счет      = СчетРезерваОтпусков;
			НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
			НоваяСтрока.Субконто2 = ПустоеСубконто;
			НоваяСтрока.Субконто3 = ПустоеСубконто;
			
			Если НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
				НоваяСтрока.СчетНУ      = СтрокаТаблицы.Счет;
				НоваяСтрока.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
				НоваяСтрока.СубконтоНУ2 = СтрокаТаблицы.Субконто2;
				НоваяСтрока.СубконтоНУ3 = СтрокаТаблицы.Субконто3;
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = РасчетыПоПрочимОперациям;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			Если НовыйУчетПоДоговорамПодряда Тогда
				
				ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
				Если ТекущийСчетУчета = Неопределено Тогда
					ТекущийСчетУчета  = ПрочиеРасчетыСФизическимиЛицами;
				КонецЕсли;
				
				НоваяСтрока.КорСчет      = ТекущийСчетУчета;
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			Иначе
				НоваяСтрока.КорСчет      = ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
				НоваяСтрока.КорСубконто1 = ПустоеСубконто; //Контрагент
				НоваяСтрока.КорСубконто2 = ПустоеСубконто; //Договор
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = ПрочиеРасчетыСФизическимиЛицами;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Счет) Тогда
				НоваяСтрока.Счет      = РасчетыПоБольничнымФСС;
				НоваяСтрока.Субконто1 = ВидПлатежаВГосБюджет;
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = РасчетыПоВыплатеДоходов;
			КонецЕсли;
			
			Если УСН И ТекущийСчетУчета  = РасчетыПоВыплатеДоходов Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			Если НовыйУчетДивидендов Тогда
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо; //Учредитель
			Иначе
				НоваяСтрока.КорСубконто1 = ПустоеСубконто; //Контрагент
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			КонецЕсли;
			НоваяСтрока.Счет      = ПрочиеРасходы;
			НоваяСтрока.Субконто1 = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
				"КомпенсацияЗаЗадержкуЗарплаты",
				СтатьиПрочихРасходов);
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.Счет         = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			Иначе
				
				НоваяСтрока.Субконто1    = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.Счет         = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			Иначе
				
				НоваяСтрока.Субконто1    = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджетАкт;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = РасчетыПоПрочимОперациям;
			КонецЕсли;
			
			НоваяСтрока.Счет         = ТекущийСчетУчета;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			НоваяСтрока.Счет         = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			Иначе
				
				НоваяСтрока.Субконто1    = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджетАкт;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.Сумма        = - НоваяСтрока.Сумма;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов 
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			Если НовыйУчетПоДоговорамПодряда Тогда
				
				ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
				Если ТекущийСчетУчета = Неопределено Тогда
					ТекущийСчетУчета  = ПрочиеРасчетыСФизическимиЛицами;
				КонецЕсли;
				
				НоваяСтрока.Счет         = ТекущийСчетУчета;
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.Субконто2    = ПустоеСубконто; // Договор
				НоваяСтрока.Субконто3    = ПустоеСубконто;
			Иначе
				НоваяСтрока.Счет         = ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
				НоваяСтрока.Субконто1    = ПустоеСубконто; // Контрагент
				НоваяСтрока.Субконто2    = ПустоеСубконто; // Договор
				НоваяСтрока.Субконто3    = ПустоеСубконто;
			КонецЕсли;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды Тогда
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = РасчетыПоВыплатеДоходов;
			КонецЕсли;
			
			Если УСН И ТекущийСчетУчета  = РасчетыПоВыплатеДоходов Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.Счет         = ТекущийСчетУчета;
			Если НовыйУчетДивидендов Тогда
				НоваяСтрока.Субконто1 = СтрокаТаблицы.ФизическоеЛицо; //Учредитель
			Иначе
				НоваяСтрока.Субконто1 = ПустоеСубконто; //Контрагент
			КонецЕсли;
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛСПревышения Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			Если УСН И ТекущийСчетУчета  = РасчетыПоВыплатеДоходов Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока.Счет         = ТекущийСчетУчета;
			
			Если ВестиУчетПоРаботникам ИЛИ ТекущийСчетУчета <> СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			Иначе
				
				НоваяСтрока.Субконто1    = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛСвышеПредельнойВеличины;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		КонецЕсли;
			
		
	КонецЦикла;
	
	// Замена статей затрат, видов прочих расходов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоЗарплате.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоЗарплате КАК СтатьиЗатратПоЗарплате
	|ГДЕ
	|	СтатьиЗатратПоЗарплате.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.ПособияЗаСчетРаботодателя)";
	
	СтатьиЗатрат_ПособияЗаСчетРаботодателя = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачисленийИУдержаний Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель Тогда
			
			// Больничный за счет работодателя.
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, , СтатьиЗатрат_ПособияЗаСчетРаботодателя);
				Если ЕстьУчетНУ И НЕ (УСН ИЛИ ИП) Тогда
					ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, "НУ", СтатьиЗатрат_ПособияЗаСчетРаботодателя);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "КлючСортировки, ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	Если УСН Тогда
		СтрокаСвертки = СтрокаСвертки + ", ОтражениеВУСН, РасчетныйДокумент";
	КонецЕсли;
	
	Если ИП Тогда
		СтрокаСвертки = СтрокаСвертки + ", ВидНачисленияУдержания";
	КонецЕсли;
	
	Если ЕстьУчетНУ И НЕ (УСН ИЛИ ИП) Тогда
		СтрокаСвертки = СтрокаСвертки + ", СчетНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3";
	КонецЕсли;
	
	ТаблицаНачисленийИУдержаний.Свернуть(СтрокаСвертки, "Сумма, СуммаНУ");
	ТаблицаНачисленийИУдержаний.Сортировать(СтрокаСвертки);
	
	Возврат ТаблицаНачисленийИУдержаний;
		
КонецФункции

Функция ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты, УСН = Ложь, ИП = Ложь, Реквизиты)
	
	СчетаУчетаНалоговВзносовСФОТ = Новый Соответствие;
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть,
		ПланыСчетов.Хозрасчетный.ПФР_нак);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть,
		ПланыСчетов.Хозрасчетный.ПФР_страх);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу,
		ПланыСчетов.Хозрасчетный.ПФР_ОПС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины,
		ПланыСчетов.Хозрасчетный.ПФР_ОПС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРСПревышения,
		ПланыСчетов.Хозрасчетный.ПФР_ОПС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ,
		ПланыСчетов.Хозрасчетный.ПФР_доп);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры,
		ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
		ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
		ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
		ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,
		ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФСС,
		ПланыСчетов.Хозрасчетный.ФСС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФССНС,
		ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС,
		ПланыСчетов.Хозрасчетный.ФФОМС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС,
		ПланыСчетов.Хозрасчетный.ТФОМС);
	
	ОперацииУчетаОсобыхДопВзносов = Новый Массив;
	ОперацииУчетаОсобыхДопВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки);
	ОперацииУчетаОсобыхДопВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки);
	
	ТаблицаНалоговВзносовСФОТ = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСчет");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСубконто1");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСубконто2");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСубконто3");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КлючСортировки");
	
	// Счета учета
	РасчетыПоБольничнымФСС   = ПланыСчетов.Хозрасчетный.ФСС;                                      // 69.01
	РасчетыПоБольничнымФССНС = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;                                // 69.11
	ПрочиеРасходы            = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;                            // 91.02
	СчетУчетаРезерва         = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениям;  // 96.01.1
	СчетУчетаВзносовРезерва  = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПостраховымВзносам; // 96.01.2
	
	МассивСчет84 = Новый Массив();
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	Пока ВыборкаСчетов.Следующий() Цикл
		МассивСчет84.Добавить(ВыборкаСчетов.Ссылка);
	КонецЦикла;
	
	// Аналитика учета
	ПустоеСубконто                           = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	ВидПлатежаВГосБюджет                     = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ВидПлатежаВГосБюджетВзносыБезСпецоценки  = Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки;
	ВидПлатежаВГосБюджетРасходыПоСтрахованию = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
	
	СтатьиПрочихРасходов = КлассификаторыДоходовРасходов.НовыйКешГрупповойОперации(Справочники.ПрочиеДоходыИРасходы);
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Реквизиты.Организация));
	РезервОтпусковЭлемент  = НастройкиУчетаЗарплаты.РезервОтпусков;
	
	УчетРезервовОтпусковНУ                   = ВедетсяУчетРезервовОтпусковПоВидамУчета(Реквизиты.Организация, Реквизиты.Период, "НУ");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.ВидОперации) = Неопределено Тогда
			
			Продолжить;
			
		Иначе
			
			НоваяСтрока = ТаблицаНалоговВзносовСФОТ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			Если НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы Тогда
				
				НоваяСтрока.Счет         = СчетУчетаВзносовРезерва;
				НоваяСтрока.Субконто1    = РезервОтпусковЭлемент;
				НоваяСтрока.Субконто2    = ПустоеСубконто;
				НоваяСтрока.Субконто3    = ПустоеСубконто;
				
				Если НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					Если УчетРезервовОтпусковНУ
						И НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНУ) Тогда
						НоваяСтрока.СуммаНУ = НоваяСтрока.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства Тогда
				
				Если НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					Если УчетРезервовОтпусковНУ Тогда
						НоваяСтрока.СчетНУ      = СчетУчетаВзносовРезерва;
						НоваяСтрока.СубконтоНУ1 = РезервОтпусковЭлемент;
						НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
						НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
					Иначе
						НоваяСтрока.СчетНУ      = СтрокаТаблицы.Счет;
						НоваяСтрока.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
						НоваяСтрока.СубконтоНУ2 = СтрокаТаблицы.Субконто2;
						НоваяСтрока.СубконтоНУ3 = СтрокаТаблицы.Субконто3;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Счет      = СчетУчетаВзносовРезерва;
				НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
				НоваяСтрока.Субконто2 = ПустоеСубконто;
				НоваяСтрока.Субконто3 = ПустоеСубконто;
				
			ИначеЕсли НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы Тогда
				
				Если НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					НоваяСтрока.СчетНУ      = СчетУчетаВзносовРезерва;
					НоваяСтрока.СубконтоНУ1 = РезервОтпусковЭлемент;
					НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
					НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
				КонецЕсли;
				
			ИначеЕсли НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства Тогда
				
				Если НЕ СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					НоваяСтрока.СчетНУ      = СтрокаТаблицы.Счет;
					НоваяСтрока.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
					НоваяСтрока.СубконтоНУ2 = СтрокаТаблицы.Субконто2;
					НоваяСтрока.СубконтоНУ3 = СтрокаТаблицы.Субконто3;
				КонецЕсли;
				
				НоваяСтрока.Счет      = СчетУчетаВзносовРезерва;
				НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
				НоваяСтрока.Субконто2 = ПустоеСубконто;
				НоваяСтрока.Субконто3 = ПустоеСубконто;
				
			ИначеЕсли НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
				
				НоваяСтрока.Счет         = ПрочиеРасходы;
				НоваяСтрока.Субконто1    = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
					"КомпенсацияЗаЗадержкуЗарплаты",
					СтатьиПрочихРасходов);
				НоваяСтрока.Субконто2    = ПустоеСубконто;
				НоваяСтрока.Субконто3    = ПустоеСубконто;
				
			ИначеЕсли МассивСчет84.Найти(НоваяСтрока.Счет) = Неопределено Тогда
				
				Если НоваяСтрока.Счет = СчетУчетаРезерва Тогда
					НоваяСтрока.Счет         = СчетУчетаВзносовРезерва;
				Иначе
					НоваяСтрока.Счет         = НоваяСтрока.Счет;
				КонецЕсли;
				НоваяСтрока.Субконто1    = НоваяСтрока.Субконто1;
				НоваяСтрока.Субконто2    = НоваяСтрока.Субконто2;
				НоваяСтрока.Субконто3    = НоваяСтрока.Субконто3;
			Иначе
				НоваяСтрока.Счет         = ПрочиеРасходы;
				НоваяСтрока.Субконто1    = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
					"РасходыПоУплатеСтраховыхВзносов",
					СтатьиПрочихРасходов);
				НоваяСтрока.Субконто2    = ПустоеСубконто;
				НоваяСтрока.Субконто3    = ПустоеСубконто;
			КонецЕсли;
			
			КорСубконто = ОперацииУчетаОсобыхДопВзносов.Найти(СтрокаТаблицы.ВидОперации);
			НоваяСтрока.КорСчет      = СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.ВидОперации);
			НоваяСтрока.КорСубконто1 = ?(КорСубконто = Неопределено, ВидПлатежаВГосБюджет, ВидПлатежаВГосБюджетВзносыБезСпецоценки);
			НоваяСтрока.КорСубконто2 = ПустоеСубконто;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			Если Год(Реквизиты.Период) >= 2015 Тогда
				Если СтрокаТаблицы.ВидОперацииРасходовЗаСчетФСС = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС Тогда
					Если (НЕ ЗначениеЗаполнено(НоваяСтрока.Счет)) // на случай когда счет не пришел
						ИЛИ // на случай когда счет задан и надо сохранить аналитику
						(ЗначениеЗаполнено(НоваяСтрока.Счет) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФССНС) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФСС))
						Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете) Тогда // способ отражения был задан
							НоваяСтрока.Счет = РасчетыПоБольничнымФСС;
							
							Если Реквизиты.Период >= ДатаНачалаАдминистрированияСтраховыхВзносовФНС() Тогда
								НоваяСтрока.Субконто1 = ВидПлатежаВГосБюджет;
							Иначе
								НоваяСтрока.Субконто1 = ВидПлатежаВГосБюджетРасходыПоСтрахованию;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "КлючСортировки, ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	Если УСН Тогда
		СтрокаСвертки = СтрокаСвертки + ", ОтражениеВУСН";
	ИначеЕсли ИП Тогда
		СтрокаСвертки = СтрокаСвертки + ", ВидНачисленияУдержания";
	Иначе
		СтрокаСвертки = СтрокаСвертки + ", СчетНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3";
	КонецЕсли;
	
	ТаблицаНалоговВзносовСФОТ.Свернуть(СтрокаСвертки, "Сумма, СуммаНУ");
	ТаблицаНалоговВзносовСФОТ.Сортировать(СтрокаСвертки);
	
	// Замена статей затрат, видов прочих расходов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоЗарплате.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоЗарплате КАК СтатьиЗатратПоЗарплате
	|ГДЕ
	|	СтатьиЗатратПоЗарплате.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.ФСС_НС)";
	
	СтатьиЗатрат_ФСС_НСиПЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоЗарплате.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоЗарплате КАК СтатьиЗатратПоЗарплате
	|ГДЕ
	|	СтатьиЗатратПоЗарплате.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.СтраховыеВзносы)";
	
	СтатьиЗатрат_СтраховыеВзносы = Запрос.Выполнить().Выгрузить();
	
	ЕстьУчетНУ = Ложь;
	Если ТаблицаНалоговВзносовСФОТ.Колонки.Найти("СчетНУ") <> Неопределено Тогда
		ЕстьУчетНУ = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговВзносовСФОТ Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФССНС
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС Тогда
			
			// Взносы в ФСС от НС и ПЗ
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, , СтатьиЗатрат_ФСС_НСиПЗ);
				Если ЕстьУчетНУ Тогда
					ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, "НУ", СтатьиЗатрат_ФСС_НСиПЗ);
				КонецЕсли;

			КонецЦикла;
						
			
		Иначе
			
			// Взносы в ПФР, ФОМС и ФСС
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, , СтатьиЗатрат_СтраховыеВзносы);
				Если ЕстьУчетНУ Тогда
					ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, "НУ", СтатьиЗатрат_СтраховыеВзносы);
				КонецЕсли;
				
			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНалоговВзносовСФОТ;
	
КонецФункции

Функция ПодготовитьТаблицуДепонентов(Реквизиты, ТаблицаЗаработнойПлаты, УСН = Ложь)
	
	ТаблицаНачисленийИУдержаний = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСчет");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто1");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто2");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто3");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КлючСортировки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК КорСчет,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК КорСубконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК КорСубконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК КорСубконто3,
	|	ПорядокОтраженияЗарплатыВБухУчете.ОтражениеВУСН КАК ОтражениеВУСН,
	|	НастройкиУчетаЗарплаты.СписаниеДепонированныхСумм
	|ИЗ
	|	РегистрСведений.НастройкиУчетаЗарплаты КАК НастройкиУчетаЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО НастройкиУчетаЗарплаты.СписаниеДепонированныхСумм = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|ГДЕ
	|	НастройкиУчетаЗарплаты.Организация = &Организация
	|	И НЕ ПорядокОтраженияЗарплатыВБухУчете.ЕНВД";
	
	ПорядокСписанияДепонентов = Запрос.Выполнить().Выбрать();
	ПорядокСписанияДепонентов.Следующий();
	
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СчетУчетаДепонентов                  = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	СчетУчетаПрочихДоходов               = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	СчетПрочихРасчетовСФизическимиЛицами = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;
	
	ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасходовРасчетыСКонтрагентами = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	
	ПустоеСубконто                       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	ВидПрочегоДохода                     = ПустоеСубконто;
	
	ВестиУчетПоРаботникам                    = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Депонирование Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.КорСчет      = СчетУчетаДепонентов;
			
			Если СтрокаТаблицы.СтатьяРасходов = СтатьяРасходовРасчетыСКонтрагентами Тогда
				
				НоваяСтрока.Счет      = СчетПрочихРасчетовСФизическимиЛицами;
				НоваяСтрока.Субконто1 = СтрокаТаблицы.ФизическоеЛицо;
				
				Если ВестиУчетПоРаботникам ИЛИ (УСН И УчетЗарплатыИКадровСредствамиБухгалтерии) Тогда
					НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				КонецЕсли;
			Иначе
				
				НоваяСтрока.Счет = СчетРасчетовСПерсоналомПоОплатеТруда;
				
				Если ВестиУчетПоРаботникам ИЛИ (УСН И УчетЗарплатыИКадровСредствамиБухгалтерии) Тогда
					НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
					НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента Тогда
			
			Если НЕ ЗначениеЗаполнено(ПорядокСписанияДепонентов.СписаниеДепонированныхСумм) Тогда
				ТекстСообщения = НСтр("ru = '%1. В настройках учета зарплаты не задан способ учета для списания депонированных сумм.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Реквизиты.Регистратор); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокСписанияДепонентов);
						
			НоваяСтрока.Счет = СчетУчетаДепонентов;
			
			Если ВестиУчетПоРаботникам Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;

			КонецЕсли;
			
			НоваяСтрока.ОтражениеВУСН = СтрокаТаблицы.ОтражениеВУСН;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "КлючСортировки, ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	Если УСН Тогда
		СтрокаСвертки = СтрокаСвертки + ", ОтражениеВУСН";
	КонецЕсли;
		
	ТаблицаНачисленийИУдержаний.Свернуть(СтрокаСвертки, "Сумма, СуммаНУ");
	ТаблицаНачисленийИУдержаний.Сортировать(СтрокаСвертки);
	
	Возврат ТаблицаНачисленийИУдержаний;
		
КонецФункции

Процедура ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, ВидУчета = "", ТаблицаЗамены)
	
	ТекущаяКолонка = "Субконто" + ВидУчета + НомерСубконто;
	
	ИскомоеЗначение = СтрокаТаблицы[ТекущаяКолонка];
	
	СтрокаЗамещения = ТаблицаЗамены.Найти(ИскомоеЗначение, "СтатьяЗатратНачисления");
	
	Если СтрокаЗамещения <> Неопределено Тогда
		СтрокаТаблицы[ТекущаяКолонка] = СтрокаЗамещения.СтатьяЗатрат;
	Иначе
		Если ТипЗнч(ИскомоеЗначение) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаЗамещения = ТаблицаЗамены.Найти(Справочники.СтатьиЗатрат.ПустаяСсылка(), "СтатьяЗатратНачисления");
			Если СтрокаЗамещения <> Неопределено Тогда
				СтрокаТаблицы[ТекущаяКолонка] = СтрокаЗамещения.СтатьяЗатрат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ИскомоеЗначение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			СтрокаЗамещения = ТаблицаЗамены.Найти(Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка(), "СтатьяЗатратНачисления");
			Если СтрокаЗамещения <> Неопределено Тогда
				СтрокаТаблицы[ТекущаяКолонка] = СтрокаЗамещения.СтатьяЗатрат;
			КонецЕсли;
		КонецЕсли;					
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполненностьСпособаОтраженияВУчете(ТаблицаЗаработнойПлаты, Реквизиты)
	
	ТаблицаПроверки = ТаблицаЗаработнойПлаты.Скопировать(,"ФизическоеЛицо, ВидОперации, СпособОтраженияЗарплатыВБухУчете, Счет");	
	ТаблицаПроверки.Свернуть("ФизическоеЛицо, ВидОперации, СпособОтраженияЗарплатыВБухУчете, Счет",);
	
	ВидыОперацийНачисления = Перечисления.ВидыОперацийПоЗарплате.Начисления();
	
	НепроверяемыеНачисления = Новый Массив;
	НепроверяемыеНачисления.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС); 
	НепроверяемыеНачисления.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	НепроверяемыеНачисления.Добавить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты);
	НепроверяемыеНачисления.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение);
	
	ДополнениеСообщения = "";
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		ДополнениеСообщения = НСтр("ru = ' Проверьте настройку начислений/удержаний.'");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПроверки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидОперации) Тогда
			Продолжить;
		ИначеЕсли ВидыОперацийНачисления.Найти(СтрокаТаблицы.ВидОперации) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НепроверяемыеНачисления.Найти(СтрокаТаблицы.ВидОперации) = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете) Тогда
				ТекстСообщения = НСтр("ru = '%1. Работник: %2 - не указан способ учета зарплаты для вида операции ""%3""!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Реквизиты.Регистратор,
					СтрокаТаблицы.ФизическоеЛицо,
					СтрокаТаблицы.ВидОперации); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
				ТекстСообщения = НСтр("ru = '%1. Работник: %2 - не указаны счет и аналитика для способа учета зарплаты ""%3""!%4'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Реквизиты.Регистратор,
					СтрокаТаблицы.ФизическоеЛицо,
					СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете,
					ДополнениеСообщения); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьРегистрацииВНалоговомОргане(ТаблицаНДФЛ, Реквизиты, Отказ)
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПроверки = ТаблицаНДФЛ.Скопировать(,"ФизическоеЛицо, РегистрацияВНалоговомОргане");
	
	ДополнениеСообщения = "";
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПроверки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.РегистрацияВНалоговомОргане) Тогда
			ТекстСообщения = НСтр("ru = '%1. Работник: %2 - на закладке ""Начисленный НДФЛ"" не указана регистрация в налоговом органе!%4'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Реквизиты.Регистратор,
				СтрокаТаблицы.ФизическоеЛицо,
				ДополнениеСообщения); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,,,Отказ);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьСоответствиеСтатейРасходов()
	
	СоответствиеСтатей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиРасходовЗарплата.Ссылка КАК Ссылка,
	|	СтатьиРасходовЗарплата.СпособРасчетовСФизическимиЛицами КАК СпособРасчетовСФизическимиЛицами
	|ИЗ
	|	Справочник.СтатьиРасходовЗарплата КАК СтатьиРасходовЗарплата
	|ГДЕ
	|	СтатьиРасходовЗарплата.СпособРасчетовСФизическимиЛицами <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;             // 70
		РасчетыПоПрочимОперациям                    = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям;                    // 73.03
		РасчетыПоВыплатеДоходов                     = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов;                     // 75.02
		ПрочиеРасчетыСФизическимиЛицами             = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;             // 76.10
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СпособРасчетовСФизическимиЛицами = Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда Тогда
				СчетУчета = СчетРасчетовСПерсоналомПоОплатеТруда;
			ИначеЕсли Выборка.СпособРасчетовСФизическимиЛицами = Перечисления.СпособыРасчетовСФизическимиЛицами.ПрочиеРасчетыСПерсоналом Тогда
				СчетУчета = РасчетыПоПрочимОперациям;
			ИначеЕсли Выборка.СпособРасчетовСФизическимиЛицами = Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами Тогда
				СчетУчета = ПрочиеРасчетыСФизическимиЛицами;
			ИначеЕсли Выборка.СпособРасчетовСФизическимиЛицами = Перечисления.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам Тогда
				СчетУчета = СчетРасчетовСПерсоналомПоОплатеТруда;
			ИначеЕсли Выборка.СпособРасчетовСФизическимиЛицами = Перечисления.СпособыРасчетовСФизическимиЛицами.Дивиденды Тогда
				СчетУчета = РасчетыПоВыплатеДоходов;
			КонецЕсли;
			
			СоответствиеСтатей.Вставить(Выборка.Ссылка, СчетУчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеСтатей;
	
КонецФункции

#Область НачислениеУСН

Процедура СформироватьДвиженияПоРегистрамУСННачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, УдержаннаяЗарплата = Неопределено, Реквизиты, Движения, Отказ)
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Найти("РасходыПриУСН") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТиповПланСчетов =  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
		
	ТаблицаУСННачислениеЗарплаты = Новый ТаблицаЗначений;
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Счет",              ОписаниеТиповПланСчетов);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Субконто1",         ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Субконто2",         ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Субконто3",         ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСчет",           ОписаниеТиповПланСчетов);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСубконто1",      ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСубконто2",      ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСубконто3",      ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("ОтражениеВУСН",     Новый ОписаниеТипов("ПеречислениеСсылка.ОтражениеВУСН"));
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Сумма",             ОписаниеТиповЧисло15_2);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("РасчетныйДокумент", Метаданные.РегистрыНакопления.РасходыПриУСН.Измерения.РасчетныйДокумент.Тип);
	
	ТаблицаУдержаний = ПодготовитьТаблицуУдержаний(УдержаннаяЗарплата, Истина, Ложь);
	
	ТаблицаНачислений = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, Истина,, Реквизиты);
	ТаблицаНалоговВзносовСФОТ  = ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты, Истина,, Реквизиты);
	
	ОтражениеВУСН_НеПринимаются = Перечисления.ОтражениеВУСН.НеПринимаются;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачислений Цикл
		
		НоваяСтрока = ТаблицаУСННачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОтражениеВУСН) Тогда
			НоваяСтрока.ОтражениеВУСН = ОтражениеВУСН_НеПринимаются;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговВзносовСФОТ Цикл
		
		НоваяСтрока = ТаблицаУСННачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОтражениеВУСН) Тогда
			НоваяСтрока.ОтражениеВУСН = ОтражениеВУСН_НеПринимаются;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаУСННачислениеЗарплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаУСННачислениеЗарплаты", ТаблицаУСННачислениеЗарплаты);
	Параметры.Вставить("ТаблицаУдержаний",             ТаблицаУдержаний);
	Параметры.Вставить("ПериодРегистрации",            Реквизиты.Период);
	
	ДокументОбъект = Новый Структура();
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	ДокументОбъект.Вставить("Имя",         "НачислениеЗарплаты");
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);
	ДокументОбъект.Вставить("Движения",    Движения);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);
	
КонецПроцедуры

// Формирует движения по отражению зарплаты в УСН
Процедура СформироватьДвиженияОтраженияЗарплатыУСН(ТаблицаОтраженияЗарплатыУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОтраженияЗарплатыУСН) Тогда
		Возврат;
	КонецЕсли;		
	
	Если Движения.Найти("РасходыПриУСН") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийОтраженияЗарплатыУСН(ТаблицаОтраженияЗарплатыУСН, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	Параметры.Вставить("ТаблицаУСННачислениеЗарплаты", Параметры.ТаблицаОтраженияЗарплатыУСН);
	Параметры.Вставить("ПериодРегистрации", Реквизиты.Период);
	
	ДокументОбъект = Новый Структура();
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	ДокументОбъект.Вставить("Имя",         "НачислениеЗарплаты");
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Ссылка);	
	ДокументОбъект.Вставить("Движения",    Движения);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);

КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияЗарплатыУСН(ТаблицаОтраженияЗарплатыУСН, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Организация,"		// <СправочникСсылка.Организации> - организация документа
	+ "Ссылка,"				// <ДокументСсылка> - документ-регистратор
	+ "ПериодРегистрации"   // <Дата> - период регистрации
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "Счет,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"					// <> - значение аналитики 
	+ "Субконто2,"					// <> - значение аналитики 
	+ "Субконто3,"					// <> - значение аналитики
	+ "КорСчет,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "КорСубконто1,"				// <> - значение аналитики 
	+ "КорСубконто2,"				// <> - значение аналитики 
	+ "КорСубконто3,"				// <> - значение аналитики	
	+ "ОтражениеВУСН,"				// <Перечисление.ОтражениеВУСН>
	+ "РасчетныйДокумент,"			// <ДокументСсылка> - документ-регистратор
	+ "Сумма"						// <Число(15,2)>
	;	
	
	Параметры.Вставить("ТаблицаОтраженияЗарплатыУСН", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОтраженияЗарплатыУСН, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область НачислениеИП

Процедура ОпределитьВидНачисленийУдержанийИП(ТаблицаЗаработнойПлаты, Реквизиты)
	
	СоответствиеВидовНачисленийУдержаний = Новый Соответствие;
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход,               Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск,              Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска, Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход,        Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход,             Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛ,                         Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛСПревышения,              Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги, Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
	КонецЕсли;
	
	Если Реквизиты.Период >= ДатаНачалаАдминистрированияСтраховыхВзносовФНС() Тогда
		СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель, Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
		СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС,          Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
		СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС,        Перечисления.ИПВидыНачисленийУдержаний.НачисленоДругое);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидНачисленияУдержания") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидНачисленияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
		Для каждого Начисление Из ТаблицаЗаработнойПлаты Цикл
			Начисление.ВидНачисленияУдержания	= СоответствиеВидовНачисленийУдержаний.Получить(Начисление.ВидОперации);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегистрамИПНачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаЗаработнойПлаты) Тогда
		Возврат;
	КонецЕсли;		
	
	ОпределитьВидНачисленийУдержанийИП(ТаблицаЗаработнойПлаты, Реквизиты);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеТиповПланСчетов =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
	ОписаниеТиповВидНачисленияУдержания =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
		
	ТаблицаИПНачислениеЗарплаты = Новый ТаблицаЗначений;
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Счет",          ОписаниеТиповПланСчетов);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Субконто1",     ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Субконто2",     ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Субконто3",     ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСчет",       ОписаниеТиповПланСчетов);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСубконто1",  ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСубконто2",  ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСубконто3",  ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("ВидНачисленияУдержания", ОписаниеТиповВидНачисленияУдержания);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Сумма",         ОписаниеТиповЧисло15_2);
			
	ТаблицаНачисленийУдержаний = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, , Истина, Реквизиты);
	ТаблицаНалоговВзносовСФОТ  = ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты, , Истина, Реквизиты);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачисленийУдержаний Цикл
		
		НоваяСтрока = ТаблицаИПНачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговВзносовСФОТ Цикл
		
		НоваяСтрока = ТаблицаИПНачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ТаблицаИПНачислениеЗарплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Найти("ИПРасходыНаОплатуТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Ссылка") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Ссылка",	Документы.ТипВсеСсылки());
		Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Регистратор, "Ссылка");
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Удержания") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Удержания");
		Параметры.Реквизиты.ЗаполнитьЗначения(Ложь, "Удержания");
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаНачисленияУдержания", ТаблицаИПНачислениеЗарплаты);
	
	ТаблицаПрочиеРасходы = УчетДоходовИРасходовПредпринимателя.ПустаяТаблицаРегистраНакопления("ИППрочиеРасходы", Ложь);
	Параметры.Вставить("ТаблицаПрочиеРасходы", ТаблицаПрочиеРасходы);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРасходовНаОплатуТруда(Параметры, Движения, Отказ);
	
	ОтразитьРасчетыПоНачисленнымПособиямИП(Параметры, ТаблицаЗаработнойПлаты, ТаблицаИПНачислениеЗарплаты, ТаблицаПрочиеРасходы, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияЗарплатыИП(ТаблицаНачисленияУдержания, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Ссылка,"						// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаОтраженияЗарплатыИП
	
	СписокОбязательныхКолонок = ""
		+ "Счет,"						//	<ПланСчетовСсылка.Хозрасчетный>
		+ "Субконто1,"					//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто2,"					//  <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "Субконто3,"					//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСчет,"					//	<ПланСчетовСсылка.Хозрасчетный> 
		+ "КорСубконто1,"				//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСубконто2,"				//  <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "КорСубконто3,"				//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "ВидНачисленияУдержания,"		//  <ПеречислениеСсылка.ИПВидыНачисленийУдержаний> - вид начисления/удержания
		+ "Сумма";						//	<Сумма, 15, 2> - сумма начисления/удержания в рублях
		
	Параметры.Вставить("ТаблицаОтраженияЗарплатыИП", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачисленияУдержания, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

Процедура СинхронизироватьПодразделенияИРегистрацииВНалоговомОргане(ТаблицаЗаработнойПлаты, Реквизиты)
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьТаблицуЗаработнойПлатыНедостающимиКолонками(ТаблицаЗаработнойПлаты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                     Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",                Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделения",              ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаработнойПлаты, "Подразделение", Истина));
	Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы", ТаблицаЗаработнойПлаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
	|	НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	|	НачисленнаяЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
	|	НачисленнаяЗарплатаИВзносы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	НачисленнаяЗарплатаИВзносы.ВедущийВидОперации КАК ВедущийВидОперации,
	|	НачисленнаяЗарплатаИВзносы.ОтражениеВУСН КАК ОтражениеВУСН,
	|	НачисленнаяЗарплатаИВзносы.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ ВТ_НачисленнаяЗарплатаИВзносы
	|ИЗ
	|	&НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница = &Организация
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТ_ИсторияРегистраций
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&Период,
	|			СтруктурнаяЕдиница = &Организация
	|				ИЛИ СтруктурнаяЕдиница В (&Подразделения)) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница = &Организация
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ВТ_НачисленнаяЗарплатаИВзносы.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТ_ИсторияРегистраций.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))
	|		ИНАЧЕ ВТ_НачисленнаяЗарплатаИВзносы.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВедущийВидОперации КАК ВедущийВидОперации,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВТ_НачисленнаяЗарплатаИВзносы.РасчетныйДокумент КАК РасчетныйДокумент
	|ИЗ
	|	ВТ_НачисленнаяЗарплатаИВзносы КАК ВТ_НачисленнаяЗарплатаИВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсторияРегистраций КАК ВТ_ИсторияРегистраций
	|		ПО ВТ_НачисленнаяЗарплатаИВзносы.Подразделение = ВТ_ИсторияРегистраций.СтруктурнаяЕдиница";
	
	ТаблицаЗаработнойПлаты = Запрос.Выполнить().Выгрузить();
	
	МассивОперацийНДФЛ = Новый Массив;
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛ);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛСПревышения);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам);
	МассивОперацийНДФЛ.Добавить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом);
	
	МассивОперацийВзносов = Новый Массив;
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРСПревышения);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФСС);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФССНС);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС);
	МассивОперацийВзносов.Добавить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС);
	
	ТаблицаНовыхСтрок = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	ТаблицаНовыхСтрок.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0)));
	
	МасивСтарыхСтрок = Новый Массив;
	
	ПромежуточнаяТаблица = ТаблицаЗаработнойПлаты.Скопировать(, "ФизическоеЛицо, РегистрацияВНалоговомОргане, СтатьяРасходов");
	ПромежуточнаяТаблица.Свернуть("ФизическоеЛицо, РегистрацияВНалоговомОргане, СтатьяРасходов");
	Для Каждого СтрокаТаблицы ИЗ ПромежуточнаяТаблица Цикл
		
		Отбор = Новый Структура("ФизическоеЛицо, РегистрацияВНалоговомОргане, СтатьяРасходов");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		МассивСтрок = ТаблицаЗаработнойПлаты.НайтиСтроки(Отбор);
		
		МасивНачислений = Новый Массив;
		МассивУдержаний = Новый Массив;
		
		Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
			
			Если МассивОперацийВзносов.Найти(СтрокаМассива.ВидОперации) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивОперацийНДФЛ.Найти(СтрокаМассива.ВидОперации) = Неопределено Тогда
				МасивНачислений.Добавить(СтрокаМассива);
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаМассива.Подразделение) Тогда
					МассивУдержаний.Добавить(СтрокаМассива);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МасивНачислений.Количество() = 0
			ИЛИ МассивУдержаний.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКоэффициентов = Новый Массив;
		Для Каждого СтрокаМассива ИЗ МасивНачислений Цикл
			МассивКоэффициентов.Добавить(СтрокаМассива.Сумма);
		КонецЦикла;
		
		Для Каждого СтрокаМассива ИЗ МассивУдержаний Цикл
			МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаМассива.Сумма, МассивКоэффициентов, 0);
			Если МассивНовыхСумм <> Неопределено Тогда
				МасивСтарыхСтрок.Добавить(СтрокаМассива);
				НомерСтроки = 0;
				Для Каждого СтрокаМассиваМассивНовыхСумм ИЗ МассивНовыхСумм Цикл
					НоваяСтрока = ТаблицаНовыхСтрок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
					НоваяСтрока.Сумма = СтрокаМассиваМассивНовыхСумм;
					НоваяСтрока.Подразделение = МасивНачислений[НомерСтроки].Подразделение;
					НоваяСтрока.ИндексСтроки  = ТаблицаЗаработнойПлаты.Индекс(СтрокаМассива);
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаНовыхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНовыхСтрок.Свернуть("ИндексСтроки, ФизическоеЛицо, ВидОперации, Подразделение,
									|СпособОтраженияЗарплатыВБухучете, СтатьяРасходов, ОблагаетсяЕНВД,
									|ВидНачисленияОплатыТрудаДляНУ, РегистрацияВНалоговомОргане,
									|ВидОперацииРасходовЗаСчетФСС, ВедущийВидОперации,ОтражениеВУСН,
									|РасчетныйДокумент", "Сумма");
	ТаблицаНовыхСтрок.Сортировать("ИндексСтроки Убыв");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНовыхСтрок Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗаработнойПлаты.Вставить(СтрокаТаблицы.ИндексСтроки), СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаМассива ИЗ МасивСтарыхСтрок Цикл
		ТаблицаЗаработнойПлаты.Удалить(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуЗаработнойПлатыНедостающимиКолонками(ТаблицаЗаработнойПлаты)
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидНачисленияОплатыТрудаДляНУ") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидНачисленияОплатыТрудаДляНУ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНачисленийОплатыТрудаДляНУ"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("СпособОтраженияЗарплатыВБухУчете") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("СпособОтраженияЗарплатыВБухУчете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("Подразделение") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ОблагаетсяЕНВД") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидОперацииРасходовЗаСчетФСС") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВедущийВидОперации") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВедущийВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
		Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
			СтрокаТаблицы.ВедущийВидОперации = СтрокаТаблицы.ВидОперации;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ОтражениеВУСН") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ОтражениеВУСН", Новый ОписаниеТипов("ПеречислениеСсылка.ОтражениеВУСН"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("РасчетныйДокумент") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("РасчетныйДокумент", Метаданные.РегистрыНакопления.РасходыПриУСН.Измерения.РасчетныйДокумент.Тип);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("СтатьяРасходов") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Удержание

Процедура СформироватьДвиженияУдержания(Движения, Отказ, Организация, Знач ПериодРегистрации, ДанныеДляОтражения, НачисленнаяЗарплатаИВзносы = Неопределено)
		
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") И НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор       = Движения.Хозрасчетный.Отбор.Регистратор.Значение;
	ПериодРегистрации = ПолучитьПериодРегистрации(Регистратор, ПериодРегистрации);
	Параметры         = ПодготовитьПараметрыПоОтражениюУдержанийВУчете(ДанныеДляОтражения, Организация, ПериодРегистрации, Регистратор);
	Реквизиты         = Параметры.Реквизиты[0];
	
	СформироватьПроводкиПоОтражениюУдержанийВУчете(Параметры.ТаблицаУдержаний, Реквизиты, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	Если НачисленнаяЗарплатаИВзносы <> Неопределено Тогда
		ПараметрыДоходов = ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(НачисленнаяЗарплатаИВзносы, Организация, ПериодРегистрации, Регистратор);
		ТаблицаЗаработнойПлаты = ПараметрыДоходов.ТаблицаЗаработнойПлаты;
	Иначе
		ТаблицаЗаработнойПлаты = Неопределено;
	КонецЕсли;
		
	СформироватьДвиженияПоРегистрамИПУдержания(Параметры, Параметры.ТаблицаУдержаний, Реквизиты, ТаблицаЗаработнойПлаты, Движения, Отказ);
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		ЗарегистрироватьДанныеДляПечатиЧеков(ДанныеДляОтражения, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюУдержанийВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = ПериодРегистрации;
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "Контрагент,"
	+ "СтатьяРасходов,"
	+ "Сумма"
	;
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
		+ "ЯвляетсяОснованиемОформленияКассовогоЧека,"
		+ "ОписаниеУдержанияДляЧека"
		;
	КонецЕсли;
	Параметры.Вставить("ТаблицаУдержаний", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоОтражениюУдержанийВУчете(ТаблицаУдержаний, Реквизиты, Движения, Отказ)
	
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаУдержанийРаботников = ПодготовитьТаблицуУдержаний(ТаблицаУдержаний);
	
	СодержанияПроводок = Новый Соответствие;
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму,
								"Начислены проценты по займу");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму,
									"Удержаны проценты по займам");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов,
									"Удержано погашение займа");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты,
									"Удержано по исполнительному листу");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Профвзносы,
									"Удержаны профвзносы");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДСВ,
									"Удержаны добровольные взносы на накопительная часть трудовой пенсии");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания,
									"Прочие удержания из заработной платы");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ,
									"Удержаны добровольные взносы в негосударственный пенсионный фонд");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента,
									"Удержано вознаграждение платежного агента");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба,
									"Удержано возмещение ущерба");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками,
									"Удержание по прочим операциям с работниками");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм,
									"Удержание неизрасходованных подотчетных сумм");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок,
									"Возврат излишне выплаченных сумм");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск,
									"Удержание за неотработанные дни предоставленного авансом отпуска");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты,
									"Удержано вознаграждение платежного агента из доходов контрагента");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты,
									"Удержано по исполнительному листу из доходов контрагента");
	
	ВестиУчетПоРаботникам = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		
	Для Каждого СтрокаТаблицы Из ТаблицаУдержанийРаботников Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
			// не заполнены счет и аналитика
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
		
		Проводка.СчетКт = СтрокаТаблицы.Счет;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Проводка.СчетДт = СтрокаТаблицы.КорСчет;
		Если СтрокаТаблицы.КорСчет = СчетРасчетовСПерсоналомПоОплатеТруда Тогда
			Если ВестиУчетПоРаботникам Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.КорСубконто1);
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
		КонецЕсли;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьТаблицуУдержаний(ТаблицаУдержанийРаботника, УСН = Ложь, ИП = Ложь)
	
	Если ТаблицаУдержанийРаботника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаУдержаний = ТаблицаУдержанийРаботника.СкопироватьКолонки();
	ТаблицаУдержаний.Колонки.Добавить("Счет");
	ТаблицаУдержаний.Колонки.Добавить("Субконто1");
	ТаблицаУдержаний.Колонки.Добавить("Субконто2");
	ТаблицаУдержаний.Колонки.Добавить("Субконто3");
	ТаблицаУдержаний.Колонки.Добавить("КорСчет");
	ТаблицаУдержаний.Колонки.Добавить("КорСубконто1");
	ТаблицаУдержаний.Колонки.Добавить("КорСубконто2");
	ТаблицаУдержаний.Колонки.Добавить("КорСубконто3");
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	РасчетыСПодотчетнымиЛицами                  = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;                  // 71.01
	РасчетыПоПредоставленнымЗаймам              = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;              // 73.01
	РасчетыПоВозмещениюМатериальногоУщерба      = ПланыСчетов.Хозрасчетный.РасчетыПоВозмещениюМатериальногоУщерба;      // 73.02
	РасчетыПоПрочимОперациям                    = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям;                    // 73.03
	ПрочиеРасчетыСФизическимиЛицами             = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;             // 76.10
	РасчетыПоИсполнительнымДокументамРаботников = ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников; // 76.41
	РасчетыПоПрочимУдержаниямРаботников         = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников;         // 76.49
	ПФР_ДОБР_сотр                               = ПланыСчетов.Хозрасчетный.ПФР_ДОБР_сотр;                               // 69.05.2
	ПрочиеДоходы                                = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;                                // 91.01
	
	ПустоеСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	ВидПлатежаВГосБюджет                 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	СтатьиПрочихДоходов = КлассификаторыДоходовРасходов.НовыйКешГрупповойОперации(Справочники.ПрочиеДоходыИРасходы);
	
	ЗаполнитьСтатьюРасходовПоВидуОперации(ТаблицаУдержанийРаботника);
	
	// Соответствие статей расходов и счетов учета
	СоответствиеСтатейРасходов = ПолучитьСоответствиеСтатейРасходов();

	Для Каждого СтрокаТаблицы ИЗ ТаблицаУдержанийРаботника Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет      = РасчетыПоПредоставленнымЗаймам;
			НоваяСтрока.Субконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоИсполнительнымДокументамРаботников;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.Контрагент;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты Тогда
					ТекущийСчетУчета = ПрочиеРасчетыСФизическимиЛицами;
				Иначе
					ТекущийСчетУчета = СчетРасчетовСПерсоналомПоОплатеТруда;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДСВ Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = ПФР_ДОБР_сотр;
			НоваяСтрока.Субконто1    = ВидПлатежаВГосБюджет;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Профвзносы Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоПрочимУдержаниямРаботников;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.Контрагент;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				НоваяСтрока.Счет      = РасчетыПоПрочимУдержаниямРаботников;
				НоваяСтрока.Субконто1 = СтрокаТаблицы.Контрагент;
			Иначе
				НоваяСтрока.Счет      = РасчетыПоПрочимОперациям;
				НоваяСтрока.Субконто1 = СтрокаТаблицы.ФизическоеЛицо;
			КонецЕсли;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоПрочимУдержаниямРаботников;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.Контрагент;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты Тогда
					ТекущийСчетУчета = ПрочиеРасчетыСФизическимиЛицами;
				Иначе
					ТекущийСчетУчета = СчетРасчетовСПерсоналомПоОплатеТруда;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоВозмещениюМатериальногоУщерба;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоПрочимОперациям;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыСПодотчетнымиЛицами;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = ПрочиеДоходы;
			НоваяСтрока.Субконто1    = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
				"ИзлишнеВыплаченнаяОплатаТруда",
				СтатьиПрочихДоходов);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = ПрочиеДоходы;
			НоваяСтрока.Субконто1    = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
				"ИзлишнеВыплаченнаяОплатаТруда",
				СтатьиПрочихДоходов);
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено Тогда
				ТекущийСчетУчета  = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			НоваяСтрока.КорСчет      = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму Тогда
			
			Если УСН ИЛИ ИП Тогда
				// это не удержание, а получение дохода работодателем
				// для указанных ситуаций не обслуживается
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет      = ПрочиеДоходы;
			НоваяСтрока.Субконто1 = КлассификаторыДоходовРасходов.ПредопределенныйЭлементГрупповойОперации(
				"ПроцентыПоЗаймамСотрудникам",
				СтатьиПрочихДоходов);
			
			НоваяСтрока.Субконто2 = ПустоеСубконто;
			НоваяСтрока.Субконто3 = ПустоеСубконто;
			
			ТекущийСчетУчета = СоответствиеСтатейРасходов.Получить(СтрокаТаблицы.СтатьяРасходов);
			Если ТекущийСчетУчета = Неопределено
				ИЛИ ТекущийСчетУчета = РасчетыПоПрочимОперациям Тогда
				ТекущийСчетУчета  = РасчетыПоПредоставленнымЗаймам;
			КонецЕсли;
			
			НоваяСтрока.КорСчет         = ТекущийСчетУчета;
			НоваяСтрока.КорСубконто1    = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.КорСубконто2    = ПустоеСубконто;
			НоваяСтрока.КорСубконто3    = ПустоеСубконто;
			
		КонецЕсли;
		
	КонецЦикла;
		
	СтрокаСвертки = "ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	
	Если ИП Тогда
		СтрокаСвертки = СтрокаСвертки + ", ВидНачисленияУдержания";
	КонецЕсли;
		
	ТаблицаУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	
	Возврат ТаблицаУдержаний;
	
КонецФункции

Процедура ЗарегистрироватьДанныеДляПечатиЧеков(ТаблицаУдержаний, Реквизиты, Движения, Отказ)
	
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаУдержанийРаботников = ТаблицаУдержаний.Скопировать(Новый Структура("ЯвляетсяОснованиемОформленияКассовогоЧека", Истина));
	
	Если ТаблицаУдержанийРаботников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУдержанийРаботников.Свернуть("ФизическоеЛицо, Подразделение, Контрагент, ОписаниеУдержанияДляЧека", "Сумма");
		
	Для Каждого СтрокаТаблицы Из ТаблицаУдержанийРаботников Цикл
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьУдержания = Движения.ДанныеПоУдержаниямДляПечатиЧеков.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьУдержания, СтрокаТаблицы);
		ЗаписьУдержания.Период              = Реквизиты.Период;
		ЗаписьУдержания.Организация         = Реквизиты.Организация;
		ЗаписьУдержания.ИдентификаторЗаписи = ИдентификаторЧека(Реквизиты.Ссылка, СтрокаТаблицы);
		
	КонецЦикла;
	
	Движения.ДанныеПоУдержаниямДляПечатиЧеков.Записывать = Истина;
	
КонецПроцедуры

#Область УдержанияИП

Процедура ОпределитьВидУдержанийИП(ТаблицаЗаработнойПлаты)
	
	СоответствиеВидовНачисленийУдержаний = Новый Соответствие;
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания,                           Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДСВ,                                       Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ,                    Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента,            Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты,         Перечисления.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов,                           Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму,                           Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба,                          Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками,    Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм, Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
		
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидНачисленияУдержания") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидНачисленияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
		Для каждого Начисление Из ТаблицаЗаработнойПлаты Цикл
			Начисление.ВидНачисленияУдержания = СоответствиеВидовНачисленийУдержаний.Получить(Начисление.ВидОперации);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегистрамИПУдержания(Параметры, ТаблицаУдержаний, Реквизиты, ТаблицаЗаработнойПлаты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаУдержаний) Тогда
		Возврат;
	КонецЕсли;		
	
	Если Движения.Найти("ИПРасходыНаОплатуТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьВидУдержанийИП(ТаблицаУдержаний);
	
	ТаблицаУдержаний = ПодготовитьТаблицуУдержаний(ТаблицаУдержаний, , Истина);
	
	Если ТаблицаЗаработнойПлаты <> Неопределено Тогда
		ДополнитьТаблицуУдержанийИсточникамиДоходов(ТаблицаУдержаний, ТаблицаЗаработнойПлаты, Реквизиты);
	КонецЕсли;
		
	Если Параметры.Реквизиты.Колонки.Найти("Ссылка") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Ссылка",	Документы.ТипВсеСсылки());
		Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Регистратор, "Ссылка");
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Удержания") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Удержания");
		Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "Удержания");
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаНачисленияУдержания", ТаблицаУдержаний);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРасходовНаОплатуТруда_Удержания(Параметры, Движения, Отказ);
	
КонецПроцедуры

Процедура ДополнитьТаблицуУдержанийИсточникамиДоходов(ТаблицаУдержаний, ТаблицаЗаработнойПлаты, Реквизиты)
	
	ОчиститьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты);
	ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты);
	ОпределитьВидНачисленийУдержанийИП(ТаблицаЗаработнойПлаты, Реквизиты);
	ТаблицаЗаработнойПлаты = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, , Истина, Реквизиты);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		СтруктураСчетАналитика = Новый Структура("Счет, Субконто1, Субконто2, Субконто3",
			СтрокаТаблицы.КорСчет, СтрокаТаблицы.КорСубконто1, СтрокаТаблицы.КорСубконто2, СтрокаТаблицы.КорСубконто3);
		
		СтруктураКорСчетАналитика = Новый Структура("КорСчет, КорСубконто1, КорСубконто2, КорСубконто3",
			СтрокаТаблицы.Счет, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3);
			
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСчетАналитика);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураКорСчетАналитика);
		
		НоваяСтрока = ТаблицаУдержаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Резервы

Процедура СформироватьДвиженияНачислениеРезервов(Движения, Отказ, Организация, Знач ПериодРегистрации, ДанныеПоРезервам)
	
	Регистратор       = Движения.Хозрасчетный.Отбор.Регистратор.Значение;
	ПериодРегистрации = ПолучитьПериодРегистрации(Регистратор, ПериодРегистрации);
	Параметры         = ПодготовитьПараметрыПоОтражениюРезервовВУчете(ДанныеПоРезервам, Организация, ПериодРегистрации, Регистратор);
	Реквизиты         = Параметры.Реквизиты[0];
	ТаблицаРезервов   = Параметры.ТаблицаРезервов;
	
	РазвернутьТаблицуРезервов(ТаблицаРезервов);
	
	СкорректироватьТаблицуРезервов(ТаблицаРезервов, Реквизиты);
	
	ТаблицаРезервов = ДополнитьТаблицуРезервовАналитикойБухУчета(ТаблицаРезервов);
	
	ПроверитьЗаполненностьСпособаОтраженияВУчетеРезервов(ТаблицаРезервов, Реквизиты);
	
	СформироватьПроводкиПоОтражениюРезервовВУчете(ТаблицаРезервов, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюРезервовВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = КонецМесяца(ПериодРегистрации);
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"
	+ "СпособОтраженияЗарплатыВБухучете,"
	+ "ОблагаетсяЕНВД,"
	+ "СуммаРезерва,"
	+ "СуммаРезерваСтраховыхВзносов,"
	+ "СуммаРезерваФССНесчастныеСлучаи,"
	+ "СуммаРезерваНУ,"
	+ "СуммаРезерваСтраховыхВзносовНУ,"
	+ "СуммаРезерваФССНесчастныеСлучаиНУ"
	;	
	Параметры.Вставить("ТаблицаРезервов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура РазвернутьТаблицуРезервов(ТаблицаРезервов)
	
	///////////////////////////////////////
	// Описание типов для дополнения таблиц
	ТипОперации = Новый КвалификаторыЧисла(1,0);
	ТипЧисла    = Новый КвалификаторыЧисла(15,2);
	Массив      = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисла    = Новый ОписаниеТипов(Массив, , ,ТипЧисла);
	ОписаниеТиповОперации = Новый ОписаниеТипов(Массив, , ,ТипОперации);
	
	// Описание типов для дополнения таблиц
	///////////////////////////////////////
	
	Если ТаблицаРезервов.Колонки.Найти("ВидОперации") = Неопределено Тогда
		ТаблицаРезервов.Колонки.Добавить("ВидОперации", ОписаниеТиповЧисла);
	КонецЕсли;
	
	Если ТаблицаРезервов.Колонки.Найти("СуммаНУ") = Неопределено Тогда
		ТаблицаРезервов.Колонки.Добавить("СуммаНУ", ОписаниеТиповЧисла);
	КонецЕсли;
	
	Если ТаблицаРезервов.Колонки.Найти("Сумма") = Неопределено Тогда
		ТаблицаРезервов.Колонки.Добавить("Сумма", ОписаниеТиповЧисла);
	КонецЕсли;

	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("СуммаРезерва");                        // Вид операции - 1
	МассивКолонок.Добавить("СуммаРезерваСтраховыхВзносов");        // Вид операции - 2
	МассивКолонок.Добавить("СуммаРезерваФССНесчастныеСлучаи");     // Вид операции - 3
	
	КоличествоИндексовМассива   = МассивКолонок.Количество() - 1;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезервов Цикл
		
		Если СтрокаТаблицы.ВидОперации = 0 Тогда
			
			Для ИндексМассива = 0 По КоличествоИндексовМассива Цикл
				Если СтрокаТаблицы[МассивКолонок[ИндексМассива]] <> 0 Тогда
					НоваяСтрока = ТаблицаРезервов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Сумма   = СтрокаТаблицы[МассивКолонок[ИндексМассива]];
					НоваяСтрока.ВидОперации = ИндексМассива + 1;
				КонецЕсли;
				Если СтрокаТаблицы[МассивКолонок[ИндексМассива]+"НУ"] <> 0 Тогда
					НоваяСтрока = ТаблицаРезервов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.СуммаНУ = СтрокаТаблицы[МассивКолонок[ИндексМассива]+"НУ"];
					НоваяСтрока.ВидОперации = ИндексМассива + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ТаблицаРезервов.Свернуть("ВидОперации,Подразделение,СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД",
							"Сумма, СуммаНУ");
	
КонецПроцедуры

Процедура СкорректироватьТаблицуРезервов(ТаблицаРезервов, Реквизиты)
	
	НастройкиРезервовОтпусков   = НастройкиРезервовОтпусков(Реквизиты.Организация, Реквизиты.Период);
	ФормироватьРезервОтпусковНУ = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковНУ;
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		Если НЕ ФормироватьРезервОтпусковНУ Тогда
			СтрокаТаблицы.СуммаНУ = 0;
		КонецЕсли;
		Если СтрокаТаблицы.Сумма = 0
			И СтрокаТаблицы.СуммаНУ = 0 Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТаблицаРезервов.Удалить(СтрокаМассива);
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьТаблицуРезервовАналитикойБухУчета(ТаблицаРезервов)
	
	МассивСчетовУчетаНУ = Новый Массив;
	МассивСчетовУчетаНУ.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
	
	СчетУчетаНераспределеннаяПрибыль     = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
	СчетУчетаПрочиеДоходы                = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	РасходыПоУплатеСтраховыхВзносов      = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносов");
	СтатьяДоходовРезервыПоОтпускам       = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РезервыПоОтпускам");
	Если ТаблицаРезервов.Найти(Истина, "ОблагаетсяЕНВД") <> Неопределено Тогда
		СтатьяДоходовРезервыПоОтпускамЕНВД = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("РезервыПоОтпускамЕНВД");
	Иначе
		СтатьяДоходовРезервыПоОтпускамЕНВД = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезервов",                      ТаблицаРезервов);
	Запрос.УстановитьПараметр("СчетУчетаПрочиеДоходы",                СчетУчетаПрочиеДоходы);
	Запрос.УстановитьПараметр("СтатьяДоходовРезервыПоОтпускам",       СтатьяДоходовРезервыПоОтпускам);
	Запрос.УстановитьПараметр("СтатьяДоходовРезервыПоОтпускамЕНВД",   СтатьяДоходовРезервыПоОтпускамЕНВД);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРезервов.Сумма КАК Сумма,
	|	ТаблицаРезервов.СуммаНУ КАК СуммаНУ,
	|	ТаблицаРезервов.ВидОперации КАК ВидОперации,
	|	ТаблицаРезервов.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ТаблицаРезервов.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ТаблицаРезервов.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_Резервы
	|ИЗ
	|	&ТаблицаРезервов КАК ТаблицаРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Резервы.Сумма >= 0
	|				ТОГДА ВТ_Резервы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Резервы.СуммаНУ >= 0
	|				ТОГДА ВТ_Резервы.СуммаНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНУ,
	|	ВТ_Резервы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_Резервы.Подразделение КАК Подразделение,
	|	ВТ_Резервы.ВидОперации КАК ВидОперации,
	|	ВТ_Резервы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК Счет,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3
	|ИЗ
	|	ВТ_Резервы КАК ВТ_Резервы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО ВТ_Резервы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|			И ВТ_Резервы.ОблагаетсяЕНВД = ПорядокОтраженияЗарплатыВБухУчете.ЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет,
	|	ВТ_Резервы.Подразделение,
	|	ВТ_Резервы.ВидОперации,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3,
	|	ВТ_Резервы.ОблагаетсяЕНВД,
	|	ВТ_Резервы.СпособОтраженияЗарплатыВБухУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Резервы.Сумма < 0
	|				ТОГДА ВТ_Резервы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_Резервы.СуммаНУ < 0
	|				ТОГДА ВТ_Резервы.СуммаНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	ВТ_Резервы.ОблагаетсяЕНВД,
	|	ВТ_Резервы.Подразделение,
	|	ВТ_Резервы.ВидОперации,
	|	ВТ_Резервы.СпособОтраженияЗарплатыВБухУчете,
	|	&СчетУчетаПрочиеДоходы,
	|	ВЫБОР
	|		КОГДА ВТ_Резервы.ОблагаетсяЕНВД
	|			ТОГДА &СтатьяДоходовРезервыПоОтпускамЕНВД
	|		ИНАЧЕ &СтатьяДоходовРезервыПоОтпускам
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|ИЗ
	|	ВТ_Резервы КАК ВТ_Резервы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО ВТ_Резервы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|			И ВТ_Резервы.ОблагаетсяЕНВД = ПорядокОтраженияЗарплатыВБухУчете.ЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Резервы.Подразделение,
	|	ВТ_Резервы.ВидОперации,
	|	ВТ_Резервы.ОблагаетсяЕНВД,
	|	ВТ_Резервы.СпособОтраженияЗарплатыВБухУчете";
	
	ТаблицаРезервовСчетаИАналитика =  Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоЗарплате.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоЗарплате КАК СтатьиЗатратПоЗарплате
	|ГДЕ
	|	СтатьиЗатратПоЗарплате.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.ФСС_НС)";
	
	СтатьиЗатрат_ФСС_НСиПЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоЗарплате.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоЗарплате.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоЗарплате.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоЗарплате КАК СтатьиЗатратПоЗарплате
	|ГДЕ
	|	СтатьиЗатратПоЗарплате.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.СтраховыеВзносы)";
	
	СтатьиЗатрат_СтраховыеВзносы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезервовСчетаИАналитика Цикл
		
		Если СтрокаТаблицы.ВидОперации = 3 Тогда
			
			// Взносы в ФСС от НС и ПЗ
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто,     , СтатьиЗатрат_ФСС_НСиПЗ);

			КонецЦикла;
						
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = 2 Тогда
			
			// Взносы в ПФР, ФОМС и ФСС
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто,     , СтатьиЗатрат_СтраховыеВзносы);

			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезервовСчетаИАналитика;
	
КонецФункции

Процедура СформироватьПроводкиПоОтражениюРезервовВУчете(ТаблицаРезервов, Реквизиты, Движения, Отказ)
	
	Если ТаблицаРезервов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СодержанияПроводок = Новый Соответствие;
	Если КонецГода(Реквизиты.Период) = КонецМесяца(Реквизиты.Период) Тогда
		СодержанияПроводок.Вставить(1, НСтр("ru = 'Инвентаризация обязательств по предстоящим отпускам'"));
		СодержанияПроводок.Вставить(2, НСтр("ru = 'Инвентаризация страховых взносов с обязательств по предстоящим отпускам'"));
		СодержанияПроводок.Вставить(3, НСтр("ru = 'Инвентаризация взносов в ФСС от НС и ПЗ с обязательств по предстоящим отпускам'"));
	Иначе
		СодержанияПроводок.Вставить(1, НСтр("ru = 'Начисление обязательств по предстоящим отпускам'"));
		СодержанияПроводок.Вставить(2, НСтр("ru = 'Начисление страховых взносов с обязательств по предстоящим отпускам'"));
		СодержанияПроводок.Вставить(3, НСтр("ru = 'Начисление взносов в ФСС от НС и ПЗ с обязательств по предстоящим отпускам'"));
	КонецЕсли;
	
	СчетРезерваОтпусков        = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениям;
	СчетВзносовРезерваОтпусков = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПостраховымВзносам;
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Реквизиты.Организация));
	РезервОтпусковЭлемент = НастройкиУчетаЗарплаты.РезервОтпусков;
	
	ТаблицаРезервов.Сортировать("ВидОперации, Счет, Подразделение, Субконто1, Субконто2, Субконто3");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			// не заполнены счет и аналитика
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 
			И СтрокаТаблицы.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
		
		Если СтрокаТаблицы.Сумма > 0 
			ИЛИ СтрокаТаблицы.СуммаНУ > 0 Тогда
			
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			
			Проводка.СчетДт = СтрокаТаблицы.Счет;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Если СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;
				Иначе
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаВРДт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
			КонецЕсли;
			
			Проводка.СчетКт = ?(СтрокаТаблицы.ВидОперации = 1, СчетРезерваОтпусков, СчетВзносовРезерваОтпусков);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, РезервОтпусковЭлемент);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Если СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.Сумма;
				Иначе
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаВРКт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Проводка.Сумма       = -СтрокаТаблицы.Сумма;
			
			Проводка.СчетКт = СтрокаТаблицы.Счет;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Если СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					Проводка.СуммаНУКт = -СтрокаТаблицы.Сумма;
				Иначе
					Проводка.СуммаНУКт = -СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаВРКт = -СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
			КонецЕсли;
			
			Проводка.СчетДт = ?(СтрокаТаблицы.ВидОперации = 1, СчетРезерваОтпусков, СчетВзносовРезерваОтпусков);
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, РезервОтпусковЭлемент);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Если СтрокаТаблицы.ОблагаетсяЕНВД Тогда
					Проводка.СуммаНУДт = -СтрокаТаблицы.Сумма;
				Иначе
					Проводка.СуммаНУДт = -СтрокаТаблицы.СуммаНУ;
					Проводка.СуммаВРДт = -СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНУ;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьСпособаОтраженияВУчетеРезервов(ТаблицаРезервов, Реквизиты)
	
	ТаблицаПроверки = ТаблицаРезервов.Скопировать(,"СпособОтраженияЗарплатыВБухУчете, Счет");	
	ТаблицаПроверки.Свернуть("СпособОтраженияЗарплатыВБухУчете, Счет",);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПроверки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
				ТекстСообщения = НСтр("ru = '%1. Не указаны счет и аналитика для способа отражения ""%2""!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Реквизиты.Регистратор,
					СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Выплата

#Область ВыплатаЗарплаты

// Предназначена для генерации движений, связанных с отражением в регл. учете перечисления/выплаты зарплаты
//
// Параметры:
//	ТаблицаПеречислениеЗарплаты - таблица значений с колонками
//      Подразделение
//		ФизическоеЛицо
//      СуммаКВыплате
//      КомпенсацияЗаЗадержкуЗарплаты
//      СтатьяДвиженияДенежныхСредств
//      БанковскийСчет
//      СчетУчета
//      СчетУчетаКомпенсации
//      СубконтоУчетаКомпенсации1
//      СубконтоУчетаКомпенсации2
//      СубконтоУчетаКомпенсации3
//      ПодразделениеУчетаКомпенсации
//      Ведомость
//	ТаблицаРеквизиты  - таблица значений содержит реквизиты документа
//	Движения
//	Отказ
//
Процедура СформироватьДвиженияПеречислениеВыплатаЗарплаты(ДокументОбъект, ТаблицаПеречислениеЗарплаты, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаПеречислениеЗарплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыплатыЗарплаты(ТаблицаПеречислениеЗарплаты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СформироватьПроводкиПоВыплатеЗарплаты(Параметры.ВыплатаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	
	// Обращение к БЗКБ
	Если НЕ (УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно) Тогда
		МассивВедомостей    = ТаблицаПеречислениеЗарплаты.ВыгрузитьКолонку("Ведомость");
		МассивФизическихЛиц = ТаблицаПеречислениеЗарплаты.ВыгрузитьКолонку("ФизическоеЛицо");
		ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей(ДокументОбъект, Реквизиты.Организация, МассивВедомостей, МассивФизическихЛиц,, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВыплатыЗарплаты(ТаблицаПеречислениеЗарплаты, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Содержание,"                // <Строка>
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатаЗаработнойПлаты
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "ФизическоеЛицо,"                // <СправочникСсылка.ФизическиеЛица> - физическое лико, которому выплачивается зарплата
	+ "СуммаКВыплате,"                 // <Число,15,2> - сумма выплаты в валюте документа
	+ "КомпенсацияЗаЗадержкуЗарплаты," // <Число,15,2> - сумма компенсации в валюте документа
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета>
	+ "СчетУчета,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "СчетУчетаКомпенсации,"          // <ПланСчетовСсылка.Хозрасчетный> - счет учета компенсации
	+ "СубконтоУчетаКомпенсации1,"     //<Характеристика.ВидыСубконтоХозрасчетные> - субконто 1 по счету учета комппенсации
	+ "СубконтоУчетаКомпенсации2,"     //<Характеристика.ВидыСубконтоХозрасчетные> - субконто 2 по счету учета комппенсации
	+ "СубконтоУчетаКомпенсации3,"     //<Характеристика.ВидыСубконтоХозрасчетные> - субконто 3 по счету учета комппенсации
	+ "ПодразделениеУчетаКомпенсации," // <Ссылка на справочник подразделений>  - подразделение, задолженность по депонентам которого погашается	
	+ "Ведомость";                     // <ДокументСсылка.ВедомостьВКассу...ДокументСсылка.ВедомостьВБанк> - ведомости, по которым производится выплата
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ ",ИспользуетсяЭлектронныйОбмен"  // Булево - информация о том, что используется электронный обмен с банком
	КонецЕсли;
		
	Параметры.Вставить("ВыплатаЗаработнойПлаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеЗарплаты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоВыплатеЗарплаты(ТаблицаВыплатыЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	ТаблицаВыплаты = ТаблицаВыплатыЗаработнойПлаты.Скопировать();
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СчетПрочихРасчетовСФизическимиЛицами = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;
	
	ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасходовРасчетыСКонтрагентами = ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	
	ВестиУчетПоРаботникам = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
	
	Содержание = СокрЛП(Реквизиты.Содержание);
	ЕстьТекстЗаработнаяПлата = СтрНайти(Содержание, "Заработн") > 0 И СтрНайти(Содержание, "плат") > 0;
	
	Если НЕ ВестиУчетПоРаботникам Тогда
		Если НЕ ЕстьТекстЗаработнаяПлата Тогда
			Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
				Ведомости = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
				ТаблицаВыплаты.ВыгрузитьКолонку("Ведомость"));
				Если Ведомости.ВГраница() > 0 Тогда
					НачалоСодержания = НСтр("ru = 'Выплата заработной платы по ведомостям:'");
				ИначеЕсли Ведомости.ВГраница() = 0 Тогда
					НачалоСодержания = НСтр("ru = 'Выплата заработной платы по ведомости'");
				Иначе
					Содержание = НСтр("ru = 'Выплата заработной платы без указания ведомости'");
				КонецЕсли;
				Для инд = 0 По Ведомости.ВГраница() Цикл
					Если ЗначениеЗаполнено(Ведомости[инд]) Тогда
						ДанныеВедомости = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ведомости[инд], "Дата, Номер");
						НомерВедомости  = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеВедомости.Номер, Истина, Истина);
						ДатаВедомости   = Формат(ДанныеВедомости.Дата,"ДЛФ=D");
					Иначе
						НомерВедомости  = НСтр("ru = 'б/н'");
						ДатаВедомости   = НСтр("ru = 'б/д'");
					КонецЕсли;
					Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 № %2 от %3%4'"),
					?(инд = 0, НачалоСодержания, Содержание),
					НомерВедомости,
					ДатаВедомости,
					?(инд = Ведомости.ВГраница(), "", ",")); 
				КонецЦикла;
			Иначе
				Содержание = НСтр("ru = 'Выплата заработной платы без указания ведомости'");
			КонецЕсли;
			ЕстьТекстЗаработнаяПлата = Истина;
		КонецЕсли;
		
		ТаблицаВыплаты.Свернуть("Подразделение, СтатьяДвиженияДенежныхСредств, СчетУчета, БанковскийСчет, СчетУчетаКомпенсации,
			|СубконтоУчетаКомпенсации1, СубконтоУчетаКомпенсации2, СубконтоУчетаКомпенсации3, ПодразделениеУчетаКомпенсации", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	Иначе
		ШаблонСодержания = НСтр("ru = 'Выплата заработной платы по ведомости № %1 от %2'");
		ТаблицаВыплаты.Свернуть("Ведомость, ФизическоеЛицо, Подразделение, СтатьяДвиженияДенежныхСредств, СчетУчета, БанковскийСчет, СчетУчетаКомпенсации,
			|СубконтоУчетаКомпенсации1, СубконтоУчетаКомпенсации2, СубконтоУчетаКомпенсации3, ПодразделениеУчетаКомпенсации", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыплаты Цикл
		
		Если СтрокаТаблицы.СуммаКВыплате + СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		// Выплата заработной платы
		
		Если СтрокаТаблицы.СуммаКВыплате <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			
			Если ЕстьТекстЗаработнаяПлата Тогда
				Проводка.Содержание = Содержание;
			Иначе
				Если ВестиУчетПоРаботникам Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.Ведомость) Тогда
						ДанныеВедомости = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Ведомость, "Дата, Номер");
						НомерВедомости  = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеВедомости.Номер, Истина, Истина);
						ДатаВедомости   = Формат(ДанныеВедомости.Дата,"ДЛФ=D");
						Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСодержания,
							НомерВедомости,
							ДатаВедомости); 
					Иначе
						Проводка.Содержание = НСтр("ru = 'Выплата заработной платы без указания ведомости'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаТаблицы.СуммаКВыплате;
			
			Проводка.СчетДт = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.ФизическоеЛицо);
			КонецЕсли;
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Выплата компенсации за задержку заработной платы
		
		Если СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаКомпенсации) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан счет учета расчетов по компенсации за задержку заработной платы!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,,, Отказ);
				Прервать;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = СтрШаблон(НСтр("ru = 'Выплата компенсации за задержку заработной платы. %1'"), Содержание);
			
			Проводка.Сумма = СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаКомпенсации;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоУчетаКомпенсации1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоУчетаКомпенсации2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоУчетаКомпенсации3);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеУчетаКомпенсации;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
				КонецЕсли;
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Предназначена для генерации движений, связанных с отражением в регл. учете оплат по договорам подряда
//
// Параметры:
//	ТаблицаПеречислениеЗарплаты - таблица значений с колонками
//      Подразделение
//		ФизическоеЛицо
//      СуммаКВыплате
//      СтатьяДвиженияДенежныхСредств
//      БанковскийСчет
//      СчетУчета
//	ТаблицаРеквизиты  - таблица значений содержит реквизиты документа
//	Движения
//	Отказ
//
Процедура СформироватьДвиженияОплатаПоДоговорамПодряда(ДокументОбъект, ТаблицаОплатаПоДоговорамПодряда, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаОплатаПоДоговорамПодряда) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОплатаПоДоговорамПодряда(ТаблицаОплатаПоДоговорамПодряда, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаОплатаПоДоговорамПодряда = Параметры.ОплатаПоДоговорамПодряда;
	
	СформироватьПроводкиПоОплатеПоДоговорамПодряда(ТаблицаОплатаПоДоговорамПодряда, Реквизиты, Движения, Отказ);
	
	// Обращение к БЗКБ
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")
		И ЗначениеЗаполнено(ТаблицаОплатаПоДоговорамПодряда[0].Ведомость) Тогда
		МассивВедомостей    = ТаблицаОплатаПоДоговорамПодряда.ВыгрузитьКолонку("Ведомость");
		МассивФизическихЛиц = ТаблицаОплатаПоДоговорамПодряда.ВыгрузитьКолонку("ФизическоеЛицо");
		ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей(ДокументОбъект, Реквизиты.Организация, МассивВедомостей, МассивФизическихЛиц,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОплатаПоДоговорамПодряда(ТаблицаОплатаПоДоговорамПодряда, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Содержание,"                // <Строка>
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатаЗаработнойПлаты
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "ФизическоеЛицо,"                // <СправочникСсылка.ФизическиеЛица> - физическое лицо, которому выплачивается зарплата
	+ "СуммаКВыплате,"                 // <Число,15,2> - сумма выплаты в валюте документа
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета>
	+ "СчетУчета,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "Ведомость";                     // <ДокументСсылка.ВедомостьВКассу...ДокументСсылка.ВедомостьВБанк> - ведомости, по которым производится выплата
	
	Параметры.Вставить("ОплатаПоДоговорамПодряда", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатаПоДоговорамПодряда, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоОплатеПоДоговорамПодряда(ТаблицаОплатаПоДоговорамПодряда, Реквизиты, Движения, Отказ)
	
	ТаблицаВыплаты = ТаблицаОплатаПоДоговорамПодряда.Скопировать();
	ТаблицаВыплаты.Свернуть("ФизическоеЛицо, Подразделение, СтатьяДвиженияДенежныхСредств, СчетУчета, БанковскийСчет", "СуммаКВыплате");
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	СчетПрочихРасчетовСФизическимиЛицами = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;
	
	Содержание = СокрЛП(Реквизиты.Содержание);
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыплаты Цикл
		
		Если СтрокаТаблицы.СуммаКВыплате = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Оплата по договорам подряда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание = Содержание;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаКВыплате;
		
		Проводка.СчетДт = СчетПрочихРасчетовСФизическимиЛицами;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.ФизическоеЛицо);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаКВыплате;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаКВыплате;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВыплатаДепонентов

// Предназначена для генерации движений, связанных с отражением в регл. учете выплаты депонентов
//
// Параметры:
//	ТаблицаПеречислениеЗарплаты - таблица значений с колонками
//      Подразделение
//		ФизическоеЛицо
//      СуммаКВыплате
//      СтатьяДвиженияДенежныхСредств
//      СчетУчета
//      Ведомость
//	ТаблицаРеквизиты  - таблица значений содержит реквизиты документа
//	Движения
//	Отказ
//
Процедура СформироватьДвиженияВыплатаДепонентов(ТаблицаВыплатаДепонентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыплатаДепонентов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыплатыДепонентов(ТаблицаВыплатаДепонентов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	СуммаДокумента = Реквизиты.СуммаДокумента;
    	
	ВыплатаДепонентов = Параметры.ВыплатаДепонентов;
	СуммаПоПустойВедомости = Макс(0, СуммаДокумента - ВыплатаДепонентов.Итог("СуммаКВыплате"));
	
	Если СуммаПоПустойВедомости <> 0 Тогда
		НоваяСтрока = ВыплатаДепонентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыплатаДепонентов[0]);
		НоваяСтрока.СуммаКВыплате = СуммаПоПустойВедомости;
		НоваяСтрока.Ведомость = Неопределено;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив();
	Для Каждого СтрокаТаблицы ИЗ ВыплатаДепонентов Цикл
		Если СтрокаТаблицы.СуммаКВыплате = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиКУдалению.Количество() > 0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ВыплатаДепонентов.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
		
	СформироватьПроводкиПоВыплатеДепонентов(ВыплатаДепонентов, Реквизиты, Движения, Отказ);
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	// Обращение к БЗКБ
	Если НЕ (УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно) Тогда
		Параметры.ВыплатаДепонентов.Колонки.СуммаКВыплате.Имя = "Сумма";
		УчетДепонированнойЗарплаты.СписатьДепонированнуюЗарплату(Движения, Отказ, Реквизиты.Организация, Реквизиты.Период, Параметры.ВыплатаДепонентов, , Строка(Реквизиты.Регистратор));
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыплатыДепонентов(ТаблицаВыплатаДепонентов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "СуммаДокумента,"            // <Число,15,2> - сумма выплаты в валюте документа
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатаДепонентов
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "ФизическоеЛицо,"                // <СправочникСсылка.ФизическиеЛица> - физическое лико, которому выплачивается зарплата
	+ "СуммаКВыплате,"                 // <Число,15,2> - сумма выплаты в валюте документа	
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета>
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "СчетУчета,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "Ведомость";                     // <ДокументСсылка.ВедомостьВКассу> - ведомость, по которым производится выплата
	
	Параметры.Вставить("ВыплатаДепонентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплатаДепонентов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоВыплатеДепонентов(ТаблицаВыплатаДепонентов, Реквизиты, Движения, Отказ)
	
	ТаблицаВыплаты = ТаблицаВыплатаДепонентов.Скопировать();

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	СчетРасчетовПоДепонированнымСуммам = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	
	ВестиУчетПоРаботникам = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеПоРаботникам");
	
	СтрокаСвертки = "Подразделение, СтатьяДвиженияДенежныхСредств, СчетУчета, БанковскийСчет";
	Если ВестиУчетПоРаботникам Тогда
		СтрокаСвертки = "ФизическоеЛицо," + СтрокаСвертки;
	КонецЕсли;
	ТаблицаВыплаты.Свернуть(СтрокаСвертки, "СуммаКВыплате");
		
	Для Каждого СтрокаТаблицы Из ТаблицаВыплаты Цикл
		
		Если СтрокаТаблицы.СуммаКВыплате = 0 Тогда
			
			Продолжить;
		КонецЕсли;
				
		Если СтрокаТаблицы.СуммаКВыплате <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = НСтр("ru = 'Выплата депонентов'");
			
			Проводка.Сумма = СтрокаТаблицы.СуммаКВыплате;
			
			Проводка.СчетДт = СчетРасчетовПоДепонированнымСуммам;
			
			Если ВестиУчетПоРаботникам Тогда			
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.ФизическоеЛицо);
			КонецЕсли;
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияДокументовВыплаты

Процедура ОбработкаДокументовВыплаты(ОбъектОснование, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОснованиеСсылка = ОбъектОснование.Ссылка;
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплаты") Тогда
		Проведение       = НЕ ОбъектОснование.ПометкаУдаления;
	Иначе
		Проведение       = ОбъектОснование.Проведен;
	КонецЕсли;
	ОтменаПроведения = НЕ Проведение И НЕ ОбъектОснование.ПометкаУдаления;
	ПометкаУдаления  = ОбъектОснование.ПометкаУдаления;
	
	Зарплата = ОбъектОснование.Зарплата.Выгрузить();
	
	ИмяРеквизитаСумма = "СуммаПоДокументу";
	Если Зарплата.Колонки.Найти("Сумма") <> Неопределено Тогда
		Зарплата.Колонки.Сумма.Имя = "КВыплате";
		ИмяРеквизитаСумма = "СуммаДокумента"
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", ОснованиеСсылка);
	Запрос.УстановитьПараметр("Зарплата",  Зарплата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Зарплата.КВыплате КАК КВыплате,
	|	Зарплата.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|ПОМЕСТИТЬ ВТ_Зарплата
	|ИЗ
	|	&Зарплата КАК Зарплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Зарплата.КВыплате + ВТ_Зарплата.КомпенсацияЗаЗадержкуЗарплаты КАК КВыплате
	|ПОМЕСТИТЬ ВТ_ТекущаяВедомость
	|ИЗ
	|	ВТ_Зарплата КАК ВТ_Зарплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОплатаВедомостей.Регистратор КАК Ссылка,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_Оплаты
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость = &Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаВедомостей.Регистратор,
	|	ОплатаВедомостей.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТекущаяВедомость.ФизическоеЛицо КАК ФизическоеЛицо_Ведомость,
	|	СУММА(ВТ_ТекущаяВедомость.КВыплате) КАК КВыплате,
	|	ВТ_Оплаты.Ссылка КАК Ссылка,
	|	ВТ_Оплаты.ФизическоеЛицо КАК ФизическоеЛицо_ДокументВыплаты
	|ИЗ
	|	ВТ_ТекущаяВедомость КАК ВТ_ТекущаяВедомость
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Оплаты КАК ВТ_Оплаты
	|		ПО ВТ_ТекущаяВедомость.ФизическоеЛицо = ВТ_Оплаты.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оплаты.ФизическоеЛицо,
	|	ВТ_Оплаты.Ссылка,
	|	ВТ_ТекущаяВедомость.ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокументыПроведение       = Новый Соответствие;
	ДокументыПометкаУдаления  = Новый Соответствие;
	ДокументыОтменаПроведения = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			
			ДокументВыплаты = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ТипЗнч(ДокументВыплаты) = Тип("ДокументОбъект.ДепонированиеЗарплаты") Тогда
				
				Если Не ПравоДоступа("Изменение", Метаданные.Документы.ДепонированиеЗарплаты) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Выборка.ФизическоеЛицо_Ведомость) Тогда
					СтрокаКУдалению = ДокументВыплаты.Депоненты.Найти(Выборка.ФизическоеЛицо_ДокументВыплаты, "ФизическоеЛицо");
					Если СтрокаКУдалению <> Неопределено Тогда
						ДокументВыплаты.Депоненты.Удалить(СтрокаКУдалению);
					КонецЕсли;
				КонецЕсли;
				
				Если ДокументВыплаты.Депоненты.Количество() = 0 ИЛИ ПометкаУдаления Тогда
					ДокументыПометкаУдаления.Вставить(Выборка.Ссылка, ДокументВыплаты);
				ИначеЕсли ОтменаПроведения Тогда
					ДокументыОтменаПроведения.Вставить(Выборка.Ссылка, ДокументВыплаты);
				Иначе
					ДокументыПроведение.Вставить(Выборка.Ссылка, ДокументВыплаты);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(ДокументВыплаты) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				
				Если Не ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
					
					Если ЗначениеЗаполнено(Выборка.ФизическоеЛицо_Ведомость) Тогда
						Если ДокументВыплаты.СуммаДокумента <> Выборка.КВыплате Тогда
							ДокументВыплаты.СуммаДокумента = Выборка.КВыплате;
						КонецЕсли;
						Если ПометкаУдаления Тогда
							ДокументыПометкаУдаления.Вставить(Выборка.Ссылка, ДокументВыплаты);
						ИначеЕсли ОтменаПроведения Тогда
							ДокументыОтменаПроведения.Вставить(Выборка.Ссылка, ДокументВыплаты);
						Иначе
							ДокументыПроведение.Вставить(Выборка.Ссылка, ДокументВыплаты);
						КонецЕсли;
					Иначе
						ДокументыПометкаУдаления.Вставить(Выборка.Ссылка, ДокументВыплаты);
					КонецЕсли;
					
				ИначеЕсли ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
					
					Если ДокументыПометкаУдаления.Получить(Выборка.Ссылка) <> Неопределено
						ИЛИ ДокументыОтменаПроведения.Получить(Выборка.Ссылка) <> Неопределено
						ИЛИ ДокументыПроведение.Получить(Выборка.Ссылка) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОтменаПроведения ИЛИ ПометкаУдаления Тогда
						СтрокаКУдалению = ДокументВыплаты.ВыплатаЗаработнойПлаты.Найти(ОснованиеСсылка, "Ведомость");
						Если СтрокаКУдалению <> Неопределено Тогда
							ДокументВыплаты.ВыплатаЗаработнойПлаты.Удалить(СтрокаКУдалению);
						КонецЕсли;
					Иначе
						СтрокаКОбновлению = ДокументВыплаты.ВыплатаЗаработнойПлаты.Найти(ОснованиеСсылка, "Ведомость");
						Если СтрокаКОбновлению <> Неопределено Тогда
							СтрокаКОбновлению.СуммаКВыплате = ОбъектОснование[ИмяРеквизитаСумма];
						КонецЕсли;
					КонецЕсли;
					ДокументВыплаты.СуммаДокумента = ДокументВыплаты.ВыплатаЗаработнойПлаты.Итог("СуммаКВыплате");
					
					Если ДокументВыплаты.ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
						ДокументыПометкаУдаления.Вставить(Выборка.Ссылка, ДокументВыплаты);
					Иначе
						ДокументыПроведение.Вставить(Выборка.Ссылка, ДокументВыплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ДокументВыплаты) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
				
				Если Не ПравоДоступа("Изменение", Метаданные.Документы.СписаниеСРасчетногоСчета) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
					
					Если ЗначениеЗаполнено(Выборка.ФизическоеЛицо_Ведомость) Тогда
						Если ДокументВыплаты.СуммаДокумента <> Выборка.КВыплате Тогда
							ДокументВыплаты.СуммаДокумента = Выборка.КВыплате;
						КонецЕсли;
						Если ПометкаУдаления Тогда
							ДокументыПометкаУдаления.Вставить(Выборка.Ссылка, ДокументВыплаты);
						ИначеЕсли ОтменаПроведения Тогда
							ДокументыОтменаПроведения.Вставить(Выборка.Ссылка, ДокументВыплаты);
						Иначе
							ДокументыПроведение.Вставить(Выборка.Ссылка, ДокументВыплаты);
						КонецЕсли;
					Иначе
						ДокументыПометкаУдаления.Вставить(Выборка.Ссылка, ДокументВыплаты);
					КонецЕсли;
					
				ИначеЕсли ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
					
					Если ДокументыПометкаУдаления.Получить(Выборка.Ссылка) <> Неопределено
						ИЛИ ДокументыОтменаПроведения.Получить(Выборка.Ссылка) <> Неопределено
						ИЛИ ДокументыПроведение.Получить(Выборка.Ссылка) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ОтменаПроведения ИЛИ ПометкаУдаления Тогда
						СтрокаКУдалению = ДокументВыплаты.ПеречислениеЗаработнойПлаты.Найти(ОснованиеСсылка, "Ведомость");
						Если СтрокаКУдалению <> Неопределено Тогда
							ДокументВыплаты.ПеречислениеЗаработнойПлаты.Удалить(СтрокаКУдалению);
						КонецЕсли;
					Иначе
						СтрокаКОбновлению = ДокументВыплаты.ПеречислениеЗаработнойПлаты.Найти(ОснованиеСсылка, "Ведомость");
						Если СтрокаКОбновлению <> Неопределено Тогда
							СтрокаКОбновлению.СуммаПлатежа = ОбъектОснование[ИмяРеквизитаСумма];
						КонецЕсли;
					КонецЕсли;
					ДокументВыплаты.СуммаДокумента = ДокументВыплаты.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
					
					Если ДокументВыплаты.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
						ДокументыПометкаУдаления.Вставить(Выборка.Ссылка, ДокументВыплаты);
					Иначе
						ДокументыПроведение.Вставить(Выборка.Ссылка, ДокументВыплаты);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЖурналаВСлучаеОшибки = НСтр("ru = 'Синхронизация ведомостей и документов выплаты'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для Каждого ЗаписьСоответствия ИЗ ДокументыОтменаПроведения Цикл
		Попытка
			ЗаписьСоответствия.Значение.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось отменить проведение документа %1'");
			ТекстСообщенияПользователю = СтрШаблон(ТекстСообщенияВСлучаеОшибки, ОснованиеСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю);
			
			ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ТекстЖурналаВСлучаеОшибки,
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектОснование.Метаданные(),
				ОснованиеСсылка,
				ТекстСообщения);
			
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого ЗаписьСоответствия ИЗ ДокументыПометкаУдаления Цикл
		Попытка
			ЗаписьСоответствия.Значение.ПометкаУдаления = Истина;
			ЗаписьСоответствия.Значение.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось пометить на удаление документ %1'");
			ТекстСообщенияПользователю = СтрШаблон(ТекстСообщенияВСлучаеОшибки, ОснованиеСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю);
			
			ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ТекстЖурналаВСлучаеОшибки,
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектОснование.Метаданные(),
				ОснованиеСсылка,
				ТекстСообщения);
			
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого ЗаписьСоответствия ИЗ ДокументыПроведение Цикл
		Попытка
			ЗаписьСоответствия.Значение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось провести документ %1'");
			ТекстСообщенияПользователю = СтрШаблон(ТекстСообщенияВСлучаеОшибки, ОснованиеСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю);
			
			ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки,
				Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ТекстЖурналаВСлучаеОшибки,
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектОснование.Метаданные(),
				ОснованиеСсылка,
				ТекстСообщения);
			
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Дивиденды

Функция НалогСДивидендовАкционера(ДатаПолученияДохода, Организация, Акционер, Начислено, Регистратор = Неопределено) Экспорт
	
	СуммыНалога = Новый Структура("СуммаНалога, СуммаНалогаСПревышения", 0, 0);
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		ИЛИ ДатаПолученияДохода < УчетЗарплаты.ДатаНачалаУчетаПрогрессивногоНДФЛ() 	Тогда
		
		РезультатРасчетаНалога = УчетНДФЛ.НалогСДивидендовАкционера(ДатаПолученияДохода, Организация, Акционер, Начислено, 0, , Регистратор);
	
		СуммыНалога.Вставить("СуммаНалога", РезультатРасчетаНалога.НДФЛ);
		СуммыНалога.Вставить("СуммаНалогаСПревышения", РезультатРасчетаНалога.НДФЛСПревышения);
	КонецЕсли;
	
	
	Возврат СуммыНалога;
	
КонецФункции

Процедура СформироватьДвиженияНачислениеДивидендов(ТаблицаРеквизиты, ТаблицаОтраженияВУчете, Движения, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаОтраженияВУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры        = ПодготовитьПараметрыДвиженийОтраженияДивидендов(ТаблицаОтраженияВУчете, ТаблицаРеквизиты);
	Реквизиты        = Параметры.Реквизиты[0];
	ТаблицаДивиденды = Параметры.ТаблицаОтраженияВУчете;
	ОтразитьДивидендыВУчетеНДФЛ(Реквизиты, ТаблицаДивиденды, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияДивидендов(ТаблицаДивиденды, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.НачислениеДивидендов> - Регистратор
	+ "Период,"					// <Дата>
	+ "Организация,"			// <СправочникСсылка.Организации> - организация документа
	+ "ПланируемаяДатаВыплаты"	// <Дата>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата>
	+ "Акционер,"				// <Ссылка на справочник "Физические лица">
	+ "Начислено,"				// <Число(15,2)>
	+ "НДФЛ,"					// <Число(15,2)>
	+ "НДФЛСПревышения"			// <Число(15,2)>
	;
	
	Параметры.Вставить("ТаблицаОтраженияВУчете", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаДивиденды, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ОтразитьДивидендыВУчетеНДФЛ(Реквизиты, ТаблицаДивиденды, Движения, Отказ)
	
	ТаблицаДивиденды.Колонки.Добавить("ВычетПоНДФЛ", Новый ОписаниеТипов("Число"));
	ТаблицаДивиденды.Колонки.Добавить("НалогНаПрибыльКЗачету", Новый ОписаниеТипов("Число"));
	
	УчетНДФЛ.СформироватьДоходыИНДФЛСДивидендов(Реквизиты.Регистратор,
		Движения,
		Отказ,
		Реквизиты.Организация,
		Реквизиты.ПланируемаяДатаВыплаты,
		ТаблицаДивиденды,
		Ложь,
		,
		,
		,
		Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДивиденды", ТаблицаДивиденды);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДивиденды.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаДивиденды КАК ТаблицаДивиденды";
	Запрос.Выполнить();
	УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения,
		Отказ,
		Реквизиты.Организация,
		Запрос.МенеджерВременныхТаблиц,
		Реквизиты.Регистратор);
	
КонецПроцедуры

#Область ВыплатаДивидендов

// Предназначена для генерации движений, связанных с отражением в регл. учете выплаты депонентов
//
// Параметры:
//	ТаблицаПеречислениеЗарплаты - таблица значений с колонками
//      Подразделение
//		ФизическоеЛицо
//      СуммаКВыплате
//      СтатьяДвиженияДенежныхСредств
//      СчетУчета
//      Ведомость
//	ТаблицаРеквизиты  - таблица значений содержит реквизиты документа
//	Движения
//	Отказ
//
Процедура СформироватьДвиженияВыплатаДивидендов(ТаблицаВыплатаДивидендов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаВыплатаДивидендов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыплатыДивидендов(ТаблицаВыплатаДивидендов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РегистрацияУдержанногоНДФЛ(ТаблицаВыплатаДивидендов, Отказ, Движения, Реквизиты);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыплатыДивидендов(ТаблицаВыплатаДивидендов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация";               // <СправочникСсылка.Организации>
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатаДепонентов
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                    // <СправочникСсылка.ФизическиеЛица> - физическое лико, которому выплачиваются дивиденды
	+ "СуммаКВыплате,"                 // <Число,15,2> - сумма выплаты в валюте документа	
	+ "НачислениеДивидендов";          // <ДокументСсылка.НачислениеДивидендов>
	
	Параметры.Вставить("ВыплатаДивидендов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплатаДивидендов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура РегистрацияУдержанногоНДФЛ(ТаблицаВыплатаДивидендов, Отказ, Движения, Реквизиты)
	
	Если НЕ Отказ Тогда
		
		// определение выплат в разрезе физлиц, документов и источников
		
		ДокументНачисления = ТаблицаВыплатаДивидендов[0].НачислениеДивидендов;
		СуммаКВыплате      = ТаблицаВыплатаДивидендов[0].СуммаКВыплате;
		СуммаВыплаты       = 0;
		Если ЗначениеЗаполнено(ДокументНачисления) Тогда
			
			СуммаДохода            = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументНачисления, "СуммаДохода");
			СуммаНалога            = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументНачисления, "СуммаНалога");
			СуммаНалогаСПревышения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументНачисления, "СуммаНалогаСПревышения");
			СуммаВыплаты           = СуммаДохода;
			
			КоэффициентОплаты = СуммаКВыплате/(СуммаДохода - СуммаНалога - СуммаНалогаСПревышения);
			
			Если КоэффициентОплаты <> 1 Тогда
				СуммаВыплаты = Окр(СуммаДохода * КоэффициентОплаты, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Ведомости.Учредитель КАК ФизическоеЛицо,
		|	&СуммаВыплаты КАК СуммаВыплаты,
		|	Ведомости.Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	Ведомости.СуммаДохода КАК СуммаНачисленная,
		|	&СуммаВыплаченная КАК СуммаВыплаченная
		|ПОМЕСТИТЬ ВТСписокСотрудников
		|ИЗ
		|	Документ.НачислениеДивидендов КАК Ведомости
		|ГДЕ
		|	Ведомости.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",           ДокументНачисления);
		Запрос.УстановитьПараметр("СуммаВыплаты",     СуммаВыплаты);
		Запрос.УстановитьПараметр("СуммаВыплаченная", 0);
		Запрос.Выполнить();
		
		// учет фактической даты получения доходов НДФЛ
		УчетНДФЛ.ЗарегистрироватьНовуюДатуПолученияДохода(
			Реквизиты.Регистратор,
			Движения,
			Запрос.МенеджерВременныхТаблиц,
			Реквизиты.Период,
			Реквизиты.Период,
			Отказ,
			Истина);
			
		// регистрация удержания НДФЛ 
		УчетНДФЛ.РассчитатьИЗарегистрироватьУдержанныеНалоги(
			Реквизиты.Регистратор,
			Движения,
			Отказ,
			Реквизиты.Организация,
			Реквизиты.Период,
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			?(Реквизиты.Период >= ДатаНачалаУчетаПрогрессивногоНДФЛ(),
				Реквизиты.Период,
				Неопределено),
			Истина,
			Ложь);
			
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуВыплатаДивидендов(ТаблицаВыплатаДивидендов) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыплатаДивидендов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВыплатФизическомуЛицу = ТаблицаВыплатаДивидендов.СкопироватьКолонки();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаВыплатаДивидендов Цикл
		Если СтрокаТаблицы.ФизическоеЛицо Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаВыплатФизическомуЛицу.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВыплатФизическомуЛицу;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РасчетыПоНалогамВзносам

#Область ПеречислениеНалоговВзносов

Функция ПодготовитьПараметрыПеречисленияНалоговИВзносовСФОТ(ТаблицаРеквизиты, ТаблицыУплатаНалогов)
	
	Перем ТаблицаПеречислениеНалогов, ТаблицаПеречислениеНДФЛ;
	
	ТаблицыУплатаНалогов.Свойство("ПеречислениеНалогов", ТаблицаПеречислениеНалогов);
	ТаблицыУплатаНалогов.Свойство("ПеречислениеНДФЛ",    ТаблицаПеречислениеНДФЛ);
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "ВидОперации,"               // <ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств>
	+ "ДатаВходящегоДокумента,"    // <Дата> - дата платежного поручения
	+ "НомерВходящегоДокумента,"   // Строка
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаПеречислениеНалогов
	
	СписокОбязательныхКолонок = ""
	+ "НалоговыйПериод,"             // <Дата> - период за который отражена уплата налога
	+ "Период,"                      // <Дата> - период движений - дата документа
	+ "СчетДт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов и взносов с ФОТ
	+ "СубконтоДт1,"                 // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "СубконтоДт2,"                 // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "СубконтоДт3,"                 // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "ПодразделениеДт,"             // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РегистрацияВНалоговомОргане," // <СправочникСсылка.РегистрацииВНалоговомОргане>
	+ "СуммаРуб";                    // <Число,15,2> - сумма налога, взноса
	
	Параметры.Вставить("ТаблицаПеречислениеНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеНалогов, СписокОбязательныхКолонок));
	
	Если ТаблицаПеречислениеНДФЛ <> Неопределено Тогда
		// Подготовка таблицы Параметры.ТаблицаПеречислениеНДФЛ
		
		СписокОбязательныхКолонок = ""
		+ "ФизическоеЛицо,"                       // <СправочникСсылка.ФизическиеЛица>
		+ "Сумма,"                                // <Число,15,2> - сумма налога, взноса
		+ "Ставка,"                               // <ПеречислениеСсылка.НДФЛСтавки>
		+ "ИсчисленоПоДивидендам,"                // Булево
		+ "ВключатьВДекларациюПоНалогуНаПрибыль," // Булево
		+ "МесяцНалоговогоПериода";               // Дата
		
		Параметры.Вставить("ТаблицаПеречислениеНДФЛ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеНДФЛ, СписокОбязательныхКолонок));
	Иначе
		Параметры.Вставить("ТаблицаПеречислениеНДФЛ", Неопределено);
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоНалогамИВзносамСФОТ(ТаблицаРеквизиты, ТаблицыУплатаНалогов, Движения, Отказ) Экспорт

	Если Не ТаблицыУплатаНалогов.Свойство("ПеречислениеНалогов")
	 Или Не ЗначениеЗаполнено(ТаблицыУплатаНалогов.ПеречислениеНалогов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
	   И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	ПеречисленныйНалог = ТаблицыУплатаНалогов.ПеречислениеНалогов.Итог("СуммаРуб");
	Если ПеречисленныйНалог = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПеречисленияНалоговИВзносовСФОТ(ТаблицаРеквизиты, ТаблицыУплатаНалогов);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаПеречислениеНалогов = Параметры.ТаблицаПеречислениеНалогов.Скопировать();
	
	СчетаУчетаНалоговВзносовСФОТ = Новый Соответствие;
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_нак,              Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_страх,            Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп,              Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры,      Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС,                  Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ,            Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФФОМС,                Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФФОМС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ТФОМС,                Перечисления.ВидыОбязательногоСтрахованияСотрудников.ТФОМС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_ОПС,              Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу);
	
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ВидОбязательногоСтрахованияСотрудников");
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ЭтоСтраховыеВзносы");
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ВидДвижения");
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеНомер");
	ТаблицаПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеДата");
	
	ТаблицаПеречислениеНалогов.ЗаполнитьЗначения(Реквизиты.НомерВходящегоДокумента, "ПлатежноеПоручениеНомер");
	ТаблицаПеречислениеНалогов.ЗаполнитьЗначения(Реквизиты.ДатаВходящегоДокумента, "ПлатежноеПоручениеДата");
	
	ТаблицаПеречислениеНалогов.Колонки.СуммаРуб.Имя = "Сумма";
	ТаблицаПеречислениеНалогов.Колонки.ПодразделениеДт.Имя = "Подразделение";
			
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПеречислениеНалогов Цикл
		
		ВидОбязательногоСтрахованияСотрудников = СчетаУчетаНалоговВзносовСФОТ.Получить(ТаблицаПеречислениеНалогов[0].СчетДт);
		
		СтрокаТаблицы.ВидОбязательногоСтрахованияСотрудников = ВидОбязательногоСтрахованияСотрудников;
		СтрокаТаблицы.ЭтоСтраховыеВзносы = Истина;
		СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
	МассивНазначенийПлатежа = Новый Массив;
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
			
	Если ТаблицаПеречислениеНалогов[0].СчетДт = ПланыСчетов.Хозрасчетный.НДФЛ
		ИЛИ ТаблицаПеречислениеНалогов[0].СчетДт = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины Тогда
					
		Если МассивНазначенийПлатежа.Найти(ТаблицаПеречислениеНалогов[0].СубконтоДт1) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МесяцНалоговогоПериода = ТаблицаПеречислениеНалогов[0].НалоговыйПериод;
		Если НЕ ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
			Возврат;
		КонецЕсли;
		
		Если БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций()
			И ЗначениеЗаполнено(ТаблицаПеречислениеНалогов[0].РегистрацияВНалоговомОргане) Тогда
			РегистрацияВНалоговомОргане = ТаблицаПеречислениеНалогов[0].РегистрацияВНалоговомОргане;
		ИначеЕсли ЗначениеЗаполнено(ТаблицаПеречислениеНалогов[0].СубконтоДт2) Тогда
			РегистрацияВНалоговомОргане = ТаблицаПеречислениеНалогов[0].СубконтоДт2;
		Иначе
			РегистрацияВНалоговомОргане = Неопределено;
		КонецЕсли;
		
		ТаблицаПеречислениеНалогов.Колонки.НалоговыйПериод.Имя = "МесяцНалоговогоПериода";
		// НДФЛ
		
		ФизическиеЛица = Новый Массив;
		Если Параметры.ТаблицаПеречислениеНДФЛ <> Неопределено Тогда
			ФизическиеЛица = Параметры.ТаблицаПеречислениеНДФЛ.ВыгрузитьКолонку("ФизическоеЛицо");
		КонецЕсли;
		
		Ставка = ?( ТаблицаПеречислениеНалогов[0].СчетДт = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины,
			СтавкаНДФЛСПревышения(),
			Неопределено);
			
		Если ФизическиеЛица.Количество() = 0 Тогда
			УчетНДФЛ.СформироватьПеречисленныйНалог(
				Реквизиты.Регистратор, Движения, Отказ, Реквизиты.Организация, Реквизиты.Период,
				ТаблицаПеречислениеНалогов, , РегистрацияВНалоговомОргане, Год(Реквизиты.Период) > 2014,
				Ставка);
		Иначе
			
			Если РегистрацияВНалоговомОргане = Неопределено Тогда
				РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Реквизиты.Организация, Реквизиты.Период);
			КонецЕсли;
			
			ВТПеречислениеНДФЛ = СформироватьВременнуюТаблицуПеречислениеНДФЛ(Параметры.ТаблицаПеречислениеНДФЛ, МесяцНалоговогоПериода, РегистрацияВНалоговомОргане,
				Реквизиты.ДатаВходящегоДокумента, Реквизиты.НомерВходящегоДокумента);
			
			УчетНДФЛ.СформироватьПеречисленныйНалогПоВременнойТаблице(Движения, Отказ, Реквизиты.Организация, Реквизиты.Период, ВТПеречислениеНДФЛ);
			
			СтрокаДанных = Новый Структура;
			Для Каждого Колонка ИЗ ТаблицаПеречислениеНалогов.Колонки Цикл
				СтрокаДанных.Вставить(Колонка.Имя);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ТаблицаПеречислениеНалогов[0]);
			СтрокаДанных.Сумма = ТаблицаПеречислениеНалогов.Итог("Сумма");
			
			РеквизитыПлатежногоПоручения = УчетНДФЛ.РеквизитыПлатежногоПорученияПоДатеНомеру(Реквизиты.ДатаВходящегоДокумента, Реквизиты.НомерВходящегоДокумента);
			
			СтрокаПриход = СтрокаУплатыНалоговогоАгента(Движения, Реквизиты.Организация, Реквизиты.Период, ВидДвиженияНакопления.Приход, СтрокаДанных, Ставка);
			СтрокаПриход.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПоручения;
			СтрокаПриход.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			СтрокаПриход.ДатаПлатежа = Реквизиты.Период;
			
			СтрокаРасход = СтрокаУплатыНалоговогоАгента(Движения, Реквизиты.Организация, Реквизиты.Период, ВидДвиженияНакопления.Расход, СтрокаДанных, Ставка);
			СтрокаРасход.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПоручения;
			СтрокаРасход.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			СтрокаРасход.ДатаПлатежа = Реквизиты.Период;
			
			Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записывать = Истина;
			
		КонецЕсли;
		
	ИначеЕсли СчетаУчетаНалоговВзносовСФОТ.Получить(ТаблицаПеречислениеНалогов[0].СчетДт) <> Неопределено Тогда 
		
		МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
		Если МассивНазначенийПлатежа.Найти(ТаблицаПеречислениеНалогов[0].СубконтоДт1) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//Взносы
		УчетСтраховыхВзносов.СформироватьУплатуВзносовВФонд(Движения, Отказ, Реквизиты.Организация, ТаблицаПеречислениеНалогов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПеречисленныйНалогРегистратораПоФизическимЛицам(Регистратор) Экспорт
	
	Если Год(Регистратор.Дата) > 2014 Тогда
		Возврат УчетНДФЛ.ПеречисленныйНалогРегистратораПоФизическимЛицам(Регистратор);
	Иначе
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ПустаяТаблица.Колонки.Добавить("Сумма",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		Возврат ПустаяТаблица;
	КонецЕсли;
	
КонецФункции

Функция СтрокаУплатыНалоговогоАгента(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента, Ставка)
	
	НоваяСтрока = Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Ставка      = Ставка;
	НоваяСтрока.Период      = ДатаОперации;
	Если НоваяСтрока.МесяцНалоговогоПериода >= '20150101' Тогда
		НоваяСтрока.МесяцНалоговогоПериода = '00010101'
	КонецЕсли;
	
    Возврат НоваяСтрока
	
КонецФункции

#КонецОбласти

#Область ВозвратВозмещениеНалоговВзносов

Функция ПодготовитьПараметрыВозвратаНалоговИВзносовСФОТ(ТаблицаВозвратНалогов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаПеречислениеНалогов
	
	СписокОбязательныхКолонок = ""
	+ "СчетКт,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов и взносов с ФОТ
	+ "СубконтоКт1,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "СубконтоКт2,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>     
	+ "СубконтоКт3,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "СуммаРуб";               // <Число,15,2> - сумма налога, взноса
	
	Параметры.Вставить("ТаблицаВозвратНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозвратНалогов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоВозвратамНалоговИВзносовСФОТ(ТаблицаВозвратНалогов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВозвратНалогов) Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаВозвратНалогов.Итог("СуммаРуб") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВозвратаНалоговИВзносовСФОТ(ТаблицаВозвратНалогов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СчетаУчетаРасчетовСФСС = Новый Соответствие;
	СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС,             Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
	СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
	
	ПромежуточнаяТаблица = Параметры.ТаблицаВозвратНалогов.Скопировать();
	
	ТаблицаВозвратНалогов = Новый ТаблицаЗначений;
	ТаблицаВозвратНалогов.Колонки.Добавить("Период");
	ТаблицаВозвратНалогов.Колонки.Добавить("ВидОбязательногоСтрахованияСотрудников");
	ТаблицаВозвратНалогов.Колонки.Добавить("ЭтоСтраховыеВзносы");
	ТаблицаВозвратНалогов.Колонки.Добавить("Сумма");
	
	// возмещение расходов по соц.страхованию
	Для Каждого СтрокаТаблицы ИЗ ПромежуточнаяТаблица Цикл
		ВидОбязательногоСтрахованияСотрудников = СчетаУчетаРасчетовСФСС.Получить(СтрокаТаблицы.СчетКт);
		Если ВидОбязательногоСтрахованияСотрудников <> Неопределено Тогда
			Если Реквизиты.Период < ДатаНачалаАдминистрированияСтраховыхВзносовФНС()
				И (СтрокаТаблицы.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда
				ИЛИ СтрокаТаблицы.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию) Тогда
				НоваяСтрока = ТаблицаВозвратНалогов.Добавить();
				НоваяСтрока.Период = Реквизиты.Период;
				НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидОбязательногоСтрахованияСотрудников;
				НоваяСтрока.ЭтоСтраховыеВзносы = Истина;
				НоваяСтрока.Сумма = СтрокаТаблицы.СуммаРуб;
			ИначеЕсли Реквизиты.Период >= ДатаНачалаАдминистрированияСтраховыхВзносовФНС()
				И СтрокаТаблицы.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
				НоваяСтрока = ТаблицаВозвратНалогов.Добавить();
				НоваяСтрока.Период = Реквизиты.Период;
				НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидОбязательногоСтрахованияСотрудников;
				НоваяСтрока.ЭтоСтраховыеВзносы = Истина;
				НоваяСтрока.Сумма = СтрокаТаблицы.СуммаРуб;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	Если ТаблицаВозвратНалогов.Количество() <> 0 Тогда
		УчетСтраховыхВзносов.СформироватьВозмещениеРасходовПоСоциальномуСтрахованию(Движения, Отказ, Реквизиты.Организация, ТаблицаВозвратНалогов);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область РегистрацияРасчетовПоНалогамВзносамДокументами_ВНО_Операция_пр

Функция ПодготовитьПараметрыПроведенияОстатки_РасчетыПоНалогамИСборам(
			ТаблицаРасчетыПоНалогамИСборам,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыПоНалогамИСборам

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата>
	+ "СчетУчета,"            // <План счетов бухгалтерского учета>
	+ "ВидПлатежаВБюджет,"    // <ПеречислениеСсылка.Виды платежей в бюджет (фонды)>
	+ "Сумма,"                // <Число (15,2)>
	+ "СуммаКт,"              // <Число (15,2)>
	+ "РегистрацияВНалоговомОргане";     // <СправочникСсылка.РегистрацииВНалоговомОргане>

	Параметры.Вставить("ТаблицаРасчетыПоНалогамИСборам",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыПоНалогамИСборам, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьОстатки_РасчетыПоНалогамИСборам(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ПараметрыПроведения.Реквизиты[0].РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборам) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияОстатки_РасчетыПоНалогамИСборам(
		ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборам,
		ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ПромежуточнаяТаблица = Параметры.ТаблицаРасчетыПоНалогамИСборам;
	
	// регистрация расчетов с фондами
			
	ТаблицаРасчетовСФондами = Новый ТаблицаЗначений;
	ТаблицаРасчетовСФондами.Колонки.Добавить("Период");
	ТаблицаРасчетовСФондами.Колонки.Добавить("ВидОбязательногоСтрахованияСотрудников");
	ТаблицаРасчетовСФондами.Колонки.Добавить("ЭтоСтраховыеВзносы");
	ТаблицаРасчетовСФондами.Колонки.Добавить("ГодЗадолженностиПоЕСН");
	ТаблицаРасчетовСФондами.Колонки.Добавить("ВидДвижения");
	ТаблицаРасчетовСФондами.Колонки.Добавить("РасчетыПоПособиям");
	ТаблицаРасчетовСФондами.Колонки.Добавить("Сумма");
	
	СчетаУчетаНалоговВзносовСФОТ = Новый Соответствие;
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_нак,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_страх,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС,             Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФФОМС,           Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФФОМС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ТФОМС,           Перечисления.ВидыОбязательногоСтрахованияСотрудников.ТФОМС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_ОПС,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу);
	
	СчетаУчетаРасчетовСФСС = Новый Соответствие;
	СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
	СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
	
	ВидыРасчетовПоСредствамФСС = Новый Соответствие;
	ВидыРасчетовПоСредствамФСС.Вставить(Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию);
	ВидыРасчетовПоСредствамФСС.Вставить(Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда,      Перечисления.ВидыРасчетовПоСредствамФСС.ПолученоИзФонда);
	ВидыРасчетовПоСредствамФСС.Вставить(Перечисления.ВидыПлатежейВГосБюджет.НеПринято,            Перечисления.ВидыРасчетовПоСредствамФСС.НеПринято);
	
	Для Каждого СтрокаТаблицы ИЗ ПромежуточнаяТаблица Цикл			
		ВидОбязательногоСтрахованияСотрудников = СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.СчетУчета);
		Если ВидОбязательногоСтрахованияСотрудников <> Неопределено Тогда
			Если (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог)
				ИЛИ (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.НалогСам)
				ИЛИ (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда)
				ИЛИ (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию) Тогда
				
				НоваяСтрока = ТаблицаРасчетовСФондами.Добавить();
				НоваяСтрока.Период = СтрокаТаблицы.Период;
				НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидОбязательногоСтрахованияСотрудников;
				НоваяСтрока.ЭтоСтраховыеВзносы = ?(СтрокаТаблицы.Период >= Дата('20100101'),Истина, Ложь);				
				Если НЕ НоваяСтрока.ЭтоСтраховыеВзносы Тогда
					НоваяСтрока.ГодЗадолженностиПоЕСН = Год(СтрокаТаблицы.Период);
				КонецЕсли;					
				Если СтрокаТаблицы.СуммаКт <> 0 Тогда
					НоваяСтрока.Сумма = СтрокаТаблицы.СуммаКт;
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				Иначе
					НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;			
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЕсли;
				
				Если СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.СчетУчета) <> Неопределено Тогда
					РасчетыПоПособиям = ВидыРасчетовПоСредствамФСС.Получить(СтрокаТаблицы.ВидПлатежаВБюджет);
					Если РасчетыПоПособиям <> Неопределено Тогда
						НоваяСтрока.РасчетыПоПособиям = РасчетыПоПособиям;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРасчетовСФондами.Количество() <> 0 Тогда
		УчетСтраховыхВзносов.СформироватьРасчетыСФондом(Движения, Отказ, Реквизиты.Организация, ТаблицаРасчетовСФондами);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеДанныеДляОтраженияЗарплатыВУчете

// Процедура дополняет таблицу выплат, полученную из подсистемы учета зарплаты
// колконками, в которых будет храниться необходимая для формирования проводок 
// информация
//
// Параметры:
//	ВыплатаЗарплаты - таблица значений
//
Процедура ПодготовитьТаблицуВыплатыЗарплаты(ВыплатаЗарплаты) Экспорт
	
	ВыплатаЗарплаты.Колонки.Добавить("Подразделение");	
	ВыплатаЗарплаты.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
	ВыплатаЗарплаты.Колонки.Добавить("БанковскийСчет");
	ВыплатаЗарплаты.Колонки.Добавить("СчетУчета");
	ВыплатаЗарплаты.Колонки.Добавить("СчетУчетаКомпенсации");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации1");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации2");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации3");
	ВыплатаЗарплаты.Колонки.Добавить("ПодразделениеУчетаКомпенсации");	
	ВыплатаЗарплаты.Колонки.Добавить("ИспользуетсяЭлектронныйОбмен", Новый ОписаниеТипов("Булево"));	
	
КонецПроцедуры

// Функция формирует таблицу выплаты зарплаты для передачи в подсистему УСН
//
Функция ПолучитьТаблицуВыплатыЗарплатыДляУСН(ВыплатаЗарплаты) Экспорт
	
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	

	ТаблицаВыплатаЗарплаты = Новый ТаблицаЗначений;
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Работник");	
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Сделка");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("КурсВзаиморасчетов");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("КратностьВзаиморасчетов");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Сумма");
	
	Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме ИЛИ ВыплатаЗарплаты = Неопределено Тогда
		Возврат ТаблицаВыплатаЗарплаты;
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из ВыплатаЗарплаты Цикл
		
		НоваяСтрока = ТаблицаВыплатаЗарплаты.Добавить();
		НоваяСтрока.Работник                = СтрокаТаблицы.ФизическоеЛицо;
		НоваяСтрока.Сделка                  = Неопределено;
		НоваяСтрока.КурсВзаиморасчетов      = 1;
		НоваяСтрока.КратностьВзаиморасчетов = 1;
		НоваяСтрока.Сумма                   = СтрокаТаблицы.СуммаКВыплате;
		
	КонецЦикла;
	
	ТаблицаВыплатаЗарплаты.Свернуть("Работник, Сделка, КурсВзаиморасчетов, КратностьВзаиморасчетов", "Сумма");
	
	Возврат ТаблицаВыплатаЗарплаты;
	
КонецФункции

#КонецОбласти

#Область ДанныеДокументовПодсистемыЗарплата

Функция ПолучитьДанныеВедомостейДляОплатыТаблично(Регистратор = Неопределено, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВедомостей = ВзаиморасчетыССотрудниками.ДанныеВедомостейДляОплатыДокументом(Регистратор, Ведомости, ФизическиеЛица, Оплаченные);
	
	УчитыватьКомпенсациюЗаЗадержкуЗарплаты = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		Если ЗначениеЗаполнено(Регистратор) Тогда
			Организация = Регистратор.Организация;
		Иначе
			Организация = Ведомости[0].Организация;
		КонецЕсли;
		УчитыватьКомпенсациюЗаЗадержкуЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25", Новый Структура("Организация", Организация));
	КонецЕсли;
	
	Если НЕ УчитыватьКомпенсациюЗаЗадержкуЗарплаты Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаВедомостей Цикл
			СтрокаТаблицы.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате + СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
			СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты = 0;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаВедомостей.Свернуть("Ведомость, ФизическоеЛицо", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты, ВзысканнаяСумма");
	
	Возврат ТаблицаВедомостей;
	
КонецФункции

Функция ВзысканоПоВедомости(ПлатежнаяВедомость, Получатель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Получатель) 
		ИЛИ НЕ ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
		Возврат 0;
	КонецЕсли;
	
	Ведомости = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПлатежнаяВедомость);
	
	ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично( , Ведомости, Получатель, Ложь);
	ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично( , Ведомости, Получатель, Истина);
	
	Возврат ТаблицаНеоплаченныхВедомостей.Итог("ВзысканнаяСумма") + ТаблицаОплаченныхВедомостей.Итог("ВзысканнаяСумма");
	
КонецФункции

Функция НевыплаченныеДепоненты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица = Неопределено, ДепонированоДо = Неопределено) Экспорт

	Возврат УчетДепонированнойЗарплаты.ОстатокДепонированнойЗарплаты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица, ДепонированоДо);		                
	
КонецФункции

Функция ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(Организация, ДокументВыплаты, Ведомости, ФизическоеЛицо = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		// В 1С:Бухгалтерии компенсация не может быть рассчитана
		Возврат Ложь;
	КонецЕсли;
	
	ИспользуетсяЗУП25 = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25", Новый Структура("Организация", Организация));
	Если Не ИспользуетсяЗУП25 Тогда
		// Расчет компенсации выполняется в ЗУП 2.5
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеВедомостей = ПолучитьДанныеВедомостейДляОплатыТаблично(ДокументВыплаты, Ведомости, ФизическоеЛицо, Неопределено);
		
	Возврат ДанныеВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты") <> 0;
	
КонецФункции

// Проверяет оплаченность расчетного документа.
//
// Параметры:
//  РасчетныйДокумент - ДокументСсылка (Отпуск, БольничныйЛист, НачислениеЗарплаты).
//
Функция МожноСоздатьВедомостиПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате.Остатки(, ДокументОснование = &РасчетныйДокумент) КАК ЗарплатаКВыплатеОстатки
	|ГДЕ
	|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток > 0";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой()Тогда
		ТекстСообщения = НСтр("ru = 'По документу нет сумм к выплате'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции

// Проверяет наличие проведенных документов начисления зарплаты
//
// Параметры:
//  ГоловнаяОрганизация - СправочникСсылка.Организации - проверяются документы переданной организации и всех ее филиалов
//  НачалоПериода       - Дата - начало проверяемого интервала
//  КонецПериода        - Дата - конец проверяемого интервала
// 
// Возвращаемое значение:
//  Булево - Истина, если наличие этих документов предполагается настройками и они есть (проведены)
//
Функция ЕстьНачислениеЗарплаты(ГоловнаяОрганизация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров()
		Или Не Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсяОрганизация", БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация));
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Проведен
	|	И НачислениеЗарплаты.МесяцНачисления МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеЗарплаты.Организация В(&ВсяОрганизация)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет наличие сведений о начисенных доходах для расчета НДФЛ за выбранный период.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на организацию.
//  НачалоПериода - Дата - начало проверяемого периода.
//  КонецПериода - Дата - конец проверяемого периода.
//
Функция ЕстьСведенияОДоходахНДФЛ(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Если Не УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров()
		Или Не Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОДоходахНДФЛОбороты.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК СведенияОДоходахНДФЛОбороты";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область УчетЗарплатыВоВнешнейПрограмме

// Формирует движения по отражению зарплаты в бух. учете
Процедура СформироватьДвиженияОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОтраженияВУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаОтраженияВУчете = Параметры.ТаблицаОтраженияВУчете;

	Для Каждого СтрокаТаблицы из ТаблицаОтраженияВУчете Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Организация	= Реквизиты.Организация;
		Проводка.Период			= Реквизиты.Период;
		

		Проводка.СчетДт	= СтрокаТаблицы.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
		Если СтрокаТаблицы.УчетПоПодразделениямДт Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеДт;
		КонецЕсли;
		
		Проводка.СчетКт	= СтрокаТаблицы.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
		
		Если СтрокаТаблицы.УчетПоПодразделениямКт Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.ПодразделениеКт;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Если ОтражатьВНалоговомУчете Тогда
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТаблицы.СуммаНУДт, СтрокаТаблицы.СуммаНУКт, СтрокаТаблицы.СуммаПРДт, СтрокаТаблицы.СуммаПРКт, СтрокаТаблицы.СуммаВРДт, СтрокаТаблицы.СуммаВРКт , Проводка, ПоддержкаПБУ18);
		КонецЕсли;
		
		Проводка.Содержание = СтрокаТаблицы.Содержание;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		
		ТаблицаОтраженияВУчете.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТаблицаОтраженияВУчете.Колонки.Добавить("Контрагент",   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		Для Каждого СтрокаТаблицы из ТаблицаОтраженияВУчете Цикл
			Если ЗначениеЗаполнено("ПодразделениеДт") Тогда
				СтрокаТаблицы.Подразделение = СтрокаТаблицы.ПодразделениеДт;
			Иначе
				СтрокаТаблицы.Подразделение = СтрокаТаблицы.ПодразделениеКт;
			КонецЕсли;
			СтрокаТаблицы.Контрагент = СтрокаТаблицы.СубконтоКт1;
		КонецЦикла;
		ЗарегистрироватьДанныеДляПечатиЧеков(ТаблицаОтраженияВУчете, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"			// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Организация,"	// <СправочникСсылка.Организации> - организация документа
	+ "Ссылка"			// <ДокументСсылка.ОтражениеЗарплатыВУчете>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"										// <ПланСчетовСсылка.Хозрасчетный>
	+ "ПодразделениеДт,"							// <Ссылка на справочник подразделений>
	+ "УчетПоПодразделениямДт,"						// Булево - признак учета по подразделениям счета Дт
	+ "СубконтоДт1,"								// <> - значение аналитики 
	+ "СубконтоДт2,"								// <> - значение аналитики 
	+ "СубконтоДт3,"								// <> - значение аналитики
	+ "СчетКт,"										// <ПланСчетовСсылка.Хозрасчетный>
	+ "УчетПоПодразделениямКт,"						// Булево - признак учета по подразделениям счета Кт
	+ "ПодразделениеКт,"							// <Ссылка на справочник подразделений>
	+ "СубконтоКт1,"								// <> - значение аналитики 
	+ "СубконтоКт2,"								// <> - значение аналитики 
	+ "СубконтоКт3,"								// <> - значение аналитики	
	+ "Содержание,"									// Строка - содержание проводки
	+ "Сумма,"										// <Число(15,2)>
	+ "СуммаНУДт,"									// <Число(15,2)>
	+ "СуммаПРДт,"									// <Число(15,2)>
	+ "СуммаВРДт,"									// <Число(15,2)>
	+ "СуммаНУКт,"									// <Число(15,2)>
	+ "СуммаПРКт,"									// <Число(15,2)>
	+ "СуммаВРКт,"									// <Число(15,2)>
	+ "ЯвляетсяОснованиемОформленияКассовогоЧека,"	// Булево
	+ "ОписаниеУдержанияДляЧека,"					// <Строка(100)>
	+ "ФизическоеЛицо"								// <СправочникСсылка.ФизическиеЛица>
	;	
	
	Параметры.Вставить("ТаблицаОтраженияВУчете", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОтраженияВУчете, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Формирует движения по отражению зарплаты для ИП
Процедура СформироватьДвиженияОтраженияЗарплатыИП(ТаблицаОтраженияЗарплатыИП, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОтраженияЗарплатыИП) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыДвиженийОтраженияЗарплатыИП(ТаблицаОтраженияЗарплатыИП, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ТаблицаОтраженияЗарплатыИП = Параметры.ТаблицаОтраженияЗарплатыИП;
	
	Если  ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаТаблицы ИЗ ТаблицаОтраженияЗарплатыИП	Цикл		
			Если СтрокаТаблицы.КорСчет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);				
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаОтраженияЗарплатыИП.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Удержания") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Удержания");
		Параметры.Реквизиты.ЗаполнитьЗначения(Ложь, "Удержания");
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаНачисленияУдержания", ТаблицаОтраженияЗарплатыИП);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРасходовНаОплатуТруда(Параметры, Движения, Отказ);

КонецПроцедуры

Процедура ЗаполнитьНедостающиеРеквизитыЗагруженныхОбъектов(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.СтатьиЗатрат")
		ИЛИ ТипЗнч(Элемент) = Тип("СправочникОбъект.СтатьиЗатрат") Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				Объект = Элемент.ПолучитьОбъект();
			Иначе
				Объект = Элемент;
			КонецЕсли;
			
			Если Объект.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			
			Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
		ИЛИ ТипЗнч(Элемент) = Тип("СправочникОбъект.ПрочиеДоходыИРасходы") Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				Объект = Элемент.ПолучитьОбъект();
			Иначе
				Объект = Элемент;
			КонецЕсли;
			
			Если Объект.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
						
			Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиУчетЗарплаты

// Обработчик подписки на событие ПроверитьНеобходимостьИспользованияПодсистемыЗарплатаИКадры.
// Вызывается при записи элемента справочника "Организации".
//
Процедура ПроверитьНеобходимостьИспользованияПодсистемыЗарплатаИКадры(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Если Источник.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
		ИЛИ ИПИспользуетТрудНаемныхРаботников(Источник, Ложь)
		ИЛИ Источник.ДополнительныеСвойства.Свойство("ИспользуетсяТрудНаемныхРаботников") Тогда
			МенеджерЗначения = Константы.ВедетсяУчетЗарплатыКадров.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = Истина;
			МенеджерЗначения.ДополнительныеСвойства.Вставить("НастраиватьКадровыйУчетИПоддержкуСовместительства",
				Источник.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
			МенеджерЗначения.Записать();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяется соответствующая константа, в отдельных случаях
// когда проверить функциональную опцию нельзя - не обновлен командный интерфейс
//
Функция ВключенаПодсистемаУчетаЗарплатыИКадров() Экспорт
	
	Возврат Константы.ВедетсяУчетЗарплатыКадров.Получить();
	
КонецФункции

// Проверяется соответствующая функциональная опция.
//
Функция ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВедетсяУчетЗарплатыКадров");
	
КонецФункции

// Отключается подсистема учета зарплаты и кадров при первом запуске,
// а также при выключении соответствующей функциональности
//
Процедура ОтключитьПодсистемуУчетаЗарплатыИКадров() Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Отключение подсистемы	
	Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(Ложь);
	Константы.ОтображатьПодсистемуСотрудники.Установить(Ложь);
		
	МенеджерЗначенияКонстанты = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.СоздатьМенеджерЗначения();
	МенеджерЗначенияКонстанты.Значение = Ложь;
	МенеджерЗначенияКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерЗначенияКонстанты.Записать();
	
	МенеджерЗначенияКонстанты = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.СоздатьМенеджерЗначения();
	МенеджерЗначенияКонстанты.Значение = Ложь;
	МенеджерЗначенияКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерЗначенияКонстанты.Записать();
	
	Константы.ИспользоватьНачислениеЗарплаты.Установить(Ложь);
	Константы.ИспользоватьКадровыйУчет.Установить(Ложь);
	Константы.ИспользоватьКадровыйУчетОсновнойИнтерфейс.Установить(Ложь);
	Константы.РасчетЗарплатыДляНебольшихОрганизаций.Установить(Ложь);
	
	Константы.ИспользоватьНачисленияПоДоговорам.Установить(Ложь);
	Константы.ИспользоватьРаботуНаНеполнуюСтавку.Установить(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
	КонецЕсли;
	
	ОтражениеВРегламентированномУчетеНастройкиОрганизаций = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();
	
	НастройкиУчетаЗарплаты  = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Прочитать();
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.ФормироватьПроводкиВКонцеПериода = Ложь;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьПодсистемуУчетаЗарплатыИКадров(ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина, НастраиватьКадровыйУчетИПоддержкуСовместительства = Истина) Экспорт

	НастроитьПодсистемуУчетаЗарплатыИКадров(
			ТребуетсяСоздатьПоставляемыеВидыНалогов,
			НастраиватьКадровыйУчетИПоддержкуСовместительства);
			
КонецПроцедуры

// Обработчик обновления
// Определеляет необходимость использования подсистемы учета зарплаты и кадров
// Если подсистема не требуется - она отключается
//
Процедура НастроитьПодсистемуЗарплатаИКадры() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И ВЫБОР
	|			КОГДА Организации.РегистрационныйНомерПФР = """"
	|					И Организации.КодОрганаПФР = """"
	|					И Организации.РегистрационныйНомерТФОМС = """"
	|					И Организации.РегистрационныйНомерФСС = """"
	|					И Организации.КодПодчиненностиФСС = """"
	|					И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаФСС КАК СТРОКА(1))) = """"
	|					И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаПФР КАК СТРОКА(1))) = """"
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОтключитьПодсистемуУчетаЗарплатыИКадров();
	Иначе
		Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(Константы.ИнтерфейсТакси.Получить());
		Константы.ОтображатьПодсистемуСотрудники.Установить(Константы.ИнтерфейсТаксиПростой.Получить());
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиУчетаЗарплаты(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
	Если ВестиУчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Константы.ИспользоватьКадровыйУчет.Установить(Ложь);
		Константы.ИспользоватьКадровыйУчетОсновнойИнтерфейс.Установить(Ложь);
		Константы.ИспользоватьНачисленияПоДоговорам.Установить(Ложь);
		Константы.ИспользоватьРаботуНаНеполнуюСтавку.Установить(Ложь);
	Иначе
		Константы.РасчетЗарплатыДляНебольшихОрганизаций.Установить(
			Константы.ИспользоватьНачислениеЗарплаты.Получить()
			И РасчетЗарплатыДляНебольшихОрганизаций.РасчетЗарплатыДляНебольшихОрганизацийВозможен()); 
		Константы.ИспользоватьОбменЗарплата3Бухгалтерия3ПоВсемОрганизациям.Установить(Ложь);
		НастройкиОбмена = РегистрыСведений.ИспользованиеОбменаЗарплата3Бухгалтерия3ПоОрганизациям.СоздатьНаборЗаписей();
		НастройкиОбмена.Очистить();
		НастройкиОбмена.Записать();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		// Отражение в регламентированном учете.
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьНаборЗаписей();
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Отбор.Организация.Установить(Выборка.Организация);
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Прочитать();
		
		Если ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Количество() = 0 Тогда
			НоваяЗапись = ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Добавить();
			НоваяЗапись.Организация = Выборка.Организация;
		КонецЕсли;
		
		Для Каждого Запись Из ОтражениеВРегламентированномУчетеНастройкиОрганизаций Цикл
			Запись.ФормироватьПроводкиВКонцеПериода = ВестиУчетЗарплатыИКадровВоВнешнейПрограмме;
		КонецЦикла;
		
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Записать();
		
		Если НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			
			// Настройки учета зарплаты.
			НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
			НастройкиУчетаЗарплаты.Отбор.Организация.Установить(Выборка.Организация);
			НастройкиУчетаЗарплаты.Прочитать();
			
			Если НастройкиУчетаЗарплаты.Количество() = 0 Тогда
				НоваяЗапись = НастройкиУчетаЗарплаты.Добавить();
				НоваяЗапись.Организация = Выборка.Организация;
				РегистрыСведений.НастройкиУчетаЗарплаты.ЗначенияНастройкиПоУмолчанию(НоваяЗапись);
			КонецЕсли;
			
			Для Каждого Запись Из НастройкиУчетаЗарплаты Цикл
				Запись.ИспользоватьФорматОбменаЗУП25 = Ложь;
			КонецЦикла;
				
			НастройкиУчетаЗарплаты.Записать();
			
			Если ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Выборка.Организация) = Выборка.Организация Тогда
				
				// Учетная политика по НДФЛ.
				УчетнаяПолитикаПоНДФЛ = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
				УчетнаяПолитикаПоНДФЛ.Отбор.ГоловнаяОрганизация.Установить(Выборка.Организация);
				УчетнаяПолитикаПоНДФЛ.Прочитать();
				
				Если УчетнаяПолитикаПоНДФЛ.Количество() = 0 Тогда
					НоваяЗапись = УчетнаяПолитикаПоНДФЛ.Добавить();
					НоваяЗапись.ГоловнаяОрганизация = Выборка.Организация;
				КонецЕсли;
				
				Для Каждого Запись Из УчетнаяПолитикаПоНДФЛ Цикл
					Запись.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
				КонецЦикла;
				
				УчетнаяПолитикаПоНДФЛ.Записать();
				
			КонецЕсли;
			
		Иначе
			
			// Учет страховых взносов.
			НастройкиУчетаСтраховыхВзносов = РегистрыСведений.НастройкиУчетаСтраховыхВзносов.СоздатьНаборЗаписей();
			НастройкиУчетаСтраховыхВзносов.Отбор.Организация.Установить(Выборка.Организация);
			НастройкиУчетаСтраховыхВзносов.Прочитать();
		
			Если НастройкиУчетаСтраховыхВзносов.Количество() = 0 Тогда
				НоваяЗапись = НастройкиУчетаСтраховыхВзносов.Добавить();
				НоваяЗапись.Организация = Выборка.Организация;
			КонецЕсли;
			
			Для Каждого Запись Из НастройкиУчетаСтраховыхВзносов Цикл
				Запись.ИспользуетсяТрудФармацевтов                        = Ложь;
				Запись.ИспользуетсяТрудЧленовЛетныхЭкипажей               = Ложь;
				Запись.ИспользуетсяТрудЧленовЭкипажейМорскихСудов         = Ложь;
				Запись.ИспользуетсяТрудШахтеров                           = Ложь;
				Запись.ИспользуютсяРаботыСДосрочнойПенсией                = Ложь;
				Запись.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда = Ложь;
			КонецЦикла;
			
			НастройкиУчетаСтраховыхВзносов.Записать();
			
			// Зарплата и кадры.
			НастройкиЗарплатаКадры = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьНаборЗаписей();
			НастройкиЗарплатаКадры.Отбор.Организация.Установить(Выборка.Организация);
			НастройкиЗарплатаКадры.Прочитать();
		
			Если НастройкиЗарплатаКадры.Количество() = 0 Тогда
				НоваяЗапись = НастройкиЗарплатаКадры.Добавить();
				НоваяЗапись.Организация = Выборка.Организация;
			КонецЕсли;
			
			Для Каждого Запись Из НастройкиЗарплатаКадры Цикл
				Запись.ПрименятьСевернуюНадбавку                   = Ложь;
				Запись.ПрименятьРайонныйКоэффициент                = Ложь;
				Запись.ПрименятьСевернуюНадбавкуВПодразделениях    = Ложь;
				Запись.ПрименятьРайонныйКоэффициентВПодразделениях = Ложь;
			КонецЦикла;
			
			НастройкиЗарплатаКадры.Записать();
			
		КонецЕсли;
			
	КонецЦикла;
	
	УправлениеСвойствамиБЗК.УстановитьДоступностьВсехНаборовДополнительныхРеквизитов();
	
	ВключитьАвтообменПоСЭДОФСС();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьПараметрыУчетаЗарплаты(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация                   = Организация;
		РегистрыСведений.НастройкиУчетаЗарплаты.ЗначенияНастройкиПоУмолчанию(Запись);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	
	СпособОтраженияЗарплатыВБухучете = СпособОтраженияПоУмолчанию();
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Организация;
		Запись.Период = ДатаОтсчетаПериодическихСведений();
		Запись.СпособОтраженияЗарплатыВБухучете = СпособОтраженияЗарплатыВБухучете;
		Запись.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация) = Организация Тогда
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Запись = НаборЗаписей.Добавить();
			Запись.ГоловнаяОрганизация = Организация;
			Запись.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	Если Справочники.Календари.НайтиПоРеквизиту("ВладелецГрафика", Организация) = Справочники.Календари.ПустаяСсылка() Тогда
		ОсновнойПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		Если ОсновнойПроизводственныйКалендарь <> Неопределено Тогда
			СоздатьГрафикРаботыОрганизации(Организация, ОсновнойПроизводственныйКалендарь);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьГрафикРаботыОрганизации(Организация, ПроизводственныйКалендарь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйГрафикРаботы = РасчетЗарплатыДляНебольшихОрганизаций.НовыйГрафикРаботыОрганизации(Организация, ПроизводственныйКалендарь);
	НовыйГрафикРаботы.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НаименованиеСпособаОтраженияЗарплатыПоУмолчанию()
	
	Возврат НСтр("ru = 'Отражение начислений по умолчанию'");
	
КонецФункции

Функция СпособОтраженияПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеСпособаОтраженияЗарплатыПоУмолчанию());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыОтраженияЗарплатыВБухУчете.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтраженияЗарплатыВБухУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВБухУчете.Наименование = &Наименование
	|	И НЕ СпособыОтраженияЗарплатыВБухУчете.ЭтоГруппа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		Выборка.Следующий();
		СпособОтраженияЗарплатыВБухучете = Выборка.Ссылка;
	Иначе
		НовыйСпособОтраженияЗарплатыВБухучете = Справочники.СпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
		НовыйСпособОтраженияЗарплатыВБухучете.Наименование = НаименованиеСпособаОтраженияЗарплатыПоУмолчанию();
		НовыйСпособОтраженияЗарплатыВБухучете.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		НовыйСпособОтраженияЗарплатыВБухучете.Записать();
		СпособОтраженияЗарплатыВБухучете = НовыйСпособОтраженияЗарплатыВБухучете.Ссылка;
	КонецЕсли;
	
	НастроитьПорядокОтраженияЗарплатыПоУмолчанию(СпособОтраженияЗарплатыВБухучете);
	
	Возврат СпособОтраженияЗарплатыВБухучете;
	
КонецФункции

Процедура НастроитьПорядокОтраженияЗарплатыПоУмолчанию(СпособОтраженияЗарплаты = Неопределено) Экспорт
	
	Если СпособОтраженияЗарплаты = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", НаименованиеСпособаОтраженияЗарплатыПоУмолчанию());
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпособыОтраженияЗарплатыВБухУчете.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтраженияЗарплатыВБухУчете
		|ГДЕ
		|	СпособыОтраженияЗарплатыВБухУчете.Наименование = &Наименование
		|	И НЕ СпособыОтраженияЗарплатыВБухУчете.ЭтоГруппа";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СпособОтраженияЗарплаты = Выборка.Ссылка
		Иначе
			СпособОтраженияЗарплаты = СпособОтраженияПоУмолчанию();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СпособОтраженияЗарплатыОбъект = СпособОтраженияЗарплаты.ПолучитьОбъект();
	
	// В момент вызова функциональные опции еще могут быть
	// не обновлены, поэтому читаем значения констант.
	ПрименяетсяОсобыйПорядокНалогообложения   = Константы.ИспользуетсяЕНВД.Получить()
		Или Константы.ИспользуетсяУСНПатент.Получить();
	ПрименяетсяОсновнаяСистемаНалогообложения = Константы.ИспользуетсяОСНО.Получить()
		Или Константы.ИспользуетсяУСН.Получить();
	
	Если ПрименяетсяОсобыйПорядокНалогообложения И НЕ ПрименяетсяОсновнаяСистемаНалогообложения Тогда
		СпособОтраженияЗарплатыОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
	ИначеЕсли ПрименяетсяОсобыйПорядокНалогообложения И ПрименяетсяОсновнаяСистемаНалогообложения Тогда
		СпособОтраженияЗарплатыОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты;
	Иначе
		СпособОтраженияЗарплатыОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	СпособОтраженияЗарплатыОбъект.Записать();
	
	Если ПрименяетсяОсновнаяСистемаНалогообложения Или ПрименяетсяОсновнаяСистемаНалогообложения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ПрименяетсяОсновнаяСистемаНалогообложения Тогда
		ЕНВД = Ложь;
		НаборЗаписей = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СпособОтраженияЗарплатыВБухУчете.Установить(СпособОтраженияЗарплаты);
		НаборЗаписей.Отбор.ЕНВД.Установить(ЕНВД);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьПоУмолчанию(СпособОтраженияЗарплаты, ЕНВД);
		КонецЕсли;
	КонецЕсли;
	
	Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
		ЕНВД = Истина;
		НаборЗаписей = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СпособОтраженияЗарплатыВБухУчете.Установить(СпособОтраженияЗарплаты);
		НаборЗаписей.Отбор.ЕНВД.Установить(ЕНВД);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьПоУмолчанию(СпособОтраженияЗарплаты, ЕНВД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьОтношениеКЕНВД(Организация, Период, ПлательщикЕНВД, ПрименяетсяОсобыйПорядокНалогообложения) Экспорт
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ДействующиеНастройки = РегистрыСведений.БухучетЗарплатыОрганизаций.СрезПервых(Период, Новый Структура("Организация", Организация));
		Если ДействующиеНастройки.Количество() = 0 Тогда
			ДействующиеНастройки = РегистрыСведений.БухучетЗарплатыОрганизаций.СрезПоследних(Период, Новый Структура("Организация", Организация));
		КонецЕсли;
		Запись = НаборЗаписей.Добавить();
		Если ДействующиеНастройки.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(Запись, ДействующиеНастройки[0]);
		Иначе
			Запись.СпособОтраженияЗарплатыВБухучете = СпособОтраженияПоУмолчанию();
		КонецЕсли;
		Запись.Организация = Организация;
		Запись.Период = Период;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Если ПлательщикЕНВД И ПрименяетсяОсобыйПорядокНалогообложения Тогда
		Запись.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ЕНВД;
	ИначеЕсли НЕ ПлательщикЕНВД Тогда
		Запись.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД;
	Иначе
		Запись.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.ОпределяетсяЕжемесячноПроцентом;
	КонецЕсли;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
		
КонецФункции

Процедура УстановитьНастройкиКадровогоУчета(КадровыйУчет = Неопределено, УчетЗарплатыИКадровСредствамиБухгалтерии = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии = Неопределено Тогда
		УчетЗарплатыИКадровСредствамиБухгалтерии = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	КонецЕсли;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		Константы.ИспользоватьКадровыйУчет.Установить(КадровыйУчет);
		Константы.ИспользоватьКадровыйУчетОсновнойИнтерфейс.Установить(КадровыйУчет);
	Иначе
		Константы.ИспользоватьКадровыйУчет.Установить(Ложь);
		Константы.ИспользоватьКадровыйУчетОсновнойИнтерфейс.Установить(Ложь);
	КонецЕсли;
		
КонецПроцедуры

Функция ИспользуетсяОбменСЗУП30(Организация) Экспорт
	
	//*********************************
	// Обслуживание обмена с ЗУП 3.0
	//*********************************
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЗарплата3Бухгалтерия3ПоВсемОрганизациямЗарплатаКадрыБазовая")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЗарплата3Бухгалтерия3ПоОрганизацииЗарплатаКадрыБазовая", Новый Структура("Организация", Организация)) Тогда
		Если  ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Процедура ПроверитьВозможностьИспользованияОбменаЗарплата3Бухгалтерия3ПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоОбменЗУПБП = ТипЗнч(Источник) = Тип("ПланОбменаОбъект.ОбменЗарплата3Бухгалтерия3")
		Или (ТипЗнч(Источник) = Тип("ПланОбменаОбъект.СинхронизацияДанныхЧерезУниверсальныйФормат")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВариантНастройки") = "ОбменЗУПБП");
	
	Если НЕ ЭтоОбменЗУПБП Тогда
			Возврат;
	КонецЕсли;
	
	Если Источник.Ссылка <> ПланыОбмена.ОбменЗарплата3Бухгалтерия3.ЭтотУзел()
		И Источник.Ссылка <> ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел() Тогда
		Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			ТекстСообщения = НСтр("ru = 'В настройках параметров учета установлен учет зарплаты во внешней программе.'");
			Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(Истина);
			Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
			Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
			УстановитьНастройкиУчетаЗарплаты(Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
			УстановитьНастройкиКадровогоУчета(Ложь);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РегистрационныйНомерПФР(Организация, ДатаСведений) Экспорт
	
	Запрос = Новый Запрос;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ?(ДатаСведений = Неопределено, ДатаОтсчетаПериодическихСведений(), ДатаСведений);
	
	Запрос.УстановитьПараметр("ВТИзмеренияДатыПараметр", ИзмеренияДаты);	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период,
	|	ИзмеренияДаты.Организация,
	|	ИзмеренияДаты.Период КАК Период1
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	&ВТИзмеренияДатыПараметр КАК ИзмеренияДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзмеренияДаты.Период КАК ЗаданныйПериод,
	|	ИзмеренияДаты.Организация КАК Организация,
	|	МАКСИМУМ(РегистрСведений.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыИсторияРегистрацийВОрганеПФР
	|{ВЫБРАТЬ
	|	ЗаданныйПериод,
	|	Организация}
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК РегистрСведений
	|		ПО (РегистрСведений.Период <= ИзмеренияДаты.Период
	|				ИЛИ ИзмеренияДаты.Период = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (РегистрСведений.Организация = ИзмеренияДаты.Организация)}
	|{ГДЕ
	|	РегистрСведений.Организация.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмеренияДаты.Период,
	|	ИзмеренияДаты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаксимальныеПериоды.ЗаданныйПериод КАК Период,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	МаксимальныеПериоды.Организация,
	|	РегистрСведений.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	|ПОМЕСТИТЬ ВТИсторияРегистрацийВОрганеПФРСрезПоследних
	|{ВЫБРАТЬ
	|	Период,
	|	ПериодЗаписи,
	|	Организация,
	|	РегистрационныйНомерПФР}
	|ИЗ
	|	ВТМаксимальныеПериодыИсторияРегистрацийВОрганеПФР КАК МаксимальныеПериоды
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК РегистрСведений
	|		ПО (РегистрСведений.Период = МаксимальныеПериоды.Период)
	|			И (РегистрСведений.Организация = МаксимальныеПериоды.Организация)}
	|ГДЕ
	|	НЕ РегистрСведений.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	|ИЗ
	|	ВТИсторияРегистрацийВОрганеПФРСрезПоследних КАК ИсторияРегистрацийВОрганеПФР";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.РегистрационныйНомерПФР;
	
	
КонецФункции

Функция ВедетсяУчетРезервовОтпусков(Организация, ДатаСведений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВедетсяУчетРезервовОтпусков = Ложь;
	
	Если ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		НастройкиРезервовОтпусков = НастройкиРезервовОтпусков(Организация, ДатаСведений);
		ВедетсяУчетРезервовОтпусков = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ 
		ИЛИ НастройкиРезервовОтпусков.ФормироватьРезервОтпусковНУ;
	КонецЕсли;
	
	Возврат ВедетсяУчетРезервовОтпусков;
	
КонецФункции

Функция ВедетсяУчетРезервовОтпусковПоВидамУчета(Организация, ДатаСведений, ВидУчета = "БУ") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВедетсяУчетРезервовОтпусков(Организация, ДатаСведений) Тогда
		Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
			НастройкиРезервовОтпусков = НастройкиРезервовОтпусков(Организация, ДатаСведений);
			Возврат НастройкиРезервовОтпусков["ФормироватьРезервОтпусков" + ВидУчета];
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РасчетЗарплатыДляНебольшихОрганизаций() Экспорт
	
	РасширеннаяЗарплата = Ложь;
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Если ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
			РасширеннаяЗарплата = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасширеннаяЗарплата;
	
КонецФункции

Функция ДатаОтсчетаПериодическихСведений() Экспорт
	
	Возврат '18991231000000';
	
КонецФункции

Функция НастройкиРезервовОтпусков(Организация, ДатаСведений) Экспорт
	
	Возврат РезервОтпусков.НастройкиРезервовОтпусков(Организация, ДатаСведений);
	
КонецФункции

Процедура ВключитьКадровыйУчетИПоддержкуСовместительства() Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Константы.ИспользоватьКадровыйУчет.Установить(Истина);
		Константы.ПоддержкаСовместительства.Установить(Истина);
		Константы.ИспользоватьКадровыйУчетОсновнойИнтерфейс.Установить(Истина);
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		Константы.ИспользоватьКадровыйУчетОсновнойИнтерфейс.Установить(Константы.ИспользоватьКадровыйУчет.Получить());
	КонецЕсли;
КонецПроцедуры

Функция ЗарплатаВыплачиваетсяБезВедомости() Экспорт
	
	ВедомостьМожноНеУказывать = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	
	Возврат ВедомостьМожноНеУказывать;
	
КонецФункции

Процедура УправлениеФункциональностьюУчетаЗарплатыИКадров(Включить, ДополнительныеСвойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	Если Включить Тогда
		НастраиватьКадровыйУчетИПоддержкуСовместительства = Ложь;
		Если ДополнительныеСвойства.Свойство("НастраиватьКадровыйУчетИПоддержкуСовместительства") Тогда
			НастраиватьКадровыйУчетИПоддержкуСовместительства = Истина;
		КонецЕсли;		
		ВключитьПодсистемуУчетаЗарплатыИКадров(Истина, НастраиватьКадровыйУчетИПоддержкуСовместительства);
		УправлениеСвойствамиБЗК.УстановитьДоступностьВсехНаборовДополнительныхРеквизитов();
		
		КлассификаторыДоходовРасходов.ОбеспечитьФункциональность(Справочники.ПрочиеДоходыИРасходы, "ВедетсяУчетЗарплатыКадров");
		КлассификаторыДоходовРасходов.ОбеспечитьФункциональность(Справочники.СтатьиЗатрат,         "ВедетсяУчетЗарплатыКадров");
		
	Иначе
		ОтключитьПодсистемуУчетаЗарплатыИКадров();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура НастроитьПодсистемуУчетаЗарплатыИКадров(ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина, НастраиватьКадровыйУчетИПоддержкуСовместительства = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		СервисЭлектронныхТрудовыхКнижек.ВключитьПодсистемуЭлектронныхТрудовыхКнижек();
	Иначе
		
		Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(Константы.ИнтерфейсТакси.Получить());
		Константы.ОтображатьПодсистемуСотрудники.Установить(Константы.ИнтерфейсТаксиПростой.Получить());
		
		Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(Истина);
		Если НастраиватьКадровыйУчетИПоддержкуСовместительства Тогда
			Если НЕ ПолучитьФункциональнуюОпцию("НачалоРаботы") Тогда
				ВключитьКадровыйУчетИПоддержкуСовместительства();
			КонецЕсли;
		КонецЕсли;
		УстановитьНастройкиУчетаЗарплаты(Ложь);
		Константы.РасчетЗарплатыДляНебольшихОрганизаций.Установить(
			РасчетЗарплатыДляНебольшихОрганизаций.РасчетЗарплатыДляНебольшихОрганизацийВозможен());
		
		Если ТребуетсяСоздатьПоставляемыеВидыНалогов Тогда
			Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеСвойствамиБЗК.УстановитьДоступностьВсехНаборовДополнительныхРеквизитов();
	
	УстановитьПривилегированныйРежим(Ложь)
	
КонецПроцедуры

// Процедура заполнит список задач задачами по зарплате, в случае если пользователь 
// не вводил номер ФСС, а сразу ввел сотрудника - опосредованно определяем необходимость учет зарплаты.
//
Процедура ОбновитьИЗаполнитьРегулярныеЗадачи(УникальныйИдентификатор, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// Проеверять "косвенное" включение надо только для ИП
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = 
		Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
		Возврат;
	КонецЕсли;
	
	// Если сотрудников больше одного - заполнение уже производилось.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Если сотрудник один - исключим повторное перезаполнение списка задач
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие КАК Условие,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка = ЗадачиБухгалтера.Правило
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ЕстьСотрудники)";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификатор, Организация, Ложь, Ложь, Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик смены настройки при изменения приложения.
// Вызывается при записи константы СервисЭлектронныхТрудовыхКнижек.
//
Процедура ВключитьИспользованияПодсистемыЗарплатаИКадрыПриСменеТарифа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриемНаРаботу.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КадровыйПеревод.Ссылка
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Увольнение.Ссылка
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	Результат = Запрос.ВыполнитьПакет();
	ЗапросДокументы = Результат[0].Выгрузить();
	Если ЗапросДокументы.Количество() = 0 Тогда // Документов нет
		ЗапросСотрудники = Результат[1].Выгрузить();
		Если ЗапросСотрудники.Количество() = 0 Тогда // Сотрудников нет
			ЗапросЮридическиеЛица = Результат[2].Выгрузить();
			Если ЗапросЮридическиеЛица.Количество() = 0 Тогда // Юридических лиц нет
				ЗапросФизическиеЛица = Результат[3].Выгрузить();
				Если ЗапросФизическиеЛица.Количество() = 0 Тогда // ИП нет
					Возврат;
				Иначе
					РегистрационныйНомерФСС = "";
					Для Каждого ОрганизацияФизическоеЛицо ИЗ ЗапросФизическиеЛица Цикл
						РегистрационныйНомерФСС = ОрганизацияФизическоеЛицо.РегистрационныйНомерФСС;
						Если ЗначениеЗаполнено(РегистрационныйНомерФСС) Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ЗначениеЗаполнено(РегистрационныйНомерФСС) Тогда // Нет ИП с номером ФСС
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗначения = Константы.ВедетсяУчетЗарплатыКадров.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = Истина;
	МенеджерЗначения.ДополнительныеСвойства.Вставить("НастраиватьКадровыйУчетИПоддержкуСовместительства", Истина);
	МенеджерЗначения.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РолиПодсистемы

// Перечень ролей, предоставляющих доступ на просмотр данных подсистемы.
// 
// Возвращаемое значение:
//  Массив - содержит строки, имена ролей
//
Функция РолиПросмотраДанных() Экспорт
	
	Роли = Новый Массив;
	
	Роли.Добавить("БазовыеПраваЗарплатаКадры");
	
	Роли.Добавить("ЧтениеАнкетПерсУчета");
	Роли.Добавить("ЧтениеБухгалтерскогоУчетаЗарплаты");
	Роли.Добавить("ЧтениеВыплаченнойЗарплаты");
	Роли.Добавить("ЧтениеДанныхДляНачисленияЗарплаты");
	Роли.Добавить("ЧтениеДанныхСотрудников");
	Роли.Добавить("ЧтениеДанныхФизическихЛицЗарплатаКадры");
	Роли.Добавить("ЧтениеДепонированнойЗарплаты");
	Роли.Добавить("ЧтениеДокументовЗарплатаКадры");
	Роли.Добавить("ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования");
	Роли.Добавить("ЧтениеЗарплатныхПроектов");
	Роли.Добавить("ЧтениеИсходящейСправкиОЗаработке");
	Роли.Добавить("ЧтениеЛицевыхСчетовПоЗарплатнымПроектам");
	Роли.Добавить("ЧтениеНалоговИВзносов");
	Роли.Добавить("ЧтениеНачисленнойЗарплаты");
	Роли.Добавить("ЧтениеПерсУчета");
	Роли.Добавить("ЧтениеДолжностей");
	Роли.Добавить("ЧтениеМедицинскихОрганизаций");
	Роли.Добавить("ЧтениеСЗВ_КОРР");
	Роли.Добавить("ЧтениеЖурналаДокументовОбменаСБанкамиПоЗарплатнымПроектам");
	Роли.Добавить("ЧтениеОбменаСБанкамиПоЗачислениюЗарплаты");
	Роли.Добавить("ЧтениеОбменаСБанкамиПоЛицевымСчетамЗарплатныхПроектов");
	Роли.Добавить("ЧтениеБанковскихКарт");
	Роли.Добавить("ЧтениеВедомостейНаВыплатуЗарплатыВнешних");
	Роли.Добавить("ЧтениеРеестровЭЛН");
	Роли.Добавить("ЧтениеЭЛН");
	Роли.Добавить("ПросмотрБанковскихКарт");
	Роли.Добавить("ЧтениеОценочныхОбязательствЗарплатаКадры");
	Роли.Добавить("ЧтениеОтраженияЗарплатыВБухучете");
	Роли.Добавить("ЧтениеНастроекОценочныхОбязательствЗарплатаКадры");
	Роли.Добавить("ЧтениеНастроекОбменаЗарплата3Бухгалтерия3");
	Роли.Добавить("ЧтениеДоговоров");
	Роли.Добавить("ЧтениеДоговоровЗарплатаКадры");
	Роли.Добавить("ЧтениеДанныхОТрудовойДеятельности");
	Роли.Добавить("ЧтениеИзвещенийФСС");
	
	Возврат Роли;
	
КонецФункции

// Перечень ролей, предоставляющих доступ на редактирование данных подсистемы.
// 
// Возвращаемое значение:
//  Массив - содержит строки, имена ролей
//
Функция РолиРедактированияДанных() Экспорт

	Роли = Новый Массив;
	
	Роли.Добавить("БазовыеПраваЗарплатаКадры");
	
	Роли.Добавить("НастройкаКлассовУсловийТрудаПоДолжностям");// Право на Должности включено в роль ДобавлениеИзменениеДанныхБухгалтерии
	Роли.Добавить("НастройкаПерсУчета");// Данные, которые используются при сдаче отчетности перс. учета
	Роли.Добавить("ДобавлениеИзменениеАнкетПерсУчета");
	Роли.Добавить("ДобавлениеИзменениеБухгалтерскогоУчетаЗарплаты");
	Роли.Добавить("ДобавлениеИзменениеВыплаченнойЗарплаты");
	Роли.Добавить("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	Роли.Добавить("ДобавлениеИзменениеДанныхСотрудников");
	Роли.Добавить("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Роли.Добавить("ДобавлениеИзменениеДепонированнойЗарплаты");
	Роли.Добавить("ДобавлениеИзменениеДокументовЗарплатаКадры");
	Роли.Добавить("ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования");
	Роли.Добавить("ДобавлениеИзменениеЗарплатныхПроектов");
	Роли.Добавить("ДобавлениеИзменениеИсходящейСправкиОЗаработке");
	Роли.Добавить("ДобавлениеИзменениеЛицевыхСчетовПоЗарплатнымПроектам");
	Роли.Добавить("ДобавлениеИзменениеНалоговИВзносов");
	Роли.Добавить("ДобавлениеИзменениеНачисленнойЗарплаты");
	Роли.Добавить("ДобавлениеИзменениеПерсУчета");
	Роли.Добавить("ДобавлениеИзменениеДолжностей");
	Роли.Добавить("ДобавлениеИзменениеЗначенийСтроковыхРеквизитов");
	Роли.Добавить("ДобавлениеИзменениеСЗВ_КОРР");
	Роли.Добавить("ДобавлениеИзменениеМедицинскихОрганизаций");
	Роли.Добавить("ВыполнениеОбменаСБанкамиПоЗарплатнымПроектам");
	Роли.Добавить("ДобавлениеИзменениеОбменаСБанкамиПоЗачислениюЗарплаты");
	Роли.Добавить("ДобавлениеИзменениеОбменаСБанкамиПоЛицевымСчетамЗарплатныхПроектов");
	Роли.Добавить("ИспользованиеОбработкиОбменСБанкамиПоЗарплатнымПроектам");
	Роли.Добавить("ЧтениеЖурналаДокументовОбменаСБанкамиПоЗарплатнымПроектам");
	Роли.Добавить("ДобавлениеИзменениеБанковскихКарт");
	Роли.Добавить("ДобавлениеИзменениеВедомостейНаВыплатуЗарплатыВнешних");
	Роли.Добавить("ДобавлениеИзменениеРеестровЭЛН");
	Роли.Добавить("ДобавлениеИзменениеЭЛН");
	Роли.Добавить("ПросмотрБанковскихКарт");
	Роли.Добавить("ДобавлениеИзменениеОценочныхОбязательствЗарплатаКадры");
	Роли.Добавить("ДобавлениеИзменениеОтраженияЗарплатыВБухучете");
	Роли.Добавить("ДобавлениеИзменениеНастроекОценочныхОбязательствЗарплатаКадры");
	Роли.Добавить("ЧтениеНастроекОбменаЗарплата3Бухгалтерия3");
	Роли.Добавить("ДобавлениеИзменениеДоговоров");
	Роли.Добавить("ДобавлениеИзменениеДоговоровЗарплатаКадры");
	Роли.Добавить("ДобавлениеИзменениеДанныхОТрудовойДеятельности");
	Роли.Добавить("ПубликацияРасчетныхЛистков");
	Роли.Добавить("ДобавлениеИзменениеИзвещенийФСС");
	Роли.Добавить("ИспользованиеОбработкиОбщиеФормыСЭДОФСС");
	
	// Кабинет сотрудника
	Роли.Добавить("ДобавлениеИзменениеЗаявокСотрудника");
	
	Возврат Роли;

КонецФункции

// Перечень ролей, предоставляющих доступ к настройке подсистемы.
// 
// Возвращаемое значение:
//  Массив - содержит строки, имена ролей
//
Функция РолиНастройки() Экспорт
	
	Роли = Новый Массив;
	
	Роли.Добавить("НастройкаБухгалтерскогоУчетаЗарплаты");
	Роли.Добавить("НастройкаКадровыхДанных");
	Роли.Добавить("НастройкаНалогиИВзносы");
	Роли.Добавить("НастройкаНачисленияЗарплаты");
	Роли.Добавить("ДобавлениеИзменениеОснованийПолномочийОтветственныхЛиц");
	Роли.Добавить("НастройкаДанныхДляНачисленияЗарплаты");
	
	// Кабинет сотрудника
	Роли.Добавить("НастройкаПравилОбработкиЗаявокСотрудников");
	Роли.Добавить("НастройкаСервисаКабинетСотрудника");
	Роли.Добавить("НастройкаСервисаКабинетСотрудникаБазовая");

	Возврат Роли;

КонецФункции

#КонецОбласти

#Область КадровыеДанные

Функция ПолучитьФизическоеЛицо(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФизическоеЛицо = Объект;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") или ТипОбъекта = Тип("СправочникОбъект.Сотрудники") Тогда
		ФизическоеЛицо = Объект.ФизическоеЛицо;
	Иначе
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ФизическоеЛицо;
	
КонецФункции

// Возвращает представление физического лица.
// Может выполнятся под ограниченными правами.
//
// Параметры:
//  ФизическоеЛицо - Справочник.ФизическиеЛица - Физическое лицо, по которому следует получить представление
//  ДатаСреза - Дата - Дата на которую получаются данные по физическому лицу
//
// Возвращаемое значение:
//   Структура - Структура с представлением физического лица, с ключами:
// * Фамилия - Строка
// * Имя - Строка
// * Отчество - Строка
// * ФамилияИО - Строка
// * ФИОПолные - Строка
//
Функция ПредставлениеФизическогоЛица(ФизическоеЛицо, ДатаСреза) Экспорт
	
	СписокКадровыхДанных = "Фамилия,Имя,Отчество,ФамилияИО,ФИОПолные";
	
	КадровыеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
		СписокКадровыхДанных,
		ДатаСреза);
	
	Результат = Новый Структура(СписокКадровыхДанных);
	
	КадровыеДанные = КадровыеДанныеФизЛиц.Найти(ФизическоеЛицо, "ФизическоеЛицо");
	Если КадровыеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, КадровыеДанные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает должность физического лица.
// 
// Параметры:
//  ФизическоеЛицо - Справочник.ФизическиеЛица - Физическое лицо, по которому следует получить представление
//  Организация - Справочник.Организации - Организация, в которой работает сотрудник, связанный с физическим лицом
//  ДатаСреза - Дата - Дата на которую получаются данные по физическому лицу
//
// Возвращаемое значение:
//   Должность - Справочник.Должности
//
Функция ДолжностьФизическогоЛица(ФизическоеЛицо, Организация, ДатаСреза) Экспорт
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация",                   Организация);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные",                "Должность,Организация");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Истина);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода",                 НачалоДня(ДатаСреза));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода",              КонецДня(ДатаСреза));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Отборы",                        Неопределено);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("СписокФизическихЛиц",           ФизическоеЛицо);
	
	УстановитьПривилегированныйРежим(Истина);
	// Правами доступа нельзя предоставить доступ только к части кадровых данных (должности).
	// Поэтому обращение к кадровым данным выполняется привилегированно -
	// считаем, что данные о должности физического лица в организации не являются секретными.
	// Из всех прочитанных кадровых данных функция вернет только должность физического лица
	КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Должность = Справочники.Должности.ПустаяСсылка();
	Иначе
		НайденныеСтроки = КадровыеДанные.НайтиСтроки(Новый Структура("Организация", Организация));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Должность = НайденныеСтроки[0].Должность;
		Иначе
			Должность = КадровыеДанные[0].Должность;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Должность;
	
КонецФункции

Функция ДанныеФизическихЛиц(Организация = Неопределено, ФизическиеЛица, ДатаСреза, ФИОКратко = Истина, РезультатТаблично = Ложь) Экспорт
	
	СписокФизическихЛиц = Новый Массив;
	Если ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
		Для Каждого ФизическоеЛицо ИЗ ФизическиеЛица Цикл
			Если СписокФизическихЛиц.Найти(ФизическоеЛицо) = Неопределено Тогда
				СписокФизическихЛиц.Добавить(ФизическоеЛицо);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	КонецЕсли;
	
	Если НЕ РезультатТаблично И СписокФизическихЛиц.Количество() > 1 Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокФизическихЛиц[0]);
	КонецЕсли;
	
	СписокПерсональныхДанных = "Фамилия,Имя,Отчество,Пол,ДатаРождения,МестоРождения,Страна,ФамилияИО,СтраховойНомерПФР,ИНН,ФИОПолные,ДокументВид,ДокументСерия,ДокументНомер,ДокументДатаВыдачи,ДокументКемВыдан,ДокументКодПодразделения,ДокументПредставление";
	СписокКадровыхДанных = "ТабельныйНомер,Подразделение,Должность,ДатаПриема,ОсновноеРабочееМестоВОрганизации";
	Если Организация <> Неопределено Тогда
		СписокДанныхСотрудника = СписокПерсональныхДанных + "," + СписокКадровыхДанных ;
	Иначе
		СписокДанныхСотрудника = СписокПерсональныхДанных;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация",                   Организация);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные",                СписокДанныхСотрудника);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода",                 НачалоДня(ДатаСреза));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода",              КонецДня(ДатаСреза));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Отборы",                        Неопределено);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("СписокФизическихЛиц",           СписокФизическихЛиц);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("РаботникиПоДоговорамГПХ",       Истина);
	
	КадровыеДанныеФизЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	НепринятыеФизическиеЛица = Новый Массив;
	Для Каждого ФизическоеЛицо ИЗ СписокФизическихЛиц Цикл
		Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		Если КадровыеДанныеФизЛиц.Найти(ФизическоеЛицо, "ФизическоеЛицо") = Неопределено Тогда
			НепринятыеФизическиеЛица.Добавить(ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	Если НепринятыеФизическиеЛица.Количество() <> 0 Тогда
		ПерсональныеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, НепринятыеФизическиеЛица, СписокПерсональныхДанных, ДатаСреза);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПерсональныеДанныеФизЛиц, КадровыеДанныеФизЛиц);
	КонецЕсли;
	
	Если РезультатТаблично Тогда
		
		ТабРезультат = Новый ТаблицаЗначений();
		// Сведения физ.лица
		ТабРезультат.Колонки.Добавить("ФизическоеЛицо",                   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТабРезультат.Колонки.Добавить("Фамилия",                          Метаданные.РегистрыСведений.ФИОФизическихЛиц.Ресурсы.Фамилия.Тип);
		ТабРезультат.Колонки.Добавить("Имя",                              Метаданные.РегистрыСведений.ФИОФизическихЛиц.Ресурсы.Имя.Тип);
		ТабРезультат.Колонки.Добавить("Отчество",                         Метаданные.РегистрыСведений.ФИОФизическихЛиц.Ресурсы.Отчество.Тип);
		ТабРезультат.Колонки.Добавить("Пол",                              Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица"));
		ТабРезультат.Колонки.Добавить("ДатаРождения",                     Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТабРезультат.Колонки.Добавить("МестоРождения",                    Метаданные.Справочники.ФизическиеЛица.Реквизиты.МестоРождения.Тип);
		ТабРезультат.Колонки.Добавить("Страна",                           Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
		ТабРезультат.Колонки.Добавить("Представление",                    Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250)));
		ТабРезультат.Колонки.Добавить("ИНН",                              Метаданные.Справочники.ФизическиеЛица.Реквизиты.ИНН.Тип);
		ТабРезультат.Колонки.Добавить("СтраховойНомерПФР",                Метаданные.Справочники.ФизическиеЛица.Реквизиты.СтраховойНомерПФР.Тип);
		ТабРезультат.Колонки.Добавить("ВидДокумента",                     Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
		ТабРезультат.Колонки.Добавить("Серия",                            Метаданные.РегистрыСведений.ДокументыФизическихЛиц.Ресурсы.Серия.Тип);
		ТабРезультат.Колонки.Добавить("Номер",                            Метаданные.РегистрыСведений.ДокументыФизическихЛиц.Ресурсы.Номер.Тип);
		ТабРезультат.Колонки.Добавить("ДатаВыдачи",                       Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТабРезультат.Колонки.Добавить("КемВыдан",                         Метаданные.РегистрыСведений.ДокументыФизическихЛиц.Ресурсы.КемВыдан.Тип);
		ТабРезультат.Колонки.Добавить("КодПодразделения",                 Метаданные.РегистрыСведений.ДокументыФизическихЛиц.Ресурсы.КодПодразделения.Тип);
		ТабРезультат.Колонки.Добавить("ПредставлениеДокумента",           Метаданные.РегистрыСведений.ДокументыФизическихЛиц.Ресурсы.Представление.Тип);
		// Сведения сотрудника
		ТабРезультат.Колонки.Добавить("ТабельныйНомер",                   Метаданные.Справочники.Сотрудники.СтандартныеРеквизиты.Код.Тип);
		ТабРезультат.Колонки.Добавить("Должность",                        Новый ОписаниеТипов("СправочникСсылка.Должности"));
		ТабРезультат.Колонки.Добавить("ПодразделениеОрганизации",         Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТабРезультат.Колонки.Добавить("Сотрудник",                        Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТабРезультат.Колонки.Добавить("ДатаПриема",                       Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТабРезультат.Колонки.Добавить("ОсновноеРабочееМестоВОрганизации", Новый ОписаниеТипов("Булево"));
		
	Иначе
		
		Результат = Новый Структура("Фамилия, Имя, Отчество, Пол, ДатаРождения, МестоРождения, Страна, Представление, ИНН, СтраховойНомерПФР, ТабельныйНомер, Должность, ПодразделениеОрганизации, ВидДокумента, Серия, Номер, ДатаВыдачи, КемВыдан, КодПодразделения, ПредставлениеДокумента, Сотрудник, ДатаПриема, ОсновноеРабочееМестоВОрганизации");
		
	КонецЕсли;
	
	ТолькоПерсональныеДанные = КадровыеДанныеФизЛиц.Колонки.Найти("ТабельныйНомер") = Неопределено;
	
	Для Каждого ФизическоеЛицо ИЗ СписокФизическихЛиц Цикл
		
		Если ТолькоПерсональныеДанные Тогда
			КадровыеДанныеФизЛица = КадровыеДанныеФизЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		Иначе
			КадровыеДанныеФизЛица = КадровыеДанныеФизЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицо, ОсновноеРабочееМестоВОрганизации", ФизическоеЛицо, Истина));
			Если КадровыеДанныеФизЛица.Количество() = 0 Тогда
				КадровыеДанныеФизЛица = КадровыеДанныеФизЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
			КонецЕсли;
		КонецЕсли;
		Если КадровыеДанныеФизЛица.Количество() = 0 Тогда
			ДанныеФизЛиц = КадровыеДанныеФизЛиц.Добавить();
			ДанныеФизЛиц.ФизическоеЛицо = ФизическоеЛицо;
		Иначе
			ДанныеФизЛиц = КадровыеДанныеФизЛица[0];
		КонецЕсли;
		
		Если РезультатТаблично Тогда
			Результат = ТабРезультат.Добавить();
			Результат.ФизическоеЛицо= ДанныеФизЛиц.ФизическоеЛицо;
		КонецЕсли;
		
		Результат.Фамилия       = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Фамилия, "");
		Результат.Имя           = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Имя, "");
		Результат.Отчество      = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Отчество, "");
		Результат.Пол           = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Пол, Перечисления.ПолФизическогоЛица.ПустаяСсылка());
		Результат.ДатаРождения  = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДатаРождения, Дата(1, 1, 1));
		Результат.МестоРождения = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.МестоРождения, "");
		Результат.Страна        = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Страна, Справочники.СтраныМира.Россия);
		Если ФИОКратко Тогда
			Результат.Представление = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ФамилияИО, "");
		Иначе
			Результат.Представление = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ФИОПолные, "");
		КонецЕсли;
		Результат.ВидДокумента             = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументВид, "");
		Результат.Серия                    = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументСерия, "");
		Результат.Номер                    = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументНомер, "");
		Результат.ДатаВыдачи               = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументДатаВыдачи, "");
		Результат.КемВыдан                 = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументКемВыдан, "");
		Результат.КодПодразделения         = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументКодПодразделения, "");
		Результат.ПредставлениеДокумента   = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументПредставление, "");
		Результат.ИНН                      = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ИНН, "");
		Результат.СтраховойНомерПФР        = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.СтраховойНомерПФР, "");
		Если Не ТолькоПерсональныеДанные Тогда
			Результат.ТабельныйНомер                   = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ТабельныйНомер, ""), Истина, Истина);
			Результат.Должность                        = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Должность, "");
			Результат.ПодразделениеОрганизации         = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Подразделение, "");
			Результат.Сотрудник                        = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Сотрудник, "");
			Результат.ДатаПриема                       = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДатаПриема, "");
			Результат.ОсновноеРабочееМестоВОрганизации = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ОсновноеРабочееМестоВОрганизации, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатТаблично Тогда
		Возврат ТабРезультат;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьТаблицуСотрудников(ТаблицаФизическихЛиц) Экспорт
	
	ТаблицаФизическихЛиц.Колонки.Добавить("Сотрудник",                            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФизическихЛиц.Колонки.Добавить("СотрудникКод",                         Новый ОписаниеТипов("Строка"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПодразделениеСотрудника",              Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПодразделениеСотрудникаКод",           Новый ОписаниеТипов("Строка"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПредставлениеПодразделенияСотрудника", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаФизическихЛиц Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСотрудника = ДанныеФизическихЛиц(СтрокаТаблицы.Организация, СтрокаТаблицы.ФизическоеЛицо, СтрокаТаблицы.Дата);
		Подразделение = ДанныеСотрудника.ПодразделениеОрганизации;
		СтрокаТаблицы.ПодразделениеСотрудника = ДанныеСотрудника.ПодразделениеОрганизации;
		СтрокаТаблицы.СотрудникКод            = ДанныеСотрудника.ТабельныйНомер;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			СтрокаТаблицы.ПодразделениеСотрудникаКод = Подразделение.Код;
			Если ЗначениеЗаполнено(Подразделение.НаименованиеПолное) Тогда
				СтрокаТаблицы.ПредставлениеПодразделенияСотрудника = Подразделение.НаименованиеПолное;
			Иначе
				СтрокаТаблицы.ПредставлениеПодразделенияСотрудника = Подразделение.Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
		
КонецПроцедуры

Функция ФизическиеЛицаРаботавшиеВОрганизации(ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение = Неопределено) Экспорт
	
	Возврат КадровыйУчет.ФизическиеЛицаРаботавшиеВОрганизации(ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение);
	
КонецФункции

// Возвращает признак необходимости начислять зарплату
// для данной организации в указанный период
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//		Период      - Дата
//
// Возвращаемое значение:
//		Булево
//
Функция НеобходимоНачислятьЗарплату(Организация, Период) Экспорт
	
	ЭтоФизЛицо	= Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	Если НЕ УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоФизЛицо И НЕ ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация",                   Организация);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные",                "");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода",                 ?(ЭтоФизЛицо, НачалоМесяца(Период), '00010101'));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода",              КонецМесяца(Период));
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Отборы",                        Неопределено);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("РаботникиПоДоговорамГПХ",       Истина);
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		// При отсутствии регулярной деятельности
		// игнорируем сотрудников в отпуске без содержания
		ТаблицаСотрудников = АктивныеСотрудники(ТаблицаСотрудников, Период);
	КонецЕсли;
	
	Возврат ТаблицаСотрудников.Количество() > 0;
	
КонецФункции

Функция ИПИспользуетТрудНаемныхРаботников(Организация, ПроверятьФункциональность = Истина) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверятьФункциональность Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетЗарплатыКадров") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		ОрганизацияСсылка = Организация;
	ИначеЕсли  ТипЗнч(Организация) = Тип("СправочникОбъект.Организации")
		И Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ОрганизацияСсылка = Организация.Ссылка;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// Дальнейшая проверка только для индивидуального предпринимателя
	
	// при наличии регистрации в ФСС можно судить о наличии работников
	
	РегистрационныйНомерФСС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "РегистрационныйНомерФСС");
	Если ЗначениеЗаполнено(РегистрационныйНомерФСС) Тогда
		Возврат Истина;
	КонецЕсли;

	// не заполняли реквизиты, а сотрудников ввели
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОрганизацияСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетЗарплатыКадров") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		ОрганизацияСсылка = Организация;
	ИначеЕсли  ТипЗнч(Организация) = Тип("СправочникОбъект.Организации")
		И Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ОрганизацияСсылка = Организация.Ссылка;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	// Дальнейшая проверка только для индивидуального предпринимателя
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В заданном периоде были сотрудники (актуально только для внутреннего учета)
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация",                   ОрганизацияСсылка);
		ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные",                "");
		ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
		ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода",                 НачалоПериода);
		ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода",              КонецПериода);
		ПараметрыПолученияСотрудниковОрганизаций.Вставить("Отборы",                        Неопределено);
		ПараметрыПолученияСотрудниковОрганизаций.Вставить("РаботникиПоДоговорамГПХ",       Истина);
		
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
		
		Если ТаблицаСотрудников.Количество() <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	// В заданном периоде были начисления (зарплата, ГПХ, взносы)
	СчетаРасчетов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаРасчетов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаРасчетов,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами));
		
	СчетаВзносов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВзносов ,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ФСС));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВзносов ,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПФР));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВзносов ,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ФОМС));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВзносов ,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ));
	
	// Необходимо исключить обороты операций, не являющихся начислением взносов (возврат из фондов, корректировки и т.п.)
	КорСчетаПрочихОпераций = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчетаПрочихОпераций,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчетаПрочихОпераций,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчетаПрочихОпераций, СчетаВзносов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",            ОрганизацияСсылка);
	Запрос.УстановитьПараметр("НачалоПериода",          НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",           КонецПериода);
	Запрос.УстановитьПараметр("СчетаРасчетов",          СчетаРасчетов);
	Запрос.УстановитьПараметр("СчетаВзносов",           СчетаВзносов);
	Запрос.УстановитьПараметр("КорСчетаПрочихОпераций", КорСчетаПрочихОпераций);
	Запрос.УстановитьПараметр("ВидыПлатежей",           Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОбороты.Организация КАК Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В (&СчетаВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосбюджет),
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежей),
	|			НЕ КорСчет В (&КорСчетаПрочихОпераций),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотКт <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОбороты.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&СчетаРасчетов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотКт <> 0";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция ПолучитьДокументНачисленияЗарплаты(МесяцНачисления, Организация, СообщениеОбОшибке = "") Экспорт
	
	ДокументНачисленияЗарплаты = Неопределено;
	Попытка
		ДокументНачисленияЗарплаты = РасчетЗарплаты.ДокументНачисленияЗарплаты(МесяцНачисления, Организация);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать документ'");		
		ОписаниеОшибки = ИнформацияОбОшибке();
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(ШаблонСообщения, УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
	КонецПопытки;
	
	Возврат ДокументНачисленияЗарплаты;
	
КонецФункции

Функция ЕстьДокументНачисленияЗарплаты(МесяцНачисления, Организация) Экспорт

	ДокументНачисления = НайтиДокументНачисленияЗарплаты(МесяцНачисления, Организация);

	Возврат ЗначениеЗаполнено(ДокументНачисления);

КонецФункции

Функция ПолучитьДокументНачисленияРезерваОтпусков(МесяцНачисления, Организация) Экспорт
	
	ДокументНачисленияРезерваОтпусков = Неопределено;
	Попытка
		ДокументНачисленияРезерваОтпусков = РезервОтпусков.ДокументНачислениеОценочныхОбязательствПоОтпускам(МесяцНачисления, Организация);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать документ'");		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ШаблонСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки;
	
	Возврат ДокументНачисленияРезерваОтпусков;
	
КонецФункции

Функция ЕстьДокументНачисленияРезервовОтпусков(МесяцНачисления, Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", 	НачалоМесяца(МесяцНачисления));

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеОценочныхОбязательствПоОтпускам.Ссылка КАК Документ
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК НачислениеОценочныхОбязательствПоОтпускам
	|ГДЕ
	|	НачислениеОценочныхОбязательствПоОтпускам.ПериодРегистрации = &МесяцНачисления
	|	И НачислениеОценочныхОбязательствПоОтпускам.Организация = &Организация
	|	И НачислениеОценочныхОбязательствПоОтпускам.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеОценочныхОбязательствПоОтпускам.Дата,
	|	НачислениеОценочныхОбязательствПоОтпускам.Ссылка";

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Процедура СформироватьКадровыеПриказы() Экспорт
	
	КадровыйУчетБазовый.СформироватьКадровыеПриказы();
	
КонецПроцедуры

Функция СоздатьФизическоеЛицо(Наименование, ИНН, СсылкаНового = Неопределено) Экспорт

	ДанныеФизическогоЛица = Новый Структура;
	ДанныеФизическогоЛица.Вставить("ИНН", ИНН);
	Если СсылкаНового <> Неопределено Тогда
		ДанныеФизическогоЛица.Вставить("Ссылка", СсылкаНового);
	КонецЕсли;
	НовоеФизическоеЛицо = КадровыйУчет.НовоеФизическоеЛицо(Наименование, ДанныеФизическогоЛица);
	Возврат НовоеФизическоеЛицо.Ссылка;
	
КонецФункции

Функция СоздатьСчетФизическогоЛица(ФизическоеЛицо, СтруктураРеквизиовСчета) Экспорт
	
	НовыйЭлемент = Справочники.БанковскиеСчета.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураРеквизиовСчета,
	"НомерСчета, Банк, БанкДляРасчетов, ВалютаДенежныхСредств, ВидСчета, ТекстКорреспондента, ТекстНазначения, МесяцПрописью, СуммаБезКопеек, ВсегдаУказыватьКПП");
	НовыйЭлемент.Владелец = ФизическоеЛицо;
	НовыйЭлемент.Наименование = Лев(СокрЛП(СтруктураРеквизиовСчета.НомерСчета) + ", " + СтруктураРеквизиовСчета.Банк, 100);
	
	Если НовыйЭлемент.ПолучитьСсылкуНового().Пустая() Тогда
		НовыйЭлемент.УстановитьСсылкуНового(Справочники.БанковскиеСчета.ПолучитьСсылку());
	КонецЕсли;
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Функция Просклонять(Знач ФИО, Знач Падеж, Результат, Знач Пол = Неопределено) Экспорт
	
	Возврат ФизическиеЛицаЗарплатаКадры.Просклонять(ФИО, Падеж, Результат, Пол);
	
КонецФункции

// Возвращает ссылку на документ начисления зарплаты за месяц по организации.
// Если документа не существует, то возвращает пустую ссылку.
//
// Параметры:
//	МесяцНачисления - Дата - Первое число месяца.
//	Организация - СправочникСсылка.Организации - Организация.
//
// Возвращаемое значение:
//	ДокументСсылка.НачислениеЗарплаты - найденный документ или пустая ссылка.
//
Функция НайтиДокументНачисленияЗарплаты(МесяцНачисления, Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", 	НачалоМесяца(МесяцНачисления));

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.Ссылка КАК Документ
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.МесяцНачисления = &МесяцНачисления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И НачислениеЗарплаты.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеЗарплаты.Дата,
	|	НачислениеЗарплаты.Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	Иначе
		Результат = Документы.НачислениеЗарплаты.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ФизическоеЛицо(Фамилия, Имя, Отчество, Пол, ДатаРождения, НомераДокументов, УникальныйИдентификатор = Неопределено, ЭтоНовый = Ложь) Экспорт
	
	Ссылка = Неопределено;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(УникальныйИдентификатор);
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			Возврат Ссылка;
		КонецЕсли;
	КонецЕсли;
		
	ФизическиеЛицаПоИмени = СотрудникиФормы.ПодобратьСписокФизЛиц(Справочники.ФизическиеЛица.ПустаяСсылка(), Фамилия, Имя, Отчество);
	
	НайденыЛюдиПоИмени = Не ФизическиеЛицаПоИмени.ФизическоеЛицоУникально;
	
	Если НайденыЛюдиПоИмени Тогда
		
		// свойство ДанныеФизическихЛицДоступны определено только если люди найдены
		Если Не ФизическиеЛицаПоИмени.ДанныеФизическихЛицДоступны Тогда
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		Для Каждого ОписаниеФизическогоЛица Из ФизическиеЛицаПоИмени.ДанныеФизическихЛиц Цикл
			
			Если ЗначениеЗаполнено(ОписаниеФизическогоЛица.ДатаРождения) 
				И ЗначениеЗаполнено(ДатаРождения)
				И ОписаниеФизическогоЛица.ДатаРождения <> ДатаРождения Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат ОписаниеФизическогоЛица.ФизическоеЛицо;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Не нашли - создадим
	ФИО = Новый Структура;
	ФИО.Вставить("Фамилия",  Фамилия);
	ФИО.Вставить("Имя",      Имя);
	ФИО.Вставить("Отчество", Отчество);
	
	ДанныеФизическогоЛица = Новый Структура;
	ДанныеФизическогоЛица.Вставить("Пол", Пол);
	
	Если ЗначениеЗаполнено(ДатаРождения) Тогда
		ДанныеФизическогоЛица.Вставить("ДатаРождения", ДатаРождения);
	КонецЕсли;
	
	Если Ссылка <> Неопределено Тогда
		ДанныеФизическогоЛица.Вставить("Ссылка", Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Истина;
	
	Возврат КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица).Ссылка;
	
КонецФункции

Функция ОплаченныеДоговорыПодрядаСотрудниковИП(Организация, ФизическиеЛица, ДокументыОплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица",  ФизическиеЛица);
	Запрос.УстановитьПараметр("ДокументыОплаты", ДокументыОплаты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПРасходыНаОплатуТруда.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ИПРасходыНаОплатуТруда.ФизЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_ОплаченныеДокументыНачисления
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда КАК ИПРасходыНаОплатуТруда
	|ГДЕ
	|	ИПРасходыНаОплатуТруда.Регистратор В(&ДокументыОплаты)
	|	И ИПРасходыНаОплатуТруда.ФизЛицо В(&ФизическиеЛица)
	|	И ИПРасходыНаОплатуТруда.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыНачисленияПоДоговорам.ДокументОснование.Дата КАК ДатаДоговора,
	|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачислениеЗарплатыНачисленияПоДоговорам
	|ГДЕ
	|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ОплаченныеДокументыНачисления.РасчетныйДокумент
	|			ИЗ
	|				ВТ_ОплаченныеДокументыНачисления)
	|	И НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				ВТ_ОплаченныеДокументыНачисления.ФизическоеЛицо
	|			ИЗ
	|				ВТ_ОплаченныеДокументыНачисления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДоговора";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьСписокСтавок(Элемент) Экспорт
	
	ТаблицаСтавок = Новый ТаблицаЗначений;
	ТаблицаСтавок.Колонки.Добавить("КоличествоСтавок", ОбщегоНазначения.ОписаниеТипаЧисло(3,2));
	
	// Заполняем основными вариантами ставок
	НоваяСтрока = ТаблицаСтавок.Добавить();
	НоваяСтрока.КоличествоСтавок = 1;
	
	НоваяСтрока = ТаблицаСтавок.Добавить();
	НоваяСтрока.КоличествоСтавок = 0.75;

	НоваяСтрока = ТаблицаСтавок.Добавить();
	НоваяСтрока.КоличествоСтавок = 0.5;

	НоваяСтрока = ТаблицаСтавок.Добавить();
	НоваяСтрока.КоличествоСтавок = 0.25;
	
	// Получаем список используемых ставок
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадроваяИсторияСотрудников.КоличествоСтавок
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.КоличествоСтавок <> 0";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТаблицаСтавок.Найти(Выборка.КоличествоСтавок) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСтавок.Добавить(), Выборка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСтавок.Сортировать("КоличествоСтавок Убыв");
	
	Элемент.СписокВыбора.Очистить();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаСтавок Цикл
		Элемент.СписокВыбора.Добавить(СтрокаТаблицы.КоличествоСтавок);
	КонецЦикла;
	Элемент.СписокВыбора.Добавить("Другая");
	
КонецПроцедуры

Функция АктивныеСотрудники(ТаблицаСотрудников, Период)
	
	// Исключаем из списка сотрудников,
	// которые в отпуске без сохранения
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",         НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОкончания",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТТаблицаСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиВОтпуске
	|ИЗ
	|	ВТТаблицаСотрудников КАК ВТТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|		ПО ВТТаблицаСотрудников.Сотрудник = ОтпускБезСохраненияОплаты.Сотрудник
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.ДатаНачала <= &ДатаНачала
	|	И ОтпускБезСохраненияОплаты.ДатаОкончания >= &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускБезСохраненияОплаты.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТТаблицаСотрудников КАК ВТТаблицаСотрудников
	|ГДЕ
	|	НЕ ВТТаблицаСотрудников.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСотрудникиВОтпуске.Сотрудник
	|				ИЗ
	|					ВТСотрудникиВОтпуске)";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ЗаписьЭлектроннойТрудовойКнижки

Процедура СтатусЗаписиЭлектроннойТрудовойКнижки(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.МероприятиеПереданоПФР = Ложь;
	Форма.ЗаписиТрудовойКнижки.Очистить();
	
	Если Объект.Проведен Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
			|	МероприятияТрудовойДеятельности.Отменено КАК Отменено
			|ПОМЕСТИТЬ ВТИдМероприятий
			|ИЗ
			|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
			|ГДЕ
			|	МероприятияТрудовойДеятельности.Регистратор = &Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИдМероприятий.ИдМероприятия КАК ИдМероприятия
			|ИЗ
			|	ВТИдМероприятий КАК ИдМероприятий";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			СостояниеМероприятияТрудовойДеятельности(Форма, Запрос);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.НадписьЗаписьЭлектроннойТрудовойКнижки = ПредставлениеСтатусаЗаписиЭлектроннойТрудовойКнижки(Форма);
	
КонецПроцедуры

Процедура СостояниеМероприятияТрудовойДеятельности(Форма, Запрос)
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдМероприятий.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияТрудовойДеятельностиПереданные.Регистратор КАК Регистратор,
		|	МероприятияТрудовойДеятельностиПереданные.Регистратор.Номер КАК Номер,
		|	МероприятияТрудовойДеятельностиПереданные.Регистратор.Дата КАК Дата,
		|	МероприятияТрудовойДеятельностиПереданные.ПринятоВПФР КАК ДокументПринятВПФР,
		|	ВЫБОР
		|		КОГДА МероприятияТрудовойДеятельностиПереданные.Регистратор.ДокументПринятВПФР ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК МероприятиеПереданоПФР,
		|	ЖурналОтчетовСтатусы.Статус КАК Статус
		|ИЗ
		|	ВТИдМероприятий КАК ИдМероприятий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияТрудовойДеятельностиПереданные
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
		|			ПО МероприятияТрудовойДеятельностиПереданные.Регистратор = ЖурналОтчетовСтатусы.Ссылка
		|		ПО ИдМероприятий.ИдМероприятия = МероприятияТрудовойДеятельностиПереданные.ИдМероприятия
		|			И ИдМероприятий.Отменено = МероприятияТрудовойДеятельностиПереданные.Отменено";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Форма.ЗаписиТрудовойКнижки.Добавить();
			НоваяСтрока.ЗаписьЭлектроннойТрудовойКнижки = Выборка.Регистратор;
			Форма.МероприятиеПереданоПФР = Выборка.МероприятиеПереданоПФР;
			Если Выборка.ДокументПринятВПФР Тогда
				НоваяСтрока.Статус = НСтр("ru = 'принято в ПФР'");
			ИначеЕсли ПустаяСтрока(Выборка.Статус) Тогда
				НоваяСтрока.Статус = НСтр("ru = 'в работе'");
			Иначе
				НоваяСтрока.Статус = НРег(Лев(Выборка.Статус, 1)) + Сред(Выборка.Статус,2);
			КонецЕсли;
			НоваяСтрока.Представление = СтрШаблон(НСтр("ru = 'СЗВ-ТД №%1 от %2 (%3)'"), Выборка.Номер, Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"),НоваяСтрока.Статус);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеСтатусаЗаписиЭлектроннойТрудовойКнижки(Форма)
	
	Если Форма.ЗаписиТрудовойКнижки.Количество() = 0 Тогда
		
		ПредставлениеЗаписи = Новый ФорматированнаяСтрока(НСтр("ru = 'СЗВ-ТД отсутствует'"));
		
	ИначеЕсли Форма.ЗаписиТрудовойКнижки.Количество() = 1 Тогда
		
		ПредставлениеЗаписи = Новый ФорматированнаяСтрока(Форма.ЗаписиТрудовойКнижки[0].Представление, , , , "ссылка");
		
	Иначе
		
		ПредставлениеКоличества = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(%1 %2)'"),
				Форма.ЗаписиТрудовойКнижки.Количество(),
				СтрокаСЧислом("; документ; ; документа; документов; документа",
					Форма.ЗаписиТрудовойКнижки.Количество(),
					ВидЧисловогоЗначения.Количественное,
					"L=ru_RU"));
					
		ПредставлениеДокументов  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'СЗВ-ТД %1'"),
			ПредставлениеКоличества);
			
		ПредставлениеЗаписи = Новый ФорматированнаяСтрока(ПредставлениеДокументов,, , , "ссылка");
		
	КонецЕсли;
	
	Возврат ПредставлениеЗаписи
	
КонецФункции

Процедура УправлениеДоступностьюКадровыхРеквизитов(Форма, ДоступностьКадровыхРеквизитов, ФормаСотрудника = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("НаименованиеДокумента");
	МассивРеквизитов.Добавить("НомерПриказа");
	МассивРеквизитов.Добавить("Дата");
	МассивРеквизитов.Добавить("Сотрудник");
	МассивРеквизитов.Добавить("ДатаНачала");
	МассивРеквизитов.Добавить("ВидЗанятости");
	МассивРеквизитов.Добавить("Подразделение");
	МассивРеквизитов.Добавить("Должность");
	МассивРеквизитов.Добавить("ТрудоваяФункция");
	МассивРеквизитов.Добавить("ОбособленноеПодразделение");
	МассивРеквизитов.Добавить("СтатьяТКРФ");
	МассивРеквизитов.Добавить("ОтразитьВТрудовойКнижке");
	МассивРеквизитов.Добавить("ЭлектронныеТрудовыеКнижки_ОтразитьВТрудовойКнижке");
	
	Если НЕ ФормаСотрудника
		ИЛИ (ФормаСотрудника И НЕ Форма.ИспользоватьКадровыйУчет) Тогда
		МассивРеквизитов.Добавить("ДатаПриема");
		МассивРеквизитов.Добавить("ДатаУвольнения");
		МассивРеквизитов.Добавить("ТекущееПодразделение");
		МассивРеквизитов.Добавить("ТекущаяДолжность");
		МассивРеквизитов.Добавить("ТекущийВидЗанятости");
	КонецЕсли;
	
	Если НЕ ФормаСотрудника Тогда
		МассивРеквизитов.Добавить("НаименованиеВторогоДокументаОснования");
		МассивРеквизитов.Добавить("СерияВторогоДокументаОснования");
		МассивРеквизитов.Добавить("НомерВторогоДокументаОснования");
		МассивРеквизитов.Добавить("ДатаВторогоДокументаОснования");
		МассивРеквизитов.Добавить("ЕстьВторойДокументОснование");
	КонецЕсли;
	
	Для Каждого ЗначениеМассива Из МассивРеквизитов Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ЗначениеМассива,
			"ТолькоПросмотр",
			НЕ ДоступностьКадровыхРеквизитов);
		
	КонецЦикла;
	
	ПравоРедактирования = ПравоДоступа("Редактирование", Метаданные.Справочники.Сотрудники);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаИндикатораЭТК",
		"Видимость",
		НЕ ДоступностьКадровыхРеквизитов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаБаннерСКнопкой",
		"Видимость",
		ПравоРедактирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаБаннерСТекстомРедактирование",
		"Видимость",
		ПравоРедактирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаБаннерСТекстомПросмотр",
		"Видимость",
		НЕ ПравоРедактирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИзменитьДокументЭТК",
		"Доступность",
		ПравоРедактирования И НЕ Форма.ТолькоПросмотр);
		
КонецПроцедуры

Процедура УправлениеФормойКадровогоМероприятия(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЕстьЗаписиТрудовойКнижки = Форма.ЗаписиТрудовойКнижки.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаписьЭлектроннойТрудовойКнижкиСсылка",
		"Видимость",
		ЕстьЗаписиТрудовойКнижки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаписьЭлектроннойТрудовойКнижкиКнопка",
		"Видимость",
		НЕ ЕстьЗаписиТрудовойКнижки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗарегистрироватьЗаписьЭлектроннойТрудовойКнижки",
		"Доступность",
		Объект.ОтразитьВТрудовойКнижке);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованияКадровыхДокументов() Экспорт
	
	МассивНаименований = Новый Массив;
	МассивНаименований.Добавить(НСтр("ru = 'Приказ'"));
	МассивНаименований.Добавить(НСтр("ru = 'Постановление'"));
	МассивНаименований.Добавить(НСтр("ru = 'Протокол'"));
	МассивНаименований.Добавить(НСтр("ru = 'Распоряжение'"));
	МассивНаименований.Добавить(НСтр("ru = 'Решение'"));
	МассивНаименований.Добавить(НСтр("ru = 'Уведомление'"));
	МассивНаименований.Добавить(НСтр("ru = 'Присвоение'"));
	МассивНаименований.Добавить(НСтр("ru = 'Решение общего собрания'"));
	МассивНаименований.Добавить(НСтр("ru = 'Решение единственного учредителя'"));
	МассивНаименований.Добавить(НСтр("ru = 'Протокол общего собрания участников общества'"));
	МассивНаименований.Добавить(НСтр("ru = 'Протокол заседания Правления'"));
	
	ВидСтроки = "НаименованиеДокументаТК";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСтроки", ВидСтроки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСтроковыхРеквизитов.ЗначениеСтроки КАК НаименованиеДокумента
	|ИЗ
	|	РегистрСведений.ЗначенияСтроковыхРеквизитов КАК ЗначенияСтроковыхРеквизитов
	|ГДЕ
	|	ЗначенияСтроковыхРеквизитов.ВидСтроки = &ВидСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого ЗначениеМассива ИЗ МассивНаименований Цикл
			Если ВРег(ЗначениеМассива) = ВРег(СокрЛП(Выборка.НаименованиеДокумента)) Тогда
				СуществующееНаименование = МассивНаименований.Найти(ЗначениеМассива);
				МассивНаименований.Удалить(СуществующееНаименование);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если МассивНаименований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЗначенияСтроковыхРеквизитов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидСтроки.Установить(ВидСтроки);
	НаборЗаписей.Прочитать();
	
	Для Каждого НаименованиеДокумента ИЗ МассивНаименований Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ВидСтроки      = ВидСтроки;
		НоваяЗапись.ЗначениеСтроки = НаименованиеДокумента;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура ЗаполнитьНомераИНаименованияКадровыхДокументов() Экспорт
	
	НаименованиеДокумента = НСтр("ru = 'Приказ'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	(ПриемНаРаботу.НаименованиеДокумента ПОДОБНО &ПустаяСтрока
	|			ИЛИ ПриемНаРаботу.НомерПриказа ПОДОБНО &ПустаяСтрока)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровыйПеревод.Ссылка
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|ГДЕ
	|	(КадровыйПеревод.НаименованиеДокумента ПОДОБНО &ПустаяСтрока
	|			ИЛИ КадровыйПеревод.НомерПриказа ПОДОБНО &ПустаяСтрока)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Увольнение.Ссылка
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	(Увольнение.НаименованиеДокумента ПОДОБНО &ПустаяСтрока
	|			ИЛИ Увольнение.НомерПриказа ПОДОБНО &ПустаяСтрока)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.НаименованиеДокумента) Тогда
				ДокументОбъект.НаименованиеДокумента = НаименованиеДокумента;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.НомерПриказа) Тогда
				ДокументОбъект.НомерПриказа = ЭлектронныеТрудовыеКнижкиВызовСервера.НомерНаПечать(ДокументОбъект.Номер);
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать кадровый документ
			|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СтатусЗаписиЭлектроннойТрудовойКнижкиСотрудника(Форма) Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет")) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Форма.МероприятиеПереданоПФР = Ложь;
	Форма.ЗаписиТрудовойКнижки.Очистить();
	
	ВидыМероприятий = Новый Массив;
	Если ЗначениеЗаполнено(Форма.ДатаУвольнения) Тогда
		ДатаМероприятия = Форма.ДатаУвольнения;
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение);
	Иначе
		ДатаМероприятия = Форма.ДатаПриема;
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Прием);
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод);
	КонецЕсли;
	
	ЗаполнятьПодразделения = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ТекущаяОрганизация, "НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности");
	Если ЗаполнятьПодразделения Тогда
		ПодразделениеОрганизации = Форма.ТекущееПодразделение;
	Иначе
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",           Форма.ТекущаяОрганизация);
	Запрос.УстановитьПараметр("Сотрудник",             Форма.СотрудникСсылка);
	Запрос.УстановитьПараметр("ФизическоеЛицо",        Форма.ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("ДатаМероприятия",       ДатаМероприятия);
	Запрос.УстановитьПараметр("Подразделение",         ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("Должность",             Форма.ТекущаяДолжность);
	Запрос.УстановитьПараметр("ЯвляетсяСовместителем", Форма.ТекущийВидЗанятости <> Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	Запрос.УстановитьПараметр("ВидыМероприятий",       ВидыМероприятий);
	Запрос.УстановитьПараметр("ТекущаяДата",           КонецДня(ТекущаяДатаСеанса()+86400));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия
	|ПОМЕСТИТЬ ВТ_ОтмененныеМероприятия
	|ИЗ
	|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
	|ГДЕ
	|	МероприятияТрудовойДеятельности.ФизическоеЛицо = &ФизическоеЛицо
	|	И МероприятияТрудовойДеятельности.Организация = &Организация
	|	И МероприятияТрудовойДеятельности.Сотрудник = &Сотрудник
	|	И МероприятияТрудовойДеятельности.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МероприятияТрудовойДеятельности.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МероприятияТрудовойДеятельности.Организация КАК Организация,
	|	МероприятияТрудовойДеятельности.Сотрудник КАК Сотрудник,
	|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
	|	МероприятияТрудовойДеятельности.Отменено КАК Отменено,
	|	МероприятияТрудовойДеятельности.ДатаМероприятия КАК ДатаМероприятия,
	|	МероприятияТрудовойДеятельности.Подразделение КАК Подразделение,
	|	МероприятияТрудовойДеятельности.Должность КАК Должность,
	|	МероприятияТрудовойДеятельности.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
	|	МероприятияТрудовойДеятельности.ВидМероприятия КАК ВидМероприятия
	|ПОМЕСТИТЬ ВТ_Мероприятия
	|ИЗ
	|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
	|ГДЕ
	|	МероприятияТрудовойДеятельности.Организация = &Организация
	|	И МероприятияТрудовойДеятельности.ФизическоеЛицо = &ФизическоеЛицо
	|	И МероприятияТрудовойДеятельности.Сотрудник = &Сотрудник
	|	И НЕ МероприятияТрудовойДеятельности.Отменено
	|	И ВЫБОР
	|			КОГДА МероприятияТрудовойДеятельности.ВидМероприятия <> ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Увольнение)
	|				ТОГДА МероприятияТрудовойДеятельности.ДатаМероприятия <= &ТекущаяДата
	|			ИНАЧЕ МероприятияТрудовойДеятельности.ДатаМероприятия = &ДатаМероприятия
	|		КОНЕЦ
	|	И МероприятияТрудовойДеятельности.ВидМероприятия В(&ВидыМероприятий)
	|	И НЕ МероприятияТрудовойДеятельности.ИдМероприятия В
	|				(ВЫБРАТЬ
	|					ВТ_ОтмененныеМероприятия.ИДМероприятия
	|				ИЗ
	|					ВТ_ОтмененныеМероприятия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Мероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Мероприятия.Организация КАК Организация,
	|	ВТ_Мероприятия.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТ_Мероприятия.ДатаМероприятия) КАК ДатаМероприятия
	|ПОМЕСТИТЬ ВТ_ПоследнееМероприятие
	|ИЗ
	|	ВТ_Мероприятия КАК ВТ_Мероприятия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Мероприятия.Организация,
	|	ВТ_Мероприятия.Сотрудник,
	|	ВТ_Мероприятия.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследнееМероприятие.Организация КАК Организация,
	|	ВТ_ПоследнееМероприятие.Сотрудник КАК Сотрудник,
	|	ВТ_ПоследнееМероприятие.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Мероприятия.ИдМероприятия КАК ИдМероприятия,
	|	ВТ_Мероприятия.Отменено КАК Отменено
	|ПОМЕСТИТЬ ВТИдМероприятий
	|ИЗ
	|	ВТ_ПоследнееМероприятие КАК ВТ_ПоследнееМероприятие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Мероприятия КАК ВТ_Мероприятия
	|		ПО ВТ_ПоследнееМероприятие.ФизическоеЛицо = ВТ_Мероприятия.ФизическоеЛицо
	|			И ВТ_ПоследнееМероприятие.Сотрудник = ВТ_Мероприятия.Сотрудник
	|			И ВТ_ПоследнееМероприятие.Организация = ВТ_Мероприятия.Организация
	|			И ВТ_ПоследнееМероприятие.ДатаМероприятия = ВТ_Мероприятия.ДатаМероприятия
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_Мероприятия.ВидМероприятия <> ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Увольнение)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_Мероприятия.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием)
	|							ТОГДА ВТ_Мероприятия.Подразделение = &Подразделение
	|									И ВТ_Мероприятия.Должность = &Должность
	|									И ВТ_Мероприятия.ЯвляетсяСовместителем = &ЯвляетсяСовместителем
	|									И ВТ_Мероприятия.ДатаМероприятия = &ДатаМероприятия
	|						ИНАЧЕ ВТ_Мероприятия.Подразделение = &Подразделение
	|								И ВТ_Мероприятия.Должность = &Должность
	|								И ВТ_Мероприятия.ЯвляетсяСовместителем = &ЯвляетсяСовместителем
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдМероприятий.ИдМероприятия КАК ИдМероприятия
	|ИЗ
	|	ВТИдМероприятий КАК ИдМероприятий";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗаписьЭлектроннойТрудовойКнижкиКнопка",
		"Видимость",
		РезультатЗапроса.Пустой());
		
	Если Не РезультатЗапроса.Пустой() Тогда
		СостояниеМероприятияТрудовойДеятельности(Форма, Запрос);
	ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МероприятияТрудовойДеятельности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МероприятияТрудовойДеятельности.Организация КАК Организация,
		|	МероприятияТрудовойДеятельности.Сотрудник КАК Сотрудник,
		|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияТрудовойДеятельности.Отменено КАК Отменено
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
		|ГДЕ
		|	МероприятияТрудовойДеятельности.Организация = &Организация
		|	И МероприятияТрудовойДеятельности.ФизическоеЛицо = &ФизическоеЛицо
		|	И МероприятияТрудовойДеятельности.Сотрудник = &Сотрудник
		|	И НЕ МероприятияТрудовойДеятельности.Отменено
		|	И (МероприятияТрудовойДеятельности.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием)
		|				И МероприятияТрудовойДеятельности.ДатаМероприятия = &ДатаМероприятия
		|			ИЛИ МероприятияТрудовойДеятельности.ВидМероприятия <> ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием)
		|				И МероприятияТрудовойДеятельности.ДатаМероприятия >= &ДатаМероприятия)
		|	И МероприятияТрудовойДеятельности.ВидМероприятия <> ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Увольнение)
		|	И НЕ МероприятияТрудовойДеятельности.ИдМероприятия В
		|				(ВЫБРАТЬ
		|					ВТ_ОтмененныеМероприятия.ИДМероприятия
		|				ИЗ
		|					ВТ_ОтмененныеМероприятия)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Форма.ТребуетсяЗарегистрироватьКадровыйПеревод = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Форма.НадписьЗаписьЭлектроннойТрудовойКнижки = ПредставлениеСтатусаЗаписиЭлектроннойТрудовойКнижки(Форма);
	
КонецПроцедуры

Процедура ВТЗадачиПоКадровымМероприятиям(Запрос, ИмяТаблицы) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	Задачи.УсловиеПроверки КАК УсловиеПроверки,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.ДатаОкончания КАК ДатаОкончания,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
	|	МероприятияТрудовойДеятельности.ДатаДокументаОснования КАК ДатаМероприятия
	|ПОМЕСТИТЬ МероприятияТрудовойДеятельности
	|ИЗ
	|	ЗадачиСИсключениями КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
	|		ПО Задачи.Организация = МероприятияТрудовойДеятельности.Организация
	|			И (НАЧАЛОПЕРИОДА(Задачи.ПериодСобытия, ДЕНЬ) = НАЧАЛОПЕРИОДА(МероприятияТрудовойДеятельности.ДатаДокументаОснования, ДЕНЬ))
	|ГДЕ
	|	МероприятияТрудовойДеятельности.ВидМероприятия В (ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Увольнение))
	|	И Задачи.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МероприятияТрудовойДеятельности.Организация КАК Организация,
	|	МероприятияТрудовойДеятельности.ДатаМероприятия КАК ДатаМероприятия,
	|	МероприятияТрудовойДеятельностиПереданные.Регистратор КАК Регистратор,
	|	МероприятияТрудовойДеятельности.Индекс КАК Индекс,
	|	МероприятияТрудовойДеятельности.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	МероприятияТрудовойДеятельности.УсловиеПроверки КАК УсловиеПроверки,
	|	МероприятияТрудовойДеятельности.Периодичность КАК Периодичность,
	|	МероприятияТрудовойДеятельности.ДатаОкончания КАК ДатаОкончания,
	|	МероприятияТрудовойДеятельности.ПериодСобытия КАК ПериодСобытия
	|ПОМЕСТИТЬ ПереданныеКадровыеМероприятия
	|ИЗ
	|	МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияТрудовойДеятельностиПереданные
	|		ПО МероприятияТрудовойДеятельности.ИдМероприятия = МероприятияТрудовойДеятельностиПереданные.ИдМероприятия
	|ГДЕ
	|	НЕ МероприятияТрудовойДеятельностиПереданные.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереданныеКадровыеМероприятия.Индекс КАК Индекс,
	|	ПереданныеКадровыеМероприятия.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	ПереданныеКадровыеМероприятия.УсловиеПроверки КАК УсловиеПроверки,
	|	ЖурналОтчетовСтатусы.Ссылка КАК Ссылка,
	|	ЖурналОтчетовСтатусы.Статус КАК Статус,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
	|	ЖурналОтчетовСтатусы.ДатаОкончания КАК ДатаОкончания,
	|	ПереданныеКадровыеМероприятия.ПериодСобытия КАК ПериодСобытия,
	|	ПереданныеКадровыеМероприятия.Периодичность КАК Периодичность,
	|	ЖурналОтчетовСтатусы.ВариантОтчета КАК ВариантОтчета
	|ПОМЕСТИТЬ ВТ_ЖурналОтчетовСтатусы
	|ИЗ
	|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПереданныеКадровыеМероприятия КАК ПереданныеКадровыеМероприятия
	|		ПО ЖурналОтчетовСтатусы.Организация = ПереданныеКадровыеМероприятия.Организация
	|			И ЖурналОтчетовСтатусы.Ссылка = ПереданныеКадровыеМероприятия.Регистратор
	|ГДЕ
	|	НЕ ЖурналОтчетовСтатусы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МероприятияТрудовойДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПереданныеКадровыеМероприятия";
	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_ЖурналОтчетовСтатусы", ИмяТаблицы);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтчетности

Процедура ПолучитьСведенияОПоказателяхОтчетаПодтверждениеВидаДеятельностиСтрахователяДляФСС(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПодтверждениеВидаДеятельностиСтрахователяДляФСС(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация             = ПараметрыОтчета.Организация;
	ДатаНачалаПериодаОтчета = ПараметрыОтчета.ДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	
	Контейнер.Приложение2.Вставить("СреднесписочнаяЧисленность", КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(
		Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета).СреднесписочнаяЧисленностьРаботников);
	
	// Заполнение П000020000103 аналогично заполнению П00010021104 (Выручка) из ОФР Бухгалтерской отчетности.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Счета90",       БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&Счета90), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ИТОГИ
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт)
	|ПО
	|	Счет ТОЛЬКО ИЕРАРХИЯ";
	
	ОборотыПоСчетам = Запрос.Выполнить().Выгрузить();
	ОборотыПоСчетам.Индексы.Добавить("Счет");
	
	КО_90_01 = ЗаполнениеБухгалтерскойОтчетностиИтоги.КО("90.01", ОборотыПоСчетам);
	ДО_90_03 = ЗаполнениеБухгалтерскойОтчетностиИтоги.ДО("90.03", ОборотыПоСчетам);
	ДО_90_04 = ЗаполнениеБухгалтерскойОтчетностиИтоги.ДО("90.04", ОборотыПоСчетам);
	ДО_90_05 = ЗаполнениеБухгалтерскойОтчетностиИтоги.ДО("90.05", ОборотыПоСчетам);
	
	Если Контейнер.Приложение2_ДанныеДопСтрок.Количество() > 0 Тогда
		Контейнер.Приложение2_ДанныеДопСтрок[0]["П000020000103"] = КО_90_01 - ДО_90_03 - ДО_90_04 - ДО_90_05;
	КонецЕсли;
	
КонецПроцедуры

//***********************************
// Среднесписочная численность

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001001В1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001002В1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001002А1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000202", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000208", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000209", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000211", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П030001801", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П030002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П030002401", Истина, Ложь);

КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П0001001В1 = "";
	П0001002В1 = "";
	П0001002А1 = "";
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Организация",    ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.КодОКВЭД КАК КодОКВЭД,
	|	Организации.НаименованиеОКВЭД КАК НаименованиеОКВЭД
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П0001001В1 = Выборка.КодОКВЭД;
		П0001002В1 = Выборка.КодОКВЭД;
		П0001002А1 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("НачалоГода", 		       НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 	   КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеПериодаИнтервала", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецКвартала", 		       КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК КоличествоСотрудников
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL )
	|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериодаИнтервала)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	Иначе
		ФормироватьСНачалаГода = Выборка.КоличествоСотрудников > 15;
	КонецЕсли;
	
	ВидыВыплатСоциальногоХарактера = Новый Массив;
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп12_1ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп16ст255);
	ВидыВыплатСоциальногоХарактера.Добавить("2710");		
	ВидыВыплатСоциальногоХарактера.Добавить("2720");
	ВидыВыплатСоциальногоХарактера.Добавить("2760");
	ВидыВыплатСоциальногоХарактера.Добавить("2762");
	ВидыВыплатСоциальногоХарактера.Добавить("2510");		
	
	Запрос.УстановитьПараметр("ВидыВыплатСоциальногоХарактера", ВидыВыплатСоциальногоХарактера);
	
	Если НЕ ФормироватьСНачалаГода Тогда
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",    НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("НачалоИнтервала", 		   НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",    НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("НачалоИнтервала", 		   НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
	КонецЕсли;
	
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	0 КАК Цифра
	 |ПОМЕСТИТЬ Цифры
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	1
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	2
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	3
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	4
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	5
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	6
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	7
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	8
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	9
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	 |			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |	КОНЕЦ КАК Дата
	 |ПОМЕСТИТЬ Календарь
	 |ИЗ
	 |	Цифры КАК Цифры
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры1000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 999)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9999)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99999)
	 |ГДЕ
	 |	ВЫБОР
	 |			КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |		КОНЕЦ МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Цифры
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Календарь.Дата КАК Дата,
	 |	НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ) КАК Месяц
	 |ПОМЕСТИТЬ ВТСписокДат
	 |ИЗ
	 |	Календарь КАК Календарь
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	 |	СписокДат.Дата КАК Дата,
	 |	СписокДат.Месяц,
	 |	ЛОЖЬ КАК Совместитель
	 |ПОМЕСТИТЬ ВТДатыИСотрудники
	 |ИЗ
	 |	ВТСписокДат КАК СписокДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	 |			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	 |					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	 |	СписокДат.Дата,
	 |	СписокДат.Месяц,
	 |	ИСТИНА
	 |ИЗ
	 |	ВТСписокДат КАК СписокДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	 |		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	 |			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	 |					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СУММА(ВЫБОР
	 |			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	 |				ТОГДА 1
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК КоличествоСотрудников,
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце,
	 |	СписокДат.Месяц,
	 |	СписокДат.Совместитель
	 |ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
	 |ИЗ
	 |	ВТДатыИСотрудники КАК СписокДат
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СписокДат.Месяц,
	 |	СписокДат.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	НачислениеЗарплатыНачисления.Сотрудник,
	 |	НачислениеЗарплатыНачисления.ОтработаноЧасов,
	 |	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления,
	 |	НачислениеЗарплатыНачисления.Результат,
	 |	НачислениеЗарплатыНачисления.Начисление
	 |ПОМЕСТИТЬ ВТНачислениеЗарплаты
	 |ИЗ
	 |	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	 |ГДЕ
	 |	НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	 |	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТДатыИСотрудники.Сотрудник,
	 |	ВТДатыИСотрудники.Месяц,
	 |	ВТДатыИСотрудники.Совместитель
	 |ПОМЕСТИТЬ ВТСписокСотрудниковИДат
	 |ИЗ
	 |	ВТДатыИСотрудники КАК ВТДатыИСотрудники
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТДатыИСотрудники.Сотрудник,
	 |	ВТДатыИСотрудники.Месяц,
	 |	ВТДатыИСотрудники.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Начисления.Ссылка КАК Начисление
	 |ПОМЕСТИТЬ ВТВидыНачисленийСоциальногоХарактера
	 |ИЗ
	 |	ПланВидовРасчета.Начисления КАК Начисления
	 |ГДЕ
	 |	(Начисления.ВидНачисленияДляНУ В (&ВидыВыплатСоциальногоХарактера)
	 |			ИЛИ Начисления.КодДоходаНДФЛ.Код В (&ВидыВыплатСоциальногоХарактера))
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	 |			ТОГДА 0
	 |		ИНАЧЕ ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	 |	КОНЕЦ КАК СреднесписочнаяЧисленность,
	 |	ВЫБОР
	 |		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	 |			ТОГДА ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК СреднесписочнаяЧисленностьСовместители
	 |ИЗ
	 |	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СредняяЧисленностьПоМесяцам.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплатыНачисления.Результат, 0) / 1000 КАК ЧИСЛО(15, 1)) КАК ВыплатыСоциальногоХарактера,
	 |	НачислениеЗарплатыНачисления.Сотрудник
	 |ИЗ
	 |	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	 |ГДЕ
	 |	НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	 |	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоГода И &ОкончаниеИнтервала
	 |	И НачислениеЗарплатыНачисления.Начисление В
	 |			(ВЫБРАТЬ
	 |				ВидыНачисленийСоциальногоХарактера.Начисление КАК Начисление
	 |			ИЗ
	 |				ВТВидыНачисленийСоциальногоХарактера КАК ВидыНачисленийСоциальногоХарактера)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)) КАК ОтработаноЧасов,
	 |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))) КАК Результат,
	 |	0 КАК ОтработаноЧасовСовместитель,
	 |	0 КАК РезультатСовместитель,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |ИЗ
	 |	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	 |		ПО ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	 |			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	 |ГДЕ
	 |	НЕ ВТСписокСотрудниковИДат.Совместитель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	0,
	 |	0,
	 |	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)),
	 |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))),
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |ИЗ
	 |	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	 |		ПО ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	 |			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	 |ГДЕ
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК Принятые,
	 |	0 КАК Уволенные
	 |ИЗ
	 |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ДатаПриема >= &НачалоГода
	 |	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	0,
	 |	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения)
	 |ИЗ
	 |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= &ОкончаниеПериодаИнтервала
	 |	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация";
	 
	 Запрос.ВыполнитьПакет();
	 
	 Результаты = Запрос.ВыполнитьПакет();
	 КоличестовРезультатов = Результаты.Количество();
	 
	 СведенияОЧисленности           = Результаты[КоличестовРезультатов-4].Выбрать();
	 П010000202 = 0;
	 П010000203 = 0;
	 Пока СведенияОЧисленности.Следующий() Цикл
		 П010000202 = П010000202 + СведенияОЧисленности.СреднесписочнаяЧисленность;
		 П010000203 = П010000203 + СведенияОЧисленности.СреднесписочнаяЧисленностьСовместители;
	 КонецЦикла;
	 
	 СведенияОСоциальныхВыплатах    = Результаты[КоличестовРезультатов-3].Выбрать();
	 П010000211 = 0;
	 Пока СведенияОСоциальныхВыплатах.Следующий() Цикл
		 П010000211 = П010000211 + СведенияОСоциальныхВыплатах.ВыплатыСоциальногоХарактера;
	 КонецЦикла;
	 
	 СведенияОЗаработнойПлате       = Результаты[КоличестовРезультатов-2].Выбрать();
	 П010000205 = 0;
	 П010000206 = 0;
	 П010000208 = 0;
	 П010000209 = 0;
	 Пока СведенияОЗаработнойПлате.Следующий() Цикл
		 П010000205 = П010000205 + СведенияОЗаработнойПлате.ОтработаноЧасов;
		 П010000206 = П010000206 + СведенияОЗаработнойПлате.ОтработаноЧасовСовместитель;
		 П010000208 = П010000208 + СведенияОЗаработнойПлате.Результат;
		 П010000209 = П010000209 + СведенияОЗаработнойПлате.РезультатСовместитель;
	 КонецЦикла;
	 
	 СведенияОбИзмененииЧисленности = Результаты[КоличестовРезультатов-1].Выбрать();
	 П030001801 = 0;
	 П030002001 = 0;
	 Пока СведенияОбИзмененииЧисленности.Следующий() Цикл
		 П030001801 = П030001801 + СведенияОбИзмененииЧисленности.Принятые;
		 П030002001 = П030002001 + СведенияОбИзмененииЧисленности.Уволенные;
	 КонецЦикла;
	 
	 ПоляОтчета = Контейнер.ПолеТабличногоДокументаФормаОтчета;
	 
	 ПоляОтчета.П0001001В1 = П0001001В1;
	 ПоляОтчета.П0001002В1 = П0001002В1;
	 ПоляОтчета.П0001002А1 = П0001002А1;
	 
	 ПоляОтчета.П010000202 = П010000202;
	 ПоляОтчета.П010000203 = П010000203;
	 ПоляОтчета.П010000205 = П010000205;
	 ПоляОтчета.П010000206 = П010000206;
	 ПоляОтчета.П010000211 = П010000211;
	 ПоляОтчета.П010000205 = П010000205;
	 ПоляОтчета.П010000206 = П010000206;
	 ПоляОтчета.П010000208 = П010000208;
	 ПоляОтчета.П010000209 = П010000209;
	 ПоляОтчета.П030001801 = П030001801;
	 ПоляОтчета.П030002001 = П030002001;
	 ПоляОтчета.П030002401 = П010000202;
	 
КонецПроцедуры

// Возвращает данные о средней численности и выплатах сотрудникам в виде массива результатов запроса
//
// Параметры:
//  ПараметрыОтчета				 - Структура - обязательно должна содержать свойство "Организации" с массивом организаций. 
//  ДатаНачала					 - Дата - дата начала отчетного периода.
//  ДатаКонца					 - Дата - дата окончания отчетного периода.
//  ИсключаемыеПодразделения	 - Массив - массив обособленных подразделений, данные по которым требуется изключить из расчета.
//									Имеет смысл, если отчет заполняется по организации без обособленных подразделений
//									(ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Истина)
//  ПодразделенияОбособленного	 - Массив - массив обособленных подразделений, данные по которым включаются в расчет.
//									Имеет смысл, если отчет заполняется по обособленному подразделению
//									(ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений = Ложь)
// 
// Возвращаемое значение:
//   - Массив - массив результатов запроса
//
Функция СведенияОЧисленностиИВыплатах(ПараметрыОтчета, Знач ДатаНачала, Знач ДатаКонца, Знач ИсключаемыеПодразделения, Знач ПодразделенияОбособленного) Экспорт

	ВидыВыплатСоциальногоХарактера = Новый Массив;
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп12_1ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп16ст255);
	ВидыВыплатСоциальногоХарактера.Добавить("2710");
	ВидыВыплатСоциальногоХарактера.Добавить("2720");
	ВидыВыплатСоциальногоХарактера.Добавить("2760");
	ВидыВыплатСоциальногоХарактера.Добавить("2762");
	ВидыВыплатСоциальногоХарактера.Добавить("2510");
	
	ВидыИсключаемыхВыплат = Новый Массив;
	ВидВыплаты = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС");
	Если ВидВыплаты <> Неопределено Тогда
		ВидыИсключаемыхВыплат.Добавить(ВидВыплаты);
	КонецЕсли;
	ВидВыплаты = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС_НС");
	Если ВидВыплаты <> Неопределено Тогда
		ВидыИсключаемыхВыплат.Добавить(ВидВыплаты);
	КонецЕсли;
	ВидыИсключаемыхВыплат.Добавить("2300");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыВыплатСоциальногоХарактера",	ВидыВыплатСоциальногоХарактера);
	Запрос.УстановитьПараметр("ВидыИсключаемыхВыплат",			ВидыИсключаемыхВыплат);
	Запрос.УстановитьПараметр("НачалоГода",						НачалоГода(ДатаКонца));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала",				КонецМесяца(ДатаКонца));
	Запрос.УстановитьПараметр("ОкончаниеПериодаИнтервала",		КонецМесяца(ДатаКонца));
	Запрос.УстановитьПараметр("КонецКвартала",					КонецМесяца(ДатаКонца));
	Запрос.УстановитьПараметр("Организации",					ПараметрыОтчета.Организации);
	
	Если НачалоМесяца(ДатаНачала) = НачалоМесяца(ДатаКонца) Тогда
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",		НачалоМесяца(ДатаНачала));
		Запрос.УстановитьПараметр("НачалоИнтервала",			НачалоМесяца(ДатаНачала));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",		НачалоГода(ДатаНачала));
		Запрос.УстановитьПараметр("НачалоИнтервала",			НачалоГода(ДатаНачала));
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ЗаполняетсяВЦеломПоОрганизации") И ПараметрыОтчета.ЗаполняетсяВЦеломПоОрганизации Тогда
		Запрос.УстановитьПараметр("ПоВсейОрганизации", Истина);
		Запрос.УстановитьПараметр("ИсключитьДанныеОбособленныхПодразделений", Ложь);
		Запрос.УстановитьПараметр("ПоОбособленномуПодразделению", Ложь);
	ИначеЕсли ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений") 
		И ПараметрыОтчета.ИсключитьДанныеОбособленныхПодразделений Тогда
		Запрос.УстановитьПараметр("ПоВсейОрганизации", Ложь);
		Запрос.УстановитьПараметр("ИсключитьДанныеОбособленныхПодразделений", Истина);
		Запрос.УстановитьПараметр("ПоОбособленномуПодразделению", Ложь);
		Запрос.УстановитьПараметр("ПоВсейОрганизации", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоВсейОрганизации", Ложь);
		Запрос.УстановитьПараметр("ИсключитьДанныеОбособленныхПодразделений", Ложь);
		Запрос.УстановитьПараметр("ПоОбособленномуПодразделению", ПодразделенияОбособленного.Количество() > 0);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ИсключаемыеПодразделения", ИсключаемыеПодразделения);
	Запрос.УстановитьПараметр("ПодразделенияОбособленного",	ПодразделенияОбособленного);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК Цифра
	|ПОМЕСТИТЬ Цифры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	|	КОНЕЦ КАК Дата
	|ПОМЕСТИТЬ Календарь
	|ИЗ
	|	Цифры КАК Цифры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры1000
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 999)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10000
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9999)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100000
	|		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99999)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	|		КОНЕЦ МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Цифры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Календарь.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТСписокДат
	|ИЗ
	|	Календарь КАК Календарь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	СписокДат.Дата КАК Дата,
	|	СписокДат.Месяц КАК Месяц,
	|	ЛОЖЬ КАК Совместитель
	|ПОМЕСТИТЬ ВТДатыИСотрудники
	|ИЗ
	|	ВТСписокДат КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	|				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	|		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	|					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация В(&Организации)
	|	И (&ПоВсейОрганизации 
	|			ИЛИ &ИсключитьДанныеОбособленныхПодразделений
	|				И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ИсключаемыеПодразделения)
	|			ИЛИ &ПоОбособленномуПодразделению
	|				И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ПодразделенияОбособленного))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	|	СписокДат.Дата,
	|	СписокДат.Месяц,
	|	ИСТИНА
	|ИЗ
	|	ВТСписокДат КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	|				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	|		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	|					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация В(&Организации)
	|	И (&ПоВсейОрганизации 
	|			ИЛИ &ИсключитьДанныеОбособленныхПодразделений
	|				И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ИсключаемыеПодразделения)
	|			ИЛИ &ПоОбособленномуПодразделению
	|				И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&ПодразделенияОбособленного))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСотрудников,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСотрудниковЖенщин,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце,
	|	СписокДат.Месяц КАК Месяц,
	|	СписокДат.Совместитель КАК Совместитель
	|ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
	|ИЗ
	|	ВТДатыИСотрудники КАК СписокДат
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокДат.Месяц,
	|	СписокДат.Совместитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление
	|ПОМЕСТИТЬ ВТВидыИсключаемыхВыплат
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	(Начисления.ВидНачисленияДляНУ В (&ВидыИсключаемыхВыплат)
	|			ИЛИ Начисления.КодДоходаНДФЛ.Код В (&ВидыИсключаемыхВыплат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление
	|ПОМЕСТИТЬ ВТВидыНачисленийСоциальногоХарактера
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	(Начисления.ВидНачисленияДляНУ В (&ВидыВыплатСоциальногоХарактера)
	|			ИЛИ Начисления.КодДоходаНДФЛ.Код В (&ВидыВыплатСоциальногоХарактера))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыНачисления.Ссылка.Организация КАК Организация,
	|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
	|	НачислениеЗарплатыНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления КАК МесяцНачисления,
	|	НачислениеЗарплатыНачисления.Результат КАК Результат,
	|	НачислениеЗарплатыНачисления.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТНачислениеЗарплаты
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	|ГДЕ
	|	НачислениеЗарплатыНачисления.Ссылка.Организация В(&Организации)
	|	И (&ПоВсейОрганизации 
	|			ИЛИ &ИсключитьДанныеОбособленныхПодразделений
	|				И НЕ НачислениеЗарплатыНачисления.Подразделение В (&ИсключаемыеПодразделения)
	|			ИЛИ &ПоОбособленномуПодразделению
	|				И НачислениеЗарплатыНачисления.Подразделение В (&ПодразделенияОбособленного))
	|	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	|	И НЕ НачислениеЗарплатыНачисления.Начисление В
	|				(ВЫБРАТЬ
	|					ВТВидыИсключаемыхВыплат.Начисление
	|				ИЗ
	|					ВТВидыИсключаемыхВыплат КАК ВТВидыИсключаемыхВыплат)
	|	И НачислениеЗарплатыНачисления.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускНачисления.Ссылка.Организация,
	|	ОтпускНачисления.Сотрудник,
	|	0,
	|	ОтпускНачисления.Ссылка.ПериодРегистрации,
	|	ОтпускНачисления.Результат,
	|	ОтпускНачисления.Начисление
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ОтпускНачисления
	|ГДЕ
	|	ОтпускНачисления.Ссылка.Организация В(&Организации)
	|	И (&ПоВсейОрганизации 
	|			ИЛИ &ИсключитьДанныеОбособленныхПодразделений
	|				И НЕ ОтпускНачисления.Подразделение В (&ИсключаемыеПодразделения)
	|			ИЛИ &ПоОбособленномуПодразделению
	|				И ОтпускНачисления.Подразделение В (&ПодразделенияОбособленного))
	|	И ОтпускНачисления.Ссылка.ПериодРегистрации МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	|	И НЕ ОтпускНачисления.Начисление В
	|				(ВЫБРАТЬ
	|					ВТВидыИсключаемыхВыплат.Начисление
	|				ИЗ
	|					ВТВидыИсключаемыхВыплат КАК ВТВидыИсключаемыхВыплат)
	|	И ОтпускНачисления.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДатыИСотрудники.Организация КАК Организация,
	|	ВТДатыИСотрудники.Сотрудник КАК Сотрудник,
	|	ВТДатыИСотрудники.Месяц КАК Месяц,
	|	ВТДатыИСотрудники.Совместитель КАК Совместитель
	|ПОМЕСТИТЬ ВТСписокСотрудниковИДат
	|ИЗ
	|	ВТДатыИСотрудники КАК ВТДатыИСотрудники
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДатыИСотрудники.Организация,
	|	ВТДатыИСотрудники.Сотрудник,
	|	ВТДатыИСотрудники.Месяц,
	|	ВТДатыИСотрудники.Совместитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	|	КОНЕЦ КАК СреднесписочнаяЧисленность,
	|	ВЫБОР
	|		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	|			ТОГДА ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СреднесписочнаяЧисленностьСовместители,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудниковЖенщин / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0) КАК СреднесписочнаяЧисленностьЖенщины
	|ИЗ
	|	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам
	|
	|СГРУППИРОВАТЬ ПО
	|	СредняяЧисленностьПоМесяцам.Совместитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплатыНачисления.Результат, 0) / 1000 КАК ЧИСЛО(15, 1)) КАК ВыплатыСоциальногоХарактера,
	|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	|ГДЕ
	|	НачислениеЗарплатыНачисления.Ссылка.Организация В(&Организации)
	|	И (&ПоВсейОрганизации 
	|			ИЛИ &ИсключитьДанныеОбособленныхПодразделений
	|				И НЕ НачислениеЗарплатыНачисления.Подразделение В (&ИсключаемыеПодразделения)
	|			ИЛИ &ПоОбособленномуПодразделению
	|				И НачислениеЗарплатыНачисления.Подразделение В (&ПодразделенияОбособленного))
	|	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоГода И &ОкончаниеИнтервала
	|	И НачислениеЗарплатыНачисления.Начисление В
	|			(ВЫБРАТЬ
	|				ВидыНачисленийСоциальногоХарактера.Начисление КАК Начисление
	|			ИЗ
	|				ВТВидыНачисленийСоциальногоХарактера КАК ВидыНачисленийСоциальногоХарактера)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСписокСотрудниковИДат.Сотрудник КАК Сотрудник,
	|	ВТСписокСотрудниковИДат.Месяц КАК Месяц,
	|	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)) КАК ОтработаноЧасов,
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))) КАК Результат,
	|	0 КАК ОтработаноЧасовСовместитель,
	|	0 КАК РезультатСовместитель,
	|	ВТСписокСотрудниковИДат.Совместитель КАК Совместитель
	|ИЗ
	|	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	|		ПО ВТСписокСотрудниковИДат.Организация = ВТНачислениеЗарплаты.Организация
	|			И ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	|			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	|ГДЕ
	|	НЕ ВТСписокСотрудниковИДат.Совместитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСписокСотрудниковИДат.Сотрудник,
	|	ВТСписокСотрудниковИДат.Месяц,
	|	ВТСписокСотрудниковИДат.Совместитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСписокСотрудниковИДат.Сотрудник,
	|	ВТСписокСотрудниковИДат.Месяц,
	|	0,
	|	0,
	|	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)),
	|	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))),
	|	ВТСписокСотрудниковИДат.Совместитель
	|ИЗ
	|	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	|		ПО ВТСписокСотрудниковИДат.Организация = ВТНачислениеЗарплаты.Организация
	|			И ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	|			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	|ГДЕ
	|	ВТСписокСотрудниковИДат.Совместитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСписокСотрудниковИДат.Сотрудник,
	|	ВТСписокСотрудниковИДат.Месяц,
	|	ВТСписокСотрудниковИДат.Совместитель";
	
	Возврат Запрос.ВыполнитьПакет();

КонецФункции

//***********************************
// 4-ФСС

Функция ПолучитьСведенияОПоказателях4ФСС(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016105", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016204", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016205", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016201", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016304", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016305", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016301", Истина, Истина);
	
	Возврат ПоказателиОтчета;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчет4ФСС(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	НачалоТекущегоКвартала = НачалоКвартала(ДатаКонцаПериодаОтчета);
	
	НачалоПериода = НачалоГода(ДатаКонцаПериодаОтчета);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаПериодаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",  КонецДня(ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("НачалоТекущегоКвартала", НачалоТекущегоКвартала);
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода", НачалоТекущегоКвартала-1);
	Запрос.УстановитьПараметр("Месяц1",                 Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",                 Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",                 Месяц(НачалоТекущегоКвартала) + 2);
	Запрос.УстановитьПараметр("ПустаяДата",             Дата(1,1,1));
	Запрос.УстановитьПараметр("Налог",                  Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
															Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ, Истина));
	
	УплаченоТекст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.НомерВходящегоДокумента КАК ПлатежноеПоручениеНомер,
	|	СписаниеСРасчетногоСчета.ДатаВходящегоДокумента КАК ПлатежноеПоручениеДата,
	|	СписаниеСРасчетногоСчета.СуммаДокумента КАК ФССНесчастныеСлучаиУплачено,
	|	ВЫБОР
	|		КОГДА СписаниеСРасчетногоСчета.ДатаВходящегоДокумента = &ПустаяДата
	|			ТОГДА НАЧАЛОПЕРИОДА(СписаниеСРасчетногоСчета.Дата, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СписаниеСРасчетногоСчета.ДатаВходящегоДокумента, МЕСЯЦ)
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Налог = &Налог
	|	И СписаниеСРасчетногоСчета.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	И СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоТекущегоКвартала И &КонецОтчетногоПериода
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	НАЧАЛОПЕРИОДА(РасходныйКассовыйОрдер.Дата, МЕСЯЦ)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Налог = &Налог
	|	И РасходныйКассовыйОрдер.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоТекущегоКвартала И &КонецОтчетногоПериода
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016101,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|			ТОГДА РасчетыСФондом.ПлатежноеПоручениеДата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016104,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|			ТОГДА РасчетыСФондом.ПлатежноеПоручениеНомер
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016105,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016201,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|			ТОГДА РасчетыСФондом.ПлатежноеПоручениеДата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016204,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|			ТОГДА РасчетыСФондом.ПлатежноеПоручениеНомер
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016205,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|			ТОГДА РасчетыСФондом.ФССНесчастныеСлучаиУплачено
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016301,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|			ТОГДА РасчетыСФондом.ПлатежноеПоручениеДата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016304,
	|	ВЫБОР
	|		КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|			ТОГДА РасчетыСФондом.ПлатежноеПоручениеНомер
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000020016305,
	|	МЕСЯЦ(РасчетыСФондом.Период) КАК МесяцПериода,
	|	РасчетыСФондом.ФССНесчастныеСлучаиУплачено КАК ФССНесчастныеСлучаиУплачено
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом
	|ГДЕ
	|	РасчетыСФондом.ФССНесчастныеСлучаиУплачено <> 0
	|	И МЕСЯЦ(РасчетыСФондом.Период) МЕЖДУ &Месяц1 И &Месяц3
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСФондом.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.СуммаДокумента КАК П000020016001
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Налог = &Налог
	|	И СписаниеСРасчетногоСчета.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	И СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоОтчетногоПериода И &КонецПредыдущегоПериода
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Налог = &Налог
	|	И РасходныйКассовыйОрдер.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоОтчетногоПериода И &КонецПредыдущегоПериода
	|	И РасходныйКассовыйОрдер.Организация = &Организация";
	
	ПоказателиОтчета = Новый Структура;
	ПолучитьСведенияОПоказателях4ФСС(ПоказателиОтчета);
	
	Контейнер.Таблица2_1_ДанныеДопСтрок.Очистить();
	Контейнер.Таблица2_2_ДанныеДопСтрок.Очистить();
	Контейнер.Таблица2_3_ДанныеДопСтрок.Очистить();
	
	Запрос.Текст = УплаченоТекст;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = РезультатЗапроса[1].Выгрузить();
	Для каждого СтрокаДанных Из Результат Цикл
		Если СтрокаДанных.ФССНесчастныеСлучаиУплачено <> 0 Тогда
			ИмяКоллекции = "Таблица2_" + (СтрокаДанных.МесяцПериода - Месяц(НачалоТекущегоКвартала) + 1) + "_ДанныеДопСтрок";
			ЗаполнитьЗначенияСвойств(Контейнер[ИмяКоллекции].Добавить(), СтрокаДанных);
		КонецЕсли;
	КонецЦикла;
	
	Результат = РезультатЗапроса[2].Выгрузить();
	Контейнер.Таблица2.П000020016001 = Результат.Итог("П000020016001");
	
КонецПроцедуры

#КонецОбласти

#Область ЛьготныеКредиты

Функция ЧисленностьСотрудниковДляЛьготногоКредита(Организация, ПериодЗаявки) Экспорт
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Не УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
		// У ИП без сотрудников всегда только один сотрудник - он сам.
		Возврат 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодЗаявки", ПериодЗаявки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК КоличествоСотрудников
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = &Организация
	|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодЗаявки, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодЗаявки, МЕСЯЦ))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоСотрудников;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область ВариантыОтчетов

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных)
//
// Описание:
//   В Разделы необходимо добавить метаданные подсистем тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.ЗарплатаИКадры.Подсистемы.КадровыйУчет);
	Разделы.Добавить(Метаданные.Подсистемы.ЗарплатаИКадры.Подсистемы.Зарплата);
	
	Разделы.Добавить(Метаданные.Подсистемы.Отчеты.Подсистемы.Сотрудники);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализРезервовОтпусков);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализРасходовНаОплатуТруда);
	ЗарплатаКадрыОтчеты.НастроитьВариантыОтчетов(Настройки);
		
КонецПроцедуры

Функция ИспользуетсяТрудЧленовЛетныхЭкипажей() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяТрудЧленовЛетныхЭкипажей");
	
КонецФункции

Функция ИспользуетсяТрудШахтеров() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяТрудШахтеров");
	
КонецФункции

Функция ИспользуютсяРаботыСДосрочнойПенсией() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуютсяРаботыСДосрочнойПенсией");
	
КонецФункции

Функция УдерживаютсяДобровольныеВзносыВПФР() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Удержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ЗадачиКалендаряБухгалтера

Процедура СоздатьПравилоВыплатаЗарплатыУплатаНДФЛ(МенеджерВременныхТаблиц, Организация, Отбор = Неопределено) Экспорт
	
	Перем ОтборПоИмениЗадачи, ОтборПоДействию;
	
	ИдентификаторЗадачиЗарплата = "НДФЛ_Агент_Уплата";
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		ОтборПоИмениЗадачи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "ИмяЗадачи");
		ОтборПоДействию    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Действие");
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОтборПоИмениЗадачи) И ОтборПоИмениЗадачи <> ИдентификаторЗадачиЗарплата)
		ИЛИ (ЗначениеЗаполнено(ОтборПоДействию) И ОтборПоДействию <> Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата) Тогда
		СоздатьПустоеПравилоВыплатаЗарплатыУплатаНДФЛ(МенеджерВременныхТаблиц);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи",                     ИдентификаторЗадачиЗарплата);
	Запрос.УстановитьПараметр("ИдентификаторПравилаЗарплата",            "НДФЛ_Уплата");
	Запрос.УстановитьПараметр("ИдентификаторПравилаАванс",               "Аванс");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило,
	|	НастройкиУчетаЗарплаты.ДатаВыплатыЗарплаты КАК СрокДней,
	|	0 КАК СрокМесяцев
	|ПОМЕСТИТЬ ПравилоУплатыНДФЛНалоговымАгентом
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Ссылка = ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаЗарплаты КАК НастройкиУчетаЗарплаты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗадачиБухгалтера.Код = &ИдентификаторЗадачи
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Код = &ИдентификаторПравилаЗарплата
	|	И НастройкиУчетаЗарплаты.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка,
	|	НастройкиУчетаЗарплаты.ДатаВыплатыАванса,
	|	-1
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Ссылка = ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаЗарплаты КАК НастройкиУчетаЗарплаты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗадачиБухгалтера.Код = &ИдентификаторЗадачи
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Код = &ИдентификаторПравилаАванс
	|	И НастройкиУчетаЗарплаты.Организация = &Организация";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьПустоеПравилоВыплатаЗарплатыУплатаНДФЛ(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка) КАК Правило,
	|	0 КАК СрокДней,
	|	0 КАК СрокМесяцев
	|ПОМЕСТИТЬ ПравилоУплатыНДФЛНалоговымАгентом
	|ГДЕ
	|	ЛОЖЬ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ВыплачиваетсяЗарплата(Организация, Период) Экспорт
	
	НачалоПериода    = НачалоМесяца(Период);
	ОкончаниеПериода = КонецМесяца(Период);
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			Возврат Истина;
		Иначе
			Возврат ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, ОкончаниеПериода);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация",                   Организация);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные",                "Организация");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода",                 НачалоПериода);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода",              ОкончаниеПериода);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Отборы",                        Неопределено);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("РаботникиПоДоговорамГПХ",       Истина);
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   НачалоДня(ОкончаниеПериода));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Сотрудник КАК Сотрудник,
	|	ОтпускБезСохраненияОплаты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Проведен
	|	И ОтпускБезСохраненияОплаты.ДатаНачала <= &НачалоПериода
	|	И ОтпускБезСохраненияОплаты.ДатаОкончания >= &ОкончаниеПериода
	|	И ОтпускБезСохраненияОплаты.Организация = &Организация
	|	И ОтпускБезСохраненияОплаты.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_Сотрудники.Сотрудник
	|			ИЗ
	|				ВТ_Сотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетНачислений
	|ПОМЕСТИТЬ ВТ_СотрудникиДокументы
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Документы.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СотрудникиДокументы.Сотрудник КАК Сотрудник,
	|	ВТ_СотрудникиДокументы.ТребуетНачислений КАК ТребуетНачислений
	|ИЗ
	|	ВТ_СотрудникиДокументы КАК ВТ_СотрудникиДокументы
	|ГДЕ
	|	ВТ_СотрудникиДокументы.ТребуетНачислений";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЗарегистрированыКадровыеМероприятия(Организация, Период, Периодичность) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		// Прием и увольнение
		
		НачалоПериода    = НачалоДня(Период);
		ОкончаниеПериода = КонецДня(Период);
		
		// Проверяем следующие условия:
		//   1. Зарегистрированы кадровые документы на прием и увольнение
		//   2. Если простой кадровый учет - заполнены дата приема или увольнения
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",      Организация);
		Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриемНаРаботу.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ПриемНаРаботу.Организация = &Организация
		|	И ПриемНаРаботу.ОтразитьВТрудовойКнижке
		|	И ПриемНаРаботу.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Увольнение.Ссылка
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Увольнение.Организация = &Организация
		|	И Увольнение.ОтразитьВТрудовойКнижке
		|	И Увольнение.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|	И ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору
		|	И (ТекущиеКадровыеДанныеСотрудников.ДатаПриема МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения МЕЖДУ &НачалоПериода И &ОкончаниеПериода)";
		
	Иначе
		// Кадровый перевод
		
		НачалоПериода    = НачалоМесяца(Период);
		ОкончаниеПериода = КонецМесяца(Период);
		
		// Проверяем следующеи условия:
		//   1. Зарегистрировано заявление
		//   2. Зарегистрированы кадровые документы на перевод
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",      Организация);
		Запрос.УстановитьПараметр("НачалоПериода",    НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности КАК ЗаявленияОПредоставленииСведенийОТрудовойДеятельности
		|ГДЕ
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Организация = &Организация
		|	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КадровыйПеревод.Ссылка
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И КадровыйПеревод.Организация = &Организация
		|	И КадровыйПеревод.ОтразитьВТрудовойКнижке
		|	И КадровыйПеревод.Проведен";
		
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды

Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ТекущемуПользователюСЭДОФССДоступен = ТекущемуПользователюСЭДОФССДоступен();
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюСЭДОФССДоступен", ТекущемуПользователюСЭДОФССДоступен);
	
КонецПроцедуры

Функция НеобходимоСформироватьКадровыеПриказы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение необходимых текущих данных.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ТекущиеКадровыеДанныеСотрудников.ДатаПриема";
		
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура УстановкаНастроекПоУмолчанию(ИмяРегистра, Запись, ДанныеЗаполнения) Экспорт
	
	Если ИмяРегистра = "СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев" Тогда
		УстановкаНастроекПоУмолчаниюСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев(Запись, ДанныеЗаполнения);
	ИначеЕсли ИмяРегистра = "ПрименяемыеТарифыСтраховыхВзносов" Тогда
		УстановкаНастроекПоУмолчаниюПрименяемыеТарифыСтраховыхВзносов(Запись, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаНастроекПоУмолчаниюСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев(Запись, ДанныеЗаполнения)
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Период",
		НачалоГода(ТекущаяДатаСеанса()));
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Ставка",
		0);
	
КонецПроцедуры

Процедура УстановкаНастроекПоУмолчаниюПрименяемыеТарифыСтраховыхВзносов(Запись, ДанныеЗаполнения)
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"Период",
		НачалоГода(ТекущаяДатаСеанса()));
	
	Если УчетнаяПолитика.ПрименяетсяУСН(Запись.ГоловнаяОрганизация, Запись.Период) Тогда
		ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим;
	ИначеЕсли УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Запись.ГоловнаяОрганизация, Запись.Период) Тогда
		ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим;
	ИначеЕсли УчетнаяПолитика.ПлательщикЕНВД(Запись.ГоловнаяОрганизация, Запись.Период) Тогда
		ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.ЕНВД;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНПатент(Запись.ГоловнаяОрганизация, Запись.Период) Тогда
		ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент;
	Иначе
		ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим;
	КонецЕсли;
	
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ВидТарифа",
		ВидТарифа);
		
	НастройкиУчета.УстановитьЗначениеПоУмолчанию(
		Запись,
		ДанныеЗаполнения,
		"ДатаРегистрацииИзменений",
		НачалоГода(ТекущаяДатаСеанса()));
	
КонецПроцедуры

Функция СформироватьВременнуюТаблицуПеречислениеНДФЛ(ТаблицаПеречислениеНДФЛ, МесяцНалоговогоПериода, РегистрацияВНалоговомОргане,
			ПлатежноеПоручениеДата, ПлатежноеПоручениеНомер)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПеречислениеНДФЛ",      ТаблицаПеречислениеНДФЛ);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода",       МесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("РеквизитыПлатежногоПоручения", УчетНДФЛ.РеквизитыПлатежногоПорученияПоДатеНомеру(ПлатежноеПоручениеДата, ПлатежноеПоручениеНомер));
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане",  ?(РегистрацияВНалоговомОргане = Неопределено, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка(), РегистрацияВНалоговомОргане));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПеречислениеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаПеречислениеНДФЛ.Сумма КАК Сумма,
	|	ТаблицаПеречислениеНДФЛ.Ставка КАК Ставка,
	|	ТаблицаПеречислениеНДФЛ.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	ТаблицаПеречислениеНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ТаблицаПеречислениеНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ТаблицаПеречислениеНДФЛ
	|ИЗ
	|	&ТаблицаПеречислениеНДФЛ КАК ТаблицаПеречислениеНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.Ставка КАК Ставка,
	|	ВЫБОР
	|		КОГДА Налоги.МесяцНалоговогоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &МесяцНалоговогоПериода
	|		ИНАЧЕ Налоги.МесяцНалоговогоПериода
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	Налоги.Сумма КАК Сумма,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	&РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	&РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТНалогПеречисленный
	|ИЗ
	|	ТаблицаПеречислениеНДФЛ КАК Налоги";
	
	Результаты = Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Функция СписокФизическихЛицДокументаВыплаты(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.КодДохода КАК КодДохода,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.Подразделение КАК Подразделение,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.Сумма КАК Сумма,
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.КатегорияДохода КАК КатегорияДохода
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК ВедомостьНаВыплатуЗарплатыВБанкНДФЛ
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанкНДФЛ.Ссылка = &Ведомость
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.СтавкаНалогообложенияРезидента,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.МесяцНалоговогоПериода,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.КодДохода,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.РегистрацияВНалоговомОргане,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.Подразделение,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.Сумма,
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.КатегорияДохода
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК ВедомостьНаВыплатуЗарплатыВКассуНДФЛ
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассуНДФЛ.Ссылка = &Ведомость";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьНаВыплатуЗарплатыВБанкФизическиеЛица.ФизическоеЛицо
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФизическиеЛица КАК ВедомостьНаВыплатуЗарплатыВБанкФизическиеЛица
		|ГДЕ
		|	ВедомостьНаВыплатуЗарплатыВБанкФизическиеЛица.Ссылка = &Ведомость
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВедомостьНаВыплатуЗарплатыВКассуФизическиеЛица.ФизическоеЛицо
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФизическиеЛица КАК ВедомостьНаВыплатуЗарплатыВКассуФизическиеЛица
		|ГДЕ
		|	ВедомостьНаВыплатуЗарплатыВКассуФизическиеЛица.Ссылка = &Ведомость";
		Результат = Запрос.Выполнить();
	КонецЕсли;

	Возврат Результат.Выгрузить();
	
КонецФункции

Функция СтавкиНДФЛФизическихЛиц(ФизическиеЛица, НалоговыйПериод) Экспорт
	
	ДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическиеЛица, "СтатусНалогоплательщика", КонецМесяца(НалоговыйПериод));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеФизЛиц",          ДанныеФизЛиц);
	Запрос.УстановитьПараметр("СтавкаНДФЛРезидента",   СтавкаНДФЛОсновная());
	Запрос.УстановитьПараметр("СтавкаНДФЛНерезидента", СтавкаНДФЛНерезидента());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеФизЛиц.СтатусНалогоплательщика КАК СтатусНалогоплательщика
	|ПОМЕСТИТЬ ВТ_ДанныеФизЛиц
	|ИЗ
	|	&ДанныеФизЛиц КАК ДанныеФизЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ДанныеФизЛиц.СтатусНалогоплательщика, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|			ТОГДА &СтавкаНДФЛНерезидента
	|		ИНАЧЕ &СтавкаНДФЛРезидента
	|	КОНЕЦ КАК Ставка
	|ИЗ
	|	ВТ_ДанныеФизЛиц КАК ВТ_ДанныеФизЛиц";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтавкаНДФЛДивиденды(НалоговыйПериод) Экспорт
	
	ВидДохода = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыДоходовНДФЛ.Код1010");
	СтавкаНалогообложения = УчетНДФЛБазовый.СтавкаНалогообложенияРезидентаПоКодуДоходаНДФЛ(ВидДохода);
	
	Возврат УчетНДФЛ.СтавкаНДФЛ(СтавкаНалогообложения,
					ВидДохода,
					ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент"),
					Год(НалоговыйПериод));
	
КонецФункции

Функция СтавкаНДФЛСПревышения() Экспорт
	
	Возврат Перечисления.НДФЛСтавки.Ставка15;
	
КонецФункции

Функция СтавкаНДФЛОсновная() Экспорт
	
	Возврат Перечисления.НДФЛСтавки.Ставка13;
	
КонецФункции

Функция СтавкаНДФЛНерезидента() Экспорт
	
	Возврат Перечисления.НДФЛСтавки.Ставка30;
	
КонецФункции

Процедура ОтразитьРасчетыПоНачисленнымПособиямИП(Параметры, ТаблицаЗаработнойПлаты, ТаблицаИПНачислениеЗарплаты, ТаблицаПрочиеРасходы, Реквизиты, Движения, Отказ)
	
	Если Реквизиты.Период < ДатаНачалаАдминистрированияСтраховыхВзносовФНС() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Реквизиты.Регистратор) <> Тип("ДокументСсылка.БольничныйЛист") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасчетовПоНачисленнымПособиям = ПодготовитьТаблицуРасчетовПоНачисленнымПособиямИП(ТаблицаЗаработнойПлаты, Реквизиты);
	
	РеквизитыИПТаблица = Параметры.Реквизиты.Скопировать();
	РеквизитыИПТаблица.Колонки.Добавить("СчетУчета",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РеквизитыИПТаблица.Колонки.Добавить("ВидОперации", Перечисления.ТипВсеСсылки());
	
	РеквизитыИПТаблица[0].Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Регистратор, "Дата");
	
	ПеречислениеНалогаИПТаблица = Новый ТаблицаЗначений;
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("ИмяСписка",     ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("СинонимСписка", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("НомерСтроки",   ОбщегоНазначения.ОписаниеТипаЧисло(1));
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("СчетДт",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("СубконтоДт1",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("СубконтоДт2",   Перечисления.ТипВсеСсылки());
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("СубконтоДт3",   Перечисления.ТипВсеСсылки());
	ПеречислениеНалогаИПТаблица.Колонки.Добавить("СуммаРуб",      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	НоваяСтрока = ПеречислениеНалогаИПТаблица.Добавить();
	НоваяСтрока.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРасчетовПоНачисленнымПособиям Цикл
		
		СписокПереплат = УчетДоходовИРасходовПредпринимателя.ПолучитьПустуюТаблицуСписокПереплат();
		
		Если СтрокаТаблицы.СуммаПереплаты > 0 Тогда
			НоваяСтрока = СписокПереплат.Добавить();
			НоваяСтрока.Контрагент = Неопределено;
			НоваяСтрока.СчетУчета  = СтрокаТаблицы.СчетУчета;
			НоваяСтрока.Сумма = СтрокаТаблицы.СуммаПереплаты;
			
			РеквизитыИПТаблица[0].СчетУчета = СтрокаТаблицы.СчетУчета;
			
			УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
				УчетДоходовИРасходовПредпринимателя.ПолучитьПустуюТаблицуСписокВзносов(),
				СписокПереплат,
				РеквизитыИПТаблица,
				Движения,
				Отказ);
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаКЗачету <> 0 Тогда
			
			РеквизитыИПТаблица[0].СчетУчета         = СтрокаТаблицы.СчетУчета;
			ПеречислениеНалогаИПТаблица[0].СчетДт   = СтрокаТаблицы.СчетУчета;
			ПеречислениеНалогаИПТаблица[0].СуммаРуб = СтрокаТаблицы.СуммаКЗачету;
			
			
			ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
				ПеречислениеНалогаИПТаблица, РеквизитыИПТаблица);
			
			СтруктураОтбора = Новый Структура("Счет, Субконто1", СтрокаТаблицы.СчетУчета, Перечисления.ВидыПлатежейВГосБюджет.Налог);
			МассивСтрок = ТаблицаИПНачислениеЗарплаты.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
				СтруктураОтбора = Новый Структура("СчетУчета, СтатьяЗатрат", СтрокаТаблицы.СчетУчета, СтрокаМассива.Субконто1);
				МассивСтрокПрочиеРасходы = ТаблицаПрочиеРасходы.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаМассиваПрочиеРасходы ИЗ МассивСтрокПрочиеРасходы Цикл
					Если СтрокаТаблицы.СуммаКЗачету = 0 Тогда
						Прервать;
					КонецЕсли;
					НоваяСтрока = ТаблицыУплатыВзносовФОТИП.СписокВзносов.Добавить();
					НоваяСтрока.ДокументОплаты       = Реквизиты.Регистратор;
					НоваяСтрока.РасчетныйДокумент    = Реквизиты.Регистратор;
					НоваяСтрока.СтатьяЗатрат         = СтрокаМассиваПрочиеРасходы.СтатьяЗатрат;
					НоваяСтрока.НоменклатурнаяГруппа = СтрокаМассиваПрочиеРасходы.НоменклатурнаяГруппа;
					НоваяСтрока.ХарактерДеятельности = СтрокаМассиваПрочиеРасходы.ХарактерДеятельности;
					НоваяСтрока.СуммаОплаты          = Мин(СтрокаТаблицы.СуммаКЗачету, СтрокаМассива.Сумма);
					
					СтрокаТаблицы.СуммаКЗачету = СтрокаТаблицы.СуммаКЗачету - НоваяСтрока.СуммаОплаты;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ТаблицыУплатыВзносовФОТИП.СписокВзносов.Количество() <> 0 Тогда
				СписокПереплат.Очистить();
				УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
					ТаблицыУплатыВзносовФОТИП.СписокВзносов,
					СписокПереплат,
					РеквизитыИПТаблица,
					Движения,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуРасчетовПоНачисленнымПособиямИП(ТаблицаЗаработнойПлаты, Реквизиты)
	
	СчетаУчетаВзносов = Новый Массив;
	СчетаУчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФСС);
	СчетаУчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период",            Новый Граница(Новый МоментВремени(Реквизиты.Регистратор.Дата, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СчетаУчетаВзносов", СчетаУчетаВзносов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета,
	|	СУММА(ПрочиеРасчетыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&Период,
	|			Контрагент = НЕОПРЕДЕЛЕНО
	|				И СчетУчета В (&СчетаУчетаВзносов)
	|				И Организация = &Организация) КАК ПрочиеРасчетыОстатки
	|ГДЕ
	|	ПрочиеРасчетыОстатки.СуммаОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасчетыОстатки.СчетУчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВзносов = Новый ТаблицаЗначений;
	ТаблицаВзносов.Колонки.Добавить("СчетУчета",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВзносов.Колонки.Добавить("СуммаКЗачету",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаВзносов.Колонки.Добавить("СуммаПереплаты", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ТаблицаЗаработнойПлаты.Индексы.Добавить("ВидОперации");
	
	ТаблицаРасчетов    = ТаблицаЗаработнойПлаты.Скопировать(Новый Структура("ВидОперации", Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС));
	СуммаРасчетовФСС   = ТаблицаРасчетов.Итог("Сумма");
	ТаблицаРасчетов    = ТаблицаЗаработнойПлаты.Скопировать(Новый Структура("ВидОперации", Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС));
	СуммаРасчетовФССНС = ТаблицаРасчетов.Итог("Сумма");
	
	Если РезультатЗапроса.Пустой() Тогда
		Если СуммаРасчетовФСС <> 0 Тогда
			НоваяСтрока = ТаблицаВзносов.Добавить();
			НоваяСтрока.СчетУчета      = ПланыСчетов.Хозрасчетный.ФСС;
			НоваяСтрока.СуммаПереплаты = СуммаРасчетовФСС;
		КонецЕсли;
		Если СуммаРасчетовФССНС <> 0 Тогда
			НоваяСтрока = ТаблицаВзносов.Добавить();
			НоваяСтрока.СчетУчета      = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
			НоваяСтрока.СуммаПереплаты = СуммаРасчетовФССНС;
		КонецЕсли;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаВзносов.Добавить();
			НоваяСтрока.СчетУчета = Выборка.СчетУчета;
			Если Выборка.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС Тогда
				СуммаРасчетов = СуммаРасчетовФСС;
			Иначе
				СуммаРасчетов = СуммаРасчетовФССНС;
			КонецЕсли;
			
			Если СуммаРасчетов < Выборка.СуммаОстаток Тогда
				НоваяСтрока.СуммаКЗачету = СуммаРасчетов;
			Иначе
				НоваяСтрока.СуммаКЗачету   = Выборка.СуммаОстаток;
				НоваяСтрока.СуммаПереплаты = СуммаРасчетов - Выборка.СуммаОстаток;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаВзносов;
	
КонецФункции

Функция ДатаНачалаАдминистрированияСтраховыхВзносовФНС() Экспорт
	
	Возврат '20170101';
	
КонецФункции

Процедура ПроверитьПоддержкуСовместительства(ВидЗанятости) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаСовместительства") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗанятости)
		И ВидЗанятости <> Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ПоддержкаСовместительства.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПериодРегистрации(Регистратор, Знач ПериодРегистрации) Экспорт
	
	ПериодРегистрации = КонецМесяца(ПериодРегистрации);
	ДатаРегистратора  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Дата");
	
	Если КонецМесяца(ДатаРегистратора) = ПериодРегистрации Тогда
		Если КонецДня(ДатаРегистратора) = ПериодРегистрации Тогда
			ПериодРегистрации = ДатаРегистратора;
		Иначе
			Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.Отпуск")
				ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.БольничныйЛист")
				ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.ДепонированиеЗарплаты") Тогда
				ПериодРегистрации = ДатаРегистратора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПериодРегистрации;
	
КонецФункции

Процедура ЗаполнитьСведенияОбОтветственных(ОписаниеПодписей, Организация, ЗначенияПодписей) Экспорт

	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДата());
	
	ОписаниеРуководителя = ОписаниеПодписей["Руководитель"];
	Если ОписаниеРуководителя <> Неопределено Тогда
		ЗначенияПодписей.Вставить(ОписаниеРуководителя["ФизическоеЛицо"], ОтветственныеЛицаОрганизации.Руководитель);
		ЗначенияПодписей.Вставить(ОписаниеРуководителя["Должность"], ОтветственныеЛицаОрганизации.РуководительДолжность);
	КонецЕсли;
	
	ОписаниеГлавногоБухгалтера = ОписаниеПодписей["ГлавныйБухгалтер"];
	Если ОписаниеГлавногоБухгалтера <> Неопределено Тогда
		ЗначенияПодписей.Вставить(ОписаниеГлавногоБухгалтера["ФизическоеЛицо"], ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);
	КонецЕсли;
	
	ОписаниеКассира = ОписаниеПодписей["Кассир"];
	Если ОписаниеКассира <> Неопределено Тогда
		ЗначенияПодписей.Вставить(ОписаниеКассира["ФизическоеЛицо"], ОтветственныеЛицаОрганизации.Кассир);
		ЗначенияПодписей.Вставить(ОписаниеКассира["Должность"], ОтветственныеЛицаОрганизации.КассирДолжность);
	КонецЕсли;
	
	ОписаниеБухгалтера = ОписаниеПодписей["Бухгалтер"];
	Если ОписаниеБухгалтера <> Неопределено Тогда
		ЗначенияПодписей.Вставить(ОписаниеБухгалтера["ФизическоеЛицо"], ОтветственныеЛицаОрганизации.ГлавныйБухгалтер);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив начислений, соответствующие параметрам.
//
// Параметры:
//   КатегорияНачисления - ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени - Категория начисления.
//   Отбор - Структура - Отбор по начислениям. См. описание параметра "Отбор" функции НачисленияПоОтбору.
//
// Возвращаемое значение:
//   Массив - Начисления, соответствующие отбору.
//
Функция НачисленияПоКатегории(КатегорияНачисления, Отбор = Неопределено) Экспорт
	
	Возврат ПланыВидовРасчета.Начисления.НачисленияПоКатегории(КатегорияНачисления, Отбор);
	
КонецФункции

Функция МинимальныйРазмерОплатыТрудаРФ(Период) Экспорт
	
	Возврат ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(Период);
	
КонецФункции

Процедура УстановитьРольСотрудникаПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ПериодыДействияДоговоровГражданскоПравовогоХарактера") Тогда
		
		Регистратор = Источник.Отбор.Регистратор.Значение;
		Сотрудник   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Сотрудник");
		
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			Возврат;
		КонецЕсли;
		
		РольСотрудника = Перечисления.РолиСотрудников.Договорник;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сотрудник",      Сотрудник);
		Запрос.УстановитьПараметр("Регистратор",    Регистратор);
		Запрос.УстановитьПараметр("РольСотрудника", РольСотрудника);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.РолиСотрудников КАК РолиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО РолиСотрудников.Сотрудник = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|			И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор <> &Регистратор)
		|ГДЕ
		|	РолиСотрудников.Сотрудник = &Сотрудник
		|	И РолиСотрудников.РольСотрудника = &РольСотрудника
		|	И НЕ ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор ЕСТЬ NULL";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И
			ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ТекущиеКадровыеДанныеСотрудников") Тогда
			// Этот регистр только при упрощенном учете используется
			Возврат;
		КонецЕсли;
		
		Сотрудник = Источник.Отбор.Сотрудник.Значение;
		
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			Возврат;
		КонецЕсли;
		
		РольСотрудника = Перечисления.РолиСотрудников.Работник;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.РольСотрудника.Установить(РольСотрудника);
	НаборЗаписей.Прочитать();
	
	Если Источник.Выгрузить().Количество() = 0 Тогда
		// Запись удалена
		Если НаборЗаписей.Количество() <> 0 Тогда
			НаборЗаписей.Удалить(0);
			НаборЗаписей.Записать();
		КонецЕсли;
	Иначе
		// Запись обновлена
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Сотрудник      = Сотрудник;
			НоваяЗапись.РольСотрудника = РольСотрудника;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВедомостьПоДоговоруПодряда(ПлатежнаяВедомость) Экспорт
	
	Если ТипЗнч(ПлатежнаяВедомость) <> Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
		И ТипЗнч(ПлатежнаяВедомость) <> Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
		И ТипЗнч(ПлатежнаяВедомость) <> Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлатежнаяВедомость) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		СпособыВыплатыДоговорПодряда     = Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами;
		СпособыВыплатыПлатежнойВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "СпособРасчетов");
	Иначе
		СпособыВыплатыДоговорПодряда     = Справочники.СпособыВыплатыЗарплаты.ДоговорПодряда();
		СпособыВыплатыПлатежнойВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "СпособВыплаты");
	КонецЕсли;
	
	Возврат СпособыВыплатыПлатежнойВедомости = СпособыВыплатыДоговорПодряда;
	
КонецФункции

// Используется для получения ссылки на регистрацию в налоговом органе подразделения.
//
// Параметры:
//  СтруктурнаяЕдиница	 - СправочникСсылка.ПодразделенияОрганизаций, 
//						   СправочникСсылка.Организации, 
//						   ОпределяемыйТип.ТерриторияВыполненияРабот  - структурная единица для получения регистрации в НО.
//  ДатаАктуальности     - Дата                                       - дата, на которую необходимо получить
//                                                                          регистрацию в НО.
// 
// Возвращаемое значение:
//  СправочникСсылка.РегистрацииВНалоговомОргане - ссылка на существующую регистрацию, либо ПустаяСсылка().
//
Функция РегистрацияВНалоговомОргане(СтруктурнаяЕдиница, Знач ДатаАктуальности = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		Возврат ЗарплатаКадры.РегистрацияВНалоговомОрганеПодразделения(СтруктурнаяЕдиница, ДатаАктуальности);
		
	Иначе
		
		Возврат ЗарплатаКадры.РегистрацияВНалоговомОрганеОрганизации(СтруктурнаяЕдиница, ДатаАктуальности);
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с настройкой бухучета сотрудника на указанную дату.
//
// Параметры:
//  Сотрудник - Тип СправочникСсылка.Сотрудник
//  ДатаАктуальности - Тип Дата, дата на которую получаем способ отражения.
//
// Возвращаемое значение: Структура, ключи СпособОтраженияЗарплатыВБухучете, ОтношениеКЕНВД, Период
//		СпособОтраженияЗарплатыВБухучете, тип Справочник.СпособыОтраженияЗарплатыВБухУчете
//		ОтношениеКЕНВД, тип Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.
//		Период, дата на которую установлено значение.
//
Функция НастройкаБухучетаЗарплатыСотрудника(Сотрудник, ДатаАктуальности) Экспорт
	
	Возврат ОтражениеЗарплатыВБухучетеБазовый.НастройкаБухучетаЗарплатыСотрудника(Сотрудник, ДатаАктуальности);
	
КонецФункции

Функция ПланируемаяДатаВыплатыЗарплаты(Организация, ТекущийМесяц) Экспорт
	
	Настройки = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Организация));
	
	ДатаВыплаты = Дата(Год(ТекущийМесяц), Месяц(ТекущийМесяц),
		Мин(Настройки.ДатаВыплатыЗарплаты, ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(ТекущийМесяц)));		
	
	Возврат ДатаВыплаты;
	
КонецФункции

Функция ПланируемаяДатаВыплатыАванса(Организация, ТекущийМесяц) Экспорт
	
	Настройки = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Организация));
	
	ДатаВыплаты = Дата(Год(ТекущийМесяц), Месяц(ТекущийМесяц),
		Мин(Настройки.ДатаВыплатыАванса, ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(ТекущийМесяц)));
	
	Возврат ДатаВыплаты;
	
КонецФункции

Функция ГрафикРаботыОрганизации(Организация) Экспорт
	
	ГрафикРаботы = Справочники.Календари.НайтиПоРеквизиту("ВладелецГрафика", Организация);
	Если ГрафикРаботы = Справочники.Календари.ПустаяСсылка() Тогда
		УчетЗарплаты.СоздатьГрафикРаботыОрганизации(Организация);
		ГрафикРаботы = Справочники.Календари.НайтиПоРеквизиту("ВладелецГрафика", Организация);
	КонецЕсли;
	
	Возврат ГрафикРаботы;
	
КонецФункции

Функция ОплатаПоОкладу() Экспорт
	
	ПовременныеНачисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
		Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
		
	Если ПовременныеНачисления.Количество() = 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ПланыВидовРасчета.Начисления.СоздатьОплатуПоОкладу();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПовременныеНачисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
			Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
		
	КонецЕсли;
	
	Возврат ПовременныеНачисления[0];
	
КонецФункции

Функция КодВидаДоходаПоВидуДоходаИсполнительногоПроизводства(ВидДоходаИсполнительногоПроизводства) Экспорт
	
	КодВидаДохода = "";
	Если ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения Тогда
		КодВидаДохода = "1";
	ИначеЕсли ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые Тогда
		КодВидаДохода = "2";
	ИначеЕсли ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые Тогда
		КодВидаДохода = "3";
	Иначе
		КодВидаДохода = "1";
	КонецЕсли;
	
	Возврат КодВидаДохода;
	
КонецФункции

Функция ВедетсяУчетПоПодразделениям() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям")
		ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям")
		ИЛИ ПолучитьФункциональнуюОпцию("РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПодразделений");
	
КонецФункции

Процедура ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности) Экспорт
	
	Если СостояниеСдачиОтчетности <> Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Проведен, ПометкаУдаления, ДокументПринятВПФР");
		
		Если ЗначенияРеквизитов.ДокументПринятВПФР
				И ЗначенияРеквизитов.Проведен Тогда
			СтатусОтправки = НСтр("ru = 'Сдано'");
		ИначеЕсли ЗначенияРеквизитов.Проведен Тогда
			СтатусОтправки = НСтр("ru = 'Подготовлено'");
		Иначе
			СтатусОтправки = НСтр("ru = 'В работе'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаНачалаУчетаПрогрессивногоНДФЛ() Экспорт
	
	Возврат '20210101';
	
КонецФункции

Функция ВыполнятьРасчетНДФЛПоПрогрессивнойШкале(Организация, ДатаПроверки = Неопределено) Экспорт
	
	РасчетНДФЛПоПрогрессивнойШкале = Ложь;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|ГДЕ
		|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И УчетнаяПолитикаПоНДФЛ.ВыполнятьРасчетНДФЛПоПрогрессивнойШкале";
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			РасчетНДФЛПоПрогрессивнойШкале = ?(ДатаПроверки <> Неопределено,
				ДатаПроверки >= ДатаНачалаУчетаПрогрессивногоНДФЛ(),
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасчетНДФЛПоПрогрессивнойШкале;
	
КонецФункции

#Область СЭДО_ФСС

Процедура ПроверитьНеобходимостьЗапускаРегламентногоЗадания(Организации, ТребуетсяЗапуск) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		ТребуетсяЗапуск = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущемуПользователюСЭДОФССДоступен() Экспорт
	
	СЭДОФССДоступен = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		И ПравоДоступа("Изменение", Метаданные.Документы.ИзвещениеФСС)
		И ДокументооборотСКО.ПолучитьОбработкуЭДО() <> Неопределено
		И ЭлектронныйДокументооборотСФСС.ОрганизацииИспользующиеОбменФСС().Количество() > 0;
	
	Возврат СЭДОФССДоступен;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СозданиеДенежныхДокументов

Процедура СформироватьДокументыОплаты(Форма) Экспорт
	
	Основание = Форма.Объект.Ссылка;
	
	ТребуетсяЗапись     = НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность;
	ТребуетсяПроведение = ЗначениеЗаполнено(Форма.Параметры.Ключ) И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Проведен");
	
	Если ТребуетсяЗапись ИЛИ ТребуетсяПроведение Тогда
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Иначе
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Форма.Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	Построчно = Ложь;
	ИмяКолонкиВыплаты = "КВыплате";
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		
		ИмяКолонкиВыплаты = "Сумма";
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидМестаВыплаты") = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидМестаВыплаты") = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			ИмяДокументаВыплаты = "СписаниеСРасчетногоСчета";
			Построчно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидМестаВыплаты") = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
		Иначе
			ИмяДокументаВыплаты = "РасходныйКассовыйОрдер";
		КонецЕсли;

		СписокРеквизитовОснования = "Организация, ПодразделениеОрганизации, Дата, Проведен";
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, СписокРеквизитовОснования);
		
	Иначе
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			ИмяДокументаВыплаты = "РасходныйКассовыйОрдер";
		Иначе
			ИмяДокументаВыплаты = "СписаниеСРасчетногоСчета";
			Построчно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидМестаВыплаты") = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет;
		КонецЕсли;
		СписокРеквизитовОснования = "Организация, Подразделение, Дата, Проведен";
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, СписокРеквизитовОснования);
		РеквизитыОснования.Вставить("ПодразделениеОрганизации", РеквизитыОснования.Подразделение);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаТруда");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		РежимЗаписи = ?(НЕ Основание.ПометкаУдаления,
			РежимЗаписиДокумента.Проведение,
			РежимЗаписиДокумента.Запись);
	Иначе
		РежимЗаписи = ?(Основание.Проведен,
			РежимЗаписиДокумента.Проведение,
			РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
	МассивДокументов= Новый Массив;
	МассивДокументов.Добавить(Основание);
	
	Если Построчно Тогда
		
		ТаблицаВыплат = Основание.Зарплата.Выгрузить();
		ТаблицаВыплат.Свернуть("ФизическоеЛицо", "КомпенсацияЗаЗадержкуЗарплаты, " + ИмяКолонкиВыплаты);
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаВыплат Цикл
			ДокументВыплаты = Документы[ИмяДокументаВыплаты].СоздатьДокумент();
			ДокументВыплаты.Заполнить(МассивДокументов);
			ДокументВыплаты.ПеречислениеЗаработнойПлаты.Очистить();
			ДокументВыплаты.ВидОперации                   = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
			ДокументВыплаты.Контрагент                    = СтрокаТаблицы.ФизическоеЛицо;
			ДокументВыплаты.ПлатежнаяВедомость            = Основание;
			ДокументВыплаты.СуммаДокумента                = СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты + СтрокаТаблицы[ИмяКолонкиВыплаты];
			ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			ДокументВыплаты.НазначениеПлатежа             = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ДокументВыплаты);
			ДокументВыплаты.Записать(РежимЗаписи);
		КонецЦикла;
		
	Иначе
		ДокументВыплаты = Документы[ИмяДокументаВыплаты].СоздатьДокумент();
		ДокументВыплаты.Заполнить(МассивДокументов);
		ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		ДокументВыплаты.Дата                           = Основание.Дата;
		ДокументВыплаты.Записать(РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Чеки

Функция ЧекиПробитыНаФискальномУстройстве(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВБухучете") Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "ЗарплатаОтраженаВБухучете, Проведен");
		Если НЕ (РеквизитыОбъекта.Проведен И РеквизитыОбъекта.ЗарплатаОтраженаВБухучете) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВУчете") Тогда
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Проведен") Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ОбъектСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПоУдержаниямДляПечатиЧеков.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ИдентификаторыЧеков
	|ИЗ
	|	РегистрСведений.ДанныеПоУдержаниямДляПечатиЧеков КАК ДанныеПоУдержаниямДляПечатиЧеков
	|ГДЕ
	|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИдентификаторыЧеков.ИдентификаторЗаписи КАК ИдентификаторЗаписиПлан,
	|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписиФакт
	|ПОМЕСТИТЬ ВТ_СравнениеСостояний
	|ИЗ
	|	ВТ_ИдентификаторыЧеков КАК ВТ_ИдентификаторыЧеков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ВТ_ИдентификаторыЧеков.ДокументОснование = ФискальныеОперации.ДокументОснование
	|			И ВТ_ИдентификаторыЧеков.ИдентификаторЗаписи = ФискальныеОперации.ИдентификаторЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИдентификаторыЧеков.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ВТ_ИдентификаторыЧеков.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТ_ИдентификаторыЧеков КАК ВТ_ИдентификаторыЧеков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СравнениеСостояний.ИдентификаторЗаписиПлан КАК ИдентификаторЗаписиПлан,
	|	ВТ_СравнениеСостояний.ИдентификаторЗаписиФакт КАК ИдентификаторЗаписиФакт
	|ИЗ
	|	ВТ_СравнениеСостояний КАК ВТ_СравнениеСостояний
	|ГДЕ
	|	ВТ_СравнениеСостояний.ИдентификаторЗаписиФакт ЕСТЬ NULL";
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[2].Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Результат[3].Пустой();
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьВозможностьПечатиЧеков(ОбъектСсылка, ПечататьЧек, ТекстПредупреждения = "") Экспорт
	
	Если ТипЗнч(ОбъектСсылка) <> Тип("ДокументСсылка.ОтражениеЗарплатыВБухучете")
		И ТипЗнч(ОбъектСсылка) <> Тип("ДокументСсылка.ОтражениеЗарплатыВУчете") Тогда
		ТекстПредупреждения = НСтр("ru = 'Объект не является основанием для печати чеков'");
		ПечататьЧек = Ложь;
	Иначе
		ДокументОтраженВУчете = Ложь;
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВБухучете") Тогда
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "ЗарплатаОтраженаВБухучете, Проведен");
			Если НЕ (РеквизитыОбъекта.Проведен И РеквизитыОбъекта.ЗарплатаОтраженаВБухучете) Тогда
				ТекстПредупреждения = НСтр("ru = 'Операция возможна только после отражения в учете документа'");
				ПечататьЧек = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВУчете") Тогда
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Проведен") Тогда
				ТекстПредупреждения = НСтр("ru = 'Операция возможна только после проведения документа'");
				ПечататьЧек = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ПечататьЧек Тогда
			ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Регистратор", ОбъектСсылка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПоУдержаниямДляПечатиЧеков.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
			|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрСведений.ДанныеПоУдержаниямДляПечатиЧеков КАК ДанныеПоУдержаниямДляПечатиЧеков
			|ГДЕ
			|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор = &Регистратор";
			
			Если Запрос.Выполнить().Пустой() Тогда
				ТекстПредупреждения = НСтр("ru = 'В документе нет оснований для печати чеков'");
				ПечататьЧек = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаПараметрыПечатиЧека(ДокументСсылка, ИменаТаблиц, СообщениеОбОшибке) Экспорт
	
	ТекстЗапроса = ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц);
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеквизитыПечатиЧека(ИменаТаблиц)
	
	ИменаТаблиц.Добавить("ВТ_ВсеДанныеДляПечати");
	ИменаТаблиц.Добавить("ВТ_ПробитыеЧеки");
	ИменаТаблиц.Добавить("ВТ_ДанныеДляПечати");
	ИменаТаблиц.Добавить("ВТ_РеквизитыШапки");
	ИменаТаблиц.Добавить("РеквизитыПечатиЧека");
	ИменаТаблиц.Добавить("ОплачиваемаяНоменклатура");
	ИменаТаблиц.Добавить("ОплачиваемыеДокументы");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор КАК Регистратор,
	|	ДанныеПоУдержаниямДляПечатиЧеков.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ПОМЕСТИТЬ ВТ_ВсеДанныеДляПечати
	|ИЗ
	|	РегистрСведений.ДанныеПоУдержаниямДляПечатиЧеков КАК ДанныеПоУдержаниямДляПечатиЧеков
	|ГДЕ
	|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФискальныеОперации.ДокументОснование КАК ДокументОснование,
	|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ПОМЕСТИТЬ ВТ_ПробитыеЧеки
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ДокументОснование = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеДанныеДляПечати.Регистратор КАК Регистратор,
	|	ВТ_ВсеДанныеДляПечати.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ПОМЕСТИТЬ ВТ_ДанныеДляПечати
	|ИЗ
	|	ВТ_ВсеДанныеДляПечати КАК ВТ_ВсеДанныеДляПечати
	|ГДЕ
	|	НЕ ВТ_ВсеДанныеДляПечати.ИдентификаторЗаписи В
	|				(ВЫБРАТЬ
	|					ВТ_ПробитыеЧеки.ИдентификаторЗаписи
	|				ИЗ
	|					ВТ_ПробитыеЧеки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДляПечати.Регистратор КАК Ссылка,
	|	&ДатаОчереди КАК Дата,
	|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор.Номер КАК Номер,
	|	ДанныеПоУдержаниямДляПечатиЧеков.Организация КАК Организация,
	|	ДанныеПоУдержаниямДляПечатиЧеков.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПоУдержаниямДляПечатиЧеков.ФизическоеЛицо КАК Контрагент,
	|	ДанныеПоУдержаниямДляПечатиЧеков.Сумма КАК СуммаДокумента,
	|	ЕСТЬNULL(ДанныеПоУдержаниямДляПечатиЧеков.ФизическоеЛицо.Наименование, """") + "": "" + ДанныеПоУдержаниямДляПечатиЧеков.ОписаниеУдержанияДляЧека КАК ОписаниеУдержанияДляЧека,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	ДанныеПоУдержаниямДляПечатиЧеков.Контрагент КАК ПлатежныйАгент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорПлатежногоАгента,
	|	ДанныеПоУдержаниямДляПечатиЧеков.ИдентификаторЗаписи КАК ИдентификаторФискальнойЗаписи,
	|	ЛОЖЬ КАК НесколькоДоговоровПлатежногоАгента,
	|	НЕОПРЕДЕЛЕНО КАК НомерТаможеннойДекларации,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныПроисхожденияТовара,
	|	ЛОЖЬ КАК ВыводитьКонтрагентаВЧеке
	|ПОМЕСТИТЬ ВТ_РеквизитыШапки
	|ИЗ
	|	ВТ_ДанныеДляПечати КАК ВТ_ДанныеДляПечати
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПоУдержаниямДляПечатиЧеков КАК ДанныеПоУдержаниямДляПечатиЧеков
	|		ПО ВТ_ДанныеДляПечати.Регистратор = ДанныеПоУдержаниямДляПечатиЧеков.Регистратор
	|			И ВТ_ДанныеДляПечати.ИдентификаторЗаписи = ДанныеПоУдержаниямДляПечатиЧеков.ИдентификаторЗаписи
	|ГДЕ
	|	ДанныеПоУдержаниямДляПечатиЧеков.Регистратор = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыПечатиЧека.Ссылка КАК Ссылка,
	|	РеквизитыПечатиЧека.Организация КАК Организация,
	|	РеквизитыПечатиЧека.СуммаДокумента КАК СуммаДокумента,
	|	РеквизитыПечатиЧека.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РеквизитыПечатиЧека.Контрагент КАК Контрагент,
	|	РеквизитыПечатиЧека.Дата КАК Дата,
	|	РеквизитыПечатиЧека.Номер КАК Номер,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.ВстречноеПредоставление) КАК ТипОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств) КАК ТипРасчета,
	|	РеквизитыПечатиЧека.СтавкаНДС КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО КАК Патент,
	|	РеквизитыПечатиЧека.ОписаниеУдержанияДляЧека КАК ОписаниеУдержанияДляЧека,
	|	РеквизитыПечатиЧека.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	РеквизитыПечатиЧека.ПлатежныйАгент КАК ПлатежныйАгент,
	|	РеквизитыПечатиЧека.НесколькоДоговоровПлатежногоАгента КАК НесколькоДоговоровПлатежногоАгента,
	|	РеквизитыПечатиЧека.ИдентификаторФискальнойЗаписи КАК ИдентификаторФискальнойЗаписи,
	|	РеквизитыПечатиЧека.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	РеквизитыПечатиЧека.КодСтраныПроисхожденияТовара КАК КодСтраныПроисхожденияТовара
	|ИЗ
	|	ВТ_РеквизитыШапки КАК РеквизитыПечатиЧека
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплачиваемаяНоменклатура.Ссылка КАК Документ,
	|	ОплачиваемаяНоменклатура.Дата КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ОплачиваемаяНоменклатура.ОписаниеУдержанияДляЧека КАК Наименование,
	|	1 КАК Количество,
	|	ОплачиваемаяНоменклатура.СуммаДокумента КАК Цена,
	|	0 КАК СуммаСкидок,
	|	0 КАК СуммаНДС,
	|	ОплачиваемаяНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	ОплачиваемаяНоменклатура.СуммаДокумента КАК Сумма,
	|	1 КАК КоличествоОтгружено,
	|	ОплачиваемаяНоменклатура.ПлатежныйАгент КАК ПлатежныйАгент,
	|	ОплачиваемаяНоменклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ОплачиваемаяНоменклатура.НесколькоДоговоровПлатежногоАгента КАК НесколькоДоговоровПлатежногоАгента,
	|	НЕОПРЕДЕЛЕНО КАК Штрихкод,
	|	ОплачиваемаяНоменклатура.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОплачиваемаяНоменклатура.Контрагент КАК Контрагент,
	|	ОплачиваемаяНоменклатура.ИдентификаторФискальнойЗаписи КАК ИдентификаторФискальнойЗаписи,
	|	ОплачиваемаяНоменклатура.НомерТаможеннойДекларации КАК НомерТаможеннойДекларации,
	|	ОплачиваемаяНоменклатура.КодСтраныПроисхожденияТовара КАК КодСтраныПроисхожденияТовара
	|ИЗ
	|	ВТ_РеквизитыШапки КАК ОплачиваемаяНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплачиваемаяНоменклатура.СтавкаНДС,
	|	ОплачиваемаяНоменклатура.Ссылка,
	|	ОплачиваемаяНоменклатура.ОписаниеУдержанияДляЧека,
	|	ОплачиваемаяНоменклатура.Дата,
	|	ОплачиваемаяНоменклатура.ДоговорПлатежногоАгента,
	|	ОплачиваемаяНоменклатура.Контрагент,
	|	ОплачиваемаяНоменклатура.ФизическоеЛицо,
	|	ОплачиваемаяНоменклатура.СуммаДокумента,
	|	ОплачиваемаяНоменклатура.ИдентификаторФискальнойЗаписи,
	|	ОплачиваемаяНоменклатура.ПлатежныйАгент,
	|	ОплачиваемаяНоменклатура.НесколькоДоговоровПлатежногоАгента,
	|	ОплачиваемаяНоменклатура.НомерТаможеннойДекларации,
	|	ОплачиваемаяНоменклатура.КодСтраныПроисхожденияТовара,
	|	ОплачиваемаяНоменклатура.СуммаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплачиваемыеДокументы.Ссылка КАК Документ,
	|	ОплачиваемыеДокументы.Организация КАК Организация,
	|	ОплачиваемыеДокументы.Дата КАК Дата,
	|	0 КАК СуммаСкидкиПоДокументу,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ОплачиваемыеДокументы.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ОплачиваемыеДокументы.СуммаДокумента КАК СуммаОплаты,
	|	ОплачиваемыеДокументы.СуммаДокумента КАК СуммаВзаиморасчетов,
	|	ОплачиваемыеДокументы.СуммаДокумента КАК СуммаОплатыВсего,
	|	ОплачиваемыеДокументы.ИдентификаторФискальнойЗаписи КАК ИдентификаторФискальнойЗаписи,
	|	ОплачиваемыеДокументы.ВыводитьКонтрагентаВЧеке КАК ВыводитьКонтрагентаВЧеке
	|ИЗ
	|	ВТ_РеквизитыШапки КАК ОплачиваемыеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплачиваемыеДокументы.СтавкаНДС,
	|	ОплачиваемыеДокументы.Ссылка,
	|	ОплачиваемыеДокументы.Организация,
	|	ОплачиваемыеДокументы.Дата,
	|	ОплачиваемыеДокументы.СуммаДокумента,
	|	ОплачиваемыеДокументы.ИдентификаторФискальнойЗаписи,
	|	ОплачиваемыеДокументы.ВыводитьКонтрагентаВЧеке,
	|	ОплачиваемыеДокументы.СуммаДокумента,
	|	ОплачиваемыеДокументы.СуммаДокумента";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция НаименованиеВСтрокеЧека(СтруктураШапки) Экспорт
	
	Возврат СтруктураШапки.ОписаниеУдержанияДляЧека;
	
КонецФункции

Функция ИдентификаторЧека(ДокументСсылка, ПараметрыРасчетаХеша)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.Добавить(XMLСтрока(ДокументСсылка));
	ХешированиеДанных.Добавить(XMLСтрока(ПараметрыРасчетаХеша.ФизическоеЛицо));
	ХешированиеДанных.Добавить(XMLСтрока(ПараметрыРасчетаХеша.Подразделение));
	ХешированиеДанных.Добавить(XMLСтрока(ПараметрыРасчетаХеша.Контрагент));
	ХешированиеДанных.Добавить(XMLСтрока(ПараметрыРасчетаХеша.ОписаниеУдержанияДляЧека));
	ХешированиеДанных.Добавить(Формат(ПараметрыРасчетаХеша.Сумма, "ЧДЦ=2; ЧРД=.; ЧН=-; ЧГ=; ЧО=1"));
	
	Возврат ОбщегоНазначения.СократитьСтрокуКонтрольнойСуммой(Формат(ХешированиеДанных.ХешСумма, "ЧГ="), 36);
	
КонецФункции

#КонецОбласти

#Область Антикризис

// Устанавливает тариф страховых взносов для отраслей пострадавших от коронавирусной инфекции -
// включает или выключает его применение в периоде, в котором действует освобождение от налогов для них.
//
// Параметры:
//  Организация - СправочникСсылка.Организации 
//  Значение    - Булево - Истина, чтобы включить применение; Ложь - чтобы отключить
// 
// Возвращаемое значение:
//  Булево - Истина, если действие выполнено (в ходе вызова или до вызова)
//
Функция УстановитьТарифСтраховыхВзносовДляОтраслейПострадавшихОтКоронавируснойИнфекции(Организация, Значение) Экспорт
	
	ПериодОсвобождения = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов");
	ЭлементБлокировкиДанных.УстановитьЗначение("ГоловнаяОрганизация", Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("НачалоПериодаОсвобождения", ПериодОсвобождения.Начало);
	Запрос.УстановитьПараметр("ПериодДоОсвобождения",      ПериодОсвобождения.Начало - 1);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ТарифыНаНачалоПериода.ВидТарифа КАК ВидТарифа,
	|	ТарифыНаНачалоПериода.ОрганизацияИнвалидов КАК ОрганизацияИнвалидов
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(&ПериодДоОсвобождения, ГоловнаяОрганизация = &Организация) КАК ТарифыНаНачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 3
	|	ПослеНачалаПериодаОсвобождения.Период КАК Период,
	|	ПослеНачалаПериодаОсвобождения.ВидТарифа КАК ВидТарифа,
	|	ПослеНачалаПериодаОсвобождения.ОрганизацияИнвалидов КАК ОрганизацияИнвалидов
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов КАК ПослеНачалаПериодаОсвобождения
	|ГДЕ
	|	ПослеНачалаПериодаОсвобождения.ГоловнаяОрганизация = &Организация
	|	И ПослеНачалаПериодаОсвобождения.Период >= &НачалоПериодаОсвобождения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПослеНачалаПериодаОсвобождения.Период";
	
	ТарифУстановлен = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		РезультатЗапросов = Запрос.ВыполнитьПакет();
		ВыборкаНаНачалоПериода = РезультатЗапросов[0].Выбрать();
		Если Не ВыборкаНаНачалоПериода.Следующий() Тогда
			ТарифНаНачало        = Неопределено;
			ОрганизацияИнвалидов = Ложь;
		Иначе
			ТарифНаНачало        = ВыборкаНаНачалоПериода.ВидТарифа;
			ОрганизацияИнвалидов = ВыборкаНаНачалоПериода.ОрганизацияИнвалидов;
		КонецЕсли;
		
		ДанныеЗаПериод = РезультатЗапросов[1].Выгрузить();
		
		Если Значение Тогда
			ТарифУстановлен = ВключитьТарифСтраховыхВзносовДляОтраслейПострадавшихОтКоронавируснойИнфекции(
				Организация,
				ТарифНаНачало,
				ОрганизацияИнвалидов,
				ДанныеЗаПериод);
		Иначе
			ТарифУстановлен = ВыключитьТарифСтраховыхВзносовДляОтраслейПострадавшихОтКоронавируснойИнфекции(
				Организация,
				ТарифНаНачало,
				ОрганизацияИнвалидов,
				ДанныеЗаПериод);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			"РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов,
			Организация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ТарифУстановлен;
	
КонецФункции

Функция ВключитьТарифСтраховыхВзносовДляОтраслейПострадавшихОтКоронавируснойИнфекции(Организация, ТарифНаНачало, ОрганизацияИнвалидов, ДанныеЗаПериод)
	
	ПериодОсвобождения           = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	СледующийПериод              = ПериодОсвобождения.Конец + 1;
	ПониженныйАнтикризисныйТариф = Справочники.ВидыТарифовСтраховыхВзносов.ДляСубъектовМалогоПредпринимательства;
	ТарифДляПострадавших         = Справочники.ВидыТарифовСтраховыхВзносов.ДляОтраслейПострадавшихОтКоронавируснойИнфекции;
	
	Если Не ЗначениеЗаполнено(ТарифНаНачало) Или ТарифНаНачало = ТарифДляПострадавших Тогда
		// Настройки явно некорректные, гарантировать корректность изменений не можем
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЗаписейЗаПериод = ДанныеЗаПериод.Количество();
	
	Если КоличествоЗаписейЗаПериод >= 2 Тогда
		
		// Может быть, уже установлен 
		
		Включение = ДанныеЗаПериод[0];
		ВключенКорректно  = (Включение.Период = ПериодОсвобождения.Начало И Включение.ВидТарифа = ТарифДляПострадавших);
		
		Выключение = ДанныеЗаПериод[1];
		ВыключенКорректно = (Выключение.Период = СледующийПериод И Выключение.ВидТарифа <> ТарифДляПострадавших);
		
		Возврат ВключенКорректно И ВыключенКорректно;
		
	ИначеЕсли КоличествоЗаписейЗаПериод = 1 Тогда
		
		// Допускаем единственный вариант - применен пониженный антикризисный тариф, причем с той же даты, что и освобождение
		Если ДанныеЗаПериод[0].Период <> ПериодОсвобождения.Начало
			Или ДанныеЗаПериод[0].ВидТарифа <> ПониженныйАнтикризисныйТариф Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СледующийТариф = ПониженныйАнтикризисныйТариф;
		
	Иначе
		
		СледующийТариф = ТарифНаНачало;
		
	КонецЕсли;
	
	// С начала периода применяется тариф для пострадавших
	Запись = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
	Запись.Период                   = ПериодОсвобождения.Начало;
	Запись.ГоловнаяОрганизация      = Организация;
	Запись.ВидТарифа                = ТарифДляПострадавших;
	Запись.ОрганизацияИнвалидов     = ОрганизацияИнвалидов;
	Запись.ДатаРегистрацииИзменений = Запись.Период;
	Запись.Записать();
	
	// Потом применяется другой тариф
	Запись = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
	Запись.Период                   = СледующийПериод;
	Запись.ГоловнаяОрганизация      = Организация;
	Запись.ВидТарифа                = СледующийТариф;
	Запись.ОрганизацияИнвалидов     = ОрганизацияИнвалидов;
	Запись.ДатаРегистрацииИзменений = Запись.Период;
	Запись.Записать();
	
	Возврат Истина;
	
КонецФункции

Функция ВыключитьТарифСтраховыхВзносовДляОтраслейПострадавшихОтКоронавируснойИнфекции(Организация, ТарифНаНачало, ОрганизацияИнвалидов, ДанныеЗаПериод)
	
	ПериодОсвобождения           = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	СледующийПериод              = ПериодОсвобождения.Конец + 1;
	ПониженныйАнтикризисныйТариф = Справочники.ВидыТарифовСтраховыхВзносов.ДляСубъектовМалогоПредпринимательства;
	ТарифДляПострадавших         = Справочники.ВидыТарифовСтраховыхВзносов.ДляОтраслейПострадавшихОтКоронавируснойИнфекции;
	
	Если ТарифНаНачало <> ТарифДляПострадавших И ДанныеЗаПериод.Найти(ТарифДляПострадавших, "ВидТарифа") = Неопределено Тогда
		// не включен
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТарифНаНачало) Тогда
		// Настройки явно некорректные, гарантировать корректность изменений не можем
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЗаписейЗаПериод = ДанныеЗаПериод.Количество();
	
	Если КоличествоЗаписейЗаПериод < 2 Тогда
		// включен неверно
		Возврат Ложь;
	КонецЕсли;
		
	Включение = ДанныеЗаПериод[0];
	ВключенКорректно  = (Включение.Период = ПериодОсвобождения.Начало И Включение.ВидТарифа = ТарифДляПострадавших);
	Если Не ВключенКорректно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выключение = ДанныеЗаПериод[1];
	ВыключенКорректно = (Выключение.Период = СледующийПериод И Выключение.ВидТарифа <> ТарифДляПострадавших);
	Если Не ВыключенКорректно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// При выключении может быть неопределенность в дате начала действия тарифа, который указан с даты выключения.
	// Он должен действовать с даты включения или с даты выключения?
	
	СледующийТариф = ТарифНаНачало;
	
	Если Выключение.ВидТарифа <> ТарифНаНачало Тогда
		// Есть неопределенность.
		Если Выключение.ВидТарифа = ПониженныйАнтикризисныйТариф Тогда
			// Можем решить неопределенность, ст. 5 Закона от 1 апреля 2020 г. N 102-ФЗ -
			// дата начала применения пониженного тарифа, что и дата освобождения.
			СледующийТариф = ПониженныйАнтикризисныйТариф;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Удалим запись про выключение
	Запись = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
	Запись.Период                   = СледующийПериод;
	Запись.ГоловнаяОрганизация      = Организация;
	Запись.Удалить();
	
	// Запись про включение может понадобиться, если применяется пониженный антикризисный тариф
	Запись = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
	Запись.Период                   = ПериодОсвобождения.Начало;
	Запись.ГоловнаяОрганизация      = Организация;
	
	Если СледующийТариф = ТарифНаНачало Тогда
		// Не понадобится
		Запись.Удалить();
	Иначе
		Запись.ВидТарифа                = ПониженныйАнтикризисныйТариф;
		Запись.ОрганизацияИнвалидов     = ОрганизацияИнвалидов;
		Запись.ДатаРегистрацииИзменений = Запись.Период;
		Запись.Записать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗаполнитьОкругление() Экспорт
	
	СпособОкругленияПоУмолчанию = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Округление = ЗНАЧЕНИЕ(Справочник.СпособыОкругленияПриРасчетеЗарплаты.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпособВыплаты = Выборка.Ссылка.ПолучитьОбъект();
		СпособВыплаты.Округление = СпособОкругленияПоУмолчанию;
		СпособВыплаты.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпособВыплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.СпособВыплаты = ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СпособВыплаты = СпособВыплаты;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВосстановлениеКадровойИнформации

Процедура ОбработатьКадровыеДанныеСотрудников() Экспорт
	
	НачатьТранзакцию();
	Попытка
		ЕстьДанныеДляИсправления = Ложь;
		ЗаполнитьТекущиеКадровыеДанные(ЕстьДанныеДляИсправления);
		ЗаполнитьТекущуюТарифнуюСтавку(ЕстьДанныеДляИсправления);
		ЗаполнитьОрганизацииСотрудников(ЕстьДанныеДляИсправления);
		ЗаполнитьОсновныхСотрудниковФизическихЛиц(ЕстьДанныеДляИсправления);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать кадровые данные
                               |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьТекущиеКадровыеДанные(ЕстьДанныеДляИсправления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТекущиеДанные.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТекущиеДанные.Сотрудник КАК Сотрудник,
	|	ТекущиеДанные.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеДанные.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеДанные.ДатаУвольнения КАК ДатаУвольнения,
	|	ТекущиеДанные.ОсновноеРабочееМестоВОрганизации КАК ОсновноеРабочееМестоВОрганизации,
	|	ТекущиеДанные.ДатаПриема КАК ДатаПриема,
	|	ТекущиеДанные.ТекущийВидЗанятости КАК ТекущийВидЗанятости,
	|	ТекущиеДанные.ОформленПоТрудовомуДоговору КАК ОформленПоТрудовомуДоговору,
	|	Сотрудники.Ссылка КАК СправочникСотрудник
	|ПОМЕСТИТЬ ВТ_ЗаписиКадры
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТекущиеДанные.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|			И ТекущиеДанные.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
	|ГДЕ
	|	ВЫРАЗИТЬ(ТекущиеДанные.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Записи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Записи.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ВТ_Записи.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Записи.Сотрудник КАК Сотрудник,
	|	ВТ_Записи.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ВТ_Записи.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ВТ_Записи.ДатаУвольнения КАК ДатаУвольнения,
	|	ВТ_Записи.ОсновноеРабочееМестоВОрганизации КАК ОсновноеРабочееМестоВОрганизации,
	|	ВТ_Записи.ДатаПриема КАК ДатаПриема,
	|	ВТ_Записи.ТекущийВидЗанятости КАК ТекущийВидЗанятости,
	|	ВТ_Записи.ОформленПоТрудовомуДоговору КАК ОформленПоТрудовомуДоговору,
	|	ВТ_Записи.СправочникСотрудник КАК СправочникСотрудник,
	|	ВЫБОР
	|		КОГДА ТекущиеДанные.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьСуществует
	|ИЗ
	|	ВТ_ЗаписиКадры КАК ВТ_Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеДанные
	|		ПО ВТ_Записи.ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо
	|			И ВТ_Записи.СправочникСотрудник = ТекущиеДанные.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Записи.ГоловнаяОрганизация,
	|	ВТ_Записи.ТекущаяОрганизация,
	|	ВТ_Записи.ФизическоеЛицо,
	|	ВТ_Записи.Сотрудник,
	|	ВТ_Записи.ТекущееПодразделение,
	|	ВТ_Записи.ТекущаяДолжность,
	|	ВТ_Записи.ДатаУвольнения,
	|	ВТ_Записи.ОсновноеРабочееМестоВОрганизации,
	|	ВТ_Записи.ДатаПриема,
	|	ВТ_Записи.ТекущийВидЗанятости,
	|	ВТ_Записи.ОформленПоТрудовомуДоговору,
	|	ВТ_Записи.СправочникСотрудник,
	|	ВЫБОР
	|		КОГДА ТекущиеДанные.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() <> 0 Тогда
		ЕстьДанныеДляИсправления = Истина;
		ОбновитьЗаписиРегистра(ТаблицаДанных, "ТекущиеКадровыеДанныеСотрудников");
	КонецЕсли;
	КадровыйУчет.ИсключитьПовторениеЗаписейТекущихДанныхСотрудников("ТекущиеКадровыеДанныеСотрудников", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьТекущуюТарифнуюСтавку(ЕстьДанныеДляИсправления)
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		Набор = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
		Набор.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущиеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТекущиеДанные.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТекущиеДанные.Сотрудник КАК Сотрудник,
	|	ТекущиеДанные.ТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
	|	ТекущиеДанные.ТекущийСпособРасчетаАванса КАК ТекущийСпособРасчетаАванса,
	|	ТекущиеДанные.ТекущийАванс КАК ТекущийАванс,
	|	Сотрудники.Ссылка КАК СправочникСотрудник
	|ПОМЕСТИТЬ ВТ_ЗаписиТариф
	|ИЗ
	|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТекущиеДанные.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|			И ТекущиеДанные.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
	|ГДЕ
	|	ВЫРАЗИТЬ(ТекущиеДанные.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Записи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВТ_Записи.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ВТ_Записи.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Записи.Сотрудник КАК Сотрудник,
	|	ВТ_Записи.ТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
	|	ВТ_Записи.ТекущийСпособРасчетаАванса КАК ТекущийСпособРасчетаАванса,
	|	ВТ_Записи.ТекущийАванс КАК ТекущийАванс,
	|	ВТ_Записи.СправочникСотрудник КАК СправочникСотрудник,
	|	ВЫБОР
	|		КОГДА ТекущиеДанные.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьСуществует
	|ИЗ
	|	ВТ_ЗаписиТариф КАК ВТ_Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущиеДанные
	|		ПО ВТ_Записи.ФизическоеЛицо = ТекущиеДанные.ФизическоеЛицо
	|			И ВТ_Записи.СправочникСотрудник = ТекущиеДанные.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Записи.ГоловнаяОрганизация,
	|	ВТ_Записи.ТекущаяОрганизация,
	|	ВТ_Записи.ФизическоеЛицо,
	|	ВТ_Записи.Сотрудник,
	|	ВТ_Записи.ТекущаяТарифнаяСтавка,
	|	ВТ_Записи.ТекущийСпособРасчетаАванса,
	|	ВТ_Записи.ТекущийАванс,
	|	ВТ_Записи.СправочникСотрудник,
	|	ВЫБОР
	|		КОГДА ТекущиеДанные.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() <> 0 Тогда
		ЕстьДанныеДляИсправления = Истина;
		ОбновитьЗаписиРегистра(ТаблицаДанных, "ТекущаяТарифнаяСтавкаСотрудников");
		КадровыйУчет.ИсключитьПовторениеЗаписейТекущихДанныхСотрудников("ТекущаяТарифнаяСтавкаСотрудников", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗаписиРегистра(ТаблицаДанных, ИмяРегистра)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(СтрокаТаблицы.ГоловнаяОрганизация);
		НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(СтрокаТаблицы.ТекущаяОрганизация);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(СтрокаТаблицы.ФизическоеЛицо);
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.Сотрудник);
		НаборЗаписей.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СправочникСотрудник)
			ИЛИ СтрокаТаблицы.ЗаписьСуществует Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(СтрокаТаблицы.ГоловнаяОрганизация);
		НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(СтрокаТаблицы.ТекущаяОрганизация);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(СтрокаТаблицы.ФизическоеЛицо);
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТаблицы.СправочникСотрудник);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
			НоваяЗапись.Сотрудник = СтрокаТаблицы.СправочникСотрудник;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацииСотрудников(ЕстьДанныеДляИсправления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииВКоторыхРаботалиСотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОрганизацииВКоторыхРаботалиСотрудники КАК ОрганизацииВКоторыхРаботалиСотрудники
		|ГДЕ
		|	(ВЫРАЗИТЬ(ОрганизацииВКоторыхРаботалиСотрудники.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо ЕСТЬ NULL
		|			ИЛИ ОрганизацииВКоторыхРаботалиСотрудники.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДанныеДляИсправления = Истина;
	
	Набор = РегистрыСведений.ОрганизацииВКоторыхРаботалиСотрудники.СоздатьНаборЗаписей();
	Набор.Очистить();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, Ложь);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		
	КонецЕсли;
	
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
	
КонецПроцедуры

Процедура ЗаполнитьОсновныхСотрудниковФизическихЛиц(ЕстьДанныеДляИсправления)
	
	Запрос = Новый Запрос;
	Если НЕ ЕстьДанныеДляИсправления Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		| ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		| РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|ГДЕ
		| ЕСТЬNULL(ВЫРАЗИТЬ(ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо, НЕОПРЕДЕЛЕНО) <> ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо";
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанныеДляИсправления = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;
	Если НЕ ЕстьДанныеДляИсправления Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицоТекущиеДанные,
		|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицоСотрудника
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо ЕСТЬ NULL";
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанныеДляИсправления = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Если НЕ ЕстьДанныеДляИсправления Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Очистить();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
		
		Запрос.Выполнить();
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников.Имя,
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТСотрудникиПериоды", "Сотрудник"));
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(Сотрудники.Ссылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	&МаксимальнаяДата КАК ДатаОкончания
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
			|		ПО Сотрудники.ГоловнаяОрганизация = ВидыЗанятостиСотрудников.ГоловнаяОрганизация
			|			И Сотрудники.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО Сотрудники.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
			|			И Сотрудники.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|ГДЕ
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо ЕСТЬ NULL
			|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МАКСИМУМ(ВидыЗанятостиСотрудников.Сотрудник) КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА МАКСИМУМ(ВидыЗанятостиСотрудниковПредыдущие.Период) ЕСТЬ NULL
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ ВидыЗанятостиСотрудников.Период
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период) ЕСТЬ NULL
			|			ТОГДА &МаксимальнаяДата
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период), ДЕНЬ, -1)
			|	КОНЕЦ КАК ДатаОкончания
			|ИЗ
			|	ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковПредыдущие
			|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковПредыдущие.ГоловнаяОрганизация
			|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковПредыдущие.ФизическоеЛицо
			|			И (ВидыЗанятостиСотрудниковПредыдущие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
			|			И ВидыЗанятостиСотрудников.Период > ВидыЗанятостиСотрудниковПредыдущие.Период
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковСледующие
			|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковСледующие.ГоловнаяОрганизация
			|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковСледующие.ФизическоеЛицо
			|			И (ВидыЗанятостиСотрудниковСледующие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
			|			И ВидыЗанятостиСотрудников.Период < ВидыЗанятостиСотрудниковСледующие.Период
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
			|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|ГДЕ
			|	ВидыЗанятостиСотрудников.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
			|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ВидыЗанятостиСотрудников.Период,
			|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация,
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо,
			|	ГоловнаяОрганизация,
			|	ДатаНачала";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				
				Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
					
					НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
					НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
					
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК Сотрудник
			|ПОМЕСТИТЬ ВТРаботающиеФизическиеЛица
			|ИЗ
			|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|ГДЕ
			|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК Сотрудник
			|ПОМЕСТИТЬ ВТРаботающиеФизическиеЛицаСовместители
			|ИЗ
			|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающиеФизическиеЛица КАК РаботающиеФизическиеЛица
			|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = РаботающиеФизическиеЛица.ФизическоеЛицо
			|			И ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = РаботающиеФизическиеЛица.ГоловнаяОрганизация
			|ГДЕ
			|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
			|	И РаботающиеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РаботающиеФизическиеЛица.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	РаботающиеФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
			|	РаботающиеФизическиеЛица.Сотрудник КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	&МаксимальнаяДата КАК ДатаОкончания
			|ИЗ
			|	ВТРаботающиеФизическиеЛица КАК РаботающиеФизическиеЛица
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РаботающиеФизическиеЛица.ГоловнаяОрганизация,
			|	РаботающиеФизическиеЛица.ФизическоеЛицо,
			|	РаботающиеФизическиеЛица.Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1),
			|	&МаксимальнаяДата
			|ИЗ
			|	ВТРаботающиеФизическиеЛицаСовместители КАК РаботающиеФизическиеЛица
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
			|	МИНИМУМ(ТекущиеКадровыеДанныеСотрудников.Сотрудник),
			|	ДАТАВРЕМЯ(1, 1, 1),
			|	&МаксимальнаяДата
			|ИЗ
			|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающиеФизическиеЛица КАК РаботающиеФизическиеЛица
			|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = РаботающиеФизическиеЛица.ФизическоеЛицо
			|			И ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = РаботающиеФизическиеЛица.ГоловнаяОрганизация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботающиеФизическиеЛицаСовместители КАК РаботающиеФизическиеЛицаСовместители
			|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = РаботающиеФизическиеЛицаСовместители.ФизическоеЛицо
			|			И ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = РаботающиеФизическиеЛицаСовместители.ГоловнаяОрганизация
			|ГДЕ
			|	РаботающиеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
			|	И РаботающиеФизическиеЛицаСовместители.ФизическоеЛицо ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСпособРасчетаАванса() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровыйПеревод.Ссылка
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|ГДЕ
	|	КадровыйПеревод.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СпособРасчетаАванса = СпособРасчетаАванса;
		ДокументОбъект.Аванс               = 40;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРолиСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО Сотрудники.Ссылка = РолиСотрудников.Сотрудник
	|ГДЕ
	|	РолиСотрудников.Сотрудник ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Сотрудник      = Выборка.Сотрудник;
		НоваяЗапись.РольСотрудника = Перечисления.РолиСотрудников.Работник;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьКадровыйУчетВОсновномИнтерфейсе() Экспорт
	
	Если НЕ СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		Константы.ИспользоватьКадровыйУчетОсновнойИнтерфейс.Установить(Константы.ИспользоватьКадровыйУчет.Получить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ВосстановитьРегистрациюВНалоговомОргане() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОрганеИстория
	|ПОМЕСТИТЬ ВТ_Регистрации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Организации.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|ГДЕ
	|	Организации.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Организации.РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.Пустаяссылка)
	|			ТОГДА Организации.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ПодразделенияОрганизаций.РегистрацияВНалоговомОргане
	|	КОНЕЦ,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПодразделенияОрганизаций.Владелец = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО ПодразделенияОрганизаций.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|ГДЕ
	|	(ПодразделенияОрганизаций.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ИЛИ Организации.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане,
	|	ПодразделенияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.Пустаяссылка)
	|			ТОГДА Организации.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ПодразделенияОрганизаций.РегистрацияВНалоговомОргане
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Регистрации.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_Регистрации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_Регистрации КАК ВТ_Регистрации
	|ГДЕ
	|	ВТ_Регистрации.РегистрацияВНалоговомОрганеИстория ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Регистрации.РегистрацияВНалоговомОргане,
	|	ВТ_Регистрации.СтруктурнаяЕдиница";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	ДатаЗаписи = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ДатаОтсчетаПериодическихСведений();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Выборка.СтруктурнаяЕдиница);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период                      = ДатаЗаписи;
			НоваяЗапись.СтруктурнаяЕдиница          = Выборка.СтруктурнаяЕдиница;
			НоваяЗапись.РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось восстановить историю регистраций в налоговом органе
			|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			Выборка.СтруктурнаяЕдиница,
			ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьФункционалВедетсяУчетЗарплатыКадров() Экспорт
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить()
		ИЛИ Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗначения = Константы.ВедетсяУчетЗарплатыКадров.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		МенеджерЗначения.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		ОтключитьПодсистемуУчетаЗарплатыИКадров();
	КонецЕсли;

КонецПроцедуры

Процедура ВключитьРасчетЗарплатыДляНебольшихОрганизаций() Экспорт

	Если НЕ ТарификацияБПВызовСервераПовтИсп.РазрешеноИспользованиеВнешнейПрограммыУчетаЗарплаты() Тогда
		Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(Ложь);
	КонецЕсли;

	Если НЕ Константы.РасчетЗарплатыДляНебольшихОрганизаций.Получить() Тогда
		Константы.РасчетЗарплатыДляНебольшихОрганизаций.Установить(
			Константы.ИспользоватьНачислениеЗарплаты.Получить()
			И РасчетЗарплатыДляНебольшихОрганизаций.РасчетЗарплатыДляНебольшихОрганизацийВозможен());
	КонецЕсли;
	
	Константы.РассчитыватьДокументыПриРедактировании.Установить(Истина);
	
КонецПроцедуры

Процедура УточнитьКодДоходаНДФЛКомпенсацияОтпуска() Экспорт
	
	ПланыВидовРасчета.Начисления.УточнитьКодДоходаНДФЛКомпенсацияОтпуска();
	
КонецПроцедуры

Процедура ВосстановитьСтатьиРасходовЗарплата() Экспорт
	
	ЗарплатаКадры.СтатьиРасходовЗарплатаНачальноеЗаполнениеПоСпособамРасчетов();
	ОтражениеЗарплатыВБухучете.ЗаполнитьСтатьюРасходовВДокументеОтражениеЗарплатыВБухучете();
	
КонецПроцедуры

Процедура ИсправитьФормироватьРезервОтпусковНУВНастройкахРезервовОтпусков() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовОтпусков.Организация КАК Организация,
	|	НастройкиРасчетаРезервовОтпусков.Период КАК Период
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаРезервовОтпусков КАК НастройкиРасчетаРезервовОтпусков
	|ГДЕ
	|	НастройкиРасчетаРезервовОтпусков.ФормироватьРезервОтпусковНУ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Выборка.Организация, Выборка.Период) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			НаборЗаписей = РегистрыСведений.НастройкиРасчетаРезервовОтпусков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Прочитать();
			ИсправляемаяЗапись = НаборЗаписей[0];
			ИсправляемаяЗапись.ФормироватьРезервОтпусковНУ = Ложь;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось скорректировать настройку резервов отпусков для организации %1 за период % 2
				|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Организация, Выборка.Период, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.Организация,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьОрганизационнуюСтруктуруПредприятий() Экспорт
	
	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
		СервисЭлектронныхТрудовыхКнижек.НастроитьОрганизационнуюСтруктуруПредприятия();
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
		|	ПодразделенияОрганизаций.Владелец КАК Владелец
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";
		
		Результат = Запрос.ВыполнитьПакет();
		ТаблицаОрганизаций   = Результат[0].Выгрузить();
		ТаблицаПодразделений = Результат[1].Выгрузить();
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаОрганизаций Цикл
			
			ИспользуетсяКадровыйУчет = Истина;
			
			МассивПодразделений = ТаблицаПодразделений.НайтиСтроки(Новый Структура("Владелец", СтрокаТаблицы.Организация));
			КоличествоПодразделений = МассивПодразделений.Количество() ;
			Если КоличествоПодразделений =0 Тогда
				ИспользуетсяКадровыйУчет = Ложь;
			ИначеЕсли КоличествоПодразделений = 1 Тогда
				РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МассивПодразделений[0].Ссылка, "Наименование,НаименованиеДляЗаписейОТрудовойДеятельности");
				Если РеквизитыПодразделения.Наименование = "Основное подразделение"
					И НЕ ЗначениеЗаполнено(РеквизитыПодразделения.НаименованиеДляЗаписейОТрудовойДеятельности) Тогда
					ИспользуетсяКадровыйУчет = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ОрганизацияОбъект = СтрокаТаблицы.Организация.ПолучитьОбъект();
			ОрганизацияОбъект.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности = НЕ ИспользуетсяКадровыйУчет;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьГрафикиРаботыОрганизаций() Экспорт
	
	РасчетЗарплатыДляНебольшихОрганизаций.СоздатьГрафикиРаботыОрганизаций();
	
КонецПроцедуры

Процедура ПересмотретьСрокиУплатыНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПродленияСроковНалоговОтчетов КАК НастройкиПродленияСроковНалоговОтчетов
	|		ПО УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация = НастройкиПродленияСроковНалоговОтчетов.Организация.ГоловнаяОрганизация
	|ГДЕ
	|	НастройкиПродленияСроковНалоговОтчетов.РаботаетВНерабочиеДни
	|	И (НЕ УчетнаяПолитикаПоНДФЛ.ИгнорироватьДниС30МартаПо3Апреля
	|			ИЛИ НЕ УчетнаяПолитикаПоНДФЛ.ИгнорироватьДниС4По30Апреля
	|			ИЛИ НЕ УчетнаяПолитикаПоНДФЛ.ИгнорироватьДниС6По8Мая)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
		НаборЗаписей.Прочитать();
		ЗаписьУчетнойПолитики = НаборЗаписей[0];
		ЗаписьУчетнойПолитики.ИгнорироватьДниС30МартаПо3Апреля = Истина;
		ЗаписьУчетнойПолитики.ИгнорироватьДниС4По30Апреля      = Истина;
		ЗаписьУчетнойПолитики.ИгнорироватьДниС6По8Мая          = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
		УчетНДФЛ.ПересмотретьСрокиУплаты(Выборка.ГоловнаяОрганизация, '20200325', '20200508');
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьПорядокЗаполненияЭТК() Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиЭлектронныхТрудовыхКнижек.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		ТекущаяЗапись = НаборЗаписей.Добавить();
	Иначе
		ТекущаяЗапись = НаборЗаписей[0];
	КонецЕсли;
	ТекущаяЗапись.ЗаполнятьСТДРВсемиМероприятиямиДо2020Года = Истина;
	ТекущаяЗапись.ИспользоватьДляМероприятийПриемПереводУвольнениеДваДокументаОснования = Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура ОбновитьСоставКонтактнойИнформацииФизическогоЛица() Экспорт
	
	// ТелефонМобильныйФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Ложь;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
КонецПроцедуры

Процедура ЗаполнитьВидДеятельностиДляНалоговогоУчетаЗатрат() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыОтраженияЗарплатыВБухУчете.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтраженияЗарплатыВБухУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВБухУчете.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)
	|	И НЕ СпособыОтраженияЗарплатыВБухУчете.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрименяетсяОсобыйПорядокНалогообложения   = Константы.ИспользуетсяЕНВД.Получить()
		Или Константы.ИспользуетсяУСНПатент.Получить();
	ПрименяетсяОсновнаяСистемаНалогообложения = Константы.ИспользуетсяОСНО.Получить()
		Или Константы.ИспользуетсяУСН.Получить();
	
	Если ПрименяетсяОсобыйПорядокНалогообложения И НЕ ПрименяетсяОсновнаяСистемаНалогообложения Тогда
		ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
	ИначеЕсли ПрименяетсяОсобыйПорядокНалогообложения И ПрименяетсяОсновнаяСистемаНалогообложения Тогда
		ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты;
	Иначе
		ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СпособУчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпособУчетаОбъект.ВидДеятельностиДляНалоговогоУчетаЗатрат = ВидДеятельностиДляНалоговогоУчетаЗатрат;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпособУчетаОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьАвтообменПоСЭДОФСС() Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВключитьОбменСФССПриНеобходимости();
	
КонецПроцедуры

#КонецОбласти
