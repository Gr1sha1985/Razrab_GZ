// АПК:389-выкл 
// АПК:401-выкл 
// АПК:405-выкл 
// АПК:416-выкл 

#Область ПрограммныйИнтерфейс

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность.
// Параметры:
//  СвойстваОбъектов - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность)
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	Документ2НДФЛ = Новый Массив;
	ДокументыЗаявленияНаЗачетАвансов = Новый Массив;
	СоответствиеСсылокСвойствам = Новый Соответствие;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
			Документ2НДФЛ.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		ИначеЕсли ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ") Тогда
			ДокументыЗаявленияНаЗачетАвансов.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);	
		КонецЕсли;	
	КонецЦикла;		
	
	Если Документ2НДФЛ.Количество() = 0 И ДокументыЗаявленияНаЗачетАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ2НДФЛ", Документ2НДФЛ);
	Запрос.УстановитьПараметр("ДокументыЗаявленияНаЗачетАвансов", ДокументыЗаявленияНаЗачетАвансов);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка КАК Ссылка,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Дата КАК ДатаСоздания,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Организация КАК Организация,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.КодИФНС КАК КодКонтролирующегоОргана,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.ПометкаУдаления КАК ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериодДата, ГОД) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериодДата, ГОД) КАК ДатаОкончания,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Комментарий КАК Комментарий,
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.НомерКорректировки КАК ВариантОтчета
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК СправкиНДФЛДляПередачиВНалоговыйОрган
	|ГДЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка В(&Документ2НДФЛ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Ссылка,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Дата,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Организация,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.КодИФНС,
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.НалоговыйПериодДата, ГОД),
	|	КОНЕЦПЕРИОДА(ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.НалоговыйПериодДата, ГОД),
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Комментарий,
	|	""-""
	|ИЗ
	|	Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ КАК ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ
	|ГДЕ
	|	ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ.Ссылка В(&ДокументыЗаявленияНаЗачетАвансов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
		
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);	
	КонецЦикла;	
	
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности)
//	
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Отчетность по физлицам'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "Форма2НДФЛ";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СправкаПоНДФЛВНалоговыйОрган;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Отчетность по физлицам'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "Заявление";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ;

КонецПроцедуры

// Предназначена для расчета и регистрации НДФЛ удержанного 
// по записанным в учете данным и по переданным данным о выплатах.
//
// Параметры:
//      Ссылка - ДокументСсылка - ссылка на документ-регистратор.
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение, должно быть непустым значением.
//      МенеджерТаблиц - МенеджерВременныхТаблиц - должен содержать временную таблицу с данными о выплатах
//                                                 ВТСписокСотрудников с колонками:
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты.
//          	ДокументОснование, необязательная
//          	СуммаНачисленная, необязательная
//          	СуммаВыплаченная, необязательная
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ПериодРегистрации - дата - 
//		ОкончательныйРасчет - булево - признак того, является ли выплата, для которой рассчитывается удержанный налог, выплатой "под расчет".
//		РегистрироватьПеречислениеНДФЛ - булево - признак того, надо ли помимо удержанного вписывать еще и перечисленный налог.
//      ПараметрыОтбора - структура - поля:
//				КатегорияДохода
//				ДатаПолученияДохода
//
//  Формирует движения по регистрам подсистемы.
//
Процедура РассчитатьИЗарегистрироватьУдержанныеНалоги(Ссылка, Движения, Отказ, Организация, ДатаОперации, МенеджерТаблиц, Записывать = Ложь, ПериодРегистрации = Неопределено, ОкончательныйРасчет = Истина, РегистрироватьПеречислениеНДФЛ = Истина, Знач ПараметрыОтбора = Неопределено) Экспорт
	
	УдержанныйНалог = РассчитатьУдержанныеНалоги(Ссылка, Организация, ДатаОперации, МенеджерТаблиц, ПериодРегистрации, ОкончательныйРасчет);
	
	УдержанныйНалог.ЗаполнитьЗначения(ДатаОперации, "МесяцНалоговогоПериода");
	
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		СтруктураПоиска = Новый Структура();
		КатегорияДохода = Неопределено; ДатаПолученияДохода = Неопределено;
		СтрокаИндекса = "";
		Если ПараметрыОтбора.Свойство("КатегорияДохода", КатегорияДохода) Тогда
			СтруктураПоиска.Вставить("КатегорияДохода", КатегорияДохода);
			СтрокаИндекса = "КатегорияДохода";
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ДатаПолученияДохода", ДатаПолученияДохода) Тогда
			СтруктураПоиска.Вставить("МесяцНалоговогоПериода", ДатаПолученияДохода);
			СтрокаИндекса = СтрокаИндекса + ?(ЗначениеЗаполнено(СтрокаИндекса),",","") + "МесяцНалоговогоПериода";
		КонецЕсли;
		Если СтруктураПоиска.Количество() <> 0 Тогда
			Если УдержанныйНалог.Количество() > 100 Тогда
				УдержанныйНалог.Индексы.Добавить(СтрокаИндекса)
			КонецЕсли;
			УдержанныйНалог = УдержанныйНалог.Скопировать(СтруктураПоиска);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерТаблиц, УдержанныйНалог, "ВТНалогУдержанный");
	Если ДатаОперации >= ДатаИзмененияСроковУплатыНалога() Тогда
		УточненнаяДатаОперации = ДатаОперацииПоДокументуВыплаты(ДатаОперации, ПериодРегистрации, ОкончательныйРасчет);
		ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерТаблиц, Ссылка, ДатаОперации, УточненнаяДатаОперации);	
	КонецЕсли;
	СформироватьУдержанныйНалогПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, МенеджерТаблиц, , Истина);
	ЗарплатаКадры.УничтожитьВТ(МенеджерТаблиц, "ВТНалогУдержанный");
	
	Если РегистрироватьПеречислениеНДФЛ И Движения.Найти("УплатаНДФЛНалоговымиАгентамиКРаспределению") <> Неопределено И Движения.Найти("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ") <> Неопределено Тогда
		
		Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Очистить();
		Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записать();

		СформироватьПеречисленныйНалогПоФизическимЛицам(Ссылка, Движения, Отказ, Организация, ДатаОперации, УдержанныйНалог.ВыгрузитьКолонку("ФизическоеЛицо"), , Записывать);
		
	КонецЕсли;
	
КонецПроцедуры	
	
// Формирует движения по регистрам подсистемы.
// Параметры:
//      Ссылка - ДокументСсылка - ссылка на документ-регистратор.
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ПеречисленныйНалог - ТаблицаЗначений - таблица значений с колонками.
//				МесяцНалоговогоПериода - тип Дата (необязательно).
//				Сумма
//				ПлатежноеПоручениеНомер - тип Строка (необязательно).
//				ПлатежноеПоручениеДата - тип Дата (необязательно).
//      ФизическиеЛица - Массив - массив физических лиц (необязательно), если не задан, перечисленная 
//						сумма будет распределена по всем физлицам организации.
//		РегистрацияВНалоговомОргане - необязательный, если не задан, то будет использоваться регистрация для организации.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		Ставка - ПеречислениеСсылка.НДФЛСтавки - ставка по которой уплачен налог, необязательная.
//
Процедура СформироватьПеречисленныйНалог(Ссылка, Движения, Отказ, Организация, ДатаОперации, ПеречисленныйНалог, ФизическиеЛица = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, Ставка = Неопределено) Экспорт
	
	Если ПеречисленныйНалог = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Колонки = ПеречисленныйНалог.Колонки;
	ЕстьДанныеПлатежногоПоручения = Колонки.Найти("ПлатежноеПоручениеНомер") <> Неопределено И Колонки.Найти("ПлатежноеПоручениеДата") <> Неопределено;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	КонецЕсли;  
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из ПеречисленныйНалог Цикл
		Если СтрокаДанных.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = СтрокаУплатыНалоговогоАгента(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, СтрокаДанных);
		Если ЕстьДанныеПлатежногоПоручения Тогда
			НоваяСтрока.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПорученияПоДатеНомеру(СтрокаДанных.ПлатежноеПоручениеДата, СтрокаДанных.ПлатежноеПоручениеНомер);
		КонецЕсли;
		НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		НоваяСтрока.ДатаПлатежа = ДатаОперации;
		НоваяСтрока.Ставка = Ставка;
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записать();
		Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записывать = Ложь;
	КонецЕсли;
	
	Если Движения.Найти("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ") <> Неопределено Тогда
		Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Очистить();
		Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
	КонецЕсли;
	
	СформироватьПеречисленныйНалогПоФизическимЛицам(Ссылка, Движения, Отказ, Организация, ДатаОперации, ФизическиеЛица, РегистрацияВНалоговомОргане, Записывать, Ставка);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ПеречисленныйНалог - МенеджерВременныхТаблиц, который содержит вр. таблицу ВТНалогПеречисленный с полями
//				ФизическоеЛицо: должно быть непустым
//  	       	Ставка: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым.
//				Сумма
//				РеквизитыПлатежногоПоручения: тип Строка.
//				РегистрацияВНалоговомОргане: тип СправочникСсылка.РегистрацииВНалоговомОргане  
//				ВключатьВДекларациюПоНалогуНаПрибыль: тип Булево
//				ИсчисленоПоДивидендам: тип Булево
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПеречисленныйНалогПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, ПеречисленныйНалог, Записывать = Ложь) Экспорт
	
	Если ПеречисленныйНалог = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ПеречисленныйНалог;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.Ставка,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Сумма,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.ИсчисленоПоДивидендам,
	|	Налоги.РеквизитыПлатежногоПоручения,
	|	Налоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТНалогПеречисленный КАК Налоги
	|ГДЕ
	|	Налоги.Сумма <> 0";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	РегистрацияОрганизацииВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);	
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаРасчетовНалоговыхАгентов = СтрокаРасчетовНалоговыхАгентовСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, Выборка);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрокаРасчетовНалоговыхАгентов, Выборка.РегистрацияВНалоговомОргане, РегистрацияОрганизацииВНалоговомОргане);
	КонецЦикла;
	
	Если Записывать Тогда
		Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
		Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Ложь;
	Иначе
		Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по перечисленному НДФЛ по данным об удержанных платежными документами налогах.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение, должно быть непустым значением.
//		ДанныеПлатежа - структура с полями:
//				ПлатежноеПоручениеНомер - тип Строка;
//				ПлатежноеПоручениеДата - тип Дата;
//				ПлатежныеДокументы - массив ссылок на документы выплаты зарплаты.
//      ФизическиеЛица - Массив - массив физических лиц (необязательно), 
//			если задан - движения будут сформированы только по переданным физическим лицам.
//		РегистрацияВНалоговомОргане - Массив - массив элементов справочника РегистрацииВНалоговомОргане, необязательный, 
//			если задан - движения будут сформированы только по переданным регистрациям.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура ЗарегистрироватьНалогПеречисленныйПоПлатежнымДокументам(Движения, Отказ, Организация, ДатаОперации, ДанныеПлатежа, ФизическиеЛица = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеПлатежа) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ПлатежныеДокументы = Новый Массив;
	ДанныеПлатежа.Свойство("ПлатежныеДокументы", ПлатежныеДокументы);
	Если Не ЗначениеЗаполнено(ПлатежныеДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	ПлатежноеПоручениеНомер = "";
	Если Не ДанныеПлатежа.Свойство("ПлатежноеПоручениеНомер", ПлатежноеПоручениеНомер) Тогда
		ПлатежноеПоручениеНомер = "";
	КонецЕсли;
	ПлатежноеПоручениеДата = '00010101';
	Если Не ДанныеПлатежа.Свойство("ПлатежноеПоручениеДата", ПлатежноеПоручениеДата) Тогда
		ПлатежноеПоручениеДата = '00010101';
	КонецЕсли;
	РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПорученияПоДатеНомеру(ПлатежноеПоручениеДата, ПлатежноеПоручениеНомер);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка КАК Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты КАК КрайнийСрокУплаты,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор В(&ПлатежныеДокументы)
	|	И &УсловиеНаРегистрацию
	|	И &УсловиеНаФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) > 0";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаФизическоеЛицо", "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Иначе	
		Запрос.УстановитьПараметр("УсловиеНаФизическоеЛицо", Истина);
	КонецЕсли;
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаРегистрацию", "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане В(&РегистрацияВНалоговомОргане)");
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Иначе	
		Запрос.УстановитьПараметр("УсловиеНаРегистрацию", Истина);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РеквизитыПлатежногоПоручения", Лев(СокрЛП(РеквизитыПлатежногоПоручения), 50));
	Запрос.УстановитьПараметр("ПлатежныеДокументы", ПлатежныеДокументы);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаПеречисленияНДФЛПоНалогоплательщику(Движения, Организация, ДатаОперации, Выборка)
		КонецЦикла;
		
		Если Записывать Тогда
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по перечисленному НДФЛ с учетом зарегистрированных ранее авансов по налогу.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата.
//		РеквизитыПлатежногоПоручения - строка.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Движения, Отказ, Организация, ДатаОперации, РеквизитыПлатежногоПоручения, Записывать = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам,
	|	ВЫБОР
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ * РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержанныеНалоги
	|ИЗ
	|	&Движения КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанныеНалоги.ФизическоеЛицо,
	|	СУММА(УдержанныеНалоги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТСуммыПоФизлицам
	|ИЗ
	|	ВТУдержанныеНалоги КАК УдержанныеНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанныеНалоги.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанныеНалоги.ФизическоеЛицо,
	|	УдержанныеНалоги.Ставка,
	|	УдержанныеНалоги.МесяцНалоговогоПериода,
	|	УдержанныеНалоги.РегистрацияВНалоговомОргане,
	|	СУММА(УдержанныеНалоги.Сумма) КАК Сумма,
	|	&РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	УдержанныеНалоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	УдержанныеНалоги.ИсчисленоПоДивидендам
	|ИЗ
	|	ВТУдержанныеНалоги КАК УдержанныеНалоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыПоФизлицам КАК СуммыПоФизлицам
	|		ПО УдержанныеНалоги.ФизическоеЛицо = СуммыПоФизлицам.ФизическоеЛицо
	|ГДЕ
	|	СуммыПоФизлицам.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанныеНалоги.ФизическоеЛицо,
	|	УдержанныеНалоги.Ставка,
	|	УдержанныеНалоги.МесяцНалоговогоПериода,
	|	УдержанныеНалоги.РегистрацияВНалоговомОргане,
	|	УдержанныеНалоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	УдержанныеНалоги.ИсчисленоПоДивидендам";

	Запрос.УстановитьПараметр("Движения", Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Выгрузить());
	Запрос.УстановитьПараметр("РеквизитыПлатежногоПоручения", Лев(СокрЛП(РеквизитыПлатежногоПоручения), 50));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаПеречисленияНДФЛПоНалогоплательщику(Движения, Организация, ДатаОперации, Выборка)
		КонецЦикла;
		
		Если Записывать Тогда
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для получения сумм перечисленного налога, зарегистрированных документом, в разрезе физических лиц.
// Параметры:
//      Регистратор - ДокументСсылка - регистратор, для которого выполняется чтение движений.
//
//  Возвращаемое значение: 
//  	таблица значений с колонками
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица -
//			Сумма - число -
//
Функция ПеречисленныйНалогРегистратораПоФизическимЛицам(Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	СУММА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор = &Регистратор
	|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Готовит печатную форму.
// Параметры:
//		РеквизитыПлатежа - таблица значений с колонками.
//				Организация - СправочникСсылка.Организации - должно быть непустым значением.
//				МесяцНалоговогоПериода - дата - должно быть непустым значением.
//				ДатаПлатежа - дата - должно быть непустым значением.
//				ПлатежноеПоручениеНомер - строка (необязательно).
//				ПлатежноеПоручениеДата - дата (необязательно).
//              РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане  (необязательно)
//              ГлавныйБухгалтер - СправочникСсылка.ФизическиеЛица (необязательно)
//              Бухгалтер - СправочникСсылка.ФизическиеЛица (необязательно)
//
//  Возвращаемое значение: 
//		табличный документ.
//
Функция РеестрПеречисленныхСуммНалога(РеквизитыПлатежа) Экспорт 

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрПеречисленныхСумм";
	
	Если РеквизитыПлатежа.Количество() = 0 Тогда
		Возврат ТабличныйДокумент
	КонецЕсли;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_РеестрПеречисленныхСуммНДФЛ");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника
	ОбластьОстаткаАванса = Макет.ПолучитьОбласть("СтрокаОстаткаАванса");
	
	Колонки = РеквизитыПлатежа.Колонки;
	Если Колонки.Найти("РеквизитыПлатежногоПоручения") = Неопределено Тогда
		Колонки.Добавить("РеквизитыПлатежногоПоручения", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(50)));
	КонецЕсли;
	Если Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	КонецЕсли;
	
	ОтветственныеЛицаВДанныхДокументов = Истина;
	Если Колонки.Найти("ГлавныйБухгалтер") = Неопределено Тогда
		Колонки.Добавить("ГлавныйБухгалтер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Если Колонки.Найти("Бухгалтер") = Неопределено Тогда
			Колонки.Добавить("Бухгалтер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		КонецЕсли;
		ОтветственныеЛицаВДанныхДокументов = Ложь;
	КонецЕсли;
	
	ЕстьДанныеПлатежногоПоручения = Колонки.Найти("ПлатежноеПоручениеНомер") <> Неопределено И Колонки.Найти("ПлатежноеПоручениеДата") <> Неопределено;
	Если ЕстьДанныеПлатежногоПоручения Тогда
		Для каждого СтрокаТЗ Из РеквизитыПлатежа Цикл
			СтрокаТЗ.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПорученияПоДатеНомеру(СтрокаТЗ.ПлатежноеПоручениеДата, СтрокаТЗ.ПлатежноеПоручениеНомер);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыПлатежа.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РеквизитыПлатежа.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0)
	|			ТОГДА РеквизитыПлатежа.МесяцНалоговогоПериода
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	РеквизитыПлатежа.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РеквизитыПлатежа.ДатаПлатежа КАК ДатаПлатежа,
	|	РеквизитыПлатежа.РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	РеквизитыПлатежа.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	РеквизитыПлатежа.Бухгалтер КАК Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	&РеквизитыПлатежа КАК РеквизитыПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ДанныеДокументов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеДокументов.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокументов.РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокументов.ГлавныйБухгалтер) КАК КоличествоГлавных,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокументов.Бухгалтер) КАК КоличествоБухгалтеров
	|ПОМЕСТИТЬ ВТКоличествоПодписантов
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.МесяцНалоговогоПериода,
	|	ДанныеДокументов.РегистрацияВНалоговомОргане,
	|	ДанныеДокументов.ДатаПлатежа,
	|	ДанныеДокументов.РеквизитыПлатежногоПоручения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазныеПериоды.Организация КАК Организация,
	|	РазныеПериоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РазныеПериоды.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РазныеПериоды.ДатаПлатежа КАК ДатаПлатежа,
	|	РазныеПериоды.РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	ВЫБОР
	|		КОГДА РазныеПериоды.КоличествоГлавных = 1
	|			ТОГДА ДанныеДокументов.ГлавныйБухгалтер
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА РазныеПериоды.КоличествоБухгалтеров = 1
	|			ТОГДА ДанныеДокументов.Бухгалтер
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК Бухгалтер
	|ПОМЕСТИТЬ ВТОбработанныеДанныеДокументов
	|ИЗ
	|	ВТКоличествоПодписантов КАК РазныеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
	|		ПО РазныеПериоды.Организация = ДанныеДокументов.Организация
	|			И РазныеПериоды.МесяцНалоговогоПериода = ДанныеДокументов.МесяцНалоговогоПериода
	|			И РазныеПериоды.РегистрацияВНалоговомОргане = ДанныеДокументов.РегистрацияВНалоговомОргане
	|			И РазныеПериоды.ДатаПлатежа = ДанныеДокументов.ДатаПлатежа
	|			И РазныеПериоды.РеквизитыПлатежногоПоручения = ДанныеДокументов.РеквизитыПлатежногоПоручения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеДокументов.ДатаПлатежа) КАК НачалоПериода,
	|	МАКСИМУМ(ДанныеДокументов.ДатаПлатежа) КАК ОкончаниеПериода
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов";

	Запрос.УстановитьПараметр("РеквизитыПлатежа", РеквизитыПлатежа);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Выборка.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Выборка.ОкончаниеПериода));
	ДатаАктуальности = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаАктуальности);
	Запрос.УстановитьПараметр("ДатаПереходаНаКодыОКТМО", ДатаПереходаНаКодыОКТМО());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОбороты.Организация,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОбороты.МесяцНалоговогоПериода,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОбороты.РегистрацияВНалоговомОргане,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОбороты.РеквизитыПлатежногоПоручения,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОбороты.ДатаПлатежа
	|ПОМЕСТИТЬ ВТРегистрацияАвансов
	|ИЗ
	|	РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			,
	|			(Организация, МесяцНалоговогоПериода, ДатаПлатежа, РеквизитыПлатежногоПоручения) В
	|				(ВЫБРАТЬ
	|					РеквизитыПлатежа.Организация,
	|					РеквизитыПлатежа.МесяцНалоговогоПериода,
	|					РеквизитыПлатежа.ДатаПлатежа,
	|					РеквизитыПлатежа.РеквизитыПлатежногоПоручения
	|				ИЗ
	|					ВТДанныеДокументов КАК РеквизитыПлатежа)) КАК УплатаНДФЛНалоговымиАгентамиКРаспределениюОбороты
	|ГДЕ
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОбороты.СуммаПриход > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА РегистрацияАвансов.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ДанныеДокументов.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ДанныеДокументов.ДатаПлатежа,
	|	ДанныеДокументов.РеквизитыПлатежногоПоручения,
	|	ДанныеДокументов.ГлавныйБухгалтер,
	|	ДанныеДокументов.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеСРегистрациями
	|ИЗ
	|	ВТОбработанныеДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацияАвансов КАК РегистрацияАвансов
	|		ПО ДанныеДокументов.Организация = РегистрацияАвансов.Организация
	|			И ДанныеДокументов.МесяцНалоговогоПериода = РегистрацияАвансов.МесяцНалоговогоПериода
	|			И ДанныеДокументов.ДатаПлатежа = РегистрацияАвансов.ДатаПлатежа
	|			И ДанныеДокументов.РеквизитыПлатежногоПоручения = РегистрацияАвансов.РеквизитыПлатежногоПоручения
	|			И (ДанныеДокументов.РегистрацияВНалоговомОргане = РегистрацияАвансов.РегистрацияВНалоговомОргане
	|				ИЛИ ДанныеДокументов.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация,
	|	УплатаПоФизическимЛицам.МесяцНалоговогоПериода,
	|	ДанныеДокументов.РегистрацияВНалоговомОргане,
	|	ДанныеДокументов.РеквизитыПлатежногоПоручения,
	|	ДанныеДокументов.ДатаПлатежа,
	|	УплатаПоФизическимЛицам.ФизическоеЛицо,
	|	УплатаПоФизическимЛицам.Ставка,
	|	СУММА(УплатаПоФизическимЛицам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТУплатаПоФизическимЛицам
	|ИЗ
	|	ВТДанныеСРегистрациями КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК УплатаПоФизическимЛицам
	|		ПО ДанныеДокументов.Организация = УплатаПоФизическимЛицам.Организация
	|			И (ДанныеДокументов.МесяцНалоговогоПериода = УплатаПоФизическимЛицам.МесяцНалоговогоПериода
	|				ИЛИ ДанныеДокументов.МесяцНалоговогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И УплатаПоФизическимЛицам.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0))
	|			И ДанныеДокументов.РеквизитыПлатежногоПоручения = УплатаПоФизическимЛицам.РеквизитыПлатежногоПоручения
	|			И ДанныеДокументов.РегистрацияВНалоговомОргане = УплатаПоФизическимЛицам.РегистрацияВНалоговомОргане
	|ГДЕ
	|	УплатаПоФизическимЛицам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И УплатаПоФизическимЛицам.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Организация,
	|	УплатаПоФизическимЛицам.МесяцНалоговогоПериода,
	|	ДанныеДокументов.РегистрацияВНалоговомОргане,
	|	УплатаПоФизическимЛицам.Ставка,
	|	УплатаПоФизическимЛицам.ФизическоеЛицо,
	|	ДанныеДокументов.РеквизитыПлатежногоПоручения,
	|	ДанныеДокументов.ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УплатаПоФизическимЛицам.ФизическоеЛицо
	|ИЗ
	|	ВТУплатаПоФизическимЛицам КАК УплатаПоФизическимЛицам";
	
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"), "ФИОПолные", ДатаАктуальности);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки.Организация,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки.МесяцНалоговогоПериода,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки.РегистрацияВНалоговомОргане,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки.РеквизитыПлатежногоПоручения,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки.ДатаПлатежа,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТОстаткиАвансов
	|ИЗ
	|	РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению.Остатки(
	|			&ТекущаяДата,
	|			(Организация, МесяцНалоговогоПериода, РегистрацияВНалоговомОргане, ДатаПлатежа, РеквизитыПлатежногоПоручения) В
	|				(ВЫБРАТЬ
	|					РеквизитыПлатежа.Организация,
	|					РеквизитыПлатежа.МесяцНалоговогоПериода,
	|					РеквизитыПлатежа.РегистрацияВНалоговомОргане,
	|					РеквизитыПлатежа.ДатаПлатежа,
	|					РеквизитыПлатежа.РеквизитыПлатежногоПоручения
	|				ИЗ
	|					ВТДанныеСРегистрациями КАК РеквизитыПлатежа)) КАК УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки
	|ГДЕ
	|	УплатаНДФЛНалоговымиАгентамиКРаспределениюОстатки.СуммаОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УплатаПоФизическимЛицам.Организация,
	|	УплатаПоФизическимЛицам.МесяцНалоговогоПериода,
	|	УплатаПоФизическимЛицам.РегистрацияВНалоговомОргане,
	|	УплатаПоФизическимЛицам.РеквизитыПлатежногоПоручения,
	|	УплатаПоФизическимЛицам.ДатаПлатежа,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УплатаПоФизическимЛицам.ФизическоеЛицо) КАК КоличествоФизическихЛиц,
	|	СУММА(УплатаПоФизическимЛицам.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТКоличествоСтрок
	|ИЗ
	|	ВТУплатаПоФизическимЛицам КАК УплатаПоФизическимЛицам
	|ГДЕ
	|	УплатаПоФизическимЛицам.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	УплатаПоФизическимЛицам.Организация,
	|	УплатаПоФизическимЛицам.МесяцНалоговогоПериода,
	|	УплатаПоФизическимЛицам.РегистрацияВНалоговомОргане,
	|	УплатаПоФизическимЛицам.РеквизитыПлатежногоПоручения,
	|	УплатаПоФизическимЛицам.ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация,
	|	УплатаПоФизическимЛицам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ДанныеДокументов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеДокументов.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокументов.РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	ЕСТЬNULL(ОстаткиАвансов.СуммаОстаток, 0) КАК ОстатокАванса,
	|	УплатаПоФизическимЛицам.ФизическоеЛицо,
	|	КадровыеДанныеФизическихЛиц.ФИОПолные КАК Работник,
	|	УплатаПоФизическимЛицам.Ставка КАК Ставка,
	|	УплатаПоФизическимЛицам.Сумма,
	|	Организации.НаименованиеПолное КАК НазваниеОрганизации,
	|	Организации.ИНН,
	|	РегистрацииВНалоговомОргане.КПП,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ДатаПлатежа < &ДатаПереходаНаКодыОКТМО
	|			ТОГДА РегистрацииВНалоговомОргане.КодПоОКАТО
	|		ИНАЧЕ РегистрацииВНалоговомОргане.КодПоОКТМО
	|	КОНЕЦ КАК КодТерритории,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ДатаПлатежа < &ДатаПереходаНаКодыОКТМО
	|			ТОГДА ""ОКАТО""
	|		ИНАЧЕ ""ОКТМО""
	|	КОНЕЦ КАК ИмяКода,
	|	ЕСТЬNULL(КоличествоСтрок.КоличествоФизическихЛиц, 0) КАК ВсегоСтрок,
	|	ЕСТЬNULL(КоличествоСтрок.Сумма, 0) + ЕСТЬNULL(ОстаткиАвансов.СуммаОстаток, 0) КАК СуммаУплатыВсего,
	|	ДанныеДокументов.ГлавныйБухгалтер,
	|	ДанныеДокументов.Бухгалтер
	|ИЗ
	|	ВТДанныеСРегистрациями КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУплатаПоФизическимЛицам КАК УплатаПоФизическимЛицам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|			ПО УплатаПоФизическимЛицам.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтрок КАК КоличествоСтрок
	|			ПО УплатаПоФизическимЛицам.Организация = КоличествоСтрок.Организация
	|				И УплатаПоФизическимЛицам.МесяцНалоговогоПериода = КоличествоСтрок.МесяцНалоговогоПериода
	|				И УплатаПоФизическимЛицам.РегистрацияВНалоговомОргане = КоличествоСтрок.РегистрацияВНалоговомОргане
	|				И УплатаПоФизическимЛицам.ДатаПлатежа = КоличествоСтрок.ДатаПлатежа
	|				И УплатаПоФизическимЛицам.РеквизитыПлатежногоПоручения = КоличествоСтрок.РеквизитыПлатежногоПоручения
	|		ПО ДанныеДокументов.Организация = УплатаПоФизическимЛицам.Организация
	|			И (ДанныеДокументов.МесяцНалоговогоПериода = УплатаПоФизическимЛицам.МесяцНалоговогоПериода
	|				ИЛИ ДанныеДокументов.МесяцНалоговогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И УплатаПоФизическимЛицам.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0))
	|			И ДанныеДокументов.РегистрацияВНалоговомОргане = УплатаПоФизическимЛицам.РегистрацияВНалоговомОргане
	|			И ДанныеДокументов.ДатаПлатежа = УплатаПоФизическимЛицам.ДатаПлатежа
	|			И ДанныеДокументов.РеквизитыПлатежногоПоручения = УплатаПоФизическимЛицам.РеквизитыПлатежногоПоручения
	|			И (УплатаПоФизическимЛицам.Сумма <> 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиАвансов КАК ОстаткиАвансов
	|		ПО ДанныеДокументов.Организация = ОстаткиАвансов.Организация
	|			И ДанныеДокументов.МесяцНалоговогоПериода = ОстаткиАвансов.МесяцНалоговогоПериода
	|			И ДанныеДокументов.ДатаПлатежа = ОстаткиАвансов.ДатаПлатежа
	|			И ДанныеДокументов.РеквизитыПлатежногоПоручения = ОстаткиАвансов.РеквизитыПлатежногоПоручения
	|			И ДанныеДокументов.РегистрацияВНалоговомОргане = ОстаткиАвансов.РегистрацияВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО ДанныеДокументов.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокументов.Организация = Организации.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа,
	|	РеквизитыПлатежногоПоручения,
	|	РегистрацияВНалоговомОргане,
	|	МесяцНалоговогоПериода,
	|	Работник,
	|	Ставка";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДатаПлатежа") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("РеквизитыПлатежногоПоручения") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("РегистрацияВНалоговомОргане") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("МесяцНалоговогоПериода") Цикл
					
					Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ЗапрашиваемыеЗначения = Новый Структура("Организация,ГлавныйБухгалтер");
					ЗапрашиваемыеЗначения.Организация = Выборка.Организация;
					
					ОбластьМакетаШапка.Параметры.Заполнить(Выборка);
					ОбластьМакетаШапка.Параметры.НазваниеОрганизации = СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
					ТабличныйДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.
					
					ОбластьОстаткаАванса.Параметры.Заполнить(Выборка);
					
					ОбластьМакетаПодвал.Параметры.Заполнить(Выборка);
					
					ФизическиеЛица = Новый Массив;
					Если ОтветственныеЛицаВДанныхДокументов Тогда
						
						Если ЗначениеЗаполнено(Выборка.ГлавныйБухгалтер) Тогда
							ФизическиеЛица.Добавить(Выборка.ГлавныйБухгалтер);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Выборка.Бухгалтер) Тогда
							ФизическиеЛица.Добавить(Выборка.Бухгалтер);
						КонецЕсли; 

					Иначе
						
						ЗапрашиваемыеЗначения = Новый Структура("Организация,ГлавныйБухгалтер");
						ЗапрашиваемыеЗначения.Организация = Выборка.Организация;
						ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗапрашиваемыеЗначения);
						
						Если ЗначениеЗаполнено(ЗапрашиваемыеЗначения.ГлавныйБухгалтер) Тогда
							ФизическиеЛица.Добавить(ЗапрашиваемыеЗначения.ГлавныйБухгалтер);
						КонецЕсли;
						
					КонецЕсли;
					
					Если ФизическиеЛица.Количество() > 0 Тогда
						
						ТаблицаФИО = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическиеЛица, "ИОФамилия");
						
						Если ЗначениеЗаполнено(Выборка.ГлавныйБухгалтер) Тогда
							ДанныеПодписанта = ТаблицаФИО.Найти(Выборка.ГлавныйБухгалтер, "ФизическоеЛицо");
						ИначеЕсли ЗначениеЗаполнено(ЗапрашиваемыеЗначения.ГлавныйБухгалтер) Тогда
							ДанныеПодписанта = ТаблицаФИО.Найти(ЗапрашиваемыеЗначения.ГлавныйБухгалтер, "ФизическоеЛицо");
						Иначе
							ДанныеПодписанта = Неопределено;
						КонецЕсли;
						
						Если ДанныеПодписанта <> Неопределено Тогда
							ОбластьМакетаПодвал.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеПодписанта.ИОФамилия;
						КонецЕсли; 

						Если ЗначениеЗаполнено(Выборка.Бухгалтер) Тогда
							ДанныеПодписанта = ТаблицаФИО.Найти(Выборка.Бухгалтер, "ФизическоеЛицо");
							Если ДанныеПодписанта <> Неопределено Тогда
								ОбластьМакетаПодвал.Параметры.БухгалтерРасшифровкаПодписи = ДанныеПодписанта.ИОФамилия;
							КонецЕсли; 
						КонецЕсли; 
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.ВсегоСтрок) Тогда
						
						// Массив для разбиения на страницы.
						ВыводимыеОбласти = Новый Массив();
						ВыводимыеОбласти.Добавить(ОбластьМакета);
						ВыведеноСтрок = 0;
						Пока Выборка.Следующий() Цикл
							
							// Данные по работнику.
							ОбластьМакета.Параметры.Заполнить(Выборка);
							// разбиение на страницы
							ВыведеноСтрок = ВыведеноСтрок + 1;
							
							// Проверим, уместится ли строка на странице или надо открывать новую страницу.
							ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
							Если Не ВывестиПодвалЛиста И ВыведеноСтрок = Выборка.ВсегоСтрок Тогда
								ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
								ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
							КонецЕсли;
							Если ВывестиПодвалЛиста Тогда
								ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
								ТабличныйДокумент.Вывести(ПовторятьПриПечатиСтроки);
							КонецЕсли;
							
							ОбластьМакета.Параметры.НомерСтроки = ВыведеноСтрок;
							ТабличныйДокумент.Вывести(ОбластьМакета);
							
						КонецЦикла;
						
					Иначе
						
						Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
							ОбластьМакета.Параметры.Установить(Сч - 1,""); 
						КонецЦикла;
						
						ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.ОстатокАванса) Тогда
						ТабличныйДокумент.Вывести(ОбластьОстаткаАванса);
					КонецЕсли;
					
					// Выводим предварительно подготовленный Подвал документа.
					ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабличныйДокумент
	
КонецФункции

// Выполняет расчет налога с дивидендов для одного акционера.
//
// Параметры:
//		ДатаПолученияДохода - дата.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		Акционер - СправочникСсылка.ФизическиеЛица - должно быть непустым.
//		Начислено - число - сумма дивидендов.
//		ВычетПоНДФЛ - число - сумма вычета.
//		КатегорияДивидендов - ПеречислениеСсылка.КатегорииДоходовНДФЛ - категория, определяющая порядок исчисления и ставку налога.
//		ИсключаемыйРегистратор - ДокументСсылка - документ, для которого производится расчет
//
//  Возвращаемое значение: 
//		структура, содержит два значения: НДФЛ и НДФЛСПревышения.
// 
Функция НалогСДивидендовАкционера(ДатаПолученияДохода, Организация, Акционер, Начислено, ВычетПоНДФЛ, КатегорияДивидендов = Неопределено, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(КатегорияДивидендов) Тогда 
		КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	КонецЕсли;
	
	РезультатРасчетаНалога = Новый Структура("НДФЛ, НДФЛСПревышения");
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	ПараметрыРасчетаНДФЛПоПрогрессивнойШкале = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале();
	ВыполнятьРасчетПоПрогрессивнойШкале = ДатаПолученияДохода >= ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале 
		И КатегорияДивидендов = Перечисления.КатегорииДоходовНДФЛ.Дивиденды;
	Если ВыполнятьРасчетПоПрогрессивнойШкале Тогда
		ТаблицаДивиденды = Новый ТаблицаЗначений();
		ТаблицаДивиденды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаДивиденды.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		ТаблицаДивиденды.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
		ТаблицаДивиденды.Колонки.Добавить("СтавкаНалогообложенияРезидента", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
		СтрокаДохода = ТаблицаДивиденды.Добавить();
		СтрокаДохода.ФизическоеЛицо = Акционер;
		СтрокаДохода.КатегорияДохода = КатегорияДивидендов;
		СтрокаДохода.ДатаПолученияДохода = ДатаПолученияДохода;
		СтрокаДохода.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
		ДополнитьДанныеУчетаСтавками(ТаблицаДивиденды);		
		ВыполнятьРасчетПоПрогрессивнойШкале = ТаблицаДивиденды[0].Статус = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
	КонецЕсли;
	
	Если ВыполнятьРасчетПоПрогрессивнойШкале Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК СуммаДохода
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И СведенияОДоходахНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
		|	И СведенияОДоходахНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГода И &ДатаПолученияДохода
		|	И СведенияОДоходахНДФЛ.КодДохода = &КодДохода
		|	И СведенияОДоходахНДФЛ.КатегорияДохода = &КатегорияДохода
		|	И СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК Сумма,
		|	СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения) КАК СуммаСПревышения
		|ИЗ
		|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		|ГДЕ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
		|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода = &КатегорияДохода
		|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор
		|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГода И &ДатаПолученияДохода
		|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ФизическоеЛицо", Акционер);
		Запрос.УстановитьПараметр("КатегорияДохода", КатегорияДивидендов);
		Запрос.УстановитьПараметр("ДатаПолученияДохода", ДатаПолученияДохода);
		Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ДатаПолученияДохода));
		Запрос.УстановитьПараметр("КодДохода", Справочники.ВидыДоходовНДФЛ.Код1010);
		Результаты = Запрос.ВыполнитьПакет();
		Доходы = Результаты[0].Выбрать();
		Налоги = Результаты[1].Выбрать();
		НакопленныйДоход = 0;
		НакопленныйНалог = 0;
		НакопленныйНалогСПревышения = 0;
		Налог = 0;
		НалогСПревышения = 0;
		Если Доходы.Следующий() Тогда
			НакопленныйДоход = ?(ЗначениеЗаполнено(Доходы.СуммаДохода), Доходы.СуммаДохода, 0);
		КонецЕсли;
		Пока Налоги.Следующий() Цикл
			НакопленныйНалог = ?(ЗначениеЗаполнено(Налоги.Сумма), Налоги.Сумма, 0);
			НакопленныйНалогСПревышения = ?(ЗначениеЗаполнено(Налоги.СуммаСПревышения), Налоги.СуммаСПревышения, 0);
		КонецЦикла;
		Если НакопленныйДоход + Начислено <= ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.Предел Тогда
			Налог = Окр((НакопленныйДоход + Начислено) * ТаблицаДивиденды[0].СтавкаЧислом) - НакопленныйНалог;
			НалогСПревышения = - НакопленныйНалогСПревышения;
		Иначе
			Налог = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НалогСПредела - НакопленныйНалог;
			НалогСПревышения = Окр((НакопленныйДоход + Начислено - ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.Предел) * ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.СтавкаЧислом) - НакопленныйНалогСПревышения;
		КонецЕсли;
		РезультатРасчетаНалога.НДФЛ = Налог;
		РезультатРасчетаНалога.НДФЛСПревышения = НалогСПревышения;
	Иначе
		
		ТаблицаДивиденды = Новый ТаблицаЗначений();
		ТаблицаДивиденды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаДивиденды.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		ТаблицаДивиденды.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
		ТаблицаДивиденды.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
		ТаблицаДивиденды.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов("Число"));
		ТаблицаДивиденды.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число"));
		ТаблицаДивиденды.Колонки.Добавить("НДФЛ", Новый ОписаниеТипов("Число"));
		СтрокаДохода = ТаблицаДивиденды.Добавить();
		СтрокаДохода.ФизическоеЛицо = Акционер;
		СтрокаДохода.СуммаДохода = Начислено;
		СтрокаДохода.СуммаВычета = ВычетПоНДФЛ;
		СтрокаДохода.КатегорияДохода = КатегорияДивидендов;
		СтрокаДохода.КодДохода = Справочники.ВидыДоходовНДФЛ.Код1010;
		СтрокаДохода.КодВычета = Справочники.ВидыВычетовНДФЛ.Код601;
		РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, ТаблицаДивиденды);
		ЗаполнитьЗначенияСвойств(РезультатРасчетаНалога, ТаблицаДивиденды[0]);
		
	КонецЕсли;
	
	Возврат РезультатРасчетаНалога;
	
КонецФункции

// Выполняет регистрацию доходов по дивидендам и налога с этих доходов.
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаВыплаты - дата - дата, которой будет зарегистрировано движение.
//		Дивиденды - ТаблицаЗначений - содержит, как минимум, колонки:
//			Акционер
//			Начислено
//			ВычетПоНДФЛ
//			НДФЛ
//			НДФЛСПревышения
//			НалогНаПрибыльКЗачету
//		ВключатьВДекларациюПоНалогуНаПрибыль - булево -
//		РегистрироватьУдержаниеПеречислениеНДФЛ - булево - признак того, что необходимо зарегистрировать удержание и перечисление НДФЛ
//		ДатаПлатежа - дата -
//		РеквизитыПлатежа - строка - реквизиты платежного поручения на перечисление налога.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДоходыИНДФЛСДивидендов(Регистратор, Движения, Отказ, Организация, ДатаВыплаты, Дивиденды, ВключатьВДекларациюПоНалогуНаПрибыль, РегистрироватьУдержаниеПеречислениеНДФЛ = Ложь, ДатаПлатежа = Неопределено, РеквизитыПлатежа = "", Записывать = Ложь) Экспорт
	
	Дивиденды.Колонки.Акционер.Имя = "ФизическоеЛицо";
	Дивиденды.Колонки.Начислено.Имя = "СуммаДохода";
	Дивиденды.Колонки.ВычетПоНДФЛ.Имя = "СуммаВычета";
	Дивиденды.Колонки.НДФЛ.Имя = "Сумма";
	Дивиденды.Колонки.НДФЛСПревышения.Имя = "СуммаСПревышения";
	Дивиденды.Колонки.НалогНаПрибыльКЗачету.Имя = "НалогНаПрибыльДляДивидендов";
	
	Дивиденды.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Дивиденды.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Дивиденды.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	Дивиденды.ЗаполнитьЗначения(ДатаВыплаты, "ДатаПолученияДохода");
	Если Дивиденды.Колонки.Найти("КатегорияДохода") = Неопределено Тогда
		Дивиденды.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		Дивиденды.ЗаполнитьЗначения(Перечисления.КатегорииДоходовНДФЛ.Дивиденды, "КатегорияДохода");
	КонецЕсли;
	Дивиденды.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	Дивиденды.ЗаполнитьЗначения(Справочники.ВидыДоходовНДФЛ.Код1010, "КодДохода");
	Дивиденды.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	Дивиденды.ЗаполнитьЗначения(Справочники.ВидыВычетовНДФЛ.Код601, "КодВычета");
	Дивиденды.Колонки.Добавить("СтавкаНалогообложенияРезидента", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	Дивиденды.ЗаполнитьЗначения(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09, "СтавкаНалогообложенияРезидента");
	Дивиденды.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	Дивиденды.ЗаполнитьЗначения(НачалоМесяца(ДатаВыплаты), "МесяцНалоговогоПериода");
	Дивиденды.Колонки.Добавить("ВключатьВДекларациюПоНалогуНаПрибыль", Новый ОписаниеТипов("Булево"));
	Дивиденды.ЗаполнитьЗначения(ВключатьВДекларациюПоНалогуНаПрибыль, "ВключатьВДекларациюПоНалогуНаПрибыль");
	Дивиденды.Колонки.Добавить("НеУчитыватьДоходВ6НДФЛ", Новый ОписаниеТипов("Булево"));
	Дивиденды.ЗаполнитьЗначения(Истина, "НеУчитыватьДоходВ6НДФЛ");
	Дивиденды.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ДокументыОснованияНДФЛ.Тип);
	Дивиденды.ЗаполнитьЗначения(Регистратор, "ДокументОснование");
	
	СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаВыплаты, Дивиденды, Записывать,,Регистратор);
	
	Дивиденды.Колонки.Удалить("МесяцНалоговогоПериода");
	Дивиденды.Колонки.ДатаПолученияДохода.Имя = "МесяцНалоговогоПериода";
	СформироватьИсчисленныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаВыплаты, Дивиденды);
	
	Если РегистрироватьУдержаниеПеречислениеНДФЛ Тогда
		
		Дивиденды.Колонки.СуммаДохода.Имя = "СуммаВыплаченногоДохода";
		Дивиденды.Колонки.НеУчитыватьДоходВ6НДФЛ.Имя = "УчитыватьВыплаченныйДоходВ6НДФЛ";
		СформироватьУдержанныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаВыплаты, Дивиденды,,Записывать);
		СформироватьНДФЛКПеречислению(Движения, Отказ);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
			Модуль.РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛКПеречислению(Движения, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
			
			ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Движения, Отказ, Организация, ДатаПлатежа, РеквизитыПлатежа, Записывать);
			СформироватьНДФЛПеречисленный(Движения, Отказ);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
				Модуль.РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛПеречисленный(Движения, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует строку-описание для идентификации платежа.
//
// Параметры:
//		ДатаПП - дата.
//		НомерПП - строка.
//
//  Возвращаемое значение: 
//		строка для записи в движения.
// 
Функция РеквизитыПлатежногоПорученияПоДатеНомеру(ДатаПП, НомерПП) Экспорт

	// АПК:335-выкл Данные
	Возврат "№ " + НомерПП + " от " + Формат(ДатаПП, "ДФ=дд.ММ.гггг")
	// АПК:335-вкл

КонецФункции

// Переносит ранее зарегистрированный доход на новую дату получения дохода
// Параметры:
//		Регистратор - ДокументСсылка - документ выплаты
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - должен содержать временные таблицы 
//      	ВТСписокСотрудников, с данными о выплатах вида:
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты.
//          	ДокументОснование, необязательная
//          	СтатьяФинансирования, необязательная
//          	СтатьяРасходов, необязательная
//          	СуммаНачисленная, необязательная
//          	СуммаВыплаченная, необязательная, 
//			Если колонки СуммаНачисленная, СуммаВыплаченная отсутствуют, возможная частичная выплата не будет учтена.
//		Движения - коллекция движений регистратора.
//		ДатаВыплаты - дата - новая дата получения дохода.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		Отказ - признак отказа от заполнения движений.
//
Процедура ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор, Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ , Записывать = Ложь) Экспорт
	УчетФактическиПолученныхДоходов.ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор, Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ, Записывать);
КонецПроцедуры

// Формирует перечень кодов дохода, соответствующих переданному виду договора ГПХ: авторскому или на оказание услуг.
//
// Параметры:
//		ВидНачисления - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний - описание вида договора ГПХ.
//
//  Возвращаемое значение: 
//		массив значений типа СправочникСсылка.ВидыДоходовНДФЛ.
// 
Функция ДоходыНДФЛПоВидуОсобыхНачислений(ВидНачисления) Экспорт

	ВидыДоходаНДФЛ = Новый Массив;
	Если ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2010);
	ИначеЕсли ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2201);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2202);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2203);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2204);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2205);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2206);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2207);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2208);
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2209);
	КонецЕсли;
	
	Возврат ВидыДоходаНДФЛ;

КонецФункции

// Формирует таблицу сумм начисленного налога в разрезе регистраторов и регистраций в ИФНС.
//
// Параметры:
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		НачалоПериода - дата - 
//		ОкончаниеПериода - дата - 
//		МесяцНалоговогоПериода - дата - дата, определяющая месяц (необязательный).
//
//  Возвращаемое значение: 
//		таблица значений с колонками
//			Регистратор - ДокументСсылка
//			РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//			КодНалоговогоОргана - строка
//			КПП - строка
//			КодПоОКТМО - строка
//			Сумма
//			СуммаСПревышения
//			
Функция НачисленоНалогаЗаПериод(Организация, НачалоПериода, ОкончаниеПериода, МесяцНалоговогоПериода = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код, """") КАК КодНалоговогоОргана,
	|	ЕСТЬNULL(РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП, """") КАК КПП,
	|	ЕСТЬNULL(РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО, """") КАК КодПоОКТМО,
	|	СУММА(РасчетыПоНДФЛ.Сумма) КАК Сумма,
	|	СУММА(РасчетыПоНДФЛ.СуммаСПревышения) КАК СуммаСПревышения
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыПоНДФЛ
	|ГДЕ
	|	РасчетыПоНДФЛ.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &УсловиеНаДатуПолученияДохода
	|	И РасчетыПоНДФЛ.Организация = &Организация
	|	И РасчетыПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыПоНДФЛ.Регистратор,
	|	ЕСТЬNULL(РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код, """"),
	|	ЕСТЬNULL(РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП, """"),
	|	ЕСТЬNULL(РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодПоОКТМО,
	|	КПП,
	|	КодНалоговогоОргана,
	|	РегистрацияВНалоговомОргане";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ОкончаниеПериода));
	Если ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоМесяца(МесяцНалоговогоПериода));
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецМесяца(МесяцНалоговогоПериода));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеНаДатуПолученияДохода", "РасчетыПоНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоПериода И &КонецПериода")
	Иначе
		Запрос.УстановитьПараметр("УсловиеНаДатуПолученияДохода", Истина);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf74-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.АвансовыйПлатежИностранцаПоНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfd1-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВозвратНДФЛ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf53-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.АвансовыйПлатежИностранцаПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.АвансовыйПлатежИностранцаПоНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ВозвратНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.ВозвратНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.Справочники.ОперацияНалоговогоУчетаПоНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ДокументыПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ЗаявленияНаВычеты, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДоходыПредыдущегоМестаРаботыНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтандартныеВычетыПоНДФЛВторичный, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.АвансовыеПлатежиИностранцевПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.НДФЛКПеречислению, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.НДФЛПеречисленный, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СправкиНДФЛДляПередачиВНалоговыйОрганПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

#КонецОбласти

// АПК:581-выкл 
// АПК:299-выкл 

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - 
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		Начисления - ТаблицаЗначений - таблица значений с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - должно быть непустым.
//			* Подразделение - ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации -
//  	    * ДатаПолученияДохода - дата - должно быть непустым.
//			* КодДохода - СправочникСсылка.ВидыДоходовНДФЛ -
//			* СуммаДохода -
//			* КодВычета - СправочникСсылка.ВидыВычетовНДФЛ -
//  	    * СуммаВычета -
//			* Сотрудник - необязательная, может отсутствовать.
//  	    * Начисление - необязательная, может отсутствовать.
//  	    * КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ - необязательная, может отсутствовать.
//  	    * ВключатьВДекларациюПоНалогуНаПрибыль - необязательная, может отсутствовать.
//  	    * РегистрацияВНалоговомОргане - необязательная, может отсутствовать; если отсутствует, значение соответствующего поля определяется по значению поля Подразделение.
//  	    * ПодразделениеСотрудника - СправочникСсылка.ПодразделенияОрганизаций - необязательная, может отсутствовать.
//  	    * ИсточникДоходаЗаПределамиРФ - булево - необязательная, может отсутствовать; если отсутствует, значение соответствующего поля определяется по значению поля ПодразделениеСотрудника (если такая колонка имеет место) или поля Подразделение.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		Регистратор - ДокументСсылка - 
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//		КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ - категория дохода документа
//
Процедура СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаОперации, Начисления, Записывать = Ложь, ОкончательныйРасчет = Истина, Регистратор = Неопределено, ДоходПолученНаТерриторииРФ = Ложь, КатегорияДохода = Неопределено) Экспорт
	
	Если Начисления.Количество() = 0 Тогда // данных не оказалось
		Возврат;
	КонецЕсли;
	
	Если Начисления.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		ТаблицаДвижений = ТаблицаДвиженийСРегистрациейВНалоговомОргане(Начисления, "ДатаПолученияДохода");
	Иначе
		ТаблицаДвижений = Начисления;
	КонецЕсли;
	Если Начисления.Колонки.Найти("ИсточникДоходаЗаПределамиРФ") = Неопределено И ДоходПолученНаТерриторииРФ <> Истина Тогда
		ТаблицаДвижений = ТаблицаДвиженийСИсточникомДоходаЗаПределамиРФ(ТаблицаДвижений, "ДатаПолученияДохода");
	КонецЕсли;
	
	РегистрацияОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	
	Для Каждого СтрокаДанных Из ТаблицаДвижений Цикл
		НоваяСтрока = СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, СтрокаДанных, ОкончательныйРасчет, Регистратор, КатегорияДохода);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(НоваяСтрока.ДатаПолученияДохода);
	КонецЦикла;
	
	Если Начисления.Колонки.Найти("НеУчитыватьДоходВ6НДФЛ") = Неопределено Тогда
		ПроставитьПорядокУчетаДоходовВ6НДФЛ(Движения, Регистратор); 
	КонецЕсли;
	
	Если Записывать Тогда
		Движения.СведенияОДоходахНДФЛ.Записать();
		Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
	Иначе
		Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МесяцНачисления
//		МенеджерВременныхТаблиц, содержит вр. таблицу 
//			ВТНачисления с полями.
//				Сотрудник, тип СправочникСсылка.Сотрудники.
//				Начисление, тип ПланВидовРасчетаСсылка.Начисления
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				КодВычетаНДФЛ.
//				Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				ПодразделениеОрганизации, тип СправочникСсылка.ПодразделенияОрганизаций
//				ПланируемаяДатаВыплаты, тип дата - необязательная
//				СуммаЗаСчетГрантов, тип число - необязательная
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ИмяВТНачисления - строка - имя вр. таблицы начислений, по умолчанию "ВТНачисления".
//		Регистратор - ДокументСсылка - 
//		МенеджерКадровогоУчета - Общий модуль - держатель метода СоздатьВТКадровыеДанныеСотрудников.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
Процедура СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина, ИмяВТНачисления = "ВТНачисления", Регистратор = Неопределено, МенеджерКадровогоУчета = Неопределено, ДоходПолученНаТерриторииРФ = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(МесяцНачисления) Тогда
		МесяцНачисления = ДатаОперации
	КонецЕсли;
	
	Если МенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаВыплаты", ДатаВыплаты);
	Запрос.УстановитьПараметр("ДатаОперации", ДатаОперации);
	Запрос.УстановитьПараметр("КонецМесяцаНачисления", КонецМесяца(МесяцНачисления));
	
	КолонкиТаблицыНачислений = МенеджерВременныхТаблиц.Таблицы[ИмяВТНачисления].Колонки;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	&КонецМесяцаНачисления КАК Период
	|ПОМЕСТИТЬ ВТПериодыСотрудников
	|ИЗ
	|	#ИмяВТНачисления КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Начисление ССЫЛКА ПланВидовРасчета.Начисления";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ИмяВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТПериодыСотрудников");
	МенеджерКадровогоУчета.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ДатаУвольнения");
	СоздатьВТДополнительныеСвойстваКодаДохода(МенеджерВременныхТаблиц);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(ВидыРасчета.КодДоходаНДФЛ, Начисления.Начисление) КАК КодДохода,
	|	ЕСТЬNULL(ВидыРасчета.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
	|	ВЫБОР
	|		КОГДА НЕ Начисления.Начисление ССЫЛКА ПланВидовРасчета.Начисления
	|			ТОГДА &ДатаВыплаты
	|		КОГДА СвойстваКодаДохода.СоответствуетОплатеТруда
	|			ТОГДА ВЫБОР
	|					КОГДА ВидыРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2002)
	|							И ВидыРасчета.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности)
	|						ТОГДА &ДатаВыплаты
	|					КОГДА ДанныеОСотруднике.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							И ДанныеОСотруднике.ДатаУвольнения < &КонецМесяцаНачисления
	|						ТОГДА ДанныеОСотруднике.ДатаУвольнения
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВидыРасчета.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуНачисления)
	|								ТОГДА &КонецМесяцаНачисления
	|							КОГДА ВидыРасчета.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
	|								ТОГДА КОНЕЦПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
	|							КОГДА ВидыРасчета.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПредшествующемуМесяцуПериодаДействия)
	|								ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|							ИНАЧЕ &КонецМесяцаНачисления
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ &ДатаВыплаты
	|	КОНЕЦ КАК ДатаПолученияДохода,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НЕ Начисления.Начисление ССЫЛКА ПланВидовРасчета.Начисления
	|				ТОГДА &ДатаВыплаты
	|			КОГДА СвойстваКодаДохода.СоответствуетОплатеТруда
	|					И ВидыРасчета.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2002)
	|					И ВидыРасчета.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности)
	|				ТОГДА &ДатаВыплаты
	|			КОГДА СвойстваКодаДохода.СоответствуетОплатеТруда
	|					И ДанныеОСотруднике.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И ДанныеОСотруднике.ДатаУвольнения < &КонецМесяцаНачисления
	|				ТОГДА ДанныеОСотруднике.ДатаУвольнения
	|			КОГДА СвойстваКодаДохода.СоответствуетОплатеТруда
	|				ТОГДА ВЫБОР
	|						КОГДА ВидыРасчета.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуНачисления)
	|							ТОГДА &КонецМесяцаНачисления
	|						КОГДА ВидыРасчета.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
	|							ТОГДА КОНЕЦПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
	|						КОГДА ВидыРасчета.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПредшествующемуМесяцуПериодаДействия)
	|							ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|						ИНАЧЕ &КонецМесяцаНачисления
	|					КОНЕЦ
	|			ИНАЧЕ &ДатаВыплаты
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА Начисления.СуммаЗаСчетГрантов = 0
	|			ТОГДА Начисления.СуммаДохода
	|		КОГДА Начисления.СуммаДохода * Начисления.СуммаДохода < Начисления.СуммаЗаСчетГрантов * Начисления.СуммаЗаСчетГрантов
	|			ТОГДА 0
	|		ИНАЧЕ Начисления.СуммаДохода - Начисления.СуммаЗаСчетГрантов
	|	КОНЕЦ КАК СуммаДохода,
	|	Начисления.КодВычетаНДФЛ КАК КодВычета,
	|	ВЫБОР
	|		КОГДА Начисления.СуммаЗаСчетГрантов = 0
	|				ИЛИ Начисления.СуммаДохода = 0
	|			ТОГДА Начисления.СуммаВычетаНДФЛ
	|		ИНАЧЕ Начисления.СуммаВычетаНДФЛ * (1 - Начисления.СуммаЗаСчетГрантов / Начисления.СуммаДохода)
	|	КОНЕЦ КАК СуммаВычета,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТДатыПолученияДохода
	|ИЗ
	|	#ИмяВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
	|		ПО Начисления.Начисление = ВидыРасчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ДанныеОСотруднике
	|		ПО Начисления.Сотрудник = ДанныеОСотруднике.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеСвойстваКодаДохода КАК СвойстваКодаДохода
	|		ПО (ВидыРасчета.КодДоходаНДФЛ = СвойстваКодаДохода.КодДохода)
	|ГДЕ
	|	(Начисления.СуммаДохода <> 0
	|			ИЛИ Начисления.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(ВидыРасчета.КодДоходаНДФЛ, Начисления.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяВТНачисления", ИмяВТНачисления);
	ТекстЗапроса = ?(КолонкиТаблицыНачислений.Найти("СуммаЗаСчетГрантов") <> Неопределено, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "Начисления.СуммаЗаСчетГрантов", "0"));
	Запрос.Текст = ?(КолонкиТаблицыНачислений.Найти("ПланируемаяДатаВыплаты") = Неопределено, ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "&ДатаВыплаты", "Начисления.ПланируемаяДатаВыплаты"));
	Запрос.Выполнить();
	
	Если ДоходПолученНаТерриторииРФ Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыПолученияДохода.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыПолученияДохода.КодДохода КАК КодДохода,
		|	ДатыПолученияДохода.КатегорияДохода КАК КатегорияДохода,
		|	ДатыПолученияДохода.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	ДатыПолученияДохода.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ДатыПолученияДохода.СуммаДохода КАК СуммаДохода,
		|	ДатыПолученияДохода.КодВычета КАК КодВычета,
		|	ДатыПолученияДохода.СуммаВычета КАК СуммаВычета,
		|	ДатыПолученияДохода.Подразделение КАК Подразделение,
		|	ДатыПолученияДохода.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ЛОЖЬ КАК ИсточникДоходаЗаПределамиРФ,
		|	ДатыПолученияДохода.Сотрудник КАК Сотрудник,
		|	ДатыПолученияДохода.Начисление КАК Начисление
		|ИЗ
		|	ВТДатыПолученияДохода КАК ДатыПолученияДохода
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
		|		ПО ДатыПолученияДохода.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
		|			И (ДатыПолученияДохода.ДатаПолученияДохода МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыПолученияДохода.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыПолученияДохода.КодДохода КАК КодДохода,
		|	ДатыПолученияДохода.КатегорияДохода КАК КатегорияДохода,
		|	ДатыПолученияДохода.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	ДатыПолученияДохода.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ДатыПолученияДохода.СуммаДохода КАК СуммаДохода,
		|	ДатыПолученияДохода.КодВычета КАК КодВычета,
		|	ДатыПолученияДохода.СуммаВычета КАК СуммаВычета,
		|	ДатыПолученияДохода.Подразделение КАК Подразделение,
		|	ДатыПолученияДохода.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВЫБОР
		|		КОГДА СтруктурныеЕдиницыЗаПределамиРФ.Подразделение ЕСТЬ НЕ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсточникДоходаЗаПределамиРФ,
		|	ДатыПолученияДохода.Сотрудник КАК Сотрудник,
		|	ДатыПолученияДохода.Начисление КАК Начисление
		|ИЗ
		|	ВТДатыПолученияДохода КАК ДатыПолученияДохода
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
		|		ПО ДатыПолученияДохода.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
		|			И (ДатыПолученияДохода.ДатаПолученияДохода МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияЗаПределамиРФ КАК СтруктурныеЕдиницыЗаПределамиРФ
		|		ПО ДатыПолученияДохода.ПодразделениеОрганизации = СтруктурныеЕдиницыЗаПределамиРФ.Подразделение
		|			И (ДатыПолученияДохода.ДатаПолученияДохода МЕЖДУ СтруктурныеЕдиницыЗаПределамиРФ.ДатаНачала И СтруктурныеЕдиницыЗаПределамиРФ.ДатаОкончания)";
	КонецЕсли;
	Результат = Запрос.Выполнить();
	
	РегистрацияОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, Выборка, ОкончательныйРасчет, Регистратор);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, Выборка.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
	КонецЦикла;
	
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТПериодыСотрудников");
	ТаблицыКУдалению.Добавить("ВТКадровыеДанныеСотрудников");
	ТаблицыКУдалению.Добавить("ВТДополнительныеСвойстваКодаДохода");
	ТаблицыКУдалению.Добавить("ВТДатыПолученияДохода");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
	
	ПроставитьПорядокУчетаДоходовВ6НДФЛ(Движения, Регистратор); 
	
	Если Записывать Тогда
		// Записываем сразу и не выставляем признак Записывать этому набору записей движений документа.
		Движения.СведенияОДоходахНДФЛ.Записать();
		Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
	Иначе
		Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// В отличие от СформироватьДоходыНДФЛПоНачислениям, дата выплаты содержится во временной
// таблице ВТНачисления
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МенеджерВременныхТаблиц, содержит вр. таблицу 
//			ВТНачисления с полями.
//				Сотрудник, тип СправочникСсылка.Сотрудники.
//				Начисление, тип ПланВидовРасчетаСсылка.Начисления
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				КодВычетаНДФЛ.
//				Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				ПодразделениеОрганизации, тип СправочникСсылка.ПодразделенияОрганизаций
//				ПланируемаяДатаВыплаты
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ИмяВТНачисления - строка - имя вр. таблицы начислений, по умолчанию "ВТНачисления".
//		Регистратор - ДокументСсылка - 
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
Процедура СформироватьДоходыНДФЛПоНачислениямСПланируемойДатойВыплаты(Движения, Отказ, Организация, ДатаОперации, МенеджерВременныхТаблиц, МесяцНачисления = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина, ИмяВТНачисления = "ВТНачисления", Регистратор = Неопределено, ДоходПолученНаТерриторииРФ = Ложь) Экспорт
	
	СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, Неопределено, МенеджерВременныхТаблиц, МесяцНачисления, Записывать, ОкончательныйРасчет, ИмяВТНачисления, Регистратор, , ДоходПолученНаТерриторииРФ); 
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		ИмущественныеВычеты
//			- таблица значений с колонками
//				МесяцРегистрации: должно быть непустым
//				ФизическоеЛицо: должно быть непустым
//				КодВычета: должно быть непустым.
//          	Год: должно быть непустым.
//				Сумма
//		Записывать - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПравоНаИмущественныеВычеты(Движения, Отказ, Организация, ДатаОперации, ИмущественныеВычеты, Записывать = Ложь) Экспорт
	
	Если ИмущественныеВычеты = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из ИмущественныеВычеты Цикл
		Если СтрокаДанных.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
		СтрокаИмущественныхВычетов(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, СтрокаДанных)
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.ИмущественныеВычетыНДФЛ.Записать();
			Движения.ИмущественныеВычетыНДФЛ.Записывать = Ложь;
		Иначе
			Движения.ИмущественныеВычетыНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МенеджерВременныхТаблиц
//			- МенеджерВременныхТаблиц содержит вр. таблицу ВТДанныеОбИмущественныхВычетах с полями
//				ФизическоеЛицо: должно быть непустым
//          	КодВычета: должно быть непустым
//          	МесяцНалоговогоПериода: должно быть непустым.
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				Сумма
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьПредоставленныеИмущественныеВычетыПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, МенеджерВременныхТаблиц, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОперации",ДатаОперации);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вычеты.КодВычета КАК КодВычета,
	|	ГОД(Вычеты.МесяцНалоговогоПериода) КАК Год,
	|	Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Вычеты.Сумма КАК Сумма,
	|	Вычеты.Подразделение КАК Подразделение,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТДанныеОбИмущественныхВычетах КАК Вычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Вычеты.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (Вычеты.МесяцНалоговогоПериода МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)
	|ГДЕ
	|	Вычеты.Сумма <> 0";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтрокаИмущественныхВычетов(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, Выборка, ОкончательныйРасчет);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, Выборка.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане); 
	КонецЦикла;
	Если Записывать Тогда
		Движения.ИмущественныеВычетыНДФЛ.Записать();
		Движения.ИмущественныеВычетыНДФЛ.Записывать = Ложь;
	Иначе
		Движения.ИмущественныеВычетыНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		ИмущественныеВычеты - ТаблицаЗначений - с колонками
//				ФизическоеЛицо: должно быть непустым
//				КодВычета: должно быть непустым.
//          	МесяцНалоговогоПериода: должно быть непустым.
//          	Год: должно быть непустым.
//				Сумма
//				Подразделение - ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации-
//      СоответствиеПодразделенийИРегистраций - необязательный устаревший параметр, не используется
//      РегистрацияВНалоговомОргане - необязательный параметр
//      	эти параметры имеет смысл передавать для уменьшения количества запросов данных в том случае, 
//              когда данные о вычетах передаются в виде таблицы значений 
//          если параметры не указаны - регистрация в налоговом органе будет вычислена самой процедурой.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьПредоставленныеИмущественныеВычетыПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, ИмущественныеВычеты, СоответствиеПодразделенийИРегистраций = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Если ИмущественныеВычеты = Неопределено Или Не ЗначениеЗаполнено(ИмущественныеВычеты) Тогда
		Возврат
	КонецЕсли;
	
	Если ИмущественныеВычеты.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		ИмущественныеВычетыСРегистрациями = ТаблицаДвиженийСРегистрациейВНалоговомОргане(ИмущественныеВычеты, "МесяцНалоговогоПериода");
	Иначе
		ИмущественныеВычетыСРегистрациями = ИмущественныеВычеты;
	КонецЕсли;
	Если РегистрацияВНалоговомОргане = Неопределено Тогда
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из ИмущественныеВычетыСРегистрациями Цикл
		Если СтрокаДанных.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = СтрокаИмущественныхВычетов(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаДанных, ОкончательныйРасчет);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.ИмущественныеВычетыНДФЛ.Записать();
			Движения.ИмущественныеВычетыНДФЛ.Записывать = Ложь;
		Иначе
			Движения.ИмущественныеВычетыНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МенеджерВременныхТаблиц
//			- МенеджерВременныхТаблиц, который содержит вр. таблицу ВТДанныеОСтандартныхВычетах с полями
//				ФизическоеЛицо: должно быть непустым
//  	       	КодВычета: должно быть непустым
//      	   	МесяцНалоговогоПериода: должно быть непустым.
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//      	   	ВключатьВДекларациюПоНалогуНаПрибыль: необязательная.
//      	   	МесяцПериодаПредоставленияВычета: необязательная.
//				Сумма
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСтандартныеВычетыПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, МенеджерВременныхТаблиц, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОперации",ДатаОперации);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ ВТДанныеОСтандартныхВычетах КАК Вычеты";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вычеты.КодВычета КАК КодВычета,
	|	Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Вычеты.МесяцПериодаПредоставленияВычета КАК МесяцПериодаПредоставленияВычета,
	|	Вычеты.Сумма КАК Сумма,
	|	Вычеты.Подразделение КАК Подразделение,
	|	Вычеты.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТДанныеОСтандартныхВычетах КАК Вычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Вычеты.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (Вычеты.МесяцНалоговогоПериода МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)
	|ГДЕ
	|	Вычеты.Сумма <> 0";
	Колонки = МенеджерВременныхТаблиц.Таблицы["ВТДанныеОСтандартныхВычетах"].Колонки;
	Если Колонки.Найти("ВключатьВДекларациюПоНалогуНаПрибыль") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Вычеты.ВключатьВДекларациюПоНалогуНаПрибыль", "Неопределено")
	КонецЕсли;
	Если Колонки.Найти("МесяцПериодаПредоставленияВычета") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Вычеты.МесяцПериодаПредоставленияВычета", "Вычеты.МесяцНалоговогоПериода")
	Иначе 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтрокаСтандартныхВычетов(Движения, Организация, ДатаОперации, Выборка, ОкончательныйРасчет);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, Выборка.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане); 
	КонецЦикла;
	Если Записывать Тогда
		Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записать();
		Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Ложь;
	Иначе
		Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		СтандартныеВычеты
//			- таблица значений с колонками
//				ФизическоеЛицо: должно быть непустым
//				КодВычета: должно быть непустым
//      	   	МесяцНалоговогоПериода: должно быть непустым.
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				Сумма
//				ВключатьВДекларациюПоНалогуНаПрибыль - необязательная колонка 
//				МесяцПериодаПредоставленияВычета - необязательная колонка 
//      СоответствиеПодразделенийИРегистраций - необязательный устаревший параметр, не используется
//      РегистрацияВНалоговомОргане - необязательный параметр
//      	эти параметры имеет смысл передавать для уменьшения количества запросов данных в том случае, 
//              когда данные о вычетах передаются в виде таблицы значений 
//          если параметры не указаны - регистрация в налоговом органе будет вычислена самой процедурой.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСтандартныеВычетыПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, СтандартныеВычеты, СоответствиеПодразделенийИРегистраций = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Если СтандартныеВычеты = Неопределено Или Не ЗначениеЗаполнено(СтандартныеВычеты) Тогда
		Возврат
	КонецЕсли;
	
	Если СтандартныеВычеты.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		СтандартныеВычетыСРегистрациями = ТаблицаДвиженийСРегистрациейВНалоговомОргане(СтандартныеВычеты, "МесяцНалоговогоПериода");
	Иначе
		СтандартныеВычетыСРегистрациями = СтандартныеВычеты;
	КонецЕсли;
	Если РегистрацияВНалоговомОргане = Неопределено Тогда
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из СтандартныеВычетыСРегистрациями Цикл
		Если СтрокаДанных.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = СтрокаСтандартныхВычетов(Движения, Организация, ДатаОперации, СтрокаДанных, ОкончательныйРасчет);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записать();
			Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Ложь;
		Иначе
			Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ИсчисленныйНалог
//			- МенеджерВременныхТаблиц, который содержит вр. таблицу ВТНДФЛИсчисленный с полями
//				ФизическоеЛицо: должно быть непустым
//  	       	СтавкаНалогообложенияРезидента: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым.
//  	    	КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ: должно быть непустым
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				Сумма
//				СуммаСПревышения
//				НалогНаПрибыльДляДивидендов
//				ВключатьВДекларациюПоНалогуНаПрибыль: булево (необязательное)
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ДатаВыплаты - дата - "основная" дата выплаты документа-начисления.
//
Процедура СформироватьИсчисленныйНалогПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, ИсчисленныйНалог, Записывать = Ложь, ОкончательныйРасчет = Истина, ДатаВыплаты = '00010101') Экспорт
	
	Если ИсчисленныйНалог = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОперации",ДатаОперации);
	Запрос.МенеджерВременныхТаблиц = ИсчисленныйНалог;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ ВТНДФЛИсчисленный КАК Налоги";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Налоги.Сумма КАК Сумма,
	|	Налоги.СуммаСПревышения КАК СуммаСПревышения,
	|	Налоги.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов,
	|	Налоги.КатегорияДохода КАК КатегорияДохода,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.Подразделение КАК Подразделение,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТНДФЛИсчисленный КАК Налоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Налоги.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (Налоги.МесяцНалоговогоПериода МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|			ИЛИ Налоги.СуммаСПревышения <> 0)";
	
	ИмеющиесяКолонки = ИсчисленныйНалог.Таблицы["ВТНДФЛИсчисленный"].Колонки;
	Если ИмеющиесяКолонки.Найти("ВключатьВДекларациюПоНалогуНаПрибыль") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.ВключатьВДекларациюПоНалогуНаПрибыль", "Неопределено")
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("СуммаСПревышения") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СуммаСПревышения", "0")
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("НалогНаПрибыльДляДивидендов") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.НалогНаПрибыльДляДивидендов", "0")
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, Выборка, , ОкончательныйРасчет, ДатаВыплаты);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, Выборка.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане); 
	КонецЦикла;
	Если Записывать Тогда
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
	Иначе
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ИсчисленныйНалог 
//			- таблица значений с колонками
//				ФизическоеЛицо: должно быть непустым
//  	       	СтавкаНалогообложенияРезидента: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым
//  	    	КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ: должно быть непустым
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//				Сумма
//				СуммаСПревышения
//				ВключатьВДекларациюПоНалогуНаПрибыль - необязательная колонка 
//      СоответствиеПодразделенийИРегистраций - необязательный устаревший параметр, не используется
//      РегистрацияВНалоговомОргане - необязательный параметр
//      	эти параметры имеет смысл передавать для уменьшения количества запросов данных в том случае, 
//              когда данные о налогах передаются в виде таблицы значений 
//          если параметры не указаны - регистрация в налоговом органе будет вычислена самой процедурой.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ДатаВыплаты - дата - "основная" дата выплаты документа-начисления.
//
Процедура СформироватьИсчисленныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, ИсчисленныйНалог, СоответствиеПодразделенийИРегистраций = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина, ДатаВыплаты = '00010101') Экспорт
	
	Если ИсчисленныйНалог = Неопределено Или Не ЗначениеЗаполнено(ИсчисленныйНалог) Тогда
		Возврат
	КонецЕсли;
	
	Если ИсчисленныйНалог.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		ИсчисленныйНалогСРегистрациями = ТаблицаДвиженийСРегистрациейВНалоговомОргане(ИсчисленныйНалог, "МесяцНалоговогоПериода");
	Иначе
		ИсчисленныйНалогСРегистрациями = ИсчисленныйНалог;
	КонецЕсли;
	
	Если РегистрацияВНалоговомОргане = Неопределено Тогда
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	КонецЕсли;
	
	ПроверятьКолонкуСПревышения = ИсчисленныйНалог.Колонки.Найти("СуммаСПревышения") <> Неопределено;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из ИсчисленныйНалогСРегистрациями Цикл
		Если ПроверятьКолонкуСПревышения Тогда
			Если СтрокаДанных.Сумма = 0 И СтрокаДанных.СуммаСПревышения = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если СтрокаДанных.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, СтрокаДанных, , ОкончательныйРасчет, ДатаВыплаты);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы: удержанный налог вписываем в регистры РасчетыНалогоплательщиковСБюджетомПоНДФЛ 
//	и РасчетыНалоговыхАгентовСБюджетомПоНДФЛ, а начислятели, по которым налог не удерживался, - в регистр ДокументыОплаченныеБезУдержанияНДФЛ.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		УдержанныйНалог - МенеджерВременныхТаблиц - содержит вр. таблицу ВТНалогУдержанный с полями
//				ФизическоеЛицо: должно быть непустым
//  	       	СтавкаНалогообложенияРезидента: должно быть непустым.
//				МесяцНалоговогоПериода: должно быть непустым.
//  	    	КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ: должно быть непустым
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				КодДохода
//				Сумма
//				СуммаСПревышения
//				НалогНаПрибыльДляДивидендов
//  	       	Ставка (необязательное)
//				РегистрацияВНалоговомОргане, тип СправочникСсылка.РегистрацииВНалоговомОргане (необязательное)
//				ДокументОснование (необязательное)
//				ВключатьВДекларациюПоНалогуНаПрибыль (необязательное)
//				СрокПеречисления: тип ПеречислениеСсылка.СрокиПеречисляемогоНалога (необязательное).
//				СуммаВыплаченногоДохода (необязательное)
//				СуммаОтпускныхБольничных (необязательное)
//				УчитыватьВыплаченныйДоходВ6НДФЛ (необязательное)
//		РегистрацияВНалоговомОргане - необязательный, если не задан, то будет вычисляться по подразделениям и организации.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, является ли выплата, для которой пишется удержанный налог, выплатой "под расчет".
//		ФормироватьРасчетыНалоговыхАгентовСБюджетом - булево - 
//		Регистратор - ДокументСсылка - 
//		ТаблицаМежрасчетныхВыплат - ТаблицаЗначений - с колонками:
//				ФизическоеЛицо: должно быть непустым
//				а также ДокументОснование, ПериодВзаиморасчетов, Сотрудник, СтатьяФинансирования, СтатьяРасходов, Подразделение
//
Процедура СформироватьУдержанныйНалогПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, УдержанныйНалог, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, ФормироватьРасчетыНалоговыхАгентовСБюджетом = Истина, Регистратор = Неопределено, ТаблицаМежрасчетныхВыплат = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ТаблицаМежрасчетныхВыплат) Тогда
		СформироватьДокументыОплаченныеБезУдержанияНДФЛ(Движения, Отказ, Организация, Регистратор, ТаблицаМежрасчетныхВыплат);
	КонецЕсли;
	
	Если УдержанныйНалог = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОперации",ДатаОперации);
	Запрос.МенеджерВременныхТаблиц = УдержанныйНалог;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ ВТНалогУдержанный КАК Налоги";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнятьФактическийДоход = ДатаОперации < ПараметрыРасчетаНДФЛПоПрогрессивнойШкале().НачалоРасчетаНДФЛПоПрогрессивнойШкале;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Налоги.Сумма КАК Сумма,
	|	Налоги.СуммаСПревышения КАК СуммаСПревышения,
	|	Налоги.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов,
	|	Налоги.КодДохода КАК КодДохода,
	|	Налоги.КатегорияДохода КАК КатегорияДохода,
	|	Налоги.Подразделение КАК Подразделение,
	|	Налоги.Ставка КАК Ставка,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.СрокПеречисления КАК СрокПеречисления,
	|	Налоги.СуммаВыплаченногоДохода КАК СуммаВыплаченногоДохода,
	|	Налоги.СуммаОтпускныхБольничных КАК СуммаОтпускныхБольничных,
	|	Налоги.СуммаОблагаемогоДохода КАК СуммаОблагаемогоДохода,
	|	Налоги.ДокументОснование КАК ДокументОснование,
	|	Налоги.УчитыватьВыплаченныйДоходВ6НДФЛ КАК УчитыватьВыплаченныйДоходВ6НДФЛ,
	|	ВЫБОР
	|		КОГДА &ПроверкаРегистрации
	|			ТОГДА Налоги.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	ВТНалогУдержанный КАК Налоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыОснования КАК ДокументыОснования
	|		ПО Налоги.ДокументОснование = ДокументыОснования.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
	|		ПО Налоги.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
	|			И Налоги.МесяцНалоговогоПериода = СтавкаНДФЛПоСтавкеРезидента.Период
	|			И Налоги.СтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
	|			И Налоги.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Налоги.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (ВЫБОР
	|				КОГДА Налоги.МесяцНалоговогоПериода > &ДатаОперации
	|					ТОГДА Налоги.МесяцНалоговогоПериода
	|				ИНАЧЕ &ДатаОперации
	|			КОНЕЦ МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)
	|			И (НЕ &ПроверкаРегистрации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ВременнаяТаблица.Ставка КАК Ставка,
	|	ВременнаяТаблица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВременнаяТаблица.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВременнаяТаблица.СрокПеречисления КАК СрокПеречисления,
	|	ВременнаяТаблица.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблица.КатегорияДохода КАК КатегорияДохода,
	|	ВременнаяТаблица.КодДохода КАК КодДохода,
	|	ВременнаяТаблица.Подразделение КАК Подразделение,
	|	ВременнаяТаблица.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(ВременнаяТаблица.Сумма) КАК Сумма,
	|	СУММА(ВременнаяТаблица.СуммаСПревышения) КАК СуммаСПревышения,
	|	СУММА(ВременнаяТаблица.СуммаВыплаченногоДохода) КАК СуммаВыплаченногоДохода,
	|	СУММА(ВременнаяТаблица.СуммаОблагаемогоДохода) КАК СуммаОблагаемогоДохода,
	|	СУММА(ВременнаяТаблица.СуммаОтпускныхБольничных) КАК СуммаОтпускныхБольничных,
	|	СУММА(ВременнаяТаблица.НалогНаПрибыльДляДивидендов) КАК НалогНаПрибыльДляДивидендов,
	|	ВременнаяТаблица.УчитыватьВыплаченныйДоходВ6НДФЛ КАК УчитыватьВыплаченныйДоходВ6НДФЛ
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.ФизическоеЛицо,
	|	ВременнаяТаблица.СтавкаНалогообложенияРезидента,
	|	ВременнаяТаблица.Ставка,
	|	ВременнаяТаблица.МесяцНалоговогоПериода,
	|	ВременнаяТаблица.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВременнаяТаблица.СрокПеречисления,
	|	ВременнаяТаблица.ДокументОснование,
	|	ВременнаяТаблица.КатегорияДохода,
	|	ВременнаяТаблица.КодДохода,
	|	ВременнаяТаблица.Подразделение,
	|	ВременнаяТаблица.РегистрацияВНалоговомОргане,
	|	ВременнаяТаблица.УчитыватьВыплаченныйДоходВ6НДФЛ";
	
	ВычислятьСрокПеречисления = Истина;
	ИмеющиесяКолонки = УдержанныйНалог.Таблицы["ВТНалогУдержанный"].Колонки;
	Если ИмеющиесяКолонки.Найти("Ставка") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.Ставка КАК Ставка,", "СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,");
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	Налоги.МесяцНалоговогоПериода КАК Период,
		|	Налоги.КатегорияДохода КАК КатегорияДохода
		|ПОМЕСТИТЬ ВТПериодыНалогаУдержанного
		|ИЗ
		|	ВТНалогУдержанный КАК Налоги";
		Запрос.Выполнить();
		СоздатьВТСтавкаНДФЛПоСтавкеРезидента(УдержанныйНалог, "ВТПериодыНалогаУдержанного");
		Запрос.Текст = "УНИЧТОЖИТЬ ВТПериодыНалогаУдержанного";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка) КАК КатегорияДохода,
		|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка) КАК СтавкаНалогообложенияРезидента,
		|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.ПустаяСсылка) КАК СтавкаНДФЛ
		|ПОМЕСТИТЬ ВТСтавкаНДФЛПоСтавкеРезидента";
		Запрос.Выполнить();
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("ВключатьВДекларациюПоНалогуНаПрибыль") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.ВключатьВДекларациюПоНалогуНаПрибыль", "Неопределено")
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("СуммаСПревышения") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СуммаСПревышения", "0")
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("НалогНаПрибыльДляДивидендов") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.НалогНаПрибыльДляДивидендов", "0")
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("ДокументОснование") = Неопределено Тогда
		ВычислятьСрокПеречисления = Ложь;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	ЛОЖЬ КАК УчитыватьВыплаченныйДоходВ6НДФЛ
		|ПОМЕСТИТЬ ВТДокументыОснования";
		Запрос.Выполнить();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.ДокументОснование", "Неопределено");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица.ДокументОснование", "Неопределено");
		Если ИмеющиесяКолонки.Найти("УчитыватьВыплаченныйДоходВ6НДФЛ") = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.УчитыватьВыплаченныйДоходВ6НДФЛ", "ЛОЖЬ")
		КонецЕсли;
	Иначе 	
		Если ИмеющиесяКолонки.Найти("УчитыватьВыплаченныйДоходВ6НДФЛ") = Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СведенияОДоходахНДФЛ.Регистратор КАК ДокументОснование,
			|	МАКСИМУМ(СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ) КАК УчитыватьВыплаченныйДоходВ6НДФЛ
			|ПОМЕСТИТЬ ВТДокументыОснования
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
			|ГДЕ
			|	СведенияОДоходахНДФЛ.Регистратор В
			|			(ВЫБРАТЬ
			|				ИсходныеДанные.ДокументОснование
			|			ИЗ
			|				ВТНалогУдержанный КАК ИсходныеДанные)
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОДоходахНДФЛ.Регистратор";
			Запрос.Выполнить();
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.УчитыватьВыплаченныйДоходВ6НДФЛ", "ДокументыОснования.УчитыватьВыплаченныйДоходВ6НДФЛ")
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
			|	ЛОЖЬ КАК УчитыватьВыплаченныйДоходВ6НДФЛ
			|ПОМЕСТИТЬ ВТДокументыОснования";
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("СрокПеречисления") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СрокПеречисления", "Неопределено")
	Иначе 	
		ВычислятьСрокПеречисления = Ложь;
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("СуммаВыплаченногоДохода") = Неопределено Или Не ЗаполнятьФактическийДоход Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СуммаВыплаченногоДохода", "0")
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("СуммаОблагаемогоДохода") = Неопределено Тогда
		Если ИмеющиесяКолонки.Найти("СуммаВыплаченногоДохода") = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СуммаОблагаемогоДохода", "0")
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СуммаОблагаемогоДохода", "Налоги.СуммаВыплаченногоДохода")
		КонецЕсли;
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("СуммаОтпускныхБольничных") = Неопределено Тогда
		Если ИмеющиесяКолонки.Найти("СуммаВыплаченногоДохода") = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СуммаОтпускныхБольничных", "0")
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.СуммаОтпускныхБольничных", "Налоги.СуммаВыплаченногоДохода")
		КонецЕсли;
	КонецЕсли;
	Если ИмеющиесяКолонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		Запрос.УстановитьПараметр("ПроверкаРегистрации", Ложь);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Налоги.РегистрацияВНалоговомОргане", "Неопределено");
	Иначе
		Запрос.УстановитьПараметр("ПроверкаРегистрации", Истина);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Результаты = Запрос.Выполнить().Выгрузить();
	
	Если РегистрацияВНалоговомОргане = Неопределено Тогда 
		РегистрацияОрганизацииВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);	
	КонецЕсли;	
	БольничныеОтпуска = ?(ВычислятьСрокПеречисления, РасчетЗарплаты.ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Результаты.ВыгрузитьКолонку("ДокументОснование")), Новый Соответствие);
	
	СоответствиеСтрок = Новый Соответствие;
	Для каждого СтрокаТЗ Из Результаты Цикл
		
		Если СтрокаТЗ.Сумма = 0 И СтрокаТЗ.СуммаСПревышения = 0 И СтрокаТЗ.СуммаВыплаченногоДохода = 0 И СтрокаТЗ.СуммаОтпускныхБольничных = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаРасчетовНалогоплательщика = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаТЗ, Перечисления.ВариантыУдержанияНДФЛ.Удержано);
		
		// Производим зачет сумм налога на прибыль в счет исчисленного налога с дивидендов.
		НалогНаПрибыльДляДивидендов = ?(НоваяСтрокаРасчетовНалогоплательщика.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.Дивиденды, НоваяСтрокаРасчетовНалогоплательщика.НалогНаПрибыльДляДивидендов, 0);
		НоваяСтрокаРасчетовНалогоплательщика.НалогНаПрибыльДляДивидендов = 0;
		Если НалогНаПрибыльДляДивидендов * НоваяСтрокаРасчетовНалогоплательщика.Сумма > 0 Тогда 
			Если НоваяСтрокаРасчетовНалогоплательщика.Сумма > 0 Тогда
				ОстатокСуммыКЗачету = Макс(НалогНаПрибыльДляДивидендов - НоваяСтрокаРасчетовНалогоплательщика.Сумма, 0);
				НоваяСтрокаРасчетовНалогоплательщика.Сумма = Макс(НоваяСтрокаРасчетовНалогоплательщика.Сумма - НалогНаПрибыльДляДивидендов, 0);
			Иначе
				ОстатокСуммыКЗачету = Мин(НалогНаПрибыльДляДивидендов - НоваяСтрокаРасчетовНалогоплательщика.Сумма, 0);
				НоваяСтрокаРасчетовНалогоплательщика.Сумма = Мин(НоваяСтрокаРасчетовНалогоплательщика.Сумма - НалогНаПрибыльДляДивидендов, 0);
			КонецЕсли;
			НалогНаПрибыльДляДивидендов = ОстатокСуммыКЗачету;
		КонецЕсли;
		Если НалогНаПрибыльДляДивидендов * НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения > 0 Тогда
			Если НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения > 0 Тогда
				НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения = Макс(НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения - НалогНаПрибыльДляДивидендов, 0);
			Иначе
				НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения = Мин(НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения - НалогНаПрибыльДляДивидендов, 0);
			КонецЕсли;
		КонецЕсли;
		
		Если РегистрацияВНалоговомОргане = Неопределено Тогда
			ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрокаРасчетовНалогоплательщика, СтрокаТЗ.РегистрацияВНалоговомОргане, РегистрацияОрганизацииВНалоговомОргане);
		Иначе
			НоваяСтрокаРасчетовНалогоплательщика.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		КонецЕсли;
		Если ФормироватьРасчетыНалоговыхАгентовСБюджетом И (НоваяСтрокаРасчетовНалогоплательщика.Сумма <> 0 Или НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения <> 0) Тогда
			СоответствиеСтрок.Вставить(НоваяСтрокаРасчетовНалогоплательщика, СтрокаТЗ);
		КонецЕсли;
		Если ВычислятьСрокПеречисления Тогда
			Если БольничныеОтпуска[НоваяСтрокаРасчетовНалогоплательщика.ДокументОснование] = Истина Тогда
				Если ЗаполнятьФактическийДоход Тогда
					Если СтрокаТЗ.СуммаОтпускныхБольничных > 0 Или СтрокаТЗ.СуммаВыплаченногоДохода < 0 Или (СтрокаТЗ.СуммаОтпускныхБольничных = 0 И СтрокаТЗ.СуммаВыплаченногоДохода = 0) Тогда
						Если СтрокаТЗ.СуммаВыплаченногоДохода <= СтрокаТЗ.СуммаОтпускныхБольничных Или СтрокаТЗ.СуммаВыплаченногоДохода < 0 Или СтрокаТЗ.СуммаОблагаемогоДохода = 0 Тогда // весь доход считаем отпускными
							НоваяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные;
						Иначе
							ВтораяСтрокаРасчетовНалогоплательщика = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаТЗ, Перечисления.ВариантыУдержанияНДФЛ.Удержано);
							Если ФормироватьРасчетыНалоговыхАгентовСБюджетом И ВтораяСтрокаРасчетовНалогоплательщика.Сумма <> 0 Тогда
								СоответствиеСтрок.Вставить(ВтораяСтрокаРасчетовНалогоплательщика, СтрокаТЗ);
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(ВтораяСтрокаРасчетовНалогоплательщика, НоваяСтрокаРасчетовНалогоплательщика);
							НоваяСтрокаРасчетовНалогоплательщика.Сумма = Окр(СтрокаТЗ.Сумма / СтрокаТЗ.СуммаОблагаемогоДохода * СтрокаТЗ.СуммаОтпускныхБольничных, 0);
							НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения = Окр(СтрокаТЗ.СуммаСПревышения / СтрокаТЗ.СуммаОблагаемогоДохода * СтрокаТЗ.СуммаОтпускныхБольничных, 0);
							НоваяСтрокаРасчетовНалогоплательщика.СуммаВыплаченногоДохода = СтрокаТЗ.СуммаОтпускныхБольничных;
							НоваяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные;
							ВтораяСтрокаРасчетовНалогоплательщика.Сумма = СтрокаТЗ.Сумма - НоваяСтрокаРасчетовНалогоплательщика.Сумма;
							ВтораяСтрокаРасчетовНалогоплательщика.СуммаСПревышения = СтрокаТЗ.СуммаСПревышения - НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения;
							ВтораяСтрокаРасчетовНалогоплательщика.СуммаВыплаченногоДохода = СтрокаТЗ.СуммаВыплаченногоДохода - СтрокаТЗ.СуммаОтпускныхБольничных;
							ВтораяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы;
						КонецЕсли;
					Иначе
						НоваяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы;
					КонецЕсли;
				Иначе
					Если СтрокаТЗ.СуммаОтпускныхБольничных = 0 Тогда
						НоваяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы;
					ИначеЕсли СтрокаТЗ.СуммаОблагаемогоДохода = СтрокаТЗ.СуммаОтпускныхБольничных Или СтрокаТЗ.СуммаОблагаемогоДохода = 0 Тогда // весь доход считаем отпускными
						НоваяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные;
					Иначе
						ВтораяСтрокаРасчетовНалогоплательщика = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаТЗ, Перечисления.ВариантыУдержанияНДФЛ.Удержано);
						Если ФормироватьРасчетыНалоговыхАгентовСБюджетом И ВтораяСтрокаРасчетовНалогоплательщика.Сумма <> 0 Тогда
							СоответствиеСтрок.Вставить(ВтораяСтрокаРасчетовНалогоплательщика, СтрокаТЗ);
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(ВтораяСтрокаРасчетовНалогоплательщика, НоваяСтрокаРасчетовНалогоплательщика);
						НоваяСтрокаРасчетовНалогоплательщика.Сумма = Окр(СтрокаТЗ.Сумма / СтрокаТЗ.СуммаОблагаемогоДохода * СтрокаТЗ.СуммаОтпускныхБольничных, 0);
						НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения = Окр(СтрокаТЗ.СуммаСПревышения / СтрокаТЗ.СуммаОблагаемогоДохода * СтрокаТЗ.СуммаОтпускныхБольничных, 0);
						НоваяСтрокаРасчетовНалогоплательщика.СуммаВыплаченногоДохода = 0;
						НоваяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные;
						ВтораяСтрокаРасчетовНалогоплательщика.Сумма = СтрокаТЗ.Сумма - НоваяСтрокаРасчетовНалогоплательщика.Сумма;
						ВтораяСтрокаРасчетовНалогоплательщика.СуммаСПревышения = СтрокаТЗ.СуммаСПревышения - НоваяСтрокаРасчетовНалогоплательщика.СуммаСПревышения;
						ВтораяСтрокаРасчетовНалогоплательщика.СуммаВыплаченногоДохода = 0;
						ВтораяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрокаРасчетовНалогоплательщика.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроставитьКрайнийСрокУплаты(Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Организация);
	
	Если Записывать Тогда
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
	Иначе
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	Если ФормироватьРасчетыНалоговыхАгентовСБюджетом И СоответствиеСтрок.Количество() > 0 Тогда
		Для каждого Элемент Из СоответствиеСтрок Цикл
			СтрокаРасчетовНалогоплательщика = Элемент.Ключ;
			СтрокаРасчетов = СтрокаРасчетовНалоговыхАгентовСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, Элемент.Значение, СтрокаРасчетовНалогоплательщика, , СтрокаРасчетовНалогоплательщика.КатегорияДохода);
			Если СтрокаРасчетовНалогоплательщика.СуммаСПревышения <> 0 Тогда
				СтрокаСПревышения = СтрокаРасчетовНалоговыхАгентовСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, Элемент.Значение, СтрокаРасчетовНалогоплательщика, , СтрокаРасчетовНалогоплательщика.КатегорияДохода);
				СтрокаСПревышения.Ставка = Перечисления.НДФЛСтавки.Ставка15;
				СтрокаСПревышения.Сумма = СтрокаРасчетовНалогоплательщика.СуммаСПревышения;
			КонецЕсли;
		КонецЦикла;
		Если Записывать Тогда
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТСтавкаНДФЛПоСтавкеРезидента");
	ТаблицыКУдалению.Добавить("ВТВременнаяТаблица");
	ТаблицыКУдалению.Добавить("ВТДокументыОснования");
	ЗарплатаКадры.УничтожитьВТ(УдержанныйНалог, ТаблицыКУдалению);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		УдержанныйНалог - Таблица значений с колонками
//				ФизическоеЛицо: должно быть непустым
//  	       	СтавкаНалогообложенияРезидента: должно быть непустым.
//  	       	Ставка: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым.
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//				КодДохода
//				Сумма
//				СуммаСПревышения
//				РегистрацияВНалоговомОргане - необязательная колонка, если ее нет, то регистрация будет вычисляться.
//				РасчетМежрасчетногоПериода - необязательная колонка 
//				ВключатьВДекларациюПоНалогуНаПрибыль - необязательная колонка 
//				ДокументОснование: тип ОпределяемыйТип.ДокументыОснованияНДФЛ - необязательная колонка  
//				СрокПеречисления: тип ПеречислениеСсылка.СрокиПеречисляемогоНалога (необязательное).
//				СуммаВыплаченногоДохода (необязательное)
//				УчитыватьВыплаченныйДоходВ6НДФЛ (необязательное)
//		РегистрацияВНалоговомОргане - необязательный, если не задан, то будет вычисляться по подразделениям и организации.
//		Записывать - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ФормироватьРасчетыНалоговыхАгентовСБюджетом - булево - 
//
Процедура СформироватьУдержанныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, УдержанныйНалог, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, ФормироватьРасчетыНалоговыхАгентовСБюджетом = Истина) Экспорт
	
	Если УдержанныйНалог = Неопределено Или УдержанныйНалог.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, УдержанныйНалог, "ВТНалогУдержанный");
	СформироватьУдержанныйНалогПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, МенеджерВременныхТаблиц, РегистрацияВНалоговомОргане, Записывать, ФормироватьРасчетыНалоговыхАгентовСБюджетом)

КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		НалогиПереданныеВНалоговыйОрган - таблица значений с колонками
//				ФизическоеЛицо: должно быть непустым
//  	       	СтавкаНалогообложенияРезидента: должно быть непустым.
//  	       	Ставка: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым.
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				Сумма
//				СуммаСПревышения
//		Записывать - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьНалогиПереданныеВНалоговыйОрган(Движения, Отказ, Организация, ДатаОперации, НалогиПереданныеВНалоговыйОрган, Записывать = Ложь) Экспорт
	
	Если НалогиПереданныеВНалоговыйОрган = Неопределено Тогда
		Возврат
	КонецЕсли;
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из НалогиПереданныеВНалоговыйОрган Цикл
		Если СтрокаДанных.Сумма = 0 И СтрокаДанных.СуммаСПревышения = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
		СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаДанных, Перечисления.ВариантыУдержанияНДФЛ.ПереданоНаВзысканиеВНалоговыйОрган);
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МесяцНачисления
//			- МенеджерВременныхТаблиц, который содержит вр. таблицу ВТУдержания с полями
//				ФизическоеЛицо: должно быть непустым.
//				Удержание - тип ПланВидовРасчетаСсылка.Удержания.
//				Сумма
//		Записывать - булево - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСоциальныеВычетыПоВременнойТаблице(Регистратор, Движения,  Отказ, Организация, ДатаОперации, МесяцНачисления, МенеджерВременныхТаблиц, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт 

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоГода(МесяцНачисления));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("МесяцДатыОперации", НачалоМесяца(ДатаОперации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(Удержания.Сумма) КАК Сумма,
	|	ВЫБОР
	|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код320)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код319)
	|	КОНЕЦ КАК КодВычета
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	ВТУдержания КАК Удержания
	|ГДЕ
	|	Удержания.Удержание.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ))
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код320)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код319)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаВычетов
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаВычетов.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛицаВычетов КАК ФизическиеЛицаВычетов";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, Ложь, Результат.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"), Организация, ДатаОперации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	&МесяцНалоговогоПериода КАК Период
	|ПОМЕСТИТЬ ВТПериодыСотрудников
	|ИЗ
	|	ВТОсновныеСотрудникиФизическихЛиц КАК Сотрудники";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТПериодыСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "Подразделение");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсходныеДанные.Сумма КАК Сумма,
	|	&МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ИсходныеДанные.КодВычета КАК КодВычета,
	|	ЕСТЬNULL(Вычет320.Сумма, 0) КАК СуммаВычета320
	|ПОМЕСТИТЬ ВТСуммыВычетов
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК Вычет320
	|		ПО ИсходныеДанные.ФизическоеЛицо = Вычет320.ФизическоеЛицо
	|			И (Вычет320.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код320))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ИсходныеДанные.Сумма) КАК ПримененныйВычет
	|ПОМЕСТИТЬ ВТЗарегистрированоРанееВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Сумма КАК Сумма
	|	ИЗ
	|		ВТФизическиеЛицаВычетов КАК ИсходныеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ КАК НДФЛПредоставленныеСтандартныеВычетыФизЛиц
	|			ПО ИсходныеДанные.ФизическоеЛицо = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизическоеЛицо
	|				И &ГоловнаяОрганизация = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ГоловнаяОрганизация
	|				И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Регистратор <> &Ссылка)
	|				И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода МЕЖДУ &НачалоНалоговогоПериода И &МесяцНалоговогоПериода)
	|				И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные))
	|				И (НАЧАЛОПЕРИОДА(НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Период, МЕСЯЦ) <= &МесяцДатыОперации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсходныеДанные.ФизическоеЛицо,
	|		ИмущественныеВычетыНДФЛ.Сумма
	|	ИЗ
	|		ВТФизическиеЛицаВычетов КАК ИсходныеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|			ПО ИсходныеДанные.ФизическоеЛицо = ИмущественныеВычетыНДФЛ.ФизическоеЛицо
	|				И &ГоловнаяОрганизация = ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация
	|				И (ИмущественныеВычетыНДФЛ.Регистратор <> &Ссылка)
	|				И (ИмущественныеВычетыНДФЛ.Период МЕЖДУ &НачалоНалоговогоПериода И &МесяцНалоговогоПериода)
	|				И (ИмущественныеВычетыНДФЛ.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО))
	|				И (НАЧАЛОПЕРИОДА(ИмущественныеВычетыНДФЛ.МесяцРегистрации, МЕСЯЦ) <= &МесяцДатыОперации)
	|				И (ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))) КАК ИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ИсходныеДанные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код320)
	|			ТОГДА ВЫБОР
	|					КОГДА ИсходныеДанные.Сумма + ЕСТЬNULL(ЗарегистрированоРанееВычетов.ПримененныйВычет, 0) < 120000
	|						ТОГДА ИсходныеДанные.Сумма
	|					КОГДА ЕСТЬNULL(ЗарегистрированоРанееВычетов.ПримененныйВычет, 0) < 120000
	|						ТОГДА 120000 - ЕСТЬNULL(ЗарегистрированоРанееВычетов.ПримененныйВычет, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсходныеДанные.Сумма + ИсходныеДанные.СуммаВычета320 + ЕСТЬNULL(ЗарегистрированоРанееВычетов.ПримененныйВычет, 0) < 120000
	|					ТОГДА ИсходныеДанные.Сумма
	|				КОГДА ИсходныеДанные.СуммаВычета320 + ЕСТЬNULL(ЗарегистрированоРанееВычетов.ПримененныйВычет, 0) < 120000
	|					ТОГДА 120000 - ЕСТЬNULL(ЗарегистрированоРанееВычетов.ПримененныйВычет, 0) - ИсходныеДанные.СуммаВычета320
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Сумма,
	|	ИсходныеДанные.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИсходныеДанные.КодВычета КАК КодВычета,
	|	ЕСТЬNULL(ДанныеОСотруднике.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение
	|ИЗ
	|	ВТСуммыВычетов КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированоРанееВычетов КАК ЗарегистрированоРанееВычетов
	|		ПО ИсходныеДанные.ФизическоеЛицо = ЗарегистрированоРанееВычетов.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ДанныеОСотруднике
	|			ПО Сотрудники.Сотрудник = ДанныеОСотруднике.Сотрудник
	|		ПО ИсходныеДанные.ФизическоеЛицо = Сотрудники.ФизическоеЛицо";
	Результаты = Запрос.ВыполнитьПакет();
	
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТОсновныеСотрудникиФизическихЛиц");
	ТаблицыКУдалению.Добавить("ВТКадровыеДанныеСотрудников");
	ТаблицыКУдалению.Добавить("ВТПериодыСотрудников");
	ТаблицыКУдалению.Добавить("ВТИсходныеДанные");
	ТаблицыКУдалению.Добавить("ВТЗарегистрированоРанееВычетов");
	ТаблицыКУдалению.Добавить("ВТСуммыВычетов");
	ТаблицыКУдалению.Добавить("ВТФизическиеЛицаВычетов");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
	
	СформироватьСтандартныеВычетыПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, Результаты[2].Выгрузить(), , , Записывать, ОкончательныйРасчет);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МесяцНачисления.
//		Удержания - таблица значений с колонками
//				ФизическоеЛицо: должно быть непустым.
//				КатегорияУдержания - тип ПеречислениеСсылка.КатегорииУдержаний.
//				Удержание - тип ПланВидовРасчетаСсылка.Удержания.
//				Сумма
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Удержания, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт 

	Если Удержания.Количество() = 0 Тогда // данных не оказалось
		Возврат	
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КатегорияУдержания");
	СтруктураПоиска.КатегорияУдержания = Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ;
	Вычеты = Удержания.Скопировать(СтруктураПоиска);
	СтруктураПоиска.КатегорияУдержания = Перечисления.КатегорииУдержаний.ДСВ;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Удержания.Скопировать(СтруктураПоиска), Вычеты);

	Если Вычеты.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Удержания", Вычеты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|";
	Запрос.Выполнить();
	
	СформироватьСоциальныеВычетыПоВременнойТаблице(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Запрос.МенеджерВременныхТаблиц, Записывать, ОкончательныйРасчет);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора либо структура, содержащая те же наборы записей с движениями.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ДанныеДокумента - Таблица значений с колонками
//			ФизическоеЛицо: должно быть непустым
//         	МесяцНалоговогоПериода: должно быть непустым.
//			Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//			необязательные колонки с суммами налогов и вычетов:
//          	НалогПоСтавке13, НалогСПревышенияПоСтавке13, НалогПоСтавке09, НалогПоСтавке35
//          	ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке09, ЗачтеноАвансовыхПлатежейПоСтавке35
//				КатегорияДохода
//              ПримененныйВычетЛичный
//              ПримененныйВычетНаДетей, ПримененныйВычетНаДетейДвойной, ПримененныйВычетНаДетейДвойнойВторой 
//              ПримененныйВычетНаВторогоРебенка, ПримененныйВычетНаВторогоРебенкаДвойной, ПримененныйВычетНаВторогоРебенкаДвойнойВторой
//              ПримененныйВычетНаТретьегоРебенкаДвойной, ПримененныйВычетНаТретьегоРебенкаДвойной, ПримененныйВычетНаТретьегоРебенкаДвойнойВторой
//              ПримененныйВычетНаДетейИнвалидов, ПримененныйВычетНаДетейИнвалидовДвойной, ПримененныйВычетНаДетейИнвалидовДвойнойВторой
//              ПримененныйВычетЛичныйОпекунов
//              ПримененныйВычетНаДетейОпекунов, ПримененныйВычетНаДетейДвойнойОпекунов, ПримененныйВычетНаДетейДвойнойВторойОпекунов 
//              ПримененныйВычетНаВторогоРебенкаОпекунов, ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов, ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов
//              ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов, ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов, ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов
//				ПримененныйВычетНаДетейИнвалидовОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов
//				ПримененныйВычетРасходыНаСвоеОбучение,ПримененныйВычетРасходыНаОбучениеДетей,ПримененныйВычетРасходыНаЛечение,ПримененныйВычетСтраховыеВзносыНаМедУслуги,ПримененныйВычетРасходыНаДорогостоящееЛечение,ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни
//              ПримененныйВычетИмущественныйРасходы, ПримененныйВычетИмущественныйПроцентыПоКредитам, ПримененныйВычетИмущественныйПроцентыПриПерекредитовании
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ДатаВыплаты - дата - "основная" дата выплаты документа-начисления.
//
Процедура СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперации, ДанныеДокумента, Записывать = Ложь, ОкончательныйРасчет = Истина, ДатаВыплаты = '00010101') Экспорт
	
	Если ДанныеДокумента = Неопределено Или Не ЗначениеЗаполнено(ДанныеДокумента) Тогда
		Возврат
	КонецЕсли;
	
	ДанныеСРегистрациями = ТаблицаДвиженийСРегистрациейВНалоговомОргане(ДанныеДокумента, "МесяцНалоговогоПериода");
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации); 
	
	КолонкиДанных = ДанныеСРегистрациями.Колонки;
	
	СтрокИсчисленногоНалога = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Количество();
	СтрокЗачтеноАвансовыхПлатежей = Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Количество();
	
	Если КолонкиДанных.Найти("НалогПоСтавке13") <> Неопределено Тогда
		СформироватьИсчисленныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НалогиИзДанныхДокумента(ДанныеСРегистрациями, "НалогПоСтавке13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13), , РегистрацияВНалоговомОргане, Ложь, ОкончательныйРасчет, ДатаВыплаты);
	КонецЕсли;
	Если КолонкиДанных.Найти("ЗачтеноАвансовыхПлатежейПоСтавке13") <> Неопределено Тогда
		СформироватьИспользованныеАвансовыеПлатежиПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НалогиИзДанныхДокумента(ДанныеСРегистрациями, "ЗачтеноАвансовыхПлатежейПоСтавке13", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13), , РегистрацияВНалоговомОргане, Ложь, ОкончательныйРасчет);
	КонецЕсли;
	Если КолонкиДанных.Найти("НалогПоСтавке09") <> Неопределено Тогда
		СформироватьИсчисленныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НалогиИзДанныхДокумента(ДанныеСРегистрациями, "НалогПоСтавке09", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09), , РегистрацияВНалоговомОргане, Ложь, ОкончательныйРасчет, ДатаВыплаты);
	КонецЕсли;
	Если КолонкиДанных.Найти("ЗачтеноАвансовыхПлатежейПоСтавке09") <> Неопределено Тогда
		СформироватьИспользованныеАвансовыеПлатежиПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НалогиИзДанныхДокумента(ДанныеСРегистрациями, "ЗачтеноАвансовыхПлатежейПоСтавке09", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09), , РегистрацияВНалоговомОргане, Ложь, ОкончательныйРасчет);
	КонецЕсли;
	Если КолонкиДанных.Найти("НалогПоСтавке35") <> Неопределено Тогда
		СформироватьИсчисленныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НалогиИзДанныхДокумента(ДанныеСРегистрациями, "НалогПоСтавке35", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35), , РегистрацияВНалоговомОргане, Ложь, ОкончательныйРасчет, ДатаВыплаты);
	КонецЕсли;
	Если КолонкиДанных.Найти("ЗачтеноАвансовыхПлатежейПоСтавке35") <> Неопределено Тогда
		СформироватьИспользованныеАвансовыеПлатежиПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НалогиИзДанныхДокумента(ДанныеСРегистрациями, "ЗачтеноАвансовыхПлатежейПоСтавке35", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35), , РегистрацияВНалоговомОргане, Ложь, ОкончательныйРасчет);
	КонецЕсли;
	Если КолонкиДанных.Найти("ПримененныйВычетЛичный") <> Неопределено Тогда
		СформироватьСтандартныеВычетыПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, ЛичныйВычетИзДанныхДокумента(ДанныеСРегистрациями, "ПримененныйВычетЛичный", "ПримененныйВычетЛичныйКодВычета"), , РегистрацияВНалоговомОргане, Ложь, ОкончательныйРасчет);
	КонецЕсли;
	
	Если СтрокИсчисленногоНалога < Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Количество() Тогда
		Если ОкончательныйРасчет И ПроведениеСервер.ЕстьНаборЗаписей(Движения, "СведенияОДоходахНДФЛ") Тогда
			ДоходыДокумента = Движения.СведенияОДоходахНДФЛ.Выгрузить();
			ДоходыДокумента.Индексы.Добавить("ФизическоеЛицо,ДатаПолученияДохода");
			СтруктураПоиска = Новый Структура("ФизическоеЛицо,ДатаПолученияДохода");
			Для каждого Движение Из Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ Цикл
				Если Движение.ДатаПолученияДоходаФиксирована Или Движение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска.ФизическоеЛицо = Движение.ФизическоеЛицо;
				СтруктураПоиска.ДатаПолученияДохода = Движение.МесяцНалоговогоПериода;
				Движение.ДатаПолученияДоходаФиксирована = ДоходыДокумента.НайтиСтроки(СтруктураПоиска).Количество() = 0;
			КонецЦикла;
		КонецЕсли;
		Если Записывать Тогда
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокЗачтеноАвансовыхПлатежей < Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Количество() Тогда
		Если Записывать Тогда
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записать();
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Определяем соответствие видов вычетов полям таблицы.
	ВидыВычетов = ВидыВычетовПоПолямТаблицы();
	
	// Вычеты на детей
	МассивВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыВычетовНаДетей());
	Для каждого ИмяРесурса Из МассивВычетов Цикл
		Если КолонкиДанных.Найти(ИмяРесурса) <> Неопределено Тогда
			СформироватьСтандартныеВычетыПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, СтандартныйВычетИзДанныхДокумента(ДанныеСРегистрациями, ИмяРесурса, ВидыВычетов[ИмяРесурса]), , РегистрацияВНалоговомОргане, Записывать, ОкончательныйРасчет);
		КонецЕсли;
	КонецЦикла;
	
	// Имущественные вычеты
	МассивВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыИмущественныхВычетов());
	Для каждого ИмяРесурса Из МассивВычетов Цикл
		Если КолонкиДанных.Найти(ИмяРесурса) <> Неопределено Тогда
			СформироватьПредоставленныеИмущественныеВычетыПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, ИмущественныйВычетИзДанныхДокумента(ДанныеСРегистрациями, ИмяРесурса, ВидыВычетов[ИмяРесурса]), , РегистрацияВНалоговомОргане, Записывать, ОкончательныйРасчет);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		ДанныеДокумента - Таблица значений с колонками
//			МесяцРегистрации
//			ФизическоеЛицо
//			ГоловнаяОрганизация
//			ИзменитьВычетыНаДетей
//			ВычетыНаДетей: таблица значений, соответствующая по структуре регистру СтандартныеВычетыНаДетейНДФЛ
//			ИзменитьЛичныйВычет
//			КодВычетаЛичный
//			ДокументПодтверждающийПравоНаЛичныйВычет.
//		Записывать - Булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ЗаполнятьОснование - Булево - признак того, следует ли заполнять реквизит "Основание" для вычетов
//
Процедура СформироватьПрименениеСтандартныхВычетов(Движения, Отказ, ДанныеДокумента, Записывать = Ложь, ЗаполнятьОснование = Истина) Экспорт
	
	Если ДанныеДокумента = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЗаписьОПримененииВычета						= Движения.ПрименениеСтандартныхВычетовПоНДФЛ.Добавить();
	ЗаписьОПримененииВычета.Период				= ДанныеДокумента.МесяцРегистрации;
	ЗаписьОПримененииВычета.ФизическоеЛицо		= ДанныеДокумента.ФизическоеЛицо;
	ЗаписьОПримененииВычета.ГоловнаяОрганизация	= ДанныеДокумента.ГоловнаяОрганизация;
	Если Записывать Тогда
		Движения.ПрименениеСтандартныхВычетовПоНДФЛ.Записать();
		Движения.ПрименениеСтандартныхВычетовПоНДФЛ.Записывать = Ложь;
	Иначе
		Движения.ПрименениеСтандартныхВычетовПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	
	Если ДанныеДокумента.ИзменитьВычетыНаДетей Тогда
		Для Каждого ВычетНаДетей Из ДанныеДокумента.ВычетыНаДетей Цикл
			ЗаполнитьЗначенияСвойств(Движения.СтандартныеВычетыНаДетейНДФЛ.Добавить(), ВычетНаДетей);
		КонецЦикла;
		Если Записывать Тогда
			Движения.СтандартныеВычетыНаДетейНДФЛ.Записать();
			Движения.СтандартныеВычетыНаДетейНДФЛ.Записывать = Ложь;
		Иначе
			Движения.СтандартныеВычетыНаДетейНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДокумента.ИзменитьЛичныйВычет Тогда
		ЗаписьОЛичномВычете					= Движения.СтандартныеВычетыФизическихЛицНДФЛ.Добавить();
		ЗаписьОЛичномВычете.Период			= ДанныеДокумента.МесяцРегистрации;
		ЗаписьОЛичномВычете.ФизическоеЛицо	= ДанныеДокумента.ФизическоеЛицо;
		ЗаписьОЛичномВычете.КодВычетаЛичный	= ДанныеДокумента.КодВычетаЛичный;
		Если ЗаполнятьОснование Тогда
			
			ЗаписьОЛичномВычете.Основание = ДанныеДокумента.ДокументПодтверждающийПравоНаЛичныйВычет;
			
		КонецЕсли;
		Если Записывать Тогда
			Движения.СтандартныеВычетыФизическихЛицНДФЛ.Записать();
			Движения.СтандартныеВычетыФизическихЛицНДФЛ.Записывать = Ложь;
		Иначе
			Движения.СтандартныеВычетыФизическихЛицНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		АвансовыеПлатежи - ТаблицаЗначений - таблица с колонками:
//				ФизическоеЛицо: должно быть непустым
//          	Год: должно быть непустым.
//				Сумма
//		Записывать - булево  - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьАвансовыйПлатежИностранца(Движения, Отказ, Организация, ДатаОперации, АвансовыеПлатежи, Записывать = Ложь) Экспорт
	
	Если АвансовыеПлатежи = Неопределено Или ДатаОперации < ДатаИзмененияНалогообложенияДивидендов() Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого АвансовыйПлатеж Из АвансовыеПлатежи Цикл
		Если АвансовыйПлатеж.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
		СтрокаАвансовыхПлатежейИностранцев(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, АвансовыйПлатеж)
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записать();
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит вр. таблицу 
//			ВТДанныеОЗачтенныхПлатежах с полями
//				ФизическоеЛицо: должно быть непустым
//      	   	МесяцНалоговогоПериода: должно быть непустым.
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				Сумма
//				СтавкаНалогообложенияРезидента
//				КатегорияДохода (может отсутствовать)
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьИспользованныеАвансовыеПлатежиПоВременнойТаблице(Движения, Отказ, Организация, ДатаОперации, МенеджерВременныхТаблиц, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Или ДатаОперации < ДатаИзмененияНалогообложенияДивидендов() Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаОперации",ДатаОперации);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ГОД(Вычеты.МесяцНалоговогоПериода) КАК Год,
	|	Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Вычеты.Сумма КАК Сумма,
	|	Вычеты.СуммаСПревышения КАК СуммаСПревышения,
	|	Вычеты.Подразделение КАК Подразделение,
	|	Вычеты.КатегорияДохода КАК КатегорияДохода,
	|	Вычеты.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТДанныеОЗачтенныхПлатежах КАК Вычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Вычеты.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (Вычеты.МесяцНалоговогоПериода МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)
	|ГДЕ
	|	(Вычеты.Сумма <> 0
	|			ИЛИ Вычеты.СуммаСПревышения <> 0)";
	Колонки = МенеджерВременныхТаблиц.Таблицы["ВТДанныеОЗачтенныхПлатежах"].Колонки;
	Если Колонки.Найти("КатегорияДохода") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Вычеты.КатегорияДохода", "Неопределено");
	КонецЕсли;
	Если Колонки.Найти("СуммаСПревышения") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Вычеты.СуммаСПревышения", "0");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтрокаАвансовыхПлатежейИностранцев(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, Выборка, ОкончательныйРасчет);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, Выборка.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане); 
		НоваяСтрока.Сумма = Выборка.Сумма + Выборка.СуммаСПревышения;
		НоваяСтрока = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, Выборка, Перечисления.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей, ОкончательныйРасчет);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, Выборка.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
	КонецЦикла;
	
	Если Записывать Тогда
		Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записать();
		Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Ложь;
	Иначе
		Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	Если Записывать Тогда
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
	Иначе
		Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		АвансовыеПлатежи - ТаблицаЗначений - с колонками:
//				ФизическоеЛицо: должно быть непустым
//				Год: должно быть непустым
//				Подразделение - ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				Сумма
//				СуммаСПревышения (необязательная)
//				СтавкаНалогообложенияРезидента
//				МесяцНалоговогоПериода
//      СоответствиеПодразделенийИРегистраций - необязательный устаревший параметр, не используется
//      РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - необязательный параметр
//      	эти параметры имеет смысл передавать для уменьшения количества запросов данных в том случае, 
//              когда данные передаются в виде таблицы значений 
//          если параметры не указаны - регистрация в налоговом органе будет вычислена самой процедурой.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьИспользованныеАвансовыеПлатежиПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, АвансовыеПлатежи, СоответствиеПодразделенийИРегистраций = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Если АвансовыеПлатежи = Неопределено Или ДатаОперации < ДатаИзмененияНалогообложенияДивидендов() Тогда
		Возврат
	КонецЕсли;
	
	Если АвансовыеПлатежи.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		АвансовыеПлатежиСРегистрациями = ТаблицаДвиженийСРегистрациейВНалоговомОргане(АвансовыеПлатежи, "ДатаПолученияДохода");
	Иначе
		АвансовыеПлатежиСРегистрациями = АвансовыеПлатежи;
	КонецЕсли;
	Если АвансовыеПлатежи.Колонки.Найти("СуммаСПревышения") = Неопределено Тогда
		АвансовыеПлатежи.Колонки.Добавить("СуммаСПревышения", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если РегистрацияВНалоговомОргане = Неопределено Тогда
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из АвансовыеПлатежиСРегистрациями Цикл
		Если СтрокаДанных.Сумма = 0 И СтрокаДанных.СуммаСПревышения = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
		
		НоваяСтрока = СтрокаАвансовыхПлатежейИностранцев(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаДанных, ОкончательныйРасчет);
		НоваяСтрока.Сумма = СтрокаДанных.Сумма + СтрокаДанных.СуммаСПревышения;
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
		
		НоваяСтрока = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаДанных, Перечисления.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей,ОкончательныйРасчет);
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияВНалоговомОргане);
		
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записать();
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Истина;
		КонецЕсли;
		Если Записывать Тогда
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ФизическиеЛица - Массив, СправочникСсылка.ФизическиеЛица - 
//		Регистратор - ДокументСсылка - 
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокумента(Движения, Отказ, Организация, ФизическиеЛица, Регистратор, Записывать = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
		ЕстьНовыеСтроки = Ложь;
		ОбработанныеЛица = Новый Соответствие;
		Для Каждого Лицо Из ФизическиеЛица Цикл
			Если Не ЗначениеЗаполнено(Лицо) Тогда
				Продолжить;
			КонецЕсли;
			Если ОбработанныеЛица[Лицо] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьНовыеСтроки = Истина;
			ОбработанныеЛица.Вставить(Лицо, Истина);
			
			НоваяСтрока = Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Добавить();
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ФизическоеЛицо = Лицо;
			НоваяСтрока.ДокументОснование = Регистратор;
			
		КонецЦикла;
	Иначе
		
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Добавить();
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ФизическоеЛицо = ФизическиеЛица;
		НоваяСтрока.ДокументОснование = Регистратор;
		
	КонецЕсли;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записать();
			Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записывать = Ложь;
		Иначе
			Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит вр. таблицу ВТФизическиеЛица с обязательной колонкой ФизическоеЛицо
//		Регистратор - ДокументСсылка - 
//		ИмяТаблицыФизлиц - строка - 
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения, Отказ, Организация, МенеджерВременныхТаблиц, Регистратор, ИмяТаблицыФизлиц = "ВТФизическиеЛица", Записывать = Ложь, УдержатьНалогПриВыплатеЗарплаты = Ложь) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО ФизическиеЛица.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
	|			И (ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование = &Регистратор)
	|			И (ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор <> &Регистратор)
	|ГДЕ
	|	ФизическиеЛица.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо ЕСТЬ NULL";
	Запрос.Текст = ?(ИмяТаблицыФизлиц = "ВТФизическиеЛица", ТекстЗапроса, СтрЗаменить(ТекстЗапроса, "ВТФизическиеЛица", ИмяТаблицыФизлиц));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ФизическиеЛица = Результат.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	Для Каждого Лицо Из ФизическиеЛица Цикл
		
		НоваяСтрока = Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Добавить();
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ФизическоеЛицо = Лицо;
		НоваяСтрока.ДокументОснование = Регистратор;
		НоваяСтрока.УдержатьНалогПриВыплатеЗарплаты = УдержатьНалогПриВыплатеЗарплаты;
		
	КонецЦикла;
	
	Если Записывать Тогда
		Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записать();
		Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записывать = Ложь;
	Иначе
		Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДокументыФизическихЛиц - ТаблицаЗначений - с колонками:
//				ФизическоеЛицо: должно быть непустым
//				ДокументОснование: должно быть непустым
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДокументыУчтенныеПриРасчетеПриОкончательномРасчете(Движения, Отказ, Организация, ДокументыФизическихЛиц, Записывать = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументыФизическихЛиц) Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДокументыФизическихЛиц Цикл
		
		НоваяСтрока = Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Организация = Организация;
		
	КонецЦикла;
	
	Если Записывать Тогда
		Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записать();
		Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записывать = Ложь;
	Иначе
		Движения.ДокументыУчтенныеПриРасчетеНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		КоллекцияДвижений - структура,  необязательный
//						содержит временные наборы записей
//						как источник данных для формирования движений.
//
Процедура СформироватьНДФЛКПеречислению(Движения, Отказ, КоллекцияДвижений = Неопределено) Экспорт

	НаборЗаписей = Неопределено;
	
	Если КоллекцияДвижений = Неопределено Тогда
		// Движения формируем по коллекции движений регистратора.
		Если Движения.Найти("РасчетыНалогоплательщиковСБюджетомПоНДФЛ") <> Неопределено Тогда
			НаборЗаписей = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ;
		КонецЕсли;
	Иначе
		КоллекцияДвижений.Свойство("РасчетыНалогоплательщиковСБюджетомПоНДФЛ", НаборЗаписей);
	КонецЕсли;
	
	Если НаборЗаписей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
	НайденныеСтроки = НаборЗаписей.Выгрузить().НайтиСтроки(Отбор);
	
	ЕстьНовыеСтроки = Ложь; Организация = Неопределено;
	Для каждого СтрокаДвижений Из НайденныеСтроки Цикл
		Если СтрокаДвижений.Сумма = 0 И СтрокаДвижений.СуммаСПревышения = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Движения.НДФЛКПеречислению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
		Если НоваяСтрока.ВариантУдержания = Перечисления.ВариантыУдержанияНДФЛ.ВозвращеноНалоговымАгентом Тогда
			НоваяСтрока.КрайнийСрокУплаты = НоваяСтрока.Период;
		КонецЕсли;
		Если Организация = Неопределено Тогда
			Организация = НоваяСтрока.Организация
		КонецЕсли;
		ЕстьНовыеСтроки = Истина;
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		ПроставитьКрайнийСрокУплаты(Движения.НДФЛКПеречислению, Организация);
		Движения.НДФЛКПеречислению.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		НалогПеречисленный - ТаблицаЗначений.
//
Процедура СформироватьНДФЛПеречисленный(Движения, Отказ, НалогПеречисленный = Неопределено) Экспорт

	НайденныеСтроки = Неопределено;
	
	Если НалогПеречисленный = Неопределено Тогда
		// Движения формируем по коллекции движений регистратора.
		Если Движения.Найти("НДФЛКПеречислению") <> Неопределено Тогда
			НайденныеСтроки = Движения.НДФЛКПеречислению.Выгрузить();
		КонецЕсли;
	Иначе
		НайденныеСтроки = НалогПеречисленный;
	КонецЕсли;
	
	Если НайденныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЕстьНовыеСтроки = Ложь;
	Для каждого СтрокаДвижений Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Движения.НДФЛПеречисленный.Добавить(), СтрокаДвижений);
		ЕстьНовыеСтроки = Истина;
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Движения.НДФЛПеречисленный.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// Выполняет сторнирование ранее зарегистрированного налога к перечислению как планируемого к удержанию.
// Используется для вызова из методов регистрирующих оплату ведомостей платежными документами.
//
// Параметры:
//	Движения - коллекция движений регистратора.
//	Отказ - Булево - признак отказа от заполнения движений.
//	Ведомости - Массив - ведомости, которыми был зарегистрирован планируемый к перечислению налог.
//	ФизическиеЛица - Массив - физические лица (СправочникСсылка.ФизическиеЛица), по которым выполняется сторнирование.
Процедура СторнироватьНДФЛКПеречислениюПоВедомостям(Движения, Отказ, Ведомости, ФизическиеЛица) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", Ведомости);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|ГДЕ
	|	НДФЛКПеречислению.Регистратор В (&Регистраторы)
	|	И &ФизическиеЛица";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "НДФЛКПеречислению.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовоеДвижение = Движения.НДФЛКПеречислению.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Выборка, , "Регистратор");
			НовоеДвижение.Сумма = - НовоеДвижение.Сумма;
		КонецЦикла;
		Движения.НДФЛКПеречислению.Записывать = Истина;
	КонецЕсли;

КонецПроцедуры

// Предназначена для расчета НДФЛ по записанным в учете и переданным дополнительно данным.
//
// Параметры:
//      ИсключаемыйРегистратор - ДокументСсылка - регистратор, для которого выполняется расчет НДФЛ.
//		Организация - СправочникСсылка.Организации -
//		МесяцРасчета - дата -
//		СписокФизическихЛиц - массив - содержит перечень физ.лиц, для которых выполняется расчет НДФЛ.
//		ПервыйМесяцНалоговогоПериода - дата -
//		ПоследнийМесяцНалоговогоПериода - дата -
//		ИсключатьДоходыРегистратора - булево - 
//		ОкончательныйРасчет - булево - признак того, надо ли при расчете учитывать все зарегистрированные доходы
//		                               (соответствует значению Истина).
//		ДатаУдержанияИсчисленногоНалога - дата - дата предполагаемого удержания налога, который был исчислен по
//		                                         Регистратору.
//		ДвиженияТекущегоРегистратора - коллекция, содержащая наборы записей регистров, данные которых участвуют в расчетах.  
//										Наборы записей содержат дополнительные данные, которые следует учесть в расчете, 
//                                      если документ не может записать эти данные в учет.  
//
//  Возвращаемое значение - таблица значений с колонками
//			ФизическоеЛицо
//			МесяцНалоговогоПериода.
//			Подразделение
//			КатегорияДохода
//			КодВычетаЛичный
//			ПримененныйВычетЛичный
//			ПримененныйВычетНаДетей
//			ПримененныйВычетНаДетейДвойной
//			ПримененныйВычетНаДетейДвойнойВторой
//			ПримененныйВычетНаТретьегоРебенка
//			ПримененныйВычетНаТретьегоРебенкаДвойной
//			ПримененныйВычетНаТретьегоРебенкаДвойнойВторой
//			ПримененныйВычетНаВторогоРебенка
//			ПримененныйВычетНаВторогоРебенкаДвойной
//			ПримененныйВычетНаВторогоРебенкаДвойнойВторой
//			ПримененныйВычетНаДетейИнвалидов
//			ПримененныйВычетНаДетейИнвалидовДвойной
//			ПримененныйВычетНаДетейИнвалидовДвойнойВторой
//			ПримененныйВычетНаДетейОпекунов
//			ПримененныйВычетНаДетейДвойнойОпекунов
//			ПримененныйВычетНаДетейДвойнойВторойОпекунов
//			ПримененныйВычетНаТретьегоРебенкаОпекунов
//			ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов
//			ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов
//			ПримененныйВычетНаВторогоРебенкаОпекунов
//			ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов
//			ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов
//			ПримененныйВычетНаДетейИнвалидовОпекунов
//			ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов
//			ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов
//			НалогПоСтавке13
//			НалогСПревышенияПоСтавке13
//			ЗачтеноАвансовыхПлатежейПоСтавке13
//			ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13
//			ПримененныйВычетИмущественныйРасходы
//			ПримененныйВычетИмущественныйПроцентыПоКредитам
//			ПримененныйВычетИмущественныйПроцентыПриПерекредитовании, ....
//
Функция РассчитатьНалогПоОсновнойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, Знач СписокФизическихЛиц, Знач ПервыйМесяцНалоговогоПериода = Неопределено, Знач ПоследнийМесяцНалоговогоПериода = Неопределено, ОкончательныйРасчет = Истина, ДатаУдержанияИсчисленногоНалога = Неопределено, ДвиженияТекущегоРегистратора = Неопределено) Экспорт	
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	Если Не ПолучитьФункциональнуюОпцию("ВыполнятьРасчетНДФЛПоПрогрессивнойШкале", Новый Структура("Организация", ГоловнаяОрганизация)) Тогда
		Возврат РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора)
	КонецЕсли;
	
	// 0. Проверим, стОит ли вообще что-то считать: массив физ.лиц может быть пустым, либо доходы межрасчетного
	// регистратора могут быть нулевыми. В обоих случаях результатом расчетов окажется пустая таблица.
	Если Не ЗначениеЗаполнено(СписокФизическихЛиц) Тогда
		Возврат ТаблицаНДФЛ()
	КонецЕсли;
	ЕстьДвиженияТекущегоРегистратораПоДоходам = ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "СведенияОДоходахНДФЛ");
	Если Не ОкончательныйРасчет И Не ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
		Возврат ТаблицаНДФЛ()
	КонецЕсли;
	Если ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
		ДоходыТекущегоРегистратора = ДвиженияТекущегоРегистратора.СведенияОДоходахНДФЛ.Выгрузить();
		Если Не ОкончательныйРасчет Тогда
			ТаблицаДоходовТекущегоРегистратора = ДоходыТекущегоРегистратора.Скопировать(ДоходыТекущегоРегистратора.НайтиСтроки(Новый Структура("Сторно, ЗарегистрированоПриНачисленииАванса", Ложь, '00010101')), "ФизическоеЛицо, СуммаДохода, СуммаВычета");
			Если СписокФизическихЛиц.Количество() = 1 Тогда
				Если ТаблицаДоходовТекущегоРегистратора.Итог("СуммаДохода") - ТаблицаДоходовТекущегоРегистратора.Итог("СуммаВычета") = 0 Тогда
					Возврат ТаблицаНДФЛ()
				КонецЕсли;
			Иначе
				ТаблицаДоходовТекущегоРегистратора.Свернуть("ФизическоеЛицо", "СуммаДохода, СуммаВычета");
				Для каждого ТекущаяСтрока Из ТаблицаДоходовТекущегоРегистратора Цикл
					Если ТекущаяСтрока.СуммаДохода - ТекущаяСтрока.СуммаВычета = 0 Тогда
						ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СписокФизическихЛиц, ТекущаяСтрока.ФизическоеЛицо)
					КонецЕсли;		
				КонецЦикла;
				Если Не ЗначениеЗаполнено(СписокФизическихЛиц) Тогда
					Возврат ТаблицаНДФЛ()
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	ЭтоРасчетПоДоходамТекущегоМесяца = ПервыйМесяцНалоговогоПериода = Неопределено Или ПоследнийМесяцНалоговогоПериода = Неопределено;
	НачалоМесяцаРасчета = НачалоМесяца(МесяцРасчета);
	КонецМесяцаРасчета = КонецМесяца(МесяцРасчета); 
	СоответствиеФизическихЛиц = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(СписокФизическихЛиц);
	МаксимальнаяДата = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
	ПараметрыРасчетаНДФЛПоПрогрессивнойШкале = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале();
	
	ПоляПоиска = "ФизическоеЛицо, МесяцНалоговогоПериода";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоМесяцаРасчета", НачалоМесяцаРасчета);
	Запрос.УстановитьПараметр("КонецМесяцаРасчета", КонецМесяцаРасчета);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	// 1.	Определим минимальные и максимальные периоды расчета в целом по всем физическим лицам
	//	Если на вход переданы первый и последний месяцы налогового периода (заказан перерасчет конкретного периода) - ничего не делаем.
	//	Среди записей регистра СведенияОДоходахНДФЛ, зарегистрированных в месяце расчета, получим минимальное и максимальное значение поля МесяцНалоговогоПериода
	Если ЭтоРасчетПоДоходамТекущегоМесяца Тогда
		
		ПервыйМесяцНалоговогоПериода = МаксимальнаяДата;
		ПоследнийМесяцНалоговогоПериода = '00010101';
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода) КАК ПоследнийМесяцНалоговогоПериода,
		|	МИНИМУМ(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода) КАК ПервыйМесяцНалоговогоПериода
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
		|	И СведенияОДоходахНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор
		|	И СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода";
		Если ОкончательныйРасчет Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода", "");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ПервыйМесяцНалоговогоПериода) Тогда
			ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.ПервыйМесяцНалоговогоПериода);
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.ПоследнийМесяцНалоговогоПериода);
		КонецЕсли;
		
		Если ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
			
			ДоходыТекущегоРегистратора.Сортировать("МесяцНалоговогоПериода");
			
			Для Каждого ТекущаяСтрока Из ДоходыТекущегоРегистратора Цикл
				Если ТекущаяСтрока.МесяцНалоговогоПериода >= ПервыйМесяцНалоговогоПериода Тогда
					Прервать;
				КонецЕсли;
				Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] = Истина
					И ТекущаяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация
					И ТекущаяСтрока.Период >= НачалоМесяцаРасчета
					И ТекущаяСтрока.Период <= КонецМесяцаРасчета	
					И (ОкончательныйРасчет Или ТекущаяСтрока.ДоходМежрасчетногоПериода)	Тогда
					
					ПервыйМесяцНалоговогоПериода = НачалоМесяца(ТекущаяСтрока.МесяцНалоговогоПериода);
					Прервать;
				КонецЕсли;		 			
			КонецЦикла;	 
			Для Сч = 1 По ДоходыТекущегоРегистратора.Количество() Цикл
				ТекущаяСтрока = ДоходыТекущегоРегистратора[ДоходыТекущегоРегистратора.Количество() - Сч];
				Если ТекущаяСтрока.МесяцНалоговогоПериода <= ПоследнийМесяцНалоговогоПериода Тогда
					Прервать;
				КонецЕсли;
				Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] = Истина
					И ТекущаяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация
					И ТекущаяСтрока.Период >= НачалоМесяцаРасчета
					И ТекущаяСтрока.Период <= КонецМесяцаРасчета	
					И (ОкончательныйРасчет Или ТекущаяСтрока.ДоходМежрасчетногоПериода)	Тогда
					
					ПоследнийМесяцНалоговогоПериода = КонецМесяца(ТекущаяСтрока.МесяцНалоговогоПериода);
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПоследнийМесяцНалоговогоПериода = '00010101' Тогда
			ПервыйМесяцНалоговогоПериода = НачалоМесяца(МесяцРасчета);
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(МесяцРасчета);
		КонецЕсли;	
		
	КонецЕсли;	
	
	// 1.1	Если расчет не затрагивает 2021 года, воспользуемся предыдущей реализацией алгоритма расчета
	ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале;
	Если ПоследнийМесяцНалоговогоПериода < ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
		Возврат РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале - 1, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора)
	КонецЕсли;
	
	// 1.2	Для пересмотра расчетов прошлых лет (2020 и ранее) воспользуемся предыдущей реализацией алгоритма расчета. 
	РезультатыПрошлыхЛет = ТаблицаНДФЛ();
	Если ПервыйМесяцНалоговогоПериода < ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
		РезультатыПрошлыхЛет = РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора, Истина)
	КонецЕсли;
	ПервыйМесяцНалоговогоПериода = Макс(ПервыйМесяцНалоговогоПериода, ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале);
	
	// 2.	Получим ТЗ данные о доходах 
	//	Из регистра накоплений СведенияОДоходахНДФЛ получим записи, соответствующие условиям:
	//	- записи, зарегистрированные между началом года, предшествующего полученному на предыдущем шаге минимальному месяцу налогового периода, и окончанием месяца расчета
	//	- месяц налогового периода у записей между началом года месяца минимального налогового периода и концом месяца максимального налогового периода
	//	- доход облагается у налогового агента
	//	- ставка налогообложения дохода для налоговых резидентов РФ - 13%
	//	- для месяца расчета также пропускаем записи, зарегистрированные при начислении аванса
	//	При этом, в случае если выполняется промежуточный расчет и доход зарегистрирован в месяце расчета не для промежуточного расчета (ДоходМежрасчетногоПериода = Ложь), сумму дохода и сумму вычета будем считать равными 0  
	//	Затем добавим записи текущего набора доходов, применив к ним те же условия (уже на языке 1С), что и в запросе.
	
	НачалоПредшествующегоГода = ДобавитьМесяц(НачалоГода(ПервыйМесяцНалоговогоПериода), -12);;
	НачалоГодаПериодаРасчета = НачалоГода(ПервыйМесяцНалоговогоПериода);
	КонецПериодаРасчета = КонецМесяца(ПоследнийМесяцНалоговогоПериода);
	НачалоГодаРасчета = НачалоГода(МесяцРасчета); 
	
	Запрос.УстановитьПараметр("НачалоПредшествующегоГода", НачалоПредшествующегоГода);
	Запрос.УстановитьПараметр("НачалоГодаПериодаРасчета", НачалоГодаПериодаРасчета);
	Запрос.УстановитьПараметр("НачалоГодаРасчета", НачалоГодаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецПериодаРасчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.Период КАК Период,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|	СведенияОДоходахНДФЛ.КодВычета КАК КодВычета,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор
	|			ТОГДА СведенияОДоходахНДФЛ.Регистратор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)
	|	КОНЕЦ КАК ДокументОснование,
	|	ЕСТЬNULL(СведенияОДоходахНДФЛ.КодВычета.НеПредоставляетсяНерезидентам, ЛОЖЬ) КАК НеПредоставляетсяНерезидентам,
	|	СУММА(ВЫБОР
	|			КОГДА &ОкончательныйРасчетДоходы
	|				ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА &ОкончательныйРасчетДоходы
	|				ТОГДА СведенияОДоходахНДФЛ.СуммаВычета
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА &ОкончательныйРасчетДоходы
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьДляРаспределения,
	|	ВЫБОР
	|		КОГДА &ОкончательныйРасчетДоходы
	|				И (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоГодаРасчета И &КонецМесяцаРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьПериодПриРасчете,
	|	ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор КАК ДоходТекущегоРасчета,
	|	СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса КАК ЗарегистрированоПриНачисленииАванса
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.Регистратор = ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И СведенияОДоходахНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОДоходахНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|	И СведенияОДоходахНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И НЕ СведенияОДоходахНДФЛ.КодДохода.НеОблагаетсяУНалоговогоАгента
	|	И СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса < &УсловиеНаНачисленноеВАванс
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, ГОД),
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.Период,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ,
	|	СведенияОДоходахНДФЛ.КодВычета.НеПредоставляетсяНерезидентам,
	|	СведенияОДоходахНДФЛ.КодВычета,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента,
	|	СведенияОДоходахНДФЛ.КатегорияДохода,
	|	ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор
	|			ТОГДА СведенияОДоходахНДФЛ.Регистратор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)
	|	КОНЕЦ,
	|	СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &ОкончательныйРасчетДоходы
	|					ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &ОкончательныйРасчетДоходы
	|					ТОГДА СведенияОДоходахНДФЛ.СуммаВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеНаНачисленноеВАванс", ?(ЭтоРасчетПоДоходамТекущегоМесяца, "НачалоМесяцаРасчета", "КонецМесяцаРасчета"));
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ОкончательныйРасчетДоходы", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ОкончательныйРасчетДоходы", 
		"(СведенияОДоходахНДФЛ.Период < &НачалоМесяцаРасчета
		|					ИЛИ СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
		|						И (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");
	КонецЕсли;
	ДанныеУчетаДоходов = Запрос.Выполнить().Выгрузить();
	
	МесяцыНачисленияЗарплаты = Новый Соответствие; 
	Если ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
		// Определим месяцы, за которые начисляется з/пл в текущем расчете - по полю период.
		Если ЭтоРасчетПоДоходамТекущегоМесяца Тогда
			МесяцыНачисленияЗарплаты.Вставить(МесяцРасчета, Истина);
		КонецЕсли;
		ДоходыТекущегоРегистратора.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, Подразделение, Период, СтавкаНалогообложения, ДоходМежрасчетногоПериода, ИсточникДоходаЗаПределамиРФ, КодВычета, КодДохода, КатегорияДохода, Сторно, ЗарегистрированоПриНачисленииАванса", "СуммаДохода, СуммаВычета");
		СтавкаРезидента13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		Для Каждого ТекущаяСтрока Из ДоходыТекущегоРегистратора Цикл
			Если ЗначениеЗаполнено(ТекущаяСтрока.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] = Истина
				И ТекущаяСтрока.КодДохода.СтавкаНалогообложенияРезидента = СтавкаРезидента13
				И ТекущаяСтрока.КодДохода.НеОблагаетсяУНалоговогоАгента <> Истина 
				И ТекущаяСтрока.МесяцНалоговогоПериода >= ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
			
				НоваяСтрока = ДанныеУчетаДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.ДокументОснование = ИсключаемыйРегистратор;
				НоваяСтрока.НеПредоставляетсяНерезидентам = ТекущаяСтрока.КодВычета.НеПредоставляетсяНерезидентам;
				НоваяСтрока.СтавкаНалогообложенияРезидента = СтавкаРезидента13;
				НоваяСтрока.НалоговыйПериод = НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода);
				НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(НоваяСтрока.МесяцНалоговогоПериода);
				НоваяСтрока.УчитыватьПериодПриРасчете = НоваяСтрока.Период >= НачалоГодаРасчета И НоваяСтрока.Период <= КонецМесяцаРасчета;	
				НоваяСтрока.ДоходТекущегоРасчета = Не ТекущаяСтрока.Сторно;	
				НоваяСтрока.ИспользоватьДляРаспределения = Истина;
				МесяцыНачисленияЗарплаты.Вставить(НачалоМесяца(ТекущаяСтрока.Период), Истина);
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;	
	НеучтенныеРанееОснования = ДанныеУчетаДоходов.Скопировать(Новый Структура("ДоходТекущегоРасчета", Истина), "ФизическоеЛицо, ДокументОснование");
	НеучтенныеРанееОснования.Свернуть("ФизическоеЛицо, ДокументОснование");
	НеучтенныеРанееОснования.Индексы.Добавить("ФизическоеЛицо");
	ДанныеУчетаДоходов.Сортировать("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода", Новый СравнениеЗначений);
	МесяцыНачисленияЗарплатыВЗапрос = Новый Массив;
	Для каждого Элемент Из МесяцыНачисленияЗарплаты Цикл
		МесяцыНачисленияЗарплатыВЗапрос.Добавить(Элемент.Ключ)
	КонецЦикла;
	Запрос.УстановитьПараметр("МесяцыНачисленияЗарплаты", МесяцыНачисленияЗарплатыВЗапрос);
	
	// 3.	Определим минимальные и максимальные месяцы налогового периода по физическим лицам. Результат работы метода - таблица значений (ПериодыРасчетаПоФизическимЛицам)
	ПериодыРасчетаПоФизическимЛицам = Новый ТаблицаЗначений;
	ПериодыРасчетаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПериодыРасчетаПоФизическимЛицам.Колонки.Добавить("НачалоГодаНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	ПериодыРасчетаПоФизическимЛицам.Колонки.Добавить("ПоследнийМесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	Если ЭтоРасчетПоДоходамТекущегоМесяца Тогда
		//	Среди записей о доходах, полученных на предыдущем шаге, отбираем строки к осмотру по условиям (ранее рассчитано в поле УчитыватьПериодПриРасчете):  
		//	- запись зарегистрирована между началом года месяца расчета и концом месяца расчета
		//	- если выполняется промежуточный расчет, доход зарегистрирован раньше месяца расчета, а в месяце расчета только промежуточного расчета (ДоходМежрасчетногоПериода = Истина)
		//	Минимальная дата (НачалоГодаНалоговогоПериода): если запись зарегистрирована в месяце расчета, возьмем начало года месяца налогового периода этой записи, 
		//		если зарегистрирована в предыдущих месяцах, возьмем начало года от месяца расчета.
		//	Максимальная дата (ПоследнийМесяцНалоговогоПериода): максимальный месяц налогового периода 
		
		// Дополнительно избавимся от "лишних" строк доходов, зарегистрированных начислениями авансов. 
		
		СтрокиКУдалению = Новый Соответствие;
		ТекущееФизическоеЛицо = Неопределено;
		Для Каждого СтрокаТаблицыДоходов Из ДанныеУчетаДоходов Цикл
			Если МесяцыНачисленияЗарплаты[СтрокаТаблицыДоходов.ЗарегистрированоПриНачисленииАванса] <> Неопределено Тогда
				СтрокиКУдалению.Вставить(СтрокаТаблицыДоходов);
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицыДоходов.ФизическоеЛицо <> ТекущееФизическоеЛицо Тогда  
				СтрокаПериодовПоФизическомуЛицу = ПериодыРасчетаПоФизическимЛицам.Добавить();
				СтрокаПериодовПоФизическомуЛицу.ФизическоеЛицо = СтрокаТаблицыДоходов.ФизическоеЛицо;
				СтрокаПериодовПоФизическомуЛицу.НачалоГодаНалоговогоПериода = МаксимальнаяДата;
				
				ТекущееФизическоеЛицо = СтрокаПериодовПоФизическомуЛицу.ФизическоеЛицо; 
			КонецЕсли;
			Если СтрокаТаблицыДоходов.УчитыватьПериодПриРасчете Тогда
				СтрокаПериодовПоФизическомуЛицу.НачалоГодаНалоговогоПериода = Мин(?(НачалоМесяца(СтрокаТаблицыДоходов.Период) = НачалоМесяцаРасчета, СтрокаТаблицыДоходов.НалоговыйПериод, НачалоГодаРасчета), СтрокаПериодовПоФизическомуЛицу.НачалоГодаНалоговогоПериода);
				СтрокаПериодовПоФизическомуЛицу.ПоследнийМесяцНалоговогоПериода = Макс(СтрокаТаблицыДоходов.МесяцНалоговогоПериода, СтрокаПериодовПоФизическомуЛицу.ПоследнийМесяцНалоговогоПериода);
			КонецЕсли;	
		КонецЦикла;	
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ДанныеУчетаДоходов.Удалить(УдаляемаяСтрока.Ключ);		
		КонецЦикла;	
	Иначе
		// В случае если расчет выполняется не по доходам текущего месяца, в качестве НачалоГодаНалоговогоПериода будем
		// использовать начала года первого месяца периода, переданного на вход алгоритма расчета, в качестве
		// ПоследнийМесяцНалоговогоПериода - первый день месяца окончания периода, переданного на вход алгоритма расчета
		НачалоПоследнегоМесяцаНалоговогоПериода = НачалоМесяца(ПоследнийМесяцНалоговогоПериода);
		Для Каждого ТекущееФизическоеЛицо Из СписокФизическихЛиц Цикл
			СтрокаТаблицыПериодов = ПериодыРасчетаПоФизическимЛицам.Добавить();
			СтрокаТаблицыПериодов.ФизическоеЛицо = ТекущееФизическоеЛицо;
			СтрокаТаблицыПериодов.НачалоГодаНалоговогоПериода = НачалоГодаПериодаРасчета;
			СтрокаТаблицыПериодов.ПоследнийМесяцНалоговогоПериода = НачалоПоследнегоМесяцаНалоговогоПериода;
		КонецЦикла;	
	КонецЕсли;	
	ПериодыРасчетаПоФизическимЛицам.Индексы.Добавить("ФизическоеЛицо");

	// 4.	Получим данные о статусе налогоплательщиков физических лиц (ТЗ СтатусыФизическихЛиц) из регистра сведений СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.
	//	Вход: список физических лиц,  ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода
	//	Выход: таблица значений с полями ФизическоеЛицо, ДатаНачала, ДатаОкончания, Статус, РезидентРФНаКонецМесяца, ПрименяетсяСтавкаПункта1Статьи224НК, РезидентРФНаКонецГода, СтатусНаКонецГода
	//			таблица индексирована по колонке ФизическоеЛицо 
	//	Описание алгоритма: 
	//		Читаем записи регистра СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный с отбором по списку физических лиц, действующие на начало года минимального месяца расчета, а также зарегистрированные между началом года минимального месяца расчета и концом максимального месяца расчета
	//		Применим отбор по списку физических лиц 
	СтатусыФизическихЛиц = СтатусыФизическихЛиц(СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода);	

	// 5.	Для каждой строки полученных ранее данных учета доходов определим 
	//	- Ставку налогообложения (СтавкаЧислом)
	//	- Рассчитывать ли доход нарастающим итогом (ИсчислятьНалогНарастающимИтогом)
	//	- Сумму дохода за минусом вычета (ДоходыБезВычетов)
	//	- Сумму, используемую как коэффициент при распределении результатов расчета по подразделениям и категориям доходов (БазаРаспределения)
	//		... равна сумме дохода без вычета, для всех строк, если выполняется окончательный расчет, или для строк доходов, зарегистрированных для промежуточного расчета, и для всех строк, зарегистрированных раньше месяца расчета.
	ДополнитьДанныеУчетаСтавками(ДанныеУчетаДоходов, "УчитыватьИзмененияСтатусаДляРасчета", , СтатусыФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода);		
	ДанныеУчетаДоходов.Колонки.Добавить("ДоходыБезВычетов", Новый ОписаниеТипов("Число"));
	ДанныеУчетаДоходов.Колонки.Добавить("БазаРаспределения", Новый ОписаниеТипов("Число"));
	СтрокиКУдалению = Новый Соответствие;
	Для Каждого СтрокаТаблицыДоходов Из ДанныеУчетаДоходов Цикл
		Если СтрокаТаблицыДоходов.РезидентРФвНалоговомПериоде Или Не СтрокаТаблицыДоходов.ИсточникДоходаЗаПределамиРФ Тогда
			Если СтрокаТаблицыДоходов.ИсточникДоходаЗаПределамиРФ Тогда
				УчитыватьВычет = СтрокаТаблицыДоходов.УчитыватьВычетыКДоходамОтИсточникаВнеРФ;
			Иначе 
				УчитыватьВычет = СтрокаТаблицыДоходов.УчитыватьВсеВычетыКДоходамОтИсточникаРФ Или Не СтрокаТаблицыДоходов.НеПредоставляетсяНерезидентам 
			КонецЕсли;
			СтрокаТаблицыДоходов.ДоходыБезВычетов = СтрокаТаблицыДоходов.СуммаДохода - ?(УчитыватьВычет, СтрокаТаблицыДоходов.СуммаВычета, 0);
			Если СтрокаТаблицыДоходов.ИспользоватьДляРаспределения Тогда
				СтрокаТаблицыДоходов.БазаРаспределения = СтрокаТаблицыДоходов.ДоходыБезВычетов;
			КонецЕсли;				
		Иначе
			СтрокиКУдалению.Вставить(СтрокаТаблицыДоходов)
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ДанныеУчетаДоходов.Удалить(УдаляемаяСтрока.Ключ);		
	КонецЦикла;	
	ДанныеУчетаДоходов.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КодДохода, Подразделение, СтавкаЧислом, ИсчислятьНалогНарастающимИтогом, Период, ДоходМежрасчетногоПериода, КатегорияДохода, ДоходТекущегоРасчета", "ДоходыБезВычетов, СуммаДохода, БазаРаспределения");
 	ДанныеУчетаДоходов.Колонки.СуммаДохода.Имя = "ВсеДоходы";
	
	// 6.	Поделим доходы на две части: для расчета налога нарастающим итогом и по каждой сумме дохода отдельно (абзацы первый и второй пункта 3 статьи 226 НК РФ)

	//	Для выделения доходов с расчетом налога по каждой сумме дохода отдельно из таблицы значений с данными учета доходов (где ранее рассчитана ставка налогообложения и признак расчета налога нарастающим итогом) 
	//	скопируем все строки с ИсчислятьНалогНарастающимИтогом = Ложь
	ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно = ДанныеУчетаДоходов.Скопировать(Новый Структура("ИсчислятьНалогНарастающимИтогом", Ложь));	
	//	Под "каждой суммой", для которой будем исчислять налог, понимаем сумму доходов физ.лица в одну дату получения дохода, по одному коду дохода, подразделению, категории, начисленную по отдельному основанию.
	ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, Подразделение, КатегорияДохода, СтавкаЧислом, ДоходТекущегоРасчета, ДоходМежрасчетногоПериода", "ДоходыБезВычетов");

	// В основной таблице оставим только доходы, по которым налог исчисляется нарастающим итогом.
	СоответствиеНерезидентов = Новый Соответствие;
	Если ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Количество() > 0 Тогда
		ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Индексы.Добавить(ПоляПоиска);
		ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Индексы.Добавить("ФизическоеЛицо, ДоходТекущегоРасчета, ДоходМежрасчетногоПериода");
		СоответствиеНерезидентов = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.ВыгрузитьКолонку("ФизическоеЛицо"));
		ДанныеУчетаДоходов = ДанныеУчетаДоходов.Скопировать(Новый Структура("ИсчислятьНалогНарастающимИтогом", Истина))
	КонецЕсли;
	
	РассчитыватьНалогНарастающимИтогом = ДанныеУчетаДоходов.Количество() > 0;
	
	// данные о праве на вычеты будем читать только при наличии резидентов
	Если РассчитыватьНалогНарастающимИтогом Тогда 
		
		// 7.	Получим таблицу с данными для распределения результатов расчета по подразделениям и категориям
		//	Из таблицы значений с данными учета доходов с дополнительно рассчитанной на предыдущем шаге колонкой БазаРаспределения
		//	копированием получаем новую таблицу значений, данные которой сгруппированы по полям 
		//	ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КатегорияДохода, Подразделение, ДоходМежрасчетногоПериода, ДоходТекущегоРасчета
		ДоходыПоПодразделениямИКатегориям = ДанныеУчетаДоходов.Скопировать(, "ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КатегорияДохода, Подразделение, ДоходМежрасчетногоПериода, ДоходТекущегоРасчета, ДоходыБезВычетов, БазаРаспределения");
		ДоходыПоПодразделениямИКатегориям.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КатегорияДохода, Подразделение, ДоходМежрасчетногоПериода, ДоходТекущегоРасчета", "ДоходыБезВычетов, БазаРаспределения");
		ДоходыПоПодразделениямИКатегориям.Колонки.ДоходыБезВычетов.Имя = "СуммаДоходаТекущегоРасчета"; 
		ДоходыПоПодразделениямИКатегориям.Колонки.БазаРаспределения.Имя = "СуммаДохода"; 
		ДоходыПоПодразделениямИКатегориям.Индексы.Добавить("ФизическоеЛицо");
		
		// 8.	Дополним таблицу значений с данными учета доходов итогами по месяцам и датам получения дохода, в том числе нарастающим итогом с начала года. 
		//		В результате в таблице должно получиться как минимум по одной строке на каждый месяц, по которому выполняется расчет по физическому лицу. 
		//	В таблице данных учета оставляем колонки ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода, ДоходыБезВычетов, ВсеДоходы, БазаРаспределения
		//	и добавляем:
		//	- ОблагаемыйДоход - облагаемый доход нарастающим итогом с начала месяца этой даты по дату получения дохода из строки таблицы, причем строка с ДоходМежрасчетногоПериода = Истина предшествует строке "окончательного расчета" той же даты и не включает доход "окончательного расчета".
		//	- ОблагаемыйДоходНарастающимИтогом - облагаемый доход на конец месяца нарастающим итогом с начала года, заполняется только для первой строки за месяц.
		//	- ОблагаемыйДоходЗаМесяц - облагаемый доход месяца (доход - вычеты к доходам), заполняется только для первой строки за месяц.
		//	- ВсеДоходыЗаМесяц - сумма доходов месяца (без учета вычетов), служит флажком наличия доходов, заполняется только для первой строки за месяц.
		//	- СтаршийМесяцПолученияДохода - наибольший месяц налогового периода, за который имеется положительный доход (без учета вычетов), служит ограничением для расчета вычетов, заполняется только для первой строки за месяц.
		//	Для последующего удобства обхода таблицы добавляем признаки первой и последней строки по физическому лицу, налоговому периоду, месяцу налогового периода и дате получения дохода.
		ДанныеУчетаДоходов.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода", "ДоходыБезВычетов, ВсеДоходы");	
		ДанныеУчетаДоходов.Сортировать("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода УБЫВ", Новый СравнениеЗначений);
		
		ДанныеУчетаДоходов.Колонки.Добавить("ОблагаемыйДоход", Новый ОписаниеТипов("Число")); 
		ДанныеУчетаДоходов.Колонки.Добавить("ОблагаемыйДоходНарастающимИтогом", Новый ОписаниеТипов("Число"));
		ДанныеУчетаДоходов.Колонки.Добавить("ОблагаемыйДоходЗаМесяц", Новый ОписаниеТипов("Число"));
		ДанныеУчетаДоходов.Колонки.Добавить("ВсеДоходыЗаМесяц", Новый ОписаниеТипов("Число"));
		ДанныеУчетаДоходов.Колонки.Добавить("СтаршийМесяцПолученияДохода", Новый ОписаниеТипов("Дата"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаЗаДату", Новый ОписаниеТипов("Булево"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаЗаМесяц", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаЗаГод", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаПоФизическомуЛицу", Новый ОписаниеТипов("Булево"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаЗаДату", Новый ОписаниеТипов("Булево"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаЗаМесяц", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаЗаГод", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаПоФизическомуЛицу", Новый ОписаниеТипов("Булево"));
		
		//	Описание алгоритма:
		//	В результирующей таблице (для экономии памяти, модифицируем входную таблицу с доходами) будут строки на каждую дату получения дохода, причем если на дату зарегистрирован 
		//	доход для промежуточного и для окончательно расчета, на дату будет две строки с разными значениями ДоходМежрасчетногоПериода. 
		//	Если облагаемый доход нарастающим итогом с начала месяца по дату получения дохода равен 0 и эта строка не является последней за месяц, то не будем оставлять ее в таблице.
		//	Если за месяц, входящий в период расчета по физическому лицу, вообще не было зарегистрировано доходов, то добавим строку с датой получения дохода, равной концу месяца.
		//	При расчете поля ОблагаемыйДоход (доход нарастающим итогом с начала месяца этой даты по дату получения дохода):
		//		если в строке отражен доход межрасчетного периода (ДоходМежрасчетногоПериода = Истина), возьмем все доходы за предыдущие даты месяца и доход текущей строки
		//		если в строке отражен доход окончательного расчета (ДоходМежрасчетногоПериода = Ложь), возьмем все доходы за предыдущие даты месяца и все доходы за текущую дату
		//	Алгоритм реализуется оптимальным образом за счет сортировки предварительно свернутой таблицы с данными учета доходов  по полям ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода (по убыванию)  
		СтрокиКУдалению = Новый Соответствие;
		ИндексОбрабатываемойСтроки = 0;
		Пока ИндексОбрабатываемойСтроки <= ДанныеУчетаДоходов.Количество() - 1 Цикл
			
			СтрокиПоФизическомуЛицу = Новый Массив;
			ПервыеСтрокиМесяцев = Новый Массив;
			ТекущаяСтрока = ДанныеУчетаДоходов[ИндексОбрабатываемойСтроки];
			ТекущееФизическоеЛицо = ТекущаяСтрока.ФизическоеЛицо;
			
			МесяцНачала = '00010101';
			МесяцОкончания = '00010101';
			СтрокиТаблицыПериодов = ПериодыРасчетаПоФизическимЛицам.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекущееФизическоеЛицо));
			Если СтрокиТаблицыПериодов.Количество() > 0 Тогда
				МесяцНачала = СтрокиТаблицыПериодов[0].НачалоГодаНалоговогоПериода;
				МесяцОкончания = СтрокиТаблицыПериодов[0].ПоследнийМесяцНалоговогоПериода;
			КонецЕсли;
			
			ПоследнийОбработанныйМесяц = ТекущаяСтрока.МесяцНалоговогоПериода;
			ПоследнийМесяцДополнения = Мин(НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода), МесяцОкончания);
			ДополнитьСтрокамиМесяцевБезДоходов(ДанныеУчетаДоходов, СтрокиПоФизическомуЛицу, ПервыеСтрокиМесяцев, ТекущееФизическоеЛицо, МесяцНачала, ПоследнийМесяцДополнения, ИндексОбрабатываемойСтроки);	
			
			ПредыдущаяСтрока = Неопределено;
			ПредыдущийНалоговыйПериод = Неопределено;
			Пока ИндексОбрабатываемойСтроки <= ДанныеУчетаДоходов.Количество() - 1 И ДанныеУчетаДоходов[ИндексОбрабатываемойСтроки].ФизическоеЛицо = ТекущееФизическоеЛицо Цикл
				
				ТекущаяСтрока = ДанныеУчетаДоходов[ИндексОбрабатываемойСтроки];
				ТекущийМесяцНалоговогоПериода = ТекущаяСтрока.МесяцНалоговогоПериода;
				
				Если Не (ТекущийМесяцНалоговогоПериода >= МесяцНачала И ТекущийМесяцНалоговогоПериода <= МесяцОкончания) Тогда
					ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
					СтрокиКУдалению.Вставить(ТекущаяСтрока);
					Продолжить;
				КонецЕсли;	
				
				УдалятьТекущуюСтроку = Ложь;
				ТекущийНалоговыйПериод = НачалоГода(ТекущийМесяцНалоговогоПериода);
				
				Если ТекущийНалоговыйПериод <> ПредыдущийНалоговыйПериод Или ПредыдущаяСтрока = Неопределено Тогда	
					
					Если ПредыдущаяСтрока <> Неопределено Тогда
						ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаГод = Истина;
						ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаМесяц = Истина;
						ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаДату = Истина;
						РассчитатьСтаршийМесяцПолученияДохода(ПервыеСтрокиМесяцев);
					КонецЕсли;	
					
					ПоследнийМесяцДополнения = Мин(ТекущийМесяцНалоговогоПериода, МесяцОкончания);
					ДополнитьСтрокамиМесяцевБезДоходов(ДанныеУчетаДоходов, СтрокиПоФизическомуЛицу, ПервыеСтрокиМесяцев, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод, ПоследнийМесяцДополнения, ИндексОбрабатываемойСтроки);			
					
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаГод = Месяц(ТекущийМесяцНалоговогоПериода) = 1;
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаМесяц = Истина;
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаДату = Истина;
					
					ОблагаемыйДоход = 0;
					ОблагаемыйДоходНарастающимИтогомЗаГод = 0;
					ПерваяСтрокаЗаМесяц = ТекущаяСтрока;
					ПервыеСтрокиМесяцев.Добавить(ПерваяСтрокаЗаМесяц);
					ПредыдущийНалоговыйПериод = ТекущийНалоговыйПериод;
					
				ИначеЕсли ТекущийМесяцНалоговогоПериода <> ПредыдущаяСтрока.МесяцНалоговогоПериода Тогда 			
					
					ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаМесяц = Истина;
					ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаДату = Истина;
					
					ПоследнийМесяцДополнения = Мин(ТекущийМесяцНалоговогоПериода, МесяцОкончания);
					ДополнитьСтрокамиМесяцевБезДоходов(ДанныеУчетаДоходов, СтрокиПоФизическомуЛицу, ПервыеСтрокиМесяцев, ТекущееФизическоеЛицо, ДобавитьМесяц(ПредыдущаяСтрока.МесяцНалоговогоПериода, 1), ТекущийМесяцНалоговогоПериода, ИндексОбрабатываемойСтроки, ОблагаемыйДоходНарастающимИтогомЗаГод);
					
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаМесяц = Истина;
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаДату = Истина;
					
					ОблагаемыйДоход = 0;		
					ПерваяСтрокаЗаМесяц = ТекущаяСтрока;
					ПервыеСтрокиМесяцев.Добавить(ПерваяСтрокаЗаМесяц);
					
				ИначеЕсли ТекущаяСтрока.ДатаПолученияДохода <> ПредыдущаяСтрока.ДатаПолученияДохода Тогда
					ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаДату = Истина;
					// Если на предыдущую дату доход нарастающим итогом с начала месяца равен 0, то соответствующая строка не нужна: в
					// месяце есть еще строки
					Если ПредыдущаяСтрока.ОблагаемыйДоход = 0 Тогда
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПредыдущаяСтрока, "ЭтоПерваяСтрокаПоФизическомуЛицу, ЭтоПерваяСтрокаЗаГод, ЭтоПерваяСтрокаЗаМесяц, ОблагаемыйДоходЗаМесяц, ВсеДоходыЗаМесяц");								
						СтрокиКУдалению.Вставить(ПредыдущаяСтрока);	
						СтрокиПоФизическомуЛицу.Удалить(СтрокиПоФизическомуЛицу.Количество() - 1);
						Если ПредыдущаяСтрока.ЭтоПерваяСтрокаЗаМесяц Тогда
							ПерваяСтрокаЗаМесяц = ТекущаяСтрока;
							ПервыеСтрокиМесяцев.Добавить(ПерваяСтрокаЗаМесяц);
						КонецЕсли;	
					КонецЕсли;		
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаДату = Истина;
				ИначеЕсли ОблагаемыйДоход + ТекущаяСтрока.ДоходыБезВычетов = 0 Тогда 
					УдалятьТекущуюСтроку = Истина;
				КонецЕсли;	
				
				ОблагаемыйДоход = ОблагаемыйДоход + ТекущаяСтрока.ДоходыБезВычетов;
				ОблагаемыйДоходНарастающимИтогомЗаГод = ОблагаемыйДоходНарастающимИтогомЗаГод + ТекущаяСтрока.ДоходыБезВычетов;
				ТекущаяСтрока.ОблагаемыйДоход = ОблагаемыйДоход;	
				ПерваяСтрокаЗаМесяц.ОблагаемыйДоходЗаМесяц = ПерваяСтрокаЗаМесяц.ОблагаемыйДоходЗаМесяц + ТекущаяСтрока.ДоходыБезВычетов;
				ПерваяСтрокаЗаМесяц.ВсеДоходыЗаМесяц = ПерваяСтрокаЗаМесяц.ВсеДоходыЗаМесяц + ТекущаяСтрока.ВсеДоходы;
				ПерваяСтрокаЗаМесяц.ОблагаемыйДоходНарастающимИтогом = ОблагаемыйДоходНарастающимИтогомЗаГод;
				
				ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
				
				Если УдалятьТекущуюСтроку Тогда
					СтрокиКУдалению.Вставить(ТекущаяСтрока);
				Иначе	
					ПредыдущаяСтрока = ТекущаяСтрока;
					СтрокиПоФизическомуЛицу.Добавить(ТекущаяСтрока);
				КонецЕсли;	
			КонецЦикла;	// по физ.лицу                        
			
			Если СтрокиПоФизическомуЛицу.Количество() > 0 Тогда
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаПоФизическомуЛицу = Истина;	
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаЗаГод = Истина;
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаЗаМесяц = Истина;
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаЗаДату = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаПоФизическомуЛицу = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаЗаГод = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаЗаМесяц = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаЗаДату = Истина;
				РассчитатьСтаршийМесяцПолученияДохода(ПервыеСтрокиМесяцев);
			КонецЕсли;	
			
		КонецЦикла;		
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ДанныеУчетаДоходов.Удалить(УдаляемаяСтрока.Ключ);		
		КонецЦикла;	
		
		// 9.	Получим доходы с предыдущего места работы
		//	Читаем регистр ДоходыПредыдущегоМестаРаботыНДФЛ с отбором по списку физических лиц, головной организации для всех месяцев периода расчета.
		//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, МесяцНалоговогоПериода, Размер
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо,
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.МесяцНалоговогоПериода,
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.Размер
		|ИЗ
		|	РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ КАК ДоходыПредыдущегоМестаРаботыНДФЛ
		|ГДЕ
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо В (&СписокФизическихЛиц)
		|	И ДоходыПредыдущегоМестаРаботыНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ДоходыПредыдущегоМестаРаботыНДФЛ.МесяцНалоговогоПериода
		|		МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета";
		ДоходыСПредыдущегоМестаРаботы = Запрос.Выполнить().Выгрузить();
		ДоходыСПредыдущегоМестаРаботы.Индексы.Добавить(ПоляПоиска);
		
		// Признак из учетной политики, определяющий порядок накопления сумм стандартных вычетов. 
		ПрименятьСтандартныеВычетыНарастающимИтогом = Истина;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ОсобенностиИсчисленияНДФЛ КАК ОсобенностиИсчисленияНДФЛ
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|ГДЕ
		|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПрименятьСтандартныеВычетыНарастающимИтогом = Выборка.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
		КонецЕсли;
		
		// 10.	Информация о правах на стандартные вычеты
		//	Читаем из регистра СтандартныеВычетыПоНДФЛВторичный записи с отбором по списку физических лиц, действующие (определяем по ДатаНачала) на начало года первого месяца 
		//	налогового периода расчета или зарегистрированные между началом года первого месяца налогового периода расчета и последним месяцем налогового периода расчета.
		//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, ДатаНачала, ДатаОкончания, ПериодРегистрацииНачало, ПериодРегистрацииОкончание, КодВычета, ЛичныйВычет, Количество.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыНаДетей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыНаДетей.ДатаНачала КАК ДатаНачала,
		|	ВычетыНаДетей.ДатаОкончания КАК ДатаОкончания,
		|	ВычетыНаДетей.ПериодРегистрацииНачало КАК ПериодРегистрацииНачало,
		|	ВычетыНаДетей.ПериодРегистрацииОкончание КАК ПериодРегистрацииОкончание,
		|	ВычетыНаДетей.КодВычета КАК КодВычета,
		|	ВычетыНаДетей.ЛичныйВычет КАК ЛичныйВычет,
		|	ВычетыНаДетей.Количество КАК Количество
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыПоНДФЛВторичный КАК ВычетыНаДетей
		|ГДЕ
		|	ВычетыНаДетей.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И (&НачалоГодаПериодаРасчета МЕЖДУ ВычетыНаДетей.ДатаНачала И ВычетыНаДетей.ДатаОкончания
		|			ИЛИ ВычетыНаДетей.ДатаНачала МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета)
		|	И (НЕ ВычетыНаДетей.ЛичныйВычет
		|			ИЛИ ВычетыНаДетей.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка))";
		ВычетыНаДетейИЛичные = Запрос.Выполнить().Выгрузить();
		ВычетыНаДетейИЛичные.Индексы.Добавить("ФизическоеЛицо"); 
		
		// 11.	Получим информацию о применении вычетов по физическим лицам в организации, для которой ведется расчет налога.
		//	Читаем записи регистра ПрименениеСтандартныхВычетовПоНДФЛВторичный по списку физических лиц и головной организации, действующие (определяем по ДатаНачала) на начало года первого месяца 
		//	налогового периода расчета или зарегистрированные между началом года первого месяца налогового периода расчета и последним месяцем налогового периода расчета.
		//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, ДатаНачала, ДатаОкончания, ПрименятьВычеты
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаНачала КАК ДатаНачала,
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаОкончания КАК ДатаОкончания,
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ПрименятьВычеты КАК ПрименятьВычеты
		|ИЗ
		|	РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный КАК ПрименениеСтандартныхВычетовПоНДФЛВторичный
		|ГДЕ
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И ПрименениеСтандартныхВычетовПоНДФЛВторичный.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И (&НачалоГодаПериодаРасчета МЕЖДУ ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаНачала И ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаОкончания
		|			ИЛИ ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаНачала МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета)";
		ПрименениеСтандартныхВычетов = Запрос.Выполнить().Выгрузить();
		ПрименениеСтандартныхВычетов.Индексы.Добавить("ФизическоеЛицо");
		
		// Прочитаем размеры вычетов за каждый год периода расчета.
		// В качестве результата получаем соответствие, в котором по годам лежат соответствия, в которых каждому вычету
		// сопоставлена структура с полями Размер и ОграничениеПоДоходам.
		РазмерыВычетов = УчетНДФЛПовтИсп.РазмерыВычетов(НачалоГода(ПервыйМесяцНалоговогоПериода), НачалоГода(ПоследнийМесяцНалоговогоПериода));
		
	КонецЕсли;
	
	// 12.	Получим данные об имущественных вычетах (как ранее предоставленные, так и о праве на вычет)
	//	Читаем записи регистра накопления ИмущественныеВычетыНДФЛ по списку физических лиц и головной организации, зарегистрированные за весь период расчетов.
	//	Для записей прихода (права на вычеты) период дополнительно ограничиваем сверху окончанием месяца расчета (весь период расчетов может заканчиваться позже), а также учитываем только те записи, у которых год поля период совпадает со значением измерения Год.
	//	Для записей расхода (использованные вычеты) дополнительно проверяем условие на "межрасчетность" записей при выполнении промежуточного расчета.
	//	Полученный результат дополняем данными текущего регистратора о праве на вычеты и группируем.
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, МесяцНалоговогоПериода, КодВычета, ВидДвижения, Подразделение, Сумма.
	КонецПериодаИмущественныхВычетов = Макс(КонецПериодаРасчета, КонецМесяцаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаИмущественныхВычетов", КонецПериодаИмущественныхВычетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычеты.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИмущественныеВычеты.КодВычета КАК КодВычета,
	|	ИмущественныеВычеты.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИмущественныеВычеты.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	СУММА(ИмущественныеВычеты.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычеты
	|ГДЕ
	|	ИмущественныеВычеты.Регистратор <> &ИсключаемыйРегистратор
	|	И ИмущественныеВычеты.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаИмущественныхВычетов
	|	И ИмущественныеВычеты.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ИмущественныеВычеты.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И НЕ ИмущественныеВычеты.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И ВЫБОР
	|			КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ИмущественныеВычеты.Год = ГОД(ИмущественныеВычеты.Период)
	|						И ИмущественныеВычеты.Период <= &КонецМесяцаРасчета
	|			ИНАЧЕ ИмущественныеВычеты.Период <= &КонецПериодаРасчета
	|					И &ОкончательныйРасчетВычеты
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИмущественныеВычеты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычеты.Период, МЕСЯЦ),
	|	ИмущественныеВычеты.КодВычета,
	|	ИмущественныеВычеты.ВидДвижения,
	|	ВЫБОР
	|		КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИмущественныеВычеты.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ";	
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", 
		"(Период < &НачалоМесяцаРасчета
		|			ИЛИ ВычетМежрасчетногоПериода
		|				И (Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");
	КонецЕсли;
	
	ИмущественныеВычеты = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "ИмущественныеВычетыНДФЛ") Тогда
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого СтрокаВычетовТекущегоРегистратора Из ДвиженияТекущегоРегистратора.ИмущественныеВычетыНДФЛ Цикл
			Если СоответствиеФизическихЛиц[СтрокаВычетовТекущегоРегистратора.ФизическоеЛицо] <> Истина Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаВычетовТекущегоРегистратора.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ИмущественныеВычеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВычетовТекущегоРегистратора);
			НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(СтрокаВычетовТекущегоРегистратора.Период);
			НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ЕстьНовыеЗаписи = Истина;
			
		КонецЦикла;	
		Если ЕстьНовыеЗаписи Тогда // Новые права и сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ИмущественныеВычеты.Свернуть("ФизическоеЛицо, Подразделение, МесяцНалоговогоПериода, ВидДвижения, КодВычета", "Сумма");
		КонецЕсли;
	КонецЕсли;	
	ИмущественныеВычеты.Индексы.Добавить("ФизическоеЛицо, МесяцНалоговогоПериода, ВидДвижения");
	
	// 13.	Получим информацию о предоставленных стандартных и социальных вычетах.
	//	Читаем записи регистра накопления ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛс по списку физических лиц и головной организации, зарегистрированные за 
	//	период между началом года первого месяца налогового периода и концом последнего месяца налогового периода.
	//	Дополнительно проверяем условие на "межрасчетность" записей при выполнении промежуточного расчета.
	//	Для стандартных вычетов заполняем поля Подразделение и КодВычета (для социальных вычетов берем пустые ссылки). 
	//	Рассчитываем поле ЭтоСоциальныйВычет (булево) исходя из группы вычета.
	//	Полученный результат дополняем данными текущего регистратора о праве на социальные вычеты и группируем.
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, МесяцНалоговогоПериода, КодВычета, ЭтоСоциальныйВычет, Подразделение, Сумма.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыБД.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСоциальныйВычет,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	НАЧАЛОПЕРИОДА(ВычетыБД.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцПериодаПредоставленияВычета,
	|	СУММА(ВычетыБД.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ КАК ВычетыБД
	|ГДЕ
	|	ВычетыБД.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И ВычетыБД.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ВычетыБД.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И (ВЫБОР
	|				КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|					ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|				КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|				ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|			КОНЕЦ МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|			ИЛИ ВычетыБД.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета)
	|	И ВычетыБД.Регистратор <> &ИсключаемыйРегистратор
	|	И НЕ ВычетыБД.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И &ОкончательныйРасчетВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыБД.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.КодВычета
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|		КОНЕЦ, МЕСЯЦ),
	|	ВычетыБД.МесяцНалоговогоПериода";
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", 
		"(Период < &НачалоМесяцаРасчета
		|			ИЛИ ВычетМежрасчетногоПериода
		|				И (Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");		
	КонецЕсли;

	ПредоставленныеСтандартныеИСоциальныеВычеты = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ") Тогда
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого ТекущаяСтрока Из ДвиженияТекущегоРегистратора.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ Цикл
			Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] <> Истина Тогда
				Продолжить;	
			КонецЕсли;			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
				
			НоваяСтрока = ПредоставленныеСтандартныеИСоциальныеВычеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(ТекущаяСтрока.МесяцНалоговогоПериода);
			НоваяСтрока.ЭтоСоциальныйВычет = ТекущаяСтрока.КодВычета.ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.Социальные;	
			Если НоваяСтрока.ЭтоСоциальныйВычет Тогда
				НоваяСтрока.МесяцПериодаПредоставленияВычета = НоваяСтрока.МесяцНалоговогоПериода;
				НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				НоваяСтрока.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
			ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.МесяцПериодаПредоставленияВычета) Тогда	
				НоваяСтрока.МесяцПериодаПредоставленияВычета = НоваяСтрока.МесяцНалоговогоПериода;
			КонецЕсли;
			НоваяСтрока.МесяцПериодаПредоставленияВычета = НачалоМесяца(НоваяСтрока.МесяцПериодаПредоставленияВычета);
			ЕстьНовыеЗаписи = Истина;
				
		КонецЦикла;
		Если ЕстьНовыеЗаписи Тогда // Сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ПредоставленныеСтандартныеИСоциальныеВычеты.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, КодВычета, Подразделение, ЭтоСоциальныйВычет", "Сумма");
		КонецЕсли;			
	КонецЕсли;	
	ПредоставленныеСтандартныеИСоциальныеВычеты.Индексы.Добавить("ФизическоеЛицо, МесяцПериодаПредоставленияВычета, ЭтоСоциальныйВычет");
		
	// 14.	Получим информацию об исчисленном ранее налоге
	//	Читаем приходные записи (соответствуют налогу исчисленному) регистра накопления РасчетыНалогоплательщиковСБюджетомПоНДФЛ по списку физических лиц и головной организации со ставкой резидента 13%, 
	//	зарегистрированные за период между началом года первого месяца налогового периода и концом последнего месяца налогового периода.
	//	Дополнительно проверяем условие на "межрасчетность" записей при выполнении промежуточного расчета.
	//	Рассчитываем поле МесяцНалоговогоПериодаДляПоиска как начало месяца налогового периода.
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо,  МесяцНалоговогоПериодаДляПоиска, МесяцНалоговогоПериода, Подразделение, КатегорияДохода и НалогПоСтавке13, НалогСПревышенияПоСтавке13
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериодаДляПоиска,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК НалогПоСтавке13,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения) КАК НалогСПревышенияПоСтавке13
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И НЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И &ОкончательныйРасчетПоРасчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ),
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода";
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетПоРасчетам", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетПоРасчетам", 
		"(Период < &НачалоМесяцаРасчета
		|			ИЛИ РасчетМежрасчетногоПериода
		|				И (Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");	
	КонецЕсли;
	ИсчисленныйРанееНалог = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "РасчетыНалогоплательщиковСБюджетомПоНДФЛ") Тогда
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого СтрокаНалогаТекущегоРегистратора Из ДвиженияТекущегоРегистратора.РасчетыНалогоплательщиковСБюджетомПоНДФЛ Цикл
			
			Если ЗначениеЗаполнено(СтрокаНалогаТекущегоРегистратора.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			Если СоответствиеФизическихЛиц[СтрокаНалогаТекущегоРегистратора.ФизическоеЛицо] <> Истина 
				Или СтрокаНалогаТекущегоРегистратора.ВидДвижения = ВидДвиженияНакопления.Расход 
				Или СтрокаНалогаТекущегоРегистратора.СтавкаНалогообложенияРезидента <> Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
				Продолжить;	
			КонецЕсли;			
				 
			НоваяСтрока = ИсчисленныйРанееНалог.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалогаТекущегоРегистратора);	
			НоваяСтрока.МесяцНалоговогоПериодаДляПоиска = НачалоМесяца(СтрокаНалогаТекущегоРегистратора.МесяцНалоговогоПериода);
			НоваяСтрока.НалогПоСтавке13 = -СтрокаНалогаТекущегоРегистратора.Сумма;
			НоваяСтрока.НалогСПревышенияПоСтавке13 = -СтрокаНалогаТекущегоРегистратора.СуммаСПревышения;
			ЕстьНовыеЗаписи = Истина;
		КонецЦикла;	
		Если ЕстьНовыеЗаписи Тогда // Сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ИсчисленныйРанееНалог.Свернуть("Подразделение, ФизическоеЛицо, МесяцНалоговогоПериода, МесяцНалоговогоПериодаДляПоиска, КатегорияДохода", "НалогПоСтавке13, НалогСПревышенияПоСтавке13");	
		КонецЕсли;	
	КонецЕсли;	
	ИсчисленныйРанееНалог.Индексы.Добавить("ФизическоеЛицо, МесяцНалоговогоПериодаДляПоиска"); 
	
	// 15.	Получим информацию об остатках авансовых платежей в бюджет
	//	Читаем остатки из регистра АвансовыеПлатежиИностранцевПоНДФЛ по списку физических лиц на конец месяца расчета за годы периода расчета.
	//	Отнимем движения исключаемого регистратора (удовлетворяющих тем же условиям что и данные остатков)
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, НалоговыйПериод (число, год), Остаток
	Запрос.УстановитьПараметр("МинимальныйГод", Год(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("МаксимальныйГод", Год(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("КонецМесяцаРасчета", КонецМесяца(МесяцРасчета) + 1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Авансы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Авансы.НалоговыйПериод КАК НалоговыйПериод,
	|	СУММА(Авансы.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.Год КАК НалоговыйПериод,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.СуммаОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ.Остатки(
	|				&КонецМесяцаРасчета,
	|				ФизическоеЛицо В (&СписокФизическихЛиц)
	|					И (Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод)
	|					И ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК АвансовыеПлатежиИностранцевПоНДФЛОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизическоеЛицо,
	|		ДвиженияРегистратора.Год,
	|		ВЫБОР
	|			КОГДА ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияРегистратора.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Регистратор = &ИсключаемыйРегистратор
	|		И ДвиженияРегистратора.ФизическоеЛицо В(&СписокФизическихЛиц)
	|		И ДвиженияРегистратора.Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод
	|		И ДвиженияРегистратора.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|		И НЕ ДвиженияРегистратора.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыеДвижения.ФизическоеЛицо,
	|		АвансовыеДвижения.Год,
	|		ВЫБОР
	|			КОГДА АвансовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АвансовыеДвижения.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК АвансовыеДвижения
	|	ГДЕ
	|		АвансовыеДвижения.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|		И АвансовыеДвижения.ФизическоеЛицо В(&СписокФизическихЛиц)
	|		И АвансовыеДвижения.Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод
	|		И АвансовыеДвижения.ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК Авансы
	|
	|СГРУППИРОВАТЬ ПО
	|	Авансы.ФизическоеЛицо,
	|	Авансы.НалоговыйПериод";
	ОстаткиПоАвансовымПлатежам = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "АвансовыеПлатежиИностранцевПоНДФЛ") Тогда 
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого СтрокаНабора Из ДвиженияТекущегоРегистратора.АвансовыеПлатежиИностранцевПоНДФЛ Цикл
			Если СоответствиеФизическихЛиц[СтрокаНабора.ФизическоеЛицо] <> Истина Или СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				Продолжить;	
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаНабора.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРезультат = ОстаткиПоАвансовымПлатежам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаНабора);
			СтрокаРезультат.НалоговыйПериод = СтрокаНабора.Год;
			СтрокаРезультат.Остаток = - СтрокаНабора.Сумма;
			ЕстьНовыеЗаписи = Истина;
		КонецЦикла;	
		Если ЕстьНовыеЗаписи Тогда // Сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ОстаткиПоАвансовымПлатежам.Свернуть("ФизическоеЛицо, НалоговыйПериод", "Остаток");
		КонецЕсли;	
	КонецЕсли;	
	ОстаткиПоАвансовымПлатежам.Индексы.Добавить("ФизическоеЛицо, НалоговыйПериод");
	
	РезультатРасчета = ТаблицаНДФЛ();
	
	СтруктураПоискаПоФизическомуЛицу = Новый Структура("ФизическоеЛицо");
	СтруктураПоискаТекущихДоходов = Новый Структура("ДоходТекущегоРасчета, ДоходМежрасчетногоПериода", Истина, Не ОкончательныйРасчет);
	СтруктураПоискаТекущихДоходовНерезидентов = Новый Структура("ФизическоеЛицо, ДоходТекущегоРасчета, ДоходМежрасчетногоПериода", , Истина, Не ОкончательныйРасчет);
	СтруктураПоискаИсчисленного = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериодаДляПоиска");
	СтруктураПоискаСтандартныхВычетов = Новый Структура("ФизическоеЛицо, МесяцПериодаПредоставленияВычета, ЭтоСоциальныйВычет");
	СтруктураПоискаИмущественныхВычетов = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериода, ВидДвижения");
	ОписаниеВычетов = УчетНДФЛПовтИсп.ОписаниеВычетов();
	
	// инициализируем общие вспомогательные объекты
	РезультатРасчетаВспомогательный = РезультатРасчета;
	ВспомогательнаяТаблицаМесяца = РезультатРасчета.СкопироватьКолонки("ФизическоеЛицо, МесяцПериодаПредоставленияВычета, МесяцНалоговогоПериода, Подразделение, КатегорияДохода, НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13, НалогСПревышенияПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13");
	ВспомогательнаяТаблицаМесяца.Колонки.Добавить("КоличествоВычетов", Новый ОписаниеТипов("Число"));
	
	ВспомогательнаяТаблицаВычетовМесяца = Новый ТаблицаЗначений;
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("МесяцПериодаПредоставленияВычета", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Начнем с расчета по резидентам и приравненным к ним.
	Если РассчитыватьНалогНарастающимИтогом Тогда
		
		ВспомогательныеДатыПодразделенияКатегории = Новый ТаблицаЗначений;
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("Распределение", Новый ОписаниеТипов("ТаблицаЗначений"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("ЗаменятьДатуПолученияДохода", Новый ОписаниеТипов("Булево"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("ЗаменятьПодразделение", Новый ОписаниеТипов("Булево"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("ЗаменятьКатегориюДохода", Новый ОписаниеТипов("Булево"));
		
		ВычетыЗаМесяц = Новый ТаблицаЗначений;
		ВычетыЗаМесяц.Колонки.Добавить("КодВычета");
		ВычетыЗаМесяц.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число"));
		
		СтавкаДляРезидента = 0.13; // Пункт 1 статьи 224 НК РФ.
		СтавкаСПревышения = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.СтавкаЧислом;
		ПределПрогрессивнойШкалы = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.Предел;
		
		ОсобыеКатегорииДохода = Новый Соответствие; // Эти категории дохода определяют собственные ставки налога, поэтому их нельзя заменять текущими даже при перерасчете.
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.Дивиденды, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке03, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке06, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке05, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке07, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке10, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке15, Истина);
		
		ПериодСрезаПравНаВычеты = НачалоМесяца(Макс(МесяцРасчета, ПоследнийМесяцНалоговогоПериода));
		ПереноситьДоходДляПримененияВычетовВМесяцРасчета = Не ОкончательныйРасчет И Год(МесяцРасчета) = Год(ДатаУдержанияИсчисленногоНалога) И МесяцРасчета < НачалоМесяца(ДатаУдержанияИсчисленногоНалога);
		
		// Инициализируем вспомогательные объекты.
		СтруктураПоиска = Новый Структура(ПоляПоиска);
		ПоляПоискаПоДатам = "ДатаПолученияДохода, ДоходМежрасчетногоПериода";
		СтруктураПоискаПоДатам = Новый Структура(ПоляПоискаПоДатам);
		СтруктураПоискаТолькоПоДатам = Новый Структура("ДатаПолученияДохода");
		СтруктураПоискаПоДатамИПодразделениям = Новый Структура("ДатаПолученияДохода,Подразделение");
		
		// Структуру описания остатков создаем однократно, в дальнейшем для каждого сочетания ФЛ+Налоговый период очищаем ее коллекции.
		ОстаткиВычетов = НовыйОстаткиВычетов();
		ТекущиеОстаткиВычетов = ОстаткиВычетов.Остатки; 
		
		ПараметрыЗаполненияРесурсаНалогПоСтавке13 = НовыйПараметрыЗаполненияРесурса("НалогПоСтавке13", "СуммаДохода", 0, "Подразделение, КатегорияДохода");
		ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13 = НовыйПараметрыЗаполненияРесурса("НалогСПревышенияПоСтавке13", "СуммаДохода", 0, "Подразделение, КатегорияДохода");
		ПараметрыЗаполненияРесурсаСуммаВычетаПоПодразделению = НовыйПараметрыЗаполненияРесурса("РазмерВычета", "СуммаДохода", , , "КодВычета");
		ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории = НовыйПараметрыЗаполненияРесурса("РазмерВычета", "СуммаДохода", ,"Подразделение, КатегорияДохода", "КодВычета,МесяцПериодаПредоставленияВычета");
		
		// Однократный обход таблицы ДанныеУчетаДоходов организован двумя вложенными циклами; внутренний цикл выполняет расчет
		// налога за один налоговый период по одному физлицу. В качестве промежуточной структуры данных для результатов
		// расчета за месяц используем две таблицы: в одной оставляем только ресурсы НалогПоСтавке13, НалогСПревышенияПоСтавке13,
		// ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13, во второй таблице храним результат расчета вычетов (измерение КодВычета и ресурс РазмерВычета).
		ИндексТекущейСтрокиТаблицыДоходов = 0;
		Пока ИндексТекущейСтрокиТаблицыДоходов <= ДанныеУчетаДоходов.Количество() - 1 Цикл		
			
			// будет инициализирована только в том случае, если она понадобится
			ТаблицаРаспределенияМесяцаРасчета = Неопределено;	
			
			ТекущаяСтрокаТаблицыДоходов = ДанныеУчетаДоходов[ИндексТекущейСтрокиТаблицыДоходов];
			// получим физическое лицо, по которому выполняется расчет
			ТекущееФизическоеЛицо = ТекущаяСтрокаТаблицыДоходов.ФизическоеЛицо;
			
			// получим налоговый период, по которому далее будет выполняться расчет.
			ТекущийНалоговыйПериод = НачалоГода(ТекущаяСтрокаТаблицыДоходов.МесяцНалоговогоПериода);
			РазмерыВычетовНаГод = РазмерыВычетов[ТекущийНалоговыйПериод];
			
			// обнулим остатки вычетов
			ТекущиеОстаткиВычетов.Очистить();
			ОстаткиВычетов.ТаблицаВычетов.Очистить();	
			ВычетыПредыдущихМесяцев = Новый Соответствие;
			ОтложенныеПраваНаВычеты = Новый Соответствие;
			ВспомогательнаяТаблицаМесяца.Очистить();
			
			ДействующаяИнформацияОСтандартныхВычетах = Неопределено;
			ДействующаяИнформацияОСтатусе = Неопределено;
			                                                                         	
			// инициализируем переменные, хранящие итоги за год
			СтрокиНДФЛЗаГод = Новый Массив;
			ОблагаемыйДоходНаНачалоМесяца = 0;  
			ОблагаемыйДоходНаКонецМесяца = 0;
			
			ДоходЗаМесяцОстаток = 0;	
			НалогИсчисленный = 0;
			НалогСПревышенияИсчисленный = 0;
			ВычетСоциальныйОстаток = 0;
			ИсчисленоНДФЛЗаГод = 0;
			ОблагаемыйДоход = 0;
			ВсегоДоходовТекущегоРасчета = 0;
			
			Если ТекущаяСтрокаТаблицыДоходов.ЭтоПерваяСтрокаПоФизическомуЛицу Тогда // Начало обработки очередного физ.лица.
				
				СтруктураПоискаПоФизическомуЛицу.ФизическоеЛицо = ТекущееФизическоеЛицо;
				СтруктураПоискаТекущихДоходовНерезидентов.ФизическоеЛицо = ТекущееФизическоеЛицо;
				
				// Получим данные, необходимые для определения прав на вычеты.
				СтрокиТаблицыСтатусов = СтатусыФизическихЛиц.НайтиСтроки(СтруктураПоискаПоФизическомуЛицу);
				СтрокиТаблицыПримененияВычетов = ПрименениеСтандартныхВычетов.НайтиСтроки(СтруктураПоискаПоФизическомуЛицу);
				СтрокиТаблицыПравНаВычеты = ВычетыНаДетейИЛичные.НайтиСтроки(СтруктураПоискаПоФизическомуЛицу);
				
				// Если выполняется окончательный расчет, будем вписывать результат расчета сразу в таблицы результата.
				// В случае с промежуточным расчетом будем использовать промежуточную таблицу, а потом переносить в результирующую с
				// учетом ограничений.
				Если Не ОкончательныйРасчет Тогда
					РезультатРасчетаВспомогательный = РезультатРасчета.СкопироватьКолонки();
				КонецЕсли;
				
				РаспределениеДоходовФизлица = ДоходыПоПодразделениямИКатегориям.Скопировать(СтруктураПоискаПоФизическомуЛицу);
				РаспределениеДоходовФизлица.Индексы.Добавить(ПоляПоискаПоДатам);
				ДоходыТекущегоРасчета = РаспределениеДоходовФизлица.Скопировать(СтруктураПоискаТекущихДоходов);
				Если Не ОкончательныйРасчет Тогда
					ВсегоДоходовТекущегоРасчета = ДоходыТекущегоРасчета.Итог("СуммаДоходаТекущегоРасчета");
					ДоходыТекущегоРасчетаНерезидента = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Скопировать(СтруктураПоискаТекущихДоходовНерезидентов);
				КонецЕсли;
				
			КонецЕсли;
				                                                                             				
			// Характеристики доходов "текущего" расчета за очередной налоговый период.
			ВсеДатыТекущегоРасчета = Новый Соответствие;
			ВсеКатегорииТекущегоРасчета = Новый Соответствие;
			ДатыТекущегоРасчетаПоМесяцам = Новый Соответствие;
			ТекущийГод = Год(ТекущийНалоговыйПериод);
			Для СчМесяцев = 1 По 12 Цикл
				ДатыТекущегоРасчетаПоМесяцам.Вставить(СчМесяцев,'00010101');
			КонецЦикла;
			Для каждого СтрокаТЗ Из ДоходыТекущегоРасчета Цикл
				Если Год(СтрокаТЗ.ДатаПолученияДохода) <> ТекущийГод Тогда
					Продолжить;
				КонецЕсли;
				ВсеДатыТекущегоРасчета.Вставить(СтрокаТЗ.ДатаПолученияДохода, Истина);
				ВсеКатегорииТекущегоРасчета.Вставить(СтрокаТЗ.КатегорияДохода, Истина);
				МесяцДаты = Месяц(СтрокаТЗ.ДатаПолученияДохода);
				ДатыТекущегоРасчетаПоМесяцам.Вставить(МесяцДаты, Макс(ДатыТекущегоРасчетаПоМесяцам[МесяцДаты], СтрокаТЗ.ДатаПолученияДохода));
			КонецЦикла;
			Если ОкончательныйРасчет Тогда
				ДатыРасчетаПоМесяцам = Новый Соответствие;
				ДатаНалоговогоПериода = '00010101';
				Для СчМесяцев = 1 По 12 Цикл
					ДатыРасчетаПоМесяцам.Вставить(СчМесяцев,'00010101');
				КонецЦикла;
				Для каждого СтрокаТЗ Из РаспределениеДоходовФизлица Цикл
					Если Год(СтрокаТЗ.ДатаПолученияДохода) <> ТекущийГод Тогда
						Продолжить;
					КонецЕсли;
					ДатаНалоговогоПериода = Макс(ДатаНалоговогоПериода, СтрокаТЗ.ДатаПолученияДохода); 
					МесяцДаты = Месяц(СтрокаТЗ.ДатаПолученияДохода);
					ДатыРасчетаПоМесяцам.Вставить(МесяцДаты, Макс(ДатыРасчетаПоМесяцам[МесяцДаты], СтрокаТЗ.ДатаПолученияДохода));
				КонецЦикла;
				
				ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам = ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцРасчета)];
				ОсновнаяДатаМесяцаРасчета = ?(Год(МесяцРасчета) = ТекущийГод, ДатыРасчетаПоМесяцам[Месяц(МесяцРасчета)], '00010101');
				
				ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам = Новый Массив;
				ТаблицаРаспределенияКонцаМесяцаРасчета = Новый Массив;
				ТаблицаРаспределенияНалоговогоПериода = Новый Массив;
				Если ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
					СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам;
					ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
				КонецЕсли;
				Если ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
					СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаМесяцаРасчета;
					ТаблицаРаспределенияКонцаМесяцаРасчета = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
				КонецЕсли;
				Если ЗначениеЗаполнено(ДатаНалоговогоПериода) Тогда
					СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ДатаНалоговогоПериода;
					ТаблицаРаспределенияНалоговогоПериода = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
				Иначе
					ДатаНалоговогоПериода = НачалоДня(КонецМесяца(МесяцРасчета))
				КонецЕсли;
			Иначе
				ОсновнаяДатаТекущегоРасчета = ДатаУдержанияИсчисленногоНалога;
				Если ВсеДатыТекущегоРасчета[ОсновнаяДатаТекущегоРасчета] = Неопределено Тогда
					Для СчМесяцев = 1 По 12 Цикл
						Если ЗначениеЗаполнено(ДатыТекущегоРасчетаПоМесяцам[13 - СчМесяцев]) Тогда
							ОсновнаяДатаТекущегоРасчета = ДатыТекущегоРасчетаПоМесяцам[13 - СчМесяцев];
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ДатыТекущегоРасчетаНерезидента = Новый Соответствие;
				Для каждого СтрокаТЗ Из ДоходыТекущегоРасчетаНерезидента Цикл
					Если Год(СтрокаТЗ.ДатаПолученияДохода) <> ТекущийГод Тогда
						Продолжить;
					КонецЕсли;
					ДатыТекущегоРасчетаНерезидента.Вставить(Месяц(СтрокаТЗ.ДатаПолученияДохода), СтрокаТЗ.ДатаПолученияДохода);
				КонецЦикла;
			КонецЕсли;
			
			ПродолжатьРасчет = Истина;
			Пока ПродолжатьРасчет Цикл
				
				ТекущаяСтрокаТаблицыДоходов = ДанныеУчетаДоходов[ИндексТекущейСтрокиТаблицыДоходов]; 
				
				Если ТекущаяСтрокаТаблицыДоходов.ЭтоПерваяСтрокаЗаМесяц Тогда
					
					МесяцНалоговогоПериода = ТекущаяСтрокаТаблицыДоходов.МесяцНалоговогоПериода;
					ПроводитьРасчетЗаОчереднойМесяц = ТекущаяСтрокаТаблицыДоходов.ВсеДоходыЗаМесяц <> 0 Или Не ЭтоРасчетПоДоходамТекущегоМесяца;
					
					// Получаем информацию о статусе налогоплательщика на начало месяца.
					Если ДействующаяИнформацияОСтатусе = Неопределено
						Или Не (МесяцНалоговогоПериода >= ДействующаяИнформацияОСтатусе.ДатаНачала И МесяцНалоговогоПериода <= ДействующаяИнформацияОСтатусе.ДатаОкончания) Тогда
						ДействующаяИнформацияОСтатусе = ИнформацияОСтатусеНалогоплательщика(МесяцНалоговогоПериода, СтрокиТаблицыСтатусов);
					КонецЕсли;	
					
					// Получаем информацию об имеющихся правах на стандартные вычеты.
					Если ДействующаяИнформацияОСтандартныхВычетах = Неопределено 
						Или Не (МесяцНалоговогоПериода >= ДействующаяИнформацияОСтандартныхВычетах.ДатаНачала И МесяцНалоговогоПериода <= ДействующаяИнформацияОСтандартныхВычетах.ДатаОкончания) Тогда
						ДействующаяИнформацияОСтандартныхВычетах = ИнформацияОСтандартныхВычетахДействующихНаДату(МесяцНалоговогоПериода, ПериодСрезаПравНаВычеты, СтрокиТаблицыПравНаВычеты, СтрокиТаблицыПримененияВычетов, ДействующаяИнформацияОСтатусе);	
					КонецЕсли;
					
					ВспомогательнаяТаблицаВычетовМесяца.Очистить();
					ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяСтрокаТаблицыДоходов);
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСтандартныхВычетов, ТекущаяСтрокаТаблицыДоходов);
					ЗаполнитьЗначенияСвойств(СтруктураПоискаИмущественныхВычетов, ТекущаяСтрокаТаблицыДоходов);
					ЗаполнитьЗначенияСвойств(СтруктураПоискаИсчисленного, ТекущаяСтрокаТаблицыДоходов);
					СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = МесяцНалоговогоПериода;
					СтруктураПоискаСтандартныхВычетов.МесяцПериодаПредоставленияВычета = МесяцНалоговогоПериода;
								
					// Вписываем во вспомогательную таблицу месяца исчисленные ранее налоги.
					СтрокиНалога = ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного);
					ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, СтрокиНалога, "КатегорияДохода, НалогПоСтавке13, НалогСПревышенияПоСтавке13");	
					УдалитьУчтенныеСтрокиНерезидентов(СоответствиеНерезидентов, СтрокиНалога, ИсчисленныйРанееНалог);					
					
					// Получаем использованный в месяце социальный вычет.
					СтруктураПоискаСтандартныхВычетов.ЭтоСоциальныйВычет = Истина;
					СтрокиПравНаСоциальныеВычеты = ПредоставленныеСтандартныеИСоциальныеВычеты.НайтиСтроки(СтруктураПоискаСтандартныхВычетов);
					ВычетСоциальныйОстаток = ВычетСоциальныйОстаток + ?(СтрокиПравНаСоциальныеВычеты.Количество() > 0 И ДействующаяИнформацияОСтатусе.ПрименяетсяСтавкаПункта1Статьи224НК, СтрокиПравНаСоциальныеВычеты[0].Сумма, 0);
					
					// Создадим набор сумм вычетов, которые могут уменьшить облагаемый доход, начнем с имущественных вычетов.
					СтруктураПоискаИмущественныхВычетов.ВидДвижения = ВидДвиженияНакопления.Приход;
					СтрокиПравНаИмущественныеВычеты = ИмущественныеВычеты.НайтиСтроки(СтруктураПоискаИмущественныхВычетов);
					Для Каждого СтрокаПрав Из СтрокиПравНаИмущественныеВычеты Цикл
						ДобавитьОстатокВычетов(ОстаткиВычетов, СтрокаПрав.КодВычета, СтрокаПрав.Сумма);		
					КонецЦикла;					
					
					// Добавим стандартные вычеты очередного месяца.
					ОблагаемыйДоходНарастающимИтогом = ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоходНарастающимИтогом;
					ДоходСПредыдущегоМестаРаботы = 0;
					СтрокиДоходаСПредыдущегоМестаРаботы = ДоходыСПредыдущегоМестаРаботы.НайтиСтроки(СтруктураПоиска);
					Если СтрокиДоходаСПредыдущегоМестаРаботы.Количество() > 0 Тогда
						ДоходСПредыдущегоМестаРаботы = СтрокиДоходаСПредыдущегоМестаРаботы[0].Размер;
					КонецЕсли;	
					ОблагаемыйДоходДляВычетов = ОблагаемыйДоходНарастающимИтогом + ДоходСПредыдущегоМестаРаботы;	
					Для Каждого ТекущийВычет Из ДействующаяИнформацияОСтандартныхВычетах.Вычеты Цикл
						ОписаниеРазмераВычета = РазмерыВычетовНаГод[ТекущийВычет.Ключ];
						Если ОписаниеРазмераВычета = Неопределено Тогда
							Продолжить;
						КонецЕсли;	
						Если ОписаниеРазмераВычета.ОграничениеПоДоходам <> 0 И ОблагаемыйДоходДляВычетов > ОписаниеРазмераВычета.ОграничениеПоДоходам Тогда
							Продолжить;
						КонецЕсли;	
						ДобавитьОстатокВычетов(ОстаткиВычетов, ТекущийВычет.Ключ, ТекущийВычет.Значение * ОписаниеРазмераВычета.Размер, ПрименятьСтандартныеВычетыНарастающимИтогом);	
					КонецЦикла;		
					
					СтруктураПоискаСтандартныхВычетов.ЭтоСоциальныйВычет = Ложь;
					СтрокиСтандартныхВычетов = ПредоставленныеСтандартныеИСоциальныеВычеты.НайтиСтроки(СтруктураПоискаСтандартныхВычетов);
						
					// Перенесем ранее предоставленные при исчислении налога для будущих дат получения дохода вычеты 
					// текущего месяца на тот месяц, когда их предоставили на самом деле.
					// Манипуляции производим с правами на стандартные вычеты и со строками зарегистрированных вычетов.
					Для каждого Элемент Из ОтложенныеПраваНаВычеты Цикл
						ТекущийВычет = Элемент.Ключ;
						Если ТекущийВычет.МесяцНалоговогоПериода = МесяцНалоговогоПериода Тогда
							ДобавитьОстатокВычетов(ОстаткиВычетов, ТекущийВычет.КодВычета, Элемент.Значение, Истина);
							ОтложенныеПраваНаВычеты.Удалить(ТекущийВычет);
						КонецЕсли;
					КонецЦикла;
					Для каждого СтрокаТЗ Из СтрокиСтандартныхВычетов Цикл
						Если СтрокаТЗ.МесяцНалоговогоПериода <= МесяцНалоговогоПериода Тогда
							Продолжить;	
						КонецЕсли;
						Если СтрокаТЗ.Сумма > 0 Тогда
							ОстатокВычета = ТекущиеОстаткиВычетов[СтрокаТЗ.КодВычета];
							Если ОстатокВычета <> Неопределено  Тогда
								ВычетКЗачету = Мин(СтрокаТЗ.Сумма, ОстатокВычета);
								ТекущиеОстаткиВычетов.Вставить(СтрокаТЗ.КодВычета, ОстатокВычета - ВычетКЗачету);
								СтрокаТЗ.МесяцПериодаПредоставленияВычета = СтрокаТЗ.МесяцНалоговогоПериода;
								ОтложенныеПраваНаВычеты.Вставить(СтрокаТЗ, ВычетКЗачету);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					// Если вычеты перенесли, надо обновить зарегистрированные вычеты текущего месяца.
					Если ОтложенныеПраваНаВычеты.Количество() > 0 Тогда
						СтрокиСтандартныхВычетов = ПредоставленныеСтандартныеИСоциальныеВычеты.НайтиСтроки(СтруктураПоискаСтандартныхВычетов);
					КонецЕсли;
					
					// Определим доход, который могут уменьшать вычеты.
					ЗапоминатьВычетыНаБудущее = Ложь;
					ОблагаемыйДоходЗаМесяц = ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоходЗаМесяц;
					Если ПрименятьСтандартныеВычетыНарастающимИтогом Тогда
						Если ПереноситьДоходДляПримененияВычетовВМесяцРасчета И МесяцНалоговогоПериода = НачалоМесяца(МесяцРасчета) Тогда
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ОблагаемыйДоходЗаМесяц + ВсегоДоходовТекущегоРасчета;
							ЗапоминатьВычетыНаБудущее = Истина;
						ИначеЕсли ПереноситьДоходДляПримененияВычетовВМесяцРасчета И МесяцНалоговогоПериода = НачалоМесяца(ДатаУдержанияИсчисленногоНалога) Тогда
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ОблагаемыйДоходЗаМесяц - ВсегоДоходовТекущегоРасчета;
						Иначе
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ОблагаемыйДоходЗаМесяц;
						КонецЕсли;
					Иначе
						ДоходЗаМесяцОстаток = ОблагаемыйДоходЗаМесяц;		
					КонецЕсли;	                                                     
					// Имущественные вычеты не могут уменьшать доходы месяцев, предшествующих месяцу начала применения.
					ДоходЗаМесяцДляИмущественныхВычетов = ОблагаемыйДоходЗаМесяц; 
					
					// Рассчитываем примененные за месяц вычеты.
					ВсегоВычетовЗаМесяц = 0;
					ЕстьВычетыЗаМесяц = Ложь;
					ВычетыЗаМесяц.Очистить();	
					Если ДоходЗаМесяцОстаток > 0 И МесяцНалоговогоПериода <= ТекущаяСтрокаТаблицыДоходов.СтаршийМесяцПолученияДохода Тогда
						
						ВычетСоциальныйЗаМесяц = Мин(ДоходЗаМесяцОстаток, ВычетСоциальныйОстаток);
						ВычетСоциальныйОстаток = ВычетСоциальныйОстаток - ВычетСоциальныйЗаМесяц;
						ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц + ВычетСоциальныйЗаМесяц;
						ЕстьВычетыЗаМесяц = ВычетСоциальныйЗаМесяц <> 0;
						
						ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетСоциальныйЗаМесяц;
						ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетСоциальныйЗаМесяц;
						// Для расчета имущественных вычетов учтем ранее не учтенные из-за отсутствия дохода в предшествующих месяцах
						// налогового периода вычеты.
						Для каждого Элемент Из ВычетыПредыдущихМесяцев Цикл
							Если Элемент.Ключ < МесяцНалоговогоПериода Тогда
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - Мин(ДоходЗаМесяцДляИмущественныхВычетов, Элемент.Значение);
								Если ДоходЗаМесяцДляИмущественныхВычетов = 0 Тогда
									Прервать;
								КонецЕсли;	
							КонецЕсли;
						КонецЦикла;
						
						Если ДоходЗаМесяцОстаток > 0 Тогда
							// Заполняем таблицу значений ВычетыЗаМесяц (с колонками КодВычета, Сумма) суммами вычетов, которые будут
							// применены в текущем месяце. Строки в таблицу помещаем в соответствии с наиболее выгодным для сотрудника
							// приоритетом применения вычетов (описанным непосредственно в справочнике вычетов), для чего. отсортируем
							// таблицу ТаблицаВычетов по полю ПорядокСписания. Применяемые суммы вычетов переписываем из таблицы Остатки,
							// содержащей права на вычеты, в пределах доходов, которые могут быть уменьшены на стандартные, имущественные
							// вычеты. Если положенных физ.лицу вычетов оказывается больше, чем начисленного дохода, в таблице Остатки
							// оказываются суммы неиспользованных в этом месяце вычетов для предоставления их в будущем.
							ОстаткиВычетов.ТаблицаВычетов.Сортировать("ПорядокСписания");
							Для Каждого ВычетКСписанию Из ОстаткиВычетов.ТаблицаВычетов Цикл
								
								Если ДоходЗаМесяцОстаток = 0 И ДоходЗаМесяцДляИмущественныхВычетов = 0 Тогда
									Прервать;
								КонецЕсли;
								Если ВычетКСписанию.ИмущественныйВычет И Не ПроводитьРасчетЗаОчереднойМесяц Тогда 
									Прервать;
								КонецЕсли;
								
								ВычетЗаМесяц = 0;
								ОстатокВычета = ТекущиеОстаткиВычетов[ВычетКСписанию.КодВычета];
								Если ВычетКСписанию.ИмущественныйВычет Тогда 
									Если ДоходЗаМесяцДляИмущественныхВычетов > 0 Тогда
										ВычетЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ОстатокВычета);	
										ТекущиеОстаткиВычетов.Вставить(ВычетКСписанию.КодВычета, ОстатокВычета - ВычетЗаМесяц);
									КонецЕсли;	
								Иначе	
									ВычетЗаМесяц = Мин(ДоходЗаМесяцОстаток, ОстатокВычета);
									ТекущиеОстаткиВычетов.Вставить(ВычетКСписанию.КодВычета, ОстатокВычета - ВычетЗаМесяц);
								КонецЕсли;	
								Если ВычетЗаМесяц <> 0 Тогда
									СтрокаТаблицыРезультата = ВычетыЗаМесяц.Добавить();	
									СтрокаТаблицыРезультата.КодВычета = ВычетКСписанию.КодВычета;
									СтрокаТаблицыРезультата.РазмерВычета = ВычетЗаМесяц;
									
									ЕстьВычетыЗаМесяц = Истина;
									ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЗаМесяц;
									ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетЗаМесяц);
								КонецЕсли;
								
							КонецЦикла;	
						КонецЕсли;
						
						ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц + ВычетыЗаМесяц.Итог("РазмерВычета");
					КонецЕсли;
					
					// Перенесем некоторые суммы вычетов из других месяцев.
					Если ПроводитьРасчетЗаОчереднойМесяц Тогда 
						// Учтем ранее не учтенные вычеты из-за отсутствия дохода в предшествующих месяцах налогового периода.
						Для каждого Элемент Из ВычетыПредыдущихМесяцев Цикл
							Если Элемент.Ключ < МесяцНалоговогоПериода Тогда
								ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц + Элемент.Значение;
								ВычетыПредыдущихМесяцев.Вставить(Элемент.Ключ, 0);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;	
					Если ЗапоминатьВычетыНаБудущее Или ЕстьВычетыЗаМесяц И Не ПроводитьРасчетЗаОчереднойМесяц Тогда // Запомним вычеты на будущее.
						ВычетыПредыдущихМесяцев.Вставить(МесяцНалоговогоПериода, ?(ЗначениеЗаполнено(ВычетыПредыдущихМесяцев[МесяцНалоговогоПериода]), ВычетыПредыдущихМесяцев[МесяцНалоговогоПериода], 0) + Макс(ВсегоВычетовЗаМесяц - ОблагаемыйДоходЗаМесяц, 0));
						ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц - Макс(ВсегоВычетовЗаМесяц - ОблагаемыйДоходЗаМесяц, 0);
					КонецЕсли;	
					
					ТаблицаРаспределенияВычетов = РаспределениеДоходовФизлица.СкопироватьКолонки();

					НачисленныйДоходЗаДату = 0;
					ИспользованоВычетовЗаМесяц = 0;

					// Начнем расчет с вычитания уже зарегистрированных в учете вычетов, затем по мере расчета вычеты будут
					// "применяться" к конкретным доходам.
					
					// Строки примененных ранее стандартных вычетов отобрали ранее
					ВписатьПредоставленныеРанееВычетыВДанныеУчета(ВспомогательнаяТаблицаВычетовМесяца, СтрокиСтандартныхВычетов);
					УдалитьУчтенныеСтрокиНерезидентов(СоответствиеНерезидентов, СтрокиСтандартныхВычетов, ПредоставленныеСтандартныеИСоциальныеВычеты);					
					// Строки примененных ранее имущественных вычетов отберем сейчас.
					СтруктураПоискаИмущественныхВычетов.ВидДвижения = ВидДвиженияНакопления.Расход;
					СтрокиВычетов = ИмущественныеВычеты.НайтиСтроки(СтруктураПоискаИмущественныхВычетов);
					ВписатьПредоставленныеРанееВычетыВДанныеУчета(ВспомогательнаяТаблицаВычетовМесяца, СтрокиВычетов);
					УдалитьУчтенныеСтрокиНерезидентов(СоответствиеНерезидентов, СтрокиВычетов, ИмущественныеВычеты);					
					
				КонецЕсли;	
				
				Если ПроводитьРасчетЗаОчереднойМесяц Тогда
					
					Если ТекущаяСтрокаТаблицыДоходов.ЭтоПерваяСтрокаЗаДату Тогда
						
						ОблагаемыйДоходНаНачалоМесяца = ОблагаемыйДоход;
						ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета = 0;
						ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета = 0;
						ЕстьДоходыПромежуточногоРасчета = Ложь;
						ЕстьДоходыОкончательногоРасчета = Ложь;
						
						СтруктураПоискаПоДатам.ДатаПолученияДохода = ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода;
						СтруктураПоискаПоДатам.ДоходМежрасчетногоПериода = Истина;
						ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаПоДатам)); 
						СтруктураПоискаПоДатам.ДоходМежрасчетногоПериода = Ложь;
						ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаПоДатам)); 
						
						ТаблицаРаспределенияНаДату = ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода.Скопировать();
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета, ТаблицаРаспределенияНаДату);
						Если ТаблицаРаспределенияНаДату.Итог("СуммаДохода") = 0 Тогда
							// если доходов за прошлый месяц нет - будем использовать текущее распределение
							Если ТаблицаРаспределенияМесяцаРасчета = Неопределено Тогда
								ТекущийГод = Год(МесяцРасчета);
								СтруктураПоискаРаспределения = Новый Структура("МесяцНалоговогоПериода");
								БазаРаспределения = 0;
								МесяцПоиска = НачалоМесяца(МесяцРасчета);                                             
								Пока БазаРаспределения = 0 И Год(МесяцПоиска) = ТекущийГод Цикл
									СтруктураПоискаРаспределения.МесяцНалоговогоПериода = МесяцПоиска;
									ТаблицаРаспределенияМесяцаРасчета = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаРаспределения));
									БазаРаспределения = ТаблицаРаспределенияМесяцаРасчета.Итог("СуммаДохода");
									МесяцПоиска = ДобавитьМесяц(МесяцПоиска, -1);
								КонецЦикла;
							КонецЕсли;
							ТаблицаРаспределенияНаДату = ТаблицаРаспределенияМесяцаРасчета;
						КонецЕсли;
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределенияНаДату, ТаблицаРаспределенияВычетов);
						
					КонецЕсли;	
					
					НачисленныйДоходЗаДату = ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоход;
					Если ТекущаяСтрокаТаблицыДоходов.ДоходМежрасчетногоПериода Тогда 
						ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета = Мин(ОблагаемыйДоходНарастающимИтогом, Макс(0, ОблагаемыйДоходНаНачалоМесяца + ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоход - ВсегоВычетовЗаМесяц));
						ЕстьДоходыПромежуточногоРасчета = Истина;
					Иначе
						ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета = Мин(ОблагаемыйДоходНарастающимИтогом, Макс(0, ОблагаемыйДоходНаНачалоМесяца + ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоход - ВсегоВычетовЗаМесяц));
						ЕстьДоходыОкончательногоРасчета = Истина;
					КонецЕсли;

					Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаДату Тогда
						
						// Расчет сумм налога
						Если Не ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаМесяц Тогда					
							Если ЕстьДоходыПромежуточногоРасчета Тогда
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета);
								НалогСДохода = Макс(Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный, 0);
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Макс(Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный, 0);
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
							КонецЕсли;
							Если ЕстьДоходыОкончательногоРасчета Тогда
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);
								НалогСДохода = Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный;
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный;
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
							КонецЕсли;
						Иначе
							Если ЕстьДоходыПромежуточногоРасчета И ЕстьДоходыОкончательногоРасчета Тогда
								
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета);
								НалогСДохода = Макс(Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный, 0);
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Макс(Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный, 0);
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
								
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);
								НалогСДохода = Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный;
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный;
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
								
								ОблагаемыйДоход = ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
								
							Иначе
								
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);
								НалогСДохода = Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный;
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный;
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ?(ТекущаяСтрокаТаблицыДоходов.ДоходМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета));
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ?(ТекущаяСтрокаТаблицыДоходов.ДоходМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета));
								
								ОблагаемыйДоход = ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;	
							КонецЕсли;
						КонецЕсли;
						Если ВсеДатыТекущегоРасчета[ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода] = Неопределено Тогда
							СтрокиКУдалению.Очистить();
							РассчитаноНалогаЗаДату = 0;
							Для каждого СтрокаНалога Из ВспомогательнаяТаблицаМесяца Цикл
								Если СтрокаНалога.МесяцНалоговогоПериода = ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода Тогда
									РассчитаноНалогаЗаДату = РассчитаноНалогаЗаДату + СтрокаНалога.НалогПоСтавке13 * СтрокаНалога.НалогПоСтавке13 + СтрокаНалога.НалогСПревышенияПоСтавке13 * СтрокаНалога.НалогСПревышенияПоСтавке13;
									СтрокиКУдалению.Вставить(СтрокаНалога);
								КонецЕсли;
							КонецЦикла;
							Если РассчитаноНалогаЗаДату = 0 Тогда
								Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
									ВспомогательнаяТаблицаМесяца.Удалить(УдаляемаяСтрока.Ключ);		
								КонецЦикла;	
							КонецЕсли;
						КонецЕсли;
						
						Если ЕстьДоходыПромежуточногоРасчета И ЕстьДоходыОкончательногоРасчета Тогда
							ОблагаемыйДоходЗаДату = ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
						Иначе
							ОблагаемыйДоходЗаДату = ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
						КонецЕсли;
						ВсегоВычетовЗаДату = НачисленныйДоходЗаДату - (ОблагаемыйДоходЗаДату - ОблагаемыйДоходНаНачалоМесяца) - ИспользованоВычетовЗаМесяц;
						ИспользованоВычетовЗаМесяц = ИспользованоВычетовЗаМесяц + ВсегоВычетовЗаДату;
						
						Если ВсегоВычетовЗаДату <> 0 Тогда
								
							// Таблица ВычетыЗаМесяц содержит строки с располагаемыми суммами вычетов, упорядоченные в соответствии с
							// наиболее выгодным для сотрудника приоритетом применения вычетов. Переписываем вычеты из таблицы ВычетыЗаМесяц
							// в таблицу ВспомогательнаяТаблицаВычетовМесяца (распределяя суммы по подразделениям из доходов этой даты
							// получения дохода) в пределах рассчитанного ранее примененного за дату вычета (если сумма вычета и остаток
							// вычета на дату одного знака, берем минимальное по модулю). Если располагаемая сумма вычета полностью исчерпана
							// (стала равна 0), удаляем строку из таблицы ВычетыЗаМесяц.
							ИндексПоследнейСтрокиТаблицыВычетов = ВычетыЗаМесяц.Количество() - 1;
							Индекс = 0;
							Пока Индекс <= ИндексПоследнейСтрокиТаблицыВычетов Цикл		
								ТекущийВычет = ВычетыЗаМесяц[Индекс];
								ЗначениеВычетаЗаМесяц = ТекущийВычет.РазмерВычета;
								Если ВсегоВычетовЗаДату * ЗначениеВычетаЗаМесяц > 0 Тогда		
									Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ЗначениеВычетаЗаМесяц, ВсегоВычетовЗаДату), Макс(ЗначениеВычетаЗаМесяц, ВсегоВычетовЗаДату));
									ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаВычетовМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоПодразделению, '00010101', Учтено, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДату, ТекущийВычет);
									ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
									ТекущийВычет.РазмерВычета = ЗначениеВычетаЗаМесяц - Учтено;
									Если ТекущийВычет.РазмерВычета = 0 Тогда
										ВычетыЗаМесяц.Удалить(Индекс);
										ИндексПоследнейСтрокиТаблицыВычетов = ИндексПоследнейСтрокиТаблицыВычетов - 1;
										Индекс = Индекс - 1;
									КонецЕсли;
									Если ВсегоВычетовЗаДату = 0 Тогда
										Прервать;
									КонецЕсли;
								КонецЕсли;	
								Индекс = Индекс + 1;
							КонецЦикла;
							
							// Проверим не были ли ранее зарегистрированы в учете предоставленные сейчас вычеты;
							// если были, то при нулевом итоге таблицу очистим, а со следующей даты начнем накапливать вычеты "с чистого листа".
							Если ВспомогательнаяТаблицаВычетовМесяца.Итог("РазмерВычета") = 0 Тогда
								ИтогиПоВычетам = Новый Соответствие;
								Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
									Значение = ИтогиПоВычетам[СтрокаТЗ.КодВычета];
									ИтогиПоВычетам.Вставить(СтрокаТЗ.КодВычета, ?(Значение = Неопределено, 0, Значение) + СтрокаТЗ.РазмерВычета)
								КонецЦикла;
								Если ИтогиПоВычетам.Количество() = 1 Тогда
									ВспомогательнаяТаблицаВычетовМесяца.Очистить();
								Иначе
									СтрокиКУдалению.Очистить();
									Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
										Если Не ЗначениеЗаполнено(ИтогиПоВычетам[СтрокаТЗ.КодВычета]) Тогда
											СтрокиКУдалению.Вставить(СтрокаТЗ, Истина)
										КонецЕсли;	
									КонецЦикла;
									Для каждого Элемент Из СтрокиКУдалению Цикл
										ВспомогательнаяТаблицаВычетовМесяца.Удалить(Элемент.Ключ)
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
				Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаМесяц Тогда				
					
					// Окончательный сбор вычетов в собственной таблице значений.
					
					Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
						Если Не ОписаниеВычетов[СтрокаТЗ.КодВычета].ИмущественныйВычет Тогда
							СтрокаТЗ.МесяцПериодаПредоставленияВычета = МесяцНалоговогоПериода
						КонецЕсли;
					КонецЦикла; 
					
					// Определяем дату получения дохода, к строке которой будут приписаны вычеты этого месяца.
					Если ОкончательныйРасчет Тогда
						Если ПроводитьРасчетЗаОчереднойМесяц Тогда
							ДатаУчетаВычетов = КонецМесяца(МесяцНалоговогоПериода)
						Иначе
							ОсновнаяДатаПолученияДохода = ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцНалоговогоПериода)];
							Если ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда
								ДатаУчетаВычетов = ОсновнаяДатаПолученияДохода;
							ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
								ДатаУчетаВычетов = ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам;
							ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
								ДатаУчетаВычетов = ОсновнаяДатаМесяцаРасчета;
							Иначе
								ДатаУчетаВычетов = ДатаНалоговогоПериода;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДатаУчетаВычетов = ОсновнаяДатаТекущегоРасчета;
					КонецЕсли;
					
					Если ЕстьВычетыЗаМесяц Тогда // Перераспределим итоговые суммы предоставленных вычетов по категориям, сохраняя подразделения.
						
						// Доходов в месяце может не быть, но вычеты приходится предоставлять, распределим их по доходам текущего расчета.
						Если Не ЗначениеЗаполнено(ТаблицаРаспределенияВычетов) Тогда
							Если ОкончательныйРасчет Тогда
								Если ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
									ТаблицаРаспределенияВычетов = ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам;
								ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
									ТаблицаРаспределенияВычетов = ТаблицаРаспределенияКонцаМесяцаРасчета;
								Иначе
									ТаблицаРаспределенияВычетов = ТаблицаРаспределенияНалоговогоПериода;
								КонецЕсли;
							Иначе
								СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаТекущегоРасчета;
								ТаблицаРаспределенияВычетов = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(ВычетыЗаМесяц) Тогда
							БылоСтрокВычетов = ВспомогательнаяТаблицаВычетовМесяца.Количество();
							Для Каждого ТекущийВычет Из ВычетыЗаМесяц Цикл
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаВычетовМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоПодразделению, '00010101', ТекущийВычет.РазмерВычета, СтруктураПоиска, ТаблицаРаспределенияВычетов, ТекущийВычет);
							КонецЦикла;	
							Для Сч = БылоСтрокВычетов + 1 По ВспомогательнаяТаблицаВычетовМесяца.Количество() Цикл
								ВспомогательнаяТаблицаВычетовМесяца[Сч - 1].МесяцПериодаПредоставленияВычета = МесяцНалоговогоПериода
							КонецЦикла;
						КонецЕсли;
						
						ВычетыМесяца = ВспомогательнаяТаблицаВычетовМесяца.СкопироватьКолонки();
						
						ВспомогательнаяТаблицаВычетовМесяца.ЗаполнитьЗначения(ДатаУчетаВычетов, "МесяцНалоговогоПериода");
						ВспомогательнаяТаблицаВычетовМесяца.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, КатегорияДохода, КодВычета", "РазмерВычета");
						Если ВспомогательнаяТаблицаВычетовМесяца.Количество() > 0 Тогда
							ВспомогательнаяТаблицаВычетовМесяцаФизическогоЛица = ВспомогательнаяТаблицаВычетовМесяца.Скопировать( ,"Подразделение");
							ВспомогательнаяТаблицаВычетовМесяцаФизическогоЛица.Свернуть("Подразделение");
							Если ВспомогательнаяТаблицаВычетовМесяцаФизическогоЛица.Количество() = 1 Тогда
								Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
									Если СтрокаТЗ.РазмерВычета <> 0 Тогда
										ВписатьРесурсВРезультатыРасчетов(ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатаУчетаВычетов, СтрокаТЗ.РазмерВычета, СтруктураПоиска, ТаблицаРаспределенияВычетов, СтрокаТЗ);
									КонецЕсли;
								КонецЦикла;
							Иначе 	
								ТаблицаДляРаспределенияПоПодразделению = ТаблицаРаспределенияВычетов.СкопироватьКолонки();
								СтрокиРаспределенияПоПодразделениям = Новый Соответствие;
								Для Каждого СтрокаТаблицыРаспределения Из ТаблицаРаспределенияВычетов Цикл
									СтрокиРаспределения = СтрокиРаспределенияПоПодразделениям[СтрокаТаблицыРаспределения.Подразделение];
									Если СтрокиРаспределения = Неопределено Тогда
										СтрокиРаспределения = Новый Массив;
										СтрокиРаспределенияПоПодразделениям.Вставить(СтрокаТаблицыРаспределения.Подразделение, СтрокиРаспределения);
									КонецЕсли;	
									СтрокиРаспределения.Добавить(СтрокаТаблицыРаспределения);
								КонецЦикла;	
								Для Каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
									СтрокиРаспределения = СтрокиРаспределенияПоПодразделениям[СтрокаТЗ.Подразделение];
									Если СтрокиРаспределения = Неопределено Тогда
										ТаблицаРаспределения = ТаблицаРаспределенияВычетов.СкопироватьКолонки();
									Иначе
										ТаблицаРаспределения = ТаблицаРаспределенияВычетов.Скопировать(СтрокиРаспределения);
									КонецЕсли;	
									ВписатьРесурсВРезультатыРасчетов(ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатаУчетаВычетов, СтрокаТЗ.РазмерВычета, СтруктураПоиска, ТаблицаРаспределения, СтрокаТЗ);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						
					Иначе // У сторно-строк вычетов оставим имевшиеся ранее подразделения и категории.
						ВычетыМесяца = ВспомогательнаяТаблицаВычетовМесяца.Скопировать();
						Если ВспомогательнаяТаблицаВычетовМесяца.Количество() > 0 Тогда 
							ВычетыМесяца.ЗаполнитьЗначения(ДатаУчетаВычетов, "МесяцНалоговогоПериода");
						КонецЕсли;
					КонецЕсли;
					
					ВычетыМесяца.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, КатегорияДохода, КодВычета", "РазмерВычета");
					
					// Если у физ.лица также есть доходы, облагаемые не нарастающим итогом, - добавим и их тоже.
					ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельноПоФизическомуЛицу = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.НайтиСтроки(СтруктураПоиска);
					Для Каждого СтрокаТЗ Из ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельноПоФизическомуЛицу Цикл
						НалогСДохода = Окр(СтрокаТЗ.ДоходыБезВычетов * СтрокаТЗ.СтавкаЧислом);
						СтрокаНалога = ВспомогательнаяТаблицаМесяца.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНалога, СтрокаТЗ, "ФизическоеЛицо, Подразделение, КатегорияДохода");
						СтрокаНалога.НалогПоСтавке13 = НалогСДохода;
						СтрокаНалога.МесяцНалоговогоПериода = СтрокаТЗ.ДатаПолученияДохода;
						ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Удалить(СтрокаТЗ);
					КонецЦикла;	
					
					// В "межрасчетном" варианте оставляем только те результаты, которые соответствуют месяцу (-ам) получения дохода
					// текущего акта расчета.
					Если Не ОкончательныйРасчет И Не ЗначениеЗаполнено(ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцНалоговогоПериода)]) И Не ЗначениеЗаполнено(ДатыТекущегоРасчетаНерезидента[Месяц(МесяцНалоговогоПериода)]) Тогда
						
						// В итоговую таблицу запишем только вычеты.
						ДобавлятьРезультатМесяцаВИтогиФизлица = Ложь;
						
						Если МесяцНалоговогоПериода < КонецМесяца(МесяцРасчета) И ВспомогательнаяТаблицаМесяца.Итог("НалогПоСтавке13") + ВспомогательнаяТаблицаМесяца.Итог("НалогСПревышенияПоСтавке13") = 0 Тогда
							Для каждого СтрокаВычета Из ВычетыМесяца Цикл
								ДобавлятьРезультатМесяцаВИтогиФизлица = СтрокаВычета.РазмерВычета <> 0;
								Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						// Минимизируем появление отсутствующих в текущих доходах категорий дохода.
						Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
							
							ДатаМесяца = ОсновнаяДатаТекущегоРасчета;
							СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаТекущегоРасчета;
							ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
							
							ДатыПодразделенияКатегории = ВспомогательныеДатыПодразделенияКатегории.СкопироватьКолонки();
							НаборИзмерений = ВычетыМесяца.Скопировать(, "МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
							НаборИзмерений.Свернуть("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
							ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборИзмерений, ДатыПодразделенияКатегории);
							Для каждого СтрокаТЗ Из ДатыПодразделенияКатегории Цикл
								СтрокаТЗ.ЗаменятьДатуПолученияДохода = Истина;
								СтрокаТЗ.ЗаменятьКатегориюДохода = ВсеКатегорииТекущегоРасчета[СтрокаТЗ.КатегорияДохода] = Неопределено;
								СтрокаТЗ.ЗаменятьПодразделение = МесяцНалоговогоПериода >= НачалоМесяца(МесяцРасчета) И НачалоМесяца(СтрокаТЗ.МесяцНалоговогоПериода) = НачалоМесяца(ДатаМесяца);
								СтрокаТЗ.Распределение = ТаблицаРаспределенияТекущегоМесяца;
								Если ОсобыеКатегорииДохода[СтрокаТЗ.КатегорияДохода] = Истина Тогда
									СтрокаТЗ.ЗаменятьПодразделение = Ложь;
									СтрокаТЗ.ЗаменятьКатегориюДохода = Ложь;
								ИначеЕсли СтрокаТЗ.ЗаменятьПодразделение Тогда 	
									СтруктураПоискаПоДатамИПодразделениям.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
									СтруктураПоискаПоДатамИПодразделениям.Подразделение = СтрокаТЗ.Подразделение;
									СтрокаТЗ.ЗаменятьПодразделение = ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаПоДатамИПодразделениям).Количество() = 0;
								КонецЕсли;
							КонецЦикла;
							Если ДатыПодразделенияКатегории.Количество() > 2 Тогда
								ДатыПодразделенияКатегории.Индексы.Добавить("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
							КонецЕсли;
							
							ВспомогательнаяТаблицаВычетовМесяца.Очистить();
							ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаВычетовМесяца, ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатыПодразделенияКатегории, ДатаМесяца, "МесяцПериодаПредоставленияВычета, КодВычета");
							
							// Перенесем результат расчета месяца в основную таблицу с результатом расчета.
							ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, СтрокиНДФЛЗаГод, ВспомогательнаяТаблицаМесяца.СкопироватьКолонки(), ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов);
						КонецЕсли;
						
						ВспомогательнаяТаблицаМесяца.Очистить();
						
					Иначе 
					
						ИсчисленоНДФЛЗаГод = ИсчисленоНДФЛЗаГод + ВспомогательнаяТаблицаМесяца.Итог("НалогПоСтавке13") + ВспомогательнаяТаблицаМесяца.Итог("НалогСПревышенияПоСтавке13");
						
						Если ПроводитьРасчетЗаОчереднойМесяц Тогда
							
							// Вычеркнем из результата строки по переброске некоторой суммы с одной категории на другую.
							ТаблицаМесяцаБезКатегорийДохода = ВспомогательнаяТаблицаМесяца.Скопировать();
							ТаблицаМесяцаБезКатегорийДохода.Свернуть("МесяцНалоговогоПериода, Подразделение", "НалогПоСтавке13, НалогСПревышенияПоСтавке13");
							Для каждого СтрокаТЗ Из ТаблицаМесяцаБезКатегорийДохода Цикл
								Если СтрокаТЗ.НалогПоСтавке13 = 0 Или СтрокаТЗ.НалогСПревышенияПоСтавке13 = 0 Тогда
									СтрокиКОбнулению = ВспомогательнаяТаблицаМесяца.НайтиСтроки(Новый Структура("МесяцНалоговогоПериода, Подразделение", СтрокаТЗ.МесяцНалоговогоПериода, СтрокаТЗ.Подразделение));
									Если СтрокаТЗ.НалогПоСтавке13 = 0 И СтрокаТЗ.НалогСПревышенияПоСтавке13 = 0 Тогда
										Для каждого СтрокаКОбнулению Из СтрокиКОбнулению Цикл
											ВспомогательнаяТаблицаМесяца.Удалить(СтрокаКОбнулению);
										КонецЦикла; 	
									ИначеЕсли СтрокаТЗ.НалогПоСтавке13 = 0 Тогда
										Для каждого СтрокаКОбнулению Из СтрокиКОбнулению Цикл
											 СтрокаКОбнулению.НалогПоСтавке13 = 0
										КонецЦикла; 	
									Иначе	
										Для каждого СтрокаКОбнулению Из СтрокиКОбнулению Цикл
											 СтрокаКОбнулению.НалогСПревышенияПоСтавке13 = 0
										КонецЦикла; 	
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							// Минимизируем появление отсутствующих в текущих доходах дат получения и категорий дохода:
							// 1. Определяем подходящую дату получения дохода и соответствующее ей распределение
							// при этом некоторые результаты расчетов могут быть проигнорированы совсем.
							ДобавлятьРезультатМесяцаВИтогиФизлица = Истина;
							ОсновнаяДатаПолученияДохода = ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцНалоговогоПериода)];
							Если ОкончательныйРасчет Тогда
								Если Не ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда // перерасчет налога при отсутствии дохода текущего акта расчета
									Если МесяцНалоговогоПериода > КонецМесяца(МесяцРасчета) Тогда // перерасчет по будущим доходам не производим
										ДобавлятьРезультатМесяцаВИтогиФизлица = Ложь;
									ИначеЕсли ВспомогательнаяТаблицаМесяца.Итог("НалогПоСтавке13") = 0 И ВспомогательнаяТаблицаМесяца.Итог("НалогСПревышенияПоСтавке13") = 0 И МесяцНалоговогоПериода < НачалоМесяца(МесяцРасчета) Тогда // нашли предшествующий месяц с нулевым налогом
										ВычетыДляПроверки = ВычетыМесяца.Скопировать(, "КодВычета, РазмерВычета");
										ВычетыДляПроверки.Свернуть("КодВычета", "РазмерВычета");
										ЕстьДанныеМесяца = Ложь;
										Для каждого СтрокаТЗ Из ВычетыДляПроверки Цикл
											ЕстьДанныеМесяца = СтрокаТЗ.РазмерВычета <> 0;
											Если ЕстьДанныеМесяца Тогда
												Прервать;
											КонецЕсли;
										КонецЦикла;
										Если Не ЕстьДанныеМесяца Тогда // игнорируем различные переброски сумм одного вычета, но не между вычетами 
											ДобавлятьРезультатМесяцаВИтогиФизлица = Ложь;
											ВспомогательнаяТаблицаМесяца.Очистить();
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
									Если МесяцНалоговогоПериода < НачалоМесяца(МесяцРасчета) Тогда
										Если ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда
											ДатаМесяца = ОсновнаяДатаПолученияДохода;
											СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаПолученияДохода;
											ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
										ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
											ДатаМесяца = ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам;
										ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
											ДатаМесяца = ОсновнаяДатаМесяцаРасчета;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияКонцаМесяцаРасчета;
										Иначе
											ДатаМесяца = ДатаНалоговогоПериода;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияНалоговогоПериода;
										КонецЕсли;
									Иначе
										Если ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда
											ДатаМесяца = ОсновнаяДатаПолученияДохода;
											СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаПолученияДохода;
											ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
										Иначе
											ДатаМесяца = ДатаНалоговогоПериода;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияНалоговогоПериода;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							Иначе	
								ДатаМесяца = ОсновнаяДатаПолученияДохода;
								СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаПолученияДохода;
								ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
							КонецЕсли;
							Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
								
								// 2. Заменяем даты получения дохода на подходящую и пересматриваем категорию дохода
								ДатыПодразделенияКатегории = ВспомогательныеДатыПодразделенияКатегории.СкопироватьКолонки();
								НаборИзмерений = ВспомогательнаяТаблицаМесяца.Скопировать(, "МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
								ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВычетыМесяца.Скопировать(, "МесяцНалоговогоПериода, КатегорияДохода, Подразделение"), НаборИзмерений);
								НаборИзмерений.Свернуть("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
								ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборИзмерений, ДатыПодразделенияКатегории);
								Для каждого СтрокаТЗ Из ДатыПодразделенияКатегории Цикл
									СтрокаТЗ.ЗаменятьДатуПолученияДохода = ВсеДатыТекущегоРасчета[СтрокаТЗ.МесяцНалоговогоПериода] = Неопределено;
									СтрокаТЗ.ЗаменятьКатегориюДохода = ВсеКатегорииТекущегоРасчета[СтрокаТЗ.КатегорияДохода] = Неопределено;
									СтрокаТЗ.ЗаменятьПодразделение = МесяцНалоговогоПериода >= НачалоМесяца(МесяцРасчета) И НачалоМесяца(СтрокаТЗ.МесяцНалоговогоПериода) = НачалоМесяца(ДатаМесяца);
									Если ОсобыеКатегорииДохода[СтрокаТЗ.КатегорияДохода] = Истина Тогда
										СтрокаТЗ.ЗаменятьПодразделение = Ложь;
										СтрокаТЗ.ЗаменятьКатегориюДохода = Ложь;
									ИначеЕсли СтрокаТЗ.ЗаменятьПодразделение Тогда 	
										СтруктураПоискаПоДатамИПодразделениям.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
										СтруктураПоискаПоДатамИПодразделениям.Подразделение = СтрокаТЗ.Подразделение;
										СтрокаТЗ.ЗаменятьПодразделение = ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаПоДатамИПодразделениям).Количество() = 0;
									КонецЕсли;
									Если СтрокаТЗ.ЗаменятьДатуПолученияДохода Тогда
										СтрокаТЗ.Распределение = ТаблицаРаспределенияТекущегоМесяца;
									Иначе
										СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
										СтрокаТЗ.Распределение = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
									КонецЕсли;
								КонецЦикла;
								Если ДатыПодразделенияКатегории.Количество() > 2 Тогда
									ДатыПодразделенияКатегории.Индексы.Добавить("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
								КонецЕсли;
								
								ВспомогательнаяТаблицаФизическогоЛица = ВспомогательнаяТаблицаМесяца.СкопироватьКолонки();
								ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаФизическогоЛица, ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ДатыПодразделенияКатегории, ДатаМесяца);
								ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаФизическогоЛица, ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ДатыПодразделенияКатегории, ДатаМесяца);
								ВспомогательнаяТаблицаМесяца.Очистить();
								ВспомогательнаяТаблицаВычетовМесяца.Очистить();
								ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаВычетовМесяца, ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатыПодразделенияКатегории, ДатаМесяца, "МесяцПериодаПредоставленияВычета, КодВычета");
								
								// Перенесем результат расчета месяца в основную таблицу с результатом расчета.
								ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, СтрокиНДФЛЗаГод, ВспомогательнаяТаблицаФизическогоЛица, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов);
							КонецЕсли;
							
						Иначе
							
							// Перенесем результат расчета месяца в основную таблицу с результатом расчета.
							ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, СтрокиНДФЛЗаГод, ВспомогательнаяТаблицаМесяца, ВычетыМесяца, ОписаниеВычетов);
							ВспомогательнаяТаблицаМесяца.Очистить();
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;		
				
				Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаГод Тогда
					Если ИсчисленоНДФЛЗаГод <> 0 Тогда
						// вписываем зачтенные авансовые платежи иностранцев
						ВписатьАвансовыеПлатежиВРезультатРасчета(СтрокиНДФЛЗаГод, ОстаткиПоАвансовымПлатежам, ИсчисленоНДФЛЗаГод, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
					Иначе // игнорируем различные переброски сумм одного вычета, но не между вычетами
						НетДанных = Истина;
						Для каждого ЭлементОписания Из ОписаниеВычетов Цикл
							ИмяКолонки = ЭлементОписания.Значение.ИмяКолонки;
							СуммаВычета = 0; ЕстьЗначенияВКолонке = Ложь;
							Для каждого СтрокаРезультата Из СтрокиНДФЛЗаГод Цикл
								СуммаВычета = СуммаВычета + СтрокаРезультата[ИмяКолонки];
								ЕстьЗначенияВКолонке = ЕстьЗначенияВКолонке Или СтрокаРезультата[ИмяКолонки] <> 0
							КонецЦикла;
							Если ЕстьЗначенияВКолонке И СуммаВычета = 0 Тогда
								Для каждого СтрокаРезультата Из СтрокиНДФЛЗаГод Цикл
									Если ИмяКолонки = "ПримененныйВычетЛичный" Тогда
										СтрокаРезультата.КодВычетаЛичный = ""	
									КонецЕсли;
									СтрокаРезультата[ИмяКолонки] = 0
								КонецЦикла;
							КонецЕсли;
							НетДанных = НетДанных И СуммаВычета = 0;
						КонецЦикла;
						Если НетДанных Тогда // удаляем незначащие строки за год из результата
							Для каждого СтрокаРезультата Из СтрокиНДФЛЗаГод Цикл
								РезультатРасчетаВспомогательный.Удалить(СтрокаРезультата)
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					ПродолжатьРасчет = Ложь;
				Иначе
					ИндексТекущейСтрокиТаблицыДоходов = ИндексТекущейСтрокиТаблицыДоходов + 1;
				КонецЕсли;	
				
			КонецЦикла;  // по налоговым периодам физ.лиц
			
			Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаПоФизическомуЛицу Тогда // заканчиваем обработку физ.лица
				Если ОкончательныйРасчет Тогда
					// Допишем учтенные в расчете документы-основания.
					ВписатьУчтенныеОснованияВРезультатРасчета(РезультатРасчетаВспомогательный, НеучтенныеРанееОснования, СтруктураПоискаПоФизическомуЛицу, ИсключаемыйРегистратор);
					СоответствиеФизическихЛиц.Удалить(ТекущееФизическоеЛицо);
				Иначе 
					// Перенесем результаты расчета в основную таблицу с учетом ограничений.
					ПереписатьМежрасчетныйНДФЛФизическогоЛицаВРезультат(РезультатРасчета, РезультатРасчетаВспомогательный, ДатаУдержанияИсчисленногоНалога, МесяцРасчета, ВсегоДоходовТекущегоРасчета + ДоходыТекущегоРасчетаНерезидента.Итог("ДоходыБезВычетов"));	
				КонецЕсли;
			КонецЕсли;	
			
			ИндексТекущейСтрокиТаблицыДоходов = ИндексТекущейСтрокиТаблицыДоходов + 1;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Продолжим расчет по нерезидентам.
	СтрокОтдельныхСумм = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Количество();
	Если СтрокОтдельныхСумм > 0 Тогда

		ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Сортировать(ПоляПоиска, Новый СравнениеЗначений);
		ИндексОбрабатываемойСтроки = 0;
		ТекущееФизическоеЛицо = Неопределено;
		ТекущийНалоговыйПериод = '00010101';
		МесяцНалоговогоПериодаПредыдущейСтроки = '00010101';
		СтруктураПоискаСтандартныхВычетов.ЭтоСоциальныйВычет = Ложь;
		СтруктураПоискаИмущественныхВычетов.ВидДвижения = ВидДвиженияНакопления.Расход;
		// Если выполняется окончательный расчет, будем вписывать результат расчета сразу в таблицы результата.
		// В случае с промежуточным расчетом будем использовать промежуточную таблицу, а потом переносить в результирующую с
		// учетом ограничений.
		Если Не ОкончательныйРасчет Тогда
			РезультатРасчетаВспомогательный = РезультатРасчета.СкопироватьКолонки();
		КонецЕсли;	
		
		Пока ИндексОбрабатываемойСтроки <= СтрокОтдельныхСумм - 1 Цикл
			
			ТекущаяСтрока = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно[ИндексОбрабатываемойСтроки];
			
			Если ТекущаяСтрока.ФизическоеЛицо <> ТекущееФизическоеЛицо Тогда 
				
				Если ТекущееФизическоеЛицо <> Неопределено Тогда  // Завершение обработки предыдущего физлица.
					
					// вычтем ранее исчисленное
					СтруктураПоискаИсчисленного.ФизическоеЛицо = ТекущееФизическоеЛицо;
					Для СчМесяцев = 1 По Месяц(МесяцНалоговогоПериодаПредыдущейСтроки) Цикл
						СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = ДобавитьМесяц(ТекущийНалоговыйПериод, СчМесяцев - 1);
						ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного), "КатегорияДохода, НалогПоСтавке13");	
					КонецЦикла;
					
					// впишем засчитываемые авансовые платежи
					ВписатьАвансовыеПлатежиВРезультатРасчета(ВспомогательнаяТаблицаМесяца, ОстаткиПоАвансовымПлатежам, Неопределено, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
					
					// перепишем результаты за последний налоговый период
					ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, Неопределено, ВспомогательнаяТаблицаМесяца, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов, ТекущийНалоговыйПериод, ПредоставленныеСтандартныеИСоциальныеВычеты, СтруктураПоискаСтандартныхВычетов, ИмущественныеВычеты, СтруктураПоискаИмущественныхВычетов, Месяц(МесяцНалоговогоПериодаПредыдущейСтроки));
					
					// окончательно доработаем результаты
					Если ОкончательныйРасчет Тогда
						Если СоответствиеФизическихЛиц[ТекущееФизическоеЛицо] <> Неопределено Тогда // Допишем учтенные в расчете документы-основания.
							СтруктураПоискаПоФизическомуЛицу.ФизическоеЛицо = ТекущееФизическоеЛицо;
							ВписатьУчтенныеОснованияВРезультатРасчета(РезультатРасчетаВспомогательный, НеучтенныеРанееОснования, СтруктураПоискаПоФизическомуЛицу, ИсключаемыйРегистратор);
						КонецЕсли;
					Иначе
						ПереписатьМежрасчетныйНДФЛФизическогоЛицаВРезультат(РезультатРасчета, РезультатРасчетаВспомогательный, ДатаУдержанияИсчисленногоНалога, МесяцРасчета);	
					КонецЕсли;
					
				КонецЕсли;
				
				ТекущееФизическоеЛицо = ТекущаяСтрока.ФизическоеЛицо; // Начало обработки очередного физлица.
				ТекущийНалоговыйПериод = НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода);
				ВспомогательнаяТаблицаМесяца.Очистить();
				Если Не ОкончательныйРасчет Тогда
					РезультатРасчетаВспомогательный.Очистить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСтандартныхВычетов, ТекущаяСтрока);
				ЗаполнитьЗначенияСвойств(СтруктураПоискаИмущественныхВычетов, ТекущаяСтрока);
			
			КонецЕсли;
			
			Если ТекущийНалоговыйПериод <> НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода) Тогда
				
				// Завершение обработки предыдущего налогового периода.
				
				// вычтем ранее исчисленное
				СтруктураПоискаИсчисленного.ФизическоеЛицо = ТекущееФизическоеЛицо;
				Для СчМесяцев = 0 По 11 Цикл
					СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = ДобавитьМесяц(ТекущийНалоговыйПериод, СчМесяцев);
					ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного), "КатегорияДохода, НалогПоСтавке13, НалогСПревышенияПоСтавке13");	
				КонецЦикла;
				
				// впишем засчитываемые авансовые платежи
				ВписатьАвансовыеПлатежиВРезультатРасчета(ВспомогательнаяТаблицаМесяца, ОстаткиПоАвансовымПлатежам, Неопределено, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
				
				// перепишем результаты за налоговый период
				ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, Неопределено, ВспомогательнаяТаблицаМесяца, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов, ТекущийНалоговыйПериод, ПредоставленныеСтандартныеИСоциальныеВычеты, СтруктураПоискаСтандартныхВычетов, ИмущественныеВычеты, СтруктураПоискаИмущественныхВычетов);
				
				// Начало обработки очередного налогового периода.
				
				ТекущийНалоговыйПериод = НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода); 
				ВспомогательнаяТаблицаМесяца.Очистить();
				
			КонецЕсли;
			
			// Расчет налога по очередной строке дохода.
			
			СтрокаНалога = ВспомогательнаяТаблицаМесяца.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалога, ТекущаяСтрока, "ФизическоеЛицо, Подразделение, КатегорияДохода");
			СтрокаНалога.НалогПоСтавке13 = Окр(ТекущаяСтрока.ДоходыБезВычетов * ТекущаяСтрока.СтавкаЧислом);
			СтрокаНалога.МесяцНалоговогоПериода = ТекущаяСтрока.ДатаПолученияДохода;
			
			МесяцНалоговогоПериодаПредыдущейСтроки = ТекущаяСтрока.МесяцНалоговогоПериода;
			ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
			
		КонецЦикла;
		
		Если ТекущееФизическоеЛицо <> Неопределено Тогда  // Завершение обработки последнего по порядку физлица.
			
			// вычтем ранее исчисленное
			СтруктураПоискаИсчисленного.ФизическоеЛицо = ТекущееФизическоеЛицо;
			Для СчМесяцев = 1 По Месяц(ТекущаяСтрока.МесяцНалоговогоПериода) Цикл
				СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = ДобавитьМесяц(ТекущийНалоговыйПериод, СчМесяцев - 1);
				ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного), "КатегорияДохода, НалогПоСтавке13");	
			КонецЦикла;
			
			// впишем засчитываемые авансовые платежи
			ВписатьАвансовыеПлатежиВРезультатРасчета(ВспомогательнаяТаблицаМесяца, ОстаткиПоАвансовымПлатежам, Неопределено, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
			
			// перепишем результаты за последний налоговый период
			ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, Неопределено, ВспомогательнаяТаблицаМесяца, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов, ТекущийНалоговыйПериод, ПредоставленныеСтандартныеИСоциальныеВычеты, СтруктураПоискаСтандартныхВычетов, ИмущественныеВычеты, СтруктураПоискаИмущественныхВычетов, Месяц(ТекущаяСтрока.МесяцНалоговогоПериода));
					
			// окончательно доработаем результаты
			Если ОкончательныйРасчет Тогда
				Если СоответствиеФизическихЛиц[ТекущееФизическоеЛицо] <> Неопределено Тогда // Допишем учтенные в расчете документы-основания.
					СтруктураПоискаПоФизическомуЛицу.ФизическоеЛицо = ТекущееФизическоеЛицо;
					ВписатьУчтенныеОснованияВРезультатРасчета(РезультатРасчетаВспомогательный, НеучтенныеРанееОснования, СтруктураПоискаПоФизическомуЛицу, ИсключаемыйРегистратор);
				КонецЕсли;
			Иначе
				ПереписатьМежрасчетныйНДФЛФизическогоЛицаВРезультат(РезультатРасчета, РезультатРасчетаВспомогательный, ДатаУдержанияИсчисленногоНалога, МесяцРасчета);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дозаполним категорию дохода значением по умолчанию.
	Для Каждого СтрокаРезультат Из РезультатРасчета Цикл
		Если Не ЗначениеЗаполнено(СтрокаРезультат.КатегорияДохода) Тогда
			СтрокаРезультат.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ОплатаТруда;
		КонецЕсли;
	КонецЦикла;

	// Допишем полученные ранее результаты расчета прошлых лет
	Для каждого СтрокаРезультат Из РезультатыПрошлыхЛет Цикл
		Если СтрокаРезультат.МесяцНалоговогоПериода < ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
			ЗаполнитьЗначенияСвойств(РезультатРасчета.Добавить(), СтрокаРезультат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатРасчета;
	
КонецФункции

// Выполняет расчет налога по отдельным доходам с учетом вида дохода и резидентства получателя дохода.
// Заполняет в переданной таблице Доходы колонку НДФЛ, если такой колонки нет - создает ее.
//
// Параметры:
//		ДатаПолученияДохода - дата -
//		Доходы - ТаблицаЗначений - содержит колонки
//			ФизическоеЛицо
//			КатегорияДохода
//			КодДохода 
//			СуммаДохода
//  	    КодВычета (необязательная)
//  	    СуммаВычета (необязательная)
//  	    НомерСтроки (необязательная)
// 
Процедура РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, Доходы) Экспорт
	
	УдалятьКолонкуВычета = Ложь;	
	Если Доходы.Колонки.Найти("СуммаВычета") = Неопределено Тогда
		Доходы.Колонки.Добавить("СуммаВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		УдалятьКолонкуВычета = Истина	
	КонецЕсли;
	УдалятьКолонкуКодаВычета = Ложь;	
	Если Доходы.Колонки.Найти("КодВычета") = Неопределено Тогда
		Доходы.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
		УдалятьКолонкуКодаВычета = Истина	
	КонецЕсли;
	УдалятьКолонкуНомера = Ложь;	
	Если Доходы.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Доходы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
		УдалятьКолонкуНомера = Истина;	
		НомерСтроки = 0;
		Для Каждого СтрокаРасчета Из Доходы Цикл
			СтрокаРасчета.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	УдалятьКолонкуКатегорияДохода = Ложь;	
	Если Доходы.Колонки.Найти("КатегорияДохода") = Неопределено Тогда
		Доходы.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		УдалятьКолонкуКатегорияДохода = Истина;
		Если Доходы.Колонки.Найти("КодДохода") <> Неопределено Тогда
			Для каждого СтрокаТЗ Из Доходы Цикл
				СтрокаТЗ.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(СтрокаТЗ.КодДохода)
			КонецЦикла;
		Иначе
			Доходы.ЗаполнитьЗначения(Перечисления.КатегорииДоходовНДФЛ.ПрочиеДоходы, "КатегорияДохода");
		КонецЕсли;
	КонецЕсли;
	
	Если Доходы.Колонки.Найти("НДФЛ") = Неопределено Тогда
		Доходы.Колонки.Добавить("НДФЛ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 0)));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Доходы", Доходы); 
	Запрос.УстановитьПараметр("ДатаПолученияДохода", ДатаПолученияДохода); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Список.НомерСтроки КАК НомерСтроки,
	|	Список.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Список.КодДохода КАК КодДохода,
	|	Список.КатегорияДохода КАК КатегорияДохода,
	|	Список.КодВычета КАК КодВычета,
	|	Список.СуммаДохода КАК СуммаДохода,
	|	Список.СуммаВычета КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСписокДоходов
	|ИЗ
	|	&Доходы КАК Список
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДоходов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокДоходов.КодДохода КАК КодДохода,
	|	СписокДоходов.КатегорияДохода КАК КатегорияДохода,
	|	&ДатаПолученияДохода КАК Период,
	|	ВидыДоходовНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТСписокДоходов КАК СписокДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО СписокДоходов.КодДохода = ВидыДоходовНДФЛ.Ссылка";
	Запрос.Выполнить();
	
	СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокДоходов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СписокДоходов.КодДохода.НеОблагаетсяУНалоговогоАгента
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((СписокДоходов.СуммаДохода - ВЫБОР
	|					КОГДА ЕСТЬNULL(СтавкаНДФЛПоСтавкеРезидента.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|						ТОГДА СписокДоходов.СуммаВычета
	|					КОГДА ЕСТЬNULL(ВидыВычетовНДФЛ.НеПредоставляетсяНерезидентам, ЛОЖЬ)
	|						ТОГДА 0
	|					ИНАЧЕ СписокДоходов.СуммаВычета
	|				КОНЕЦ) * СтавкаНДФЛПоСтавкеРезидента.СтавкаЧислом КАК ЧИСЛО(13, 0))
	|	КОНЕЦ КАК НДФЛ
	|ИЗ
	|	ВТСписокДоходов КАК СписокДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
	|		ПО СписокДоходов.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
	|			И СписокДоходов.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО СписокДоходов.КодВычета = ВидыВычетовНДФЛ.Ссылка";
	Налоги = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРасчета Из Доходы Цикл
		
		СтрокаРезультата = Налоги.Найти(СтрокаРасчета.НомерСтроки,"НомерСтроки");
		Если СтрокаРезультата <> Неопределено Тогда
			СтрокаРасчета.НДФЛ = СтрокаРезультата.НДФЛ; 
		Иначе 	
			СтрокаРасчета.НДФЛ = 0; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если УдалятьКолонкуВычета Тогда
		Доходы.Колонки.Удалить("СуммаВычета");
	КонецЕсли;
	Если УдалятьКолонкуКодаВычета Тогда
		Доходы.Колонки.Удалить("КодВычета");
	КонецЕсли;
	Если УдалятьКолонкуНомера Тогда
		Доходы.Колонки.Удалить("НомерСтроки");
	КонецЕсли;
	Если УдалятьКолонкуКатегорияДохода Тогда
		Доходы.Колонки.Удалить("КатегорияДохода");
	КонецЕсли;
	
КонецПроцедуры

// Устарела, ничего не делает, описание оставлено для совместимости.
// Предназначена для дополнения рассчитанных сумм НДФЛ информацией о суммах, подлежащих зачету в счет будущих платежей.
// Параметры:
//      Регистратор - ДокументСсылка - регистратор, для которого выполняется обработка исчисленного НДФЛ.
//		Организация - СправочникСсылка.Организации -
//		МесяцРасчета
//		РезультатыРасчетов - ТаблицаЗначений - с колонками
//				ФизическоеЛицо: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//              колонки сумм исчисленного налога и сумм налога к зачету/возврату, их имена передаются дополнительно
//				может содержать другие колонки
//		СтавкаНалога - ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента
//		ИмяКолонкиНалогаИсчисленного - строка -
//		ИмяКолонкиАвансаЗачтенного - строка -
//		ИмяКолонкиНалогаКЗачетуВозврату - строка -
//		ИсключатьДвиженияРегистратора - булево - признак того, надо ли при расчете исключать движения.
//		ОкончательныйРасчет - булево - признак того, надо ли при расчете учитывать все зарегистрированные доходы
//		                               (соответствует значению Истина).
//		ДатаУдержанияИсчисленногоНалога - дата - дата предполагаемого удержания налога, который был исчислен по
//		                                         Регистратору.
//
Процедура ВписатьВРезультатНалогиКЗачетуВозврату(Регистратор, Организация, МесяцРасчета, РезультатыРасчетов, СтавкаНалога, ИмяКолонкиНалогаИсчисленного, ИмяКолонкиАвансаЗачтенного, ИмяКолонкиНалогаКЗачетуВозврату, ИсключатьДвиженияРегистратора = Истина, ОкончательныйРасчет = Истина, ДатаУдержанияИсчисленногоНалога = Неопределено) Экспорт 
	
	Возврат	
	
КонецПроцедуры

// Составляет структуру для заполнения таблиц НДФЛ, ПримененныеВычетыНаДетейИИмущественные в форме документов.
// 
// Параметры:
//	МенеджерВременныхТаблиц - в котором определена таблица ВТФизическиеЛица
//		(подробнее см. комментарий к методу РассчитатьНалогПоОсновнойСтавке)
//  ДокументСсылка.
//	Организация
//	МесяцРасчета
//	ОкончательныйРасчет - булево - признак того, надо ли при расчете учитывать все зарегистрированные доходы
//	                               (соответствует значению Истина).
//	ДатаУдержанияИсчисленногоНалога - дата - дата предполагаемого удержания налога, который был исчислен по Регистратору.
//
// Возвращаемое значение - структура для заполнения таблиц НДФЛ и ПримененныеВычетыНаДетейИИмущественные.
//
Функция РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, ДокументСсылка, Организация, МесяцНачисления, ОкончательныйРасчет = Истина, ДатаУдержанияИсчисленногоНалога = Неопределено, ДвиженияТекущегоРегистратора = Неопределено) Экспорт
	
	Если ЗарплатаКадры.ВыполнятьРасчетЗарплатыБезОптимизации() Тогда
		Если ДвиженияТекущегоРегистратора <> Неопределено Тогда			
			Если ДвиженияТекущегоРегистратора.СведенияОДоходахНДФЛ.Записывать Тогда
				ДвиженияТекущегоРегистратора.СведенияОДоходахНДФЛ.Записать();
				ДвиженияТекущегоРегистратора.СведенияОДоходахНДФЛ.Записывать = Ложь;
			КонецЕсли;
			Если ДвиженияТекущегоРегистратора.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать Тогда
				ДвиженияТекущегоРегистратора.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записать();
				ДвиженияТекущегоРегистратора.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Ложь;
			КонецЕсли;
		КонецЕсли;
		НДФЛ = РассчитатьНалогПоОсновнойСтавкеБезОптимизации(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц,,,,ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога);
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛица КАК ДанныеДокумента";
		
		НДФЛ = РассчитатьНалогПоОсновнойСтавке(ДокументСсылка, Организация, МесяцНачисления, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"),,,ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора);
		
	КонецЕсли;
	
	Возврат ДанныеОРезультатахРасчетаНДФЛДляДокумента(НДФЛ)
	
КонецФункции

// Предназначена для выделения сумм НДФЛ, которые следует учесть в расчетах с сотрудниками
//
// Параметры:
//      ИсключаемыйРегистратор - ДокументСсылка - регистратор для которого выполняется расчет НДФЛ.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, на которую будут прочитаны остатки неудержанного налога.
//		РезультатыРасчетов - ТаблицаЗначений - с колонками
//				ФизическоеЛицо: должно быть непустым
//				МесяцНалоговогоПериода, должно быть непустым
//              колонки сумм исчисленного налога (НалогПоСтавке13, НалогСПревышенияПоСтавке13) и сумм зачтенных авансовых платежей (для работающих
//              по патенту, ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13), их имена могут быть переданы дополнительно
//				может содержать другие колонки
//		ИмяКолонкиНалогаИсчисленного - строка -
//		ИмяКолонкиАвансаЗачтенного - строка -
//
//  Возвращаемое значение - таблица значений с колонками
//			ФизическоеЛицо
//          НалоговыйПериод - число
//			ИсчисленоНалога -  
//			НеудержаноНалога -  
//
Функция НалогКУдержаниюПоРезультатамРасчета(ИсключаемыйРегистратор, Организация, ДатаОперации, РезультатыРасчетов, ИмяКолонкиНалогаИсчисленного = "НалогПоСтавке13", ИмяКолонкиАвансаЗачтенного = "ЗачтеноАвансовыхПлатежейПоСтавке13") Экспорт

	ПереченьКолонок = "ФизическоеЛицо, МесяцНалоговогоПериода," + ИмяКолонкиНалогаИсчисленного + "," + ИмяКолонкиАвансаЗачтенного;
	Если ИмяКолонкиНалогаИсчисленного = "НалогПоСтавке13" Тогда
		ПереченьКолонок = ПереченьКолонок + ",НалогСПревышенияПоСтавке13,ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13";
	КонецЕсли;

	Налоги = РезультатыРасчетов.Скопировать(, ПереченьКолонок);
	Налоги.Колонки.Добавить("ИсчисленоНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Налоги.Колонки.Добавить("НеудержаноНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Налоги.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	Для каждого СтрокаТЗ Из Налоги Цикл
		СтрокаТЗ.НалоговыйПериод = Год(СтрокаТЗ.МесяцНалоговогоПериода);
		СтрокаТЗ.ИсчисленоНалога = СтрокаТЗ[ИмяКолонкиНалогаИсчисленного] - СтрокаТЗ[ИмяКолонкиАвансаЗачтенного];
		Если ИмяКолонкиНалогаИсчисленного = "НалогПоСтавке13" Тогда
			СтрокаТЗ.ИсчисленоНалога = СтрокаТЗ.ИсчисленоНалога + СтрокаТЗ.НалогСПревышенияПоСтавке13 - СтрокаТЗ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Регистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизическиеЛица", Налоги.ВыгрузитьКолонку("ФизическоеЛицо"));
	Запрос.УстановитьПараметр("ДатаОперации", КонецДня(ДатаОперации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГОД(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаОстаток + РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышенияОстаток КАК НеудержаноНалога
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Остатки(
	|			&ДатаОперации,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И Организация = &Организация
	|				И ФизическоеЛицо В (&ФизическиеЛица)) КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГОД(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода),
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма - РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма + РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор = &Регистратор
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация = &Организация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)";
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), Налоги);
	
	Налоги.Свернуть("ФизическоеЛицо,НалоговыйПериод", "ИсчисленоНалога,НеудержаноНалога");
	СтрокиКУдалению = Новый Соответствие;
	Для каждого СтрокаТаблицыНалогов Из Налоги Цикл
	    Если СтрокаТаблицыНалогов.ИсчисленоНалога = 0 Тогда
			СтрокиКУдалению.Вставить(СтрокаТаблицыНалогов)
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		Налоги.Удалить(УдаляемаяСтрока.Ключ);		
	КонецЦикла;	
	
	Возврат Налоги

КонецФункции

// Определяем, каким алгоритмом регистрирует доходы документ-регистратор, и вписываем в движения.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Регистратор - ДокументСсылка - 
//
Процедура ПроставитьПорядокУчетаДоходовВ6НДФЛ(Движения, Регистратор) Экспорт 

	Если Не ЗначениеЗаполнено(Регистратор) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.УчитыватьВыплаченныйДоходВ6НДФЛ КАК УчитыватьВыплаченныйДоходВ6НДФЛ
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование = &ДокументОснование
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)";
	Запрос.УстановитьПараметр("ДокументОснование", Регистратор);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		УчитыватьВыплаченныйДоходИзНалогов = Истина;
	Иначе
		Выборка = Результат.Выбрать(); 
		Выборка.Следующий();
		УчитыватьВыплаченныйДоходИзНалогов = Выборка.УчитыватьВыплаченныйДоходВ6НДФЛ;
	КонецЕсли;
	
	Для каждого Движение Из Движения.СведенияОДоходахНДФЛ Цикл
		Движение.НеУчитыватьДоходВ6НДФЛ = УчитыватьВыплаченныйДоходИзНалогов
	КонецЦикла;
	
КонецПроцедуры

// Вписывает в переданную временную таблицу ВТНалогУдержанный колонки СуммаВыплаченногоДохода и СуммаОтпускныхБольничных 
// (из общей суммы выплат), содержащую сумму дохода из учета по НДФЛ, соответствующего тому, что реально выплатили.
// Расчет производится по операциям удержания налога с 1 декабря 2015 года, т.к. показатели дохода используются в рег.отчетности
// начиная с 2016 года.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - должен содержать временные таблицы 
//      	ВТСписокСотрудников, с данными о выплатах вида:
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты.
//          	ДокументОснование, необязательная
//          	СуммаНачисленная, необязательная
//          	СуммаВыплаченная, необязательная, 
//          	ОкончательныйРасчет - булево - необязательная, если отсутствует - считается, что содержит значения Истина
//			Если колонки СуммаНачисленная, СуммаВыплаченная отсутствуют, возможная частичная выплата не будет учтена.
//			ВТНалогУдержанный с полями
//				ФизическоеЛицо: должно быть непустым
//  	       	СтавкаНалогообложенияРезидента: должно быть непустым.
//				МесяцНалоговогоПериода: должно быть непустым.
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				КодДохода
//				КатегорияДохода
//				Сумма
//				РегистрацияВНалоговомОргане, тип СправочникСсылка.РегистрацииВНалоговомОргане 
//				ДокументОснование
//				ВключатьВДекларациюПоНалогуНаПрибыль
//		Регистратор - ДокументСсылка - документ выплаты
//		ДатаВыплаты - дата - дата выплаты (перечисления на счета сотрудников) из документа выплаты
//      ДатаОперации - дата - дата, которой будет зарегистрировано движение. 
//
Процедура ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерВременныхТаблиц, Регистратор, ДатаВыплаты = Неопределено, ДатаОперации = Неопределено) Экспорт
	
	// Рассчитываемые показатели используются в отчетности с 2016 по 2020 годы.
	Если ЗначениеЗаполнено(ДатаОперации) И ДатаОперации < '20151201' Тогда 
		Возврат
	КонецЕсли;
	НеЗаполнятьФактическийДоход = ЗначениеЗаполнено(ДатаВыплаты) И ДатаВыплаты > '20201231';
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УточненнаяДатаВыплаты = ?(Не ЗначениеЗаполнено(ДатаВыплаты), '00010101', НачалоДня(ДатаВыплаты));
	Если Не ЗначениеЗаполнено(УточненнаяДатаВыплаты) Тогда
		Запрос.УстановитьПараметр("СФиксированнойДатойПолученияДохода", Перечисления.КатегорииДоходовНДФЛ.СФиксированнойДатойПолученияДохода());
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
		|ИЗ
		|	ВТНалогУдержанный КАК Налоги
		|ГДЕ
		|	НЕ Налоги.КатегорияДохода В (&СФиксированнойДатойПолученияДохода)";
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			УточненнаяДатаВыплаты = Результат.Выгрузить()[0].МесяцНалоговогоПериода
		КонецЕсли;
	КонецЕсли;
	УточненнаяДатаОперации = ДатаОперации;
	Если Не ЗначениеЗаполнено(ДатаОперации) Тогда
		УточненнаяДатаОперации = КонецДня(УточненнаяДатаВыплаты)
	КонецЕсли;
	Если УточненнаяДатаВыплаты < '20170101' Тогда
		УточненнаяДатаВыплаты = '00010101'
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ДатаВыплаты", УточненнаяДатаВыплаты);
	Запрос.УстановитьПараметр("ДатаОперации", УточненнаяДатаОперации);
	Запрос.УстановитьПараметр("ДатаОперацииНеУказана", Не ЗначениеЗаполнено(УточненнаяДатаОперации));
	Запрос.УстановитьПараметр("ДатаВыплатыНеУказана", Не ЗначениеЗаполнено(УточненнаяДатаВыплаты));
	Запрос.УстановитьПараметр("ДоляПолнойВыплаты", ДоляПолнойВыплаты());
	Запрос.УстановитьПараметр("НеЗаполнятьФактическийДоход", НеЗаполнятьФактическийДоход);
	
	КолонкиРезультата = МенеджерВременныхТаблиц.Таблицы["ВТСписокСотрудников"].Колонки;
	УдалитьВТ = Новый Массив;
	Если КолонкиРезультата.Найти("ДокументОснование") = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	НЕОПРЕДЕЛЕНО КАК ДокументВыплаты
		|ПОМЕСТИТЬ ВТИныеОснования"
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.ДокументОснование КАК ДокументОснование,
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.ДокументОснование КАК ДокументВыплаты
		|ПОМЕСТИТЬ ВТОснованияРегистратора
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокСотрудников КАК ФизическиеЛица
		|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		|			И СведенияОДоходахНДФЛ.Регистратор = ФизическиеЛица.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОснованияРегистратора.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОснованияРегистратора.ДокументВыплаты КАК ДокументВыплаты
		|ПОМЕСТИТЬ ВТДокументыСОднимОснованием
		|ИЗ
		|	ВТОснованияРегистратора КАК ОснованияРегистратора
		|
		|СГРУППИРОВАТЬ ПО
		|	ОснованияРегистратора.ФизическоеЛицо,
		|	ОснованияРегистратора.ДокументВыплаты
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОснованияРегистратора.ДокументОснование) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОснованияРегистратора.ДокументОснование КАК ДокументОснование,
		|	ОснованияРегистратора.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОснованияРегистратора.ДокументВыплаты КАК ДокументВыплаты
		|ПОМЕСТИТЬ ВТИныеОснования
		|ИЗ
		|	ВТОснованияРегистратора КАК ОснованияРегистратора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыСОднимОснованием КАК ДокументыСОднимОснованием
		|		ПО ОснованияРегистратора.ФизическоеЛицо = ДокументыСОднимОснованием.ФизическоеЛицо
		|			И ОснованияРегистратора.ДокументВыплаты = ДокументыСОднимОснованием.ДокументВыплаты
		|ГДЕ
		|	ОснованияРегистратора.ДокументОснование <> ОснованияРегистратора.ДокументВыплаты";
		УдалитьВТ.Добавить("ВТОснованияРегистратора");
		УдалитьВТ.Добавить("ВТДокументыСОднимОснованием");
	КонецЕсли;
	Запрос.Выполнить();     
	УдалитьВТ.Добавить("ВТИныеОснования");
	Если КолонкиРезультата.Найти("ОкончательныйРасчет") = Неопределено Тогда
		ТекстЗапроса =  
		"ВЫБРАТЬ
		|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ИныеОснования.ДокументВыплаты ЕСТЬ НЕ NULL 
		|			ТОГДА ИныеОснования.ДокументОснование
		|		ИНАЧЕ СписокСотрудников.ДокументОснование
		|	КОНЕЦ КАК ДокументОснование,
		|	СписокСотрудников.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СписокСотрудников.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(СписокСотрудников.СуммаНачисленная) КАК СуммаНачисленная,
		|	СУММА(СписокСотрудников.СуммаВыплаченная) КАК СуммаВыплаченная,
		|	СУММА(СписокСотрудников.СуммаВыплаты) КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТВыплаченоПоИФ
		|ИЗ
		|	ВТСписокСотрудников КАК СписокСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИныеОснования КАК ИныеОснования
		|		ПО СписокСотрудников.ФизическоеЛицо = ИныеОснования.ФизическоеЛицо
		|			И СписокСотрудников.ДокументОснование = ИныеОснования.ДокументВыплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокСотрудников.СтатьяФинансирования,
		|	СписокСотрудников.СтатьяРасходов,
		|	СписокСотрудников.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ИныеОснования.ДокументВыплаты ЕСТЬ НЕ NULL 
		|			ТОГДА ИныеОснования.ДокументОснование
		|		ИНАЧЕ СписокСотрудников.ДокументОснование
		|	КОНЕЦ";
	Иначе
		ТекстЗапроса =  
		"ВЫБРАТЬ
		|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ИныеОснования.ДокументВыплаты ЕСТЬ НЕ NULL 
		|			ТОГДА ИныеОснования.ДокументОснование
		|		ИНАЧЕ СписокСотрудников.ДокументОснование
		|	КОНЕЦ КАК ДокументОснование,
		|	СписокСотрудников.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СписокСотрудников.СтатьяРасходов КАК СтатьяРасходов,
		|	СУММА(СписокСотрудников.СуммаНачисленная) КАК СуммаНачисленная,
		|	СУММА(СписокСотрудников.СуммаВыплаченная) КАК СуммаВыплаченная,
		|	СУММА(СписокСотрудников.СуммаВыплаты) КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТВыплаченоПоИФ
		|ИЗ
		|	ВТСписокСотрудников КАК СписокСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИныеОснования КАК ИныеОснования
		|		ПО СписокСотрудников.ФизическоеЛицо = ИныеОснования.ФизическоеЛицо
		|			И СписокСотрудников.ДокументОснование = ИныеОснования.ДокументВыплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
		|		ПО СписокСотрудников.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
		|			И СписокСотрудников.ДокументОснование = ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование
		|			И (НЕ СписокСотрудников.ОкончательныйРасчет)
		|ГДЕ
		|	НЕ ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.УдержатьНалогПриВыплатеЗарплаты, ЛОЖЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокСотрудников.СтатьяФинансирования,
		|	СписокСотрудников.СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ИныеОснования.ДокументВыплаты ЕСТЬ НЕ NULL 
		|			ТОГДА ИныеОснования.ДокументОснование
		|		ИНАЧЕ СписокСотрудников.ДокументОснование
		|	КОНЕЦ,
		|	СписокСотрудников.ФизическоеЛицо";
	КонецЕсли;
	Если КолонкиРезультата.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.ДокументОснование","НЕОПРЕДЕЛЕНО") 
	КонецЕсли;
	Если КолонкиРезультата.Найти("СуммаНачисленная") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.СуммаНачисленная","0") 
	КонецЕсли;
	Если КолонкиРезультата.Найти("СуммаВыплаченная") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.СуммаВыплаченная","0") 
	КонецЕсли;
	Если КолонкиРезультата.Найти("СтатьяФинансирования") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.СтатьяФинансирования","НЕОПРЕДЕЛЕНО") 
	КонецЕсли;
	Если КолонкиРезультата.Найти("СтатьяРасходов") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.СтатьяРасходов","НЕОПРЕДЕЛЕНО") 
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВыплаченоПоИФ");
	
	// АПК:96-выкл Использование ОБЪЕДИНИТЬ для таблицы ВТФизическиеЛица необходимо
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокСотрудников.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТНалогУдержанный КАК СписокСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСотрудников.ФизическоеЛицо,
	|	СписокСотрудников.ДокументОснование
	|ИЗ
	|	ВТВыплаченоПоИФ КАК СписокСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОДоходахНДФЛ.Регистратор КАК ДокументОснование,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|			ТОГДА СведенияОДоходахНДФЛ.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодДохода.КодПрименяемыйВНалоговойОтчетностиС2010Года = ""2012""
	|			ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|		КОГДА СведенияОДоходахНДФЛ.КодДохода.КодПрименяемыйВНалоговойОтчетностиС2010Года = ""2300""
	|			ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОтпускныхБольничных,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код1010)
	|			ТОГДА СведенияОДоходахНДФЛ.КодДохода
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	КОНЕЦ КАК КодДохода,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ КАК НеУчитыватьДоходВ6НДФЛ,
	|	СведенияОДоходахНДФЛ.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СведенияОДоходахНДФЛ.СтатьяРасходов КАК СтатьяРасходов,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДоходаФиксирована КАК ДатаПолученияДоходаФиксирована,
	|	СведенияОДоходахНДФЛ.УстаревшаяДатаПолученияДохода КАК УстаревшаяДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК УчитыватьСтатьиФинансирования
	|ПОМЕСТИТЬ ВТДанныеУчетаДоходов
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.Регистратор = ФизическиеЛица.ДокументОснование
	|ГДЕ
	|	СведенияОДоходахНДФЛ.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И СведенияОДоходахНДФЛ.ДокументОснование = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.ДокументОснование = НЕОПРЕДЕЛЕНО
	|			ТОГДА СведенияОДоходахНДФЛ.Регистратор
	|		ИНАЧЕ СведенияОДоходахНДФЛ.ДокументОснование
	|	КОНЕЦ,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.СуммаДохода,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|			ТОГДА СведенияОДоходахНДФЛ.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодДохода.КодПрименяемыйВНалоговойОтчетностиС2010Года = ""2012""
	|			ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|		КОГДА СведенияОДоходахНДФЛ.КодДохода.КодПрименяемыйВНалоговойОтчетностиС2010Года = ""2300""
	|			ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код1010)
	|			ТОГДА СведенияОДоходахНДФЛ.КодДохода
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	КОНЕЦ,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.КатегорияДохода,
	|	СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ,
	|	СведенияОДоходахНДФЛ.СтатьяФинансирования,
	|	СведенияОДоходахНДФЛ.СтатьяРасходов,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДоходаФиксирована,
	|	СведенияОДоходахНДФЛ.УстаревшаяДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.ДокументОснование = ФизическиеЛица.ДокументОснование
	|ГДЕ
	|	СведенияОДоходахНДФЛ.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И СведенияОДоходахНДФЛ.ДокументОснование <> НЕОПРЕДЕЛЕНО";
	Запрос.Выполнить();
	// АПК:96-вкл

	УдалитьВТ.Добавить("ВТФизическиеЛица");
	УдалитьВТ.Добавить("ВТДанныеУчетаДоходов");

	Если НеЗаполнятьФактическийДоход Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТДанныеУчетаДоходов.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТДанныеУчетаДоходов КАК ВТДанныеУчетаДоходов
		|ГДЕ
		|	ВТДанныеУчетаДоходов.СуммаОтпускныхБольничных <> 0";
		Если Запрос.Выполнить().Пустой() Тогда
			ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокСотрудников.ДокументОснование КАК ДокументОснование,
	|	СУММА(СписокСотрудников.СуммаНачисленная) КАК СуммаНачисленная,
	|	СУММА(СписокСотрудников.СуммаВыплаченная) КАК СуммаВыплаченная,
	|	СУММА(СписокСотрудников.СуммаВыплаты) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТВыплаченоПоВедомости
	|ИЗ
	|	ВТВыплаченоПоИФ КАК СписокСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.ДокументОснование,
	|	СписокСотрудников.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Налоги.КодДохода КАК КодДохода,
	|	Налоги.КатегорияДохода КАК КатегорияДохода,
	|	Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Налоги.Подразделение КАК Подразделение,
	|	Налоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.ДокументОснование КАК ДокументОснование,
	|	СУММА(Налоги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТДанныеОНалогах
	|ИЗ
	|	ВТНалогУдержанный КАК Налоги
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ФизическоеЛицо,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНалогУдержанный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(СписокСотрудников.СуммаНачисленная) КАК СуммаНачисленная,
	|	СУММА(СписокСотрудников.СуммаВыплаченная) КАК СуммаВыплаченная,
	|	МАКСИМУМ(СписокСотрудников.СуммаВыплаты) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТСуммыВыплатыБезОснований
	|ИЗ
	|	ВТВыплаченоПоВедомости КАК СписокСотрудников
	|ГДЕ
	|	СписокСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОДоходахНДФЛ.ДокументОснование КАК ДокументОснование,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|	СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаВычета,
	|	СведенияОДоходахНДФЛ.СуммаОтпускныхБольничных КАК СуммаОтпускныхБольничных,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ
	|				ТОГДА 0
	|			КОГДА СведенияОДоходахНДФЛ.УчитыватьСтатьиФинансирования
	|				ТОГДА ВЫБОР
	|						КОГДА ВыплаченоПоИФ.СуммаНачисленная = 0
	|							ТОГДА 1
	|						КОГДА ВыплаченоПоИФ.СуммаНачисленная < 0
	|								И ВыплаченоПоИФ.СуммаВыплаты = ВыплаченоПоИФ.СуммаНачисленная
	|							ТОГДА 1
	|						КОГДА ВыплаченоПоИФ.СуммаВыплаченная + ВыплаченоПоИФ.СуммаВыплаты > ВыплаченоПоИФ.СуммаНачисленная * &ДоляПолнойВыплаты
	|							ТОГДА 1
	|						КОГДА ВыплаченоПоИФ.СуммаВыплаченная ЕСТЬ НЕ NULL 
	|							ТОГДА (ВыплаченоПоИФ.СуммаВыплаченная + ВыплаченоПоИФ.СуммаВыплаты) / ВыплаченоПоИФ.СуммаНачисленная
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ВыплаченоПоВедомости.СуммаНачисленная = 0
	|				ТОГДА 1
	|			КОГДА ВыплаченоПоВедомости.СуммаНачисленная < 0
	|					И ВыплаченоПоВедомости.СуммаВыплаты = ВыплаченоПоВедомости.СуммаНачисленная
	|				ТОГДА 1
	|			КОГДА ВыплаченоПоВедомости.СуммаВыплаченная + ВыплаченоПоВедомости.СуммаВыплаты > ВыплаченоПоВедомости.СуммаНачисленная * &ДоляПолнойВыплаты
	|				ТОГДА 1
	|			КОГДА ВыплаченоПоВедомости.СуммаВыплаченная ЕСТЬ НЕ NULL 
	|				ТОГДА (ВыплаченоПоВедомости.СуммаВыплаченная + ВыплаченоПоВедомости.СуммаВыплаты) / ВыплаченоПоВедомости.СуммаНачисленная
	|			КОГДА СуммыВыплатыБезОснований.СуммаНачисленная = 0
	|				ТОГДА 1
	|			КОГДА СуммыВыплатыБезОснований.СуммаВыплаченная + СуммыВыплатыБезОснований.СуммаВыплаты > СуммыВыплатыБезОснований.СуммаНачисленная * &ДоляПолнойВыплаты
	|				ТОГДА 1
	|			ИНАЧЕ (СуммыВыплатыБезОснований.СуммаВыплаченная + СуммыВыплатыБезОснований.СуммаВыплаты) / СуммыВыплатыБезОснований.СуммаНачисленная
	|		КОНЕЦ, 1) КАК ДоляВыплаты,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ КАК НеУчитыватьДоходВ6НДФЛ,
	|	СведенияОДоходахНДФЛ.УчитыватьСтатьиФинансирования КАК УчитыватьСтатьиФинансирования
	|ПОМЕСТИТЬ ВТСтрокиДоходов
	|ИЗ
	|	ВТДанныеУчетаДоходов КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченоПоВедомости КАК ВыплаченоПоВедомости
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ВыплаченоПоВедомости.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.ДокументОснование = ВыплаченоПоВедомости.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченоПоИФ КАК ВыплаченоПоИФ
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ВыплаченоПоИФ.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.ДокументОснование = ВыплаченоПоИФ.ДокументОснование
	|			И СведенияОДоходахНДФЛ.СтатьяФинансирования = ВыплаченоПоИФ.СтатьяФинансирования
	|			И СведенияОДоходахНДФЛ.СтатьяРасходов = ВыплаченоПоИФ.СтатьяРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыВыплатыБезОснований КАК СуммыВыплатыБезОснований
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = СуммыВыплатыБезОснований.ФизическоеЛицо
	|			И (СуммыВыплатыБезОснований.СуммаВыплаты > 0)
	|ГДЕ
	|	(СведенияОДоходахНДФЛ.ДатаПолученияДоходаФиксирована
	|			ИЛИ &ДатаВыплатыНеУказана)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
	|	СведенияОДоходахНДФЛ.ДокументОснование,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.СуммаДохода,
	|	СведенияОДоходахНДФЛ.СуммаВычета,
	|	СведенияОДоходахНДФЛ.СуммаОтпускныхБольничных,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ
	|				ТОГДА 0
	|			КОГДА СведенияОДоходахНДФЛ.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА ВыплаченоПоИФ.СуммаВыплаченная ЕСТЬ НЕ NULL 
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ, 1),
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.КатегорияДохода,
	|	СведенияОДоходахНДФЛ.НеУчитыватьДоходВ6НДФЛ,
	|	СведенияОДоходахНДФЛ.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|ИЗ
	|	ВТДанныеУчетаДоходов КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыплаченоПоИФ КАК ВыплаченоПоИФ
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ВыплаченоПоИФ.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.ДокументОснование = ВыплаченоПоИФ.ДокументОснование
	|			И СведенияОДоходахНДФЛ.СтатьяФинансирования = ВыплаченоПоИФ.СтатьяФинансирования
	|			И СведенияОДоходахНДФЛ.СтатьяРасходов = ВыплаченоПоИФ.СтатьяРасходов
	|ГДЕ
	|	НЕ СведенияОДоходахНДФЛ.ДатаПолученияДоходаФиксирована
	|	И СведенияОДоходахНДФЛ.ДатаПолученияДохода <= &ДатаВыплаты
	|	И СведенияОДоходахНДФЛ.УстаревшаяДатаПолученияДохода <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОДоходахНДФЛ.ДокументОснование КАК ДокументОснование,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаОтпускныхБольничных) КАК ВаловаяСуммаОтпускныхБольничных,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК ВаловаяСуммаДохода,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода - СведенияОДоходахНДФЛ.СуммаВычета) КАК ВаловаяСуммаОблагаемогоДохода,
	|	СведенияОДоходахНДФЛ.ДоляВыплаты * СУММА(СведенияОДоходахНДФЛ.СуммаОтпускныхБольничных) КАК СуммаОтпускныхБольничных,
	|	СведенияОДоходахНДФЛ.ДоляВыплаты * СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК СуммаДохода,
	|	СведенияОДоходахНДФЛ.ДоляВыплаты * СУММА(СведенияОДоходахНДФЛ.СуммаДохода - СведенияОДоходахНДФЛ.СуммаВычета) КАК СуммаОблагаемогоДохода,
	|	СведенияОДоходахНДФЛ.ДоляВыплаты КАК ДоляВыплаты,
	|	СведенияОДоходахНДФЛ.УчитыватьСтатьиФинансирования КАК УчитыватьСтатьиФинансирования
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	ВТСтрокиДоходов КАК СведенияОДоходахНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахНДФЛ.ДокументОснование,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
	|	СведенияОДоходахНДФЛ.ДоляВыплаты,
	|	СведенияОДоходахНДФЛ.УчитыватьСтатьиФинансирования,
	|	СведенияОДоходахНДФЛ.КатегорияДохода
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СведенияОДоходахНДФЛ.СуммаОтпускныхБольничных) <> 0
	|		ИЛИ СУММА(СведенияОДоходахНДФЛ.СуммаДохода) <> 0
	|		ИЛИ СУММА(СведенияОДоходахНДФЛ.СуммаВычета) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиДоходов.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(СтрокиДоходов.НеУчитыватьДоходВ6НДФЛ) КАК НеУчитыватьДоходВ6НДФЛ
	|ПОМЕСТИТЬ ВТДокументыОснования
	|ИЗ
	|	ВТСтрокиДоходов КАК СтрокиДоходов
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиДоходов.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления КАК СрокПеречисления,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода КАК СуммаВыплаченногоДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период КАК Период
	|ПОМЕСТИТЬ ВТРасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ИЗ
	|	ВТДокументыОснования КАК ДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО ДокументыОснования.ДокументОснование = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Доходы.ДокументОснование КАК ДокументОснование,
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	Доходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Доходы.КодДохода КАК КодДохода,
	|	Доходы.КатегорияДохода КАК КатегорияДохода,
	|	Доходы.Подразделение КАК Подразделение,
	|	СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода) КАК СуммаВыплаченногоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА Доходы.СуммаДохода = 0
	|				ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода
	|			ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода / Доходы.СуммаДохода * Доходы.СуммаОблагаемогоДохода
	|		КОНЕЦ) КАК СуммаОблагаемогоДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления КАК СрокПеречисления,
	|	Доходы.УчитыватьСтатьиФинансирования КАК УчитыватьСтатьиФинансирования
	|ПОМЕСТИТЬ ВТЗарегистрированоРанее
	|ИЗ
	|	(ВЫБРАТЬ
	|		Доходы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		Доходы.ДокументОснование КАК ДокументОснование,
	|		Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Доходы.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|		Доходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|		Доходы.КодДохода КАК КодДохода,
	|		Доходы.Подразделение КАК Подразделение,
	|		СУММА(Доходы.СуммаОблагаемогоДохода) КАК СуммаОблагаемогоДохода,
	|		СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
	|		Доходы.УчитыватьСтатьиФинансирования КАК УчитыватьСтатьиФинансирования,
	|		Доходы.КатегорияДохода КАК КатегорияДохода
	|	ИЗ
	|		ВТДоходы КАК Доходы
	|	ГДЕ
	|		Доходы.ДоляВыплаты > 0
	|		И Доходы.УчитыватьСтатьиФинансирования
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Доходы.ГоловнаяОрганизация,
	|		Доходы.ДокументОснование,
	|		Доходы.ФизическоеЛицо,
	|		Доходы.СтавкаНалогообложения,
	|		Доходы.РегистрацияВНалоговомОргане,
	|		Доходы.ДатаПолученияДохода,
	|		Доходы.ВключатьВДекларациюПоНалогуНаПрибыль,
	|		Доходы.КодДохода,
	|		Доходы.Подразделение,
	|		Доходы.УчитыватьСтатьиФинансирования,
	|		Доходы.КатегорияДохода) КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО Доходы.ГоловнаяОрганизация = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация
	|			И Доходы.ФизическоеЛицо = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо
	|			И Доходы.СтавкаНалогообложения = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента
	|			И Доходы.ДатаПолученияДохода = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода
	|			И Доходы.КодДохода = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода
	|			И Доходы.РегистрацияВНалоговомОргане = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане
	|			И Доходы.Подразделение = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение
	|			И Доходы.ВключатьВДекларациюПоНалогуНаПрибыль = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль
	|			И Доходы.ДокументОснование = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование
	|			И Доходы.КатегорияДохода = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода
	|			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период <= &ДатаОперации
	|				ИЛИ &ДатаОперацииНеУказана)
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ГоловнаяОрганизация,
	|	Доходы.ДокументОснование,
	|	Доходы.ФизическоеЛицо,
	|	Доходы.СтавкаНалогообложения,
	|	Доходы.РегистрацияВНалоговомОргане,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Доходы.КодДохода,
	|	Доходы.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления,
	|	Доходы.УчитыватьСтатьиФинансирования,
	|	Доходы.КатегорияДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументамОснованиям.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументамОснованиям.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	ДокументамОснованиям.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	ДокументамОснованиям.Подразделение КАК Подразделение,
	|	ДокументамОснованиям.КатегорияДохода КАК КатегорияДохода,
	|	ДокументамОснованиям.КодДохода КАК КодДохода,
	|	ДокументамОснованиям.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДокументамОснованиям.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ДокументамОснованиям.ДокументОснование КАК ДокументОснование,
	|	СУММА(ДокументамОснованиям.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ДокументамОснованиям.СуммаОблагаемогоДохода) КАК СуммаОблагаемогоДохода,
	|	СУММА(ДокументамОснованиям.СуммаОтпускныхБольничных) КАК СуммаОтпускныхБольничных,
	|	МИНИМУМ(ДокументамОснованиям.УчитыватьСтатьиФинансирования) КАК УчитыватьСтатьиФинансирования
	|ПОМЕСТИТЬ ВТОстаткиВыплаченныхСумм
	|ИЗ
	|	(ВЫБРАТЬ
	|		Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Доходы.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|		Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|		Доходы.Подразделение КАК Подразделение,
	|		Доходы.КатегорияДохода КАК КатегорияДохода,
	|		Доходы.КодДохода КАК КодДохода,
	|		Доходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|		Доходы.ДокументОснование КАК ДокументОснование,
	|		Доходы.ВаловаяСуммаДохода КАК СуммаДохода,
	|		Доходы.ВаловаяСуммаОблагаемогоДохода КАК СуммаОблагаемогоДохода,
	|		Доходы.ВаловаяСуммаОтпускныхБольничных КАК СуммаОтпускныхБольничных,
	|		Доходы.УчитыватьСтатьиФинансирования КАК УчитыватьСтатьиФинансирования
	|	ИЗ
	|		ВТДоходы КАК Доходы
	|	ГДЕ
	|		Доходы.УчитыватьСтатьиФинансирования
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарегистрированоРанее.ФизическоеЛицо,
	|		ЗарегистрированоРанее.СтавкаНалогообложения,
	|		ЗарегистрированоРанее.ДатаПолученияДохода,
	|		ЗарегистрированоРанее.Подразделение,
	|		ЗарегистрированоРанее.КатегорияДохода,
	|		ЗарегистрированоРанее.КодДохода,
	|		ЗарегистрированоРанее.РегистрацияВНалоговомОргане,
	|		ЗарегистрированоРанее.ВключатьВДекларациюПоНалогуНаПрибыль,
	|		ЗарегистрированоРанее.ДокументОснование,
	|		-ЗарегистрированоРанее.СуммаВыплаченногоДохода,
	|		-ЗарегистрированоРанее.СуммаОблагаемогоДохода,
	|		ВЫБОР
	|			КОГДА ЗарегистрированоРанее.СрокПеречисления = ЗНАЧЕНИЕ(Перечисление.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные)
	|				ТОГДА -ЗарегистрированоРанее.СуммаВыплаченногоДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ЗарегистрированоРанее.УчитыватьСтатьиФинансирования
	|	ИЗ
	|		ВТЗарегистрированоРанее КАК ЗарегистрированоРанее) КАК ДокументамОснованиям
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументамОснованиям.ФизическоеЛицо,
	|	ДокументамОснованиям.СтавкаНалогообложения,
	|	ДокументамОснованиям.ДатаПолученияДохода,
	|	ДокументамОснованиям.Подразделение,
	|	ДокументамОснованиям.КодДохода,
	|	ДокументамОснованиям.РегистрацияВНалоговомОргане,
	|	ДокументамОснованиям.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ДокументамОснованиям.ДокументОснование,
	|	ДокументамОснованиям.КатегорияДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Доходы.ДокументОснование КАК ДокументОснование,
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	Доходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Доходы.КатегорияДохода КАК КатегорияДохода,
	|	Доходы.КодДохода КАК КодДохода,
	|	Доходы.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода), 0) КАК СуммаВыплаченногоДохода,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Доходы.СуммаДохода = 0
	|					ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода
	|				ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаВыплаченногоДохода / Доходы.СуммаДохода * Доходы.СуммаОблагаемогоДохода
	|			КОНЕЦ), 0) КАК СуммаОблагаемогоДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления КАК СрокПеречисления
	|ПОМЕСТИТЬ ВТРанееЗарегистрированоВЦелом
	|ИЗ
	|	ВТДоходы КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО Доходы.ГоловнаяОрганизация = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация
	|			И Доходы.ФизическоеЛицо = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо
	|			И Доходы.СтавкаНалогообложения = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента
	|			И Доходы.ДатаПолученияДохода = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода
	|			И Доходы.КодДохода = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода
	|			И Доходы.РегистрацияВНалоговомОргане = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане
	|			И Доходы.Подразделение = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение
	|			И Доходы.ВключатьВДекларациюПоНалогуНаПрибыль = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль
	|			И Доходы.ДокументОснование = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование
	|			И Доходы.КатегорияДохода = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода
	|			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период <= &ДатаОперации
	|				ИЛИ &ДатаОперацииНеУказана)
	|ГДЕ
	|	Доходы.ДоляВыплаты > 0
	|	И НЕ Доходы.УчитыватьСтатьиФинансирования
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ГоловнаяОрганизация,
	|	Доходы.ДокументОснование,
	|	Доходы.ФизическоеЛицо,
	|	Доходы.СтавкаНалогообложения,
	|	Доходы.РегистрацияВНалоговомОргане,
	|	Доходы.ДатаПолученияДохода,
	|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Доходы.КодДохода,
	|	Доходы.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления,
	|	Доходы.КатегорияДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалогиИДоходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НалогиИДоходы.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НалогиИДоходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НалогиИДоходы.Подразделение КАК Подразделение,
	|	НалогиИДоходы.КатегорияДохода КАК КатегорияДохода,
	|	НалогиИДоходы.КодДохода КАК КодДохода,
	|	НалогиИДоходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НалогиИДоходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогиИДоходы.ДокументОснование КАК ДокументОснование,
	|	НалогиИДоходы.Сумма КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА &НеЗаполнятьФактическийДоход
	|				ТОГДА 0
	|			КОГДА ОстаткиВыплаченныхСумм.ФизическоеЛицо ЕСТЬ NULL
	|				ТОГДА НалогиИДоходы.СуммаВыплаченногоДохода
	|			КОГДА ОстаткиВыплаченныхСумм.СуммаДохода < 0
	|				ТОГДА ОстаткиВыплаченныхСумм.СуммаДохода
	|			КОГДА ОстаткиВыплаченныхСумм.СуммаДохода * ОстаткиВыплаченныхСумм.СуммаДохода > НалогиИДоходы.СуммаВыплаченногоДохода * НалогиИДоходы.СуммаВыплаченногоДохода
	|				ТОГДА НалогиИДоходы.СуммаВыплаченногоДохода
	|			ИНАЧЕ ОстаткиВыплаченныхСумм.СуммаДохода
	|		КОНЕЦ) КАК СуммаВыплаченногоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА ОстаткиВыплаченныхСумм.ФизическоеЛицо ЕСТЬ NULL
	|				ТОГДА НалогиИДоходы.СуммаОблагаемогоДохода
	|			КОГДА ОстаткиВыплаченныхСумм.СуммаДохода < 0
	|				ТОГДА ОстаткиВыплаченныхСумм.СуммаОблагаемогоДохода
	|			КОГДА ОстаткиВыплаченныхСумм.СуммаОблагаемогоДохода * ОстаткиВыплаченныхСумм.СуммаОблагаемогоДохода > НалогиИДоходы.СуммаОблагаемогоДохода * НалогиИДоходы.СуммаОблагаемогоДохода
	|				ТОГДА НалогиИДоходы.СуммаОблагаемогоДохода
	|			ИНАЧЕ ОстаткиВыплаченныхСумм.СуммаОблагаемогоДохода
	|		КОНЕЦ) КАК СуммаОблагаемогоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА ОстаткиВыплаченныхСумм.ФизическоеЛицо ЕСТЬ NULL
	|				ТОГДА НалогиИДоходы.СуммаОтпускныхБольничных
	|			КОГДА ОстаткиВыплаченныхСумм.СуммаДохода < 0
	|				ТОГДА ОстаткиВыплаченныхСумм.СуммаОтпускныхБольничных
	|			КОГДА ОстаткиВыплаченныхСумм.СуммаОтпускныхБольничных * ОстаткиВыплаченныхСумм.СуммаОтпускныхБольничных > НалогиИДоходы.СуммаОтпускныхБольничных * НалогиИДоходы.СуммаОтпускныхБольничных
	|				ТОГДА НалогиИДоходы.СуммаОтпускныхБольничных
	|			ИНАЧЕ ОстаткиВыплаченныхСумм.СуммаОтпускныхБольничных
	|		КОНЕЦ) КАК СуммаОтпускныхБольничных,
	|	ЕСТЬNULL(ДокументыОснования.НеУчитыватьДоходВ6НДФЛ, ИСТИНА) КАК УчитыватьВыплаченныйДоходВ6НДФЛ
	|ПОМЕСТИТЬ ВТНалогУдержанный
	|ИЗ
	|	(ВЫБРАТЬ
	|		Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|		Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		Налоги.Подразделение КАК Подразделение,
	|		Налоги.КатегорияДохода КАК КатегорияДохода,
	|		Налоги.КодДохода КАК КодДохода,
	|		Налоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|		Налоги.ДокументОснование КАК ДокументОснование,
	|		Налоги.Сумма КАК Сумма,
	|		0 КАК СуммаВыплаченногоДохода,
	|		0 КАК СуммаОблагаемогоДохода,
	|		0 КАК СуммаОтпускныхБольничных
	|	ИЗ
	|		ВТДанныеОНалогах КАК Налоги
	|	ГДЕ
	|		Налоги.Сумма <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Доходы.ФизическоеЛицо,
	|		Доходы.СтавкаНалогообложения,
	|		Доходы.ДатаПолученияДохода,
	|		Доходы.Подразделение,
	|		Доходы.КатегорияДохода,
	|		Доходы.КодДохода,
	|		Доходы.РегистрацияВНалоговомОргане,
	|		Доходы.ВключатьВДекларациюПоНалогуНаПрибыль,
	|		Доходы.ДокументОснование,
	|		0,
	|		Доходы.СуммаДохода,
	|		Доходы.СуммаОблагаемогоДохода,
	|		Доходы.СуммаОтпускныхБольничных
	|	ИЗ
	|		ВТДоходы КАК Доходы
	|	ГДЕ
	|		Доходы.СуммаДохода <> 0
	|		И Доходы.ДоляВыплаты > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарегистрированоРанее.ФизическоеЛицо,
	|		ЗарегистрированоРанее.СтавкаНалогообложения,
	|		ЗарегистрированоРанее.ДатаПолученияДохода,
	|		ЗарегистрированоРанее.Подразделение,
	|		ЗарегистрированоРанее.КатегорияДохода,
	|		ЗарегистрированоРанее.КодДохода,
	|		ЗарегистрированоРанее.РегистрацияВНалоговомОргане,
	|		ЗарегистрированоРанее.ВключатьВДекларациюПоНалогуНаПрибыль,
	|		ЗарегистрированоРанее.ДокументОснование,
	|		0,
	|		-ЗарегистрированоРанее.СуммаВыплаченногоДохода,
	|		-ЗарегистрированоРанее.СуммаОблагаемогоДохода,
	|		ВЫБОР
	|			КОГДА ЗарегистрированоРанее.СрокПеречисления = ЗНАЧЕНИЕ(Перечисление.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные)
	|				ТОГДА -ЗарегистрированоРанее.СуммаВыплаченногоДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ВТРанееЗарегистрированоВЦелом КАК ЗарегистрированоРанее) КАК НалогиИДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыОснования КАК ДокументыОснования
	|		ПО НалогиИДоходы.ДокументОснование = ДокументыОснования.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиВыплаченныхСумм КАК ОстаткиВыплаченныхСумм
	|		ПО НалогиИДоходы.ДокументОснование = ОстаткиВыплаченныхСумм.ДокументОснование
	|			И НалогиИДоходы.ФизическоеЛицо = ОстаткиВыплаченныхСумм.ФизическоеЛицо
	|			И НалогиИДоходы.СтавкаНалогообложенияРезидента = ОстаткиВыплаченныхСумм.СтавкаНалогообложения
	|			И НалогиИДоходы.МесяцНалоговогоПериода = ОстаткиВыплаченныхСумм.ДатаПолученияДохода
	|			И НалогиИДоходы.Подразделение = ОстаткиВыплаченныхСумм.Подразделение
	|			И НалогиИДоходы.КодДохода = ОстаткиВыплаченныхСумм.КодДохода
	|			И НалогиИДоходы.РегистрацияВНалоговомОргане = ОстаткиВыплаченныхСумм.РегистрацияВНалоговомОргане
	|			И НалогиИДоходы.ВключатьВДекларациюПоНалогуНаПрибыль = ОстаткиВыплаченныхСумм.ВключатьВДекларациюПоНалогуНаПрибыль
	|			И (ОстаткиВыплаченныхСумм.УчитыватьСтатьиФинансирования)
	|			И НалогиИДоходы.КатегорияДохода = ОстаткиВыплаченныхСумм.КатегорияДохода
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогиИДоходы.ФизическоеЛицо,
	|	НалогиИДоходы.СтавкаНалогообложенияРезидента,
	|	НалогиИДоходы.МесяцНалоговогоПериода,
	|	НалогиИДоходы.Подразделение,
	|	НалогиИДоходы.КодДохода,
	|	НалогиИДоходы.РегистрацияВНалоговомОргане,
	|	НалогиИДоходы.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогиИДоходы.ДокументОснование,
	|	НалогиИДоходы.Сумма,
	|	ДокументыОснования.НеУчитыватьДоходВ6НДФЛ,
	|	НалогиИДоходы.КатегорияДохода";
	Запрос.Выполнить();

	УдалитьВТ.Добавить("ВТДоходы");
	УдалитьВТ.Добавить("ВТЗарегистрированоРанее");
	УдалитьВТ.Добавить("ВТРанееЗарегистрированоВЦелом");
	УдалитьВТ.Добавить("ВТРасчетыНалогоплательщиковСБюджетомПоНДФЛ");
	УдалитьВТ.Добавить("ВТСтрокиДоходов");
	УдалитьВТ.Добавить("ВТСуммыВыплатыБезОснований");
	УдалитьВТ.Добавить("ВТДанныеОНалогах");
	УдалитьВТ.Добавить("ВТВыплаченоПоВедомости");
	УдалитьВТ.Добавить("ВТДокументыОснования");
	УдалитьВТ.Добавить("ВТОстаткиВыплаченныхСумм");

	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

// Предназначена для расчета НДФЛ удержанного по записанным в учете данным и 
// по переданным данным о выплатах. Если в данных о выплатах присутствует информация о 
// выплатах по документам-основаниям, тогда в случае частичной оплаты дока-основания 
// сумма налога к удержанию будет уменьшена.
//
// Параметры:
//      Ссылка - ДокументСсылка - ссылка на документ-регистратор.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//      МенеджерТаблиц - МенеджерВременныхТаблиц, содержит вр. таблицу 
//      	ВТСписокСотрудников с полями 
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты
//          	ДокументОснование, необязательная
//          	СуммаНачисленная, необязательная, показывает, сколько было всего начислено изначально
//          	СуммаВыплаченная, необязательная, показывает, сколько было ранее выплачено из СуммаНачисленная
//		ПериодРегистрации - дата - 
//		ОкончательныйРасчет - булево - признак того, является ли выплата, для которой рассчитывается удержанный налог, выплатой "под расчет".
//		ТаблицаВыплат - таблица значений - выплачиваемые документом-регистратором суммы.
//
//  Возвращает таблицу значений удержанных сумм налогов в разрезе месяцев налогового периода, ставок и документов-оснований.
//
Функция РассчитатьУдержанныеНалоги(Ссылка, Организация, ДатаОперации, МенеджерТаблиц, ПериодРегистрации = Неопределено, ОкончательныйРасчет = Истина, ТаблицаВыплат = Неопределено) Экспорт
	
	УточненнаяДатаОперации = ДатаОперацииПоДокументуВыплаты(ДатаОперации, ПериодРегистрации, ОкончательныйРасчет);
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Или УточненнаяДатаОперации < ДатаИзмененияСроковУплатыНалога() Тогда
		Возврат УчетНДФЛАрхивныеАлгоритмы.РассчитатьУдержанныеНалоги(Ссылка, Организация, ДатаОперации, МенеджерТаблиц, ПериодРегистрации, ОкончательныйРасчет, ТаблицаВыплат)	
	КонецЕсли;
	
	РезультатыРасчетов = Новый ТаблицаЗначений;
	РезультатыРасчетов.Колонки.Добавить("ФизическоеЛицо",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РезультатыРасчетов.Колонки.Добавить("СтавкаНалогообложенияРезидента",Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	РезультатыРасчетов.Колонки.Добавить("КодДохода",Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));               
	РезультатыРасчетов.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	РезультатыРасчетов.Колонки.Добавить("МесяцНалоговогоПериода",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	РезультатыРасчетов.Колонки.Добавить("РегистрацияВНалоговомОргане",Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	РезультатыРасчетов.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	РезультатыРасчетов.Колонки.Добавить("Сумма",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(13,0)));
	РезультатыРасчетов.Колонки.Добавить("СуммаСПревышения",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(13,0)));
	РезультатыРасчетов.Колонки.Добавить("НачисленоНалога",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(13,0)));
	РезультатыРасчетов.Колонки.Добавить("ВключатьВДекларациюПоНалогуНаПрибыль",Новый ОписаниеТипов("Булево"));
	РезультатыРасчетов.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ДокументыОснованияНДФЛ.Тип);
	
	ТаблицыКУдалению = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	КолонкиРезультата = МенеджерТаблиц.Таблицы["ВТСписокСотрудников"].Колонки;
	ИмяТаблицыСписокСотрудников = "ВТСписокСотрудников";
	Если КолонкиРезультата.Найти("ДокументОснование") = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ ВТСписокСотрудников КАК СписокСотрудников";
		Если Запрос.Выполнить().Пустой() Тогда
			Возврат РезультатыРасчетов
		КонецЕсли;
	ИначеЕсли Не ОкончательныйРасчет Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СписокСотрудников.ДокументОснование КАК ДокументОснование, *
		|ПОМЕСТИТЬ ВТУточненныйСписокСотрудников
		|ИЗ
		|	ВТСписокСотрудников КАК СписокСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
		|		ПО СписокСотрудников.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
		|			И СписокСотрудников.ДокументОснование = ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование
		|ГДЕ
		|	НЕ ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.УдержатьНалогПриВыплатеЗарплаты, ЛОЖЬ)";
		ИмяТаблицыСписокСотрудников = "ВТУточненныйСписокСотрудников";
		ТаблицыКУдалению.Добавить(ИмяТаблицыСписокСотрудников);
		Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда
			Возврат РезультатыРасчетов
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТаблицаВыплат) Тогда
		ДописатьДокументыОплаченныеБезУдержанияНДФЛ(Ссылка, Организация, ДатаОперации, ПериодРегистрации, МенеджерТаблиц, ТаблицаВыплат, ИмяТаблицыСписокСотрудников);
		Если ИмяТаблицыСписокСотрудников <> "ВТСписокСотрудников" Тогда
			ТаблицыКУдалению.Добавить(ИмяТаблицыСписокСотрудников);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОперации", КонецДня(УточненнаяДатаОперации));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(УточненнаяДатаОперации));
	Запрос.УстановитьПараметр("ОкончательныйРасчет", ОкончательныйРасчет);
	Запрос.УстановитьПараметр("ДоляПолнойВыплаты", ДоляПолнойВыплаты());
	Запрос.УстановитьПараметр("ОсобыеРегистраторы", ЗарплатаКадры.РегистраторыПереносаДанных());
	
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	СписокСотрудников.ФизическоеЛицо,
	|	СписокСотрудников.ДокументОснование КАК ДокументОснование,
	|	СУММА(СписокСотрудников.СуммаНачисленная) КАК СуммаНачисленная,
	|	СУММА(СписокСотрудников.СуммаВыплаченная) КАК СуммаВыплаченная,
	|	СУММА(СписокСотрудников.СуммаВыплаты) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТСуммыНДФЛПоСотрудникамИДокументам
	|ИЗ
	|	ВТСписокСотрудников КАК СписокСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.ДокументОснование,
	|	СписокСотрудников.ФизическоеЛицо";
	Если КолонкиРезультата.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.ДокументОснование","НЕОПРЕДЕЛЕНО") 
	КонецЕсли;
	Если КолонкиРезультата.Найти("СуммаНачисленная") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.СуммаНачисленная","0") 
	КонецЕсли;
	Если КолонкиРезультата.Найти("СуммаВыплаченная") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокСотрудников.СуммаВыплаченная","0") 
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВТСписокСотрудников", ИмяТаблицыСписокСотрудников); 
	Запрос.Выполнить();
	
	ТаблицыКУдалению.Добавить("ВТСуммыНДФЛПоСотрудникамИДокументам");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(СписокСотрудников.СуммаНачисленная) КАК СуммаНачисленная,
	|	СУММА(СписокСотрудников.СуммаВыплаченная) КАК СуммаВыплаченная,
	|	МАКСИМУМ(СписокСотрудников.СуммаВыплаты) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТСуммыВыплатыБезОснований
	|ИЗ
	|	ВТСуммыНДФЛПоСотрудникамИДокументам КАК СписокСотрудников
	|ГДЕ
	|	СписокСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(СписокСотрудников.СуммаВыплаты) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТСуммыНДФЛПоСотрудникам
	|ИЗ
	|	ВТСуммыНДФЛПоСотрудникамИДокументам КАК СписокСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период КАК Период,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация КАК Организация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания КАК ВариантУдержания,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма КАК Сумма,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения КАК СуммаСПревышения,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения КАК ВидДвижения,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДатаПолученияДоходаФиксирована КАК ДатаПолученияДоходаФиксирована,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиРегистра
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыНДФЛПоСотрудникам КАК СуммыНДФЛПоСотрудникам
	|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо = СуммыНДФЛПоСотрудникам.ФизическоеЛицо
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &Регистратор
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация = &Организация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период <= &ДатаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиРегистра.Регистратор КАК Регистратор,
	|	СтрокиРегистра.НомерСтроки КАК НомерСтроки,
	|	СтрокиРегистра.Сумма КАК Сумма,
	|	СтрокиРегистра.СуммаСПревышения КАК СуммаСПревышения,
	|	СтрокиРегистра.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов
	|ИЗ
	|	ВТСтрокиРегистра КАК СтрокиРегистра
	|ГДЕ
	|	СтрокиРегистра.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.Дивиденды)
	|	И СтрокиРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (СтрокиРегистра.Сумма + СтрокиРегистра.СуммаСПревышения) * СтрокиРегистра.НалогНаПрибыльДляДивидендов > 0";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда // Производим зачет сумм налога на прибыль в счет исчисленного налога с дивидендов.
		
		ТаблицаКОбработке = Результат.Выгрузить();
		Для каждого СтрокаТаблицы Из ТаблицаКОбработке Цикл
			НалогНаПрибыльДляДивидендов = СтрокаТаблицы.НалогНаПрибыльДляДивидендов;
			Если НалогНаПрибыльДляДивидендов * СтрокаТаблицы.Сумма > 0 Тогда
				Если СтрокаТаблицы.Сумма > 0 Тогда
					ОстатокСуммыКЗачету = Макс(НалогНаПрибыльДляДивидендов - СтрокаТаблицы.Сумма, 0);
					СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма - НалогНаПрибыльДляДивидендов, 0);
				Иначе
					ОстатокСуммыКЗачету = Мин(НалогНаПрибыльДляДивидендов - СтрокаТаблицы.Сумма, 0);
					СтрокаТаблицы.Сумма = Мин(СтрокаТаблицы.Сумма - НалогНаПрибыльДляДивидендов, 0);
				КонецЕсли;
			КонецЕсли;
			Если ОстатокСуммыКЗачету * СтрокаТаблицы.СуммаСПревышения > 0 Тогда
				Если СтрокаТаблицы.СуммаСПревышения > 0 Тогда
					СтрокаТаблицы.СуммаСПревышения = Макс(СтрокаТаблицы.СуммаСПревышения - ОстатокСуммыКЗачету, 0);
				Иначе
					СтрокаТаблицы.СуммаСПревышения = Мин(СтрокаТаблицы.СуммаСПревышения - ОстатокСуммыКЗачету, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ОбработанныеДивиденды", ТаблицаКОбработке);
		ТаблицыКУдалению.Добавить("ВТОбработанныеДивиденды");
		ТаблицыКУдалению.Добавить("ВТВременная");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиРегистра.Регистратор КАК Регистратор,
		|	СтрокиРегистра.НомерСтроки КАК НомерСтроки,
		|	СтрокиРегистра.Сумма КАК Сумма,
		|	СтрокиРегистра.СуммаСПревышения КАК СуммаСПревышения
		|ПОМЕСТИТЬ ВТОбработанныеДивиденды
		|ИЗ
		|	&ОбработанныеДивиденды КАК СтрокиРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период КАК Период,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация КАК Организация,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания КАК ВариантУдержания,
		|	ЕСТЬNULL(ОбработанныеДивиденды.Сумма, РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК Сумма,
		|	ЕСТЬNULL(ОбработанныеДивиденды.СуммаСПревышения, РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения) КАК СуммаСПревышения,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения КАК ВидДвижения,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДатаПолученияДоходаФиксирована КАК ДатаПолученияДоходаФиксирована,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТВременная
		|ИЗ
		|	ВТСтрокиРегистра КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеДивиденды КАК ОбработанныеДивиденды
		|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор = ОбработанныеДивиденды.Регистратор
		|			И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки = ОбработанныеДивиденды.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтрокиРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Временная.Период КАК Период,
		|	Временная.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	Временная.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Временная.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	Временная.КатегорияДохода КАК КатегорияДохода,
		|	Временная.КодДохода КАК КодДохода,
		|	Временная.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	Временная.Организация КАК Организация,
		|	Временная.Подразделение КАК Подразделение,
		|	Временная.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	Временная.ДокументОснование КАК ДокументОснование,
		|	Временная.ВариантУдержания КАК ВариантУдержания,
		|	Временная.Сумма КАК Сумма,
		|	Временная.СуммаСПревышения КАК СуммаСПревышения,
		|	Временная.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов,
		|	Временная.ВидДвижения КАК ВидДвижения,
		|	Временная.ДатаПолученияДоходаФиксирована КАК ДатаПолученияДоходаФиксирована,
		|	Временная.Регистратор КАК Регистратор,
		|	Временная.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТСтрокиРегистра
		|ИЗ
		|	ВТВременная КАК Временная";
		Запрос.Выполнить()
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокументаОснования.Период, СтрокиДанных.Период) КАК Период,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ДанныеДокументаОснования.МесяцНалоговогоПериода, ДЕНЬ), СтрокиДанных.МесяцНалоговогоПериода) КАК МесяцНалоговогоПериода,
	|	СтрокиДанных.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтрокиДанных.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СтрокиДанных.КатегорияДохода КАК КатегорияДохода,
	|	СтрокиДанных.КодДохода КАК КодДохода,
	|	СтрокиДанных.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СтрокиДанных.Организация КАК Организация,
	|	СтрокиДанных.Подразделение КАК Подразделение,
	|	СтрокиДанных.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СтрокиДанных.ДокументОснование КАК ДокументОснование,
	|	СтрокиДанных.ВариантУдержания КАК ВариантУдержания,
	|	СУММА(СтрокиДанных.Сумма) КАК Сумма,
	|	СУММА(СтрокиДанных.СуммаСПревышения) КАК СуммаСПревышения,
	|	СтрокиДанных.ВидДвижения КАК ВидДвижения
	|ПОМЕСТИТЬ ВТДанныеРегистра
	|ИЗ
	|	ВТСтрокиРегистра КАК СтрокиДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(СтрокиДанных.Период) КАК Период,
	|			МИНИМУМ(СтрокиДанных.МесяцНалоговогоПериода) КАК МесяцНалоговогоПериода,
	|			СтрокиДанных.ДокументОснование КАК ДокументОснование,
	|			СтрокиДанных.ФизическоеЛицо КАК ФизическоеЛицо
	|		ИЗ
	|			ВТСтрокиРегистра КАК СтрокиДанных
	|		ГДЕ
	|			СтрокиДанных.Регистратор = СтрокиДанных.ДокументОснование
	|			И НЕ СтрокиДанных.ДатаПолученияДоходаФиксирована
	|			И СтрокиДанных.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|			И НЕ ТИПЗНАЧЕНИЯ(СтрокиДанных.ДокументОснование) В (&ОсобыеРегистраторы)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиДанных.ДокументОснование,
	|			СтрокиДанных.ФизическоеЛицо) КАК ДанныеДокументаОснования
	|		ПО СтрокиДанных.ДокументОснование = ДанныеДокументаОснования.ДокументОснование
	|			И (НЕ СтрокиДанных.ДатаПолученияДоходаФиксирована)
	|			И СтрокиДанных.ФизическоеЛицо = ДанныеДокументаОснования.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиДанных.ФизическоеЛицо,
	|	СтрокиДанных.СтавкаНалогообложенияРезидента,
	|	СтрокиДанных.КатегорияДохода,
	|	СтрокиДанных.КодДохода,
	|	СтрокиДанных.РегистрацияВНалоговомОргане,
	|	СтрокиДанных.Организация,
	|	СтрокиДанных.Подразделение,
	|	СтрокиДанных.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СтрокиДанных.ДокументОснование,
	|	СтрокиДанных.ВариантУдержания,
	|	СтрокиДанных.ВидДвижения,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ДанныеДокументаОснования.МесяцНалоговогоПериода, ДЕНЬ), СтрокиДанных.МесяцНалоговогоПериода),
	|	ЕСТЬNULL(ДанныеДокументаОснования.Период, СтрокиДанных.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, ДЕНЬ)) КАК ДатаНачисления,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК Период,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация КАК Организация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование) В (&ОсобыеРегистраторы)
	|			ТОГДА ""ОсобыйРегистратор""
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
	|				ТОГДА -РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоНалога,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
	|				ТОГДА -РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоНалогаСПревышения,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	|		КОНЕЦ) КАК УдержаноНалога,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|		КОНЕЦ) КАК УдержаноНалогаСПревышения,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ -РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	|		КОНЕЦ) КАК СуммаОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|			ИНАЧЕ -РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|		КОНЕЦ) КАК СуммаОстатокСПревышения,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА СуммыНДФЛПоСотрудникамИДокументам.СуммаНачисленная = 0
	|					ТОГДА 1
	|				КОГДА СуммыНДФЛПоСотрудникамИДокументам.СуммаВыплаченная + СуммыНДФЛПоСотрудникамИДокументам.СуммаВыплаты > СуммыНДФЛПоСотрудникамИДокументам.СуммаНачисленная * &ДоляПолнойВыплаты
	|					ТОГДА 1
	|				КОГДА СуммыНДФЛПоСотрудникамИДокументам.СуммаВыплаченная ЕСТЬ НЕ NULL 
	|					ТОГДА (СуммыНДФЛПоСотрудникамИДокументам.СуммаВыплаченная + СуммыНДФЛПоСотрудникамИДокументам.СуммаВыплаты) / СуммыНДФЛПоСотрудникамИДокументам.СуммаНачисленная
	|				КОГДА СуммыВыплатыБезОснований.СуммаНачисленная = 0
	|					ТОГДА 1
	|				КОГДА СуммыВыплатыБезОснований.СуммаВыплаченная + СуммыВыплатыБезОснований.СуммаВыплаты > СуммыВыплатыБезОснований.СуммаНачисленная * &ДоляПолнойВыплаты
	|					ТОГДА 1
	|				ИНАЧЕ (СуммыВыплатыБезОснований.СуммаВыплаченная + СуммыВыплатыБезОснований.СуммаВыплаты) / СуммыВыплатыБезОснований.СуммаНачисленная
	|			КОНЕЦ), 1) КАК Доля,
	|	МАКСИМУМ(СуммыНДФЛПоСотрудникам.СуммаВыплаты) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТДанныеУчета
	|ИЗ
	|	ВТСуммыНДФЛПоСотрудникам КАК СуммыНДФЛПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистра КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыНДФЛПоСотрудникамИДокументам КАК СуммыНДФЛПоСотрудникамИДокументам
	|			ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо = СуммыНДФЛПоСотрудникамИДокументам.ФизическоеЛицо
	|				И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование = СуммыНДФЛПоСотрудникамИДокументам.ДокументОснование
	|				И (СуммыНДФЛПоСотрудникамИДокументам.СуммаВыплаты > 0)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыВыплатыБезОснований КАК СуммыВыплатыБезОснований
	|			ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо = СуммыВыплатыБезОснований.ФизическоеЛицо
	|				И (СуммыВыплатыБезОснований.СуммаВыплаты > 0)
	|		ПО СуммыНДФЛПоСотрудникам.ФизическоеЛицо = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование) В (&ОсобыеРегистраторы)
	|			ТОГДА ""ОсобыйРегистратор""
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование
	|	КОНЕЦ,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	|				ИНАЧЕ -РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|				ИНАЧЕ -РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения
	|			КОНЕЦ) <> 0)";
	
	ТаблицыКУдалению.Добавить("ВТСуммыВыплатыБезОснований");
	ТаблицыКУдалению.Добавить("ВТСуммыНДФЛПоСотрудникам");
	ТаблицыКУдалению.Добавить("ВТДанныеРегистра");
	ТаблицыКУдалению.Добавить("ВТДанныеУчета");
	ТаблицыКУдалению.Добавить("ВТСтрокиРегистра");
	Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерТаблиц, ТаблицыКУдалению);
		Возврат РезультатыРасчетов
	КонецЕсли;
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ДанныеУчета.ДатаНачисления КАК ДатаНачисления,
	|	ДанныеУчета.Период КАК Период,
	|	ДанныеУчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ДанныеУчета.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеУчета.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ДанныеУчета.КатегорияДохода КАК КатегорияДохода,
	|	ДанныеУчета.КодДохода КАК КодДохода,
	|	ДанныеУчета.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеУчета.Организация КАК Организация,
	|	ДанныеУчета.Подразделение КАК Подразделение,
	|	ДанныеУчета.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ДанныеУчета.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ДанныеУчета.СуммаОстатокСПревышения < 0
	|			ТОГДА ДанныеУчета.СуммаОстатокСПревышения
	|		КОГДА ДанныеУчета.Доля = 1
	|			ТОГДА ДанныеУчета.СуммаОстатокСПревышения
	|		КОГДА ДанныеУчета.СуммаОстатокСПревышения <= ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения > 0
	|					ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ДанныеУчета.СуммаОстатокСПревышения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения > 0
	|					ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаОстатокСПревышения,
	|	ВЫБОР
	|		КОГДА ДанныеУчета.СуммаОстаток < 0
	|			ТОГДА ДанныеУчета.СуммаОстаток
	|		КОГДА ДанныеУчета.Доля = 1
	|			ТОГДА ДанныеУчета.СуммаОстаток
	|		КОГДА ДанныеУчета.СуммаОстаток <= ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога > 0
	|					ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА ДанныеУчета.СуммаОстаток
	|		ИНАЧЕ ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога > 0
	|					ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаОстаток,
	|	ДанныеУчета.СуммаВыплаты КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТПодробно
	|ИЗ
	|	ВТДанныеУчета КАК ДанныеУчета
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА ДанныеУчета.СуммаОстаток < 0
	|					ТОГДА ДанныеУчета.СуммаОстаток
	|				КОГДА ДанныеУчета.Доля = 1
	|					ТОГДА ДанныеУчета.СуммаОстаток
	|				КОГДА ДанныеУчета.СуммаОстаток <= ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога > 0
	|							ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|					ТОГДА ДанныеУчета.СуммаОстаток
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога > 0
	|							ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалога * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалога
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА ДанныеУчета.СуммаОстатокСПревышения < 0
	|					ТОГДА ДанныеУчета.СуммаОстатокСПревышения
	|				КОГДА ДанныеУчета.Доля = 1
	|					ТОГДА ДанныеУчета.СуммаОстатокСПревышения
	|				КОГДА ДанныеУчета.СуммаОстатокСПревышения <= ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения > 0
	|							ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|					ТОГДА ДанныеУчета.СуммаОстатокСПревышения
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения > 0
	|							ТОГДА (ВЫРАЗИТЬ(ДанныеУчета.НачисленоНалогаСПревышения * ДанныеУчета.Доля КАК ЧИСЛО(15, 0))) - ДанныеУчета.УдержаноНалогаСПревышения
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодробныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ПодробныеДанные.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ПодробныеДанные.СуммаОстатокСПревышения) КАК СуммаОстатокСПревышения,
	|	ПодробныеДанные.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТПоФизическомуЛицуОснованию
	|ИЗ
	|	ВТПодробно КАК ПодробныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодробныеДанные.ФизическоеЛицо,
	|	ПодробныеДанные.ДокументОснование
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ПодробныеДанные.СуммаОстаток) <> 0
	|		ИЛИ СУММА(ПодробныеДанные.СуммаОстатокСПревышения) <> 0)";
	
	ТаблицыКУдалению.Добавить("ВТПодробно");
	ТаблицыКУдалению.Добавить("ВТПоФизическомуЛицуОснованию");
	Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерТаблиц, ТаблицыКУдалению);
		Возврат РезультатыРасчетов
	КонецЕсли;
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ПодробныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПодробныеДанные.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НАЧАЛОПЕРИОДА(ПодробныеДанные.МесяцНалоговогоПериода, ДЕНЬ) КАК ДатаПолученияДохода,
	|	СУММА(ПодробныеДанные.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ПодробныеДанные.СуммаОстатокСПревышения) КАК СуммаОстатокСПревышения
	|ПОМЕСТИТЬ ВТПоФизическомуЛицуНаДатуПолученияДохода
	|ИЗ
	|	ВТПодробно КАК ПодробныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодробныеДанные.ФизическоеЛицо,
	|	ПодробныеДанные.СтавкаНалогообложенияРезидента,
	|	НАЧАЛОПЕРИОДА(ПодробныеДанные.МесяцНалоговогоПериода, ДЕНЬ)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ПодробныеДанные.СуммаОстаток) <> 0
	|		ИЛИ СУММА(ПодробныеДанные.СуммаОстатокСПревышения) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ДанныеРегистра.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеРегистра.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ДанныеРегистра.КатегорияДохода КАК КатегорияДохода,
	|	ДанныеРегистра.КодДохода КАК КодДохода,
	|	ДанныеРегистра.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	МАКСИМУМ(ДанныеРегистра.ДокументОснование) КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДанныеОсобыхРегистраторов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПодробныеДанные.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		ПодробныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ПодробныеДанные.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|		ПодробныеДанные.КатегорияДохода КАК КатегорияДохода,
	|		ПодробныеДанные.КодДохода КАК КодДохода,
	|		ПодробныеДанные.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		ПодробныеДанные.Организация КАК Организация,
	|		ПодробныеДанные.Подразделение КАК Подразделение,
	|		ПодробныеДанные.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|		ПодробныеДанные.ДокументОснование КАК ДокументОснование
	|	ИЗ
	|		ВТДанныеРегистра КАК ПодробныеДанные
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ПодробныеДанные.ДокументОснование) В (&ОсобыеРегистраторы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПодробныеДанные.Период,
	|		ПодробныеДанные.ДокументОснование,
	|		ПодробныеДанные.МесяцНалоговогоПериода,
	|		ПодробныеДанные.ФизическоеЛицо,
	|		ПодробныеДанные.СтавкаНалогообложенияРезидента,
	|		ПодробныеДанные.КатегорияДохода,
	|		ПодробныеДанные.КодДохода,
	|		ПодробныеДанные.РегистрацияВНалоговомОргане,
	|		ПодробныеДанные.Организация,
	|		ПодробныеДанные.Подразделение,
	|		ПодробныеДанные.ВключатьВДекларациюПоНалогуНаПрибыль
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ВЫБОР
	|					КОГДА ПодробныеДанные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА ПодробныеДанные.Сумма
	|					ИНАЧЕ -ПодробныеДанные.Сумма
	|				КОНЕЦ) > 0
	|			ИЛИ СУММА(ВЫБОР
	|					КОГДА ПодробныеДанные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ТОГДА ПодробныеДанные.СуммаСПревышения
	|					ИНАЧЕ -ПодробныеДанные.СуммаСПревышения
	|				КОНЕЦ) > 0)) КАК ДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.МесяцНалоговогоПериода,
	|	ДанныеРегистра.ФизическоеЛицо,
	|	ДанныеРегистра.СтавкаНалогообложенияРезидента,
	|	ДанныеРегистра.КатегорияДохода,
	|	ДанныеРегистра.КодДохода,
	|	ДанныеРегистра.РегистрацияВНалоговомОргане,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.ВключатьВДекларациюПоНалогуНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодробныеДанные.ДатаНачисления КАК ДатаНачисления,
	|	ПодробныеДанные.Период КАК Период,
	|	ПодробныеДанные.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ПодробныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПодробныеДанные.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ПодробныеДанные.КатегорияДохода КАК КатегорияДохода,
	|	ПодробныеДанные.КодДохода КАК КодДохода,
	|	ПодробныеДанные.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПодробныеДанные.Организация КАК Организация,
	|	ПодробныеДанные.Подразделение КАК Подразделение,
	|	ПодробныеДанные.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА ПодробныеДанные.ДокументОснование = ""ОсобыйРегистратор""
	|			ТОГДА ЕСТЬNULL(ДанныеОсобыхРегистраторов.ДокументОснование, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ ПодробныеДанные.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ПодробныеДанные.СуммаОстаток КАК СуммаОстаток,
	|	ПодробныеДанные.СуммаОстатокСПревышения КАК СуммаОстатокСПревышения,
	|	ПодробныеДанные.СуммаВыплаты КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТПодробноБезНулевыхОснований
	|ИЗ
	|	ВТПодробно КАК ПодробныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоФизическомуЛицуОснованию КАК ПоФизическомуЛицуОснованию
	|		ПО ПодробныеДанные.ФизическоеЛицо = ПоФизическомуЛицуОснованию.ФизическоеЛицо
	|			И ПодробныеДанные.ДокументОснование = ПоФизическомуЛицуОснованию.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоФизическомуЛицуНаДатуПолученияДохода КАК НаДатуПолученияДохода
	|		ПО ПодробныеДанные.ФизическоеЛицо = НаДатуПолученияДохода.ФизическоеЛицо
	|			И (НАЧАЛОПЕРИОДА(ПодробныеДанные.МесяцНалоговогоПериода, ДЕНЬ) = НаДатуПолученияДохода.ДатаПолученияДохода)
	|			И ПодробныеДанные.СтавкаНалогообложенияРезидента = НаДатуПолученияДохода.СтавкаНалогообложенияРезидента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОсобыхРегистраторов КАК ДанныеОсобыхРегистраторов
	|		ПО ПодробныеДанные.ФизическоеЛицо = ДанныеОсобыхРегистраторов.ФизическоеЛицо
	|			И ПодробныеДанные.МесяцНалоговогоПериода = ДанныеОсобыхРегистраторов.МесяцНалоговогоПериода
	|			И ПодробныеДанные.СтавкаНалогообложенияРезидента = ДанныеОсобыхРегистраторов.СтавкаНалогообложенияРезидента
	|			И ПодробныеДанные.КатегорияДохода = ДанныеОсобыхРегистраторов.КатегорияДохода
	|			И ПодробныеДанные.КодДохода = ДанныеОсобыхРегистраторов.КодДохода
	|			И ПодробныеДанные.РегистрацияВНалоговомОргане = ДанныеОсобыхРегистраторов.РегистрацияВНалоговомОргане
	|			И ПодробныеДанные.Организация = ДанныеОсобыхРегистраторов.Организация
	|			И ПодробныеДанные.Подразделение = ДанныеОсобыхРегистраторов.Подразделение
	|			И ПодробныеДанные.ВключатьВДекларациюПоНалогуНаПрибыль = ДанныеОсобыхРегистраторов.ВключатьВДекларациюПоНалогуНаПрибыль
	|			И (ПодробныеДанные.ДокументОснование = ""ОсобыйРегистратор"")
	|ГДЕ
	|	ПоФизическомуЛицуОснованию.ДокументОснование ЕСТЬ НЕ NULL 
	|	И НаДатуПолученияДохода.ФизическоеЛицо ЕСТЬ НЕ NULL ";
	Запрос.Выполнить();
	
	ТаблицыКУдалению.Добавить("ВТПоФизическомуЛицуНаДатуПолученияДохода");
	ТаблицыКУдалению.Добавить("ВТДанныеОсобыхРегистраторов");
	ТаблицыКУдалению.Добавить("ВТПодробноБезНулевыхОснований");
	ТаблицыКУдалению.Добавить("ВТВсегоПоФизическомуЛицу");
	
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ПодробныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПодробныеДанные.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ГОД(ПодробныеДанные.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	СУММА(ПодробныеДанные.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ПодробныеДанные.СуммаОстатокСПревышения) КАК СуммаОстатокСПревышения,
	|	МАКСИМУМ(ПодробныеДанные.МесяцНалоговогоПериода) КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТВсегоПоФизическомуЛицуЗаНалоговыйПериод
	|ИЗ
	|	ВТПодробноБезНулевыхОснований КАК ПодробныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодробныеДанные.ФизическоеЛицо,
	|	ПодробныеДанные.СтавкаНалогообложенияРезидента,
	|	ГОД(ПодробныеДанные.МесяцНалоговогоПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодробныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПодробныеДанные.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СУММА(ПодробныеДанные.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(ПодробныеДанные.СуммаОстатокСПревышения) КАК СуммаОстатокСПревышения
	|ПОМЕСТИТЬ ВТВсегоПоФизическомуЛицу
	|ИЗ
	|	ВТВсегоПоФизическомуЛицуЗаНалоговыйПериод КАК ПодробныеДанные
	|ГДЕ
	|	(ПодробныеДанные.СуммаОстаток > 0
	|			ИЛИ ПодробныеДанные.СуммаОстатокСПревышения > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодробныеДанные.ФизическоеЛицо,
	|	ПодробныеДанные.СтавкаНалогообложенияРезидента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыНДФЛПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицуЗаНалоговыйПериод.НалоговыйПериод, 0) КАК НалоговыйПериод,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицуЗаНалоговыйПериод.СуммаОстаток, 0) КАК ОстатокЗаНалоговыйПериод,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицуЗаНалоговыйПериод.МесяцНалоговогоПериода, 0) КАК ПоследнийМесяцНалоговогоПериода,
	|	СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода, МЕСЯЦ) КАК НачалоМесяцаНалоговогоПериода,
	|	СуммыНДФЛПоСотрудникам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СуммыНДФЛПоСотрудникам.КатегорияДохода КАК КатегорияДохода,
	|	СуммыНДФЛПоСотрудникам.КодДохода КАК КодДохода,
	|	СуммыНДФЛПоСотрудникам.ДокументОснование КАК ДокументОснование,
	|	СуммыНДФЛПоСотрудникам.СуммаОстаток КАК СуммаОстаток,
	|	СуммыНДФЛПоСотрудникам.Организация КАК Организация,
	|	СуммыНДФЛПоСотрудникам.Подразделение КАК Подразделение,
	|	СуммыНДФЛПоСотрудникам.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицу.СуммаОстаток, 0) КАК ВсегоПоФизическомуЛицуСуммаОстаток,
	|	ЕСТЬNULL(ПоФизическомуЛицуНаДатуПолученияДохода.СуммаОстаток, 0) КАК ПоФизическомуЛицуНаДатуПолученияДоходаСуммаОстаток
	|ИЗ
	|	ВТПодробноБезНулевыхОснований КАК СуммыНДФЛПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоПоФизическомуЛицуЗаНалоговыйПериод КАК ВсегоПоФизическомуЛицуЗаНалоговыйПериод
	|		ПО СуммыНДФЛПоСотрудникам.ФизическоеЛицо = ВсегоПоФизическомуЛицуЗаНалоговыйПериод.ФизическоеЛицо
	|			И СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента = ВсегоПоФизическомуЛицуЗаНалоговыйПериод.СтавкаНалогообложенияРезидента
	|			И (ГОД(СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода) = ВсегоПоФизическомуЛицуЗаНалоговыйПериод.НалоговыйПериод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоПоФизическомуЛицу КАК ВсегоПоФизическомуЛицу
	|		ПО СуммыНДФЛПоСотрудникам.ФизическоеЛицо = ВсегоПоФизическомуЛицу.ФизическоеЛицо
	|			И СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента = ВсегоПоФизическомуЛицу.СтавкаНалогообложенияРезидента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоФизическомуЛицуНаДатуПолученияДохода КАК ПоФизическомуЛицуНаДатуПолученияДохода
	|		ПО СуммыНДФЛПоСотрудникам.ФизическоеЛицо = ПоФизическомуЛицуНаДатуПолученияДохода.ФизическоеЛицо
	|			И СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента = ПоФизическомуЛицуНаДатуПолученияДохода.СтавкаНалогообложенияРезидента
	|			И СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода = ПоФизическомуЛицуНаДатуПолученияДохода.ДатаПолученияДохода
	|ГДЕ
	|	ВсегоПоФизическомуЛицу.СуммаОстаток > 0
	|	И ПоФизическомуЛицуНаДатуПолученияДохода.СуммаОстаток <> 0
	|	И ВсегоПоФизическомуЛицуЗаНалоговыйПериод.СуммаОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	СтавкаНалогообложенияРезидента,
	|	НалоговыйПериод,
	|	СуммыНДФЛПоСотрудникам.ДатаНачисления,
	|	ДокументОснование,
	|	МесяцНалоговогоПериода,
	|	РегистрацияВНалоговомОргане,
	|	Подразделение,
	|	СуммыНДФЛПоСотрудникам.КатегорияДохода,
	|	ВключатьВДекларациюПоНалогуНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыНДФЛПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицуЗаНалоговыйПериод.НалоговыйПериод, 0) КАК НалоговыйПериод,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицуЗаНалоговыйПериод.СуммаОстатокСПревышения, 0) КАК ОстатокЗаНалоговыйПериодСПревышения,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицуЗаНалоговыйПериод.МесяцНалоговогоПериода, 0) КАК ПоследнийМесяцНалоговогоПериода,
	|	СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода, МЕСЯЦ) КАК НачалоМесяцаНалоговогоПериода,
	|	СуммыНДФЛПоСотрудникам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СуммыНДФЛПоСотрудникам.КатегорияДохода КАК КатегорияДохода,
	|	СуммыНДФЛПоСотрудникам.КодДохода КАК КодДохода,
	|	СуммыНДФЛПоСотрудникам.ДокументОснование КАК ДокументОснование,
	|	СуммыНДФЛПоСотрудникам.СуммаОстатокСПревышения КАК СуммаОстатокСПревышения,
	|	СуммыНДФЛПоСотрудникам.Организация КАК Организация,
	|	СуммыНДФЛПоСотрудникам.Подразделение КАК Подразделение,
	|	СуммыНДФЛПоСотрудникам.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЕСТЬNULL(ВсегоПоФизическомуЛицу.СуммаОстатокСПревышения, 0) КАК ВсегоПоФизическомуЛицуСуммаОстатокСПревышения,
	|	ЕСТЬNULL(ПоФизическомуЛицуНаДатуПолученияДохода.СуммаОстатокСПревышения, 0) КАК ПоФизическомуЛицуНаДатуПолученияДоходаСуммаОстатокСПревышения
	|ИЗ
	|	ВТПодробноБезНулевыхОснований КАК СуммыНДФЛПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоПоФизическомуЛицуЗаНалоговыйПериод КАК ВсегоПоФизическомуЛицуЗаНалоговыйПериод
	|		ПО СуммыНДФЛПоСотрудникам.ФизическоеЛицо = ВсегоПоФизическомуЛицуЗаНалоговыйПериод.ФизическоеЛицо
	|			И СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента = ВсегоПоФизическомуЛицуЗаНалоговыйПериод.СтавкаНалогообложенияРезидента
	|			И (ГОД(СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода) = ВсегоПоФизическомуЛицуЗаНалоговыйПериод.НалоговыйПериод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоПоФизическомуЛицу КАК ВсегоПоФизическомуЛицу
	|		ПО СуммыНДФЛПоСотрудникам.ФизическоеЛицо = ВсегоПоФизическомуЛицу.ФизическоеЛицо
	|			И СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента = ВсегоПоФизическомуЛицу.СтавкаНалогообложенияРезидента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоФизическомуЛицуНаДатуПолученияДохода КАК ПоФизическомуЛицуНаДатуПолученияДохода
	|		ПО СуммыНДФЛПоСотрудникам.ФизическоеЛицо = ПоФизическомуЛицуНаДатуПолученияДохода.ФизическоеЛицо
	|			И СуммыНДФЛПоСотрудникам.СтавкаНалогообложенияРезидента = ПоФизическомуЛицуНаДатуПолученияДохода.СтавкаНалогообложенияРезидента
	|			И СуммыНДФЛПоСотрудникам.МесяцНалоговогоПериода = ПоФизическомуЛицуНаДатуПолученияДохода.ДатаПолученияДохода
	|ГДЕ
	|	ВсегоПоФизическомуЛицу.СуммаОстатокСПревышения > 0
	|	И ПоФизическомуЛицуНаДатуПолученияДохода.СуммаОстатокСПревышения <> 0
	|	И ВсегоПоФизическомуЛицуЗаНалоговыйПериод.СуммаОстатокСПревышения > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	СтавкаНалогообложенияРезидента,
	|	НалоговыйПериод,
	|	СуммыНДФЛПоСотрудникам.ДатаНачисления,
	|	ДокументОснование,
	|	МесяцНалоговогоПериода,
	|	РегистрацияВНалоговомОргане,
	|	Подразделение,
	|	СуммыНДФЛПоСотрудникам.КатегорияДохода,
	|	ВключатьВДекларациюПоНалогуНаПрибыль";
	
	ТаблицыКУдалению.Добавить("ВТВсегоПоФизическомуЛицуЗаНалоговыйПериод");
	
	Результаты = Запрос.ВыполнитьПакет();
	Если Не Результаты[2].Пустой() Тогда
		Выборка = Результаты[2].Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл 
			Если Выборка.ВсегоПоФизическомуЛицуСуммаОстаток > 0 Тогда
				Пока Выборка.СледующийПоЗначениюПоля("СтавкаНалогообложенияРезидента") Цикл 
					Пока Выборка.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл 
						Если Выборка.ОстатокЗаНалоговыйПериод >= 0 Тогда
							ОстатокКУдержанию = 0;
							Пока Выборка.Следующий() Цикл 
								Если Выборка.ПоФизическомуЛицуНаДатуПолученияДоходаСуммаОстаток <> 0 Тогда
									ОстатокКУдержанию = ОстатокКУдержанию + Выборка.СуммаОстаток;
									Если ОстатокКУдержанию > 0 И Выборка.СуммаОстаток > 0 Тогда
										
										СписываемаяСумма = Мин(Выборка.СуммаОстаток, ОстатокКУдержанию);
										ОстатокКУдержанию = ОстатокКУдержанию - СписываемаяСумма;
										
										СтрокаТаблицыРезультатов = РезультатыРасчетов.Добавить();
										ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультатов, Выборка);
										СтрокаТаблицыРезультатов.Сумма = СписываемаяСумма;			
										
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;			
						ИначеЕсли Выборка.ОстатокЗаНалоговыйПериод < 0 Тогда
							СтрокаТаблицыРезультатов = РезультатыРасчетов.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультатов, Выборка);
							СтрокаТаблицыРезультатов.Сумма = Выборка.ОстатокЗаНалоговыйПериод;			
							СтрокаТаблицыРезультатов.МесяцНалоговогоПериода = Выборка.ПоследнийМесяцНалоговогоПериода;			
						КонецЕсли;
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не Результаты[3].Пустой() Тогда
		Выборка = Результаты[3].Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл 
			Если Выборка.ВсегоПоФизическомуЛицуСуммаОстатокСПревышения > 0 Тогда
				Пока Выборка.СледующийПоЗначениюПоля("СтавкаНалогообложенияРезидента") Цикл 
					Пока Выборка.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл 
						Если Выборка.ОстатокЗаНалоговыйПериодСПревышения >= 0 Тогда
							ОстатокКУдержанию = 0;
							Пока Выборка.Следующий() Цикл 
								Если Выборка.ПоФизическомуЛицуНаДатуПолученияДоходаСуммаОстатокСПревышения <> 0 Тогда
									ОстатокКУдержанию = ОстатокКУдержанию + Выборка.СуммаОстатокСПревышения;
									Если ОстатокКУдержанию > 0 И Выборка.СуммаОстатокСПревышения > 0 Тогда
										
										СписываемаяСумма = Мин(Выборка.СуммаОстатокСПревышения, ОстатокКУдержанию);
										ОстатокКУдержанию = ОстатокКУдержанию - СписываемаяСумма;
										
										СтрокаТаблицыРезультатов = РезультатыРасчетов.Добавить();
										ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультатов, Выборка);
										СтрокаТаблицыРезультатов.СуммаСПревышения = СписываемаяСумма;			
										
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;			
						Иначе
							СтрокаТаблицыРезультатов = РезультатыРасчетов.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультатов, Выборка);
							СтрокаТаблицыРезультатов.СуммаСПревышения = Выборка.ОстатокЗаНалоговыйПериодСПревышения;			
							СтрокаТаблицыРезультатов.МесяцНалоговогоПериода = Выборка.ПоследнийМесяцНалоговогоПериода;			
						КонецЕсли;
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	Подробно.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Подробно.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(Подробно.КатегорияДохода В (&НатуральныеДоходы)) КАК ЭтоНатуральныйДоход,
	|	МАКСИМУМ(СписокСотрудников.ДокументОснование ЕСТЬ NULL) КАК ОснованиеДругойВедомости
	|ПОМЕСТИТЬ ВТДокументыОснования
	|ИЗ
	|	ВТПодробноБезНулевыхОснований КАК Подробно
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыНДФЛПоСотрудникамИДокументам КАК СписокСотрудников
	|		ПО (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(Подробно.ДокументОснование) В (&ОсобыеРегистраторы)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ Подробно.ДокументОснование
	|			КОНЕЦ = СписокСотрудников.ДокументОснование)
	|			И Подробно.ФизическоеЛицо = СписокСотрудников.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Подробно.ФизическоеЛицо,
	|	Подробно.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ДокументыОснования.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	(НЕ ДокументыОснования.ОснованиеДругойВедомости
	|			ИЛИ &ОкончательныйРасчет
	|				И ДокументыОснования.ЭтоНатуральныйДоход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо";
	Запрос.УстановитьПараметр("НатуральныеДоходы", Перечисления.КатегорииДоходовНДФЛ.Натуральные());
	Результат = Запрос.Выполнить();
	ТаблицыКУдалению.Добавить("ВТДокументыОснования");
	
	Если Результат.Пустой() Тогда
		РезультатыРасчетов.Очистить();
	Иначе
		
		РезультатыРасчетов.Индексы.Добавить("ФизическоеЛицо");
		СтруктураПоиска = Новый Структура("ФизическоеЛицо");
		
		ОбработанныеФизлица = Новый Соответствие;
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			СтруктураПоиска.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			ОбработанныеФизлица.Вставить(Выборка.ФизическоеЛицо, Истина);
			
			ОставлятьСуммыБезОснований = Ложь;
			ПодходящиеОснования = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				Если Выборка.ДокументОснование = Неопределено Тогда
					ОставлятьСуммыБезОснований = Истина;
				Иначе
					ПодходящиеОснования.Вставить(Выборка.ДокументОснование, Истина)
				КонецЕсли;
			КонецЦикла;
			
			СтрокиКОбработке = РезультатыРасчетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКОбработке.Количество() > 0 Тогда
				Для каждого СтрокаФизлица Из СтрокиКОбработке Цикл
					Индекс = РезультатыРасчетов.Индекс(СтрокаФизлица);
					Если СтрокаФизлица.ДокументОснование = Неопределено Тогда
						Если Не ОставлятьСуммыБезОснований Тогда
							РезультатыРасчетов.Удалить(Индекс)
						КонецЕсли;
					ИначеЕсли ПодходящиеОснования[СтрокаФизлица.ДокументОснование] = Неопределено Тогда
						РезультатыРасчетов.Удалить(Индекс)
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Оставшиеся = РезультатыРасчетов.ВыгрузитьКолонку("ФизическоеЛицо");
		Для каждого ФизическоеЛицо Из Оставшиеся Цикл
			Если ОбработанныеФизлица[ФизическоеЛицо] = Неопределено Тогда
				СтруктураПоиска.ФизическоеЛицо = ФизическоеЛицо;
				Для каждого СтрокаФизлица Из РезультатыРасчетов.НайтиСтроки(СтруктураПоиска) Цикл
					РезультатыРасчетов.Удалить(РезультатыРасчетов.Индекс(СтрокаФизлица))
				КонецЦикла;
				ОбработанныеФизлица.Вставить(ФизическоеЛицо, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерТаблиц, ТаблицыКУдалению);
	
	Возврат РезультатыРасчетов;
	
КонецФункции

Функция ДоляПолнойВыплаты() Экспорт
	Возврат 0.99
КонецФункции

// Процедура регистрирует факт неудачи при попытке выплаты зарплаты документом.
// При этом ранее удержанные при выплате налоги "сторнируются".
//
// Параметры:
//		Движения 		- КоллекцияДвижений, коллекция наборов записей движений ведомости.
//		Отказ			- признак отказа выполнения операции.
//		Документ		- ссылка на документ, которым ранее была зарегистрирована выплата зарплаты.
//		ФизическиеЛица	- массив ссылок на физические лица.
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьНевыплатуДокументом(Движения, Отказ, Документ, ФизическиеЛица) Экспорт
	
	// Расчеты налогоплательщиков с бюджетом.
	РасчетыНалогоплательщиков = РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
	РасчетыНалогоплательщиков.Отбор.Регистратор.Установить(Документ);
	РасчетыНалогоплательщиков.Прочитать();
	
	РасчетыНалогоплательщиковСторно	= РасчетыНалогоплательщиков.ВыгрузитьКолонки();
	Для Каждого ЗаписьВедомости Из РасчетыНалогоплательщиков Цикл
		Если ФизическиеЛица.Найти(ЗаписьВедомости.ФизическоеЛицо) <> Неопределено Тогда
			СтрокаСторно = РасчетыНалогоплательщиковСторно.Добавить() ;
			ЗаполнитьЗначенияСвойств(СтрокаСторно, ЗаписьВедомости);
			СтрокаСторно.Сумма = - ЗаписьВедомости.Сумма;
			СтрокаСторно.СуммаСПревышения = - ЗаписьВедомости.СуммаСПревышения;
			СтрокаСторно.СуммаВыплаченногоДохода = - ЗаписьВедомости.СуммаВыплаченногоДохода;
		КонецЕсли	
	КонецЦикла;
	
	Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Загрузить(РасчетыНалогоплательщиковСторно);
	Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать= Истина;
	
	// Расчеты налогового агента с бюджетом.
	РасчетыНалоговыхАгентов		= РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
	РасчетыНалоговыхАгентов.Отбор.Регистратор.Установить(Документ);
	РасчетыНалоговыхАгентов.Прочитать();

	РасчетыНалоговыхАгентовСторно = РасчетыНалоговыхАгентов.ВыгрузитьКолонки();
	Для Каждого ЗаписьВедомости Из РасчетыНалоговыхАгентов Цикл
		Если ФизическиеЛица.Найти(ЗаписьВедомости.ФизическоеЛицо) <> Неопределено Тогда
			СтрокаСторно = РасчетыНалоговыхАгентовСторно.Добавить() ;
			ЗаполнитьЗначенияСвойств(СтрокаСторно, ЗаписьВедомости);
			СтрокаСторно.Сумма = - ЗаписьВедомости.Сумма;
		КонецЕсли	
	КонецЦикла;
	
	РасчетыНалоговыхАгентовСторно.ЗаполнитьЗначения("",	"РеквизитыПлатежногоПоручения");

	Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(РасчетыНалоговыхАгентовСторно);
	Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать	= Истина;
	
	// НДФЛ к перечислению.
	НДФЛКПеречислению = РегистрыНакопления.НДФЛКПеречислению.СоздатьНаборЗаписей();
	НДФЛКПеречислению.Отбор.Регистратор.Установить(Документ);
	НДФЛКПеречислению.Прочитать();
	
	НДФЛКПеречислениюСторно = НДФЛКПеречислению.ВыгрузитьКолонки();
	Для Каждого ЗаписьВедомости Из НДФЛКПеречислению Цикл
		Если ФизическиеЛица.Найти(ЗаписьВедомости.ФизическоеЛицо) <> Неопределено Тогда
			СтрокаСторно = НДФЛКПеречислениюСторно.Добавить() ;
			ЗаполнитьЗначенияСвойств(СтрокаСторно, ЗаписьВедомости);
			СтрокаСторно.Сумма = - ЗаписьВедомости.Сумма;
		КонецЕсли	
	КонецЦикла;
	
	Движения.НДФЛКПеречислению.Загрузить(НДФЛКПеречислениюСторно);
	Движения.НДФЛКПеречислению.Записывать= Истина;
	
	// НДФЛ перечисленный.
	НДФЛПеречисленный = РегистрыНакопления.НДФЛПеречисленный.СоздатьНаборЗаписей();
	НДФЛПеречисленный.Отбор.Регистратор.Установить(Документ);
	НДФЛПеречисленный.Прочитать();
	
	НДФЛПеречисленныйСторно = НДФЛПеречисленный.ВыгрузитьКолонки();
	Для Каждого ЗаписьВедомости Из НДФЛПеречисленный Цикл
		Если ФизическиеЛица.Найти(ЗаписьВедомости.ФизическоеЛицо) <> Неопределено Тогда
			СтрокаСторно = НДФЛПеречисленныйСторно.Добавить() ;
			ЗаполнитьЗначенияСвойств(СтрокаСторно, ЗаписьВедомости);
			СтрокаСторно.Сумма = - ЗаписьВедомости.Сумма;
		КонецЕсли	
	КонецЦикла;
	
	Движения.НДФЛПеречисленный.Загрузить(НДФЛПеречисленныйСторно);
	Движения.НДФЛПеречисленный.Записывать= Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.ЗарегистрироватьНевыплатуДокументом(Движения, Отказ, Документ, ФизическиеЛица);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для расчета и регистрации перечисленного НДФЛ по налогоплательщикам
// по записанным в учете данным об остатках перечисленных сумм НДФЛ в целом.
// Важно! Перед вызовом метода необходимо из движений регистратора по рег-рам 
// - УплатаНДФЛНалоговымиАгентамиКРаспределению
// - РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
// удалить "лишние" записи, т.к. при чтении данных учета движения регистратора не отбрасываются.
//
// Параметры:
//      Ссылка - ДокументСсылка - ссылка на документ-регистратор.
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//      ФизическиеЛица - массив физических лиц (необязательно), если не задан,  
//						перечисленные суммы будут распределены по всем физлицам организации.
//		РегистрацияВНалоговомОргане - необязательный, если не задан, то будет использоваться регистрация для организации.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПеречисленныйНалогПоФизическимЛицам(Ссылка, Движения, Отказ, Организация, ДатаОперации, ФизическиеЛица = Неопределено, РегистрацияВНалоговомОргане = Неопределено, Записывать = Ложь, Ставка = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаОперации));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
		МассивРегистраций = Новый Массив;
		МассивРегистраций.Добавить(РегистрацияВНалоговомОргане);
		МассивРегистраций.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", МассивРегистраций);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Ставка) Тогда
		Запрос.УстановитьПараметр("Ставка", Ставка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УплатаКРаспределению.СуммаОстаток КАК Сумма,
		|	УплатаКРаспределению.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	УплатаКРаспределению.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	УплатаКРаспределению.РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
		|	УплатаКРаспределению.ДатаПлатежа КАК ДатаПлатежа
		|ИЗ
		|	РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению.Остатки(
		|			&ДатаОстатков,
		|			Организация = &Организация
		|				И РегистрацияВНалоговомОргане В (&РегистрацияВНалоговомОргане)
		|				И Ставка = &Ставка) КАК УплатаКРаспределению
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа,
		|	МесяцНалоговогоПериода";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УплатаКРаспределению.СуммаОстаток КАК Сумма,
		|	УплатаКРаспределению.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	УплатаКРаспределению.РегистрацияВНалоговомОргане,
		|	УплатаКРаспределению.РеквизитыПлатежногоПоручения,
		|	УплатаКРаспределению.ДатаПлатежа КАК ДатаПлатежа
		|ИЗ
		|	РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению.Остатки(
		|			&ДатаОстатков,
		|			Организация = &Организация
		|				И РегистрацияВНалоговомОргане В (&РегистрацияВНалоговомОргане)) КАК УплатаКРаспределению
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа,
		|	МесяцНалоговогоПериода";
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ПеречисленныйНалог = Результат.Выгрузить();
	
	ЕстьНовыеСтроки = Ложь;
	ПерваяСтрока = Истина;
	Для Каждого СтрокаДанных Из ПеречисленныйНалог Цикл
		
		Если СтрокаДанных.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПерваяСтрока И Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать Тогда
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
		КонецЕсли;
		
		СтрокиРаспределения = РаспределитьПеречисленныйНалогПоФизическимЛицам(Ссылка, Организация, ДатаОперации, СтрокаДанных.Сумма, СтрокаДанных.МесяцНалоговогоПериода, РегистрацияВНалоговомОргане, ФизическиеЛица, Ставка);
		Если СтрокиРаспределения.Количество() = 0 И ПерваяСтрока Тогда
			Продолжить;
		КонецЕсли;
		Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = СтрокиРаспределения.Количество() > 0;
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
			ЕстьНовыеСтроки = Истина;
			НоваяСтрока = СтрокаРасчетовНалоговыхАгентовСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаДанных, СтрокаТЗ);
			НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
			НоваяСтрока = СтрокаУплатыНалоговогоАгента(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаДанных);
			НоваяСтрока.Сумма = СтрокаТЗ.Сумма;
			НоваяСтрока.Ставка = Ставка;
			НоваяСтрока.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Если Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать Тогда
				Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
				Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Ложь;
			КонецЕсли;
		Иначе
			Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
		Если Записывать Тогда
			Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записать();
			Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записывать = Ложь;
		Иначе
			Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений с документами-начислятелями, дополненную булевой колонкой, 
//	показывающей, начислял ли документ НДФЛ по указанному физ.лицу.
//
// Параметры:
//		Регистраторы - ТаблицаЗначений - таблица значений с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - должно быть непустым.
//			* ДокументОснование - ДокументСсылка - 
//
// Возвращаемое значение:
//		Таблица значений с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - 
//			* ДокументОснование - ДокументСсылка - 
//			* ЕстьДанные - булево - 
//
Функция НалогДокументомИсчислен(Регистраторы) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистраторы.ДокументОснование КАК Регистратор,
	|	Регистраторы.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	&Регистраторы КАК Регистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор,
	|	Регистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(СУММА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма), 0) <> 0 КАК ЕстьДанные
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|		ПО Регистраторы.Регистратор = РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор
	|			И Регистраторы.ФизическоеЛицо = РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо
	|			И (РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистраторы.Регистратор,
	|	Регистраторы.ФизическоеЛицо";

	Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции

// Возвращает таблицу значений с документами-начислятелями, дополненную булевой колонкой, 
//	показывающей, регистрировал ли документ доходы в учете по указанному физ.лицу.
//
// Параметры:
//		Регистраторы - ТаблицаЗначений - таблица значений с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - должно быть непустым.
//			* ДокументОснование - ДокументСсылка - 
//			* СтатьяФинансирования, необязательная, 
//			* СтатьяРасходов, необязательная
//
// Возвращаемое значение:
//		Таблица значений с колонками:
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - 
//			* ДокументОснование - ДокументСсылка - 
//			* СтатьяФинансирования 
//			* СтатьяРасходов
//			* ЕстьДанные - булево - 
//
Функция ДоходДокументомЗарегистрирован(Регистраторы) Экспорт

	КолонкиТаблицы = Регистраторы.Колонки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Регистраторы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Регистраторы.СтатьяРасходов КАК СтатьяРасходов,
	|	Регистраторы.ДокументОснование КАК Регистратор,
	|	Регистраторы.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	&Регистраторы КАК Регистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.Регистратор КАК Регистратор,
	|	Документы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Документы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Документы.СтатьяРасходов КАК СтатьяРасходов,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо ЕСТЬ НЕ NULL  КАК ЕстьДанные
	|ИЗ
	|	ВТРегистраторы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ПО Документы.Регистратор = СведенияОДоходахНДФЛ.Регистратор
	|			И Документы.ФизическоеЛицо = СведенияОДоходахНДФЛ.ФизическоеЛицо
	|			И Документы.СтатьяФинансирования = СведенияОДоходахНДФЛ.СтатьяФинансирования
	|			И Документы.СтатьяРасходов = СведенияОДоходахНДФЛ.СтатьяРасходов";
	Если КолонкиТаблицы.Найти("СтатьяФинансирования") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Регистраторы.СтатьяФинансирования","ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)") 
	КонецЕсли;
	Если КолонкиТаблицы.Найти("СтатьяРасходов") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Регистраторы.СтатьяРасходов","ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)") 
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции

//  Возвращаемое значение:
//  	Тип СправочникСсылка.ВидыВычетовНДФЛ, вычет с кодом 405
//
Функция ВычетВПределахНормативовПоАвторскимВознаграждениям() Экспорт

	Возврат Справочники.ВидыВычетовНДФЛ.Код405;

КонецФункции

//  Возвращаемое значение:
//  	Тип массив значений типа СправочникСсылка.ВидыВычетовНДФЛ, вычеты с кодами 403 и 404
//
Функция ВычетВСуммеРасходовПоДоговорамГПХ() Экспорт

	ВычетВСуммеРасходов = Новый Массив;
	ВычетВСуммеРасходов.Добавить(ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских());
	ВычетВСуммеРасходов.Добавить(Справочники.ВидыВычетовНДФЛ.Код404);
	Возврат ВычетВСуммеРасходов;

КонецФункции

//  Возвращаемое значение:
//  	Тип СправочникСсылка.ВидыВычетовНДФЛ, вычет с кодом 403
//
Функция ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских() Экспорт

	Возврат Справочники.ВидыВычетовНДФЛ.Код403

КонецФункции

Функция ВычетПоМатпомощиНаДетей() Экспорт

	Возврат Справочники.ВидыВычетовНДФЛ.Код508;

КонецФункции

// Процедура рассчитывает срок уплаты для строк удержанного налога.
//
// Параметры:
//		КоллекцияСтрокДвижений - набор записей регистра РасчетыНалогоплательщиковСБюджетомПоНДФЛ или его аналога, 
//                           либо иная коллекция строк регистра, либо таблица значений с соответствующими колонками
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//
Процедура ПроставитьКрайнийСрокУплаты(КоллекцияСтрокДвижений, Организация) Экспорт
	НачалоУчетаОсобыхНерабочихДней = '20200301';
	ОкончаниеУчетаОсобыхНерабочихДней = '20200801';
	УчитыватьОсобыеНерабочиеДни = Ложь;
	СтрокиСОтрицательнымиДоходами = Новый Массив;
	ДатыУдержанияНалога = Новый Массив;
	СтрокиКОбработке = Новый Массив;
	Для Каждого СтрокаНабора Из КоллекцияСтрокДвижений Цикл
		Если СтрокаНабора.ВариантУдержания = Перечисления.ВариантыУдержанияНДФЛ.Удержано И Не ЗначениеЗаполнено(СтрокаНабора.КрайнийСрокУплаты) Тогда	
			ДатаУдержанияНалога = СтрокаНабора.Период;
			Если СтрокаНабора.ВключатьВДекларациюПоНалогуНаПрибыль Тогда // пп. 3 п. 9 ст. 226.1 
				СрокУплаты = ДобавитьМесяц(НачалоДня(ДатаУдержанияНалога), 1)
			ИначеЕсли СтрокаНабора.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные Тогда
				СрокУплаты = НачалоДня(КонецМесяца(ДатаУдержанияНалога))
			Иначе
				СрокУплаты = КонецДня(ДатаУдержанияНалога) + 1;
			КонецЕсли;
			Если ДатыУдержанияНалога.Найти(СрокУплаты) = Неопределено Тогда
				ДатыУдержанияНалога.Добавить(НачалоДня(СрокУплаты))
			КонецЕсли;
			СтрокаНабора.КрайнийСрокУплаты = СрокУплаты;
			СтрокиКОбработке.Добавить(СтрокаНабора);
			Если СтрокаНабора.СуммаВыплаченногоДохода < 0 Тогда
				СтрокиСОтрицательнымиДоходами.Добавить(СтрокаНабора)
			КонецЕсли;
			Если Не УчитыватьОсобыеНерабочиеДни Тогда
				УчитыватьОсобыеНерабочиеДни = СрокУплаты > НачалоУчетаОсобыхНерабочихДней И СрокУплаты < ОкончаниеУчетаОсобыхНерабочихДней
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДатыУдержанияНалога.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	РабочиеДни = КалендарныеГрафики.БлижайшиеРабочиеДаты(КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(), ДатыУдержанияНалога, ПараметрыПолученияБлижайшихРабочихДат(Организация, УчитыватьОсобыеНерабочиеДни));
	Если РабочиеДни <> Неопределено Тогда 
		Для Каждого СтрокаНабора Из СтрокиКОбработке Цикл
			БлижайшийРабочийДень = РабочиеДни[СтрокаНабора.КрайнийСрокУплаты];
			Если БлижайшийРабочийДень <> Неопределено И БлижайшийРабочийДень <> СтрокаНабора.КрайнийСрокУплаты Тогда
				СтрокаНабора.КрайнийСрокУплаты = БлижайшийРабочийДень;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокиСОтрицательнымиДоходами) Тогда
		Если СтрокиСОтрицательнымиДоходами.Количество() > 3 Или СтрокиКОбработке.Количество() > 100 Тогда
			ТаблицаДляПоиска = РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей().ВыгрузитьКолонки();
			Для каждого СтрокаУчета Из СтрокиКОбработке Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДляПоиска.Добавить(), СтрокаУчета);
			КонецЦикла;	
			ТаблицаДляПоиска.Индексы.Добавить("ФизическоеЛицо");
			СтруктураПоиска = Новый Структура("ФизическоеЛицо");
			Для Каждого СтрокаФизическогоЛица Из СтрокиСОтрицательнымиДоходами Цикл
				КрайнийСрокУплаты = '20990101';
				СтруктураПоиска.ФизическоеЛицо = СтрокаФизическогоЛица.ФизическоеЛицо;
				Для каждого СтрокаУчета Из ТаблицаДляПоиска.НайтиСтроки(СтруктураПоиска) Цикл
					Если СтрокаУчета.КрайнийСрокУплаты >= СтрокаФизическогоЛица.МесяцНалоговогоПериода Тогда
						КрайнийСрокУплаты = Мин(КрайнийСрокУплаты, СтрокаУчета.КрайнийСрокУплаты) 
					КонецЕсли;
				КонецЦикла;	
				Если КрайнийСрокУплаты < '20990101' Тогда
					СтрокаФизическогоЛица.КрайнийСрокУплаты = КрайнийСрокУплаты
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаФизическогоЛица Из СтрокиСОтрицательнымиДоходами Цикл
				КрайнийСрокУплаты = '20990101';
				Для каждого СтрокаУчета Из СтрокиКОбработке Цикл
					Если СтрокаУчета.ФизическоеЛицо <> СтрокаФизическогоЛица.ФизическоеЛицо Тогда
						Продолжить;
					КонецЕсли;
					Если СтрокаУчета.КрайнийСрокУплаты >= СтрокаФизическогоЛица.МесяцНалоговогоПериода Тогда
						КрайнийСрокУплаты = Мин(КрайнийСрокУплаты, СтрокаУчета.КрайнийСрокУплаты) 
					КонецЕсли;
				КонецЦикла;	
				Если КрайнийСрокУплаты < '20990101' Тогда
					СтрокаФизическогоЛица.КрайнийСрокУплаты = КрайнийСрокУплаты
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыПолученияБлижайшихРабочихДат(Организация, УчитыватьНерабочиеПериоды) 
	ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
	ПараметрыПолучения.УчитыватьНерабочиеПериоды = УчитыватьНерабочиеПериоды;
	ПараметрыПолучения.ВызыватьИсключение = Ложь;
	Если УчитыватьНерабочиеПериоды Тогда
		КоронавирусныеНерабочиеДни = КоронавирусныеНерабочиеДни(ЗарплатаКадры.ГоловнаяОрганизация(Организация));
		ПараметрыПолучения.НерабочиеПериоды = Новый Массив;
		Если Не КоронавирусныеНерабочиеДни.ИгнорироватьДниС30МартаПо3Апреля Тогда
			ПараметрыПолучения.НерабочиеПериоды.Добавить(1)
		КонецЕсли;
		Если Не КоронавирусныеНерабочиеДни.ИгнорироватьДниС4По30Апреля Тогда
			ПараметрыПолучения.НерабочиеПериоды.Добавить(2)
		КонецЕсли;
		Если Не КоронавирусныеНерабочиеДни.ИгнорироватьДниС6По8Мая Тогда
			ПараметрыПолучения.НерабочиеПериоды.Добавить(3)
		КонецЕсли;
		ПараметрыПолучения.НерабочиеПериоды.Добавить(4);
		ПараметрыПолучения.НерабочиеПериоды.Добавить(5);
	КонецЕсли;
	Возврат ПараметрыПолучения
КонецФункции

// АПК:581-вкл 
// АПК:299-вкл 

// Перенос сроков уплаты налога из-за нерабочих дней карантина по коронавирусу 2020 года.

Функция ДниУплатыНалога(Организация, ДатаНачала, ДатаОкончания)

	ДатыУдержанияНалога = Новый Массив;
	ДатаУдержания = ДатаНачала;
	Пока ДатаУдержания <= ДатаОкончания Цикл
		ДатыУдержанияНалога.Добавить(ДатаУдержания);
		ДатаУдержания = ДатаУдержания + 86400;
	КонецЦикла;
	
	Возврат КалендарныеГрафики.БлижайшиеРабочиеДаты(КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(), ДатыУдержанияНалога, ПараметрыПолученияБлижайшихРабочихДат(Организация, Истина));
	
КонецФункции

Функция ОписаниеСтрокУчетаДляПересмотраСроковУплаты(Организация, ДатаНачала, ДатаОкончания, ИмяРегистра, ИмяПоляПериод = "Период")

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоДня(ДатаНачала), -1));
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторыКОбработке
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоПериода И &ДатаОкончания
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|	И ВЫБОР
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, ДЕНЬ), МЕСЯЦ, 1)
	|			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления = ЗНАЧЕНИЕ(Перечисление.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные)
	|				ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, МЕСЯЦ), ДЕНЬ)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, ДЕНЬ), ДЕНЬ, 1)
	|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ", "РегистрНакопления." + ИмяРегистра);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.Период", "РегистрНакопления." + ИмяПоляПериод);
	Запрос.Выполнить();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				РегистраторыКОбработке.Регистратор КАК Регистратор
	|			ИЗ
	|				ВТРегистраторыКОбработке КАК РегистраторыКОбработке)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторыКОбработке.Регистратор КАК Регистратор
	|ИЗ
	|	ВТРегистраторыКОбработке КАК РегистраторыКОбработке";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ", "РегистрНакопления." + ИмяРегистра);
	Результаты = Запрос.ВыполнитьПакет();
	КоллекцияСтрокДвижений = Результаты[0].Выгрузить();
	КоллекцияСтрокДвижений.Индексы.Добавить("Регистратор");
	Возврат Новый Структура("КоллекцияСтрокДвижений, Регистраторы", КоллекцияСтрокДвижений, Результаты[1].Выгрузить())
	
КонецФункции

Процедура ПроставитьНовыеСрокиУплаты(КоллекцияСтрокДвижений, ДатаНачала, ДатаОкончания, РабочиеДни, ИмяПоляПериод = "Период", ИмяПоляКрайнийСрокУплаты = "КрайнийСрокУплаты")
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого СтрокаНабора Из КоллекцияСтрокДвижений Цикл
		Если СтрокаНабора.ВариантУдержания = Перечисления.ВариантыУдержанияНДФЛ.Удержано Тогда	
			Если СтрокаНабора.ВключатьВДекларациюПоНалогуНаПрибыль Тогда  
				СрокУплаты = ДобавитьМесяц(НачалоДня(СтрокаНабора[ИмяПоляПериод]), 1)
			ИначеЕсли СтрокаНабора.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные Тогда
				СрокУплаты = НачалоДня(КонецМесяца(СтрокаНабора[ИмяПоляПериод]))
			Иначе
				СрокУплаты = КонецДня(СтрокаНабора[ИмяПоляПериод]) + 1;
			КонецЕсли;
			Если СрокУплаты >= ДатаНачала И СрокУплаты <= ДатаОкончания Тогда
				СтрокаНабора[ИмяПоляКрайнийСрокУплаты] = СрокУплаты;
				СтрокиКОбработке.Добавить(СтрокаНабора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаНабора Из СтрокиКОбработке Цикл
		БлижайшийРабочийДень = РабочиеДни[СтрокаНабора[ИмяПоляКрайнийСрокУплаты]];
		Если БлижайшийРабочийДень <> Неопределено И БлижайшийРабочийДень <> СтрокаНабора[ИмяПоляКрайнийСрокУплаты] Тогда
			СтрокаНабора[ИмяПоляКрайнийСрокУплаты] = БлижайшийРабочийДень;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНовыеСрокиУплаты(ИмяРегистра, КоллекцияСтрокДвижений, Регистраторы)
	
	Для каждого СтрокаРегистратора Из Регистраторы Цикл
		НовыеЗаписи = КоллекцияСтрокДвижений.Скопировать(КоллекцияСтрокДвижений.НайтиСтроки(Новый Структура("Регистратор",СтрокаРегистратора.Регистратор)));	
	    НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаРегистратора.Регистратор);
		НаборЗаписей.Загрузить(НовыеЗаписи);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПересмотрСроковУплатыВРегистре(Организация, ДатаНачала, ДатаОкончания, ДниУплатыНалога, ИмяРегистра, ИмяПоляПериод = "Период", ИмяПоляКрайнийСрокУплаты = "КрайнийСрокУплаты") Экспорт
	
	ОписаниеСтрокУчета = ОписаниеСтрокУчетаДляПересмотраСроковУплаты(Организация, ДатаНачала, ДатаОкончания, ИмяРегистра, ИмяПоляПериод);
	ПроставитьНовыеСрокиУплаты(ОписаниеСтрокУчета.КоллекцияСтрокДвижений, ДатаНачала, ДатаОкончания, ДниУплатыНалога, ИмяПоляПериод, ИмяПоляКрайнийСрокУплаты);
	ЗаписатьНовыеСрокиУплаты(ИмяРегистра, ОписаниеСтрокУчета.КоллекцияСтрокДвижений, ОписаниеСтрокУчета.Регистраторы);
	
КонецПроцедуры

Процедура ПересмотретьСрокиУплаты(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	РабочиеДни = ДниУплатыНалога(Организация, ДатаНачала, ДатаОкончания);
	Если РабочиеДни = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	ВыполнитьПересмотрСроковУплатыВРегистре(Организация, ДатаНачала, ДатаОкончания, РабочиеДни, "РасчетыНалогоплательщиковСБюджетомПоНДФЛ");
	ВыполнитьПересмотрСроковУплатыВРегистре(Организация, ДатаНачала, ДатаОкончания, РабочиеДни, "НДФЛКПеречислению");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.ПересмотретьСрокиУплаты(Организация, ДатаНачала, ДатаОкончания, РабочиеДни);
	КонецЕсли;
	
КонецПроцедуры


// Уточняет значение поля РегистрацияВНалоговомОргане в строке регистра.
// Параметры:
//		СтрокаДанных - срока набора записей учетного регистра, содержит поле РегистрацияВНалоговомОргане.
//      РегистрацияПодразделенияВНалоговомОргане - регистрация в НО, указанная в подразделении (возможно пустая).
//      РегистрацияОрганизацииВНалоговомОргане - регистрация в НО, указанная в организации.
//
Процедура ПроставитьРегистрациюВНалоговомОрганеВСтроке(СтрокаДанных, РегистрацияПодразделенияВНалоговомОргане, РегистрацияОрганизацииВНалоговомОргане) Экспорт
	СтрокаДанных.РегистрацияВНалоговомОргане = ?(ЗначениеЗаполнено(РегистрацияПодразделенияВНалоговомОргане), РегистрацияПодразделенияВНалоговомОргане, РегистрацияОрганизацииВНалоговомОргане);
КонецПроцедуры	

// Возвращает массив регистраций в НО для конкретной организации за указанный отчетный период.
//
// Параметры:
//		Организация - СправочникСсылка.Организации -
//		НачалоПериода - дата - 
//		ОкончаниеПериода - дата - 
//      ТолькоАктуальные - булево - позволяет дополнить перечень действовавших в отчетном периоде регистраций остальными
//                                  регистрациями организации.
//
// Возвращаемое значение:
//	Массив значений типа СправочникСсылка.РегистрацияВНалоговомОргане
//
Функция РегистрацииОрганизацииОтчетногоПериода(Организация, НачалоПериода, ОкончаниеПериода, ТолькоАктуальные = Ложь) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ВсеРегистрации", Не ТолькоАктуальные);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СведенияОДоходах.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТДействующиеРегистрации
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОДоходах.МесяцНалоговогоПериода МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И (СведенияОДоходах.СуммаДохода <> 0
	|			ИЛИ СведенияОДоходах.СуммаВычета <> 0)
	|	И СведенияОДоходах.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеРегистрации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	0 КАК Приоритет
	|ИЗ
	|	ВТДействующиеРегистрации КАК ДействующиеРегистрации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка,
	|	1
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеРегистрации КАК ДействующиеРегистрации
	|		ПО РегистрацииВНалоговомОргане.Ссылка = ДействующиеРегистрации.РегистрацияВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация
	|	И ДействующиеРегистрации.РегистрацияВНалоговомОргане ЕСТЬ NULL 
	|	И &ВсеРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
			
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегистрацияВНалоговомОргане");

КонецФункции

// Определяет необходимость простановки в движениях флажка ДатаПолученияДоходаФиксирована
//
// Параметры:
//		КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ -
//
// Возвращаемое значение:
//	Булево
//
Функция ДатаПолученияДоходаДолжнаБытьЗафиксирована(КатегорияДохода) Экспорт
	Возврат Перечисления.КатегорииДоходовНДФЛ.СФиксированнойДатойПолученияДохода().Найти(КатегорияДохода) <> Неопределено;
КонецФункции

// Формирует строку движения по регистру СведенияОДоходахНДФЛ.
//
// Параметры:
//		СведенияОДоходахНДФЛ - набор записей регистра накопления СведенияОДоходахНДФЛ либо таблица значений соответствующей структуры.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ДанныеДокумента - некоторая структура (строка таблицы значений, выборки из результата запроса и т.п.) 
//				с полями, соответствующими полям регистра (в структуре могут отсутствовать необязательные поля):
//					ФизическоеЛицо, с непустым значением
//					ДатаПолученияДохода, с непустым значением
//					МесяцНалоговогоПериода, с непустым значением
//					КодДохода, с непустым значением
//					КодВычета
//					СтавкаНалогообложения
//					ИсточникДоходаЗаПределамиРФ
//					РегистрацияВНалоговомОргане
//					СуммаДохода
//					СуммаВычета.
//					Начисление
//					Подразделение
//					Сотрудник
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		Ссылка - ДокументСсылка - основание для регистрации дохода, как правило, документ-регистратор
//		КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ -
//
// Возвращаемое значение:
//	Свежесозданная строка-движение.
//
Функция СтрокаСведенийОДоходах(СведенияОДоходахНДФЛ, Организация, ДатаОперации, ДанныеДокумента, ОкончательныйРасчет = Истина, Ссылка = Неопределено, КатегорияДохода = Неопределено) Экспорт
	
	НоваяСтрока = СведенияОДоходахНДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ДатаОперации;
	НоваяСтрока.ДоходМежрасчетногоПериода = Не ОкончательныйРасчет;
	Если КодыДоходовПоЦеннымБумагам(Год(НоваяСтрока.МесяцНалоговогоПериода)).Найти(НоваяСтрока.КодДохода) <> Неопределено Тогда
		Если НоваяСтрока.КодДохода <> Справочники.ВидыДоходовНДФЛ.Код1010 Тогда
			НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Истина
		КонецЕсли;
	Иначе 
		НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Ложь
	КонецЕсли;
	Если НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль И НоваяСтрока.МесяцНалоговогоПериода < ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли() Тогда
		НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Ложь
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НоваяСтрока.КатегорияДохода) Тогда
		Если ЗначениеЗаполнено(КатегорияДохода) Тогда
			НоваяСтрока.КатегорияДохода = КатегорияДохода
		Иначе
			НоваяСтрока.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(НоваяСтрока.КодДохода)
		КонецЕсли;  
	КонецЕсли;
	Если Не НоваяСтрока.ДатаПолученияДоходаФиксирована Тогда
		НоваяСтрока.ДатаПолученияДоходаФиксирована = ДатаПолученияДоходаДолжнаБытьЗафиксирована(НоваяСтрока.КатегорияДохода);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		НоваяСтрока.ДокументОснование = Ссылка;
	КонецЕсли;
	
	Возврат НоваяСтрока
	
КонецФункции

// Формирует строку движения по регистру РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево
//		Организация
//		ДатаОперации - дата
//		ДанныеДокумента - некоторая структура (строка таблицы значений, выборки из результата запроса и т.п.) 
//				с полями, соответствующими полям регистра (в структуре могут отсутствовать необязательные поля):
//					ФизическоеЛицо, с непустым значением.
//					Ставка, с непустым значением
//					МесяцНалоговогоПериода, с непустым значением
//					РегистрацияВНалоговомОргане, с непустым значением.
//					Сумма, с непустым значением
//					РеквизитыПлатежногоПоручения.
Функция СтрокаПеречисленияНДФЛПоНалогоплательщику(Движения, Организация, ДатаОперации, ДанныеДокумента) Экспорт
	
	Возврат СтрокаРасчетовНалоговыхАгентовСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, ДанныеДокумента);
	
КонецФункции

Функция СтрокаУплатыНалоговогоАгента(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента) Экспорт
	
	НоваяСтрока = Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ДатаОперации;
	Если НоваяСтрока.МесяцНалоговогоПериода >= '20150101' Тогда
		НоваяСтрока.МесяцНалоговогоПериода = '00010101'
	КонецЕсли;
	
    Возврат НоваяСтрока
	
КонецФункции

// Процедура обеспечивает сбор сведений о хранении данных, 
// относящихся к персональным
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа.
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения.
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ВозвратНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммыВозврата.Налог,СуммыВозврата.НалогСПревышения";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "КодВычетаЛичный,ВычетыНаДетей.КодВычета";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ОперацияНалоговогоУчетаПоНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "СведенияОДоходах.СуммаДохода,СведенияОДоходах.СуммаВычета,СведенияОДоходах.СуммаНалогаИсчисленная,НДФЛИсчисленныйПоСтавке13.Сумма,НДФЛИсчисленныйПоСтавке13.СуммаСПревышения,ПредоставленныеВычеты.Сумма,НДФЛУдержанный.Сумма";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.АвансовыйПлатежИностранцаПоНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "Сумма";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПерерасчетНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник";
	НовыеСведения.ПоляДоступа		= "Сотрудники.НалогПоСтавке09,Сотрудники.НалогПоСтавке13,Сотрудники.НалогСПревышенияПоСтавке13,Сотрудники.НалогПоСтавке35";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПерерасчетНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ЗачтеноАвансовыхПлатежейПоСтавке09,Сотрудники.ЗачтеноАвансовыхПлатежейПоСтавке13,Сотрудники.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13,Сотрудники.ЗачтеноАвансовыхПлатежейПоСтавке35";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ПерерасчетНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПримененныйВычетЛичный,Сотрудники.ПримененныйВычетЛичныйКЗачетуВозврату,ПримененныеВычетыНаДетейИИмущественные.РазмерВычета";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ИНН,Адрес,ВидДокумента,СерияДокумента,НомерДокумента,Гражданство,ДатаРождения,СтатусНалогоплательщика,АдресЗаРубежом";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке13,ОблагаемаяСуммаДоходаПоСтавке13,ИсчисленоПоСтавке13,УдержаноПоСтавке13,ЗадолженностьПоСтавке13,ИзлишнеУдержаноПоСтавке13,ПеречисленоПоСтавке13";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке30,ОблагаемаяСуммаДоходаПоСтавке30,ИсчисленоПоСтавке30,УдержаноПоСтавке30,ЗадолженностьПоСтавке30,ИзлишнеУдержаноПоСтавке30,ПеречисленоПоСтавке30";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке9,ОблагаемаяСуммаДоходаПоСтавке9,ИсчисленоПоСтавке9,УдержаноПоСтавке9,ЗадолженностьПоСтавке9,ИзлишнеУдержаноПоСтавке9,ПеречисленоПоСтавке9";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке15,ОблагаемаяСуммаДоходаПоСтавке15,ИсчисленоПоСтавке15,УдержаноПоСтавке15,ЗадолженностьПоСтавке15,ИзлишнеУдержаноПоСтавке15,ПеречисленоПоСтавке15";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке35,ОблагаемаяСуммаДоходаПоСтавке35,ИсчисленоПоСтавке35,УдержаноПоСтавке35,ЗадолженностьПоСтавке35,ИзлишнеУдержаноПоСтавке35,ПеречисленоПоСтавке35";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке5,ОблагаемаяСуммаДоходаПоСтавке5,ИсчисленоПоСтавке5,УдержаноПоСтавке5,ЗадолженностьПоСтавке5,ИзлишнеУдержаноПоСтавке5,ПеречисленоПоСтавке5";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке10,ОблагаемаяСуммаДоходаПоСтавке10,ИсчисленоПоСтавке10,УдержаноПоСтавке10,ЗадолженностьПоСтавке10,ИзлишнеУдержаноПоСтавке10,ПеречисленоПоСтавке10";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке3,ОблагаемаяСуммаДоходаПоСтавке3,ИсчисленоПоСтавке3,УдержаноПоСтавке3,ЗадолженностьПоСтавке3,ИзлишнеУдержаноПоСтавке3,ПеречисленоПоСтавке3";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке6,ОблагаемаяСуммаДоходаПоСтавке6,ИсчисленоПоСтавке6,УдержаноПоСтавке6,ЗадолженностьПоСтавке6,ИзлишнеУдержаноПоСтавке6,ПеречисленоПоСтавке6";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке7,ОблагаемаяСуммаДоходаПоСтавке7,ИсчисленоПоСтавке7,УдержаноПоСтавке7,ЗадолженностьПоСтавке7,ИзлишнеУдержаноПоСтавке7,ПеречисленоПоСтавке7";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "ОбщаяСуммаДоходаПоСтавке12,ОблагаемаяСуммаДоходаПоСтавке12,ИсчисленоПоСтавке12,УдержаноПоСтавке12,ЗадолженностьПоСтавке12,ИзлишнеУдержаноПоСтавке12,ПеречисленоПоСтавке12";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкаНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник,Фамилия,Имя,Отчество";
	НовыеСведения.ПоляДоступа		= "СведенияОДоходах.СуммаДохода,СведенияОДоходах.СуммаВычета,СведенияОВычетах.СуммаВычета";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ИНН,Сотрудники.Адрес,Сотрудники.ВидДокумента,Сотрудники.СерияДокумента,Сотрудники.НомерДокумента";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.Гражданство,Сотрудники.ДатаРождения,Сотрудники.СтатусНалогоплательщика,Сотрудники.АдресЗарубежом,СведенияОВычетах.КодВычета";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОбщаяСуммаДоходаПоСтавке13,Сотрудники.ОблагаемаяСуммаДоходаПоСтавке13,Сотрудники.ИсчисленоПоСтавке13,Сотрудники.УдержаноПоСтавке13,Сотрудники.ЗадолженностьПоСтавке13";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ИзлишнеУдержаноПоСтавке13,Сотрудники.ПеречисленоПоСтавке13,Сотрудники.ОбщаяСуммаДоходаПоСтавке30,Сотрудники.ОблагаемаяСуммаДоходаПоСтавке30";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ИсчисленоПоСтавке30,Сотрудники.УдержаноПоСтавке30,Сотрудники.ЗадолженностьПоСтавке30,Сотрудники.ИзлишнеУдержаноПоСтавке30,Сотрудники.ПеречисленоПоСтавке30";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОбщаяСуммаДоходаПоСтавке9,Сотрудники.ОблагаемаяСуммаДоходаПоСтавке9,Сотрудники.ИсчисленоПоСтавке9,Сотрудники.УдержаноПоСтавке9,Сотрудники.ЗадолженностьПоСтавке9";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ИзлишнеУдержаноПоСтавке9,Сотрудники.ПеречисленоПоСтавке9,Сотрудники.ОбщаяСуммаДоходаПоСтавке15,Сотрудники.ОблагаемаяСуммаДоходаПоСтавке15,Сотрудники.ИсчисленоПоСтавке15";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.УдержаноПоСтавке15,Сотрудники.ЗадолженностьПоСтавке15,Сотрудники.ИзлишнеУдержаноПоСтавке15,Сотрудники.ПеречисленоПоСтавке15,Сотрудники.ОбщаяСуммаДоходаПоСтавке35";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОблагаемаяСуммаДоходаПоСтавке35,Сотрудники.ИсчисленоПоСтавке35,Сотрудники.УдержаноПоСтавке35,Сотрудники.ЗадолженностьПоСтавке35,Сотрудники.ИзлишнеУдержаноПоСтавке35";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПеречисленоПоСтавке35,СведенияОДоходах.СуммаДохода,СведенияОДоходах.СуммаВычета,СведенияОВычетах.СуммаВычета";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОблагаемаяСуммаДоходаПоСтавке5,Сотрудники.ИсчисленоПоСтавке5,Сотрудники.УдержаноПоСтавке5,Сотрудники.ЗадолженностьПоСтавке5,Сотрудники.ИзлишнеУдержаноПоСтавке5";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПеречисленоПоСтавке5,Сотрудники.ОбщаяСуммаДоходаПоСтавке5";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОблагаемаяСуммаДоходаПоСтавке10,Сотрудники.ИсчисленоПоСтавке10,Сотрудники.УдержаноПоСтавке10,Сотрудники.ЗадолженностьПоСтавке10,Сотрудники.ИзлишнеУдержаноПоСтавке10";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПеречисленоПоСтавке10,Сотрудники.ОбщаяСуммаДоходаПоСтавке10";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОблагаемаяСуммаДоходаПоСтавке3,Сотрудники.ИсчисленоПоСтавке3,Сотрудники.УдержаноПоСтавке3,Сотрудники.ЗадолженностьПоСтавке3,Сотрудники.ИзлишнеУдержаноПоСтавке3";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПеречисленоПоСтавке3,Сотрудники.ОбщаяСуммаДоходаПоСтавке3";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОблагаемаяСуммаДоходаПоСтавке6,Сотрудники.ИсчисленоПоСтавке6,Сотрудники.УдержаноПоСтавке6,Сотрудники.ЗадолженностьПоСтавке6,Сотрудники.ИзлишнеУдержаноПоСтавке6";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПеречисленоПоСтавке6,Сотрудники.ОбщаяСуммаДоходаПоСтавке6";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОблагаемаяСуммаДоходаПоСтавке7,Сотрудники.ИсчисленоПоСтавке7,Сотрудники.УдержаноПоСтавке7,Сотрудники.ЗадолженностьПоСтавке7,Сотрудники.ИзлишнеУдержаноПоСтавке7";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПеречисленоПоСтавке7,Сотрудники.ОбщаяСуммаДоходаПоСтавке7";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ОблагаемаяСуммаДоходаПоСтавке12,Сотрудники.ИсчисленоПоСтавке12,Сотрудники.УдержаноПоСтавке12,Сотрудники.ЗадолженностьПоСтавке12,Сотрудники.ИзлишнеУдержаноПоСтавке12";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник,СведенияОДоходах.Сотрудник,СведенияОВычетах.Сотрудник,Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество";
	НовыеСведения.ПоляДоступа		= "Сотрудники.ПеречисленоПоСтавке12,Сотрудники.ОбщаяСуммаДоходаПоСтавке12";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "РасходыНаСтроительствоПриобретение,ПроцентыПоКредитам,ПроцентыПриПерекредитовании";
	НовыеСведения.ОбластьДанных		= "Имущество";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ИмущественныеВычетыНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Сумма";
	НовыеСведения.ОбластьДанных		= "Имущество";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Сумма";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Сумма";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Сумма";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрНакопления.СведенияОДоходахНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо,Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммаДохода,СуммаВычета";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Размер";
	НовыеСведения.ОбластьДанных		= "Доходы";
	НовыеСведения = ТаблицаСведений.Добавить();
	
	НовыеСведения.Объект			= "РегистрСведений.ВычетыПредыдущегоМестаРаботыНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "СуммаВычета";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.СтандартныеВычетыНаДетейНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "КодВычета,КоличествоДетей,КоличествоДетейПоОкончании";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "КодВычетаЛичный";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ";
	НовыеСведения.ПоляРегистрации	= "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа		= "Статус";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Документ.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ";
	НовыеСведения.ПоляРегистрации	= "Сотрудники.Сотрудник";
	НовыеСведения.ПоляДоступа		= "Сотрудники.Фамилия,Сотрудники.Имя,Сотрудники.Отчество,Сотрудники.ИНН,Сотрудники.ВидДокумента,Сотрудники.СерияДокумента,Сотрудники.НомерДокумента,Сотрудники.КемВыданДокумент,Сотрудники.ДатаВыдачиДокумента,Сотрудники.ДатаРождения";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";

	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.СправкиНДФЛДляИФНССведенияОДоходах";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммаДохода,СуммаВычета";
	НовыеСведения.ОбластьДанных		= "Доходы";
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.СправкиНДФЛДляИФНССведенияОВычетах";
	НовыеСведения.ПоляРегистрации	= "Сотрудник";
	НовыеСведения.ПоляДоступа		= "СуммаВычета";
	НовыеСведения.ОбластьДанных		= "Доходы";
	
КонецПроцедуры

// Добавляет в МенеджерВременныхТаблиц временную таблицу с данными НДФЛ по документу.
//
Процедура СоздатьВТДанныеНДФЛПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, ОписаниеТаблицДокумента = Неопределено, ФизическиеЛица = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПримененныйВычет.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтрокиНДФЛ,
	|	ПримененныйВычет.МесяцПериодаПредоставленияВычета КАК МесяцПериодаПредоставленияВычета,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код311)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетИмущественныйРасходы,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код312)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код318)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код320о)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетРасходыНаСвоеОбучение,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код321)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетРасходыНаОбучениеДетей,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код324)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетРасходыНаЛечение,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код325)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетСтраховыеВзносыНаМедУслуги,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код326)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетРасходыНаДорогостоящееЛечение,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код329)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код108)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетей,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код110)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейДвойной,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код111)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейДвойнойВторой,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код115)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаВторогоРебенка,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код119)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаВторогоРебенкаДвойной,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код123)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код116)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаТретьегоРебенка,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код120)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код124)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код109)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейИнвалидов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код112)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код113)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код130)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код135)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейДвойнойОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код143)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейДвойнойВторойОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код131)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаВторогоРебенкаОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код137)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код145)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код132)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаТретьегоРебенкаОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код139)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код147)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код117о)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейИнвалидовОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код121о)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА ПримененныйВычет.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код125о)
	|					ТОГДА ПримененныйВычет.РазмерВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов
	|ПОМЕСТИТЬ ВТДанныеОВычетах
	|ИЗ
	|	#ТаблицаПримененныеВычеты КАК ПримененныйВычет
	|ГДЕ
	|	ПримененныйВычет.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПримененныйВычет.ИдентификаторСтрокиНДФЛ,
	|	ПримененныйВычет.МесяцПериодаПредоставленияВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПримененныйВычет.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтрокиНДФЛ,
	|	МИНИМУМ(ПримененныйВычет.МесяцПериодаПредоставленияВычета) КАК МесяцПериодаПредоставленияВычета
	|ПОМЕСТИТЬ ВТПервыеСтроки
	|ИЗ
	|	ВТДанныеОВычетах КАК ПримененныйВычет
	|
	|СГРУППИРОВАТЬ ПО
	|	ПримененныйВычет.ИдентификаторСтрокиНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.Ссылка КАК Ссылка,
	|	ТаблицаНДФЛ.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтроки,
	|	ТаблицаНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ПримененныйВычет.МесяцПериодаПредоставленияВычета КАК МесяцПериодаПредоставленияВычета,
	|	ТаблицаНДФЛ.Подразделение КАК Подразделение,
	|	ТаблицаНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	ВЫБОР
	|		КОГДА ПримененныйВычет.МесяцПериодаПредоставленияВычета <> ПервыеСтроки.МесяцПериодаПредоставленияВычета
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНДФЛ.Налог
	|	КОНЕЦ КАК НалогПоСтавке13,
	|	ВЫБОР
	|		КОГДА ПримененныйВычет.МесяцПериодаПредоставленияВычета <> ПервыеСтроки.МесяцПериодаПредоставленияВычета
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНДФЛ.ЗачтеноАвансовыхПлатежей
	|	КОНЕЦ КАК ЗачтеноАвансовыхПлатежейПоСтавке13,
	|	ВЫБОР
	|		КОГДА ПримененныйВычет.МесяцПериодаПредоставленияВычета <> ПервыеСтроки.МесяцПериодаПредоставленияВычета
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНДФЛ.НалогСПревышения
	|	КОНЕЦ КАК НалогСПревышенияПоСтавке13,
	|	ВЫБОР
	|		КОГДА ПримененныйВычет.МесяцПериодаПредоставленияВычета <> ПервыеСтроки.МесяцПериодаПредоставленияВычета
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышения
	|	КОНЕЦ КАК ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКодВычета КАК ПримененныйВычетЛичныйКодВычета,
	|	ВЫБОР
	|		КОГДА ПримененныйВычет.МесяцПериодаПредоставленияВычета <> ПервыеСтроки.МесяцПериодаПредоставленияВычета
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНДФЛ.ПримененныйВычетЛичный
	|	КОНЕЦ КАК ПримененныйВычетЛичный,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета КАК ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета,
	|	ВЫБОР
	|		КОГДА ПримененныйВычет.МесяцПериодаПредоставленияВычета <> ПервыеСтроки.МесяцПериодаПредоставленияВычета
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату
	|	КОНЕЦ КАК ПримененныйВычетЛичныйКЗачетуВозврату,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетИмущественныйРасходы, 0) КАК ПримененныйВычетИмущественныйРасходы,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетИмущественныйПроцентыПоКредитам, 0) КАК ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании, 0) КАК ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетРасходыНаСвоеОбучение, 0) КАК ПримененныйВычетРасходыНаСвоеОбучение,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетРасходыНаОбучениеДетей, 0) КАК ПримененныйВычетРасходыНаОбучениеДетей,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетРасходыНаЛечение, 0) КАК ПримененныйВычетРасходыНаЛечение,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетСтраховыеВзносыНаМедУслуги, 0) КАК ПримененныйВычетСтраховыеВзносыНаМедУслуги,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетРасходыНаДорогостоящееЛечение, 0) КАК ПримененныйВычетРасходыНаДорогостоящееЛечение,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни, 0) КАК ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетей, 0) КАК ПримененныйВычетНаДетей,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейДвойной, 0) КАК ПримененныйВычетНаДетейДвойной,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейДвойнойВторой, 0) КАК ПримененныйВычетНаДетейДвойнойВторой,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаВторогоРебенка, 0) КАК ПримененныйВычетНаВторогоРебенка,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаВторогоРебенкаДвойной, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойной,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаВторогоРебенкаДвойнойВторой, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаТретьегоРебенка, 0) КАК ПримененныйВычетНаТретьегоРебенка,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаТретьегоРебенкаДвойной, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейИнвалидов, 0) КАК ПримененныйВычетНаДетейИнвалидов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейИнвалидовДвойной, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойной,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейИнвалидовДвойнойВторой, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейОпекунов, 0) КАК ПримененныйВычетНаДетейОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейДвойнойОпекунов, 0) КАК ПримененныйВычетНаДетейДвойнойОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаДетейДвойнойВторойОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаВторогоРебенкаОпекунов, 0) КАК ПримененныйВычетНаВторогоРебенкаОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаТретьегоРебенкаОпекунов, 0) КАК ПримененныйВычетНаТретьегоРебенкаОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейИнвалидовОпекунов, 0) КАК ПримененныйВычетНаДетейИнвалидовОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,
	|	ЕСТЬNULL(ПримененныйВычет.ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов, 0) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов
	|ПОМЕСТИТЬ ВТДанныеНДФЛ
	|ИЗ
	|	#ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВычетах КАК ПримененныйВычет
	|		ПО ТаблицаНДФЛ.ИдентификаторСтрокиНДФЛ = ПримененныйВычет.ИдентификаторСтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервыеСтроки КАК ПервыеСтроки
	|		ПО ТаблицаНДФЛ.ИдентификаторСтрокиНДФЛ = ПервыеСтроки.ИдентификаторСтрокиНДФЛ
	|ГДЕ
	|	ТаблицаНДФЛ.Ссылка = &Ссылка
	|	И ТаблицаНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)";
	
	Если ОписаниеТаблицДокумента = Неопределено Тогда
		ПолноеИмяДокумента = ДокументСсылка.Метаданные().ПолноеИмя();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНДФЛ", ПолноеИмяДокумента + ".НДФЛ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПримененныеВычеты", ПолноеИмяДокумента + ".ПримененныеВычетыНаДетейИИмущественные");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНДФЛ", ОписаниеТаблицДокумента.ИмяТаблицыСНалогами);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПримененныеВычеты", ОписаниеТаблицДокумента.ИмяТаблицыСВычетами);
	КонецЕсли;
	
	// Создаем временную таблицу ВТДанныеНДФЛ.
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТаблицаНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)", "");
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	УдаляемыеВТ = Новый Массив;
	УдаляемыеВТ.Добавить("ВТДанныеОВычетах");
	УдаляемыеВТ.Добавить("ВТПервыеСтроки");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдаляемыеВТ);
	
КонецПроцедуры

// Возвращает таблицу значений с данными по НДФЛ, прочитанную из данных документа.
//      	 
// Параметры:
//      ДокументСсылка - ДокументСсылка - документ, содержащий сведения о суммах налогов и вычетов.
//      ОписаниеТаблицДокумента - структура - (необязательный), с полями
//      			ИмяТаблицыСНалогами
//      			ИмяТаблицыСВычетами
//      	если не указан, в качестве источника данных используются табличные
//      		части документа: НДФЛ и ПримененныеВычетыНаДетейИИмущественные
//      	если указан, тогда упомянутые таблицы (реальные или временные) должны  
//				иметь тот же состав полей, что имеют табличные части документа 
//				НачислениеЗарплаты НДФЛ и ПримененныеВычетыНаДетейИИмущественные.
//		МенеджерВременныхТаблиц - (необязательный), должен содержать перечисленные 
//      	в ОписаниеТаблицДокумента временные таблицы.
//      	 
// Возвращаемое значение:
//	таблица значений с колонками:
//		Ссылка,
//		НомерСтроки,
//		ФизическоеЛицо,
//		МесяцНалоговогоПериода,
//		Подразделение,
//		КатегорияДохода,
//		НалогПоСтавке13,
//		НалогСПревышенияПоСтавке13,
//		ЗачтеноАвансовыхПлатежейПоСтавке13,
//		ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13,
//		ПримененныйВычетЛичныйКодВычета,
//		ПримененныйВычетЛичный,
//		ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета,
//		ПримененныйВычетЛичныйКЗачетуВозврату,
//		ПримененныйВычетИмущественныйРасходы,
//		ПримененныйВычетИмущественныйПроцентыПоКредитам,
//		ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
//		ПримененныйВычетНаДетей,
//		ПримененныйВычетНаДетейДвойной,
//		ПримененныйВычетНаДетейДвойнойВторой,
//		ПримененныйВычетНаВторогоРебенка,
//		ПримененныйВычетНаВторогоРебенкаДвойной,
//		ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
//		ПримененныйВычетНаТретьегоРебенка,
//		ПримененныйВычетНаТретьегоРебенкаДвойной,
//		ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
//		ПримененныйВычетНаДетейИнвалидов,
//		ПримененныйВычетНаДетейИнвалидовДвойной,
//		ПримененныйВычетНаДетейИнвалидовДвойнойВторой
//		ПримененныйВычетНаДетейОпекунов,
//		ПримененныйВычетНаДетейДвойнойОпекунов,
//		ПримененныйВычетНаДетейДвойнойВторойОпекунов,
//		ПримененныйВычетНаВторогоРебенкаОпекунов,
//		ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,
//		ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов,
//		ПримененныйВычетНаТретьегоРебенкаОпекунов,
//		ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,
//		ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,
//		ПримененныйВычетНаДетейИнвалидовОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов
//		ПримененныйВычетРасходыНаСвоеОбучение,ПримененныйВычетРасходыНаОбучениеДетей,ПримененныйВычетРасходыНаЛечение,ПримененныйВычетСтраховыеВзносыНаМедУслуги,ПримененныйВычетРасходыНаДорогостоящееЛечение,ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни
//      	 
Функция ДанныеДокументаОНалогеПоОсновнойСтавкеИВычетах(ДокументСсылка, ОписаниеТаблицДокумента = Неопределено, МенеджерВременныхТаблиц = Неопределено, ФизическиеЛица = Неопределено) Экспорт

	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	СоздатьВТДанныеНДФЛПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, ОписаниеТаблицДокумента, ФизическиеЛица);
	
	// Получаем данные НДФЛ
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТДанныеНДФЛ КАК НДФЛ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
    Возврат Запрос.Выполнить().Выгрузить()
	
КонецФункции

Функция ТаблицаНДФЛ() Экспорт
	
	НДФЛ = Новый ТаблицаЗначений;
	
	ТипЗначенияВычет = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	
	НДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НДФЛ.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	НДФЛ.Колонки.Добавить("МесяцПериодаПредоставленияВычета", Новый ОписаниеТипов("Дата"));
	НДФЛ.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	НДФЛ.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	НДФЛ.Колонки.Добавить("КодВычетаЛичный", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	НДФЛ.Колонки.Добавить("ПримененныйВычетЛичный", ТипЗначенияВычет);
	
	НазванияВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыВычетовНаДетей());
	Для Каждого НазваниеВычета Из НазванияВычетов Цикл
		НДФЛ.Колонки.Добавить(НазваниеВычета, ТипЗначенияВычет);
	КонецЦикла;
		
	НазванияВычетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыИмущественныхВычетов());
	Для Каждого НазваниеВычета Из НазванияВычетов Цикл
		НДФЛ.Колонки.Добавить(НазваниеВычета, ТипЗначенияВычет);
	КонецЦикла;
	
	ТипЗначенияНалог = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13,0));
	НДФЛ.Колонки.Добавить("НомерСтроки", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("НалогПоСтавке13", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("НалогСПревышенияПоСтавке13", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке13", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13", ТипЗначенияНалог);
	
	НДФЛ.Колонки.Добавить("ИдентификаторСтрокиНДФЛ", Новый ОписаниеТипов("Число"));
	НДФЛ.Колонки.Добавить("Налог", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("ЗачтеноАвансовыхПлатежей", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	НДФЛ.Колонки.Добавить("Сумма", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("НалогСПревышения", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("СуммаСПревышения", ТипЗначенияНалог);
	НДФЛ.Колонки.Добавить("ЗачтеноАвансовыхПлатежейСПревышения", ТипЗначенияНалог);
	
	НДФЛ.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	НДФЛ.Колонки.Добавить("УчтенныеОснования", Новый ОписаниеТипов("Массив"));
	
	НДФЛ.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	НДФЛ.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	
	Возврат НДФЛ;
	
КонецФункции

Функция ТаблицаПримененныеВычетыНДФЛ() Экспорт
	
	ПримененныеВычеты = Новый ТаблицаЗначений;
	ПримененныеВычеты.Колонки.Добавить("ИдентификаторСтрокиНДФЛ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ПримененныеВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ПримененныеВычеты.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ПримененныеВычеты.Колонки.Добавить("МесяцПериодаПредоставленияВычета", Новый ОписаниеТипов("Дата"));
	
	Возврат ПримененныеВычеты;
	
КонецФункции

Функция ОписаниеКолонокТаблицыНДФЛ(ТаблицаИсточник) Экспорт
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений") Тогда
		 Колонки = ТаблицаИсточник.Колонки
	Иначе
		 Колонки = ТаблицаИсточник.Выгрузить().Колонки
	КонецЕсли;
	КолонкиПоиска = "";
	КолонкиСвязиТаблиц = "";
	КолонкиСуммирования = "";
	Для каждого ОписаниеКолонки Из Колонки Цикл
		ТипыКолонки = ОписаниеКолонки.ТипЗначения;
		Если ОписаниеКолонки.Имя = "НомерСтроки" Или ОписаниеКолонки.Имя = "ИдентификаторСтрокиНДФЛ" Или ОписаниеКолонки.Имя = "ФиксСтрока" Или ОписаниеКолонки.Имя = "ФиксРасчет" Или ОписаниеКолонки.Имя = "ПримененныйВычетЛичныйКодВычета" Тогда
			КолонкиСвязиТаблиц = КолонкиСвязиТаблиц + ?(Не ЗначениеЗаполнено(КолонкиСвязиТаблиц),"",",") + ОписаниеКолонки.Имя;
		ИначеЕсли ОписаниеКолонки.Имя = "МесяцПериодаПредоставленияВычета" Или ОписаниеКолонки.Имя = "РаспределениеПоСтатьям" Или ОписаниеКолонки.Имя = "УчтенныеОснования" Тогда
		ИначеЕсли СтрНачинаетсяС(НРег(ОписаниеКолонки.Имя),"удалить") Тогда
		ИначеЕсли ТипыКолонки.СодержитТип(Тип("Число")) Тогда
			КолонкиСуммирования = КолонкиСуммирования + ?(Не ЗначениеЗаполнено(КолонкиСуммирования),"",",") + ОписаниеКолонки.Имя;
		Иначе
			КолонкиПоиска = КолонкиПоиска + ?(Не ЗначениеЗаполнено(КолонкиПоиска),"",",") + ОписаниеКолонки.Имя;
			КолонкиСвязиТаблиц = КолонкиСвязиТаблиц + ?(Не ЗначениеЗаполнено(КолонкиСвязиТаблиц),"",",") + ОписаниеКолонки.Имя;
		КонецЕсли;
	КонецЦикла; 
	Возврат Новый Структура("КолонкиПоиска,КолонкиСуммирования,КолонкиСвязиТаблиц",КолонкиПоиска,КолонкиСуммирования,КолонкиСвязиТаблиц)
КонецФункции

Функция ТаблицаНДФЛбезМесяцаПериодаПредоставленияВычета(ТаблицаИсточник, ОписаниеКолонок) Экспорт
	
	Если ТаблицаИсточник.Количество() = 1 Тогда
		Возврат ТаблицаИсточник.Скопировать()
	КонецЕсли;
	
	ТаблицаРезультат = ТаблицаИсточник.СкопироватьКолонки();
	СтруктураПоиска = Новый Структура(ОписаниеКолонок.КолонкиСвязиТаблиц);
	КопияТаблицы = ТаблицаИсточник.Скопировать();
	КопияТаблицы.Свернуть(ОписаниеКолонок.КолонкиСвязиТаблиц, ОписаниеКолонок.КолонкиСуммирования);
	ИменаКолонокСуммирования = СтрРазделить(ОписаниеКолонок.КолонкиСуммирования, ",", Ложь);
	Для каждого СтрокаТЗ Из КопияТаблицы Цикл
		Если ЕстьДанныеВСтроке(СтрокаТЗ, ИменаКолонокСуммирования) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
			СтрокиДанных = ТаблицаИсточник.НайтиСтроки(СтруктураПоиска);
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиДанных[0], "РаспределениеПоСтатьям,УчтенныеОснования");
			Если СтрокиДанных.Количество() > 1 Тогда
				Для Сч = 1 По СтрокиДанных.Количество() - 1 Цикл
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиДанных[Сч].РаспределениеПоСтатьям, НоваяСтрока.РаспределениеПоСтатьям);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НоваяСтрока.УчтенныеОснования, СтрокиДанных[Сч].УчтенныеОснования, Истина);
				КонецЦикла; 
				ОтражениеЗарплатыВУчете.СвернутьТаблицу(НоваяСтрока.РаспределениеПоСтатьям);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат
	
КонецФункции

Функция ДатаОперацииПоДокументу(ДатаДокумента, ПериодРегистрации) Экспорт

	Возврат Мин(Макс(ДатаДокумента, НачалоМесяца(ПериодРегистрации)),КонецМесяца(ПериодРегистрации))

КонецФункции

// Функция возвращает код вычета для дохода НДФЛ.
// Если код вычета не определен, то возвращается пустая ссылка.
Функция КодВычетаПоКодуДоходаНДФЛ(КодДоходаНДФЛ) Экспорт
	КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();	
	Если ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
		РеквизитыКодаДохода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КодДоходаНДФЛ, "ИмеетЕдинственныйВычет,ВычетПоУмолчанию");
		Если РеквизитыКодаДохода.ИмеетЕдинственныйВычет Тогда
			КодВычета  = РеквизитыКодаДохода.ВычетПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	Возврат КодВычета	
КонецФункции 

// Возвращает соответствие кодов доходов и допустимых для них вычетов.
// Соответствие поддерживается с 2010 года.
//
// Параметры:
//	НалоговыйПериод - число - налоговый период (год).
//
// Возвращаемое значение:
//	Соответствие:
//		ключом является Код дохода - СправочникСсылка.ВидыДоходовНДФЛ
//		значением является массив Кодов вычета - СправочникСсылка.ВидыВычетовНДФЛ
//
Функция ВычетыКДоходам(НалоговыйПериод) Экспорт
	
	СоответствиеДоступныхВычетовДоходам = Новый Соответствие;
	
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1010, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код601));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1211, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код607));
	
	// Описание кодов 1530 и 1531 по годам.
	Если НалоговыйПериод > 2016 Тогда // с 2017 года
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код201);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код208);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код216);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код218);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код222);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код618);
		
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1530, МассивДоступныхВычетов);
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код217);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код219);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код223);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1531, МассивДоступныхВычетов);
		
	ИначеЕсли НалоговыйПериод = 2016 Тогда // 2016 год
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код201);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код208);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код216);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код218);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код222);
		
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1530, МассивДоступныхВычетов);
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код217);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код219);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код223);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1531, МассивДоступныхВычетов);
		
	ИначеЕсли НалоговыйПериод = 2015 Тогда // 2015 год
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код201);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код218);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код222);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код618);
		
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1530, МассивДоступныхВычетов);
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код217);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код218);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код219);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код223);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1531, МассивДоступныхВычетов);
		
	ИначеЕсли НалоговыйПериод = 2014 Тогда // 2014 год
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код201);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код204);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код205);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код208);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код212);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код216);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код218);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код222);
		
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1530, МассивДоступныхВычетов);
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код217);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код218);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код219);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код223);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код620);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1531, МассивДоступныхВычетов);
		
	ИначеЕсли НалоговыйПериод > 2011 Тогда // 2012-2013 годы
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код201);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код204);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код205);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код208);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код212);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код216);
		
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1530, МассивДоступныхВычетов);
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код217);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код620);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1531, МассивДоступныхВычетов);
		
	ИначеЕсли НалоговыйПериод = 2011 Тогда // 2011 год
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код201);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код204);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код205);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код208);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код209);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код211);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код212);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код215);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код216);
		
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1530, МассивДоступныхВычетов);
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код203);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код216);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код217);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1531, МассивДоступныхВычетов);
		
	Иначе // по 2010 год
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код201);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код204);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код205);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код208);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код209);
		
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1530, МассивДоступныхВычетов);
		
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код203);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1531, МассивДоступныхВычетов);
		
	КонецЕсли;
	
	// Описание кода 1532 по годам.
	МассивДоступныхВычетов = Новый Массив;
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код205);	
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код206);
	Если НалоговыйПериод = 2010 Или НалоговыйПериод = 2011 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код207);
	КонецЕсли;
	Если НалоговыйПериод > 2015 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код208);
	КонецЕсли;
	Если НалоговыйПериод < 2017 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код209);
	КонецЕсли;
	Если НалоговыйПериод = 2011 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код210);
	КонецЕсли;
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1532, МассивДоступныхВычетов);
	
	// Описание кода 1533 по годам.
	МассивДоступныхВычетов = Новый Массив;
	Если НалоговыйПериод = 2010 Или НалоговыйПериод = 2011 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код202);	
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код203);	
	КонецЕсли;
	Если НалоговыйПериод >= 2014 Тогда // с 2014 года
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код220);
	КонецЕсли;
	Если НалоговыйПериод >= 2011 И НалоговыйПериод <= 2014 Тогда // с 2011 по 2014 годы
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код620);
	КонецЕсли;
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1533, МассивДоступныхВычетов);
	
	// Описание кода 1535 по годам.
	МассивДоступныхВычетов = Новый Массив;
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код207);
	Если НалоговыйПериод >= 2014 Тогда // с 2014 года
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код209);
	КонецЕсли;
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код210);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1535, МассивДоступныхВычетов);
		
	// Описание кода 1536 по годам.
	МассивДоступныхВычетов = Новый Массив;
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код203);	
	Если НалоговыйПериод >= 2014 Тогда // с 2014 года
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код224);
	КонецЕсли;
	Если НалоговыйПериод > 2011 И НалоговыйПериод <= 2014 Тогда // с 2012 по 2014 годы
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код620);
	КонецЕсли;
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1536, МассивДоступныхВычетов);
		
	// Описание кода 1537 по годам.
	Если НалоговыйПериод >= 2011 Тогда // с 2011 года
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код211);	
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1537, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1538 по годам.
	Если НалоговыйПериод >= 2011 Тогда // с 2011 года
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код215);
		Если НалоговыйПериод = 2011 Тогда // 2011 год
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код214);
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код216);
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код217);
		КонецЕсли;
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1538, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1539 по годам.
	Если НалоговыйПериод >= 2011 Тогда // с 2011 года
		МассивДоступныхВычетов = Новый Массив;
		Если НалоговыйПериод = 2011 Тогда // 2011 год
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код212);
		КонецЕсли;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код213);
		Если НалоговыйПериод <= 2014 Тогда
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код214);
		КонецЕсли;
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1539, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1541 по годам.
	Если НалоговыйПериод >= 2011 Тогда // с 2011 года
		МассивДоступныхВычетов = Новый Массив;
		Если НалоговыйПериод <= 2014 Тогда // по 2014 год
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код212);
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код213);
		КонецЕсли;
		Если НалоговыйПериод >= 2014 Тогда // с 2014 года
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код620);
		КонецЕсли;
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1541, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1543 по годам.
	Если НалоговыйПериод > 2016 Тогда 
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1543, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код617));
	ИначеЕсли НалоговыйПериод >= 2014 Тогда 	
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1543, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код221));
	КонецЕсли;
	
	// Описание кода 1544 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код221);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код233);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код237);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код239);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код251);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1544, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1545 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код226);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код234);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код238);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код240);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1545, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1546 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код228);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код250);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код251);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1546, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1547 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код235);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1547, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1548 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код229);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код241);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код252);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1548, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1549 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код227);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код236);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1549, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1551 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код230);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1551, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1552 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код232);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1552, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1553 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код231);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1553, МассивДоступныхВычетов);
	КонецЕсли;
	
	// Описание кода 1554 по годам.
	Если НалоговыйПериод >= 2016 Тогда
		МассивДоступныхВычетов = Новый Массив;
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код620);
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1554, МассивДоступныхВычетов);
	КонецЕсли;
	
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2010, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код403));

	МассивДоступныхВычетов = Новый Массив;
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код404);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код405);	
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2201, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2202, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2203, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2204, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2205, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2206, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2207, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2208, МассивДоступныхВычетов);
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2209, МассивДоступныхВычетов);
	
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2720, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код501));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2730, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код502));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2740, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код505));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2760, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код503));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2761, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код506));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2762, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код508));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2770, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код504));
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2790, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код507));
	
	
	// описание кода 2791
	Если НалоговыйПериод < 2016 Тогда // по 2015 год
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2791, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код509));
	КонецЕсли;
	
	// описание кода 3010
	Доход3010 = УчетНДФЛПовтИсп.Доход3010();
	Если ЗначениеЗаполнено(Доход3010) Тогда
		Если НалоговыйПериод > 2020 Тогда // с 2021 года	
			Доход3010 = УчетНДФЛПовтИсп.Доход3010();
			МассивДоступныхВычетов = Новый Массив;
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код280);
			МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код511ПоВыигрышам);	
			СоответствиеДоступныхВычетовДоходам.Вставить(Доход3010, МассивДоступныхВычетов);
		ИначеЕсли НалоговыйПериод > 2017 Тогда // с 2018 года
			СоответствиеДоступныхВычетовДоходам.Вставить(Доход3010, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код620));
		КонецЕсли;
	КонецЕсли; 
	
	// описание кода 2763
	Если НалоговыйПериод > 2019 Тогда // с 2020 года
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код2763, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код511));
	КонецЕсли;
	
	// описание кода 1500
	Если НалоговыйПериод > 2020 Тогда // с 2021 года	
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код1500, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код260));
	КонецЕсли;
	
	// описание кода 3011
	Если НалоговыйПериод > 2020 Тогда // с 2021 года	
		СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код3011, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код511ПоВыигрышам));
	КонецЕсли;
	
	СоответствиеДоступныхВычетовДоходам.Вставить(Справочники.ВидыДоходовНДФЛ.Код4800, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыВычетовНДФЛ.Код620));
		
	Возврат СоответствиеДоступныхВычетовДоходам;
	
КонецФункции

// Возвращает массив кодов вычетов соответствующего года с учетом ограничения переданной группой вычетов.
// Поддерживается с 2010 года.
//
// Параметры:
//	НалоговыйПериод - число - налоговый период (год).
//	ГруппаВычета - ПеречислениеСсылка.ГруппыВычетовПоНДФЛ, массив - 
//
// Возвращаемое значение:
//	Массив значений типа СправочникСсылка.ВидыВычетовНДФЛ
//
Функция ВычетыНалогоплательщика(НалоговыйПериод, Знач ГруппаВычета = Неопределено) Экспорт

	МассивДоступныхВычетов = Новый Массив;
	
	// Личные вычеты
	Если НалоговыйПериод > 2011 Тогда // с 2012 отменен 103 вычет
	Иначе // по 2011
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код103);
	КонецЕсли;
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код104);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код105);
	
	// Вычеты на детей
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код108);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код109);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код110);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код111);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код112);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код113);
	Если НалоговыйПериод > 2011 Тогда
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код115);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код116);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код119);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код120);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код123);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код124);
	КонецЕсли;
	Если НалоговыйПериод > 2014 Тогда
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код130);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код131);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код132);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код117о);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код135);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код137);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код139);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код121о);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код143);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код145);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код147);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код125о);
	КонецЕсли;
	
	// Имущественные вычеты
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код311);
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код312);
	Если НалоговыйПериод < 2016 Тогда
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код318);
	КонецЕсли;
	
	// Социальные вычеты
	МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код319);
	Если НалоговыйПериод > 2012 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код320);
	КонецЕсли;
	Если НалоговыйПериод > 2015 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код320о);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код321);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код324);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код325);
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код326);
	КонецЕсли;
	Если НалоговыйПериод > 2016 Тогда 
		МассивДоступныхВычетов.Добавить(Справочники.ВидыВычетовНДФЛ.Код329);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГруппаВычета) Тогда
		ГруппаВычета = Новый Массив;
		ГруппаВычета.Добавить(Перечисления.ГруппыВычетовПоНДФЛ.Имущественные);
		ГруппаВычета.Добавить(Перечисления.ГруппыВычетовПоНДФЛ.Социальные);
		ГруппаВычета.Добавить(Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО);
		ГруппаВычета.Добавить(Перечисления.ГруппыВычетовПоНДФЛ.Стандартные);
		ГруппаВычета.Добавить(Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыВычетов", ГруппаВычета);
	Запрос.УстановитьПараметр("Ссылки", МассивДоступныхВычетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыВычетовНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|ГДЕ
	|	ВидыВычетовНДФЛ.ГруппаВычета В(&ГруппыВычетов)
	|	И ВидыВычетовНДФЛ.Ссылка В(&Ссылки)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция РассчитываемыеРесурсыПоОсновнойСтавке() Экспорт

	Возврат "НалогПоСтавке13,НалогСПревышенияПоСтавке13,ПримененныйВычетЛичный," + РассчитываемыеРесурсыВычетовНаДетей() + "," + РассчитываемыеРесурсыИмущественныхВычетов();

КонецФункции 

Функция РассчитываемыеРесурсыВычетовНаДетей() Экспорт

	Возврат "ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой,ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой,ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой" +
			",ПримененныйВычетНаДетейОпекунов,ПримененныйВычетНаДетейДвойнойОпекунов,ПримененныйВычетНаДетейДвойнойВторойОпекунов,ПримененныйВычетНаВторогоРебенкаОпекунов,ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов,ПримененныйВычетНаТретьегоРебенкаОпекунов,ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов,ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,ПримененныйВычетНаДетейИнвалидовОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов";

КонецФункции 

Функция РассчитываемыеРесурсыИмущественныхВычетов() Экспорт

	Возврат "ПримененныйВычетРасходыНаДорогостоящееЛечение,ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни,ПримененныйВычетСтраховыеВзносыНаМедУслуги,ПримененныйВычетРасходыНаЛечение,ПримененныйВычетРасходыНаОбучениеДетей,ПримененныйВычетРасходыНаСвоеОбучение,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,ПримененныйВычетИмущественныйРасходы";

КонецФункции 

Функция ВидыВычетовПоПолямТаблицы() Экспорт

	// Определяем соответствие видов вычетов полям таблицы.
	ВидыВычетов = Новый Соответствие;
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйПроцентыПоКредитам", Справочники.ВидыВычетовНДФЛ.Код312);
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", Справочники.ВидыВычетовНДФЛ.Код318);
	ВидыВычетов.Вставить("ПримененныйВычетИмущественныйРасходы", Справочники.ВидыВычетовНДФЛ.Код311);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетей", Справочники.ВидыВычетовНДФЛ.Код108);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойной", Справочники.ВидыВычетовНДФЛ.Код110);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код111);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенка", Справочники.ВидыВычетовНДФЛ.Код115);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойной", Справочники.ВидыВычетовНДФЛ.Код119);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код123);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенка", Справочники.ВидыВычетовНДФЛ.Код116);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойной", Справочники.ВидыВычетовНДФЛ.Код120);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код124);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидов", Справочники.ВидыВычетовНДФЛ.Код109);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойной", Справочники.ВидыВычетовНДФЛ.Код112);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойнойВторой", Справочники.ВидыВычетовНДФЛ.Код113);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейОпекунов", Справочники.ВидыВычетовНДФЛ.Код130);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойнойОпекунов", Справочники.ВидыВычетовНДФЛ.Код135);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейДвойнойВторойОпекунов", Справочники.ВидыВычетовНДФЛ.Код143);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаОпекунов", Справочники.ВидыВычетовНДФЛ.Код131);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов", Справочники.ВидыВычетовНДФЛ.Код137);
	ВидыВычетов.Вставить("ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов", Справочники.ВидыВычетовНДФЛ.Код145);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаОпекунов", Справочники.ВидыВычетовНДФЛ.Код132);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов", Справочники.ВидыВычетовНДФЛ.Код139);
	ВидыВычетов.Вставить("ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов", Справочники.ВидыВычетовНДФЛ.Код147);
	
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовОпекунов", Справочники.ВидыВычетовНДФЛ.Код117о);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов", Справочники.ВидыВычетовНДФЛ.Код121о);
	ВидыВычетов.Вставить("ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов", Справочники.ВидыВычетовНДФЛ.Код125о);
	
	ВидыВычетов.Вставить("ПримененныйВычетРасходыНаСвоеОбучение", Справочники.ВидыВычетовНДФЛ.Код320о);
	ВидыВычетов.Вставить("ПримененныйВычетРасходыНаОбучениеДетей", Справочники.ВидыВычетовНДФЛ.Код321);
	ВидыВычетов.Вставить("ПримененныйВычетРасходыНаЛечение", Справочники.ВидыВычетовНДФЛ.Код324);
	ВидыВычетов.Вставить("ПримененныйВычетСтраховыеВзносыНаМедУслуги", Справочники.ВидыВычетовНДФЛ.Код325);
	ВидыВычетов.Вставить("ПримененныйВычетРасходыНаДорогостоящееЛечение", Справочники.ВидыВычетовНДФЛ.Код326);
	ВидыВычетов.Вставить("ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни", Справочники.ВидыВычетовНДФЛ.Код329);
	
	Возврат ВидыВычетов	

КонецФункции

Функция НазванияВычетовПредоставляемыхПоУведомлениюНО() Экспорт

	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(СтрЗаменить(СтрЗаменить(РассчитываемыеРесурсыИмущественныхВычетов(),"ПримененныйВычетИмущественныйРасходы","РасходыНаСтроительствоПриобретение"),"ПримененныйВычетИмущественный",""), "ПримененныйВычет",""))
	
КонецФункции

// Специфические алгоритмы чтения данных

Процедура СоздатьВТАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета(МенеджерВременныхТаблиц, ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица") Экспорт
	КоличествоВТ = МенеджерВременныхТаблиц.Таблицы.Количество();
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, 
		ЗапросАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ИмяВременнойТаблицыОтбора), 
		"ВТАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета"); 
	УдаляемыеВТ = Новый Массив;
	Для Н = КоличествоВТ По МенеджерВременныхТаблиц.Таблицы.Количество()-1 Цикл
		ИмяВТ = МенеджерВременныхТаблиц.Таблицы[Н].ПолноеИмя;
		Если ИмяВТ = "ВТАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеВТ.Добавить(ИмяВТ);
	КонецЦикла;
	Если УдаляемыеВТ.Количество() Тогда 
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдаляемыеВТ);
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьВТПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета(МенеджерВременныхТаблиц, ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица") Экспорт
	КоличествоВТ = МенеджерВременныхТаблиц.Таблицы.Количество();
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, 
		ЗапросПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ИмяВременнойТаблицыОтбора), 
		"ВТПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета"); 
	УдаляемыеВТ = Новый Массив;
	Для Н = КоличествоВТ По МенеджерВременныхТаблиц.Таблицы.Количество()-1 Цикл
		ИмяВТ = МенеджерВременныхТаблиц.Таблицы[Н].ПолноеИмя;
		Если ИмяВТ = "ВТПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеВТ.Добавить(ИмяВТ);
	КонецЦикла;
	Если УдаляемыеВТ.Количество() Тогда 
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдаляемыеВТ);
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьВТПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета(МенеджерВременныхТаблиц, ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ДетализацияДоГруппВычетов = Ложь, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица") Экспорт
	КоличествоВТ = МенеджерВременныхТаблиц.Таблицы.Количество();
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, 
		ЗапросПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ДетализацияДоГруппВычетов, ИмяВременнойТаблицыОтбора), 
		"ВТПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета"); 
	УдаляемыеВТ = Новый Массив;
	Для Н = КоличествоВТ По МенеджерВременныхТаблиц.Таблицы.Количество()-1 Цикл
		ИмяВТ = МенеджерВременныхТаблиц.Таблицы[Н].ПолноеИмя;
		Если ИмяВТ = "ВТПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеВТ.Добавить(ИмяВТ);
	КонецЦикла;
	Если УдаляемыеВТ.Количество() Тогда 
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдаляемыеВТ);
	КонецЕсли;
КонецПроцедуры

Функция АвансовыеПлатежиПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица") Экспорт
	Запрос = ЗапросАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ИмяВременнойТаблицыОтбора);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица") Экспорт
	Запрос = ЗапросПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ИмяВременнойТаблицыОтбора);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ДетализацияДоГруппВычетов = Ложь, МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица") Экспорт
	Запрос = ЗапросПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ДетализацияДоГруппВычетов, ИмяВременнойТаблицыОтбора);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Создает временную таблицу с данными справок 2НДФЛ.
//
// Параметры:
// 		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит таблицу ВТСсылки.
//
Процедура СоздатьВТДанныеСправок2НДФЛДляПубликации(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкаНДФЛ.Ссылка КАК Ссылка,
	|	СправкаНДФЛ.Дата КАК ДатаСоздания,
	|	СправкаНДФЛ.Организация КАК Организация,
	|	СправкаНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	СправкаНДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|	СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке3 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке6 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке7 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке9 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке10 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке12 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке13 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке15 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке30 + СправкаНДФЛ.ОбщаяСуммаДоходаПоСтавке35 КАК СуммаДохода,
	|	СправкаНДФЛ.ИсчисленоПоСтавке3 + СправкаНДФЛ.ИсчисленоПоСтавке6 + СправкаНДФЛ.ИсчисленоПоСтавке7 + СправкаНДФЛ.ИсчисленоПоСтавке9 + СправкаНДФЛ.ИсчисленоПоСтавке10 + СправкаНДФЛ.ИсчисленоПоСтавке12 + СправкаНДФЛ.ИсчисленоПоСтавке13 + СправкаНДФЛ.ИсчисленоПоСтавке15 + СправкаНДФЛ.ИсчисленоПоСтавке30 + СправкаНДФЛ.ИсчисленоПоСтавке35 КАК СуммаНалога
	|ПОМЕСТИТЬ ВТДанныеСправок2НДФЛДляПубликации
	|ИЗ
	|	Документ.СправкаНДФЛ КАК СправкаНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСсылки КАК Справки
	|		ПО СправкаНДФЛ.Ссылка = Справки.Ссылка";
	Запрос.Выполнить();	

КонецПроцедуры

// Даты изменений законодательства

// Возвращает дату вступления в силу Федерального Закона от 27.07.2010 № 229-ФЗ.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаЗакона229ФЗ() Экспорт 

	Возврат '20110101'

КонецФункции

// Возвращает дату начала действия положений о беженцах Федерального закона от 04.10.2014 № 285-ФЗ
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаЗакона285ФЗ() Экспорт 

	Возврат '20140101'

КонецФункции 

Функция ДатаИзмененияНалогообложенияДивидендов() Экспорт 

	Возврат '20150101'

КонецФункции

Функция ДатаПереходаНаКодыОКТМО() Экспорт

	Возврат '20140101'

КонецФункции

Функция ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли() Экспорт

	Возврат '20140101'

КонецФункции

Функция ДатаВозвратаДоходовПоЦеннымБумагамИзДекларацииПоПрибыли() Экспорт

	Возврат '20190101'

КонецФункции

Функция ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев() Экспорт 

	Возврат '20150101'

КонецФункции

// Возвращает дату вступления в силу Федерального Закона от 02.05.2015 № 113-ФЗ.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаИзмененияСроковУплатыНалога() Экспорт 

	Возврат '20160101'

КонецФункции

Функция ПараметрыРасчетаНДФЛПоПрогрессивнойШкале() Экспорт 

	Параметры = Новый Структура();
	Параметры.Вставить("Предел", 5000000);
	Параметры.Вставить("НалогСПредела", 650000);
	Параметры.Вставить("НачалоРасчетаНДФЛПоПрогрессивнойШкале", '20210101');
	Параметры.Вставить("Ставка", Перечисления.НДФЛСтавки.Ставка15);
	Параметры.Вставить("СтавкаЧислом", 0.15);

	Возврат Параметры
	
КонецФункции // Параметры()

// Коды

Функция КодыДоходовПоЦеннымБумагам(НалоговыйПериод) Экспорт
	
	Возврат УчетНДФЛПовтИсп.КодыДоходовПоЦеннымБумагам(НалоговыйПериод)
	
КонецФункции

// Возвращает строку, в которой перечислены коды допустимых документов.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Строка.
//
Функция КодыДопустимыхДокументовУдостоверяющихЛичность() Экспорт

	Возврат "21, 03, 07, 08, 10, 11, 12, 13, 14, 15, 18, 23, 24, 91"	

КонецФункции 

// Возвращает строку, в которой перечислены коды допустимых документов иностранных граждан.
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   Строка.
//
Функция КодыДопустимыхДокументовУдостоверяющихЛичностьИностранныхГраждан() Экспорт

	Возврат "10, 12, 15, 62, 63, 91"	
	
КонецФункции 


// Формирует движения по регистрам подсистемы.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Регистратор - ДокументСсылка - 
//		ТаблицаВыплат - ТаблицаЗначений - с колонками:
//				ФизическоеЛицо: должно быть непустым
//				а также ДокументОснование, ПериодВзаиморасчетов, Сотрудник, СтатьяФинансирования, СтатьяРасходов, Подразделение
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДокументыОплаченныеБезУдержанияНДФЛ(Движения, Отказ, Организация, Регистратор, ТаблицаВыплат, Записывать = Ложь) Экспорт
	УчетНДФЛВнутренний.СформироватьДокументыОплаченныеБезУдержанияНДФЛ(Движения, Отказ, Организация, Регистратор, ТаблицаВыплат, Записывать)
КонецПроцедуры

// Формирует движения по регистрам подсистемы: 
//	удержанный налог вписываем в регистры РасчетыНалогоплательщиковСБюджетомПоНДФЛ, РасчетыНалоговыхАгентовСБюджетомПоНДФЛ, НДФЛКПеречислению;
//	начислятели, по которым налог не удерживался, в регистр ДокументыОплаченныеБезУдержанияНДФЛ;
//  для регистраторов, не являющихся ведомостями, дополнительно пытаемся распределить возможно существующую переплату
//  налога по физическим лицам, для которых зарегистрирован удержанный налог.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ДатаВыплаты - дата - дата фактической выплаты зарплаты (иного дохода).
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит вр. таблицы 
//			ВТНалогУдержанный с полями
//				ФизическоеЛицо: должно быть непустым
//  	       	СтавкаНалогообложенияРезидента: должно быть непустым.
//				МесяцНалоговогоПериода: должно быть непустым.
//  	    	КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ: должно быть непустым
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				КодДохода
//				Сумма
//  	       	Ставка (необязательное)
//				РегистрацияВНалоговомОргане, тип СправочникСсылка.РегистрацииВНалоговомОргане (необязательное)
//				ДокументОснование (необязательное)
//				ВключатьВДекларациюПоНалогуНаПрибыль (необязательное)
//				СрокПеречисления: тип ПеречислениеСсылка.СрокиПеречисляемогоНалога (необязательное).
//				СуммаВыплаченногоДохода (необязательное)
//				СуммаОтпускныхБольничных (необязательное)
//				УчитыватьВыплаченныйДоходВ6НДФЛ (необязательное)
//      	ВТСписокСотрудников, с данными о выплатах вида:
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты.
//          	ДокументОснование, необязательная
//          	СуммаНачисленная, необязательная
//          	СуммаВыплаченная, необязательная, 
//          	ОкончательныйРасчет - булево - необязательная, если отсутствует - считается, что содержит значения Истина
//				Если колонки СуммаНачисленная, СуммаВыплаченная отсутствуют, возможная частичная выплата не будет учтена.
//		Регистратор - ДокументСсылка - 
//		ТаблицаМежрасчетныхВыплат - ТаблицаЗначений - с колонками:
//				ФизическоеЛицо: должно быть непустым
//				а также ДокументОснование, ПериодВзаиморасчетов, Сотрудник, СтатьяФинансирования, СтатьяРасходов, Подразделение
//		РегистрироватьВыплаченныйДоход - булево - необязателен, по умолчанию истина, позволяет
//				отключить фиксацию в движениях по удержанию налога сумм выплаченного налога 
//              из Раздела 2 отчета 6-НДФЛ
//
Процедура ЗарегистрироватьУдержанныйНалогПриВыплате(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, Регистратор, ТаблицаМежрасчетныхВыплат = Неопределено, РегистрироватьВыплаченныйДоход = Истина) Экспорт
	
	// Получение базы для распределения НДФЛ к перечислению из временной таблицы ВТНалогУдержанный,
	// всегда выполняется до вызова методов подсистемы НДФЛ.
	ДанныеДляДополнения = ОтражениеЗарплатыВУчете.ДанныеДляДополненияНДФЛУдержанногоСтатьями(МенеджерВременныхТаблиц);
	
	УчетФактическиПолученныхДоходов.ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор, Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ, Истина);
	Если РегистрироватьВыплаченныйДоход = Истина Тогда
		ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерВременныхТаблиц, Регистратор, ДатаВыплаты, ДатаОперации);	
	КонецЕсли;
	СформироватьУдержанныйНалогПоВременнойТаблице(Движения, Отказ, Организация, ДатаВыплаты, МенеджерВременныхТаблиц, , Истина, , Регистратор, ТаблицаМежрасчетныхВыплат);
	СформироватьНДФЛКПеречислению(Движения, Отказ);
	ОтражениеЗарплатыВУчете.ДополнитьНДФЛКПеречислениюСведениямиОРаспределенииПоСтатьям(Движения, ДанныеДляДополнения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛКПеречислению(Движения, Отказ);
	КонецЕсли;
	
	Если Не Метаданные.ОпределяемыеТипы.ВедомостьЗарплатаКадры.Тип.СодержитТип(ТипЗнч(Регистратор)) Тогда
		Если Движения.Найти("УплатаНДФЛНалоговымиАгентамиКРаспределению") <> Неопределено И Движения.Найти("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ") <> Неопределено Тогда
			Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Очистить();
			Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записать();
			СформироватьПеречисленныйНалогПоФизическимЛицам(Регистратор, Движения, Отказ, Организация, ДатаОперации, Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВыгрузитьКолонку("ФизическоеЛицо"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сведения о возвратах НДФЛ за прошлый год относительно даты операции.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой получаем данные.
//  ДатаОперации - Дата - дата, на которую производятся вычисления.
//  ФизическиеЛица - Массив - физические лица, по которым получаем данные.
// 
// Возвращаемое значение - таблица значений с колонками
//   		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   		Сумма
Функция ВозвратНДФЛПрошлыхЛет(Организация, ДатаОперации, ФизическиеЛица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОперации", КонецДня(ДатаОперации));
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ДатаОперации));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма + РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоГода И &ДатаОперации
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода < &НачалоГода
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация = &Организация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ВозвращеноНалоговымАгентом)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СправкиНДФЛДанныеНалоговогоАгента(Организация, НалоговыйПериод, РегистрацияВНалоговомОргане, Дата, Телефон, ДолжностьПодписавшегоЛица, СправкуПодписал) Экспорт

	ДанныеНалоговогоАгента = Новый Структура;
	ДанныеНалоговогоАгента.Вставить("Организация", Организация);
	ДанныеНалоговогоАгента.Вставить("НалоговыйПериод", НалоговыйПериод);
	ДанныеНалоговогоАгента.Вставить("НалоговыйПериодСтрокой", Формат(НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
	ДанныеНалоговогоАгента.Вставить("Дата", Дата);
	ДанныеНалоговогоАгента.Вставить("Телефон", Телефон);
	ДанныеНалоговогоАгента.Вставить("Признак");
	ДанныеНалоговогоАгента.Вставить("ЭтоЮрЛицо", "");
	ДанныеНалоговогоАгента.Вставить("НазваниеОрганизации", "");
	ДанныеНалоговогоАгента.Вставить("Фамилия", "");
	ДанныеНалоговогоАгента.Вставить("Имя", "");
	ДанныеНалоговогоАгента.Вставить("Отчество", "");
	ДанныеНалоговогоАгента.Вставить("КодНалоговогоОргана", "");
	ДанныеНалоговогоАгента.Вставить("КодНалоговогоОрганаПолучателя", "");
	ДанныеНалоговогоАгента.Вставить("ИННорг", "");
	ДанныеНалоговогоАгента.Вставить("КПП", "");
	ДанныеНалоговогоАгента.Вставить("ОКАТО", "");
	ДанныеНалоговогоАгента.Вставить("ОКТМО", "");
	ДанныеНалоговогоАгента.Вставить("ДолжностьПодписавшегоЛица", "");
	ДанныеНалоговогоАгента.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	ДанныеНалоговогоАгента.Вставить("ТипПодписанта", "1");
	ДанныеНалоговогоАгента.Вставить("ФамилияПредставителя", "");
	ДанныеНалоговогоАгента.Вставить("ИмяПредставителя", "");
	ДанныеНалоговогоАгента.Вставить("ОтчествоПредставителя", "");
	ДанныеНалоговогоАгента.Вставить("ПредставительЮрЛицо", Истина);
	ДанныеНалоговогоАгента.Вставить("НаименованиеОрганизацииПредставителя", "");
	ДанныеНалоговогоАгента.Вставить("ДокументПредставителя", "");
	
	ЭтоЮрЛицо = ЗарплатаКадры.ЭтоЮридическоеЛицо(Организация);
	ДанныеНалоговогоАгента.ЭтоЮрЛицо = ЭтоЮрЛицо;
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, НаименованиеПолное, НаименованиеСокращенное, ИндивидуальныйПредприниматель, КодНалоговогоОрганаПолучателя");
	ДанныеОрганизации.Вставить("КодНалоговогоОргана", РегистрацияВНалоговомОргане.Код);
	ДанныеНалоговогоАгента.КодНалоговогоОрганаПолучателя = СокрЛП(ДанныеОрганизации.КодНалоговогоОрганаПолучателя);
	ДанныеНалоговогоАгента.ИННорг = СокрЛП(ДанныеОрганизации.ИНН);
	
	ЗаполнитьЗначенияСвойств(ДанныеНалоговогоАгента, ОКАТО_ОКТМО_КППИзРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане),"ОКАТО, ОКТМО, КПП");
	
	ДанныеНалоговогоАгента.ОКТМО = СокрЛП(ДанныеНалоговогоАгента.ОКТМО);
	Если НалоговыйПериод > 2018 И ЭтоЮрЛицо Тогда
		ДанныеНалоговогоАгента.ОКТМО = Лев(ДанныеНалоговогоАгента.ОКТМО, 8);
	КонецЕсли;

	Если ЭтоЮрЛицо Тогда
		ДанныеНалоговогоАгента.НазваниеОрганизации = ?(ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеСокращенное), ДанныеОрганизации.НаименованиеСокращенное, ДанныеОрганизации.НаименованиеПолное);
		МассивФизЛицДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СправкуПодписал);
		КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивФизЛицДокумента, "Фамилия,Имя,Отчество", Дата);
		Для Каждого СтрокаКадровыеДанныеФизическихЛиц Из КадровыеДанныеФизическихЛиц Цикл
			Если СтрокаКадровыеДанныеФизическихЛиц.ФизическоеЛицо = СправкуПодписал Тогда
				ЗаполнитьЗначенияСвойств(ДанныеНалоговогоАгента, СтрокаКадровыеДанныеФизическихЛиц,"Фамилия, Имя, Отчество");
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	Иначе // для ИП
		Если ЗначениеЗаполнено(ДанныеОрганизации.ИндивидуальныйПредприниматель) Тогда
			МассивФизЛицДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОрганизации.ИндивидуальныйПредприниматель);
			КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, МассивФизЛицДокумента, "Фамилия,Имя,Отчество", Дата);
			Для Каждого СтрокаКадровыеДанныеФизическихЛиц Из КадровыеДанныеФизическихЛиц Цикл
				Если СтрокаКадровыеДанныеФизическихЛиц.ФизическоеЛицо = ДанныеОрганизации.ИндивидуальныйПредприниматель Тогда
					ЗаполнитьЗначенияСвойств(ДанныеНалоговогоАгента, СтрокаКадровыеДанныеФизическихЛиц,"Фамилия, Имя, Отчество");
					ДанныеНалоговогоАгента.НазваниеОрганизации = ДанныеНалоговогоАгента.Фамилия + " " + ДанныеНалоговогоАгента.Имя + " " + ДанныеНалоговогоАгента.Отчество;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеНалоговогоАгента.ДолжностьПодписавшегоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДолжностьПодписавшегоЛица, "Наименование");
	
	Если НалоговыйПериод >= 2015  Тогда
		ДанныеПредставителя = СведенияОПредставителеПоРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане, Дата); // ТипПодписанта, ПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ДокументПредставителя, Фамилия, Имя, Отчество, ФИОПредставителя
		ДанныеНалоговогоАгента.ТипПодписанта = ДанныеПредставителя.ТипПодписанта;
		Если ДанныеНалоговогоАгента.ТипПодписанта = "2" Тогда
			ЗаполнитьЗначенияСвойств(ДанныеНалоговогоАгента, ДанныеПредставителя, "ПредставительЮрЛицо,НаименованиеОрганизацииПредставителя,ДокументПредставителя");
			ДанныеНалоговогоАгента.ФамилияПредставителя = ДанныеПредставителя.Фамилия;
			ДанныеНалоговогоАгента.ИмяПредставителя= ДанныеПредставителя.Имя;
			ДанныеНалоговогоАгента.ОтчествоПредставителя = ДанныеПредставителя.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеНалоговогоАгента
	
КонецФункции

// Рассчитывает вычеты к доходам в соответствии со статьями 217 и 221 НК РФ и помещает в переданный 
// менеджер временных таблиц результат - вр.таблицу ВТВычетыКДоходамФизическихЛиц с полями:  
//	Регистратор,
//	НомерСтроки,
//	ФизическоеЛицо
//	КодДохода
//	КодВычета
//	СуммаВычета
//
// Параметры:
//	Ссылка - ДокументСсылка - документ, для которого производится расчет.
//	ДатаПолученияДохода - Дата - определяет налоговый период, для которого проводится расчет вычетов, назначенных суммой за год.
//	Организация - СправочникСсылка.Организации - должно быть непустым значением.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит
//		таблицу ВТНачисления, которая содержит строки доходов, требующие расчета, с полями:
//			Регистратор,
//			НомерСтроки,
//			ФизическоеЛицо
//			КодДохода
//			Сумма
//			КодВычета
//			КоличествоДетей
//			ВычетПредоставленныйДругомуРодителю (необязательно)
//		таблицу ВТПредоставленныеВычеты (необязательно), содержит сведения о вычетах, которыми требуется дополнить данные учета, с полями:
//			ФизическоеЛицо
//			КодДохода
//			СуммаВычета
//		обе таблицы должны содержать данные исключительно за один налоговый период (заданный параметром ДатаПолученияДохода).
//	ИмяВТНачисления - строка - имя обрабатываемой временной таблицы.
//	ИмяВТПредоставленныеВычеты - строка - имя дополнительной временной таблицы.
//
Процедура СоздатьВТВычетыКДоходамФизическихЛиц(Ссылка, Организация, ДатаПолученияДохода, МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления", ИмяВТПредоставленныеВычеты = "ВТПредоставленныеВычеты") Экспорт

	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВычетВПределахНормативовПоАвторскимВознаграждениям", ВычетВПределахНормативовПоАвторскимВознаграждениям());
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ДатаПолученияДохода));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаПолученияДохода));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК Период,
	|	Начисления.КодДохода КАК КодДохода
	|ПОМЕСТИТЬ ВТКодыДохода
	|ИЗ
	|	#ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&КонецПериода КАК Период,
	|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТПоСотрудникам
	|ИЗ
	|	#ВТНачисления КАК СписокСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.ФизическоеЛицо";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
		
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПоСотрудникам", "ФизическоеЛицо");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтатусФизическихЛицКакНалогоплательщиковНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТКодыДохода", "КодДохода");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ВычетыПоДоходамНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТПредоставленныеВычеты) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка) КАК КодДохода,
		|	0 КАК СуммаВычета
		|ПОМЕСТИТЬ #ВТПредоставленныеВычеты";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТПредоставленныеВычеты", ИмяВТПредоставленныеВычеты);	
		Запрос.Выполнить();
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВидыДоходовНДФЛ.ИмеетЕдинственныйВычет
	|			ТОГДА ВидыДоходовНДФЛ.ВычетПоУмолчанию
	|		ИНАЧЕ Начисления.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	Начисления.КоличествоДетей КАК КоличествоДетей,
	|	Начисления.ВычетПредоставленныйДругомуРодителю КАК ВычетДругомуРодителю,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	ВычетыПоДоходам.ГодовойВычет КАК ГодовойВычет,
	|	ВычетыПоДоходам.НормативЗатрат КАК НормативЗатрат
	|ПОМЕСТИТЬ ВТВычетыПоДоходам
	|ИЗ
	|	#ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО Начисления.КодДохода = ВидыДоходовНДФЛ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВычетыПоДоходамНДФЛСрезПоследних КАК ВычетыПоДоходам
	|		ПО Начисления.КодДохода = ВычетыПоДоходам.КодДохода
	|ГДЕ
	|	(ВычетыПоДоходам.ГодовойВычет <> 0
	|			ИЛИ ВычетыПоДоходам.НормативЗатрат <> 0)
	|	И ВЫБОР
	|			КОГДА ВидыДоходовНДФЛ.ИмеетЕдинственныйВычет
	|				ТОГДА ВидыДоходовНДФЛ.ВычетПоУмолчанию
	|			ИНАЧЕ Начисления.КодВычета
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код404)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВычетыПредоставленные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВычетыПредоставленные.КодДохода КАК КодДохода,
	|	СУММА(ВычетыПредоставленные.СуммаВычета) КАК СуммаВычета
	|ПОМЕСТИТЬ ВТВычетыПредоставленные
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОДоходах.КодДохода КАК КодДохода,
	|		СведенияОДоходах.СуммаВычета КАК СуммаВычета
	|	ИЗ
	|		РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
	|	ГДЕ
	|		СведенияОДоходах.Регистратор <> &Ссылка
	|		И СведенияОДоходах.Период <= &КонецПериода
	|		И СведенияОДоходах.МесяцНалоговогоПериода МЕЖДУ &НачалоГода И &КонецПериода
	|		И СведенияОДоходах.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|		И (СведенияОДоходах.ФизическоеЛицо, СведенияОДоходах.КодДохода) В
	|				(ВЫБРАТЬ
	|					ГодовойВычетПоДоходам.ФизическоеЛицо,
	|					ГодовойВычетПоДоходам.КодДохода
	|				ИЗ
	|					ВТВычетыПоДоходам КАК ГодовойВычетПоДоходам
	|				ГДЕ
	|					ГодовойВычетПоДоходам.ГодовойВычет <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПредоставленныеВычеты.ФизическоеЛицо,
	|		ПредоставленныеВычеты.КодДохода,
	|		ПредоставленныеВычеты.СуммаВычета
	|	ИЗ
	|		#ВТПредоставленныеВычеты КАК ПредоставленныеВычеты
	|	ГДЕ
	|		(ПредоставленныеВычеты.ФизическоеЛицо, ПредоставленныеВычеты.КодДохода) В
	|				(ВЫБРАТЬ
	|					ГодовойВычетПоДоходам.ФизическоеЛицо,
	|					ГодовойВычетПоДоходам.КодДохода
	|				ИЗ
	|					ВТВычетыПоДоходам КАК ГодовойВычетПоДоходам
	|				ГДЕ
	|					ГодовойВычетПоДоходам.ГодовойВычет <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПредоставленныеВычеты.ФизическоеЛицо,
	|		ПредоставленныеВычеты.КодДохода,
	|		ПредоставленныеВычеты.СуммаВычета
	|	ИЗ
	|		РегистрСведений.ВычетыПредыдущегоМестаРаботыНДФЛ КАК ПредоставленныеВычеты
	|	ГДЕ
	|		(ПредоставленныеВычеты.ФизическоеЛицо, ПредоставленныеВычеты.КодДохода) В
	|				(ВЫБРАТЬ
	|					ГодовойВычетПоДоходам.ФизическоеЛицо,
	|					ГодовойВычетПоДоходам.КодДохода
	|				ИЗ
	|					ВТВычетыПоДоходам КАК ГодовойВычетПоДоходам
	|				ГДЕ
	|					ГодовойВычетПоДоходам.ГодовойВычет <> 0)
	|		И ПредоставленныеВычеты.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|		И ПредоставленныеВычеты.НалоговыйПериод = &НачалоГода) КАК ВычетыПредоставленные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыПредоставленные.ФизическоеЛицо,
	|	ВычетыПредоставленные.КодДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВычетыПоДоходам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВычетыПоДоходам.КодДохода КАК КодДохода,
	|	ВЫБОР
	|		КОГДА ВычетыПредоставленные.СуммаВычета ЕСТЬ NULL
	|			ТОГДА ВычетыПоДоходам.ГодовойВычет - ВычетыПоДоходам.ВычетДругомуРодителю
	|		КОГДА ВычетыПоДоходам.ГодовойВычет - ВычетыПоДоходам.ВычетДругомуРодителю > ВычетыПредоставленные.СуммаВычета
	|			ТОГДА ВычетыПоДоходам.ГодовойВычет - ВычетыПоДоходам.ВычетДругомуРодителю - ВычетыПредоставленные.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПравоНаВычет
	|ИЗ
	|	ВТВычетыПоДоходам КАК ВычетыПоДоходам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыПредоставленные КАК ВычетыПредоставленные
	|		ПО ВычетыПоДоходам.ФизическоеЛицо = ВычетыПредоставленные.ФизическоеЛицо
	|			И ВычетыПоДоходам.КодДохода = ВычетыПредоставленные.КодДохода
	|ГДЕ
	|	ВычетыПоДоходам.ГодовойВычет <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	КодДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВычетыПоДоходам.Регистратор КАК Регистратор,
	|	ВычетыПоДоходам.НомерСтроки КАК НомерСтроки,
	|	ВычетыПоДоходам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВычетыПоДоходам.КодДохода КАК КодДохода,
	|	ВычетыПоДоходам.Сумма КАК Сумма,
	|	ВычетыПоДоходам.КодВычета КАК КодВычета,
	|	0 КАК СуммаВычета
	|ИЗ
	|	ВТВычетыПоДоходам КАК ВычетыПоДоходам
	|ГДЕ
	|	ВычетыПоДоходам.ГодовойВычет <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	Если МенеджерВременныхТаблиц.Таблицы[ИмяВТНачисления].Колонки.Найти("ВычетПредоставленныйДругомуРодителю") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Начисления.ВычетПредоставленныйДругомуРодителю КАК ВычетДругомуРодителю", "0 КАК ВычетДругомуРодителю");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТНачисления", ИмяВТНачисления);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ВТПредоставленныеВычеты", ИмяВТПредоставленныеВычеты);	
	
	Результаты = Запрос.ВыполнитьПакет();
	ТаблицаВычетов = Результаты[2].Выгрузить();
	ТаблицаВычетов.Индексы.Добавить("ФизическоеЛицо,КодДохода");
    ТаблицаНачислений = Результаты[3].Выгрузить();
	СтруктураПоиска = Новый Структура("ФизическоеЛицо,КодДохода");
	Для каждого СтрокаТЗ Из ТаблицаНачислений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		СтрокаВычета = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска)[0];
		Если СтрокаВычета.ПравоНаВычет = 0 Тогда
			СтрокаТЗ.СуммаВычета = 0
		ИначеЕсли СтрокаТЗ.Сумма > 0 Тогда
			СтрокаТЗ.СуммаВычета = Мин(СтрокаТЗ.Сумма, СтрокаВычета.ПравоНаВычет);
			СтрокаВычета.ПравоНаВычет = Макс(0, СтрокаВычета.ПравоНаВычет - СтрокаТЗ.СуммаВычета);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ГодовойВычетПоДоходам", ТаблицаНачислений);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГодовойВычетПоДоходам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ГодовойВычетПоДоходам.КодДохода КАК КодДохода,
	|	ГодовойВычетПоДоходам.КодВычета КАК КодВычета,
	|	ГодовойВычетПоДоходам.СуммаВычета КАК СуммаВычета,
	|	ГодовойВычетПоДоходам.Регистратор КАК Регистратор,
	|	ГодовойВычетПоДоходам.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТГодовойВычетПоДоходам
	|ИЗ
	|	&ГодовойВычетПоДоходам КАК ГодовойВычетПоДоходам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГодовойВычетПоДоходам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ГодовойВычетПоДоходам.КодДохода КАК КодДохода,
	|	ГодовойВычетПоДоходам.КодВычета КАК КодВычета,
	|	ГодовойВычетПоДоходам.СуммаВычета КАК СуммаВычета,
	|	ГодовойВычетПоДоходам.Регистратор КАК Регистратор,
	|	ГодовойВычетПоДоходам.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТВычетыКДоходамФизическихЛиц
	|ИЗ
	|	ВТГодовойВычетПоДоходам КАК ГодовойВычетПоДоходам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВычетыПоДоходам.ФизическоеЛицо,
	|	ВычетыПоДоходам.КодДохода,
	|	ВычетыПоДоходам.КодВычета,
	|	ВЫБОР
	|		КОГДА ВычетыПоДоходам.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код508)
	|			ТОГДА ВЫБОР
	|					КОГДА ВычетыПоДоходам.НормативЗатрат * ВычетыПоДоходам.КоличествоДетей - ВычетыПоДоходам.ВычетДругомуРодителю < 0
	|						ТОГДА 0
	|					КОГДА ВычетыПоДоходам.НормативЗатрат * ВычетыПоДоходам.КоличествоДетей - ВычетыПоДоходам.ВычетДругомуРодителю < ВычетыПоДоходам.Сумма
	|						ТОГДА ВычетыПоДоходам.НормативЗатрат * ВычетыПоДоходам.КоличествоДетей - ВычетыПоДоходам.ВычетДругомуРодителю
	|					ИНАЧЕ ВычетыПоДоходам.Сумма
	|				КОНЕЦ
	|		КОГДА ВычетыПоДоходам.КодВычета = &ВычетВПределахНормативовПоАвторскимВознаграждениям
	|				И ЕСТЬNULL(Статусы.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) <> ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|			ТОГДА ВЫРАЗИТЬ(ВычетыПоДоходам.Сумма * ВычетыПоДоходам.НормативЗатрат / 100 КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВычетыПоДоходам.Регистратор,
	|	ВычетыПоДоходам.НомерСтроки
	|ИЗ
	|	ВТВычетыПоДоходам КАК ВычетыПоДоходам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛСрезПоследних КАК Статусы
	|		ПО ВычетыПоДоходам.ФизическоеЛицо = Статусы.ФизическоеЛицо
	|ГДЕ
	|	ВычетыПоДоходам.КодДохода В
	|			(ВЫБРАТЬ
	|				ВычетыПоДоходам.КодДохода
	|			ИЗ
	|				ВТВычетыПоДоходамНДФЛСрезПоследних КАК ВычетыПоДоходам
	|			ГДЕ
	|				ВычетыПоДоходам.НормативЗатрат <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТВычетыПоДоходам");
	УдалитьВТ.Добавить("ВТВычетыПредоставленные");
	УдалитьВТ.Добавить("ВТГодовойВычетПоДоходам");
	УдалитьВТ.Добавить("ВТКодыДохода");
	УдалитьВТ.Добавить("ВТПоСотрудникам");
	УдалитьВТ.Добавить("ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛСрезПоследних");
	УдалитьВТ.Добавить("ВТВычетыПоДоходамНДФЛСрезПоследних");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

// Формирует временную таблицу ВТСведенияОДоходахДляРаспределенияНДФЛ.
//
// Параметры:
//		ПараметрыПолученияБазы - Структура, см ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияНДФЛ
//		ИсключаемыеРегистраторы - Массив, содержит ДокументСсылка или пустой.
//
Процедура СоздатьВТСведенияОДоходахДляРаспределенияНДФЛ(ПараметрыПолученияБазы, ИсключаемыеРегистраторы) Экспорт

	МенеджерВременныхТаблиц = ПараметрыПолученияБазы.МенеджерВременныхТаблиц;
	Организация 		= ПараметрыПолученияБазы.Организация;
	ПериодРегистрации 	= ПараметрыПолученияБазы.ПериодРегистрации;
	МассивФизическихЛиц = ПараметрыПолученияБазы.МассивФизическихЛиц;
	ОкончательныйРасчет = ПараметрыПолученияБазы.ОкончательныйРасчет;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Создадим пустую таблицу, если она отсутствует в менеджере временных таблиц.
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.СведенияОДоходахНДФЛ");
	
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца", 	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ФизическиеЛица", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	 ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Если ОкончательныйРасчет Тогда
		
		// Если таблица ВТУсловияОтбораДляРаспределенияНДФЛ существует, отбор сведений о доходах выполняем по ней,
		// иначе будем использовать отбор по ИсключаемыеРегистраторы.
		СуществуетТаблицаУсловий = ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТУсловияОтбораДляРаспределенияНДФЛ");
		
		// Определим условия отбора данных.
		Если СуществуетТаблицаУсловий Тогда
			
			УсловиеОтбора = "
			|	ВТУсловияОтбораДляРаспределенияНДФЛ КАК УсловияОтбора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
			|		ПО УсловияОтбора.Регистратор = СведенияОДоходах.Регистратор
			|			И УсловияОтбора.ФизическоеЛицо = СведенияОДоходах.ФизическоеЛицо
			|			И (СведенияОДоходах.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
			|			И (СведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13))";
			
		Иначе
			
			УсловиеОтбора ="
			|		РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
			|	ГДЕ
			|		СведенияОДоходах.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|		И СведенияОДоходах.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|		И СведенияОДоходах.Организация = &Организация
			|		И СведенияОДоходах.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
			|		И СведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
			|		И СведенияОДоходах.ФизическоеЛицо В(&ФизическиеЛица)
			|		И НЕ СведенияОДоходах.Регистратор В (&ИсключаемыеРегистраторы)";
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доходы.Сотрудник КАК Сотрудник,
		|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Доходы.Начисление КАК Начисление,
		|	Доходы.Подразделение КАК Территория,
		|	Доходы.ПодразделениеСотрудника КАК Подразделение,
		|	Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	Доходы.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода,
		|	Доходы.КатегорияДохода КАК КатегорияДохода,
		|	СУММА(Доходы.Сумма) КАК Сумма,
		|	Доходы.СторноТекущегоПериода КАК СторноТекущегоПериода
		|ПОМЕСТИТЬ ВТСведенияОДоходахДляРаспределенияНДФЛ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СведенияОДоходах.Сотрудник КАК Сотрудник,
		|		СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
		|		СведенияОДоходах.Подразделение КАК Подразделение,
		|		СведенияОДоходах.Начисление КАК Начисление,
		|		СведенияОДоходах.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
		|		СведенияОДоходах.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|		СведенияОДоходах.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода,
		|		СведенияОДоходах.КатегорияДохода КАК КатегорияДохода,
		|		СведенияОДоходах.СуммаДохода - СведенияОДоходах.СуммаВычета КАК Сумма,
		|		ЛОЖЬ КАК СторноТекущегоПериода
		|	ИЗ
		|		РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СведенияОДоходах.Сотрудник,
		|		СведенияОДоходах.ФизическоеЛицо,
		|		СведенияОДоходах.Подразделение,
		|		СведенияОДоходах.Начисление,
		|		СведенияОДоходах.ПодразделениеСотрудника,
		|		СведенияОДоходах.ДатаПолученияДохода,
		|		СведенияОДоходах.ДоходМежрасчетногоПериода,
		|		СведенияОДоходах.КатегорияДохода,
		|		СведенияОДоходах.СуммаДохода - СведенияОДоходах.СуммаВычета,
		|		СведенияОДоходах.Сторно
		|	ИЗ
		|		ВТРегистрНакопления_СведенияОДоходахНДФЛ КАК СведенияОДоходах
		|	ГДЕ
		|		СведенияОДоходах.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|		И СведенияОДоходах.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|		И СведенияОДоходах.Организация = &Организация
		|		И СведенияОДоходах.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|		И СведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|		И СведенияОДоходах.ФизическоеЛицо В(&ФизическиеЛица)) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Сотрудник,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.Подразделение,
		|	Доходы.Начисление,
		|	Доходы.ПодразделениеСотрудника,
		|	Доходы.ДатаПолученияДохода,
		|	Доходы.ДоходМежрасчетногоПериода,
		|	Доходы.КатегорияДохода,
		|	Доходы.СторноТекущегоПериода";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах", УсловиеОтбора);
		
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДоходах.Сотрудник КАК Сотрудник,
		|	СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОДоходах.Начисление КАК Начисление,
		|	СведенияОДоходах.Подразделение КАК Территория,
		|	СведенияОДоходах.ПодразделениеСотрудника КАК Подразделение,
		|	СведенияОДоходах.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	СведенияОДоходах.ДоходМежрасчетногоПериода КАК ДоходМежрасчетногоПериода,
		|	СведенияОДоходах.КатегорияДохода КАК КатегорияДохода,
		|	СУММА(СведенияОДоходах.СуммаДохода - СведенияОДоходах.СуммаВычета) КАК Сумма,
		|	СведенияОДоходах.Сторно КАК СторноТекущегоПериода
		|ПОМЕСТИТЬ ВТСведенияОДоходахДляРаспределенияНДФЛ
		|ИЗ
		|	ВТРегистрНакопления_СведенияОДоходахНДФЛ КАК СведенияОДоходах
		|ГДЕ
		|	СведенияОДоходах.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И СведенияОДоходах.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И СведенияОДоходах.Организация = &Организация
		|	И СведенияОДоходах.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И СведенияОДоходах.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
		|	И СведенияОДоходах.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходах.ФизическоеЛицо,
		|	СведенияОДоходах.Сотрудник,
		|	СведенияОДоходах.Подразделение,
		|	СведенияОДоходах.ПодразделениеСотрудника,
		|	СведенияОДоходах.ДатаПолученияДохода,
		|	СведенияОДоходах.ДоходМежрасчетногоПериода,
		|	СведенияОДоходах.КатегорияДохода,
		|	СведенияОДоходах.Сторно,
		|	СведенияОДоходах.Начисление";
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция дополняет переданную таблицу значений колонкой с суммами налога, зарегистрированного как удержанный.
//
// Параметры:
//		ТаблицаУсловийОтбора - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо
//				Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//				ДокументОснование, ОпределяемыйТип.ДокументыОснованияНДФЛ
//				КатегорияДохода, тип ПеречислениеСсылка.КатегорииДоходовНДФЛ.
//				СтавкаНалогообложенияРезидента, тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента.
//				КодДохода, тип СправочникСсылка.ВидыДоходовНДФЛ.
//				РегистрацияВНалоговомОргане, тип СправочникСсылка.РегистрацииВНалоговомОргане.
//				ВключатьВДекларациюПоНалогуНаПрибыль, тип Булево.
//		ИсключаемыйРегистратор - ДокументСсылка - документ, движения которого не следует учитывать при расчете движений.
//		ДатаАктуальности - дата - дата, по состоянию на которую собираем удержанные налоги.
//
//	Возвращаемое значение - таблица значений с колонками
//				ФизическоеЛицо
//				Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//				ДокументОснование, ОпределяемыйТип.ДокументыОснованияНДФЛ
//				КатегорияДохода, тип ПеречислениеСсылка.КатегорииДоходовНДФЛ.
//				СтавкаНалогообложенияРезидента, тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента.
//				КодДохода, тип СправочникСсылка.ВидыДоходовНДФЛ.
//				РегистрацияВНалоговомОргане, тип СправочникСсылка.РегистрацииВНалоговомОргане.
//				ВключатьВДекларациюПоНалогуНаПрибыль, тип Булево.
//				Сумма
//
Функция ЗарегистрированоНДФЛКПеречислениюПоДокументамОснованиям(ТаблицаУсловийОтбора, ИсключаемыйРегистратор, ДатаАктуальности) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаУсловийОтбора", ТаблицаУсловийОтбора);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(ДатаАктуальности));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУсловийОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаУсловийОтбора.Подразделение КАК Подразделение,
	|	ТаблицаУсловийОтбора.ДокументОснование КАК ДокументОснование,
	|	ТаблицаУсловийОтбора.КатегорияДохода КАК КатегорияДохода,
	|	ТаблицаУсловийОтбора.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ТаблицаУсловийОтбора.КодДохода КАК КодДохода,
	|	ТаблицаУсловийОтбора.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаУсловийОтбора.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
	|ПОМЕСТИТЬ ВТСписокУсловий
	|ИЗ
	|	&ТаблицаУсловийОтбора КАК ТаблицаУсловийОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокУсловий.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокУсловий.Подразделение КАК Подразделение,
	|	СписокУсловий.ДокументОснование КАК ДокументОснование,
	|	СписокУсловий.КатегорияДохода КАК КатегорияДохода,
	|	СписокУсловий.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СписокУсловий.КодДохода КАК КодДохода,
	|	СписокУсловий.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СписокУсловий.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СУММА(НДФЛКПеречислению.Сумма) КАК Сумма,
	|	СУММА(НДФЛКПеречислению.СуммаСПревышения) КАК СуммаСПревышения
	|ИЗ
	|	ВТСписокУсловий КАК СписокУсловий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|		ПО СписокУсловий.ФизическоеЛицо = НДФЛКПеречислению.ФизическоеЛицо
	|			И СписокУсловий.Подразделение = НДФЛКПеречислению.Подразделение
	|			И СписокУсловий.ДокументОснование = НДФЛКПеречислению.ДокументОснование
	|			И СписокУсловий.КатегорияДохода = НДФЛКПеречислению.КатегорияДохода
	|			И СписокУсловий.СтавкаНалогообложенияРезидента = НДФЛКПеречислению.СтавкаНалогообложенияРезидента
	|			И СписокУсловий.КодДохода = НДФЛКПеречислению.КодДохода
	|			И СписокУсловий.РегистрацияВНалоговомОргане = НДФЛКПеречислению.РегистрацияВНалоговомОргане
	|			И СписокУсловий.ВключатьВДекларациюПоНалогуНаПрибыль = НДФЛКПеречислению.ВключатьВДекларациюПоНалогуНаПрибыль
	|			И (НДФЛКПеречислению.Регистратор <> &ИсключаемыйРегистратор)
	|			И (НДФЛКПеречислению.Период <= &ДатаАктуальности)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокУсловий.ФизическоеЛицо,
	|	СписокУсловий.КодДохода,
	|	СписокУсловий.КатегорияДохода,
	|	СписокУсловий.СтавкаНалогообложенияРезидента,
	|	СписокУсловий.ДокументОснование,
	|	СписокУсловий.РегистрацияВНалоговомОргане,
	|	СписокУсловий.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СписокУсловий.Подразделение
	|
	|ИМЕЮЩИЕ
	|	(СУММА(НДФЛКПеречислению.Сумма) <> 0
	|		ИЛИ СУММА(НДФЛКПеречислению.СуммаСПревышения) <> 0)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

#Область ЗаполнениеРеглотчетности

Процедура ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчет6НДФЛ" Тогда
		УчетНДФЛЗаполнениеОтчетности.ОписаниеПоказателей_6НДФЛ_2016Кв1(ПоказателиОтчета);
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет6_НДФЛ" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			УчетНДФЛЗаполнениеОтчетности.ОписаниеПоказателей_6НДФЛ_2021Кв1(ПоказателиОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчет6НДФЛ" Тогда
		УчетНДФЛЗаполнениеОтчетности.ЗначенияПоказателей_6НДФЛ_2016Кв1(ПараметрыОтчета, Контейнер);
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет6_НДФЛ" Тогда
		Если ИДРедакцииОтчета = "ФормаОтчета2021Кв1" Тогда
			УчетНДФЛЗаполнениеОтчетности.ЗначенияПоказателей_6НДФЛ_2021Кв1(ПараметрыОтчета, Контейнер);
			ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляФормированияСправок2НДФЛ

Функция ВыводитьФорму2НДФЛ2018Года(НалоговыйПериод, ДатаДокумента) Экспорт 

	Возврат НалоговыйПериод >= 2017 И ДатаДокумента >= '20180212'

КонецФункции 

Функция ВыводитьФорму2НДФЛ2019Года(НалоговыйПериод, ДатаДокумента) Экспорт

	ДатаНачалаДействия = '20190101';
	Возврат НалоговыйПериод >= Год(ДатаНачалаДействия)-1 И ДатаДокумента >= ДатаНачалаДействия

КонецФункции

// АПК:581-выкл; по аналогии с функциями прошлых лет  
Функция ВыводитьФорму2НДФЛ2021Года(НалоговыйПериод, ДатаДокумента) Экспорт

	ДатаНачалаДействия = '20210101';
	Возврат НалоговыйПериод >= Год(ДатаНачалаДействия)-1 И ДатаДокумента >= ДатаНачалаДействия

КонецФункции
// АПК:581-вкл

Функция ОКАТО_ОКТМО_КППИзРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане)
	
	ДанныеРегистрации = Новый Структура("ОКАТО, КПП, ОКТМО", "", "", "");
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "КодПоОКАТО, КодПоОКТМО, КПП");
		ДанныеРегистрации.ОКАТО	= Реквизиты.КодПоОКАТО;
		ДанныеРегистрации.КПП	= Реквизиты.КПП;
		ДанныеРегистрации.ОКТМО	= Реквизиты.КодПоОКТМО;
	КонецЕсли;
	
	Возврат ДанныеРегистрации;
	
КонецФункции	

Процедура СправкиНДФЛПроверитьДанныеНалоговогоАгента(Объект, ДанныеНалоговогоАгента, СпособФормирования, Отказ) Экспорт
	Если ДанныеНалоговогоАгента.ЭтоЮрЛицо Тогда
		ТекстСообщения = "";
		// Сведения об отправителе		
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДанныеНалоговогоАгента.ИННорг, Истина, ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеНалоговогоАгента.Организация, "ИНН", "Объект", Отказ);
		КонецЕсли; 
		
		Если СокрЛП(ДанныеНалоговогоАгента.НазваниеОрганизации) = "" Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для организации должно быть указано сокращенное наименование организации.'"), 
				Объект.Ссылка, 
				"Организация", "Объект", Отказ);
		КонецЕсли;	
	Иначе		
		// Проверим данные отправителя.
		// Для предпринимателя 12 символов ИНН.
		ТекстСообщения = "";
		
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДанныеНалоговогоАгента.ИННорг, Ложь, ТекстСообщения) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеНалоговогоАгента.Организация, "ИНН", "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(
					ДанныеНалоговогоАгента.Фамилия + ДанныеНалоговогоАгента.Имя + ДанныеНалоговогоАгента.Отчество, 
					Ложь, 
					"-. 0123456789") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами.'"), 
				ДанныеНалоговогоАгента.Организация, 
				"ИндивидуальныйПредприниматель",
				"Объект", 
				Отказ);
		КонецЕсли;
		Если ПустаяСтрока(ДанныеНалоговогоАгента.Фамилия) Или ПустаяСтрока(ДанныеНалоговогоАгента.Имя) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя.'"), 
				Объект.Ссылка, 
				"Организация",
				"Объект", 
				Отказ);
		КонецЕсли;		
	КонецЕсли;
	
	Если СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.ВРазрезеКодовОКАТО Тогда
		Если ЗначениеЗаполнено(ДанныеНалоговогоАгента.КодНалоговогоОргана) 
			И СтрДлина(СокрЛП(ДанныеНалоговогоАгента.КодНалоговогоОргана)) <> 4 Тогда	
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверно указан код налогового органа.'"), Объект.Ссылка, "КодИФНС",, Отказ);
		КонецЕсли;
		
		КлючДанных = Объект.Ссылка;
		Поле = "РегистрацияВНалоговомОргане";
		
		Если УчетНДФЛКлиентСервер.СправкиНДФЛДокументИспользуетКодОКТМО(Объект) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеНалоговогоАгента.ОКТМО) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не указан код по ОКТМО, по которому формируются сведения.'"), 
					КлючДанных, 
					"РегистрацияВНалоговомОргане",
					"Объект", 
					Отказ);		
			ИначеЕсли СтрДлина(СокрЛП(ДанныеНалоговогоАгента.ОКТМО)) <> 11 
				И СтрДлина(СокрЛП(ДанныеНалоговогоАгента.ОКТМО)) <> 8 Тогда	
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Неверно указан код по ОКТМО, по которому формируются сведения.'"),
					КлючДанных, 
					"РегистрацияВНалоговомОргане",
					"Объект", 
					Отказ);		
			КонецЕсли;
		Иначе	
			Если НЕ ЗначениеЗаполнено(ДанныеНалоговогоАгента.ОКАТО) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не указан код по ОКАТО, по которому формируются сведения.'"), 
					КлючДанных, 
					"РегистрацияВНалоговомОргане",
					"Объект", 
					Отказ);		
			ИначеЕсли СтрДлина(СокрЛП(ДанныеНалоговогоАгента.ОКАТО)) <> 11 Тогда	
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Неверно указан код по ОКАТО, по которому формируются сведения.'"),
					КлючДанных, 
					"РегистрацияВНалоговомОргане",
					"Объект", 
					Отказ);		
			КонецЕсли;
		КонецЕсли;		
		
		Если ДанныеНалоговогоАгента.ЭтоЮрЛицо И Не ЗначениеЗаполнено(ДанныеНалоговогоАгента.КПП) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не указан КПП, по которому формируются сведения.'"), 
				КлючДанных, 
				"РегистрацияВНалоговомОргане",
				"Объект", 
				Отказ);		
		КонецЕсли;
	КонецЕсли;		

КонецПроцедуры	

Функция ПоляИтоговСправки2НДФЛ(ДляНалогаНаПрибыль = Ложь) Экспорт

	ПоляИтогов = Новый Массив;
	ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке13");
	ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке13");
	ПоляИтогов.Добавить("ИсчисленоПоСтавке13");
	ПоляИтогов.Добавить("УдержаноПоСтавке13");
	ПоляИтогов.Добавить("ЗадолженностьПоСтавке13");
	ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке13");
	ПоляИтогов.Добавить("ПеречисленоПоСтавке13");
	ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке30");
	ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке30");
	ПоляИтогов.Добавить("ИсчисленоПоСтавке30");
	ПоляИтогов.Добавить("УдержаноПоСтавке30");
	ПоляИтогов.Добавить("ЗадолженностьПоСтавке30");
	ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке30");
	ПоляИтогов.Добавить("ПеречисленоПоСтавке30");
	ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке9");
	ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке9");
	ПоляИтогов.Добавить("ИсчисленоПоСтавке9");
	ПоляИтогов.Добавить("УдержаноПоСтавке9");
	ПоляИтогов.Добавить("ЗадолженностьПоСтавке9");
	ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке9");
	ПоляИтогов.Добавить("ПеречисленоПоСтавке9");
	ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке15");
	ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке15");
	ПоляИтогов.Добавить("ИсчисленоПоСтавке15");
	ПоляИтогов.Добавить("УдержаноПоСтавке15");
	ПоляИтогов.Добавить("ЗадолженностьПоСтавке15");
	ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке15");
	ПоляИтогов.Добавить("ПеречисленоПоСтавке15");
	ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке35");
	ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке35");
	ПоляИтогов.Добавить("ИсчисленоПоСтавке35");
	ПоляИтогов.Добавить("УдержаноПоСтавке35");
	ПоляИтогов.Добавить("ЗадолженностьПоСтавке35");
	ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке35");
	ПоляИтогов.Добавить("ПеречисленоПоСтавке35");
	Если ПолучитьФункциональнуюОпцию("ИспользуютсяСтавкиНДФЛМеждународныхДоговоров") Тогда
		ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке3");
		ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке3");
		ПоляИтогов.Добавить("ИсчисленоПоСтавке3");
		ПоляИтогов.Добавить("УдержаноПоСтавке3");
		ПоляИтогов.Добавить("ЗадолженностьПоСтавке3");
		ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке3");
		ПоляИтогов.Добавить("ПеречисленоПоСтавке3");
		ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке6");
		ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке6");
		ПоляИтогов.Добавить("ИсчисленоПоСтавке6");
		ПоляИтогов.Добавить("УдержаноПоСтавке6");
		ПоляИтогов.Добавить("ЗадолженностьПоСтавке6");
		ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке6");
		ПоляИтогов.Добавить("ПеречисленоПоСтавке6");
		ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке7");
		ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке7");
		ПоляИтогов.Добавить("ИсчисленоПоСтавке7");
		ПоляИтогов.Добавить("УдержаноПоСтавке7");
		ПоляИтогов.Добавить("ЗадолженностьПоСтавке7");
		ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке7");
		ПоляИтогов.Добавить("ПеречисленоПоСтавке7");
		ПоляИтогов.Добавить("ОбщаяСуммаДоходаПоСтавке12");
		ПоляИтогов.Добавить("ОблагаемаяСуммаДоходаПоСтавке12");
		ПоляИтогов.Добавить("ИсчисленоПоСтавке12");
		ПоляИтогов.Добавить("УдержаноПоСтавке12");
		ПоляИтогов.Добавить("ЗадолженностьПоСтавке12");
		ПоляИтогов.Добавить("ИзлишнеУдержаноПоСтавке12");
		ПоляИтогов.Добавить("ПеречисленоПоСтавке12");
	КонецЕсли;
	
	Если Не ДляНалогаНаПрибыль Тогда
		Для каждого ИмяПоля Из ПоляЗачтеноАвансовыхПлатежей() Цикл
			ПоляИтогов.Добавить(ИмяПоля)
		КонецЦикла;
	КонецЕсли;
		
	Возврат ПоляИтогов

КонецФункции 

Функция ПоляЗачтеноАвансовыхПлатежей() Экспорт

	ПоляИтогов = Новый Массив;
	
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке13");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке30");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке9");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке15");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке35");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке5");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке10");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке3");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке6");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке7");
	ПоляИтогов.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке12");
	
	Возврат ПоляИтогов
	
КонецФункции 

Процедура СправкиНДФЛПроверитьДанныеОДоходахНалогахВычетах(Ссылка, Дата, ДанныеСправки, ПутьКДаннымСотрудника, Доходы, Вычеты, СоответствиеСтавокДоходов, НачалоСообщения, Отказ, СводнаяСправка = Ложь, ПроверятьСоответствиеДоходовСтавке = Ложь, ДляНалогаНаПрибыль = Ложь, УведомленияНОоПравеНаВычеты = Неопределено, НомерКорректировки = 0, ПутьКДаннымДоходов = "", ПутьКДаннымВычетов = "", Ошибки = Неопределено) Экспорт
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	ПутьКДаннымСотрудникаДляОшибок = ?(ПустаяСтрока(ПутьКДаннымСотрудника), "", ПутьКДаннымСотрудника + ".");
	ПутьКДаннымДоходов = ?(ПустаяСтрока(ПутьКДаннымДоходов), "СведенияОДоходах", ПутьКДаннымДоходов);
	ПутьКДаннымВычетов =  ?(ПустаяСтрока(ПутьКДаннымВычетов), "СведенияОВычетах", ПутьКДаннымВычетов);
	
	Если НомерКорректировки = 99 Тогда
		
		// в аннулирующей справке разделы 3, 4 и 5 пусты
		
		Если Доходы.Количество() > 0 Тогда
			Для Каждого СтрокаДоходы Из Доходы Цикл
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 обнаружены сведения о доходах в аннулирующей справке'"), НачалоСообщения);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДаннымСотрудникаДляОшибок + ПутьКДаннымДоходов + "[" + Формат(СтрокаДоходы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КодДохода",,Отказ);
				Ошибки.Добавить(ТекстОшибки);
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		Если Вычеты.Количество() > 0 Тогда
			Для Каждого СтрокаВычеты Из Вычеты Цикл
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 обнаружены сведения о вычетах в аннулирующей справке'"), НачалоСообщения);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДаннымСотрудникаДляОшибок + ПутьКДаннымВычетов + "[" + Формат(СтрокаВычеты.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КодВычета",,Отказ);
				Ошибки.Добавить(ТекстОшибки);
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		ЕстьИтоговыеДанные = Ложь;
		ПоляИтоговСправки = ПоляИтоговСправки2НДФЛ(ДляНалогаНаПрибыль);
		Для каждого ИмяПоля Из ПоляИтоговСправки Цикл
			ЕстьИтоговыеДанные = ДанныеСправки[ИмяПоля] <> 0;
			Если ЕстьИтоговыеДанные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьИтоговыеДанные Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 обнаружены сведения о налогах в аннулирующей справке'"), НачалоСообщения);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДаннымСотрудникаДляОшибок + ИмяПоля,,Отказ);	
			Ошибки.Добавить(ТекстОшибки);
		КонецЕсли;
		
	Иначе
	
		НомерСтроки = 1;
		Для Каждого СтрокаДоходы Из Доходы Цикл
			
			ПутьКДанным = ПутьКДаннымДоходов + "[" + Формат(СтрокаДоходы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
					
			Если ЗначениеЗаполнено(СтрокаДоходы.СуммаВычета) И Не ЗначениеЗаполнено(СтрокаДоходы.КодВычета) Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 в строке %2 списка ""Сведения о доходах"" не заполнен код вычета.'"), НачалоСообщения, НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "КодВычета", ,Отказ);
				Ошибки.Добавить(ТекстОшибки);
			КонецЕсли;

			Если ПроверятьСоответствиеДоходовСтавке Тогда
				
				// Эта проверка отменена
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Если ДляНалогаНаПрибыль Тогда // среди вычетов могут быть только стандартные
			
			ГруппыВычетов = Новый Массив;
			ГруппыВычетов.Добавить(Перечисления.ГруппыВычетовПоНДФЛ.Стандартные);
			ГруппыВычетов.Добавить(Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
			ДопустимыеВычеты = ВычетыНалогоплательщика(ДанныеСправки.НалоговыйПериод, ГруппыВычетов);
			
			НомерСтроки = 1;
			Для Каждого СтрокаВычеты Из Вычеты Цикл
				
				ПутьКДанным = ПутьКДаннымВычетов + "[" + Формат(СтрокаВычеты.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
						
				Если ДопустимыеВычеты.Найти(СтрокаВычеты.КодВычета) = Неопределено Тогда 
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 в строке %2 списка ""Сведения о вычетах"" указан недопустимый код вычета.'"), НачалоСообщения, НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "КодВычета", ,Отказ);
					Ошибки.Добавить(ТекстОшибки);
				КонецЕсли;

				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не СводнаяСправка И Не ДляНалогаНаПрибыль Тогда // проверяем уведомления
			
			ИмущественныеВычеты = ВычетыНалогоплательщика(ДанныеСправки.НалоговыйПериод, Перечисления.ГруппыВычетовПоНДФЛ.Имущественные);
			СоциальныеВычеты = ВычетыНалогоплательщика(ДанныеСправки.НалоговыйПериод, Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО);
			ЕстьИмущественныеВычеты = Ложь;
			ЕстьСоциальныеВычеты = Ложь;
			Для каждого Вычет Из ИмущественныеВычеты Цикл
				СтрокаВычеты = Вычеты.Найти(Вычет, "КодВычета");
				ЕстьИмущественныеВычеты = ЕстьИмущественныеВычеты Или СтрокаВычеты <> Неопределено;
				Если ЕстьИмущественныеВычеты Тогда
					ПутьКДаннымИмущественногоВычета = ПутьКДаннымДоходов + "[" + Формат(СтрокаВычеты.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КодВычета";
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			Для каждого Вычет Из СоциальныеВычеты Цикл
				СтрокаВычеты = Вычеты.Найти(Вычет, "КодВычета");
				ЕстьСоциальныеВычеты = ЕстьСоциальныеВычеты Или СтрокаВычеты <> Неопределено;
				Если ЕстьСоциальныеВычеты Тогда
					ПутьКДаннымСоциальногоВычета = ПутьКДаннымВычетов + "[" + Формат(СтрокаВычеты.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КодВычета";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьИмущественныеВычеты Или ЕстьСоциальныеВычеты Тогда
				
				Если УведомленияНОоПравеНаВычеты = Неопределено Тогда
					СтрокиУведомленийНаИмущественныйВычет = Новый Массив;
					СтрокиУведомленийНаСоциальныйВычет = Новый Массив;
				Иначе
					СтрокиУведомленийНаИмущественныйВычет = УведомленияНОоПравеНаВычеты.НайтиСтроки(Новый Структура("ГруппаВычета", Перечисления.ГруппыВычетовПоНДФЛ.Имущественные));
					СтрокиУведомленийНаСоциальныйВычет = УведомленияНОоПравеНаВычеты.НайтиСтроки(Новый Структура("ГруппаВычета", Перечисления.ГруппыВычетовПоНДФЛ.Социальные));
				КонецЕсли;
				
				Если ЕстьИмущественныеВычеты Тогда
					Если СтрокиУведомленийНаИмущественныйВычет.Количество() = 0 Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не указаны данные уведомления о праве на имущественный вычет'"), НачалоСообщения);
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДаннымИмущественногоВычета,,Отказ);	
						Ошибки.Добавить(ТекстОшибки);
					Иначе
						Для Каждого СтрокаУведомлений Из СтрокиУведомленийНаИмущественныйВычет Цикл
							
							ПутьКДанным = "УведомленияНОоПравеНаВычеты[" + Формат(СтрокаУведомлений.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 в данных уведомления о праве на имущественный вычет указаны не все реквизиты'"), НачалоСообщения);
							
							Если Не ЗначениеЗаполнено(СтрокаУведомлений.НомерУведомления)  Тогда
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "НомерУведомления",,Отказ);	
								Ошибки.Добавить(ТекстОшибки);
							КонецЕсли;	
							
							Если Не ЗначениеЗаполнено(СтрокаУведомлений.ДатаУведомления)  Тогда
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "ДатаУведомления",,Отказ);	
								Ошибки.Добавить(ТекстОшибки);
							КонецЕсли;	
							
							Если Не ЗначениеЗаполнено(СтрокаУведомлений.КодНалоговогоОрганаУведомления) Тогда
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "КодНалоговогоОрганаУведомления",,Отказ);
							ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаУведомлений.КодНалоговогоОрганаУведомления) Тогда
								ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 неверно указан код налогового органа, выдавшего уведомление о праве на имущественный вычет'"), НачалоСообщения);
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "КодНалоговогоОрганаУведомления",,Отказ);	
								Ошибки.Добавить(ТекстОшибки);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьСоциальныеВычеты Тогда
					Если СтрокиУведомленийНаСоциальныйВычет.Количество() = 0 Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не указаны данные уведомления о праве на социальный вычет'"), НачалоСообщения);
						ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДаннымСоциальногоВычета,,Отказ);	
						Ошибки.Добавить(ТекстОшибки);
					Иначе
						Для каждого СтрокаУведомлений Из СтрокиУведомленийНаСоциальныйВычет Цикл
							
							ПутьКДанным = "УведомленияНОоПравеНаВычеты[" + Формат(СтрокаУведомлений.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 в данных уведомления о праве на социальный вычет указаны не все реквизиты'"), НачалоСообщения);
							
							Если Не ЗначениеЗаполнено(СтрокаУведомлений.НомерУведомления)  Тогда
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "НомерУведомления",,Отказ);	
								Ошибки.Добавить(ТекстОшибки);
							КонецЕсли;	
							
							Если Не ЗначениеЗаполнено(СтрокаУведомлений.ДатаУведомления)  Тогда
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "ДатаУведомления",,Отказ);	
								Ошибки.Добавить(ТекстОшибки);
							КонецЕсли;	
							
							Если Не ЗначениеЗаполнено(СтрокаУведомлений.КодНалоговогоОрганаУведомления) Тогда
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "КодНалоговогоОрганаУведомления",,Отказ);
								Ошибки.Добавить(ТекстОшибки);
							ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаУведомлений.КодНалоговогоОрганаУведомления) Тогда
								ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 неверно указан код налогового органа, выдавшего уведомление о праве на социальный вычет'"), НачалоСообщения);
								ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДанным + "КодНалоговогоОрганаУведомления",,Отказ);	
								Ошибки.Добавить(ТекстОшибки);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ЗначениеПеречисления Из Перечисления.НДФЛСтавки Цикл
			
			Если ПроверятьСоответствиеДоходовСтавке Тогда // проверяем только переданную ставку
				Если ЗначениеПеречисления <> ДанныеСправки.Ставка Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДоходыПоСтавке = СправкиНДФЛИзвлечьДоходыПоСтавке(ЗначениеПеречисления, ДанныеСправки.НалоговыйПериод, ДанныеСправки.СтатусНалогоплательщика, Доходы, СоответствиеСтавокДоходов);
			
			ОбщаяСуммаДохода = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(ДанныеСправки, "ОбщаяСуммаДохода", ЗначениеПеречисления);
			ОблагаемаяСуммаДохода = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(ДанныеСправки, "ОблагаемаяСуммаДохода", ЗначениеПеречисления);
			
			Если ДоходыПоСтавке.Количество() > 0 
				Или ОбщаяСуммаДохода <> 0 
				Или ОблагаемаяСуммаДохода <> 0 Тогда
				
				Если ОбщаяСуммаДохода <> ДоходыПоСтавке.Итог("СуммаДохода") Тогда
					ИмяПоляИтогов = УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ОбщаяСуммаДохода", ЗначениеПеречисления);
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 общая сумма дохода по ставке %2 не совпадает с итогом таблицы доходов'"), НачалоСообщения, ЗначениеПеречисления);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДаннымСотрудникаДляОшибок + ИмяПоляИтогов,,Отказ);
					Ошибки.Добавить(ТекстОшибки);
				КонецЕсли;
				
				Если ОблагаемаяСуммаДохода <> ДоходыПоСтавке.Итог("СуммаДохода") - ДоходыПоСтавке.Итог("СуммаВычета") - ?(ЗначениеПеречисления = Перечисления.НДФЛСтавки.Ставка13, Вычеты.Итог("СуммаВычета"),0) Тогда
					ИмяПоляИтогов = УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке("ОблагаемаяСуммаДохода", ЗначениеПеречисления);
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 сумма налоговой базы по ставке %2 не совпадает с итогами таблиц доходов и вычетов'"), НачалоСообщения, ЗначениеПеречисления);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, ПутьКДаннымСотрудникаДляОшибок + ИмяПоляИтогов,,Отказ);	
					Ошибки.Добавить(ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для получения сведений об уполномоченном представителе организации в налоговом органе.
// Параметры:
//		РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - должно быть непустым значением.
//		ДатаПодписи - дата - дата, по состоянию на которую будут читаться данные представителя-физлица.
//
//  Возвращаемое значение: 
//  	Структура с полями: 
//			ТипПодписанта - строка со значениями "1", "2", 
//			ПредставительЮрЛицо - булево, 
//			а также строковые НаименованиеОрганизацииПредставителя, ДокументПредставителя, Фамилия, Имя, Отчество, ФИОПредставителя
//
Функция СведенияОПредставителеПоРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане, ДатаПодписи)
	
	ДанныеПредставителя = Новый Структура("ТипПодписанта, ПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ДокументПредставителя, Фамилия, Имя, Отчество, ФИОПредставителя", "1", Истина, "", "", "", "", "", "");
	Сведения = ИнтерфейсыВзаимодействияБРОВызовСервера.СведенияОПредставителеПоРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане, ДатаПодписи);
	ЗаполнитьЗначенияСвойств(ДанныеПредставителя, Сведения);
	
	Возврат	ДанныеПредставителя
	
КонецФункции

// Метод возвращает ставку, вписанную в НК РФ, без учета международных договоров и прочих особенностей
Функция СтавкаНДФЛ(СтавкаНалогообложенияРезидента, КодДохода, СтатусНалогоплательщика, НалоговыйПериод) Экспорт	
	Если СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
		Если СтатусНалогоплательщика = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент Тогда
			Возврат Перечисления.НДФЛСтавки.Ставка30;
		Иначе
			Возврат Перечисления.НДФЛСтавки.Ставка13;
		КонецЕсли;
	ИначеЕсли СтатусНалогоплательщика = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда
		Если СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
			Если КодДохода = Справочники.ВидыДоходовНДФЛ.Код1010 И НалоговыйПериод >= Год(ДатаИзмененияНалогообложенияДивидендов()) Тогда
				Возврат Перечисления.НДФЛСтавки.Ставка13;
			Иначе
				Возврат Перечисления.НДФЛСтавки.Ставка09;
			КонецЕсли;
		ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
			Возврат Перечисления.НДФЛСтавки.Ставка35;
		Иначе
			Возврат Перечисления.НДФЛСтавки.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли КодДохода = Справочники.ВидыДоходовНДФЛ.Код1010 Тогда
		Возврат Перечисления.НДФЛСтавки.Ставка15;
	Иначе
		Возврат Перечисления.НДФЛСтавки.Ставка30;	
	КонецЕсли; 	
КонецФункции	

Процедура ПрочитатьКлассификаторыВСоответствия(СоответствиеКодовСтран, СоответствиеИменСтран, СоответствиеДокументовУдостоверяющихЛичность, СоответствиеКодовДоходов, СоответствиеСтатусовНалогоплательщика) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Ссылка,
	|	КлассификаторСтранМира.Код,
	|	КлассификаторСтранМира.Наименование
	|ИЗ
	|	Справочник.СтраныМира КАК КлассификаторСтранМира";
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеКодовСтран.Вставить(Выборка.Ссылка,Выборка.Код);
		СоответствиеИменСтран.Вставить(Выборка.Наименование,Выборка.Код)
	КонецЦикла;
	СоответствиеКодовСтран.Вставить(Справочники.СтраныМира.ПустаяСсылка(),"999");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка,
	|	ВидыДокументовФизическихЛиц.КодМВД,
	|	ВЫБОР
	|		КОГДА ВидыДокументовФизическихЛиц.КодМВД = ""18""
	|			ТОГДА ""19""
	|		ИНАЧЕ ВидыДокументовФизическихЛиц.КодМВД
	|	КОНЕЦ КАК КодМВД_2015
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц";
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие; 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеДокументовУдостоверяющихЛичность.Вставить(Выборка.Ссылка, Новый Структура("КодМВД, КодМВД_2015", Выборка.КодМВД, Выборка.КодМВД_2015));		
	КонецЦикла;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2010Года КАК КодДляОтчетности
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ДоходыНДФЛ";
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеКодовДоходов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеКодовДоходов.Вставить(Выборка.Ссылка, Выборка.КодДляОтчетности)
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНалогоплательщиковПоНДФЛ.Ссылка,
	|	СтатусыНалогоплательщиковПоНДФЛ.КодФНС,
	|	СтатусыНалогоплательщиковПоНДФЛ.КодФНС_2015
	|ИЗ
	|	Справочник.СтатусыНалогоплательщиковПоНДФЛ КАК СтатусыНалогоплательщиковПоНДФЛ";
	СоответствиеСтатусовНалогоплательщика = Новый Соответствие; 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеСтатусовНалогоплательщика.Вставить(Выборка.Ссылка, Новый Структура("КодФНС, КодФНС_2015", Выборка.КодФНС, Выборка.КодФНС_2015));		
	КонецЦикла;	
	
КонецПроцедуры

Функция СоответствиеДоходовСтавкам(Доходы = Неопределено) Экспорт
	СоответствиеДоходовСтавкам = Новый Соответствие;
	Запрос = Новый Запрос;
	Если Доходы = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДоходовНДФЛ.Ссылка,
		|	ВидыДоходовНДФЛ.СтавкаНалогообложенияРезидента
		|ИЗ
		|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ";
	Иначе 
		Запрос.УстановитьПараметр("Доходы", Доходы);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДоходовНДФЛ.Ссылка,
		|	ВидыДоходовНДФЛ.СтавкаНалогообложенияРезидента
		|ИЗ
		|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
		|ГДЕ
		|	ВидыДоходовНДФЛ.Ссылка В(&Доходы)";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеДоходовСтавкам.Вставить(Выборка.Ссылка, Выборка.СтавкаНалогообложенияРезидента);		
	КонецЦикла;	
	
	Возврат СоответствиеДоходовСтавкам;
КонецФункции	

Функция Справки2НДФЛОНевозможностиУдержания(Сотрудники, ДатаАктуальности, НалоговыйПериод, Организация, РегистрацияВНалоговомОргане, НомерКорректировки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НалоговыйПериод", НалоговыйПериод);
	Запрос.УстановитьПараметр("ДатаПодачиСведений", КонецДня(ДатаАктуальности));
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("НачалоПредшествующегоГода", ДобавитьМесяц(Дата(НалоговыйПериод,1,1), -12));
	
	Если НомерКорректировки = 99 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки) КАК НомерКорректировки
		|ПОМЕСТИТЬ ВТСтаршиеКорректировки
		|ИЗ
		|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата < &ДатаПодачиСведений
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата >= &НачалоПредшествующегоГода
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация = &Организация
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник В(&Сотрудники)
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ))
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки < 99
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.НомерКорректировки КАК НомерКорректировки,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата) КАК ДатаДокумента
		|ПОМЕСТИТЬ ВТДатыПоследнихСправок
		|ИЗ
		|	ВТСтаршиеКорректировки КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|		ПО Сотрудники.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И Сотрудники.НомерКорректировки = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата < &ДатаПодачиСведений)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата >= &НачалоПредшествующегоГода)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация = &Организация)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ)))
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник,
		|	Сотрудники.НомерКорректировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТСправки
		|ИЗ
		|	ВТДатыПоследнихСправок КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|		ПО Сотрудники.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И Сотрудники.ДатаДокумента = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата
		|			И Сотрудники.НомерКорректировки = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация = &Организация)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Справки.Сотрудник КАК Сотрудник,
		|	Справки.Ссылка КАК ИсправляемаяСправка,
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки КАК НомерСправки
		|ИЗ
		|	ВТСправки КАК Справки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|		ПО Справки.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И Справки.Ссылка = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки ЕСТЬ НЕ NULL ";
		
	Иначе
		
		Запрос.УстановитьПараметр("НомерПредыдущейКорректировки", НомерКорректировки - 1);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата) КАК ДатаДокумента
		|ПОМЕСТИТЬ ВТДатыПоследнихСправок
		|ИЗ
		|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата < &ДатаПодачиСведений
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата >= &НачалоПредшествующегоГода
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация = &Организация
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки = &НомерПредыдущейКорректировки
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник В(&Сотрудники)
		|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ))
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТСправки
		|ИЗ
		|	ВТДатыПоследнихСправок КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|		ПО Сотрудники.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И Сотрудники.ДатаДокумента = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Организация = &Организация)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод = &НалоговыйПериод)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ДокументПринятВНалоговыйОрган)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НомерКорректировки = &НомерПредыдущейКорректировки)
		|			И (СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.ОснованиеДляПредставленияСправок В (ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛЗаРеорганизованнуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Справки.Сотрудник КАК Сотрудник,
		|	Справки.Ссылка КАК ИсправляемаяСправка,
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки КАК НомерСправки
		|ИЗ
		|	ВТСправки КАК Справки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|		ПО Справки.Сотрудник = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник
		|			И Справки.Ссылка = СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки ЕСТЬ НЕ NULL ";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Помещает во временную таблицу перечень физических лиц, получивших доходы в подразделениях, 
// 	изменивших в налоговом периоде регистрацию на соответствующую переданному КПП отправки в .
//
// Параметры:
//	КППОтправки - Строка - КПП "новой" регистрации в НО.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицу с полями:
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//		Подразделение - ОпределяемыйТип.ТерриторияВыполненияРабот
//		РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - регистрация,
//									с которой были зарегистрированы данные при получении дохода.
//		поле типа дата, на которую получаем действующие регистрации.
//	ИмяТаблицыПодразделений - Строка - имя временной таблицы с параметрами "среза".
//	ПолеДаты - Строка - имя поля вр.таблицы, содержащего дату.
//
// В результате в менеджер временных таблиц помещается таблица ВТФизическиеЛицаСУчетомПереездаВИнойНО с полем
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
Процедура СформироватьВТФизическиеЛицаСУчетомПереездаВИнойНО(КППОтправки, МенеджерВременныхТаблиц, ИмяТаблицыПодразделений, ПолеДаты) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КППОтправки", КППОтправки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК НоваяРегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТНовыеРегистрации
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Доходы.КонецГода КАК КонецГода,
	|		Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Доходы.Подразделение КАК Подразделение,
	|		Доходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|	ИЗ
	|		ВТДоходы КАК Доходы) КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Доходы.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (Доходы.КонецГода МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеРегистрацииФизическогоЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НовыеРегистрацииФизическогоЛица.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТСовпавшиеРегистрации
	|ИЗ
	|	ВТНовыеРегистрации КАК НовыеРегистрацииФизическогоЛица
	|ГДЕ
	|	НовыеРегистрацииФизическогоЛица.РегистрацияВНалоговомОргане = НовыеРегистрацииФизическогоЛица.НоваяРегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеРегистрацииФизическогоЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(НовыеРегистрацииФизическогоЛица.НоваяРегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТРегистрацииФизическогоЛица
	|ИЗ
	|	ВТНовыеРегистрации КАК НовыеРегистрацииФизическогоЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСовпавшиеРегистрации КАК СовпавшиеРегистрации
	|		ПО НовыеРегистрацииФизическогоЛица.ФизическоеЛицо = СовпавшиеРегистрации.ФизическоеЛицо
	|			И НовыеРегистрацииФизическогоЛица.РегистрацияВНалоговомОргане = СовпавшиеРегистрации.РегистрацияВНалоговомОргане
	|ГДЕ
	|	СовпавшиеРегистрации.ФизическоеЛицо ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	НовыеРегистрацииФизическогоЛица.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СовпавшиеРегистрации.ФизическоеЛицо,
	|	СовпавшиеРегистрации.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТСовпавшиеРегистрации КАК СовпавшиеРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииФизическогоЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаСУчетомПереездаВИнойНО
	|ИЗ
	|	ВТРегистрацииФизическогоЛица КАК РегистрацииФизическогоЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО РегистрацииФизическогоЛица.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|ГДЕ
	|	РегистрацииВНалоговомОргане.КПП = &КППОтправки";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДоходы", ИмяТаблицыПодразделений);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "КонецГода", ПолеДаты);
	Запрос.Выполнить();
	
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТНовыеРегистрации");
	ТаблицыКУдалению.Добавить("ВТРегистрацииФизическогоЛица");
	ТаблицыКУдалению.Добавить("ВТСовпавшиеРегистрации");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
	
КонецПроцедуры

// Возвращает структуру, содержащую таблицы значений с
// данными о доходах, налогах, вычетах.
//
// Параметры:
// 	Сотрудники - Массив - содержит физических лиц, по которым необходимо получить данные.
//	НалоговыйПериод - Число - номер года налогового периода.
//	Организация - организация, по которой получать доходы.
//	РегистрацияВНалоговомОргане - (необязательный), ссылка на регистрацию в налоговом органе, 
//									по которой отбирать данные.
//	ДатаАктуальности - Дата - (необязательный), дата ограничивающая период получаемых данных о доходах налогах и вычетах
//			если не задана, ограничением будет выступать текущая дата сеанса.
//	ПодробныеДанные - Булево - определяет подробность возвращаемых данных.
//	ДополнительныйОтбор - строка - (необязательный) одинаковое условие на все данные учета.
//
// Возвращаемое значение:
//	В варианте ПодробныеДанные = Ложь. Структура со следующими полями:
//		Доходы - таблица значений с колонками:
//			Сотрудник,
//			Ставка,
//			МесяцНалоговогоПериода,
//			КодДохода,
//			КодДоходаКодДляОтчетности,
//			КодВычета,
//			СуммаДохода,
//			СуммаВычета,
//			ВключатьВДекларациюПоНалогуНаПрибыль,
//		Вычеты - таблица значений с колонками:
//			Сотрудник
//			КодВычета,
//			КодВычетаКод,
//			СуммаВычета,
//			ВключатьВДекларациюПоНалогуНаПрибыль,
//		Налоги - таблица значений с колонками:
//			Сотрудник,
//			Ставка,
//			ОбщаяСуммаДохода,
//			ОблагаемаяСуммаДохода,
//			Исчислено,
//			Удержано,
//			Задолженность,
//			ИзлишнеУдержано,
//			Перечислено,
//			ВключатьВДекларациюПоНалогуНаПрибыль
//
//	В варианте ПодробныеДанные = Истина. Структура со следующими полями:
//		Доходы - таблица значений с колонками:
//			ФизическоеЛицо,
//			Сотрудник,
//			Ставка,
//			КодДохода,
//			КодВычета,
//			СуммаДохода,
//			СуммаВычета,
//			ПериодРегистрации,
//			СтавкаНалогообложенияРезидента,
//			Регистратор,
//			РегистрацияВНалоговомОргане,
//			Подразделение,
//			ДатаПолученияДохода,
//		Вычеты - таблица значений с колонками:
//			ФизическоеЛицо
//			КодВычета,
//			СуммаВычета,
//			ПериодРегистрации,
//			Регистратор,
//			РегистрацияВНалоговомОргане,
//			Подразделение,
//			ДатаПолученияДохода,
//		Налоги - таблица значений с колонками:
//			ФизическоеЛицо,
//			Ставка,
//			СтавкаНалогообложенияРезидента,
//			Начислено,
//			Зачтено,
//			Регистратор,
//			ПериодРегистрации,
//			РегистрацияВНалоговомОргане,
//			Подразделение,
//			ДатаПолученияДохода
//
Функция ДанныеОДоходахНалогахВычетах(Сотрудники, НалоговыйПериод, Организация, РегистрацияВНалоговомОргане = Неопределено, ДатаАктуальности = '00010101', КППОтправки = Неопределено, ПодробныеДанные = Ложь, ДополнительныйОтбор = "") Экспорт
	
	Если НалоговыйПериод < 2017 Тогда
		Возврат ДанныеОДоходахНалогахВычетах2016(Сотрудники, НалоговыйПериод, Организация, РегистрацияВНалоговомОргане, ДатаАктуальности, КППОтправки, ПодробныеДанные)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ГодНП",НалоговыйПериод);
	НачалоНалоговогоПериода = Дата(НалоговыйПериод, 1, 1);
	КонецНалоговогоПериода = КонецГода(НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецНП",КонецНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоНП", НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоСледующегоНП", КонецНалоговогоПериода + 1); // Начало следующего налогового периода.
	Запрос.УстановитьПараметр("ДатаПодачиСведений", ?(Не ЗначениеЗаполнено(ДатаАктуальности), ТекущаяДатаСеанса(), ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаДоПодачиСведений", ?(Не ЗначениеЗаполнено(ДатаАктуальности), ТекущаяДатаСеанса(), ДатаАктуальности) - 1);
	Запрос.УстановитьПараметр("ЧитатьСводныеДанные", РегистрацияВНалоговомОргане = Неопределено Или ПодробныеДанные);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	УчитыватьПереездВДругуюИФНС = ЗначениеЗаполнено(РегистрацияВНалоговомОргане) И ЗначениеЗаполнено(КППОтправки) И Не ПодробныеДанные И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП") <> КППОтправки;
	Запрос.УстановитьПараметр("УчитыватьПереездВДругуюИФНС", УчитыватьПереездВДругуюИФНС);
	Запрос.УстановитьПараметр("КППОтправки", КППОтправки);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ДополнительныйОтбор", Истина);
	Запрос.УстановитьПараметр("ДатаОбъединенияВсехСведений", ДатаВозвратаДоходовПоЦеннымБумагамИзДекларацииПоПрибыли());
	
	// АПК:96-выкл Использование ОБЪЕДИНИТЬ для таблицы ВТСтрокиУчета необходимо
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокСотрудников.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизлица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК СписокСотрудников
	|ГДЕ
	|	СписокСотрудников.Ссылка В(&Сотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МЕСЯЦ(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода) КАК Месяц,
	|	КОНЕЦПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, ГОД) КАК КонецГода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.КодДохода.КодПрименяемыйВНалоговойОтчетностиС2010Года КАК КодДоходаКодДляОтчетности,
	|	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента КАК КодДоходаСтавкаНалогообложенияРезидента,
	|	СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОДоходахНДФЛ.СуммаВычета
	|	КОНЕЦ КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.СуммаВычета = 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ СведенияОДоходахНДФЛ.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода < &ДатаОбъединенияВсехСведений
	|		И СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизлица КАК Сотрудники
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|			И (СведенияОДоходахНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (СведенияОДоходахНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
	|			И (&ЧитатьСводныеДанные
	|					И СведенияОДоходахНДФЛ.Организация = &Организация
	|				ИЛИ СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
	|			И (СведенияОДоходахНДФЛ.Период <= &ДатаПодачиСведений)
	|			И (&ДополнительныйОтбор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета КАК КодВычета,
	|	СУММА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Сумма) КАК СуммаОборот,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода < &ДатаОбъединенияВсехСведений
	|		И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Подразделение КАК Подразделение,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты
	|ИЗ
	|	ВТФизлица КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ
	|		ПО Сотрудники.ФизическоеЛицо = ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизическоеЛицо
	|ГДЕ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период <= &ДатаПодачиСведений
	|	И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП
	|	И (&ЧитатьСводныеДанные
	|				И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Организация = &Организация
	|			ИЛИ ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
	|	И &ДополнительныйОтбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизическоеЛицо,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода < &ДатаОбъединенияВсехСведений
	|		И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Регистратор,
	|	НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период, МЕСЯЦ),
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Подразделение,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета КАК КодВычета,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот КАК СуммаВычета,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета КАК КодВычетаГруппаВычета,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Регистратор КАК Регистратор,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ПериодРегистрации КАК ПериодРегистрации,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Подразделение КАК Подразделение,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТВычеты
	|ИЗ
	|	ВТПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИмущественныеВычетыНДФЛ.КодВычета,
	|	ИмущественныеВычетыНДФЛ.Сумма,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычетыНДФЛ.Период, МЕСЯЦ),
	|	СотрудникиОрганизаций.ФизическоеЛицо,
	|	ИмущественныеВычетыНДФЛ.КодВычета.ГруппаВычета,
	|	ЛОЖЬ,
	|	ИмущественныеВычетыНДФЛ.Регистратор,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычетыНДФЛ.МесяцРегистрации, МЕСЯЦ),
	|	ИмущественныеВычетыНДФЛ.Подразделение,
	|	ИмущественныеВычетыНДФЛ.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТФизлица КАК СотрудникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|		ПО СотрудникиОрганизаций.ФизическоеЛицо = ИмущественныеВычетыНДФЛ.ФизическоеЛицо
	|			И (ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|			И (ИмущественныеВычетыНДФЛ.МесяцРегистрации <= &ДатаПодачиСведений)
	|			И (ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (ИмущественныеВычетыНДФЛ.Год = &ГодНП)
	|			И (&ЧитатьСводныеДанные
	|					И ИмущественныеВычетыНДФЛ.Организация = &Организация
	|				ИЛИ ИмущественныеВычетыНДФЛ.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
	|			И (&ДополнительныйОтбор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НДФЛРасчетыСБюджетом.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НДФЛРасчетыСБюджетом.ВариантУдержания КАК ВариантУдержания,
	|	НДФЛРасчетыСБюджетом.ВидДвижения КАК ВидДвижения,
	|	НДФЛРасчетыСБюджетом.Сумма КАК Сумма,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.КатегорияДохода КАК КатегорияДохода,
	|	НДФЛРасчетыСБюджетом.КодДохода КАК КодДохода,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода < &ДатаОбъединенияВсехСведений
	|		И НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НДФЛРасчетыСБюджетом.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ) КАК ПериодРегистрации,
	|	НДФЛРасчетыСБюджетом.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТСтрокиНалогов
	|ИЗ
	|	ВТФизлица КАК СправкиОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК НДФЛРасчетыСБюджетом
	|		ПО СправкиОДоходах.ФизическоеЛицо = НДФЛРасчетыСБюджетом.ФизическоеЛицо
	|			И (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
	|			И (НДФЛРасчетыСБюджетом.Период < &ДатаПодачиСведений)
	|			И (НДФЛРасчетыСБюджетом.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|			И (&ЧитатьСводныеДанные
	|					И НДФЛРасчетыСБюджетом.Организация = &Организация
	|				ИЛИ НДФЛРасчетыСБюджетом.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)
	|			И (&ДополнительныйОтбор)
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перечислено.Ставка КАК Ставка,
	|	Перечислено.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(Перечислено.СуммаРасход) КАК СуммаРасход,
	|	Перечислено.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Перечислено.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА Перечислено.ИсчисленоПоДивидендам
	|			ТОГДА ВЫБОР
	|					КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка05)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05)
	|					КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка10)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10)
	|					КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка12)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.Дивиденды)
	|				КОНЕЦ
	|		КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка03)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке03)
	|		КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка05)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке05)
	|		КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка06)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке06)
	|		КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка07)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке07)
	|		КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка10)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке10)
	|		КОГДА Перечислено.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке15)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТруда)
	|	КОНЕЦ КАК КатегорияДохода,
	|	Перечислено.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам
	|ПОМЕСТИТЬ ВТПеречисленоНДФЛПоМесяцам
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.Ставка КАК Ставка,
	|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.СуммаРасход КАК СуммаРасход,
	|		КОНЕЦПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.МесяцНалоговогоПериода < &ДатаОбъединенияВсехСведений
	|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам
	|	ИЗ
	|		РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Обороты(
	|				&НачалоНП,
	|				&ДатаДоПодачиСведений,
	|				,
	|				ФизическоеЛицо В
	|						(ВЫБРАТЬ
	|							ФизическиеЛица.ФизическоеЛицо
	|						ИЗ
	|							ВТФизлица КАК ФизическиеЛица)
	|					И (МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
	|					И (&ЧитатьСводныеДанные
	|							И Организация = &Организация
	|						ИЛИ РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане)) КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты) КАК Перечислено
	|
	|СГРУППИРОВАТЬ ПО
	|	Перечислено.Ставка,
	|	Перечислено.ФизическоеЛицо,
	|	Перечислено.МесяцНалоговогоПериода,
	|	Перечислено.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Перечислено.ИсчисленоПоДивидендам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Доходы.ДатаПолученияДохода КАК Период,
	|	Доходы.КодДохода.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.КатегорияДохода КАК КатегорияДохода
	|ПОМЕСТИТЬ ВТСтрокиУчета
	|ИЗ
	|	ВТДоходы КАК Доходы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вычеты.МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13),
	|	Вычеты.ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТруда)
	|ИЗ
	|	ВТВычеты КАК Вычеты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиНалогов.МесяцНалоговогоПериода,
	|	СтрокиНалогов.СтавкаНалогообложенияРезидента,
	|	СтрокиНалогов.ФизическоеЛицо,
	|	СтрокиНалогов.КатегорияДохода
	|ИЗ
	|	ВТСтрокиНалогов КАК СтрокиНалогов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеречисленоНДФЛПоМесяцам.МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13),
	|	ПеречисленоНДФЛПоМесяцам.ФизическоеЛицо,
	|	ПеречисленоНДФЛПоМесяцам.КатегорияДохода
	|ИЗ
	|	ВТПеречисленоНДФЛПоМесяцам КАК ПеречисленоНДФЛПоМесяцам
	|ГДЕ
	|	НЕ ПеречисленоНДФЛПоМесяцам.ИсчисленоПоДивидендам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеречисленоНДФЛПоМесяцам.МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09),
	|	ПеречисленоНДФЛПоМесяцам.ФизическоеЛицо,
	|	ПеречисленоНДФЛПоМесяцам.КатегорияДохода
	|ИЗ
	|	ВТПеречисленоНДФЛПоМесяцам КАК ПеречисленоНДФЛПоМесяцам
	|ГДЕ
	|	ПеречисленоНДФЛПоМесяцам.ИсчисленоПоДивидендам";
	// АПК:96-вкл 
	Запрос.Текст = ?(ЗначениеЗаполнено(ДополнительныйОтбор), СтрЗаменить(ТекстЗапроса, "&ДополнительныйОтбор", ДополнительныйОтбор), ТекстЗапроса);
	Запрос.Выполнить();
	
	СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц, "ВТСтрокиУчета", "НеУчитыватьИзмененияСтатуса");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Статус,
	|	ТаблицаНДФЛ.Период,
	|	ТаблицаНДФЛ.КатегорияДохода,
	|	ТаблицаНДФЛ.СтавкаНалогообложенияРезидента,
	|	ТаблицаНДФЛ.СтавкаНДФЛ,
	|	ТаблицаНДФЛ.СтавкаЧислом
	|ПОМЕСТИТЬ ВТСтавкаНДФЛБезУчетаИзмененияСтатуса
	|ИЗ
	|	ВТСтавкаНДФЛПоСтавкеРезидента КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтавкаНДФЛПоСтавкеРезидента";
	Запрос.Выполнить();
	
	СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц, "ВТСтрокиУчета", "УчитыватьИзмененияСтатусаДляОтчетности");
	
	Если ПодробныеДанные Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Доходы.КодДоходаСтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
		|	Доходы.ПериодРегистрации КАК ПериодРегистрации,
		|	Доходы.Сотрудник КАК Сотрудник,
		|	Доходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	Доходы.Подразделение КАК Подразделение,
		|	Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	Доходы.Регистратор КАК Регистратор,
		|	Доходы.КодДохода КАК КодДохода,
		|	Доходы.КодВычета,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
		|	СУММА(Доходы.СуммаВычета) КАК СуммаВычета
		|ИЗ
		|	ВТДоходы КАК Доходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО Доходы.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И Доходы.КодДоходаСтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
		|			И Доходы.ДатаПолученияДохода = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И Доходы.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|ГДЕ
		|	(НЕ Доходы.ИсточникДоходаЗаПределамиРФ
		|			ИЛИ СтавкаНДФЛПоСтавкеРезидента.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ПериодРегистрации,
		|	Доходы.Сотрудник,
		|	Доходы.ФизическоеЛицо,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ,
		|	Доходы.КодДохода,
		|	Доходы.КодДоходаСтавкаНалогообложенияРезидента,
		|	Доходы.РегистрацияВНалоговомОргане,
		|	Доходы.Подразделение,
		|	Доходы.КодВычета,
		|	Доходы.Регистратор,
		|	Доходы.ДатаПолученияДохода
		|
		|ИМЕЮЩИЕ
		|	(СУММА(Доходы.СуммаДохода) <> 0
		|		ИЛИ СУММА(Доходы.СуммаВычета) <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	СтавкаНалогообложенияРезидента,
		|	Ставка,
		|	ПериодРегистрации,
		|	Сотрудник,
		|	РегистрацияВНалоговомОргане,
		|	Подразделение,
		|	ДатаПолученияДохода,
		|	КодДохода,
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Вычеты.ПериодРегистрации КАК ПериодРегистрации,
		|	Вычеты.РегистрацияВНалоговомОргане,
		|	КОНЕЦПЕРИОДА(Вычеты.МесяцНалоговогоПериода, МЕСЯЦ) КАК ДатаПолученияДохода,
		|	Вычеты.Подразделение,
		|	Вычеты.Регистратор КАК Регистратор,
		|	Вычеты.КодВычета КАК КодВычета,
		|	СУММА(Вычеты.СуммаВычета) КАК СуммаВычета
		|ИЗ
		|	ВТВычеты КАК Вычеты
		|ГДЕ
		|	Вычеты.КодВычета ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Вычеты.КодВычета,
		|	Вычеты.РегистрацияВНалоговомОргане,
		|	Вычеты.Подразделение,
		|	Вычеты.ПериодРегистрации,
		|	Вычеты.Регистратор,
		|	Вычеты.ФизическоеЛицо,
		|	КОНЕЦПЕРИОДА(Вычеты.МесяцНалоговогоПериода, МЕСЯЦ)
		|
		|ИМЕЮЩИЕ
		|	СУММА(Вычеты.СуммаВычета) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ПериодРегистрации,
		|	Вычеты.РегистрацияВНалоговомОргане,
		|	Вычеты.Подразделение,
		|	ДатаПолученияДохода,
		|	КодВычета,
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛРасчетыСБюджетом.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НДФЛРасчетыСБюджетом.ПериодРегистрации КАК ПериодРегистрации,
		|	НДФЛРасчетыСБюджетом.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	НДФЛРасчетыСБюджетом.Регистратор КАК Регистратор,
		|	НДФЛРасчетыСБюджетом.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА НДФЛРасчетыСБюджетом.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК Начислено,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДФЛРасчетыСБюджетом.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
		|					ТОГДА НДФЛРасчетыСБюджетом.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК Зачтено,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода КАК ДатаПолученияДохода,
		|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
		|ИЗ
		|	ВТСтрокиНалогов КАК НДФЛРасчетыСБюджетом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО НДФЛРасчетыСБюджетом.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
		|			И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И НДФЛРасчетыСБюджетом.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛРасчетыСБюджетом.ФизическоеЛицо,
		|	НДФЛРасчетыСБюджетом.ПериодРегистрации,
		|	НДФЛРасчетыСБюджетом.Регистратор,
		|	НДФЛРасчетыСБюджетом.Подразделение,
		|	НДФЛРасчетыСБюджетом.РегистрацияВНалоговомОргане,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ,
		|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
		|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	СтавкаНалогообложенияРезидента,
		|	Ставка,
		|	ПериодРегистрации,
		|	РегистрацияВНалоговомОргане,
		|	Подразделение,
		|	ДатаПолученияДохода,
		|	Регистратор";
		
	Иначе
		
		Если УчитыватьПереездВДругуюИФНС Тогда
			
			СформироватьВТФизическиеЛицаСУчетомПереездаВИнойНО(КППОтправки, Запрос.МенеджерВременныхТаблиц, "ВТДоходы", "КонецГода");
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Доходы.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТЛишниеФизическиеЛица
			|ИЗ
			|	ВТФизлица КАК Доходы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСУчетомПереездаВИнойНО КАК ФизическиеЛицаСУчетомПереездаВИнойНО
			|		ПО Доходы.ФизическоеЛицо = ФизическиеЛицаСУчетомПереездаВИнойНО.ФизическоеЛицо
			|ГДЕ
			|	ФизическиеЛицаСУчетомПереездаВИнойНО.ФизическоеЛицо ЕСТЬ NULL ";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТЛишниеФизическиеЛица";
			
		КонецЕсли;
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доходы.Месяц КАК Месяц,
		|	Доходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Доходы.КодДохода КАК КодДохода,
		|	Доходы.КатегорияДохода КАК КатегорияДохода,
		|	Доходы.КодДоходаКодДляОтчетности КАК КодДоходаКодДляОтчетности,
		|	Доходы.КодДоходаСтавкаНалогообложенияРезидента КАК КодДоходаСтавкаНалогообложенияРезидента,
		|	Доходы.СуммаДохода КАК СуммаДохода,
		|	Доходы.СуммаВычета КАК СуммаВычета,
		|	Доходы.КодВычета КАК КодВычета,
		|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	Доходы.Регистратор КАК Регистратор,
		|	Доходы.ДатаПолученияДохода КАК ДатаПолученияДохода
		|ПОМЕСТИТЬ ВТДоходыОбъектаОбложения
		|ИЗ
		|	ВТДоходы КАК Доходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО Доходы.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И Доходы.КодДоходаСтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
		|			И Доходы.ДатаПолученияДохода = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И Доходы.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|ГДЕ
		|	(НЕ Доходы.ИсточникДоходаЗаПределамиРФ
		|			ИЛИ СтавкаНДФЛПоСтавкеРезидента.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоходыИВычеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ДоходыИВычеты.ОбщаяСуммаДохода) КАК ОбщаяСуммаДохода,
		|	СУММА(ДоходыИВычеты.ОблагаемаяСуммаДохода) КАК ОблагаемаяСуммаДохода,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
		|	ДоходыИВычеты.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|ПОМЕСТИТЬ ВТИтогиДоходов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Доходы.ДатаПолученияДохода КАК Период,
		|		Доходы.СуммаДохода КАК ОбщаяСуммаДохода,
		|		Доходы.СуммаДохода - Доходы.СуммаВычета КАК ОблагаемаяСуммаДохода,
		|		Доходы.КодДоходаСтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|		Доходы.КатегорияДохода КАК КатегорияДохода,
		|		Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|		Доходы.ФизическоеЛицо КАК ФизическоеЛицо
		|	ИЗ
		|		ВТДоходыОбъектаОбложения КАК Доходы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Вычеты.МесяцНалоговогоПериода,
		|		0,
		|		-Вычеты.СуммаВычета,
		|		ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13),
		|		ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТруда),
		|		Вычеты.ВключатьВДекларациюПоНалогуНаПрибыль,
		|		Вычеты.ФизическоеЛицо
		|	ИЗ
		|		ВТВычеты КАК Вычеты) КАК ДоходыИВычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО ДоходыИВычеты.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И ДоходыИВычеты.СтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
		|			И ДоходыИВычеты.Период = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И ДоходыИВычеты.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоходыИВычеты.ФизическоеЛицо,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ,
		|	ДоходыИВычеты.ВключатьВДекларациюПоНалогуНаПрибыль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛРасчетыСБюджетом.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						И (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|					ТОГДА НДФЛРасчетыСБюджетом.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК НачисленоЗаТекущийГод,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДФЛРасчетыСБюджетом.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
		|						И (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|					ТОГДА НДФЛРасчетыСБюджетом.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗачтеноАвансовыхПлатежейЗаТекущийГод,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА (НДФЛРасчетыСБюджетом.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
		|						ИЛИ НДФЛРасчетыСБюджетом.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ВозвращеноНалоговымАгентом))
		|						И (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|					ТОГДА НДФЛРасчетыСБюджетом.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК УдержаноЗаТекущийГод,
		|	0 КАК ВозвращеноЗаТекущийГод,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДФЛРасчетыСБюджетом.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ПереданоНаВзысканиеВНалоговыйОрган)
		|						И (НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &НачалоНП И &КонецНП)
		|					ТОГДА НДФЛРасчетыСБюджетом.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ПереданоНаВзысканиеЗаТекущийГод,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка
		|ПОМЕСТИТЬ ВТНалоги
		|ИЗ
		|	ВТСтрокиНалогов КАК НДФЛРасчетыСБюджетом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО НДФЛРасчетыСБюджетом.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
		|			И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И НДФЛРасчетыСБюджетом.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛРасчетыСБюджетом.ФизическоеЛицо,
		|	НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
		|	КОНЕЦПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	НДФЛРасчетыСБюджетом.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НДФЛРасчетыСБюджетом.Сумма) КАК Налог,
		|	ВЫБОР
		|		КОГДА НДФЛРасчетыСБюджетом.КодДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код1010)
		|			ТОГДА НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|ПОМЕСТИТЬ ВТУдержаноНДФЛПо13или30ПоМесяцам
		|ИЗ
		|	ВТСтрокиНалогов КАК НДФЛРасчетыСБюджетом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО НДФЛРасчетыСБюджетом.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
		|			И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И НДФЛРасчетыСБюджетом.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛБезУчетаИзмененияСтатуса КАК СтавкаНДФЛБезУчетаИзмененияСтатуса
		|		ПО НДФЛРасчетыСБюджетом.ФизическоеЛицо = СтавкаНДФЛБезУчетаИзмененияСтатуса.ФизическоеЛицо
		|			И НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента = СтавкаНДФЛБезУчетаИзмененияСтатуса.СтавкаНалогообложенияРезидента
		|			И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода = СтавкаНДФЛБезУчетаИзмененияСтатуса.Период
		|			И НДФЛРасчетыСБюджетом.КатегорияДохода = СтавкаНДФЛБезУчетаИзмененияСтатуса.КатегорияДохода
		|ГДЕ
		|	НДФЛРасчетыСБюджетом.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
		|	И НДФЛРасчетыСБюджетом.ФизическоеЛицо ЕСТЬ НЕ NULL 
		|	И НДФЛРасчетыСБюджетом.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|	И СтавкаНДФЛБезУчетаИзмененияСтатуса.СтавкаНДФЛ В (ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13), ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30))
		|
		|СГРУППИРОВАТЬ ПО
		|	КОНЕЦПЕРИОДА(НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
		|	НДФЛРасчетыСБюджетом.ФизическоеЛицо,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ,
		|	ВЫБОР
		|		КОГДА НДФЛРасчетыСБюджетом.КодДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код1010)
		|			ТОГДА НДФЛРасчетыСБюджетом.ВключатьВДекларациюПоНалогуНаПрибыль
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК СтавкаПоСтатусу,
		|	ЕСТЬNULL(УдержаноНДФЛПоСтавке30.Налог, 0) КАК УдержаноНДФЛПоСтавке30,
		|	ЕСТЬNULL(УдержаноНДФЛПоСтавке13.Налог, 0) КАК УдержаноНДФЛПоСтавке13,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.СуммаРасход КАК СуммаРасход,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|ПОМЕСТИТЬ ВТПеречисленоПоСтавке13_30
		|ИЗ
		|	ВТПеречисленоНДФЛПоМесяцам КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержаноНДФЛПо13или30ПоМесяцам КАК УдержаноНДФЛПоСтавке13
		|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо = УдержаноНДФЛПоСтавке13.ФизическоеЛицо
		|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.МесяцНалоговогоПериода = УдержаноНДФЛПоСтавке13.МесяцНалоговогоПериода
		|			И (УдержаноНДФЛПоСтавке13.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13))
		|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль = УдержаноНДФЛПоСтавке13.ВключатьВДекларациюПоНалогуНаПрибыль
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержаноНДФЛПо13или30ПоМесяцам КАК УдержаноНДФЛПоСтавке30
		|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо = УдержаноНДФЛПоСтавке30.ФизическоеЛицо
		|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.МесяцНалоговогоПериода = УдержаноНДФЛПоСтавке30.МесяцНалоговогоПериода
		|			И (УдержаноНДФЛПоСтавке30.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30))
		|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль = УдержаноНДФЛПоСтавке30.ВключатьВДекларациюПоНалогуНаПрибыль
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.МесяцНалоговогоПериода = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|			И (ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента)
		|ГДЕ
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.Ставка В (ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30), ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13))
		|	И НЕ РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ИсчисленоПоДивидендам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Перечислено.Ставка КАК Ставка,
		|	СУММА(Перечислено.Сумма) КАК Сумма,
		|	Перечислено.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Перечислено.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|ПОМЕСТИТЬ ВТПеречисленоНДФЛ
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.Ставка КАК Ставка,
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.СуммаРасход КАК Сумма,
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|	ИЗ
		|		ВТПеречисленоНДФЛПоМесяцам КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты
		|	ГДЕ
		|		НЕ РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.Ставка В (ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30), ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13))
		|		И НЕ РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ИсчисленоПоДивидендам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.Дивиденды)
		|				ТОГДА СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
		|			ИНАЧЕ РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.Ставка
		|		КОНЕЦ,
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо,
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.СуммаРасход,
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ВключатьВДекларациюПоНалогуНаПрибыль
		|	ИЗ
		|		ВТПеречисленоНДФЛПоМесяцам КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|			ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|				И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.МесяцНалоговогоПериода = СтавкаНДФЛПоСтавкеРезидента.Период
		|				И (ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09) = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента)
		|				И РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|	ГДЕ
		|		РасчетыНалоговыхАгентовСБюджетомПоНДФЛОбороты.ИсчисленоПоДивидендам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30),
		|		ПеречисленоПоСтавке13_30.ФизическоеЛицо,
		|		ВЫБОР
		|			КОГДА ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 + ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке13 = 0
		|				ТОГДА 0
		|			КОГДА ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке13 = 0
		|				ТОГДА ПеречисленоПоСтавке13_30.СуммаРасход
		|			ИНАЧЕ ВЫРАЗИТЬ(ПеречисленоПоСтавке13_30.СуммаРасход * ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 / (ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 + ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке13) КАК ЧИСЛО(22, 0))
		|		КОНЕЦ,
		|		ПеречисленоПоСтавке13_30.ВключатьВДекларациюПоНалогуНаПрибыль
		|	ИЗ
		|		ВТПеречисленоПоСтавке13_30 КАК ПеречисленоПоСтавке13_30
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13),
		|		ПеречисленоПоСтавке13_30.ФизическоеЛицо,
		|		ВЫБОР
		|			КОГДА ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 + ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке13 = 0
		|				ТОГДА 0
		|			КОГДА ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 = 0
		|				ТОГДА ПеречисленоПоСтавке13_30.СуммаРасход
		|			ИНАЧЕ ПеречисленоПоСтавке13_30.СуммаРасход - (ВЫРАЗИТЬ(ПеречисленоПоСтавке13_30.СуммаРасход * ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 / (ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 + ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке13) КАК ЧИСЛО(22, 0)))
		|		КОНЕЦ,
		|		ПеречисленоПоСтавке13_30.ВключатьВДекларациюПоНалогуНаПрибыль
		|	ИЗ
		|		ВТПеречисленоПоСтавке13_30 КАК ПеречисленоПоСтавке13_30
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПеречисленоПоСтавке13_30.СтавкаПоСтатусу,
		|		ПеречисленоПоСтавке13_30.ФизическоеЛицо,
		|		ВЫБОР
		|			КОГДА ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке30 + ПеречисленоПоСтавке13_30.УдержаноНДФЛПоСтавке13 = 0
		|				ТОГДА ПеречисленоПоСтавке13_30.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ПеречисленоПоСтавке13_30.ВключатьВДекларациюПоНалогуНаПрибыль
		|	ИЗ
		|		ВТПеречисленоПоСтавке13_30 КАК ПеречисленоПоСтавке13_30) КАК Перечислено
		|
		|СГРУППИРОВАТЬ ПО
		|	Перечислено.Ставка,
		|	Перечислено.ФизическоеЛицо,
		|	Перечислено.ВключатьВДекларациюПоНалогуНаПрибыль
		|
		|ИМЕЮЩИЕ
		|	СУММА(Перечислено.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Месяц КАК Месяц,
		|	Доходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ КАК Ставка,
		|	Доходы.КодДохода КАК КодДохода,
		|	Доходы.КодДоходаКодДляОтчетности КАК КодДоходаКодДляОтчетности,
		|	Доходы.КодДоходаСтавкаНалогообложенияРезидента КАК КодДоходаСтавкаНалогообложенияРезидента,
		|	Доходы.КодВычета КАК КодВычета,
		|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
		|	СУММА(Доходы.СуммаВычета) КАК СуммаВычета,
		|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТДоходыПоМесяцам
		|ИЗ
		|	ВТДоходыОбъектаОбложения КАК Доходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
		|		ПО Доходы.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
		|			И Доходы.КодДоходаСтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
		|			И Доходы.ДатаПолученияДохода = СтавкаНДФЛПоСтавкеРезидента.Период
		|			И Доходы.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
		|ГДЕ
		|	Доходы.Месяц ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.Месяц,
		|	Доходы.МесяцНалоговогоПериода,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ,
		|	Доходы.КодДохода,
		|	Доходы.КодДоходаКодДляОтчетности,
		|	Доходы.КодДоходаСтавкаНалогообложенияРезидента,
		|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	Доходы.ФизическоеЛицо,
		|	Доходы.КодВычета
		|
		|ИМЕЮЩИЕ
		|	(СУММА(Доходы.СуммаДохода) <> 0
		|		ИЛИ СУММА(Доходы.СуммаВычета) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Доходы.КодДохода КАК КодДохода,
		|	Доходы.Месяц КАК Месяц,
		|	Доходы.Ставка КАК Ставка
		|ПОМЕСТИТЬ ВТОсобыеМесяцы
		|ИЗ
		|	ВТДоходыПоМесяцам КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.ФизическоеЛицо,
		|	Доходы.КодДохода,
		|	Доходы.Месяц,
		|	Доходы.Ставка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) = 2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МесяцыОсобыхВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МесяцыОсобыхВычетов.КодДохода КАК КодДохода,
		|	МесяцыОсобыхВычетов.Месяц КАК Месяц,
		|	МАКСИМУМ(Доходы.КодВычета) КАК КодВычета,
		|	МесяцыОсобыхВычетов.Ставка КАК Ставка
		|ПОМЕСТИТЬ ВТСтрокиСУказаннымВычетом
		|ИЗ
		|	ВТОсобыеМесяцы КАК МесяцыОсобыхВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцам КАК Доходы
		|		ПО МесяцыОсобыхВычетов.ФизическоеЛицо = Доходы.ФизическоеЛицо
		|			И МесяцыОсобыхВычетов.КодДохода = Доходы.КодДохода
		|			И МесяцыОсобыхВычетов.Месяц = Доходы.Месяц
		|			И МесяцыОсобыхВычетов.Ставка = Доходы.Ставка
		|ГДЕ
		|	Доходы.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	МесяцыОсобыхВычетов.ФизическоеЛицо,
		|	МесяцыОсобыхВычетов.КодДохода,
		|	МесяцыОсобыхВычетов.Месяц,
		|	МесяцыОсобыхВычетов.Ставка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МесяцыОсобыхВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МесяцыОсобыхВычетов.КодДохода КАК КодДохода,
		|	МесяцыОсобыхВычетов.Месяц КАК Месяц,
		|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
		|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	МесяцыОсобыхВычетов.Ставка КАК Ставка
		|ПОМЕСТИТЬ ВТДоходыИзСтрокБезВычетов
		|ИЗ
		|	ВТОсобыеМесяцы КАК МесяцыОсобыхВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцам КАК Доходы
		|		ПО МесяцыОсобыхВычетов.ФизическоеЛицо = Доходы.ФизическоеЛицо
		|			И МесяцыОсобыхВычетов.КодДохода = Доходы.КодДохода
		|			И МесяцыОсобыхВычетов.Месяц = Доходы.Месяц
		|			И МесяцыОсобыхВычетов.Ставка = Доходы.Ставка
		|ГДЕ
		|	Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	МесяцыОсобыхВычетов.ФизическоеЛицо,
		|	МесяцыОсобыхВычетов.КодДохода,
		|	МесяцыОсобыхВычетов.Месяц,
		|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	МесяцыОсобыхВычетов.Ставка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Доходы.Месяц КАК МесяцНалоговогоПериода,
		|	Доходы.Ставка КАК Ставка,
		|	Доходы.КодДохода КАК КодДохода,
		|	Доходы.КодДоходаКодДляОтчетности КАК КодДоходаКодДляОтчетности,
		|	Доходы.КодВычета КАК КодВычета,
		|	Доходы.СуммаДохода + ВЫБОР
		|		КОГДА СтрокиСУказаннымВычетом.ФизическоеЛицо ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ДоходыИзСтрокБезВычетов.СуммаДохода, 0)
		|	КОНЕЦ КАК СуммаДохода,
		|	Доходы.СуммаВычета КАК СуммаВычета,
		|	Доходы.ФизическоеЛицо КАК Сотрудник,
		|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|ИЗ
		|	ВТДоходыПоМесяцам КАК Доходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛишниеФизическиеЛица КАК ЛишниеФизическиеЛица
		|		ПО Доходы.ФизическоеЛицо = ЛишниеФизическиеЛица.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсобыеМесяцы КАК СтрокиБезКодаВычета
		|		ПО Доходы.ФизическоеЛицо = СтрокиБезКодаВычета.ФизическоеЛицо
		|			И Доходы.КодДохода = СтрокиБезКодаВычета.КодДохода
		|			И Доходы.Месяц = СтрокиБезКодаВычета.Месяц
		|			И (Доходы.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка))
		|			И Доходы.Ставка = СтрокиБезКодаВычета.Ставка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыИзСтрокБезВычетов КАК ДоходыИзСтрокБезВычетов
		|		ПО Доходы.ФизическоеЛицо = ДоходыИзСтрокБезВычетов.ФизическоеЛицо
		|			И Доходы.Месяц = ДоходыИзСтрокБезВычетов.Месяц
		|			И Доходы.КодДохода = ДоходыИзСтрокБезВычетов.КодДохода
		|			И Доходы.ВключатьВДекларациюПоНалогуНаПрибыль = ДоходыИзСтрокБезВычетов.ВключатьВДекларациюПоНалогуНаПрибыль
		|			И Доходы.Ставка = ДоходыИзСтрокБезВычетов.Ставка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиСУказаннымВычетом КАК СтрокиСУказаннымВычетом
		|		ПО Доходы.ФизическоеЛицо = СтрокиСУказаннымВычетом.ФизическоеЛицо
		|			И Доходы.Месяц = СтрокиСУказаннымВычетом.Месяц
		|			И Доходы.КодДохода = СтрокиСУказаннымВычетом.КодДохода
		|			И Доходы.КодВычета = СтрокиСУказаннымВычетом.КодВычета
		|			И Доходы.Ставка = СтрокиСУказаннымВычетом.Ставка
		|ГДЕ
		|	ЛишниеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
		|	И СтрокиБезКодаВычета.ФизическоеЛицо ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ставка,
		|	МесяцНалоговогоПериода,
		|	Доходы.КодДоходаКодДляОтчетности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вычеты.КодВычета КАК КодВычета,
		|	Вычеты.КодВычетаГруппаВычета КАК ГруппаВычета,
		|	СУММА(Вычеты.СуммаВычета) КАК СуммаВычета,
		|	Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2011Года + Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2010Года КАК КодВычетаКод,
		|	Вычеты.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	Вычеты.ФизическоеЛицо КАК Сотрудник
		|ИЗ
		|	ВТВычеты КАК Вычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛишниеФизическиеЛица КАК ЛишниеФизическиеЛица
		|		ПО Вычеты.ФизическоеЛицо = ЛишниеФизическиеЛица.ФизическоеЛицо
		|ГДЕ
		|	ЛишниеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
		|	И Вычеты.КодВычета ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Вычеты.КодВычета,
		|	Вычеты.КодВычетаГруппаВычета,
		|	Вычеты.ФизическоеЛицо,
		|	Вычеты.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2011Года + Вычеты.КодВычета.КодПрименяемыйВНалоговойОтчетностиС2010Года
		|
		|ИМЕЮЩИЕ
		|	СУММА(Вычеты.СуммаВычета) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодВычетаКод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизаций.ФизическоеЛицо КАК Сотрудник,
		|	ЕСТЬNULL(Ставки.Ссылка, ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)) КАК Ставка,
		|	ИтогиДоходов.ОбщаяСуммаДохода КАК ОбщаяСуммаДохода,
		|	ИтогиДоходов.ОблагаемаяСуммаДохода КАК ОблагаемаяСуммаДохода,
		|	Налоги.НачисленоЗаТекущийГод КАК Исчислено,
		|	Налоги.ЗачтеноАвансовыхПлатежейЗаТекущийГод КАК ЗачтеноАвансовыхПлатежей,
		|	Налоги.УдержаноЗаТекущийГод - Налоги.ВозвращеноЗаТекущийГод КАК Удержано,
		|	ЕСТЬNULL(ПеречисленоНДФЛ.Сумма, 0) КАК Перечислено,
		|	ВЫБОР
		|		КОГДА Налоги.НачисленоЗаТекущийГод - Налоги.ЗачтеноАвансовыхПлатежейЗаТекущийГод - Налоги.УдержаноЗаТекущийГод + Налоги.ВозвращеноЗаТекущийГод > 0
		|			ТОГДА Налоги.НачисленоЗаТекущийГод - Налоги.ЗачтеноАвансовыхПлатежейЗаТекущийГод - Налоги.УдержаноЗаТекущийГод + Налоги.ВозвращеноЗаТекущийГод
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Задолженность,
		|	ВЫБОР
		|		КОГДА Налоги.НачисленоЗаТекущийГод - Налоги.ЗачтеноАвансовыхПлатежейЗаТекущийГод - Налоги.УдержаноЗаТекущийГод + Налоги.ВозвращеноЗаТекущийГод < 0
		|			ТОГДА -(Налоги.НачисленоЗаТекущийГод - Налоги.ЗачтеноАвансовыхПлатежейЗаТекущийГод - Налоги.УдержаноЗаТекущийГод + Налоги.ВозвращеноЗаТекущийГод)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИзлишнеУдержано,
		|	НалогНаПрибыль.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|ИЗ
		|	ВТФизлица КАК СотрудникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛишниеФизическиеЛица КАК ЛишниеФизическиеЛица
		|		ПО СотрудникиОрганизаций.ФизическоеЛицо = ЛишниеФизическиеЛица.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.НДФЛСтавки КАК Ставки
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ИСТИНА КАК ВключатьВДекларациюПоНалогуНаПрибыль
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЛОЖЬ) КАК НалогНаПрибыль
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтогиДоходов КАК ИтогиДоходов
		|		ПО СотрудникиОрганизаций.ФизическоеЛицо = ИтогиДоходов.ФизическоеЛицо
		|			И (ЕСТЬNULL(Ставки.Ссылка, ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)) = ИтогиДоходов.Ставка)
		|			И (НалогНаПрибыль.ВключатьВДекларациюПоНалогуНаПрибыль = ИтогиДоходов.ВключатьВДекларациюПоНалогуНаПрибыль)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНалоги КАК Налоги
		|		ПО СотрудникиОрганизаций.ФизическоеЛицо = Налоги.ФизическоеЛицо
		|			И (ЕСТЬNULL(Ставки.Ссылка, ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)) = Налоги.Ставка)
		|			И (НалогНаПрибыль.ВключатьВДекларациюПоНалогуНаПрибыль = Налоги.ВключатьВДекларациюПоНалогуНаПрибыль)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеречисленоНДФЛ КАК ПеречисленоНДФЛ
		|		ПО СотрудникиОрганизаций.ФизическоеЛицо = ПеречисленоНДФЛ.ФизическоеЛицо
		|			И (ЕСТЬNULL(Ставки.Ссылка, ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)) = ПеречисленоНДФЛ.Ставка)
		|			И (НалогНаПрибыль.ВключатьВДекларациюПоНалогуНаПрибыль = ПеречисленоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль)
		|ГДЕ
		|	ЛишниеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL
		|	И (ИтогиДоходов.ФизическоеЛицо ЕСТЬ НЕ NULL 
		|				И (ИтогиДоходов.ОбщаяСуммаДохода <> 0
		|					ИЛИ ИтогиДоходов.ОблагаемаяСуммаДохода <> 0)
		|			ИЛИ Налоги.ФизическоеЛицо ЕСТЬ НЕ NULL 
		|				И (Налоги.НачисленоЗаТекущийГод <> 0
		|					ИЛИ Налоги.НачисленоЗаТекущийГод - Налоги.ЗачтеноАвансовыхПлатежейЗаТекущийГод - Налоги.УдержаноЗаТекущийГод + Налоги.ВозвращеноЗаТекущийГод <> 0)
		|			ИЛИ ЕСТЬNULL(ПеречисленоНДФЛ.Сумма, 0) <> 0)";		
		
	КонецЕсли;
	
	Результаты = Запрос.ВыполнитьПакет();
	ВсегоЗапросов = Результаты.Количество();
	
	Возврат Новый Структура("Доходы, Вычеты, Налоги", 
						Результаты[ВсегоЗапросов - 3].Выгрузить(), 
						Результаты[ВсегоЗапросов - 2].Выгрузить(), 
						Результаты[ВсегоЗапросов - 1].Выгрузить());
КонецФункции

Функция СправкиНДФЛДанныеДляПечати(МассивОбъектов, ПолучатьИтоговыеСуммы = Ложь) Экспорт
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		ИсточникДанных = МассивОбъектов[0].Метаданные().ПолноеИмя();
	    ЭтоСправкаДляНалоговогоОргана = (ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган"));
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Если ПолучатьИтоговыеСуммы Тогда  // Требуется только для печати Реестра справок.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСправки) КАК НомерСправки,
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТКоличествоСправок
		|ИЗ
		|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке13) КАК ОбщаяСуммаДоходаПоСтавке13,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке13) КАК ИсчисленоПоСтавке13,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке13) КАК УдержаноПоСтавке13,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке13) КАК ПеречисленоПоСтавке13,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке30) КАК ОбщаяСуммаДоходаПоСтавке30,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке30) КАК ИсчисленоПоСтавке30,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке30) КАК УдержаноПоСтавке30,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке30) КАК ПеречисленоПоСтавке30,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке9) КАК ОбщаяСуммаДоходаПоСтавке9,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке9) КАК ИсчисленоПоСтавке9,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке9) КАК УдержаноПоСтавке9,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке9) КАК ПеречисленоПоСтавке9,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке15) КАК ОбщаяСуммаДоходаПоСтавке15,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке15) КАК ИсчисленоПоСтавке15,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке15) КАК УдержаноПоСтавке15,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке15) КАК ПеречисленоПоСтавке15,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке35) КАК ОбщаяСуммаДоходаПоСтавке35,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке35) КАК ИсчисленоПоСтавке35,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке35) КАК УдержаноПоСтавке35,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке35) КАК ПеречисленоПоСтавке35,
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка КАК Ссылка,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке5) КАК ОбщаяСуммаДоходаПоСтавке5,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке5) КАК ИсчисленоПоСтавке5,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке5) КАК УдержаноПоСтавке5,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке5) КАК ПеречисленоПоСтавке5,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке10) КАК ОбщаяСуммаДоходаПоСтавке10,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке10) КАК ИсчисленоПоСтавке10,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке10) КАК УдержаноПоСтавке10,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке10) КАК ПеречисленоПоСтавке10,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке3) КАК ОбщаяСуммаДоходаПоСтавке3,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке3) КАК ИсчисленоПоСтавке3,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке3) КАК УдержаноПоСтавке3,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке3) КАК ПеречисленоПоСтавке3,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке6) КАК ОбщаяСуммаДоходаПоСтавке6,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке6) КАК ИсчисленоПоСтавке6,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке6) КАК УдержаноПоСтавке6,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке6) КАК ПеречисленоПоСтавке6,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке7) КАК ОбщаяСуммаДоходаПоСтавке7,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке7) КАК ИсчисленоПоСтавке7,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке7) КАК УдержаноПоСтавке7,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке7) КАК ПеречисленоПоСтавке7,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ОбщаяСуммаДоходаПоСтавке12) КАК ОбщаяСуммаДоходаПоСтавке12,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИсчисленоПоСтавке12) КАК ИсчисленоПоСтавке12,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.УдержаноПоСтавке12) КАК УдержаноПоСтавке12,
		|	СУММА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ПеречисленоПоСтавке12) КАК ПеречисленоПоСтавке12
		|ПОМЕСТИТЬ ВТСуммыНалогов
		|ИЗ
		|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
		|ГДЕ
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.НалоговыйПериод КАК НалоговыйПериод,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКАТО КАК ОКАТО,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КПП КАК КПП,
		|	ДанныеДокумента.КодИФНС КАК КодНалоговогоОргана,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Телефон КАК Телефон,
		|	ДанныеДокумента.ДолжностьПодписавшегоЛица КАК ДолжностьПодписавшегоЛица,
		|	ДанныеДокумента.СправкуПодписал КАК СправкуПодписал,
		|	ДанныеДокумента.ОснованиеДляПредставленияСправок КАК ОснованиеДляПредставленияСправок,
		|	ДанныеДокумента.Номер КАК Номер,
		|	&ИдентификаторФайла КАК ИдентификаторФайла,
		|	&НомерКорректировки КАК НомерКорректировки,
		|	Организации.ИНН КАК ИНН,
		|	Организации.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	Организации.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
		|	Организации.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОрганаПолучателя,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.МоментВремени КАК МоментВремени,
		|	ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке13, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке30, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке9, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке15, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке35, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке3, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке5, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке6, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке7, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке10, 0) + ЕСТЬNULL(ДанныеОНалогах.ОбщаяСуммаДоходаПоСтавке12, 0) КАК ОбщаяСуммаДохода,
		|	ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке13, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке30, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке9, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке15, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке35, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке3, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке5, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке6, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке7, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке10, 0) + ЕСТЬNULL(ДанныеОНалогах.ИсчисленоПоСтавке12, 0) КАК Исчислено,
		|	ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке13, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке30, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке9, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке15, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке35, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке3, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке5, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке6, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке7, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке10, 0) + ЕСТЬNULL(ДанныеОНалогах.УдержаноПоСтавке12, 0) КАК Удержано,
		|	ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке13, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке30, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке9, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке15, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке35, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке3, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке5, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке6, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке7, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке10, 0) + ЕСТЬNULL(ДанныеОНалогах.ПеречисленоПоСтавке12, 0) КАК Перечислено,
		|	КоличествоСправок.НомерСправки КАК КоличествоСправок,
		|	ДанныеДокумента.ФормаРеорганизации КАК ФормаРеорганизации,
		|	ДанныеДокумента.ИННРеорганизованнойОрганизации КАК ИННРеорганизованнойОрганизации,
		|	ДанныеДокумента.КППРеорганизованнойОрганизации КАК КППРеорганизованнойОрганизации,
		|	ДанныеДокумента.НаименованиеРеорганизованнойОрганизации КАК НаименованиеРеорганизованнойОрганизации,
		|	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКТМО КАК ОКТМО,
		|	ДанныеДокумента.СпециальныйДокумент2013года КАК СпециальныйДокумент2013года
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	#ИсточникДанных КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДанныеДокумента.Организация = Организации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСправок КАК КоличествоСправок
		|		ПО ДанныеДокумента.Ссылка = КоличествоСправок.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыНалогов КАК ДанныеОНалогах
		|		ПО ДанныеДокумента.Ссылка = ДанныеОНалогах.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка В(&МассивОбъектов)";
	Иначе
	   Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	ДанныеДокумента.Организация,
	   |	ДанныеДокумента.НалоговыйПериод,
	   |	ДанныеДокумента.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	   |	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКАТО КАК ОКАТО,
	   |	ДанныеДокумента.РегистрацияВНалоговомОргане.КПП КАК КПП,
	   |	ДанныеДокумента.КодИФНС КАК КодНалоговогоОргана,
	   |	ДанныеДокумента.Дата,
	   |	ДанныеДокумента.Телефон,
	   |	ДанныеДокумента.ДолжностьПодписавшегоЛица,
	   |	ДанныеДокумента.СправкуПодписал,
	   |	&ОснованиеДляПредставленияСправок,
	   |	Организации.ИНН,
	   |	Организации.ЮридическоеФизическоеЛицо,
	   |	Организации.НаименованиеПолное,
	   |	Организации.НаименованиеСокращенное,
	   |	Организации.ИндивидуальныйПредприниматель,
	   |	Организации.КодНалоговогоОрганаПолучателя,
	   |	ДанныеДокумента.Ссылка,
	   |	ДанныеДокумента.МоментВремени,
	   |	ДанныеДокумента.Номер,
	   |	&ИдентификаторФайла КАК ИдентификаторФайла,
	   |	&НомерКорректировки КАК НомерКорректировки,
	   |	&ФормаРеорганизации КАК ФормаРеорганизации,
	   |	&ИННРеорганизованнойОрганизации КАК ИННРеорганизованнойОрганизации,
	   |	&КППРеорганизованнойОрганизации КАК КППРеорганизованнойОрганизации,
	   |	&НаименованиеРеорганизованнойОрганизации КАК НаименованиеРеорганизованнойОрганизации,
	   |	0 КАК ОбщаяСуммаДохода,
	   |	0 КАК Исчислено,
	   |	0 КАК Удержано,
	   |	0 КАК Перечислено,
	   |	0 КАК КоличествоСправок,
	   |	ДанныеДокумента.РегистрацияВНалоговомОргане.КодПоОКТМО КАК ОКТМО,
	   |	ДанныеДокумента.СпециальныйДокумент2013года
	   |ПОМЕСТИТЬ ВТДанныеДокументов
	   |ИЗ
	   |	#ИсточникДанных КАК ДанныеДокумента
	   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	   |		ПО ДанныеДокумента.Организация = Организации.Ссылка
	   |ГДЕ
	   |	ДанныеДокумента.Ссылка В(&МассивОбъектов)";
	КонецЕсли;   
	        				   	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ИсточникДанных);
	Если ЭтоСправкаДляНалоговогоОргана Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторФайла", "ДанныеДокумента.ИдентификаторФайла"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерКорректировки", "ДанныеДокумента.НомерКорректировки"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФормаРеорганизации", "ДанныеДокумента.ФормаРеорганизации"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КППРеорганизованнойОрганизации", "ДанныеДокумента.КППРеорганизованнойОрганизации"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИННРеорганизованнойОрганизации", "ДанныеДокумента.ИННРеорганизованнойОрганизации"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НаименованиеРеорганизованнойОрганизации", "ДанныеДокумента.НаименованиеРеорганизованнойОрганизации"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОснованиеДляПредставленияСправок", "ДанныеДокумента.ОснованиеДляПредставленияСправок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.РегистрацияВНалоговомОргане.КПП", "ДанныеДокумента.КППОтправки");
	Иначе	
		Запрос.УстановитьПараметр("ИдентификаторФайла", Строка(Новый УникальныйИдентификатор));
		Запрос.УстановитьПараметр("НомерКорректировки",0);
		Запрос.УстановитьПараметр("ФормаРеорганизации","");
		Запрос.УстановитьПараметр("ИННРеорганизованнойОрганизации","");
		Запрос.УстановитьПараметр("КППРеорганизованнойОрганизации","");
		Запрос.УстановитьПараметр("НаименованиеРеорганизованнойОрганизации","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОснованиеДляПредставленияСправок", "ДанныеДокумента.СпособФормирования");
	КонецЕсли;			   
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("СправкуПодписал");
	ИменаПолейОтветственныхЛиц.Добавить("ИндивидуальныйПредприниматель");

	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов"); 	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.НалоговыйПериод КАК НалоговыйПериод,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.Телефон КАК Телефон,
	|	ДанныеДокументов.ДолжностьПодписавшегоЛица КАК ДолжностьПодписавшегоЛица,
	|	ДанныеДокументов.СправкуПодписал КАК СправкуПодписал,
	|	ДанныеДокументов.НомерКорректировки КАК НомерКорректировки,
	|	ДанныеДокументов.ОснованиеДляПредставленияСправок КАК ОснованиеДляПредставленияСправок,
	|	ДанныеДокументов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.КодНалоговогоОргана КАК КодНалоговогоОргана,
	|	ДанныеДокументов.КодНалоговогоОрганаПолучателя КАК КодНалоговогоОрганаПолучателя,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ДанныеДокументов.ФормаРеорганизации КАК ФормаРеорганизации,
	|	ДанныеДокументов.ИННРеорганизованнойОрганизации КАК ИННРеорганизованнойОрганизации,
	|	ДанныеДокументов.КППРеорганизованнойОрганизации КАК КППРеорганизованнойОрганизации,
	|	ДанныеДокументов.НаименованиеРеорганизованнойОрганизации КАК НаименованиеРеорганизованнойОрганизации,
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ЕСТЬNULL(ФИОИндивидуальныхПредпринимателей.Фамилия, """") КАК ФамилияИП,
	|	ЕСТЬNULL(ФИОИндивидуальныхПредпринимателей.Имя, """") КАК ИмяИП,
	|	ЕСТЬNULL(ФИОИндивидуальныхПредпринимателей.Отчество, """") КАК ОтчествоИП,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.НалоговыйПериод < 2015
	|			ТОГДА ЕСТЬNULL(ФИООтветственныхЛиц.РасшифровкаПодписи, """")
	|		ИНАЧЕ ЕСТЬNULL(ФИООтветственныхЛиц.ФИОПолные, """")
	|	КОНЕЦ КАК ФИОПодписавшего,
	|	ЕСТЬNULL(Должности.Наименование, """") КАК Должность,
	|	ДанныеДокументов.ОКАТО КАК ОКАТО,
	|	ДанныеДокументов.ОКТМО КАК ОКТМО,
	|	ДанныеДокументов.ОбщаяСуммаДохода КАК ОбщаяСуммаДохода,
	|	ДанныеДокументов.Исчислено КАК Исчислено,
	|	ДанныеДокументов.Удержано КАК Удержано,
	|	ДанныеДокументов.Перечислено КАК Перечислено,
	|	ДанныеДокументов.КоличествоСправок КАК КоличествоСправок,
	|	ДанныеДокументов.СпециальныйДокумент2013года КАК СпециальныйДокумент2013года,
	|	ДанныеДокументов.ИдентификаторФайла КАК ИдентификаторФайла
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИндивидуальныхПредпринимателей
	|		ПО ДанныеДокументов.ИндивидуальныйПредприниматель = ФИОИндивидуальныхПредпринимателей.ФизическоеЛицо
	|			И ДанныеДокументов.Ссылка = ФИОИндивидуальныхПредпринимателей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
	|			И ДанныеДокументов.СправкуПодписал = ФИООтветственныхЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ДанныеДокументов.ДолжностьПодписавшегоЛица = Должности.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.МоментВремени";

	Если Не ЭтоСправкаДляНалоговогоОргана Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОснованиеДляПредставленияСправок", "СпособФормирования");
	КонецЕсли;	
	
	ДанныеОрганизации = Запрос.Выполнить().Выбрать();
	
	ДанныеНалоговыхАгентов = Новый Соответствие;
	
	Пока ДанныеОрганизации.Следующий() Цикл 
		
		ЭтоЮрЛицо = ЗарплатаКадры.ЭтоЮридическоеЛицо(ДанныеОрганизации.Организация);
		ОКТМО = ДанныеОрганизации.ОКТМО;
		Если ДанныеОрганизации.НалоговыйПериод < 2015 Тогда
			ОКТМО = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОКТМО, 11, "-", "Справа");
		ИначеЕсли ДанныеОрганизации.НалоговыйПериод > 2018 И ЭтоЮрЛицо Тогда
			ОКТМО = Лев(ОКТМО, 8);
		КонецЕсли;
		
		ДанныеНалоговогоАгента = Новый Структура;
		ДанныеНалоговогоАгента.Вставить("Организация", ДанныеОрганизации.Организация);
		ДанныеНалоговогоАгента.Вставить("НалоговыйПериод", ДанныеОрганизации.НалоговыйПериод);
		ДанныеНалоговогоАгента.Вставить("СпециальныйДокумент2013года", ДанныеОрганизации.СпециальныйДокумент2013года);
		ДанныеНалоговогоАгента.Вставить("НалоговыйПериодСтрокой", Формат(ДанныеОрганизации.НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
		ДанныеНалоговогоАгента.Вставить("Дата", ДанныеОрганизации.Дата);
		ДанныеНалоговогоАгента.Вставить("Телефон", ДанныеОрганизации.Телефон);
		ДанныеНалоговогоАгента.Вставить("ЭтоЮрЛицо", ЭтоЮрЛицо); 
		ДанныеНалоговогоАгента.Вставить("КодНалоговогоОргана", ДанныеОрганизации.КодНалоговогоОргана); 
		ДанныеНалоговогоАгента.Вставить("КодНалоговогоОрганаПолучателя", ДанныеОрганизации.КодНалоговогоОрганаПолучателя); 
		ДанныеНалоговогоАгента.Вставить("ИННорг", СокрЛП(ДанныеОрганизации.ИНН)); 
		ДанныеНалоговогоАгента.Вставить("ОКАТО", ДанныеОрганизации.ОКАТО);
		ДанныеНалоговогоАгента.Вставить("ОКТМО", ОКТМО);
		ДанныеНалоговогоАгента.Вставить("КПП", ДанныеОрганизации.КПП);
		ДанныеНалоговогоАгента.Вставить("НаименованиеПолное", ДанныеОрганизации.НаименованиеПолное);
		ДанныеНалоговогоАгента.Вставить("ФИОПодписавшего", ДанныеОрганизации.ФИОПодписавшего);
		ДанныеНалоговогоАгента.Вставить("ДолжностьПодписавшегоЛица", ДанныеОрганизации.Должность);
		ДанныеНалоговогоАгента.Вставить("Номер", ДанныеОрганизации.Номер);
		ДанныеНалоговогоАгента.Вставить("Признак");
		ДанныеНалоговогоАгента.Вставить("Фамилия");
		ДанныеНалоговогоАгента.Вставить("Имя");
		ДанныеНалоговогоАгента.Вставить("Отчество");
		ДанныеНалоговогоАгента.Вставить("ИдентификаторФайла", ДанныеОрганизации.ИдентификаторФайла);
		ДанныеНалоговогоАгента.Вставить("НомерКорректировки", ДанныеОрганизации.НомерКорректировки);
		ДанныеНалоговогоАгента.Вставить("ФормаРеорганизации", ДанныеОрганизации.ФормаРеорганизации);
		ДанныеНалоговогоАгента.Вставить("ИННРеорганизованнойОрганизации", ДанныеОрганизации.ИННРеорганизованнойОрганизации);
		ДанныеНалоговогоАгента.Вставить("КППРеорганизованнойОрганизации", ДанныеОрганизации.КППРеорганизованнойОрганизации);
		ДанныеНалоговогоАгента.Вставить("НаименованиеРеорганизованнойОрганизации", ДанныеОрганизации.НаименованиеРеорганизованнойОрганизации);
		ДанныеНалоговогоАгента.Вставить("Телефон", ДанныеОрганизации.Телефон);
			
		ДанныеПредставителя = Новый Структура("ТипПодписанта, ПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ДокументПредставителя, Фамилия, Имя, Отчество, ФИОПредставителя", "1", Истина, "", "", "", "", "", "");
		Для каждого ПолеСтруктуры Из ДанныеПредставителя Цикл
			ДанныеНалоговогоАгента.Вставить(ПолеСтруктуры.Ключ, ПолеСтруктуры.Значение);
		КонецЦикла;
		
		Если ДанныеНалоговогоАгента.ЭтоЮрЛицо Тогда
			ДанныеНалоговогоАгента.Вставить("НазваниеОрганизации", ?(ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеСокращенное), ДанныеОрганизации.НаименованиеСокращенное, ДанныеОрганизации.НаименованиеПолное));
		Иначе
			ДанныеНалоговогоАгента.Вставить("НазваниеОрганизации", ДанныеОрганизации.ФамилияИП + " " + ДанныеОрганизации.ИмяИП + " " + ДанныеОрганизации.ОтчествоИП);
			ДанныеНалоговогоАгента.Фамилия = ДанныеОрганизации.ФамилияИП;
			ДанныеНалоговогоАгента.Имя = ДанныеОрганизации.ИмяИП;
			ДанныеНалоговогоАгента.Отчество = ДанныеОрганизации.ОтчествоИП;
		КонецЕсли;
		
		Если ЭтоСправкаДляНалоговогоОргана Тогда
			Если ДанныеОрганизации.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ Тогда
				ДанныеНалоговогоАгента.Признак = "2"
			ИначеЕсли ДанныеОрганизации.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность Тогда
				ДанныеНалоговогоАгента.Признак = "1"
			ИначеЕсли ДанныеОрганизации.ОснованиеДляПредставленияСправок = Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетностьЗаРеорганизованнуюОрганизацию Тогда
				ДанныеНалоговогоАгента.Признак = "3"
			Иначе 	
				ДанныеНалоговогоАгента.Признак = "4"
			КонецЕсли;
		Иначе
			ДанныеНалоговогоАгента.Признак = ?(ДанныеОрганизации.СпособФормирования = Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно,"СводнаяСправка", "1");
		КонецЕсли;	
		
		Если ПолучатьИтоговыеСуммы Тогда
			ДанныеНалоговогоАгента.Вставить("ОбщаяСуммаДохода", ДанныеОрганизации.ОбщаяСуммаДохода);
			ДанныеНалоговогоАгента.Вставить("Исчислено", ДанныеОрганизации.Исчислено);
			ДанныеНалоговогоАгента.Вставить("Удержано", ДанныеОрганизации.Удержано);
			ДанныеНалоговогоАгента.Вставить("Перечислено", ДанныеОрганизации.Перечислено);
			ДанныеНалоговогоАгента.Вставить("КоличествоСправок", ДанныеОрганизации.КоличествоСправок);
		КонецЕсли;	
		
		Если ДанныеНалоговогоАгента.НалоговыйПериод >= 2015  Тогда
			ДанныеПредставителя = СведенияОПредставителеПоРегистрацииВНалоговомОргане(ДанныеОрганизации.РегистрацияВНалоговомОргане, ДанныеОрганизации.Дата);
			ДанныеНалоговогоАгента.ТипПодписанта = ДанныеПредставителя.ТипПодписанта;
		КонецЕсли;
		
		Если ДанныеНалоговогоАгента.ТипПодписанта = "2" И (ЭтоСправкаДляНалоговогоОргана Или Не ЗначениеЗаполнено(ДанныеНалоговогоАгента.ФИОПодписавшего)) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеНалоговогоАгента, ДанныеПредставителя, "Фамилия,Имя,Отчество,ПредставительЮрЛицо,НаименованиеОрганизацииПредставителя,ДокументПредставителя");
			ДанныеНалоговогоАгента.ФИОПодписавшего = ДанныеПредставителя.ФИОПредставителя;
		КонецЕсли;
		
		ДанныеНалоговыхАгентов.Вставить(ДанныеОрганизации.Ссылка, ДанныеНалоговогоАгента);
		
	КонецЦикла;	
	
	Возврат ДанныеНалоговыхАгентов;
	
КонецФункции

Функция СформироватьПечатнуюФорму2НДФЛ(ОбъектыПечати, МассивОбъектов, ДанныеДокументов, ДанныеСотрудниковДокументов, ДанныеОДоходахДокументов, ДанныеОВычетахДокументов, ДанныеОбУведомленияхДокументов) Экспорт
	
	ПустаяСтруктураАдреса = Новый Структура("Индекс,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
		
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СоответствиеСтавокДоходов = СоответствиеДоходовСтавкам();
	СоответствиеКодовСтран = Новый Соответствие;
	СоответствиеИменСтран = Новый Соответствие;
	СоответствиеДокументовУдостоверяющихЛичность = Новый Соответствие;
	СоответствиеКодовДоходов = Новый Соответствие;
	СоответствиеКодовФНССтатусамНДФЛ = Новый Соответствие;
	ПрочитатьКлассификаторыВСоответствия(
		СоответствиеКодовСтран, 
		СоответствиеИменСтран, 
		СоответствиеДокументовУдостоверяющихЛичность,
		СоответствиеКодовДоходов,
		СоответствиеКодовФНССтатусамНДФЛ);
		
	ТекущаяДата = ТекущаяДатаСеанса();
	ВременныйТабДокумент = Новый ТабличныйДокумент;
	ТабДокументТекущейСправки = Новый ТабличныйДокумент;
	ТабДокументТекущейСправки.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
	Справка2011 = ПолучитьОбщийМакет("Форма2НДФЛс2011");
	Справка2014 = ПолучитьОбщийМакет("Форма2НДФЛс2014");
	Справка2015 = ПолучитьОбщийМакет("Форма2НДФЛс2015");
	Справка2018 = ПолучитьОбщийМакет("Форма2НДФЛс2018");
	Справка2019 = ПолучитьОбщийМакет("Форма2НДФЛс2019");
	Справка2021 = ПолучитьОбщийМакет("Форма2НДФЛс2021");
		
	ОбластьМакетаШапкаПервойСтраницы_2011 = Справка2011.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2011 = Справка2011.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2011 = Справка2011.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2011 = Справка2011.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаПодвалРаздела4_2011	= Справка2011.ПолучитьОбласть("ПодвалРаздела4");
	ОбластьМакетаРаздел5_2011 = Справка2011.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2011 = Справка2011.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2011 = Справка2011.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2011 = Справка2011.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2011 = Справка2011.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2011 = Новый Массив;
	ОбластиМакетаДляДоходов_2011.Добавить(Справка2011.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2011.Добавить(Справка2011.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2011 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2011.Добавить(Справка2011.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;
	
	ОбластьМакетаШапкаПервойСтраницы_2014 = Справка2014.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2014 = Справка2014.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2014 = Справка2014.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2014 = Справка2014.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаПодвалРаздела4_2014	= Справка2014.ПолучитьОбласть("ПодвалРаздела4");
	ОбластьМакетаРаздел5_2014 = Справка2014.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2014 = Справка2014.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2014 = Справка2014.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2014 = Справка2014.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2014 = Справка2014.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2014 = Новый Массив;
	ОбластиМакетаДляДоходов_2014.Добавить(Справка2014.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2014.Добавить(Справка2014.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2014 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2014.Добавить(Справка2014.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;
	
	ОбластьМакетаШапкаПервойСтраницы_2015 = Справка2015.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2015 = Справка2015.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2015 = Справка2015.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2015 = Справка2015.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаУведомлениеНаСоцВычет_2015	= Справка2015.ПолучитьОбласть("УведомлениеНаСоцВычет");
	ОбластьМакетаУведомлениеНаИмущВычет_2015	= Справка2015.ПолучитьОбласть("УведомлениеНаИмущВычет");
	ОбластьМакетаРаздел5_2015 = Справка2015.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2015 = Справка2015.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2015 = Справка2015.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2015 = Справка2015.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2015 = Справка2015.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2015 = Новый Массив;
	ОбластиМакетаДляДоходов_2015.Добавить(Справка2015.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2015.Добавить(Справка2015.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2015 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2015.Добавить(Справка2015.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;
	
	ОбластьМакетаШапкаПервойСтраницы_2018 = Справка2018.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2018 = Справка2018.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2018 = Справка2018.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2018 = Справка2018.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаУведомлениеНаСоцВычет_2018	= Справка2018.ПолучитьОбласть("УведомлениеНаСоцВычет");
	ОбластьМакетаУведомлениеНаИмущВычет_2018	= Справка2018.ПолучитьОбласть("УведомлениеНаИмущВычет");
	ОбластьМакетаРаздел5_2018 = Справка2018.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2018 = Справка2018.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2018 = Справка2018.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2018 = Справка2018.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2018 = Справка2018.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2018 = Новый Массив;
	ОбластиМакетаДляДоходов_2018.Добавить(Справка2018.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2018.Добавить(Справка2018.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2018 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2018.Добавить(Справка2018.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;
	
	ОбластьМакетаШапкаПервойСтраницы_2019 = Справка2019.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2019 = Справка2019.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2019 = Справка2019.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2019 = Справка2019.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаРаздел5_2019 = Справка2019.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2019 = Справка2019.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2019 = Справка2019.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2019 = Справка2019.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2019 = Справка2019.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2019 = Новый Массив;
	ОбластиМакетаДляДоходов_2019.Добавить(Справка2019.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2019.Добавить(Справка2019.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2019 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2019.Добавить(Справка2019.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;
	
	ОбластьМакетаШапкаПервойСтраницы_2021 = Справка2021.ПолучитьОбласть("ШапкаПервойСтраницы"); 
	ОбластьМакетаШапкаВторойСтраницы_2021 = Справка2021.ПолучитьОбласть("ШапкаВторойСтраницы");
	ОбластьМакетаЗаголовокРаздела3_2021 = Справка2021.ПолучитьОбласть("ЗаголовокРаздела3"); 
	ОбластьМакетаЗаголовокРаздела4_2021 = Справка2021.ПолучитьОбласть("ЗаголовокРаздела4");
	ОбластьМакетаРаздел5_2021 = Справка2021.ПолучитьОбласть("Раздел5");
	ОбластьМакетаНалоговыйАгент_2021 = Справка2021.ПолучитьОбласть("НалоговыйАгент");
	ОбластьМакетаПримечание_2021 = Справка2021.ПолучитьОбласть("Примечание");
	
	ОбластьМакетаСтрокаВычетов_2021 = Справка2021.ПолучитьОбласть("СтрокаВычетов"); 
	ОбластьМакетаСтрокаДоходов_2021 = Справка2021.ПолучитьОбласть("СтрокаДоходов"); 
	ОбластиМакетаДляДоходов_2021 = Новый Массив;
	ОбластиМакетаДляДоходов_2021.Добавить(Справка2021.ПолучитьОбласть("СтрокаДоходов|ЛеваяЧасть"));
	ОбластиМакетаДляДоходов_2021.Добавить(Справка2021.ПолучитьОбласть("СтрокаДоходов|ПраваяЧасть"));
	ОбластиМакетаДляВычетов_2021 = Новый Массив;
	Для Сч = 1 По 4 Цикл
		ОбластиМакетаДляВычетов_2021.Добавить(Справка2021.ПолучитьОбласть("СтрокаВычетов|Вычеты"+Сч));
	КонецЦикла;

	Для Каждого Ссылка Из МассивОбъектов  Цикл
		
		НачалоСправки = ТабДокумент.ВысотаТаблицы + 1;
		
		ДанныеТекущегоДокумента = ДанныеДокументов.Получить(Ссылка);
		
		Если ДанныеТекущегоДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыводитьФорму2НДФЛ2021Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) Тогда
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2021; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2021;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2021; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2021;
			ОбластьМакетаУведомлениеНаСоцВычет = Неопределено;
			ОбластьМакетаУведомлениеНаИмущВычет = Неопределено;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2021;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2021;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2021;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2021; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2021; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2021;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2021;
		ИначеЕсли ВыводитьФорму2НДФЛ2019Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) Тогда
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2019; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2019;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2019; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2019;
			ОбластьМакетаУведомлениеНаСоцВычет = Неопределено;
			ОбластьМакетаУведомлениеНаИмущВычет = Неопределено;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2019;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2019;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2019;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2019; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2019; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2019;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2019;
		
		ИначеЕсли ВыводитьФорму2НДФЛ2018Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) Тогда
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2018; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2018;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2018; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2018;
			ОбластьМакетаУведомлениеНаСоцВычет = ОбластьМакетаУведомлениеНаСоцВычет_2018;
			ОбластьМакетаУведомлениеНаИмущВычет = ОбластьМакетаУведомлениеНаИмущВычет_2018;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2018;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2018;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2018;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2018; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2018; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2018;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2018;
		ИначеЕсли ДанныеТекущегоДокумента.НалоговыйПериод >= 2015 Тогда
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2015; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2015;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2015; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2015;
			ОбластьМакетаУведомлениеНаСоцВычет = ОбластьМакетаУведомлениеНаСоцВычет_2015;
			ОбластьМакетаУведомлениеНаИмущВычет = ОбластьМакетаУведомлениеНаИмущВычет_2015;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2015;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2015;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2015;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2015; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2015; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2015;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2015;
		ИначеЕсли УчетНДФЛКлиентСервер.СправкиНДФЛДокументИспользуетКодОКТМО(ДанныеТекущегоДокумента) Тогда
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2014; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2014;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2014; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2014;
			ОбластьМакетаУведомлениеНаСоцВычет = ОбластьМакетаПодвалРаздела4_2014;
			ОбластьМакетаУведомлениеНаИмущВычет = ОбластьМакетаПодвалРаздела4_2014;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2014;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2014;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2014;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2014; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2014; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2014;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2014;
		Иначе
			ОбластьМакетаШапкаПервойСтраницы = ОбластьМакетаШапкаПервойСтраницы_2011; 
			ОбластьМакетаШапкаВторойСтраницы = ОбластьМакетаШапкаВторойСтраницы_2011;
			ОбластьМакетаЗаголовокРаздела3 = ОбластьМакетаЗаголовокРаздела3_2011; 
			ОбластьМакетаЗаголовокРаздела4 = ОбластьМакетаЗаголовокРаздела4_2011;
			ОбластьМакетаУведомлениеНаСоцВычет = ОбластьМакетаПодвалРаздела4_2011;
			ОбластьМакетаУведомлениеНаИмущВычет = ОбластьМакетаПодвалРаздела4_2011;
			ОбластьМакетаРаздел5 = ОбластьМакетаРаздел5_2011;
			ОбластьМакетаНалоговыйАгент = ОбластьМакетаНалоговыйАгент_2011;
			ОбластьМакетаПримечание = ОбластьМакетаПримечание_2011;
			
			ОбластьМакетаСтрокаВычетов = ОбластьМакетаСтрокаВычетов_2011; 
			ОбластьМакетаСтрокаДоходов = ОбластьМакетаСтрокаДоходов_2011; 
			ОбластиМакетаДляДоходов = ОбластиМакетаДляДоходов_2011;
			ОбластиМакетаДляВычетов = ОбластиМакетаДляВычетов_2011;
		КонецЕсли;

		ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(ДанныеТекущегоДокумента);  // Раздел 1
		Если ВыводитьФорму2НДФЛ2018Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) И ЗначениеЗаполнено(ДанныеТекущегоДокумента.ФормаРеорганизации) Тогда
			ОбластьМакетаШапкаПервойСтраницы.Параметры.НазваниеОрганизации = ДанныеТекущегоДокумента.НаименованиеРеорганизованнойОрганизации
		КонецЕсли;
		Если ВыводитьФорму2НДФЛ2019Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) Тогда
			
		ИначеЕсли ДанныеТекущегоДокумента.Признак = "СводнаяСправка" Тогда
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСправкаВИФНС").Видимость = Ложь;
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСводнойСправки").Видимость = Истина;
		Иначе
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСправкаВИФНС").Видимость = Истина;
			ОбластьМакетаШапкаПервойСтраницы.Область("ОбластьСводнойСправки").Видимость = Ложь;
		КонецЕсли;
		
		// последующие страницы
		ОбластьМакетаШапкаВторойСтраницы.Параметры.Заполнить(ОбластьМакетаШапкаПервойСтраницы.Параметры);
		ОбластьМакетаНалоговыйАгент.Параметры.Заполнить(ДанныеТекущегоДокумента); // подписи
		
		СтрокиДанныхПоСотрудникам = ДанныеСотрудниковДокументов.Скопировать(Новый Структура("Ссылка", Ссылка));
		Если СтрокиДанныхПоСотрудникам.Количество() = 0 Тогда
			ШаблонПредупреждения = НСтр("ru = 'Документ %1 не содержит сотрудников.'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения, Ссылка);
			Продолжить;
		КонецЕсли;
		СтрокиДанныхПоСотрудникам.Сортировать("НомерСправки");
		
		Для каждого СтрокаДанных Из СтрокиДанныхПоСотрудникам Цикл 
			
			СтруктураОтбора = Новый Структура("Ссылка, Сотрудник", Ссылка, СтрокаДанных.НомерСправки); 
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДанных);
			ДоходыПоВидам = ДанныеОДоходахДокументов.Скопировать(СтруктураОтбора);
			ВычетыПоВидам = ДанныеОВычетахДокументов.Скопировать(СтруктураОтбора);
			Уведомления = ДанныеОбУведомленияхДокументов.Скопировать(СтруктураОтбора);
			
			Если ДоходыПоВидам.Количество() = 0 И ВычетыПоВидам.Количество() = 0 И Уведомления.Количество() = 0 Тогда
				ШаблонПредупреждения = НСтр("ru = 'В документе %1 по сотруднику %2 отсутствуют доходы.'");
				ФИО = СтрокаДанных.Фамилия + " " + СтрокаДанных.Имя + " " + СтрокаДанных.Отчество;
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, Ссылка, ?(ЗначениеЗаполнено(ФИО), ФИО, НСтр("ru = '<не указан>'")));
				ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
				Продолжить;
			КонецЕсли;
			
			ДоходыПоВидам.Колонки.Добавить("КодДоходаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
			ДоходыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
			ДоходыПоВидам.Сортировать("Ставка, МесяцНалоговогоПериода, КодДохода, СуммаДохода Убыв, КодВычета");
			Если ВыводитьФорму2НДФЛ2019Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) Тогда
				ПерваяСтрокаДохода = Неопределено;
				Для Каждого СтрокаТЗ Из ДоходыПоВидам Цикл
					Если ПерваяСтрокаДохода = Неопределено 
						Или ПерваяСтрокаДохода.МесяцНалоговогоПериода <> СтрокаТЗ.МесяцНалоговогоПериода
						Или ПерваяСтрокаДохода.КодДохода <> СтрокаТЗ.КодДохода
						Или ПерваяСтрокаДохода.Ставка <> СтрокаТЗ.Ставка Тогда
						СтрокаТЗ.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаТЗ.КодДохода];
						ПерваяСтрокаДохода = СтрокаТЗ;
					Иначе
						ПерваяСтрокаДохода.СуммаДохода = ПерваяСтрокаДохода.СуммаДохода + СтрокаТЗ.СуммаДохода;
						СтрокаТЗ.МесяцНалоговогоПериода = 0;
						СтрокаТЗ.СуммаДохода = 0;
					КонецЕсли;
					СтрокаТЗ.КодВычетаСтрокой = УчетНДФЛПовтИсп.КодВычетаДляНалоговойОтчетности(ДанныеТекущегоДокумента.НалоговыйПериод, СтрокаТЗ.КодВычета);
				КонецЦикла;
			Иначе
				ПредыдущийМесяц = -1;
				ПредыдущийКодДохода = "";
				ПредыдущаяСтавкаДохода = "";
				Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
					Если ПредыдущийМесяц <> СтрокаТЗ.МесяцНалоговогоПериода 
						Или ПредыдущийКодДохода <> СтрокаТЗ.КодДохода 
						Или ПредыдущаяСтавкаДохода <> СтрокаТЗ.Ставка Тогда
						СтрокаТЗ.КодДоходаСтрокой = СоответствиеКодовДоходов[СтрокаТЗ.КодДохода];
						ПредыдущийМесяц = СтрокаТЗ.МесяцНалоговогоПериода;
						ПредыдущийКодДохода = СтрокаТЗ.КодДохода;
						ПредыдущаяСтавкаДохода = СтрокаТЗ.Ставка;
					Иначе
						СтрокаТЗ.МесяцНалоговогоПериода = 0;
					КонецЕсли;
					СтрокаТЗ.КодВычетаСтрокой = УчетНДФЛПовтИсп.КодВычетаДляНалоговойОтчетности(ДанныеТекущегоДокумента.НалоговыйПериод, СтрокаТЗ.КодВычета);
				КонецЦикла;
			КонецЕсли;
		
			ВычетыПоВидам.Колонки.Добавить("КодВычетаСтрокой", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
			ВычетыПоВидам.Колонки.Добавить("ГруппаВычета", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыВычетовПоНДФЛ"));
			Для каждого СтрокаТЗ Из ВычетыПоВидам Цикл
				СтрокаТЗ.КодВычетаСтрокой = УчетНДФЛПовтИсп.КодВычетаДляНалоговойОтчетности(ДанныеТекущегоДокумента.НалоговыйПериод, СтрокаТЗ.КодВычета);
				СтрокаТЗ.ГруппаВычета = УчетНДФЛПовтИсп.ГруппаВычета(СтрокаТЗ.КодВычета);
			КонецЦикла;
			
			ВсегоИтогов = 0;
			Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
			
				Если УчетНДФЛКлиентСервер.СправкиНДФЛЕстьИтогиПоСтавке(СтрокаДанных, СтавкаНДФЛ) Тогда
					ВсегоИтогов = ВсегоИтогов + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			ТабДокументТекущейСправки.Очистить();
			Если ТабДокумент.ВысотаТаблицы > 0 Тогда  // Если справок несколько - разобьем на отдельные страницы.
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				Если ОбластьМакетаУведомлениеНаСоцВычет <> Неопределено Тогда
					ОчиститьПараметрыОбластиТабличногоДокумента(ОбластьМакетаУведомлениеНаСоцВычет);
					ОчиститьПараметрыОбластиТабличногоДокумента(ОбластьМакетаУведомлениеНаИмущВычет);
				КонецЕсли;
			КонецЕсли;
			
			// Заполнение данных в параметрах макета.
			
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтрокаДанных);  // Раздел 2
			Описание = СоответствиеКодовФНССтатусамНДФЛ.Получить(СтрокаДанных.СтатусНалогоплательщика);
			Если Описание <> Неопределено Тогда
				ОбластьМакетаШапкаПервойСтраницы.Параметры.Статус = ?(ДанныеТекущегоДокумента.НалоговыйПериод < 2015, Описание.КодФНС, Описание.КодФНС_2015);
			КонецЕсли;
			ОбластьМакетаШапкаПервойСтраницы.Параметры.Гражданство = ФизическиеЛицаЗарплатаКадры.КодСтраныДляОтчетности(СоответствиеКодовСтран, СтрокаДанных.Гражданство, СтрокаДанных.СтранаВыдачиДокумента);
			Описание = СоответствиеДокументовУдостоверяющихЛичность.Получить(СтрокаДанных.ВидДокумента);
			Если Описание <> Неопределено Тогда
				ОбластьМакетаШапкаПервойСтраницы.Параметры.КодУдЛичн = ?(ДанныеТекущегоДокумента.НалоговыйПериод < 2015, Описание.КодМВД, Описание.КодМВД_2015);
			КонецЕсли;
			
			Если ВыводитьФорму2НДФЛ2018Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) Тогда
				Если ВыводитьФорму2НДФЛ2019Года(ДанныеТекущегоДокумента.НалоговыйПериод, ДанныеТекущегоДокумента.Дата) Тогда
					
				Иначе
					ОбластьМакетаШапкаВторойСтраницы.Параметры.НомерСправки = СтрокаДанных.НомерСправки
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаДанных.Адрес) Тогда
					СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(
					СтрокаДанных.Адрес, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
					ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(СтруктураАдреса);  
					Если СтруктураАдреса.Свойство("Регион") Тогда
						КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдреса.Регион);
						Если КодРегиона <> Неопределено Тогда
							КодРегионаСтрокой = "";
							Если ТипЗнч(КодРегиона) = Тип("Число") Тогда
								КодРегионаСтрокой = Формат(КодРегиона, "ЧЦ=2; ЧВН=; ЧГ=");
							ИначеЕсли ТипЗнч(КодРегиона) = Тип("Строка") Тогда
								КодРегионаСтрокой = КодРегиона;	
							КонецЕсли;
						КонецЕсли;
						
						ОбластьМакетаШапкаПервойСтраницы.Параметры.КодРегиона = КодРегионаСтрокой;
					КонецЕсли;
				Иначе // очищаем адресные данные
					ОбластьМакетаШапкаПервойСтраницы.Параметры.Заполнить(ПустаяСтруктураАдреса);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаДанных.АдресЗарубежом) Тогда
					СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(
						СтрокаДанных.АдресЗаРубежом, Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица);
					ОбластьМакетаШапкаПервойСтраницы.Параметры.КодСтр = СоответствиеИменСтран[СтруктураАдреса.Страна];
					ОбластьМакетаШапкаПервойСтраницы.Параметры.АдрТекст = СтруктураАдреса.Представление;
				Иначе // очищаем адресные данные
					ОбластьМакетаШапкаПервойСтраницы.Параметры.КодСтр = "";
					ОбластьМакетаШапкаПервойСтраницы.Параметры.АдрТекст = "";
				КонецЕсли;
			КонецЕсли;
			
			ОбластьМакетаРаздел5.Параметры.Заполнить(СтрокаДанных); // Реквизиты Уведомления о зачете ав.платежей Раздела 5.
			
			// Вывод подготовленной справки в табличный документ.
			
			ТабДокументТекущейСправки.Вывести(ОбластьМакетаШапкаПервойСтраницы);
			
			ПерваяСтавка = Истина;
			ОбластьМакетаШапкаВторойСтраницы.Параметры.НомерСтраницы = 1;
			ВыведеноИтогов = 0;
			
			Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
			
				Если Не УчетНДФЛКлиентСервер.СправкиНДФЛЕстьИтогиПоСтавке(СтрокаДанных, СтавкаНДФЛ) Тогда
					Продолжить;
				КонецЕсли;	
				
				ВыведеноИтогов = ВыведеноИтогов + 1;
				
				ВременныйТабДокумент.Очистить();
				
				// Раздел 3
				
				ОбластьМакетаЗаголовокРаздела3.Параметры.Ставка = СтавкаНДФЛ;
		
				ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела3);
				
				ДоходыПоСтавке = СправкиНДФЛИзвлечьДоходыПоСтавке(СтавкаНДФЛ, ДанныеТекущегоДокумента.НалоговыйПериод, СтрокаДанных.СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов);
				Если ДоходыПоСтавке.Количество() = 0 Тогда
					ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаДоходов);
				Иначе
					ВывестиТабличныеДанные(ДоходыПоСтавке, ВременныйТабДокумент, ОбластиМакетаДляДоходов, 1, 2, "КодДоходаСтрокой");
				КонецЕсли;
				ВывестиРазделВСправку(ТабДокументТекущейСправки, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
				
				// Раздел 4
				Если ПерваяСтавка Тогда
				
					ВременныйТабДокумент.Очистить();
					
					ВременныйТабДокумент.Вывести(ОбластьМакетаЗаголовокРаздела4);
					Если ОбластьМакетаУведомлениеНаСоцВычет = Неопределено Тогда
						Если ВычетыПоВидам.Количество() Тогда
							ВычетыПоВидам.Сортировать("КодВычета");
							ВывестиТабличныеДанные(ВычетыПоВидам, ВременныйТабДокумент, ОбластиМакетаДляВычетов, 1, 4);
						КонецЕсли;
					ИначеЕсли ВычетыПоВидам.Количество() = 0 Или СтавкаНДФЛ <> Перечисления.НДФЛСтавки.Ставка13 Тогда
						ВременныйТабДокумент.Вывести(ОбластьМакетаСтрокаВычетов);
						Если ДанныеТекущегоДокумента.НалоговыйПериод >= 2015 Тогда
							ВременныйТабДокумент.Вывести(ОбластьМакетаУведомлениеНаСоцВычет);
						КонецЕсли;
						ВременныйТабДокумент.Вывести(ОбластьМакетаУведомлениеНаИмущВычет);
					Иначе
						ВычетыПоВидам.Сортировать("КодВычета");
						ВывестиТабличныеДанные(ВычетыПоВидам, ВременныйТабДокумент, ОбластиМакетаДляВычетов, 1, 4);
						Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.СоциальныеПоУведомлениюНО, "ГруппаВычета") <> Неопределено Тогда
							ВывестиУведомления(ВременныйТабДокумент, ОбластьМакетаУведомлениеНаСоцВычет, Уведомления, Перечисления.ГруппыВычетовПоНДФЛ.Социальные)
						ИначеЕсли ДанныеТекущегоДокумента.НалоговыйПериод >= 2015 Тогда	
							ВременныйТабДокумент.Вывести(ОбластьМакетаУведомлениеНаСоцВычет);
						КонецЕсли;
						Если ВычетыПоВидам.Найти(Перечисления.ГруппыВычетовПоНДФЛ.Имущественные, "ГруппаВычета") <> Неопределено Тогда
							ВывестиУведомления(ВременныйТабДокумент, ОбластьМакетаУведомлениеНаИмущВычет, Уведомления, Перечисления.ГруппыВычетовПоНДФЛ.Имущественные)
						Иначе	
							ВременныйТабДокумент.Вывести(ОбластьМакетаУведомлениеНаИмущВычет);
						КонецЕсли;
					КонецЕсли;
					
					ВывестиРазделВСправку(ТабДокументТекущейСправки, ВременныйТабДокумент, Ложь, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
					
					ПерваяСтавка = Ложь;
					
				КонецЕсли;
				
				// Раздел 5
				ВременныйТабДокумент.Очистить();
				
				Если ДанныеТекущегоДокумента.НалоговыйПериод < 2015 Тогда
					ОбластьМакетаРаздел5.Параметры.Ставка = СтавкаНДФЛ;
				КонецЕсли;
				
				ОбластьМакетаРаздел5.Параметры.ОбщаяСуммаДохода = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "ОбщаяСуммаДохода", СтавкаНДФЛ); 
				ОбластьМакетаРаздел5.Параметры.ОблагаемаяСуммаДохода = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "ОблагаемаяСуммаДохода", СтавкаНДФЛ);
				ОбластьМакетаРаздел5.Параметры.Исчислено = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "Исчислено", СтавкаНДФЛ);
				Если ДанныеТекущегоДокумента.НалоговыйПериод >= 2015 Тогда
					ОбластьМакетаРаздел5.Параметры.ЗачтеноАвансовыхПлатежей = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "ЗачтеноАвансовыхПлатежей", СтавкаНДФЛ);
				КонецЕсли;
				ОбластьМакетаРаздел5.Параметры.Удержано = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "Удержано", СтавкаНДФЛ);
		  		ОбластьМакетаРаздел5.Параметры.Перечислено = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "Перечислено", СтавкаНДФЛ);
				ОбластьМакетаРаздел5.Параметры.Задолженность = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "Задолженность", СтавкаНДФЛ);
				ОбластьМакетаРаздел5.Параметры.ИзлишнеУдержано = УчетНДФЛКлиентСервер.СправкиНДФЛЗначениеИтоговПоСтавке(СтрокаДанных, "ИзлишнеУдержано", СтавкаНДФЛ);

				ВременныйТабДокумент.Вывести(ОбластьМакетаРаздел5);
				ВывестиРазделВСправку(ТабДокументТекущейСправки, ВременныйТабДокумент, ВыведеноИтогов = ВсегоИтогов, ОбластьМакетаНалоговыйАгент, ОбластьМакетаПримечание, ОбластьМакетаШапкаВторойСтраницы);
				
			КонецЦикла;
			
			ТабДокументТекущейСправки.Вывести(ОбластьМакетаНалоговыйАгент);
			ТабДокументТекущейСправки.Вывести(ОбластьМакетаПримечание);
			ТабДокумент.Вывести(ТабДокументТекущейСправки);
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НачалоСправки, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

Процедура ВывестиУведомления(ТабДокумент, ОбластьМакета, Уведомления, ГруппаВычета)

	СтрокиУведомлений = Уведомления.НайтиСтроки(Новый Структура("ГруппаВычета", ГруппаВычета));
	Для каждого СтрокаУведомления Из СтрокиУведомлений Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаУведомления);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиРазделВСправку(ТабДокумент, Раздел, ЭтоПоследнийРаздел, ОбластьНалоговыйАгент, ОбластьПримечание, ШапкаВторойСтраницы)
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(Раздел);
	ВыводимыеОбласти.Добавить(ОбластьНалоговыйАгент);
	
	ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
	Если Не ВывестиПодвалЛиста И ЭтоПоследнийРаздел Тогда
		ВыводимыеОбласти.Добавить(ОбластьПримечание);
		ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
	КонецЕсли;
	Если ВывестиПодвалЛиста Тогда
		ТабДокумент.Вывести(ОбластьНалоговыйАгент);
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ШапкаВторойСтраницы.Параметры.НомерСтраницы = ШапкаВторойСтраницы.Параметры.НомерСтраницы + 1;
		ТабДокумент.Вывести(ШапкаВторойСтраницы);
	КонецЕсли;
	
	ТабДокумент.Вывести(Раздел);
	
КонецПроцедуры

Процедура ВывестиТабличныеДанные(МассивСтрок, ДокументРезультат, ОбластиМакета, Знач МинимумСтрок, КоличествоКолонок = 2, ПроверяемоеПоле = "")

	ВсегоСтрок = МассивСтрок.Количество();
	
	Для каждого Область Из ОбластиМакета Цикл
		ОчиститьПараметрыОбластиТабличногоДокумента(Область);
	КонецЦикла;
	
	ЛеваяЧастьМакета = ОбластиМакета[0];
	
	// Вычислим высоту таблицы
	ВысотаТаблицы = ?(ВсегоСтрок < МинимумСтрок, ВсегоСтрок, ?(ВсегоСтрок > МинимумСтрок * КоличествоКолонок, ?(Цел(ВсегоСтрок / КоличествоКолонок) - ВсегоСтрок / КоличествоКолонок = 0, ВсегоСтрок / КоличествоКолонок, Цел(ВсегоСтрок / КоличествоКолонок) + 1), МинимумСтрок));
	
	// Иногда строки доходов не надо переносить в правый столбец печ.формы.
	Если КоличествоКолонок = 2 И ЗначениеЗаполнено(ПроверяемоеПоле) И ВсегоСтрок > ВысотаТаблицы Тогда
		ПерваяСтрокаВторойКолонки = ВысотаТаблицы + 1;
		Для Сч = ПерваяСтрокаВторойКолонки По ВсегоСтрок Цикл
			Если ЗначениеЗаполнено(МассивСтрок[Сч - 1][ПроверяемоеПоле]) Тогда
				Прервать;
			Иначе
				ВысотаТаблицы = ВысотаТаблицы + 1
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Сч = 1 По ВысотаТаблицы Цикл
		
		// перенесем данные
		ЛеваяЧастьМакета.Параметры.Заполнить(МассивСтрок[Сч - 1]);
		Если ВсегоСтрок > МинимумСтрок Тогда  // правая часть
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				Если ВысотаТаблицы * (СчКолонок - 1) + Сч <= ВсегоСтрок Тогда
					ОбластиМакета[СчКолонок - 1].Параметры.Заполнить(МассивСтрок[ВысотаТаблицы * (СчКолонок - 1) + Сч - 1]);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		// выведем области макета
		ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
		Для СчКолонок = 2 По КоличествоКолонок Цикл
			ДокументРезультат.Присоединить(ОбластиМакета.Получить(СчКолонок - 1));	
		КонецЦикла;
		
		Для каждого Область Из ОбластиМакета Цикл
			ОчиститьПараметрыОбластиТабличногоДокумента(Область);
		КонецЦикла;
		
	КонецЦикла;
	
	// Довыведем пустые строки раздела.
	Если ВысотаТаблицы < МинимумСтрок Тогда
		Для Сч = ВысотаТаблицы + 1 По МинимумСтрок Цикл
			ДокументРезультат.Вывести(ЛеваяЧастьМакета);	
			Для СчКолонок = 2 По КоличествоКолонок Цикл
				ДокументРезультат.Присоединить(ОбластиМакета[СчКолонок - 1]);	
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПараметрыОбластиТабличногоДокумента(Область) Экспорт
	
	Для Параметр = 0 По Область.Параметры.Количество() -1 Цикл
		Область.Параметры[Параметр] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Функция СправкиНДФЛИзвлечьДоходыПоСтавке(Ставка, НалоговыйПериод, СтатусНалогоплательщика, ДоходыПоВидам, СоответствиеСтавокДоходов) Экспорт
	
	Если ДоходыПоВидам.Колонки.Найти("Ставка") <> Неопределено Тогда
		
		ТаблицаПодходящихДоходов = ДоходыПоВидам.Скопировать(Новый Структура("Ставка",Ставка))
		
	Иначе
		
		ТаблицаПодходящихДоходов = ДоходыПоВидам.СкопироватьКолонки();
		
		Для каждого СтрокаТЗ Из ДоходыПоВидам Цикл
			
			СтавкаНалогообложенияРезидента = СоответствиеСтавокДоходов[СтрокаТЗ.КодДохода];
			
			СтавкаДохода = СтавкаНДФЛ(СтавкаНалогообложенияРезидента, СтрокаТЗ.КодДохода, СтатусНалогоплательщика, НалоговыйПериод);
			
			Если СтавкаДохода = Ставка Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПодходящихДоходов.Добавить(), СтрокаТЗ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат	ТаблицаПодходящихДоходов
	
КонецФункции

Функция РегистрацииВНалоговомОрганеПоОрганизации(Организация, НалоговыйПериод) Экспорт 

	Возврат РегистрацииОрганизацииОтчетногоПериода(Организация, Дата(НалоговыйПериод, 1, 1), Дата(НалоговыйПериод, 12, 31));
	
КонецФункции

Функция СуммаОКАТОиКПП(КодПоОКАТО, КПП) Экспорт 

	Возврат СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодПоОКАТО, 11, " ", "Справа") + "/" + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КПП, 9, " ", "Справа")

КонецФункции

Функция СуммаОКТМОиКПП(КодПоОКТМО, КПП) Экспорт 

	Возврат СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодПоОКТМО, 11, " ", "Справа") + "/" + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КПП, 9, " ", "Справа")

КонецФункции

Функция ОписаниеДоходовОрганизации(Организация, НалоговыйПериод, ДатаПодачиСведений, ФизическоеЛицо = Неопределено, ДляНалогаНаПрибыль = Ложь, НеВключатьДоходыПоЦеннымБумагам = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если ФизическоеЛицо = Неопределено Тогда
		УсловиеФизическоеЛицо = "ИСТИНА";
	Иначе
		УсловиеФизическоеЛицо = "НДФЛСведенияОДоходах.ФизическоеЛицо = &ФизическоеЛицо";
	КонецЕсли;	
	Если ДляНалогаНаПрибыль = Истина Тогда
		УсловиеКодДохода = "НДФЛСведенияОДоходах.ВключатьВДекларациюПоНалогуНаПрибыль";
	ИначеЕсли НалоговыйПериод < Год(ДатаВозвратаДоходовПоЦеннымБумагамИзДекларацииПоПрибыли()) И НеВключатьДоходыПоЦеннымБумагам = Истина Тогда
		УсловиеКодДохода = "НЕ НДФЛСведенияОДоходах.ВключатьВДекларациюПоНалогуНаПрибыль";
	Иначе
		УсловиеКодДохода = "ИСТИНА";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация" ,Организация);
	Запрос.УстановитьПараметр("ГодНП", НалоговыйПериод);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаПодачиСведений",?(ДатаПодачиСведений = '00010101', ТекущаяДатаСеанса(), ДатаПодачиСведений));
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛСведенияОДоходах.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК НДФЛСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (Организации.Ссылка = &Организация)
	|			И (ВЫБОР
	|				КОГДА Организации.Ссылка = Организации.ГоловнаяОрганизация
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ НДФЛСведенияОДоходах.Организация = Организации.Ссылка
	|			КОНЕЦ)
	|			И НДФЛСведенияОДоходах.ГоловнаяОрганизация = Организации.ГоловнаяОрганизация
	|ГДЕ
	|	ГОД(НДФЛСведенияОДоходах.МесяцНалоговогоПериода) = &ГодНП
	|	И НДФЛСведенияОДоходах.Период < &ДатаПодачиСведений
	|	И НДФЛСведенияОДоходах.СуммаДохода <> 0
	|	И &УсловиеКодДохода
	|	И &УсловиеФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФизическоеЛицо", УсловиеФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКодДохода", УсловиеКодДохода);
	
	Выборка = Запрос.Выполнить().Выбрать();

	ОписаниеДоходов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.РегистрацияВНалоговомОргане) Тогда
			ОписаниеДоходов.Вставить(Выборка.РегистрацияВНалоговомОргане, Истина);	
		Иначе
			ОписаниеДоходов.Вставить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ОписаниеДоходов;
	
КонецФункции 

Функция ПолучитьСтруктуруПроверяемыхДанныхФизическихЛиц() Экспорт
	Возврат Новый Структура("ИНН, Адрес, Фамилия, Имя, ДатаРождения, АдресЗарубежом, СтатусНалогоплательщика, Гражданство");	
КонецФункции	

Функция ПолучитьПредставлениеПроверяемыхРеквизитовФизическихЛиц() Экспорт 
	ПредставленияПроверяемыхРеквизитов = Новый Структура;
	
	ПредставленияПроверяемыхРеквизитов.Вставить("ИНН", НСтр("ru = 'не заполнен ИНН'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("Адрес", НСтр("ru = 'не заполнен адрес'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("Фамилия", НСтр("ru = 'не указана фамилия'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("Имя", НСтр("ru = 'не указано имя'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ДатаРождения",   НСтр("ru = 'не заполнена дата рождения'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ВидДокумента", НСтр("ru = 'не указан вид документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("СерияДокумента", НСтр("ru = 'не заполнена серия документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("НомерДокумента", НСтр("ru = 'не заполнен номер документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ДатаВыдачи", НСтр("ru = 'не заполнена дата выдачи документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("КемВыдан", НСтр("ru = 'не указано кем выдан документ'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("СтатусНалогоплательщика",  НСтр("ru = 'не указан статус налогоплательщика'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("Гражданство",  НСтр("ru = 'не указано гражданство'"));
	
	Возврат ПредставленияПроверяемыхРеквизитов;
	
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовФормеОбъекта() Экспорт 
	СоответствиеРеквизитовФормеОбъекта = Новый Структура;
	СоответствиеРеквизитовФормеОбъекта.Вставить("Фамилия", "Наименование");
	СоответствиеРеквизитовФормеОбъекта.Вставить("Имя", "Наименование");
	СоответствиеРеквизитовФормеОбъекта.Вставить("ДатаРождения", "ДатаРождения");
	СоответствиеРеквизитовФормеОбъекта.Вставить("Адрес",  "");
	СоответствиеРеквизитовФормеОбъекта.Вставить("ВидДокумента", "ВидДокумента");
	СоответствиеРеквизитовФормеОбъекта.Вставить("СерияДокумента", "Серия");
	СоответствиеРеквизитовФормеОбъекта.Вставить("НомерДокумента", "Номер");
	СоответствиеРеквизитовФормеОбъекта.Вставить("ИНН", "ИНН");
	СоответствиеРеквизитовФормеОбъекта.Вставить("Гражданство", "ГражданствоФизическихЛицСтрана");
	СоответствиеРеквизитовФормеОбъекта.Вставить("СтатусНалогоплательщика",  ""); 
		
	Возврат СоответствиеРеквизитовФормеОбъекта;
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовПутиВФормеОбъекта() Экспорт
	СоответствиеРеквизитовПутиВФормеОбъекта = Новый Структура;
	
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Фамилия", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Имя", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Пол",   "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ДатаРождения",   "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ВидДокумента", "ДокументыФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("СерияДокумента", "ДокументыФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("НомерДокумента", "ДокументыФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ИНН", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Гражданство", "ГражданствоФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Адрес",  "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("АдресЗаРубежом",  "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("СтатусНалогоплательщика",  ""); 
	
	Возврат СоответствиеРеквизитовПутиВФормеОбъекта;
КонецФункции	

Функция ПоляТаблицыПоВидамВычетов() Экспорт

	// Определяем соответствие видов вычетов полям таблицы.
	ВидыВычетов = ВидыВычетовПоПолямТаблицы();
	ПоляТаблицы = Новый Соответствие;
	Для каждого КлючИЗначение Из ВидыВычетов Цикл
		ПоляТаблицы.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла; 
	
	Возврат ПоляТаблицы	

КонецФункции

#КонецОбласти

// Специфические алгоритмы чтения данных

Процедура СоздатьВТСтавкиНалогаЧислом(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК СтавкаНалогообложения,
	|	0.13 КАК Размер
	|ПОМЕСТИТЬ ВТСтавкиНалогаЧислом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09),
	|	0.09
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35),
	|	0.35
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30),
	|	0.3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15),
	|	0.15
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка05),
	|	0.05
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка10),
	|	0.1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка03),
	|	0.03
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка06),
	|	0.06
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка07),
	|	0.07
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка12),
	|	0.12";
	
	Запрос.Выполнить();

КонецПроцедуры

// Возвращает таблицу значений с данными об излишне удержанном НДФЛ (возможно, пустую).
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой получаем данные
//	ДатаАктуальности - Дата -
//	ФизическиеЛица - СправочникСсылка.ФизическиеЛица, Массив - необязательный, 
// 					если не задан - возвращаются все физлица, по которым есть переплата.
//  ДокументСсылка - ДокументСсылка - регистратор, движения которого исключаются из рассмотрения.
//
// Возвращаемое значение:
//	таблица значений с колонками:
//			Сотрудник: тип СправочникСсылка.ФизическиеЛица
//			НалоговыйПериод: тип Число 4 (год)
//			МесяцНалоговогоПериода: тип Дата
//  	    КатегорияДохода: тип ПеречислениеСсылка.КатегорииДоходовНДФЛ
//			РегистрацияВНалоговомОргане: тип СправочникСсылка.РегистрацииВНалоговомОргане
//			ПоСтавке13: тип Число
//			ПоСтавке09: тип Число
//			ПоСтавке35: тип Число
//  если данных о переплате в учете нет - возвращается пустая таблица значений.
Функция ДанныеОПереплатеПоНДФЛ(Организация, ДатаАктуальности, ФизическиеЛица = Неопределено, ДокументСсылка = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("РегистрацияОрганизации", ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаАктуальности));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП(Организация, Запрос.МенеджерВременныхТаблиц);	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.КатегорияДохода КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышенияОстаток КАК СуммаСПревышенияОстаток
	|ПОМЕСТИТЬ ВТРасчетыПоВсемСтавкам
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Остатки(
	|			&ДатаАктуальности,
	|			ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И &УсловиеДляФизлиц
	|				И РегистрацияВНалоговомОргане В
	|					(ВЫБРАТЬ
	|						РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП.РегистрацияВНалоговомОргане
	|					ИЗ
	|						ВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП КАК РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП)) КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.Сумма,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышения
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И &УсловиеДляФизлиц
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане В
	|			(ВЫБРАТЬ
	|				РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП.РегистрацияВНалоговомОргане
	|			ИЗ
	|				ВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП КАК РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.Регистратор = &Регистратор
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.Период <= &ДатаАктуальности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	ГОД(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышенияОстаток) КАК СуммаСПревышенияОстаток
	|ПОМЕСТИТЬ ВТПереплатаЗаНалоговыйПериод
	|ИЗ
	|	ВТРасчетыПоВсемСтавкам КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане,
	|	ГОД(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаОстаток) < 0
	|		ИЛИ СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышенияОстаток) < 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане = &РегистрацияОрганизации
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаОстаток) < 0
	|			ТОГДА -СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаОстаток)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОстаток,
	|	ВЫБОР
	|		КОГДА СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышенияОстаток) < 0
	|			ТОГДА -СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышенияОстаток)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСПревышенияОстаток,
	|	ГОД(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода, ГОД) КАК НачалоНалоговогоПериода,
	|	КОНЕЦПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода, ГОД) КАК ОкончаниеНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.КатегорияДохода КАК КатегорияДохода,
	|	ПереплатаЗаНалоговыйПериод.СуммаОстаток КАК СуммаЗаНалоговыйПериод,
	|	ПереплатаЗаНалоговыйПериод.СуммаСПревышенияОстаток КАК СуммаСПревышенияЗаНалоговыйПериод
	|ПОМЕСТИТЬ ВТПереплатаПоВсемСтавкам
	|ИЗ
	|	ВТРасчетыПоВсемСтавкам КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереплатаЗаНалоговыйПериод КАК ПереплатаЗаНалоговыйПериод
	|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо = ПереплатаЗаНалоговыйПериод.ФизическоеЛицо
	|			И РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане = ПереплатаЗаНалоговыйПериод.РегистрацияВНалоговомОргане
	|			И РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СтавкаНалогообложенияРезидента = ПереплатаЗаНалоговыйПериод.СтавкаНалогообложенияРезидента
	|			И (ГОД(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода) = ПереплатаЗаНалоговыйПериод.НалоговыйПериод)
	|ГДЕ
	|	ПереплатаЗаНалоговыйПериод.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане = &РегистрацияОрганизации
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.РегистрацияВНалоговомОргане
	|	КОНЕЦ,
	|	ПереплатаЗаНалоговыйПериод.СуммаОстаток,ПереплатаЗаНалоговыйПериод.СуммаСПревышенияОстаток,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.КатегорияДохода
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаОстаток) < 0
	|		ИЛИ СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛОстатки.СуммаСПревышенияОстаток) < 0)";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Запрос.Текст = СтрЗаменить(СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ",""), "&УсловиеДляФизлиц", "ФизическоеЛицо В(&ФизическиеЛица)");
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляФизлиц", "Истина");
	КонецЕсли;  
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат[0].Количество = 0 Тогда // Возвращаем пустую таблицу.
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ПереплатаПоВсемСтавкам.ФизическоеЛицо КАК Сотрудник,
		|	ПереплатаПоВсемСтавкам.НалоговыйПериод,
		|	ПереплатаПоВсемСтавкам.МесяцНалоговогоПериода,
		|	ПереплатаПоВсемСтавкам.РегистрацияВНалоговомОргане,
		|	0 КАК ПоСтавке13,
		|	0 КАК ПоСтавке13СПревышения,
		|	0 КАК ПоСтавке09,
		|	0 КАК ПоСтавке09СПревышения,
		|	0 КАК ПоСтавке35
		|ИЗ
		|	ВТПереплатаПоВсемСтавкам КАК ПереплатаПоВсемСтавкам";
		Возврат Запрос.Выполнить().Выгрузить()
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПереплатаПоВсемСтавкам.ФизическоеЛицо КАК Сотрудник,
	|	ПереплатаПоВсемСтавкам.НалоговыйПериод,
	|	ПереплатаПоВсемСтавкам.МесяцНалоговогоПериода,
	|	ПереплатаПоВсемСтавкам.КатегорияДохода,
	|	ПереплатаПоВсемСтавкам.НачалоНалоговогоПериода,
	|	ПереплатаПоВсемСтавкам.ОкончаниеНалоговогоПериода,
	|	ПереплатаПоВсемСтавкам.РегистрацияВНалоговомОргане,
	|	МАКСИМУМ(ЕСТЬNULL(ПереплатаПоСтавке13.СуммаЗаНалоговыйПериод, 0)) КАК ЗаНалоговыйПериодПоСтавке13,
	|	МАКСИМУМ(ЕСТЬNULL(ПереплатаПоСтавке13.СуммаСПревышенияЗаНалоговыйПериод, 0)) КАК ЗаНалоговыйПериодПоСтавке13СПревышения,
	|	МАКСИМУМ(ЕСТЬNULL(ПереплатаПоСтавке09.СуммаЗаНалоговыйПериод, 0)) КАК ЗаНалоговыйПериодПоСтавке09,
	|	МАКСИМУМ(ЕСТЬNULL(ПереплатаПоСтавке09.СуммаСПревышенияЗаНалоговыйПериод, 0)) КАК ЗаНалоговыйПериодПоСтавке09СПревышения,
	|	МАКСИМУМ(ЕСТЬNULL(ПереплатаПоСтавке35.СуммаЗаНалоговыйПериод, 0)) КАК ЗаНалоговыйПериодПоСтавке35,
	|	СУММА(ЕСТЬNULL(ПереплатаПоСтавке13.СуммаОстаток, 0)) КАК ПоСтавке13,
	|	СУММА(ЕСТЬNULL(ПереплатаПоСтавке13.СуммаСПревышенияОстаток, 0)) КАК ПоСтавке13СПревышения,
	|	СУММА(ЕСТЬNULL(ПереплатаПоСтавке09.СуммаОстаток, 0)) КАК ПоСтавке09,
	|	СУММА(ЕСТЬNULL(ПереплатаПоСтавке09.СуммаСПревышенияОстаток, 0)) КАК ПоСтавке09СПревышения,
	|	СУММА(ЕСТЬNULL(ПереплатаПоСтавке35.СуммаОстаток, 0)) КАК ПоСтавке35
	|ПОМЕСТИТЬ ВТПереплатаПоСотруднику
	|ИЗ
	|	ВТПереплатаПоВсемСтавкам КАК ПереплатаПоВсемСтавкам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереплатаПоВсемСтавкам КАК ПереплатаПоСтавке13
	|		ПО ПереплатаПоВсемСтавкам.РегистрацияВНалоговомОргане = ПереплатаПоСтавке13.РегистрацияВНалоговомОргане
	|			И ПереплатаПоВсемСтавкам.ФизическоеЛицо = ПереплатаПоСтавке13.ФизическоеЛицо
	|			И ПереплатаПоВсемСтавкам.КатегорияДохода = ПереплатаПоСтавке13.КатегорияДохода
	|			И (ПереплатаПоСтавке13.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13))
	|			И ПереплатаПоВсемСтавкам.НалоговыйПериод = ПереплатаПоСтавке13.НалоговыйПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереплатаПоВсемСтавкам КАК ПереплатаПоСтавке09
	|		ПО ПереплатаПоВсемСтавкам.РегистрацияВНалоговомОргане = ПереплатаПоСтавке09.РегистрацияВНалоговомОргане
	|			И ПереплатаПоВсемСтавкам.ФизическоеЛицо = ПереплатаПоСтавке09.ФизическоеЛицо
	|			И ПереплатаПоВсемСтавкам.КатегорияДохода = ПереплатаПоСтавке09.КатегорияДохода
	|			И (ПереплатаПоСтавке09.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09))
	|			И ПереплатаПоВсемСтавкам.НалоговыйПериод = ПереплатаПоСтавке09.НалоговыйПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереплатаПоВсемСтавкам КАК ПереплатаПоСтавке35
	|		ПО ПереплатаПоВсемСтавкам.РегистрацияВНалоговомОргане = ПереплатаПоСтавке35.РегистрацияВНалоговомОргане
	|			И ПереплатаПоВсемСтавкам.ФизическоеЛицо = ПереплатаПоСтавке35.ФизическоеЛицо
	|			И ПереплатаПоВсемСтавкам.КатегорияДохода = ПереплатаПоСтавке35.КатегорияДохода
	|			И (ПереплатаПоСтавке35.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35))
	|			И ПереплатаПоВсемСтавкам.НалоговыйПериод = ПереплатаПоСтавке35.НалоговыйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ПереплатаПоВсемСтавкам.НачалоНалоговогоПериода,
	|	ПереплатаПоВсемСтавкам.ОкончаниеНалоговогоПериода,
	|	ПереплатаПоВсемСтавкам.МесяцНалоговогоПериода,
	|	ПереплатаПоВсемСтавкам.КатегорияДохода,
	|	ПереплатаПоВсемСтавкам.ФизическоеЛицо,
	|	ПереплатаПоВсемСтавкам.РегистрацияВНалоговомОргане,
	|	ПереплатаПоВсемСтавкам.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПереплатаПоВсемСтавкам.Сотрудник КАК ФизическоеЛицо,
	|	ПереплатаПоВсемСтавкам.НачалоНалоговогоПериода КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТПереплатаПоСотруднику КАК ПереплатаПоВсемСтавкам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереплатаПоВсемСтавкам.Сотрудник КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПереплатаПоВсемСтавкам.ОкончаниеНалоговогоПериода < &ДатаАктуальности
	|			ТОГДА ПереплатаПоВсемСтавкам.ОкончаниеНалоговогоПериода
	|		ИНАЧЕ &ДатаАктуальности
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛицаОкончание
	|ИЗ
	|	ВТПереплатаПоСотруднику КАК ПереплатаПоВсемСтавкам";
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
		
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТФизическиеЛица", "ФизическоеЛицо");
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтатусФизическихЛицКакНалогоплательщиковНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛНаНачалоГода");
		
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТФизическиеЛицаОкончание", "ФизическоеЛицо");
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтатусФизическихЛицКакНалогоплательщиковНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛНаКонецПериода");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПереплатаПоВсемСтавкам.Сотрудник КАК Сотрудник,
	|	ПереплатаПоВсемСтавкам.НалоговыйПериод КАК НалоговыйПериод,
	|	ПереплатаПоВсемСтавкам.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ПереплатаПоВсемСтавкам.РегистрацияВНалоговомОргане,
	|	ПереплатаПоВсемСтавкам.КатегорияДохода,
	|	ПереплатаПоВсемСтавкам.ЗаНалоговыйПериодПоСтавке13,
	|	ПереплатаПоВсемСтавкам.ЗаНалоговыйПериодПоСтавке13СПревышения,
	|	ПереплатаПоВсемСтавкам.ЗаНалоговыйПериодПоСтавке09,
	|	ПереплатаПоВсемСтавкам.ЗаНалоговыйПериодПоСтавке09СПревышения,
	|	ПереплатаПоВсемСтавкам.ЗаНалоговыйПериодПоСтавке35,
	|	ПереплатаПоВсемСтавкам.ПоСтавке13,
	|	ПереплатаПоВсемСтавкам.ПоСтавке13СПревышения,
	|	ПереплатаПоВсемСтавкам.ПоСтавке09,
	|	ПереплатаПоВсемСтавкам.ПоСтавке09СПревышения,
	|	ПереплатаПоВсемСтавкам.ПоСтавке35
	|ИЗ
	|	ВТПереплатаПоСотруднику КАК ПереплатаПоВсемСтавкам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛНаКонецПериода КАК СтатусНаКонецПериода
	|		ПО ПереплатаПоВсемСтавкам.Сотрудник = СтатусНаКонецПериода.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛНаНачалоГода КАК СтатусНаНачалоГода
	|		ПО ПереплатаПоВсемСтавкам.Сотрудник = СтатусНаНачалоГода.ФизическоеЛицо
	|ГДЕ
	|	(ЕСТЬNULL(СтатусНаНачалоГода.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) <> ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|			ИЛИ ЕСТЬNULL(СтатусНаКонецПериода.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода УБЫВ";
	
	ТаблицаПереплат = Новый ТаблицаЗначений;
	ТаблицаПереплат.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПереплат.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Дата"));
	ТаблицаПереплат.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПереплат.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаПереплат.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	ТаблицаПереплат.Колонки.Добавить("ПоСтавке13", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПереплат.Колонки.Добавить("ПоСтавке13СПревышения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПереплат.Колонки.Добавить("ПоСтавке09", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПереплат.Колонки.Добавить("ПоСтавке09СПревышения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаПереплат.Колонки.Добавить("ПоСтавке35", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл
			
			ВсегоВозвратаПоСтавке13 = Выборка.ЗаНалоговыйПериодПоСтавке13;
			ВсегоВозвратаПоСтавке13СПревышения = Выборка.ЗаНалоговыйПериодПоСтавке13СПревышения;
			ВсегоВозвратаПоСтавке09 = Выборка.ЗаНалоговыйПериодПоСтавке09;
			ВсегоВозвратаПоСтавке09СПревышения = Выборка.ЗаНалоговыйПериодПоСтавке09СПревышения;
			ВсегоВозвратаПоСтавке35 = Выборка.ЗаНалоговыйПериодПоСтавке35;
			
			Пока Выборка.Следующий() Цикл	
				Если ВсегоВозвратаПоСтавке13 = 0 И ВсегоВозвратаПоСтавке09 = 0 И ВсегоВозвратаПоСтавке35 = 0 И ВсегоВозвратаПоСтавке13СПревышения = 0 И ВсегоВозвратаПоСтавке09СПревышения = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ВсегоВозвратаПоСтавке13 > 0 И Выборка.ПоСтавке13 > 0 Тогда
					СтрокаТЗ = ТаблицаПереплат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка, , "ПоСтавке09,ПоСтавке35,ПоСтавке13СПревышения,ПоСтавке09СПревышения");
					СтрокаТЗ.ПоСтавке13 = Мин(СтрокаТЗ.ПоСтавке13,ВсегоВозвратаПоСтавке13);
					ВсегоВозвратаПоСтавке13 = ВсегоВозвратаПоСтавке13 - СтрокаТЗ.ПоСтавке13;
				КонецЕсли;
				Если ВсегоВозвратаПоСтавке13СПревышения > 0 И Выборка.ПоСтавке13СПревышения > 0 Тогда
					СтрокаТЗ = ТаблицаПереплат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка, , "ПоСтавке13,ПоСтавке09,ПоСтавке35,ПоСтавке09СПревышения");
					СтрокаТЗ.ПоСтавке13СПревышения = Мин(СтрокаТЗ.ПоСтавке13СПревышения,ВсегоВозвратаПоСтавке13СПревышения);
					ВсегоВозвратаПоСтавке13СПревышения = ВсегоВозвратаПоСтавке13СПревышения - СтрокаТЗ.ПоСтавке13СПревышения;
				КонецЕсли;
				Если ВсегоВозвратаПоСтавке09 > 0 И Выборка.ПоСтавке09 > 0 Тогда
					СтрокаТЗ = ТаблицаПереплат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка, , "ПоСтавке13,ПоСтавке35,ПоСтавке13СПревышения,ПоСтавке09СПревышения");
					СтрокаТЗ.ПоСтавке09 = Мин(СтрокаТЗ.ПоСтавке09,ВсегоВозвратаПоСтавке09);
					ВсегоВозвратаПоСтавке09 = ВсегоВозвратаПоСтавке09 - СтрокаТЗ.ПоСтавке09;
				КонецЕсли;
				Если ВсегоВозвратаПоСтавке09СПревышения > 0 И Выборка.ПоСтавке09СПревышения > 0 Тогда
					СтрокаТЗ = ТаблицаПереплат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка, , "ПоСтавке13,ПоСтавке09,ПоСтавке35,ПоСтавке13СПревышения");
					СтрокаТЗ.ПоСтавке09СПревышения = Мин(СтрокаТЗ.ПоСтавке09СПревышения,ВсегоВозвратаПоСтавке09СПревышения);
					ВсегоВозвратаПоСтавке09СПревышения = ВсегоВозвратаПоСтавке09СПревышения - СтрокаТЗ.ПоСтавке09СПревышения;
				КонецЕсли;
				Если ВсегоВозвратаПоСтавке35 > 0 И Выборка.ПоСтавке35 > 0 Тогда
					СтрокаТЗ = ТаблицаПереплат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка, , "ПоСтавке09,ПоСтавке13,ПоСтавке13СПревышения,ПоСтавке09СПревышения");
					СтрокаТЗ.ПоСтавке35 = Мин(СтрокаТЗ.ПоСтавке35,ВсегоВозвратаПоСтавке35);
					ВсегоВозвратаПоСтавке35 = ВсегоВозвратаПоСтавке35 - СтрокаТЗ.ПоСтавке35;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаПереплат.Сортировать("Сотрудник, НалоговыйПериод, МесяцНалоговогоПериода, КатегорияДохода, РегистрацияВНалоговомОргане");
	ТаблицаПереплат.Свернуть("Сотрудник, НалоговыйПериод, МесяцНалоговогоПериода, КатегорияДохода, РегистрацияВНалоговомОргане", "ПоСтавке13,ПоСтавке13СПревышения,ПоСтавке09,ПоСтавке09СПревышения,ПоСтавке35");
	
	Возврат ТаблицаПереплат
	
КонецФункции

// Возвращает таблицу значений с данными о физических лицах, по которым требуется пересмотреть данные по НДФЛ
// (возможно, пустую).
//
// Параметры:
//	Организация - организация, по которой получаем данные.
//	МесяцПерерасчета - дата - месяц, в котором производится перерасчет.
//	НачалоПериода - дата - описывает пересчитываемый налоговый период.
//	ОкончаниеПериода - дата - описывает пересчитываемый налоговый период 
//	ФизическиеЛица: тип СправочникСсылка.ФизическиеЛица или массив значений типа СправочникСсылка.ФизическиеЛица 
//    необязательный, если не задан - возвращаются все физлица, по которым есть переплата.
//  ДокументСсылка - регистратор, движения которого исключаются из рассмотрения.
//
// Возвращаемое значение:
//	таблица значений с колонками:
//			ФизическоеЛицо: тип СправочникСсылка.ФизическиеЛица
//			МесяцНалоговогоПериода: тип дата.
//			Подразделение
//			КодВычетаЛичный
//			колонки рассчитанных ресурсов: 
//				ПримененныйВычетЛичный, 
//				ПримененныйВычетНаДетей, ПримененныйВычетНаДетейДвойной,
//				ПримененныйВычетНаДетейДвойнойВторой,  ПримененныйВычетНаТретьегоРебенка,
//				ПримененныйВычетНаТретьегоРебенкаДвойной, ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
//				ПримененныйВычетНаВторогоРебенка, ПримененныйВычетНаВторогоРебенкаДвойной,
//				ПримененныйВычетНаВторогоРебенкаДвойнойВторой, 
//				ПримененныйВычетНаДетейИнвалидов, ПримененныйВычетНаДетейИнвалидовДвойной, ПримененныйВычетНаДетейИнвалидовДвойнойВторой, 
//				ПримененныйВычетНаДетейОпекунов, ПримененныйВычетНаДетейДвойнойОпекунов,
//				ПримененныйВычетНаДетейДвойнойВторойОпекунов,  ПримененныйВычетНаТретьегоРебенкаОпекунов,
//				ПримененныйВычетНаТретьегоРебенкаДвойнойОпекунов, ПримененныйВычетНаТретьегоРебенкаДвойнойВторойОпекунов,
//				ПримененныйВычетНаВторогоРебенкаОпекунов, ПримененныйВычетНаВторогоРебенкаДвойнойОпекунов,
//				ПримененныйВычетНаВторогоРебенкаДвойнойВторойОпекунов, 
//				ПримененныйВычетНаДетейИнвалидовОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойОпекунов,ПримененныйВычетНаДетейИнвалидовДвойнойВторойОпекунов
//				ПримененныйВычетРасходыНаСвоеОбучение,ПримененныйВычетРасходыНаОбучениеДетей,ПримененныйВычетРасходыНаЛечение,ПримененныйВычетСтраховыеВзносыНаМедУслуги,ПримененныйВычетРасходыНаДорогостоящееЛечение,ПримененныйВычетВзносыНаДобровольноеСтрахованиеЖизни
//				ПримененныйВычетИмущественныйРасходы, ПримененныйВычетИмущественныйПроцентыПоКредитам, ПримененныйВычетИмущественныйПроцентыПриПерекредитовании
//				НалогПоСтавке13, НалогСПревышенияПоСтавке13, НалогПоСтавке09, НалогПоСтавке35,
//  	    	КатегорияДохода - ПеречислениеСсылка.КатегорииДоходовНДФЛ
//	если данных для перерасчета нет - возвращается пустая таблица значений.
//			
Функция ДанныеОПерерасчетеНДФЛ(Организация, МесяцПерерасчета, НачалоПериода, ОкончаниеПериода, ФизическиеЛица = Неопределено, ДокументСсылка = Неопределено) Экспорт
	
	ПараметрыРасчетаНДФЛПоПрогрессивнойШкале = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале();
	Если ОкончаниеПериода < ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале Тогда
		Возврат ДанныеОПерерасчетеНДФЛпоПлоскимСтавкам(Организация, МесяцПерерасчета, НачалоПериода, ОкончаниеПериода, ФизическиеЛица, ДокументСсылка)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДатаАктуальности", КонецМесяца(МесяцПерерасчета));
	Запрос.УстановитьПараметр("НачалоГодаПериодаРасчета", НачалоГода(НачалоПериода));
	Запрос.УстановитьПараметр("КонецМесяцаРасчета", КонецМесяца(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ПределПоПрогрессивнойШкале", ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.Предел);
	Запрос.УстановитьПараметр("НалогСПределаПоПрогрессивнойШкале", ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НалогСПредела);
	Запрос.УстановитьПараметр("СтавкаЧисломПоПрогрессивнойШкале", ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.СтавкаЧислом);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП(Организация, Запрос.МенеджерВременныхТаблиц);	
	
    ТекстЗапроса =
	"ВЫБРАТЬ
	|	Обороты.СуммаДохода КАК СуммаДохода,
	|	Обороты.СуммаВычета КАК СуммаВычета,
	|	Обороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Обороты.ДатаПолученияДохода КАК Период,
	|	Обороты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Обороты.КатегорияДохода КАК КатегорияДохода,
	|	Обороты.КодДохода КАК КодДохода,
	|	Обороты.КодДохода.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Обороты.Подразделение КАК Подразделение,
	|	Обороты.ДатаПолученияДохода КАК ДатаПолученияДохода
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК Обороты
	|ГДЕ
	|	Обороты.Период <= &ДатаАктуальности
	|	И Обороты.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И НЕ Обороты.КодДохода.НеОблагаетсяУНалоговогоАгента
	|	И Обороты.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецМесяцаРасчета
	|	И &УсловиеДляФизлиц
	|	И Обороты.РегистрацияВНалоговомОргане В
	|			(ВЫБРАТЬ
	|				РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП.РегистрацияВНалоговомОргане
	|			ИЗ
	|				ВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП КАК РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП)";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляФизлиц", "ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляФизлиц", "Истина") + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Обороты.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТДоходы КАК Обороты
		|ГДЕ
		|	Обороты.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)";
		ФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	КонецЕсли;
	
	РезультатРасчетаНДФЛ = РассчитатьНалогПоОсновнойСтавке(ДокументСсылка, Организация, МесяцПерерасчета, ФизическиеЛица, НачалоПериода, ОкончаниеПериода);
	
	РезультатРасчетаНДФЛ.Колонки.Добавить("НалогПоСтавке09", Новый ОписаниеТипов("Число"));
	РезультатРасчетаНДФЛ.Колонки.Добавить("НалогПоСтавке35", Новый ОписаниеТипов("Число"));
	РезультатРасчетаНДФЛ.Колонки.Добавить("ЗачтеноАвансовыхПлатежейПоСтавке35", Новый ОписаниеТипов("Число"));
	
	СоздатьВТСтавкаНДФЛПоСтавкеРезидента(Запрос.МенеджерВременныхТаблиц, "ВТДоходы", "УчитыватьИзмененияСтатусаДляРасчета");
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(Доходы.Период) КАК ПоздняяДатаПолученияДохода,
	|	Доходы.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Доходы.КатегорияДохода КАК КатегорияДохода
	|ПОМЕСТИТЬ ВТСписокФизЛиц
	|ИЗ
	|	ВТДоходы КАК Доходы
	|ГДЕ
	|	Доходы.СтавкаНалогообложенияРезидента <> ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	Доходы.СтавкаНалогообложенияРезидента,
	|	Доходы.КатегорияДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокФизЛиц.ПоздняяДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СписокФизЛиц.КатегорияДохода КАК КатегорияДохода
	|ПОМЕСТИТЬ ВТРезидентыСДивидендами
	|ИЗ
	|	ВТСписокФизЛиц КАК СписокФизЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
	|		ПО СписокФизЛиц.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
	|			И СписокФизЛиц.ПоздняяДатаПолученияДохода = СтавкаНДФЛПоСтавкеРезидента.Период
	|			И СписокФизЛиц.СтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
	|			И СписокФизЛиц.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
	|ГДЕ
	|	СписокФизЛиц.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.Дивиденды)
	|	И СтавкаНДФЛПоСтавкеРезидента.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСБюджетом.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|				ТОГДА РасчетыСБюджетом.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НалогПоСтавке09,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетом.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|				ТОГДА РасчетыСБюджетом.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НалогПоСтавке35,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСБюджетом.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.Дивиденды)
	|				ТОГДА РасчетыСБюджетом.СуммаСПревышения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НалогСПревышенияПоСтавке13,
	|	РасчетыСБюджетом.Подразделение КАК Подразделение,
	|	РасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыСБюджетом.КатегорияДохода КАК КатегорияДохода
	|ПОМЕСТИТЬ ВТРанееНачисленныеНалоги
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыСБюджетом
	|ГДЕ
	|	РасчетыСБюджетом.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыСБюджетом.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.ФизическоеЛицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК СписокФизЛиц)
	|	И РасчетыСБюджетом.Период <= &ДатаАктуальности
	|	И РасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецМесяцаРасчета
	|	И РасчетыСБюджетом.Регистратор <> &Регистратор
	|	И РасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыСБюджетом.СтавкаНалогообложенияРезидента <> ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И РасчетыСБюджетом.РегистрацияВНалоговомОргане В
	|			(ВЫБРАТЬ
	|				РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП.РегистрацияВНалоговомОргане
	|			ИЗ
	|				ВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП КАК РегистрацииВНалоговомОрганеОрганизацииОКАТОКПП)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСБюджетом.ФизическоеЛицо,
	|	РасчетыСБюджетом.Подразделение,
	|	РасчетыСБюджетом.МесяцНалоговогоПериода,
	|	РасчетыСБюджетом.КатегорияДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.Подразделение КАК Подразделение,
	|	Доходы.КатегорияДохода КАК КатегорияДохода,
	|	Доходы.ДатаПолученияДохода КАК МесяцНалоговогоПериода,
	|	ВЫРАЗИТЬ((Доходы.СуммаДохода - Доходы.СуммаВычета) * ВЫБОР
	|			КОГДА Доходы.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|				ТОГДА СтавкаНДФЛПоСтавкеРезидента.СтавкаЧислом
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(10, 0)) КАК НалогПоСтавке09,
	|	ВЫРАЗИТЬ((Доходы.СуммаДохода - Доходы.СуммаВычета) * ВЫБОР
	|			КОГДА Доходы.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|				ТОГДА СтавкаНДФЛПоСтавкеРезидента.СтавкаЧислом
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(10, 0)) КАК НалогПоСтавке35,
	|	0 КАК НалогСПревышенияПоСтавке13
	|ПОМЕСТИТЬ ВТНалоги
	|ИЗ
	|	ВТДоходы КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента
	|		ПО Доходы.ФизическоеЛицо = СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо
	|			И Доходы.Период = СтавкаНДФЛПоСтавкеРезидента.Период
	|			И Доходы.СтавкаНалогообложенияРезидента = СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента
	|			И Доходы.КатегорияДохода = СтавкаНДФЛПоСтавкеРезидента.КатегорияДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентыСДивидендами КАК РезидентыСДивидендами
	|		ПО Доходы.КатегорияДохода = РезидентыСДивидендами.КатегорияДохода
	|			И Доходы.ФизическоеЛицо = РезидентыСДивидендами.ФизическоеЛицо
	|ГДЕ
	|	Доходы.СтавкаНалогообложенияРезидента <> ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И РезидентыСДивидендами.ФизическоеЛицо ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	|	Доходы.КатегорияДохода,
	|	РезидентыСДивидендами.ДатаПолученияДохода,
	|	ВЫБОР
	|		КОГДА СУММА(Доходы.СуммаДохода) <= &ПределПоПрогрессивнойШкале
	|			ТОГДА ВЫРАЗИТЬ(СУММА(Доходы.СуммаДохода) * 0.13 КАК ЧИСЛО(10, 0))
	|		ИНАЧЕ &НалогСПределаПоПрогрессивнойШкале
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА СУММА(Доходы.СуммаДохода) <= &ПределПоПрогрессивнойШкале
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ((СУММА(Доходы.СуммаДохода) - &ПределПоПрогрессивнойШкале) * &СтавкаЧисломПоПрогрессивнойШкале КАК ЧИСЛО(10, 0))
	|	КОНЕЦ
	|ИЗ
	|	ВТДоходы КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентыСДивидендами КАК РезидентыСДивидендами
	|		ПО Доходы.КатегорияДохода = РезидентыСДивидендами.КатегорияДохода
	|			И Доходы.ФизическоеЛицо = РезидентыСДивидендами.ФизическоеЛицо
	|ГДЕ
	|	РезидентыСДивидендами.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	Доходы.КатегорияДохода,
	|	РезидентыСДивидендами.ДатаПолученияДохода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РанееНачисленныеНалоги.ФизическоеЛицо,
	|	РанееНачисленныеНалоги.Подразделение,
	|	РанееНачисленныеНалоги.КатегорияДохода,
	|	ЕСТЬNULL(РезидентыСДивидендами.ДатаПолученияДохода, РанееНачисленныеНалоги.МесяцНалоговогоПериода),
	|	-РанееНачисленныеНалоги.НалогПоСтавке09,
	|	-РанееНачисленныеНалоги.НалогПоСтавке35,
	|	-РанееНачисленныеНалоги.НалогСПревышенияПоСтавке13
	|ИЗ
	|	ВТРанееНачисленныеНалоги КАК РанееНачисленныеНалоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентыСДивидендами КАК РезидентыСДивидендами
	|		ПО РанееНачисленныеНалоги.КатегорияДохода = РезидентыСДивидендами.КатегорияДохода
	|			И РанееНачисленныеНалоги.ФизическоеЛицо = РезидентыСДивидендами.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.Подразделение КАК Подразделение,
	|	Налоги.КатегорияДохода КАК КатегорияДохода,
	|	Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(Налоги.НалогПоСтавке09) КАК НалогПоСтавке09,
	|	СУММА(Налоги.НалогПоСтавке35) КАК НалогПоСтавке35,
	|	СУММА(Налоги.НалогСПревышенияПоСтавке13) КАК НалогСПревышенияПоСтавке13,
	|	0 КАК ЗачтеноАвансовыхПлатежейПоСтавке35
	|ИЗ
	|	ВТНалоги КАК Налоги
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ФизическоеЛицо,
	|	Налоги.Подразделение,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.КатегорияДохода
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Налоги.НалогПоСтавке09) <> 0
	|		ИЛИ СУММА(Налоги.НалогПоСтавке35) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат РезультатРасчетаНДФЛ
	КонецЕсли;
	
	НалогПоСтавкам09и35 = Результат.Выгрузить();
	
	ВписатьВРезультатЗачтенныеАвансы(ДокументСсылка, Организация, МесяцПерерасчета, НалогПоСтавкам09и35, Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35, "НалогПоСтавке35", "ЗачтеноАвансовыхПлатежейПоСтавке35");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НалогПоСтавкам09и35, РезультатРасчетаНДФЛ);
	
	Возврат РезультатРасчетаНДФЛ
	
КонецФункции 

Функция ДанныеУведомленийНаЗачетАвансовыхПлатежей(Сотрудники, НалоговыйПериод, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГодНП", НалоговыйПериод);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей.ДатаУведомления КАК ДатаУведомления,
	|	РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей.КодНалоговогоОргана КАК КодНалоговогоОрганаУведомления,
	|	РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей.НомерУведомления КАК НомерУведомления,
	|	РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей КАК РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей
	|ГДЕ
	|	РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей.ФизическоеЛицо В(&Сотрудники)
	|	И РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РеквизитыУведомленияИФНСНаЗачетАвансовыхПлатежей.Год = &ГодНП";
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Функция ДанныеУведомленийНаВычеты(Сотрудники, НалоговыйПериод, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГодНП", НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецНП", КонецГода(Дата(НалоговыйПериод, 1, 1))); 
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК Сотрудник,
	|	УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.ДатаУведомления КАК ДатаУведомления,
	|	УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОрганаУведомления,
	|	УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.НомерУведомления КАК НомерУведомления,
	|	ВЫБОР
	|		КОГДА УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.ПроцентыПриПерекредитовании + УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.ПроцентыПоКредитам + УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.РасходыНаСтроительствоПриобретение <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|	КОНЕЦ КАК ГруппаВычета
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК УведомлениеОПравеНаИмущественныйВычетДляНДФЛ
	|		ПО ИмущественныеВычетыНДФЛ.Регистратор = УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Ссылка
	|			И ИмущественныеВычетыНДФЛ.ФизическоеЛицо = УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Сотрудник
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо В(&Сотрудники)
	|	И ИмущественныеВычетыНДФЛ.Период < &КонецНП
	|	И ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ИмущественныеВычетыНДФЛ.Год = &ГодНП
	|	И ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Ссылка ЕСТЬ НЕ NULL ";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

// Дополняет данные о ставке налогообложения, используемой для резидентов РФ, 
// сведениями о реальной ставке обложения с учетом налогового статуса физического лица.
// В менеджер временных таблиц помещается таблица ВТСтавкаНДФЛПоСтавкеРезидента 
// (или с иным именем - см. ИмяТаблицыРезультата) с уникальными записями с полями:
//		ФизическоеЛицо.
//		Период, переданная на вход дата
//    	КатегорияДохода, тип ПеречислениеСсылка.КатегорииДоходовНДФЛ
//		СтавкаНалогообложенияРезидента, тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента
//		Статус, тип СправочникСсылка.СтатусыНалогоплательщиковПоНДФЛ
//		СтавкаНДФЛ, тип ПеречислениеСсылка.НДФЛСтавки
//		СтавкаЧислом, тип Число, например, 0.13.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицу с полями:
//		ФизическоеЛицо
//		Период, дата на которую будет определен статус налогоплательщика
//    	КатегорияДохода, тип ПеречислениеСсылка.КатегорииДоходовНДФЛ: должно быть непустым
//		СтавкаНалогообложенияРезидента, тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента.
//	ИмяТаблицы - строка - имя обрабатываемой временной таблицы.
//	УчитыватьСтатусНаКонецГода - строка - необязательный, описание того, как следует учитывать изменение 
//		статуса на конец налогового периода, возможные значения:
//			"НеУчитыватьИзмененияСтатуса" (значение по умолчанию)
//			"УчитыватьИзмененияСтатусаДляРасчета"
//			"УчитыватьИзмененияСтатусаДляОтчетности"
//	ОкончаниеОтчетногоПериода - Дата - необязательный, значение будет учитываться в определение периода на которую будет определен статус налогоплательщика если необходимо учитывать изменение статуса
//	ИмяТаблицыРезультата - строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТСтавкаНДФЛПоСтавкеРезидента(МенеджерВременныхТаблиц, ИмяТаблицы = "ВТСтрокиУчета", УчитыватьСтатусНаКонецГода = "НеУчитыватьИзмененияСтатуса", ОкончаниеОтчетногоПериода = '00010101', ИмяТаблицыРезультата = "ВТСтавкаНДФЛПоСтавкеРезидента") Экспорт
	
	Если ЗарплатаКадры.ВыполнятьРасчетЗарплатыБезОптимизации() Тогда
		
		СоздатьВТСтавкаНДФЛПоСтавкеРезидентаБезОптимизации(МенеджерВременныхТаблиц, ИмяТаблицы, УчитыватьСтатусНаКонецГода, ОкончаниеОтчетногоПериода, ИмяТаблицыРезультата)
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаНДФЛ.Период КАК ДатаПолученияДохода,
		|	ТаблицаНДФЛ.КатегорияДохода КАК КатегорияДохода,
		|	ТаблицаНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
		|ИЗ
		|	#ТаблицаНДФЛ КАК ТаблицаНДФЛ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ДатаПолученияДохода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаНДФЛ.Период) КАК ПоследнийМесяцНалоговогоПериода,
		|	МИНИМУМ(ТаблицаНДФЛ.Период) КАК ПервыйМесяцНалоговогоПериода
		|ИЗ
		|	#ТаблицаНДФЛ КАК ТаблицаНДФЛ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНДФЛ", ИмяТаблицы);
		Если МенеджерВременныхТаблиц.Таблицы[ИмяТаблицы].Колонки.Найти("КатегорияДохода") = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНДФЛ.КатегорияДохода", "ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций)");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Результаты = Запрос.ВыполнитьПакет();
		ДанныеУчета = Результаты[0].Выгрузить();
		Выборка = Результаты[1].Выбрать();
		Выборка.Следующий();
		
		ДополнитьДанныеУчетаСтавками(ДанныеУчета, УчитыватьСтатусНаКонецГода, ОкончаниеОтчетногоПериода, , Выборка.ПервыйМесяцНалоговогоПериода, Выборка.ПоследнийМесяцНалоговогоПериода);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСоСтавками.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаСоСтавками.Статус КАК Статус,
		|	ТаблицаСоСтавками.ДатаПолученияДохода КАК Период,
		|	ТаблицаСоСтавками.КатегорияДохода КАК КатегорияДохода,
		|	ТаблицаСоСтавками.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	ТаблицаСоСтавками.СтавкаНДФЛ КАК СтавкаНДФЛ,
		|	ТаблицаСоСтавками.СтавкаЧислом КАК СтавкаЧислом
		|ПОМЕСТИТЬ ВТСтавкаНДФЛПоСтавкеРезидента
		|ИЗ
		|	&ДополненныеДанныеУчета КАК ТаблицаСоСтавками";
		Если ИмяТаблицыРезультата <> "ВТСтавкаНДФЛПоСтавкеРезидента" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСтавкаНДФЛПоСтавкеРезидента", ИмяТаблицыРезультата);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДополненныеДанныеУчета", ДанныеУчета);
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Предназначена для дополнения рассчитанных сумм НДФЛ информацией о суммах подлежащих зачету авансовых платежей.
// Параметры:
//      Регистратор - ДокументСсылка - регистратор, для которого выполняется обработка исчисленного НДФЛ.
//		Организация - СправочникСсылка.Организации -
//		МесяцРасчета
//		РезультатыРасчетов - ТаблицаЗначений - с колонками
//				ФизическоеЛицо: должно быть непустым
//				МесяцНалоговогоПериода: должно быть непустым
//				Подразделение: тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации
//              колонки сумм исчисленного налога и сумм авансов к зачету, их имена передаются дополнительно
//				может содержать другие колонки
//		СтавкаНалога - ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента
//		ИмяКолонкиНалогаИсчисленного - строка -
//		ИмяКолонкиАвансаЗачтенного - строка -
//		ИсключатьДвиженияРегистратора - булево - признак того, надо ли при расчете исключать движения.
//
Процедура ВписатьВРезультатЗачтенныеАвансы(Регистратор, Организация, МесяцРасчета, РезультатыРасчетов, СтавкаНалога, ИмяКолонкиНалогаИсчисленного, ИмяКолонкиАвансаЗачтенного, ИсключатьДвиженияРегистратора = Истина, МенеджерВременныхТаблиц = Неопределено) Экспорт 

	Если МесяцРасчета < ДатаИзмененияНалогообложенияДивидендов() Тогда
		Возврат
	КонецЕсли;
	
	ВсегоИсчислено = РезультатыРасчетов.Скопировать(, "ФизическоеЛицо, МесяцНалоговогоПериода, " + ИмяКолонкиНалогаИсчисленного);
	Если ВсегоИсчислено.Колонки.Найти("НалоговыйПериод") <> Неопределено Тогда
		ВсегоИсчислено.Колонки.Удалить("НалоговыйПериод");
	КонецЕсли;
	ВсегоИсчислено.Колонки.Добавить("НалоговыйПериод");
	
	Для Каждого СтрокаРезультата Из ВсегоИсчислено Цикл
		СтрокаРезультата.НалоговыйПериод = Год(СтрокаРезультата.МесяцНалоговогоПериода);
	КонецЦикла;
	
	ВсегоИсчислено.Свернуть("ФизическоеЛицо, НалоговыйПериод", ИмяКолонкиНалогаИсчисленного);
	ВсегоИсчислено.Колонки[ИмяКолонкиНалогаИсчисленного].Имя = "Исчислено";
	
	КоличествоСтрок = ВсегоИсчислено.Количество();
	МинимальныйГод = 3999;
	МаксимальныйГод = 0;
	Для ИндексСтроки = 1 По КоличествоСтрок Цикл
		СтрокаРезультата = ВсегоИсчислено[КоличествоСтрок - ИндексСтроки];
		Если СтрокаРезультата.Исчислено <= 0 Тогда
			ВсегоИсчислено.Удалить(СтрокаРезультата);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРезультата.НалоговыйПериод > МаксимальныйГод Тогда
			МаксимальныйГод = СтрокаРезультата.НалоговыйПериод;
		КонецЕсли;
		
		Если СтрокаРезультата.НалоговыйПериод < МинимальныйГод Тогда
			МинимальныйГод = СтрокаРезультата.НалоговыйПериод;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокФизическихЛиц = ВсегоИсчислено.ВыгрузитьКолонку("ФизическоеЛицо");
	
	Запрос = Новый Запрос;
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;	
	
	ЗарплатаКадры.СоздатьПустуюВТ(Запрос.МенеджерВременныхТаблиц, "РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ");
	
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ?(ИсключатьДвиженияРегистратора, Регистратор, Неопределено));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("МинимальныйГод", МинимальныйГод);
	Запрос.УстановитьПараметр("МаксимальныйГод",МаксимальныйГод);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("КонецМесяцаРасчета",КонецМесяца(МесяцРасчета) + 1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Авансы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Авансы.НалоговыйПериод КАК НалоговыйПериод,
	|	СУММА(Авансы.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.Год КАК НалоговыйПериод,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.СуммаОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ.Остатки(
	|				&КонецМесяцаРасчета,
	|				ФизическоеЛицо В (&СписокФизическихЛиц)
	|					И (Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод)
	|					И ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК АвансовыеПлатежиИностранцевПоНДФЛОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизическоеЛицо,
	|		ДвиженияРегистратора.Год,
	|		ВЫБОР
	|			КОГДА ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияРегистратора.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Регистратор = &ИсключаемыйРегистратор
	|		И ДвиженияРегистратора.Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизическоеЛицо,
	|		ДвиженияРегистратора.Год,
	|		ВЫБОР
	|			КОГДА ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ДвиженияРегистратора.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ВТРегистрНакопления_АвансовыеПлатежиИностранцевПоНДФЛ КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод
	|		И ДвиженияРегистратора.ФизическоеЛицо В(&СписокФизическихЛиц)) КАК Авансы
	|
	|СГРУППИРОВАТЬ ПО
	|	Авансы.ФизическоеЛицо,
	|	Авансы.НалоговыйПериод
	|
	|ИМЕЮЩИЕ
	|	СУММА(Авансы.Остаток) > 0";
		
	Авансы = Запрос.Выполнить().Выгрузить();
	
	Если Авансы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Авансы.Индексы.Добавить("ФизическоеЛицо, НалоговыйПериод");
	ВсегоИсчислено.Индексы.Добавить("ФизическоеЛицо, НалоговыйПериод");
	
	РезультатыРасчетов.Сортировать("ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение");
	
	СуммаКЗачету = 0;
	НалоговыйПериод = 0; ФизическоеЛицо = Неопределено;
	ПараметрыОтбора = Новый Структура("ФизическоеЛицо, НалоговыйПериод");
	Для Каждого СтрокаТЗ Из РезультатыРасчетов Цикл
		
		Если ФизическоеЛицо <> СтрокаТЗ.ФизическоеЛицо Или НалоговыйПериод <> Год(СтрокаТЗ.МесяцНалоговогоПериода) Тогда
			ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
			НалоговыйПериод = Год(СтрокаТЗ.МесяцНалоговогоПериода);
			
			ПараметрыОтбора.ФизическоеЛицо = ФизическоеЛицо;
			ПараметрыОтбора.НалоговыйПериод = НалоговыйПериод;
			
			СтрокиАвансов = Авансы.НайтиСтроки(ПараметрыОтбора);
			СтрокиИсчислено = ВсегоИсчислено.НайтиСтроки(ПараметрыОтбора);
			
			СуммаАвансов = ?(СтрокиАвансов.Количество() > 0, СтрокиАвансов[0].Остаток, 0);
			СуммаИсчислено = ?(СтрокиИсчислено.Количество() > 0, СтрокиИсчислено[0].Исчислено, 0);
			
			Если СуммаИсчислено > СуммаАвансов Тогда
				СуммаКЗачету = СуммаАвансов;
			Иначе
				СуммаКЗачету = СуммаИсчислено;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаКЗачету = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЗ[ИмяКолонкиНалогаИсчисленного] * СуммаКЗачету > 0 Тогда
			Если СуммаКЗачету > 0 Тогда
				СтрокаТЗ[ИмяКолонкиАвансаЗачтенного] = Мин(СтрокаТЗ[ИмяКолонкиНалогаИсчисленного],СуммаКЗачету);
			Иначе
				СтрокаТЗ[ИмяКолонкиАвансаЗачтенного] = Макс(СтрокаТЗ[ИмяКолонкиНалогаИсчисленного],СуммаКЗачету);
			КонецЕсли;
			СуммаКЗачету = СуммаКЗачету - СтрокаТЗ[ИмяКолонкиАвансаЗачтенного];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВписатьТекстПолученияЗначенияСтавкиНДФЛЧислом(ТекстЗапроса, Знач ПодстрокаПоиска, Знач СинонимТаблицы, Знач ИмяПоляСтавки) Экспорт
	
	ПодстрокаЗамены = 
	"ВЫБОР
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка03)
	| ТОГДА 0.03
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка05)
	| ТОГДА 0.05
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка06)
	| ТОГДА 0.06
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка07)
	| ТОГДА 0.07
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	| ТОГДА 0.09
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка10)
	| ТОГДА 0.1
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка12)
	| ТОГДА 0.12
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	| ТОГДА 0.13
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	| ТОГДА 0.15
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	| ТОГДА 0.3
	|КОГДА ТаблицаНДФЛ.СтавкаНДФЛ = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	| ТОГДА 0.35
	|КОНЕЦ";
	ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "ТаблицаНДФЛ.СтавкаНДФЛ", СокрЛП(СинонимТаблицы) + "." + СокрЛП(ИмяПоляСтавки));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены);
	
КонецПроцедуры

Функция ДанныеОРезультатахРасчетаНДФЛДляДокумента(ТаблицаИсточник) Экспорт

	ДанныеОРезультатахРасчета = Новый Структура(
		"НДФЛ, 
		|ПримененныеВычетыНаДетейИИмущественные");
		
	ОписаниеКолонок = ОписаниеКолонокТаблицыНДФЛ(ТаблицаИсточник);
	СтруктураПоискаВычетов = Новый Структура(ОписаниеКолонок.КолонкиПоиска);
	
	ИсточникСИндексами = ТаблицаИсточник.Скопировать();
	ИсточникСИндексами.Индексы.Добавить(ОписаниеКолонок.КолонкиСвязиТаблиц);
	ИсточникСИндексами.Индексы.Добавить(ОписаниеКолонок.КолонкиПоиска);
	
	НДФЛ = ТаблицаНДФЛбезМесяцаПериодаПредоставленияВычета(ИсточникСИндексами, ОписаниеКолонок);
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
		СтрокаНДФЛ.Налог = СтрокаНДФЛ.НалогПоСтавке13;
		СтрокаНДФЛ.ЗачтеноАвансовыхПлатежей = СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
		СтрокаНДФЛ.НалогСПревышения = СтрокаНДФЛ.НалогСПревышенияПоСтавке13;
		СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышения = СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13;
		СтрокаНДФЛ.ПримененныйВычетЛичныйКодВычета = СтрокаНДФЛ.КодВычетаЛичный;
		СтрокаНДФЛ.Сумма = СтрокаНДФЛ.НалогПоСтавке13 - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
		СтрокаНДФЛ.СуммаСПревышения = СтрокаНДФЛ.НалогСПревышенияПоСтавке13 - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13;
	КонецЦикла;
	ДанныеОРезультатахРасчета.НДФЛ = НДФЛ;
	
	// Определяем соответствие видов вычетов полям таблицы.
	ВидыВычетов = ВидыВычетовПоПолямТаблицы();
	
	ПримененныеВычетыНаДетейИИмущественные = ТаблицаПримененныеВычетыНДФЛ();
	// Заполняем таблицу ПримененныеВычетыНаДетейИИмущественные: 
	// для каждой строки НДФЛ добавляем столько отдельных строк, сколько вычетов было применено.
	Для Каждого СтрокаНДФЛ Из НДФЛ Цикл
		СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ = НДФЛ.Индекс(СтрокаНДФЛ);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаВычетов,СтрокаНДФЛ);
		СтрокиВычетов = ИсточникСИндексами.НайтиСтроки(СтруктураПоискаВычетов);
		Для каждого СтрокаВычета Из СтрокиВычетов Цикл
			Для Каждого КлючИЗначение Из ВидыВычетов Цикл
				ИмяПоля = КлючИЗначение.Ключ;
				КодВычета = КлючИЗначение.Значение;
				Если ЗначениеЗаполнено(СтрокаВычета[ИмяПоля]) Тогда
					СтрокаВычетов = ПримененныеВычетыНаДетейИИмущественные.Добавить();
					СтрокаВычетов.ИдентификаторСтрокиНДФЛ = СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ;
					СтрокаВычетов.МесяцПериодаПредоставленияВычета = СтрокаВычета.МесяцПериодаПредоставленияВычета;
					СтрокаВычетов.КодВычета = КодВычета;
					СтрокаВычетов.РазмерВычета = СтрокаВычета[ИмяПоля];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеОРезультатахРасчета.ПримененныеВычетыНаДетейИИмущественные = ПримененныеВычетыНаДетейИИмущественные;
	
	Возврат ДанныеОРезультатахРасчета;

КонецФункции

// Чтение учетной политики

Функция КоронавирусныеНерабочиеДни(Организация)

	СчитатьНерабочиеДниКарантинаРабочими = Новый Структура("ИгнорироватьДниС30МартаПо3Апреля, ИгнорироватьДниС4По30Апреля, ИгнорироватьДниС6По8Мая", Ложь, Ложь, Ложь);
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗаполнитьЗначенияСвойств(СчитатьНерабочиеДниКарантинаРабочими,
			РегистрыСведений.УчетнаяПолитикаПоНДФЛ.Получить(Новый Структура("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация))));
	КонецЕсли;
	Возврат СчитатьНерабочиеДниКарантинаРабочими

КонецФункции 

// Специфические алгоритмы чтения данных

Процедура СоздатьВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП(Организация, МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КПП КАК КПП,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана
	|ПОМЕСТИТЬ ВТРегистрацииВНалоговомОрганеОрганизацииОКАТОКПП
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ВЫРАЗИТЬ(ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница КАК Справочник.ПодразделенияОрганизаций).Владелец = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КодПоОКАТО,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КодПоОКТМО,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КПП,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.Код
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация";
	
	Запрос.Выполнить();

КонецПроцедуры 

// Помещает данные о вычетах сотрудника во временную таблицу.
//
// Параметры:
//	МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицу с полями:
//		ФизическоеЛицо
//		Период - дата, на которую получаем действующие по физ. лицу вычеты.
//	ИмяВременнойТаблицыОтбора - имя временной таблицы с параметрами "среза".
//
// В результате в менеджер временных таблиц помещается таблица
//	ВТСтандартныеВычетыПоНДФЛЗаПериод с полями
//		ФизическоеЛицо
//		КодВычета.
//		Месяц - месяц на который получены действующие вычеты.
//		Основание
//		ЛичныйВычет - булево, данный признак отличает вычеты на детей от личных вычетов.
Процедура СоздатьВТСтандартныеВычетыПоНДФЛЗаПериод(МенеджерВременныхТаблиц, ТолькоРазрешенные, ДатаАктуальности, ИмяВременнойТаблицыОтбора = "ВТПериодыФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПериодыФизическихЛиц.Период КАК Месяц,
	|	СтандартныеВычетыПоНДФЛВторичный.КодВычета КАК КодВычета,
	|	СтандартныеВычетыПоНДФЛВторичный.Количество КАК Количество,
	|	СтандартныеВычетыПоНДФЛВторичный.Основание КАК Основание,
	|	СтандартныеВычетыПоНДФЛВторичный.ЛичныйВычет КАК ЛичныйВычет
	|ПОМЕСТИТЬ ВТСтандартныеВычетыПоНДФЛЗаПериод
	|ИЗ
	|	ВТПериодыФизическихЛиц КАК ПериодыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтандартныеВычетыПоНДФЛВторичный КАК СтандартныеВычетыПоНДФЛВторичный
	|		ПО ПериодыФизическихЛиц.ФизическоеЛицо = СтандартныеВычетыПоНДФЛВторичный.ФизическоеЛицо
	|			И (ПериодыФизическихЛиц.Период МЕЖДУ СтандартныеВычетыПоНДФЛВторичный.ДатаНачала И СтандартныеВычетыПоНДФЛВторичный.ДатаОкончания)
	|			И (ВЫБОР
	|				КОГДА СтандартныеВычетыПоНДФЛВторичный.ЛичныйВычет
	|					ТОГДА &ДатаАктуальности
	|				КОГДА ПериодыФизическихЛиц.Период > &ДатаАктуальности
	|					ТОГДА &ДатаАктуальности
	|				ИНАЧЕ ПериодыФизическихЛиц.Период
	|			КОНЕЦ МЕЖДУ СтандартныеВычетыПоНДФЛВторичный.ПериодРегистрацииНачало И СтандартныеВычетыПоНДФЛВторичный.ПериодРегистрацииОкончание)
	|			И (СтандартныеВычетыПоНДФЛВторичный.Количество > 0)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыФизическихЛиц", ИмяВременнойТаблицыОтбора);
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Дополняет данные о ставке налогообложения, используемой для резидентов РФ, 
// сведениями о реальной ставке обложения с учетом налогового статуса физического лица и другие параметры.
// В переданную таблицу значений ДанныеУчета добавляются колонки:
//		Статус, тип СправочникСсылка.СтатусыНалогоплательщиковПоНДФЛ
//		СтавкаНДФЛ, тип ПеречислениеСсылка.НДФЛСтавки
//		СтавкаЧислом, тип Число, например, 0.13
//      ИсчислятьНалогНарастающимИтогом, тип Булево
//      УчитыватьВсеВычетыКДоходамОтИсточникаРФ, тип Булево
//      УчитыватьВычетыКДоходамОтИсточникаВнеРФ, тип Булево
//      РезидентРФвНалоговомПериоде, тип Булево.
//
// Параметры:
//	ДанныеУчета - ТаблицаЗначений - таблица с колонками (допустимы и другие колонки):
//		ФизическоеЛицо
//		ДатаПолученияДохода, дата на которую будет определен статус налогоплательщика
//    	КатегорияДохода, тип ПеречислениеСсылка.КатегорииДоходовНДФЛ: должно быть непустым
//		СтавкаНалогообложенияРезидента, тип ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента.
//	ПорядокУчетаСтатусаНаКонецГода - строка - необязательный, описание того, как следует учитывать изменение 
//		статуса на конец налогового (отчетного) периода, возможные значения:
//			"НеУчитыватьИзмененияСтатуса" (значение по умолчанию)
//			"УчитыватьИзмененияСтатусаДляРасчета"
//			"УчитыватьИзмененияСтатусаДляОтчетности".
//	ОкончаниеОтчетногоПериода - Дата - необязательный, значение будет учитываться при определении периода, на который будет определен статус налогоплательщика, если необходимо учитывать изменение статуса.
//	СтатусыФизическихЛиц - ТаблицаЗначений - необязательный, имеет тот же состав колонок, что и регистр СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный; 
//												если не задан, данные будут считаны из ИБ.
//	ПервыйМесяцНалоговогоПериода - Дата - 
//	ПоследнийМесяцНалоговогоПериода - Дата - 
//
Процедура ДополнитьДанныеУчетаСтавками(ДанныеУчета, ПорядокУчетаСтатусаНаКонецГода = "НеУчитыватьИзмененияСтатуса", ОкончаниеОтчетногоПериода = '00010101', СтатусыФизическихЛиц = Неопределено, Знач ПервыйМесяцНалоговогоПериода = '00010101', Знач ПоследнийМесяцНалоговогоПериода = '00010101') Экспорт
	
	Если ТипЗнч(ДанныеУчета) <> Тип("ТаблицаЗначений") Тогда
		Возврат;	
	КонецЕсли;
		
	ДанныеУчета.Колонки.Добавить("СтавкаЧислом", Новый ОписаниеТипов("Число"));
	ДанныеУчета.Колонки.Добавить("СтавкаНДФЛ", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавки"));
	ДанныеУчета.Колонки.Добавить("Статус", Новый ОписаниеТипов("СправочникСсылка.СтатусыНалогоплательщиковПоНДФЛ"));
	ДанныеУчета.Колонки.Добавить("ИсчислятьНалогНарастающимИтогом", Новый ОписаниеТипов("Булево"));
	ДанныеУчета.Колонки.Добавить("УчитыватьВсеВычетыКДоходамОтИсточникаРФ", Новый ОписаниеТипов("Булево"));
	ДанныеУчета.Колонки.Добавить("УчитыватьВычетыКДоходамОтИсточникаВнеРФ", Новый ОписаниеТипов("Булево"));
	ДанныеУчета.Колонки.Добавить("РезидентРФвНалоговомПериоде", Новый ОписаниеТипов("Булево"));

	Если ДанныеУчета.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ПроверятьКодДохода = ДанныеУчета.Колонки.Найти("КодДохода") <> Неопределено;
	Доход3010 = УчетНДФЛПовтИсп.Доход3010();
	
	Если СтатусыФизическихЛиц = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ПервыйМесяцНалоговогоПериода) Или Не ЗначениеЗаполнено(ПоследнийМесяцНалоговогоПериода) Тогда
			ДанныеУчета.Сортировать("ДатаПолученияДохода");
			ПервыйМесяцНалоговогоПериода = НачалоМесяца(ДанныеУчета[0].ДатаПолученияДохода);
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ДанныеУчета[ДанныеУчета.Количество() - 1].ДатаПолученияДохода);
		КонецЕсли;
		СтатусыФизическихЛиц = СтатусыФизическихЛиц(ДанныеУчета.ВыгрузитьКолонку("ФизическоеЛицо"), ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода);		
	КонецЕсли;
	
	// Т.к. ставка налогообложения, необходимость учитывать доход нарастающим итогом и необходимость учитывать вычет к
	// доходу (если он есть), зависит от небольшого количества параметров (статус налогоплательщика, категория дохода,
	// налоговый период, к которому относится дата дохода и т.д), различных комбинаций значений, которых на практике при
	// расчете встречается не так уже и много, будем использовать готовую таблицу соответствий.
	ТаблицаОписаний = УчетНДФЛПовтИсп.ТаблицаОписанийДоходов();
	СтруктураПоиска = Новый Структура("ФизическоеЛицо");
	СтруктураПоискаСтавок = Новый Структура("СтатусФизическогоЛица, КатегорияДохода, СтавкаНалогообложенияРезидента, РасчетПоПрогрессивнойШкале");
	ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале().НачалоРасчетаНДФЛПоПрогрессивнойШкале;
	
	ТекущееФизическоеЛицо = Неопределено;	
	Для Каждого СтрокаДанныхУчета Из ДанныеУчета Цикл
		Если СтрокаДанныхУчета.ФизическоеЛицо <> ТекущееФизическоеЛицо Тогда
			ТекущееФизическоеЛицо = СтрокаДанныхУчета.ФизическоеЛицо;
			СтруктураПоиска.ФизическоеЛицо = ТекущееФизическоеЛицо;
			СтрокиТаблицыСтатусов = СтатусыФизическихЛиц.НайтиСтроки(СтруктураПоиска);
			
			ИнформацияОСтатусеНалогоплательщика = ИнформацияОСтатусеНалогоплательщика(СтрокаДанныхУчета.ДатаПолученияДохода, СтрокиТаблицыСтатусов, ПорядокУчетаСтатусаНаКонецГода, ОкончаниеОтчетногоПериода);
		КонецЕсли;	
		
		// Проверим, актуальна ли на текущую дату полученная ранее информация о статусе налогоплательщика
		Если Не (СтрокаДанныхУчета.ДатаПолученияДохода >= ИнформацияОСтатусеНалогоплательщика.ДатаНачала И СтрокаДанныхУчета.ДатаПолученияДохода <= ИнформацияОСтатусеНалогоплательщика.ДатаОкончания) Тогда
			ИнформацияОСтатусеНалогоплательщика = ИнформацияОСтатусеНалогоплательщика(СтрокаДанныхУчета.ДатаПолученияДохода, СтрокиТаблицыСтатусов, ПорядокУчетаСтатусаНаКонецГода, ОкончаниеОтчетногоПериода);
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтавок, СтрокаДанныхУчета, "СтавкаНалогообложенияРезидента, КатегорияДохода");
		СтруктураПоискаСтавок.СтатусФизическогоЛица = ИнформацияОСтатусеНалогоплательщика.СтатусДляОпределенияСтавки;
		СтруктураПоискаСтавок.РасчетПоПрогрессивнойШкале = СтрокаДанныхУчета.ДатаПолученияДохода >= ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале;
		СтрокаДанныхУчета.Статус = ИнформацияОСтатусеНалогоплательщика.СтатусДляОпределенияСтавки;
		СтрокаДанныхУчета.РезидентРФвНалоговомПериоде = ?(ПорядокУчетаСтатусаНаКонецГода = "УчитыватьИзмененияСтатусаДляРасчета", ИнформацияОСтатусеНалогоплательщика.РезидентРФНаКонецГода Или ИнформацияОСтатусеНалогоплательщика.РезидентРФНаКонецМесяца, ИнформацияОСтатусеНалогоплательщика.РезидентРФНаКонецГода);
		
		СтрокиОписания = ТаблицаОписаний.НайтиСтроки(СтруктураПоискаСтавок); 
		
		Если СтрокиОписания.Количество() > 0 Тогда
			
			Описание = СтрокиОписания[0];
			ЗаполнитьЗначенияСвойств(СтрокаДанныхУчета, Описание, "ИсчислятьНалогНарастающимИтогом, УчитыватьВсеВычетыКДоходамОтИсточникаРФ,УчитыватьВычетыКДоходамОтИсточникаВнеРФ");
			
			ПостфиксНалоговогоПериода = ?(СтрокаДанныхУчета.ДатаПолученияДохода < '20150101', "2014", ?(СтрокаДанныхУчета.ДатаПолученияДохода < '20180101', "2015", "2018"));
			СтрокаДанныхУчета.СтавкаЧислом = Описание["СтавкаЧислом" + ПостфиксНалоговогоПериода];
			СтрокаДанныхУчета.СтавкаНДФЛ = Описание["СтавкаНДФЛ" + ПостфиксНалоговогоПериода];

			Если ПроверятьКодДохода И СтрокаДанныхУчета.КодДохода = Доход3010 Тогда
				СтрокаДанныхУчета.ИсчислятьНалогНарастающимИтогом = Ложь
			ИначеЕсли СтрокаДанныхУчета.ИсчислятьНалогНарастающимИтогом И СтрокаДанныхУчета.СтавкаНДФЛ <> Перечисления.НДФЛСтавки.Ставка13 Тогда 	
				СтрокаДанныхУчета.ИсчислятьНалогНарастающимИтогом = Ложь
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает данные из ИБ о статусах переданных физических лиц с точки зрения налогового резидентства.
//
// Параметры:
//	ФизическиеЛица - Массив - 
//	ПервыйМесяцНалоговогоПериода - Дата - 
//	ПоследнийМесяцНалоговогоПериода - Дата - 
//
// Возвращаемое значение:
//	Таблица значений, имеет тот же состав колонок, что и регистр СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный;
//  	проиндексирована по полю ФизическоеЛицо
//
Функция СтатусыФизическихЛиц(ФизическиеЛица, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("НачалоГодаПериодаРасчета", НачалоГода(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("КонецПоследнегоМесяцаРасчета", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаНачала КАК ДатаНачала,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаОкончания КАК ДатаОкончания,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.Статус КАК Статус,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.РезидентРФНаКонецМесяца КАК РезидентРФНаКонецМесяца,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ПрименяетсяСтавкаПункта1Статьи224НК КАК ПрименяетсяСтавкаПункта1Статьи224НК,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.Год КАК Год,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.РезидентРФНаКонецКвартала1 КАК РезидентРФНаКонецКвартала1,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.РезидентРФНаКонецКвартала2 КАК РезидентРФНаКонецКвартала2,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.РезидентРФНаКонецКвартала3 КАК РезидентРФНаКонецКвартала3,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.РезидентРФНаКонецГода КАК РезидентРФНаКонецГода,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СтатусНаКонецКвартала1 КАК СтатусНаКонецКвартала1,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СтатусНаКонецКвартала2 КАК СтатусНаКонецКвартала2,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СтатусНаКонецКвартала3 КАК СтатусНаКонецКвартала3,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СтатусНаКонецГода КАК СтатусНаКонецКвартала4,
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.СтатусНаКонецГода КАК СтатусНаКонецГода
	|ИЗ
	|	РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный
	|ГДЕ
	|	СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ФизическоеЛицо В(&ФизическиеЛица)
	|	И (&НачалоГодаПериодаРасчета МЕЖДУ СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаНачала И СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаОкончания
	|			ИЛИ СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаНачала > &НачалоГодаПериодаРасчета
	|				И СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ДатаНачала <= &КонецПоследнегоМесяцаРасчета)";
	СтатусыФизическихЛиц = Запрос.Выполнить().Выгрузить();		
	СтатусыФизическихЛиц.Индексы.Добавить("ФизическоеЛицо");
	Возврат СтатусыФизическихЛиц
	
КонецФункции

// Возвращает описание текущего статуса физического лица с точки зрения налогового резидентства.
//
// Параметры:
//	ДатаСреза - Дата - 
//	СтрокиТаблицыСтатусов - ТаблицаЗначений или массив строк таблицы значений - строки таблицы статусов по физическому лицу
//	ПорядокУчетаСтатусаНаКонецГода - строка - необязательный, описание того, как следует учитывать изменение 
//		статуса на конец налогового периода, возможные значения:
//			"НеУчитыватьИзмененияСтатуса" (значение по умолчанию)
//			"УчитыватьИзмененияСтатусаДляРасчета"
//			"УчитыватьИзмененияСтатусаДляОтчетности".
//	ОкончаниеОтчетногоПериода - Дата - необязательный, значение будет учитываться в определение периода на которую будет определен статус налогоплательщика если необходимо учитывать изменение статуса.
//
// Возвращаемое значение:
//	Структура с полями: ДатаНачала, ДатаОкончания, Резидент, ПрименяетсяСтавкаПункта1Статьи224НК, СтатусДляОпределенияСтавки, РезидентРФНаКонецГода, РезидентРФНаКонецМесяца.
//
Функция ИнформацияОСтатусеНалогоплательщика(Знач ДатаСреза, СтрокиТаблицыСтатусов, ПорядокУчетаСтатусаНаКонецГода = "НеУчитыватьИзмененияСтатуса", ОкончаниеОтчетногоПериода = '00010101')
	
	// Описание алгоритма: 
	//	Среди строк таблицы статусов по физическому лицу, найдем строку (она будет единственной), для которой выполняется условие
	//	Дата среза (с учетом уточнения для 2014 и более ранних лет) лежит между датой начала и датой окончания, указанными в строке
	//	На основе этой строки рассчитаем поля структуры
	//	Прежде чем в очередной раз обращаться к этой функции, проверяем что предыдущей результат этой функции потерял актуальность (по датам начала и окончания и физическому лицу)

	ИнформацияОСтатусе = Новый Структура("ДатаНачала, ДатаОкончания, ПрименяетсяСтавкаПункта1Статьи224НК, СтатусДляОпределенияСтавки, РезидентРФНаКонецГода, РезидентРФНаКонецМесяца", ДатаСреза, ДатаСреза, Истина, Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент, Истина, Истина);

	Если СтрокиТаблицыСтатусов.Количество() = 0 Тогда
		ИнформацияОСтатусе.ДатаОкончания = КонецГода(ДатаСреза);
		Возврат ИнформацияОСтатусе;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ДатаСреза) Тогда
		ДатаСреза = КонецМесяца(ТекущаяДатаСеанса())
	КонецЕсли;

	УчитыватьИзмененияСтатусаДляРасчета = ПорядокУчетаСтатусаНаКонецГода = "УчитыватьИзмененияСтатусаДляРасчета";
	НеУчитыватьИзмененияСтатуса = ПорядокУчетаСтатусаНаКонецГода <> "УчитыватьИзмененияСтатусаДляРасчета" И ПорядокУчетаСтатусаНаКонецГода <> "УчитыватьИзмененияСтатусаДляОтчетности";
	ГодОтчетногоПериода = НачалоГода(ОкончаниеОтчетногоПериода);
	ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев = ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев();
	УточненнаяДатаСреза = ?(ДатаСреза < ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев, КонецМесяца(ДатаСреза), ДатаСреза);
	ИмяКолонкиСтатуса = "СтатусНаКонецКвартала" + ?(ОкончаниеОтчетногоПериода = '00010101', 4, Цел((Месяц(ОкончаниеОтчетногоПериода) + 2)/3));
	Резидент = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
	НеРезидент = Справочники.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент;	
	
	Для Каждого СтрокаТаблицыСтатусов Из СтрокиТаблицыСтатусов Цикл
		Если УточненнаяДатаСреза >= СтрокаТаблицыСтатусов.ДатаНачала И УточненнаяДатаСреза <= СтрокаТаблицыСтатусов.ДатаОкончания Тогда
			
			ЗаполнитьЗначенияСвойств(ИнформацияОСтатусе, СтрокаТаблицыСтатусов);
			Если НеУчитыватьИзмененияСтатуса Тогда
				ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
			ИначеЕсли СтрокаТаблицыСтатусов.Год < ГодОтчетногоПериода Тогда
				Если СтрокаТаблицыСтатусов.Статус = СтрокаТаблицыСтатусов.СтатусНаКонецГода Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
				ИначеЕсли СтрокаТаблицыСтатусов.СтатусНаКонецГода = Резидент Тогда 	
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.СтатусНаКонецГода;
				ИначеЕсли УчитыватьИзмененияСтатусаДляРасчета Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
				ИначеЕсли ДатаСреза < ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.СтатусНаКонецГода;
				ИначеЕсли СтрокаТаблицыСтатусов.СтатусНаКонецГода = НеРезидент Тогда
					Если СтрокаТаблицыСтатусов.Статус = Резидент Тогда
						ИнформацияОСтатусе.СтатусДляОпределенияСтавки = НеРезидент
					Иначе
						ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
					КонецЕсли; 
				ИначеЕсли СтрокаТаблицыСтатусов.Статус = Резидент Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = НеРезидент
				Иначе
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
				КонецЕсли;		
			Иначе
				Если СтрокаТаблицыСтатусов.Статус = СтрокаТаблицыСтатусов[ИмяКолонкиСтатуса] Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
				ИначеЕсли СтрокаТаблицыСтатусов[ИмяКолонкиСтатуса] = Резидент Тогда 	
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов[ИмяКолонкиСтатуса];
				ИначеЕсли УчитыватьИзмененияСтатусаДляРасчета Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
				ИначеЕсли ДатаСреза < ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов[ИмяКолонкиСтатуса];
				ИначеЕсли СтрокаТаблицыСтатусов[ИмяКолонкиСтатуса] = НеРезидент Тогда
					Если СтрокаТаблицыСтатусов.Статус = Резидент Тогда
						ИнформацияОСтатусе.СтатусДляОпределенияСтавки = НеРезидент
					Иначе
						ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
					КонецЕсли; 
				ИначеЕсли СтрокаТаблицыСтатусов.Статус = Резидент Тогда
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = НеРезидент
				Иначе
					ИнформацияОСтатусе.СтатусДляОпределенияСтавки = СтрокаТаблицыСтатусов.Статус;
				КонецЕсли;		
			КонецЕсли;
			
			Возврат ИнформацияОСтатусе;
			
		КонецЕсли;	
	КонецЦикла;	

	Возврат ИнформацияОСтатусе;	
	
КонецФункции

// Помещает в переданный МенеджерВременныхТаблиц таблицу 
// 	ВТДополнительныеСвойстваКодаДохода с полями
//		КодДохода - СправочникСсылка.ВидыДоходовНДФЛ,
//		СоответствуетОплатеТруда - Булево.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//
Процедура СоздатьВТДополнительныеСвойстваКодаДохода(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.Ссылка КАК КодДохода,
	|	ЕСТЬNULL(РедактируемыеРеквизитыКодаДоходаНДФЛ.СоответствуетОплатеТруда, ВидыДоходовНДФЛ.СоответствуетОплатеТруда) КАК СоответствуетОплатеТруда
	|ПОМЕСТИТЬ ВТДополнительныеСвойстваКодаДохода
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РедактируемыеРеквизитыКодаДоходаНДФЛ КАК РедактируемыеРеквизитыКодаДоходаНДФЛ
	|		ПО ВидыДоходовНДФЛ.Ссылка = РедактируемыеРеквизитыКодаДоходаНДФЛ.КодДохода";
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция рассчитывает размер вычета, который можно применить к доходу.
// 
Функция ВычетКДоходуСотрудника(Ссылка, Организация, ДатаПолученияДохода, Сотрудник, КодДохода, КодВычетаНДФЛ, СуммаДохода, КоличествоДетей = 0) Экспорт 
	
	СуммаВычета = 0;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&КодДохода КАК КодДохода,
	|	&Сумма КАК Сумма,
	|	&КодВычета КАК КодВычета,
	|	&КоличествоДетей КАК КоличествоДетей,
	|	&Ссылка КАК Регистратор,
	|	0 КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("КодДохода",			КодДохода);
	Запрос.УстановитьПараметр("Сумма",				СуммаДохода);
	Запрос.УстановитьПараметр("КодВычета",			КодВычетаНДФЛ);
	Запрос.УстановитьПараметр("КоличествоДетей",	КоличествоДетей);
	Запрос.Выполнить();
	
	СоздатьВТВычетыКДоходамФизическихЛиц(Ссылка, Организация, ДатаПолученияДохода, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыКДоходамФизическихЛиц.СуммаВычета
	|ИЗ
	|	ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходамФизическихЛиц";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		СуммаВычета = Выборка.СуммаВычета;
	КонецЕсли;
	
	Возврат СуммаВычета
	
КонецФункции

Функция ЗапросПраваНаСтандартныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица")
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТПериоды(НачалоГода(НачалоПериода), НачалоМесяца(ОкончаниеПериода), , , "ВТДатыПоМесяцам");
	
	Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецМесяца(ОкончаниеПериода));
	Запрос.УстановитьПараметр("НачалоГодаПериодаРасчета", НачалоГода(НачалоПериода));
	Запрос.УстановитьПараметр("КонецГодаПериодаРасчета", КонецГода(ОкончаниеПериода));
	Запрос.УстановитьПараметр("НачалоПредшествующегоГода", ДобавитьМесяц(НачалоГода(НачалоПериода), -12));
	
	Запрос.УстановитьПараметр("ПериодСрезаПравНаВычеты", НачалоМесяца(Макс(ДатаАктуальности, ОкончаниеПериода)));
	Запрос.УстановитьПараметр("Код3010", УчетНДФЛПовтИсп.Доход3010());
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеПериода);

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Работники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Работники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Месяцы.Период КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(Месяцы.Период, ГОД) КАК НачалоГодаНалоговогоПериода,
	|	КОНЕЦПЕРИОДА(Месяцы.Период, ГОД) КАК КонецГодаНалоговогоПериода,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РезидентствоФизлиц.Статус = РезидентствоФизлиц.СтатусНаКонецГода
	|				ТОГДА РезидентствоФизлиц.Статус
	|			КОГДА РезидентствоФизлиц.СтатусНаКонецГода = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ИНАЧЕ РезидентствоФизлиц.Статус
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус,
	|	ЕСТЬNULL(РезидентствоФизлиц.ПрименяетсяСтавкаПункта1Статьи224НК, ИСТИНА) КАК ПрименяетсяСтавкаПункта1Статьи224НК,
	|	ВЫБОР
	|		КОГДА Месяцы.Период > &ПериодСрезаПравНаВычеты
	|			ТОГДА &ПериодСрезаПравНаВычеты
	|		ИНАЧЕ Месяцы.Период
	|	КОНЕЦ КАК ПериодРегистрацииПравНаВычеты
	|ПОМЕСТИТЬ ВТПериодыФизлиц
	|ИЗ
	|	ВТФизическиеЛица КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный КАК РезидентствоФизлиц
	|		ПО Работники.ФизическоеЛицо = РезидентствоФизлиц.ФизическоеЛицо
	|			И (КОНЕЦПЕРИОДА(Месяцы.Период, МЕСЯЦ) МЕЖДУ РезидентствоФизлиц.ДатаНачала И РезидентствоФизлиц.ДатаОкончания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ГоловнаяОрганизация,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Периоды.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Периоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВычетыНаДетей.КодВычета КАК КодВычета,
	|	ВычетыНаДетей.ЛичныйВычет КАК ЛичныйВычет,
	|	СУММА(ЕСТЬNULL(ВычетыНаДетей.Количество, 0) * ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0)) КАК Вычет,
	|	МАКСИМУМ(ЕСТЬNULL(РазмерВычетовНаДетей.ОграничениеПоДоходам, 0)) КАК ОграничениеПоДоходам
	|ПОМЕСТИТЬ ВТВычеты
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтандартныеВычетыПоНДФЛВторичный КАК ВычетыНаДетей
	|		ПО Периоды.ФизическоеЛицо = ВычетыНаДетей.ФизическоеЛицо
	|			И (Периоды.ПериодРегистрацииПравНаВычеты МЕЖДУ ВычетыНаДетей.ПериодРегистрацииНачало И ВычетыНаДетей.ПериодРегистрацииОкончание)
	|			И (Периоды.МесяцНалоговогоПериода МЕЖДУ ВычетыНаДетей.ДатаНачала И ВычетыНаДетей.ДатаОкончания)
	|			И (ВычетыНаДетей.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка))
	|			И (ВычетыНаДетей.Количество <> 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерВычетовНДФЛВторичный КАК РазмерВычетовНаДетей
	|		ПО (ВычетыНаДетей.КодВычета = РазмерВычетовНаДетей.КодВычета)
	|			И (Периоды.НачалоГодаНалоговогоПериода МЕЖДУ РазмерВычетовНаДетей.ДатаНачала И РазмерВычетовНаДетей.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный КАК ПрименениеСтандартныхВычетовПоНДФЛВторичный
	|		ПО Периоды.ФизическоеЛицо = ПрименениеСтандартныхВычетовПоНДФЛВторичный.ФизическоеЛицо
	|			И Периоды.ГоловнаяОрганизация = ПрименениеСтандартныхВычетовПоНДФЛВторичный.ГоловнаяОрганизация
	|			И (Периоды.МесяцНалоговогоПериода МЕЖДУ ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаНачала И ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаОкончания)
	|ГДЕ
	|	ВычетыНаДетей.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|	И ПрименениеСтандартныхВычетовПоНДФЛВторичный.ПрименятьВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизическоеЛицо,
	|	Периоды.ГоловнаяОрганизация,
	|	Периоды.МесяцНалоговогоПериода,
	|	ВычетыНаДетей.КодВычета,
	|	ВычетыНаДетей.ЛичныйВычет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Доходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(Доходы.ОблагаемыйДоходЗаГод) КАК ОблагаемыйДоходЗаГод
	|ПОМЕСТИТЬ ВТДоходыРезидентовНарастающимЗаГод
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ФизическоеЛицо КАК ФизическоеЛицо,
	|		Периоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА Доходы.ИсточникДоходаЗаПределамиРФ
	|					ТОГДА ВЫБОР
	|							КОГДА СтатусыФизлиц.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|								ТОГДА Доходы.СуммаДохода - Доходы.СуммаВычета
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ Доходы.СуммаДохода - ВЫБОР
	|						КОГДА СтатусыФизлиц.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент), ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС))
	|							ТОГДА Доходы.СуммаВычета
	|						КОГДА Доходы.КодВычета.НеПредоставляетсяНерезидентам
	|							ТОГДА 0
	|						ИНАЧЕ Доходы.СуммаВычета
	|					КОНЕЦ
	|			КОНЕЦ, 0) КАК ОблагаемыйДоходЗаГод
	|	ИЗ
	|		ВТПериодыФизлиц КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК Доходы
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыФизлиц КАК СтатусыФизлиц
	|				ПО Доходы.ГоловнаяОрганизация = СтатусыФизлиц.ГоловнаяОрганизация
	|					И Доходы.ФизическоеЛицо = СтатусыФизлиц.ФизическоеЛицо
	|					И Доходы.МесяцНалоговогоПериода = СтатусыФизлиц.МесяцНалоговогоПериода
	|			ПО (Доходы.МесяцНалоговогоПериода МЕЖДУ Периоды.НачалоГодаНалоговогоПериода И Периоды.МесяцНалоговогоПериода)
	|				И (Доходы.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецПериодаРасчета)
	|				И Периоды.ФизическоеЛицо = Доходы.ФизическоеЛицо
	|				И Периоды.ГоловнаяОрганизация = Доходы.ГоловнаяОрганизация
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА Доходы.КодДохода = &Код3010
	|						И Доходы.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2018, 1, 1)
	|					ТОГДА ЛОЖЬ
	|				КОГДА Доходы.КодДохода.НеОблагаетсяУНалоговогоАгента
	|					ТОГДА ЛОЖЬ
	|				КОГДА СтатусыФизлиц.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|					ТОГДА ИСТИНА
	|				КОГДА СтатусыФизлиц.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС)
	|					ТОГДА ВЫБОР
	|							КОГДА Доходы.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2018, 1, 1)
	|								ТОГДА ИСТИНА
	|							КОГДА Доходы.КатегорияДохода В (ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности), ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходВНатуральнойФормеОтТрудовойДеятельности), ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТруда), ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций))
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		И Доходы.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Периоды.ФизическоеЛицо,
	|		Периоды.ГоловнаяОрганизация,
	|		Периоды.МесяцНалоговогоПериода,
	|		ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0)
	|	ИЗ
	|		ВТПериодыФизлиц КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ КАК ДоходыСПредыдущегоМестаРаботы
	|			ПО Периоды.ФизическоеЛицо = ДоходыСПредыдущегоМестаРаботы.ФизическоеЛицо
	|				И Периоды.ГоловнаяОрганизация = ДоходыСПредыдущегоМестаРаботы.ГоловнаяОрганизация
	|				И Периоды.МесяцНалоговогоПериода = ДоходыСПредыдущегоМестаРаботы.МесяцНалоговогоПериода) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	Доходы.ГоловнаяОрганизация,
	|	Доходы.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Периоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Вычеты.КодВычета КАК КодВычета,
	|	Вычеты.ЛичныйВычет КАК ЛичныйВычет,
	|	Вычеты.ОграничениеПоДоходам КАК ОграничениеПоДоходам,
	|	ВЫБОР
	|		КОГДА Периоды.ПрименяетсяСтавкаПункта1Статьи224НК
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод <= ЕСТЬNULL(Вычеты.ОграничениеПоДоходам, 0)
	|					ИЛИ ЕСТЬNULL(Вычеты.ОграничениеПоДоходам, 0) = 0)
	|			ТОГДА ЕСТЬNULL(Вычеты.Вычет, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазмерВычета,
	|	ЕСТЬNULL(ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод, 0) КАК ОблагаемыйДоходСНачалаГода
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовНарастающимЗаГод КАК ДоходыНарастающимИтогом
	|		ПО Периоды.ФизическоеЛицо = ДоходыНарастающимИтогом.ФизическоеЛицо
	|			И Периоды.ГоловнаяОрганизация = ДоходыНарастающимИтогом.ГоловнаяОрганизация
	|			И Периоды.МесяцНалоговогоПериода = ДоходыНарастающимИтогом.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты КАК Вычеты
	|		ПО Периоды.ФизическоеЛицо = Вычеты.ФизическоеЛицо
	|			И Периоды.ГоловнаяОрганизация = Вычеты.ГоловнаяОрганизация
	|			И Периоды.МесяцНалоговогоПериода = Вычеты.МесяцНалоговогоПериода
	|ГДЕ
	|	Периоды.МесяцНалоговогоПериода МЕЖДУ &ДатаНачала И &ДатаОкончания";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТФизическиеЛица", ИмяВременнойТаблицыОтбора); 
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросПредоставленныеВычетыПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ДатаАктуальности, ДетализацияДоГруппВычетов, ИмяВременнойТаблицыОтбора)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ОкончаниеПериода));
	Запрос.УстановитьПараметр("ДатаПодачиСведений", ?(Не ЗначениеЗаполнено(ДатаАктуальности), ТекущаяДатаСеанса(), ДатаАктуальности));
	Запрос.УстановитьПараметр("ДетализацияДоГруппВычетов", ДетализацияДоГруппВычетов);
	Запрос.УстановитьПараметр("НачалоПредшествующегоГода", ДобавитьМесяц(НачалоГода(НачалоПериода), -12));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА &ДетализацияДоГруппВычетов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета.ГруппаВычета КАК ГруппаВычета,
	|	СУММА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	ВТФизическиеЛица КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ
	|		ПО Сотрудники.ФизическоеЛицо = ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизическоеЛицо
	|			И Сотрудники.ГоловнаяОрганизация = ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ГоловнаяОрганизация
	|ГДЕ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизическоеЛицо,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ГоловнаяОрганизация,
	|	НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА &ДетализацияДоГруппВычетов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета
	|	КОНЕЦ,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета.ГруппаВычета
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Сумма) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо,
	|	ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычетыНДФЛ.МесяцРегистрации, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА &ДетализацияДоГруппВычетов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ИмущественныеВычетыНДФЛ.КодВычета
	|	КОНЕЦ,
	|	ИмущественныеВычетыНДФЛ.КодВычета.ГруппаВычета,
	|	СУММА(ИмущественныеВычетыНДФЛ.Сумма)
	|ИЗ
	|	ВТФизическиеЛица КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|		ПО Сотрудники.ФизическоеЛицо = ИмущественныеВычетыНДФЛ.ФизическоеЛицо
	|			И Сотрудники.ГоловнаяОрганизация = ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация
	|			И (ИмущественныеВычетыНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|			И (ИмущественныеВычетыНДФЛ.МесяцРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.ФизическоеЛицо,
	|	ИмущественныеВычетыНДФЛ.ГоловнаяОрганизация,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычетыНДФЛ.МесяцРегистрации, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА &ДетализацияДоГруппВычетов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ИмущественныеВычетыНДФЛ.КодВычета
	|	КОНЕЦ,
	|	ИмущественныеВычетыНДФЛ.КодВычета.ГруппаВычета
	|
	|ИМЕЮЩИЕ
	|	СУММА(ИмущественныеВычетыНДФЛ.Сумма) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	МесяцНалоговогоПериода,
	|	ГоловнаяОрганизация";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ИмяВременнойТаблицыОтбора);
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросАвансовыеПлатежиПоНДФЛДляАналитическогоОтчета(ТолькоРазрешенные, НачалоПериода, ОкончаниеПериода, ИмяВременнойТаблицыОтбора = "ВТФизическиеЛица")
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(АвансовыеПлатежиИностранцевПоНДФЛ.Период, МЕСЯЦ) КАК МесяцНачисления,
	|	АвансовыеПлатежиИностранцевПоНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	АвансовыеПлатежиИностранцевПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(АвансовыеПлатежиИностранцевПоНДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК АвансовыеПлатежиИностранцевПоНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК Сотрудники
	|		ПО (АвансовыеПлатежиИностранцевПоНДФЛ.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И АвансовыеПлатежиИностранцевПоНДФЛ.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|			И АвансовыеПлатежиИностранцевПоНДФЛ.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
	|ГДЕ
	|	АвансовыеПлатежиИностранцевПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыеПлатежиИностранцевПоНДФЛ.ГоловнаяОрганизация,
	|	АвансовыеПлатежиИностранцевПоНДФЛ.ФизическоеЛицо,
	|	АвансовыеПлатежиИностранцевПоНДФЛ.Период";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛица", ИмяВременнойТаблицыОтбора); 
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Вспомогательные функции и процедуры

// Предназначена для дополнения рассчитанных сумм НДФЛ информацией о суммах подлежащих зачету авансовых платежей.
// Имеет дополнительный эффект: если в параметр ИсчисленоНДФЛЗаГод передано Неопределено, а итог по колонкам 
// НалогПоСтавке13, НалогСПревышенияПоСтавке13 в таблице СтрокиНДФЛЗаГод нулевой - эта таблица очищается. 
//
// Параметры:
//      СтрокиНДФЛЗаГод - Массив, ТаблицаЗначений - массив содержит строки таблицы значений, в обоих случаях обязательны
//                                                  колонки НалогПоСтавке13, НалогСПревышенияПоСтавке13 и ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13
//		ОстаткиПоАвансовымПлатежам - ТаблицаЗначений -
//		ИсчисленоНДФЛЗаГод - Число, Неопределено - если передано Неопределено, вычисляется как итог по колонке НалогПоСтавке13 таблицы значений СтрокиНДФЛЗаГод
//      ТекущееФизическоеЛицо - СправочникСсылка.ФизическиеЛица - 
//      ТекущийНалоговыйПериод - Дата -
//
Процедура ВписатьАвансовыеПлатежиВРезультатРасчета(СтрокиНДФЛЗаГод, ОстаткиПоАвансовымПлатежам, ИсчисленоНДФЛЗаГод, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод)
	
	Если ИсчисленоНДФЛЗаГод = Неопределено Тогда  // вызов из расчета нерезидента, СтрокиНДФЛЗаГод являются таблицей значений
		ИсчисленоНДФЛЗаГод = СтрокиНДФЛЗаГод.Итог("НалогПоСтавке13") + СтрокиНДФЛЗаГод.Итог("НалогСПревышенияПоСтавке13");
		Если ИсчисленоНДФЛЗаГод = 0 Тогда
			СтрокиНДФЛЗаГод.Очистить();
			Возврат;
		Иначе
			СтрокиНДФЛЗаГод.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, КатегорияДохода", "НалогПоСтавке13, НалогСПревышенияПоСтавке13, КоличествоВычетов, ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13");
		КонецЕсли;
	ИначеЕсли ИсчисленоНДФЛЗаГод = 0 Тогда
		Возврат;
	КонецЕсли;
		
	НайденныеСтрокиАвансовыхПлатежей = ОстаткиПоАвансовымПлатежам.НайтиСтроки(Новый Структура("ФизическоеЛицо, НалоговыйПериод", ТекущееФизическоеЛицо, Год(ТекущийНалоговыйПериод)));
	Если НайденныеСтрокиАвансовыхПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	ОстатокАвансовыхПлатежей = НайденныеСтрокиАвансовыхПлатежей[0].Остаток;
	
	СуммаКЗачету = Мин(ИсчисленоНДФЛЗаГод, ОстатокАвансовыхПлатежей);
	Для Каждого СтрокаНДФЛ Из СтрокиНДФЛЗаГод Цикл
		Если (СтрокаНДФЛ.НалогПоСтавке13 + СтрокаНДФЛ.НалогСПревышенияПоСтавке13) * СуммаКЗачету > 0 Тогда
			Если СтрокаНДФЛ.НалогПоСтавке13 + СтрокаНДФЛ.НалогСПревышенияПоСтавке13 > 0 Тогда
				КЗачетуПоСтроке = Мин(СтрокаНДФЛ.НалогПоСтавке13 + СтрокаНДФЛ.НалогСПревышенияПоСтавке13, СуммаКЗачету);
				СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 = Мин(СтрокаНДФЛ.НалогПоСтавке13, КЗачетуПоСтроке);
			Иначе
				КЗачетуПоСтроке = Макс(СтрокаНДФЛ.НалогПоСтавке13 + СтрокаНДФЛ.НалогСПревышенияПоСтавке13, СуммаКЗачету);
				СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 = Макс(СтрокаНДФЛ.НалогПоСтавке13, КЗачетуПоСтроке);
			КонецЕсли;
			СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13 = КЗачетуПоСтроке - СтрокаНДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13;
			СуммаКЗачету = СуммаКЗачету - КЗачетуПоСтроке;
			Если СуммаКЗачету = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВписатьВРезультатЗарегистрированныеВУчетеДанные(РезультатыРасчетов, ЗарегистрированныеВУчетеДанные, ИменаКолонок)
	
	Для каждого СтрокаТЗ Из ЗарегистрированныеВУчетеДанные Цикл
		ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(), СтрокаТЗ, "ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение," + ИменаКолонок);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВписатьПредоставленныеРанееВычетыВДанныеУчета(ДанныеУчета, ПредоставленныеРанееВычеты)
	Для Каждого СтрокаВычета Из ПредоставленныеРанееВычеты Цикл
		Если СтрокаВычета.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУчета = ДанныеУчета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчета, СтрокаВычета);
		СтрокаУчета.РазмерВычета = - СтрокаВычета.Сумма;
	КонецЦикла;	
КонецПроцедуры

// Аналог метод распределения пропорционально коэффициентам ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(), 
//	оптимальным образом использующий свойства таблицы значений.
Процедура ВписатьРесурсВРезультатыРасчетов(РезультатыРасчетов, ПараметрыЗаполненияРесурса, МесяцНалоговогоПериода, РаспределяемаяСумма, СтруктураКлючей, ТаблицаРаспределения, СтруктураДополнительныхПолей = Неопределено)
	
	МаксимальныйКоэффициент = 0;
	РаспределеннаяСумма = 0;
	СуммаКоэффициентов  = ТаблицаРаспределения.Итог(ПараметрыЗаполненияРесурса.ИмяПоляКоэффициент);
	
	КоличествоСтрокВТаблицеРезультат = РезультатыРасчетов.Количество();
	Если РаспределяемаяСумма <> 0 Тогда
		Если ТаблицаРаспределения.Количество() = 0 Или СуммаКоэффициентов = 0 Тогда
			НоваяСтрока = РезультатыРасчетов.Добавить();
			НоваяСтрока[ПараметрыЗаполненияРесурса.ИмяРесурса] = РаспределяемаяСумма; 
			НоваяСтрока.МесяцНалоговогоПериода = МесяцНалоговогоПериода; 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураКлючей, "ФизическоеЛицо");
			Если СтруктураДополнительныхПолей <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДополнительныхПолей, ПараметрыЗаполненияРесурса.ДополнительныеПоляЗаполнения);
			КонецЕсли;	
		ИначеЕсли ТаблицаРаспределения.Количество() = 1 Тогда
			НоваяСтрока = РезультатыРасчетов.Добавить();
			НоваяСтрока[ПараметрыЗаполненияРесурса.ИмяРесурса] = РаспределяемаяСумма; 
			НоваяСтрока.МесяцНалоговогоПериода = МесяцНалоговогоПериода; 
			Если СтруктураДополнительныхПолей <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДополнительныхПолей, ПараметрыЗаполненияРесурса.ДополнительныеПоляЗаполнения);
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаРаспределения[0], "ФизическоеЛицо, " + ПараметрыЗаполненияРесурса.ПоляЗаполнения);	
		Иначе
			Индекс = 0;
			Для Каждого СтрокаТЗ Из ТаблицаРаспределения Цикл
				АбсолютноеЗначениеКоэффициента = Макс(СтрокаТЗ.СуммаДохода, -СтрокаТЗ.СуммаДохода);
				Если МаксимальныйКоэффициент < АбсолютноеЗначениеКоэффициента Тогда
					МаксимальныйКоэффициент = АбсолютноеЗначениеКоэффициента;
					ИндексМаксимальногоКоэффициента = КоличествоСтрокВТаблицеРезультат + ТаблицаРаспределения.Индекс(СтрокаТЗ);
				КонецЕсли;
				
				НоваяСтрока = РезультатыРасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, "ФизическоеЛицо, " + ПараметрыЗаполненияРесурса.ПоляЗаполнения);
				НоваяСтрока.МесяцНалоговогоПериода = МесяцНалоговогоПериода; 
				
				НоваяСтрока[ПараметрыЗаполненияРесурса.ИмяРесурса] = Окр(РаспределяемаяСумма * СтрокаТЗ[ПараметрыЗаполненияРесурса.ИмяПоляКоэффициент] / СуммаКоэффициентов, ПараметрыЗаполненияРесурса.ТочностьВеличины, 1);
				Если СтруктураДополнительныхПолей <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДополнительныхПолей, ПараметрыЗаполненияРесурса.ДополнительныеПоляЗаполнения);
				КонецЕсли;	
	
				РаспределеннаяСумма = РаспределеннаяСумма + НоваяСтрока[ПараметрыЗаполненияРесурса.ИмяРесурса];
			КонецЦикла;
			
			Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
				РезультатыРасчетов[ИндексМаксимальногоКоэффициента][ПараметрыЗаполненияРесурса.ИмяРесурса] = РезультатыРасчетов[ИндексМаксимальногоКоэффициента][ПараметрыЗаполненияРесурса.ИмяРесурса] + РаспределяемаяСумма - РаспределеннаяСумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВписатьУчтенныеОснованияВРезультатРасчета(РезультатРасчета, НеучтенныеРанееОснования, СтруктураПоискаПоФизическомуЛицу, ИсключаемыйРегистратор)
	
	КоличествоСтрок = РезультатРасчета.Количество();
	Если КоличествоСтрок > 0 И РезультатРасчета[КоличествоСтрок - 1].ФизическоеЛицо = СтруктураПоискаПоФизическомуЛицу.ФизическоеЛицо Тогда
		УчтенныеОснования = Новый Массив();
		СтрокиОснований = НеучтенныеРанееОснования.НайтиСтроки(СтруктураПоискаПоФизическомуЛицу);
		Для каждого СтрокаОснований Из СтрокиОснований Цикл
			Если СтрокаОснований.ДокументОснование = ИсключаемыйРегистратор Или Не ЗначениеЗаполнено(СтрокаОснований.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			УчтенныеОснования.Добавить(СтрокаОснований.ДокументОснование)
		КонецЦикла; 
		РезультатРасчета[КоличествоСтрок - 1].УчтенныеОснования = УчтенныеОснования;
	КонецЕсли;
	
КонецПроцедуры

// Вписывает переданную сумму вычета в соответствие ОстаткиВычетов.Остатки, добавляя к существующему значению или
// создавая новое описание вычета.
//	В таблицу ОстаткиВычетов.ТаблицаВычетов добавляется строка, описывающая свойства текущего вычета (если ранее такого вычета не было).
//
// Параметры:
//  ОстаткиВычетов - структура - с полями ОписаниеВычетов, Остатки и ТаблицаВычетов.
//  КодВычета - СправочникСсылка.ВидыВычетовНДФЛ -
//  СуммаВычета - Число - 
//  РассчитыватьНарастающимИтогом - булево - 
//
Процедура ДобавитьОстатокВычетов(ОстаткиВычетов, КодВычета, СуммаВычета, РассчитыватьНарастающимИтогом = Истина)
	
	ОписаниеВычета = ОстаткиВычетов.ОписаниеВычетов[КодВычета];
	Если ОписаниеВычета = Неопределено Тогда
		Возврат
	КонецЕсли;	
	
	ТекущееЗначение = ОстаткиВычетов.Остатки[КодВычета];
	Если ТекущееЗначение = Неопределено Тогда
		ОстаткиВычетов.Остатки.Вставить(КодВычета, СуммаВычета);
		
		СтрокаТаблицыВычетов = ОстаткиВычетов.ТаблицаВычетов.Добавить();
		СтрокаТаблицыВычетов.КодВычета = КодВычета;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыВычетов, ОписаниеВычета);
	Иначе
		Если РассчитыватьНарастающимИтогом Тогда
			ОстаткиВычетов.Остатки.Вставить(КодВычета, ТекущееЗначение + СуммаВычета);
		Иначе
			ОстаткиВычетов.Остатки.Вставить(КодВычета, СуммаВычета);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

// Вставляет в таблицу доходов перед текущей строкой нулевые строки за пропущенные после предыдущей строки месяцы.
Процедура ДополнитьСтрокамиМесяцевБезДоходов(ДанныеУчетаДоходов, СтрокиПоФизическомуЛицу, ПервыеСтрокиМесяцев, ФизическоеЛицо, МесяцС, МесяцПо, ИндексТекущейСтроки, ОблагаемыйДоходНарастающимИтогомЗаГод = 0)
	ТекущийМесяц = МесяцС;
	Пока ТекущийМесяц < МесяцПо Цикл
		
		НоваяСтрока = ДанныеУчетаДоходов.Вставить(ИндексТекущейСтроки);
		СтрокиПоФизическомуЛицу.Добавить(НоваяСтрока);
		ПервыеСтрокиМесяцев.Добавить(НоваяСтрока);
		ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.МесяцНалоговогоПериода = ТекущийМесяц;
		НоваяСтрока.ДатаПолученияДохода = НачалоДня(КонецМесяца(ТекущийМесяц));
		НоваяСтрока.ОблагаемыйДоходНарастающимИтогом = ОблагаемыйДоходНарастающимИтогомЗаГод;
		НоваяСтрока.ДоходМежрасчетногоПериода = Ложь;
		
		НоваяСтрока.ЭтоПоследняяСтрокаЗаДату = Истина;
		НоваяСтрока.ЭтоПоследняяСтрокаЗаМесяц = Истина;
		НоваяСтрока.ЭтоПерваяСтрокаЗаДату = Истина;
		НоваяСтрока.ЭтоПерваяСтрокаЗаМесяц = Истина;
		Если Месяц(ТекущийМесяц) = 1 Тогда
			НоваяСтрока.ЭтоПерваяСтрокаЗаГод = Истина;
		ИначеЕсли  Месяц(ТекущийМесяц) = 12 Тогда
			НоваяСтрока.ЭтоПоследняяСтрокаЗаГод = Истина;
		КонецЕсли;	
		
		ТекущийМесяц  = ДобавитьМесяц(ТекущийМесяц, 1);
		
	КонецЦикла;	
КонецПроцедуры	

// Переписываем данные о результатах расчета НДФЛ из ТаблицаИсточник в ТаблицаПриемник, 
//	заменяя несоответствующие текущему расчету даты получения и категории дохода.
//	В процессе замены некоторые суммы могут быть перераспределены по доходам текущего расчета.
//
// Параметры:
//  ТаблицаПриемник - ТаблицаЗначений - 
//  ТаблицаИсточник - ТаблицаЗначений -
//  ПараметрыЗаполненияРесурса - структура - описывает особенности распределения строки по базе доходов.
//  ДатыПодразделенияКатегории - ТаблицаЗначений -
//  ОсновнаяДатаПолученияДохода - Дата - определяется по доходам текущего расчета.
//  ДополнительныеПоляЗаполнения - строка - перечень полей для копирования при распределении строки по базе доходов.
//
Процедура ЗаменитьДатыПодразделенияКатегории(ТаблицаПриемник, ТаблицаИсточник, ПараметрыЗаполненияРесурса, ДатыПодразделенияКатегории, ОсновнаяДатаПолученияДохода, ДополнительныеПоляЗаполнения = "")
	
	СтруктураПоискаЗаменыИзмерений = Новый Структура("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
	Для каждого СтрокаТЗ Из ТаблицаИсточник Цикл
		Если СтрокаТЗ[ПараметрыЗаполненияРесурса.ИмяРесурса] <> 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаЗаменыИзмерений, СтрокаТЗ);
			СтрокиПараметровЗамены = ДатыПодразделенияКатегории.НайтиСтроки(СтруктураПоискаЗаменыИзмерений);
			Если СтрокиПараметровЗамены.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПараметровЗамены = СтрокиПараметровЗамены[0]; 
			ЗаменятьДатуПолученияДохода = СтрокаПараметровЗамены.ЗаменятьДатуПолученияДохода;
			ЗаменятьКатегориюДохода = СтрокаПараметровЗамены.ЗаменятьКатегориюДохода;
			ЗаменятьПодразделение = СтрокаПараметровЗамены.ЗаменятьПодразделение;
			Если Не ЗаменятьДатуПолученияДохода И Не ЗаменятьПодразделение И Не ЗаменятьКатегориюДохода Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТЗ);
				Продолжить;
			КонецЕсли;
			Если ЗаменятьДатуПолученияДохода Тогда
				СтрокаТЗ.МесяцНалоговогоПериода = ОсновнаяДатаПолученияДохода;
			КонецЕсли;
			Если Не ЗаменятьПодразделение И Не ЗаменятьКатегориюДохода Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТЗ);
				Продолжить;
			КонецЕсли;
			ТаблицаРаспределения = СтрокаПараметровЗамены.Распределение;
			Если Не ЗначениеЗаполнено(ТаблицаРаспределения) Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТЗ);
			ИначеЕсли ТаблицаРаспределения.Количество() = 1 Тогда
				Если ЗаменятьПодразделение Тогда
					СтрокаТЗ.Подразделение = ТаблицаРаспределения[0].Подразделение;
				КонецЕсли;
				Если ЗаменятьКатегориюДохода Тогда
					СтрокаТЗ.КатегорияДохода = ТаблицаРаспределения[0].КатегорияДохода;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТЗ);
			Иначе
				СтрокДоРаспределения = ТаблицаПриемник.Количество();
				Если ЗначениеЗаполнено(ДополнительныеПоляЗаполнения) Тогда
					ВписатьРесурсВРезультатыРасчетов(ТаблицаПриемник, ПараметрыЗаполненияРесурса, СтрокаТЗ.МесяцНалоговогоПериода, СтрокаТЗ[ПараметрыЗаполненияРесурса.ИмяРесурса], СтрокаТЗ, ТаблицаРаспределения, СтрокаТЗ);
				Иначе
					ВписатьРесурсВРезультатыРасчетов(ТаблицаПриемник, ПараметрыЗаполненияРесурса, СтрокаТЗ.МесяцНалоговогоПериода, СтрокаТЗ[ПараметрыЗаполненияРесурса.ИмяРесурса], СтрокаТЗ, ТаблицаРаспределения);
				КонецЕсли;
				Если СтрокДоРаспределения < ТаблицаПриемник.Количество() И ЗаменятьДатуПолученияДохода Тогда
					// восстановим подразделение или категорию, если ранее это была чужая строка налога
					Для Сч = СтрокДоРаспределения + 1 По ТаблицаПриемник.Количество() Цикл
						Если Не ЗаменятьПодразделение Тогда
							ТаблицаПриемник[Сч-1].Подразделение = СтрокаТЗ.Подразделение
						КонецЕсли;
						Если Не ЗаменятьКатегориюДохода Тогда
							ТаблицаПриемник[Сч-1].КатегорияДохода = СтрокаТЗ.КатегорияДохода
						КонецЕсли;
						Если ЗначениеЗаполнено(ДополнительныеПоляЗаполнения) Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаПриемник[Сч-1], СтрокаТЗ, ДополнительныеПоляЗаполнения);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для расчета налога в "межрасчетном" варианте обеспечивает "соответствие" налога, вписываемого в документ, доходам документа.
// Вписываемый налог должен иметь тот же знак, что и доход. Если в результате расчета налога нарастающим итогом за год
// получилось иначе, вписывается нулевая сумма налога (возможно из строк за несколько месяцев) и сумма вычетов в
// пределам суммы доходов документа.
//
// Параметры:
//      РезультатыРасчетов - ТаблицаЗначений - таблица значений, содержащая будущий результат работы метода РассчитатьНалогПоОсновнойСтавке().
//		МежрасчетныйНДФЛ - ТаблицаЗначений - таблица значений, содержащая посчитанный налог по физическому лицу с учетом всех перерасчетов.
//		ДатаУдержанияИсчисленногоНалога - дата - дата предполагаемого удержания налога, который был исчислен.
//		МесяцРасчета - дата -
//		ВсегоДоходов - число - сумма дохода по межрасчетному документу для ограничения предоставленных вычетов
//
Процедура ПереписатьМежрасчетныйНДФЛФизическогоЛицаВРезультат(РезультатыРасчетов, МежрасчетныйНДФЛ, ДатаУдержанияИсчисленногоНалога, МесяцРасчета, Знач ВсегоДоходов = 0)
	
	Если (МежрасчетныйНДФЛ.Итог("НалогПоСтавке13") + МежрасчетныйНДФЛ.Итог("НалогСПревышенияПоСтавке13")) * ВсегоДоходов >= 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(МежрасчетныйНДФЛ, РезультатыРасчетов);
	Иначе 
		
		// Произошел перерасчет обязательств из-за изменения данных "задним" числом, т.е. 
		// сумма налога по знаку (+ или -) не соответствует доходам документа.
		// Налоги предыдущих периодов добавляем в пределах налога текущего периода с тем, 
		// чтобы общая сумма налога в документе оказалось нулевой.
		
		МежрасчетныйНДФЛ.Сортировать("МесяцНалоговогоПериода Убыв");
		
		ТекущийПериод = НачалоМесяца(?(ЗначениеЗаполнено(ДатаУдержанияИсчисленногоНалога), ДатаУдержанияИсчисленногоНалога, МесяцРасчета));
		НДФЛТекущегоПериодаВсего = 0;
		НДФЛТекущегоПериода = Новый Массив;
		СтрокиРезультатаДляТекущегоПериода = Новый Массив;
		Для каждого СтрокаДанных Из МежрасчетныйНДФЛ Цикл
			Если НачалоМесяца(СтрокаДанных.МесяцНалоговогоПериода) = ТекущийПериод Тогда
				НДФЛТекущегоПериодаВсего = НДФЛТекущегоПериодаВсего + СтрокаДанных.НалогПоСтавке13 + СтрокаДанных.НалогСПревышенияПоСтавке13;
				НоваяСтрокаНДФЛ = РезультатыРасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНДФЛ, СтрокаДанных);
				СтрокиРезультатаДляТекущегоПериода.Добавить(НоваяСтрокаНДФЛ);
				НДФЛТекущегоПериода.Добавить(СтрокаДанных);
			ИначеЕсли СтрокаДанных.МесяцНалоговогоПериода < ТекущийПериод Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НДФЛТекущегоПериодаВсего * ВсегоДоходов > 0 Тогда
			Если НДФЛТекущегоПериодаВсего > 0 Тогда
				Для каждого СтрокаДанных Из МежрасчетныйНДФЛ Цикл
					Если НачалоМесяца(СтрокаДанных.МесяцНалоговогоПериода) = ТекущийПериод Тогда
						Продолжить;
					КонецЕсли;
					Если НДФЛТекущегоПериодаВсего + СтрокаДанных.НалогПоСтавке13 + СтрокаДанных.НалогСПревышенияПоСтавке13 >= 0 Тогда
						ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(), СтрокаДанных);
						НДФЛТекущегоПериодаВсего = НДФЛТекущегоПериодаВсего + СтрокаДанных.НалогПоСтавке13 + СтрокаДанных.НалогСПревышенияПоСтавке13;
					ИначеЕсли НДФЛТекущегоПериодаВсего > 0 Тогда
						НоваяСтрока = РезультатыРасчетов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
						Если НоваяСтрока.НалогСПревышенияПоСтавке13 >= 0 Тогда
							НоваяСтрока.НалогПоСтавке13 = -НДФЛТекущегоПериодаВсего;
						ИначеЕсли НоваяСтрока.НалогПоСтавке13 >= 0 Тогда	
							НоваяСтрока.НалогСПревышенияПоСтавке13 = -НДФЛТекущегоПериодаВсего;
						Иначе	
							НоваяСтрока.НалогСПревышенияПоСтавке13 = Макс(-НДФЛТекущегоПериодаВсего, НоваяСтрока.НалогСПревышенияПоСтавке13);
							НДФЛТекущегоПериодаВсего = НДФЛТекущегоПериодаВсего - НоваяСтрока.НалогСПревышенияПоСтавке13;
							НоваяСтрока.НалогПоСтавке13 = -НДФЛТекущегоПериодаВсего;
						КонецЕсли;
						НДФЛТекущегоПериодаВсего = 0
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для каждого СтрокаДанных Из МежрасчетныйНДФЛ Цикл
					Если НачалоМесяца(СтрокаДанных.МесяцНалоговогоПериода) = ТекущийПериод Тогда
						Продолжить;
					КонецЕсли;
					Если НДФЛТекущегоПериодаВсего + СтрокаДанных.НалогПоСтавке13 + СтрокаДанных.НалогСПревышенияПоСтавке13 <= 0 Тогда
						ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(), СтрокаДанных);
						НДФЛТекущегоПериодаВсего = НДФЛТекущегоПериодаВсего + СтрокаДанных.НалогПоСтавке13 + СтрокаДанных.НалогСПревышенияПоСтавке13;
					ИначеЕсли НДФЛТекущегоПериодаВсего < 0 Тогда
						НоваяСтрока = РезультатыРасчетов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
						Если НоваяСтрока.НалогСПревышенияПоСтавке13 <= 0 Тогда
							НоваяСтрока.НалогПоСтавке13 = -НДФЛТекущегоПериодаВсего;
						ИначеЕсли НоваяСтрока.НалогПоСтавке13 <= 0 Тогда	
							НоваяСтрока.НалогСПревышенияПоСтавке13 = -НДФЛТекущегоПериодаВсего;
						Иначе	
							НоваяСтрока.НалогСПревышенияПоСтавке13 = Мин(-НДФЛТекущегоПериодаВсего, НоваяСтрока.НалогСПревышенияПоСтавке13);
							НДФЛТекущегоПериодаВсего = НДФЛТекущегоПериодаВсего - НоваяСтрока.НалогСПревышенияПоСтавке13;
							НоваяСтрока.НалогПоСтавке13 = -НДФЛТекущегоПериодаВсего;
						КонецЕсли;
						НДФЛТекущегоПериодаВсего = 0
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе 	
			
			// Впишем вычеты, которые обнулили налог.
			// Вписанные ранее строки налога текущего месяца заменим другими - с нулевым доходом, но ненулевыми вычетами.
			
			Для Каждого УдаляемаяСтрока Из СтрокиРезультатаДляТекущегоПериода Цикл
				РезультатыРасчетов.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			Если ВсегоДоходов <= 0 Тогда // оказалось, что располагаемых доходов нет
				Возврат
			КонецЕсли;
			
			ВсегоСтрокТекущегоПериода = НДФЛТекущегоПериода.Количество();
			МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РассчитываемыеРесурсыПоОсновнойСтавке());
			Для Сч = 1 По ВсегоСтрокТекущегоПериода Цикл
				СтрокаДанных = НДФЛТекущегоПериода [ВсегоСтрокТекущегоПериода - Сч];
				ЕстьДанныеВСтроке = Ложь;
				Для каждого ИмяРесурса Из МассивРесурсов Цикл
					Если ИмяРесурса = "НалогПоСтавке13" Или ИмяРесурса = "НалогСПревышенияПоСтавке13" Тогда
						СтрокаДанных[ИмяРесурса] = 0
					ИначеЕсли ВсегоДоходов > 0 Тогда
						Учтено = Мин(СтрокаДанных[ИмяРесурса], ВсегоДоходов);
						СтрокаДанных[ИмяРесурса] = Учтено;
						ВсегоДоходов = ВсегоДоходов - Учтено;
					Иначе
						СтрокаДанных[ИмяРесурса] = 0
					КонецЕсли;
					Если Не ЕстьДанныеВСтроке Тогда
						ЕстьДанныеВСтроке = СтрокаДанных[ИмяРесурса] <> 0;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьДанныеВСтроке Тогда
					ЗаполнитьЗначенияСвойств(РезультатыРасчетов.Добавить(),СтрокаДанных);
				КонецЕсли;
				Если ВсегоДоходов = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаПоФизическомуЛицу, СтрокиНДФЛЗаГод, НДФЛПорцииРасчета, ВычетыПорцииРасчета, ОписаниеВычетов, ТекущийНалоговыйПериод = Неопределено, ПредоставленныеСтандартныеИСоциальныеВычеты = Неопределено, СтруктураПоискаСтандартныхВычетов = Неопределено, ИмущественныеВычеты = Неопределено, СтруктураПоискаИмущественныхВычетов = Неопределено, ПоследнийМесяцПериода = 12)
	
	Если СтрокиНДФЛЗаГод = Неопределено Тогда // вызов из расчета для нерезидента
		
		// отменяем ранее предоставленные вычеты
		ВычетыПорцииРасчета.Очистить();
		Для СчМесяцев = 0 По ПоследнийМесяцПериода - 1 Цикл
			СтруктураПоискаСтандартныхВычетов.МесяцПериодаПредоставленияВычета = ДобавитьМесяц(ТекущийНалоговыйПериод, СчМесяцев);
			СтруктураПоискаИмущественныхВычетов.МесяцНалоговогоПериода = СтруктураПоискаСтандартныхВычетов.МесяцПериодаПредоставленияВычета;
			ВписатьПредоставленныеРанееВычетыВДанныеУчета(ВычетыПорцииРасчета, ПредоставленныеСтандартныеИСоциальныеВычеты.НайтиСтроки(СтруктураПоискаСтандартныхВычетов));
			ВписатьПредоставленныеРанееВычетыВДанныеУчета(ВычетыПорцииРасчета, ИмущественныеВычеты.НайтиСтроки(СтруктураПоискаИмущественныхВычетов));
		КонецЦикла;
		
		// Переписываем результаты очередной порции расчета в таблицу физ.лица
		Если ВычетыПорцииРасчета.Количество() = 0 Тогда
			Для Каждого СтрокаТЗ Из НДФЛПорцииРасчета Цикл
				Если СтрокаТЗ.НалогПоСтавке13 <> 0 Или СтрокаТЗ.НалогСПревышенияПоСтавке13 <> 0 Тогда
					ЗаполнитьЗначенияСвойств(РезультатРасчетаПоФизическомуЛицу.Добавить(), СтрокаТЗ);
				КонецЕсли;
			КонецЦикла;
			Возврат
		КонецЕсли;
			
	КонецЕсли;
	
	СтруктураПоискаВычетов = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, КатегорияДохода");
	
	Для Каждого СтрокаТЗ Из НДФЛПорцииРасчета Цикл
		СтрокаТЗ.МесяцПериодаПредоставленияВычета = НачалоМесяца(СтрокаТЗ.МесяцНалоговогоПериода);
	КонецЦикла;				
	
	// Вписываем наличие вычетов в таблицу результатов расчета.
	Для Каждого СтрокаТаблицыВычетов Из ВычетыПорцииРасчета Цикл
		ОписаниеВычета = ОписаниеВычетов[СтрокаТаблицыВычетов.КодВычета];
		Если ОписаниеВычета <> Неопределено И СтрокаТаблицыВычетов.РазмерВычета <> 0 Тогда
			СтрокаРезультат = НДФЛПорцииРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТаблицыВычетов);
			СтрокаРезультат.КоличествоВычетов = 1;	
		КонецЕсли;
	КонецЦикла;				
	
	НДФЛПорцииРасчета.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, КатегорияДохода", "НалогПоСтавке13, НалогСПревышенияПоСтавке13, КоличествоВычетов, ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13");
	
	// Переписываем результаты очередной порции расчета в таблицу физ.лица
	Для Каждого СтрокаТЗ Из НДФЛПорцииРасчета Цикл
		Если СтрокаТЗ.НалогПоСтавке13 + СтрокаТЗ.НалогСПревышенияПоСтавке13 <> 0 Или СтрокаТЗ.КоличествоВычетов > 0 Тогда
			СтрокаРезультат = РезультатРасчетаПоФизическомуЛицу.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТЗ);
			Если СтрокиНДФЛЗаГод <> Неопределено Тогда
				СтрокиНДФЛЗаГод.Добавить(СтрокаРезультат);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаВычетов, СтрокаТЗ);
			СтрокиВычетов = ВычетыПорцииРасчета.НайтиСтроки(СтруктураПоискаВычетов);
			
			Для Каждого ТекущаяСтрокаВычета Из СтрокиВычетов Цикл
				ОписаниеТекущегоВычета = ОписаниеВычетов[ТекущаяСтрокаВычета.КодВычета];
				Если ТекущаяСтрокаВычета.РазмерВычета <> 0 И ОписаниеТекущегоВычета <> Неопределено Тогда
					СтрокаРезультат[ОписаниеТекущегоВычета.ИмяКолонки] = СтрокаРезультат[ОписаниеТекущегоВычета.ИмяКолонки] + ТекущаяСтрокаВычета.РазмерВычета;
					Если ОписаниеТекущегоВычета.ИмяКолонки = "ПримененныйВычетЛичный" Тогда
						СтрокаРезультат.КодВычетаЛичный	= ТекущаяСтрокаВычета.КодВычета;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры	

Процедура РассчитатьСтаршийМесяцПолученияДохода(ПервыеСтрокиМесяцев)
	
	Если ПервыеСтрокиМесяцев.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	СтаршийМесяцПолученияДохода = ПервыеСтрокиМесяцев[0].МесяцНалоговогоПериода;
	Для каждого СтрокаМесяца Из ПервыеСтрокиМесяцев Цикл
		Если СтрокаМесяца.ВсеДоходыЗаМесяц > 0 Тогда
			СтаршийМесяцПолученияДохода = Макс(СтрокаМесяца.МесяцНалоговогоПериода, СтаршийМесяцПолученияДохода)
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаМесяца Из ПервыеСтрокиМесяцев Цикл
		СтрокаМесяца.СтаршийМесяцПолученияДохода = СтаршийМесяцПолученияДохода
	КонецЦикла;
	
	ПервыеСтрокиМесяцев.Очистить();
	
КонецПроцедуры

Процедура УдалитьУчтенныеСтрокиНерезидентов(СоответствиеНерезидентов, УчтенныеСтроки, ТаблицаДанныхУчета)
	
	Если Не ЗначениеЗаполнено(УчтенныеСтроки) Тогда
		Возврат
	КонецЕсли;
	
	Если СоответствиеНерезидентов[УчтенныеСтроки[0].ФизическоеЛицо] = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из УчтенныеСтроки Цикл
		ТаблицаДанныхУчета.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание стандартных вычетов, на которые имеет право физическое лицо в месяце МесяцНалоговогоПериода.
//
// Параметры:
//	МесяцНалоговогоПериода - Дата - месяц права на вычет 
//	ПериодСрезаПравНаВычеты - Дата - дата, по состоянию на которую читаются периодические сведения
//	СтрокиПравНаВычеты - ТаблицаЗначений или массив строк таблицы значений - строки соответствующей таблицы по физическому лицу
//	СтрокиТаблицыПримененияВычетов - ТаблицаЗначений или массив строк таблицы значений - строки соответствующей таблицы по физическому лицу
//	ИнформацияОНалоговомСтатусе - Структура - данные, возвращаемые методом ИнформацияОСтатусеНалогоплательщика()
//
// Возвращаемое значение:
//	Структура с полями: Вычеты, ДатаНачала, ДатаОкончания.
//
Функция ИнформацияОСтандартныхВычетахДействующихНаДату(МесяцНалоговогоПериода, ПериодСрезаПравНаВычеты, СтрокиПравНаВычеты, СтрокиТаблицыПримененияВычетов, ИнформацияОНалоговомСтатусе)
	
// Описание алгоритма: 
//	1. Проверяем статус сотрудника: для нерезидента описываем период без вычетов и больше никуда не смотрим.
//	2. Среди строк таблицы применения вычетов по физическому лицу, ищем строку (если есть - она будет единственной), для которой выполняется условие
//	МесяцНалоговогоПериода лежит между датой начала и датой окончания, указанными в строке. Если не найдем - определяем дату окончания периода без вычетов, в права на вычеты не заглядываем.
//	3. Если в текущем месяце у физ.лица зарегистрировано право на применение вычетов, выбираем те вычеты, что действуют в периоде этого права.
//	Прежде чем в очередной раз обращаться к этой функции, проверяем что предыдущей результат этой функции потерял актуальность (по датам начала и окончания и физическому лицу)
	
	Вычеты = Новый Соответствие;	
	ИнформацияОПримененииВычетов = Новый Структура("Вычеты, ДатаНачала, ДатаОкончания", Вычеты, МесяцНалоговогоПериода, ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Если СтрокиПравНаВычеты.Количество() = 0 Или СтрокиТаблицыПримененияВычетов.Количество() = 0 Тогда
		Возврат ИнформацияОПримененииВычетов;	
	КонецЕсли;	                                
	
	Если Не ИнформацияОНалоговомСтатусе.ПрименяетсяСтавкаПункта1Статьи224НК Тогда
		ИнформацияОПримененииВычетов.ДатаОкончания = ИнформацияОНалоговомСтатусе.ДатаОкончания;
		Возврат ИнформацияОПримененииВычетов;
	КонецЕсли;
	
	// получим действующую строку с данными о применении вычетов
	СтрокаТаблицыПримененияВычетов = Неопределено;
	Если СтрокиТаблицыПримененияВычетов.Количество() = 1 Тогда
		СтрокаТаблицыПримененияВычетов = СтрокиТаблицыПримененияВычетов[0];
		Если МесяцНалоговогоПериода < СтрокаТаблицыПримененияВычетов.ДатаНачала Или МесяцНалоговогоПериода > СтрокаТаблицыПримененияВычетов.ДатаОкончания Тогда
			Если СтрокаТаблицыПримененияВычетов.ДатаНачала > МесяцНалоговогоПериода Тогда
				ИнформацияОПримененииВычетов.ДатаОкончания = Мин(ИнформацияОПримененииВычетов.ДатаОкончания, СтрокаТаблицыПримененияВычетов.ДатаНачала - 1);
			КонецЕсли;
			СтрокаТаблицыПримененияВычетов = Неопределено;
		КонецЕсли;
	Иначе	
		Для Каждого ТекущаяСтрокаПримененияВычетов Из СтрокиТаблицыПримененияВычетов Цикл
			Если МесяцНалоговогоПериода >= ТекущаяСтрокаПримененияВычетов.ДатаНачала И МесяцНалоговогоПериода <= ТекущаяСтрокаПримененияВычетов.ДатаОкончания Тогда
				СтрокаТаблицыПримененияВычетов = ТекущаяСтрокаПримененияВычетов;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицыПримененияВычетов = Неопределено Тогда
			Для Каждого ТекущаяСтрокаПримененияВычетов Из СтрокиТаблицыПримененияВычетов Цикл
				Если ТекущаяСтрокаПримененияВычетов.ДатаНачала > МесяцНалоговогоПериода Тогда
					ИнформацияОПримененииВычетов.ДатаОкончания = Мин(ИнформацияОПримененииВычетов.ДатаОкончания, ТекущаяСтрокаПримененияВычетов.ДатаНачала - 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицыПримененияВычетов = Неопределено Тогда
		Возврат ИнформацияОПримененииВычетов;
	ИначеЕсли Не СтрокаТаблицыПримененияВычетов.ПрименятьВычеты Тогда
		ИнформацияОПримененииВычетов.ДатаОкончания = СтрокаТаблицыПримененияВычетов.ДатаОкончания;
		Возврат ИнформацияОПримененииВычетов;
	КонецЕсли;

	ДатаОкончания = Мин(ИнформацияОПримененииВычетов.ДатаОкончания, ИнформацияОНалоговомСтатусе.ДатаОкончания, КонецГода(МесяцНалоговогоПериода));
	
	ПериодСрезаВычетов = ?(МесяцНалоговогоПериода > ПериодСрезаПравНаВычеты, ПериодСрезаПравНаВычеты,  МесяцНалоговогоПериода);
	Для Каждого СтрокаТаблицыВычетов Из СтрокиПравНаВычеты Цикл
		Если МесяцНалоговогоПериода >= СтрокаТаблицыВычетов.ДатаНачала
			И МесяцНалоговогоПериода <= СтрокаТаблицыВычетов.ДатаОкончания
			И ПериодСрезаВычетов >= СтрокаТаблицыВычетов.ПериодРегистрацииНачало
			И ПериодСрезаВычетов <= СтрокаТаблицыВычетов.ПериодРегистрацииОкончание Тогда
		
			ДатаОкончания = Мин(ДатаОкончания, СтрокаТаблицыВычетов.ДатаОкончания - 1, СтрокаТаблицыВычетов.ПериодРегистрацииОкончание - 1);
												
			Если (СтрокаТаблицыВычетов.Количество <> 0 Или СтрокаТаблицыВычетов.ЛичныйВычет)
				И (Не СтрокаТаблицыВычетов.ЛичныйВычет Или СтрокаТаблицыВычетов.КодВычета <> Справочники.ВидыВычетовНДФЛ.ПустаяСсылка()) Тогда
			
				Вычеты.Вставить(СтрокаТаблицыВычетов.КодВычета, СтрокаТаблицыВычетов.Количество);
			КонецЕсли;	
		Иначе
			Если СтрокаТаблицыВычетов.ДатаНачала > МесяцНалоговогоПериода Тогда
				ДатаОкончания = Мин(ДатаОкончания, СтрокаТаблицыВычетов.ДатаНачала - 1);
			КонецЕсли;
			Если СтрокаТаблицыВычетов.ПериодРегистрацииНачало > ПериодСрезаВычетов Тогда
				ДатаОкончания = Мин(ДатаОкончания, СтрокаТаблицыВычетов.ПериодРегистрацииНачало - 1);
			КонецЕсли;					
		КонецЕсли;		
	КонецЦикла;		
	
	ИнформацияОПримененииВычетов.ДатаОкончания = ДатаОкончания;
	
	Возврат ИнформацияОПримененииВычетов;
КонецФункции	

Функция НовыйПараметрыЗаполненияРесурса(ИмяРесурса, ИмяПоляКоэффициент, ТочностьВеличины = 2, ПоляЗаполнения = "Подразделение", ДополнительныеПоляЗаполнения = Неопределено)
	
	ПараметрыЗаполненияРесурса = Новый Структура();
	ПараметрыЗаполненияРесурса.Вставить("ИмяРесурса", ИмяРесурса);
	ПараметрыЗаполненияРесурса.Вставить("ИмяПоляКоэффициент", ИмяПоляКоэффициент);
	ПараметрыЗаполненияРесурса.Вставить("ТочностьВеличины", ТочностьВеличины);
	ПараметрыЗаполненияРесурса.Вставить("ПоляЗаполнения", ПоляЗаполнения);
	ПараметрыЗаполненияРесурса.Вставить("ДополнительныеПоляЗаполнения", ДополнительныеПоляЗаполнения);
	
	Возврат ПараметрыЗаполненияРесурса;	
КонецФункции	

// Чтобы обеспечить применение вычетов в нужном порядке, создадим специальную структуру данных со свойствами
//		ОписаниеВычетов - соответствие, где для каждого вычета содержится информация о том, является ли он имущественным, а также определяющий очередность применения порядковый номер
//		ОстаткиВычетов - соответствие, где ключом выступает код вычета, значение - остающаяся пока не примененной сумма вычета
//		ТаблицаВычетов - таблица значений с полями КодВычета, ПорядокСписания, ИмущественныйВычет
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура.
//
Функция НовыйОстаткиВычетов()
	
	ОстаткиВычетов = Новый Структура;	
	ОстаткиВычетов.Вставить("ОписаниеВычетов", УчетНДФЛПовтИсп.ОписаниеВычетов());
			
	//	Нужен счетчик остатков - это соответствие, где в качестве ключа выступает имя вычета, в качестве значения число;
	// элементы соответствия будем добавлять по мере появления прав на вычеты.
	ОстаткиВычетов.Вставить("Остатки", Новый Соответствие); 	
		
	//	Также нужна упорядоченная (впоследствии) таблица значений, где соответствующие вычетам строки будут находится в том порядке, 
	// в котором они будут списываться
	ТаблицаВычетов = Новый ТаблицаЗначений();
	ОстаткиВычетов.Вставить("ТаблицаВычетов", ТаблицаВычетов);
	
	ТаблицаВычетов.Колонки.Добавить("КодВычета");
	ТаблицаВычетов.Колонки.Добавить("ПорядокСписания", Новый ОписаниеТипов("Число"));
	ТаблицаВычетов.Колонки.Добавить("ИмущественныйВычет", Новый ОписаниеТипов("Булево"));
		
	Возврат ОстаткиВычетов;
		
КонецФункции


Функция ЕстьДанныеВСтроке(СтрокаКоллекции, ИменаРесурсов)
	Для каждого ИмяРесурса Из ИменаРесурсов Цикл
		Если ЗначениеЗаполнено(СтрокаКоллекции[ИмяРесурса]) Тогда
			Возврат Истина	
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь	
КонецФункции

// Переносит дату операции на конец месяца начисления при выплате "под расчет".
//
// Параметры:
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ПериодРегистрации - дата - 
//		ОкончательныйРасчет - булево - признак того, является ли выплата, для которой рассчитывается удержанный налог, выплатой "под расчет".
//
//  Возвращает дату.
//
Функция ДатаОперацииПоДокументуВыплаты(ДатаОперации, ПериодРегистрации, ОкончательныйРасчет)

	Возврат ?(ОкончательныйРасчет И ЗначениеЗаполнено(ПериодРегистрации), Макс(КонецМесяца(ПериодРегистрации), КонецДня(ДатаОперации)), КонецДня(ДатаОперации));

КонецФункции

Процедура ПроставитьРегистрациюВНалоговомОрганеВТаблице(Организация, ТаблицаДанных, ДатаАктуальности) Экспорт

	Если ТаблицаДанных.Колонки.Найти("Подразделение") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДанных.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	КонецЕсли;
	
	СоответствиеПодразделенийИРегистраций = ПолучитьРегистрацииПодразделенийВНалоговомОргане(ТаблицаДанных.ВыгрузитьКолонку("Подразделение"), ДатаАктуальности);
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаАктуальности);
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		ПроставитьРегистрациюВНалоговомОрганеВСтроке(СтрокаДанных, СоответствиеПодразделенийИРегистраций.Получить(СтрокаДанных.Подразделение), РегистрацияВНалоговомОргане);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьРегистрацииПодразделенийВНалоговомОргане(Подразделения, ДатаАктуальности = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ДатаАктуальности = '00010101'
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("МассивСсылок", Подразделения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница КАК Ссылка,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&ДатаАктуальности, СтруктурнаяЕдиница В (&МассивСсылок)) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних";
	
	СоответствиеРегистраций = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеРегистраций.Вставить(Выборка.Ссылка, Выборка.РегистрацияВНалоговомОргане);		
	КонецЦикла;	
	Возврат СоответствиеРегистраций;
КонецФункции	

// Дописывает к строкам таблицы движений рассчитанную по данным каждой строки регистрацию в НО
//
// Параметры:
//		ТаблицаДвижений - ТаблицаЗначений - таблица значений с колонками:
//			* Подразделение - ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации -
//          * колонкой типа Дата, по состоянию на которую будет вычисляться регистрация в НО, имя колонки передается отдельно 
//          иными колонками
//		ИмяПоляДаты - строка - имя колонки с датами актуальности регистраций
//
//  Возвращаемое значение:
//  	новая таблица значений, представляющая собой переданную таблицу ТаблицаДвижений, дополненную колонкой РегистрацияВНалоговомОргане
//
Функция ТаблицаДвиженийСРегистрациейВНалоговомОргане(ТаблицаДвижений, ИмяПоляДаты) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаДвижений, "ВТТаблицаДвижений");
	
	ИменаКолонок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДвижений.Колонки, "Имя");
	ТекстПолей = "";
	Для каждого Имя Из ИменаКолонок Цикл
		ТекстПолей = ТекстПолей + "," + Символы.ПС + Символы.Таб + "ТаблицаДвижений." + Имя
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаДвижений.ТекстПолей
	|ИЗ
	|	ВТТаблицаДвижений КАК ТаблицаДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОрганеВторичный КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО ТаблицаДвижений.Подразделение = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (ТаблицаДвижений.ИмяПоляДаты МЕЖДУ ИсторияРегистрацийВНалоговомОргане.ДатаНачала И ИсторияРегистрацийВНалоговомОргане.ДатаОкончания)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляДаты", ИмяПоляДаты);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ТаблицаДвижений.ТекстПолей", Сред(ТекстПолей, 4));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Дописывает к строкам таблицы движений признак Источник дохода за пределами РФ
//
// Параметры:
//		ТаблицаДвижений - ТаблицаЗначений - таблица значений с колонками:
//			* ПодразделениеСотрудника - Справочник.ПодразделенияОрганизаций -
//          * колонкой типа Дата, по состоянию на которую будет вычисляться регистрация в НО, имя колонки передается отдельно 
//          иными колонками
//		ИмяПоляДаты - строка - имя колонки с датами актуальности регистраций
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
//  Возвращаемое значение:
//  	новая таблица значений, представляющая собой переданную таблицу ТаблицаДвижений, дополненную колонкой ИсточникДоходаЗаПределамиРФ
//
Функция ТаблицаДвиженийСИсточникомДоходаЗаПределамиРФ(ТаблицаДвижений, ИмяПоляДаты)

	Если ТаблицаДвижений.Колонки.Найти("ПодразделениеСотрудника") = Неопределено И ТаблицаДвижений.Колонки.Найти("Подразделение") = Неопределено Тогда
		Возврат ТаблицаДвижений	
	КонецЕсли;
	
	ИмяПоляПодразделенияОрганизации = "ПодразделениеСотрудника";
	Если ТаблицаДвижений.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда
		ИмяПоляПодразделенияОрганизации = "Подразделение";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ТаблицаДвижений, "ВТТаблицаДвижений");
	
	ИменаКолонок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДвижений.Колонки, "Имя");
	ТекстПолей = "";
	Для Каждого Имя Из ИменаКолонок Цикл
		ТекстПолей = ТекстПолей + "," + Символы.ПС + Символы.Таб + "ТаблицаДвижений." + Имя
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницыЗаПределамиРФ.Подразделение ЕСТЬ НЕ NULL  КАК ИсточникДоходаЗаПределамиРФ,
	|	ТаблицаДвижений.ТекстПолей КАК ТекстПолей
	|ИЗ
	|	ВТТаблицаДвижений КАК ТаблицаДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияЗаПределамиРФ КАК СтруктурныеЕдиницыЗаПределамиРФ
	|		ПО ТаблицаДвижений.ИмяПоляПодразделенияОрганизации = СтруктурныеЕдиницыЗаПределамиРФ.Подразделение
	|			И (ТаблицаДвижений.ИмяПоляДаты МЕЖДУ СтруктурныеЕдиницыЗаПределамиРФ.ДатаНачала И СтруктурныеЕдиницыЗаПределамиРФ.ДатаОкончания)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляДаты", ИмяПоляДаты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляПодразделенияОрганизации", ИмяПоляПодразделенияОрганизации);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ТаблицаДвижений.ТекстПолей КАК ТекстПолей", Сред(ТекстПолей, 4));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция НалогиИзДанныхДокумента(ДанныеДокумента, ИмяКолонки, Ставка)

	ПереченьКолонок = "ФизическоеЛицо, МесяцНалоговогоПериода, КатегорияДохода, Подразделение, РегистрацияВНалоговомОргане, " + ИмяКолонки ;
	Если ИмяКолонки = "НалогПоСтавке13" Тогда
		ПереченьКолонок = ПереченьКолонок + ",НалогСПревышенияПоСтавке13";
	ИначеЕсли ИмяКолонки = "ЗачтеноАвансовыхПлатежейПоСтавке13" Тогда
		ПереченьКолонок = ПереченьКолонок + ",ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13";
	КонецЕсли;
	
	ИсчисленныйНалог = ДанныеДокумента.Скопировать(, ПереченьКолонок);
	ИсчисленныйНалог.Колонки[ИмяКолонки].Имя = "Сумма";
	Если ИмяКолонки = "НалогПоСтавке13" Тогда
		ИсчисленныйНалог.Колонки["НалогСПревышенияПоСтавке13"].Имя = "СуммаСПревышения";
	ИначеЕсли ИмяКолонки = "ЗачтеноАвансовыхПлатежейПоСтавке13" Тогда
		ИсчисленныйНалог.Колонки["ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13"].Имя = "СуммаСПревышения";
	КонецЕсли;
	ИсчисленныйНалог.Колонки.Добавить("СтавкаНалогообложенияРезидента", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	ИсчисленныйНалог.ЗаполнитьЗначения(Ставка, "СтавкаНалогообложенияРезидента");
	
	Возврат ИсчисленныйНалог	

КонецФункции

Функция ИмущественныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяКолонки, КодВычета)

	ИмущественныеВычеты = ДанныеДокумента.Скопировать(,"ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, РегистрацияВНалоговомОргане, " + ИмяКолонки);
	ИмущественныеВычеты.Колонки[ИмяКолонки].Имя = "Сумма";
	ИмущественныеВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ИмущественныеВычеты.ЗаполнитьЗначения(КодВычета, "КодВычета");
	ИмущественныеВычеты.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0)));
	
	Для каждого СтрокаТЗ Из ИмущественныеВычеты Цикл
		СтрокаТЗ.Год = Год(СтрокаТЗ.МесяцНалоговогоПериода)
	КонецЦикла;
		
	Возврат ИмущественныеВычеты	

КонецФункции

Функция СтандартныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяКолонки, КодВычета)

	СтандартныеВычеты = ДанныеДокумента.Скопировать(,"ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, РегистрацияВНалоговомОргане, " + ИмяКолонки);
	СтандартныеВычеты.Колонки[ИмяКолонки].Имя = "Сумма";
	СтандартныеВычеты.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	СтандартныеВычеты.ЗаполнитьЗначения(КодВычета, "КодВычета");
	
	Возврат СтандартныеВычеты	

КонецФункции

Функция ЛичныйВычетИзДанныхДокумента(ДанныеДокумента, ИмяКолонкиСуммы, ИмяКолонкиКода)

	СтандартныеВычеты = ДанныеДокумента.Скопировать(,"ФизическоеЛицо, МесяцНалоговогоПериода, Подразделение, РегистрацияВНалоговомОргане, " + ИмяКолонкиСуммы + "," + ИмяКолонкиКода);
	СтандартныеВычеты.Колонки[ИмяКолонкиСуммы].Имя = "Сумма";
	СтандартныеВычеты.Колонки[ИмяКолонкиКода].Имя = "КодВычета";
	
	Возврат СтандартныеВычеты	

КонецФункции

Функция РаспределитьПеречисленныйНалогПоФизическимЛицам(Ссылка, Организация, ДатаОперации, Сумма, МесяцНалоговогоПериода, РегистрацияВНалоговомОргане, ФизическиеЛица, Ставка)

	ПеречисленныеСуммы = Новый ТаблицаЗначений();
	ПеречисленныеСуммы.Колонки.Добавить("Сумма",								Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ПеречисленныеСуммы.Колонки.Добавить("МесяцНалоговогоПериода",				Новый ОписаниеТипов("Дата"));
	ПеречисленныеСуммы.Колонки.Добавить("ФизическоеЛицо",						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПеречисленныеСуммы.Колонки.Добавить("Ставка",								Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавки"));
	ПеречисленныеСуммы.Колонки.Добавить("ИсчисленоПоДивидендам",				Новый ОписаниеТипов("Булево"));
	ПеречисленныеСуммы.Колонки.Добавить("ВключатьВДекларациюПоНалогуНаПрибыль",	Новый ОписаниеТипов("Булево"));
	
	ДатаБлижайшегоПлатежа = НачалоДня(ДатаОперации) + 86400;
	РабочиеДни = КалендарныеГрафики.БлижайшиеРабочиеДаты(КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаБлижайшегоПлатежа), ПараметрыПолученияБлижайшихРабочихДат(Организация, ДатаБлижайшегоПлатежа < '20200801'));
	Если РабочиеДни <> Неопределено Тогда 
		ДатаБлижайшегоПлатежа = РабочиеДни[ДатаБлижайшегоПлатежа]
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОперации", КонецДня(ДатаБлижайшегоПлатежа));
	Запрос.УстановитьПараметр("НачалоОсмотраБудущихЗаписей", НачалоМесяца(ДобавитьМесяц(ДатаОперации, -3)));
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода", МесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("Ставка", Ставка);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.Ставка КАК Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Остатки(
	|			&ДатаОперации,
	|			Организация = &Организация
	|				И &УсловиеДляФизлиц
	|				И &УсловиеДляСтавки
	|				И &УсловиеДляМесяцНалоговогоПериода
	|				И РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане) КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	-РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты > &ДатаОперации
	|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоОсмотраБудущихЗаписей И &ДатаОперации
	|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация = &Организация
	|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И &УсловиеДляСтавки
	|	И &УсловиеДляФизлиц
	|	И &УсловиеДляМесяцНалоговогоПериода";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляФизлиц", "ФизическоеЛицо В(&ФизическиеЛица)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляФизлиц", "Истина");
	КонецЕсли;
	Если ЗначениеЗаполнено(Ставка) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляСтавки", "Ставка = &Ставка");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляСтавки", "(Ставка <> ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15) ИЛИ ИсчисленоПоДивидендам)");
	КонецЕсли;
	Если ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляМесяцНалоговогоПериода", "МесяцНалоговогоПериода = &МесяцНалоговогоПериода");
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляМесяцНалоговогоПериода", "МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0)");
	КонецЕсли;
	Результаты = Запрос.Выполнить().Выгрузить();
	ПервыйИтог = Результаты.Итог("Сумма");
	Если ПервыйИтог < Сумма Тогда
		Остаток = Сумма - ПервыйИтог;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма) КАК Сумма,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка КАК Ставка,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты КАК КрайнийСрокУплаты
		|ИЗ
		|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
		|ГДЕ
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты > &ДатаОперации
		|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоОсмотраБудущихЗаписей И &ДатаОперации
		|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация = &Организация
		|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|	И &УсловиеДляФизлиц
		|	И &УсловиеДляМесяцНалоговогоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
		|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	КрайнийСрокУплаты";
		Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляФизлиц", "ФизическоеЛицо В(&ФизическиеЛица)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляФизлиц", "Истина");
		КонецЕсли;
		Если ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляМесяцНалоговогоПериода", "МесяцНалоговогоПериода = &МесяцНалоговогоПериода");
		Иначе
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляМесяцНалоговогоПериода", "МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2015, 1, 1, 0, 0, 0)");
		КонецЕсли;
		ПоследующиеУдержания = Запрос.Выполнить().Выгрузить();
		СрокиУплаты = ПоследующиеУдержания.ВыгрузитьКолонку("КрайнийСрокУплаты");
		СтруктураОтбора = Новый Структура("КрайнийСрокУплаты");
		ТекущийСрокУплаты = Неопределено;
		Для каждого Элемент Из СрокиУплаты Цикл
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			Если Элемент = ТекущийСрокУплаты Тогда
				Продолжить;
			КонецЕсли;
		    ТекущийСрокУплаты = Элемент;
			СтруктураОтбора.КрайнийСрокУплаты = ТекущийСрокУплаты;
			ДополнительныеСтроки = ПоследующиеУдержания.Скопировать(СтруктураОтбора);
			ДополнительнаяСумма = ДополнительныеСтроки.Итог("Сумма");
			Если ДополнительнаяСумма <= Остаток Тогда
				Остаток = Остаток - ДополнительнаяСумма;
			Иначе
				Если ДополнительныеСтроки.Количество() = 1 Тогда
					ДополнительныеСтроки[0].Сумма = Остаток
				Иначе
					Коэффициент = Остаток / ДополнительнаяСумма;
					МаксимальнаяСумма = 0;
					ИндексМаксимальнойСуммы = -1;
					ПолученнаяСумма = 0;
					Для каждого СтрокаТЗ Из ДополнительныеСтроки Цикл
						МаксимальнаяСумма = Макс(МаксимальнаяСумма, СтрокаТЗ.Сумма);
						Если МаксимальнаяСумма = СтрокаТЗ.Сумма Тогда
							ИндексМаксимальнойСуммы = ДополнительныеСтроки.Индекс(СтрокаТЗ);
						КонецЕсли;
						СтрокаТЗ.Сумма = СтрокаТЗ.Сумма * Коэффициент;
						ПолученнаяСумма = ПолученнаяСумма + СтрокаТЗ.Сумма;
					КонецЦикла;
					ОшибкаОкругления = Остаток - ПолученнаяСумма;
					Если ОшибкаОкругления <> 0 И ИндексМаксимальнойСуммы >= 0 Тогда
						ДополнительныеСтроки[ИндексМаксимальнойСуммы].Сумма = ДополнительныеСтроки[ИндексМаксимальнойСуммы].Сумма - ОшибкаОкругления
					КонецЕсли;
				КонецЕсли;
				Остаток = 0;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеСтроки, Результаты);
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ", Результаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.Сумма КАК Сумма,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.Ставка КАК Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТДанныеУчета
	|ИЗ
	|	&РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Остатки.Ставка КАК Ставка,
	|	СУММА(Остатки.Сумма) КАК Сумма,
	|	Остатки.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	Остатки.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Остатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	ВТДанныеУчета КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Ставка,
	|	Остатки.ИсчисленоПоДивидендам,
	|	Остатки.МесяцНалоговогоПериода,
	|	Остатки.ВключатьВДекларациюПоНалогуНаПрибыль
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Остатки.Ставка КАК Ставка,
	|	Остатки.Сумма КАК Сумма,
	|	Остатки.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	Остатки.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Остатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ИЗ
	|	ВТОстатки КАК Остатки
	|ГДЕ
	|	Остатки.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Остатки.Ставка КАК Ставка,
	|	-Остатки.Сумма КАК Сумма,
	|	Остатки.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	Остатки.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Остатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ИЗ
	|	ВТОстатки КАК Остатки
	|ГДЕ
	|	Остатки.Сумма < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сумма,
	|	ФизическоеЛицо,
	|	Ставка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(Остатки.Сумма) КАК Сумма
	|ИЗ
	|	ВТОстатки КАК Остатки
	|ГДЕ
	|	Остатки.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНалоговогоПериода";

	Результаты = Запрос.ВыполнитьПакет();
	ТаблицаПереплат = Результаты[3].Выгрузить();
	Результат = Результаты[2].Выгрузить();
	
	ВсегоПереплаты = ТаблицаПереплат.Итог("Сумма");
	КУплате = Результат.Итог("Сумма");
	
	ПеречисленоСУчетомПереплаты = Мин(КУплате, Сумма + ВсегоПереплаты);
	Если ПеречисленоСУчетомПереплаты = 0 Тогда
		Возврат ПеречисленныеСуммы
	КонецЕсли;
	
	ЗачтеноПереплаты = Мин(ВсегоПереплаты, КУплате);
	Для каждого СтрокаТЗ Из ТаблицаПереплат Цикл
		НоваяСтрока = ПеречисленныеСуммы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, ,"Сумма"); 
		КЗачету = Мин(ЗачтеноПереплаты, СтрокаТЗ.Сумма);
		ЗачтеноПереплаты = ЗачтеноПереплаты - КЗачету;
		НоваяСтрока.Сумма = -КЗачету;
		Если ЗачтеноПереплаты = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
		РезультатРаспределения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ПеречисленоСУчетомПереплаты, ОбщегоНазначения.ВыгрузитьКолонку(Результат,"Сумма"),0);
		Если РезультатРаспределения = Неопределено Тогда
			Возврат ПеречисленныеСуммы
		Иначе
			Индекс = 0;
			Для каждого СтрокаТЗ Из Результат Цикл
				НоваяСтрока = ПеречисленныеСуммы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, ,"Сумма"); 
				НоваяСтрока.Сумма = РезультатРаспределения[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ПараметрыОтбора = Новый Структура("МесяцНалоговогоПериода");
		МесяцыЗадолженности = Результаты[4].Выбрать();
		Пока МесяцыЗадолженности.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, МесяцыЗадолженности);
			РезультатМесяцаЗадолженности = Результат.Скопировать(Результат.НайтиСтроки(ПараметрыОтбора));
			Если МесяцыЗадолженности.Сумма <= ПеречисленоСУчетомПереплаты Тогда
				Для каждого СтрокаТЗ Из РезультатМесяцаЗадолженности Цикл
					ЗаполнитьЗначенияСвойств(ПеречисленныеСуммы.Добавить(), СтрокаТЗ); 
				КонецЦикла;
				ПеречисленоСУчетомПереплаты = ПеречисленоСУчетомПереплаты - МесяцыЗадолженности.Сумма;
				Если ПеречисленоСУчетомПереплаты = 0 Тогда
					Прервать
				КонецЕсли;
			Иначе
				РезультатРаспределения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ПеречисленоСУчетомПереплаты, ОбщегоНазначения.ВыгрузитьКолонку(РезультатМесяцаЗадолженности,"Сумма"),0);
				Если РезультатРаспределения = Неопределено Тогда
					Возврат ПеречисленныеСуммы
				Иначе
					Индекс = 0;
					Для каждого СтрокаТЗ Из РезультатМесяцаЗадолженности Цикл
						НоваяСтрока = ПеречисленныеСуммы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, ,"Сумма"); 
						НоваяСтрока.Сумма = РезультатРаспределения[Индекс];
						Индекс = Индекс + 1;
					КонецЦикла;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПеречисленныеСуммы
	
КонецФункции

Функция СтрокаИмущественныхВычетов(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента, ОкончательныйРасчет = Истина)
	
	НоваяСтрока = Движения.ИмущественныеВычетыНДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Организация = Организация;
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		НоваяСтрока.Период = ДатаОперации;
	Иначе
		НоваяСтрока.Период = КонецМесяца(ДанныеДокумента.МесяцНалоговогоПериода);
		НоваяСтрока.ВычетМежрасчетногоПериода = Не ОкончательныйРасчет;
		НоваяСтрока.МесяцРегистрации = НачалоМесяца(ДатаОперации);
	КонецЕсли;
	// Код 318 отменен с 2015 года - Приказ ФНС от 10.09.2015 № ММВ-7-11/387@
	Если НоваяСтрока.Год > 2014 И НоваяСтрока.КодВычета = Справочники.ВидыВычетовНДФЛ.Код318 Тогда 
		НоваяСтрока.КодВычета = Справочники.ВидыВычетовНДФЛ.Код312
	КонецЕсли;
	
    Возврат НоваяСтрока
	
КонецФункции

Функция СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента, ВидСтроки = Неопределено, ОкончательныйРасчет = Истина, ДатаВыплаты = '00010101')
	
	НоваяСтрока = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ДатаОперации;
	НоваяСтрока.ВариантУдержания = ВидСтроки;
	НоваяСтрока.РасчетМежрасчетногоПериода = Не ОкончательныйРасчет;
	Если НоваяСтрока.МесяцНалоговогоПериода < ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев() Тогда
		НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(НоваяСтрока.МесяцНалоговогоПериода)
	КонецЕсли;
	Если ЗначениеЗаполнено(НоваяСтрока.КодДохода) И НоваяСтрока.КатегорияДохода <> Перечисления.КатегорииДоходовНДФЛ.Дивиденды Тогда
		Если КодыДоходовПоЦеннымБумагам(Год(НоваяСтрока.МесяцНалоговогоПериода)).Найти(НоваяСтрока.КодДохода) = Неопределено Тогда
			НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Ложь
		КонецЕсли;
		НоваяСтрока.КодДохода = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка()
	КонецЕсли;
	Если Не НоваяСтрока.ДатаПолученияДоходаФиксирована Тогда
		НоваяСтрока.ДатаПолученияДоходаФиксирована = ДатаПолученияДоходаДолжнаБытьЗафиксирована(НоваяСтрока.КатегорияДохода);
		Если Не НоваяСтрока.ДатаПолученияДоходаФиксирована И ЗначениеЗаполнено(ДатаВыплаты) Тогда
			НоваяСтрока.ДатаПолученияДоходаФиксирована = НоваяСтрока.МесяцНалоговогоПериода < ДатаВыплаты
		КонецЕсли;	
	КонецЕсли;
	Если НоваяСтрока.МесяцНалоговогоПериода < ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли() Тогда
		НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Ложь
	КонецЕсли;
	
	Возврат НоваяСтрока
	
КонецФункции

// Формирует строку движения по регистру РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Организация
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение
//		ВидДвижения.
//		ДанныеДокумента - некоторая структура (строка таблицы значений, выборки из результата запроса и т.п.) 
//				с полями, соответствующими полям регистра (в структуре могут отсутствовать необязательные поля)
//		ДанныеРаспределения - некоторая дополнительная структура (строка таблицы значений, выборки из результата запроса и т.п.)
//				с полями, соответствующими полям регистра (в структуре могут отсутствовать необязательные поля)
Функция СтрокаРасчетовНалоговыхАгентовСБюджетом(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента, ДанныеРаспределения = Неопределено, КодДохода = Неопределено, КатегорияДохода = Неопределено) 
	
	НоваяСтрока = Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	Если ДанныеРаспределения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРаспределения);
	КонецЕсли;
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ДатаОперации;
	Если КатегорияДохода <> Неопределено Тогда
		НоваяСтрока.ИсчисленоПоДивидендам = КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.Дивиденды
										Или КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05
										Или КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10
										Или КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12;
	ИначеЕсли КодДохода <> Неопределено Тогда	
		НоваяСтрока.ИсчисленоПоДивидендам = КодДохода = Справочники.ВидыДоходовНДФЛ.Код1010;
	КонецЕсли;
	НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(НоваяСтрока.МесяцНалоговогоПериода);
	Если НоваяСтрока.МесяцНалоговогоПериода < ДатаПереводаДоходовПоЦеннымБумагамВДекларациюПоПрибыли() Или НоваяСтрока.Ставка = Перечисления.НДФЛСтавки.Ставка35 Тогда
		НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Ложь
	ИначеЕсли НоваяСтрока.МесяцНалоговогоПериода < ДатаИзмененияНалогообложенияДивидендов() И НоваяСтрока.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда	
		НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Ложь
	ИначеЕсли НоваяСтрока.МесяцНалоговогоПериода >= ДатаИзмененияНалогообложенияДивидендов() И НоваяСтрока.Ставка = Перечисления.НДФЛСтавки.Ставка09 Тогда	
		НоваяСтрока.ВключатьВДекларациюПоНалогуНаПрибыль = Ложь
	КонецЕсли;
	
	Возврат НоваяСтрока
	
КонецФункции

Функция СтрокаСтандартныхВычетов(Движения, Организация, ДатаОперации, ДанныеДокумента, ОкончательныйРасчет)
	
	НоваяСтрока = Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ДатаОперации;
	НоваяСтрока.ВычетМежрасчетногоПериода = Не ОкончательныйРасчет;
	НоваяСтрока.МесяцПериодаПредоставленияВычета = НачалоМесяца(НоваяСтрока.МесяцПериодаПредоставленияВычета);
	
    Возврат НоваяСтрока
	
КонецФункции

Функция СтрокаАвансовыхПлатежейИностранцев(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента, ОкончательныйРасчет = Истина)
	
	НоваяСтрока = Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Организация = Организация;
	Если Не ЗначениеЗаполнено(НоваяСтрока.Год) И ЗначениеЗаполнено(НоваяСтрока.МесяцНалоговогоПериода) Тогда
		НоваяСтрока.Год = Год(НоваяСтрока.МесяцНалоговогоПериода)
	КонецЕсли;
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		НоваяСтрока.Период = ДатаОперации;
	Иначе
		НоваяСтрока.Период = КонецМесяца(Мин(ДатаОперации, ДанныеДокумента.МесяцНалоговогоПериода));
	КонецЕсли;
	
    Возврат НоваяСтрока
	
КонецФункции

#Область ФункцииПервоначальногоЗаполненияИОбновленияИБ

// Устарела - следует использовать ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления().
// Перезаполняет наборы записей регистраторов исправленными данными и записывает их.
//
// Параметры: 
//  ИмяРегистра - Строка - 
//  ТекстЗапроса - Строка - текст исполняемого запроса, в котором обязательно присутствует 
//			поле Регистратор, остальные поля должны соответствовать 
//          полям записи заполняемого регистра, в результате должны 
//          присутствовать все заполняемые поля;
//			кроме того, результат запроса должен быть упорядочен, 
//			первое поле упорядочивания - Регистратор
//  ПараметрыЗапроса - Структура - необязательный, содержит имена и значения параметров,
//          которые требуются запросу
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - необязательный, если передан, содержит 
//          необходимые основному запросу временные таблицы
//	ПараметрыОбновления - Структура - структура, которая приходит на вход в обработчик при отложенном обновлении
//
Процедура ОбработатьНаборыЗаписейРегистраНакопления(ИмяРегистра, ТекстЗапроса, ПараметрыЗапроса = Неопределено, МенеджерВременныхТаблиц = Неопределено, ПараметрыОбновления = Неопределено) Экспорт
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления(ИмяРегистра, ТекстЗапроса, ПараметрыЗапроса, МенеджерВременныхТаблиц, ПараметрыОбновления)
КонецПроцедуры


// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыДоходовНДФЛ) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ВидыДоходовНДФЛ.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.7.57";
		Обработчик.Процедура = "Справочники.ВидыДоходовНДФЛ.ИсправитьОписаниеКода2210";
		Обработчик.ОбщиеДанные = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.7.80";
		Обработчик.Процедура = "Справочники.ВидыДоходовНДФЛ.ИсправитьОписаниеКода3023";
		Обработчик.ОбщиеДанные = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.453";
		Обработчик.Процедура = "Справочники.ВидыДоходовНДФЛ.ЗаполнитьКодыДоходов2021";
		Обработчик.ОбщиеДанные = Истина;
		
	КонецЕсли;

	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыВычетовНДФЛ) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.9.27";
		Обработчик.Процедура = "Справочники.ВидыВычетовНДФЛ.ЗаполнитьКодыВычетовНДФЛ";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;

		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.453";
		Обработчик.Процедура = "Справочники.ВидыВычетовНДФЛ.ОписатьВычетДляМатериальнойПомощиСтудентам";
		Обработчик.ОбщиеДанные = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.453";
		Обработчик.Процедура = "Справочники.ВидыВычетовНДФЛ.ОписатьВычеты2021";
		Обработчик.ОбщиеДанные = Истина;
		
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтатусыНалогоплательщиковПоНДФЛ) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.СтатусыНалогоплательщиковПоНДФЛ.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
		
	КонецЕсли;
		
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.ВычетыПоДоходамНДФЛ) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.12.100";
		Обработчик.Процедура = "РегистрыСведений.ВычетыПоДоходамНДФЛ.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные =  Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
		
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.РазмерВычетовНДФЛ) Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.2.74";
		Обработчик.Процедура = "РегистрыСведений.РазмерВычетовНДФЛ.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.129";
	Обработчик.Процедура = "РегистрыСведений.РедактируемыеРеквизитыКодаДоходаНДФЛ.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b92912a6-3a5f-409b-b733-b1e58beb47b1");
	Обработчик.Комментарий = НСтр("ru = 'Обработка кодов дохода по НДФЛ. До завершения обработки рекомендуется воздержаться от начисления зарплаты, отпускных, б/л и пр.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.31";
	Обработчик.Процедура = "Документы.ВозвратНДФЛ.ЗаполнитьСуммыНалогаПоКатегориямДохода";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0c8b206c-d615-4eae-8342-0955ed73a1bc");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение документа Возврат НДФЛ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.50";
	Обработчик.Процедура = "УчетНДФЛ.ЗарегистрироватьМежрасчетныеДокументыКакУчтенныеПриРасчетеНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4486b6ee-37c6-4d4a-8a6f-5f1692dd81aa");
	Обработчик.Комментарий = НСтр("ru = 'Регистрация межрасчетов как учтенных при расчете НДФЛ документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.50";
	Обработчик.Процедура = "УчетНДФЛ.ЗарегистрироватьДокументыВыплатыКакУчтенныеПриРасчетеНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8f04d9d0-aa0b-4ccb-8e4e-f08ee52a4bae");
	Обработчик.Комментарий = НСтр("ru = 'Регистрация документов выплаты как учтенных при расчете НДФЛ документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.50";
	Обработчик.Процедура = "УчетНДФЛ.ЗарегистрироватьОперацииКакУчтенныеПриРасчетеНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a62bb8b-572a-43b6-ae58-6bc3053ca303");
	Обработчик.Комментарий = НСтр("ru = 'Регистрация Операций учета как учтенных при расчете НДФЛ документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.150";
	Обработчик.Процедура = "УчетНДФЛ.УточнитьКатегориюДоходаАвансовогоПлатежа";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("977f68fe-4f03-4612-b5ef-c800dfcbd852");
	Обработчик.Комментарий = НСтр("ru = 'Исправление зачтенных сумм авансовых платежей, введенных в Операциях учета по НДФЛ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.156";
	Обработчик.Процедура = "УчетНДФЛ.ПроставитьОснованияПоДоходамИзОпераций";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("baf02240-b543-42b7-804f-e67e0b3e727f");
	Обработчик.Комментарий = НСтр("ru = 'Дополнение сведений о доходах, введенных в Операциях учета по НДФЛ, данными об основаниях.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.30";
	Обработчик.Процедура = "УчетНДФЛ.ЗаполнитьНДФЛКПеречислению";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("66185a11-3866-4763-83e1-5c8b533f44a4");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение НДФЛ к перечислению.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.30";
	Обработчик.Процедура = "УчетНДФЛ.ЗаполнитьНДФЛПеречисленный";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26cbcdd0-f0a4-4831-a7c2-39ba7a1efde4");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение НДФЛ перечисленного.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.97";
	Обработчик.Процедура = "Документы.АвансовыйПлатежИностранцаПоНДФЛ.ЗаполнитьДатыЗапрета";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("80ce6c99-3d9c-48d5-8683-ad632c285c9c");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Авансовый платеж по НДФЛ"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.97";
	Обработчик.Процедура = "Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.ЗаполнитьДатыЗапрета";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("03c8b139-cda4-4dbe-ac2b-49139153d3d4");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Заявление на вычеты по НДФЛ"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.97";
	Обработчик.Процедура = "Документы.ПрекращениеСтандартныхВычетовНДФЛ.ЗаполнитьДатыЗапрета";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a0d53c59-2b91-4dc9-9767-1d8715f972bf");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Отмена стандартных вычетов НДФЛ"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.97";
	Обработчик.Процедура = "Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.ЗаполнитьДатыЗапрета";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cb7b8e74-941b-4f58-8944-99cb23a5c23c");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Уведомление НО о праве на вычеты"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.178";
	Обработчик.Процедура = "УчетНДФЛ.УточнитьКрайнийСрокУплатыВОсобыеНерабочиеДни";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a9bd0d35-8558-4a0a-a610-c2b5647e1fb3");
	Обработчик.Комментарий = НСтр("ru = 'Исправление сроков уплаты 24 июня и 1 июля'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.455";
	Обработчик.Процедура = "Документы.ОперацияНалоговогоУчетаПоНДФЛ.ПеренестиВычетВНалогНаПрибыль";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("aab06c7d-9205-493f-b357-25aac301dcae");
	Обработчик.Комментарий = НСтр("ru = 'Расчет налога на прибыль, принимаемого в зачет НДФЛ по дивидендам резидентов РФ.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.455";
	Обработчик.Процедура = "УчетНДФЛ.ВычеркнутьВычетПоДивидендамИзДоходов";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("547d2971-f108-4a17-b366-7b7f072382f6");
	Обработчик.Комментарий = НСтр("ru = 'Расчет налога на прибыль, принимаемого в зачет НДФЛ по дивидендам резидентов РФ.'");
	
КонецПроцедуры


Процедура ЗарегистрироватьВУчтенныхПриРасчетеНДФЛДокументах(ТекстЗапроса, ПараметрыОбновления)
	
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса; 
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат[0].Количество = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистраторы.Регистратор КАК ДокументОснование,
	|	Регистраторы.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.Организация КАК Организация
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ПО Регистраторы.Регистратор = СведенияОДоходахНДФЛ.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДокументыКакУчтенныеПриРасчетеНДФЛ(ВидДокумента = "", ПараметрыОбновления = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторыДоходов
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаДокумента КАК ТаблицаДокумента
	|		ПО СведенияОДоходахНДФЛ.Регистратор = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2018, 1, 1, 0, 0, 0)
	|	И ТаблицаДокумента.Ссылка ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РегистраторыДоходов.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	ВТРегистраторыДоходов КАК РегистраторыДоходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО РегистраторыДоходов.Регистратор = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО РегистраторыДоходов.Регистратор = ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор ЕСТЬ НЕ NULL 
	|	И ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор ЕСТЬ NULL";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", "Документ." + ВидДокумента);
	
	ЗарегистрироватьВУчтенныхПриРасчетеНДФЛДокументах(ТекстЗапроса, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗарегистрироватьМежрасчетныеДокументыКакУчтенныеПриРасчетеНДФЛ(ПараметрыОбновления = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО СведенияОДоходахНДФЛ.Регистратор = ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор
	|ГДЕ
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2018, 1, 1, 0, 0, 0)
	|	И СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
	|	И ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор ЕСТЬ NULL
	|	И &УсловиеНаТипРегистратора";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаТипРегистратора", "(" + УсловиеДопустимостиРегистратора("ДокументыУчтенныеПриРасчетеНДФЛ", "СведенияОДоходахНДФЛ") + ")"); 
	
	ЗарегистрироватьВУчтенныхПриРасчетеНДФЛДокументах(ТекстЗапроса, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗарегистрироватьДокументыВыплатыКакУчтенныеПриРасчетеНДФЛ(ПараметрыОбновления = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыВыплат
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор = ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2018, 1, 1, 0, 0, 0)
	|	И ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор ЕСТЬ NULL
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|	И &УсловиеНаТипРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ДокументыВыплат.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	ВТДокументыВыплат КАК ДокументыВыплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ПО ДокументыВыплат.Регистратор = СведенияОДоходахНДФЛ.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО ДокументыВыплат.Регистратор = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор ЕСТЬ НЕ NULL 
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаТипРегистратора", "(" + УсловиеДопустимостиРегистратора("ДокументыУчтенныеПриРасчетеНДФЛ", "РасчетыНалогоплательщиковСБюджетомПоНДФЛ") + ")"); 
	
	ЗарегистрироватьВУчтенныхПриРасчетеНДФЛДокументах(ТекстЗапроса, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗарегистрироватьОперацииКакУчтенныеПриРасчетеНДФЛ(ПараметрыОбновления = Неопределено) Экспорт
	
	ЗарегистрироватьДокументыКакУчтенныеПриРасчетеНДФЛ("ОперацияНалоговогоУчетаПоНДФЛ", ПараметрыОбновления)
	
КонецПроцедуры

Функция УсловиеДопустимостиРегистратора(ИмяРегистра, ИмяТаблицы)
	
	ТекстУсловия = "";
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];	
	Для каждого Документ Из Метаданные.Документы Цикл
		Если Документ.Движения.Содержит(МетаданныеРегистра) Тогда
			ТекстУсловия = ТекстУсловия + ?(ТекстУсловия = "", "", Символы.ПС + Символы.Таб + "ИЛИ ") + "ТИПЗНАЧЕНИЯ(ИмяТаблицы.Регистратор) = ТИП(Документ." + Документ.Имя + ")";
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ТекстУсловия, "ИмяТаблицы.", ?(ЗначениеЗаполнено(ИмяТаблицы), ИмяТаблицы + ".", ""));
	
КонецФункции

Процедура УточнитьКатегориюДоходаАвансовогоПлатежа(ПараметрыОбновления = Неопределено) Экспорт

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ОперацияНалоговогоУчетаПоНДФЛ
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2018, 1, 1, 0, 0, 0)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период >= ДАТАВРЕМЯ(2017, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОперацияНалоговогоУчетаПоНДФЛНДФЛИсчисленныйПоСтавке13.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	Документ.ОперацияНалоговогоУчетаПоНДФЛ.НДФЛИсчисленныйПоСтавке13 КАК ОперацияНалоговогоУчетаПоНДФЛНДФЛИсчисленныйПоСтавке13
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО ОперацияНалоговогоУчетаПоНДФЛНДФЛИсчисленныйПоСтавке13.Ссылка = Регистраторы.Регистратор
	|ГДЕ
	|	ОперацияНалоговогоУчетаПоНДФЛНДФЛИсчисленныйПоСтавке13.ЗачтеноАвансовыхПлатежей <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацияНалоговогоУчетаПоНДФЛНДФЛИсчисленныйПоСтавке13.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОперацияНалоговогоУчетаПоНДФЛНДФЛИсчисленныйПоСтавке13.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТруда)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|				И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ЗачетАвансовыхПлатежей)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ОплатаТруда)
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода
	|	КОНЕЦ КАК КатегорияДохода,
	|	*
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК Регистраторы
	|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор = Регистраторы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		Текст = СтрЗаменить(Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления("РасчетыНалогоплательщиковСБюджетомПоНДФЛ", Текст, , , ПараметрыОбновления)

КонецПроцедуры

Процедура ПроставитьОснованияПоДоходамИзОпераций(ПараметрыОбновления = Неопределено) Экспорт

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияНалоговогоУчетаПоНДФЛ КАК ОперацияНалоговогоУчетаПоНДФЛ
	|		ПО СведенияОДоходахНДФЛ.Регистратор = ОперацияНалоговогоУчетаПоНДФЛ.Ссылка
	|ГДЕ
	|	ОперацияНалоговогоУчетаПоНДФЛ.Ссылка ЕСТЬ НЕ NULL 
	|	И СведенияОДоходахНДФЛ.ДокументОснование = НЕОПРЕДЕЛЕНО
	|	И СведенияОДоходахНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
	|	И СведенияОДоходахНДФЛ.Период >= ДАТАВРЕМЯ(2018, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.ДокументОснование = НЕОПРЕДЕЛЕНО
	|			ТОГДА СведенияОДоходахНДФЛ.Регистратор
	|		ИНАЧЕ СведенияОДоходахНДФЛ.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО СведенияОДоходахНДФЛ.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст, , , ПараметрыОбновления)

КонецПроцедуры

Процедура ЗаполнитьНДФЛКПеречислению(ПараметрыОбновления = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор) В (&ТипыРегистраторов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	Регистраторы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|		ПО Регистраторы.Регистратор = НДФЛКПеречислению.Регистратор
	|ГДЕ
	|	НДФЛКПеречислению.Регистратор ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ТипыРегистраторов = Метаданные.РегистрыНакопления.НДФЛКПеречислению.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыРегистраторов", ТипыРегистраторов);
	Запрос.Текст = ТекстЗапроса; 
	Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВБухучетеРасширенный");
		Модуль.СоздатьВТФинансированиеПоДокументам(Запрос.МенеджерВременныхТаблиц, ТипыРегистраторов);
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(Запрос.МенеджерВременныхТаблиц, "ВТФинансированиеПоДокументам") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыКОбработке.Регистратор КАК Регистратор,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТФинансированиеПоДокументам
		|ИЗ
		|	ВТДокументыКОбработке КАК ДокументыКОбработке";
		Запрос.Выполнить();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация КАК Организация,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.ВозвращеноНалоговымАгентом)
	|			ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период
	|		ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КрайнийСрокУплаты
	|	КОНЕЦ КАК КрайнийСрокУплаты,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период КАК Период,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания КАК ВариантУдержания,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СрокПеречисления КАК СрокПеречисления,
	|	ЕСТЬNULL(ФинансированиеПоДокументам.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(ФинансированиеПоДокументам.СтатьяРасходов, ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)) КАК СтатьяРасходов,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор = ДокументыКОбработке.Регистратор
	|			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинансированиеПоДокументам КАК ФинансированиеПоДокументам
	|		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор = ФинансированиеПоДокументам.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления("НДФЛКПеречислению", ТекстЗапроса, , Запрос.МенеджерВременныхТаблиц, ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛПеречисленный(ПараметрыОбновления = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТИПЗНАЧЕНИЯ(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор) В (&ТипыРегистраторов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.Регистратор
	|ИЗ
	|	РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению КАК УплатаНДФЛНалоговымиАгентамиКРаспределению
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(УплатаНДФЛНалоговымиАгентамиКРаспределению.Регистратор) В (&ТипыРегистраторов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	Регистраторы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛПеречисленный КАК НДФЛПеречисленный
	|		ПО Регистраторы.Регистратор = НДФЛПеречисленный.Регистратор
	|ГДЕ
	|	НДФЛПеречисленный.Регистратор ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ТипыРегистраторов = Метаданные.РегистрыНакопления.НДФЛПеречисленный.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыРегистраторов", ТипыРегистраторов);
	Запрос.Текст = ТекстЗапроса; 
	Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВБухучетеРасширенный");
		Модуль.СоздатьВТФинансированиеПоДокументам(Запрос.МенеджерВременныхТаблиц, ТипыРегистраторов);
	КонецЕсли;
	
	Если Не ЗарплатаКадры.ВТСуществует(Запрос.МенеджерВременныхТаблиц, "ВТФинансированиеПоДокументам") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыКОбработке.Регистратор КАК Регистратор,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов
		|ПОМЕСТИТЬ ВТФинансированиеПоДокументам
		|ИЗ
		|	ВТДокументыКОбработке КАК ДокументыКОбработке";
		Запрос.Выполнить();
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация КАК Организация,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(ФинансированиеПоДокументам.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(ФинансированиеПоДокументам.СтатьяРасходов, ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)) КАК СтатьяРасходов,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма КАК Сумма,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор = ДокументыКОбработке.Регистратор
	|			И (РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинансированиеПоДокументам КАК ФинансированиеПоДокументам
	|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор = ФинансированиеПоДокументам.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.Регистратор,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.Организация,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка),
	|	СУММА(ВЫБОР
	|			КОГДА УплатаНДФЛНалоговымиАгентамиКРаспределению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1 * УплатаНДФЛНалоговымиАгентамиКРаспределению.Сумма
	|			ИНАЧЕ УплатаНДФЛНалоговымиАгентамиКРаспределению.Сумма
	|		КОНЕЦ),
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.Период
	|ИЗ
	|	РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению КАК УплатаНДФЛНалоговымиАгентамиКРаспределению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО УплатаНДФЛНалоговымиАгентамиКРаспределению.Регистратор = ДокументыКОбработке.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.Регистратор,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.Организация,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.РегистрацияВНалоговомОргане,
	|	УплатаНДФЛНалоговымиАгентамиКРаспределению.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления("НДФЛПеречисленный", ТекстЗапроса, , Запрос.МенеджерВременныхТаблиц, ПараметрыОбновления);
	
КонецПроцедуры

Процедура УточнитьКрайнийСрокУплатыВОсобыеНерабочиеДни(ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация КАК Организация
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВариантУдержания = ЗНАЧЕНИЕ(Перечисление.ВариантыУдержанияНДФЛ.Удержано)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КрайнийСрокУплаты В (ДАТАВРЕМЯ(2020, 6, 24, 0, 0, 0), ДАТАВРЕМЯ(2020, 7, 1, 0, 0, 0))
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период >= ДАТАВРЕМЯ(2020, 5, 1, 0, 0, 0)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПересмотретьСрокиУплаты(Выборка.Организация, '20200624', '20200624');
		ПересмотретьСрокиУплаты(Выборка.Организация, '20200701', '20200701');
	КонецЦикла;

КонецПроцедуры

Процедура ВычеркнутьВычетПоДивидендамИзДоходов(ПараметрыОбновления = Неопределено) Экспорт

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2021, 1, 1, 0, 0, 0)
	|	И СведенияОДоходахНДФЛ.СуммаВычета <> 0
	|	И СведенияОДоходахНДФЛ.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код601)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код601)
	|				И СведенияОДоходахНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2021, 1, 1, 0, 0, 0)
	|				И СведенияОДоходахНДФЛ.СуммаВычета <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ СведенияОДоходахНДФЛ.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодВычета = ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.Код601)
	|				И СведенияОДоходахНДФЛ.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2021, 1, 1, 0, 0, 0)
	|				И СведенияОДоходахНДФЛ.СуммаВычета <> 0
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОДоходахНДФЛ.СуммаВычета
	|	КОНЕЦ КАК СуммаВычета,
	|	*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО СведенияОДоходахНДФЛ.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст, , , ПараметрыОбновления)

КонецПроцедуры

#КонецОбласти

#Область АлгоритмыПрошлыхЛет

Процедура СоздатьВТСтавкаНДФЛПоСтавкеРезидента2016(МенеджерВременныхТаблиц, ИмяТаблицы, УчитыватьСтатусНаКонецГода = "НеУчитыватьИзмененияСтатуса", МесяцКонцаГода = 12) Экспорт
	
	УчетНДФЛАрхивныеАлгоритмы.СоздатьВТСтавкаНДФЛПоСтавкеРезидента2016(МенеджерВременныхТаблиц, ИмяТаблицы, УчитыватьСтатусНаКонецГода, МесяцКонцаГода);

КонецПроцедуры

Функция ДанныеОДоходахНалогахВычетах2016(Сотрудники, НалоговыйПериод, Организация, РегистрацияВНалоговомОргане = Неопределено, ДатаАктуальности = '00010101', КППОтправки = Неопределено, ПодробныеДанные = Ложь)
	
	Возврат УчетНДФЛАрхивныеАлгоритмы.ДанныеОДоходахНалогахВычетах2016(Сотрудники, НалоговыйПериод, Организация, РегистрацияВНалоговомОргане, ДатаАктуальности, КППОтправки, ПодробныеДанные)
	
КонецФункции


Процедура СоздатьВТСтавкаНДФЛПоСтавкеРезидентаБезОптимизации(МенеджерВременныхТаблиц, ИмяТаблицы = "ВТСтрокиУчета", УчитыватьСтатусНаКонецГода = "НеУчитыватьИзмененияСтатуса", ОкончаниеОтчетногоПериода = '00010101', ИмяТаблицыРезультата = "ВТСтавкаНДФЛПоСтавкеРезидента") 
	
	УчетНДФЛАрхивныеАлгоритмы.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(МенеджерВременныхТаблиц, ИмяТаблицы, УчитыватьСтатусНаКонецГода, ОкончаниеОтчетногоПериода, ИмяТаблицыРезультата)

КонецПроцедуры 

Функция ДанныеОПерерасчетеНДФЛпоПлоскимСтавкам(Организация, МесяцПерерасчета, НачалоПериода, ОкончаниеПериода, ФизическиеЛица = Неопределено, ДокументСсылка = Неопределено) Экспорт
	
	Возврат УчетНДФЛАрхивныеАлгоритмы.ДанныеОПерерасчетеНДФЛпоПлоскимСтавкам(Организация, МесяцПерерасчета, НачалоПериода, ОкончаниеПериода, ФизическиеЛица, ДокументСсылка)

КонецФункции 

Функция РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, Знач СписокФизическихЛиц, Знач ПервыйМесяцНалоговогоПериода, Знач ПоследнийМесяцНалоговогоПериода, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора, ОграничиватьНалоговыйПериод = Ложь)	
	
	Возврат УчетНДФЛАрхивныеАлгоритмы.РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора)
		
КонецФункции

Функция РассчитатьНалогПоОсновнойСтавкеБезОптимизации(Регистратор, Организация, МесяцРасчета, МенеджерВременныхТаблиц, Знач ПервыйМесяцНалоговогоПериода = Неопределено, Знач ПоследнийМесяцНалоговогоПериода = Неопределено, ИсключатьДоходыРегистратора = Истина, ОкончательныйРасчет = Истина, ДатаУдержанияИсчисленногоНалога = Неопределено) Экспорт 
	
	Возврат УчетНДФЛАрхивныеАлгоритмы.РассчитатьНалогПоОсновнойСтавке(Регистратор, Организация, МесяцРасчета, МенеджерВременныхТаблиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ИсключатьДоходыРегистратора, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога);
	
КонецФункции 

#КонецОбласти

// Дополняет перечень оплачиваемых платежным документом начислятелей оплаченными ранее документами, по которым по
// желанию пользователя не был удержан налог.
//      	 
// Параметры:
//      Регистратор - ДокументСсылка - ссылка на документ-регистратор.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ПериодРегистрации - дата - 
//      МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, содержит вр. таблицу 
//      	ВТСписокСотрудников с полями 
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты,
//          	ДокументОснование,
//          	СуммаНачисленная,
//          	СуммаВыплаченная
//		ТаблицаВыплат - таблица значений - выплачиваемые документом-регистратором суммы
//		ИмяТаблицыСписокСотрудников - Строка - 
//      	 
Процедура ДописатьДокументыОплаченныеБезУдержанияНДФЛ(Регистратор, Организация, ДатаОперации, ПериодРегистрации, МенеджерВременныхТаблиц, ТаблицаВыплат, ИмяТаблицыСписокСотрудников)
	УчетНДФЛВнутренний.ДописатьДокументыОплаченныеБезУдержанияНДФЛ(Регистратор, Организация, ДатаОперации, ПериодРегистрации, МенеджерВременныхТаблиц, ТаблицаВыплат, ИмяТаблицыСписокСотрудников)
КонецПроцедуры

#КонецОбласти