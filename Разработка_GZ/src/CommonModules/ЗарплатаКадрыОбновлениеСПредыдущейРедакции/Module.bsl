
Процедура ЗарплатаКадрыОбновлениеС20()Экспорт
	
	Если НЕ УчетЗарплаты.ВключенаПодсистемаУчетаЗарплатыИКадров() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = '20100101';
	ДатаОкончания = КонецГода(ТекущаяДата());
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	//НачатьТранзакцию();
	
	КонвертироватьНастройкиОрганизации();
	
	КонвертироватьСправочникВычетыНДФЛ(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникДоходыНДФЛ(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникОснованияВыслугиЛет(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникОсобыеУсловияТруда(СоответствиеКонвертированныхОбъектов);
	КонвертироватьСправочникТерриториальныеУсловия(СоответствиеКонвертированныхОбъектов);
	ФизическиеЛицаКонвертация();
	КонвертироватьПВРНачисления(СоответствиеКонвертированныхОбъектов);
	
	ЛицевыеСчетаСотрудниковКонвертация(СоответствиеКонвертированныхОбъектов);	
	ПодразделенияКонвертация();
	СотрудникиКонвертация();
	ЗаполнитьГоловногоСотрудника();
	ОрганизацииКонвертация();
	ГражданствоФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов);
	ДанныеОСтандартныхВычетахНДФЛКонвертация(СоответствиеКонвертированныхОбъектов);
	СведенияОбИнвалидностиФизическихЛицКонвертация();
	СтатусыФизическихЛицКонвертация();
	УчетнаяПолитикаОрганизацийВзносовКонвертация();
	ЗаполнитьИнициалыИмени();
	
	 //Конвертация кадровых документов
	 
	Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	
	КонвертироватьДокументыПриемНаРаботу(СписокДокументовПриемНаРаботу(), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыКадровоеПеремещение(СписокДокументовКадровоеПеремещение(), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументывВводПлановыхНачислений(СписокДокументовВводПлановыхНачислений(), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыУвольнение(СписокДокументовУвольнение(), СоответствиеКонвертированныхОбъектов);

	
	//РЕГИСТРЫ НАКОПЛЕНИЯ
	
	КонвертироватьДанныеУчетаВзаиморасчетов(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДанныеУчетаДепонентов(ДатаНачала, ДатаОкончания, СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДанныеУчетаНДФЛ(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьПособияПоУходуЗаРебенком(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьПособияПоСоциальномуСтрахованию(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьРасчетыСФондамиПоСтраховымВзносам(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьИсчисленныеСтраховыеВзносы(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьСведенияОДоходахДляСтраховыхВзносов(СоответствиеКонвертированныхОбъектов);

    //Конвертация документов
		
	КонвертироватьДокументыНачислениеЗарплаты(СписокДокументовНачислениеЗарплаты(), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыЗарплатаКВыплате(СписокДокументовЗарплатаКВыплате(), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыАвансовыйПлатежИностранцаПоНДФЛ(СписокДокументовАвансовыйПлатежИностранцаПоНДФЛ(), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьОперацииУчетаВзносовИНДФЛ(СоответствиеКонвертированныхОбъектов);

	КонвертироватьДокументыПерерасчетНДФЛ(СписокДокументовПерерасчетНДФЛ(), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыУведомлениеОПравеНаИмущественныйВычетДляНДФЛ(СписокДокументовУведомлениеОПравеНаИмущественныйВычетДляНДФЛ(),
		СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДвиженияДокументовВыплатыПоНДФЛ(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыАДВ1(ПолучитьСписокКонвертируемыхДокументовАДВ1(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);	
	
	КонвертироватьДокументыАДВ(ПолучитьСписокКонвертируемыхДокументовАДВ(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыДСВ(ПолучитьСписокКонвертируемыхДокументовДСВ(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыСЗВ6(ПолучитьСписокКонвертируемыхДокументовСЗВ(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыСЗВ_6_4(ПолучитьСписокКонвертируемыхДокументовСЗВ_6_4(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыАДВ6(ПолучитьСписокКонвертируемыхДокументовАДВ_6(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыСЗВ_6_3(ПолучитьСписокКонвертируемыхДокументовСЗВ_6_3(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыСПВ(ПолучитьСписокКонвертируемыхДокументовСПВ(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьСоставКомплектовСведений(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументы2_НДФЛВНалоговыйОрган(ПолучитьСписокКонвертируемыхДокументовСправкаНДФЛПоВНалоговыйОрган(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументы2_НДФЛПоСотруднику(ПолучитьСписокКонвертируемыхДокументовСправкаНДФЛПоСотруднику(ДатаНачала, ДатаОкончания), СоответствиеКонвертированныхОбъектов);
	
	СправкиНДФЛЗаполнитьЗначенияНовыхРеквизитов();
	
	УстановитьПериодРегистрацийВНалоговомОргане();
	
	ПерсонифицированныйУчетЗаполнитьРегистрационныйНомерПФР();
	
	УчетСтажаПФРЗаполнитьПервоначальныеДанныеУчета();
	
	РасчетЗарплатыДляНебольшихОрганизаций.УстановитьФОРасчетЗарплатыДляНебольшихОрганизаций();
	
	РасчетЗарплатыДляНебольшихОрганизацийЗаполнитьТабличнуюЧастьСотрудникиДокументовНачислениеЗарплаты();
	
	РасчетЗарплатыДляНебольшихОрганизацийЗаполнитьНачисленоУдержаноНачисленийЗарплаты();
	
	ЗаполнитьВидОперацииПоЗарплатеВНачислениях();
	
	ЗаполнитьПолеДатаПолученияДоходаВРегистрахУчетаВзносов();
	ЗаполнитьПолеДатаРегистрацииВПериодическихРегистрах();
	ЗаполнитьПолеДатаПолученияДоходаВТаблицеВзносыДокументов();
	
	ВедомостьНаВыплатуЗарплатыЗаполнитьПериодыВзаиморасчетовЗарплатыВедомости("Документ.ВедомостьНаВыплатуЗарплатыВКассу");
	ВедомостьНаВыплатуЗарплатыЗаполнитьПериодыВзаиморасчетовЗарплатыВедомости("Документ.ВедомостьНаВыплатуЗарплатыВБанк");
	ВедомостьНаВыплатуЗарплатыЗаполнитьФизическиеЛицаЗарплатыВедомости("Документ.ВедомостьНаВыплатуЗарплатыВКассу");
	ВедомостьНаВыплатуЗарплатыЗаполнитьФизическиеЛицаЗарплатыВедомости("Документ.ВедомостьНаВыплатуЗарплатыВБанк");
	ВедомостьНаВыплатуЗарплатыЗаполнитьСоставВедомости("Документ.ВедомостьНаВыплатуЗарплатыВБанк", "ФизическоеЛицо, НомерЛицевогоСчета");
	ВедомостьНаВыплатуЗарплатыЗаполнитьСоставВедомости("Документ.ВедомостьНаВыплатуЗарплатыВКассу", "ФизическоеЛицо");
	
	
	ЗаполнитьРесурсОсновноеМестоРаботы();
	
КонецПроцедуры	

Процедура СправкиНДФЛЗаполнитьЗначенияНовыхРеквизитов() Экспорт
	
	ФиксируемыеРеквизиты = Новый Массив;
	ФиксируемыеРеквизиты.Добавить("ИНН");
	ФиксируемыеРеквизиты.Добавить("Фамилия");
	ФиксируемыеРеквизиты.Добавить("Имя");
	ФиксируемыеРеквизиты.Добавить("Отчество");
	ФиксируемыеРеквизиты.Добавить("Адрес");
	ФиксируемыеРеквизиты.Добавить("ВидДокумента");
	ФиксируемыеРеквизиты.Добавить("СерияДокумента");
	ФиксируемыеРеквизиты.Добавить("НомерДокумента");
	ФиксируемыеРеквизиты.Добавить("Гражданство");
	ФиксируемыеРеквизиты.Добавить("ДатаРождения");
	ФиксируемыеРеквизиты.Добавить("СтатусНалогоплательщика");
	ФиксируемыеРеквизиты.Добавить("АдресЗарубежом");
	ФиксируемыеРеквизиты.Добавить("СтранаВыдачиДокумента");
	
	Запрос = Новый Запрос;
	ТекущийГодДата = НачалоГода(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийГодДата", ТекущийГодДата);
	Запрос.УстановитьПараметр("ТекущийГод", Год(ТекущаяДатаСеанса()));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправкаНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	СправкаНДФЛ.Дата КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛицаДаты
	|ИЗ
	|	Документ.СправкаНДФЛ КАК СправкаНДФЛ
	|ГДЕ
	|	СправкаНДФЛ.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник,
	|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.Дата
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
	|ГДЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправкаНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущийГодДата, ГОД, СправкаНДФЛ.НалоговыйПериод - &ТекущийГод), ГОД) КАК Период
	|ПОМЕСТИТЬ ВТФизическиеНалоговыеПериоды
	|ИЗ
	|	Документ.СправкаНДФЛ КАК СправкаНДФЛ
	|ГДЕ
	|	СправкаНДФЛ.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И СправкаНДФЛ.НалоговыйПериод МЕЖДУ 2010 И 2100
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущийГодДата, ГОД, СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод - &ТекущийГод), ГОД)
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
	|ГДЕ
	|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка.НалоговыйПериод МЕЖДУ 2010 И 2100";
	
	Запрос.Выполнить();
	
	НеобходимыеКадровыеДанные = Новый Массив;
	НеобходимыеКадровыеДанные.Добавить("ФизическоеЛицо");
	НеобходимыеКадровыеДанные.Добавить("Фамилия");
	НеобходимыеКадровыеДанные.Добавить("Наименование");
	НеобходимыеКадровыеДанные.Добавить("Имя");
	НеобходимыеКадровыеДанные.Добавить("Отчество");
	НеобходимыеКадровыеДанные.Добавить("ДокументВид");
	НеобходимыеКадровыеДанные.Добавить("ДокументСерия");
	НеобходимыеКадровыеДанные.Добавить("ДокументНомер");
	НеобходимыеКадровыеДанные.Добавить("ДатаРождения");	
	НеобходимыеКадровыеДанные.Добавить("Страна");
	НеобходимыеКадровыеДанные.Добавить("ИНН");
	НеобходимыеКадровыеДанные.Добавить("АдресЗаПределамиРФ");
	НеобходимыеКадровыеДанные.Добавить("АдресПоПрописке");
	НеобходимыеКадровыеДанные.Добавить("ДокументСтранаВыдачи");
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеЛицаДаты");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Ложь, НеобходимыеКадровыеДанные);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеФизЛиц.АдресПоПрописке КАК Адрес,
	|	КадровыеДанныеФизЛиц.АдресЗаПределамиРФ КАК АдресЗарубежом,
	|	КадровыеДанныеФизЛиц.Фамилия КАК Фамилия,
	|	КадровыеДанныеФизЛиц.Имя КАК Имя,
	|	КадровыеДанныеФизЛиц.Отчество КАК Отчество,
	|	КадровыеДанныеФизЛиц.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(КадровыеДанныеФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)) КАК Гражданство,
	|	КадровыеДанныеФизЛиц.ДокументВид КАК ВидДокумента,
	|	КадровыеДанныеФизЛиц.ДокументСерия КАК СерияДокумента,
	|	КадровыеДанныеФизЛиц.ДокументНомер КАК НомерДокумента,
	|	КадровыеДанныеФизЛиц.ИНН КАК ИНН,
	|	КадровыеДанныеФизЛиц.ДокументСтранаВыдачи КАК СтранаВыдачиДокумента,
	|	КадровыеДанныеФизЛиц.ФизическоеЛицо,
	|	КадровыеДанныеФизЛиц.Период
	|ПОМЕСТИТЬ ВТТекущиеДанныеФизЛиц
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеФизическихЛиц
	|";	
		
	Запрос.Выполнить();
		
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеНалоговыеПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Ложь,  "СтатусНалогоплательщика");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка КАК Ссылка,
	|	СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерСтроки КАК НомерСтроки,
	|	ТекущиеДанныеФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Адрес, 1, 1000) <> ПОДСТРОКА(ЕСТЬNULL(ТекущиеДанныеФизЛиц.Адрес, """"), 1, 1000)
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксАдрес,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.АдресЗарубежом, 1, 1000) <> ПОДСТРОКА(ЕСТЬNULL(ТекущиеДанныеФизЛиц.АдресЗарубежом, """"), 1, 1000)
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксАдресЗарубежом,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Фамилия <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Фамилия, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксФамилия,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Имя <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Имя, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксИмя,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Отчество <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Отчество, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксОтчество,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ДатаРождения <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1))
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксДатаРождения,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Гражданство <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Гражданство, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксГражданство,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ВидДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка))
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.СерияДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СерияДокумента, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.НомерДокумента, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксВидДокумента,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ВидДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка))
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.СерияДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СерияДокумента, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.НомерДокумента, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксСерияДокумента,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ВидДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка))
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.СерияДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СерияДокумента, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.НомерДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.НомерДокумента, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксНомерДокумента,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.ИНН <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ИНН, """")
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксИНН,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.СтатусНалогоплательщика <> ЕСТЬNULL(СтатусыФизЛицНаКонецГода.СтатусНалогоплательщика, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка))
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксСтатусНалогоплательщика,
	|	ВЫБОР
	|		КОГДА СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.СтранаВыдачиДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СтранаВыдачиДокумента, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|				ИЛИ СправкиНДФЛДляПередачиВНалоговыйОрган.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксСтранаВыдачиДокумента,
	|	РегистрацииВНалоговомОргане.Код КАК КодИФНС
	|ИЗ
	|	Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Сотрудники КАК СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК СправкиНДФЛДляПередачиВНалоговыйОрган
	|		ПО СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Ссылка = СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанныеФизЛиц КАК ТекущиеДанныеФизЛиц
	|		ПО (СправкиНДФЛДляПередачиВНалоговыйОрган.Дата = ТекущиеДанныеФизЛиц.Период)
	|			И СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник = ТекущиеДанныеФизЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК СтатусыФизЛицНаКонецГода
	|		ПО СправкиНДФЛДляПередачиВНалоговыйОрганСотрудники.Сотрудник = СтатусыФизЛицНаКонецГода.ФизическоеЛицо
	|			И (СправкиНДФЛДляПередачиВНалоговыйОрган.НалоговыйПериод = ГОД(СтатусыФизЛицНаКонецГода.Период))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО (СправкиНДФЛДляПередачиВНалоговыйОрган.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправкаНДФЛ.Ссылка КАК Ссылка,
	|	СправкаНДФЛ.Сотрудник КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(СправкаНДФЛ.Адрес, 1, 1000) <> ПОДСТРОКА(ЕСТЬNULL(ТекущиеДанныеФизЛиц.Адрес, """"), 1, 1000)
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксАдрес,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(СправкаНДФЛ.АдресЗаРубежом, 1, 1000) <> ПОДСТРОКА(ЕСТЬNULL(ТекущиеДанныеФизЛиц.АдресЗарубежом, """"), 1, 1000)
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксАдресЗарубежом,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.Фамилия <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Фамилия, """")
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксФамилия,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.Имя <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Имя, """")
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксИмя,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.Отчество <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Отчество, """")
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксОтчество,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.ДатаРождения <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1))
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксДатаРождения,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.Гражданство <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.Гражданство, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксГражданство,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.ВидДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка))
	|				ИЛИ СправкаНДФЛ.СерияДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СерияДокумента, """")
	|				ИЛИ СправкаНДФЛ.НомерДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.НомерДокумента, """")
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксВидДокумента,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.ВидДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка))
	|				ИЛИ СправкаНДФЛ.СерияДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СерияДокумента, """")
	|				ИЛИ СправкаНДФЛ.НомерДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.НомерДокумента, """")
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксСерияДокумента,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.ВидДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка))
	|				ИЛИ СправкаНДФЛ.СерияДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СерияДокумента, """")
	|				ИЛИ СправкаНДФЛ.НомерДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.НомерДокумента, """")
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксНомерДокумента,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.ИНН <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.ИНН, """")
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксИНН,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.СтатусНалогоплательщика <> ЕСТЬNULL(СтатусыФизЛицНаКонецГода.СтатусНалогоплательщика, ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка))
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксСтатусНалогоплательщика,
	|	ВЫБОР
	|		КОГДА СправкаНДФЛ.СтранаВыдачиДокумента <> ЕСТЬNULL(ТекущиеДанныеФизЛиц.СтранаВыдачиДокумента, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|				ИЛИ СправкаНДФЛ.Проведен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФиксСтранаВыдачиДокумента,
	|	РегистрацииВНалоговомОргане.Код КАК КодИФНС
	|ИЗ
	|	Документ.СправкаНДФЛ КАК СправкаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанныеФизЛиц КАК ТекущиеДанныеФизЛиц
	|		ПО СправкаНДФЛ.Дата = ТекущиеДанныеФизЛиц.Период
	|			И СправкаНДФЛ.Сотрудник = ТекущиеДанныеФизЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК СтатусыФизЛицНаКонецГода
	|		ПО СправкаНДФЛ.Сотрудник = СтатусыФизЛицНаКонецГода.ФизическоеЛицо
	|			И (СправкаНДФЛ.НалоговыйПериод = ГОД(СтатусыФизЛицНаКонецГода.Период))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО СправкаНДФЛ.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
		
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();		
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ДанныеСправки = ДокументОбъект.Сотрудники[Выборка.НомерСтроки - 1];
			
			Для Каждого ФиксируемоеПоле Из ФиксируемыеРеквизиты Цикл
				ДанныеСправки["Фикс" + ФиксируемоеПоле] = Выборка["Фикс" + ФиксируемоеПоле];
			КонецЦикла;	

			ИтогиПоНалогам = ДокументОбъект.УдалитьСуммыНалогов.Выгрузить(Новый Структура("НомерСправки", ДанныеСправки.НомерСправки));	
			
			Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
				СтрокаИтогов = ИтогиПоНалогам.Добавить();
				СтрокаИтогов.Ставка = СтавкаНДФЛ;
				СтрокаИтогов.ОбщаяСуммаДохода = 0;
				СтрокаИтогов.ОблагаемаяСуммаДохода = 0;
				СтрокаИтогов.Исчислено = 0;
				СтрокаИтогов.Удержано = 0;
				СтрокаИтогов.Перечислено = 0;
				СтрокаИтогов.ИзлишнеУдержано = 0;
				СтрокаИтогов.Задолженность = 0;
			КонецЦикла;	
			
			ИтогиПоНалогам.Свернуть("Ставка", "ОбщаяСуммаДохода, ОблагаемаяСуммаДохода, Исчислено, Удержано, Перечислено, ИзлишнеУдержано, Задолженность");
		
			Для Каждого ИтогиПоСтавке Из ИтогиПоНалогам Цикл
				СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ОбщаяСуммаДохода");				
				СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ОблагаемаяСуммаДохода");	
				СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Исчислено");	
				СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Удержано");
				СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Перечислено");	
				СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ИзлишнеУдержано");
				СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Задолженность");
			КонецЦикла;	
		
		КонецЦикла;	
		
		ДокументОбъект.КодИФНС = Выборка.КодИФНС;
		ДокументОбъект.Записать();	
	КонецЦикла;	
	
	Выборка = Результаты[1].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		ДанныеСправки = Выборка.Ссылка.ПолучитьОбъект();
			
		Для Каждого ФиксируемоеПоле Из ФиксируемыеРеквизиты Цикл
			ДанныеСправки["Фикс" + ФиксируемоеПоле] = Выборка["Фикс" + ФиксируемоеПоле];
		КонецЦикла;	

		ИтогиПоНалогам = ДанныеСправки.УдалитьСуммыНалогов.Выгрузить();	
		
		Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
			СтрокаИтогов = ИтогиПоНалогам.Добавить();
			СтрокаИтогов.Ставка = СтавкаНДФЛ;
			СтрокаИтогов.ОбщаяСуммаДохода = 0;
			СтрокаИтогов.ОблагаемаяСуммаДохода = 0;
			СтрокаИтогов.Исчислено = 0;
			СтрокаИтогов.Удержано = 0;
			СтрокаИтогов.Перечислено = 0;
			СтрокаИтогов.ИзлишнеУдержано = 0;
			СтрокаИтогов.Задолженность = 0;
		КонецЦикла;	
		
		ИтогиПоНалогам.Свернуть("Ставка", "ОбщаяСуммаДохода, ОблагаемаяСуммаДохода, Исчислено, Удержано, Перечислено, ИзлишнеУдержано, Задолженность");
	
		Для Каждого ИтогиПоСтавке Из ИтогиПоНалогам Цикл
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ОбщаяСуммаДохода");				
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ОблагаемаяСуммаДохода");	
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Исчислено");	
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Удержано");
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Перечислено");	
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ИзлишнеУдержано");
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Задолженность");
		КонецЦикла;	
		
		ДанныеСправки.КодИФНС = Выборка.КодИФНС;
		ДанныеСправки.Записать();	
	КонецЦикла;	

КонецПроцедуры

Процедура ЗаполнитьРесурсОсновноеМестоРаботы()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТЗаписиСНеукзаннымОсновнымМестом
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
	|ИЗ
	|	ВТЗаписиСНеукзаннымОсновнымМестом КАК ЗаписиСНеукзаннымОсновнымМестом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ЗаписиСНеукзаннымОсновнымМестом.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
		НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(Выборка.ТекущаяОрганизация);

		НаборЗаписей.Прочитать();
		НаборЗаписей.Записать();
		
	КонецЦикла;	
КонецПроцедуры	

Функция КонвертироватьДанные(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов = Неопределено, СсылкаНаПриемник = Неопределено)Экспорт 
	Если СоответствиеКонвертированныхОбъектов = Неопределено Тогда
		СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	КонецЕсли;	
	
	Если (Не ЗначениеЗаполнено(КонвертируемыеДанные)) ИЛИ НеПроизводитьКонвертациюЗначения(ТипЗнч(КонвертируемыеДанные)) Тогда
		Возврат КонвертируемыеДанные;
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные;		
	Иначе	
		Структура = Новый Структура("Ссылка");
		ЗаполнитьЗначенияСвойств(Структура, КонвертируемыеДанные);
		
		Если ЗначениеЗаполнено(Структура.Ссылка) Тогда
			СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные.Ссылка;
		Иначе
			Возврат КонвертируемыеДанные;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаКонвертируемоеЗначение)) Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(СсылкаНаКонвертируемоеЗначение);
		
		Результат = КонвертироватьДокументы(СписокДокументов, СоответствиеКонвертированныхОбъектов);
		
		Возврат Результат[СсылкаНаКонвертируемоеЗначение];
	Иначе	
		Возврат КонвертироватьСсылочныеДанные(СсылкаНаКонвертируемоеЗначение, КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	КонецЕсли;	
КонецФункции	

Функция КонвертироватьДокументы(СписокДокументов, СоответствиеКонвертированныхОбъектов = Неопределено)
    Результат = Новый Соответствие;
	
	Для Каждого Документ Из СписокДокументов Цикл
		Результат.Вставить(Документ);
	КонецЦикла;
	
	КонвертируемыеДокументыПоТипам = КонвертируемыеДокументыПоТипам(СписокДокументов);
	
	ДокументыУдалитьАнкетаЗастрахованногоЛица = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица")];
	
	Если ДокументыУдалитьАнкетаЗастрахованногоЛица.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыАДВ1(ДокументыУдалитьАнкетаЗастрахованногоЛица, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства")];

	Если ДокументыУдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыАДВ(ДокументыУдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьПередачаДСВвПФР = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьПередачаДСВвПФР")];

	Если ДокументыУдалитьПередачаДСВвПФР.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыДСВ(ДокументыУдалитьПередачаДСВвПФР, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьПередачаСЗВ4вПФР = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР")];

	Если ДокументыУдалитьПередачаСЗВ4вПФР.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыАДВ6(ДокументыУдалитьПередачаСЗВ4вПФР, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьСведенияОВзносахИСтраховомСтажеСПВ1 = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1")];

	Если ДокументыУдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыСПВ(ДокументыУдалитьСведенияОВзносахИСтраховомСтажеСПВ1, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьСведенияОНачисленномЗаработкеСЗВ63 = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63")];

	Если ДокументыУдалитьСведенияОНачисленномЗаработкеСЗВ63.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыСЗВ_6_3(ДокументыУдалитьСведенияОНачисленномЗаработкеСЗВ63, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4 = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4")];

	Если ДокументыУдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыСЗВ6(ДокументыУдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьПачкаДокументовСЗВ_6_4 = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьПачкаДокументовСЗВ_6_4")];

	Если ДокументыУдалитьПачкаДокументовСЗВ_6_4.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыСЗВ_6_4(ДокументыУдалитьПачкаДокументовСЗВ_6_4, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	

	
	ДокументыУдалитьСправкаПоНДФЛВНалоговыйОрган = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган")];

	Если ДокументыУдалитьСправкаПоНДФЛВНалоговыйОрган.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументы2_НДФЛВНалоговыйОрган(ДокументыУдалитьСправкаПоНДФЛВНалоговыйОрган, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьСправкаПоНДФЛСотруднику = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьСправкаПоНДФЛСотруднику")];

	Если ДокументыУдалитьСправкаПоНДФЛСотруднику.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументы2_НДФЛПоСотруднику(ДокументыУдалитьСправкаПоНДФЛСотруднику, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьНачислениеЗарплаты = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьНачислениеЗарплатыРаботникамОрганизаций")];

	Если ДокументыУдалитьНачислениеЗарплаты.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыНачислениеЗарплаты(ДокументыУдалитьНачислениеЗарплаты, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьРасчетЕСН = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьРасчетЕСН")];

	Если ДокументыУдалитьРасчетЕСН.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыНачислениеЗарплаты(ДокументыУдалитьРасчетЕСН, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыЗарплатаКВыплатеОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")];

	Если ДокументыЗарплатаКВыплатеОрганизаций.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыЗарплатаКВыплате(ДокументыЗарплатаКВыплатеОрганизаций, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьПриемНаРаботуВОрганизацию = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию")];

	Если ДокументыУдалитьПриемНаРаботуВОрганизацию.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыПриемНаРаботу(ДокументыУдалитьПриемНаРаботуВОрганизацию, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьКадровоеПеремещениеОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций")];

	Если ДокументыУдалитьКадровоеПеремещениеОрганизаций.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыКадровоеПеремещение(ДокументыУдалитьКадровоеПеремещениеОрганизаций, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьУвольнениеИзОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций")];

	Если ДокументыУдалитьУвольнениеИзОрганизаций.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыУвольнение(ДокументыУдалитьУвольнениеИзОрганизаций, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций")];

	Если ДокументыУдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументывВводПлановыхНачислений(ДокументыУдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КонвертированныйДокумент ИЗ Результат Цикл
		Если КонвертированныйДокумент.Ключ <> КонвертированныйДокумент.Значение Тогда
			ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(
				КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение)
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция КонвертируемыеТипыДокументовБП2()
	КонвертируемыеТипыДокументов = Новый Массив;
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций"));
	//КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьДепонированиеОрганизаций"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьНачислениеЗарплатыРаботникамОрганизаций"));
	//КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьНДФЛВозвратНалога"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьНДФЛиЕСНДоходыИНалоги"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьНДФЛПерерасчет"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьПередачаДСВвПФР"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьПачкаДокументовСЗВ_6_4"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4"));
	//КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьСписаниеДепонентовВДоходыОрганизаций"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьСправкаПоНДФЛСотруднику"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьРасчетЕСН"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьАвансовыйПлатежИностранцаПоНДФЛ"));

    Возврат КонвертируемыеТипыДокументов;
КонецФункции	

Функция КонвертируемыеТипыДокументовБП3()
	
	КонвертируемыеТипыДокументов = Новый Массив;
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.НачислениеЗарплаты"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОписьПачекСЗВ_6"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_1"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_2"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_3"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПачкаДокументовДСВ_1"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПачкаДокументовСПВ_1"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.РеестрДСВ_3"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.РеестрСЗВ_6_2"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.СправкаНДФЛ"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ВедомостьУплатыАДВ_11"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПриемНаРаботу"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.Увольнение"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.КадровыйПеревод"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОперацияНалоговогоУчетаПоНДФЛ"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ОперацияУчетаПоСтраховымВзносам"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПерерасчетНДФЛ"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.АвансовыйПлатежИностранцаПоНДФЛ"));
	
    Возврат КонвертируемыеТипыДокументов;
КонецФункции	

Функция КонвертируемыеДокументыПоТипам(СписокДокументов)
	КонвертируемыеДокументыПоТипам = Новый Соответствие;
	
	КонвертируемыеТипыДокументов = КонвертируемыеТипыДокументовБП2();	
	
	Для Каждого ТипДокумента Из КонвертируемыеТипыДокументов Цикл
		КонвертируемыеДокументыПоТипам.Вставить(ТипДокумента, Новый Массив);
	КонецЦикла;
	
	Для Каждого Документ Из СписокДокументов Цикл
		ДокументыПоТипу = КонвертируемыеДокументыПоТипам[ТипЗнч(Документ)];
		
		Если ДокументыПоТипу <> Неопределено Тогда
			ДокументыПоТипу.Добавить(Документ);			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат КонвертируемыеДокументыПоТипам;
КонецФункции	

Функция КонвертироватьСсылочныеДанные(СсылкаНаКонверируемоеЗначение, КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	ТипЗначения = ТипЗнч(СсылкаНаКонверируемоеЗначение);
	
	Если ТипЗначения = Тип("СправочникСсылка.УдалитьВычетыНДФЛ") Тогда
		ВозвращаемоеЗначение = КонвертироватьЭлементВычетыНДФЛ(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьДоходыНДФЛ") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементДоходыНФДЛ(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьДоходыПоСтраховымВзносам") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементДоходовПоСтраховымВзносам(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Должности") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементДолжность(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьОснованияВыслугиЛет") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементОснованияВыслугиЛет(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ОснованияИсчисляемогоСтраховогоСтажа") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементОснованияИсчисляемогоСтраховогоСтажа(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьОсобыеУсловияТруда") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементОсобыеУсловияТрудаПФР(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементПодразделенияОрганизаций(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Сотрудники")Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементСотрудникиОрганизаций(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементСпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьТерриториальныеУсловия") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементТерриториальныеУсловия(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементФизическиеЛица(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.УдалитьДокументыУдостоверяющиеЛичность") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(СсылкаНаКонверируемоеЗначение);	
	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьНДФЛРасчетыСБюджетомВидСтроки") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияНДФЛРасчетыСБюджетомВидСтроки(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ВидыЗанятости") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияВидыЗанятости(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ВидыНачисленийОплатыТрудаДляНУ") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияВидыНачисленийОплатыТрудаДляНУ(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияВидыПлатежейВГосБюджет(КонвертируемыеДанные);		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ПереченьПособийСоциальногоСтрахования") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияВидыПособийСоциальногоСтрахования(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьВидыТарифовСтраховыхВзносов") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияТарифыСтраховыхВзносов(КонвертируемыеДанные);		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ГруппыВычетовПоНДФЛ") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияГруппыВычетовПоНДФЛ(КонвертируемыеДанные);		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.КатегорииЗастрахованныхЛицДляПФР") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияКатегорииЗастрахованныхЛицПФР(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.НДФЛСтавки") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияНДФЛСтавки(КонвертируемыеДанные);		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияНДФЛСтавкиНалогообложенияРезидента(КонвертируемыеДанные);			
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ОснованияДляПредставленияСправок2НДФЛ") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияОснованияДляПредставленияСправок2НДФЛ(КонвертируемыеДанные);		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ОснованияФинансированияПособияФедеральнымБюджетом") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияКатегорииЗастрахованныхЛицПФР(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ОсобенностиИсчисленияНДФЛ") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияОсобенностиИсчисленияНДФЛ(КонвертируемыеДанные);		
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ОтражениеВУСН") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияОтражениеВУСН(КонвертируемыеДанные);			
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ПорядокФормированияСправкиОДоходахФизическогоЛица") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияПорядокФормированияСправкиОДоходахФизическогоЛица(КонвертируемыеДанные);						
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ТипыСведенийСЗВ") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияТипыСведенийСЗВ(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьПолФизическихЛиц") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияПолФизическихЛиц(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьСтатусыНалогоплательщиковПоНДФЛ") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияСтатусыНДФЛ(КонвертируемыеДанные);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ПричиныИзмененияСостояния") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПричиныИзмененияСостояния(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПланВидовРасчетаСсылка.УдалитьОсновныеНачисленияОрганизаций") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементНачисления(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	Иначе 
		ВозвращаемоеЗначение = СсылкаНаКонверируемоеЗначение;
	КонецЕсли;
	
	Если ВозвращаемоеЗначение <> СсылкаНаКонверируемоеЗначение Тогда
		ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(СсылкаНаКонверируемоеЗначение, ВозвращаемоеЗначение)
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;	
КонецФункции

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
	Если СоответствиеКонвертированныхОбъектов <> Неопределено Тогда
	
		СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
		Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
			СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
			СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
		КонецЕсли;	

		СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
		
	КонецЕсли;	
КонецПроцедуры	

Функция НеПроизводитьКонвертациюЗначения(Тип)
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		Ссылка = КонвертируемыеДанные;
	Иначе 
		Ссылка = КонвертируемыеДанные.Ссылка;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;            
	
	СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов);
	Если СсылкаНаКонвертированныйОбъект <> Неопределено Тогда
		Возврат СсылкаНаКонвертированныйОбъект;		
	КонецЕсли;	
	
	Если КонвертируемыеДанные.Предопределенный Тогда
		Элемент = ПолучитьСоответствиеПредопределенногоЭлемент(Ссылка);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПриемник) Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Ссылка, СсылкаНаПриемник, СоответствиеКонвертированныхОбъектов);
		Возврат СсылкаНаПриемник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлемент(Элемент)
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.УдалитьВычетыНДФЛ") Тогда
		Возврат ПолучитьСоответствиеПредопределенногоЭлементаВычетыНДФЛ(Элемент);
	ИначеЕсли  ТипЗнч(Элемент) = Тип("СправочникСсылка.УдалитьДоходыНДФЛ") Тогда 
		Возврат ПолучитьСоответствиеПредопределенногоЭлементаДоходыНДФЛ(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.УдалитьДоходыПоСтраховымВзносам") Тогда
		Возврат ПолучитьСоответствиеПредопределенногоЭлементаДоходовПоСтраховымВзносам(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.УдалитьОснованияВыслугиЛет") Тогда 
		Возврат ПолучитьСоответствиеПредопределенногоЭлементаОснованияВыслугиЛет(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.УдалитьОсобыеУсловияТруда") Тогда 
		Возврат ПолучитьСоответствиеПредопределенногоЭлементаОсобыеУсловияТруда(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.УдалитьТерриториальныеУсловия") Тогда 
		Возврат ПолучитьСоответствиеПредопределенногоЭлементаТерриториальныеУсловия(Элемент);	
	ИначеЕсли ТипЗнч(Элемент) = Тип("ПланВидовРасчетаСсылка.УдалитьОсновныеНачисленияОрганизаций") Тогда 
		Возврат ПолучитьСоответствиеПредопределенногоОсновныеНачисленияОрганизаций(Элемент);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаполнитьВидОперацииПоЗарплатеВНачислениях()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель)
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве)
	|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НачисленоДоход)
	|	КОНЕЦ КАК ВидОперацииПоЗарплате
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидОперацииПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВидОперацииПоЗарплате = Выборка.ВидОперацииПоЗарплате;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НачислениеОбъект);
	КонецЦикла;	

КонецПроцедуры

Процедура ЗаполнитьПолеДатаПолученияДоходаВРегистрахУчетаВзносов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбновляемыеРегистры.Регистратор,
	|	МАКСИМУМ(ОбновляемыеРегистры.ОбновлятьРегистрДоходов) КАК ОбновлятьРегистрДоходов,
	|	МАКСИМУМ(ОбновляемыеРегистры.ОбновлятьРегистрВзносов) КАК ОбновлятьРегистрВзносов
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходахСтраховыеВзносы.Регистратор КАК Регистратор,
	|		ИСТИНА КАК ОбновлятьРегистрДоходов,
	|		ЛОЖЬ КАК ОбновлятьРегистрВзносов
	|	ИЗ
	|		РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК СведенияОДоходахСтраховыеВзносы
	|	ГДЕ
	|		СведенияОДоходахСтраховыеВзносы.ДатаПолученияДохода = ДАТАВРЕМЯ(1, 1, 1)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсчисленныеСтраховыеВзносы.Регистратор,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|	ГДЕ
	|		ИсчисленныеСтраховыеВзносы.ДатаПолученияДохода = ДАТАВРЕМЯ(1, 1, 1)) КАК ОбновляемыеРегистры
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбновляемыеРегистры.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбновляемыеНаборы = Новый Массив;
		
		Если Выборка.ОбновлятьРегистрДоходов Тогда
			НаборДоходы = РегистрыНакопления.СведенияОДоходахСтраховыеВзносы.СоздатьНаборЗаписей();
			НаборДоходы.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборДоходы.Прочитать();
			
			ОбновляемыеНаборы.Добавить(НаборДоходы);
		КонецЕсли;
		
		Если Выборка.ОбновлятьРегистрВзносов Тогда
			НаборВзносы = РегистрыНакопления.ИсчисленныеСтраховыеВзносы.СоздатьНаборЗаписей();
			НаборВзносы.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборВзносы.Прочитать();
			
			ОбновляемыеНаборы.Добавить(НаборВзносы);
		КонецЕсли;

		Для Каждого НаборЗаписей Из ОбновляемыеНаборы Цикл
			
			Для Каждого Запись Из НаборЗаписей Цикл 
				Если Не ЗначениеЗаполнено(Запись.ДатаПолученияДохода) Тогда
					Запись.ДатаПолученияДохода = УчетСтраховыхВзносовКлиентСервер.ДатаПолученияДохода(Запись.Период);
				КонецЕсли;	
			КонецЦикла;	
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;			
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьПолеДатаРегистрацииВПериодическихРегистрах()
	ЗаполнитьДатуРегистрацииИзмененийВЗаписяхРегистра(Метаданные.РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам);
	ЗаполнитьДатуРегистрацииИзмененийВЗаписяхРегистра(Метаданные.РегистрыСведений.КлассыУсловийТрудаПоДолжностям);
	ЗаполнитьДатуРегистрацииИзмененийВЗаписяхРегистра(Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов);
	ЗаполнитьДатуРегистрацииИзмененийВЗаписяхРегистра(Метаданные.РегистрыСведений.СведенияОбИнвалидностиФизическихЛиц);
	ЗаполнитьДатуРегистрацииИзмененийВЗаписяхРегистра(Метаданные.РегистрыСведений.СтатусыЗастрахованныхФизическихЛиц);
КонецПроцедуры

Процедура ЗаполнитьДатуРегистрацииИзмененийВЗаписяхРегистра(МетаданныеРегистра)
	ЕстьПолеДатаРегистрацииИзменений = Ложь;
	
	// Заполняем поле только для периодических регистров.
	Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Возврат;
	КонецЕсли;
	
	ПоляРегистраСтрокой = "ДанныеРегистра.Период,";
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если Измерение.Имя = "ДатаРегистрацииИзменений" Тогда 
			ЕстьПолеДатаРегистрацииИзменений = Истина;
			ПоляРегистраСтрокой = ПоляРегистраСтрокой + "
							  |		НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ) КАК ДатаРегистрацииИзменений,";
		Иначе
			ПоляРегистраСтрокой = ПоляРегистраСтрокой + "
							  |		ДанныеРегистра." + Измерение.Имя + ",";	
		КонецЕсли;					  
	КонецЦикла;	
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Если Ресурс.Имя = "ДатаРегистрацииИзменений" Тогда 
			ЕстьПолеДатаРегистрацииИзменений = Истина;
			ПоляРегистраСтрокой = ПоляРегистраСтрокой + "
							  |		НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ) КАК ДатаРегистрацииИзменений,";
		Иначе
			ПоляРегистраСтрокой = ПоляРегистраСтрокой + "
							  |		ДанныеРегистра." + Ресурс.Имя + ",";	
		КонецЕсли;							  
	КонецЦикла;	
						  
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		Если Реквизит.Имя = "ДатаРегистрацииИзменений" Тогда 
			ЕстьПолеДатаРегистрацииИзменений = Истина;
			ПоляРегистраСтрокой = ПоляРегистраСтрокой + "
							  |		НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, МЕСЯЦ) КАК ДатаРегистрацииИзменений,";
		Иначе
			ПоляРегистраСтрокой = ПоляРегистраСтрокой + "
							  |		ДанныеРегистра." + Реквизит.Имя + ",";			
		КонецЕсли;					  
	КонецЦикла;						  
	
	// Если в регистре нет поля "ДатаРегистрацииИзменений", то заполнять нечего.
	Если Не ЕстьПолеДатаРегистрацииИзменений Тогда
		Возврат;		
	КонецЕсли;	
	
	ПроверочныйЗапрос = Новый Запрос;
	ПроверочныйЗапрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеРегистра.ДатаРегистрацииИзменений
	|ИЗ
	|	#ДанныеРегистра КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ДатаРегистрацииИзменений = ДАТАВРЕМЯ(1, 1, 1)";
	
	ПроверочныйЗапрос.Текст = СтрЗаменить(ПроверочныйЗапрос.Текст, "#ДанныеРегистра", МетаданныеРегистра.ПолноеИмя());
	
	// Если во всех записях регистра поле "ДатаРегистрацииИзменений" заполнено, тогда обновлять ничего не нужно.
	Если ПроверочныйЗапрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	ПоляРегистраСтрокой = Лев(ПоляРегистраСтрокой, СтрДлина(ПоляРегистраСтрокой) - 1);
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.ПоляРегистра
	|ИЗ
	|	#ДанныеРегистра КАК ДанныеРегистра";
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ДанныеРегистра", МетаданныеРегистра.ПолноеИмя());
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ДанныеРегистра.ПоляРегистра", ПоляРегистраСтрокой);	
	
	Запрос = Новый Запрос(ШаблонТекстаЗапроса);
		
	Набор = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьГоловныхСотрудниковВКадровойИстории(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	НЕ КадроваяИсторияСотрудников.Регистратор В (&МассивОбновленных)
		|	И КадроваяИсторияСотрудников.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	СписокРегистраторовДляОбновленияИнтервальногоРегистра = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Регистратор);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.КадроваяИсторияСотрудников.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Не ЗначениеЗаполнено(Запись.ГоловнойСотрудник) Тогда
				Запись.ГоловнойСотрудник = Запись.Сотрудник;
				Запись.ЭтоГоловнойСотрудник = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		СписокРегистраторовДляОбновленияИнтервальногоРегистра.Добавить(Выборка.Регистратор);
		
	КонецЦикла;
	
	Если СписокРегистраторовДляОбновленияИнтервальногоРегистра.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("СписокОбновленныхРегистраторов", СписокРегистраторовДляОбновленияИнтервальногоРегистра);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТОтборДляПереформирования
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Регистратор В(&СписокОбновленныхРегистраторов)";
		
		Запрос.Выполнить();
		РегистрыСведений.КадроваяИсторияСотрудников.ОбновитьДвиженияИнтервальногоРегистра(Запрос.МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////
//Справочники

Процедура УстановитьКодСправочника(ОбъектПриемник, ДанныеИсточника)
	СтруктураДанныхИсточника = Новый Структура("Код", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхИсточника, ДанныеИсточника);
	Если СтруктураДанныхИсточника.Код <> Неопределено И ОбъектПриемник.Метаданные().ДлинаКода <> 0 Тогда
		ОбъектПриемник.Код = СтруктураДанныхИсточника.Код;	
	КонецЕсли;	
КонецПроцедуры	

//Справочник УдалитьВычетыНДФЛ
//
Процедура КонвертироватьСправочникВычетыНДФЛ(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьВычетыНДФЛ.Ссылка,
	|	УдалитьВычетыНДФЛ.ВерсияДанных,
	|	УдалитьВычетыНДФЛ.ПометкаУдаления,
	|	УдалитьВычетыНДФЛ.Предопределенный,
	|	УдалитьВычетыНДФЛ.Код,
	|	УдалитьВычетыНДФЛ.Наименование,
	|	УдалитьВычетыНДФЛ.КодДляОтчетности2007,
	|	УдалитьВычетыНДФЛ.КодДляОтчетности2008,
	|	УдалитьВычетыНДФЛ.КодДляОтчетности2009,
	|	УдалитьВычетыНДФЛ.Наименование2007,
	|	УдалитьВычетыНДФЛ.Наименование2008,
	|	УдалитьВычетыНДФЛ.КодДляОтчетности2010,
	|	УдалитьВычетыНДФЛ.НеПредоставляетсяНерезидентам,
	|	УдалитьВычетыНДФЛ.НеОтражаетсяВОтчетности2010,
	|	УдалитьВычетыНДФЛ.ГруппаВычета,
	|	ВидыВычетовНДФЛ.Ссылка КАК ПриемникСсылка
	|ИЗ
	|	Справочник.УдалитьВычетыНДФЛ КАК УдалитьВычетыНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыВычетовНДФЛ КАК ВидыВычетовНДФЛ
	|		ПО (УдалитьВычетыНДФЛ.КодДляОтчетности2011 = ВидыВычетовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2011Года
	|					И ВидыВычетовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2011Года <> """"
	|					И ВидыВычетовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2011Года <> ""-""
	|				ИЛИ УдалитьВычетыНДФЛ.КодДляОтчетности2010 = ВидыВычетовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2010Года
	|					И ВидыВычетовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2010Года <> """"
	|					И ВидыВычетовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2010Года <> ""-"")";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);		
	КонецЦикла;	
	
КонецПроцедуры	

Функция КонвертироватьЭлементВычетыНДФЛ(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
		
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ВидыВычетовНДФЛ.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		Элемент.КодПрименяемыйВНалоговойОтчетностиС2010Года = ?(ЗначениеЗаполнено(КонвертируемыеДанные.КодДляОтчетности2010), КонвертируемыеДанные.КодДляОтчетности2010, КонвертируемыеДанные.Код);
		
		Элемент.ОбменДанными.Загрузка = Истина;
		
		Элемент.Записать();
				
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	

	Возврат Элемент.Ссылка;
		
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлементаВычетыНДФЛ(Элемент)
	Если Элемент = Справочники.УдалитьВычетыНДФЛ.Код103 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код103;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код104 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код104;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код105 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код105;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код101 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код108;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код115 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код115;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код106 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код109;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код102 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код110;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код119 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код119;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код120 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код120;			
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код111 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код111;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код123 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код123;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код124 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код124;		
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код107 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код112;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код113 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код113;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код307 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код201;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код308 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код202;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код309 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код203;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код204 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код204;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код205 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код205;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код206 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код206;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код305 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код207;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код208 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код208;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код209 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код209;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код210 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код210;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код211 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код211;		
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код212 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код212;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код213 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код213;
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код214 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код214;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код215 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код215;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код216 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код216;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код217 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код217;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код311 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код311;		
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код312 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код312;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код318 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код318;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код319 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код319;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код403 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код403;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код404 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код404;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код405 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код405;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код501 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код501;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код502 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код502;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код503 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код503;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код504 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код504;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код505 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код505;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код506 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код506;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код507 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код507;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.МатпомощьПриРожденииРебенка Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код508;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код601 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код601;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код607 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код607;	
	ИначеЕсли Элемент = Справочники.УдалитьВычетыНДФЛ.Код116 Тогда
		Возврат Справочники.ВидыВычетовНДФЛ.Код116;		
	Иначе
		Возврат Неопределено
	КонецЕсли	
КонецФункции	

//Справочник УдалитьДоходыНДФЛ
//
Процедура КонвертироватьСправочникДоходыНДФЛ(СоответствиеКонвертированныхОбъектов)
	Запрос  = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьДоходыНДФЛ.Ссылка,
	|	УдалитьДоходыНДФЛ.ВерсияДанных,
	|	УдалитьДоходыНДФЛ.ПометкаУдаления,
	|	УдалитьДоходыНДФЛ.Предопределенный,
	|	УдалитьДоходыНДФЛ.Код,
	|	УдалитьДоходыНДФЛ.Наименование,
	|	УдалитьДоходыНДФЛ.СтавкаНалогообложенияРезидента,
	|	УдалитьДоходыНДФЛ.КодДляОтчетности,
	|	УдалитьДоходыНДФЛ.НеОблагаетсяУНалоговогоАгента,
	|	УдалитьДоходыНДФЛ.НеОтражаетсяВОтчетности2010,
	|	ВидыДоходовНДФЛ.Ссылка КАК ПриемникСсылка
	|ИЗ
	|	Справочник.УдалитьДоходыНДФЛ КАК УдалитьДоходыНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО УдалитьДоходыНДФЛ.КодДляОтчетности = ВидыДоходовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2010Года
	|			И (ВидыДоходовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2010Года <> ""-"")
	|			И (ВидыДоходовНДФЛ.КодПрименяемыйВНалоговойОтчетностиС2010Года <> """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);		
	КонецЦикла;
	
КонецПроцедуры	

Функция КонвертироватьЭлементДоходыНФДЛ(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
		
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
       
	Если Элемент = Неопределено Тогда 
		Элемент = Справочники.ВидыДоходовНДФЛ.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		Элемент.КодПрименяемыйВНалоговойОтчетностиС2010Года = ?(ЗначениеЗаполнено(КонвертируемыеДанные.КодДляОтчетности), КонвертируемыеДанные.КодДляОтчетности, КонвертируемыеДанные.Код);
		Элемент.СтавкаНалогообложенияРезидента = КонвертироватьДанные(КонвертируемыеДанные.СтавкаНалогообложенияРезидента, СоответствиеКонвертированныхОбъектов);
	    Элемент.НеОблагаетсяУНалоговогоАгента = КонвертируемыеДанные.НеОблагаетсяУНалоговогоАгента;

		Элемент.ОбменДанными.Загрузка = Истина;
		
		
		Элемент.Записать();
		
	
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	КонецЕсли;	
	
	Возврат Элемент.Ссылка;
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлементаДоходыНДФЛ(Элемент)
	Если Элемент = Справочники.УдалитьДоходыНДФЛ.Код1010 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1010;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1211 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1211;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1300 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1300;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1530 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1530;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1531 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1531;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1532 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1532;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1533_2010 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1533;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1535 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1535;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1536 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1536;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1537 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1537;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1538 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1538;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1539 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1539;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код1541 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код1541;	
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.КодДоходаПоУмолчанию Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.КодДоходаПоУмолчанию;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2010 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2010;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2201 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2201;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2202 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2202;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2203 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2203;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2204 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2204;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2205 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2205;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2206 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2206;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2207 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2207;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2208 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2208;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2209 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2209;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2210 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2210;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2610ПоСтавке35 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2610;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2720 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2720;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2730 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2730;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2740 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2740;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2760 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2760;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2761 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2761;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.МатпомощьПриРожденииРебенка Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2762;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2770 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2770;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код2790 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код2790;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыНДФЛ.Код4800 Тогда
		Возврат Справочники.ВидыДоходовНДФЛ.Код4800;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	

//Справочник УдалитьДоходыПоСтраховымВзносам
//
Функция КонвертироватьЭлементДоходовПоСтраховымВзносам(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		
		Элемент = Справочники.ВидыДоходовПоСтраховымВзносам.НайтиПоНаименованию(КонвертируемыеДанные.Наименование);
		
		Если Элемент = Неопределено Тогда
		
			Элемент = Справочники.ВидыДоходовПоСтраховымВзносам.СоздатьЭлемент();
			Элемент.Наименование = КонвертируемыеДанные.Наименование;
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
			Элемент.ВходитВБазуПФР = КонвертируемыеДанные.ВходитВБазуПФР;
			Элемент.ВходитВБазуФСС = КонвертируемыеДанные.ВходитВБазуФСС;
		    Элемент.ВходитВБазуФОМС = КонвертируемыеДанные.ВходитВБазуФОМС;

			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Записать();
		КонецЕсли;	
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		
	КонецЕсли;	
	
	Возврат Элемент.Ссылка;
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлементаДоходовПоСтраховымВзносам(Элемент)
	Если Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.ПособияЗаСчетФСС Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.ПособияЗаСчетФСС;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.ДоговорыГПХ Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.НеОблагаетсяЦеликом;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.ОблагаетсяЦеликом Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.ОблагаетсяЦеликом;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеИсполнениеПроизведений Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеИсполнениеПроизведений;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.МатпомощьПриРожденииРебенка;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.Матпомощь Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.Матпомощь;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеОткрытия Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеОткрытия;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеАудиовизуальныеПроизведения Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеАудиовизуальныеПроизведения;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеДругиеМузыкальныеПроизведения Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеДругиеМузыкальныеПроизведения;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеЛитературныеПроизведения Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеЛитературныеПроизведения;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеМузыкальноСценическиеПроизведение Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеМузыкальноСценическиеПроизведение;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеНаучныеТруды Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеНаучныеТруды;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеСкульптуры Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеСкульптуры;
	ИначеЕсли Элемент = Справочники.УдалитьДоходыПоСтраховымВзносам.АвторскиеГрафическиеПроизведения Тогда
		Возврат Справочники.ВидыДоходовПоСтраховымВзносам.АвторскиеГрафическиеПроизведения;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;			
КонецФункции	


//Справочник Должности
//
Функция КонвертироватьЭлементДолжность(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции	

// Справочник ОснованияДосрочногоНазначенияПенсии
//
//Справочник УдалитьДокументыУдостоверяющиеЛичность
//

Функция ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(Элемент)
	Если Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса;		
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС07 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС09 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС02 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС01 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС26 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС04 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС06 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Процедура КонвертироватьСправочникОснованияВыслугиЛет(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьОснованияВыслугиЛет.Ссылка,
	|	УдалитьОснованияВыслугиЛет.ВерсияДанных,
	|	УдалитьОснованияВыслугиЛет.ПометкаУдаления,
	|	УдалитьОснованияВыслугиЛет.Предопределенный,
	|	УдалитьОснованияВыслугиЛет.Код,
	|	УдалитьОснованияВыслугиЛет.Наименование,
	|	ОснованияДосрочногоНазначенияПенсии.Ссылка КАК ПриемникСсылка
	|ИЗ
	|	Справочник.УдалитьОснованияВыслугиЛет КАК УдалитьОснованияВыслугиЛет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОснованияДосрочногоНазначенияПенсии КАК ОснованияДосрочногоНазначенияПенсии
	|		ПО УдалитьОснованияВыслугиЛет.Код = ОснованияДосрочногоНазначенияПенсии.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);		
	КонецЦикла;
	
КонецПроцедуры

Функция КонвертироватьЭлементОснованияВыслугиЛет(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		Элемент = Справочники.ОснованияДосрочногоНазначенияПенсии.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	
	
	Возврат Элемент.Ссылка;
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлементаОснованияВыслугиЛет(Элемент)
	Если Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст27_14 Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_14;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст27_15 Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст28_ГД Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГД;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст28_ГДХР Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГДХР;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст28_ПД Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПД;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст28_ПДРК Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПДРК;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст28_СМ Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМ;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.Ст28_СМХР Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМХР;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.ИНСПЕКТ Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.ИНСПЕКТ;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.ИСПКЛС1 Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.ИСПКЛС1;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.ИТСИСП Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСИСП;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.ИТСМАВ Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСМАВ;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.ЛЕТИСП Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.ЛЕТИСП;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.НОРМАПР Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМАПР;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.НОРМСП Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМСП;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.ОПЫТИСП Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.ОПЫТИСП;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.РЕАКТИВН Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.РЕАКТИВН;
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.САМОЛЕТ Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.САМОЛЕТ;	
	ИначеЕсли Элемент = Справочники.УдалитьОснованияВыслугиЛет.СПЕЦАВ Тогда
		Возврат Справочники.ОснованияДосрочногоНазначенияПенсии.СПЕЦАВ;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции	


// Справочник ОснованияДосрочногоНазначенияПенсии
//
Функция КонвертироватьЭлементОснованияИсчисляемогоСтраховогоСтажа(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции	

// Справочник ОсобыеУсловияТруда 
//
Процедура КонвертироватьСправочникОсобыеУсловияТруда(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьОсобыеУсловияТруда.Ссылка,
	|	УдалитьОсобыеУсловияТруда.ВерсияДанных,
	|	УдалитьОсобыеУсловияТруда.ПометкаУдаления,
	|	УдалитьОсобыеУсловияТруда.Предопределенный,
	|	ВЫБОР
	|		КОГДА УдалитьОсобыеУсловияТруда.КодДляОтчетности2010 <> """"
	|			ТОГДА УдалитьОсобыеУсловияТруда.КодДляОтчетности2010
	|		ИНАЧЕ УдалитьОсобыеУсловияТруда.Код
	|	КОНЕЦ КАК Код,
	|	УдалитьОсобыеУсловияТруда.Наименование,
	|	ОсобыеУсловияТрудаПФР.Ссылка КАК ПриемникСсылка
	|ИЗ
	|	Справочник.УдалитьОсобыеУсловияТруда КАК УдалитьОсобыеУсловияТруда
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТрудаПФР
	|		ПО УдалитьОсобыеУсловияТруда.КодДляОтчетности2010 = ОсобыеУсловияТрудаПФР.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);		
	КонецЦикла;
	
КонецПроцедуры

Функция КонвертироватьЭлементОсобыеУсловияТрудаПФР(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		Элемент = Справочники.ОсобыеУсловияТрудаПФР.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	
	
	Возврат Элемент.Ссылка;
	
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлементаОсобыеУсловияТруда(Элемент)
	Если Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_1 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_1;
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_2 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_2;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_3 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_3;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_4 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_4;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_5 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_5;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_6 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_6;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_7 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_7;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_8 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_8;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_9 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_9;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст27_10 Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_10;	
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст28_ОС Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_ОС;
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст28_ПЖ Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст27_ПЖ;
	ИначеЕсли Элемент = Справочники.УдалитьОсобыеУсловияТруда.Ст28_СЕВ Тогда
		Возврат Справочники.ОсобыеУсловияТрудаПФР.Ст28_СЕВ;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;			
КонецФункции	


// Справочник ПодразделенияОрганизаций 
//
Функция КонвертироватьЭлементПодразделенияОрганизаций(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции	

// Справочник СотрудникиОрганизаций 
//
Функция КонвертироватьЭлементСотрудникиОрганизаций(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции	


// Справочник СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечени
//
Функция КонвертироватьЭлементСпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции


// Справочник ТерриториальныеУсловия
//
Процедура КонвертироватьСправочникТерриториальныеУсловия(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьТерриториальныеУсловия.Ссылка,
	|	УдалитьТерриториальныеУсловия.ВерсияДанных,
	|	УдалитьТерриториальныеУсловия.ПометкаУдаления,
	|	УдалитьТерриториальныеУсловия.Предопределенный,
	|	УдалитьТерриториальныеУсловия.Код,
	|	УдалитьТерриториальныеУсловия.Наименование,
	|	ТерриториальныеУсловияПФР.Ссылка КАК ПриемникСсылка
	|ИЗ
	|	Справочник.УдалитьТерриториальныеУсловия КАК УдалитьТерриториальныеУсловия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
	|		ПО УдалитьТерриториальныеУсловия.Код = ТерриториальныеУсловияПФР.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КонвертироватьДанные(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);		
	КонецЦикла;
	
КонецПроцедуры

Функция КонвертироватьЭлементТерриториальныеУсловия(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	Если Элемент = Неопределено Тогда
		Элемент = Справочники.ТерриториальныеУсловияПФР.СоздатьЭлемент();
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	
	
	Возврат Элемент.Ссылка;
	
КонецФункции

Функция ПолучитьСоответствиеПредопределенногоЭлементаТерриториальныеУсловия(Элемент)
	Если Элемент = Справочники.УдалитьТерриториальныеУсловия.МКС Тогда
		Возврат Справочники.ТерриториальныеУсловияПФР.МКС;
	ИначеЕсли Элемент = Справочники.УдалитьТерриториальныеУсловия.РКС Тогда
		Возврат Справочники.ТерриториальныеУсловияПФР.РКС;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции	

// Справочник ФизическиеЛица
//
Процедура ФизическиеЛицаКонвертация()	
	
	ВыборкаФизЛиц = Справочники.ФизическиеЛица.Выбрать();
	
	Пока ВыборкаФизЛиц.Следующий() Цикл 
		Если НЕ ВыборкаФизЛиц.ЭтоГруппа Тогда
			ФизЛицоОбъект = ВыборкаФизЛиц.ПолучитьОбъект();
			ФизЛицоОбъект.Пол = КонвертироватьДанные(ФизЛицоОбъект.Пол, Новый Соответствие);
			ФизЛицоОбъект.ФИО = ФизЛицоОбъект.Наименование;
			ФизЛицоОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция КонвертироватьЭлементФизическиеЛица(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции

Процедура ЗаполнитьИнициалыИмени()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФИОФизическихЛиц.Период,
		|	ФИОФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|ГДЕ
		|	ФИОФизическихЛиц.Инициалы = """"
		|	И ФИОФизическихЛиц.Имя <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФИОФизическихЛиц");
				ЭлементБлокировки.УстановитьЗначение("Период", Выборка.Период);
				ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Выборка.ФизическоеЛицо);
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				
				НаборЗаписей.Прочитать();
				
				Для каждого Запись Из НаборЗаписей Цикл
					Запись.Инициалы = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыПоИмениОтчеству(
						Запись.Имя, Запись.Отчество);
				КонецЦикла;
				
				// Сохранение объекта
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить инициалы %1 за %2 по причине: %3'"),
					Выборка.ФизическоеЛицо,
					Формат(Выборка.Период, "ДЛФ=D"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Справочники.ФизическиеЛица,
					Выборка.ФизическоеЛицо,
					ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Организации

Процедура ОрганизацииКонвертация()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.УдалитьРайонныйКоэффициентРФ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Сотрудники.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ОрганизацияПрименяетСевернуюНадбавку
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ПО (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = Организации.Ссылка)
	|			И (Сотрудники.ТекущийПроцентСевернойНадбавки <> 0)
	|ГДЕ
	|	(Организации.УдалитьРайонныйКоэффициентРФ <> 1
	|			ИЛИ НЕ Сотрудники.Ссылка ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Организации.УдалитьРайонныйКоэффициентРФ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.РайонныйКоэффициент          = Макс(1, Выборка.УдалитьРайонныйКоэффициентРФ);
		ОрганизацияОбъект.РайонныйКоэффициентРФ        = 1;
		ОрганизацияОбъект.ПрименятьРайонныйКоэффициент = Истина;
		ОрганизацияОбъект.ПрименятьСевернуюНадбавку    = Выборка.ОрганизацияПрименяетСевернуюНадбавку;
		ОрганизацияОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УстановитьПериодРегистрацийВНалоговомОргане()
	Набор = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
	
	Набор.Очистить();
	Набор.Записать();
	
	ЗаполнитьИсториюРегистрацийВНалоговомОргане();
	ЗаполнитьИсториюРегистрацийВНалоговомОрганеНаДатуОтсчетаПериодическихСведенийСПериодомМесяц();
	
КонецПроцедуры


//Процедура УстановитьПери

//////////////////////////////////////////////////////////////////////////////////////////
//Перечисления

//Перечисление НДФЛРасчетыСБюджетомВидСтроки
//
Функция ПолучитьСоответствиеЭлементаПеречисленияНДФЛРасчетыСБюджетомВидСтроки(Элемент)
	Если Элемент = Перечисления.УдалитьНДФЛРасчетыСБюджетомВидСтроки.Удержание Тогда 
		Возврат Перечисления.ВариантыУдержанияНДФЛ.Удержано;
	ИначеЕсли Элемент = Перечисления.УдалитьНДФЛРасчетыСБюджетомВидСтроки.ПереданоНаВзыскание Тогда 
		Возврат Перечисления.ВариантыУдержанияНДФЛ.ПереданоНаВзысканиеВНалоговыйОрган;
	ИначеЕсли Элемент = Перечисления.УдалитьНДФЛРасчетыСБюджетомВидСтроки.ВозвратНалога Тогда 
		Возврат Перечисления.ВариантыУдержанияНДФЛ.ВозвращеноНалоговымАгентом;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////
//Перечисление ВидыЗанятости

Функция ПолучитьСоответствиеЭлементаПеречисленияВидыЗанятости(Элемент)
	Возврат Элемент;	
КонецФункции

//Перечисление ВидыНачисленийОплатыТрудаДляНУ
//
Функция ПолучитьСоответствиеЭлементаПеречисленияВидыНачисленийОплатыТрудаДляНУ(Элемент)
	Возврат Элемент;	
КонецФункции


//Перечисление ВидыПлатежейВГосБюджет
//
Функция ПолучитьСоответствиеЭлементаПеречисленияВидыПлатежейВГосБюджет(Элемент)
	Возврат Элемент;		
КонецФункции

//Перечисление ВидыПособийСоциальногоСтрахования
//
Функция ПолучитьСоответствиеЭлементаПеречисленияВидыПособийСоциальногоСтрахования(Элемент)
	Возврат Элемент;	
КонецФункции

//Перечисление ВидыТарифовСтраховыхВзносов
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТарифыСтраховыхВзносов(Элемент)
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЗначениеПеречисления = Метаданные.Перечисления.УдалитьВидыТарифовСтраховыхВзносов.ЗначенияПеречисления.Получить(Перечисления.УдалитьВидыТарифовСтраховыхВзносов.Индекс(Элемент));
		ИмяЗначения = ЗначениеПеречисления.Имя;
		Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов." + ИмяЗначения);
	Иначе
		Возврат Справочники.ВидыТарифовСтраховыхВзносов.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Элемент;
КонецФункции	

//Перечисление ГруппыВычетовПоНДФЛ
//
Функция ПолучитьСоответствиеЭлементаПеречисленияГруппыВычетовПоНДФЛ(Элемент)
	//Если Элемент = Перечисления.УдалитьГруппыВычетовПоНДФЛ.Имущественные Тогда 
	//	Возврат Перечисления.ГруппыВычетовПоНДФЛ.Имущественные;
	//ИначеЕсли Элемент = Перечисления.УдалитьГруппыВычетовПоНДФЛ.Социальные Тогда 
	//	Возврат Перечисления.ГруппыВычетовПоНДФЛ.Социальные;
	//ИначеЕсли Элемент = Перечисления.УдалитьГруппыВычетовПоНДФЛ.Стандартные Тогда 
	//	Возврат Перечисления.ГруппыВычетовПоНДФЛ.Стандартные;
	//ИначеЕсли Элемент = Перечисления.УдалитьГруппыВычетовПоНДФЛ.СтандартныеНаДетей Тогда 
	//	Возврат Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей;	
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;	
	
	Возврат Элемент;
КонецФункции	


//Перечисление КатегорииЗастрахованныхЛицПФР
//
Функция ПолучитьСоответствиеЭлементаПеречисленияКатегорииЗастрахованныхЛицПФР(Элемент)
	//ИмяЭлементаПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(Элемент); 
	//
	//Если Метаданные.Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЗначенияПеречисления.Найти(ИмяЭлементаПеречисления) <> Неопределено Тогда
	//	Возврат Перечисления.КатегорииЗастрахованныхЛицДляПФР[ИмяЭлементаПеречисления];
	//ИначеЕсли Элемент = Перечисления.УдалитьКатегорииЗастрахованныхЛицПФР.УСЕН Тогда 
	//	Возврат Перечисления.КатегорииЗастрахованныхЛицДляПФР.НР;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;	
	
	Возврат Элемент;
КонецФункции

//Перечисление НДФЛСтавки
//
Функция ПолучитьСоответствиеЭлементаПеречисленияНДФЛСтавки(Элемент)
	Возврат Элемент;	
КонецФункции

//Перечисление НДФЛСтавкиНалогообложенияРезидента
//
Функция ПолучитьСоответствиеЭлементаПеречисленияНДФЛСтавкиНалогообложенияРезидента(Элемент)
	Возврат Элемент;	
КонецФункции

//Перечисление ОснованияДляПредставленияСправок2НДФЛ
//
Функция ПолучитьСоответствиеЭлементаПеречисленияОснованияДляПредставленияСправок2НДФЛ(Элемент)
	//ИмяЭлементаПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(Элемент); 
	//
	//Если Метаданные.Перечисления.ОснованияДляПредставленияСправок2НДФЛ.ЗначенияПеречисления.Найти(ИмяЭлементаПеречисления) <> Неопределено Тогда
	//	Возврат Перечисления.ОснованияДляПредставленияСправок2НДФЛ[ИмяЭлементаПеречисления];
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;	
	
	Возврат Элемент;
КонецФункции

//Перечисление ОсобенностиИсчисленияНДФЛ
//
Функция ПолучитьСоответствиеЭлементаПеречисленияОсобенностиИсчисленияНДФЛ(Элемент)
	Возврат Элемент;	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////
//Перечисление ОтражениеВУСН

Функция ПолучитьСоответствиеЭлементаПеречисленияОтражениеВУСН(Элемент)
	Возврат Элемент;	
КонецФункции


//Перечисление ПорядокФормированияСправкиОДоходахФизическогоЛица
//
Функция ПолучитьСоответствиеЭлементаПеречисленияПорядокФормированияСправкиОДоходахФизическогоЛица(Элемент)
	Возврат Элемент;	
КонецФункции

//Перечисление ТипыСведенийСЗВ
//
Функция ПолучитьСоответствиеЭлементаПеречисленияТипыСведенийСЗВ(Элемент)
	Возврат Элемент;	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПеречисленияПолФизическихЛиц(Элемент)
	Если Элемент = Перечисления.УдалитьПолФизическихЛиц.Мужской Тогда
		Возврат Перечисления.ПолФизическогоЛица.Мужской;
	ИначеЕсли Элемент = Перечисления.УдалитьПолФизическихЛиц.Женский Тогда
		Возврат Перечисления.ПолФизическогоЛица.Женский; 
	КонецЕсли;	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПеречисленияСтатусыНДФЛ(Элемент)
	Если Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда  
		Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент");
	ИначеЕсли Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.Нерезидент Тогда  
		Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент");
	ИначеЕсли Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда  
		Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист");
	ИначеЕсли Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда 
   		Возврат	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников");
	ИначеЕсли Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ Тогда 
   		Возврат	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.ЧленЭкипажаСуднаПодФлагомРФ");
	ИначеЕсли Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.Беженец Тогда 
   		Возврат	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Беженцы");
	ИначеЕсли Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента Тогда 
   		Возврат	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.НерезидентРаботающийНаОснованииПатента");
	ИначеЕсли Элемент = Перечисления.УдалитьСтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС Тогда 
   		Возврат	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.ГражданинСтраныЕАЭС");
	Иначе
		Возврат Справочники.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка(); 	
	КонецЕсли;				
КонецФункции

Функция ПолучитьСоответствиеЭлементаПричиныИзмененияСостояния(Элемент)
	Если Элемент = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу Тогда
		Возврат Перечисления.ВидыКадровыхСобытий.Прием;
	ИначеЕсли Элемент = Перечисления.ПричиныИзмененияСостояния.Перемещение Тогда
		Возврат Перечисления.ВидыКадровыхСобытий.Перемещение;
	ИначеЕсли Элемент = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		Возврат Перечисления.ВидыКадровыхСобытий.Увольнение;
	Иначе
		Возврат Перечисления.ВидыКадровыхСобытий.ПустаяСсылка();
	КонецЕсли;	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////////////////
// ПВР

Процедура КонвертироватьПВРНачисления(СоответствиеКонвертированныхОбъектов)
	БухУчетЗарплаты = СоздатьСпособыСписанияЗатрат();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БухучетЗарплаты", БухУчетЗарплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетЗарплаты.Счет,
	|	БухучетЗарплаты.Субконто1,
	|	БухучетЗарплаты.Субконто2,
	|	БухучетЗарплаты.Субконто3,
	|	БухучетЗарплаты.ОтражениеВУСН,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете
	|ПОМЕСТИТЬ БухучетЗарплаты
	|ИЗ
	|	&БухучетЗарплаты КАК БухучетЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьОсновныеНачисленияОрганизаций.Ссылка,
	|	УдалитьОсновныеНачисленияОрганизаций.ВерсияДанных,
	|	УдалитьОсновныеНачисленияОрганизаций.ПометкаУдаления,
	|	УдалитьОсновныеНачисленияОрганизаций.Предопределенный,
	|	УдалитьОсновныеНачисленияОрганизаций.Код,
	|	УдалитьОсновныеНачисленияОрганизаций.Наименование,
	|	УдалитьОсновныеНачисленияОрганизаций.ВидНачисленияПоСт255НК,
	|	УдалитьОсновныеНачисленияОрганизаций.КодДоходаНДФЛ,
	|	УдалитьОсновныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы,
	|	УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете,
	|	УдалитьОсновныеНачисленияОрганизаций.КодДоходаЕСН,
	|	УдалитьОсновныеНачисленияОрганизаций.КодДоходаФСС_НС,
	|	УдалитьОсновныеНачисленияОрганизаций.ЧастичноПодпадаетПодЕНВД,
	|	Начисления.СпособОтраженияЗарплатыВБухучете КАК ПриемникСпособОтраженияЗарплатыВБухучете,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК ИсточникСпособОтраженияЗарплатыВБухучете,
	|	Начисления.Ссылка КАК НовоеНачисление
	|ИЗ
	|	ПланВидовРасчета.УдалитьОсновныеНачисленияОрганизаций КАК УдалитьОсновныеНачисленияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО УдалитьОсновныеНачисленияОрганизаций.Наименование = Начисления.Наименование
	|		И ПОДСТРОКА(УдалитьОсновныеНачисленияОрганизаций.Код, 1, 100) = ПОДСТРОКА(Начисления.Код, 1, 100)
	|		ЛЕВОЕ СОЕДИНЕНИЕ БухучетЗарплаты КАК БухучетЗарплаты
	|		ПО УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт = БухучетЗарплаты.Счет
	|			И УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт1 = БухучетЗарплаты.Субконто1
	|			И УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт2 = БухучетЗарплаты.Субконто2
	|			И УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт3 = БухучетЗарплаты.Субконто3
	|			И УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН = БухучетЗарплаты.ОтражениеВУСН";
				   
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Если Выборка.НовоеНачисление = Null Тогда
			КонвертироватьЭлементНачисления(Выборка, СоответствиеКонвертированныхОбъектов);
		Иначе
			ВставитьСсылкуНаКонвертированныйОбъект(Выборка.Ссылка, Выборка.НовоеНачисление, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;		
	КонецЦикла;					
					
	// Заполняем порядок отражения зарплаты учете	
	Для Каждого СтрокаТаблицы Из БухУчетЗарплаты Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
		МенеджерЗаписи.ЕНВД = Ложь;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);		
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры	

Функция НаименованиеОбъектаБухучетаЗарплаты(Счет, Субконто1, Субконто2, Субконто3, ОтражениеВУСН)
	
	ОграничениеДлины = 30;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);
	
	ПредставлениеСубконто = "";
	Для НомерСубконто = 1 По 3 Цикл
		Субконто = МассивСубконто[НомерСубконто - 1];
		Если ЗначениеЗаполнено(Субконто) Тогда
			ПредставлениеЗначения = Строка(Субконто);
			Если СтрДлина(ПредставлениеЗначения) > ОграничениеДлины Тогда
				ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1...", 
											Лев(ПредставлениеЗначения, ОграничениеДлины - 3));
			КонецЕсли;
			ПредставлениеСубконто =	ПредставлениеСубконто + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2), ",
										ПредставлениеЗначения,
										Строка(Субконто.Метаданные().Синоним));
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеУСН = ?(ЗначениеЗаполнено(ОтражениеВУСН), 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", в УСН %1", НРег(Строка(ОтражениеВУСН))),
						"");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1Счет %2%3", 
				ПредставлениеСубконто, 
				Строка(Счет),
				ПредставлениеУСН);
	
КонецФункции

Функция СоздатьСпособыСписанияЗатрат()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт КАК Счет,
	|	УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт1 КАК Субконто1,
	|	УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт2 КАК Субконто2,
	|	УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СубконтоДт3 КАК Субконто3,
	|	УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН КАК ОтражениеВУСН
	|ИЗ
	|	ПланВидовРасчета.УдалитьОсновныеНачисленияОрганизаций КАК УдалитьОсновныеНачисленияОрганизаций
	|ГДЕ
	|	(УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИЛИ УдалитьОсновныеНачисленияОрганизаций.СпособОтраженияВБухучете.ОтражениеВУСН <> ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка))";
	
	БухучетЗарплаты = Запрос.Выполнить().Выгрузить();
	
	БухучетЗарплаты.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Для Каждого СтрокаТаблицы Из БухучетЗарплаты Цикл
		ОбъектБухучетаЗарплаты = Справочники.СпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
		ОбъектБухучетаЗарплаты.Наименование = НаименованиеОбъектаБухучетаЗарплаты(
												СтрокаТаблицы.Счет, 
												СтрокаТаблицы.Субконто1, 
												СтрокаТаблицы.Субконто2, 
												СтрокаТаблицы.Субконто3,
												СтрокаТаблицы.ОтражениеВУСН);
		ОбъектБухучетаЗарплаты.Записать();
		ОбъектБухучетаЗарплатыСсылка = ОбъектБухучетаЗарплаты.Ссылка;
		СтрокаТаблицы.СпособОтраженияЗарплатыВБухучете = ОбъектБухучетаЗарплатыСсылка;
	КонецЦикла;
	
	Возврат БухучетЗарплаты;
	
КонецФункции	

// ПВР Начисления
//
Функция КонвертироватьЭлементНачисления(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
	ОтражениеВБухУчете = Новый Структура("ПриемникСпособОтраженияЗарплатыВБухучете, ИсточникСпособОтраженияЗарплатыВБухучете");
	ЗаполнитьЗначенияСвойств(ОтражениеВБухУчете, КонвертируемыеДанные);
	 
	Если Элемент = Неопределено Тогда
		
		Элемент = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		Элемент.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее;
		Элемент.Наименование = КонвертируемыеДанные.Наименование;
		УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
		Элемент.ВидНачисленияДляНУ = КонвертироватьДанные(КонвертируемыеДанные.ВидНачисленияПоСт255НК, СоответствиеКонвертированныхОбъектов);
		Элемент.КодДоходаНДФЛ = КонвертироватьДанные(КонвертируемыеДанные.КодДоходаНДФЛ, СоответствиеКонвертированныхОбъектов);
		Элемент.КодДоходаСтраховыеВзносы = КонвертироватьДанные(КонвертируемыеДанные.КодДоходаСтраховыеВзносы, СоответствиеКонвертированныхОбъектов);
		Элемент.КодДоходаСтраховыеВзносы2017 = Элемент.КодДоходаСтраховыеВзносы;
		Элемент.СпособОтраженияЗарплатыВБухучете = ОтражениеВБухУчете.ИсточникСпособОтраженияЗарплатыВБухучете;
		Если ЗначениеЗаполнено(Элемент.КодДоходаНДФЛ) Тогда
			Элемент.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Элемент.КодДоходаНДФЛ);
		КонецЕсли;
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
					
		ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли Элемент <> Неопределено И ОтражениеВБухУчете.ПриемникСпособОтраженияЗарплатыВБухучете <> ОтражениеВБухУчете.ИсточникСпособОтраженияЗарплатыВБухучете Тогда
		ПВРОбъект = Элемент.ПолучитьОбъект();
		ПВРОбъект.СпособОтраженияЗарплатыВБухучете = ОтражениеВБухУчете.ИсточникСпособОтраженияЗарплатыВБухучете;
		
		ПВРОбъект.ОбменДанными.Загрузка = Истина;
		ПВРОбъект.Записать();
	
	КонецЕсли;	

	Возврат Элемент.Ссылка;

КонецФункции

Функция ПолучитьСоответствиеПредопределенногоОсновныеНачисленияОрганизаций(Элемент)
	Если Элемент = ПланыВидовРасчета.УдалитьОсновныеНачисленияОрганизаций.ОкладПоДням Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ СПРАВОЧНИКОВ ПРИ ПЕРЕХОДЕ НА НОВУЮ РЕДАКЦИЮ

 
Процедура ПодразделенияКонвертация()
	ВыборкаПодразделений = Справочники.ПодразделенияОрганизаций.Выбрать();
 
	Пока ВыборкаПодразделений.Следующий() Цикл
		Объект = ВыборкаПодразделений.ПолучитьОбъект();
		Если Объект.РайонныйКоэффициент  =  0 Тогда
  			Объект.РайонныйКоэффициент = Макс(Объект.РайонныйКоэффициент, 1);
  			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);   
		КонецЕсли;
 	КонецЦикла;  
КонецПроцедуры 

Процедура СотрудникиКонвертация()
	
	ВыборкаСотрудников = Справочники.Сотрудники.Выбрать();
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаСотрудников.ГоловнаяОрганизация) Тогда 
			СотрудникОбъект = ВыборкаСотрудников.ПолучитьОбъект();
			СотрудникОбъект.ГоловнаяОрганизация = СотрудникОбъект.УдалитьОрганизация;
			СотрудникОбъект.ОбменДанными.Загрузка = Истина;
			
			СотрудникОбъект.Записать();
		КонецЕсли;		
	КонецЦикла;		
КонецПроцедуры

Процедура ЗаполнитьГоловногоСотрудника()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СотрудникОбъект.ГоловнойСотрудник = СотрудникОбъект.Ссылка;
			СотрудникОбъект.ОбменДанными.Загрузка = Истина;
			СотрудникОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ СВЕДЕНИЙ

///////////////////////////////////////////////////////////////////////////////////////////////////
// Лицевые счета сотрудников

Функция ЗарплатныйПроектПоОрганизацииИБИКу(Организация, БИК) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &Организация
	|	И ЗарплатныеПроекты.Банк.Код = &БИК";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЗарплатныйПроект;
		
	КонецЕсли;
	
	Возврат Справочники.ЗарплатныеПроекты.ПустаяСсылка();
	
КонецФункции

// Создает новый зарплатный проект, используя наименование банка.
//
// Параметры:
//		Банк - банк, используя наименование которого создается зарплатный проект.
//
// Возвращаемое значение:
//		Зарплатный проект - ссылка на созданный зарплатный проект.
//		Или пустая ссылка, если зарплатный проект не создан.
//
Функция НовыйЗарплатныйПроектПоОрганизацииИБанку(Организация, Банк) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Банк) Тогда
		Возврат Справочники.ЗарплатныеПроекты.ПустаяСсылка();
	КонецЕсли;
	
	ЗарплатныйПроектОбъект = Справочники.ЗарплатныеПроекты.СоздатьЭлемент();
	ЗарплатныйПроектОбъект.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Наименование");
	ЗарплатныйПроектОбъект.Организация = Организация;
	ЗарплатныйПроектОбъект.Банк = Банк;
	ЗарплатныйПроектОбъект.МаксимальнаяДлинаИмениДержателяКарты = 19;
	
	ЗарплатныйПроектОбъект.Записать();
	ЗарплатныйПроектОбъект.ОбменДанными.Загрузка = Истина;
	
	Возврат ЗарплатныйПроектОбъект.Ссылка;
	
КонецФункции

Процедура ЛицевыеСчетаСотрудниковКонвертация(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЛицевыеСчетаСотрудников.Организация
	                      |ИЗ
	                      |	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудников");
						  
	Если Запрос.Выполнить().Пустой() Тогда 
		
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда
			ДополнитьКласификаторБанков();
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.ФизЛицо,
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.Организация КАК Организация,
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.Банк.Код КАК БИК,
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета,
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.Регистратор.Дата КАК Период
		|ИЗ
		|	РегистрСведений.УдалитьЛицевыеСчетаРаботниковОрганизации КАК УдалитьЛицевыеСчетаРаботниковОрганизации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Банк";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СоздатьНаборЗаписей();
		
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("БИК") Цикл  
				
				ЗарплатныйПроект = ЗарплатныйПроектПоОрганизацииИБИКу(
									Выборка.Организация,
									Выборка.БИК);
			
				Если НЕ ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
					Банк = Справочники.КлассификаторБанков.НайтиПоКоду(Выборка.БИК);
					
					ЗарплатныйПроект = НовыйЗарплатныйПроектПоОрганизацииИБанку(
										Выборка.Организация,
										Банк);
				КонецЕсли;

				Пока Выборка.Следующий() Цикл
					Запись = НаборЗаписей.Добавить();
					Запись.ДатаОткрытияЛицевогоСчета = Выборка.Период;
					Запись.Организация               = Выборка.Организация;
					Запись.ФизическоеЛицо            = Выборка.ФизЛицо;
					Запись.НомерЛицевогоСчета        = Выборка.НомерЛицевогоСчета;
					Запись.ЗарплатныйПроект          = ЗарплатныйПроект;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьКласификаторБанков()
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.Банк КАК Банк,
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.Банк.Код КАК Код,
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.Банк.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТУдалитьБанки
		|ИЗ
		|	РегистрСведений.УдалитьЛицевыеСчетаРаботниковОрганизации КАК УдалитьЛицевыеСчетаРаботниковОрганизации
		|ГДЕ
		|	УдалитьЛицевыеСчетаРаботниковОрганизации.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдалитьБанки.Код КАК БИК,
		|	УдалитьБанки.Наименование КАК Наименование,
		|	""ЗарплатныеПроекты"" КАК ТипИсточника,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ ВТПоИсточникам
		|ИЗ
		|	ВТУдалитьБанки КАК УдалитьБанки
		|ГДЕ
		|	УдалитьБанки.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	УдалитьБанки.Код,
		|	УдалитьБанки.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоИсточникам.БИК КАК БИК,
		|	ПоИсточникам.Наименование КАК Наименование,
		|	ПоИсточникам.ТипИсточника КАК ТипИсточника,
		|	СУММА(ПоИсточникам.Количество) КАК Количество
		|ПОМЕСТИТЬ ПоИсточникам
		|ИЗ
		|	ВТПоИсточникам КАК ПоИсточникам
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоИсточникам.БИК,
		|	ПоИсточникам.Наименование,
		|	ПоИсточникам.ТипИсточника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоИсточникам.БИК КАК БИК,
		|	ПоИсточникам.Наименование КАК Наименование,
		|	ПоИсточникам.ТипИсточника КАК ТипИсточника,
		|	ПоИсточникам.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА КлассификаторБанков.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВКлассификаторе
		|ПОМЕСТИТЬ ВТИспользуемыеБанки
		|ИЗ
		|	ПоИсточникам КАК ПоИсточникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|		ПО ПоИсточникам.БИК = КлассификаторБанков.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИспользуемыеБанки.БИК КАК БИК,
		|	МАКСИМУМ(ИспользуемыеБанки.Наименование) КАК Наименование
		|ИЗ
		|	ВТИспользуемыеБанки КАК ИспользуемыеБанки
		|ГДЕ
		|	НЕ ИспользуемыеБанки.ЕстьВКлассификаторе
		|
		|СГРУППИРОВАТЬ ПО
		|	ИспользуемыеБанки.БИК";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Попытка
					КлассификаторБанковОбъект = Справочники.КлассификаторБанков.СоздатьЭлемент();
					КлассификаторБанковОбъект.Код = Выборка.БИК;
					КлассификаторБанковОбъект.Наименование = Выборка.Наименование;
					КлассификаторБанковОбъект.ДеятельностьПрекращена = Истина;
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(КлассификаторБанковОбъект);
				Исключение
					// Если не удалось обработать какой-либо документ, повторяем попытку снова.
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать банк ""%1"" по причине:
					|%2'"), 
					Выборка.Наименование,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецПопытки;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГражданствоФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдалитьГражданствоФизЛиц.Период, МЕСЯЦ) КАК Месяц,
	|	УдалитьГражданствоФизЛиц.ФизЛицо,
	|	МАКСИМУМ(УдалитьГражданствоФизЛиц.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	РегистрСведений.УдалитьГражданствоФизЛиц КАК УдалитьГражданствоФизЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗастрахованныхФизическихЛиц КАК СтатусыЗастрахованныхФизическихЛиц
	|		ПО УдалитьГражданствоФизЛиц.ФизЛицо = СтатусыЗастрахованныхФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	СтатусыЗастрахованныхФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьГражданствоФизЛиц.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьГражданствоФизЛиц.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьГражданствоФизЛиц.Период,
	|	УдалитьГражданствоФизЛиц.ФизЛицо,
	|	УдалитьГражданствоФизЛиц.Страна,
	|	УдалитьГражданствоФизЛиц.ВидЗастрахованногоЛица
	|ИЗ
	|	РегистрСведений.УдалитьГражданствоФизЛиц КАК УдалитьГражданствоФизЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц КАК ГражданствоФизическихЛиц
	|		ПО УдалитьГражданствоФизЛиц.ФизЛицо = ГражданствоФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	ГражданствоФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьГражданствоФизЛиц.Период,
	|	УдалитьГражданствоФизЛиц.ФизЛицо,
	|	УдалитьГражданствоФизЛиц.ВидЗастрахованногоЛица
	|ИЗ
	|	ВТМаксимальныеПериоды КАК МаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьГражданствоФизЛиц КАК УдалитьГражданствоФизЛиц
	|		ПО МаксимальныеПериоды.Период = УдалитьГражданствоФизЛиц.Период
	|			И МаксимальныеПериоды.ФизЛицо = УдалитьГражданствоФизЛиц.ФизЛицо";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаГражданство = Результаты[1];
	
	Если Не РезультатЗапросаГражданство.Пустой() Тогда
		Выборка = РезультатЗапросаГражданство.Выбрать();
		
		НаборЗаписейГражданство = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();		
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписейГражданство.Добавить();
			Запись.Период = Выборка.Период;
			Запись.ФизическоеЛицо = Выборка.ФизЛицо;
			Запись.Страна = КонвертироватьДанные(Выборка.Страна, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;	
		НаборЗаписейГражданство.ОбменДанными.Загрузка = Истина;
		НаборЗаписейГражданство.Записать();
	КонецЕсли;	
	
	РезультатЗапросаСтатусы = Результаты[2];
	
	Если Не РезультатЗапросаСтатусы.Пустой() Тогда
		Выборка = РезультатЗапросаСтатусы.Выбрать();
	
		НаборЗаписейСтатусы = РегистрыСведений.СтатусыЗастрахованныхФизическихЛиц.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл					
			Запись = НаборЗаписейСтатусы.Добавить();
			Запись.Период = НачалоМесяца(Выборка.Период);
			Запись.ФизическоеЛицо = Выборка.ФизЛицо;
			
			ВидЗастрахованногоЛица = ?(ЗначениеЗаполнено(Выборка.ВидЗастрахованногоЛица), Выборка.ВидЗастрахованногоЛица, Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ);

			Запись.ВидЗастрахованногоЛица = ВидЗастрахованногоЛица;

		КонецЦикла;	
		НаборЗаписейСтатусы.ОбменДанными.Загрузка = Истина;
		НаборЗаписейСтатусы.Записать();
	КонецЕсли;	

	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Стандартные вычеты

Процедура ДанныеОСтандартныхВычетахНДФЛКонвертация(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.Период КАК Период,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.Физлицо КАК ФизическоеЛицо,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.КоличествоДетей КАК КоличествоДетейНачало,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.ПериодЗавершения,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.КоличествоДетейЗавершения,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НДФЛСтандартныеВычетыНаДетейОсновной.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	               |					И НДФЛСтандартныеВычетыНаДетейВспомогательный.Период ЕСТЬ NULL 
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ЕстьПериодЗавершенияДействия,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.КодВычета КАК КодВычета
	               |ИЗ
	               |	РегистрСведений.УдалитьНДФЛСтандартныеВычетыНаДетей КАК НДФЛСтандартныеВычетыНаДетейОсновной
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНДФЛСтандартныеВычетыНаДетей КАК НДФЛСтандартныеВычетыНаДетейВспомогательный
	               |		ПО НДФЛСтандартныеВычетыНаДетейОсновной.Физлицо = НДФЛСтандартныеВычетыНаДетейВспомогательный.Физлицо
	               |			И НДФЛСтандартныеВычетыНаДетейОсновной.КодВычета = НДФЛСтандартныеВычетыНаДетейВспомогательный.КодВычета
	               |			И (НДФЛСтандартныеВычетыНаДетейОсновной.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1))
	               |			И (НДФЛСтандартныеВычетыНаДетейВспомогательный.Период > НДФЛСтандартныеВычетыНаДетейОсновной.Период)
	               |			И (НДФЛСтандартныеВычетыНаДетейВспомогательный.Период <= ДОБАВИТЬКДАТЕ(НДФЛСтандартныеВычетыНаДетейОсновной.ПериодЗавершения, ДЕНЬ, 1))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.Период,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.Физлицо,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.КоличествоДетей,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.ПериодЗавершения,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.КоличествоДетейЗавершения,
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.КодВычета
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НДФЛСтандартныеВычетыНаДетейОсновной.Физлицо,
	               |	КодВычета,
	               |	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	ТаблицаВычетовНаДетей = Новый ТаблицаЗначений;
	ТаблицаВычетовНаДетей.Колонки.Добавить("ФизическоеЛицо",  Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВычетовНаДетей.Колонки.Добавить("ДатаНачалаДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаВычетовНаДетей.Колонки.Добавить("КодВычета",  Новый ОписаниеТипов("СправочникСсылка.УдалитьВычетыНДФЛ"));
	ТаблицаВычетовНаДетей.Колонки.Добавить("СрокДействияВычета", Новый ОписаниеТипов("Дата"));
	
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ФизЛицо = Выборка.ФизическоеЛицо;
		
		Пока Выборка.СледующийПоЗначениюПоля("КодВычета") Цикл
			НезакрытыеВычеты = Новый Массив;
			ПредыдущееКоличествоДетей = 0;
			КодВычета = Выборка.КодВычета;
			ДатаЗавершенияПредыдущейЗаписи = '00010101';
			Пока Выборка.Следующий() Цикл
				//Если Выборка.Период = ДатаЗавершенияПредыдущейЗаписи + 86400 Тогда 
					Если ПредыдущееКоличествоДетей < Выборка.КоличествоДетейНачало Тогда
						ДобавитьВычетыНаДетейВТаблицу(ФизЛицо, КодВычета, Выборка.Период, Выборка.КоличествоДетейНачало - ПредыдущееКоличествоДетей, ТаблицаВычетовНаДетей, НезакрытыеВычеты);					
					ИначеЕсли ПредыдущееКоличествоДетей > Выборка.КоличествоДетейНачало Тогда
						ЗакрытьСрокДействияВычета(КодВычета, ПредыдущееКоличествоДетей - Выборка.КоличествоДетейНачало, Выборка.Период - 86400, НезакрытыеВычеты);	
					КонецЕсли;					
					Если Выборка.ЕстьПериодЗавершенияДействия Тогда
						Если Выборка.КоличествоДетейНачало < Выборка.КоличествоДетейЗавершения Тогда
							ДобавитьВычетыНаДетейВТаблицу(ФизЛицо, КодВычета, Выборка.ПериодЗавершения, Выборка.КоличествоДетейЗавершения - Выборка.КоличествоДетейНачало, ТаблицаВычетовНаДетей, НезакрытыеВычеты);					
						ИначеЕсли Выборка.КоличествоДетейНачало > Выборка.КоличествоДетейЗавершения Тогда
							ЗакрытьСрокДействияВычета(КодВычета, Выборка.КоличествоДетейНачало - Выборка.КоличествоДетейЗавершения, Выборка.ПериодЗавершения, НезакрытыеВычеты);	
						КонецЕсли;	
						ПредыдущееКоличествоДетей = Выборка.КоличествоДетейЗавершения;
					Иначе
						ПредыдущееКоличествоДетей = Выборка.КоличествоДетейНачало;
					КонецЕсли;	
					
					
			КонецЦикла;				
			
			Для Каждого Вычет Из ТаблицаВычетовНаДетей Цикл
				Если Не ЗначениеЗаполнено(Вычет.СрокДействияВычета) Тогда
					Вычет.СрокДействияВычета = КонецГода(ТекущаяДата());
				КонецЕсли;	
			КонецЦикла;	

		КонецЦикла;	
		
	КонецЦикла;	
	
		
	Запрос.УстановитьПараметр("ВычетыНаДетей", ТаблицаВычетовНаДетей);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТКонверитированныеФизЛица
	               |ИЗ
	               |	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПрименениеСтандартныхВычетовПоНДФЛ.ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛ КАК ПрименениеСтандартныхВычетовПоНДФЛ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВычетыНаДетей.ФизическоеЛицо,
	               |	ВычетыНаДетей.ДатаНачалаДействия,
	               |	ВычетыНаДетей.КодВычета,
	               |	ВычетыНаДетей.СрокДействияВычета
	               |ПОМЕСТИТЬ ВТВычетыНаДетей
	               |ИЗ
	               |	&ВычетыНаДетей КАК ВычетыНаДетей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВычетыНаДетей.ДатаНачалаДействия КАК Дата,
	               |	ВычетыНаДетей.ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТПериоды
	               |ИЗ
	               |	ВТВычетыНаДетей КАК ВычетыНаДетей
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдалитьНДФЛСтандартныеВычетыФизлиц.Период,
	               |	УдалитьНДФЛСтандартныеВычетыФизлиц.Физлицо
	               |ИЗ
	               |	РегистрСведений.УдалитьНДФЛСтандартныеВычетыФизлиц КАК УдалитьНДФЛСтандартныеВычетыФизлиц
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдалитьНДФЛПрименениеВычетов.Период,
	               |	УдалитьНДФЛПрименениеВычетов.Физлицо
	               |ИЗ
	               |	РегистрСведений.УдалитьНДФЛПрименениеВычетов КАК УдалитьНДФЛПрименениеВычетов
	               |ГДЕ
	               |	УдалитьНДФЛПрименениеВычетов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьНДФЛСтандартныеВычетыФизлиц.Физлицо,
	               |	МАКСИМУМ(УдалитьНДФЛСтандартныеВычетыФизлиц.Период) КАК Период,
	               |	Периоды.Дата
	               |ПОМЕСТИТЬ ВТПериодыЛичныхВычетов
	               |ИЗ
	               |	РегистрСведений.УдалитьНДФЛСтандартныеВычетыФизлиц КАК УдалитьНДФЛСтандартныеВычетыФизлиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	               |		ПО УдалитьНДФЛСтандартныеВычетыФизлиц.Физлицо = Периоды.ФизическоеЛицо
	               |			И УдалитьНДФЛСтандартныеВычетыФизлиц.Период <= Периоды.Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УдалитьНДФЛСтандартныеВычетыФизлиц.Физлицо,
	               |	Периоды.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВычетыНаДетей.ФизическоеЛицо,
	               |	МАКСИМУМ(ВычетыНаДетей.ДатаНачалаДействия) КАК Период,
	               |	ВычетыНаДетей.КодВычета,
	               |	Периоды.Дата
	               |ПОМЕСТИТЬ ВТПериодыВычетовНаДетей
	               |ИЗ
	               |	ВТВычетыНаДетей КАК ВычетыНаДетей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	               |		ПО ВычетыНаДетей.ФизическоеЛицо = Периоды.ФизическоеЛицо
	               |			И ВычетыНаДетей.ДатаНачалаДействия <= Периоды.Дата
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВычетыНаДетей.ФизическоеЛицо,
	               |	ВычетыНаДетей.КодВычета,
	               |	Периоды.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВычетыНаДетей.ФизическоеЛицо,
	               |	Периоды.Дата КАК Период,
	               |	ВычетыНаДетей.КодВычета,
	               |	ВЫБОР
	               |		КОГДА ВычетыНаДетей.СрокДействияВычета = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ВычетыНаДетей.ДатаНачалаДействия, МЕСЯЦ), МЕСЯЦ, 11)
	               |		ИНАЧЕ ВычетыНаДетей.СрокДействияВычета
	               |	КОНЕЦ КАК СрокДействияВычета,
	               |	""ДЕТИ"" КАК ТипВычета
	               |ПОМЕСТИТЬ ВТСтандартныеВычетыФизЛиц
	               |ИЗ
	               |	ВТВычетыНаДетей КАК ВычетыНаДетей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыВычетовНаДетей КАК Периоды
	               |		ПО ВычетыНаДетей.ДатаНачалаДействия = Периоды.Период
	               |			И ВычетыНаДетей.СрокДействияВычета >= Периоды.Дата
	               |			И ВычетыНаДетей.ФизическоеЛицо = Периоды.ФизическоеЛицо
	               |			И ВычетыНаДетей.КодВычета = Периоды.КодВычета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыНаДетей КАК ВычетыНаДетейВспом
	               |		ПО ВычетыНаДетей.ФизическоеЛицо = ВычетыНаДетейВспом.ФизическоеЛицо
	               |			И ВычетыНаДетей.КодВычета = ВычетыНаДетейВспом.КодВычета
	               |			И (ДОБАВИТЬКДАТЕ(ВычетыНаДетейВспом.СрокДействияВычета, ДЕНЬ, 1) = Периоды.Дата)
	               |ГДЕ
	               |	ВычетыНаДетейВспом.ФизическоеЛицо ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НДФЛСтандартныеВычетыФизлиц.Физлицо,
	               |	ПериодыЛичныхВычетов.Дата,
	               |	НДФЛСтандартныеВычетыФизлиц.КодВычетаЛичный,
	               |	NULL,
	               |	""ЛИЧНЫЙ""
	               |ИЗ
	               |	РегистрСведений.УдалитьНДФЛСтандартныеВычетыФизлиц КАК НДФЛСтандартныеВычетыФизлиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыЛичныхВычетов КАК ПериодыЛичныхВычетов
	               |		ПО НДФЛСтандартныеВычетыФизлиц.Физлицо = ПериодыЛичныхВычетов.Физлицо
	               |			И НДФЛСтандартныеВычетыФизлиц.Период = ПериодыЛичныхВычетов.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НДФЛПрименениеВычетов.Физлицо,
	               |	МАКСИМУМ(НДФЛПрименениеВычетов.Период) КАК Период,
	               |	Периоды.Дата
	               |ПОМЕСТИТЬ ВТПрименениеВычетовПериоды
	               |ИЗ
	               |	РегистрСведений.УдалитьНДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	               |		ПО НДФЛПрименениеВычетов.Период <= Периоды.Дата
	               |			И НДФЛПрименениеВычетов.Физлицо = Периоды.ФизическоеЛицо
	               |			И (НДФЛПрименениеВычетов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДФЛПрименениеВычетов.Физлицо,
	               |	Периоды.Дата
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтандартныеВычетыФизЛиц.ФизическоеЛицо,
	               |	СтандартныеВычетыФизЛиц.Период,
	               |	СтандартныеВычетыФизЛиц.КодВычета,
	               |	СтандартныеВычетыФизЛиц.СрокДействияВычета,
	               |	СтандартныеВычетыФизЛиц.ТипВычета
	               |ПОМЕСТИТЬ ВТСтандартныеВычетыДляКонвертации
	               |ИЗ
	               |	ВТСтандартныеВычетыФизЛиц КАК СтандартныеВычетыФизЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКонверитированныеФизЛица КАК КонверитированныеФизЛица
	               |		ПО СтандартныеВычетыФизЛиц.ФизическоеЛицо = КонверитированныеФизЛица.ФизическоеЛицо
	               |ГДЕ
	               |	КонверитированныеФизЛица.ФизическоеЛицо ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НДФЛПрименениеВычетов.Физлицо,
	               |	НДФЛПрименениеВычетов.Период,
	               |	МАКСИМУМ(НДФЛПрименениеВычетовПредыдущииЗаписи.Период) КАК ПредыдущаяЗаписьПериод
	               |ПОМЕСТИТЬ ВТПрекращениеВычетовПериоды
	               |ИЗ
	               |	РегистрСведений.УдалитьНДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНДФЛПрименениеВычетов КАК НДФЛПрименениеВычетовПредыдущииЗаписи
	               |		ПО НДФЛПрименениеВычетов.Физлицо = НДФЛПрименениеВычетовПредыдущииЗаписи.Физлицо
	               |			И НДФЛПрименениеВычетов.Период > НДФЛПрименениеВычетовПредыдущииЗаписи.Период
	               |			И (НДФЛПрименениеВычетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |			И (НДФЛПрименениеВычетовПредыдущииЗаписи.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |ГДЕ
	               |	НДФЛПрименениеВычетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДФЛПрименениеВычетов.Физлицо,
	               |	НДФЛПрименениеВычетов.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтандартныеВычетыФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СтандартныеВычетыФизЛиц.Период КАК Период,
	               |	СтандартныеВычетыФизЛиц.КодВычета КАК КодВычета,
	               |	СтандартныеВычетыФизЛиц.ТипВычета КАК ТипВычета,
	               |	НДФЛПрименениеВычетов.Организация КАК Организация,
	               |	СтандартныеВычетыФизЛиц.СрокДействияВычета
	               |ИЗ
	               |	ВТСтандартныеВычетыДляКонвертации КАК СтандартныеВычетыФизЛиц
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеВычетовПериоды КАК ПрименениеВычетовПериоды
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНДФЛПрименениеВычетов КАК НДФЛПрименениеВычетов
	               |			ПО ПрименениеВычетовПериоды.Физлицо = НДФЛПрименениеВычетов.Физлицо
	               |				И ПрименениеВычетовПериоды.Период = НДФЛПрименениеВычетов.Период
	               |		ПО СтандартныеВычетыФизЛиц.ФизическоеЛицо = ПрименениеВычетовПериоды.Физлицо
	               |			И СтандартныеВычетыФизЛиц.Период = ПрименениеВычетовПериоды.Дата
	               |ГДЕ
	               |	СтандартныеВычетыФизЛиц.КодВычета <> ЗНАЧЕНИЕ(Справочник.УдалитьВычетыНДФЛ.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПрекращениеВычетовПериоды.Физлицо,
	               |	ПрекращениеВычетовПериоды.Период,
	               |	NULL,
	               |	NULL,
	               |	УдалитьНДФЛПрименениеВычетов.Организация,
	               |	NULL
	               |ИЗ
	               |	ВТПрекращениеВычетовПериоды КАК ПрекращениеВычетовПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНДФЛПрименениеВычетов КАК УдалитьНДФЛПрименениеВычетов
	               |		ПО ПрекращениеВычетовПериоды.ПредыдущаяЗаписьПериод = УдалитьНДФЛПрименениеВычетов.Период
	               |			И ПрекращениеВычетовПериоды.Физлицо = УдалитьНДФЛПрименениеВычетов.Физлицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКонверитированныеФизЛица КАК КонверитированныеФизЛица
	               |		ПО ПрекращениеВычетовПериоды.Физлицо = КонверитированныеФизЛица.ФизическоеЛицо
	               |ГДЕ
	               |	КонверитированныеФизЛица.ФизическоеЛицо ЕСТЬ NULL 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ФизическоеЛицо,
	               |	Организация,
	               |	Период,
	               |	ТипВычета,
	               |	КодВычета";
				   
				   
	Результаты = Запрос.ВыполнитьПакет();
	КоличестовРезультатов = Результаты.Количество();
	
	ДанныеОВычетах = Результаты[КоличестовРезультатов - 1].Выбрать();
	
	Пока ДанныеОВычетах.СледующийПоЗначениюПоля("ФизическоеЛицо") цикл
		НачатьТранзакцию();
		Пока ДанныеОВычетах.СледующийПоЗначениюПоля("Организация") Цикл
			Пока ДанныеОВычетах.СледующийПоЗначениюПоля("Период") Цикл
				Если ЗначениеЗаполнено(ДанныеОВычетах.КодВычета) Тогда
				
					ЗаявлениеНаВычеты = Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ.СоздатьДокумент();
					ЗаявлениеНаВычеты.Дата = ТекущаяДата();
					ЗаявлениеНаВычеты.Месяц = ДанныеОВычетах.Период;
					ЗаявлениеНаВычеты.Организация = ДанныеОВычетах.Организация;
					ЗаявлениеНаВычеты.Сотрудник = КонвертироватьДанные(ДанныеОВычетах.ФизическоеЛицо, СоответствиеКонвертированныхОбъектов);
					ЗаявлениеНаВычеты.УстановитьНовыйНомер();
					
					Пока ДанныеОВычетах.Следующий() Цикл
						Если ДанныеОВычетах.ТипВычета = "ДЕТИ" Тогда
							ВычетНаДетей = ЗаявлениеНаВычеты.ВычетыНаДетей.Добавить();
							ВычетНаДетей.КодВычета = КонвертироватьДанные(ДанныеОВычетах.КодВычета, СоответствиеКонвертированныхОбъектов);
							ВычетНаДетей.ДействуетДо = ДанныеОВычетах.СрокДействияВычета; 
							ЗаявлениеНаВычеты.ИзменитьВычетыНаДетей = Истина;
						Иначе
							ЗаявлениеНаВычеты.КодВычетаЛичный = КонвертироватьДанные(ДанныеОВычетах.КодВычета, СоответствиеКонвертированныхОбъектов);
							ЗаявлениеНаВычеты.ИзменитьЛичныйВычет = Истина;
						КонецЕсли;
					КонецЦикла;	
					
					Режим = ?(ЗначениеЗаполнено(ЗаявлениеНаВычеты.Организация), РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					
					ЗаявлениеНаВычеты.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", Истина);
					
					ЗаявлениеНаВычеты.Записать(Режим);	
				Иначе
					ЗаявлениеНаПрекращениеВычетов = Документы.ПрекращениеСтандартныхВычетовНДФЛ.СоздатьДокумент();
					ЗаявлениеНаПрекращениеВычетов.Дата = ТекущаяДата();
					ЗаявлениеНаПрекращениеВычетов.Месяц = ДанныеОВычетах.Период;
					ЗаявлениеНаПрекращениеВычетов.Организация = ДанныеОВычетах.Организация;
					ЗаявлениеНаПрекращениеВычетов.Сотрудник = КонвертироватьДанные(ДанныеОВычетах.ФизическоеЛицо, СоответствиеКонвертированныхОбъектов);					ЗаявлениеНаПрекращениеВычетов.УстановитьНовыйНомер();
					
					Режим = ?(ЗначениеЗаполнено(ЗаявлениеНаПрекращениеВычетов.Организация), РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
					
					ЗаявлениеНаПрекращениеВычетов.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", Истина);
					
					ЗаявлениеНаПрекращениеВычетов.Записать(Режим);	
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
			   
КонецПроцедуры

Процедура ДобавитьВычетыНаДетейВтаблицу(ФизЛицо, КодВычета, ДатаНачалаДействия, КоличествоВычетов, ТаблицаВычетовНаДетей, НезакрытыеВычеты)
	Для Сч = 1 По КоличествоВычетов Цикл
		Вычет = ТаблицаВычетовНаДетей.Добавить();
		Вычет.ФизическоеЛицо = ФизЛицо;
		Вычет.ДатаНачалаДействия = ДатаНачалаДействия;
		Вычет.КодВычета = КодВычета;
		
		НезакрытыеВычеты.Добавить(Вычет);
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗакрытьСрокДействияВычета(КодВычета, КоличествоЗакрываемыхВычетов, ПериодЗавершения, НезакрытыеВычеты)
	Для Сч =1 По КоличествоЗакрываемыхВычетов Цикл
		Если НезакрытыеВычеты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Вычет = НезакрытыеВычеты[0];
		Вычет.СрокДействияВычета = ПериодЗавершения;
		
		НезакрытыеВычеты.Удалить(0);
		
	КонецЦикла;	
КонецПроцедуры

// УчетнаяПолитикаОрганизаций
//
Процедура УчетнаяПолитикаОрганизацийВзносовКонвертация()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьУчетнаяПолитикаОрганизаций.Период КАК Период,
	               |	УдалитьУчетнаяПолитикаОрганизаций.УдалитьВидТарифаСтраховыхВзносов КАК УдалитьВидТарифаСтраховыхВзносов,
	               |	УдалитьУчетнаяПолитикаОрганизаций.Организация КАК Организация,
	               |	УдалитьУчетнаяПолитикаОрганизаций.УдалитьОсобенностиИсчисленияНДФЛ КАК УдалитьОсобенностиИсчисленияНДФЛ,
	               |	УдалитьУчетнаяПолитикаОрганизаций.ИгнорироватьДниС30МартаПо3Апреля КАК ИгнорироватьДниС30МартаПо3Апреля,
	               |	УдалитьУчетнаяПолитикаОрганизаций.ИгнорироватьДниС4По30Апреля КАК ИгнорироватьДниС4По30Апреля,
	               |	УдалитьУчетнаяПолитикаОрганизаций.ИгнорироватьДниС6По8Мая КАК ИгнорироватьДниС6По8Мая
	               |ИЗ
	               |	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций КАК УдалитьУчетнаяПолитикаОрганизаций
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	Выборка = Запрос.Выполнить().Выбрать();				   
	
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		Запись = НаборЗаписей.Добавить();
		Запись.Период = Выборка.Период;
		Запись.ГоловнаяОрганизация = Выборка.Организация;
		Запись.ВидТарифа = КонвертироватьДанные(Выборка.УдалитьВидТарифаСтраховыхВзносов);
		
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.Организация);
		Запись = НаборЗаписей.Добавить();
		Запись.ГоловнаяОрганизация = Выборка.Организация;
		Запись.ОсобенностиИсчисленияНДФЛ = КонвертироватьДанные(Выборка.УдалитьОсобенностиИсчисленияНДФЛ);
		Запись.ИгнорироватьДниС30МартаПо3Апреля = Выборка.ИгнорироватьДниС30МартаПо3Апреля;
		Запись.ИгнорироватьДниС4По30Апреля = Выборка.ИгнорироватьДниС4По30Апреля;
		Запись.ИгнорироватьДниС6По8Мая = Выборка.ИгнорироватьДниС6По8Мая;

		НаборЗаписей.Записать();
	КонецЦикла;	
КонецПроцедуры	

Процедура СведенияОбИнвалидностиФизическихЛицКонвертация()
	НаборЗаписей = РегистрыСведений.СведенияОбИнвалидностиФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Записать();
КонецПроцедуры	

Процедура СтатусыФизическихЛицКонвертация()
	НаборЗаписей = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.Статус = ПолучитьСоответствиеЭлементаПеречисленияСтатусыНДФЛ(ЗаписьНабора.УдалитьУдалитьСтатус);
	КонецЦикла;
	
	НаборЗаписей.Записать();
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ

Функция КонвертироватьДанныеДокумента(ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	ДокументОбъект = ДокументСоответсвующийКонвертируемому(ДанныеДокумента);
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьБизнесЛогикуПриЗаписи", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа", Истина);
	Если ТипЗнч(ДокументОбъект.Ссылка) <> ТипЗнч(ДанныеДокумента.Ссылка) Тогда 
		ЗаполнитьРеквизитыНовогоДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;
	
	НачатьТранзакцию();
	ПередЗаписьюДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ВставитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, ДокументОбъект.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	ПослеЗаписиДокумента(ДанныеДокумента, ДокументОбъект);
	
	ЗафиксироватьТранзакцию();
	
	Возврат ДокументОбъект.Ссылка;
КонецФункции

Функция ДокументСоответсвующийКонвертируемому(ДанныеДокумента)
	Если  ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица") Тогда
		Возврат Документы.ПачкаДокументовАДВ_1.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда
		Если ДанныеДокумента.ТипФормДокументов = "СЗВ-6-1" Тогда
			Возврат Документы.ПачкаДокументовСЗВ_6_1.СоздатьДокумент();
		Иначе
			Возврат Документы.РеестрСЗВ_6_2.СоздатьДокумент();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства") Тогда
		Если ДанныеДокумента.ВидАДВ = Перечисления.ВидыАДВ.АДВ2 Тогда
			Возврат Документы.ПачкаДокументовАДВ_2.СоздатьДокумент();
		Иначе
			Возврат Документы.ПачкаДокументовАДВ_3.СоздатьДокумент();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаДСВвПФР") Тогда
		Возврат Документы.ПачкаДокументовДСВ_1.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР") Тогда
		Если ДанныеДокумента.СпециальныйДокумент2010года Тогда
			Возврат Документы.ВедомостьУплатыАДВ_11.СоздатьДокумент();	
		Иначе
			Возврат Документы.ОписьПачекСЗВ_6.СоздатьДокумент();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63") Тогда
		Возврат Документы.ПачкаДокументовСЗВ_6_3.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1") Тогда
		Возврат Документы.ПачкаДокументовСПВ_1.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛСотруднику") Тогда
		Возврат Документы.СправкаНДФЛ.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган") Тогда
		Возврат Документы.СправкиНДФЛДляПередачиВНалоговыйОрган.СоздатьДокумент();	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНачислениеЗарплатыРаботникамОрганизаций")
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьРасчетЕСН") Тогда
		Возврат Документы.НачислениеЗарплаты.СоздатьДокумент();	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		Если ДанныеДокумента.МестоВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			Возврат Документы.ВедомостьНаВыплатуЗарплатыВБанк.СоздатьДокумент();
		Иначе
			Возврат Документы.ВедомостьНаВыплатуЗарплатыВКассу.СоздатьДокумент();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") Тогда
		Возврат Документы.ПриемНаРаботу.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") Тогда
		Возврат Документы.КадровыйПеревод.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда
		Возврат Документы.КадровыйПеревод.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка)  = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") Тогда
		Возврат Документы.Увольнение.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛиЕСНДоходыИНалоги")
		И ДанныеДокумента.ОперацияПоВзносам Тогда	
		
		Возврат Документы.ОперацияУчетаПоСтраховымВзносам.СоздатьДокумент();
		
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛиЕСНДоходыИНалоги")
		И ДанныеДокумента.ОперацияНДФЛ Тогда	
		
		Возврат Документы.ОперацияНалоговогоУчетаПоНДФЛ.СоздатьДокумент();
		
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛПерерасчет") Тогда 
		Возврат Документы.ПерерасчетНДФЛ.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет") Тогда
		Возврат Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПачкаДокументовСЗВ_6_4") Тогда
		Возврат Документы.ПачкаДокументовСЗВ_6_4.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьАвансовыйПлатежИностранцаПоНДФЛ") Тогда
		Возврат Документы.АвансовыйПлатежИностранцаПоНДФЛ.СоздатьДокумент();	
	Иначе
		Возврат ДанныеДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;	
		
КонецФункции	

Процедура ПередЗаписьюДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица") Тогда
		ПередЗаписьюАДВ1(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства") Тогда
		ПередЗаписьюАДВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда 
		ПередЗаписьюСЗВ6(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда 
		ПередЗаписьюСЗВ_6_4(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаДСВвПФР") Тогда 
		ПередЗаписьюДСВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР") Тогда 
		ПередЗаписьюПередачаСЗВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63") Тогда 
		ПередЗаписьюСЗВ_6_3(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1") Тогда 
		ПередЗаписьюСПВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛСотруднику") Тогда 
		ПередЗаписьюСправкаНДФЛПоСотруднику(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган") Тогда 
		ПередЗаписьюСправкаНДФЛВНалоговыйОрган(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);	
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.НачислениеЗарплаты") Тогда
		ПередЗаписьюДокументаНачислениеЗарплаты(ДокументОбъект);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") 
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") 
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") 
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда 
		
		ПередЗаписьюКадровогоДокумента(ДокументОбъект, ДанныеДокумента);
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПослеЗаписиДокумента(КонвертируемыеДанные, КонвертированныйОбъект)
	Если ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ВедомостьУплатыАДВ_11") 
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ОписьПачекСЗВ_6")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовАДВ_1")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовАДВ_2")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовАДВ_3")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовДСВ_1")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_К")	
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_1")
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.РеестрДСВ_3")
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") 
		Или ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		
		ЗаписатьПрисоединенныеФайлыПерсУчета(КонвертируемыеДанные.Ссылка, КонвертированныйОбъект);
	ИначеЕсли ТипЗнч(КонвертированныйОбъект.Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		ЗаписатьПрисоединенныеФайлы2НДФЛ(КонвертируемыеДанные.Ссылка, КонвертированныйОбъект.Ссылка);	
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаполнитьРеквизитыНовогоДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	СоотвествиеРеквизитов = СоответствиеРеквизитовКонвертируемогоДокумента(ДанныеДокумента);
	
	Для Каждого Реквизит Из СоотвествиеРеквизитов Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда 
			ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект[Реквизит.Ключ], ДанныеДокумента[Реквизит.Значение.ИмяТЧ], Реквизит.Значение, СоответствиеКонвертированныхОбъектов);
		Иначе
			ДокументОбъект[Реквизит.Ключ] = КонвертироватьДанные(ДанныеДокумента[Реквизит.Значение], СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТЧПриемник, ДанныеИсточник, СоответствиеРеквизитовТЧ, СоответствиеКонвертированныхОбъектов)
	Если ТипЗнч(ДанныеИсточник) = Тип("РезультатЗапроса") Тогда
		ТЧИсточник = ДанныеИсточник.Выгрузить();
	Иначе 
		ТЧИсточник = ДанныеИсточник;
	КонецЕсли;
	
	ТЧПриемник.Очистить();
	Для Каждого СтрокаТЧИсточник Из ТЧИсточник Цикл
		СтрокаТЧПриемник = ТЧПриемник.Добавить();
		Для Каждого РеквизитТЧ Из СоответствиеРеквизитовТЧ Цикл
			Если РеквизитТЧ.Ключ <> "ИмяТЧ" Тогда
				СтрокаТЧПриемник[РеквизитТЧ.Ключ] = КонвертироватьДанные(СтрокаТЧИсточник[РеквизитТЧ.Значение], СоответствиеКонвертированныхОбъектов);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеРеквизитовКонвертируемогоДокумента(ДанныеДокумента)
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовАДВ1();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовСЗВ6(ДанныеДокумента);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовАДВ(ДанныеДокумента);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаДСВвПФР") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовДСВ(ДанныеДокумента);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПередачаСЗВ4вПФР") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовАДВ6(ДанныеДокумента);	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОНачисленномЗаработкеСЗВ63") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовСЗВ_6_3(ДанныеДокумента);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1") Тогда 
		Возврат ПолучитьСоответствиеРеквизитовСПВ(ДанныеДокумента);	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛСотруднику") Тогда 
		Возврат ПолучитьСоответствиеРеквизитов2_НДФЛПоСотруднику(ДанныеДокумента);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьСправкаПоНДФЛВНалоговыйОрган") Тогда 
		Возврат ПолучитьСоответствиеРеквизитов2_НДФЛВНалоговыйОрган(ДанныеДокумента);
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНачислениеЗарплатыРаботникамОрганизаций") 
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьРасчетЕСН") Тогда 
		Возврат СоответствиеРеквизитовДокументаНачислениеЗарплаты();	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
		Возврат СоответствиеРеквизитовДокументаВедомость(ДанныеДокумента.МестоВыплаты)	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") Тогда
		Возврат СоответствиеРеквизитовДокументаПриемНаработу();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") Тогда
		Возврат СоответствиеРеквизитовДокументаКадровоеПеремещение();	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда
		Возврат СоответствиеРеквизитовДокументавВводПлановыхНачислений();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") Тогда
		Возврат СоответствиеРеквизитовДокументаУвольнение();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛиЕСНДоходыИНалоги") 
		И ДанныеДокумента.ОперацияПоВзносам Тогда
		
		Возврат СоответствиеРеквизитовОперацииПоВзносам();
		
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛиЕСНДоходыИНалоги") 
		И ДанныеДокумента.ОперацияНДФЛ Тогда
		
		Возврат СоответствиеРеквизитовОперацииНДФЛ();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛПерерасчет") Тогда
		Возврат СоответствиеРеквизитовДокументаПерерасчетНДФЛ();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет") Тогда
		Возврат СоответствиеРеквизитовДокументаУведомлениеОПравеНаИмущественныйВычетДляНДФЛ();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПачкаДокументовСЗВ_6_4") Тогда
		Возврат ПолучитьСоответствиеРеквизитовСЗВ_6_4();	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьАвансовыйПлатежИностранцаПоНДФЛ") Тогда
		Возврат ПолучитьСоответствиеРеквизитовАвансовыйПлатежИностранцаПоНДФЛ();
	Иначе	
		Возврат Новый Структура;
	КонецЕсли;	
КонецФункции	

Функция ВписатьДанныеВыборкиПоДокументуВСтруткуры(Выборка, Колонки)
	Структура = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;	
	
	Возврат Структура;	
КонецФункции

Функция ТаблицаЗначенийПоДаннымВыборки(Выборка, СсылкаНаВладельцаТЧ, Колонки)
	Таблица = Новый ТаблицаЗначений;
		
	Для Каждого Колонка Из Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;	
	
	Выборка.Сбросить();
	Если Выборка.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаВладельцаТЧ)) Тогда
		Выборка.СледующийПоЗначениюПоля("Ссылка");
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	

	Возврат Таблица;
	
КонецФункции

Функция СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	СоответствиеКонвертируемыхДокументовНовым = Новый Соответствие;
	
	Для Каждого Документ Из СписокДокументов Цикл
		СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Документ, СоответствиеКонвертированныхОбъектов);
		
		Если ЗначениеЗаполнено(СсылкаНаКонвертированныйОбъект) Тогда
			СоответствиеКонвертируемыхДокументовНовым.Вставить(Документ, СсылкаНаКонвертированныйОбъект);
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат СоответствиеКонвертируемыхДокументовНовым;
	
КонецФункции	

Функция СоответствиеКонвертированнымДокументовПоДатеНомеру(СписокДокументов, ИмяИсточникаДанных, ИмяПриемникаДанных, СоответствиеКонвертированныхОбъектов = Неопределено)
	СоответствиеКонвертируемыхДокументовНовым = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Ссылка КАК КонвертируемыйДокумент,
	|	ПриемникДанных.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	#ИсточникДанных КАК ИсточникДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПриемникДанных КАК ПриемникДанных
	|		ПО ИсточникДанных.Дата = ПриемникДанных.Дата
	|			И (ИсточникДанных.Ссылка В (&СписокДокументов))
	|			И (ПОДСТРОКА(ИсточникДанных.Номер, 1, 100) = ПОДСТРОКА(ПриемникДанных.Номер, 1, 100))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ИмяИсточникаДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПриемникДанных", ИмяПриемникаДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		СоответствиеКонвертируемыхДокументовНовым.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);			
	КонецЦикла;	
	
	Если СоответствиеКонвертированныхОбъектов <> Неопределено Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	
	
	Возврат СоответствиеКонвертируемыхДокументовНовым;
	
КонецФункции	


/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ ПЕРС УЧЕТА

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// АДВ-1

Функция ПолучитьСписокКонвертируемыхДокументовАДВ1(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьАнкетаЗастрахованногоЛица.Ссылка
	|ИЗ
	|	Документ.УдалитьАнкетаЗастрахованногоЛица КАК УдалитьАнкетаЗастрахованногоЛица
	|ГДЕ
	|	УдалитьАнкетаЗастрахованногоЛица.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УдалитьАнкетаЗастрахованногоЛица.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовАДВ1()Экспорт
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Организация",	"Организация");
	СоответствиеРеквизитов.Вставить("НомерПачки",	"НомерПачки");
	СоответствиеРеквизитов.Вставить("Ответственный",	"Ответственный");
	СоответствиеРеквизитов.Вставить("Комментарий",	"Комментарий");
	СоответствиеРеквизитов.Вставить("Исполнитель",	"Исполнитель");
	
	СоответствиеРеквизитовТЧСотрудники = Новый Структура;
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяТЧ", "РаботникиОрганизации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Сотрудник",	"ФизЛицо");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресРегистрации",	"АдресРегистрации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресФактический",	"АдресФактический");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресРегистрацииПредставление",	"АдресРегистрации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресФактическийПредставление",	"АдресФактический");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Телефоны",	"Телефоны");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Фамилия",	"Фамилия");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Имя",	"Имя");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Отчество",	"Отчество");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Пол",	"Пол");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаРождения",	"ДатаРождения");
	СоответствиеРеквизитовТЧСотрудники.Вставить("МестоРождения",	"МестоРождения");
	СоответствиеРеквизитовТЧСотрудники.Вставить("МестоРожденияПредставление",	"МестоРождения");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Гражданство",	"Гражданство");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ВидДокумента",	"ВидДокумента");
	СоответствиеРеквизитовТЧСотрудники.Вставить("СерияДокумента",	"СерияДокумента");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НомерДокумента",	"НомерДокумента");
	СоответствиеРеквизитовТЧСотрудники.Вставить("КемВыдан",	"КемВыдан");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаВыдачи",	"ДатаВыдачи");

	
	СоответствиеРеквизитов.Вставить("Сотрудники",	СоответствиеРеквизитовТЧСотрудники);

	Возврат СоответствиеРеквизитов;
КонецФункции

Функция ПередЗаписьюАДВ1(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)Экспорт 
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;	
	УстановитьИмяФайлаДокументаПФР(ДокументОбъект);
	
	Для Каждого СтрокаСотрудник Из ДокументОбъект.Сотрудники Цикл
		СформироватьПередставлениеАдреса(СтрокаСотрудник.АдресРегистрации, СтрокаСотрудник.АдресРегистрацииПредставление);
		СформироватьПередставлениеАдреса(СтрокаСотрудник.АдресФактический, СтрокаСотрудник.АдресФактическийПредставление);
	КонецЦикла;
КонецФункции	

Процедура УстановитьИмяФайлаДокументаПФР(ДокументОбъект)
				
	СтруктураДанныхДокумента = Новый Структура;
	СтруктураДанныхДокумента.Вставить("Номер", ДокументОбъект.Номер);
	СтруктураДанныхДокумента.Вставить("НомерПачки", ДокументОбъект.НомерПачки);
 	СтруктураДанныхДокумента.Вставить("РегистрационныйНомерПФР",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, "РегистрационныйНомерПФР"));
	
	РеквизитОтчетныйПериод  = ДокументОбъект.Метаданные().Реквизиты.Найти("ОтчетныйПериод"); 
	
	Если РеквизитОтчетныйПериод <> Неопределено И ТипЗнч(ДокументОбъект.ОтчетныйПериод) = Тип("Дата") Тогда
		ГодДокумента = Год(ДокументОбъект.ОтчетныйПериод);
	Иначе 	
    	ГодДокумента = Год(ДокументОбъект.Дата);	
	КонецЕсли;
	
	ДокументОбъект.ИмяФайлаДляПФР =  ПерсонифицированныйУчет.ПолучитьИмяФайлаПФ(ДокументОбъект.Ссылка, ГодДокумента, СтруктураДанныхДокумента);		
КонецПроцедуры	

Функция КонвертироватьДокументыАДВ1(СписокДокументов, СоответствиеКонвертированныхОбъектов = Неопределено)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументовПоДатеНомеру(НеконвертированныеДокументы, 
																										"Документ.УдалитьАнкетаЗастрахованногоЛица",
																										"Документ.ПачкаДокументовАДВ_1",
																										СоответствиеКонвертированныхОбъектов);
																										
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

																											
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьАнкетаЗастрахованногоЛица.Ссылка КАК Ссылка,
	               |	УдалитьАнкетаЗастрахованногоЛица.ВерсияДанных,
	               |	УдалитьАнкетаЗастрахованногоЛица.ПометкаУдаления,
	               |	УдалитьАнкетаЗастрахованногоЛица.Номер,
	               |	УдалитьАнкетаЗастрахованногоЛица.Дата,
	               |	УдалитьАнкетаЗастрахованногоЛица.Проведен,
	               |	УдалитьАнкетаЗастрахованногоЛица.Организация,
	               |	УдалитьАнкетаЗастрахованногоЛица.Ответственный,
	               |	УдалитьАнкетаЗастрахованногоЛица.Комментарий,
	               |	УдалитьАнкетаЗастрахованногоЛица.Исполнитель,
	               |	УдалитьАнкетаЗастрахованногоЛица.КраткийСоставДокумента,
	               |	УдалитьАнкетаЗастрахованногоЛица.ФорматФайла,
	               |	УдалитьАнкетаЗастрахованногоЛица.НомерПачки
	               |ИЗ
	               |	Документ.УдалитьАнкетаЗастрахованногоЛица КАК УдалитьАнкетаЗастрахованногоЛица
	               |ГДЕ
	               |	УдалитьАнкетаЗастрахованногоЛица.Ссылка В(&СписокДокументов)
	               |	И УдалитьАнкетаЗастрахованногоЛица.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.НомерСтроки,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.АдресРегистрации,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.АдресФактический,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Телефоны,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Фамилия,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Имя,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Отчество,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Пол,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.ДатаРождения,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.МестоРождения,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Гражданство,
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Дата
	               |ПОМЕСТИТЬ ВТРаботникиОрганизаций
	               |ИЗ
	               |	Документ.УдалитьАнкетаЗастрахованногоЛица.РаботникиОрганизации КАК УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации
	               |ГДЕ
	               |	УдалитьАнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка В(&СписокДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизаций.Дата КАК Период,
	               |	РаботникиОрганизаций.ФизЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТСотрудникиДокументов
	               |ИЗ
	               |	ВТРаботникиОрганизаций КАК РаботникиОрганизаций";
				   
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
    СформироватьВТСдокументамиФизЛиц(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаботникиОрганизаций.Ссылка КАК Ссылка,
	               |	РаботникиОрганизаций.НомерСтроки КАК НомерСтроки,
	               |	РаботникиОрганизаций.ФизЛицо,
	               |	РаботникиОрганизаций.АдресРегистрации,
	               |	РаботникиОрганизаций.АдресФактический,
	               |	РаботникиОрганизаций.Телефоны,
	               |	РаботникиОрганизаций.Фамилия,
	               |	РаботникиОрганизаций.Имя,
	               |	РаботникиОрганизаций.Отчество,
	               |	РаботникиОрганизаций.Пол,
	               |	РаботникиОрганизаций.ДатаРождения,
	               |	РаботникиОрганизаций.МестоРождения,
	               |	РаботникиОрганизаций.Гражданство,
	               |	РаботникиОрганизаций.Дата,
	               |	КадровыеДанныеФизЛиц.ДокументВид КАК ВидДокумента,
	               |	КадровыеДанныеФизЛиц.ДокументСерия КАК СерияДокумента,
	               |	КадровыеДанныеФизЛиц.ДокументНомер КАК НомерДокумента,
	               |	КадровыеДанныеФизЛиц.ДокументКемВыдан КАК КемВыдан,
	               |	КадровыеДанныеФизЛиц.ДокументДатаВыдачи КАК ДатаВыдачи
	               |ИЗ
	               |	ВТРаботникиОрганизаций КАК РаботникиОрганизаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц
	               |		ПО РаботникиОрганизаций.ФизЛицо = КадровыеДанныеФизЛиц.ФизическоеЛицо
	               |			И РаботникиОрганизаций.Дата = КадровыеДанныеФизЛиц.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
				   
	РезультатЗапросаПоТЧ = Запрос.Выполнить();
	
	ВыборкаПоТЧ = РезультатЗапросаПоТЧ.Выбрать();
	
	ТаблицаСоответствияДокументов = Новый ТаблицаЗначений;
	ТаблицаСоответствияДокументов.Колонки.Добавить("СтарыйДокумент", Новый ОписаниеТипов("ДокументСсылка.УдалитьАнкетаЗастрахованногоЛица"));
	ТаблицаСоответствияДокументов.Колонки.Добавить("НовыйДокумент", Новый ОписаниеТипов("ДокументСсылка.ПачкаДокументовАДВ_1"));

	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("РаботникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧ, ВыборкаПоДокументам.Ссылка, РезультатЗапросаПоТЧ.Колонки));
		
		Для Каждого СтрокаСотрудник Из СтруктураДанныхДокумента.РаботникиОрганизации Цикл
			СтрокаСотрудник.АдресРегистрации = АдресВФорматеБСП(СтрокаСотрудник.АдресРегистрации);
			СтрокаСотрудник.АдресФактический = АдресВФорматеБСП(СтрокаСотрудник.АдресФактический);
		КонецЦикла;	
		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Процедура ЗаписатьПрисоединенныеФайлыПерсУчета(КонвертируемыйДокумент, КонвертированныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", КонвертируемыйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АрхивДанныхРегламентированнойОтчетности.Данные,
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументИсточникДанных КАК ДанныеДокумента
	|		ПО АрхивДанныхРегламентированнойОтчетности.Объект = ДанныеДокумента.Ссылка
	|		И ДанныеДокумента.Ссылка = &Ссылка";
					   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументИсточникДанных", КонвертируемыйДокумент.Метаданные().ПолноеИмя());			   
				   
	Выборка = Запрос.Выполнить().Выбрать();				   
	
	Если Выборка.Следующий() Тогда    
		ЗарплатаКадры.ЗаписатьФайлВАрхив(КонвертированныйДокумент.Ссылка, КонвертированныйДокумент.ИмяФайлаДляПФР, Выборка.Данные);		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СформироватьВТСдокументамиФизЛиц(МенеджерВременныхТаблиц)
	МассивНеобходимыхДанных = Новый Массив;
	МассивНеобходимыхДанных.Добавить("ДокументВид");
	МассивНеобходимыхДанных.Добавить("ДокументСерия");
	МассивНеобходимыхДанных.Добавить("ДокументНомер");
	МассивНеобходимыхДанных.Добавить("ДокументДатаВыдачи");
	МассивНеобходимыхДанных.Добавить("ДокументКемВыдан");

	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, "ВТСотрудникиДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, МассивНеобходимыхДанных);
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////////////////
// АДВ-2,3

Функция ПолучитьСписокКонвертируемыхДокументовАДВ(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка
	|ИЗ
	|	Документ.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства КАК УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства
	|ГДЕ
	|	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция КонвертироватьДокументыАДВ(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка КАК КонвертируемыйДокумент,
	|	ПачкаДокументовАДВ_2.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства КАК УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовАДВ_2 КАК ПачкаДокументовАДВ_2
	|		ПО УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Дата = ПачкаДокументовАДВ_2.Дата
	|			И ПОДСТРОКА(УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Номер, 1, 100) = ПОДСТРОКА(ПачкаДокументовАДВ_2.Номер, 1, 100)
	|			И (УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка В (&СписокДокументов))
	|			И (УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.ВидАДВ = ЗНАЧЕНИЕ(Перечисление.ВидыАДВ.АДВ2))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка,
	|	ПачкаДокументовАДВ_3.Ссылка
	|ИЗ
	|	Документ.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства КАК УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовАДВ_3 КАК ПачкаДокументовАДВ_3
	|		ПО УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Дата = ПачкаДокументовАДВ_3.Дата
	|			И ПОДСТРОКА(УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Номер, 1, 100) = ПОДСТРОКА(ПачкаДокументовАДВ_3.Номер, 1, 100)
	|			И (УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка В (&СписокДокументов))
	|			И (УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.ВидАДВ = ЗНАЧЕНИЕ(Перечисление.ВидыАДВ.АДВ3))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка КАК Ссылка,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.ВерсияДанных,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.ПометкаУдаления,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Номер,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Дата,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Проведен,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Организация,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.ВидАДВ,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Комментарий,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ответственный,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.КраткийСоставДокумента,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.ФорматФайла,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.НомерПачки
	               |ИЗ
	               |	Документ.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства КАК УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства
	               |ГДЕ
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.НомерСтроки,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ФизЛицо,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ДатаПолученияСвидетельства,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.СтраховойНомерПФРВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ФамилияВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ИмяВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ОтчествоВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ПолВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ДатаРожденияВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.МестоРожденияВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ГражданствоВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресРегистрацииВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресФактическийВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ТелефоныВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Фамилия,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Имя,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Отчество,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Пол,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ДатаРождения,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.МестоРождения,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Гражданство,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресРегистрации,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресФактический,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Телефоны,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ОтметкаОПредставленииСведений,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ПризнакОтменыОтчества,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ПризнакОтменыМестаРождения,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка.Дата
	               |ПОМЕСТИТЬ ВТРаботникиОрганизаций
	               |ИЗ
	               |	Документ.УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.РаботникиОрганизации КАК УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации
	               |ГДЕ
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка В(&СписокДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизаций.Дата КАК Период,
	               |	РаботникиОрганизаций.ФизЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТСотрудникиДокументов
	               |ИЗ
	               |	ВТРаботникиОрганизаций КАК РаботникиОрганизаций";
				   
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
    СформироватьВТСдокументамиФизЛиц(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.НомерСтроки,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ФизЛицо,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ДатаПолученияСвидетельства,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.СтраховойНомерПФРВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ФамилияВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ИмяВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ОтчествоВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ПолВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ДатаРожденияВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.МестоРожденияВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ГражданствоВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресРегистрацииВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресФактическийВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ТелефоныВСвидетельстве,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Фамилия,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Имя,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Отчество,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Пол,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ДатаРождения,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.МестоРождения,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Гражданство,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресРегистрации,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.АдресФактический,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Телефоны,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ОтметкаОПредставленииСведений,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ПризнакОтменыОтчества,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ПризнакОтменыМестаРождения,
	               |	КадровыеДанныеФизЛиц.ДокументВид КАК ВидДокумента,
	               |	КадровыеДанныеФизЛиц.ДокументСерия КАК СерияДокумента,
	               |	КадровыеДанныеФизЛиц.ДокументНомер КАК НомерДокумента,
	               |	КадровыеДанныеФизЛиц.ДокументКемВыдан КАК КемВыдан,
	               |	КадровыеДанныеФизЛиц.ДокументДатаВыдачи КАК ДатаВыдачи 
	               |ИЗ
	               |	ВТРаботникиОрганизаций КАК УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц
	               |		ПО УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ФизЛицо = КадровыеДанныеФизЛиц.ФизическоеЛицо
	               |			И УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Дата = КадровыеДанныеФизЛиц.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка,
	               |	УдалитьЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.НомерСтроки";
				   
	РезультатЗапросаПоТЧ = Запрос.Выполнить();
	
	ВыборкаПоТЧ = РезультатЗапросаПоТЧ.Выбрать();
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("РаботникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧ, ВыборкаПоДокументам.Ссылка, РезультатЗапросаПоТЧ.Колонки));
		
		Для Каждого СтрокаСотрудник Из СтруктураДанныхДокумента.РаботникиОрганизации Цикл
			СтрокаСотрудник.АдресРегистрации = АдресВФорматеБСП(СтрокаСотрудник.АдресРегистрации);
			СтрокаСотрудник.АдресФактический = АдресВФорматеБСП(СтрокаСотрудник.АдресФактический);
			СтрокаСотрудник.АдресРегистрацииВСвидетельстве = АдресВФорматеБСП(СтрокаСотрудник.АдресРегистрацииВСвидетельстве);
			СтрокаСотрудник.АдресФактическийВСвидетельстве = АдресВФорматеБСП(СтрокаСотрудник.АдресФактическийВСвидетельстве);
		КонецЦикла;	

		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));
		
	КонецЦикла;
	
	Возврат Результат
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовАДВ(ДанныеДокумента)Экспорт
	СоответствиеРеквизитов = Новый Структура;
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("НомерПачки", "НомерПачки");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	
	СоответствиеРеквизитовТЧСотрудники = Новый Структура;
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяТЧ", "РаботникиОрганизации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Сотрудник", "ФизЛицо");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаПолученияСвидетельства", "ДатаПолученияСвидетельства");
	СоответствиеРеквизитовТЧСотрудники.Вставить("СтраховойНомерПФРВСвидетельстве", "СтраховойНомерПФРВСвидетельстве");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ФамилияВСвидетельстве", "ФамилияВСвидетельстве");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяВСвидетельстве", "ИмяВСвидетельстве");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ОтчествоВСвидетельстве", "ОтчествоВСвидетельстве");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Фамилия", "Фамилия");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Имя", "Имя");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Отчество", "Отчество");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Пол", "Пол");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаРождения", "ДатаРождения");
	СоответствиеРеквизитовТЧСотрудники.Вставить("МестоРождения", "МестоРождения");
	СоответствиеРеквизитовТЧСотрудники.Вставить("МестоРожденияПредставление",	"МестоРождения");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Гражданство", "Гражданство");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресРегистрации", "АдресРегистрации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресФактический", "АдресФактический");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресРегистрацииПредставление", "АдресРегистрации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресФактическийПредставление", "АдресФактический");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Телефоны", "Телефоны");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ПризнакОтменыОтчества", "ПризнакОтменыОтчества");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ПризнакОтменыМестаРождения", "ПризнакОтменыМестаРождения");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ВидДокумента", "ВидДокумента");
	СоответствиеРеквизитовТЧСотрудники.Вставить("СерияДокумента", "СерияДокумента");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НомерДокумента", "СерияДокумента");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаВыдачи", "СерияДокумента");
	СоответствиеРеквизитовТЧСотрудники.Вставить("КемВыдан", "СерияДокумента");
	
	Если ДанныеДокумента.ВидАДВ = Перечисления.ВидыАДВ.АДВ3 Тогда
		СоответствиеРеквизитовТЧСотрудники.Вставить("ПолВСвидетельстве", "ПолВСвидетельстве");
		СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаРожденияВСвидетельстве", "ДатаРожденияВСвидетельстве");
		СоответствиеРеквизитовТЧСотрудники.Вставить("МестоРожденияВСвидетельстве", "МестоРожденияВСвидетельстве");
		СоответствиеРеквизитовТЧСотрудники.Вставить("МестоРожденияВСвидетельствеПредставление",	"МестоРожденияВСвидетельстве");
		СоответствиеРеквизитовТЧСотрудники.Вставить("ОтметкаОПредставленииСведений", "ОтметкаОПредставленииСведений");
	КонецЕсли;
	
	СоответствиеРеквизитов.Вставить("Сотрудники", СоответствиеРеквизитовТЧСотрудники);
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции	

Функция ПередЗаписьюАДВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)Экспорт
			
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;
	УстановитьИмяФайлаДокументаПФР(ДокументОбъект);
	
		
	Для Каждого СтрокаСотрудник Из ДокументОбъект.Сотрудники Цикл
		СформироватьПередставлениеАдреса(СтрокаСотрудник.АдресРегистрации, СтрокаСотрудник.АдресРегистрацииПредставление);
		СформироватьПередставлениеАдреса(СтрокаСотрудник.АдресФактический, СтрокаСотрудник.АдресФактическийПредставление);
	КонецЦикла;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////
// ДСВ-1

Функция ПолучитьСписокКонвертируемыхДокументовДСВ(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПередачаДСВвПФР.Ссылка
	|ИЗ
	|	Документ.УдалитьПередачаДСВвПФР КАК УдалитьПередачаДСВвПФР
	|ГДЕ
	|	УдалитьПередачаДСВвПФР.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УдалитьПередачаДСВвПФР.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция КонвертироватьДокументыДСВ(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументовПоДатеНомеру(НеконвертированныеДокументы, 
																							"Документ.УдалитьПередачаДСВвПФР",
																							"Документ.ПачкаДокументовДСВ_1",
																							СоответствиеКонвертированныхОбъектов);
																										
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьПередачаДСВвПФР.Ссылка КАК Ссылка,
	               |	УдалитьПередачаДСВвПФР.ВерсияДанных,
	               |	УдалитьПередачаДСВвПФР.ПометкаУдаления,
	               |	УдалитьПередачаДСВвПФР.Номер,
	               |	УдалитьПередачаДСВвПФР.Дата,
	               |	УдалитьПередачаДСВвПФР.Проведен,
	               |	УдалитьПередачаДСВвПФР.Организация,
	               |	УдалитьПередачаДСВвПФР.Ответственный,
	               |	УдалитьПередачаДСВвПФР.Комментарий,
	               |	УдалитьПередачаДСВвПФР.КраткийСоставДокумента,
	               |	УдалитьПередачаДСВвПФР.НаименованиеПФР,
	               |	УдалитьПередачаДСВвПФР.ФорматФайла,
	               |	УдалитьПередачаДСВвПФР.НомерПачки
	               |ИЗ
	               |	Документ.УдалитьПередачаДСВвПФР КАК УдалитьПередачаДСВвПФР
	               |ГДЕ
	               |	УдалитьПередачаДСВвПФР.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.Ссылка КАК Ссылка,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.ФизЛицо,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.Фамилия,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.Имя,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.Отчество,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.СтраховойНомерПФР,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.АдресДляИнформирования,
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.ДатаЗаполнения
	               |ИЗ
	               |	Документ.УдалитьПередачаДСВвПФР.РаботникиОрганизации КАК УдалитьПередачаДСВвПФРРаботникиОрганизации
	               |ГДЕ
	               |	УдалитьПередачаДСВвПФРРаботникиОрганизации.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
				  			   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
				   
	ВыборкаПоТЧ =  Результаты[1].Выбрать();
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("РаботникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧ, ВыборкаПоДокументам.Ссылка, Результаты[1].Колонки));
		
		Для Каждого СтрокаСотрудник Из СтруктураДанныхДокумента.РаботникиОрганизации Цикл
			СтрокаСотрудник.АдресДляИнформирования = АдресВФорматеБСП(СтрокаСотрудник.АдресДляИнформирования);
		КонецЦикла;	
					
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовДСВ(ДанныеДокумента)Экспорт 
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");	
	СоответствиеРеквизитов.Вставить("НомерПачки", "НомерПачки");	
	СоответствиеРеквизитов.Вставить("НаименованиеПФР", "НаименованиеПФР");	
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");	
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");	
	
	СоответствиеРеквизитовТЧСотрудники = Новый Структура;
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяТЧ", "РаботникиОрганизации");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("Сотрудник", "ФизЛицо");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Фамилия", "Фамилия");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("Имя", "Имя");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("Отчество", "Отчество");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресДляИнформирования", "АдресДляИнформирования");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаЗаполнения", "ДатаЗаполнения");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформирования"); 
	
	СоответствиеРеквизитов.Вставить("Сотрудники", СоответствиеРеквизитовТЧСотрудники);
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции	

Функция ПередЗаписьюДСВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)Экспорт
			
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;
	УстановитьИмяФайлаДокументаПФР(ДокументОбъект);
	
		
	Для Каждого СтрокаСотрудник Из ДокументОбъект.Сотрудники Цикл
		СформироватьПередставлениеАдреса(СтрокаСотрудник.АдресДляИнформирования, СтрокаСотрудник.АдресДляИнформированияПредставление);
	КонецЦикла;

КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// АДВ-6

Функция ПолучитьСписокКонвертируемыхДокументовАДВ_6(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПередачаСЗВ4вПФР.Ссылка
	|ИЗ
	|	Документ.УдалитьПередачаСЗВ4вПФР КАК УдалитьПередачаСЗВ4вПФР
	|ГДЕ
	|	(УдалитьПередачаСЗВ4вПФР.ОтчетныйПериод МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ УдалитьПередачаСЗВ4вПФР.Год >= ГОД(&ДатаНачала))
	|	И УдалитьПередачаСЗВ4вПФР.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция КонвертироватьДокументыАДВ6(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПередачаСЗВ4вПФР.Ссылка КАК КонвертируемыйДокумент,
	|	ОписьПачекСЗВ_6.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьПередачаСЗВ4вПФР КАК УдалитьПередачаСЗВ4вПФР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОписьПачекСЗВ_6 КАК ОписьПачекСЗВ_6
	|		ПО УдалитьПередачаСЗВ4вПФР.Дата = ОписьПачекСЗВ_6.Дата
	|			И ПОДСТРОКА(УдалитьПередачаСЗВ4вПФР.Номер, 1, 100) = ПОДСТРОКА(ОписьПачекСЗВ_6.Номер, 1, 100)
	|			И (УдалитьПередачаСЗВ4вПФР.Ссылка В (&СписокДокументов))
	|			И (НЕ УдалитьПередачаСЗВ4вПФР.СпециальныйДокумент2010года)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьПередачаСЗВ4вПФР.Ссылка,
	|	ВедомостьУплатыАДВ_11.Ссылка
	|ИЗ
	|	Документ.УдалитьПередачаСЗВ4вПФР КАК УдалитьПередачаСЗВ4вПФР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьУплатыАДВ_11 КАК ВедомостьУплатыАДВ_11
	|		ПО УдалитьПередачаСЗВ4вПФР.Дата = ВедомостьУплатыАДВ_11.Дата
	|			И ПОДСТРОКА(УдалитьПередачаСЗВ4вПФР.Номер, 1, 100) = ПОДСТРОКА(ВедомостьУплатыАДВ_11.Номер, 1, 100)
	|			И (УдалитьПередачаСЗВ4вПФР.Ссылка В (&СписокДокументов))
	|			И (УдалитьПередачаСЗВ4вПФР.СпециальныйДокумент2010года)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьПередачаСЗВ4вПФР.Ссылка КАК Ссылка,
	               |	УдалитьПередачаСЗВ4вПФР.ВерсияДанных,
	               |	УдалитьПередачаСЗВ4вПФР.ПометкаУдаления,
	               |	УдалитьПередачаСЗВ4вПФР.Номер,
	               |	УдалитьПередачаСЗВ4вПФР.Дата,
	               |	УдалитьПередачаСЗВ4вПФР.Проведен,
	               |	УдалитьПередачаСЗВ4вПФР.Организация,
	               |	УдалитьПередачаСЗВ4вПФР.Год,
	               |	УдалитьПередачаСЗВ4вПФР.ДатаДействия,
	               |	УдалитьПередачаСЗВ4вПФР.ТипСведений,
	               |	УдалитьПередачаСЗВ4вПФР.Комментарий,
	               |	УдалитьПередачаСЗВ4вПФР.Ответственный,
	               |	УдалитьПередачаСЗВ4вПФР.КраткийСоставДокумента,
	               |	УдалитьПередачаСЗВ4вПФР.ФорматФайла,
	               |	УдалитьПередачаСЗВ4вПФР.УдалитьНачисленоЗаТекущийГодСтраховаяЧасть,
	               |	УдалитьПередачаСЗВ4вПФР.УдалитьНачисленоЗаТекущийГодНакопительнаяЧасть,
	               |	УдалитьПередачаСЗВ4вПФР.УдалитьУплаченоЗаТекущийГодСтраховаяЧасть,
	               |	УдалитьПередачаСЗВ4вПФР.УдалитьУплаченоЗаТекущийГодНакопительнаяЧасть,
	               |	УдалитьПередачаСЗВ4вПФР.Руководитель,
	               |	УдалитьПередачаСЗВ4вПФР.ДолжностьРуководителя,
	               |	УдалитьПередачаСЗВ4вПФР.ОтчетныйПериод,
	               |	УдалитьПередачаСЗВ4вПФР.НомерПачки,
	               |	УдалитьПередачаСЗВ4вПФР.СпециальныйДокумент2010года,
	               |	УдалитьПередачаСЗВ4вПФР.УдалитьНачисленоЗаТекущийГодДополнительныйТариф,
	               |	УдалитьПередачаСЗВ4вПФР.УдалитьУплаченоЗаТекущийГодДополнительныйТариф,
	               |	УдалитьПередачаСЗВ4вПФР.ПринятоВПФР
	               |ИЗ
	               |	Документ.УдалитьПередачаСЗВ4вПФР КАК УдалитьПередачаСЗВ4вПФР
	               |ГДЕ
	               |	УдалитьПередачаСЗВ4вПФР.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.Ссылка КАК Ссылка,
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.НомерСтроки КАК НомерСтроки,
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка КАК ДокументПачка
	               |ИЗ
	               |	Документ.УдалитьПередачаСЗВ4вПФР.ПачкиДокументов КАК УдалитьПередачаСЗВ4вПФРПачкиДокументов
	               |ГДЕ
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.Ссылка В(&СписокДокументов)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.Ссылка,
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.НомерСтроки,
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка
	               |ИЗ
	               |	Документ.УдалитьПередачаСЗВ4вПФР.ПачкиДокументов2013 КАК УдалитьПередачаСЗВ4вПФРПачкиДокументов
	               |ГДЕ
	               |	УдалитьПередачаСЗВ4вПФРПачкиДокументов.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.Ссылка КАК Ссылка,
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.НомерСтроки КАК НомерСтроки,
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.Год,
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.ТипСтроки,
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.СтраховаяЧасть,
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.НакопительнаяЧасть,
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.ДополнительныйТариф
	               |ИЗ
	               |	Документ.УдалитьПередачаСЗВ4вПФР.СведенияОЗадолженности КАК УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности
	               |ГДЕ
	               |	УдалитьПередачаСЗВ4вПФРСведенияОЗадолженности.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
				  			   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
				   
	ВыборкаПоТЧПачки =  Результаты[1].Выбрать();
	
	ВыборкаПоТЧЗадолженность =  Результаты[2].Выбрать();
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		Если НЕ ВыборкаПоДокументам.СпециальныйДокумент2010года Тогда
			СтруктураДанныхДокумента.Вставить("ПачкиДокументов", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧПачки, ВыборкаПоДокументам.Ссылка, Результаты[1].Колонки));	
		Иначе	
			СтруктураДанныхДокумента.Вставить("СведенияОЗадолженности", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧЗадолженность, ВыборкаПоДокументам.Ссылка, Результаты[2].Колонки));
		КонецЕсли;	
						
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовАДВ6(ДанныеДокумента)Экспорт 
	СоответствиеРеквизитов = Новый Структура;
	
	Если ДанныеДокумента.СпециальныйДокумент2010года Тогда
		СоответствиеРеквизитов.Вставить("ОтчетныйПериод", "Год");
	Иначе
		СоответствиеРеквизитов.Вставить("ОтчетныйПериод", "ОтчетныйПериод");
	КонецЕсли;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");	
	СоответствиеРеквизитов.Вставить("НомерПачки", "НомерПачки");	
	СоответствиеРеквизитов.Вставить("ДокументПринятВПФР", "ПринятоВПФР");	
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");	
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");	
	СоответствиеРеквизитов.Вставить("Руководитель", "Руководитель");	
	СоответствиеРеквизитов.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");	
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	
	Если ДанныеДокумента.СпециальныйДокумент2010года Тогда
		СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "СведенияОЗадолженности");
		СоответствиеРеквизитовТЧ.Вставить("ТипСтроки", "ТипСтроки");
		СоответствиеРеквизитовТЧ.Вставить("Год", "Год");
		СоответствиеРеквизитовТЧ.Вставить("СтраховаяЧасть", "СтраховаяЧасть");
		СоответствиеРеквизитовТЧ.Вставить("НакопительнаяЧасть", "НакопительнаяЧасть");
		СоответствиеРеквизитовТЧ.Вставить("ДополнительныйТариф", "ДополнительныйТариф");
		
		СоответствиеРеквизитов.Вставить("СведенияОЗадолженности", СоответствиеРеквизитовТЧ);
	Иначе
		СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "ПачкиДокументов");
		СоответствиеРеквизитовТЧ.Вставить("ПачкаДокументов", "ДокументПачка");
	    СоответствиеРеквизитов.Вставить("ПачкиДокументов", СоответствиеРеквизитовТЧ);
	КонецЕсли;

	Возврат СоответствиеРеквизитов;
	
КонецФункции	

Функция ПередЗаписьюПередачаСЗВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
			
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;
	УстановитьИмяФайлаДокументаПФР(ДокументОбъект);
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////
// СЗВ-6-3

Функция ПолучитьСписокКонвертируемыхДокументовСЗВ_6_3(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Ссылка
	|ИЗ
	|	Документ.УдалитьСведенияОНачисленномЗаработкеСЗВ63 КАК УдалитьСведенияОНачисленномЗаработкеСЗВ63
	|ГДЕ
	|	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ОтчетныйПериод МЕЖДУ ГОД(&ДатаНачала) И ГОД(&ДатаОкончания)
	|	И УдалитьСведенияОНачисленномЗаработкеСЗВ63.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция КонвертироватьДокументыСЗВ_6_3(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументовПоДатеНомеру(НеконвертированныеДокументы, 
																							"Документ.УдалитьСведенияОНачисленномЗаработкеСЗВ63",
																							"Документ.ПачкаДокументовСЗВ_6_3",
																							СоответствиеКонвертированныхОбъектов);
																										
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Ссылка КАК Ссылка,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ВерсияДанных,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ПометкаУдаления,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Номер,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Дата,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Проведен,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Организация,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Комментарий,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Ответственный,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.КраткийСоставДокумента,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ПринятоВПФР,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.НомерПачки,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.КатегорияЗастрахованныхЛиц,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ОтчетныйПериод,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ТипСведенийСЗВ,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Руководитель,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ДолжностьРуководителя,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ФорматФайла,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.ТипДоговора
				   |ИЗ
	               |	Документ.УдалитьСведенияОНачисленномЗаработкеСЗВ63 КАК УдалитьСведенияОНачисленномЗаработкеСЗВ63
	               |ГДЕ
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.Ссылка КАК Ссылка,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.ФизЛицо,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.СтраховойНомерПФР,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.Фамилия,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.Имя,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.Отчество
	               |ИЗ
	               |	Документ.УдалитьСведенияОНачисленномЗаработкеСЗВ63.СотрудникиОрганизации КАК УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации
	               |ГДЕ
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СотрудникиОрганизации.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.Ссылка КАК Ссылка,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.ФизЛицо,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.Месяц,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.Заработок,
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.ОблагаетсяВзносами
	               |ИЗ
	               |	Документ.УдалитьСведенияОНачисленномЗаработкеСЗВ63.СведенияОЗаработке КАК УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке
	               |ГДЕ
	               |	УдалитьСведенияОНачисленномЗаработкеСЗВ63СведенияОЗаработке.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
				  			   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
				   
	ВыборкаПоТЧСотрудники =  Результаты[1].Выбрать();
	ВыборкаПоТЧЗаработок =  Результаты[2].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("СотрудникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧСотрудники, ВыборкаПоДокументам.Ссылка, Результаты[1].Колонки));
		СтруктураДанныхДокумента.Вставить("СведенияОЗаработке", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧЗаработок, ВыборкаПоДокументам.Ссылка, Результаты[2].Колонки));
		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));	
	КонецЦикла;                                                                                                                                          
	
	Возврат Результат;	
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовСЗВ_6_3(ДанныеДокумента)Экспорт
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("ОтчетныйПериод",	"ОтчетныйПериод");	
	СоответствиеРеквизитов.Вставить("Организация",	"Организация");	
	СоответствиеРеквизитов.Вставить("КатегорияЗастрахованныхЛиц",	"КатегорияЗастрахованныхЛиц");	
	СоответствиеРеквизитов.Вставить("ТипСведенийСЗВ",	"ТипСведенийСЗВ");	
	СоответствиеРеквизитов.Вставить("ТипДоговора",	"ТипДоговора");	
	СоответствиеРеквизитов.Вставить("НомерПачки",	"НомерПачки");	
	СоответствиеРеквизитов.Вставить("ДокументПринятВПФР",	"ПринятоВПФР");	
	СоответствиеРеквизитов.Вставить("Комментарий",	"Комментарий");	
	СоответствиеРеквизитов.Вставить("Ответственный",	"Ответственный");	
	СоответствиеРеквизитов.Вставить("Руководитель",	"Руководитель");	
	СоответствиеРеквизитов.Вставить("ДолжностьРуководителя",	"ДолжностьРуководителя");
	
	СоответствиеРеквизитовТЧСотрудники = Новый Структура;
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяТЧ", "СотрудникиОрганизации");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("Сотрудник", "ФизЛицо");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("Фамилия",	"Фамилия");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("Имя",	"Имя");	
	СоответствиеРеквизитовТЧСотрудники.Вставить("Отчество",	"Отчество");	
	
	СоответствиеРеквизитов.Вставить("Сотрудники", СоответствиеРеквизитовТЧСотрудники);
	
	СоответствиеРеквизитовТЧЗаработок = Новый Структура;
	СоответствиеРеквизитовТЧЗаработок.Вставить("ИмяТЧ",	"СведенияОЗаработке");	
	СоответствиеРеквизитовТЧЗаработок.Вставить("Сотрудник",	"ФизЛицо");	
	СоответствиеРеквизитовТЧЗаработок.Вставить("Месяц",	"Месяц");	
	СоответствиеРеквизитовТЧЗаработок.Вставить("Заработок",	"Заработок");	
	СоответствиеРеквизитовТЧЗаработок.Вставить("ОблагаетсяВзносами",	"ОблагаетсяВзносами");	
	
	СоответствиеРеквизитов.Вставить("СведенияОЗаработке", СоответствиеРеквизитовТЧЗаработок);
	
	Возврат СоответствиеРеквизитов;

КонецФункции	

Функция ПередЗаписьюСЗВ_6_3(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)Экспорт 
			
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;
	УстановитьИмяФайлаДокументаПФР(ДокументОбъект);
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// СПВ

Функция ПолучитьСписокКонвертируемыхДокументовСПВ(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Ссылка
	|ИЗ
	|	Документ.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1 КАК УдалитьСведенияОВзносахИСтраховомСтажеСПВ1
	|ГДЕ
	|	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ОтчетныйПериод МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовСПВ(ДанныеДокумента)Экспорт
	
	Структура = Новый Структура("ЗаписиОСтаже");
	ЗаполнитьЗначенияСвойств(Структура, ДанныеДокумента);
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("ОтчетныйПериод", "ОтчетныйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("КатегорияЗастрахованныхЛиц", "КатегорияЗастрахованныхЛиц");
	СоответствиеРеквизитов.Вставить("ТипСведенийСЗВ", "ТипСведенийСЗВ");
	СоответствиеРеквизитов.Вставить("НомерПачки", "НомерПачки");
	СоответствиеРеквизитов.Вставить("ДокументПринятВПФР", "ПринятоВПФР");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	СоответствиеРеквизитов.Вставить("Руководитель", "Руководитель");
	СоответствиеРеквизитов.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
		
	СоответствиеРеквизитовТЧСотрудники = Новый Структура;
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяТЧ", "РаботникиОрганизации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Сотрудник", "ФизЛицо");
	СоответствиеРеквизитовТЧСотрудники.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Фамилия", "Фамилия");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Имя", "Имя");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Отчество", "Отчество");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НачисленоСтраховая", "НачисленоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("УплаченоСтраховая", "УплаченоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НачисленоНакопительная", "НачисленоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("УплаченоНакопительная", "УплаченоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДатаСоставления", "ДатаСоставления");

	СоответствиеРеквизитов.Вставить("Сотрудники",	СоответствиеРеквизитовТЧСотрудники);
	
	Структура = Новый Структура("ЗаписиОСтаже");
	ЗаполнитьЗначенияСвойств(Структура, ДанныеДокумента);
	Если ЗначениеЗаполнено(Структура.ЗаписиОСтаже) Тогда 
		СоответствиеРеквизитовТЧЗаписиОСтаже = Новый Структура;
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ИмяТЧ", "ЗаписиОСтаже");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("Сотрудник", "ФизЛицо");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ДатаНачалаПериода", "ДатаНачалаПериода");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ДатаОкончанияПериода", "ДатаОкончанияПериода");
		
	
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("НомерОсновнойЗаписи", "НомерОсновнойЗаписи");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("НомерДополнительнойЗаписи", "НомерДополнительнойЗаписи");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОсобыеУсловияТруда", "ОсобыеУсловияТруда");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("КодПозицииСписка", "КодПозицииСписка");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОснованиеИсчисляемогоСтажа", "ОснованиеИсчисляемогоСтажа");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПервыйПараметрИсчисляемогоСтажа", "ПервыйПараметрИсчисляемогоСтажа");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ВторойПараметрИсчисляемогоСтажа", "ВторойПараметрИсчисляемогоСтажа");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТретийПараметрИсчисляемогоСтажа", "ТретийПараметрИсчисляемогоСтажа");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОснованиеВыслугиЛет", "ОснованиеВыслугиЛет");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПервыйПараметрВыслугиЛет", "ПервыйПараметрВыслугиЛет");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ВторойПараметрВыслугиЛет", "ВторойПараметрВыслугиЛет");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТретийПараметрВыслугиЛет", "ТретийПараметрВыслугиЛет");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТерриториальныеУсловия", "ТерриториальныеУсловия");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПараметрТерриториальныхУсловий", "ПараметрТерриториальныхУсловий");
		
		СоответствиеРеквизитов.Вставить("ЗаписиОСтаже",	СоответствиеРеквизитовТЧЗаписиОСтаже);
	КонецЕсли;	

	Возврат СоответствиеРеквизитов;
КонецФункции

Функция ПередЗаписьюСПВ(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)Экспорт
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;
	УстановитьИмяФайлаДокументаПФР(ДокументОбъект);
КонецФункции	

Функция КонвертироватьДокументыСПВ(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументовПоДатеНомеру(НеконвертированныеДокументы, 
																							"Документ.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1",
																							"Документ.ПачкаДокументовСПВ_1",
																							СоответствиеКонвертированныхОбъектов);
																										
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Ссылка,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ВерсияДанных,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ПометкаУдаления,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Номер,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Дата,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Проведен,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Организация,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Комментарий,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Ответственный,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.КраткийСоставДокумента,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ФорматФайла,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.КатегорияЗастрахованныхЛиц,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ОтчетныйПериод,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ТипСведенийСЗВ,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.НомерПачки,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ПринятоВПФР,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Руководитель,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.ДолжностьРуководителя
	               |ИЗ
	               |	Документ.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1 КАК УдалитьСведенияОВзносахИСтраховомСтажеСПВ1
	               |ГДЕ
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.Ссылка В(&СписокДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Ссылка,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.НомерСтроки,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.ФизЛицо,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.СтраховойНомерПФР,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Фамилия,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Имя,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Отчество,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.НачисленоСтраховая,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.УплаченоСтраховая,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.НачисленоНакопительная,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.УплаченоНакопительная,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Ссылка.Организация,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Ссылка.ОтчетныйПериод,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.Ссылка.ТипСведенийСЗВ,
	               |	УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации.ДатаСоставления
	               |ПОМЕСТИТЬ ВТРаботникиОрганизации
	               |ИЗ
	               |	Документ.УдалитьСведенияОВзносахИСтраховомСтажеСПВ1.РаботникиОрганизации КАК УдалитьСведенияОВзносахИСтраховомСтажеСПВ1РаботникиОрганизации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизации.Ссылка КАК Ссылка,
	               |	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	РаботникиОрганизации.ФизЛицо,
	               |	РаботникиОрганизации.СтраховойНомерПФР,
	               |	РаботникиОрганизации.Фамилия,
	               |	РаботникиОрганизации.Имя,
	               |	РаботникиОрганизации.Отчество,
	               |	РаботникиОрганизации.НачисленоСтраховая,
	               |	РаботникиОрганизации.УплаченоСтраховая,
	               |	РаботникиОрганизации.НачисленоНакопительная,
	               |	РаботникиОрганизации.УплаченоНакопительная,
	               |	РаботникиОрганизации.Организация,
	               |	РаботникиОрганизации.ОтчетныйПериод,
	               |	РаботникиОрганизации.КатегорияЗастрахованныхЛиц,
	               |	РаботникиОрганизации.ТипСведенийСЗВ,
	               |	РаботникиОрганизации.ДатаСоставления
	               |ИЗ
	               |	ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаботникиОрганизации.Организация,
	               |	РаботникиОрганизации.КатегорияЗастрахованныхЛиц,
	               |	РаботникиОрганизации.ФизЛицо КАК Сотрудник,
	               |	РаботникиОрганизации.ОтчетныйПериод КАК ОтчетныйПериод,
	               |	РаботникиОрганизации.Ссылка
	               |ПОМЕСТИТЬ ВТСотрудникиДокументов
	               |ИЗ
	               |	ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |ГДЕ
	               |	(РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Корректирующая)
	               |			ИЛИ РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная))";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТЧРаботникиОрганизации = Результаты[2].Выбрать();
	
	СформироватьВТСДаннымиСтажа(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	               |	СведенияОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	               |	СведенияОСтаже.ДатаНачалаПериода,
	               |	СведенияОСтаже.ДатаОкончанияПериода,
	               |	СведенияОСтаже.ОсобыеУсловияТруда,
	               |	СведенияОСтаже.КодПозицииСписка,
	               |	СведенияОСтаже.ОснованиеИсчисляемогоСтажа,
	               |	СведенияОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ВторойПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ТретийПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ОснованиеВыслугиЛет,
	               |	СведенияОСтаже.ПервыйПараметрВыслугиЛет,
	               |	СведенияОСтаже.ВторойПараметрВыслугиЛет,
	               |	СведенияОСтаже.ТретийПараметрВыслугиЛет,
	               |	СведенияОСтаже.ТерриториальныеУсловия,
				   |	СведенияОСтаже.ПараметрТерриториальныхУсловий,
	               |	РаботникиОрганизации.Ссылка КАК Ссылка,
	               |	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	РаботникиОрганизации.ФизЛицо,
				   |	РаботникиОрганизации.ДатаСоставления
	               |ИЗ
	               |	ВТСведенияОСтаже КАК СведенияОСтаже
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |		ПО СведенияОСтаже.Ссылка = РаботникиОрганизации.Ссылка
	               |			И СведенияОСтаже.Сотрудник = РаботникиОрганизации.ФизЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки,
	               |	НомерОсновнойЗаписи,
	               |	НомерДополнительнойЗаписи";
				   
	РезультатЗаписиОСтаже = Запрос.Выполнить();
	ВыборкаПоЗаписиОСтаже = РезультатЗаписиОСтаже.Выбрать();                                                                       
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("РаботникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧРаботникиОрганизации, ВыборкаПоДокументам.Ссылка, Результаты[2].Колонки));
		
		СтруктураДанныхДокумента.Вставить("ЗаписиОСтаже", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоЗаписиОСтаже, ВыборкаПоДокументам.Ссылка, РезультатЗаписиОСтаже.Колонки));
		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЗВ-6

Функция ПолучитьСписокКонвертируемыхДокументовСЗВ(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка
	|ИЗ
	|	Документ.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.СпециальныйДокумент2010года
	|				ТОГДА УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Год >= ГОД(&ДатаНачала)
	|			ИНАЧЕ ВЫБОР
	|					КОГДА УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|						ТОГДА УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод
	|					ИНАЧЕ УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|				КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		КОНЕЦ
	|	И УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовСЗВ6(ДанныеДокумента)
	
	Структура = Новый Структура("ЗаписиОСтаже");
	ЗаполнитьЗначенияСвойств(Структура, ДанныеДокумента);
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("ОтчетныйПериод", "ОтчетныйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("КатегорияЗастрахованныхЛиц", "КатегорияЗастрахованныхЛиц");
	СоответствиеРеквизитов.Вставить("ТипСведенийСЗВ", "ТипСведенийСЗВ");
	СоответствиеРеквизитов.Вставить("КорректируемыйПериод", "КорректируемыйПериод");
	СоответствиеРеквизитов.Вставить("НомерПачки", "НомерПачки");
	СоответствиеРеквизитов.Вставить("ДокументПринятВПФР", "ПринятоВПФР");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	СоответствиеРеквизитов.Вставить("Руководитель", "Руководитель");
	СоответствиеРеквизитов.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
		
	СоответствиеРеквизитовТЧСотрудники = Новый Структура;
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяТЧ", "РаботникиОрганизации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Сотрудник", "ФизЛицо");
	СоответствиеРеквизитовТЧСотрудники.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Фамилия", "Фамилия");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Имя", "Имя");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Отчество", "Отчество");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НачисленоСтраховая", "НачисленоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("УплаченоСтраховая", "УплаченоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НачисленоНакопительная", "НачисленоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("УплаченоНакопительная", "УплаченоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоначисленоСтраховая", "ДоначисленоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоначисленоНакопительная", "ДоначисленоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоУплаченоНакопительная", "ДоУплаченоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоУплаченоСтраховая", "ДоУплаченоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресДляИнформирования", "АдресДляИнформирования");
	СоответствиеРеквизитовТЧСотрудники.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформирования");

	СоответствиеРеквизитов.Вставить("Сотрудники",	СоответствиеРеквизитовТЧСотрудники);
	
	Структура = Новый Структура("ЗаписиОСтаже");
	ЗаполнитьЗначенияСвойств(Структура, ДанныеДокумента);
	Если ЗначениеЗаполнено(Структура.ЗаписиОСтаже) Тогда 
		СоответствиеРеквизитовТЧЗаписиОСтаже = Новый Структура;
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ИмяТЧ", "ЗаписиОСтаже");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("Сотрудник", "ФизЛицо");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ДатаНачалаПериода", "ДатаНачалаПериода");
		СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ДатаОкончанияПериода", "ДатаОкончанияПериода");
		
		Если ДанныеДокумента.ТипФормДокументов = "СЗВ-6-1" Тогда
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("НомерОсновнойЗаписи", "НомерОсновнойЗаписи");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("НомерДополнительнойЗаписи", "НомерДополнительнойЗаписи");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОсобыеУсловияТруда", "ОсобыеУсловияТруда");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("КодПозицииСписка", "КодПозицииСписка");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОснованиеИсчисляемогоСтажа", "ОснованиеИсчисляемогоСтажа");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПервыйПараметрИсчисляемогоСтажа", "ПервыйПараметрИсчисляемогоСтажа");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ВторойПараметрИсчисляемогоСтажа", "ВторойПараметрИсчисляемогоСтажа");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТретийПараметрИсчисляемогоСтажа", "ТретийПараметрИсчисляемогоСтажа");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОснованиеВыслугиЛет", "ОснованиеВыслугиЛет");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПервыйПараметрВыслугиЛет", "ПервыйПараметрВыслугиЛет");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ВторойПараметрВыслугиЛет", "ВторойПараметрВыслугиЛет");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТретийПараметрВыслугиЛет", "ТретийПараметрВыслугиЛет");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТерриториальныеУсловия", "ТерриториальныеУсловия");
			СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПараметрТерриториальныхУсловий", "ПараметрТерриториальныхУсловий");
		КонецЕсли;	

		СоответствиеРеквизитов.Вставить("ЗаписиОСтаже",	СоответствиеРеквизитовТЧЗаписиОСтаже);
	КонецЕсли;	

	Возврат СоответствиеРеквизитов;
КонецФункции

Функция ПередЗаписьюСЗВ6(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеестрСЗВ_6_2") Тогда
		Для Каждого СтрокаСотрудник Из ДокументОбъект.Сотрудники Цикл
			СтрокиСтажа = ДокументОбъект.ЗаписиОСтаже.НайтиСтроки(Новый Структура("Сотрудник", СтрокаСотрудник.Сотрудник));
			ПериодыСтажаПредставление = "";
			Для Каждого СтрокиСтажа Из СтрокиСтажа Цикл
				ПериодыСтажаПредставление = ПериодыСтажаПредставление + Формат(СтрокиСтажа.ДатаНачалаПериода, "ДФ=dd.MM.yy") + Символы.НПП + "-" + Символы.НПП + Формат(СтрокиСтажа.ДатаОкончанияПериода, "ДФ=dd.MM.yy") + Символы.ПС;	
			КонецЦикла;	
			СтрокаСотрудник.ПериодыСтажаСтрока = ПериодыСтажаПредставление;
		КонецЦикла;
	КонецЕсли;	
	УстановитьИмяФайлаДокументаПФР(ДокументОбъект);
	
	Для Каждого СтрокаСотрудник Из ДокументОбъект.Сотрудники Цикл
		СформироватьПередставлениеАдреса(СтрокаСотрудник.АдресДляИнформирования, СтрокаСотрудник.АдресДляИнформированияПредставление);
	КонецЦикла;
КонецФункции	

Функция КонвертироватьДокументыСЗВ6(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_1.Ссылка КАК КонвертируемыйДокумент,
	|	ОписьПачекСЗВ_6.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК ПачкаДокументовСЗВ_6_1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_1 КАК ОписьПачекСЗВ_6
	|		ПО ПачкаДокументовСЗВ_6_1.Дата = ОписьПачекСЗВ_6.Дата
	|			И (ПачкаДокументовСЗВ_6_1.ТипФормДокументов = ""СЗВ-6-1"")
	|			И (ПачкаДокументовСЗВ_6_1.Ссылка В (&СписокДокументов))
	|			И (ПОДСТРОКА(ПачкаДокументовСЗВ_6_1.Номер, 1, 100) = ПОДСТРОКА(ОписьПачекСЗВ_6.Номер, 1, 100))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка,
	|	РеестрСЗВ_6_2.Ссылка
	|ИЗ
	|	Документ.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСЗВ_6_2 КАК РеестрСЗВ_6_2
	|		ПО УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата = РеестрСЗВ_6_2.Дата
	|			И (ПОДСТРОКА(УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер, 1, 100) = ПОДСТРОКА(РеестрСЗВ_6_2.Номер, 1, 100))
	|			И (УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка В (&СписокДокументов))
	|			И (УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипФормДокументов = ""СЗВ-6-2"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ВерсияДанных,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ПометкаУдаления,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Комментарий,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Ответственный,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.КраткийСоставДокумента,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипФормДокументов,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ФорматФайла,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ТерриториальныеУсловия,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ВидКорректировки,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Год,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.УдалитьТипСведений,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.НомерПачки,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ПринятоВПФР,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Руководитель,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.ДолжностьРуководителя,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.СпециальныйДокумент2010года
	               |ИЗ
	               |	Документ.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4
	               |ГДЕ
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка В(&СписокДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НомерСтроки,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.АдресДляИнформирования,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.СтраховойНомерПФР,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Фамилия,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Имя,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Отчество,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.Организация,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ОтчетныйПериод,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КорректируемыйПериод,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоначисленоСтраховая,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоначисленоНакопительная,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоУплаченоНакопительная,
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоУплаченоСтраховая
	               |ПОМЕСТИТЬ ВТРаботникиОрганизации
	               |ИЗ
	               |	Документ.УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	               |ГДЕ
	               |	УдалитьСведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка В(&СписокДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизации.Ссылка КАК Ссылка,
	               |	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	РаботникиОрганизации.ФизЛицо,
	               |	РаботникиОрганизации.АдресДляИнформирования,
	               |	РаботникиОрганизации.СтраховойНомерПФР,
	               |	РаботникиОрганизации.Фамилия,
	               |	РаботникиОрганизации.Имя,
	               |	РаботникиОрганизации.Отчество,
	               |	РаботникиОрганизации.НачисленоСтраховая,
	               |	РаботникиОрганизации.УплаченоСтраховая,
	               |	РаботникиОрганизации.НачисленоНакопительная,
	               |	РаботникиОрганизации.УплаченоНакопительная,
	               |	РаботникиОрганизации.Организация,
	               |	РаботникиОрганизации.ОтчетныйПериод,
	               |	РаботникиОрганизации.КатегорияЗастрахованныхЛиц,
	               |	РаботникиОрганизации.КорректируемыйПериод,
	               |	РаботникиОрганизации.ТипСведенийСЗВ,
	               |	РаботникиОрганизации.ДоначисленоСтраховая,
	               |	РаботникиОрганизации.ДоначисленоНакопительная,
	               |	РаботникиОрганизации.ДоУплаченоНакопительная,
	               |	РаботникиОрганизации.ДоУплаченоСтраховая
	               |ИЗ
	               |	ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаботникиОрганизации.Организация,
	               |	РаботникиОрганизации.КатегорияЗастрахованныхЛиц,
	               |	РаботникиОрганизации.ФизЛицо КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Корректирующая)
	               |			ТОГДА РаботникиОрганизации.КорректируемыйПериод
	               |		КОГДА РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	               |			ТОГДА РаботникиОрганизации.ОтчетныйПериод
	               |	КОНЕЦ КАК ОтчетныйПериод,
	               |	РаботникиОрганизации.Ссылка
	               |ПОМЕСТИТЬ ВТСотрудникиДокументов
	               |ИЗ
	               |	ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |ГДЕ
	               |	(РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Корректирующая)
	               |			ИЛИ РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная))";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТЧРаботникиОрганизации = Результаты[2].Выбрать();
	
	СформироватьВТСДаннымиСтажа(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	               |	СведенияОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	               |	СведенияОСтаже.ДатаНачалаПериода,
	               |	СведенияОСтаже.ДатаОкончанияПериода,
	               |	СведенияОСтаже.ОсобыеУсловияТруда,
	               |	СведенияОСтаже.КодПозицииСписка,
	               |	СведенияОСтаже.ОснованиеИсчисляемогоСтажа,
	               |	СведенияОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ВторойПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ТретийПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ОснованиеВыслугиЛет,
	               |	СведенияОСтаже.ПервыйПараметрВыслугиЛет,
	               |	СведенияОСтаже.ВторойПараметрВыслугиЛет,
	               |	СведенияОСтаже.ТретийПараметрВыслугиЛет,
	               |	СведенияОСтаже.ТерриториальныеУсловия,
				   |	СведенияОСтаже.ПараметрТерриториальныхУсловий,
	               |	РаботникиОрганизации.Ссылка КАК Ссылка,
	               |	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	РаботникиОрганизации.ФизЛицо
	               |ИЗ
	               |	ВТСведенияОСтаже КАК СведенияОСтаже
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |		ПО СведенияОСтаже.Ссылка = РаботникиОрганизации.Ссылка
	               |			И СведенияОСтаже.Сотрудник = РаботникиОрганизации.ФизЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки,
	               |	НомерОсновнойЗаписи,
	               |	НомерДополнительнойЗаписи";
				   
	РезультатЗаписиОСтаже = Запрос.Выполнить();
	ВыборкаПоЗаписиОСтаже = РезультатЗаписиОСтаже.Выбрать();                                                                       
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("РаботникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧРаботникиОрганизации, ВыборкаПоДокументам.Ссылка, Результаты[2].Колонки));
		
		Для Каждого СтрокаСотрудник Из СтруктураДанныхДокумента.РаботникиОрганизации Цикл
			СтрокаСотрудник.АдресДляИнформирования = АдресВФорматеБСП(СтрокаСотрудник.АдресДляИнформирования);
		КонецЦикла;	
		
		СтруктураДанныхДокумента.Вставить("ЗаписиОСтаже", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоЗаписиОСтаже, ВыборкаПоДокументам.Ссылка, РезультатЗаписиОСтаже.Колонки));
		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));
		
	КонецЦикла;
	
	Возврат Результат;	
КонецФункции	

Процедура СформироватьВТСДаннымиСтажа(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьЗаписиОСтажеДляСЗВ4.НомерОсновнойЗаписи,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.НомерДополнительнойЗаписи,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ДатаНачалаПериода,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ДатаОкончанияПериода,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ОсобыеУсловияТруда,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.КодПозицииСписка,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ОснованиеИсчисляемогоСтажа,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ПервыйПараметрИсчисляемогоСтажа,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ВторойПараметрИсчисляемогоСтажа,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ТретийПараметрИсчисляемогоСтажа,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ОснованиеВыслугиЛет,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ПервыйПараметрВыслугиЛет,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ВторойПараметрВыслугиЛет,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ТретийПараметрВыслугиЛет,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ТерриториальныеУсловия,
	               |	СотрудникиДокументов.Сотрудник,
	               |	СотрудникиДокументов.ОтчетныйПериод,
	               |	СотрудникиДокументов.Организация,
	               |	СотрудникиДокументов.КатегорияЗастрахованныхЛиц,
	               |	СотрудникиДокументов.Ссылка,
	               |	УдалитьЗаписиОСтажеДляСЗВ4.ПараметрТерриториальныхУсловий
	               |ПОМЕСТИТЬ ВТСведенияОСтаже
	               |ИЗ
	               |	ВТСотрудникиДокументов КАК СотрудникиДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьЗаписиОСтажеДляСЗВ4 КАК УдалитьЗаписиОСтажеДляСЗВ4
	               |		ПО СотрудникиДокументов.Сотрудник = УдалитьЗаписиОСтажеДляСЗВ4.ФизЛицо
	               |			И СотрудникиДокументов.ОтчетныйПериод = УдалитьЗаписиОСтажеДляСЗВ4.ОтчетныйПериод
	               |			И СотрудникиДокументов.Организация = УдалитьЗаписиОСтажеДляСЗВ4.ОбособленноеПодразделение
	               |			И СотрудникиДокументов.КатегорияЗастрахованныхЛиц = УдалитьЗаписиОСтажеДляСЗВ4.КатегорияЗастрахованныхЛиц";
				   
	Запрос.Выполнить();				   
КонецПроцедуры	

Процедура КонвертироватьСоставКомплектовСведений(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьСведенияПринятыеПФР.Организация,
	|	УдалитьСведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР,
	|	УдалитьСведенияПринятыеПФР.КомплектДокументов,
	|	УдалитьСведенияПринятыеПФР.КомплектДокументов.РасчетРСВ1 КАК РСВ
	|ПОМЕСТИТЬ ВТКомплектыОтчетности
	|ИЗ
	|	РегистрСведений.УдалитьСведенияПринятыеПФР КАК УдалитьСведенияПринятыеПФР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|		ПО УдалитьСведенияПринятыеПФР.Организация = КомплектыОтчетностиПерсучета.Организация
	|			И УдалитьСведенияПринятыеПФР.ОтчетныйПериодПерсучетаПФР = КомплектыОтчетностиПерсучета.ОтчетныйПериод
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.Организация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектыОтчетности.Организация,
	|	КомплектыОтчетности.ОтчетныйПериодПерсучетаПФР,
	|	КомплектыОтчетности.КомплектДокументов,
	|	КомплектыОтчетности.РСВ
	|ИЗ
	|	ВТКомплектыОтчетности КАК КомплектыОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектыОтчетности.КомплектДокументов,
	|	УдалитьСведенияОНачисленномЗаработкеСЗВ63.Ссылка КАК СЗВ63
	|ИЗ
	|	ВТКомплектыОтчетности КАК КомплектыОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьСведенияОНачисленномЗаработкеСЗВ63 КАК УдалитьСведенияОНачисленномЗаработкеСЗВ63
	|		ПО КомплектыОтчетности.КомплектДокументов = УдалитьСведенияОНачисленномЗаработкеСЗВ63.ОписьАДВ62";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаКомплектов = Результаты[1].Выбрать();
	ПачкиСЗВ63Комплектов = Результаты[2].Выгрузить();
	
	Пока ВыборкаКомплектов.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаКомплектов.КомплектДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		АДВ62Ссылка = КонвертироватьДанные(ВыборкаКомплектов.КомплектДокументов, СоответствиеКонвертированныхОбъектов);
		
		КомплектОтчетности = Справочники.КомплектыОтчетностиПерсучета.НовыйКомплектСведений(ВыборкаКомплектов.Организация, ВыборкаКомплектов.ОтчетныйПериодПерсучетаПФР, ВыборкаКомплектов.РСВ); 
				
		КомплектОтчетности.ОписьПачекСЗВ = АДВ62Ссылка;
		
		АДВ62Объект = АДВ62Ссылка.ПолучитьОбъект();
		
		Для Каждого ПачкаОписи Из АДВ62Объект.ПачкиДокументов Цикл 
			ПачкаКомплекта = КомплектОтчетности.СписокПачекСЗВ.Добавить();
			ПачкаКомплекта.ПачкаДокументов = ПачкаОписи.ПачкаДокументов;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("КомплектДокументов", ВыборкаКомплектов.КомплектДокументов);
		
		ПачкиЗВ63 = ПачкиСЗВ63Комплектов.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ПачкаСЗВ63Описи Из ПачкиЗВ63 Цикл 
			ПачкаСЗВ63Комплекта = КомплектОтчетности.СписокПачекСЗВ6_3.Добавить();
			ПачкаСЗВ63Комплекта.ПачкаДокументов = КонвертироватьДанные(ПачкаСЗВ63Описи.СЗВ63, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;	
		
		//КомплектОтчетности.РСВ_1 = ВыборкаКомплектов.РСВ;
		
		КомплектОтчетности.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены;
		
		КомплектОтчетности.Записать();
	КонецЦикла;
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЗВ-6-4

Функция ПолучитьСписокКонвертируемыхДокументовСЗВ_6_4(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПачкаДокументовСЗВ_6_4.Ссылка
	|ИЗ
	|	Документ.УдалитьПачкаДокументовСЗВ_6_4 КАК УдалитьПачкаДокументовСЗВ_6_4
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УдалитьПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|				ТОГДА УдалитьПачкаДокументовСЗВ_6_4.ОтчетныйПериод
	|			ИНАЧЕ УдалитьПачкаДокументовСЗВ_6_4.КорректируемыйПериод
	|		КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УдалитьПачкаДокументовСЗВ_6_4.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовСЗВ_6_4()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("ОтчетныйПериод", "ОтчетныйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("КатегорияЗастрахованныхЛиц", "КатегорияЗастрахованныхЛиц");
	СоответствиеРеквизитов.Вставить("ТипСведенийСЗВ", "ТипСведенийСЗВ");
	СоответствиеРеквизитов.Вставить("КорректируемыйПериод", "КорректируемыйПериод");
	СоответствиеРеквизитов.Вставить("НомерПачки", "НомерПачки");
	СоответствиеРеквизитов.Вставить("ДокументПринятВПФР", "ПринятоВПФР");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	СоответствиеРеквизитов.Вставить("Руководитель", "Руководитель");
	СоответствиеРеквизитов.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
		
	СоответствиеРеквизитовТЧСотрудники = Новый Структура;
	СоответствиеРеквизитовТЧСотрудники.Вставить("ИмяТЧ", "РаботникиОрганизации");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Сотрудник", "ФизЛицо");
	СоответствиеРеквизитовТЧСотрудники.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Фамилия", "Фамилия");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Имя", "Имя");
	СоответствиеРеквизитовТЧСотрудники.Вставить("Отчество", "Отчество");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НачисленоСтраховая", "НачисленоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("УплаченоСтраховая", "УплаченоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("НачисленоНакопительная", "НачисленоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("УплаченоНакопительная", "УплаченоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоначисленоСтраховая", "ДоначисленоСтраховая");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоначисленоНакопительная", "ДоначисленоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоУплаченоНакопительная", "ДоУплаченоНакопительная");
	СоответствиеРеквизитовТЧСотрудники.Вставить("ДоУплаченоСтраховая", "ДоУплаченоСтраховая");

	СоответствиеРеквизитов.Вставить("Сотрудники",	СоответствиеРеквизитовТЧСотрудники);
	
	СоответствиеРеквизитовТЧЗаписиОСтаже = Новый Структура;
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ИмяТЧ", "ЗаписиОСтаже");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("Сотрудник", "ФизЛицо");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ДатаНачалаПериода", "ДатаНачалаПериода");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ДатаОкончанияПериода", "ДатаОкончанияПериода");	
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("НомерОсновнойЗаписи", "НомерОсновнойЗаписи");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("НомерДополнительнойЗаписи", "НомерДополнительнойЗаписи");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОсобыеУсловияТруда", "ОсобыеУсловияТруда");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("КодПозицииСписка", "КодПозицииСписка");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОснованиеИсчисляемогоСтажа", "ОснованиеИсчисляемогоСтажа");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПервыйПараметрИсчисляемогоСтажа", "ПервыйПараметрИсчисляемогоСтажа");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ВторойПараметрИсчисляемогоСтажа", "ВторойПараметрИсчисляемогоСтажа");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТретийПараметрИсчисляемогоСтажа", "ТретийПараметрИсчисляемогоСтажа");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ОснованиеВыслугиЛет", "ОснованиеВыслугиЛет");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПервыйПараметрВыслугиЛет", "ПервыйПараметрВыслугиЛет");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ВторойПараметрВыслугиЛет", "ВторойПараметрВыслугиЛет");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТретийПараметрВыслугиЛет", "ТретийПараметрВыслугиЛет");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ТерриториальныеУсловия", "ТерриториальныеУсловия");
	СоответствиеРеквизитовТЧЗаписиОСтаже.Вставить("ПараметрТерриториальныхУсловий", "ПараметрТерриториальныхУсловий");

	СоответствиеРеквизитов.Вставить("ЗаписиОСтаже",	СоответствиеРеквизитовТЧЗаписиОСтаже);

	СоответствиеРеквизитовТЧСведенияОЗаработке = Новый Структура;
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("ИмяТЧ", "СведенияОЗаработке");
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("Сотрудник", "ФизЛицо");
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("Месяц", "Месяц");
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("Заработок", "Заработок");
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины", "ОблагаетсяВзносамиДоПредельнойВеличины");
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины", "ОблагаетсяВзносамиСвышеПредельнойВеличины");
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах", "ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	СоответствиеРеквизитовТЧСведенияОЗаработке.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах", "ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");	

	СоответствиеРеквизитов.Вставить("СведенияОЗаработке",	СоответствиеРеквизитовТЧСведенияОЗаработке);
	
	Возврат СоответствиеРеквизитов;
КонецФункции

Функция ПередЗаписьюСЗВ_6_4(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	ДокументОбъект.ДокументПринятВПФР = Ложь;
	ДокументОбъект.ФайлСформирован = Истина;
КонецФункции	

Функция КонвертироватьДокументыСЗВ_6_4(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4.Ссылка КАК КонвертируемыйДокумент,
	|	УдалитьПачкаДокументовСЗВ_6_4.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьПачкаДокументовСЗВ_6_4 КАК УдалитьПачкаДокументовСЗВ_6_4
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
	|		ПО (ПачкаДокументовСЗВ_6_4.Дата = УдалитьПачкаДокументовСЗВ_6_4.Дата)
	|			И (ПачкаДокументовСЗВ_6_4.Ссылка В (&СписокДокументов))
	|			И (ПОДСТРОКА(ПачкаДокументовСЗВ_6_4.Номер, 1, 100) = ПОДСТРОКА(УдалитьПачкаДокументовСЗВ_6_4.Номер, 1, 100))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьПачкаДокументовСЗВ_6_4.Ссылка,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ВерсияДанных,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ПометкаУдаления,
	               |	УдалитьПачкаДокументовСЗВ_6_4.Номер,
	               |	УдалитьПачкаДокументовСЗВ_6_4.Дата,
	               |	УдалитьПачкаДокументовСЗВ_6_4.Проведен,
	               |	УдалитьПачкаДокументовСЗВ_6_4.Организация,
	               |	УдалитьПачкаДокументовСЗВ_6_4.Комментарий,
	               |	УдалитьПачкаДокументовСЗВ_6_4.Ответственный,
	               |	УдалитьПачкаДокументовСЗВ_6_4.КраткийСоставДокумента,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ТипФормДокументов,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ФорматФайла,
	               |	УдалитьПачкаДокументовСЗВ_6_4.КатегорияЗастрахованныхЛиц,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ОтчетныйПериод,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ,
	               |	УдалитьПачкаДокументовСЗВ_6_4.КорректируемыйПериод,
	               |	УдалитьПачкаДокументовСЗВ_6_4.НомерПачки,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ПринятоВПФР,
	               |	УдалитьПачкаДокументовСЗВ_6_4.Руководитель,
	               |	УдалитьПачкаДокументовСЗВ_6_4.ДолжностьРуководителя
	               |ИЗ
	               |	Документ.УдалитьПачкаДокументовСЗВ_6_4 КАК УдалитьПачкаДокументовСЗВ_6_4
	               |ГДЕ
	               |	УдалитьПачкаДокументовСЗВ_6_4.Ссылка В(&СписокДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.НомерСтроки,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.ФизЛицо,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.СтраховойНомерПФР,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Фамилия,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Имя,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Отчество,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.НачисленоСтраховая,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.УплаченоСтраховая,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.НачисленоНакопительная,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.УплаченоНакопительная,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.Организация,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.ОтчетныйПериод,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.КатегорияЗастрахованныхЛиц,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.КорректируемыйПериод,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.ДоначисленоСтраховая,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.ДоначисленоНакопительная,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.ДоУплаченоНакопительная,
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.ДоУплаченоСтраховая
	               |ПОМЕСТИТЬ ВТРаботникиОрганизации
	               |ИЗ
	               |	Документ.УдалитьПачкаДокументовСЗВ_6_4.РаботникиОрганизации КАК УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации
	               |ГДЕ
	               |	УдалитьПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка В(&СписокДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РаботникиОрганизации.Ссылка КАК Ссылка,
	               |	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	РаботникиОрганизации.ФизЛицо,
	               |	РаботникиОрганизации.СтраховойНомерПФР,
	               |	РаботникиОрганизации.Фамилия,
	               |	РаботникиОрганизации.Имя,
	               |	РаботникиОрганизации.Отчество,
	               |	РаботникиОрганизации.НачисленоСтраховая,
	               |	РаботникиОрганизации.УплаченоСтраховая,
	               |	РаботникиОрганизации.НачисленоНакопительная,
	               |	РаботникиОрганизации.УплаченоНакопительная,
	               |	РаботникиОрганизации.Организация,
	               |	РаботникиОрганизации.ОтчетныйПериод,
	               |	РаботникиОрганизации.КатегорияЗастрахованныхЛиц,
	               |	РаботникиОрганизации.КорректируемыйПериод,
	               |	РаботникиОрганизации.ТипСведенийСЗВ,
	               |	РаботникиОрганизации.ДоначисленоСтраховая,
	               |	РаботникиОрганизации.ДоначисленоНакопительная,
	               |	РаботникиОрганизации.ДоУплаченоНакопительная,
	               |	РаботникиОрганизации.ДоУплаченоСтраховая
	               |ИЗ
	               |	ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.Ссылка КАК Ссылка,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.НомерСтроки КАК НомерСтроки,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.ФизЛицо,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.Месяц - МЕСЯЦ(УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.Ссылка.ОтчетныйПериод) + 1 КАК Месяц,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.Заработок,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	               |ИЗ
	               |	Документ.УдалитьПачкаДокументовСЗВ_6_4.СведенияОЗаработке КАК УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке
	               |ГДЕ
	               |	УдалитьПачкаДокументовСЗВ_6_4СведенияОЗаработке.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РаботникиОрганизации.Организация,
	               |	РаботникиОрганизации.КатегорияЗастрахованныхЛиц,
	               |	РаботникиОрганизации.ФизЛицо КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Корректирующая)
	               |			ТОГДА РаботникиОрганизации.КорректируемыйПериод
	               |		КОГДА РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	               |			ТОГДА РаботникиОрганизации.ОтчетныйПериод
	               |	КОНЕЦ КАК ОтчетныйПериод,
	               |	РаботникиОрганизации.Ссылка
	               |ПОМЕСТИТЬ ВТСотрудникиДокументов
	               |ИЗ
	               |	ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |ГДЕ
	               |	(РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Корректирующая)
	               |			ИЛИ РаботникиОрганизации.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная))";
				   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТЧРаботникиОрганизации = Результаты[2].Выбрать();
	ВыборкаПоТЧСведенияОЗаработке = Результаты[3].Выбрать();

	
	СформироватьВТСДаннымиСтажа(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	               |	СведенияОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	               |	СведенияОСтаже.ДатаНачалаПериода,
	               |	СведенияОСтаже.ДатаОкончанияПериода,
	               |	СведенияОСтаже.ОсобыеУсловияТруда,
	               |	СведенияОСтаже.КодПозицииСписка,
	               |	СведенияОСтаже.ОснованиеИсчисляемогоСтажа,
	               |	СведенияОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ВторойПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ТретийПараметрИсчисляемогоСтажа,
	               |	СведенияОСтаже.ОснованиеВыслугиЛет,
	               |	СведенияОСтаже.ПервыйПараметрВыслугиЛет,
	               |	СведенияОСтаже.ВторойПараметрВыслугиЛет,
	               |	СведенияОСтаже.ТретийПараметрВыслугиЛет,
	               |	СведенияОСтаже.ТерриториальныеУсловия,
				   |	СведенияОСтаже.ПараметрТерриториальныхУсловий,
	               |	РаботникиОрганизации.Ссылка КАК Ссылка,
	               |	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	РаботникиОрганизации.ФизЛицо
	               |ИЗ
	               |	ВТСведенияОСтаже КАК СведенияОСтаже
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаботникиОрганизации КАК РаботникиОрганизации
	               |		ПО СведенияОСтаже.Ссылка = РаботникиОрганизации.Ссылка
	               |			И СведенияОСтаже.Сотрудник = РаботникиОрганизации.ФизЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки,
	               |	НомерОсновнойЗаписи,
	               |	НомерДополнительнойЗаписи";
				   
	РезультатЗаписиОСтаже = Запрос.Выполнить();
	ВыборкаПоЗаписиОСтаже = РезультатЗаписиОСтаже.Выбрать();                                                                       
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.Вставить("РаботникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧРаботникиОрганизации, ВыборкаПоДокументам.Ссылка, Результаты[2].Колонки));
		СтруктураДанныхДокумента.Вставить("СведенияОЗаработке", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧСведенияОЗаработке, ВыборкаПоДокументам.Ссылка, Результаты[3].Колонки));

				
		СтруктураДанныхДокумента.Вставить("ЗаписиОСтаже", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоЗаписиОСтаже, ВыборкаПоДокументам.Ссылка, РезультатЗаписиОСтаже.Колонки));
		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));
		
	КонецЦикла;
	
	Возврат Результат;	
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДОКУКЕНТЫ НДФЛ

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// СПРАВКА 2-НДФЛ по сотруднику

Функция ПолучитьСписокКонвертируемыхДокументовСправкаНДФЛПоСотруднику(ДатаНачала, ДатаОкончания)  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьСправкаПоНДФЛСотруднику.Ссылка
	|ИЗ
	|	Документ.УдалитьСправкаПоНДФЛСотруднику КАК УдалитьСправкаПоНДФЛСотруднику
	|ГДЕ
	|	УдалитьСправкаПоНДФЛСотруднику.НалоговыйПериод >= 2011
	|	И НЕ УдалитьСправкаПоНДФЛСотруднику.СпециальныйДокумент2011года";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция КонвертироватьДокументы2_НДФЛПоСотруднику(СписокДокументов, СоответствиеКонвертированныхОбъектов) 
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументовПоДатеНомеру(НеконвертированныеДокументы, 
																							"Документ.УдалитьСправкаПоНДФЛСотруднику",
																							"Документ.СправкаНДФЛ",
																							СоответствиеКонвертированныхОбъектов);
																							
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;																							
	
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям(); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛСотруднику.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛСотруднику.ВерсияДанных,
	               |	УдалитьСправкаПоНДФЛСотруднику.ПометкаУдаления,
	               |	УдалитьСправкаПоНДФЛСотруднику.Номер,
	               |	УдалитьСправкаПоНДФЛСотруднику.Дата,
	               |	УдалитьСправкаПоНДФЛСотруднику.Проведен,
	               |	УдалитьСправкаПоНДФЛСотруднику.Ответственный,
	               |	УдалитьСправкаПоНДФЛСотруднику.Комментарий,
	               |	УдалитьСправкаПоНДФЛСотруднику.НалоговыйПериод,
	               |	УдалитьСправкаПоНДФЛСотруднику.Организация,
	               |	УдалитьСправкаПоНДФЛСотруднику.ОКАТО_КПП,
	               |	УдалитьСправкаПоНДФЛСотруднику.СпособФормирования,
	               |	УдалитьСправкаПоНДФЛСотруднику.Телефон,
	               |	УдалитьСправкаПоНДФЛСотруднику.СправкуПодписал,
	               |	УдалитьСправкаПоНДФЛСотруднику.ДолжностьПодписавшегоЛица,
	               |	УдалитьСправкаПоНДФЛСотруднику.Сотрудник,
	               |	УдалитьСправкаПоНДФЛСотруднику.Ставка,
	               |	УдалитьСправкаПоНДФЛСотруднику.Фамилия,
	               |	УдалитьСправкаПоНДФЛСотруднику.Имя,
	               |	УдалитьСправкаПоНДФЛСотруднику.Отчество,
	               |	УдалитьСправкаПоНДФЛСотруднику.АдресРФ,
	               |	УдалитьСправкаПоНДФЛСотруднику.ВидДокумента,
	               |	УдалитьСправкаПоНДФЛСотруднику.СерияДокумента,
	               |	УдалитьСправкаПоНДФЛСотруднику.НомерДокумента,
	               |	УдалитьСправкаПоНДФЛСотруднику.ОбщаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛСотруднику.ОблагаемаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛСотруднику.Исчислено,
	               |	УдалитьСправкаПоНДФЛСотруднику.Задолженность,
	               |	УдалитьСправкаПоНДФЛСотруднику.ИзлишнеУдержано,
	               |	УдалитьСправкаПоНДФЛСотруднику.Удержано,
	               |	УдалитьСправкаПоНДФЛСотруднику.Перечислено,
	               |	УдалитьСправкаПоНДФЛСотруднику.АдресЗарубежом,
	               |	УдалитьСправкаПоНДФЛСотруднику.ДатаРождения,
	               |	УдалитьСправкаПоНДФЛСотруднику.ИНН,
	               |	УдалитьСправкаПоНДФЛСотруднику.Гражданство,
	               |	УдалитьСправкаПоНДФЛСотруднику.СтатусНалогоплательщика,
	               |	УдалитьСправкаПоНДФЛСотруднику.ДатаУведомления,
	               |	УдалитьСправкаПоНДФЛСотруднику.НомерУведомления,
	               |	УдалитьСправкаПоНДФЛСотруднику.КодНалоговогоОрганаУведомления,
	               |	УдалитьСправкаПоНДФЛСотруднику.ОКТМО_КПП
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛСотруднику КАК УдалитьСправкаПоНДФЛСотруднику
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛСотруднику.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.Месяц,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.КодДохода,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.СуммаДохода,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.КодВычета,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.СуммаВычета
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛСотруднику.СведенияОДоходах КАК УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОДоходах.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОВычетах.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОВычетах.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОВычетах.КодВычета,
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОВычетах.СуммаВычета
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛСотруднику.СведенияОВычетах КАК УдалитьСправкаПоНДФЛСотрудникуСведенияОВычетах
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛСотрудникуСведенияОВычетах.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.Ставка,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.ОбщаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.ОблагаемаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.Исчислено,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.Удержано,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.Перечислено,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.ИзлишнеУдержано,
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.Задолженность
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛСотруднику.СуммыНалогов КАК УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛСотрудникуСуммыНалогов.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
				  			   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
				   
	ВыборкаПоТЧСведенияОДоходах =  Результаты[1].Выбрать();
	ВыборкаПоТЧСведенияОВычетах =  Результаты[2].Выбрать();
	ВыборкаПоТЧНалоги = Результаты[3].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		
		СтруктураДанныхДокумента.АдресРФ = АдресВФорматеБСП(СтруктураДанныхДокумента.АдресРФ);
		СтруктураДанныхДокумента.АдресЗарубежом = АдресВФорматеБСП(СтруктураДанныхДокумента.АдресЗарубежом);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ОКТМО_КПП) Тогда
			КодОктмо = КодОКТМОизСуммыОКТМОиКПП(ВыборкаПоДокументам.ОКТМО_КПП);
			КПП = КППизСуммыОКАТОиКПП(ВыборкаПоДокументам.ОКТМО_КПП);
			Регистрация = ПолучитьРегистрациюВИФНС(ВыборкаПоДокументам.Организация, "", КодОктмо, КПП, СоответствиеВладельцевРегистрациям);
		Иначе
			КодОкато = КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоДокументам.ОКАТО_КПП);
			КПП = КППизСуммыОКАТОиКПП(ВыборкаПоДокументам.ОКАТО_КПП);
			Регистрация = ПолучитьРегистрациюВИФНС(ВыборкаПоДокументам.Организация, КодОкато, "", КПП, СоответствиеВладельцевРегистрациям);
		КонецЕсли;	
		
		СтруктураДанныхДокумента.Вставить("РегистрацияВНалоговомОргане", Регистрация);
		СтруктураДанныхДокумента.Вставить("СуммыНалогов", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧНалоги, ВыборкаПоДокументам.Ссылка, Результаты[3].Колонки));
		
		СтруктураДанныхДокумента.Вставить("СведенияОДоходах", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧСведенияОДоходах, ВыборкаПоДокументам.Ссылка, Результаты[1].Колонки));
		СтруктураДанныхДокумента.Вставить("СведенияОВычетах", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧСведенияОВычетах, ВыборкаПоДокументам.Ссылка, Результаты[2].Колонки));
		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов));	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Функция ПолучитьСоответствиеРеквизитов2_НДФЛПоСотруднику(ДанныеДокумента)
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("НалоговыйПериод", "НалоговыйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("СправкуПодписал", "СправкуПодписал");
	СоответствиеРеквизитов.Вставить("ДолжностьПодписавшегоЛица", "ДолжностьПодписавшегоЛица");
	СоответствиеРеквизитов.Вставить("Телефон", "Телефон");
	СоответствиеРеквизитов.Вставить("СпособФормирования", "СпособФормирования");
	СоответствиеРеквизитов.Вставить("РегистрацияВНалоговомОргане", "РегистрацияВНалоговомОргане");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ИНН", "ИНН");
	СоответствиеРеквизитов.Вставить("Фамилия", "Фамилия");
	СоответствиеРеквизитов.Вставить("Имя", "Имя");
	СоответствиеРеквизитов.Вставить("Отчество", "Отчество");
	СоответствиеРеквизитов.Вставить("Адрес", "АдресРФ");
	СоответствиеРеквизитов.Вставить("ВидДокумента", "ВидДокумента");
	СоответствиеРеквизитов.Вставить("СерияДокумента", "СерияДокумента");
	СоответствиеРеквизитов.Вставить("НомерДокумента", "НомерДокумента");
	СоответствиеРеквизитов.Вставить("Гражданство", "Гражданство");
	СоответствиеРеквизитов.Вставить("ДатаРождения", "ДатаРождения");
	СоответствиеРеквизитов.Вставить("СтатусНалогоплательщика", "СтатусНалогоплательщика");
	
	СоответствиеРеквизитов.Вставить("АдресЗаРубежом", "АдресЗаРубежом");
	
	СоответствиеРеквизитовТЧСведенияОДоходах = Новый Структура;
	
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("ИмяТЧ", "СведенияОДоходах");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("МесяцНалоговогоПериода", "Месяц");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("КодДохода", "КодДохода");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("СуммаДохода", "СуммаДохода");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("СуммаВычета", "СуммаВычета");
	
	СоответствиеРеквизитов.Вставить("СведенияОДоходах", СоответствиеРеквизитовТЧСведенияОДоходах);
	
	СоответствиеРеквизитовТЧСведенияОВычетах = Новый Структура;
	СоответствиеРеквизитовТЧСведенияОВычетах.Вставить("ИмяТЧ", "СведенияОВычетах");
	СоответствиеРеквизитовТЧСведенияОВычетах.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧСведенияОВычетах.Вставить("СуммаВычета", "СуммаВычета");

	СоответствиеРеквизитов.Вставить("СведенияОВычетах", СоответствиеРеквизитовТЧСведенияОВычетах);
	
	СоответствиеРеквизитовТЧНалоги = Новый Структура;
	СоответствиеРеквизитовТЧНалоги.Вставить("ИмяТЧ", "СуммыНалогов");
	СоответствиеРеквизитовТЧНалоги.Вставить("Ставка", "Ставка");
	СоответствиеРеквизитовТЧНалоги.Вставить("ОбщаяСуммаДохода", "ОбщаяСуммаДохода");
	СоответствиеРеквизитовТЧНалоги.Вставить("ОблагаемаяСуммаДохода", "ОблагаемаяСуммаДохода");
	СоответствиеРеквизитовТЧНалоги.Вставить("Исчислено", "Исчислено");
	СоответствиеРеквизитовТЧНалоги.Вставить("Удержано", "Удержано");
	СоответствиеРеквизитовТЧНалоги.Вставить("Перечислено", "Перечислено");
	СоответствиеРеквизитовТЧНалоги.Вставить("ИзлишнеУдержано", "ИзлишнеУдержано");
	СоответствиеРеквизитовТЧНалоги.Вставить("Задолженность", "Задолженность");

	СоответствиеРеквизитов.Вставить("УдалитьСуммыНалогов", СоответствиеРеквизитовТЧНалоги);
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Функция ПередЗаписьюСправкаНДФЛПоСотруднику(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////////////////////
// СПРАВКА 2-НДФЛ в налоговый орган 

Функция ПолучитьСписокКонвертируемыхДокументовСправкаНДФЛПоВНалоговыйОрган(ДатаНачала, ДатаОкончания)  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка
	|ИЗ
	|	Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган КАК УдалитьСправкаПоНДФЛВНалоговыйОрган
	|ГДЕ
	|	УдалитьСправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод >= 2011
	|	И УдалитьСправкаПоНДФЛВНалоговыйОрган.Проведен
	|	И НЕ УдалитьСправкаПоНДФЛВНалоговыйОрган.СпециальныйДокумент2011года";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

Функция КонвертироватьДокументы2_НДФЛВНалоговыйОрган(СписокДокументов, СоответствиеКонвертированныхОбъектов)  
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументовПоДатеНомеру(НеконвертированныеДокументы, 
																							"Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган",
																							"Документ.СправкиНДФЛДляПередачиВНалоговыйОрган",
																							СоответствиеКонвертированныхОбъектов);
																							
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;																								
	
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям(); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ВерсияДанных,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ПометкаУдаления,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Номер,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Дата,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Проведен,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Организация,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ОКАТО_КПП,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ОснованиеДляПредставленияСправок,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ИмяФайла,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Телефон,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ГлавныйБухгалтер,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.СправкуПодписал,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ДолжностьПодписавшегоЛица,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ПринятоНалоговымОрганом,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.КраткийСоставДокумента,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Ответственный,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Комментарий,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.ОКТМО_КПП
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган КАК УдалитьСправкаПоНДФЛВНалоговыйОрган
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Сотрудник,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерСправки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ставка,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Задолженность,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Фамилия,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Имя,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Отчество,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.АдресРФ,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ВидДокумента,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.СерияДокумента,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерДокумента,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ОбщаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ОблагаемаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Исчислено,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ИзлишнеУдержано,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Удержано,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Перечислено,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.АдресЗарубежом,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ДатаРождения,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ИНН,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Гражданство,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.СтатусНалогоплательщика,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.ДатаУведомления,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.НомерУведомления,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.КодНалоговогоОрганаУведомления
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган.СотрудникиОрганизации КАК УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСотрудникиОрганизации.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.НомерСправки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.Месяц,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.КодДохода,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.СуммаДохода,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.КодВычета,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.СуммаВычета
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган.СведенияОДоходах КАК УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОДоходах.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.НомерСправки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.КодВычета,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.СуммаВычета
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган.СведенияОВычетах КАК УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОВычетах
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСведенияОВычетах.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.Ссылка КАК Ссылка,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.НомерСтроки КАК НомерСтроки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.НомерСправки,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.Ставка,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.ОбщаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.ОблагаемаяСуммаДохода,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.Исчислено,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.Удержано,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.Перечислено,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.ИзлишнеУдержано,
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.Задолженность
	               |ИЗ
	               |	Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган.СуммыНалогов КАК УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов
	               |ГДЕ
	               |	УдалитьСправкаПоНДФЛВНалоговыйОрганСуммыНалогов.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
				  			   
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТЧСотрудники =  Результаты[1].Выбрать();
	ВыборкаПоТЧСведенияОДоходах =  Результаты[2].Выбрать();
	ВыборкаПоТЧСведенияОВычетах =  Результаты[3].Выбрать();
	ВыборкаПоТЧНалоги = Результаты[4].Выбрать();
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДанныхДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, Результаты[0].Колонки);
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ОКТМО_КПП) Тогда
			КодОктмо = КодОКТМОизСуммыОКТМОиКПП(ВыборкаПоДокументам.ОКТМО_КПП);
			КПП = КППизСуммыОКАТОиКПП(ВыборкаПоДокументам.ОКТМО_КПП);
			Регистрация = ПолучитьРегистрациюВИФНС(ВыборкаПоДокументам.Организация, "", КодОктмо, КПП, СоответствиеВладельцевРегистрациям);
		Иначе
			КодОкато = КодОКАТОизСуммыОКАТОиКПП(ВыборкаПоДокументам.ОКАТО_КПП);
			КПП = КППизСуммыОКАТОиКПП(ВыборкаПоДокументам.ОКАТО_КПП);
			Регистрация = ПолучитьРегистрациюВИФНС(ВыборкаПоДокументам.Организация, КодОкато, "", КПП, СоответствиеВладельцевРегистрациям);
		КонецЕсли;	

		СтруктураДанныхДокумента.Вставить("РегистрацияВНалоговомОргане", Регистрация);

		
		СтруктураДанныхДокумента.Вставить("СотрудникиОрганизации", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧСотрудники, ВыборкаПоДокументам.Ссылка, Результаты[1].Колонки));
		СтруктураДанныхДокумента.Вставить("СведенияОДоходах", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧСведенияОДоходах, ВыборкаПоДокументам.Ссылка, Результаты[2].Колонки));
		СтруктураДанныхДокумента.Вставить("СведенияОВычетах", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧСведенияОВычетах, ВыборкаПоДокументам.Ссылка, Результаты[3].Колонки));
		СтруктураДанныхДокумента.Вставить("СуммыНалогов", ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоТЧНалоги, ВыборкаПоДокументам.Ссылка, Результаты[4].Колонки));

		Для Каждого СтрокаСотрудник Из СтруктураДанныхДокумента.СотрудникиОрганизации Цикл
			СтрокаСотрудник.АдресРФ = АдресВФорматеБСП(СтрокаСотрудник.АдресРФ);
			СтрокаСотрудник.АдресЗарубежом = АдресВФорматеБСП(СтрокаСотрудник.АдресЗарубежом);
		КонецЦикла;

		
		НачатьТранзакцию();
		НовыйДокумент = КонвертироватьДанныеДокумента(СтруктураДанныхДокумента, СоответствиеКонвертированныхОбъектов);
		
		Справка2_НДФЛУстановитьНовыеРегистраторы(ВыборкаПоДокументам.Ссылка, НовыйДокумент, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям); 
		ЗафиксироватьТранзакцию();
		
		Результат.Вставить(СтруктураДанныхДокумента.Ссылка, НовыйДокумент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьСоответствиеРеквизитов2_НДФЛВНалоговыйОрган(ДанныеДокумента)Экспорт
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("НалоговыйПериод", "НалоговыйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("СправкуПодписал", "СправкуПодписал");
	СоответствиеРеквизитов.Вставить("ДолжностьПодписавшегоЛица", "ДолжностьПодписавшегоЛица");
	СоответствиеРеквизитов.Вставить("ОснованиеДляПредставленияСправок", "ОснованиеДляПредставленияСправок");  
	СоответствиеРеквизитов.Вставить("Телефон", "Телефон");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("РегистрацияВНалоговомОргане", "РегистрацияВНалоговомОргане");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	
	СоответствиеРеквизитовТЧСотрудник = Новый Структура;
	СоответствиеРеквизитовТЧСотрудник.Вставить("ИмяТЧ", "СотрудникиОрганизации");
	СоответствиеРеквизитовТЧСотрудник.Вставить("НомерСправки", "НомерСправки");
	СоответствиеРеквизитовТЧСотрудник.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитовТЧСотрудник.Вставить("ИНН", "ИНН");
	СоответствиеРеквизитовТЧСотрудник.Вставить("Ставка", "Ставка");
	СоответствиеРеквизитовТЧСотрудник.Вставить("Фамилия", "Фамилия");
	СоответствиеРеквизитовТЧСотрудник.Вставить("Имя", "Имя");
	СоответствиеРеквизитовТЧСотрудник.Вставить("Отчество", "Отчество");
	СоответствиеРеквизитовТЧСотрудник.Вставить("Адрес", "АдресРФ");
	СоответствиеРеквизитовТЧСотрудник.Вставить("ВидДокумента", "ВидДокумента");
	СоответствиеРеквизитовТЧСотрудник.Вставить("СерияДокумента", "СерияДокумента");
	СоответствиеРеквизитовТЧСотрудник.Вставить("НомерДокумента", "НомерДокумента");
	СоответствиеРеквизитовТЧСотрудник.Вставить("Гражданство", "Гражданство");
	СоответствиеРеквизитовТЧСотрудник.Вставить("ДатаРождения", "ДатаРождения");
	СоответствиеРеквизитовТЧСотрудник.Вставить("СтатусНалогоплательщика", "СтатусНалогоплательщика");
	СоответствиеРеквизитовТЧСотрудник.Вставить("АдресЗаРубежом", "АдресЗаРубежом");
	
	СоответствиеРеквизитов.Вставить("Сотрудники", СоответствиеРеквизитовТЧСотрудник);
	
	СоответствиеРеквизитовТЧСведенияОДоходах = Новый Структура;
	
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("ИмяТЧ", "СведенияОДоходах");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("МесяцНалоговогоПериода", "Месяц");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("КодДохода", "КодДохода");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("СуммаДохода", "СуммаДохода");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("СуммаВычета", "СуммаВычета");
	СоответствиеРеквизитовТЧСведенияОДоходах.Вставить("НомерСправки", "НомерСправки");
	
	СоответствиеРеквизитов.Вставить("СведенияОДоходах", СоответствиеРеквизитовТЧСведенияОДоходах);
	
	СоответствиеРеквизитовТЧСведенияОВычетах = Новый Структура;
	СоответствиеРеквизитовТЧСведенияОВычетах.Вставить("ИмяТЧ", "СведенияОВычетах");
	СоответствиеРеквизитовТЧСведенияОВычетах.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧСведенияОВычетах.Вставить("СуммаВычета", "СуммаВычета");
	СоответствиеРеквизитовТЧСведенияОВычетах.Вставить("НомерСправки", "НомерСправки");

	СоответствиеРеквизитов.Вставить("СведенияОВычетах", СоответствиеРеквизитовТЧСведенияОВычетах);
	
	СоответствиеРеквизитовТЧНалоги = Новый Структура;
	СоответствиеРеквизитовТЧНалоги.Вставить("ИмяТЧ", "СуммыНалогов");
	СоответствиеРеквизитовТЧНалоги.Вставить("НомерСправки", "НомерСправки");
	СоответствиеРеквизитовТЧНалоги.Вставить("Ставка", "Ставка");
	СоответствиеРеквизитовТЧНалоги.Вставить("ОбщаяСуммаДохода", "ОбщаяСуммаДохода");
	СоответствиеРеквизитовТЧНалоги.Вставить("ОблагаемаяСуммаДохода", "ОблагаемаяСуммаДохода");
	СоответствиеРеквизитовТЧНалоги.Вставить("Исчислено", "Исчислено");
	СоответствиеРеквизитовТЧНалоги.Вставить("Удержано", "Удержано");
	СоответствиеРеквизитовТЧНалоги.Вставить("Перечислено", "Перечислено");
	СоответствиеРеквизитовТЧНалоги.Вставить("ИзлишнеУдержано", "ИзлишнеУдержано");
	СоответствиеРеквизитовТЧНалоги.Вставить("Задолженность", "Задолженность");

	СоответствиеРеквизитов.Вставить("УдалитьСуммыНалогов", СоответствиеРеквизитовТЧНалоги);

	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Функция ПередЗаписьюСправкаНДФЛВНалоговыйОрган(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	Для Каждого СтрокаТЧ Из ДокументОбъект.СведенияОДоходах Цикл
		ДанныеСотрудника = ДокументОбъект.Сотрудники.Найти(СтрокаТЧ.НомерСправки, "НомерСправки");
		Если ДанныеСотрудника <> Неопределено Тогда
			СтрокаТЧ.Сотрудник = ДанныеСотрудника.Сотрудник;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаТЧ Из ДокументОбъект.СведенияОВычетах Цикл
		ДанныеСотрудника = ДокументОбъект.Сотрудники.Найти(СтрокаТЧ.НомерСправки, "НомерСправки");
		Если ДанныеСотрудника <> Неопределено Тогда
			СтрокаТЧ.Сотрудник = ДанныеСотрудника.Сотрудник;
		КонецЕсли;	
	КонецЦикла;		
	
	ДокументОбъект.ФайлСформирован = Истина;
	
    Для Каждого ДанныеСправки Из ДокументОбъект.Сотрудники Цикл
	
		ИтогиПоНалогам = ДокументОбъект.УдалитьСуммыНалогов.Выгрузить(Новый Структура("НомерСправки", ДанныеСправки.НомерСправки));	
	
		Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл
			СтрокаИтогов = ИтогиПоНалогам.Добавить();
			СтрокаИтогов.Ставка = СтавкаНДФЛ;
			СтрокаИтогов.ОбщаяСуммаДохода = 0;
			СтрокаИтогов.ОблагаемаяСуммаДохода = 0;
			СтрокаИтогов.Исчислено = 0;
			СтрокаИтогов.Удержано = 0;
			СтрокаИтогов.Перечислено = 0;
			СтрокаИтогов.ИзлишнеУдержано = 0;
			СтрокаИтогов.Задолженность = 0;
		КонецЦикла;	
		
		ИтогиПоНалогам.Свернуть("Ставка", "ОбщаяСуммаДохода, ОблагаемаяСуммаДохода, Исчислено, Удержано, Перечислено, ИзлишнеУдержано, Задолженность");

		Для Каждого ИтогиПоСтавке Из ИтогиПоНалогам Цикл
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ОбщаяСуммаДохода");				
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ОблагаемаяСуммаДохода");	
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Исчислено");	
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Удержано");
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Перечислено");	
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "ИзлишнеУдержано");
			СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ИтогиПоСтавке, "Задолженность");
		КонецЦикла;	
		
	КонецЦикла;	

	ДокументОбъект.ДокументПринятВНалоговыйОрган = ДокументОбъект.Проведен;	
	
КонецФункции

Процедура Справка2_НДФЛУстановитьНовыеРегистраторы(СтарыйРегистратор, НовыйРегистратор, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить(СтарыйРегистратор);
	
	НовыйРегистраторОбъект = НовыйРегистратор.ПолучитьОбъект();
		
	КлючПорцииДанных = Новый Структура("Регистратор", СписокДокументов);
	КонвертироватьПорциюДанныхРасчетыНалогоплательщиковНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистраторОбъект);
КонецПроцедуры	

Процедура ЗаписатьПрисоединенныеФайлы2НДФЛ(КонвертируемыйДокумент, КонвертированныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", КонвертируемыйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АрхивДанныхРегламентированнойОтчетности.Данные,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ИмяФайла
	|ИЗ
	|	РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументИсточникДанных КАК ДанныеДокумента
	|		ПО АрхивДанныхРегламентированнойОтчетности.Объект = ДанныеДокумента.Ссылка
	|		И ДанныеДокумента.Ссылка = &Ссылка";
					   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументИсточникДанных", КонвертируемыйДокумент.Метаданные().ПолноеИмя());			   
				   
	Выборка = Запрос.Выполнить().Выбрать();				   
	
	Если Выборка.Следующий() Тогда    
		ЗарплатаКадры.ЗаписатьФайлВАрхив(КонвертированныйДокумент, Выборка.ИмяФайла, Выборка.Данные);		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СправкиНДФЛЗаполнитьПолеИтогов(ДанныеСправки, ДанныеИтоговПоСтавке, ИмяПоля)
	СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, ДанныеИтоговПоСтавке.Ставка, ИмяПоля, ДанныеИтоговПоСтавке[ИмяПоля])
КонецПроцедуры

Процедура СправкиНДФЛУстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, Ставка, ИмяПоля, Значение)
	ИмяПоляСправки = УчетНДФЛКлиентСервер.СправкиНДФЛИмяПоляИтоговПоСтавке(ИмяПоля, Ставка);
	Если ИмяПоляСправки <> Неопределено И ДанныеСправки <> Неопределено Тогда 
		ДанныеСправки[ИмяПоляСправки] = Значение;
	КонецЕсли;
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ЗАРПЛАТЫ

Функция СписокДокументовНачислениеЗарплаты()
	СписокДокументовНачислениеЗП = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций КАК УдалитьНачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	НЕ УдалитьНачислениеЗарплатыРаботникамОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьРасчетЕСН.Ссылка
	|ИЗ
	|	Документ.УдалитьРасчетЕСН КАК УдалитьРасчетЕСН
	|ГДЕ
	|	УдалитьРасчетЕСН.ПериодРегистрации >= ДАТАВРЕМЯ(2010, 1, 1)
	|	И НЕ УдалитьРасчетЕСН.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументовНачислениеЗП.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокДокументовНачислениеЗП;
КонецФункции

Функция СоответствиеРеквизитовДокументаНачислениеЗарплаты()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("МесяцНачисления", "МесяцНачисления");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Начисления");
	СоответствиеРеквизитовТЧ.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитовТЧ.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Результат", "Результат");
	СоответствиеРеквизитовТЧ.Вставить("ОтработаноДней", "ОтработаноДней");
	СоответствиеРеквизитовТЧ.Вставить("ОтработаноЧасов", "ОтработаноЧасов");
	СоответствиеРеквизитовТЧ.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧ.Вставить("СуммаВычета", "СуммаВычета");
	СоответствиеРеквизитовТЧ.Вставить("ПланируемаяДатаВыплаты", "ПланируемаяДатаВыплаты");
	
	СоответствиеРеквизитов.Вставить("Начисления", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "НДФЛ");
	СоответствиеРеквизитовТЧ.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитовТЧ.Вставить("МесяцНалоговогоПериода", "МесяцНалоговогоПериода");
	СоответствиеРеквизитовТЧ.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитовТЧ.Вставить("Налог", "Налог");
	//СоответствиеРеквизитовТЧ.Вставить("УдалитьНалогКЗачетуВозврату", "НалогКЗачетуВозврату");
	СоответствиеРеквизитовТЧ.Вставить("ПримененныйВычетЛичный", "ПримененныйВычетЛичный");
	СоответствиеРеквизитовТЧ.Вставить("ПримененныйВычетЛичныйКодВычета", "ПримененныйВычетЛичныйКодВычета");
	СоответствиеРеквизитовТЧ.Вставить("ПримененныйВычетЛичныйКЗачетуВозврату", "ПримененныйВычетЛичныйКЗачетуВозврату");
	СоответствиеРеквизитовТЧ.Вставить("ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета", "ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета");
	СоответствиеРеквизитовТЧ.Вставить("ИдентификаторСтрокиНДФЛ", "ИдентификаторСтрокиНДФЛ");
	
	СоответствиеРеквизитов.Вставить("НДФЛ", СоответствиеРеквизитовТЧ);

	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "ПримененныеВычетыНаДетейИИмущественные");
	СоответствиеРеквизитовТЧ.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧ.Вставить("РазмерВычета", "РазмерВычета");
	СоответствиеРеквизитовТЧ.Вставить("ИдентификаторСтрокиНДФЛ", "ИдентификаторСтрокиНДФЛ");
	
	СоответствиеРеквизитов.Вставить("ПримененныеВычетыНаДетейИИмущественные", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Взносы");
	СоответствиеРеквизитовТЧ.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитовТЧ.Вставить("ФФОМС", "ФФОМС");
	СоответствиеРеквизитовТЧ.Вставить("ФФОМСЕНВД", "ФФОМСЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ТФОМС", "ТФОМС");
	СоответствиеРеквизитовТЧ.Вставить("ТФОМСЕНВД", "ТФОМСЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ФСС", "ФСС");
	СоответствиеРеквизитовТЧ.Вставить("ФССЕНВД", "ФССЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ФССНесчастныеСлучаи", "ФССНесчастныеСлучаи");
	СоответствиеРеквизитовТЧ.Вставить("ПФРНакопительная", "ПФРНакопительная");
	СоответствиеРеквизитовТЧ.Вставить("ПФРНакопительнаяЕНВД", "ПФРНакопительнаяЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ПФРСтраховая", "ПФРСтраховая");
	СоответствиеРеквизитовТЧ.Вставить("ПФРСтраховаяЕНВД", "ПФРСтраховаяЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ПФРНаДоплатуЛетчикам", "ПФРНаДоплатуЛетчикам");
	СоответствиеРеквизитовТЧ.Вставить("ПФРНаДоплатуШахтерам", "ПФРНаДоплатуШахтерам");
	
	СоответствиеРеквизитовТЧ.Вставить("ПФРДоПредельнойВеличины", "ПФРДоПредельнойВеличины");
	СоответствиеРеквизитовТЧ.Вставить("ПФРДоПредельнойВеличиныЕНВД", "ПФРДоПредельнойВеличиныЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ПФРСПревышения", "ПФРСПревышения");
	СоответствиеРеквизитовТЧ.Вставить("ПФРСПревышенияЕНВД", "ПФРСПревышенияЕНВД");
	
	СоответствиеРеквизитовТЧ.Вставить("ПФРПоСуммарномуТарифу", "ПФРПоСуммарномуТарифу");
	СоответствиеРеквизитовТЧ.Вставить("ПФРПоСуммарномуТарифуЕНВД", "ПФРПоСуммарномуТарифуЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3");
	СоответствиеРеквизитовТЧ.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4");
	
	СоответствиеРеквизитов.Вставить("Взносы", СоответствиеРеквизитовТЧ);

	Возврат СоответствиеРеквизитов;
	
КонецФункции

Функция КонвертироватьДокументыНачислениеЗарплаты(СписокДокументов, СоответствиеКонвертированныхОбъектов = Неопределено)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка КАК КонвертируемыйДокумент,
	|	НачислениеЗарплаты.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций КАК УдалитьНачислениеЗарплатыРаботникамОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|		ПО УдалитьНачислениеЗарплатыРаботникамОрганизаций.Организация = НачислениеЗарплаты.Организация
	|			И (НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НачислениеЗарплаты.МесяцНачисления, МЕСЯЦ))
	|			И УдалитьНачислениеЗарплатыРаботникамОрганизаций.Проведен = НачислениеЗарплаты.Проведен
	|			И (УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка В (&СписокДокументов))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьРасчетЕСН.Ссылка,
	|	НачислениеЗарплаты.Ссылка
	|ИЗ
	|	Документ.УдалитьРасчетЕСН КАК УдалитьРасчетЕСН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|		ПО УдалитьРасчетЕСН.Организация = НачислениеЗарплаты.Организация
	|			И (НАЧАЛОПЕРИОДА(УдалитьРасчетЕСН.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НачислениеЗарплаты.МесяцНачисления, МЕСЯЦ))
	|			И УдалитьРасчетЕСН.Проведен = НачислениеЗарплаты.Проведен
	|			И (УдалитьРасчетЕСН.Ссылка В (&СписокДокументов))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.МесяцНачисления,
	|	ДанныеДокументов.Организация,
	|	МАКСИМУМ(ДанныеДокументов.Ссылка) КАК Ссылка,
	|	ДанныеДокументов.Проведен
	|ПОМЕСТИТЬ ВТПериодыНачислений
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации, МЕСЯЦ) КАК МесяцНачисления,
	|		УдалитьНачислениеЗарплатыРаботникамОрганизаций.Организация КАК Организация,
	|		УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка КАК Ссылка,
	|		УдалитьНачислениеЗарплатыРаботникамОрганизаций.Проведен КАК Проведен
	|	ИЗ
	|		Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций КАК УдалитьНачислениеЗарплатыРаботникамОрганизаций
	|	ГДЕ
	|		УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка В(&СписокДокументов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(УдалитьРасчетЕСН.ПериодРегистрации, МЕСЯЦ),
	|		УдалитьРасчетЕСН.Организация,
	|		УдалитьРасчетЕСН.Ссылка,
	|		УдалитьРасчетЕСН.Проведен
	|	ИЗ
	|		Документ.УдалитьРасчетЕСН КАК УдалитьРасчетЕСН
	|	ГДЕ
	|		УдалитьРасчетЕСН.Ссылка В(&СписокДокументов)) КАК ДанныеДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.МесяцНачисления,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыНачислений.МесяцНачисления КАК МесяцНачисления,
	|	ПериодыНачислений.Организация КАК Организация,
	|	ПериодыНачислений.Ссылка,
	|	ПериодыНачислений.Проведен КАК Проведен
	|ИЗ
	|	ВТПериодыНачислений КАК ПериодыНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	МесяцНачисления,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Результат,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета КАК Начисление,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.КодДоходаНДФЛ,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.КодВычета,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.СуммаВычета,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.ОписаниеОшибок,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.РайонныйКоэффициент,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.СевернаяНадбавка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Начислено,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцНачисления,
	|	КОНЕЦПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПланируемаяДатаВыплаты,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.Начисления КАК УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачислений КАК ПериодыНачислений
	|		ПО УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация = ПериодыНачислений.Организация
	|			И (НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации, ДЕНЬ) = ПериодыНачислений.МесяцНачисления)
	|			И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен = ПериодыНачислений.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	МесяцНачисления,
	|	ПериодыНачислений.Проведен,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Налог,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетЛичный КАК ПримененныйВычетЛичный,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаДетей,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам КАК ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетИмущественныйРасход КАК ПримененныйВычетИмущественныйРасходы,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаДетейИнвалидов КАК ПримененныйВычетНаДетейИнвалидов,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаДетейДвойной КАК ПримененныйВычетНаДетейДвойной,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной КАК ПримененныйВычетНаДетейИнвалидовДвойной,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаДетейДвойнойВторой КАК ПримененныйВычетНаДетейДвойнойВторой,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании КАК ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцНачисления,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка КАК Ссылка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаТретьегоРебенка КАК ПримененныйВычетНаТретьегоРебенка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной КАК ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаВторогоРебенка КАК ПримененныйВычетНаВторогоРебенка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной КАК ПримененныйВычетНаВторогоРебенкаДвойной,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка.Проведен,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.НомерСтроки
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачислений КАК ПериодыНачислений
	|		ПО УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка.Организация = ПериодыНачислений.Организация
	|			И (НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка.ПериодРегистрации, МЕСЯЦ) = ПериодыНачислений.МесяцНачисления)
	|			И УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.Ссылка.Проведен = ПериодыНачислений.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	МесяцНачисления,
	|	ПериодыНачислений.Проведен,
	|	Ссылка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНДФЛ.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРСтраховая КАК ПФРСтраховая,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРСтраховаяЕНВД КАК ПФРСтраховаяЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРНакопительная КАК ПФРНакопительная,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРНакопительнаяЕНВД КАК ПФРНакопительнаяЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ФСС КАК ФСС,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ФФОМС КАК ФФОМС,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ТФОМС КАК ТФОМС,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРПоДополнительномуТарифу КАК ПФРНаДоплатуЛетчикам,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ФССЕНВД КАК ФССЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ФФОМСЕНВД КАК ФФОМСЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ТФОМСЕНВД КАК ТФОМСЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРНаДоплатуКПенсииШахтерам КАК ПФРНаДоплатуШахтерам,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК МесяцНачисления,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка.Проведен,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРПоСуммарномуТарифу,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРПоСуммарномуТарифуЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРДоПредельнойВеличины,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРДоПредельнойВеличиныЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРСПревышения,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ПФРСПревышенияЕНВД,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.ДатаПолученияДохода
	|ИЗ
	|	Документ.УдалитьРасчетЕСН.ИсчисленныеСтраховыеВзносы КАК УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачислений КАК ПериодыНачислений
	|		ПО УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка.Организация = ПериодыНачислений.Организация
	|			И (НАЧАЛОПЕРИОДА(УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) = ПериодыНачислений.МесяцНачисления)
	|			И УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка.Проведен = ПериодыНачислений.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	МесяцНачисления,
	|	ПериодыНачислений.Проведен,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.Ссылка,
	|	УдалитьРасчетЕСНИсчисленныеСтраховыеВзносы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации, МЕСЯЦ) КАК МесяцНачисления,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Проведен КАК Проведен
	|ИЗ
	|	ВТПериодыНачислений КАК ПериодыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций КАК УдалитьНачислениеЗарплатыРаботникамОрганизаций
	|		ПО (НАЧАЛОПЕРИОДА(ПериодыНачислений.МесяцНачисления, МЕСЯЦ) = НАЧАЛОПЕРИОДА(УдалитьНачислениеЗарплатыРаботникамОрганизаций.ПериодРегистрации, МЕСЯЦ))
	|			И ПериодыНачислений.Организация = УдалитьНачислениеЗарплатыРаботникамОрганизаций.Организация
	|			И ПериодыНачислений.Проведен = УдалитьНачислениеЗарплатыРаботникамОрганизаций.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьРасчетЕСН.Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьРасчетЕСН.ПериодРегистрации, МЕСЯЦ),
	|	УдалитьРасчетЕСН.Ссылка,
	|	УдалитьРасчетЕСН.Проведен
	|ИЗ
	|	ВТПериодыНачислений КАК ПериодыНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьРасчетЕСН КАК УдалитьРасчетЕСН
	|		ПО (НАЧАЛОПЕРИОДА(ПериодыНачислений.МесяцНачисления, МЕСЯЦ) = НАЧАЛОПЕРИОДА(УдалитьРасчетЕСН.ПериодРегистрации, МЕСЯЦ))
	|			И ПериодыНачислений.Организация = УдалитьРасчетЕСН.Организация
	|			И ПериодыНачислений.Проведен = УдалитьРасчетЕСН.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	МесяцНачисления,
	|	Проведен";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатыЗапроса[1].Выбрать();
	ВыборкаПоНачислениям = РезультатыЗапроса[2].Выбрать();
	ВыборкаПоНДФЛ = РезультатыЗапроса[3].Выбрать();
	ВыборкаПоВзносам = РезультатыЗапроса[4].Выбрать();
	ВыборкаПоДокументамПериода = РезультатыЗапроса[5].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		КлючДанныхДокумента = Новый Структура("Организация, МесяцНачисления, Проведен", ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.МесяцНачисления, ВыборкаПоДокументам.Проведен);
		
		ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаНачислениеЗП();
		
		ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
		ДанныеВыгружаемогоДокумента.МесяцНачисления = ВыборкаПоДокументам.МесяцНачисления;
		ДанныеВыгружаемогоДокумента.Дата = КонецМесяца(ВыборкаПоДокументам.МесяцНачисления);
		ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
		ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
		
		ВписатьНачисленияВВыгружаемыеДанныеДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениям, КлючДанныхДокумента);
		
		ВписатьНДФЛВВыгружаемыеДанныеДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоНДФЛ, КлючДанныхДокумента);
		
		ВписатьВзносыВВыгружаемыеДанныеДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоВзносам, КлючДанныхДокумента);
		
		НачатьТранзакцию();
		
		НовыйРегистраторСсылка = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
		
		НовыйРегистраторОбъект = НовыйРегистраторСсылка.ПолучитьОбъект();
		
		ВыборкаПоДокументамПериода.Сбросить();
		СписокДокументов = СписокДокументовПоКлючуДанныхДокумента(КлючДанныхДокумента, ВыборкаПоДокументамПериода);
		
		Для Каждого КонвертируемыйДокумент Из СписокДокументов Цикл
			Результат.Вставить(КонвертируемыйДокумент, НовыйРегистраторСсылка);
		КонецЦикла;
		
		КонвертироватьДвиженияДокументовНачисленияЗарплаты(ДанныеВыгружаемогоДокумента.Организация, ДанныеВыгружаемогоДокумента.МесяцНачисления, СписокДокументов, НовыйРегистраторОбъект, СоответствиеКонвертированныхОбъектов);
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ПередЗаписьюДокументаНачислениеЗарплаты(ДокументОбъект)
	ДокументОбъект.УстановитьНовыйНомер();	
КонецПроцедуры	

Процедура КонвертироватьДвиженияДокументовНачисленияЗарплаты(Организация, ПериодРегистрации, СписокДокументов, НовыйРегистратор, СоответствиеКонвертированныхОбъектов)
	
	//НачисленияУдержанияПоСотрудникам - перенос данных о начислениях
	КонвертироватьДанныеУчетаНачислений(СписокДокументов, НовыйРегистратор, СоответствиеКонвертированныхОбъектов);
	
	
	// СведенияОДоходахНДФЛ
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям();
	
	КлючПорцииДанных = Новый Структура("Регистратор", СписокДокументов);
	
	КонвертироватьПорциюДанныхУчетаДоходовНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Ложь, Истина, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхИмущественныхВычетахНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхСтандартныхВычетахНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхАвансовыеПлатежиИностранцевПоНДФЛ(
		КлючПорцииДанных, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор);

	КонвертироватьПорциюДанныхРасчетыНалогоплательщиковНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор, Истина);
	
	КонвертироватьНДФЛУдержанныйПропорциональноВыплатам(СписокДокументов, Организация, ПериодРегистрации, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьРасчетыНалоговыхАгентовНДФЛПропорциональноВыплатам(СписокДокументов, Организация, ПериодРегистрации, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов);
	
	СотрудникиОрганизация = Новый Соответствие;
	
	КонверитроватьПорциюДанныхУчетаВзаиморасчетов(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, СотрудникиОрганизация, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхРасчетыСФондамиПоСтраховымВзносам(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьИсчисленныеСтраховыеВзносы(СоответствиеКонвертированныхОбъектов, СписокДокументов, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхОДоходахДляСтраховыхВзносов(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
КонецПроцедуры	

Процедура ВписатьНачисленияВВыгружаемыеДанныеДокумента(ВыгружаемыеДанные, ВыборкаПоНачислениям, КлючДанныхДокумента)
	НачислениеРайонныйКоэффициент = ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент();
	НачислениеСевернаяНадбавка = ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка();
	
	ВыборкаПоНачислениям.Сбросить();
	Если ВыборкаПоНачислениям.НайтиСледующий(КлючДанныхДокумента) Тогда
		Для Каждого КлючПоиска Из КлючДанныхДокумента Цикл
			ВыборкаПоНачислениям.СледующийПоЗначениюПоля(КлючПоиска.Ключ);
		КонецЦикла;	
		
		Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Ссылка") Цикл

			Пока ВыборкаПоНачислениям.Следующий() Цикл
				СтрокаНачислений = ВыгружаемыеДанные.Начисления.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаПоНачислениям);
				
				СтрокаНачислений.Результат = ВыборкаПоНачислениям.Результат - ВыборкаПоНачислениям.РайонныйКоэффициент - ВыборкаПоНачислениям.СевернаяНадбавка; 
				
				Если ВыборкаПоНачислениям.РайонныйКоэффициент <> 0 Тогда
					СтрокаНачислений = ВыгружаемыеДанные.Начисления.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаПоНачислениям);
					
					СтрокаНачислений.Начисление = НачислениеРайонныйКоэффициент;
					
					СтрокаНачислений.Результат = ВыборкаПоНачислениям.РайонныйКоэффициент;
					СтрокаНачислений.КодВычета = Неопределено;
					СтрокаНачислений.СуммаВычета = 0;
				КонецЕсли;
				
				Если ВыборкаПоНачислениям.СевернаяНадбавка <> 0 Тогда
					СтрокаНачислений = ВыгружаемыеДанные.Начисления.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаПоНачислениям);
					
					СтрокаНачислений.Начисление = НачислениеСевернаяНадбавка;
					
					СтрокаНачислений.Результат = ВыборкаПоНачислениям.СевернаяНадбавка;
					СтрокаНачислений.КодВычета = Неопределено;
					СтрокаНачислений.СуммаВычета = 0;
				КонецЕсли;	

			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры	

Процедура ВписатьНДФЛВВыгружаемыеДанныеДокумента(ВыгружаемыеДанные, ВыборкаПоНДФЛ, КлючДанныхДокумента)
	
	ВыборкаПоНДФЛ.Сбросить();
	ИдентификаторСтрокиНДФЛ = 0;
	Если ВыборкаПоНДФЛ.НайтиСледующий(КлючДанныхДокумента) Тогда
		Для Каждого КлючПоиска Из КлючДанныхДокумента Цикл
			ВыборкаПоНДФЛ.СледующийПоЗначениюПоля(КлючПоиска.Ключ);
		КонецЦикла;	
		
		Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("Ссылка") Цикл
			ЛичныеВычетыНФДЛ = ЛичныеВычетыНФДЛ(ВыборкаПоНДФЛ.Ссылка);
			
			Пока ВыборкаПоНДФЛ.Следующий() Цикл
			
				СтрокаНДФЛ = ВыгружаемыеДанные.НДФЛ.Добавить();
				
				СтрокаНДФЛ.ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ;
				
				ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, ВыборкаПоНДФЛ, , "ПримененныйВычетЛичный");
				
				ВычетыПоСтроке = ЛичныеВычетыНФДЛ[ВыборкаПоНДФЛ.НомерСтроки];
			
				Если ВычетыПоСтроке <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, ВычетыПоСтроке, "ПримененныйВычетЛичный, ПримененныйВычетЛичныйКодВычета, ПримененныйВычетЛичныйКЗачетуВозврату, ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета");	
				КонецЕсли;
				
				ВписатьПримененныеВычетыВВыгружаемыеДанныеДокументы(ВыгружаемыеДанные, ВыборкаПоНДФЛ, ИдентификаторСтрокиНДФЛ);
				
				ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ + 1;

			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	
			
КонецПроцедуры	

Процедура ВписатьВзносыВВыгружаемыеДанныеДокумента(ВыгружаемыеДанные, ВыборкаПоВзносам, КлючДанныхДокумента)
	ВыборкаПоВзносам.Сбросить();
	Если ВыборкаПоВзносам.НайтиСледующий(КлючДанныхДокумента) Тогда
		Для Каждого КлючПоиска Из КлючДанныхДокумента Цикл
			ВыборкаПоВзносам.СледующийПоЗначениюПоля(КлючПоиска.Ключ);
		КонецЦикла;	
		
		Пока ВыборкаПоВзносам.СледующийПоЗначениюПоля("Ссылка") Цикл

			Пока ВыборкаПоВзносам.Следующий() Цикл
				СтрокаВзносы = ВыгружаемыеДанные.Взносы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВзносы, ВыборкаПоВзносам);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВписатьПримененныеВычетыВВыгружаемыеДанныеДокументы(ВыгружаемыеДанные, ВыборкаПоНДФЛ, ИдентификаторСтрокиНДФЛ)
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаДетей <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаДетей, Справочники.ВидыВычетовНДФЛ.Код108, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаДетейДвойной <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаДетейДвойной, Справочники.ВидыВычетовНДФЛ.Код110, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаДетейДвойнойВторой <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаДетейДвойнойВторой, Справочники.ВидыВычетовНДФЛ.Код111, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаВторогоРебенка <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаВторогоРебенка, Справочники.ВидыВычетовНДФЛ.Код115, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной, Справочники.ВидыВычетовНДФЛ.Код119, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой, Справочники.ВидыВычетовНДФЛ.Код123, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;	
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаТретьегоРебенка <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаТретьегоРебенка, Справочники.ВидыВычетовНДФЛ.Код116, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной, Справочники.ВидыВычетовНДФЛ.Код120, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой, Справочники.ВидыВычетовНДФЛ.Код124, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаДетейИнвалидов <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаДетейИнвалидов, Справочники.ВидыВычетовНДФЛ.Код109, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной, Справочники.ВидыВычетовНДФЛ.Код112, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой, Справочники.ВидыВычетовНДФЛ.Код113, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетИмущественныйРасходы <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетИмущественныйРасходы, Справочники.ВидыВычетовНДФЛ.Код311, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам, Справочники.ВидыВычетовНДФЛ.Код312, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
	Если ВыборкаПоНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании <> 0 Тогда
		ДобавитьСтрокуВычетов(ВыгружаемыеДанные.ПримененныеВычетыНаДетейИИмущественные, ВыборкаПоНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании, Справочники.ВидыВычетовНДФЛ.Код318, ИдентификаторСтрокиНДФЛ);
	КонецЕсли;
КонецПроцедуры	

Процедура ДобавитьСтрокуВычетов(Вычеты, РазмерВычета, КодВычета, ИдентификаторСтрокиНДФЛ)
	СтрокаВычета = Вычеты.Добавить();
	
	СтрокаВычета.ИдентификаторСтрокиНДФЛ = ИдентификаторСтрокиНДФЛ;
	СтрокаВычета.КодВычета = КодВычета;
	СтрокаВычета.РазмерВычета = РазмерВычета
КонецПроцедуры	

Функция ЛичныеВычетыНФДЛ(Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СтрокиНДФЛ.Ссылка.Организация
	|		ИНАЧЕ СтрокиНДФЛ.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	СтрокиНДФЛ.ФизЛицо КАК ФизЛицо,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|ГДЕ
	|	СтрокиНДФЛ.Ссылка = &ДокументСсылка
	|	И СтрокиНДФЛ.ПримененныйВычетЛичный <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НомерСтроки КАК НомерСтроки,
	|	ВычетыФизлиц.КодВычетаЛичный КАК КодВычетаЛичный
	|ПОМЕСТИТЬ ВТКодыЛичныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		Периоды.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ВТДанныеДокумента КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО Периоды.МесяцНалоговогоПериода >= ВычетыФизлиц.Период
	|				И Периоды.ФизЛицо = ВычетыФизлиц.Физлицо
	|	ГДЕ
	|		Периоды.ПримененныйВычетЛичный <> 0
	|		И ВычетыФизлиц.КодВычетаЛичный <> ЗНАЧЕНИЕ(Справочник.УдалитьВычетыНДФЛ.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.НомерСтроки) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ДатыРегистра.ФизЛицо = ВычетыФизлиц.Физлицо
	|			И ДатыРегистра.ПериодСреза = ВычетыФизлиц.Период
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ГОД(ДанныеДокумента.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	СУММА(ДанныеДокумента.ПримененныйВычетЛичный) КАК ПримененныйВычетСторно,
	|	МАКСИМУМ(ДанныеДокумента.МесяцНалоговогоПериода) КАК МаксимальныйМесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТОтрицательныеВычетыЗаГод
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО ДанныеДокумента.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ГОД(ДанныеДокумента.МесяцНалоговогоПериода)
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеДокумента.ПримененныйВычетЛичный) < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод КАК НалоговыйПериод,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета,
	|	СУММА(НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПримененныйВычет) КАК РанееПримененныйВычет
	|ПОМЕСТИТЬ ВТУжеПредоставленныеВычеты
	|ИЗ
	|	ВТОтрицательныеВычетыЗаГод КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК НДФЛПредоставленныеСтандартныеВычетыФизЛиц
	|		ПО ДанныеДокумента.ФизЛицо = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо
	|			И ДанныеДокумента.ГоловнаяОрганизация = НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация
	|			И (НДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(ДанныеДокумента.МаксимальныйМесяцНалоговогоПериода, ГОД) И КОНЕЦПЕРИОДА(ДанныеДокумента.МаксимальныйМесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета В (ЗНАЧЕНИЕ(Справочник.УдалитьВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.УдалитьВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.УдалитьВычетыНДФЛ.Код105))
	|	И НДФЛПредоставленныеСтандартныеВычетыФизЛиц.Регистратор <> &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод,
	|	ДанныеДокумента.ПримененныйВычетСторно,
	|	НДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ФизЛицо КАК ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТЕстьРанееПредоставленныеВычеты
	|ИЗ
	|	ВТОтрицательныеВычетыЗаГод КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУжеПредоставленныеВычеты КАК СтандартныеВычеты
	|		ПО ДанныеДокумента.ФизЛицо = СтандартныеВычеты.ФизЛицо
	|			И ДанныеДокумента.НалоговыйПериод = СтандартныеВычеты.НалоговыйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ФизЛицо,
	|	ДанныеДокумента.НалоговыйПериод,
	|	ДанныеДокумента.ПримененныйВычетСторно
	|
	|ИМЕЮЩИЕ
	|	СУММА(СтандартныеВычеты.РанееПримененныйВычет) >= -ДанныеДокумента.ПримененныйВычетСторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьРанееПредоставленныеВычеты КАК СторнируемыеВычеты
	|		ПО СтрокиНДФЛ.ФизЛицо = СторнируемыеВычеты.ФизЛицо
	|			И (ГОД(СтрокиНДФЛ.МесяцНалоговогоПериода) = СторнируемыеВычеты.НалоговыйПериод)
	|ГДЕ
	|	СторнируемыеВычеты.ФизЛицо ЕСТЬ NULL 
	|	И ВычетыФизлиц.КодВычетаЛичный ЕСТЬ NULL 
	|	И СтрокиНДФЛ.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиНДФЛ.НомерСтроки КАК НомерСтроки,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СтрокиНДФЛ.ПримененныйВычетЛичный,
	|	ВычетыФизлиц.КодВычетаЛичный КАК КодВычетаЛичный,
	|	СтрокиНДФЛ.ФизЛицо,
	|	СтрокиНДФЛ.ПодразделениеОрганизации
	|ИЗ
	|	ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыЛичныхВычетов КАК ВычетыФизлиц
	|		ПО СтрокиНДФЛ.НомерСтроки = ВычетыФизлиц.НомерСтроки
	|ГДЕ
	|	ВычетыФизлиц.КодВычетаЛичный ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СторнируемыеВычеты.ФизЛицо КАК ФизЛицо,
	|	СторнируемыеВычеты.НалоговыйПериод КАК НалоговыйПериод,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(СтрокиНДФЛ.ПримененныйВычетЛичный) КАК ПримененныйВычетЛичный,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	СтрокиНДФЛ.НомерСтроки
	|ИЗ
	|	ВТЕстьРанееПредоставленныеВычеты КАК СторнируемыеВычеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК СтрокиНДФЛ
	|		ПО (ГОД(СтрокиНДФЛ.МесяцНалоговогоПериода) = СторнируемыеВычеты.НалоговыйПериод)
	|			И СторнируемыеВычеты.ФизЛицо = СтрокиНДФЛ.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СторнируемыеВычеты.ФизЛицо,
	|	СтрокиНДФЛ.МесяцНалоговогоПериода,
	|	СторнируемыеВычеты.НалоговыйПериод,
	|	СтрокиНДФЛ.ПодразделениеОрганизации,
	|	СтрокиНДФЛ.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУжеПредоставленныеВычеты.ФизЛицо КАК ФизЛицо,
	|	ВТУжеПредоставленныеВычеты.НалоговыйПериод КАК НалоговыйПериод,
	|	ВТУжеПредоставленныеВычеты.КодВычета,
	|	ВТУжеПредоставленныеВычеты.РанееПримененныйВычет
	|ИЗ
	|	ВТУжеПредоставленныеВычеты КАК ВТУжеПредоставленныеВычеты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НалоговыйПериод";
	
	ЛичныеВычетыПоСтрокам = Новый Соответствие();
	
	ПоляСтруктурыЛичныеВычеты = "ПримененныйВычетЛичный, ПримененныйВычетЛичныйКодВычета, ПримененныйВычетЛичныйКЗачетуВозврату, ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();	
	
	ВыборкаПоНДФЛ = МассивРезультатов[6].Выбрать();
	Пока ВыборкаПоНДФЛ.Следующий() Цикл 
		ЛичныеВычеты = ЛичныеВычетыПоСтрокам[ВыборкаПоНДФЛ.НомерСтроки];
				
		Если ЛичныеВычеты = Неопределено Тогда
			ЛичныеВычеты = Новый Структура(ПоляСтруктурыЛичныеВычеты);
			ЛичныеВычетыПоСтрокам.Вставить(ВыборкаПоНДФЛ.НомерСтроки, ЛичныеВычеты);
		КонецЕсли;	
		
		ЛичныеВычеты.ПримененныйВычетЛичный = ВыборкаПоНДФЛ.ПримененныйВычетЛичный;
		ЛичныеВычеты.ПримененныйВычетЛичныйКодВычета = ВыборкаПоНДФЛ.КодВычетаЛичный;
		
	КонецЦикла;
	ВыборкаПоНДФЛ = МассивРезультатов[7].Выбрать();
	ТаблицаВычетов = МассивРезультатов[8].Выгрузить();
	СтруктураПоиска = Новый Структура("ФизЛицо","НалоговыйПериод");
	Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("ФизЛицо") Цикл 
		Пока ВыборкаПоНДФЛ.СледующийПоЗначениюПоля("НалоговыйПериод") Цикл 
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаПоНДФЛ);
			СтрокиВычетов = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска);
			Пока ВыборкаПоНДФЛ.Следующий() Цикл 
				ОстатокВычета = ВыборкаПоНДФЛ.ПримененныйВычетЛичный;
				Пока (ОстатокВычета < 0) И (СтрокиВычетов.Количество()) Цикл
					СуммаВычета = -Мин(-ВыборкаПоНДФЛ.ПримененныйВычетЛичный, СтрокиВычетов[0].РанееПримененныйВычет);
					
					ЛичныеВычеты = ЛичныеВычетыПоСтрокам[ВыборкаПоНДФЛ.НомерСтроки];
				
					Если ЛичныеВычеты = Неопределено Тогда
						ЛичныеВычеты = Новый Структура(ПоляСтруктурыЛичныеВычеты);
						ЛичныеВычетыПоСтрокам.Вставить(ВыборкаПоНДФЛ.НомерСтроки, ЛичныеВычеты);
					КонецЕсли;	
					
					ЛичныеВычеты.ПримененныйВычетЛичный = СуммаВычета;
					ЛичныеВычеты.ПримененныйВычетЛичныйКодВычета = СтрокиВычетов[0].КодВычета;

					ОстатокВычета = ОстатокВычета - СуммаВычета;
					СтрокиВычетов[0].РанееПримененныйВычет = СтрокиВычетов[0].РанееПримененныйВычет + СуммаВычета;	
					Если СтрокиВычетов[0].РанееПримененныйВычет = 0 Тогда
						СтрокиВычетов.Удалить(0)
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат ЛичныеВычетыПоСтрокам;
КонецФункции	

Функция СписокДокументовПоКлючуДанныхДокумента(КлючДанныхДокумента, ВыборкаДокументов)
	СписокДокументов = Новый Массив;
	
	ВыборкаДокументов.Сбросить();
	Если ВыборкаДокументов.НайтиСледующий(КлючДанныхДокумента) Тогда
		Для Каждого КлючПоиска Из КлючДанныхДокумента Цикл
			ВыборкаДокументов.СледующийПоЗначениюПоля(КлючПоиска.Ключ);
		КонецЦикла;	
		
		Пока ВыборкаДокументов.Следующий() Цикл
			СписокДокументов.Добавить(ВыборкаДокументов.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокДокументов
	
КонецФункции	

Функция СтруктураДанныхДокументаНачислениеЗП()
	
	ДанныеВыгружаемогоДокумента = Новый Структура("Организация, МесяцНачисления, Проведен, Дата, Ссылка, Начисления, НДФЛ, ПримененныеВычетыНаДетейИИмущественные, Взносы");
	
	ДанныеВыгружаемогоДокумента.Начисления = Новый ТаблицаЗначений;
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("Сотрудник");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("Подразделение");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("Начисление");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("Результат");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("ОтработаноДней");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("ОтработаноЧасов");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("КодВычета");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("СуммаВычета");
	ДанныеВыгружаемогоДокумента.Начисления.Колонки.Добавить("ПланируемаяДатаВыплаты");
	
	ДанныеВыгружаемогоДокумента.НДФЛ = Новый ТаблицаЗначений;
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("ФизическоеЛицо");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("МесяцНалоговогоПериода");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("Подразделение");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("Налог");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("НалогКЗачетуВозврату");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("ПримененныйВычетЛичный");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКодВычета");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКЗачетуВозврату");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета");
	ДанныеВыгружаемогоДокумента.НДФЛ.Колонки.Добавить("ИдентификаторСтрокиНДФЛ");

	
	ДанныеВыгружаемогоДокумента.ПримененныеВычетыНаДетейИИмущественные = Новый ТаблицаЗначений;
	ДанныеВыгружаемогоДокумента.ПримененныеВычетыНаДетейИИмущественные.Колонки.Добавить("КодВычета");
	ДанныеВыгружаемогоДокумента.ПримененныеВычетыНаДетейИИмущественные.Колонки.Добавить("РазмерВычета");
	ДанныеВыгружаемогоДокумента.ПримененныеВычетыНаДетейИИмущественные.Колонки.Добавить("ИдентификаторСтрокиНДФЛ");
	

	ДанныеВыгружаемогоДокумента.Взносы = Новый ТаблицаЗначений;
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ФизическоеЛицо");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ФФОМС");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ФФОМСЕНВД");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ТФОМС");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ТФОМСЕНВД");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ФСС");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ФССЕНВД");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ФССНесчастныеСлучаи");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРНакопительная");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРНакопительнаяЕНВД");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРСтраховая");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРСтраховаяЕНВД");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРНаДоплатуЛетчикам");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРНаДоплатуШахтерам");
	
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРПоСуммарномуТарифу");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРПоСуммарномуТарифуЕНВД");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРДоПредельнойВеличины");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРДоПредельнойВеличиныЕНВД");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРСПревышения");
	ДанныеВыгружаемогоДокумента.Взносы.Колонки.Добавить("ПФРСПревышенияЕНВД");
	
	Возврат ДанныеВыгружаемогоДокумента;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////
// АВАНСОВЫЕ ПЛАТЕЖИ ИНОСТРАНИЦЕВ

Функция СписокДокументовАвансовыйПлатежИностранцаПоНДФЛ() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвансовыйПлатежИностранцаПоНДФЛ.Ссылка
	|ИЗ
	|	Документ.УдалитьАвансовыйПлатежИностранцаПоНДФЛ КАК АвансовыйПлатежИностранцаПоНДФЛ
	|ГДЕ
	|	НЕ АвансовыйПлатежИностранцаПоНДФЛ.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокДокументов;
КонецФункции

Функция КонвертироватьДокументыАвансовыйПлатежИностранцаПоНДФЛ(СписокДокументов, СоответствиеКонвертированныхОбъектов) Экспорт
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям(); 
	
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Ссылка КАК КонвертируемыйДокумент,
	|	АвансовыйПлатежИностранцаПоНДФЛ.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьАвансовыйПлатежИностранцаПоНДФЛ КАК УдалитьАвансовыйПлатежИностранцаПоНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйПлатежИностранцаПоНДФЛ КАК АвансовыйПлатежИностранцаПоНДФЛ
	|		ПО УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Дата = АвансовыйПлатежИностранцаПоНДФЛ.Дата
	|			И (ПОДСТРОКА(УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Номер, 1, 100) = ПОДСТРОКА(АвансовыйПлатежИностранцаПоНДФЛ.Номер, 1, 100))
	|			И (УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Ссылка В (&СписокДокументов))
	|			И (НЕ АвансовыйПлатежИностранцаПоНДФЛ.ПометкаУдаления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Ссылка,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Номер,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Дата,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Проведен,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.ДатаОперации,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.НалоговыйПериод,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Организация,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Сотрудник,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Сумма,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Ответственный,
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Комментарий
	|ИЗ
	|	Документ.УдалитьАвансовыйПлатежИностранцаПоНДФЛ КАК УдалитьАвансовыйПлатежИностранцаПоНДФЛ
	|ГДЕ
	|	УдалитьАвансовыйПлатежИностранцаПоНДФЛ.Ссылка В(&СписокДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СотрудникиОрганизаций = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаАвансовыйПлатежИностранцаПоНДФЛ();
		
		ЗаполнитьЗначенияСвойств(ДанныеВыгружаемогоДокумента, Выборка);
				
		НачатьТранзакцию();
		
		НовыйРегистратор = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
		
		Результат.Вставить(Выборка.Ссылка, НовыйРегистратор); 
				
		Если ДанныеВыгружаемогоДокумента.Проведен Тогда
			 КонвертироватьДвиженияДокументовАвансовыйПлатежИностранцаПоНДФЛ(
			 	Выборка.Ссылка,
				СоответствиеВладельцевРегистрациям,
				СоответствиеКонвертированныхОбъектов,
				НовыйРегистратор.ПолучитьОбъект());
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция СтруктураДанныхДокументаАвансовыйПлатежИностранцаПоНДФЛ()
	СтруктураДокумента = Новый Структура();
	
	СтруктураДокумента.Вставить("Ссылка");
	СтруктураДокумента.Вставить("Дата");
	СтруктураДокумента.Вставить("Номер");
	СтруктураДокумента.Вставить("Проведен");
	СтруктураДокумента.Вставить("ДатаОперации");
	СтруктураДокумента.Вставить("НалоговыйПериод");
	СтруктураДокумента.Вставить("Организация");
	СтруктураДокумента.Вставить("Сотрудник");
	СтруктураДокумента.Вставить("Сумма");
	СтруктураДокумента.Вставить("Ответственный");
	СтруктураДокумента.Вставить("Комментарий");;
	
	Возврат СтруктураДокумента;
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовАвансовыйПлатежИностранцаПоНДФЛ()Экспорт
	
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
    СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("ДатаОперации", "ДатаОперации");
	СоответствиеРеквизитов.Вставить("НалоговыйПериод", "НалоговыйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("Сумма", "Сумма");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");

	Возврат СоответствиеРеквизитов;
КонецФункции

Процедура КонвертироватьДвиженияДокументовАвансовыйПлатежИностранцаПоНДФЛ(Регистратор, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, НовыйРегистратор) 
	КлючПорцииДанных = Новый Структура("Регистратор,", Регистратор.Ссылка);
	
	КонвертироватьПорциюДанныхАвансовыеПлатежиИностранцевПоНДФЛ(
		КлючПорцииДанных,
		СоответствиеВладельцевРегистрациям,
		СоответствиеКонвертированныхОбъектов,
		Ложь,
		НовыйРегистратор);
		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАРПЛАТА К ВЫПЛАТЕ

Функция СписокДокументовЗарплатаКВыплате()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|ГДЕ
	|	НЕ ВедомостьНаВыплатуЗарплаты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыЗарплатаКВыплате(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка КАК КонвертируемыйДокумент,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО ВедомостьНаВыплатуЗарплаты.Дата = ВедомостьНаВыплатуЗарплатыВБанк.Дата
	|			И (ПОДСТРОКА(ВедомостьНаВыплатуЗарплаты.Номер, 1, 100) = ПОДСТРОКА(ВедомостьНаВыплатуЗарплатыВБанк.Номер, 1, 100))
	|			И (ВедомостьНаВыплатуЗарплаты.УдалитьСпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк))
	|			И (ВедомостьНаВыплатуЗарплаты.Ссылка В (&СписокДокументов))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|		ПО ВедомостьНаВыплатуЗарплаты.Дата = ВедомостьНаВыплатуЗарплатыВКассу.Дата
	|			И (ПОДСТРОКА(ВедомостьНаВыплатуЗарплаты.Номер, 1, 100) = ПОДСТРОКА(ВедомостьНаВыплатуЗарплатыВКассу.Номер, 1, 100))
	|			И (ВедомостьНаВыплатуЗарплаты.УдалитьСпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу))
	|			И (ВедомостьНаВыплатуЗарплаты.Ссылка В (&СписокДокументов))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	

	РасчетныеДокументыПоВедомостям = РасчетныеДокументыПоВедомостям(НеконвертированныеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплаты.Номер,
	|	ВедомостьНаВыплатуЗарплаты.Дата,
	|	ВедомостьНаВыплатуЗарплаты.Организация,
	|	НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплаты.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	ВедомостьНаВыплатуЗарплаты.УдалитьСпособВыплаты КАК МестоВыплаты,
	|	ВедомостьНаВыплатуЗарплаты.Ответственный,
	|	ВедомостьНаВыплатуЗарплаты.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СотрудникиОрганизаций = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаВыплаты(Выборка.МестоВыплаты);
		
		ЗаполнитьЗначенияСвойств(ДанныеВыгружаемогоДокумента, Выборка);
		
		ДанныеВыгружаемогоДокумента.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
		
		ДанныеВыгружаемогоДокумента.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
		
		ВписатьДанныеОВыплатеВВыгружаемыеДанныеДокумента(ДанныеВыгружаемогоДокумента, СотрудникиОрганизаций);
		
		СписокРегистраторовВзаиморасчетов = РасчетныеДокументыПоВедомостям[Выборка.Ссылка];
		
		Если СписокРегистраторовВзаиморасчетов <> Неопределено 
			И СписокРегистраторовВзаиморасчетов.Количество() > 0 Тогда
			
			ДанныеВыгружаемогоДокумента.Проведен = Истина;
			
		Иначе	
			ДанныеВыгружаемогоДокумента.Проведен = Ложь;	
		КонецЕсли;	
		
		НачатьТранзакцию();
		
		НовыйРегистратор = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
		
		Результат.Вставить(Выборка.Ссылка, НовыйРегистратор); 
				
		Если ДанныеВыгружаемогоДокумента.Проведен Тогда
			ФизическиеЛицаДокумента = ДанныеВыгружаемогоДокумента.Зарплата.ВыгрузитьКолонку("ФизическоеЛицо");
			
			КонвертироватьДвиженияВедомостиПоВзаиморасчетам(
				СписокРегистраторовВзаиморасчетов, 
				НовыйРегистратор.ПолучитьОбъект(), 
				СоответствиеКонвертированныхОбъектов, 
				ФизическиеЛицаДокумента);
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Процедура КонвертироватьДвиженияВедомостиПоВзаиморасчетам(СписокДокументов, НовыйРегистратор, СоответствиеКонвертированныхОбъектов, СписокФизическихЛиц)
	
	КлючПорцииДанных = Новый Структура("Регистратор, Физлицо, ПериодВзаиморасчетов", СписокДокументов, СписокФизическихЛиц, НовыйРегистратор.ПериодРегистрации);
	
	СотрудникиОрганизация = Новый Соответствие;
	
	КонверитроватьПорциюДанныхУчетаВзаиморасчетов(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, СотрудникиОрганизация, Ложь, НовыйРегистратор);
	
КонецПроцедуры	

Процедура ВписатьДанныеОВыплатеВВыгружаемыеДанныеДокумента(ВыгружаемыеДанныеДокумента, СотрудникиОрганизаций)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ВыгружаемыеДанныеДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", ВыгружаемыеДанныеДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодРаспределения", НачалоМесяца(ВыгружаемыеДанныеДокумента.ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.НомерСтроки КАК НомерСтроки,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Сумма,
	|	ВедомостьНаВыплатуЗарплатыЗарплата.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТЗарплата
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты.Зарплата КАК ВедомостьНаВыплатуЗарплатыЗарплата
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыЗарплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Зарплата.ФизическоеЛицо КАК ФизЛицо,
	|	&Организация КАК Организация,
	|	&ПериодРаспределения КАК ПериодРаспределения
	|ПОМЕСТИТЬ ВТФизЛицаДляРаспределения
	|ИЗ
	|	ВТЗарплата КАК Зарплата";
		
	Запрос.Выполнить();

	КлючБазыРаспределения = Новый Структура("Период, Организация", НачалоМесяца(ВыгружаемыеДанныеДокумента.ПериодРегистрации), ВыгружаемыеДанныеДокумента.Организация);
	
	СформироватьВТСБазойРаспределенияПоНачислениям(Запрос.МенеджерВременныхТаблиц, КлючБазыРаспределения, Истина, Истина);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Зарплата.НомерСтроки КАК НомерСтроки,
	|	Зарплата.Сумма КАК СуммаКРаспределению,
	|	Зарплата.ФизическоеЛицо,
	|	БазаРаспределенияПоНачислениям.Сотрудник,
	|	БазаРаспределенияПоНачислениям.Подразделение,
	|	ЕСТЬNULL(БазаРаспределенияПоНачислениям.БазаРаспределения, 0) КАК БазаРаспределения,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	ВТЗарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаРаспределенияПоНачислениям КАК БазаРаспределенияПоНачислениям
	|		ПО Зарплата.ФизическоеЛицо = БазаРаспределенияПоНачислениям.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Зарплата.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыгружаемыеДанныеДокумента.СуммаПоДокументу = 0;
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СтрокиПоСотруднику = Новый Массив;
		КоэффициентыРаспределения = Новый Массив;
		СуммаКРаспределению = Выборка.СуммаКРаспределению;
		
		Пока Выборка.Следующий() Цикл
			СтрокаДокумента = ВыгружаемыеДанныеДокумента.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, Выборка);
			
			Если Не ЗначениеЗаполнено(СтрокаДокумента.Сотрудник) Тогда
				СтрокаДокумента.Сотрудник = СоздатьНовогоСотрудника(ВыгружаемыеДанныеДокумента.Организация, Выборка.ФизическоеЛицо, Выборка.Наименование, СотрудникиОрганизаций);	
			КонецЕсли;	
			
			КоэффициентыРаспределения.Добавить(Выборка.БазаРаспределения);
			
			СтрокиПоСотруднику.Добавить(СтрокаДокумента);
		КонецЦикла;	
		
		РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, КоэффициентыРаспределения);
		
		Индекс = 0;
		Для Каждого Строка Из СтрокиПоСотруднику Цикл
			Если РаспределенныеСуммы = Неопределено Тогда
				Строка.КВыплате = 0;
			Иначе
				Строка.КВыплате = РаспределенныеСуммы[Индекс];
				
				ВыгружаемыеДанныеДокумента.СуммаПоДокументу = ВыгружаемыеДанныеДокумента.СуммаПоДокументу + Строка.КВыплате;
			КонецЕсли;	
			Индекс = Индекс + 1;							
		КонецЦикла;	
			
	КонецЦикла;	
		
КонецПроцедуры	

Функция СтруктураДанныхДокументаВыплаты(СпособВыплаты)
	СтруктураДокумента = Новый Структура();
	
	СтруктураДокумента.Вставить("Ссылка");
	СтруктураДокумента.Вставить("Дата");
	СтруктураДокумента.Вставить("Номер");
	СтруктураДокумента.Вставить("Проведен");
	СтруктураДокумента.Вставить("ПериодРегистрации");
	СтруктураДокумента.Вставить("Организация");
	СтруктураДокумента.Вставить("Подразделение");
	СтруктураДокумента.Вставить("СпособВыплаты");
	СтруктураДокумента.Вставить("Округление");
	СтруктураДокумента.Вставить("СуммаПоДокументу");
	СтруктураДокумента.Вставить("Ответственный");
	СтруктураДокумента.Вставить("МестоВыплаты");

	Зарплата = Новый ТаблицаЗначений;
	Зарплата.Колонки.Добавить("Сотрудник");
	Зарплата.Колонки.Добавить("ФизическоеЛицо");
	Зарплата.Колонки.Добавить("Подразделение");
	Зарплата.Колонки.Добавить("КВыплате");
	
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		СтруктураДокумента.Вставить("ЗарплатныйПроект");
		Зарплата.Колонки.Добавить("НомерЛицевогоСчета");
    КонецЕсли;	
	
	СтруктураДокумента.Вставить("Зарплата", Зарплата);
	
	Возврат СтруктураДокумента;
КонецФункции	

Функция РасчетныеДокументыПоВедомостям(СписокВедомостей)
	
	РасчетныеДокументыПоВедомостям = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокВедомостей);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.УдалитьВедомость КАК Ведомость,
	|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка,
	|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка.Проведен
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК ВводНачальныхОстатковРасчетыПоЗаработнойПлате
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыПоЗаработнойПлате.УдалитьВедомость В(&СписокДокументов)
	|	И ВводНачальныхОстатковРасчетыПоЗаработнойПлате.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.УдалитьВедомость,
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка,
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.Проведен
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты
	|ГДЕ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.УдалитьВедомость В(&СписокДокументов)
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчета.ПлатежнаяВедомость,
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.Проведен
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ПлатежнаяВедомость В(&СписокДокументов)
	|	И СписаниеСРасчетногоСчета.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.УдалитьВедомость,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.УдалитьВедомость В(&СписокДокументов)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдер.УдалитьПлатежнаяВедомость,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Проведен
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.УдалитьПлатежнаяВедомость В(&СписокДокументов)
	|	И РасходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость,
	|	УдалитьДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка,
	|	УдалитьДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка.Проведен
	|ИЗ
	|	Документ.УдалитьДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК УдалитьДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|ГДЕ
	|	УдалитьДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость В(&СписокДокументов)
	|	И УдалитьДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ведомость") Цикл
		СписокДокументов = Новый Массив;
		
		РасчетныеДокументыПоВедомостям.Вставить(Выборка.Ведомость, СписокДокументов);
		
		Пока Выборка.Следующий() Цикл
			СписокДокументов.Добавить(Выборка.Ссылка);	
		КонецЦикла;	
		
	КонецЦикла;	
		
	Возврат РасчетныеДокументыПоВедомостям;	
КонецФункции	

Функция СоответствиеРеквизитовДокументаВедомость(СпособВыплаты)
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("ПериодРегистрации", "ПериодРегистрации");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитов.Вставить("СпособВыплаты", "СпособВыплаты");
	СоответствиеРеквизитов.Вставить("Округление", "Округление");
	СоответствиеРеквизитов.Вставить("СуммаПоДокументу", "СуммаПоДокументу");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");

	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Зарплата");
	СоответствиеРеквизитовТЧ.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитовТЧ.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитовТЧ.Вставить("КВыплате", "КВыплате");
	
	СоответствиеРеквизитов.Вставить("Зарплата", СоответствиеРеквизитовТЧ);

	Возврат СоответствиеРеквизитов;	
	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////////
// ПРИЕМ НА РАБОТУ

Функция СписокДокументовПриемНаРаботу()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию КАК УдалитьПриемНаРаботуВОрганизацию
	|ГДЕ
	|	НЕ УдалитьПриемНаРаботуВОрганизацию.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыПриемНаРаботу(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент,
	|	ПриемНаРаботу.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ПО УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = ПриемНаРаботу.Сотрудник
	|			И УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема = ПриемНаРаботу.ДатаПриема
	|			И УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен = ПриемНаРаботу.Проведен
	|			И (УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка В (&СписокДокументов))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Номер,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Ответственный,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.УдалитьВидЗанятости КАК ВидЗанятости,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации
	|ГДЕ
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка КАК Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета КАК Начисление,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.Размер
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоНачислениям = РезультатыЗапроса[1].Выбрать(); 
	
	Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаПриемНаРаботу();
			
			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоДокументам.Сотрудник;
			ДанныеВыгружаемогоДокумента.Подразделение = ВыборкаПоДокументам.Подразделение;
			ДанныеВыгружаемогоДокумента.Должность = ВыборкаПоДокументам.Должность;
			ДанныеВыгружаемогоДокумента.ДатаПриема = ВыборкаПоДокументам.ДатаПриема;
			ДанныеВыгружаемогоДокумента.ВидЗанятости = ВыборкаПоДокументам.ВидЗанятости;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоДокументам.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоДокументам.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоДокументам.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоДокументам.ФизическоеЛицо;
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
			ДанныеВыгружаемогоДокумента.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа;
			ДанныеВыгружаемогоДокумента.КоличествоСтавок = 1;

			ВписатьНачисленияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениям);
			
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
			
			КонвертироватьДвиженияПриемаНаРаботу(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов, КонвертированныйДокумент.ПолучитьОбъект());
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	

Процедура ВписатьНачисленияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениям)
	ВыборкаПоНачислениям.Сбросить();
	
	СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);	
	
	Если ВыборкаПоНачислениям.НайтиСледующий(СтруктураПоиска) Тогда
		ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Сотрудник");
		
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			СтрокаНачислений = ДанныеВыгружаемогоДокумента.Начисления.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаПоНачислениям);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

Функция СтруктураДанныхДокументаПриемНаРаботу()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");
	СтруктураДанныхДокумента.Вставить("Сотрудник");
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");
	СтруктураДанныхДокумента.Вставить("Подразделение");
	СтруктураДанныхДокумента.Вставить("Должность");
	СтруктураДанныхДокумента.Вставить("ДатаПриема");
	СтруктураДанныхДокумента.Вставить("ВидЗанятости");
	СтруктураДанныхДокумента.Вставить("Ответственный");
	СтруктураДанныхДокумента.Вставить("Дата");
	СтруктураДанныхДокумента.Вставить("Номер");
	СтруктураДанныхДокумента.Вставить("Проведен");
	СтруктураДанныхДокумента.Вставить("Ссылка");
	СтруктураДанныхДокумента.Вставить("СпособРасчетаАванса");
	СтруктураДанныхДокумента.Вставить("КоличествоСтавок");
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументаПриемНаработу()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитов.Вставить("Должность", "Должность");
	СоответствиеРеквизитов.Вставить("ДатаПриема", "ДатаПриема");
	СоответствиеРеквизитов.Вставить("ВидЗанятости", "ВидЗанятости");
	СоответствиеРеквизитов.Вставить("СпособРасчетаАванса", "СпособРасчетаАванса");
	СоответствиеРеквизитов.Вставить("КоличествоСтавок", "КоличествоСтавок");

	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Начисления");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
		
	СоответствиеРеквизитов.Вставить("Начисления", СоответствиеРеквизитовТЧ);
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвиженияПриемаНаРаботу(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);
	
	КонвертироватьПорциюДанныхКадровойИстории(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	КонверитроватьДанныеОВидеЗанятостиСотрудникаДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
КонецПроцедуры

Процедура ПередЗаписьюКадровогоДокумента(ДокументОбъект, ДанныеДокумента)
	ТипДокументаБП2Строка = "";
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") Тогда
		ТипДокументаБП2Строка = "Прием на работу";
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") Тогда
		ТипДокументаБП2Строка = "Кадровое перемещение";	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") Тогда
		ТипДокументаБП2Строка = "Увольнение";
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда 
		ТипДокументаБП2Строка = "Ввод сведений о плановых начислениях работников организаций";	
	КонецЕсли;	
	
	ДокументОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								 НСТР("ru = 'Преренос документа БП2: %1 № %2 от %3'"),
								 ТипДокументаБП2Строка,
								 ДанныеДокумента.Номер,
								 ДанныеДокумента.Дата);
								 
	ДокументОбъект.УстановитьНовыйНомер();								 
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// КАДРОВОЕ ПЕРЕМЕЩЕНИЕ

Функция СписокДокументовКадровоеПеремещение()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций КАК УдалитьКадровоеПеремещениеОрганизаций
	|ГДЕ
	|	НЕ УдалитьКадровоеПеремещениеОрганизаций.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыКадровоеПеремещение(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент,
	|	КадровыйПеревод.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
	|		ПО УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник = КадровыйПеревод.Сотрудник
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала = КадровыйПеревод.ДатаНачала
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Проведен = КадровыйПеревод.Проведен
	|			И (УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка В (&СписокДокументов))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Дата,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Номер,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Ответственный,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник.УдалитьВидЗанятости КАК ВидЗанятости,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка,
	|	ВЫБОР
	|		КОГДА УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.ОбособленноеПодразделениеКуда = ЗНАЧЕНИЕ(справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Организация
	|		ИНАЧЕ УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.ОбособленноеПодразделениеКуда
	|	КОНЕЦ КАК ОбособленноеПодразделение,
	|	ИСТИНА КАК ИзменитьПодразделениеИДолжность,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДокументыУдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|ГДЕ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка В(&СписокДокументов)";
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТДокументыУдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации", "Сотрудник, Период");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра["Период"] = "ДатаНачала";
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПоследних("УдалитьПлановыеНачисленияРаботниковОрганизаций", 
						Запрос.МенеджерВременныхТаблиц, 
						Истина,
						ОписаниеФильтра,
						,
						"ВТСрезПлановыхНачислений");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Подразделение,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Дата,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Проведен,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Номер,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ответственный,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Организация,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ВидЗанятости,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ОбособленноеПодразделение,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ИзменитьПодразделениеИДолжность,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ФизическоеЛицо
	|ИЗ
	|	ВТДокументыУдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации КАК УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка КАК Ссылка,
	|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисления.ВидРасчетаИзмерение КАК Начисление,
	|	ОсновныеНачисления.Размер КАК Размер,
	|	ОсновныеНачисления.Период,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ФизическоеЛицо,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Организация,
	|	ВЫБОР
	|		КОГДА УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Организация
	|		ИНАЧЕ УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	ВТСрезПлановыхНачислений КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыУдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации КАК УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|		ПО ОсновныеНачисления.Сотрудник = УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	|			И ОсновныеНачисления.Период = УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатыЗапроса[0].Выбрать();
	ТаблицаДвиженийНачислений = РезультатыЗапроса[1].Выгрузить();
	
	Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаКадровоеПеремещение();
			
			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоДокументам.Сотрудник;
			ДанныеВыгружаемогоДокумента.Подразделение = ВыборкаПоДокументам.Подразделение;
			ДанныеВыгружаемогоДокумента.ОбособленноеПодразделение = ВыборкаПоДокументам.ОбособленноеПодразделение;
			ДанныеВыгружаемогоДокумента.Должность = ВыборкаПоДокументам.Должность;
			ДанныеВыгружаемогоДокумента.ДатаНачала = ВыборкаПоДокументам.ДатаНачала;
			ДанныеВыгружаемогоДокумента.ВидЗанятости = ВыборкаПоДокументам.ВидЗанятости;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоДокументам.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоДокументам.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоДокументам.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
			ДанныеВыгружаемогоДокумента.ИзменитьПодразделениеИДолжность = Истина;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоДокументам.ФизическоеЛицо; 
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
			ДанныеВыгружаемогоДокумента.КоличествоСтавок = 1;
			
			НачисленияДокумента = ТаблицаДвиженийНачислений.НайтиСтроки(Новый Структура("Ссылка, Сотрудник", ВыборкаПоДокументам.Ссылка, ВыборкаПоДокументам.Сотрудник));
			Для Каждого СтрокаНачислений Из НачисленияДокумента Цикл
				ЗаполнитьЗначенияСвойств(ДанныеВыгружаемогоДокумента.Начисления.Добавить(), СтрокаНачислений);
			КонецЦикла;
			
			ДанныеВыгружаемогоДокумента.ИзменитьНачисления = ДанныеВыгружаемогоДокумента.Начисления.Количество() > 0;
			
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
			
			Если ВыборкаПоДокументам.Проведен Тогда
				НовыйРегистратор = КонвертированныйДокумент.ПолучитьОбъект();
				КонвертироватьПорциюДанныхКадровойИстории(Новый Структура("Регистратор, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник), СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
				Для Каждого СтрокаНачислений Из НачисленияДокумента Цикл
					ЗаписьПлановогоНачисления = НовыйРегистратор.Движения.ПлановыеНачисления.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьПлановогоНачисления, СтрокаНачислений);
					ЗаписьПлановогоНачисления.Начисление = КонвертироватьДанные(СтрокаНачислений.Начисление, СоответствиеКонвертированныхОбъектов);
				КонецЦикла;
				НовыйРегистратор.Движения.ПлановыеНачисления.Записать();
			КонецЕсли;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СтруктураДанныхДокументаКадровоеПеремещение()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");
	СтруктураДанныхДокумента.Вставить("Сотрудник");
	СтруктураДанныхДокумента.Вставить("Подразделение");
	СтруктураДанныхДокумента.Вставить("ОбособленноеПодразделение");
	СтруктураДанныхДокумента.Вставить("Должность");
	СтруктураДанныхДокумента.Вставить("ДатаНачала");
	СтруктураДанныхДокумента.Вставить("ВидЗанятости");
	СтруктураДанныхДокумента.Вставить("Ответственный");
	СтруктураДанныхДокумента.Вставить("Дата");
	СтруктураДанныхДокумента.Вставить("Номер");
	СтруктураДанныхДокумента.Вставить("Проведен");
	СтруктураДанныхДокумента.Вставить("ИзменитьПодразделениеИДолжность");
	СтруктураДанныхДокумента.Вставить("ИзменитьНачисления");
	СтруктураДанныхДокумента.Вставить("ПричинаПеревода");
	СтруктураДанныхДокумента.Вставить("Ссылка");
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");
	СтруктураДанныхДокумента.Вставить("КоличествоСтавок");
	
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументаКадровоеПеремещение()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитов.Вставить("ОбособленноеПодразделение", "ОбособленноеПодразделение");
	СоответствиеРеквизитов.Вставить("Должность", "Должность");
	СоответствиеРеквизитов.Вставить("ДатаНачала", "ДатаНачала");
	СоответствиеРеквизитов.Вставить("ВидЗанятости", "ВидЗанятости");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("ИзменитьПодразделениеИДолжность", "ИзменитьПодразделениеИДолжность");
	СоответствиеРеквизитов.Вставить("ИзменитьНачисления", "ИзменитьНачисления");
	СоответствиеРеквизитов.Вставить("КоличествоСтавок", "КоличествоСтавок");

	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Начисления");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
		
	СоответствиеРеквизитов.Вставить("Начисления", СоответствиеРеквизитовТЧ);
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////////
// Ввод сведений о плановых начислениях работников организаций

Функция СписокДокументовВводПлановыхНачислений()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Ссылка
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций
	|ГДЕ
	|	НЕ УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция  КонвертироватьДокументывВводПлановыхНачислений(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка КАК КонвертируемыйДокумент,
	|	КадровыйПереводНачисления.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Начисления КАК КадровыйПереводНачисления
	|		ПО УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ДатаДействия = КадровыйПереводНачисления.Ссылка.ДатаНачала
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Проведен = КадровыйПереводНачисления.Ссылка.Проведен
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Сотрудник = КадровыйПереводНачисления.Ссылка.Сотрудник
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ДатаДействия = КадровыйПереводНачисления.Ссылка.ДатаНачала";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка КАК Ссылка,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Организация,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Проведен,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Дата,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Ответственный,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ВидРасчета КАК Начисление,
	|	ВЫБОР
	|		КОГДА УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыДействияСНачислением.Прекратить)
	|			ТОГДА 0
	|		ИНАЧЕ УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Размер
	|	КОНЕЦ КАК Размер,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Номер,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ДатаДействия КАК ДатаНачала
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления
	|ГДЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	ДатаНачала";
	
	ВыборкаПоНачислениям = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Сотрудник") Цикл
			Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("ДатаНачала") Цикл
			
				ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументавВводПлановыхНачислений();
				
				ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоНачислениям.Организация;
				ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоНачислениям.Сотрудник;
				ДанныеВыгружаемогоДокумента.ДатаНачала = ВыборкаПоНачислениям.ДатаНачала;
				ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоНачислениям.Ответственный;
				ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоНачислениям.Дата;
				ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоНачислениям.Номер;
				ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоНачислениям.Проведен;
				ДанныеВыгружаемогоДокумента.ИзменитьПодразделениеИДолжность = Ложь;
				ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоНачислениям.ФизическоеЛицо; 
				ДанныеВыгружаемогоДокумента.ИзменитьНачисления = Истина;		
				ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоНачислениям.Ссылка;
				
				Пока ВыборкаПоНачислениям.Следующий() Цикл
					СтрокаНачислений = ДанныеВыгружаемогоДокумента.Начисления.Добавить();
					СтрокаНачислений.Начисление = ВыборкаПоНачислениям.Начисление;
					СтрокаНачислений.Размер = ВыборкаПоНачислениям.Размер;
				КонецЦикла;	
				
				КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
				
				Результат.Вставить(ВыборкаПоНачислениям.Ссылка, КонвертированныйДокумент);
				
				КонвертироватьДвижениявВводаПлановыхНачислений(ДанныеВыгружаемогоДокумента.Ссылка, 
														ДанныеВыгружаемогоДокумента.Сотрудник, 
														СоответствиеКонвертированныхОбъектов, 
														КонвертированныйДокумент.ПолучитьОбъект());
																
			КонецЦикла;
													
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция СтруктураДанныхДокументавВводПлановыхНачислений()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");
	СтруктураДанныхДокумента.Вставить("Сотрудник");
	СтруктураДанныхДокумента.Вставить("ДатаНачала");
	СтруктураДанныхДокумента.Вставить("Ответственный");
	СтруктураДанныхДокумента.Вставить("Дата");
	СтруктураДанныхДокумента.Вставить("Номер");
	СтруктураДанныхДокумента.Вставить("Проведен");
	СтруктураДанныхДокумента.Вставить("ИзменитьПодразделениеИДолжность");
	СтруктураДанныхДокумента.Вставить("ИзменитьНачисления");
	СтруктураДанныхДокумента.Вставить("ПричинаПеревода");
	СтруктураДанныхДокумента.Вставить("Ссылка");
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");

	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументавВводПлановыхНачислений()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ДатаНачала", "ДатаНачала");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("ИзменитьПодразделениеИДолжность", "ИзменитьПодразделениеИДолжность");
	СоответствиеРеквизитов.Вставить("ИзменитьНачисления", "ИзменитьНачисления");

	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Начисления");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
		
	СоответствиеРеквизитов.Вставить("Начисления", СоответствиеРеквизитовТЧ);
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвижениявВводаПлановыхНачислений(Документ, Сотрудник, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник, Период", Документ, Сотрудник, НовыйРегистратор.ДатаНачала);
	
	КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// УВОЛЬНЕНИЕ

Функция СписокДокументовУвольнение()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УдалитьУвольнениеИзОрганизаций КАК УдалитьУвольнениеИзОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыУвольнение(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент,
	|	Увольнение.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьУвольнениеИзОрганизаций.РаботникиОрганизации КАК УдалитьУвольнениеИзОрганизацийРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
	|		ПО УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник = Увольнение.Сотрудник
	|			И УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения = Увольнение.ДатаУвольнения
	|			И УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Проведен = Увольнение.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка КАК Ссылка,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Физлицо,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.ОснованиеУвольнения КАК СтатьяТКРФ,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Дата,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Номер,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Ответственный,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.УдалитьУвольнениеИзОрганизаций.РаботникиОрганизации КАК УдалитьУвольнениеИзОрганизацийРаботникиОрганизации
	|ГДЕ
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаУвольнение();
			
			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоДокументам.Сотрудник;
			ДанныеВыгружаемогоДокумента.ДатаУвольнения = ВыборкаПоДокументам.ДатаУвольнения;
			ДанныеВыгружаемогоДокумента.СтатьяТКРФ = ВыборкаПоДокументам.СтатьяТКРФ;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоДокументам.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоДокументам.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоДокументам.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоДокументам.ФизическоеЛицо;
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
						
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
			
			КонвертироватьДвиженияУвольнения(ДанныеВыгружаемогоДокумента.Ссылка, 
									ДанныеВыгружаемогоДокумента.Сотрудник, 
									СоответствиеКонвертированныхОбъектов, 
									КонвертированныйДокумент.ПолучитьОбъект());
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

Функция СтруктураДанныхДокументаУвольнение()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");
	СтруктураДанныхДокумента.Вставить("Сотрудник");
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");
	СтруктураДанныхДокумента.Вставить("ДатаУвольнения");
	СтруктураДанныхДокумента.Вставить("Ответственный");
	СтруктураДанныхДокумента.Вставить("СтатьяТКРФ");
	СтруктураДанныхДокумента.Вставить("Дата");
	СтруктураДанныхДокумента.Вставить("Номер");
	СтруктураДанныхДокумента.Вставить("Проведен");
	СтруктураДанныхДокумента.Вставить("Ссылка");
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументаУвольнение()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("СтатьяТКРФ", "СтатьяТКРФ");
	СоответствиеРеквизитов.Вставить("ДатаУвольнения", "ДатаУвольнения");
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвиженияУвольнения(Документ, Сотрудник, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник", Документ, Сотрудник);
	
	КонвертироватьПорциюДанныхКадровойИстории(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// КАДРОВАЯ ИСТОРИЯ СОТРУДНИКОВ

Процедура КонвертироватьПорциюДанныхКадровойИстории(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	
	ДанныеКадровойИстории = ДанныеКадровойИстории(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);	
	
	ЗарегистрироватьЗаписиКадровойИсторииСотрудников(ДанныеКадровойИстории, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Функция ДанныеКадровойИстории(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьРаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	УдалитьРаботникиОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	УдалитьРаботникиОрганизаций.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьРаботникиОрганизаций.Должность КАК Должность,
	|	УдалитьРаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
	|	УдалитьРаботникиОрганизаций.ОбособленноеПодразделение КАК Организация,
	|	УдалитьРаботникиОрганизаций.Сотрудник.УдалитьВидЗанятости КАК ВидЗанятости,
	|	УдалитьРаботникиОрганизаций.Период КАК Период,
	|	УдалитьРаботникиОрганизаций.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьРаботникиОрганизаций.Сотрудник КАК ГоловнойСотрудник,
	|	ИСТИНА КАК ЭтоГоловнойСотрудник,
	|	1 КАК КоличествоСтавок
	|ИЗ
	|	РегистрСведений.УдалитьРаботникиОрганизаций КАК УдалитьРаботникиОрганизаций
	|ГДЕ
	|	&Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьРаботникиОрганизаций." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьРаботникиОрганизаций." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
		
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьРаботникиОрганизаций.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура ЗарегистрироватьЗаписиКадровойИсторииСотрудников(ДанныеКадровойИстории, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеКадровойИстории.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(ДанныеКадровойИстории.Период, ДанныеКадровойИстории.ГоловнаяОрганизация, , "КадроваяИсторияСотрудников");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
		КонецЕсли;	
		
		Пока ДанныеКадровойИстории.Следующий() Цикл
			ЗаписьКадровойИстории = ДокументПереноса.Движения.КадроваяИсторияСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьКадровойИстории, ДанныеКадровойИстории);
			ЗаписьКадровойИстории.ВидСобытия = КонвертироватьДанные(ДанныеКадровойИстории.ПричинаИзмененияСостояния, СоответствиеКонвертированныхОбъектов);
			
			Если Не ЗначениеЗаполнено(ЗаписьКадровойИстории.Организация) Тогда
				ЗаписьКадровойИстории.Организация = ЗаписьКадровойИстории.ГоловнаяОрганизация;
			КонецЕсли;	
		КонецЦикла;	
		
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.КадроваяИсторияСотрудников.Записывать = Истина;
			ДокументПереноса.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.КадроваяИсторияСотрудников.Записать();
	КонецЕсли;	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ВИДЫ ЗАНЯТОСТИ СОТРУДНИКОВ

Процедура КонверитроватьДанныеОВидеЗанятостиСотрудникаДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	
	НачатьТранзакцию();
	ЗарегистрироватьВидЗанятостиСотрудника(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ЗарегистрироватьВидЗанятостиСотрудника(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;
	
	Если НовыйРегистратор = Неопределено Тогда
		ДокументПереноса = ДокументПереносаДанных(ДанныеВыгружаемогоДокумента.ДатаПриема, ДанныеВыгружаемогоДокумента.ГоловнаяОрганизация, , "ВидыЗанятостиСотрудников");
	КонецЕсли;
	
	НоваяЗапись = ДокументПереноса.Движения.ВидыЗанятостиСотрудников.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеВыгружаемогоДокумента);
	НоваяЗапись.ВидЗанятости = КонвертироватьДанные(ДанныеВыгружаемогоДокумента.ВидЗанятости, СоответствиеКонвертированныхОбъектов);
	НоваяЗапись.Период = ДанныеВыгружаемогоДокумента.ДатаПриема;
	НоваяЗапись.Регистратор = ДанныеВыгружаемогоДокумента.Ссылка;
	НоваяЗапись.ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДанныеВыгружаемогоДокумента.Организация);
		
	Если НовыйРегистратор = Неопределено Тогда
		ДокументПереноса.Движения.ВидыЗанятостиСотрудников.Записывать = Истина;
		ДокументПереноса.Записать();
	КонецЕсли;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ВидыЗанятостиСотрудников.Записать();
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// ПЛАНОВЫЕ НАЧИСЛЕНИЯ СОТРУДНИКОВ 

Процедура КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	
	ДанныеПлановыхНачислений = ДанныеПлановыхНачислений(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	
	ЗарегистрироватПлановыеНачисления(ДанныеПлановыхНачислений, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ДанныеПлановыхНачислений(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Период,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение КАК Начисление,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Размер,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА УдалитьПлановыеНачисленияРаботниковОрганизаций.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьПлановыеНачисленияРаботниковОрганизаций.Организация
	|		ИНАЧЕ УдалитьПлановыеНачисленияРаботниковОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.УдалитьПлановыеНачисленияРаботниковОрганизаций КАК УдалитьПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	&Условие";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьПлановыеНачисленияРаботниковОрганизаций." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьПлановыеНачисленияРаботниковОрганизаций." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
		
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьПлановыеНачисленияРаботниковОрганизаций.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции	

Процедура ЗарегистрироватПлановыеНачисления(ДанныеПлановыхНачислений, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеПлановыхНачислений.СледующийПоЗначениюПоля("Организация") Цикл
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(ДанныеПлановыхНачислений.Период, ДанныеПлановыхНачислений.Организация, , "ПлановыеНачисления");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
		КонецЕсли;	
		
		Пока ДанныеПлановыхНачислений.Следующий() Цикл
			ЗаписьПлановогоНачисления = ДокументПереноса.Движения.ПлановыеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПлановогоНачисления, ДанныеПлановыхНачислений);
			ЗаписьПлановогоНачисления.Начисление = КонвертироватьДанные(ДанныеПлановыхНачислений.Начисление, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;	
			
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.ПлановыеНачисления.Записывать = Истина;
			ДокументПереноса.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ПлановыеНачисления.Записать();
	КонецЕсли;	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ОПЕРАЦИИ УЧЕТА ПО НДФЛ И СТРАХОВЫМ ВЗНОСАМ (УЧЕТ НДФЛ)

Функция СписокДокументовОперацииПоВзносамИНДФЛ()
	СписокДокументов = Новый Массив;
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалоги.Ссылка
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги КАК УдалитьНДФЛиЕСНДоходыИНалоги
	|ГДЕ
	|	НЕ УдалитьНДФЛиЕСНДоходыИНалоги.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Процедура КонвертироватьОперацииУчетаВзносовИНДФЛ(СоответствиеКонвертированныхОбъектов)
	КонвертироватьДокументыОперацияУчетаНДФЛ(СписокДокументовОперацииПоВзносамИНДФЛ(), СоответствиеКонвертированныхОбъектов);
	КонвертироватьДокументыОперацияУчетаПоСтраховымВзносам(СписокДокументовОперацииПоВзносамИНДФЛ(), СоответствиеКонвертированныхОбъектов)	
КонецПроцедуры	

Процедура КонвертироватьДокументыОперацияУчетаНДФЛ(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям(); 
	
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
			
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК ДатаОперации,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ФизЛицо КАК Сотрудник,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка.Организация
	|ПОМЕСТИТЬ ВТКонвертируемыеДокументыНДФЛ
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛСведенияОДоходах КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПериодРегистрации, МЕСЯЦ),
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ФизЛицо,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка.Организация
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛИсчисленный13 КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ПериодРегистрации, МЕСЯЦ),
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ФизЛицо,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка.Организация
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛУдержанный КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.ПериодРегистрации, МЕСЯЦ),
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.ФизЛицо,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка.Организация
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛПредоставленныеВычеты КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонвертируемыеДокументыНДФЛ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТНеконвертированныеДокументыНДФЛ
	|ИЗ
	|	ВТКонвертируемыеДокументыНДФЛ КАК КонвертируемыеДокументыНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияНалоговогоУчетаПоНДФЛ КАК ОперацияНалоговогоУчетаПоНДФЛ
	|		ПО КонвертируемыеДокументыНДФЛ.Проведен = ОперацияНалоговогоУчетаПоНДФЛ.Проведен
	|			И КонвертируемыеДокументыНДФЛ.Сотрудник = ОперацияНалоговогоУчетаПоНДФЛ.Сотрудник
	|			И КонвертируемыеДокументыНДФЛ.ДатаОперации = ОперацияНалоговогоУчетаПоНДФЛ.ДатаОперации
	|			И КонвертируемыеДокументыНДФЛ.Организация = ОперацияНалоговогоУчетаПоНДФЛ.Организация
	|ГДЕ
	|	ОперацияНалоговогоУчетаПоНДФЛ.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.МесяцНалоговогоПериода КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТНеконвертированныеДокументыНДФЛ КАК НеконвертированныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛУдержанный КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный
	|		ПО НеконвертированныеДокументы.Ссылка = УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка";
	
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВТ, Ложь, "СтатусНалогоплательщика");	
	
	Запрос.УстановитьПараметр("Нерезидент", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонвертируемыеДокументыНДФЛ.Сотрудник,
	|	КонвертируемыеДокументыНДФЛ.Проведен,
	|	МАКСИМУМ(КонвертируемыеДокументыНДФЛ.Ссылка) КАК Ссылка,
	|	КонвертируемыеДокументыНДФЛ.Организация,
	|	КонвертируемыеДокументыНДФЛ.ДатаОперации
	|ИЗ
	|	ВТКонвертируемыеДокументыНДФЛ КАК КонвертируемыеДокументыНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументыНДФЛ КАК НеконвертированныеДокументыНДФЛ
	|		ПО КонвертируемыеДокументыНДФЛ.Ссылка = НеконвертированныеДокументыНДФЛ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	КонвертируемыеДокументыНДФЛ.Сотрудник,
	|	КонвертируемыеДокументыНДФЛ.Проведен,
	|	КонвертируемыеДокументыНДФЛ.Организация,
	|	КонвертируемыеДокументыНДФЛ.ДатаОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ФизЛицо КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ДатаДохода = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.МесяцНалоговогоПериода
	|		ИНАЧЕ УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ДатаДохода
	|	КОНЕЦ КАК ДатаПолученияДохода,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК ДатаОперации,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодДохода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.СуммаДохода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодВычета,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.СуммаВычета,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.СуммаНалогаИсчисленная,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КоличествоДетей КАК Количество,
	|	ПодразделенияОрганизаций.Ссылка КАК ОбособленноеПодразделение,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка.Организация КАК Организация,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка.Проведен КАК Проведен
	|ИЗ
	|	ВТНеконвертированныеДокументыНДФЛ КАК НеконвертированныеДокументыНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛСведенияОДоходах КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|			ПО УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КПП = ПодразделенияОрганизаций.КПП
	|				И (ПодразделенияОрганизаций.ОбособленноеПодразделение)
	|				И УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодПоОКАТО = ПодразделенияОрганизаций.УдалитьКодПоОКАТО
	|				И (УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КодПоОКАТО <> """"
	|					ИЛИ УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.КПП <> """")
	|		ПО НеконвертированныеДокументыНДФЛ.Ссылка = УдалитьНДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ДатаОперации,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ФизЛицо КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.ПериодРегистрации, МЕСЯЦ) КАК ДатаОперации,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.МесяцНалоговогоПериода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Налог КАК Сумма,
	|	ПодразделенияОрганизаций.Ссылка КАК ОбособленноеПодразделение,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка.Организация КАК Организация,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка.Проведен КАК Проведен
	|ИЗ
	|	ВТНеконвертированныеДокументыНДФЛ КАК НеконвертированныеДокументыНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛИсчисленный13 КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|			ПО УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.КодПоОКАТО = ПодразделенияОрганизаций.УдалитьКодПоОКАТО
	|				И УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.КПП = ПодразделенияОрганизаций.КПП
	|				И (УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.КодПоОКАТО <> """"
	|					ИЛИ УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.КПП <> """")
	|				И (ПодразделенияОрганизаций.ОбособленноеПодразделение)
	|		ПО НеконвертированныеДокументыНДФЛ.Ссылка = УдалитьНДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ДатаОперации,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.ФизЛицо КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.ПериодРегистрации, МЕСЯЦ) КАК ДатаОперации,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.МесяцНалоговогоПериода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.КодВычета,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.ПримененныйВычет КАК Сумма,
	|	ПодразделенияОрганизаций.Ссылка КАК ОбособленноеПодразделение,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка.Организация КАК Организация,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка.Проведен КАК Проведен
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛПредоставленныеВычеты КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументыНДФЛ КАК НеконвертированныеДокументыНДФЛ
	|		ПО УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка = НеконвертированныеДокументыНДФЛ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.КодПоОКАТО = ПодразделенияОрганизаций.УдалитьКодПоОКАТО
	|			И УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.КПП = ПодразделенияОрганизаций.КПП
	|			И (УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.КодПоОКАТО <> """"
	|				ИЛИ УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.КПП <> """")
	|			И (ПодразделенияОрганизаций.ОбособленноеПодразделение)
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ДатаОперации,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ФизЛицо КАК Сотрудник,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ПериодРегистрации КАК ДатаОперации,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.СтавкаНалогообложения,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Налог КАК Сумма,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КодДохода,
	|	ПодразделенияОрганизаций.Ссылка КАК ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеФизическихЛиц.СтатусНалогоплательщика = &Нерезидент
	|			ТОГДА ВЫБОР
	|					КОГДА УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КодДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код1010)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|				КОНЕЦ
	|		КОГДА УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.СтавкаНалогообложения = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|		КОГДА УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.СтавкаНалогообложения = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|		КОГДА УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.СтавкаНалогообложения = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Ставка,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка.Организация КАК Организация,
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка.Проведен КАК Проведен
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.НДФЛУдержанный КАК УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументыНДФЛ КАК НеконвертированныеДокументыНДФЛ
	|		ПО УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка = НеконвертированныеДокументыНДФЛ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КодПоОКАТО = ПодразделенияОрганизаций.УдалитьКодПоОКАТО
	|			И УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КПП = ПодразделенияОрганизаций.КПП
	|			И (УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КодПоОКАТО <> """"
	|				ИЛИ УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.КПП <> """")
	|			И (ПодразделенияОрганизаций.ОбособленноеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ПО УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.ФизЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			И УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.МесяцНалоговогоПериода = КадровыеДанныеФизическихЛиц.Период
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ДатаОперации,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонвертируемыеДокументыНДФЛ.Сотрудник КАК Сотрудник,
	|	КонвертируемыеДокументыНДФЛ.Проведен КАК Проведен,
	|	КонвертируемыеДокументыНДФЛ.Ссылка,
	|	КонвертируемыеДокументыНДФЛ.Организация КАК Организация,
	|	КонвертируемыеДокументыНДФЛ.ДатаОперации КАК ДатаОперации
	|ИЗ
	|	ВТКонвертируемыеДокументыНДФЛ КАК КонвертируемыеДокументыНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументыНДФЛ КАК НеконвертированныеДокументыНДФЛ
	|		ПО КонвертируемыеДокументыНДФЛ.Ссылка = НеконвертированныеДокументыНДФЛ.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Проведен,
	|	Организация,
	|	ДатаОперации";

	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоДоходам = РезультатыЗапроса[1].Выбрать();
	ВыборкаПоИсчисленныйНДФЛ = РезультатыЗапроса[2].Выбрать();
	ВыборкаПоВычетам = РезультатыЗапроса[3].Выбрать();
	ВыборкаПоУдержанныйНДФЛ = РезультатыЗапроса[4].Выбрать();
	ВыборкаПоДокументамПериода = РезультатыЗапроса[5].Выбрать();

	Пока ВыборкаПоДокументам.Следующий() Цикл
		ВыгружаемыеДанные = СтруктураДанныхДокументаОперацияНДФЛ();
		
		ВыгружаемыеДанные.Дата = ВыборкаПоДокументам.ДатаОперации;
		ВыгружаемыеДанные.Проведен = ВыборкаПоДокументам.Проведен;
		ВыгружаемыеДанные.ДатаОперации = ВыборкаПоДокументам.ДатаОперации;
		ВыгружаемыеДанные.Организация = ВыборкаПоДокументам.Организация;
		ВыгружаемыеДанные.Сотрудник = ВыборкаПоДокументам.Сотрудник;
		ВыгружаемыеДанные.Ссылка = ВыборкаПоДокументам.Ссылка;
		
		КлючДанныхДокумента = Новый Структура("Организация, Сотрудник, ДатаОперации, Проведен");
		ЗаполнитьЗначенияСвойств(КлючДанныхДокумента, ВыгружаемыеДанные);
		
		ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ВыгружаемыеДанные, КлючДанныхДокумента, "СведенияОДоходах", ВыборкаПоДоходам);
		ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ВыгружаемыеДанные, КлючДанныхДокумента, "НДФЛИсчисленныйПоСтавке13", ВыборкаПоИсчисленныйНДФЛ);
		ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ВыгружаемыеДанные, КлючДанныхДокумента, "ПредоставленныеВычеты", ВыборкаПоВычетам);
		ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ВыгружаемыеДанные, КлючДанныхДокумента, "НДФЛУдержанный", ВыборкаПоУдержанныйНДФЛ);
		
		СписокДокументов = СписокДокументовПоКлючуДанныхДокумента(КлючДанныхДокумента, ВыборкаПоДокументамПериода);
				
		НачатьТранзакцию();
		КонвертированныйДокументСсылка = КонвертироватьДанныеДокумента(ВыгружаемыеДанные, СоответствиеКонвертированныхОбъектов);
				
		КонвертироватьДвиженияОперацииУчетаНДФЛ(СписокДокументов, 
			КонвертированныйДокументСсылка.ПолучитьОбъект(),
			СоответствиеВладельцевРегистрациям,
			СоответствиеКонвертированныхОбъектов);
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;		
КонецПроцедуры	

Процедура ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ДанныеДокумента, КлючДанныхДокумента, ИмяТЧ, ВыборкаПоСтрокамДокумента)
	ВыборкаПоСтрокамДокумента.Сбросить();
	Если ВыборкаПоСтрокамДокумента.НайтиСледующий(КлючДанныхДокумента) Тогда
		Для Каждого Поле Из КлючДанныхДокумента Цикл
			ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля(Поле.Ключ);			
		КонецЦикла;	
		
		Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
			СтрокаТЧ = ДанныеДокумента[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаПоСтрокамДокумента);
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

Функция СтруктураДанныхДокументаОперацияНДФЛ()
	СтруктураДокумента = Новый Структура();
	
	СтруктураДокумента.Вставить("Ссылка");
	СтруктураДокумента.Вставить("Дата");
	СтруктураДокумента.Вставить("Номер");
	СтруктураДокумента.Вставить("Проведен");
	СтруктураДокумента.Вставить("ДатаОперации");
	СтруктураДокумента.Вставить("Организация");
	СтруктураДокумента.Вставить("Сотрудник");
	СтруктураДокумента.Вставить("Комментарий");
	СтруктураДокумента.Вставить("ОперацияПоВзносам", Ложь);
	СтруктураДокумента.Вставить("ОперацияНДФЛ", Истина);

	
	СведенияОДоходах = Новый ТаблицаЗначений;
	СведенияОДоходах.Колонки.Добавить("ДатаПолученияДохода");
	СведенияОДоходах.Колонки.Добавить("КодДохода");
	СведенияОДоходах.Колонки.Добавить("СуммаДохода");
	СведенияОДоходах.Колонки.Добавить("ОбособленноеПодразделение");
	СведенияОДоходах.Колонки.Добавить("КодВычета");
	СведенияОДоходах.Колонки.Добавить("Количество");
	СведенияОДоходах.Колонки.Добавить("СуммаВычета");
	СведенияОДоходах.Колонки.Добавить("СуммаНалогаИсчисленная");
	
	СтруктураДокумента.Вставить("СведенияОДоходах", СведенияОДоходах);
	
	НДФЛИсчисленныйПоСтавке13 = Новый ТаблицаЗначений;
	НДФЛИсчисленныйПоСтавке13.Колонки.Добавить("МесяцНалоговогоПериода");
	НДФЛИсчисленныйПоСтавке13.Колонки.Добавить("Сумма");
	НДФЛИсчисленныйПоСтавке13.Колонки.Добавить("ОбособленноеПодразделение");
	
	СтруктураДокумента.Вставить("НДФЛИсчисленныйПоСтавке13", НДФЛИсчисленныйПоСтавке13);
	
	ПредоставленныеВычеты = Новый ТаблицаЗначений;
	ПредоставленныеВычеты.Колонки.Добавить("МесяцНалоговогоПериода");
	ПредоставленныеВычеты.Колонки.Добавить("Сумма");
	ПредоставленныеВычеты.Колонки.Добавить("КодВычета");
	ПредоставленныеВычеты.Колонки.Добавить("ОбособленноеПодразделение");
	
	СтруктураДокумента.Вставить("ПредоставленныеВычеты", ПредоставленныеВычеты);

	НДФЛУдержанный = Новый ТаблицаЗначений;
	НДФЛУдержанный.Колонки.Добавить("МесяцНалоговогоПериода");
	НДФЛУдержанный.Колонки.Добавить("КодДохода");
	НДФЛУдержанный.Колонки.Добавить("ОбособленноеПодразделение");
	НДФЛУдержанный.Колонки.Добавить("Сумма");
	НДФЛУдержанный.Колонки.Добавить("Ставка");
	НДФЛУдержанный.Колонки.Добавить("СтавкаНалогообложения");
	
	СтруктураДокумента.Вставить("НДФЛУдержанный", НДФЛУдержанный);
	
	Возврат СтруктураДокумента;
КонецФункции	

Функция СоответствиеРеквизитовОперацииНДФЛ()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("ДатаОперации", "ДатаОперации");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "СведенияОДоходах");
	СоответствиеРеквизитовТЧ.Вставить("ДатаПолученияДохода", "ДатаПолученияДохода");
	СоответствиеРеквизитовТЧ.Вставить("КодДохода", "КодДохода");
	СоответствиеРеквизитовТЧ.Вставить("СуммаДохода", "СуммаДохода");
	СоответствиеРеквизитовТЧ.Вставить("ОбособленноеПодразделение", "ОбособленноеПодразделение");
	СоответствиеРеквизитовТЧ.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧ.Вставить("Количество", "Количество");
	СоответствиеРеквизитовТЧ.Вставить("СуммаВычета", "СуммаВычета");
	СоответствиеРеквизитовТЧ.Вставить("СуммаНалогаИсчисленная", "СуммаНалогаИсчисленная");
	
	СоответствиеРеквизитов.Вставить("СведенияОДоходах", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "НДФЛИсчисленныйПоСтавке13");
	СоответствиеРеквизитовТЧ.Вставить("МесяцНалоговогоПериода", "МесяцНалоговогоПериода");
	СоответствиеРеквизитовТЧ.Вставить("Сумма", "Сумма");
	СоответствиеРеквизитовТЧ.Вставить("ОбособленноеПодразделение", "ОбособленноеПодразделение");
	
	СоответствиеРеквизитов.Вставить("НДФЛИсчисленныйПоСтавке13", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "ПредоставленныеВычеты");
	СоответствиеРеквизитовТЧ.Вставить("МесяцНалоговогоПериода", "МесяцНалоговогоПериода");
	СоответствиеРеквизитовТЧ.Вставить("Сумма", "Сумма");
	СоответствиеРеквизитовТЧ.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧ.Вставить("ОбособленноеПодразделение", "ОбособленноеПодразделение");
	
	СоответствиеРеквизитов.Вставить("ПредоставленныеВычеты", СоответствиеРеквизитовТЧ);

	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "НДФЛУдержанный");
	СоответствиеРеквизитовТЧ.Вставить("МесяцНалоговогоПериода", "МесяцНалоговогоПериода");
	СоответствиеРеквизитовТЧ.Вставить("КодДохода", "КодДохода");
	СоответствиеРеквизитовТЧ.Вставить("ОбособленноеПодразделение", "ОбособленноеПодразделение");
	СоответствиеРеквизитовТЧ.Вставить("Сумма", "Сумма");
	СоответствиеРеквизитовТЧ.Вставить("Ставка", "Ставка");
	СоответствиеРеквизитовТЧ.Вставить("СтавкаНалогообложения", "СтавкаНалогообложения");
	
	СоответствиеРеквизитов.Вставить("НДФЛУдержанный", СоответствиеРеквизитовТЧ);
	
	Возврат СоответствиеРеквизитов;	
КонецФункции

Процедура КонвертироватьДвиженияОперацииУчетаНДФЛ(СписокДокументов, НовыйРегистратор, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов)
	
	КлючКонвертируемыхДвижений = Новый Структура("Регистратор, ФизЛицо, Период", 
											СписокДокументов, 
											НовыйРегистратор.Сотрудник,
											НовыйРегистратор.ДатаОперации);
	
	
	КонвертироватьПорциюДанныхУчетаДоходовНДФЛ(КлючКонвертируемыхДвижений, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь,
		Ложь,
		НовыйРегистратор);
		
	КонвертироватьПорциюДанныхРасчетыНалогоплательщиковНДФЛ(КлючКонвертируемыхДвижений,
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор, 
		Ложь);
		
	КонвертироватьПорциюДанныхСтандартныхВычетахНДФЛ(КлючКонвертируемыхДвижений, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь,
		НовыйРегистратор);	
		
	КонвертироватьПорциюДанныхИмущественныхВычетахНДФЛ(КлючКонвертируемыхДвижений, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор);	
		
	Отбор = Новый Структура("ФизическоеЛицо, Период", НовыйРегистратор.Сотрудник, НовыйРегистратор.ДатаОперации);	
		
	КонвертироватьРасчетыНалоговыхАгентовНДФЛ(СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		СписокДокументов, 
		НовыйРегистратор, 
		Отбор);
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ОПЕРАЦИИ УЧЕТА ПО НДФЛ И СТРАХОВЫМ ВЗНОСАМ (УЧЕТ страховых взносов)

Процедура КонвертироватьДокументыОперацияУчетаПоСтраховымВзносам(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Ссылка,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ФизЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.МесяцРасчетногоПериода, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ ВТКонвертируемыеДокументы
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.СтраховыеВзносыСведенияОДоходах КАК УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.МесяцРасчетногоПериода, МЕСЯЦ),
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка.Организация
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.СтраховыеВзносы КАК УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ПериодРегистрации, МЕСЯЦ),
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка.Организация
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.ПособияСоциальномуСтрахованию КАК УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПериодРегистрации, МЕСЯЦ),
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка.Организация
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.ПособияПоУходуЗаРебенкомДоПолутораЛет КАК УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет
	|ГДЕ
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонвертируемыеДокументы.Ссылка
	|ПОМЕСТИТЬ ВТНеконвертированныеДокументы
	|ИЗ
	|	ВТКонвертируемыеДокументы КАК КонвертируемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияУчетаПоСтраховымВзносам КАК ОперацияУчетаПоСтраховымВзносам
	|		ПО КонвертируемыеДокументы.ФизическоеЛицо = ОперацияУчетаПоСтраховымВзносам.ФизическоеЛицо
	|			И КонвертируемыеДокументы.МесяцРасчетногоПериода = ОперацияУчетаПоСтраховымВзносам.МесяцРасчетногоПериода
	|			И КонвертируемыеДокументы.Проведен = ОперацияУчетаПоСтраховымВзносам.Проведен
	|			И КонвертируемыеДокументы.Организация = ОперацияУчетаПоСтраховымВзносам.Организация
	|ГДЕ
	|	ОперацияУчетаПоСтраховымВзносам.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФизЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.МесяцРасчетногоПериода, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФСС) КАК ФСС,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФФОМС) КАК ФФОМС,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ТФОМС) КАК ТФОМС,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРНакопительная) КАК ПФРНакопительная,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРСтраховая) КАК ПФРСтраховая,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРПоДополнительномуТарифу) КАК ПФРПоДополнительномуТарифу,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРСтраховаяЕНВД) КАК ПФРСтраховаяЕНВД,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРНакопительнаяЕНВД) КАК ПФРНакопительнаяЕНВД,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРНаДоплатуКПенсииШахтерам) КАК ПФРНаДоплатуКПенсииШахтерам,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФССЕНВД) КАК ФССЕНВД,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФФОМСЕНВД) КАК ФФОМСЕНВД,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ТФОМСЕНВД) КАК ТФОМСЕНВД,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка.Проведен КАК Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка.Организация КАК Организация,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРПоСуммарномуТарифуЕНВД) КАК ПФРПоСуммарномуТарифуЕНВД,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3,
	|	СУММА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.СтраховыеВзносы КАК УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументы КАК НеконвертированныеДокументы
	|		ПО УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка = НеконвертированныеДокументы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.МесяцРасчетногоПериода, МЕСЯЦ),
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка.Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КонвертируемыеДокументы.Ссылка) КАК Ссылка,
	|	КонвертируемыеДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КонвертируемыеДокументы.МесяцРасчетногоПериода КАК МесяцРасчетногоПериода,
	|	КонвертируемыеДокументы.Проведен КАК Проведен,
	|	КонвертируемыеДокументы.Организация КАК Организация,
	|	СУММА(Взносы.ФСС) КАК ФСС,
	|	СУММА(Взносы.ФФОМС) КАК ФФОМС,
	|	СУММА(Взносы.ТФОМС) КАК ТФОМС,
	|	СУММА(Взносы.ПФРНакопительная) КАК ПФРНакопительная,
	|	СУММА(Взносы.ПФРСтраховая) КАК ПФРСтраховая,
	|	СУММА(Взносы.ПФРПоДополнительномуТарифу) КАК ПФРНаДоплатуЛетчикам,
	|	СУММА(Взносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	СУММА(Взносы.ПФРСтраховаяЕНВД) КАК ПФРСтраховаяЕНВД,
	|	СУММА(Взносы.ПФРНакопительнаяЕНВД) КАК ПФРНакопительнаяЕНВД,
	|	СУММА(Взносы.ПФРНаДоплатуКПенсииШахтерам) КАК ПФРНаДоплатуШахтерам,
	|	СУММА(Взносы.ФССЕНВД) КАК ФССЕНВД,
	|	СУММА(Взносы.ФФОМСЕНВД) КАК ФФОМСЕНВД,
	|	СУММА(Взносы.ТФОМСЕНВД) КАК ТФОМСЕНВД,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(Взносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
	|	СУММА(Взносы.ПФРПоСуммарномуТарифуЕНВД) КАК ПФРПоСуммарномуТарифуЕНВД,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3,
	|	СУММА(Взносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4
	|ИЗ
	|	ВТКонвертируемыеДокументы КАК КонвертируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументы КАК НеконвертированныеДокументы
	|		ПО КонвертируемыеДокументы.Ссылка = НеконвертированныеДокументы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Взносы
	|		ПО КонвертируемыеДокументы.МесяцРасчетногоПериода = Взносы.МесяцРасчетногоПериода
	|			И КонвертируемыеДокументы.ФизическоеЛицо = Взносы.ФизическоеЛицо
	|			И КонвертируемыеДокументы.Проведен = Взносы.Проведен
	|			И КонвертируемыеДокументы.Организация = Взносы.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	КонвертируемыеДокументы.ФизическоеЛицо,
	|	КонвертируемыеДокументы.МесяцРасчетногоПериода,
	|	КонвертируемыеДокументы.Проведен,
	|	КонвертируемыеДокументы.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	МесяцРасчетногоПериода,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ФизЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.МесяцРасчетногоПериода, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ВидДохода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Результат,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Скидка,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ОблагаетсяЕНВД,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ОблагаетсяПоДополнительномуТарифу КАК ОблагаетсяВзносамиНаДоплатуЛетчикам,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам КАК ОблагаетсяВзносамиНаДоплатуШахтерам,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Ссылка.Организация КАК Организация,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Ссылка.Проведен КАК Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ЯвляетсяДоходомФармацевта,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ,
	|	УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.КлассУсловийТруда
	|ИЗ
	|	Документ.УдалитьНДФЛиЕСНДоходыИНалоги.СтраховыеВзносыСведенияОДоходах КАК УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументы КАК НеконвертированныеДокументы
	|		ПО УдалитьНДФЛиЕСНДоходыИНалогиСтраховыеВзносыСведенияОДоходах.Ссылка = НеконвертированныеДокументы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	МесяцРасчетногоПериода,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка.Организация КАК Организация,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка.Проведен КАК Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ОплаченныеДни,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.СуммаВсего,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.СуммаСверхНорм,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.УчитыватьКакНовыйСтраховойСлучай,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ПериодРегистрации, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ДатаСтраховогоСлучая,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Сотрудник.УдалитьВидЗанятости КАК ВидЗанятости,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ВыплатаЗаСчетФедеральногоБюджета КАК ФинансированиеФедеральнымБюджетом
	|ИЗ
	|	ВТНеконвертированныеДокументы КАК НеконвертированныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьНДФЛиЕСНДоходыИНалоги.ПособияСоциальномуСтрахованию КАК УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию
	|		ПО НеконвертированныеДокументы.Ссылка = УдалитьНДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	МесяцРасчетногоПериода,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка.Организация КАК Организация,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка.Проведен КАК Проведен,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПособиеПоУходуЗаПервымРебенком,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПособиеПоУходуЗаВторымРебенком,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПериодДействияНачало КАК НачалоОтпускаПоУходу,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПособиеПоУходуЗаПервымРебенкомСверхНорм,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПособиеПоУходуЗаВторымРебенкомСверхНорм,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПериодРегистрации, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ВыплатаЗаСчетФедеральногоБюджета КАК ФинансированиеФедеральнымБюджетом,
	|	УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Сотрудник.УдалитьВидЗанятости КАК ВидЗанятости
	|ИЗ
	|	ВТНеконвертированныеДокументы КАК НеконвертированныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьНДФЛиЕСНДоходыИНалоги.ПособияПоУходуЗаРебенкомДоПолутораЛет КАК УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет
	|		ПО НеконвертированныеДокументы.Ссылка = УдалитьНДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	МесяцРасчетногоПериода,
	|	Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонвертируемыеДокументы.Ссылка,
	|	КонвертируемыеДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КонвертируемыеДокументы.МесяцРасчетногоПериода КАК МесяцРасчетногоПериода,
	|	КонвертируемыеДокументы.Проведен КАК Проведен,
	|	КонвертируемыеДокументы.Организация КАК Организация
	|ИЗ
	|	ВТКонвертируемыеДокументы КАК КонвертируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеконвертированныеДокументы КАК НеконвертированныеДокументы
	|		ПО КонвертируемыеДокументы.Ссылка = НеконвертированныеДокументы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	МесяцРасчетногоПериода,
	|	Проведен";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаПоДокументам = РезультатыЗапроса[КоличествоРезультатов - 5].Выбрать();
	ВыборкаПоДоходам = РезультатыЗапроса[КоличествоРезультатов - 4].Выбрать();
	ВыборкаПоПособиямСоцСтах = РезультатыЗапроса[КоличествоРезультатов - 3].Выбрать();
	ВыборкаПоПособиямПоУходу = РезультатыЗапроса[КоличествоРезультатов - 2].Выбрать();
	ВыборкаПоДокументамПериода =  РезультатыЗапроса[КоличествоРезультатов - 1].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ВыгружаемыеДанные = СтруктураДанныхДокументаОперацияПоВзносам();
		
		ЗаполнитьЗначенияСвойств(ВыгружаемыеДанные, ВыборкаПоДокументам);
		ВыгружаемыеДанные.Дата = ВыборкаПоДокументам.МесяцРасчетногоПериода;
			
		КлючДанныхДокумента = Новый Структура("Организация, ФизическоеЛицо, МесяцРасчетногоПериода, Проведен");
		ЗаполнитьЗначенияСвойств(КлючДанныхДокумента, ВыгружаемыеДанные);
		
		ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ВыгружаемыеДанные, КлючДанныхДокумента, "СведенияОДоходах", ВыборкаПоДоходам);
		ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ВыгружаемыеДанные, КлючДанныхДокумента, "ПособияПоСоциальномуСтрахованию", ВыборкаПоПособиямСоцСтах);
		ОперацияНДФЛВзносыВписатьДанныеВТаблицуДокумента(ВыгружаемыеДанные, КлючДанныхДокумента, "ПособияПоУходуЗаРебенком", ВыборкаПоПособиямПоУходу);
				
		СписокДокументов = СписокДокументовПоКлючуДанныхДокумента(КлючДанныхДокумента, ВыборкаПоДокументамПериода);
				
		НачатьТранзакцию();
		КонвертированныйДокументСсылка = КонвертироватьДанныеДокумента(ВыгружаемыеДанные, СоответствиеКонвертированныхОбъектов);
		
		КонвертироватьДвиженияОперацииУчетаВзносов(СписокДокументов, 
			КонвертированныйДокументСсылка.ПолучитьОбъект(), 
			СоответствиеКонвертированныхОбъектов);

		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураДанныхДокументаОперацияПоВзносам()
	СтруктураДокумента = Новый Структура();
	
	СтруктураДокумента.Вставить("Ссылка");
	СтруктураДокумента.Вставить("Дата");
	СтруктураДокумента.Вставить("Номер");
	СтруктураДокумента.Вставить("Проведен");
	СтруктураДокумента.Вставить("МесяцРасчетногоПериода");
	СтруктураДокумента.Вставить("Организация");
	СтруктураДокумента.Вставить("ФизическоеЛицо");
	СтруктураДокумента.Вставить("Комментарий");
	СтруктураДокумента.Вставить("ОперацияПоВзносам", Истина);
	СтруктураДокумента.Вставить("ОперацияНДФЛ", Ложь);
	СтруктураДокумента.Вставить("ПФРНакопительная");
	СтруктураДокумента.Вставить("ПФРСтраховая");
	СтруктураДокумента.Вставить("ФФОМС");
	СтруктураДокумента.Вставить("ТФОМС");
	СтруктураДокумента.Вставить("ФСС");
	СтруктураДокумента.Вставить("ФССНесчастныеСлучаи");
	СтруктураДокумента.Вставить("ПФРНаДоплатуЛетчикам");
	СтруктураДокумента.Вставить("ПФРНаДоплатуШахтерам");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах");
	СтруктураДокумента.Вставить("ПФРСтраховаяЕНВД");
	СтруктураДокумента.Вставить("ПФРНакопительнаяЕНВД");
	СтруктураДокумента.Вставить("ФССЕНВД");
	СтруктураДокумента.Вставить("ФФОМСЕНВД");
	СтруктураДокумента.Вставить("ТФОМСЕНВД");
	
	СтруктураДокумента.Вставить("ПФРПоСуммарномуТарифу");
	СтруктураДокумента.Вставить("ПФРПоСуммарномуТарифуЕНВД");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3");
	СтруктураДокумента.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4");
		
	СведенияОДоходах = Новый ТаблицаЗначений;
	СведенияОДоходах.Колонки.Добавить("ВидДохода");
	СведенияОДоходах.Колонки.Добавить("Результат");
	СведенияОДоходах.Колонки.Добавить("КоличествоДетей");
	СведенияОДоходах.Колонки.Добавить("Скидка");
	СведенияОДоходах.Колонки.Добавить("ОблагаетсяЕНВД");
	СведенияОДоходах.Колонки.Добавить("ОблагаетсяВзносамиНаДоплатуЛетчикам");
	СведенияОДоходах.Колонки.Добавить("ОблагаетсяВзносамиНаДоплатуШахтерам");
	СведенияОДоходах.Колонки.Добавить("ЯвляетсяДоходомФармацевта");
	СведенияОДоходах.Колонки.Добавить("ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ");
	СведенияОДоходах.Колонки.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией");
	СведенияОДоходах.Колонки.Добавить("КлассУсловийТруда");
	
	СтруктураДокумента.Вставить("СведенияОДоходах", СведенияОДоходах);
	
	ПособияПоСоциальномуСтрахованию = Новый ТаблицаЗначений;
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("ВидПособияСоциальногоСтрахования");
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("ДатаСтраховогоСлучая");
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("УчитыватьКакНовыйСтраховойСлучай");
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("ВидЗанятости");
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("ОплаченныеДни");
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("СуммаСверхНорм");
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("СуммаВсего");
	ПособияПоСоциальномуСтрахованию.Колонки.Добавить("ФинансированиеФедеральнымБюджетом");
	
	СтруктураДокумента.Вставить("ПособияПоСоциальномуСтрахованию", ПособияПоСоциальномуСтрахованию);
	
	ПособияПоУходуЗаРебенком = Новый ТаблицаЗначений;
	ПособияПоУходуЗаРебенком.Колонки.Добавить("НачалоОтпускаПоУходу");
	ПособияПоУходуЗаРебенком.Колонки.Добавить("ВидЗанятости");
	ПособияПоУходуЗаРебенком.Колонки.Добавить("ПособиеПоУходуЗаПервымРебенком");
	ПособияПоУходуЗаРебенком.Колонки.Добавить("ПособиеПоУходуЗаПервымРебенкомСверхНорм");
	ПособияПоУходуЗаРебенком.Колонки.Добавить("ПособиеПоУходуЗаВторымРебенкомСверхНорм");
	ПособияПоУходуЗаРебенком.Колонки.Добавить("ПособиеПоУходуЗаВторымРебенком");
	ПособияПоУходуЗаРебенком.Колонки.Добавить("ФинансированиеФедеральнымБюджетом");
		
	СтруктураДокумента.Вставить("ПособияПоУходуЗаРебенком", ПособияПоУходуЗаРебенком);

	Возврат СтруктураДокумента;
КонецФункции	

Функция СоответствиеРеквизитовОперацииПоВзносам()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("МесяцРасчетногоПериода", "МесяцРасчетногоПериода");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
	СоответствиеРеквизитов.Вставить("ПФРНакопительная", "ПФРНакопительная");
	СоответствиеРеквизитов.Вставить("ПФРСтраховая", "ПФРСтраховая");
	СоответствиеРеквизитов.Вставить("ФФОМС", "ФФОМС");
	СоответствиеРеквизитов.Вставить("ТФОМС", "ТФОМС");
	СоответствиеРеквизитов.Вставить("ФСС", "ФСС");
	СоответствиеРеквизитов.Вставить("ФССНесчастныеСлучаи", "ФССНесчастныеСлучаи");
	СоответствиеРеквизитов.Вставить("ПФРНаДоплатуЛетчикам", "ПФРНаДоплатуЛетчикам");
	СоответствиеРеквизитов.Вставить("ПФРНаДоплатуШахтерам", "ПФРНаДоплатуШахтерам");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах");
	СоответствиеРеквизитов.Вставить("ПФРСтраховаяЕНВД", "ПФРСтраховаяЕНВД");
	СоответствиеРеквизитов.Вставить("ПФРНакопительнаяЕНВД", "ПФРНакопительнаяЕНВД");
	СоответствиеРеквизитов.Вставить("ФССЕНВД", "ФССЕНВД");
	СоответствиеРеквизитов.Вставить("ФФОМСЕНВД", "ФФОМСЕНВД");
	СоответствиеРеквизитов.Вставить("ТФОМСЕНВД", "ТФОМСЕНВД");
	
	
	СоответствиеРеквизитов.Вставить("ПФРПоСуммарномуТарифу", "ПФРПоСуммарномуТарифу");
	СоответствиеРеквизитов.Вставить("ПФРПоСуммарномуТарифуЕНВД", "ПФРПоСуммарномуТарифуЕНВД");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4", "ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3");
	СоответствиеРеквизитов.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4", "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4");
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "СведенияОДоходах");
	СоответствиеРеквизитовТЧ.Вставить("ВидДохода", "ВидДохода");
	СоответствиеРеквизитовТЧ.Вставить("Результат", "Результат");
	СоответствиеРеквизитовТЧ.Вставить("КоличествоДетей", "КоличествоДетей");
	СоответствиеРеквизитовТЧ.Вставить("Скидка", "Скидка");
	СоответствиеРеквизитовТЧ.Вставить("ОблагаетсяЕНВД", "ОблагаетсяЕНВД");
	СоответствиеРеквизитовТЧ.Вставить("ОблагаетсяВзносамиНаДоплатуЛетчикам", "ОблагаетсяВзносамиНаДоплатуЛетчикам");
	СоответствиеРеквизитовТЧ.Вставить("ОблагаетсяВзносамиНаДоплатуШахтерам", "ОблагаетсяВзносамиНаДоплатуШахтерам");
	СоответствиеРеквизитовТЧ.Вставить("ЯвляетсяДоходомФармацевта", "ЯвляетсяДоходомФармацевта");
	СоответствиеРеквизитовТЧ.Вставить("ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ", "ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ");
	СоответствиеРеквизитовТЧ.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией", "ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией");
	СоответствиеРеквизитовТЧ.Вставить("КлассУсловийТруда", "КлассУсловийТруда");
	
	СоответствиеРеквизитов.Вставить("СведенияОДоходах", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "ПособияПоСоциальномуСтрахованию");
	СоответствиеРеквизитовТЧ.Вставить("ВидПособияСоциальногоСтрахования", "ВидПособияСоциальногоСтрахования");
	СоответствиеРеквизитовТЧ.Вставить("ДатаСтраховогоСлучая", "ДатаСтраховогоСлучая");
	СоответствиеРеквизитовТЧ.Вставить("УчитыватьКакНовыйСтраховойСлучай", "УчитыватьКакНовыйСтраховойСлучай");
	СоответствиеРеквизитовТЧ.Вставить("ВидЗанятости", "ВидЗанятости");
	СоответствиеРеквизитовТЧ.Вставить("ОплаченныеДни", "ОплаченныеДни");
	СоответствиеРеквизитовТЧ.Вставить("СуммаСверхНорм", "СуммаСверхНорм");
	СоответствиеРеквизитовТЧ.Вставить("СуммаВсего", "СуммаВсего");
	СоответствиеРеквизитовТЧ.Вставить("ФинансированиеФедеральнымБюджетом", "ФинансированиеФедеральнымБюджетом");
	
	СоответствиеРеквизитов.Вставить("ПособияПоСоциальномуСтрахованию", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "ПособияПоУходуЗаРебенком");
	СоответствиеРеквизитовТЧ.Вставить("НачалоОтпускаПоУходу", "НачалоОтпускаПоУходу");
	СоответствиеРеквизитовТЧ.Вставить("ВидЗанятости", "ВидЗанятости");
	СоответствиеРеквизитовТЧ.Вставить("ПособиеПоУходуЗаПервымРебенком", "ПособиеПоУходуЗаПервымРебенком");
	СоответствиеРеквизитовТЧ.Вставить("ПособиеПоУходуЗаПервымРебенкомСверхНорм", "ПособиеПоУходуЗаПервымРебенкомСверхНорм");
	СоответствиеРеквизитовТЧ.Вставить("ПособиеПоУходуЗаВторымРебенкомСверхНорм", "ПособиеПоУходуЗаВторымРебенкомСверхНорм");
	СоответствиеРеквизитовТЧ.Вставить("ПособиеПоУходуЗаВторымРебенком", "ПособиеПоУходуЗаВторымРебенком");
	СоответствиеРеквизитовТЧ.Вставить("ФинансированиеФедеральнымБюджетом", "ФинансированиеФедеральнымБюджетом");
		
	СоответствиеРеквизитов.Вставить("ПособияПоУходуЗаРебенком", СоответствиеРеквизитовТЧ);

	Возврат СоответствиеРеквизитов;

КонецФункции

Процедура КонвертироватьДвиженияОперацииУчетаВзносов(СписокДокументов, НовыйРегистратор, СоответствиеКонвертированныхОбъектов)
	
	Отбор = Новый Структура("Организация, ФизическоеЛицо, Период", 
					НовыйРегистратор.Организация, 
					НовыйРегистратор.ФизическоеЛицо,
					НовыйРегистратор.МесяцРасчетногоПериода);
					
	КонвертироватьИсчисленныеСтраховыеВзносы(СоответствиеКонвертированныхОбъектов, 
		СписокДокументов, 
		НовыйРегистратор, 
		Отбор);
		
	Отбор.Удалить("ФизическоеЛицо");	
	Отбор.Вставить("ФизЛицо", НовыйРегистратор.ФизическоеЛицо);	
	Отбор.Вставить("Регистратор", СписокДокументов);	
				
	КонвертироватьПорциюДанныхОДоходахДляСтраховыхВзносов(Отбор, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор);	
		
	КонвертироватьПорциюДанныхПособияПоУходуЗаРебенком(Отбор, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор);
		
	КонвертироватьПорциюДанныхПособияПоСоциальномуСтрахованию(Отбор, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор);
		
	ЗарегистрироватьРасчетыСФондамиПоИсчисленнымВзносам(НовыйРегистратор, СоответствиеКонвертированныхОбъектов);	
			
КонецПроцедуры	
	
Процедура ЗарегистрироватьРасчетыСФондамиПоИсчисленнымВзносам(НовыйРегистратор, СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", НовыйРегистратор.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсчисленныеСтраховыеВзносы.Организация,
	|	ИсчисленныеСтраховыеВзносы.Период,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ПФРСтраховая + ИсчисленныеСтраховыеВзносы.ПФРСтраховаяЕНВД) КАК ПФРСтраховая,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ПФРНакопительная + ИсчисленныеСтраховыеВзносы.ПФРНакопительнаяЕНВД) КАК ПФРНакопительная,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ФСС + ИсчисленныеСтраховыеВзносы.ФССЕНВД) КАК ФСС,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ФФОМС + ИсчисленныеСтраховыеВзносы.ФФОМСЕНВД) КАК ФФОМС,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРПоДополнительномуТарифу,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуКПенсииШахтерам,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1 + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2 + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3 + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1 + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2 + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3 + ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ТФОМС + ИсчисленныеСтраховыеВзносы.ТФОМСЕНВД) КАК ТФОМС,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	НАЧАЛОПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ) КАК МесяцРасчетногоПериода,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвмжения,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК ВидПлатежа,
	|	СУММА(ИсчисленныеСтраховыеВзносы.ПФРПоСуммарномуТарифу + ИсчисленныеСтраховыеВзносы.ПФРПоСуммарномуТарифуЕНВД) КАК ПФРПоСуммарномуТарифу,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПлатежноеПоручениеФССДата,
	|	"""" КАК ПлатежноеПоручениеФССНомер,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПлатежноеПоручениеФСС_НСДата,
	|	"""" КАК ПлатежноеПоручениеФСС_НСНомер
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсчисленныеСтраховыеВзносы.Организация,
	|	ИсчисленныеСтраховыеВзносы.Период,
	|	НАЧАЛОПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ)";
	
	ВыборкаПоВзносам = Запрос.Выполнить().Выбрать();
	
	ЗарегистрироватьДанныеОРасчетахСфондамиПоСтраховымВзносам(ВыборкаПоВзносам, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕРАСЧЕТ НДФЛ

Функция СписокДокументовПерерасчетНДФЛ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛПерерасчет.Ссылка
	|ИЗ
	|	Документ.УдалитьНДФЛПерерасчет КАК УдалитьНДФЛПерерасчет
	|ГДЕ
	|	НЕ УдалитьНДФЛПерерасчет.ПометкаУдаления";
	
	СписокДокументов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыПерерасчетНДФЛ(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям();
	
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументовПоДатеНомеру(НеконвертированныеДокументы, 
												"Документ.УдалитьНДФЛПерерасчет",
												"Документ.ПерерасчетНДФЛ",
												СоответствиеКонвертированныхОбъектов);
																							
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛПерерасчет.Ссылка,
	|	УдалитьНДФЛПерерасчет.Номер,
	|	УдалитьНДФЛПерерасчет.Дата,
	|	УдалитьНДФЛПерерасчет.Проведен,
	|	УдалитьНДФЛПерерасчет.НалоговыйПериод,
	|	УдалитьНДФЛПерерасчет.ПериодВзаиморасчетов КАК МесяцПерерасчета,
	|	УдалитьНДФЛПерерасчет.Ответственный,
	|	УдалитьНДФЛПерерасчет.Организация
	|ИЗ
	|	Документ.УдалитьНДФЛПерерасчет КАК УдалитьНДФЛПерерасчет
	|ГДЕ
	|	УдалитьНДФЛПерерасчет.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.Ссылка КАК Ссылка,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ФизЛицо КАК Сотрудник,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке09,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке13,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.НалогПоСтавке35,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетЛичный,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаДетей,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидов,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетИмущественныйРасход КАК ПримененныйВычетИмущественныйРасходы,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПодразделениеОрганизации КАК ОбособленноеПодразделение,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаДетейДвойной,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойной,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаДетейДвойнойВторой,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаДетейИнвалидовДвойнойВторой,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.НомерСтроки КАК ИдентификаторСтрокиНДФЛ,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаВторогоРебенка,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаВторогоРебенкаДвойной,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетНаТретьегоРебенка,
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.ПримененныйВычетИмущественныйРасход
	|ИЗ
	|	Документ.УдалитьНДФЛПерерасчет.РаботникиОрганизации КАК УдалитьНДФЛПерерасчетРаботникиОрганизации
	|ГДЕ
	|	УдалитьНДФЛПерерасчетРаботникиОрганизации.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоНалогам = РезультатыЗапроса[1].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ДанныеДокумента = ВписатьДанныеВыборкиПоДокументуВСтруткуры(ВыборкаПоДокументам, РезультатыЗапроса[0].Колонки);
		
		Налоги = ТаблицаЗначенийПоДаннымВыборки(ВыборкаПоНалогам, ВыборкаПоДокументам.Ссылка, РезультатыЗапроса[1].Колонки);
		
		ДанныеДокумента.Вставить("ПримененныеВычетыНаДетейИИмущественные",Новый ТаблицаЗначений());
		ДанныеДокумента.ПримененныеВычетыНаДетейИИмущественные.Колонки.Добавить("КодВычета");
		ДанныеДокумента.ПримененныеВычетыНаДетейИИмущественные.Колонки.Добавить("РазмерВычета");
		ДанныеДокумента.ПримененныеВычетыНаДетейИИмущественные.Колонки.Добавить("ИдентификаторСтрокиНДФЛ");

		ДанныеДокумента.Вставить("Сотрудники", Налоги);
		
		Для Каждого СтрокаНалоги Из Налоги Цикл
			ВписатьПримененныеВычетыВВыгружаемыеДанныеДокументы(ДанныеДокумента, СтрокаНалоги, СтрокаНалоги.ИдентификаторСтрокиНДФЛ);	
		КонецЦикла;
		
		НачатьТранзакцию();
		
		КонвертированныйДокументСсылка = КонвертироватьДанныеДокумента(ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
		
		Результат.Вставить(ДанныеДокумента.Ссылка, КонвертированныйДокументСсылка); 
		
		КонвертироватьДвиженияДокументаПерерасчетНДФЛ(ДанныеДокумента.Ссылка, 
			КонвертированныйДокументСсылка.ПолучитьОбъект(),
			СоответствиеКонвертированныхОбъектов,
			СоответствиеВладельцевРегистрациям);
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция СоответствиеРеквизитовДокументаПерерасчетНДФЛ()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("МесяцПерерасчета", "МесяцПерерасчета");
	СоответствиеРеквизитов.Вставить("НалоговыйПериод", "НалоговыйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Ответственный", "Ответственный");
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Сотрудники");
	СоответствиеРеквизитовТЧ.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитовТЧ.Вставить("НалогПоСтавке09", "НалогПоСтавке09");
	СоответствиеРеквизитовТЧ.Вставить("НалогПоСтавке13", "НалогПоСтавке13");
	СоответствиеРеквизитовТЧ.Вставить("НалогПоСтавке35", "НалогПоСтавке35");
	СоответствиеРеквизитовТЧ.Вставить("ПримененныйВычетЛичный", "ПримененныйВычетЛичный");
	СоответствиеРеквизитовТЧ.Вставить("ИдентификаторСтрокиНДФЛ", "ИдентификаторСтрокиНДФЛ");
	
	СоответствиеРеквизитов.Вставить("Сотрудники", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "ПримененныеВычетыНаДетейИИмущественные");
	СоответствиеРеквизитовТЧ.Вставить("КодВычета", "КодВычета");
	СоответствиеРеквизитовТЧ.Вставить("РазмерВычета", "РазмерВычета");
	СоответствиеРеквизитовТЧ.Вставить("ИдентификаторСтрокиНДФЛ", "ИдентификаторСтрокиНДФЛ");
	
	СоответствиеРеквизитов.Вставить("ПримененныеВычетыНаДетейИИмущественные", СоответствиеРеквизитовТЧ);
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвиженияДокументаПерерасчетНДФЛ(СтарыйРегистратор, НовыйРегистратор, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	КлючКонвертируемыхДвижений = Новый Структура("Регистратор", СтарыйРегистратор);
			
	КонвертироватьПорциюДанныхРасчетыНалогоплательщиковНДФЛ(КлючКонвертируемыхДвижений,
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор, 
		Истина);
		
	КонвертироватьПорциюДанныхСтандартныхВычетахНДФЛ(КлючКонвертируемыхДвижений, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь,
		НовыйРегистратор);	
		
	КонвертироватьПорциюДанныхИмущественныхВычетахНДФЛ(КлючКонвертируемыхДвижений, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор);	
		
	КонвертироватьПорциюДанныхАвансовыеПлатежиИностранцевПоНДФЛ(
		КлючКонвертируемыхДвижений, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов, 
		Ложь, 
		НовыйРегистратор);
	
		
	СписокДокументов = Новый Массив;	
	СписокДокументов.Добавить(СтарыйРегистратор);
				
	СотрудникиОрганизации = Новый Соответствие;	
		
	КонверитроватьПорциюДанныхУчетаВзаиморасчетов(КлючКонвертируемыхДвижений, 
		СоответствиеКонвертированныхОбъектов, 
		СотрудникиОрганизации,
		Ложь, 
		НовыйРегистратор);
		
	КонвертироватьНДФЛУдержанныйПропорциональноВыплатам(СписокДокументов, 
		НовыйРегистратор.Организация, 
		НовыйРегистратор.МесяцПерерасчета, 
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьРасчетыНалоговыхАгентовНДФЛПропорциональноВыплатам(СписокДокументов, 
		НовыйРегистратор.Организация, 
		НовыйРегистратор.МесяцПерерасчета,
		СоответствиеВладельцевРегистрациям, 
		СоответствиеКонвертированныхОбъектов);
	
КонецПроцедуры	
	

//////////////////////////////////////////////////////////////////////////////////////////////
// Уведомление о праве на имущественный вычет

Функция СписокДокументовУведомлениеОПравеНаИмущественныйВычетДляНДФЛ()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет.Ссылка
	|ИЗ
	|	Документ.УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет КАК УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет
	|ГДЕ
	|	НЕ УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыУведомлениеОПравеНаИмущественныйВычетДляНДФЛ(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям();
	
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Ссылка КАК КонвертированныйДокумент,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент
	|ИЗ
	|	Документ.УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет.РаботникиОрганизации КАК УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК УведомлениеОПравеНаИмущественныйВычетДляНДФЛ
	|		ПО УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ФизЛицо = УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Сотрудник
	|			И УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Организация = УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Организация
	|			И УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ДатаСобытия = УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.ПрименятьВычетыС
	|			И УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Проведен = УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.Проведен
	|			И (УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка В (&СписокДокументов))
	|			И УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.НалоговыйПериод = УведомлениеОПравеНаИмущественныйВычетДляНДФЛ.НалоговыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.НалоговыйПериод,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ФизЛицо КАК Сотрудник,
	|	СУММА(УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Расходы) КАК РасходыНаСтроительствоПриобретение,
	|	СУММА(УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ПроцентыПоКредитам) КАК ПроцентыПоКредитам,
	|	СУММА(УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ПроцентыПриПерекредитовании) КАК ПроцентыПриПерекредитовании,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ДатаСобытия КАК ПрименятьВычетыС,
	|	МИНИМУМ(УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка) КАК Ссылка,
	|	МИНИМУМ(УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Дата) КАК Дата
	|ИЗ
	|	Документ.УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет.РаботникиОрганизации КАК УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации
	|ГДЕ
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.НалоговыйПериод,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ФизЛицо,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка.НалоговыйПериод,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ФизЛицо КАК Сотрудник,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.ДатаСобытия КАК ПрименятьВычетыС,
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычет.РаботникиОрганизации КАК УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации
	|ГДЕ
	|	УдалитьНДФЛПодтверждениеПраваНаИмущественныйВычетРаботникиОрганизации.Ссылка В(&СписокДокументов)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатыЗапроса[0].Выбрать();	
	ВыборкаПоДокументамПериода = РезультатыЗапроса[1].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ВыгружаемыеДанные = СтруктураДанныхДокументаУведомлениеОПравеНаИмущественныйВычетДляНДФЛ();
		ЗаполнитьЗначенияСвойств(ВыгружаемыеДанные, ВыборкаПоДокументам);
				
		КлючДанныхДокумента = Новый Структура("Организация, Сотрудник, НалоговыйПериод, ПрименятьВычетыС, Проведен");
		ЗаполнитьЗначенияСвойств(КлючДанныхДокумента, ВыгружаемыеДанные);
				
		СписокДокументов = СписокДокументовПоКлючуДанныхДокумента(КлючДанныхДокумента, ВыборкаПоДокументамПериода);
				
		НачатьТранзакцию();
		КонвертированныйДокументСсылка = КонвертироватьДанныеДокумента(ВыгружаемыеДанные, СоответствиеКонвертированныхОбъектов);
		
		Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокументСсылка);
		
		КонвертироватьДвиженияДокументаУведомлениеОПравеНаИмущественныйВычетДляНДФЛ(СписокДокументов, 
			КонвертированныйДокументСсылка.ПолучитьОбъект(),
			СоответствиеВладельцевРегистрациям,
			СоответствиеКонвертированныхОбъектов);
		
		ЗафиксироватьТранзакцию();
	
	КонецЦикла;	

	Возврат Результат;	
КонецФункции	

Функция СтруктураДанныхДокументаУведомлениеОПравеНаИмущественныйВычетДляНДФЛ()
	СтруктураДокумента = Новый Структура();
	
	СтруктураДокумента.Вставить("Ссылка");
	СтруктураДокумента.Вставить("Дата");
	СтруктураДокумента.Вставить("Номер");
	СтруктураДокумента.Вставить("Проведен");
	СтруктураДокумента.Вставить("НалоговыйПериод");
	СтруктураДокумента.Вставить("Организация");
	СтруктураДокумента.Вставить("Сотрудник");
	СтруктураДокумента.Вставить("ПрименятьВычетыС");
	СтруктураДокумента.Вставить("РасходыНаСтроительствоПриобретение");
	СтруктураДокумента.Вставить("ПроцентыПоКредитам");
	СтруктураДокумента.Вставить("ПроцентыПриПерекредитовании");
	СтруктураДокумента.Вставить("НомерУведомления");
	СтруктураДокумента.Вставить("ДатаУведомления");
	СтруктураДокумента.Вставить("КодНалоговогоОргана");
	СтруктураДокумента.Вставить("Комментарий");
		
	Возврат СтруктураДокумента;
КонецФункции	

Функция СоответствиеРеквизитовДокументаУведомлениеОПравеНаИмущественныйВычетДляНДФЛ()
	СоответствиеРеквизитов = Новый Структура();
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Номер", "Номер");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("НалоговыйПериод", "НалоговыйПериод");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ПрименятьВычетыС", "ПрименятьВычетыС");
	СоответствиеРеквизитов.Вставить("РасходыНаСтроительствоПриобретение", "РасходыНаСтроительствоПриобретение");
	СоответствиеРеквизитов.Вставить("ПроцентыПоКредитам", "ПроцентыПоКредитам");
	СоответствиеРеквизитов.Вставить("ПроцентыПриПерекредитовании", "ПроцентыПриПерекредитовании");
	СоответствиеРеквизитов.Вставить("НомерУведомления", "НомерУведомления");
	СоответствиеРеквизитов.Вставить("ДатаУведомления", "ДатаУведомления");
	СоответствиеРеквизитов.Вставить("КодНалоговогоОргана", "КодНалоговогоОргана");
	СоответствиеРеквизитов.Вставить("Комментарий", "Комментарий");
		
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвиженияДокументаУведомлениеОПравеНаИмущественныйВычетДляНДФЛ(СписокДокументов, НовыйРегистратор, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	
	КлючПорцииДанных = Новый Структура("Регистратор, ФизЛицо, Период", СписокДокументов, НовыйРегистратор.Сотрудник, НовыйРегистратор.ПрименятьВычетыС);
	
	КонвертироватьПорциюДанныхИмущественныхВычетахНДФЛ(КлючПорцииДанных, 
		СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, 
		Ложь,
		НовыйРегистратор);
		
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ РАСЧЕТНЫХ ДОКУМЕНТОВ ПО НДФЛ  

Процедура КонвертироватьДвиженияДокументовВыплатыПоНДФЛ(СоответствиеКонвертированныхОбъектов)
	
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям();
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьНДФЛРасчетыСБюджетом.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторыНДФЛРасчетыСБюджетом
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛРасчетыСБюджетом КАК УдалитьНДФЛРасчетыСБюджетом
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(УдалитьНДФЛРасчетыСБюджетом.Регистратор) В (&ТипыДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистраторыНДФЛРасчетыСБюджетом.Регистратор
	|ИЗ
	|	ВТРегистраторыНДФЛРасчетыСБюджетом КАК РегистраторыНДФЛРасчетыСБюджетом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО РегистраторыНДФЛРасчетыСБюджетом.Регистратор = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов = Новый Массив;
		
		СписокДокументов.Добавить(Выборка.Регистратор);
		
		КлючПорцииДанных = Новый Структура("Регистратор", СписокДокументов);
		
		НачатьТранзакцию();
		
		НовыйРегистратор = Выборка.Регистратор.ПолучитьОбъект();
		
		КонвертироватьПорциюДанныхРасчетыНалогоплательщиковНДФЛ(КлючПорцииДанных, 
															СоответствиеВладельцевРегистрациям, 
															СоответствиеКонвертированныхОбъектов, 
															Ложь, 
															НовыйРегистратор, 
															Ложь);
		
															
		КонвертироватьРасчетыНалоговыхАгентовНДФЛ(СоответствиеВладельцевРегистрациям, 
											СоответствиеКонвертированныхОбъектов, 
											СписокДокументов, 
											НовыйРегистратор);
											
		ЗафиксироватьТранзакцию();									
	КонецЦикла;	
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ НАКОПЛЕНИЯ

/////////////////////////////////////////////////////////////////////////////////////////////
// ВЗАИМОРАСЧЕТЫ 

Процедура КонвертироватьДанныеУчетаВзаиморасчетов(СоответствиеКонвертируемыхОбъектов)
	
	ПериодыВзаиморасчетов = КлючиПорцийДанныхДляРегистрацииВзаиморасчетов();
	
	СотрудникиОрганизаций = Новый Соответствие;
	Пока ПериодыВзаиморасчетов.Следующий() Цикл
		КлючПорцииДанных = Новый Структура("Период, Организация", ПериодыВзаиморасчетов.Период, ПериодыВзаиморасчетов.Организация);
		
		
		КонверитроватьПорциюДанныхУчетаВзаиморасчетов(КлючПорцииДанных, СоответствиеКонвертируемыхОбъектов, СотрудникиОрганизаций, Истина);
	
	КонецЦикла;	

КонецПроцедуры	

Функция КлючиПорцийДанныхДляРегистрацииВзаиморасчетов()
	Запрос = Новый Запрос;
	
	КонвертируемыеТипыДокументовБП2 = КонвертируемыеТипыДокументовБП2();
	КонвертируемыеТипыДокументовБП3 = КонвертируемыеТипыДокументовБП3();
	
	КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.УдалитьДепонированиеОрганизаций"));
	//КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));
	
	КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	//КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));


	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2);
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьВзаиморасчетыСРаботникамиОрганизацийОбороты.Организация,
	|	УдалитьВзаиморасчетыСРаботникамиОрганизацийОбороты.ПериодВзаиморасчетов
	|ПОМЕСТИТЬ ВТПериодыВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.УдалитьВзаиморасчетыСРаботникамиОрганизаций.Обороты(, , Регистратор, ) КАК УдалитьВзаиморасчетыСРаботникамиОрганизацийОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьВзаиморасчетыСРаботникамиОрганизацийОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьВзаиморасчетыСРаботникамиОрганизацийОбороты.Организация,
	|	УдалитьВзаиморасчетыСРаботникамиОрганизацийОбороты.ПериодВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыССотрудникамиОбороты.Период КАК Период,
	|	ВзаиморасчетыССотрудникамиОбороты.Организация
	|ПОМЕСТИТЬ ВТПеренесенныеВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками.Обороты(, , Регистратор, ) КАК ВзаиморасчетыССотрудникамиОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(ВзаиморасчетыССотрудникамиОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыССотрудникамиОбороты.Период,
	|	ВзаиморасчетыССотрудникамиОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыВзаиморасчетов.Организация КАК Организация,
	|	ПериодыВзаиморасчетов.ПериодВзаиморасчетов КАК Период
	|ИЗ
	|	ВТПериодыВзаиморасчетов КАК ПериодыВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеренесенныеВзаиморасчеты КАК ПеренесенныеВзаиморасчеты
	|		ПО ПериодыВзаиморасчетов.Организация = ПеренесенныеВзаиморасчеты.Организация
	|			И ПериодыВзаиморасчетов.ПериодВзаиморасчетов = ПеренесенныеВзаиморасчеты.Период
	|ГДЕ
	|	ПеренесенныеВзаиморасчеты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыВзаиморасчетов.Организация,
	|	ПериодыВзаиморасчетов.ПериодВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период";
	
	Возврат Запрос.Выполнить().Выбрать();	
		
КонецФункции	

Процедура КонверитроватьПорциюДанныхУчетаВзаиморасчетов(КлючПорцииДанных, СоответствиеКонвертируемыхОбъектов, СотрудникиОрганизаций, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	ИмяВТВзаиморасчеты = "ВТВзаиморасчеты";
	ОграничиватьСуммыВзаиморасчетовСуммойВВедомости = Ложь;
	Если НовыйРегистратор <> Неопределено
		И (ТипЗнч(НовыйРегистратор) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВБанк") 
		Или ТипЗнч(НовыйРегистратор) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВКассу")) Тогда
		
		ИмяВТВзаиморасчеты = "ВТВзаиморасчетыПоРасчетнымДокументам";
		ОграничиватьСуммыВзаиморасчетовСуммойВВедомости = Истина;
	КонецЕсли;	
		
	СформироватьВТСДаннымиВзаиморасчетовДляКонвертиации(КлючПорцииДанных, МенеджерВременныхТаблиц, ТолькоДвиженияНепереносимыхРегистраторов, ИмяВТВзаиморасчеты);
	
	Если ОграничиватьСуммыВзаиморасчетовСуммойВВедомости Тогда
		СоздатьВТВзаиморасчетыСОграничениемСуммПоВедомости(МенеджерВременныхТаблиц, НовыйРегистратор.Ссылка);	
	КонецЕсли;	
	
	СформироватьВТСБазойРаспределенияПоНачислениям(МенеджерВременныхТаблиц, КлючПорцииДанных, Истина, Истина);
	
	ВыборкаПоВзаиморасчетам = ДанныеДляРегистрацииВзаиморасчетов(МенеджерВременныхТаблиц);
	
	НачатьТранзакцию();
	ЗарегистрироватьВзаиморасчеты(ВыборкаПоВзаиморасчетам, СоответствиеКонвертируемыхОбъектов, СотрудникиОрганизаций, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

Процедура СоздатьВТВзаиморасчетыСОграничениемСуммПоВедомости(МенеджерВременныхТаблиц, Ведомость)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВедомостей.СотрудникФизическоеЛицо,
	|	СуммыВедомостей.КВыплате
	|ПОМЕСТИТЬ ВТДанныеВедомости
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник.ФизическоеЛицо КАК СотрудникФизическоеЛицо,
	|		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.КВыплате КАК КВыплате
	|	ИЗ
	|		Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
	|	ГДЕ
	|		ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка = &Ведомость
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Сотрудник.ФизическоеЛицо,
	|		СУММА(ВедомостьНаВыплатуЗарплатыВКассуЗарплата.КВыплате)
	|	ИЗ
	|		Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ВедомостьНаВыплатуЗарплатыВКассуЗарплата
	|	ГДЕ
	|		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Ссылка = &Ведомость
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВедомостьНаВыплатуЗарплатыВКассуЗарплата.Сотрудник.ФизическоеЛицо) КАК СуммыВедомостей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыПоРасчетнымДокументам.Физлицо,
	|	ВзаиморасчетыПоРасчетнымДокументам.Организация,
	|	ВзаиморасчетыПоРасчетнымДокументам.ПериодВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеВедомости.КВыплате ЕСТЬ NULL 
	|			ТОГДА ВзаиморасчетыПоРасчетнымДокументам.Сумма
	|		КОГДА ВзаиморасчетыПоРасчетнымДокументам.Сумма > ДанныеВедомости.КВыплате
	|			ТОГДА ДанныеВедомости.КВыплате
	|		ИНАЧЕ ВзаиморасчетыПоРасчетнымДокументам.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВзаиморасчетыПоРасчетнымДокументам.Период,
	|	ВзаиморасчетыПоРасчетнымДокументам.ВидДвижения
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	ВТВзаиморасчетыПоРасчетнымДокументам КАК ВзаиморасчетыПоРасчетнымДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВедомости КАК ДанныеВедомости
	|		ПО ВзаиморасчетыПоРасчетнымДокументам.Физлицо = ДанныеВедомости.СотрудникФизическоеЛицо";
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СформироватьВТСДаннымиВзаиморасчетовДляКонвертиации(КлючиПорцииДанных, МенеджерВременныхТаблиц, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, ИмяВТРезультат = "ВТВзаиморасчеты")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		КонвертируемыеТипыДокументовБП2 = КонвертируемыеТипыДокументовБП2();
	
		КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.УдалитьДепонированиеОрганизаций"));
		//КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатков"));
		
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2);
	КонецЕсли;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоПериодам.Физлицо,
	|	ВзаиморасчетыПоПериодам.Организация,
	|	ВзаиморасчетыПоПериодам.ПериодВзаиморасчетов,
	|	СУММА(ВзаиморасчетыПоПериодам.СуммаВзаиморасчетов) КАК Сумма,
	|	ВзаиморасчетыПоПериодам.Период,
	|	ВзаиморасчетыПоПериодам.ВидДвижения
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.УдалитьВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыПоПериодам
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыПоПериодам.Физлицо,
	|	ВзаиморасчетыПоПериодам.Организация,
	|	ВзаиморасчетыПоПериодам.ПериодВзаиморасчетов,
	|	ВзаиморасчетыПоПериодам.Период,
	|	ВзаиморасчетыПоПериодам.ВидДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Взаиморасчеты.Физлицо,
	|	Взаиморасчеты.ПериодВзаиморасчетов КАК ПериодРаспределения,
	|	Взаиморасчеты.Организация
	|ПОМЕСТИТЬ ВТФизЛицаДляРаспределения
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВзаиморасчеты", ИмяВТРезультат);

	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И ВзаиморасчетыПоПериодам." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(ВзаиморасчетыПоПериодам.ПериодВзаиморасчетов, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И ВзаиморасчетыПоПериодам." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(ВзаиморасчетыПоПериодам.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.Выполнить();

КонецПроцедуры	

Процедура СформироватьВТСБазойРаспределенияПоНачислениям(МенеджерВременныхТаблиц, КлючиПорцииДанных, ДополнятьБазойПоУмолчанию = Ложь, УчитыватьПодразделение = Ложь)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
	КонецЦикла;	
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицаДляРаспределения.ФизЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТФизЛицаДляРаспределения КАК ФизЛицаДляРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникам.ПодразделениеОрганизации КАК Подразделение,
	|	НачисленияУдержанияПоСотрудникам.Ссылка.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодРаспределения,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	СУММА(НачисленияУдержанияПоСотрудникам.Результат) КАК БазаРаспределения
	|ПОМЕСТИТЬ #ИмяВТРезультат
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачисленияУдержанияПоСотрудникам
	|		ПО (НачисленияУдержанияПоСотрудникам.Физлицо = ФизическиеЛица.ФизЛицо)
	|			И (НачисленияУдержанияПоСотрудникам.Ссылка.Проведен)
	|			И (&УсловиеСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.ФизЛицо,
	|	НачисленияУдержанияПоСотрудникам.ПодразделениеОрганизации,
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Ссылка.ПериодРегистрации, МЕСЯЦ),
	|	НачисленияУдержанияПоСотрудникам.Ссылка.Организация";
	
	
	Если Не УчитыватьПодразделение Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияУдержанияПоСотрудникам.Подразделение,", "");
	КонецЕсли;	
	
	ТекстУсловия = "";		
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		ИмяПоляКлюч = ?(КлючДанных.Ключ = "Регистратор", "Ссылка", КлючДанных.Ключ);
		
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И НачисленияУдержанияПоСотрудникам." +  ИмяПоляКлюч + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" 
			Или КлючДанных.Ключ = "ПериодВзаиморасчетов" Тогда
			
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Ссылка.ПериодРегистрации, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И НачисленияУдержанияПоСотрудникам.Ссылка." +  ИмяПоляКлюч + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСвязи", ТекстУсловия);

	Если ДополнятьБазойПоУмолчанию Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТРезультат", "ВТБазаРаспределенияПоСотрудникам");
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицаДляРаспределения.ФизЛицо КАК ФизическоеЛицо,
		|	ФизЛицаДляРаспределения.Организация КАК Организация,
		|	ФизЛицаДляРаспределения.ПериодРаспределения КАК ПериодРаспределения
		|ИЗ
		|	ВТФизЛицаДляРаспределения КАК ФизЛицаДляРаспределения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаРаспределенияПоСотрудникам КАК БазаРаспределенияПоСотрудникам
		|		ПО ФизЛицаДляРаспределения.Физлицо = БазаРаспределенияПоСотрудникам.ФизическоеЛицо
		|ГДЕ
		|	БазаРаспределенияПоСотрудникам.Сотрудник ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ПериодРаспределения,
		|	ФизическоеЛицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		БазаРаспределения = Новый ТаблицаЗначений;
		БазаРаспределения.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		БазаРаспределения.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		БазаРаспределения.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		БазаРаспределения.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		БазаРаспределения.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		БазаРаспределения.Колонки.Добавить("ПериодРаспределения", Новый ОписаниеТипов("Дата"));

		ФизЛицаБезБазы = Новый ТаблицаЗначений;
		ФизЛицаБезБазы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ФизЛицаБезБазы.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ФизЛицаБезБазы.Колонки.Добавить("ДатаСреза", Новый ОписаниеТипов("Дата"));
		
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ПериодРаспределения") Цикл
				ФизЛица = Новый Массив; 
				Пока Выборка.Следующий() Цикл
					ФизЛица.Добавить(Выборка.ФизическоеЛицо);
				КонецЦикла;
				
				БазаРаспределенияЗаПериод = ПолучитьБазуУдержанийПоУмолчанию(ФизЛица, Выборка.ПериодРаспределения, Выборка.Организация);
				
				Для Каждого СтрокаБазаЗаПериод Из БазаРаспределенияЗаПериод Цикл
					СтрокаБазы = БазаРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаБазы, СтрокаБазаЗаПериод);
					
					СтрокаБазы.Организация = Выборка.Организация;
					СтрокаБазы.ПериодРаспределения = Выборка.ПериодРаспределения;
					
					ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ФизЛица, СтрокаБазы.ФизическоеЛицо);	
				КонецЦикла;	
				
				Для Каждого ФизическоеЛицо Из ФизЛица Цикл
					СтрокаТаблицы = ФизЛицаБезБазы.Добавить();
					СтрокаТаблицы.ФизическоеЛицо = ФизическоеЛицо;
					СтрокаТаблицы.Организация = Выборка.Организация;
					СтрокаТаблицы.ДатаСреза = Выборка.ПериодРаспределения;
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;	
		
		Запрос.УстановитьПараметр("БазаРаспределенияПоУмолчанию", БазаРаспределения);
		
		СоздатьВТСОсновнымиМестамиРаботыНаПериод(Запрос.МенеджерВременныхТаблиц, ФизЛицаБезБазы);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазаРаспределенияПоСотрудникам.ФизическоеЛицо,
		|	БазаРаспределенияПоСотрудникам.Подразделение,
		|	БазаРаспределенияПоСотрудникам.Организация,
		|	БазаРаспределенияПоСотрудникам.ПериодРаспределения,
		|	БазаРаспределенияПоСотрудникам.Сотрудник КАК Сотрудник,
		|	БазаРаспределенияПоСотрудникам.Сумма КАК БазаРаспределения
		|ПОМЕСТИТЬ ВТБазаРаспределенияПоПоУмолчанию
		|ИЗ
		|	&БазаРаспределенияПоУмолчанию КАК БазаРаспределенияПоСотрудникам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаРаспределенияПоСотрудникам.ФизическоеЛицо,
		|	БазаРаспределенияПоСотрудникам.Подразделение,
		|	БазаРаспределенияПоСотрудникам.Организация,
		|	БазаРаспределенияПоСотрудникам.ПериодРаспределения,
		|	БазаРаспределенияПоСотрудникам.Сотрудник КАК Сотрудник,
		|	СУММА(БазаРаспределенияПоСотрудникам.БазаРаспределения) КАК БазаРаспределения
		|ПОМЕСТИТЬ ВТБазаРаспределенияПоНачислениям
		|ИЗ
		|	ВТБазаРаспределенияПоСотрудникам КАК БазаРаспределенияПоСотрудникам
		|ГДЕ
		|	НЕ БазаРаспределенияПоСотрудникам.Сотрудник ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	БазаРаспределенияПоСотрудникам.ФизическоеЛицо,
		|	БазаРаспределенияПоСотрудникам.Подразделение,
		|	БазаРаспределенияПоСотрудникам.Организация,
		|	БазаРаспределенияПоСотрудникам.ПериодРаспределения,
		|	БазаРаспределенияПоСотрудникам.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БазаРаспределенияПоПоУмолчанию.ФизическоеЛицо,
		|	БазаРаспределенияПоПоУмолчанию.Подразделение,
		|	БазаРаспределенияПоПоУмолчанию.Организация,
		|	БазаРаспределенияПоПоУмолчанию.ПериодРаспределения,
		|	БазаРаспределенияПоПоУмолчанию.Сотрудник,
		|	СУММА(БазаРаспределенияПоПоУмолчанию.БазаРаспределения)
		|ИЗ
		|	ВТБазаРаспределенияПоПоУмолчанию КАК БазаРаспределенияПоПоУмолчанию
		|
		|СГРУППИРОВАТЬ ПО
		|	БазаРаспределенияПоПоУмолчанию.ФизическоеЛицо,
		|	БазаРаспределенияПоПоУмолчанию.Подразделение,
		|	БазаРаспределенияПоПоУмолчанию.Организация,
		|	БазаРаспределенияПоПоУмолчанию.ПериодРаспределения,
		|	БазаРаспределенияПоПоУмолчанию.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СотрудникиБезБазы.ФизическоеЛицо,
		|	СотрудникиБезБазы.Подразделение,
		|	СотрудникиБезБазы.Организация,
		|	СотрудникиБезБазы.ПериодРаспределения,
		|	СотрудникиБезБазы.Сотрудник,
		|	1
		|ИЗ
		|	ВТСотрудникиФизическихЛиц КАК СотрудникиБезБазы
		|";
		
		
		Если Не УчитыватьПодразделение Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "БазаРаспределенияПоСотрудникам.Подразделение,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "БазаРаспределенияПоПоУмолчанию.Подразделение,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиБезБазы.Подразделение,", "");
		КонецЕсли;	
		
		Запрос.Выполнить();		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТРезультат", "ВТБазаРаспределенияПоНачислениям");
		
		Запрос.Выполнить();
	КонецЕсли;	

КонецПроцедуры	

Процедура СоздатьВТСОсновнымиМестамиРаботыНаПериод(МенеджерВременныхТаблиц, ТаблицаФизическихЛиц)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФизическихЛиц.ФизическоеЛицо,
	|	ТаблицаФизическихЛиц.ДатаСреза,
	|	ТаблицаФизическихЛиц.Организация
	|ПОМЕСТИТЬ ВТФизическиеЛицаБезБазы
	|ИЗ
	|	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо,
	|	ФизическиеЛица.ДатаСреза,
	|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ФизическиеЛица.Организация,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиГловныхОрганизаций
	|ИЗ
	|	ВТФизическиеЛицаБезБазы КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ФизическиеЛица.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
	|			И ФизическиеЛица.Организация = ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛица.ФизическоеЛицо,
	|	ФизическиеЛица.ДатаСреза,
	|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ФизическиеЛица.Организация,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГловныхОрганизаций.ФизическоеЛицо,
	|	СотрудникиГловныхОрганизаций.ДатаСреза,
	|	СотрудникиГловныхОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА СотрудникиГловныхОрганизаций.ДатаПриема <= СотрудникиГловныхОрганизаций.ДатаСреза
	|			ТОГДА 100
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СотрудникиГловныхОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СотрудникиГловныхОрганизаций.ДатаУвольнения > НАЧАЛОПЕРИОДА(СотрудникиГловныхОрганизаций.ДатаСреза, МЕСЯЦ)
	|			ТОГДА 10 + ВЫБОР
	|					КОГДА СотрудникиГловныхОрганизаций.ОсновноеРабочееМестоВОрганизации
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ + РАЗНОСТЬДАТ(СотрудникиГловныхОрганизаций.ДатаПриема, СотрудникиГловныхОрганизаций.ДатаСреза, ДЕНЬ) / 100000
	|		ИНАЧЕ 0 + (1 - (РАЗНОСТЬДАТ(СотрудникиГловныхОрганизаций.ДатаУвольнения, СотрудникиГловныхОрганизаций.ДатаСреза, ДЕНЬ) + 1) / 100000)
	|	КОНЕЦ КАК Приоритет,
	|	СотрудникиГловныхОрганизаций.Сотрудник,
	|	СотрудникиГловныхОрганизаций.ТекущееПодразделение
	|ПОМЕСТИТЬ ВТТаблицаПриоритетовСотрудников
	|ИЗ
	|	ВТСотрудникиГловныхОрганизаций КАК СотрудникиГловныхОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаПриоритетовСотрудников.ФизическоеЛицо,
	|	ВТТаблицаПриоритетовСотрудников.ДатаСреза,
	|	ВТТаблицаПриоритетовСотрудников.Организация,
	|	МАКСИМУМ(ВТТаблицаПриоритетовСотрудников.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТМаксимальныеПриоритеты
	|ИЗ
	|	ВТТаблицаПриоритетовСотрудников КАК ВТТаблицаПриоритетовСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаПриоритетовСотрудников.ФизическоеЛицо,
	|	ВТТаблицаПриоритетовСотрудников.ДатаСреза,
	|	ВТТаблицаПриоритетовСотрудников.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПриоритетовСотрудников.ФизическоеЛицо,
	|	ТаблицаПриоритетовСотрудников.ДатаСреза КАК ПериодРаспределения,
	|	ТаблицаПриоритетовСотрудников.Организация,
	|	МАКСИМУМ(ТаблицаПриоритетовСотрудников.Сотрудник) КАК Сотрудник,
	|	ТаблицаПриоритетовСотрудников.ТекущееПодразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТСотрудникиФизическихЛиц
	|ИЗ
	|	ВТТаблицаПриоритетовСотрудников КАК ТаблицаПриоритетовСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальныеПриоритеты КАК МаксимальныеПриоритеты
	|		ПО ТаблицаПриоритетовСотрудников.ФизическоеЛицо = МаксимальныеПриоритеты.ФизическоеЛицо
	|			И ТаблицаПриоритетовСотрудников.Организация = МаксимальныеПриоритеты.Организация
	|			И ТаблицаПриоритетовСотрудников.ДатаСреза = МаксимальныеПриоритеты.ДатаСреза
	|			И ТаблицаПриоритетовСотрудников.Приоритет = МаксимальныеПриоритеты.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПриоритетовСотрудников.ФизическоеЛицо,
	|	ТаблицаПриоритетовСотрудников.ДатаСреза,
	|	ТаблицаПриоритетовСотрудников.Организация,
	|	ТаблицаПриоритетовСотрудников.ТекущееПодразделение";
	
	Запрос.Выполнить();	
КонецПроцедуры	

Функция ДанныеДляРегистрацииВзаиморасчетов(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.Физлицо КАК ФизическоеЛицо,
	|	Взаиморасчеты.Организация КАК Организация,
	|	Взаиморасчеты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	СУММА(Взаиморасчеты.Сумма) КАК Сумма,
	|	БазаРаспределенияПоНачислениям.Сотрудник,
	|	БазаРаспределенияПоНачислениям.Подразделение,
	|	Взаиморасчеты.Период КАК Период,
	|	Взаиморасчеты.ВидДвижения,
	|	СУММА(ЕСТЬNULL(БазаРаспределенияПоНачислениям.БазаРаспределения, 1)) КАК БазаРаспределения,
	|	ФизическиеЛица.Наименование КАК ФизЛицоНаименование
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаРаспределенияПоНачислениям КАК БазаРаспределенияПоНачислениям
	|		ПО Взаиморасчеты.Физлицо = БазаРаспределенияПоНачислениям.ФизическоеЛицо
	|			И Взаиморасчеты.Организация = БазаРаспределенияПоНачислениям.Организация
	|			И Взаиморасчеты.ПериодВзаиморасчетов = БазаРаспределенияПоНачислениям.ПериодРаспределения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Взаиморасчеты.Физлицо = ФизическиеЛица.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Физлицо,
	|	Взаиморасчеты.Организация,
	|	Взаиморасчеты.ПериодВзаиморасчетов,
	|	БазаРаспределенияПоНачислениям.Сотрудник,
	|	БазаРаспределенияПоНачислениям.Подразделение,
	|	Взаиморасчеты.Период,
	|	Взаиморасчеты.ВидДвижения,
	|	ФизическиеЛица.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период,
	|	ПериодВзаиморасчетов,
	|	ФизическоеЛицо,
	|	Взаиморасчеты.ВидДвижения";
	
	Возврат Запрос.Выполнить().Выбрать();	
	
КонецФункции	

Процедура ЗарегистрироватьВзаиморасчеты(ВыборкаПоВзаиморасчетам, СоответствиеКонвертируемыхОбъектов, СотрудникиОрганизаций,  НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ВыборкаПоВзаиморасчетам.СледующийПоЗначениюПоля("Организация") Цикл
		Пока ВыборкаПоВзаиморасчетам.СледующийПоЗначениюПоля("Период") Цикл
			Пока ВыборкаПоВзаиморасчетам.СледующийПоЗначениюПоля("ПериодВзаиморасчетов") Цикл	
				ТаблицаНачислений = Новый ТаблицаЗначений;
				ТаблицаНачислений.Колонки.Добавить("Сотрудник");
				ТаблицаНачислений.Колонки.Добавить("ФизическоеЛицо");
				ТаблицаНачислений.Колонки.Добавить("Подразделение");
				ТаблицаНачислений.Колонки.Добавить("Сумма");
				ТаблицаНачислений.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число"));
				
				ТаблицаУдержаний = Новый ТаблицаЗначений;
				ТаблицаУдержаний.Колонки.Добавить("Сотрудник");
				ТаблицаУдержаний.Колонки.Добавить("ФизическоеЛицо");
				ТаблицаУдержаний.Колонки.Добавить("Подразделение");
				ТаблицаУдержаний.Колонки.Добавить("Сумма");
				ТаблицаУдержаний.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число"));
				
				ТаблицаВыплат = НоваяТаблицаВыплаченнойЗарплаты();
				
				Если НовыйРегистратор = Неопределено Тогда
					ДокументПереноса = ДокументПереносаДанных(ВыборкаПоВзаиморасчетам.Период, ВыборкаПоВзаиморасчетам.Организация, "ВзаиморасчетыССотрудниками,ЗарплатаКВыплате");
				КонецЕсли;	
					
				Пока ВыборкаПоВзаиморасчетам.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
				    Пока ВыборкаПоВзаиморасчетам.СледующийПоЗначениюПоля("ВидДвижения") Цикл 
					
						МассивСтрок = Новый Массив;
						СуммаКРаспределению = ВыборкаПоВзаиморасчетам.Сумма;
						МассивКоэффициентов = Новый Массив;
						БазаРаспределения = 0;
						Пока ВыборкаПоВзаиморасчетам.Следующий() Цикл 
							Если ВыборкаПоВзаиморасчетам.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
								СтрокаТаблицы = ТаблицаВыплат.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоВзаиморасчетам);
								СтрокаТаблицы.Сумма = ВыборкаПоВзаиморасчетам.Сумма;	
							ИначеЕсли ВыборкаПоВзаиморасчетам.Сумма >= 0 Тогда
								СтрокаТаблицы = ТаблицаНачислений.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоВзаиморасчетам);
							ИначеЕсли ВыборкаПоВзаиморасчетам.Сумма < 0 Тогда
								СтрокаТаблицы = ТаблицаУдержаний.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоВзаиморасчетам); 
								СтрокаТаблицы.Сумма = - СтрокаТаблицы.Сумма;
							КонецЕсли;	
							
							Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
								СтрокаТаблицы.Сотрудник = СоздатьНовогоСотрудника(ВыборкаПоВзаиморасчетам.Организация, ВыборкаПоВзаиморасчетам.ФизическоеЛицо, ВыборкаПоВзаиморасчетам.ФизЛицоНаименование, СотрудникиОрганизаций);	
							КонецЕсли;	
								
							МассивСтрок.Добавить(СтрокаТаблицы);
							МассивКоэффициентов.Добавить(ВыборкаПоВзаиморасчетам.БазаРаспределения);
							
							БазаРаспределения = БазаРаспределения + ВыборкаПоВзаиморасчетам.БазаРаспределения;
							
						КонецЦикла;	
						
						Если БазаРаспределения = 0 Тогда
							КоличествоКоэффициентов = МассивКоэффициентов.Количество();
							
							Для Сч = 0 По КоличествоКоэффициентов - 1 Цикл
								МассивКоэффициентов[Сч] = 1;	
							КонецЦикла;	
						КонецЕсли;	
						
						РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивКоэффициентов);
					
						Индекс = 0;
						Для Каждого Строка Из МассивСтрок Цикл
							Если РаспределенныеСуммы = Неопределено Тогда
								Если Строка.Владелец() = ТаблицаВыплат Тогда
									Строка.Сумма = 0;	
								Иначе	
									Строка.Сумма = 0;
								КонецЕсли;	

							Иначе
								Если Строка.Владелец() = ТаблицаУдержаний Тогда 
									Строка.Сумма = - РаспределенныеСуммы[Индекс];
								ИначеЕсли Строка.Владелец() = ТаблицаВыплат Тогда
									Строка.Сумма = РаспределенныеСуммы[Индекс];	
								Иначе	
									Строка.Сумма = РаспределенныеСуммы[Индекс];
								КонецЕсли;	
							КонецЕсли;	
							Индекс = Индекс + 1;							
						КонецЦикла;	

					КонецЦикла;	
					
				КонецЦикла;			                                           
				Если ТаблицаНачислений.Количество() <> 0
					ИЛИ ТаблицаУдержаний.Количество() <> 0 Тогда
					ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(ДокументПереноса.Движения, Ложь, ВыборкаПоВзаиморасчетам.Организация, ВыборкаПоВзаиморасчетам.ПериодВзаиморасчетов, Перечисления.ХарактерВыплатыЗарплаты.Зарплата, ТаблицаНачислений, ТаблицаУдержаний);
				КонецЕсли;
				Если ТаблицаВыплат.Количество() <> 0 Тогда
					ВзаиморасчетыССотрудниками.ЗарегистрироватьВыплаченнуюЗарплату(ДокументПереноса.Движения, Ложь, ВыборкаПоВзаиморасчетам.Организация, ВыборкаПоВзаиморасчетам.ПериодВзаиморасчетов, ТаблицаВыплат);
				КонецЕсли;
				
				Если НовыйРегистратор = Неопределено Тогда
					ДокументПереноса.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;	

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ВзаиморасчетыССотрудниками.Записать();
		ДокументПереноса.Движения.ЗарплатаКВыплате.Записать();
	КонецЕсли;	
КонецПроцедуры	

Функция СоздатьНовогоСотрудника(Организация, ФизическоеЛицо, Наименование, СотрудникиОрганизаций)Экспорт
	СоответствиеФизЛицСотрудникам = СотрудникиОрганизаций.Получить(Организация);
	Если СоответствиеФизЛицСотрудникам <> Неопределено Тогда
		СотрудникСсылка = СоответствиеФизЛицСотрудникам.Получить(ФизическоеЛицо);
		Если СотрудникСсылка <> Неопределено Тогда 
			Возврат СотрудникСсылка;
		КонецЕсли;
	Иначе
		СоответствиеФизЛицСотрудникам = Новый Соответствие;
		СотрудникиОрганизаций.Вставить(Организация, СоответствиеФизЛицСотрудникам);
	КонецЕсли;	
	
	Сотрудник = Справочники.Сотрудники.СоздатьЭлемент();
	Сотрудник.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	Сотрудник.ФизическоеЛицо = ФизическоеЛицо;
	Сотрудник.Наименование = Наименование;
	Сотрудник.УстановитьНовыйКод();
	
	Сотрудник.Записать();
	
	КадровыеДанные = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьМенеджерЗаписи();
	
	КадровыеДанные.ГоловнаяОрганизация = Сотрудник.ГоловнаяОрганизация;
	КадровыеДанные.ФизическоеЛицо = ФизическоеЛицо;
	КадровыеДанные.Сотрудник = Сотрудник.Ссылка;
	КадровыеДанные.ТекущаяОрганизация = Организация;
	КадровыеДанные.КоличествоСтавок = 1;
	
	КадровыеДанные.Записать();
	
	СоответствиеФизЛицСотрудникам.Вставить(ФизическоеЛицо, Сотрудник.Ссылка);
	
	Возврат Сотрудник.Ссылка;
КонецФункции	

Функция НоваяТаблицаВыплаченнойЗарплаты() Экспорт
	
	НаборЗаписей = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
	
	Колонки = Новый Массив;
	Колонки.Добавить("ФизическоеЛицо");
	Колонки.Добавить("Сотрудник");
	Колонки.Добавить("Подразделение");
	Колонки.Добавить("ПериодВзаиморасчетов");
	Колонки.Добавить("СтатьяФинансирования");
	Колонки.Добавить("СтатьяРасходов");
	Колонки.Добавить("ДокументОснование");
	Колонки.Добавить("СуммаКВыплате");
	Колонки.Добавить("ВидДоходаИсполнительногоПроизводства");
	Колонки = СтрСоединить(Колонки, ", ");
	
	Таблица = НаборЗаписей.ВыгрузитьКолонки(Колонки);
	
	Таблица.Колонки.СуммаКВыплате.Имя = "Сумма";
	
	Возврат Таблица
	
КонецФункции

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо.
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	ФизическиеЛица
//	МесяцНачисления
//
Функция ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ГоловнойСотрудник,ДатаПриема,ДатаЗавершенияРаботы,ВАрхиве";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ТарифнаяСтавка, 0) КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы, МЕСЯЦ) >= &МесяцНачисления)
	|	И КадровыеДанныеСотрудников.ДатаПриема < КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Депоненты

Функция ПолучитьКлючиПорцийДанныхДляРегистрацииДепонентов(ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаПолученияОстатков", ДатаНачала - 1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки.Организация,
	|	НАЧАЛОПЕРИОДА(&ДатаПолученияОстатков, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТПериодыДепонентов
	|ИЗ
	|	РегистрНакопления.УдалитьВзаиморасчетыСДепонентамиОрганизаций.Остатки(&ДатаПолученияОстатков, ) КАК УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьВзаиморасчетыСДепонентамиОрганизаций.Период, МЕСЯЦ)
	|ИЗ
	|	РегистрНакопления.УдалитьВзаиморасчетыСДепонентамиОрганизаций КАК УдалитьВзаиморасчетыСДепонентамиОрганизаций
	|ГДЕ
	|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Период,
	|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентамиОбороты.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентамиОбороты.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТПеренесенныеДепоненты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентами.Обороты(&ДатаПолученияОстатков, &ДатаОкончания, Месяц, ) КАК ВзаиморасчетыСДепонентамиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСДепонентамиОбороты.Организация,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыСДепонентамиОбороты.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДепонентов.Организация,
	|	ПериодыДепонентов.Период
	|ИЗ
	|	ВТПериодыДепонентов КАК ПериодыДепонентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеренесенныеДепоненты КАК ПеренесенныеДепоненты
	|		ПО ПериодыДепонентов.Организация = ПеренесенныеДепоненты.Организация
	|			И ПериодыДепонентов.Период = ПеренесенныеДепоненты.Период
	|ГДЕ
	|	ПеренесенныеДепоненты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДепонентов.Организация,
	|	ПериодыДепонентов.Период";
	
	Возврат Запрос.Выполнить().Выбрать();	
	
КонецФункции	

Процедура КонвертироватьДанныеУчетаДепонентов(ДатаНачала, ДатаОкончания, СоответствиеКонвертируемыхОбъектов)
	СотрудникиОрганизаций = Новый Соответствие;
	
	ПериодыДепонентов = ПолучитьКлючиПорцийДанныхДляРегистрацииДепонентов(ДатаНачала, ДатаОкончания);
	
	Пока ПериодыДепонентов.Следующий() Цикл 
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПереносОстатков = ПериодыДепонентов.Период < ДатаНачала;	
		
		ВыборкаПоДепонентам = ПолучитьДанныеДляРегистрацииДепонентов(ПериодыДепонентов.Период, ПериодыДепонентов.Организация, ПереносОстатков);
		НачатьТранзакцию();
		ЗарегистрироватьДепоненты(ВыборкаПоДепонентам, СотрудникиОрганизаций, СоответствиеКонвертируемыхОбъектов);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры	

Функция ДокументПереносаДанных(Дата, Организация, ИменаРегистровНакопления = "", ИменаРегистровСведений = "")
	МассивИменРегистровНакопления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРегистровНакопления, ",");
	МассивИменРегистровСведений   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРегистровСведений, ",");	
	
	Документ = Документы.ОперацияБух.СоздатьДокумент();
	Документ.Дата = Дата;
	Документ.Организация = Организация;
	
	
	
	СтрокаДвиженияПоРегистрам = НСтр("ru = 'Данные регистров: '");
	Для Каждого ИмяРегистра Из МассивИменРегистровНакопления Цикл
		СтрокаРегистра = Документ.ТаблицаРегистровНакопления.Добавить();
		СтрокаРегистра.Имя = ИмяРегистра;
		Документ.Движения[ИмяРегистра].Записывать = Истина;
		СтрокаДвиженияПоРегистрам = СтрокаДвиженияПоРегистрам + ИмяРегистра + ", ";
	КонецЦикла;	
	
	Для Каждого ИмяРегистра Из МассивИменРегистровСведений Цикл
		СтрокаРегистра = Документ.ТаблицаРегистровСведений.Добавить();
		СтрокаРегистра.Имя = ИмяРегистра;
		Документ.Движения[ИмяРегистра].Записывать = Истина;
		СтрокаДвиженияПоРегистрам = СтрокаДвиженияПоРегистрам + ИмяРегистра + ", ";
	КонецЦикла;	
	
	Документ.Комментарий = Строка(Организация) + НСтр("ru = ' за '") + Формат(Дата, "ДФ='дд.ММ.гггг ""г.""'") + " " + СтрокаДвиженияПоРегистрам;
	
	Документ.УстановитьНовыйНомер();
	Документ.ОбменДанными.Загрузка = Истина;
	
	Возврат Документ;
КонецФункции	

Функция ПолучитьДанныеДляРегистрацииДепонентов(Период, Организация, ПереносОстатков)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ПереносОстатков Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки.Организация,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки.Физлицо КАК ФизическоеЛицо,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток КАК Сумма,
		|	ВЫБОР
		|		КОГДА УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток > 0
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения
		|ПОМЕСТИТЬ ВТДепонентыОстатки
		|ИЗ
		|	РегистрНакопления.УдалитьВзаиморасчетыСДепонентамиОрганизаций.Остатки(КОНЕЦПЕРИОДА(&Период, МЕСЯЦ), Организация = &Организация) КАК УдалитьВзаиморасчетыСДепонентамиОрганизацийОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДепонентыОстатки.Организация КАК Организация,
		|	ДепонентыОстатки.ФизическоеЛицо,
		|	ДепонентыОстатки.Сумма,
		|	ДепонентыОстатки.ВидДвижения КАК ВидДвижения,
		|	МАКСИМУМ(УдалитьВзаиморасчетыСДепонентамиОрганизаций.Период) КАК Дата
		|ИЗ
		|	ВТДепонентыОстатки КАК ДепонентыОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УдалитьВзаиморасчетыСДепонентамиОрганизаций КАК УдалитьВзаиморасчетыСДепонентамиОрганизаций
		|		ПО ДепонентыОстатки.Организация = УдалитьВзаиморасчетыСДепонентамиОрганизаций.Организация
		|			И ДепонентыОстатки.ФизическоеЛицо = УдалитьВзаиморасчетыСДепонентамиОрганизаций.Физлицо
		|			И (УдалитьВзаиморасчетыСДепонентамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДепонентыОстатки.Организация,
		|	ДепонентыОстатки.ФизическоеЛицо,
		|	ДепонентыОстатки.Сумма,
		|	ДепонентыОстатки.ВидДвижения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Дата,
		|	ВидДвижения";
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Период КАК Дата,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Организация КАК Организация,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Физлицо КАК ФизическоеЛицо,
		|	СУММА(УдалитьВзаиморасчетыСДепонентамиОрганизаций.Сумма) КАК Сумма,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.ВидДвижения КАК ВидДвижения
		|ИЗ
		|	РегистрНакопления.УдалитьВзаиморасчетыСДепонентамиОрганизаций КАК УдалитьВзаиморасчетыСДепонентамиОрганизаций
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(УдалитьВзаиморасчетыСДепонентамиОрганизаций.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
		|	И УдалитьВзаиморасчетыСДепонентамиОрганизаций.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Период,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Организация,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.Физлицо,
		|	УдалитьВзаиморасчетыСДепонентамиОрганизаций.ВидДвижения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Дата,
		|	ВидДвижения";
	КонецЕсли;
		
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Процедура ЗарегистрироватьДепоненты(ВыборкаПоДепонентам, СоответствиеКонвертируемыхОбъектов, СотрудникиОрганизаций)
	Пока ВыборкаПоДепонентам.СледующийПоЗначениюПоля("Организация") Цикл
		Пока ВыборкаПоДепонентам.СледующийПоЗначениюПоля("Дата") Цикл
			Пока ВыборкаПоДепонентам.СледующийПоЗначениюПоля("ВидДвижения") Цикл 	
				ТаблицаДепонентов = Новый ТаблицаЗначений;
				ТаблицаДепонентов.Колонки.Добавить("Дата");
				ТаблицаДепонентов.Колонки.Добавить("Организация");
				ТаблицаДепонентов.Колонки.Добавить("ФизическоеЛицо");
				ТаблицаДепонентов.Колонки.Добавить("Сумма");
			
				ДокументПереноса = ДокументПереносаДанных(ВыборкаПоДепонентам.Дата, ВыборкаПоДепонентам.Организация, "ВзаиморасчетыСДепонентами");		
				
				Пока ВыборкаПоДепонентам.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл 
					Пока ВыборкаПоДепонентам.Следующий() Цикл 
						СтрокаТаблицы = ТаблицаДепонентов.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоДепонентам);
					КонецЦикла;
				КонецЦикла;	
				
				Если ВыборкаПоДепонентам.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					ТаблицаДепонентов.Колонки.Удалить(ТаблицаДепонентов.Колонки.Дата);
					ТаблицаДепонентов.Колонки.Удалить(ТаблицаДепонентов.Колонки.Организация);
					УчетДепонированнойЗарплаты.СписатьДепонированнуюЗарплату(ДокументПереноса.Движения, Ложь, ВыборкаПоДепонентам.Организация, ВыборкаПоДепонентам.Дата, ТаблицаДепонентов);				
				Иначе
					УчетДепонированнойЗарплаты.ЗарегистрироватьДепонированнуюЗарплату(ДокументПереноса.Движения, Ложь, ТаблицаДепонентов);
				КонецЕсли;	

				ДокументПереноса.Записать(РежимЗаписиДокумента.Запись);	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// УЧЕТ ЗАРПЛАТЫ

Процедура КонвертироватьДанныеУчетаНачислений(СписокДокументов, НовыйРегистратор, СоответствиеКонвертированныхОбъектов = Неопределено)
	ДанныеДляРегистрацииНачислений = ДанныеДляРегистрацииНачислений(СписокДокументов);
	
	ЗарегистрироватьНачисления(ДанныеДляРегистрацииНачислений, НовыйРегистратор, СоответствиеКонвертированныхОбъектов);	
КонецПроцедуры	

Функция ДанныеДляРегистрацииНачислений(СписокДокументов)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РайонныйКоэффициент", ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент());
	Запрос.УстановитьПараметр("СевернаяНадбавка", ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка());
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов); 
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник КАК Сотрудник,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо КАК ФизическоеЛицо,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.ВидРасчета КАК Начисление,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Результат -  УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.РайонныйКоэффициент - УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.СевернаяНадбавка КАК Сумма,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДнейЧасов,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация КАК Организация,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТНачисленияПоСотрудникам
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.Начисления КАК УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления
	|ГДЕ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
	|	И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Результат <> 0
	|	И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо,
	|	&РайонныйКоэффициент,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.РайонныйКоэффициент,
	|	0,
	|	0,
	|	0,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.ПодразделениеОрганизации
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.Начисления КАК УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления
	|ГДЕ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
	|	И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.РайонныйКоэффициент <> 0
	|	И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Физлицо,
	|	&СевернаяНадбавка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.СевернаяНадбавка,
	|	0,
	|	0,
	|	0,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.ПодразделениеОрганизации
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.Начисления КАК УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления
	|ГДЕ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
	|	И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.СевернаяНадбавка <> 0
	|	И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоСотрудникам.Сотрудник КАК Сотрудник,
	|	НачисленияПоСотрудникам.ФизическоеЛицо,
	|	НачисленияПоСотрудникам.Начисление,
	|	СУММА(НачисленияПоСотрудникам.Сумма) КАК Сумма,
	|	СУММА(НачисленияПоСотрудникам.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(НачисленияПоСотрудникам.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	СУММА(НачисленияПоСотрудникам.ОплаченоДнейЧасов) КАК ОплаченоДнейЧасов,
	|	НачисленияПоСотрудникам.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияПоСотрудникам.Организация КАК Организация,
	|	НачисленияПоСотрудникам.ПодразделениеОрганизации КАК Подразделение,
	|	ФизическиеЛица.Наименование КАК ФизЛицоНаименование
	|ИЗ
	|	ВТНачисленияПоСотрудникам КАК НачисленияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО НачисленияПоСотрудникам.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоСотрудникам.Сотрудник,
	|	НачисленияПоСотрудникам.ФизическоеЛицо,
	|	НачисленияПоСотрудникам.Начисление,
	|	НачисленияПоСотрудникам.ПериодРегистрации,
	|	НачисленияПоСотрудникам.Организация,
	|	НачисленияПоСотрудникам.ПодразделениеОрганизации,
	|	ФизическиеЛица.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодРегистрации";
		
	Возврат Запрос.Выполнить().Выбрать();	
КонецФункции	

Процедура ЗарегистрироватьНачисления(ВыборкаПоНачислениям, Регистратор, СоответствиеКонвертированныхОбъектов = Неопределено)
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаНачислений.Колонки.Добавить("Сотрудник");
	ТаблицаНачислений.Колонки.Добавить("Подразделение");
	ТаблицаНачислений.Колонки.Добавить("Начисление");
	ТаблицаНачислений.Колонки.Добавить("Сумма");
	ТаблицаНачислений.Колонки.Добавить("ОтработаноДней");
	ТаблицаНачислений.Колонки.Добавить("ОтработаноЧасов");
	ТаблицаНачислений.Колонки.Добавить("ОплаченоДней");
	ТаблицаНачислений.Колонки.Добавить("ОплаченоЧасов");

	
	Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Организация") Цикл
		Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл 				
			
			Пока ВыборкаПоНачислениям.Следующий() Цикл 
				СтрокаТаблицы = ТаблицаНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоНачислениям);
				СтрокаТаблицы.Сотрудник = ?(ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник), СтрокаТаблицы.Сотрудник, Справочники.Сотрудники.ПустаяСсылка());
				СтрокаТаблицы.Начисление = КонвертироватьДанные(ВыборкаПоНачислениям.Начисление, СоответствиеКонвертированныхОбъектов);	
			КонецЦикла;							
		КонецЦикла;		
	КонецЦикла;			
	
	Если ТаблицаНачислений.Количество() > 0 Тогда
		
		// Заполним описание данных для проведения в учете начисленной зарплаты.
		ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
		ДанныеДляПроведенияУчетЗарплаты.Движения 				= Регистратор.Движения;
		ДанныеДляПроведенияУчетЗарплаты.Организация 			= ВыборкаПоНачислениям.Организация;
		ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= ВыборкаПоНачислениям.ПериодРегистрации;
		ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисления(ДанныеДляПроведенияУчетЗарплаты, Ложь, ТаблицаНачислений, Неопределено);
	КонецЕсли;
	
	Регистратор.Движения.НачисленияУдержанияПоСотрудникам.Записать();
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// НДФЛ

Функция СоответствиеВладельцевРегистрациям()
	СоответствиеРегистраций = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Владелец КАК Владелец,
	|	МАКСИМУМ(РегистрацииВНалоговомОргане.Ссылка) КАК Ссылка,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацииВНалоговомОргане.Владелец,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Владелец") Цикл
		СоотвествиеРегистрацийОКАТОКПП = Новый Соответствие;
		СоотвествиеРегистрацийОКТМОКПП = Новый Соответствие;
		
		СоответствиеРегистрацийКодам = Новый Структура("СоотвествиеРегистрацийОКАТОКПП, СоотвествиеРегистрацийОКТМОКПП", СоотвествиеРегистрацийОКАТОКПП, СоотвествиеРегистрацийОКТМОКПП);
		
		СоответствиеРегистраций.Вставить(Выборка.Владелец, СоответствиеРегистрацийКодам);
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.КодПоОКАТО) Тогда
				ОКАТОКПП = УчетНДФЛ.СуммаОКАТОиКПП(Выборка.КодПоОКАТО, Выборка.КПП);
				СоответствиеРегистрацийКодам.СоотвествиеРегистрацийОКАТОКПП.Вставить(ОКАТОКПП, Выборка.Ссылка);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Выборка.КодПоОКТМО) Тогда
				ОКТМОКПП = УчетНДФЛ.СуммаОКТМОиКПП(Выборка.КодПоОКТМО, Выборка.КПП);
				СоответствиеРегистрацийКодам.СоотвествиеРегистрацийОКТМОКПП.Вставить(ОКТМОКПП, Выборка.Ссылка);
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат СоответствиеРегистраций;
КонецФункции	

Функция ПолучитьРегистрациюВИФНС(Владелец, КодПоОкато, КодОктмо, КПП, СоответствиеВладельцевРегистрациям)
	Если Не ЗначениеЗаполнено(КодПоОкато) 
		И Не ЗначениеЗаполнено(КодОктмо) Тогда 
		
		Возврат Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
	РегистрацииПоВладельцу = СоответствиеВладельцевРегистрациям.Получить(Владелец);
	Если РегистрацииПоВладельцу = Неопределено Тогда
		СоотвествиеРегистрацийОКАТОКПП = Новый Соответствие;
		СоотвествиеРегистрацийОКТОМОКПП = Новый Соответствие;
		
		РегистрацииПоВладельцу = Новый Структура("СоотвествиеРегистрацийОКАТОКПП, СоотвествиеРегистрацийОКТМОКПП", СоотвествиеРегистрацийОКАТОКПП, СоотвествиеРегистрацийОКТОМОКПП);
		СоответствиеВладельцевРегистрациям.Вставить(Владелец, РегистрацииПоВладельцу);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодОктмо) Тогда
		ОКТМО_КПП = УчетНДФЛ.СуммаОКТМОиКПП(КодОктмо, КПП); 
		
		Регистрация = РегистрацииПоВладельцу.СоотвествиеРегистрацийОКТМОКПП.Получить(ОКТМО_КПП);
		Если Регистрация <> Неопределено Тогда
			Возврат Регистрация;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(КодПоОкато) Тогда
		ОКАТО_КПП = УчетНДФЛ.СуммаОКАТОиКПП(КодПоОкато, КПП); 
		
		Регистрация = РегистрацииПоВладельцу.СоотвествиеРегистрацийОКАТОКПП.Получить(ОКАТО_КПП);
		Если Регистрация <> Неопределено Тогда
			Возврат Регистрация;
		КонецЕсли;	
	КонецЕсли;	
		
	Регистрация = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
	Регистрация.Владелец = Владелец;
	Если ЗначениеЗаполнено(КодОктмо) Тогда
		Регистрация.Наименование = УчетНДФЛ.СуммаОКТМОиКПП(КодОктмо, КПП);
	Иначе
		Регистрация.Наименование = УчетНДФЛ.СуммаОКАТОиКПП(КодПоОкато, КПП);
	КонецЕсли;	
	Регистрация.КПП = КПП;
	Регистрация.КодПоОКАТО = КодПоОкато;
	Регистрация.КодПоОКТМО = КодОктмо;
	
	Регистрация.Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "КодНалоговогоОргана");  
	Регистрация.ОбменДанными.Загрузка = Истина;
	Регистрация.Записать();
	
	Если ЗначениеЗаполнено(КодОктмо) Тогда
		ОКТМО_КПП = УчетНДФЛ.СуммаОКТМОиКПП(КодОктмо, КПП);	
		РегистрацииПоВладельцу.СоотвествиеРегистрацийОКТМОКПП.Вставить(ОКТМО_КПП, Регистрация.Ссылка);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(КодПоОкато) Тогда
		ОКАТО_КПП = УчетНДФЛ.СуммаОКАТОиКПП(КодПоОкато, КПП); 
		РегистрацииПоВладельцу.СоотвествиеРегистрацийОКАТОКПП.Вставить(ОКАТО_КПП, Регистрация.Ссылка);
	КонецЕсли;	
	
	Возврат Регистрация.Ссылка;
	
КонецФункции	

Функция ПолучитьРегистрациюИзКонвертируемойЗаписи(Запись, СоответствиеВладельцевРегистрациям)
	Если ЗначениеЗаполнено(Запись.РегистрКодПоОкато) 
		Или ЗначениеЗаполнено(Запись.РегистрКодПоОктмо) Тогда
		
		Возврат ПолучитьРегистрациюВИФНС(Запись.Организация, Запись.РегистрКодПоОкато, Запись.РегистрКодПоОктмо, Запись.РегистрКПП, СоответствиеВладельцевРегистрациям);		
	ИначеЕсли ЗначениеЗаполнено(Запись.ПодразделениеРегистрацияВНалоговомОргане) Тогда
		Возврат Запись.ПодразделениеРегистрацияВНалоговомОргане;
	ИначеЕсли ЗначениеЗаполнено(Запись.ОПРегистрацияВНалоговомОргане) Тогда
		Возврат Запись.ОПРегистрацияВНалоговомОргане;
	ИначеЕсли ЗначениеЗаполнено(Запись.ОрганизацияРегистрацияВНалоговомОргане) Тогда
		Возврат Запись.ОрганизацияРегистрацияВНалоговомОргане;
	КонецЕсли;	
КонецФункции

Процедура КонвертироватьДанныеУчетаНДФЛ(СоответствиеКонвертированныхОбъектов)
	СоответствиеВладельцевРегистрациям = СоответствиеВладельцевРегистрациям(); 
	
	КонвертироватьДанныеУчетаДоходовНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям);	
	КонвертироватьДанныеОбИмущественныхВычетахНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям);
	КонвертироватьДанныеОСтандартныхВычетахНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям);
	КонвертироватьДанныеРасчетыНалогоплательщиковНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям);
	КонвертироватьРасчетыНалоговыхАгентовНДФЛ(СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов);
	КонвертироватьДанныеАвансовыеПлатежиИностранцевПоНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям);
КонецПроцедуры

//СведенияОДоходахНДФЛ

Процедура КонвертироватьДанныеУчетаДоходовНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	СотрудникиОрганизаций = Новый Соответствие;
	
	ПериодыДоходов = КлючиПорцийДанныхДляРегистрацииДоходовНДФЛ();
	
	Пока ПериодыДоходов.Следующий() Цикл
		КлючиПорцииДанных = Новый Структура("Период, Организация", ПериодыДоходов.Период, ПериодыДоходов.Организация);
		
		КонвертироватьПорциюДанныхУчетаДоходовНДФЛ(КлючиПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Истина, Ложь);	
	КонецЦикла;	
КонецПроцедуры	

Процедура КонвертироватьПорциюДанныхУчетаДоходовНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, РаспределятьПоСотрудникам = Истина, НовыйРегистратор = Неопределено)
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СформироватьВТСДаннымиПоДоходамНДФЛ(МенеджерВременныхТаблиц, КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	
	Если РаспределятьПоСотрудникам Тогда
		СформироватьВТСБазойРаспределенияПоНачислениям(МенеджерВременныхТаблиц, КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	КонецЕсли;
	
	ДанныеОДоходахНДФЛ = ДанныеДляРегистрацииДоходовНДФЛ(МенеджерВременныхТаблиц, РаспределятьПоСотрудникам);
	НачатьТранзакцию();
	ЗарегистрироватьДанныеОДоходахНДФЛ(ДанныеОДоходахНДФЛ, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

Функция КлючиПорцийДанныхДляРегистрацииДоходовНДФЛ()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛСведенияОДоходах.Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТПериодыДоходовНДФЛ
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛСведенияОДоходах КАК УдалитьНДФЛСведенияОДоходах
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛСведенияОДоходах.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛСведенияОДоходах.Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДоходовНДФЛ.Организация,
	|	ПериодыДоходовНДФЛ.Период
	|ИЗ
	|	ВТПериодыДоходовНДФЛ КАК ПериодыДоходовНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(, , Регистратор, ) КАК СведенияОДоходахНДФЛОбороты
	|		ПО ПериодыДоходовНДФЛ.Организация = СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация
	|			И (ПериодыДоходовНДФЛ.Период = НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛОбороты.Период, МЕСЯЦ))
	|			И (НЕ ТИПЗНАЧЕНИЯ(СведенияОДоходахНДФЛОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	СведенияОДоходахНДФЛОбороты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДоходовНДФЛ.Организация,
	|	ПериодыДоходовНДФЛ.Период";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура СформироватьВТСДаннымиПоДоходамНДФЛ(МенеджерВременныхТаблиц, КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));
	КонецЦикла;
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(УдалитьНДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК Период,
	|	УдалитьНДФЛСведенияОДоходах.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛСведенияОДоходах.Организация КАК ГоловнаяОрганизация,
	|	УдалитьНДФЛСведенияОДоходах.Период КАК МесяцНалоговогоПериода,
	|	УдалитьНДФЛСведенияОДоходах.КодДохода,
	|	УдалитьНДФЛСведенияОДоходах.КодВычета,
	|	УдалитьНДФЛСведенияОДоходах.СуммаДохода КАК Сумма,
	|	УдалитьНДФЛСведенияОДоходах.СуммаВычета,
	|	УдалитьНДФЛСведенияОДоходах.ВидРасчета,
	|	ВЫБОР
	|		КОГДА УдалитьНДФЛСведенияОДоходах.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьНДФЛСведенияОДоходах.Организация
	|		ИНАЧЕ УдалитьНДФЛСведенияОДоходах.ОбособленноеПодразделение
	|	КОНЕЦ КАК Организация,
	|	УдалитьНДФЛСведенияОДоходах.КодПоОКАТО КАК РегистрКодПоОКАТО,
	|	УдалитьНДФЛСведенияОДоходах.КПП КАК РегистрКПП,
	|	УдалитьНДФЛСведенияОДоходах.ПодразделениеОрганизации.РегистрацияВНалоговомОргане КАК ПодразделениеРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛСведенияОДоходах.ОбособленноеПодразделение.РегистрацияВНалоговомОргане КАК ОПРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛСведенияОДоходах.Организация.РегистрацияВНалоговомОргане КАК ОрганизацияРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛСведенияОДоходах.Регистратор,
	|	УдалитьНДФЛСведенияОДоходах.НомерСтроки,
	|	УдалитьНДФЛСведенияОДоходах.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьНДФЛСведенияОДоходах.КодПоОКТМО КАК РегистрКодПоОКТМО,
	|	УдалитьНДФЛСведенияОДоходах.ДатаПолученияДохода
	|ПОМЕСТИТЬ ВТСведенияОДоходахНДФЛ
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛСведенияОДоходах КАК УдалитьНДФЛСведенияОДоходах
	|ГДЕ
	|	&Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизЛицо,
	|	СведенияОДоходахНДФЛ.Организация,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК ПериодРаспределения
	|ПОМЕСТИТЬ ВТФизЛицаДляРаспределения
	|ИЗ
	|	ВТСведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛСведенияОДоходах." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьНДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛСведенияОДоходах." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛСведенияОДоходах.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДанныеДляРегистрацииДоходовНДФЛ(МенеджерВременныхТаблиц, РаспределятьПоСотрудникам = Истина)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Если РаспределятьПоСотрудникам Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДоходахНДФЛ.Период,
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.КодДохода,
		|	СведенияОДоходахНДФЛ.КодВычета,
		|	СУММА(СведенияОДоходахНДФЛ.Сумма) КАК Сумма,
		|	СУММА(СведенияОДоходахНДФЛ.СуммаВычета) КАК СуммаВычета,
		|	СведенияОДоходахНДФЛ.ВидРасчета,
		|	СведенияОДоходахНДФЛ.Организация,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКАТО КАК РегистрКодПоОКАТО,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКТМО КАК РегистрКодПоОКТМО,
		|	СведенияОДоходахНДФЛ.РегистрКПП КАК РегистрКПП,
		|	СведенияОДоходахНДФЛ.ПодразделениеРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ОПРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ОрганизацияРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
		|	СведенияОДоходахНДФЛ.Подразделение,
		|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
		|	БазаРаспределенияПоНачислениям.Сотрудник,
		|	СУММА(ЕСТЬNULL(БазаРаспределенияПоНачислениям.БазаРаспределения, 1)) КАК БазаРаспределения,
		|	ФизическиеЛица.Наименование КАК ФизЛицоНаименование,
		|	МАКСИМУМ(СведенияОДоходахНДФЛ.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	ВТСведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаРаспределенияПоНачислениям КАК БазаРаспределенияПоНачислениям
		|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = БазаРаспределенияПоНачислениям.ФизическоеЛицо
		|			И СведенияОДоходахНДФЛ.Организация = БазаРаспределенияПоНачислениям.Организация
		|			И СведенияОДоходахНДФЛ.МесяцНалоговогоПериода = БазаРаспределенияПоНачислениям.ПериодРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛица.Наименование,
		|	БазаРаспределенияПоНачислениям.Сотрудник,
		|	СведенияОДоходахНДФЛ.Подразделение,
		|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
		|	СведенияОДоходахНДФЛ.ОПРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.Регистратор,
		|	СведенияОДоходахНДФЛ.ОрганизацияРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ПодразделениеРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.РегистрКПП,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКАТО,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКТМО,
		|	СведенияОДоходахНДФЛ.Организация,
		|	СведенияОДоходахНДФЛ.ВидРасчета,
		|	СведенияОДоходахНДФЛ.КодВычета,
		|	СведенияОДоходахНДФЛ.КодДохода,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОДоходахНДФЛ.Период,
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.КодДохода,
		|	СведенияОДоходахНДФЛ.КодВычета,
		|	СУММА(СведенияОДоходахНДФЛ.Сумма) КАК Сумма,
		|	СУММА(СведенияОДоходахНДФЛ.СуммаВычета) КАК СуммаВычета,
		|	СведенияОДоходахНДФЛ.ВидРасчета,
		|	СведенияОДоходахНДФЛ.Организация,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКАТО КАК РегистрКодПоОКАТО,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКТМО КАК РегистрКодПоОКТМО,
		|	СведенияОДоходахНДФЛ.РегистрКПП КАК РегистрКПП,
		|	СведенияОДоходахНДФЛ.ПодразделениеРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ОПРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ОрганизацияРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
		|	СведенияОДоходахНДФЛ.Подразделение,
		|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	СУММА(1) КАК БазаРаспределения,
		|	ФизическиеЛица.Наименование КАК ФизЛицоНаименование,
		|	МАКСИМУМ(СведенияОДоходахНДФЛ.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	ВТСведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛица.Наименование,
		|	СведенияОДоходахНДФЛ.Подразделение,
		|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
		|	СведенияОДоходахНДФЛ.ОПРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.Регистратор,
		|	СведенияОДоходахНДФЛ.ОрганизацияРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ПодразделениеРегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.РегистрКПП,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКАТО,
		|	СведенияОДоходахНДФЛ.РегистрКодПоОКТМО,
		|	СведенияОДоходахНДФЛ.Организация,
		|	СведенияОДоходахНДФЛ.ВидРасчета,
		|	СведенияОДоходахНДФЛ.КодВычета,
		|	СведенияОДоходахНДФЛ.КодДохода,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация,
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки";
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Процедура ЗарегистрироватьДанныеОДоходахНДФЛ(ДанныеОДоходахНДФЛ, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;
	
	Пока ДанныеОДоходахНДФЛ.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(ДанныеОДоходахНДФЛ.Период, ДанныеОДоходахНДФЛ.ГоловнаяОрганизация, "СведенияОДоходахНДФЛ");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Пока ДанныеОДоходахНДФЛ.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаписиРегистра = Новый Массив;
			МассивКоэффициентов = Новый Массив;
			СуммаДохода = ДанныеОДоходахНДФЛ.Сумма;
			СуммаВычета = ДанныеОДоходахНДФЛ.СуммаВычета;
			Пока ДанныеОДоходахНДФЛ.Следующий() Цикл
				СтрокаДвижений = ДокументПереноса.Движения.СведенияОДоходахНДФЛ.Добавить();
				СтрокаДвижений.Активность = Истина;
				СтрокаДвижений.Период = ДанныеОДоходахНДФЛ.Период;
				СтрокаДвижений.ФизическоеЛицо = ДанныеОДоходахНДФЛ.ФизическоеЛицо;
				СтрокаДвижений.ГоловнаяОрганизация = ДанныеОДоходахНДФЛ.ГоловнаяОрганизация;
				СтрокаДвижений.МесяцНалоговогоПериода = ДанныеОДоходахНДФЛ.МесяцНалоговогоПериода;
				СтрокаДвижений.КодДохода = КонвертироватьДанные(ДанныеОДоходахНДФЛ.КодДохода, СоответствиеКонвертированныхОбъектов);
				СтрокаДвижений.КодВычета = КонвертироватьДанные(ДанныеОДоходахНДФЛ.КодВычета, СоответствиеКонвертированныхОбъектов);
				СтрокаДвижений.РегистрацияВНалоговомОргане = ПолучитьРегистрациюИзКонвертируемойЗаписи(ДанныеОДоходахНДФЛ, СоответствиеВладельцевРегистрациям);
				СтрокаДвижений.ИсточникДоходаЗаПределамиРФ = Ложь;
				СтрокаДвижений.Организация = ДанныеОДоходахНДФЛ.Организация;
				СтрокаДвижений.Подразделение = ДанныеОДоходахНДФЛ.Подразделение;
				СтрокаДвижений.ПодразделениеСотрудника = ДанныеОДоходахНДФЛ.Подразделение;
				СтрокаДвижений.Сотрудник = ДанныеОДоходахНДФЛ.Сотрудник;
				СтрокаДвижений.ДатаПолученияДохода = ДанныеОДоходахНДФЛ.ДатаПолученияДохода;
				СтрокаДвижений.Начисление = КонвертироватьДанные(ДанныеОДоходахНДФЛ.ВидРасчета, СоответствиеКонвертированныхОбъектов);
				
				ЗаписиРегистра.Добавить(СтрокаДвижений);
				
				МассивКоэффициентов.Добавить(ДанныеОДоходахНДФЛ.БазаРаспределения);
			КонецЦикла;
			РаспределенныеСуммыДоходов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаДохода, МассивКоэффициентов);
			РаспределенныеСуммыВычетов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаВычета, МассивКоэффициентов);
			
			Индекс = 0;
			Для Каждого Запись Из ЗаписиРегистра Цикл
				Если РаспределенныеСуммыДоходов <> Неопределено Тогда 
					Запись.СуммаДохода = РаспределенныеСуммыДоходов[Индекс];
				КонецЕсли;
				
				Если РаспределенныеСуммыВычетов <> Неопределено Тогда 
					Запись.СуммаВычета = РаспределенныеСуммыВычетов[Индекс];
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
			ДокументПереноса.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.СведенияОДоходахНДФЛ.Записать();
	КонецЕсли;
	
КонецПроцедуры

//ИмущественныеВычетыНДФЛ

Процедура КонвертироватьДанныеОбИмущественныхВычетахНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	ПериодыВычетов = КлючиПорцийДанныхДляРегистрацииИмущественныхВычетов();
	Пока ПериодыВычетов.Следующий() Цикл
		КлючиПорцииДанных = Новый Структура("Период, Организация", ПериодыВычетов.Период, ПериодыВычетов.Организация);	
		
		КонвертироватьПорциюДанныхИмущественныхВычетахНДФЛ(КлючиПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Истина);
	КонецЦикла;	
КонецПроцедуры	

Функция КлючиПорцийДанныхДляРегистрацииИмущественныхВычетов()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛИмущественныеВычетыФизлицОбороты.Период, МЕСЯЦ) КАК Период,
	|	УдалитьНДФЛИмущественныеВычетыФизлицОбороты.Организация
	|ПОМЕСТИТЬ ВТПериодыВычетов
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛИмущественныеВычетыФизлиц.Обороты(, , Регистратор, ) КАК УдалитьНДФЛИмущественныеВычетыФизлицОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛИмущественныеВычетыФизлицОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛИмущественныеВычетыФизлицОбороты.Период,
	|	УдалитьНДФЛИмущественныеВычетыФизлицОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыВычетов.Период,
	|	ПериодыВычетов.Организация
	|ИЗ
	|	ВТПериодыВычетов КАК ПериодыВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИмущественныеВычетыНДФЛ.Обороты(, , Регистратор, ) КАК ИмущественныеВычетыНДФЛОбороты
	|		ПО ПериодыВычетов.Организация = ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация
	|			И (ПериодыВычетов.Период = НАЧАЛОПЕРИОДА(ИмущественныеВычетыНДФЛОбороты.Период, МЕСЯЦ))
	|			И (НЕ ТИПЗНАЧЕНИЯ(ИмущественныеВычетыНДФЛОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	ИмущественныеВычетыНДФЛОбороты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыВычетов.Организация,
	|	ПериодыВычетов.Период";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура КонвертироватьПорциюДанныхИмущественныхВычетахНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	ДанныеПоИмущественнымВычетам =  ДанныеОИмущественныхВычетаНДФЛ(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	НачатьТранзакцию();
	ЗарегистрироватьИмущественныеВычеты(ДанныеПоИмущественнымВычетам, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Функция ДанныеОИмущественныхВычетаНДФЛ(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
			Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));	
		Иначе
			Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Организация КАК ГоловнаяОрганизация,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный КАК КодВычета,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Год,
	|	СУММА(УдалитьНДФЛИмущественныеВычетыФизлиц.Размер) КАК Сумма,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Период,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КодПоОКАТО КАК РегистрКодПоОКАТО,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КодПоОКТМО КАК РегистрКодПоОктмо,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КПП КАК РегистрКПП,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ОбособленноеПодразделение.РегистрацияВНалоговомОргане КАК ОПРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ПодразделениеОрганизации.РегистрацияВНалоговомОргане КАК ПодразделениеРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ОбособленноеПодразделение КАК Организация,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Организация.РегистрацияВНалоговомОргане КАК ОрганизацияРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ВидДвижения
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛИмущественныеВычетыФизлиц КАК УдалитьНДФЛИмущественныеВычетыФизлиц
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Период,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ФизЛицо,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Организация,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КодВычетаИмущественный,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Год,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КодПоОКАТО,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КодПоОКТМО,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.КПП,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ПодразделениеОрганизации,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ОбособленноеПодразделение,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ВидДвижения,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ОбособленноеПодразделение.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.ПодразделениеОрганизации.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Организация.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	УдалитьНДФЛИмущественныеВычетыФизлиц.Период";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛИмущественныеВычетыФизлиц." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" И ТолькоДвиженияНепереносимыхРегистраторов Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьНДФЛИмущественныеВычетыФизлиц.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛИмущественныеВычетыФизлиц." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛИмущественныеВычетыФизлиц.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура ЗарегистрироватьИмущественныеВычеты(ДанныеПоИмущественнымВычетам, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеПоИмущественнымВычетам.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		Пока ДанныеПоИмущественнымВычетам.СледующийПоЗначениюПоля("Период") Цикл
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеПоИмущественнымВычетам.Период, ДанныеПоИмущественнымВычетам.ГоловнаяОрганизация, "ИмущественныеВычетыНДФЛ");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;	
			
			Пока ДанныеПоИмущественнымВычетам.Следующий() Цикл
				СтрокаДвижения = ДокументПереноса.Движения.ИмущественныеВычетыНДФЛ.Добавить();
				СтрокаДвижения.Активность = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДанныеПоИмущественнымВычетам);
				СтрокаДвижения.РегистрацияВНалоговомОргане = ПолучитьРегистрациюИзКонвертируемойЗаписи(ДанныеПоИмущественнымВычетам, СоответствиеВладельцевРегистрациям);
				СтрокаДвижения.КодВычета = КонвертироватьДанные(ДанныеПоИмущественнымВычетам.КодВычета, СоответствиеКонвертированныхОбъектов); 
			КонецЦикла;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.ИмущественныеВычетыНДФЛ.Записывать = Истина;
				ДокументПереноса.Записать();
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ИмущественныеВычетыНДФЛ.Записать();
	КонецЕсли;	

КонецПроцедуры	

//ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ

Процедура КонвертироватьДанныеОСтандартныхВычетахНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	ПериодыВычетов = КлючиПорцийДанныхДляРегистрацииСтандартныхВычетов();
	Пока ПериодыВычетов.Следующий() Цикл
		КлючиПорцииДанных = Новый Структура("Период, Организация", ПериодыВычетов.Период, ПериодыВычетов.Организация);	
		
		КонвертироватьПорциюДанныхСтандартныхВычетахНДФЛ(КлючиПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Истина);	
	КонецЦикла;	
КонецПроцедуры	

Функция КлючиПорцийДанныхДляРегистрацииСтандартныхВычетов()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛицОбороты.Период, МЕСЯЦ) КАК Период,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛицОбороты.Организация
	|ПОМЕСТИТЬ ВТПериодыВычетов
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Обороты(, , Регистратор, ) КАК УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛицОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛицОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛицОбороты.Организация,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛицОбороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПериодыВычетов.Период, МЕСЯЦ) КАК Период,
	|	ПериодыВычетов.Организация
	|ИЗ
	|	ВТПериодыВычетов КАК ПериодыВычетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Обороты(, , Регистратор, ) КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты
	|		ПО ПериодыВычетов.Организация = ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация
	|			И (НАЧАЛОПЕРИОДА(ПериодыВычетов.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период, МЕСЯЦ))
	|			И (НЕ ТИПЗНАЧЕНИЯ(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПериодыВычетов.Период, МЕСЯЦ),
	|	ПериодыВычетов.Организация";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура КонвертироватьПорциюДанныхСтандартныхВычетахНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	ДанныеПоВычетам =  ДанныеОПредоставленныхВычетахНДФЛ(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);	
	НачатьТранзакцию();
	ЗарегистрироватьПредоставленныеВычетыНДФЛ(ДанныеПоВычетам, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

Функция ДанныеОПредоставленныхВычетахНДФЛ(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Период КАК Период,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация КАК ГоловнаяОрганизация,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета,
	|	СУММА(УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПримененныйВычет) КАК Сумма,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодПоОКАТО КАК РегистрКодПоОКАТО,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодПоОКТМО  КАК РегистрКодПоОКТМО, 
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КПП КАК РегистрКПП,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация.РегистрацияВНалоговомОргане КАК ОрганизацияРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ОбособленноеПодразделение.РегистрацияВНалоговомОргане КАК ОПРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПодразделениеОрганизации.РегистрацияВНалоговомОргане КАК ПодразделениеРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ОбособленноеПодразделение КАК Организация,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Период,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ФизЛицо,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ОбособленноеПодразделение,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПодразделениеОрганизации,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодПоОКАТО,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодПоОКТМО, 
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КПП,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.МесяцНалоговогоПериода,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.КодВычета,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Организация.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ОбособленноеПодразделение.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.ПодразделениеОрганизации.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	Период";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛПредоставленныеСтандартныеВычетыФизЛиц.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура ЗарегистрироватьПредоставленныеВычетыНДФЛ(ДанныеПоВычетам, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеПоВычетам.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		Пока ДанныеПоВычетам.СледующийПоЗначениюПоля("Период") Цикл
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеПоВычетам.Период, ДанныеПоВычетам.ГоловнаяОрганизация, "ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;	
			
			Пока ДанныеПоВычетам.Следующий() Цикл
				СтрокаДвижения = ДокументПереноса.Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Добавить();
				СтрокаДвижения.Активность = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДанныеПоВычетам);
				СтрокаДвижения.РегистрацияВНалоговомОргане = ПолучитьРегистрациюИзКонвертируемойЗаписи(ДанныеПоВычетам, СоответствиеВладельцевРегистрациям);
				СтрокаДвижения.КодВычета = КонвертироватьДанные(ДанныеПоВычетам.КодВычета, СоответствиеКонвертированныхОбъектов); 
			КонецЦикла;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Истина;
				ДокументПереноса.Записать();
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записать();	
	КонецЕсли;	
КонецПроцедуры

//РасчетыНалогоплательщиковСБюджетомПоНДФЛ

Процедура КонвертироватьДанныеРасчетыНалогоплательщиковНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	ПериодыРасчетов = КлючиПорцийДанныхДляРегистрацииРасчетовНДФЛ();
	Пока ПериодыРасчетов.Следующий() Цикл
		КлючиПорцииДанных = Новый Структура("Период, Организация", ПериодыРасчетов.Период, ПериодыРасчетов.Организация);	
		КонвертироватьПорциюДанныхРасчетыНалогоплательщиковНДФЛ(КлючиПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Истина,,Ложь);
	КонецЦикла;	
КонецПроцедуры	

Функция КлючиПорцийДанныхДляРегистрацииРасчетовНДФЛ()
	Запрос = Новый Запрос;
	
	КонвертируемыеТипыДокументовБП2 = КонвертируемыеТипыДокументовБП2();
	КонвертируемыеТипыДокументовБП3 = КонвертируемыеТипыДокументовБП3();
	
	КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.УдалитьДепонированиеОрганизаций"));
	
	КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));

	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2);
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3);


	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛРасчетыСБюджетом.Период, МЕСЯЦ) КАК Период,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация
	|ПОМЕСТИТЬ ВТПериодыРасчетов
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛРасчетыСБюджетом КАК УдалитьНДФЛРасчетыСБюджетом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган КАК УдалитьСправкаПоНДФЛВНалоговыйОрган
	|		ПО УдалитьНДФЛРасчетыСБюджетом.Регистратор = УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛРасчетыСБюджетом.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|			ИЛИ (НЕ УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка ЕСТЬ NULL 
	|				И (УдалитьСправкаПоНДФЛВНалоговыйОрган.СпециальныйДокумент2011года
	|					ИЛИ УдалитьСправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод < 2011))
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛРасчетыСБюджетом.Организация,
	|	НАЧАЛОПЕРИОДА(УдалитьНДФЛРасчетыСБюджетом.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРасчетов.Период,
	|	ПериодыРасчетов.Организация
	|ИЗ
	|	ВТПериодыРасчетов КАК ПериодыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|		ПО ПериодыРасчетов.Организация = РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация
	|			И (ПериодыРасчетов.Период = НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, МЕСЯЦ))
	|			И (НЕ ТИПЗНАЧЕНИЯ(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыРасчетов.Период,
	|	ПериодыРасчетов.Организация";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура КонвертироватьПорциюДанныхРасчетыНалогоплательщиковНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено, ТолькоИсчисленныйНалог = Ложь)
	ДанныеОРасчетахСБюджетомПоНДФЛ = ДанныеДляКонвертацииРасчетовНДФЛ(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов, ТолькоИсчисленныйНалог);	
	НачатьТранзакцию();
	ЗарегистрироватьРасчетыНалогоплательщиковПоНДФЛ(ДанныеОРасчетахСБюджетомПоНДФЛ, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор);
	ЗафиксироватьТранзакцию();	
КонецПроцедуры	

Функция ДанныеДляКонвертацииРасчетовНДФЛ(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, ТолькоИсчисленныйНалог = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		КонвертируемыеТипыДокументовБП2 = КонвертируемыеТипыДокументовБП2();
		
		КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		КонвертируемыеТипыДокументовБП2.Добавить(Тип("ДокументСсылка.УдалитьДепонированиеОрганизаций"));
		
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2);
	КонецЕсли;	

	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	УдалитьНДФЛРасчетыСБюджетом.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация КАК ГоловнаяОрганизация,
	|	УдалитьНДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	УдалитьНДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	СУММА(УдалитьНДФЛРасчетыСБюджетом.Налог) КАК Сумма,
	|	ВЫБОР
	|		КОГДА УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьНДФЛРасчетыСБюджетом.Организация
	|		ИНАЧЕ УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение
	|	КОНЕЦ КАК Организация,
	|	УдалитьНДФЛРасчетыСБюджетом.КодДохода,
	|	УдалитьНДФЛРасчетыСБюджетом.Период,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидСтроки,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидДвижения,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация.РегистрацияВНалоговомОргане КАК ОрганизацияРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение.РегистрацияВНалоговомОргане КАК ОПРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации.РегистрацияВНалоговомОргане КАК ПодразделениеРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКАТО КАК РегистрКодПоОКАТО,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКТМО КАК РегистрКодПоОКТМО,
	|	УдалитьНДФЛРасчетыСБюджетом.КПП КАК РегистрКПП,
	|	УдалитьНДФЛРасчетыСБюджетом.Регистратор
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛРасчетыСБюджетом КАК УдалитьНДФЛРасчетыСБюджетом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган КАК УдалитьСправкаПоНДФЛВНалоговыйОрган
	|		ПО УдалитьНДФЛРасчетыСБюджетом.Регистратор = УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛРасчетыСБюджетом.ФизЛицо,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация,
	|	УдалитьНДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	УдалитьНДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьНДФЛРасчетыСБюджетом.Организация
	|		ИНАЧЕ УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение
	|	КОНЕЦ,
	|	УдалитьНДФЛРасчетыСБюджетом.КодДохода,
	|	УдалитьНДФЛРасчетыСБюджетом.Период,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидСтроки,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидДвижения,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКАТО,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКТМО,
	|	УдалитьНДФЛРасчетыСБюджетом.КПП,
	|	УдалитьНДФЛРасчетыСБюджетом.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьНДФЛРасчетыСБюджетом.Период,
	|	Организация";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛРасчетыСБюджетом." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьНДФЛРасчетыСБюджетом.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛРасчетыСБюджетом." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И  НЕ ТИПЗНАЧЕНИЯ(УдалитьНДФЛРасчетыСБюджетом.Регистратор) В (&ТипыПереносимыхДокументов)
									   |			ИЛИ (НЕ УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка ЕСТЬ NULL И (
									   |			УдалитьСправкаПоНДФЛВНалоговыйОрган.СпециальныйДокумент2011года
									   |			ИЛИ УдалитьСправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод < 2011))";
	КонецЕсли;	
								   
	Если ТолькоИсчисленныйНалог Тогда
		ТекстУсловия = ТекстУсловия + " И УдалитьНДФЛРасчетыСБюджетом.ВидСтроки <> ЗНАЧЕНИЕ(Перечисление.УдалитьНДФЛРасчетыСБюджетомВидСтроки.Удержание)";		
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура ЗарегистрироватьРасчетыНалогоплательщиковПоНДФЛ(ДанныеПоРасчетамНДФЛ, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	

	Пока ДанныеПоРасчетамНДФЛ.СледующийПоЗначениюПоля("Период") Цикл
		Пока ДанныеПоРасчетамНДФЛ.СледующийПоЗначениюПоля("Организация") Цикл
		
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеПоРасчетамНДФЛ.Период, ДанныеПоРасчетамНДФЛ.Организация, "РасчетыНалогоплательщиковСБюджетомПоНДФЛ,НачисленияУдержанияПоСотрудникам");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;	
			
			ТаблицаУдержанийНДФЛ = НовыйТаблицаУдержанийНДФЛ();
			
			Пока ДанныеПоРасчетамНДФЛ.Следующий() Цикл
				СтрокаДвижения = ДокументПереноса.Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Добавить();
				СтрокаДвижения.Активность = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДанныеПоРасчетамНДФЛ);
				СтрокаДвижения.РегистрацияВНалоговомОргане = ПолучитьРегистрациюИзКонвертируемойЗаписи(ДанныеПоРасчетамНДФЛ, СоответствиеВладельцевРегистрациям);
				СтрокаДвижения.КодДохода = КонвертироватьДанные(ДанныеПоРасчетамНДФЛ.КодДохода, СоответствиеКонвертированныхОбъектов); 
				СтрокаДвижения.ВариантУдержания = КонвертироватьДанные(ДанныеПоРасчетамНДФЛ.ВидСтроки, СоответствиеКонвертированныхОбъектов);
				
				Если ДанныеПоРасчетамНДФЛ.ВидСтроки = Перечисления.УдалитьНДФЛРасчетыСБюджетомВидСтроки.Начисление
					И (ТипЗнч(ДанныеПоРасчетамНДФЛ.Регистратор) = Тип("ДокументСсылка.УдалитьНачислениеЗарплатыРаботникамОрганизаций")
					Или ТипЗнч(ДанныеПоРасчетамНДФЛ.Регистратор) = Тип("ДокументСсылка.УдалитьНДФЛПерерасчет")) Тогда
					
					СтрокаУдержанияНДФЛ = ТаблицаУдержанийНДФЛ.Добавить();
					СтрокаУдержанияНДФЛ.ФизическоеЛицо = ДанныеПоРасчетамНДФЛ.ФизическоеЛицо;
					СтрокаУдержанияНДФЛ.Подразделение = ДанныеПоРасчетамНДФЛ.Подразделение;
					СтрокаУдержанияНДФЛ.ПодразделениеСотрудника = ДанныеПоРасчетамНДФЛ.Подразделение;
					СтрокаУдержанияНДФЛ.Сумма = ДанныеПоРасчетамНДФЛ.Сумма;
					СтрокаУдержанияНДФЛ.СуммаКорректировкиВыплаты = 0;
					СтрокаУдержанияНДФЛ.ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения;
					СтрокаУдержанияНДФЛ.ВидУдержания =  Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
				КонецЕсли;
				
			КонецЦикла;
				
			Если ТаблицаУдержанийНДФЛ.Количество() > 0 Тогда
				МенеджерВТ = Новый МенеджерВременныхТаблиц;
				
				СоздатьВТФизическиеЛица(МенеджерВТ, ТаблицаУдержанийНДФЛ);
				
				ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
				ДанныеДляПроведенияУчетЗарплаты.Движения 				= ДокументПереноса.Движения;
				ДанныеДляПроведенияУчетЗарплаты.Организация 			= ДанныеПоРасчетамНДФЛ.Организация;
				ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= НачалоМесяца(ДанныеПоРасчетамНДФЛ.Период);
				ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = МенеджерВТ;
				ДанныеДляПроведенияУчетЗарплаты.ОкончательныйРасчет 	= Истина;
				
				УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛИКорректировкиВыплаты(ДанныеДляПроведенияУчетЗарплаты, Ложь, ТаблицаУдержанийНДФЛ, Неопределено);
			КонецЕсли;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
				ДокументПереноса.Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
				ДокументПереноса.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
		
		Если ТипЗнч(НовыйРегистратор.Ссылка) = Тип("ДокументСсылка.НачислениеЗарплаты")
			Или ТипЗнч(НовыйРегистратор.Ссылка) = Тип("ДокументСсылка.ПерерасчетНДФЛ") Тогда
			
			ЕстьЗаписиБезСотрудника = Ложь;
			Для Каждого Запись Из ДокументПереноса.Движения.НачисленияУдержанияПоСотрудникам Цикл
				Если Не ЗначениеЗаполнено(Запись.Сотрудник) Тогда
					ЕстьЗаписиБезСотрудника = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьЗаписиБезСотрудника Тогда
				ЗаполнитьСотрудниковВНачисленияУдержанияПоСотрудникам(ДокументПереноса);
			КонецЕсли;
			
			ДокументПереноса.Движения.НачисленияУдержанияПоСотрудникам.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСотрудниковВНачисленияУдержанияПоСотрудникам(ДокументПереноса)
	
	ИзвестныеСотрудники = Новый Соответствие;
	ФизическиеЛицаБезСотрудников = Новый Соответствие;
	Для Каждого Запись Из ДокументПереноса.Движения.НачисленияУдержанияПоСотрудникам Цикл
		Если ЗначениеЗаполнено(Запись.Сотрудник) Тогда
			ИзвестныеСотрудники[Запись.ФизическоеЛицо] = Запись.Сотрудник
		Иначе
			ФизическиеЛицаБезСотрудников[Запись.ФизическоеЛицо] = Истина
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СотрудникФизическогоЛица Из ИзвестныеСотрудники Цикл
		Если ФизическиеЛицаБезСотрудников[СотрудникФизическогоЛица.Ключ] <> Неопределено Тогда
			ФизическиеЛицаБезСотрудников.Удалить(СотрудникФизическогоЛица.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если ФизическиеЛицаБезСотрудников.Количество() > 0 Тогда
		ФизическиеЛица = Новый Массив;
		Для Каждого ФизическоеЛицо Из ФизическиеЛицаБезСотрудников Цикл
			ФизическиеЛица.Добавить(ФизическоеЛицо.Ключ)
		КонецЦикла;
		
		ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛица, Истина, ДокументПереноса.Организация, '00010101');
		
		Для Каждого Строка Из ОсновныеСотрудники Цикл
			Если ЗначениеЗаполнено(Строка.Сотрудник) Тогда
				ИзвестныеСотрудники[Строка.ФизическоеЛицо] = Строка.Сотрудник;
			КонецЕсли;;
		КонецЦикла;
		
	КонецЕсли;
	
	СтатьяРасчетыПоОплатеТруда = ОтражениеЗарплатыВУчете.СтатьиРасходовПоВидуОперации()[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	КоличествоСтрок =  ДокументПереноса.Движения.НачисленияУдержанияПоСотрудникам.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		Запись = ДокументПереноса.Движения.НачисленияУдержанияПоСотрудникам[КоличествоСтрок - Индекс];
		Если ЗначениеЗаполнено(Запись.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.Сотрудник = ИзвестныеСотрудники[Запись.ФизическоеЛицо];
		Запись.СтатьяРасходов = СтатьяРасчетыПоОплатеТруда;
		
		// если не удалось определить сотрудника - уаляем запись
		Если Не ЗначениеЗаполнено(Запись.Сотрудник) Тогда
			ДокументПереноса.Движения.НачисленияУдержанияПоСотрудникам.Удалить(Запись);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛица(МенеджерВременныхТаблиц, ТаблицаУдержаний)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУдержаний.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаУдержаний КАК ТаблицаУдержаний";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция НовыйТаблицаУдержанийНДФЛ()
	ТаблицаУдержанийНДФЛ = Новый ТаблицаЗначений;
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число"));                  
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("ВидДоходаИсполнительногоПроизводства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства"));
	ТаблицаУдержанийНДФЛ.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	
	Возврат ТаблицаУдержанийНДФЛ;
КонецФункции	

Процедура КонвертироватьНДФЛУдержанныйПропорциональноВыплатам(СписокДокументов, Организация, ПериодРегистрации, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов)
	ДанныеПоНДФЛУдержанный = ДанныеПоНДФЛУдержанный(СписокДокументов, Организация, ПериодРегистрации);
	ЗарегистрироватьНДФЛУдержанный(ДанныеПоНДФЛУдержанный, Организация, ПериодРегистрации, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов);
КонецПроцедуры	

Функция ДанныеПоНДФЛУдержанный(СписокДокументов, Организация, ПериодРегистрации)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНДФЛРасчетыСБюджетом.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация КАК ГоловнаяОрганизация,
	|	УдалитьНДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	УдалитьНДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	СУММА(УдалитьНДФЛРасчетыСБюджетом.Налог) КАК Сумма,
	|	ВЫБОР
	|		КОГДА УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьНДФЛРасчетыСБюджетом.Организация
	|		ИНАЧЕ УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение
	|	КОНЕЦ КАК Организация,
	|	УдалитьНДФЛРасчетыСБюджетом.КодДохода,
	|	УдалитьНДФЛРасчетыСБюджетом.Период,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидСтроки,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидДвижения,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация.РегистрацияВНалоговомОргане КАК ОрганизацияРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение.РегистрацияВНалоговомОргане КАК ОПРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации.РегистрацияВНалоговомОргане КАК ПодразделениеРегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКАТО КАК РегистрКодПоОКАТО,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКТМО КАК РегистрКодПоОКТМО,
	|	УдалитьНДФЛРасчетыСБюджетом.КПП КАК РегистрКПП,
	|	УдалитьНДФЛРасчетыСБюджетом.Регистратор,
	|	МИНИМУМ(УдалитьНДФЛРасчетыСБюджетом.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТУдержанныйНДФЛ
	|ИЗ
	|	РегистрНакопления.УдалитьНДФЛРасчетыСБюджетом КАК УдалитьНДФЛРасчетыСБюджетом
	|ГДЕ
	|	УдалитьНДФЛРасчетыСБюджетом.Регистратор В(&СписокДокументов)
	|	И УдалитьНДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.УдалитьНДФЛРасчетыСБюджетомВидСтроки.Удержание)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьНДФЛРасчетыСБюджетом.ФизЛицо,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация,
	|	УдалитьНДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	УдалитьНДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА УдалитьНДФЛРасчетыСБюджетом.Организация
	|		ИНАЧЕ УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение
	|	КОНЕЦ,
	|	УдалитьНДФЛРасчетыСБюджетом.КодДохода,
	|	УдалитьНДФЛРасчетыСБюджетом.Период,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидСтроки,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации,
	|	УдалитьНДФЛРасчетыСБюджетом.ВидДвижения,
	|	УдалитьНДФЛРасчетыСБюджетом.Организация.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ОбособленноеПодразделение.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.ПодразделениеОрганизации.РегистрацияВНалоговомОргане,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКАТО,
	|	УдалитьНДФЛРасчетыСБюджетом.КодПоОКТМО,
	|	УдалитьНДФЛРасчетыСБюджетом.КПП,
	|	УдалитьНДФЛРасчетыСБюджетом.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Физлицо КАК ФизическоеЛицо,
	|	СУММА(УдалитьВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) КАК База,
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Регистратор
	|ПОМЕСТИТЬ ВТБазаРаспределения
	|ИЗ
	|	РегистрНакопления.УдалитьВзаиморасчетыСРаботникамиОрганизаций КАК УдалитьВзаиморасчетыСРаботникамиОрганизаций
	|ГДЕ
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УдалитьВзаиморасчетыСРаботникамиОрганизаций.ПериодВзаиморасчетов, МЕСЯЦ) = &ПериодРегистрации
	|	И УдалитьВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(УдалитьВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанныйНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдержанныйНДФЛ.ГоловнаяОрганизация,
	|	УдержанныйНДФЛ.СтавкаНалогообложенияРезидента,
	|	УдержанныйНДФЛ.МесяцНалоговогоПериода,
	|	УдержанныйНДФЛ.Сумма КАК СуммаКРаспределению,
	|	УдержанныйНДФЛ.Организация КАК Организация,
	|	УдержанныйНДФЛ.КодДохода,
	|	УдержанныйНДФЛ.Период,
	|	УдержанныйНДФЛ.ВидСтроки,
	|	УдержанныйНДФЛ.Подразделение,
	|	УдержанныйНДФЛ.ВидДвижения,
	|	УдержанныйНДФЛ.ОрганизацияРегистрацияВНалоговомОргане,
	|	УдержанныйНДФЛ.ОПРегистрацияВНалоговомОргане,
	|	УдержанныйНДФЛ.ПодразделениеРегистрацияВНалоговомОргане,
	|	УдержанныйНДФЛ.РегистрКодПоОКАТО,
	|	УдержанныйНДФЛ.РегистрКПП,
	|	БазаРаспределения.Регистратор КАК РегистраторВыплаты,
	|	ЕСТЬNULL(БазаРаспределения.База, 1) КАК База,
	|	УдержанныйНДФЛ.Регистратор КАК Регистратор,
	|	УдержанныйНДФЛ.НомерСтроки КАК НомерСтроки,
	|	УдержанныйНДФЛ.РегистрКодПоОКТМО
	|ИЗ
	|	ВТУдержанныйНДФЛ КАК УдержанныйНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаРаспределения КАК БазаРаспределения
	|		ПО УдержанныйНДФЛ.ФизическоеЛицо = БазаРаспределения.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции	

Процедура ЗарегистрироватьНДФЛУдержанный(ДанныеПоНДФЛУдержанный, Организация, ПериодРегистрации, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов)
	
	НаборыЗаписейПоРегистраторам = Новый Соответствие;
	
	ДокументОперацияБух = Неопределено;
	
	Пока ДанныеПоНДФЛУдержанный.СледующийПоЗначениюПоля("Регистратор") Цикл
		Пока ДанныеПоНДФЛУдержанный.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			
			СуммаКРаспределению = ДанныеПоНДФЛУдержанный.СуммаКРаспределению;
			КоэффициентыРаспределения = Новый Массив;
			ЗаписиРегистра = Новый Массив;
			
			Пока ДанныеПоНДФЛУдержанный.Следующий() Цикл				
				НаборЗаписей = НДФЛНаборЗаписейПоРегистратору(Организация, 
														 ПериодРегистрации, 
														 НаборыЗаписейПоРегистраторам, 
														 ДанныеПоНДФЛУдержанный.РегистраторВыплаты, 
														 ДокументОперацияБух, 
														 СоответствиеКонвертированныхОбъектов,
														 "РасчетыНалогоплательщиковСБюджетомПоНДФЛ");
				
				СтрокаДвижения = НаборЗаписей.Добавить();
				
				СтрокаДвижения.Активность = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДанныеПоНДФЛУдержанный);
				СтрокаДвижения.РегистрацияВНалоговомОргане = ПолучитьРегистрациюИзКонвертируемойЗаписи(ДанныеПоНДФЛУдержанный, СоответствиеВладельцевРегистрациям);
				СтрокаДвижения.КодДохода = КонвертироватьДанные(ДанныеПоНДФЛУдержанный.КодДохода, СоответствиеКонвертированныхОбъектов); 
				СтрокаДвижения.ВариантУдержания = КонвертироватьДанные(ДанныеПоНДФЛУдержанный.ВидСтроки, СоответствиеКонвертированныхОбъектов);

				КоэффициентыРаспределения.Добавить(ДанныеПоНДФЛУдержанный.База);
				
				ЗаписиРегистра.Добавить(СтрокаДвижения);
				
			КонецЦикла;	
			
			РаспределенныеСуммыНДФЛ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, КоэффициентыРаспределения);
			
			Индекс = 0;
			Для Каждого Запись Из ЗаписиРегистра Цикл
				Если РаспределенныеСуммыНДФЛ <> Неопределено Тогда 
					Запись.Сумма = РаспределенныеСуммыНДФЛ[Индекс];
				КонецЕсли;	
						
				Индекс = Индекс + 1;
			КонецЦикла;	
						
		КонецЦикла;			
	КонецЦикла;	
	
	Для Каждого НаборЗаписей Из НаборыЗаписейПоРегистраторам Цикл
		НаборЗаписей.Значение.Записать();		
	КонецЦикла;	
	
КонецПроцедуры	

Функция НДФЛНаборЗаписейПоРегистратору(Организация, ПериодРегистрации, НаборыЗаписейПоРегистраторам, РегистраторВыплаты, ДокументОперацияБух, СоответствиеКонвертированныхОбъектов, ИмяРегистра)
	Если ЗначениеЗаполнено(РегистраторВыплаты) Тогда
		Если ТипЗнч(РегистраторВыплаты) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			Или ТипЗнч(РегистраторВыплаты) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			
			НовыйРегистратор = РегистраторВыплаты;
		Иначе
			НовыйРегистратор = КонвертироватьДанные(РегистраторВыплаты, СоответствиеКонвертированныхОбъектов);
			
			Если НовыйРегистратор = Неопределено 
				Или Не НовыйРегистратор.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления[ИмяРегистра]) 
				Или ТипЗнч(НовыйРегистратор) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
				
				Если ДокументОперацияБух = Неопределено Тогда
					ДокументОперацияБух = ДокументПереносаДанных(ПериодРегистрации, Организация, ИмяРегистра);
					ДокументОперацияБух.Движения[ИмяРегистра].Записывать = Истина;
					ДокументОперацияБух.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
				НовыйРегистратор = ДокументОперацияБух.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ДокументОперацияБух = Неопределено Тогда
			ДокументОперацияБух = ДокументПереносаДанных(ПериодРегистрации, Организация, ИмяРегистра);
			ДокументОперацияБух.Движения[ИмяРегистра].Записывать = Истина;
			ДокументОперацияБух.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		НовыйРегистратор = ДокументОперацияБух.Ссылка;
	КонецЕсли;	
	
	НаборЗаписей = НаборыЗаписейПоРегистраторам[НовыйРегистратор];
		
	Если НаборЗаписей = Неопределено Тогда
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(НовыйРегистратор);
		
		НаборыЗаписейПоРегистраторам.Вставить(НовыйРегистратор, НаборЗаписей);
	КонецЕсли;	
	
	Возврат НаборЗаписей;
 	
КонецФункции	

//РасчетыНалоговыхАгентовСБюджетомПоНДФЛ

Процедура КонвертироватьРасчетыНалоговыхАгентовНДФЛ(СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, СписокДокументов = Неопределено, НовыйРегистратор = Неопределено, Отбор = Неопределено)
	
	Запрос = Новый Запрос;
	
	ТолькоДвиженияНепереносимыхРегистраторов = (СписокДокументов = Неопределено);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		КонвертируемыеТипыДокументовБП3 = КонвертируемыеТипыДокументовБП3();
		КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.ОперацияБух"));
		КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		
		Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
		Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3);
	Иначе
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	КонецЕсли;	
	
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючДанных Из Отбор Цикл
			Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
		КонецЦикла;
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.УдалитьПеречислениеНДФЛвБюджет
	|			ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор.ПлатежноеПоручениеНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПлатежноеПоручениеНомер,
	|	ВЫБОР
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.УдалитьПеречислениеНДФЛвБюджет
	|			ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор.ПлатежноеПоручениеДата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПлатежноеПоручениеДата,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Активность,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.УдалитьОКАТО_КПП,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.НомерСтроки,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.УдалитьОКТМО_КПП
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдалитьСправкаПоНДФЛВНалоговыйОрган КАК УдалитьСправкаПоНДФЛВНалоговыйОрган
	|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор = УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка
	|ГДЕ
	|	&Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.НомерСтроки";
	
	
	ТекстУсловия = "";
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + "   ((НЕ ТИПЗНАЧЕНИЯ(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
									   |			ИЛИ (НЕ УдалитьСправкаПоНДФЛВНалоговыйОрган.Ссылка ЕСТЬ NULL И (
									   |			УдалитьСправкаПоНДФЛВНалоговыйОрган.СпециальныйДокумент2011года
									   |			ИЛИ УдалитьСправкаПоНДФЛВНалоговыйОрган.НалоговыйПериод < 2011)))
									   | И НЕ ТИПЗНАЧЕНИЯ(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор) В (&КонвертируемыеТипыДокументовБП3))";
	Иначе
		ТекстУсловия = "	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор В (&СписокДокументов)";
	КонецЕсли;	
	
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючДанных Из Отбор Цикл
			Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + " И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
			ИначеЕсли КлючДанных.Ключ = "Период" Тогда
				ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
			Иначе
				ТекстУсловия = ТекстУсловия + " И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НовыйРегистратор <> Неопределено Тогда
		НачатьТранзакцию();
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
						
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(Выборка.Период, Выборка.Организация, "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
			НачатьТранзакцию();
		КонецЕсли;	

		Пока Выборка.Следующий() Цикл
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.НомерСтроки = Выборка.НомерСтроки Тогда
					НаборЗаписей.Удалить(ЗаписьНабора);
				КонецЕсли;
			КонецЦикла;	
			
			Запись = ДокументПереноса.Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Если Не ЗначениеЗаполнено(Запись.РегистрацияВНалоговомОргане) Тогда
				Если ЗначениеЗаполнено(Выборка.УдалитьОКТМО_КПП) Тогда
					КодОктмо = КодОКТМОизСуммыОКТМОиКПП(Выборка.УдалитьОКТМО_КПП);
					КПП = КППизСуммыОКАТОиКПП(Выборка.УдалитьОКТМО_КПП);
					Запись.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВИФНС(Выборка.Организация, "", КодОктмо, КПП, СоответствиеВладельцевРегистрациям);
				Иначе
					КодОкато = КодОКАТОизСуммыОКАТОиКПП(Выборка.УдалитьОКАТО_КПП);
					КПП = КППизСуммыОКАТОиКПП(Выборка.УдалитьОКАТО_КПП);
					Запись.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВИФНС(Выборка.Организация, КодОкато, "", КПП, СоответствиеВладельцевРегистрациям);
				КонецЕсли;	
				Запись.УдалитьОКАТО_КПП = "";
				Запись.УдалитьОКТМО_КПП = "";
			КонецЕсли;	
			
			Запись.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПорученияПоДатеНомеру(Выборка.ПлатежноеПоручениеДата, Выборка.ПлатежноеПоручениеНомер);
		КонецЦикла;	
		
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записывать = Истина;
			ДокументПереноса.Записать();
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
		
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;	

КонецПроцедуры	

Процедура КонвертироватьРасчетыНалоговыхАгентовНДФЛПропорциональноВыплатам(СписокДокументов, Организация, ПериодРегистрации, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов)
	
	НаборыЗаписейПоРегистраторам = Новый Соответствие;
	ДокументОперацияБух = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.УдалитьПеречислениеНДФЛвБюджет
	|			ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор.ПлатежноеПоручениеНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПлатежноеПоручениеНомер,
	|	ВЫБОР
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.УдалитьПеречислениеНДФЛвБюджет
	|			ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор.ПлатежноеПоручениеДата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПлатежноеПоручениеДата,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Активность,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.УдалитьОКАТО_КПП,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.НомерСтроки,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.УдалитьОКТМО_КПП
	|ПОМЕСТИТЬ ВТРасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Физлицо КАК ФизическоеЛицо,
	|	СУММА(УдалитьВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) КАК База,
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Регистратор
	|ПОМЕСТИТЬ ВТБазаРаспределения
	|ИЗ
	|	РегистрНакопления.УдалитьВзаиморасчетыСРаботникамиОрганизаций КАК УдалитьВзаиморасчетыСРаботникамиОрганизаций
	|ГДЕ
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УдалитьВзаиморасчетыСРаботникамиОрганизаций.ПериодВзаиморасчетов, МЕСЯЦ) = &ПериодРегистрации
	|	И УдалитьВзаиморасчетыСРаботникамиОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Физлицо,
	|	УдалитьВзаиморасчетыСРаботникамиОрганизаций.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(УдалитьВзаиморасчетыСРаботникамиОрганизаций.СуммаВзаиморасчетов) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ПлатежноеПоручениеНомер,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ПлатежноеПоручениеДата,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Активность,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.УдалитьОКАТО_КПП,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма КАК СуммаКРаспределению,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(БазаРаспределения.База, 1) КАК База,
	|	БазаРаспределения.Регистратор КАК РегистраторВыплаты,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.УдалитьОКТМО_КПП
	|ИЗ
	|	ВТРасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазаРаспределения КАК БазаРаспределения
	|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо = БазаРаспределения.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			СуммаКРаспределению = Выборка.СуммаКРаспределению;
			КоэффициентыРаспределения = Новый Массив;
			ЗаписиРегистра = Новый Массив;
			
			Пока Выборка.Следующий() Цикл				
				НаборЗаписей = НДФЛНаборЗаписейПоРегистратору(Организация, 
														 ПериодРегистрации, 
														 НаборыЗаписейПоРегистраторам, 
														 Выборка.РегистраторВыплаты, 
														 ДокументОперацияБух, 
														 СоответствиеКонвертированныхОбъектов,
														 "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ");
														 
				Запись = НаборЗаписей.Добавить();										 
																		 
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Если Не ЗначениеЗаполнено(Запись.РегистрацияВНалоговомОргане) Тогда
					Если ЗначениеЗаполнено(Выборка.УдалитьОКТМО_КПП) Тогда
						КодОктмо = КодОКТМОизСуммыОКТМОиКПП(Выборка.УдалитьОКТМО_КПП);
						КПП = КППизСуммыОКАТОиКПП(Выборка.УдалитьОКТМО_КПП);
						Запись.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВИФНС(Выборка.Организация, "", КодОктмо, КПП, СоответствиеВладельцевРегистрациям);
					Иначе
						КодОкато = КодОКАТОизСуммыОКАТОиКПП(Выборка.УдалитьОКАТО_КПП);
						КПП = КППизСуммыОКАТОиКПП(Выборка.УдалитьОКАТО_КПП);
						Запись.РегистрацияВНалоговомОргане = ПолучитьРегистрациюВИФНС(Выборка.Организация, КодОкато, "", КПП, СоответствиеВладельцевРегистрациям);
					КонецЕсли;	
					Запись.УдалитьОКАТО_КПП = "";
					Запись.УдалитьОКТМО_КПП = "";
				КонецЕсли;	
				Запись.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПорученияПоДатеНомеру(Выборка.ПлатежноеПоручениеДата, Выборка.ПлатежноеПоручениеНомер);
				
				ЗаписиРегистра.Добавить(Запись);
				
				КоэффициентыРаспределения.Добавить(Выборка.База);
										 
			КонецЦикла;
			
			РаспределенныеСуммыНДФЛ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, КоэффициентыРаспределения);
			
			Индекс = 0;
			Для Каждого Запись Из ЗаписиРегистра Цикл
				Если РаспределенныеСуммыНДФЛ <> Неопределено Тогда 
					Запись.Сумма = РаспределенныеСуммыНДФЛ[Индекс];
				КонецЕсли;	
						
				Индекс = Индекс + 1;
			КонецЦикла;	

		КонецЦикла;				
	КонецЦикла;		
	
	Для Каждого НаборЗаписей Из НаборыЗаписейПоРегистраторам Цикл
		НаборЗаписей.Значение.Записать();
	КонецЦикла;
	
	Для Каждого Регистратор Из СписокДокументов Цикл
		Если Регистратор.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ) Тогда
			НаборЗаписей = РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			
			НаборЗаписей.Записать();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция РеквизитыПлатежногоПорученияПоДатеНомеру(ДатаПП, НомерПП)
	
	Если ЗначениеЗаполнено(ДатаПП)
		И ЗначениеЗаполнено(НомерПП) Тогда 
		
		Возврат "№ " + НомерПП + " от " + Формат(ДатаПП, "ДФ=дд.ММ.гггг");
	Иначе
		Возврат "";
	КонецЕсли;	

КонецФункции

//АвансовыеПлатежиИностранцевПоНДФЛ

Процедура КонвертироватьДанныеАвансовыеПлатежиИностранцевПоНДФЛ(СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям)
	ПериодыВычетов = КлючиПорцийДанныхДляРегистрацииАвансовыеПлатежиИностранцевПоНДФЛ();
	Пока ПериодыВычетов.Следующий() Цикл
		КлючиПорцииДанных = Новый Структура("Период, Организация", ПериодыВычетов.Период, ПериодыВычетов.Организация);	
		
		КонвертироватьПорциюДанныхАвансовыеПлатежиИностранцевПоНДФЛ(КлючиПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, Истина);
	КонецЦикла;	
КонецПроцедуры	

Функция КлючиПорцийДанныхДляРегистрацииАвансовыеПлатежиИностранцевПоНДФЛ()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Период, МЕСЯЦ) КАК Период,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Организация
	|ПОМЕСТИТЬ ВТПериодыПлатежей
	|ИЗ
	|	РегистрНакопления.УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Обороты(, , Регистратор, ) КАК УдалитьАвансовыеПлатежиИностранцевПоНДФЛ
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Период,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПлатежей.Период,
	|	ПериодыПлатежей.Организация
	|ИЗ
	|	ВТПериодыПлатежей КАК ПериодыПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ.Обороты(, , Регистратор, ) КАК АвансовыеПлатежиИностранцевПоНДФЛ
	|		ПО ПериодыПлатежей.Организация = АвансовыеПлатежиИностранцевПоНДФЛ.ГоловнаяОрганизация
	|			И (ПериодыПлатежей.Период = НАЧАЛОПЕРИОДА(АвансовыеПлатежиИностранцевПоНДФЛ.Период, МЕСЯЦ))
	|			И (НЕ ТИПЗНАЧЕНИЯ(АвансовыеПлатежиИностранцевПоНДФЛ.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	АвансовыеПлатежиИностранцевПоНДФЛ.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПлатежей.Организация,
	|	ПериодыПлатежей.Период";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура КонвертироватьПорциюДанныхАвансовыеПлатежиИностранцевПоНДФЛ(КлючПорцииДанных, СоответствиеВладельцевРегистрациям, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	ДанныеПоПоПлатежам =  ДанныеАвансовыеПлатежиИностранцевПоНДФЛ(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	НачатьТранзакцию();
	ЗарегистрироватьАвансовыеПлатежиИностранцевПоНДФЛ(ДанныеПоПоПлатежам, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Функция ДанныеАвансовыеПлатежиИностранцевПоНДФЛ(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
			Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));	
		Иначе
			Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Организация КАК ГоловнаяОрганизация,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Год,
	|	СУММА(УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Сумма) КАК Сумма,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Период,
	|	"""" КАК РегистрКодПоОКАТО,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.КодПоОКТМО КАК РегистрКодПоОктмо,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.КПП КАК РегистрКПП,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ОбособленноеПодразделение.РегистрацияВНалоговомОргане КАК ОПРегистрацияВНалоговомОргане,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ПодразделениеОрганизации.РегистрацияВНалоговомОргане КАК ПодразделениеРегистрацияВНалоговомОргане,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ОбособленноеПодразделение КАК Организация,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Организация.РегистрацияВНалоговомОргане КАК ОрганизацияРегистрацияВНалоговомОргане,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ВидДвижения,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.КодДохода,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.МесяцНалоговогоПериода,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.СтавкаНалогообложенияРезидента
	|ИЗ
	|	РегистрНакопления.УдалитьАвансовыеПлатежиИностранцевПоНДФЛ КАК УдалитьАвансовыеПлатежиИностранцевПоНДФЛ
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Период,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ФизЛицо,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Организация,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Год,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.КодПоОКТМО,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.КПП,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ПодразделениеОрганизации,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ОбособленноеПодразделение,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ВидДвижения,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ОбособленноеПодразделение.РегистрацияВНалоговомОргане,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.ПодразделениеОрганизации.РегистрацияВНалоговомОргане,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Организация.РегистрацияВНалоговомОргане,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.МесяцНалоговогоПериода,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.СтавкаНалогообложенияРезидента,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.КодДохода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Период";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьАвансовыеПлатежиИностранцевПоНДФЛ." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" И ТолькоДвиженияНепереносимыхРегистраторов Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьАвансовыеПлатежиИностранцевПоНДФЛ." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьАвансовыеПлатежиИностранцевПоНДФЛ.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура ЗарегистрироватьАвансовыеПлатежиИностранцевПоНДФЛ(ДанныеПоПоПлатежам, СоответствиеКонвертированныхОбъектов, СоответствиеВладельцевРегистрациям, НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеПоПоПлатежам.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		Пока ДанныеПоПоПлатежам.СледующийПоЗначениюПоля("Период") Цикл
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеПоПоПлатежам.Период, ДанныеПоПоПлатежам.ГоловнаяОрганизация, "АвансовыеПлатежиИностранцевПоНДФЛ");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;	
			
			Пока ДанныеПоПоПлатежам.Следующий() Цикл
				СтрокаДвижения = ДокументПереноса.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Добавить();
				СтрокаДвижения.Активность = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДанныеПоПоПлатежам);
				СтрокаДвижения.РегистрацияВНалоговомОргане = ПолучитьРегистрациюИзКонвертируемойЗаписи(ДанныеПоПоПлатежам, СоответствиеВладельцевРегистрациям);
				СтрокаДвижения.КодДохода = КонвертироватьДанные(ДанныеПоПоПлатежам.КодДохода, СоответствиеКонвертированныхОбъектов); 
			КонецЦикла;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Истина;
				ДокументПереноса.Записать();
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записать();
	КонецЕсли;	

КонецПроцедуры	


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СТРАХОВЫЕ ВЗНОСЫ

//Пособия по уходы за ребенком

Процедура КонвертироватьПособияПоУходуЗаРебенком(СоответствиеКонвертированныхОбъектов)
	ПериодыПособий = КлючиПорцийДанныхПособийПоУходуЗаРебенком();
	Пока ПериодыПособий.Следующий() Цикл
		КлючДанных = Новый Структура("Организация, Период", ПериодыПособий.Организация, ПериодыПособий.Период);
		
		КонвертироватьПорциюДанныхПособияПоУходуЗаРебенком(КлючДанных, СоответствиеКонвертированныхОбъектов, Истина);
	КонецЦикла;	
КонецПроцедуры	

Функция КлючиПорцийДанныхПособийПоУходуЗаРебенком()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.Период,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.Организация
	|ПОМЕСТИТЬ ВТПериодыПособий
	|ИЗ
	|	РегистрНакопления.УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Обороты(, , Регистратор, ) КАК УдалитьПособияПоУходуЗаРебенкомДоПолутораЛетОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.Организация,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛетОбороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПособий.Период,
	|	ПериодыПособий.Организация
	|ИЗ
	|	ВТПериодыПособий КАК ПериодыПособий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПособияПоУходуЗаРебенком.Обороты(, , Регистратор, ) КАК ПособияПоУходуЗаРебенкомОбороты
	|		ПО ПериодыПособий.Период = ПособияПоУходуЗаРебенкомОбороты.Период
	|			И ПериодыПособий.Организация = ПособияПоУходуЗаРебенкомОбороты.Организация
	|			И (НЕ ТИПЗНАЧЕНИЯ(ПособияПоУходуЗаРебенкомОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	ПособияПоУходуЗаРебенкомОбороты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПособий.Период,
	|	ПериодыПособий.Организация";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура КонвертироватьПорциюДанныхПособияПоУходуЗаРебенком(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	ДанныеОСуммахПособийПоУходуЗаРебенком = ДанныеОСуммахПособийПоУходуЗаРебенком(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);	
	НачатьТранзакцию();
	ЗарегистрироватьСуммыПособийПоУходуЗаРебенком(ДанныеОСуммахПособийПоУходуЗаРебенком, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Функция ДанныеОСуммахПособийПоУходуЗаРебенком(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Период КАК Период,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Организация КАК Организация,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ВидЗанятости,
	|	ВЫБОР
	|		КОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Сотрудник.ФизическоеЛицо
	|		ИНАЧЕ УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ФизЛицо
	|	КОНЕЦ КАК ФизическоеЛицо,
	|	СУММА(УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.СтраховыеСлучаи) КАК СтраховыеСлучаи,
	|	СУММА(ВЫБОР
	|			КОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.УходЗаПервымРебенком
	|				ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.СтраховыеСлучаи
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтраховыеСлучаиПоУходуЗаПервымРебенком,
	|	СУММА(ВЫБОР
	|			КОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.УходЗаПервымРебенком
	|				ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.СуммаВсего
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВсегоПоУходуЗаПервымРебенком,
	|	СУММА(ВЫБОР
	|			КОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.УходЗаПервымРебенком
	|				ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.СуммаСверхНорм
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСверхНормПоУходуЗаПервымРебенком,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.УходЗаПервымРебенком
	|				ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.СтраховыеСлучаи
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СтраховыеСлучаиПоУходуЗаВторымРебенком,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.УходЗаПервымРебенком
	|				ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.СуммаВсего
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВсегоПоУходуЗаВторымРебенком,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.УходЗаПервымРебенком
	|				ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.СуммаСверхНорм
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСверхНормПоУходуЗаВторымРебенком,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ОблагаетсяЕНВД,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Сотрудник,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ВыплатаЗаСчетФедеральногоБюджета КАК ФинансированиеФедеральнымБюджетом,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ДатаСтраховогоСлучая
	|ИЗ
	|	РегистрНакопления.УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет КАК УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Период,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Организация,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ВидЗанятости,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ОблагаетсяЕНВД,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Сотрудник,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ВыплатаЗаСчетФедеральногоБюджета,
	|	УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ДатаСтраховогоСлучая,
	|	ВЫБОР
	|		КОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Сотрудник.ФизическоеЛицо
	|		ИНАЧЕ УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.ФизЛицо
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьПособияПоУходуЗаРебенкомДоПолутораЛет.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);	

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции	

Процедура ЗарегистрироватьСуммыПособийПоУходуЗаРебенком(ДанныеОСуммахПособийПоУходуЗаРебенком, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеОСуммахПособийПоУходуЗаРебенком.СледующийПоЗначениюПоля("Организация") Цикл
		Пока ДанныеОСуммахПособийПоУходуЗаРебенком.СледующийПоЗначениюПоля("Период") Цикл
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеОСуммахПособийПоУходуЗаРебенком.Период, ДанныеОСуммахПособийПоУходуЗаРебенком.Организация, "ПособияПоУходуЗаРебенком");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;	
			
			Пока ДанныеОСуммахПособийПоУходуЗаРебенком.Следующий() Цикл
				СтрокаДвижения = ДокументПереноса.Движения.ПособияПоУходуЗаРебенком.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДанныеОСуммахПособийПоУходуЗаРебенком);
			КонецЦикла;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.ПособияПоУходуЗаРебенком.Записывать = Истина;
				ДокументПереноса.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ПособияПоУходуЗаРебенком.Записать();
	КонецЕсли;	
КонецПроцедуры	

//Пособия по социальному страхованию

Процедура КонвертироватьПособияПоСоциальномуСтрахованию(СоответствиеКонвертированныхОбъектов)
	ПериодыПособий = КлючиПорцийДанныхПособийПоСоцСтраху(); 
	Пока ПериодыПособий.Следующий() Цикл
		КлючДанных = Новый Структура("Период, Организация", ПериодыПособий.Период, ПериодыПособий.Организация);
		КонвертироватьПорциюДанныхПособияПоСоциальномуСтрахованию(КлючДанных, СоответствиеКонвертированныхОбъектов, Истина);	
	КонецЦикла;	
КонецПроцедуры	

Функция КлючиПорцийДанныхПособийПоСоцСтраху()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПособияСоциальномуСтрахованиюОбороты.Период,
	|	УдалитьПособияСоциальномуСтрахованиюОбороты.Организация
	|ПОМЕСТИТЬ ВТПериодыПособий
	|ИЗ
	|	РегистрНакопления.УдалитьПособияСоциальномуСтрахованию.Обороты(, , Регистратор, ) КАК УдалитьПособияСоциальномуСтрахованиюОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьПособияСоциальномуСтрахованиюОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьПособияСоциальномуСтрахованиюОбороты.Период,
	|	УдалитьПособияСоциальномуСтрахованиюОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПособий.Период,
	|	ПериодыПособий.Организация
	|ИЗ
	|	ВТПериодыПособий КАК ПериодыПособий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПособияПоСоциальномуСтрахованию.Обороты(, , Регистратор, ) КАК ПособияПоСоциальномуСтрахованиюОбороты
	|		ПО ПериодыПособий.Период = ПособияПоСоциальномуСтрахованиюОбороты.Период
	|			И ПериодыПособий.Организация = ПособияПоСоциальномуСтрахованиюОбороты.Организация
	|			И (НЕ ТИПЗНАЧЕНИЯ(ПособияПоСоциальномуСтрахованиюОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	ПособияПоСоциальномуСтрахованиюОбороты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПособий.Период,
	|	ПериодыПособий.Организация";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура КонвертироватьПорциюДанныхПособияПоСоциальномуСтрахованию(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	ДанныеОСуммахПособийПоСоциальномуСтрахованию = ДанныеОСуммахПособийПоСоциальномуСтрахованию(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);	
	НачатьТранзакцию();
	ЗарегистрироватьСуммыПособийПоСоциальномуСтрахованию(ДанныеОСуммахПособийПоСоциальномуСтрахованию, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Функция ДанныеОСуммахПособийПоСоциальномуСтрахованию(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПособияСоциальномуСтрахованию.Период КАК Период,
	|	УдалитьПособияСоциальномуСтрахованию.Организация КАК Организация,
	|	УдалитьПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
	|	УдалитьПособияСоциальномуСтрахованию.ОблагаетсяЕНВД,
	|	УдалитьПособияСоциальномуСтрахованию.ВидЗанятости,
	|	СУММА(УдалитьПособияСоциальномуСтрахованию.СтраховыеСлучаи) КАК СтраховыеСлучаи,
	|	СУММА(УдалитьПособияСоциальномуСтрахованию.ОплаченныеДни) КАК ОплаченныеДни,
	|	СУММА(УдалитьПособияСоциальномуСтрахованию.СуммаВсего) КАК СуммаВсего,
	|	СУММА(УдалитьПособияСоциальномуСтрахованию.СуммаСверхНорм) КАК СуммаСверхНорм,
	|	УдалитьПособияСоциальномуСтрахованию.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьПособияСоциальномуСтрахованию.ВыплатаЗаСчетФедеральногоБюджета КАК ФинансированиеФедеральнымБюджетом,
	|	УдалитьПособияСоциальномуСтрахованию.ДатаСтраховогоСлучая,
	|	УдалитьПособияСоциальномуСтрахованию.Сотрудник
	|ИЗ
	|	РегистрНакопления.УдалитьПособияСоциальномуСтрахованию КАК УдалитьПособияСоциальномуСтрахованию
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьПособияСоциальномуСтрахованию.Период,
	|	УдалитьПособияСоциальномуСтрахованию.Организация,
	|	УдалитьПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования,
	|	УдалитьПособияСоциальномуСтрахованию.ОблагаетсяЕНВД,
	|	УдалитьПособияСоциальномуСтрахованию.ВидЗанятости,
	|	УдалитьПособияСоциальномуСтрахованию.Сотрудник.ФизическоеЛицо,
	|	УдалитьПособияСоциальномуСтрахованию.ВыплатаЗаСчетФедеральногоБюджета,
	|	УдалитьПособияСоциальномуСтрахованию.ДатаСтраховогоСлучая,
	|	УдалитьПособияСоциальномуСтрахованию.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьПособияСоциальномуСтрахованию." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьПособияСоциальномуСтрахованию.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		ИначеЕсли КлючДанных.Ключ = "ФизЛицо" Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьПособияСоциальномуСтрахованию.Сотрудник.ФизическоеЛицо = &" + КлючДанных.Ключ;	
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьПособияСоциальномуСтрахованию." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьПособияСоциальномуСтрахованию.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);	

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции	

Процедура ЗарегистрироватьСуммыПособийПоСоциальномуСтрахованию(ДанныеОСуммахПособийПоСоциальномуСтрахованию, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеОСуммахПособийПоСоциальномуСтрахованию.СледующийПоЗначениюПоля("Организация") Цикл
		Пока ДанныеОСуммахПособийПоСоциальномуСтрахованию.СледующийПоЗначениюПоля("Период") Цикл
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеОСуммахПособийПоСоциальномуСтрахованию.Период, ДанныеОСуммахПособийПоСоциальномуСтрахованию.Организация, "ПособияПоСоциальномуСтрахованию");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;	
			
			Пока ДанныеОСуммахПособийПоСоциальномуСтрахованию.Следующий() Цикл
				СтрокаДвижения = ДокументПереноса.Движения.ПособияПоСоциальномуСтрахованию.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, ДанныеОСуммахПособийПоСоциальномуСтрахованию);
			КонецЦикла;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.ПособияПоСоциальномуСтрахованию.Записывать = Истина;
				ДокументПереноса.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ПособияПоСоциальномуСтрахованию.Записать();
	КонецЕсли;	
КонецПроцедуры	

//Расчеты с фондами по страховым взносам

Процедура КонвертироватьРасчетыСФондамиПоСтраховымВзносам(СоответствиеКонвертированныхОбъектов)
	ПериодыРасчетов = КлючиПорцийДанныхДляРегистрацииРасчетовСФондами();
	Пока ПериодыРасчетов.Следующий() Цикл
		
		КлючПорцииДанных = Новый Структура("Период, Организация", ПериодыРасчетов.Период, ПериодыРасчетов.Организация);
		КонвертироватьПорциюДанныхРасчетыСФондамиПоСтраховымВзносам(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Истина);
	КонецЦикла;
КонецПроцедуры

Функция КлючиПорцийДанныхДляРегистрацииРасчетовСФондами()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдалитьРасчетыПоСтраховымВзносамОбороты.Период, МЕСЯЦ) КАК Период,
	|	УдалитьРасчетыПоСтраховымВзносамОбороты.Организация
	|ПОМЕСТИТЬ ВТПериодыРасчетов
	|ИЗ
	|	РегистрНакопления.УдалитьРасчетыПоСтраховымВзносам.Обороты(, , Регистратор, ) КАК УдалитьРасчетыПоСтраховымВзносамОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(УдалитьРасчетыПоСтраховымВзносамОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(УдалитьРасчетыПоСтраховымВзносамОбороты.Период, МЕСЯЦ),
	|	УдалитьРасчетыПоСтраховымВзносамОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРасчетов.Период,
	|	ПериодыРасчетов.Организация
	|ИЗ
	|	ВТПериодыРасчетов КАК ПериодыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Обороты(, , Регистратор, ) КАК РасчетыСФондамиПоСтраховымВзносамОбороты
	|		ПО (ПериодыРасчетов.Период = НАЧАЛОПЕРИОДА(РасчетыСФондамиПоСтраховымВзносамОбороты.Период, МЕСЯЦ))
	|			И ПериодыРасчетов.Организация = РасчетыСФондамиПоСтраховымВзносамОбороты.Организация
	|			И (НЕ ТИПЗНАЧЕНИЯ(РасчетыСФондамиПоСтраховымВзносамОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	РасчетыСФондамиПоСтраховымВзносамОбороты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыРасчетов.Период,
	|	ПериодыРасчетов.Организация";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура КонвертироватьПорциюДанныхРасчетыСФондамиПоСтраховымВзносам(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	ДанныеОРасчетахСФондамиПоВзносам = ДанныеОРасчетахСФондамиПоСтраховымВзносам(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов); 
	ЗарегистрироватьДанныеОРасчетахСфондамиПоСтраховымВзносам(ДанныеОРасчетахСФондамиПоВзносам, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ДанныеОРасчетахСФондамиПоСтраховымВзносам(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));
	КонецЦикла;
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьРасчетыПоСтраховымВзносам.Организация,
	|	УдалитьРасчетыПоСтраховымВзносам.ВидПлатежа,
	|	УдалитьРасчетыПоСтраховымВзносам.МесяцРасчетногоПериода,
	|	УдалитьРасчетыПоСтраховымВзносам.ОблагаетсяЕНВД,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ПФРСтраховая) КАК ПФРСтраховая,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ПФРНакопительная) КАК ПФРНакопительная,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ФСС) КАК ФСС,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ФФОМС) КАК ФФОМС,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ТФОМС) КАК ТФОМС,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ПФРПоДополнительномуТарифу) КАК ПФРПоДополнительномуТарифу,
	|	УдалитьРасчетыПоСтраховымВзносам.Период,
	|	УдалитьРасчетыПоСтраховымВзносам.ВидДвижения,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ПФРНаДоплатуКПенсииШахтерам) КАК ПФРНаДоплатуКПенсииШахтерам,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(УдалитьРасчетыПоСтраховымВзносам.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФССДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ПлатежноеПоручениеФССДата,
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФССНомер, """") КАК ПлатежноеПоручениеФССНомер,
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФСС_НС_ПЗДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ПлатежноеПоручениеФСС_НСДата,
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФСС_НС_ПЗНомер, """") КАК ПлатежноеПоручениеФСС_НСНомер
	|ИЗ
	|	РегистрНакопления.УдалитьРасчетыПоСтраховымВзносам КАК УдалитьРасчетыПоСтраховымВзносам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдалитьРасчетыПоСтраховымВзносам КАК ДанныеРегистраторовУплаты
	|		ПО УдалитьРасчетыПоСтраховымВзносам.Регистратор = ДанныеРегистраторовУплаты.Ссылка
	|ГДЕ
	|	&Условие
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьРасчетыПоСтраховымВзносам.Период,
	|	УдалитьРасчетыПоСтраховымВзносам.ВидДвижения,
	|	УдалитьРасчетыПоСтраховымВзносам.Организация,
	|	УдалитьРасчетыПоСтраховымВзносам.ВидПлатежа,
	|	УдалитьРасчетыПоСтраховымВзносам.МесяцРасчетногоПериода,
	|	УдалитьРасчетыПоСтраховымВзносам.ОблагаетсяЕНВД,
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФССНомер, """"),
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФССДата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФСС_НС_ПЗДата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ДанныеРегистраторовУплаты.ПлатежноеПоручениеФСС_НС_ПЗНомер, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьРасчетыПоСтраховымВзносам.Организация,
	|	УдалитьРасчетыПоСтраховымВзносам.Период";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьРасчетыПоСтраховымВзносам." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьРасчетыПоСтраховымВзносам.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьРасчетыПоСтраховымВзносам." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьРасчетыПоСтраховымВзносам.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьДанныеОРасчетахСфондамиПоСтраховымВзносам(ДанныеОРасчетахСФондамиПоВзносам, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;
	
	Пока ДанныеОРасчетахСФондамиПоВзносам.СледующийПоЗначениюПоля("Организация") Цикл
		Пока ДанныеОРасчетахСФондамиПоВзносам.СледующийПоЗначениюПоля("Период") Цикл
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеОРасчетахСФондамиПоВзносам.Период, ДанныеОРасчетахСФондамиПоВзносам.Организация, "РасчетыСФондамиПоСтраховымВзносам");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			Пока ДанныеОРасчетахСФондамиПоВзносам.Следующий() Цикл
				Если ЗначениеЗаполнено(ДанныеОРасчетахСФондамиПоВзносам.Организация) Тогда
					ДобавитьЗаписиДвиженийРасчетовСфондамиПоВзносам(ДокументПереноса.Движения.РасчетыСФондамиПоСтраховымВзносам, ДанныеОРасчетахСФондамиПоВзносам, СоответствиеКонвертированныхОбъектов);
				КонецЕсли;
			КонецЦикла;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.РасчетыСФондамиПоСтраховымВзносам.Записывать = Истина;
				ДокументПереноса.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.РасчетыСФондамиПоСтраховымВзносам.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаписиДвиженийРасчетовСфондамиПоВзносам(НаборЗаписей, ДанныеОРасчетахСФондамиПоВзносам, СоответствиеКонвертированныхОбъектов)
	
	Если ДанныеОРасчетахСФондамиПоВзносам.ПФРПоСуммарномуТарифу <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ПФРПоСуммарномуТарифу;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;	
	Если ДанныеОРасчетахСФондамиПоВзносам.ПФРСтраховая <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ПФРСтраховая;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;	
	Если ДанныеОРасчетахСФондамиПоВзносам.ПФРНакопительная <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ПФРНакопительная;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;	
	Если ДанныеОРасчетахСФондамиПоВзносам.ФСС <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ФСС;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
		СтрокаДВижений.ПлатежноеПоручениеДата = ДанныеОРасчетахСФондамиПоВзносам.ПлатежноеПоручениеФССДата;
		СтрокаДВижений.ПлатежноеПоручениеНомер = ДанныеОРасчетахСФондамиПоВзносам.ПлатежноеПоручениеФССНомер;
	КонецЕсли;	
	Если ДанныеОРасчетахСФондамиПоВзносам.ФФОМС <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ФФОМС;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФФОМС;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;	
	Если ДанныеОРасчетахСФондамиПоВзносам.ТФОМС <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ТФОМС;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ТФОМС;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;	
	Если ДанныеОРасчетахСФондамиПоВзносам.ФССНесчастныеСлучаи <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ФССНесчастныеСлучаи;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
		СтрокаДВижений.ПлатежноеПоручениеДата = ДанныеОРасчетахСФондамиПоВзносам.ПлатежноеПоручениеФСС_НСДата;
		СтрокаДВижений.ПлатежноеПоручениеНомер = ДанныеОРасчетахСФондамиПоВзносам.ПлатежноеПоручениеФСС_НСНомер;		
	КонецЕсли;
	Если ДанныеОРасчетахСФондамиПоВзносам.ПФРПоДополнительномуТарифу <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ПФРПоДополнительномуТарифу;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;
	Если ДанныеОРасчетахСФондамиПоВзносам.ПФРНаДоплатуКПенсииШахтерам <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ПФРНаДоплатуКПенсииШахтерам;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;
	Если ДанныеОРасчетахСФондамиПоВзносам.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;	
	Если ДанныеОРасчетахСФондамиПоВзносам.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах <> 0  Тогда
		СтрокаДВижений = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.Сумма = ДанныеОРасчетахСФондамиПоВзносам.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах;
        СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах;
		ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам);
		СтрокаДВижений.РасчетыПоПособиям = ПолучитьВидПособияПоСоциальномуСтрахованию(ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа,  СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников);
	КонецЕсли;	
КонецПроцедуры

Процедура ДополнитьЗаписьРасчетыСФондамиПоСтраховымВзносам(СтрокаДВижений, ДанныеОРасчетахСФондамиПоВзносам)
	Если ДанныеОРасчетахСФондамиПоВзносам.МесяцРасчетногоПериода >= '20100101' Тогда
		СтрокаДВижений.ЭтоСтраховыеВзносы = Истина;
	Иначе
		СтрокаДВижений.ЭтоСтраховыеВзносы = Ложь;
		СтрокаДВижений.ГодЗадолженностиПоЕСН = Год(ДанныеОРасчетахСФондамиПоВзносам.МесяцРасчетногоПериода);
	КонецЕсли;
	
	Если ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт 
		ИЛИ	ДанныеОРасчетахСФондамиПоВзносам.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт Тогда 
		
		СтрокаДВижений.ЭтоДоначислениеПоАктуПроверки = Истина;
	КонецЕсли;		
	
	СтрокаДВижений.ЭтоРасчетыПоНачислениюУплатеВзносовВФСС = СтрокаДВижений.ВидОбязательногоСтрахованияСотрудников = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС И СтрокаДВижений.РасчетыПоПособиям = Перечисления.ВидыРасчетовПоСредствамФСС.ПустаяСсылка();	
КонецПроцедуры	

Функция ПолучитьВидПособияПоСоциальномуСтрахованию(ВидыПлатежаВГосБюджет, ВидОбязательногоСтрахования)
	Если (ВидОбязательногоСтрахования = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС Или
		ВидОбязательногоСтрахования = Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)Тогда 	
		
		Если ВидыПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию Тогда
			Возврат Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию;
		ИначеЕсли ВидыПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.НеПринято Тогда
			Возврат Перечисления.ВидыРасчетовПоСредствамФСС.НеПринято;
		ИначеЕсли ВидыПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда Тогда
			Возврат Перечисления.ВидыРасчетовПоСредствамФСС.ПолученоИзФонда;
		Иначе
			Возврат Перечисления.ВидыРасчетовПоСредствамФСС.ПустаяСсылка();
		КонецЕсли;
	Иначе 	
		Возврат Перечисления.ВидыРасчетовПоСредствамФСС.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Перечисления.ВидыРасчетовПоСредствамФСС.ПустаяСсылка();
КонецФункции	

//Исчисленные страховые взносы

Процедура КонвертироватьИсчисленныеСтраховыеВзносы(СоответствиеКонвертированныхОбъектов, СписокДокументов = Неопределено, НовыйРегистратор = Неопределено, Отбор = Неопределено)
	Запрос = Новый Запрос;
	
	ТолькоДвиженияНепереносимыхРегистраторов = (СписокДокументов = Неопределено);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		КонвертируемыеТипыДокументовБП3 = КонвертируемыеТипыДокументовБП3();
		КонвертируемыеТипыДокументовБП3.Добавить(Тип("ДокументСсылка.ОперацияБух"));
		
		Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
		Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3);
	Иначе
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	КонецЕсли;
	
	ТекстУсловия = "";
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + "   (НЕ ТИПЗНАЧЕНИЯ(ИсчисленныеСтраховыеВзносы.Регистратор) В (&КонвертируемыеТипыДокументовБП2))
										   | И НЕ ТИПЗНАЧЕНИЯ(ИсчисленныеСтраховыеВзносы.Регистратор) В (&КонвертируемыеТипыДокументовБП3)";
	Иначе
		ТекстУсловия = "	ИсчисленныеСтраховыеВзносы.Регистратор В (&СписокДокументов)";
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючДанных Из Отбор Цикл
			Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));		
		КонецЦикла;
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ) КАК Период,
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Регистратор,
	|	ИсчисленныеСтраховыеВзносы.НомерСтроки,
	|	ИсчисленныеСтраховыеВзносы.ГоловнаяОрганизация,
	|	ИсчисленныеСтраховыеВзносы.ФизическоеЛицо,
	|	ИсчисленныеСтраховыеВзносы.Организация,
	|	ИсчисленныеСтраховыеВзносы.ПФРСтраховая,
	|	ИсчисленныеСтраховыеВзносы.ПФРНакопительная,
	|	ИсчисленныеСтраховыеВзносы.ФСС,
	|	ИсчисленныеСтраховыеВзносы.ФФОМС,
	|	ИсчисленныеСтраховыеВзносы.ТФОМС,
	|	ИсчисленныеСтраховыеВзносы.ФССНесчастныеСлучаи,
	|	ИсчисленныеСтраховыеВзносы.ПФРНаДоплатуЛетчикам,
	|	ИсчисленныеСтраховыеВзносы.ПФРНаДоплатуШахтерам,
	|	ИсчисленныеСтраховыеВзносы.ПФРСтраховаяЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ПФРНакопительнаяЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ФССЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ФФОМСЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ТФОМСЕНВД,
	|	ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ИсчисленныеСтраховыеВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРПоСуммарномуТарифу КАК ПФРПоСуммарномуТарифу,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРПоСуммарномуТарифуЕНВД КАК ПФРПоСуммарномуТарифуЕНВД,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРДоПредельнойВеличины КАК ПФРДоПредельнойВеличины,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРДоПредельнойВеличиныЕНВД КАК ПФРДоПредельнойВеличиныЕНВД,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРСПревышения КАК ПФРСПревышения,
	|	ИсчисленныеСтраховыеВзносы.УдалитьПФРСПревышенияЕНВД КАК ПФРСПревышенияЕНВД
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	&Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючДанных Из Отбор Цикл
			Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + " И ИсчисленныеСтраховыеВзносы." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
			ИначеЕсли КлючДанных.Ключ = "Период" Тогда
				ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
			Иначе
				ТекстУсловия = ТекстУсловия + " И ИсчисленныеСтраховыеВзносы." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НовыйРегистратор <> Неопределено Тогда
		НачатьТранзакцию();
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыНакопления.ИсчисленныеСтраховыеВзносы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(Выборка.Период, Выборка.Организация, "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
			НачатьТранзакцию();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.НомерСтроки = Выборка.НомерСтроки Тогда
					НаборЗаписей.Удалить(ЗаписьНабора);
				КонецЕсли;
			КонецЦикла;
			
			Запись = ДокументПереноса.Движения.ИсчисленныеСтраховыеВзносы.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.ИсчисленныеСтраховыеВзносы.Записывать = Истина;
			ДокументПереноса.Записать();
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ИсчисленныеСтраховыеВзносы.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

//Сведения о доходах страховые взносы

Процедура КонвертироватьСведенияОДоходахДляСтраховыхВзносов(СоответствиеКонвертированныхОбъектов)
	ПериодыДоходов = КлючиПорцийДанныхСведенийОДоходахСтрахВзносы();
	
	Пока ПериодыДоходов.Следующий() Цикл
		КлючПорцииДаных = Новый Структура("Период,Организация", ПериодыДоходов.Период, ПериодыДоходов.Организация);	
		КонвертироватьПорциюДанныхОДоходахДляСтраховыхВзносов(КлючПорцииДаных, СоответствиеКонвертированныхОбъектов, Истина);
	КонецЦикла;	
КонецПроцедуры

Функция КлючиПорцийДанныхСведенийОДоходахСтрахВзносы()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП2", КонвертируемыеТипыДокументовБП2());
	Запрос.УстановитьПараметр("КонвертируемыеТипыДокументовБП3", КонвертируемыеТипыДокументовБП3());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахСтраховыеВзносыОбороты.Период, МЕСЯЦ) КАК Период,
	|	СведенияОДоходахСтраховыеВзносыОбороты.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПериодыДоходов
	|ИЗ
	|	РегистрНакопления.УдалитьСтраховыеВзносыСведенияОДоходах.Обороты(, , Регистратор, ) КАК СведенияОДоходахСтраховыеВзносыОбороты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(СведенияОДоходахСтраховыеВзносыОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП2)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахСтраховыеВзносыОбороты.Период,
	|	СведенияОДоходахСтраховыеВзносыОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДоходов.Период,
	|	ПериодыДоходов.Организация
	|ИЗ
	|	ВТПериодыДоходов КАК ПериодыДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахСтраховыеВзносы.Обороты(, , Регистратор, ) КАК СведенияОДоходахСтраховыеВзносыОбороты
	|		ПО (ПериодыДоходов.Период = НАЧАЛОПЕРИОДА(СведенияОДоходахСтраховыеВзносыОбороты.Период, МЕСЯЦ))
	|			И ПериодыДоходов.Организация = СведенияОДоходахСтраховыеВзносыОбороты.ГоловнаяОрганизация
	|			И (НЕ ТИПЗНАЧЕНИЯ(СведенияОДоходахСтраховыеВзносыОбороты.Регистратор) В (&КонвертируемыеТипыДокументовБП3))
	|ГДЕ
	|	СведенияОДоходахСтраховыеВзносыОбороты.Период ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДоходов.Период,
	|	ПериодыДоходов.Организация";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Процедура КонвертироватьПорциюДанныхОДоходахДляСтраховыхВзносов(КлючиПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
 	НачатьТранзакцию();
	ДанныеОДоходах =  ДанныеОДоходахДляСтраховыхВзносов(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	ЗарегистрироватьСведенияОДоходахДляСтраховыхВзносов(ДанныеОДоходах, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ДанныеОДоходахДляСтраховыхВзносов(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, ?(КлючДанных.Ключ = "Период", НачалоМесяца(КлючДанных.Значение), КлючДанных.Значение));
	КонецЦикла;
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьСтраховыеВзносыСведенияОДоходах.Период КАК Период,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.ФизЛицо КАК ФизическоеЛицо,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.Организация КАК ГоловнаяОрганизация,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.ВидДохода,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.ОбособленноеПодразделение КАК Организация,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.ОблагаетсяЕНВД,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.ОблагаетсяПоДополнительномуТарифу КАК ОблагаетсяВзносамиНаДоплатуЛетчикам,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.Результат КАК Сумма,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.Скидка,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.ВидРасчета,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам КАК ОблагаетсяВзносамиНаДоплатуШахтерам,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.КлассУсловийТруда,
	|	УдалитьСтраховыеВзносыСведенияОДоходах.Период КАК ДатаНачала
	|ИЗ
	|	РегистрНакопления.УдалитьСтраховыеВзносыСведенияОДоходах КАК УдалитьСтраховыеВзносыСведенияОДоходах
	|ГДЕ
	|	&Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ГоловнаяОрганизация";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьСтраховыеВзносыСведенияОДоходах." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		ИначеЕсли КлючДанных.Ключ = "Период" Тогда
			ТекстУсловия = ТекстУсловия + " И НАЧАЛОПЕРИОДА(УдалитьСтраховыеВзносыСведенияОДоходах.Период, МЕСЯЦ)  = &" + КлючДанных.Ключ;
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьСтраховыеВзносыСведенияОДоходах." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьСтраховыеВзносыСведенияОДоходах.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗарегистрироватьСведенияОДоходахДляСтраховыхВзносов(ДанныеОДоходах, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;
	
	Пока ДанныеОДоходах.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
		Пока ДанныеОДоходах.СледующийПоЗначениюПоля("Период") Цикл
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса = ДокументПереносаДанных(ДанныеОДоходах.Период, ДанныеОДоходах.ГоловнаяОрганизация, "СведенияОДоходахСтраховыеВзносы");
				ДокументПереноса.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			Пока ДанныеОДоходах.Следующий() Цикл
				Запись = ДокументПереноса.Движения.СведенияОДоходахСтраховыеВзносы.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ДанныеОДоходах);
				Запись.ВидДохода = КонвертироватьДанные(ДанныеОДоходах.ВидДохода, СоответствиеКонвертированныхОбъектов);
				Запись.Начисление = КонвертироватьДанные(ДанныеОДоходах.ВидРасчета, СоответствиеКонвертированныхОбъектов);
			КонецЦикла;
			
			Если НовыйРегистратор = Неопределено Тогда
				ДокументПереноса.Движения.СведенияОДоходахСтраховыеВзносы.Записывать = Истина;
				ДокументПереноса.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.СведенияОДоходахСтраховыеВзносы.Записать();
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕНОСА ДАННЫХ

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";

	МассивАдрес	=	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);

	Возврат СтруктураВозврата;
	
КонецФункции	 

Функция АдресВФорматеБСП(Строка9Запятых)
	СтруктураАдреса = РазложитьАдрес(Строка9Запятых);
	ВозвращаемаяСтрока = "";
	Для Каждого КлючИЗначение Из СтруктураАдреса Цикл
		Если ПустаяСтрока(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + КлючИЗначение.Ключ + "=" + СокрЛП(КлючИЗначение.Значение);
	КонецЦикла;
	Если Не ПустаяСтрока(СтруктураАдреса.Дом) Тогда
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + Символы.ПС + "ТипДома=дом";
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураАдреса.Корпус) Тогда
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + Символы.ПС + "ТипКорпуса=корпус";
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураАдреса.Квартира) Тогда
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + Символы.ПС + "ТипКвартиры=кв.";
	КонецЕсли;
	Возврат ВозвращаемаяСтрока;
КонецФункции

Процедура СформироватьПередставлениеАдреса(Адрес, Представление)
	СтруктураАдреса = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(Адрес);
	УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Представление);
КонецПроцедуры

Функция КодОКАТОизСуммыОКАТОиКПП(ОКАТО_КПП) Экспорт
    СтрокиОКАТО_КПП = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОКАТО_КПП, "/");
	
	Если СтрокиОКАТО_КПП.Количество() > 0 Тогда
		Возврат СтрокиОКАТО_КПП[0];
	Иначе
		Возврат "";
	КонецЕсли;	
	
	//Возврат СокрЛП(Лев(ОКАТО_КПП,11))

КонецФункции // ОКАТОизСуммыОКАТОиКПП()

Функция КодОКТМОизСуммыОКТМОиКПП(ОКТМО_КПП) Экспорт
    СтрокиОКТМО_КПП = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОКТМО_КПП, "/");
	
	Если СтрокиОКТМО_КПП.Количество() > 0 Тогда
		Возврат СтрокиОКТМО_КПП[0];
	Иначе
		Возврат "";
	КонецЕсли;	
	
	//Возврат СокрЛП(Лев(ОКАТО_КПП,11))

КонецФункции // ОКАТОизСуммыОКАТОиКПП()

Функция КППизСуммыОКАТОиКПП(ОКАТО_КПП) Экспорт

	 СтрокиОКАТО_КПП = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОКАТО_КПП, "/");
	
	Если СтрокиОКАТО_КПП.Количество() > 1 Тогда
		Возврат СтрокиОКАТО_КПП[1];
	Иначе
		Возврат "";
	КонецЕсли;	

КонецФункции

Процедура КонвертироватьНастройкиОрганизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиОрганизаций.Организация,
	|	МАКСИМУМ(НастройкиОрганизаций.ПрименятьРайонныйКоэффициент) КАК ПрименятьРайонныйКоэффициент,
	|	МАКСИМУМ(НастройкиОрганизаций.ПрименятьСевернуюНадбавку) КАК ПрименятьСевернуюНадбавку
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.ПрименятьРайонныйКоэффициент КАК ПрименятьРайонныйКоэффициент,
	|		Организации.ПрименятьСевернуюНадбавку КАК ПрименятьСевернуюНадбавку,
	|		Организации.Ссылка КАК Организация
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.РайонныйКоэффициент > 0
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ),
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.СевернаяНадбавка > 0
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ),
	|		УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация
	|	ИЗ
	|		Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций.Начисления КАК УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления
	|	ГДЕ
	|		УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
	|		И УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УдалитьНачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация) КАК НастройкиОрганизаций
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиОрганизаций.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Организация = Выборка.Организация;
		СтрокаНабора.ПрименятьРайонныйКоэффициент = Выборка.ПрименятьРайонныйКоэффициент;
		СтрокаНабора.ПрименятьСевернуюНадбавку = Выборка.ПрименятьСевернуюНадбавку;
		
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияРКиСН();
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления данных

Процедура ПерсонифицированныйУчетЗаполнитьРегистрационныйНомерПФР()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК ИсторияРегистрацийВОрганеПФР
	|		ПО Организации.Ссылка = ИсторияРегистрацийВОрганеПФР.Организация
	|ГДЕ
	|	НЕ Организации.РегистрационныйНомерПФР ПОДОБНО """"
	|	И ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		Набор = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Прочитать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписьРегистра = Набор.Добавить();
			ЗаписьРегистра.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			ЗаписьРегистра.Организация = Выборка.Организация;
			ЗаписьРегистра.РегистрационныйНомерПФР = Выборка.РегистрационныйНомерПФР;
			
		КонецЦикла;
		
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УчетСтажаПФРЗаполнитьПервоначальныеДанныеУчета(ПараметрыОбновления = Неопределено)
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
	ОписаниеРегистраторов = Новый Массив;
	ОписаниеРегистраторов.Добавить(Метаданные.Документы.БольничныйЛист);
	ОписаниеРегистраторов.Добавить(Метаданные.Документы.КадровыйПеревод);
	ОписаниеРегистраторов.Добавить(Метаданные.Документы.Отпуск);
	ОписаниеРегистраторов.Добавить(Метаданные.Документы.ПриемНаРаботу);
	ОписаниеРегистраторов.Добавить(Метаданные.Документы.Увольнение);
	
	Для Каждого МетаданныеДокумента Из ОписаниеРегистраторов Цикл
		УчетСтажаПФРЗаполнитьПервоначальныеДанныеУчетаПоТипуДокумента(МетаданныеДокумента, ПараметрыОбновления);
	КонецЦикла;
	
	УчетСтажаПФРЗаполнитьПервоначальныеДанныеВторичногоРегистра();
КонецПроцедуры

Процедура УчетСтажаПФРЗаполнитьПервоначальныеДанныеУчетаПоТипуДокумента(МетаданныеДокумента, ПараметрыОбновления = Неопределено)
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка,
	|	NULL КАК ДокументИсправление,
	|	ЛОЖЬ КАК ЭтоИсправленныйДокумент
	|ИЗ
	|	#ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыПериодовСтажаПФР КАК ПараметрыПериодовСтажаПФР
	|		ПО (ПараметрыПериодовСтажаПФР.Регистратор = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ПараметрыПериодовСтажаПФР.Регистратор ЕСТЬ NULL ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДанныеДокумента", ИмяДокумента);
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
	
	МассивСсылок = Новый Массив;
	СоответствиеИсправленныхДокументов = Новый Соответствие;
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		МассивСсылок.Добавить(ВыборкаРегистраторов.Ссылка);		
	КонецЦикла;
	
	ДанныеДляРегистрацииВУчете = МенеджерДокумента.ДанныеДляРегистрацииВУчетаСтажаПФР(МассивСсылок);
	
	Для Каждого ДанныеДляРегистрацииПоДокументу Из ДанныеДляРегистрацииВУчете Цикл
		Движения = Новый Структура;
		НаборЗаписей = РегистрыСведений.ПараметрыПериодовСтажаПФР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДанныеДляРегистрацииПоДокументу.Ключ);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Движения.Вставить("ПараметрыПериодовСтажаПФР", НаборЗаписей);
		
		НачатьТранзакцию();
		
		УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(Движения, ДанныеДляРегистрацииПоДокументу.Значение);
		Если Движения.ПараметрыПериодовСтажаПФР.Количество() > 0 Тогда
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		КонецЕсли;
		Движения.ПараметрыПериодовСтажаПФР.Записать();
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура УчетСтажаПФРЗаполнитьПервоначальныеДанныеВторичногоРегистра()
	ПоследнееОбработанноеФизическоеЛицо = Неопределено;
	
	ПродолжатьОбновление = Истина;
	
	Пока ПродолжатьОбновление Цикл
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПоследнееФизическоеЛицоВыборки = УчетСтажаПФРСоздатьВТПорцияФизическихЛицДляОбновления(МенеджерВременныхТаблиц, ПоследнееОбработанноеФизическоеЛицо);
		
		ИзмеренияОтбора = Новый Массив;
		ИзмеренияОтбора.Добавить("ФизическоеЛицо");
		
		УчетСтажаПФР.ОбновитьДанныеВторичногоРегистра(МенеджерВременныхТаблиц, ИзмеренияОтбора, Истина);
		
		Если ПоследнееФизическоеЛицоВыборки = Неопределено Тогда
			ПродолжатьОбновление = Ложь;
		Иначе
			ПоследнееОбработанноеФизическоеЛицо = ПоследнееФизическоеЛицоВыборки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УчетСтажаПФРСоздатьВТПорцияФизическихЛицДляОбновления(МенеджерВременныхТаблиц, ПоследнееОбработанноеФизическоеЛицо = Неопределено)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстУсловияФизическоеЛицо = "ИСТИНА";
	Если ПоследнееОбработанноеФизическоеЛицо <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПоследнееОбработанноеФизическоеЛицо", ПоследнееОбработанноеФизическоеЛицо);
		
		ТекстУсловияФизическоеЛицо = "ПараметрыПериодовСтажаПФР.ФизическоеЛицо > &ПоследнееОбработанноеФизическоеЛицо";
	КонецЕсли;	
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПараметрыПериодовСтажаПФР.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Начало,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
	|ПОМЕСТИТЬ ВТКлючиИзменившихсяДанных
	|ИЗ
	|	РегистрСведений.ПараметрыПериодовСтажаПФР КАК ПараметрыПериодовСтажаПФР
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыСтажаПФР КАК ПериодыСтажаПФР
	|		ПО ПараметрыПериодовСтажаПФР.ФизическоеЛицо = ПериодыСтажаПФР.ФизическоеЛицо
	|ГДЕ
	|	ПериодыСтажаПФР.ФизическоеЛицо ЕСТЬ NULL 
	|	И &УсловиеФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТКлючиИзменившихсяДанных КАК ФизическиеЛица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФизическоеЛицо", ТекстУсловияФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ФизическоеЛицо;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

Процедура РасчетЗарплатыДляНебольшихОрганизацийЗаполнитьТабличнуюЧастьСотрудникиДокументовНачислениеЗарплаты()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплаты.Ссылка
		|ПОМЕСТИТЬ ВТНеобработанныеДокументы
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
		|		ПО (НачислениеЗарплатыСотрудники.Ссылка = НачислениеЗарплаты.Ссылка)
		|ГДЕ
		|	НачислениеЗарплатыСотрудники.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобработанныеДокументы.Ссылка
		|ИЗ
		|	ВТНеобработанныеДокументы КАК НеобработанныеДокументы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			РасчетЗарплатыДляНебольшихОрганизаций.СформироватьТабличнуюЧастьСотрудники(ДокументОбъект);
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура РасчетЗарплатыДляНебольшихОрганизацийЗаполнитьНачисленоУдержаноНачисленийЗарплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Ссылка,
		|	НачислениеЗарплатыНачисления.Ссылка.Начислено,
		|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Ссылка,
		|	НачислениеЗарплатыНачисления.Ссылка.Начислено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Ссылка,
		|	НачислениеЗарплатыУдержания.Ссылка.Удержано КАК Удержано,
		|	СУММА(НачислениеЗарплатыУдержания.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТУдержанияСНДФЛ
		|ИЗ
		|	Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыУдержания.Ссылка,
		|	НачислениеЗарплатыУдержания.Ссылка.Удержано
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.Ссылка,
		|	НачислениеЗарплатыНДФЛ.Ссылка.Удержано,
		|	СУММА(НачислениеЗарплатыНДФЛ.Налог)
		|ИЗ
		|	Документ.НачислениеЗарплаты.НДФЛ КАК НачислениеЗарплатыНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНДФЛ.Ссылка,
		|	НачислениеЗарплатыНДФЛ.Ссылка.Удержано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдержанияСНДФЛ.Ссылка,
		|	УдержанияСНДФЛ.Удержано,
		|	СУММА(УдержанияСНДФЛ.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТУдержанияСНДФЛ КАК УдержанияСНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияСНДФЛ.Ссылка,
		|	УдержанияСНДФЛ.Удержано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	Начисления.Начислено,
		|	Начисления.Результат
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Начислено <> Начисления.Результат
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Удержания.Ссылка,
		|	Удержания.Удержано,
		|	Удержания.Результат
		|ИЗ
		|	ВТУдержания КАК Удержания
		|ГДЕ
		|	Удержания.Удержано <> Удержания.Результат";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.ЗаполнитьНачисленоУдержано();
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПолеДатаПолученияДоходаВТаблицеВзносыДокументов()
	КоллекцияОписаний = Новый Массив;
	
	ОписаниеДокумента = Новый Структура("ИмяДокумента, ИмяПоляПериодРегистрации, ИмяТаблицыВзносов", "НачислениеЗарплаты", "Взносы");
	ОписаниеДокумента.Вставить("ИмяДокумента", "НачислениеЗарплаты");
	ОписаниеДокумента.Вставить("ИмяПоляПериодРегистрации", "МесяцНачисления");
	ОписаниеДокумента.Вставить("ИмяТаблицыВзносов", "Взносы");

	КоллекцияОписаний.Добавить(ОписаниеДокумента);
	
	Для Каждого ОписаниеДокумента Из КоллекцияОписаний Цикл
		УчетСтраховыхВзносовЗаполнитьПолеДатаПолученияДоходаПоОписаниюДокумента(ОписаниеДокумента);
	КонецЦикла;
КонецПроцедуры

Процедура УчетСтраховыхВзносовЗаполнитьПолеДатаПолученияДоходаПоОписаниюДокумента(ОписаниеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВзносов.Ссылка
	|ИЗ
	|	#ТаблицаВзносов КАК ТаблицаВзносов
	|ГДЕ
	|	ТаблицаВзносов.ДатаПолученияДохода = ДАТАВРЕМЯ(1, 1, 1)";
	
	ПутьКТаблицеВзносов = "Документ." + ОписаниеДокумента.ИмяДокумента + "." + ОписаниеДокумента.ИмяТаблицыВзносов;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаВзносов", ПутьКТаблицеВзносов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ТаблицаВзносы = ДокументОбъект[ОписаниеДокумента.ИмяТаблицыВзносов];
		ПериодРегистрации = ДокументОбъект[ОписаниеДокумента.ИмяПоляПериодРегистрации];
		
		ДатаПолученияДохода = УчетСтраховыхВзносовКлиентСервер.ДатаПолученияДохода(ПериодРегистрации);
		
		Для Каждого СтрокаВзносов Из ТаблицаВзносы Цикл 
			Если Не ЗначениеЗаполнено(СтрокаВзносов.ДатаПолученияДохода) Тогда
				СтрокаВзносов.ДатаПолученияДохода = ДатаПолученияДохода;
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВедомостьНаВыплатуЗарплатыЗаполнитьПериодыВзаиморасчетовЗарплатыВедомости(ПолноеИмя)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми периодами взаиморасчетов в зарплате
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Ссылка.Проведен КАК Проведен
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ПериодВзаиморасчетов = ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	Запрос.Выполнить();
	
	// В проведенных документах переносим движения в табличную часть
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Ссылка,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В
	|			(ВЫБРАТЬ
	|				ОбновляемыеВедомости.Ссылка
	|			ИЗ
	|				ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|			ГДЕ
	|				ОбновляемыеВедомости.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗарплатаДоОбновления = Ведомость.Зарплата.Выгрузить();
		
		Ведомость.Зарплата.Очистить();
		Пока Выборка.Следующий() Цикл
			
			СтрокаЗарплаты = Ведомость.Зарплата.Добавить();
			
			// Перенос специфических для типа данных сотрудника
			СтрокаСотрудника = ЗарплатаДоОбновления.Найти(Выборка.Сотрудник, "Сотрудник");
			Если СтрокаСотрудника <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСотрудника);
			КонецЕсли;	
			
			// Заполняем общие для всех ведомостей данные
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Выборка);
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	// В непроведенных документах заполняем период взаиморасчетов из шапки документа
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбновляемыеВедомости.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|ГДЕ
	|	НЕ ОбновляемыеВедомости.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
			СтрокаЗарплаты.ПериодВзаиморасчетов = Ведомость.ПериодРегистрации;
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ВедомостьНаВыплатуЗарплатыЗаполнитьФизическиеЛицаЗарплатыВедомости(ПолноеИмя)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми физическими лицами в зарплате
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И НЕ ВедомостьЗарплата.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВедомостьЗарплата.Ссылка.Номер ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеВедомостей КАК ВедомостьЗарплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокиСотрудника = Ведомость.Зарплата.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			
			Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
				СтрокаСотрудника.ФизическоеЛицо = Выборка.ФизическоеЛицо
			КонецЦикла;
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВедомостьНаВыплатуЗарплатыЗаполнитьСоставВедомости(ПолноеИмя, КлючевыеПоля)
	
	ПараметрыОтбораПоКлючу = Новый Структура(КлючевыеПоля);
	
	// Выбираем ведомости, имеющие заполненную ТЧ Зарплата и пустую ТЧ Строки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка
	|ИЗ
	|	#ВедомостьДокумент КАК Ведомость
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1 КАК Поле1
	|			ИЗ
	|				#ВедомостьЗарплата КАК ВедомостьЗарплата
	|			ГДЕ
	|				ВедомостьЗарплата.Ссылка = Ведомость.Ссылка)
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					#ВедомостьСостав КАК ВедомостьСостав
	|				ГДЕ
	|					ВедомостьСостав.Ссылка = Ведомость.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ПолноеИмя); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ПолноеИмя + ".Состав"); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Ключи = Ведомость.Зарплата.Выгрузить(, КлючевыеПоля);
		Ключи.Свернуть(КлючевыеПоля);
		
		Для Каждого Ключ Из Ключи Цикл
			
			ИдентификаторСтроки = Новый УникальныйИдентификатор;
			
			СтрокаСостава = Ведомость.Состав.Добавить();
			СтрокаСостава.ИдентификаторСтроки = ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(СтрокаСостава, Ключ);
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораПоКлючу, Ключ); 
			СтрокиЗарплата = Ведомость.Зарплата.НайтиСтроки(ПараметрыОтбораПоКлючу);
			
			Для Каждого СтрокаЗарплаты Из СтрокиЗарплата Цикл
				СтрокаЗарплаты.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЦикла
			
		КонецЦикла;
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла	
	
КонецПроцедуры	

Процедура ЗаполнитьИсториюРегистрацийВНалоговомОргане()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияРегистрацийВНалоговомОргане.Период
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстЗапросаПоРегистрам = "";
		ОписанияРегистров = ЗарплатаКадры.ОписанияРегистровСодержащихРегистрацииВНалоговомОргане();
		
		Для каждого ОписаниеРегистра Из ОписанияРегистров Цикл
			
			Если НЕ ПустаяСтрока(ТекстЗапросаПоРегистрам) Тогда
				
				ТекстЗапросаПоРегистрам = ТекстЗапросаПоРегистрам + 
					"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				ТекстПоместить = "";
				
			Иначе
				ТекстПоместить = "ПОМЕСТИТЬ ВТВсеЗарегистрированныеПериоды";
			КонецЕсли;
			
			ТекстЗапросаПоРегистрам = ТекстЗапросаПоРегистрам
				+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА ИсследуемыйРегистр.Период < ДАТАВРЕМЯ(1900, 1, 1)
				|		ТОГДА ДАТАВРЕМЯ(1900, 1, 1)
				|		ИНАЧЕ ИсследуемыйРегистр.Период
				|	КОНЕЦ, МЕСЯЦ) КАК Период,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ИсследуемыйРегистр.Подразделение.ОбособленноеПодразделение, ЛОЖЬ)
				|			ТОГДА ИсследуемыйРегистр.Подразделение
				|		ИНАЧЕ ИсследуемыйРегистр.Организация
				|	КОНЕЦ КАК СтруктурнаяЕдиница,
				|	ИсследуемыйРегистр.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
				|" + ТекстПоместить + "
				|ИЗ
				|	&ИсследуемыйРегистр КАК ИсследуемыйРегистр";
			
			ТекстЗапросаПоРегистрам = СтрЗаменить(ТекстЗапросаПоРегистрам, "&ИсследуемыйРегистр", ОписаниеРегистра.ПолноеИмяРегистра);
			ТекстЗапросаПоРегистрам = СтрЗаменить(ТекстЗапросаПоРегистрам, "ИсследуемыйРегистр.Период", ОписаниеРегистра.ПутьКПолюПериод);
			
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапросаПоРегистрам + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК СтруктурнаяЕдиница,
		|	Организации.РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТВсеВладельцыРегистрацийВНалоговомОргане
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ОбособленноеПодразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеЗарегистрированныеПериоды.Период,
		|	ВсеЗарегистрированныеПериоды.СтруктурнаяЕдиница,
		|	МАКСИМУМ(ВсеЗарегистрированныеПериоды.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТВсеИспользуемыеПериоды
		|ИЗ
		|	ВТВсеЗарегистрированныеПериоды КАК ВсеЗарегистрированныеПериоды
		|ГДЕ
		|	ВсеЗарегистрированныеПериоды.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеЗарегистрированныеПериоды.Период,
		|	ВсеЗарегистрированныеПериоды.СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеИспользуемыеПериоды.Период,
		|	ВсеИспользуемыеПериоды.СтруктурнаяЕдиница,
		|	ВсеИспользуемыеПериоды.РегистрацияВНалоговомОргане,
		|	МИНИМУМ(ВсеИспользуемыеПериодыИзменений.Период) КАК ПериодИзменения
		|ПОМЕСТИТЬ ВТИспользуемыеПериодыСПериодомИзменения
		|ИЗ
		|	ВТВсеИспользуемыеПериоды КАК ВсеИспользуемыеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеИспользуемыеПериоды КАК ВсеИспользуемыеПериодыИзменений
		|		ПО ВсеИспользуемыеПериоды.СтруктурнаяЕдиница = ВсеИспользуемыеПериодыИзменений.СтруктурнаяЕдиница
		|			И ВсеИспользуемыеПериоды.РегистрацияВНалоговомОргане <> ВсеИспользуемыеПериодыИзменений.РегистрацияВНалоговомОргане
		|			И ВсеИспользуемыеПериоды.Период < ВсеИспользуемыеПериодыИзменений.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеИспользуемыеПериоды.Период,
		|	ВсеИспользуемыеПериоды.СтруктурнаяЕдиница,
		|	ВсеИспользуемыеПериоды.РегистрацияВНалоговомОргане
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ИспользуемыеПериодыСПериодомИзменения.Период) КАК Период,
		|	ИспользуемыеПериодыСПериодомИзменения.СтруктурнаяЕдиница,
		|	ИспользуемыеПериодыСПериодомИзменения.РегистрацияВНалоговомОргане,
		|	ИспользуемыеПериодыСПериодомИзменения.ПериодИзменения
		|ПОМЕСТИТЬ ВТПериодыИзменений
		|ИЗ
		|	ВТИспользуемыеПериодыСПериодомИзменения КАК ИспользуемыеПериодыСПериодомИзменения
		|
		|СГРУППИРОВАТЬ ПО
		|	ИспользуемыеПериодыСПериодомИзменения.СтруктурнаяЕдиница,
		|	ИспользуемыеПериодыСПериодомИзменения.РегистрацияВНалоговомОргане,
		|	ИспользуемыеПериодыСПериодомИзменения.ПериодИзменения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеВладельцыРегистрацийВНалоговомОргане.СтруктурнаяЕдиница,
		|	ЕСТЬNULL(ПериодыИзменений.РегистрацияВНалоговомОргане, ВсеВладельцыРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
		|	ЕСТЬNULL(ПериодыИзменений.Период, &ПериодПоУмолчанию) КАК Период
		|ИЗ
		|	ВТВсеВладельцыРегистрацийВНалоговомОргане КАК ВсеВладельцыРегистрацийВНалоговомОргане
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИзменений КАК ПериодыИзменений
		|		ПО ВсеВладельцыРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = ПериодыИзменений.СтруктурнаяЕдиница
		|ГДЕ
		|	(ВсеВладельцыРегистрацийВНалоговомОргане.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
		|			ИЛИ ВсеВладельцыРегистрацийВНалоговомОргане.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
		|				И ВсеВладельцыРегистрацийВНалоговомОргане.СтруктурнаяЕдиница.ОбособленноеПодразделение)";
		
		Запрос.УстановитьПараметр("ПериодПоУмолчанию", НачалоМесяца(ТекущаяДатаСеанса()));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ТаблицаНабора = РезультатЗапроса.Выгрузить();
			
			Набор = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
			Набор.Загрузить(ТаблицаНабора);
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПодчиненныеСтруктурныеЕдиницы = Справочники.ПодразделенияОрганизаций.ПодчиненныеСтруктурныеЕдиницы(Выборка.СтруктурнаяЕдиница);
				РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ОбновитьПодчиненныеСтруктурныеЕдиницы(ПодчиненныеСтруктурныеЕдиницы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсториюРегистрацийВНалоговомОрганеНаДатуОтсчетаПериодическихСведенийСПериодомМесяц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОтсчетаПериодическихСведений", ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница,
		|	МИНИМУМ(ИсторияРегистрацийВНалоговомОргане.Период) КАК Период
		|ПОМЕСТИТЬ ВТМинимальныеПериодыСтруктурныхЕдиниц
		|ИЗ
		|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДатаОтсчетаПериодическихСведений КАК Период,
		|	МинимальныеПериодыСтруктурныхЕдиниц.СтруктурнаяЕдиница,
		|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
		|ИЗ
		|	ВТМинимальныеПериодыСтруктурныхЕдиниц КАК МинимальныеПериодыСтруктурныхЕдиниц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
		|		ПО МинимальныеПериодыСтруктурныхЕдиниц.СтруктурнаяЕдиница = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
		|			И МинимальныеПериодыСтруктурныхЕдиниц.Период = ИсторияРегистрацийВНалоговомОргане.Период
		|ГДЕ
		|	МинимальныеПериодыСтруктурныхЕдиниц.Период > &ДатаОтсчетаПериодическихСведений";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.Период);
			Набор.Отбор.СтруктурнаяЕдиница.Установить(Выборка.СтруктурнаяЕдиница);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

