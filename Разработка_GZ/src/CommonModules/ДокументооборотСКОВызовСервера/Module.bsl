#Область ПрограммныйИнтерфейс
	

Функция ИспользоватьВнешнийМодуль() Экспорт
	
	Возврат Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить();
	
КонецФункции

Функция ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами(ИндексСледующейОбработкиЭДО = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КонтекстИнициализирован", 	Ложь);
	Результат.Вставить("ИндексОбработкиЭДО", 		0);
	
	ИмяОбработки_ДокументооборотСКО = Неопределено;
	КонтекстЭДО						= Неопределено;
	ЭтоПерваяИтерация				= Истина;
	ИнициализироватьКонтекст 		= Истина;
	
	Пока ИнициализироватьКонтекст Цикл
		
		ИнициализироватьКонтекст = Ложь;
		
		Если ИндексСледующейОбработкиЭДО = Неопределено Тогда
			// определяем свободный индекс для формирования уникального имени при подключени новой внешней обработки,
			// поскольку подключение новой внешней обработки с тем же именем приводит к ошибкам в уже открытых формах
			// из подключенной раньше внешней обработки
			ИнформацияОбОбработкеЭДО = СоздатьВнешнююОбработкуЭДО();
			Результат.ИндексОбработкиЭДО = ?(ИнформацияОбОбработкеЭДО.ОбработкаЭДО = Неопределено,
				0, ИнформацияОбОбработкеЭДО.ИндексОбработкиЭДО + 1);
			
		Иначе
			Результат.ИндексОбработкиЭДО = ИндексСледующейОбработкиЭДО;
		КонецЕсли;
		ИндексОбработкиЭДОСтрокой = Формат(Результат.ИндексОбработкиЭДО, "ЧДЦ=; ЧГ=");
		
		ВнешниеОбъектыХранилище = Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль;
		ДвоичныеДанныеОбработки = ВнешниеОбъектыХранилище.Получить().Получить();
		Если ДвоичныеДанныеОбработки <> Неопределено Тогда
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
			Попытка
				МенеджерВнешнихОбработок = ВнешниеОбработки;
				ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
				ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
				
				ИмяОбработки_ДокументооборотСКО = МенеджерВнешнихОбработок.Подключить(
					Адрес,
					"Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой,
					Ложь,
					ОписаниеЗащиты);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					"Электронный документооборот с контролирующими органами.Подключение внешнего модуля",
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не удалось загрузить внешний модуль для документооборота с налоговыми органами:
									|%1
									|Будет использован модуль, встроенный в конфигурацию.'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ДвоичныеДанныеОбработки = Неопределено;
			КонецПопытки;
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;
		Если ДвоичныеДанныеОбработки = Неопределено И Результат.ИндексОбработкиЭДО > 0 Тогда
			Результат.ИндексОбработкиЭДО = Результат.ИндексОбработкиЭДО - 1;
			ИндексОбработкиЭДОСтрокой = Формат(Результат.ИндексОбработкиЭДО, "ЧДЦ=; ЧГ=");
		КонецЕсли;
		
		Попытка
			ОбъектОбработка = ВнешниеОбработки.Создать("Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой);
			ОбъектОбработка.ПутьКОбъекту = "ВнешняяОбработка.Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой;
			КонтекстЭДО = НЕ (ИмяОбработки_ДокументооборотСКО = Неопределено);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				"Электронный документооборот с контролирующими органами.Подключение внешнего модуля",
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ИмяОбработки_ДокументооборотСКО = Неопределено;
			КонтекстЭДО = Неопределено;
		КонецПопытки;
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Результат.КонтекстИнициализирован = КонтекстЭДО <> Неопределено;
	Возврат Результат;
	
КонецФункции

Функция ЕстьПравоНаДОсКО(ПравоНаВнешнюю) Экспорт 
	
	Если ПравоНаВнешнюю Тогда
		Возврат Истина;
		
	Иначе
		Возврат ПравоДоступа("Использование", Метаданные.Обработки.ДокументооборотСКонтролирующимиОрганами)
			ИЛИ ПривилегированныйРежим();
	КонецЕсли;
	
КонецФункции

Функция ЕстьДоступНаЧтение()
	
	Возврат ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль)
		И ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль)
		ИЛИ ПривилегированныйРежим();
	
КонецФункции
 
Функция ПодключатьВнешнююОбработкуЭДО() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Подключать", 			Ложь);
	Результат.Вставить("ИндексОбработкиЭДО", 	0);
	
	// если есть доступ
	Если ЕстьДоступНаЧтение() Тогда
		Если Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить() Тогда
			ИнформацияОбОбработкеЭДО = СоздатьВнешнююОбработкуЭДО();
			
			Если ИнформацияОбОбработкеЭДО.ОбработкаЭДО = Неопределено Тогда
				ИнформацияОбИнициализации = ИнициализироватьКонтекстДокументооборотаСНалоговымиОрганами(0);
				Результат.Подключать 			= ИнформацияОбИнициализации.КонтекстИнициализирован;
				Результат.ИндексОбработкиЭДО 	= ИнформацияОбИнициализации.ИндексОбработкиЭДО;
				
			Иначе
				Результат.Подключать 			= Истина;
				Результат.ИндексОбработкиЭДО 	= ИнформацияОбОбработкеЭДО.ИндексОбработкиЭДО;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьВнешнююОбработкуЭДО()
	
	Результат = Новый Структура;
	Результат.Вставить("ОбработкаЭДО", 			Неопределено);
	Результат.Вставить("ИндексОбработкиЭДО", 	0);
	
	ИндексСледующейОбработкиЭДО = 0;
	Пока Истина Цикл
		ИндексСледующейОбработкиЭДОСтрокой = Формат(ИндексСледующейОбработкиЭДО, "ЧДЦ=; ЧГ=");
		Попытка
			СледующаяОбработкаЭДО = ВнешниеОбработки.Создать("Обработка_ДокументооборотСКО"
				+ ИндексСледующейОбработкиЭДОСтрокой);
		Исключение
			СледующаяОбработкаЭДО = Неопределено;
		КонецПопытки;
		
		Если СледующаяОбработкаЭДО = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат.ОбработкаЭДО 			= СледующаяОбработкаЭДО;
		Результат.ИндексОбработкиЭДО 	= ИндексСледующейОбработкиЭДО;
		
		ИндексСледующейОбработкиЭДО = ИндексСледующейОбработкиЭДО + 1;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьПараметрыФормы(ПараметрыФормы, Параметры) Экспорт
	
	ВозможныеПредопределенныеПараметры = Новый Структура("ВыборГруппИЭлементов, ЗакрыватьПриВыборе, ЗакрыватьПриЗакрытииВладельца, КлючНазначенияИспользования, МножественныйВыбор, Отбор, ПараметрыФормы, ПараметрыФункциональныхОпций, РазрешитьВыборКорня, РежимВыбора, ТекущаяСтрока, ТолькоПросмотр, ФиксированныеНастройки");
	ЗаполнитьЗначенияСвойств(ВозможныеПредопределенныеПараметры, Параметры);
	Для Каждого ВозможныйПредопределенныйПараметр Из ВозможныеПредопределенныеПараметры Цикл
		Если ЗначениеЗаполнено(ВозможныйПредопределенныйПараметр.Значение) Тогда
			ПараметрыФормы.Добавить(ВозможныйПредопределенныйПараметр.Значение, ВозможныйПредопределенныйПараметр.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекущемуПользователюАОДоступен() Экспорт
	
	//Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиДокументооборота) Тогда
		Возврат Ложь;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК Справочник.УчетныеЗаписиДокументооборота) КАК УчетнаяЗапись
	|ПОМЕСТИТЬ УчетныеЗаписи
	|ИЗ
	|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК Справочник.УчетныеЗаписиДокументооборота).ПометкаУдаления
	|	И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &ТекущийПользователь
	|	И НЕ ВЫРАЗИТЬ(ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК Справочник.УчетныеЗаписиДокументооборота).ОтключитьАвтообмен
	|	И (ВЫРАЗИТЬ(ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК Справочник.УчетныеЗаписиДокументооборота)) <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиДокументооборота.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УчетнаяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(Организации.УчетнаяЗаписьОбмена КАК Справочник.УчетныеЗаписиДокументооборота) КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	ВЫРАЗИТЬ(Организации.УчетнаяЗаписьОбмена КАК Справочник.УчетныеЗаписиДокументооборота) В
	|			(ВЫБРАТЬ
	|				УчетныеЗаписи.УчетнаяЗапись
	|			ИЗ
	|				УчетныеЗаписи КАК УчетныеЗаписи)
	|	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
	|	И НЕ Организации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат НЕ ОбщегоНазначения.РазделениеВключено() И Пользователи.ЭтоПолноправныйПользователь();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ТекущемуПользователюЭДОДоступен() Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТекущемуПользователюАОДоступен();
	
КонецФункции

Функция ПолучитьВыбранныйCSPИзВременныхНастроек() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		,,
		
	);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Отчет, ОрганизацияОтчета, КонтролирующийОрган, ПараметрыПрорисовкиКнопокОтправки, ПараметрыПрорисовкиПанели) Экспорт
	
	// прорисовываем кнопки отправки
	ПараметрыПрорисовкиКнопокОтправки 	= ПараметрыПрорисовкиКнопокОтправки(ОрганизацияОтчета, КонтролирующийОрган);
	// прорисовываем панель отправки
	ПараметрыПрорисовкиПанели 			= ПараметрыПрорисовкиПанелиОтправки(Отчет, ОрганизацияОтчета, КонтролирующийОрган);
	
КонецПроцедуры

Функция ПараметрыПрорисовкиКнопокОтправки(ОрганизацияОтчета, КонтролирующийОрган) Экспорт
	
	ПараметрыПрорисовкиКнопокОтправки = Новый Структура;
	
	Попытка
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ГруппаОтправкаВКонтролирующийОрган", Истина);
		
		СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияОтчета,
			"ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		// прорисовываем кнопки отправки
		ПредназначенаДляДокументооборотаСКонтролирующимОрганом = Истина;
		УчетнаяЗаписьДокументооборота = СвойстваОрганизации.УчетнаяЗаписьОбмена;
		
		ДокументооборотНастроенВУнивесальномФормате = 
			СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате")
			И ЗначениеЗаполнено(УчетнаяЗаписьДокументооборота);
		
		Если ДокументооборотНастроенВУнивесальномФормате Тогда
			
			Если (КонтролирующийОрган = "ФНС" И УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗаписьДокументооборота) <> Истина)
				ИЛИ (КонтролирующийОрган = "ПФР" И УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗаписьДокументооборота) <> Истина)
				ИЛИ (КонтролирующийОрган = "ФСГС" И УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗаписьДокументооборота) <> Истина) Тогда
				ПредназначенаДляДокументооборотаСКонтролирующимОрганом = Ложь;
			КонецЕсли;
			
			ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);		
			Если НЕ ПредназначенаДляДокументооборотаСКонтролирующимОрганом Тогда
				ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
				
			Иначе
				Попытка
					ОбменИлиОнлайнПроверкаОтключена = УчетнаяЗаписьДокументооборота.ОбменНапрямую ИЛИ НЕ УчетнаяЗаписьДокументооборота.ИспользоватьСервисОнлайнПроверкиОтчетов;
				Исключение
					ОбменИлиОнлайнПроверкаОтключена = Истина;
				КонецПопытки;
				
				Если ОбменИлиОнлайнПроверкаОтключена Тогда
					ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
					
				Иначе
					Если УчетнаяЗаписьДокументооборота.СпецоператорСвязи <> Перечисления.СпецоператорыСвязи.Такском И (КонтекстЭДОСервер = Неопределено
						ИЛИ СтрНайти(";" + ВРег(СокрЛП(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗаписьДокументооборота.СпецоператорСвязи, "ОнлайнПроверкаКонтролирующиеОрганы"))) + ";", ";" + ВРег(КонтролирующийОрган) + ";") = 0) Тогда
						ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
					Иначе
						ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Если нет учетной записи, то оставляем меню ПроверитьВИнтернете, чтобы по нему показывать предложение подключиться
			ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);
		КонецЕсли;
		
	Исключение
		
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ГруппаОтправкаВКонтролирующийОрган", Истина);
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
		
	КонецПопытки;
	
	Возврат ПараметрыПрорисовкиКнопокОтправки;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФНС
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |ГДЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПредназначенаДляДокументооборотаСФНС;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка наличия возможности отправки в ФНС для учетной записи'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСПФР
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |ГДЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПредназначенаДляДокументооборотаСПФР;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка наличия возможности отправки в ПФР для учетной записи'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФСГС
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	                      |ГДЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ПредназначенаДляДокументооборотаСФСГС;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка наличия возможности отправки в Росстат для учетной записи'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена, ТипыСообщений = Неопределено, ПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка,
	                      |	ТранспортноеСообщение.Статус,
	                      |	ТранспортноеСообщение.Тип,
	                      |	ТранспортноеСообщение.ПометкаУдаления,
	                      |	ТранспортноеСообщение.Дата,
	                      |	ТранспортноеСообщение.ИдентификаторСообщения,
	                      |	ТранспортноеСообщение.ДатаТранспорта,
	                      |	ТранспортноеСообщение.Основание,
	                      |	ТранспортноеСообщение.ПротоколСОшибкой,
	                      |	ТранспортноеСообщение.Тема
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	Если НЕ ПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
		                      |	И ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления";
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если ТипыСообщений <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		                      |	И ТранспортноеСообщение.Тип В (&ТипыСообщений)";
		Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СообщениеЗашифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК Поле1
	                      |ИЗ
	                      |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |ГДЕ
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СообщениеРасшифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК Поле1
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьПоследнийЦиклОбмена(Объект) Экспорт
	
	Если Объект <> Неопределено Тогда
		Ссылка = Объект.Ссылка;
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ТранспортноеСообщение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		Ссылка = ПолучитьОписьВходящихДокументовПоТребованию(Ссылка);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЦиклОбмена.Ссылка КАК Ссылка,
	                      |	ЦиклОбмена.ДатаСоздания КАК ДатаСоздания
	                      |ПОМЕСТИТЬ ЦиклыОбмена
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклОбмена
	                      |ГДЕ
	                      |	ЦиклОбмена.Предмет = &Объект
	                      |	И ЦиклОбмена.ПометкаУдаления = ЛОЖЬ
	                      |	И ЦиклОбмена.Тип В(&Тип)
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	ЦиклОбмена.Ссылка,
	                      |	ЦиклОбмена.ДатаСоздания
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклОбмена
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЦиклыОбмена.ДополнительныеПредметы КАК ТЧЦиклОбмена
	                      |		ПО (ТЧЦиклОбмена.Ссылка = ЦиклОбмена.Ссылка)
	                      |ГДЕ
	                      |	ЦиклОбмена.Предмет = &Объект
	                      |	И ЦиклОбмена.ПометкаУдаления = ЛОЖЬ
	                      |	И ЦиклОбмена.Тип В(&Тип)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
	                      |	ЦиклыОбмена.ДатаСоздания КАК ДатаСоздания
	                      |ИЗ
	                      |	ЦиклыОбмена КАК ЦиклыОбмена
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |		ПО (ТранспортноеСообщение.ЦиклОбмена = ЦиклыОбмена.Ссылка)
	                      |ГДЕ
	                      |	(ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	                      |			ИЛИ ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Отправленное)
	                      |			ИЛИ ТранспортноеСообщение.Тип В (&ТипПервичныхСообщений)
	                      |				И ТранспортноеСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Исходящее))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаСоздания УБЫВ");

	Запрос.УстановитьПараметр("Объект", 				Ссылка);
	Запрос.УстановитьПараметр("Тип", 					ТипыЦикловОбмена());
	Запрос.УстановитьПараметр("ТипПервичныхСообщений", 	ТипПервичныхСообщений());
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ЦиклОбмена) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
			Возврат Выборка.ЦиклОбмена;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.ЦиклыОбмена.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСсылкуНаПротоколПоЦиклуОбмена(ЦиклОбмена)
	
	ТипыПротоколов = Новый Массив;
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И ТранспортноеСообщение.Тип В(&ТипыПротоколов)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТранспортноеСообщение.Тип.Порядок УБЫВ");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("ТипыПротоколов", ТипыПротоколов);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвойстваАктуальногоПротокола(СсылкаНаОтчет) Экспорт
	
	ЦиклОбмена = ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Протокол = ПолучитьСсылкуНаПротоколПоЦиклуОбмена(ЦиклОбмена);
	
	Возврат Новый Структура("Дата, Протокол", ЦиклОбмена.ДатаСоздания, Протокол);
	
КонецФункции

Процедура УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	|ГДЕ
	|	ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	МассивУчетныхЗаписей = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУчетныхЗаписей.Добавить(Выборка.УчетнаяЗапись);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(МассивУчетныхЗаписей) 
		И НЕ ОбщегоНазначения.РазделениеВключено() 
		И Пользователи.ЭтоПолноправныйПользователь(,,Ложь) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.УчетнаяЗаписьОбмена
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)
		|	И НЕ Организации.ПометкаУдаления";
		МассивУчетныхЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗаписьОбмена");
	КонецЕсли;
	
	МассивУчетныхЗаписейФиксированныйМассив = Новый ФиксированныйМассив(МассивУчетныхЗаписей);
	ПараметрыСеанса.ТекущиеУчетныеЗаписиНалогоплательщика = МассивУчетныхЗаписейФиксированныйМассив;
	Если УстановленныеПараметры <> Неопределено Тогда 
		УстановленныеПараметры.Добавить("ТекущиеУчетныеЗаписиНалогоплательщика");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ОрганизацияОтчета, КонтролирующийОрган, НастроенОбменВУниверсальномФормате, УчетнаяЗаписьПредназначенаДляДокументооборотаСКО) Экспорт
	
	НастроенОбменВУниверсальномФормате = Ложь;
	УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = Ложь;
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОрганизацияОтчета, "ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
	
	УчетнаяЗаписьДокументооборота = СвойстваОрганизации.УчетнаяЗаписьОбмена;
	Если СвойстваОрганизации.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате")
	И ЗначениеЗаполнено(УчетнаяЗаписьДокументооборота) Тогда
		НастроенОбменВУниверсальномФормате = Истина;
		Если КонтролирующийОрган = "ФНС" Тогда
			УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗаписьДокументооборота);
		ИначеЕсли КонтролирующийОрган = "ПФР" Тогда
			УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗаписьДокументооборота);
		ИначеЕсли КонтролирующийОрган = "ФСГС" Тогда
			УчетнаяЗаписьПредназначенаДляДокументооборотаСКО = УчетнаяЗаписьПредназначенаДляДокументооборотаСФСГС(УчетнаяЗаписьДокументооборота);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкиФСС(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ОнлайнПроверкаДоступна = Истина;
	ИспользоватьОбмен = КонтекстЭДО.ОрганизацияИспользуетОбменСФСС(ОрганизацияСсылка, , ОнлайнПроверкаДоступна);
	
	Результат.Вставить("ИспользоватьОбмен", ИспользоватьОбмен);
	Результат.Вставить("ОнлайнПроверкаДоступна", ОнлайнПроверкаДоступна);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиФСРАР(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДО.НастройкиФСРАР(ОрганизацияСсылка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиРПН(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДО.НастройкиРПН(ОрганизацияСсылка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиФТС(ОрганизацияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДО.НастройкиФТС(ОрганизацияСсылка, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.УчетнаяЗаписьОрганизации(Организация);
	
КонецФункции

#Область НоваяФормаРегламентированнойОтчетности

Функция ПараметрыПрорисовкиПанелиОтправки(Знач Ссылка, Знач Организация = Неопределено, Знач КонтролирующийОрган = "ФНС") Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение параметров прорисовки
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Истина);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, КонтролирующийОрган, ДополнительныеПараметры);
	
	Возврат ТекущееСостояние;
	
КонецФункции

Функция ПараметрыПрорисовкиСтатуса(Знач Ссылка, КонтролирующийОрган = "ФНС") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Ложь);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, КонтролирующийОрган, ДополнительныеПараметры);
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат ТекущееСостояние;
	
КонецФункции

// Обновление ИБ
Процедура ЗаполнитьРегистрЖурналОтправокВКонтролирующиеОрганы(Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документы.ЗапросНаИнформационноеОбслуживаниеСтрахователя.ПерезаполнитьЗначениеРеквизитаНаДату();
	
	ВыборкаДетальныеЗаписи = ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Предмет = ВыборкаДетальныеЗаписи.Объект;
		Отказ 	= Ложь;
		
		Попытка
			
			// Запись в регистр
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
			
		Исключение
		
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при заполнении регистра ЖурналОтправокВКонтролирующиеОрганы'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка,, Предмет,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция КоличествоОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаОбъектовНеЗаписанныхВРегистр	= ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы();
	КоличествоОбъектов					= ВыборкаОбъектовНеЗаписанныхВРегистр.Количество();
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат  КоличествоОбъектов;
	
КонецФункции

Функция ВыборкаОбъектовНеЗаписанныхВРегистрЖурналОтправокВКонтролирующиеОрганы() Экспорт
	
	МассивТипов = ТипыОбъектовЭДООтображаемыхВФорме1СОтчетность();
	
	// Дополняем таблицу типов объектами, не входящими в БРО
	ТаблицаОписанияОбъектовНеВходящихВБРО 	= РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	ОписанияОбъектовНеВходящихВБРО = ТаблицаОписанияОбъектовНеВходящихВБРО.НайтиСтроки(
		Новый Структура("ВидДокумента", Перечисления.СтраницыЖурналаОтчетность.Уведомления));
	
	Для каждого Описание Из ОписанияОбъектовНеВходящихВБРО Цикл
		МассивТипов.Добавить(Описание.ТипОбъекта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	// Составляем запрос
	КоличествоТипов = МассивТипов.Количество();
	ИндексЭлемента = 0;
	Для каждого ТипОбъекта Из МассивТипов Цикл
		
		ОбъектМетаданных 	= Метаданные.НайтиПоТипу(ТипОбъекта);
		
		Если ОбъектМетаданных <> Неопределено Тогда
		
			ПолноеИмяТипа 		= ОбъектМетаданных.ПолноеИмя();
			ИмяТипа 			= ОбъектМетаданных.Имя;
			
			// Формируем основную часть запроса
			Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
				|	%1.Ссылка КАК Объект
				|ИЗ
				|	%2 КАК %1
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
				|		ПО (ЖурналОтправокВКонтролирующиеОрганы.Ссылка = %1.Ссылка)
				|ГДЕ
				|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка Есть NULL";
				
			// Берем не все электронные представление, а только относящиеся к уведомлениям
			Если ТипОбъекта = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				Запрос.Текст = Запрос.Текст + "
					|И (%1.ВидОтчета В (&ВидыОтчетовРазделаУведомления))";
					
				ВидыОтчетовРазделаУведомления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВидыЭлектронныхПредставленийВРазделеУведомления();
				Запрос.УстановитьПараметр("ВидыОтчетовРазделаУведомления", ВидыОтчетовРазделаУведомления);
			КонецЕсли;
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяТипа);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ПолноеИмяТипа);
				
			// Добавляем объединение между запросами
			Если ИндексЭлемента <> КоличествоТипов - 1 Тогда
				  Запрос.Текст = Запрос.Текст + "
				  |
				  |ОБЪЕДИНИТЬ ВСЕ
				  |
				  |";
				  
			КонецЕсли;
			
		КонецЕсли;
		
		ИндексЭлемента = ИндексЭлемента + 1;
		
	КонецЦикла;
	
	// Выполнение полученного запроса
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ТипыОбъектовЭДООтображаемыхВФорме1СОтчетность() Экспорт
	
	// Здесь нет МакетыПенсионныхДел и ЗаявлениеОНазначенииПенсии, потому что они отображаются в другом регистре сведений  
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоясненияКДекларацииПоНДС"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения"));
	МассивТипов.Добавить(Тип("ДокументСсылка.УведомлениеОПолучателеДокументов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявленияПоЭлДокументооборотуСПФР"));

	Возврат МассивТипов;
	
КонецФункции

Функция ЦветФонаПанелиОтправкиПоСтатусу(СостояниеСдачиОтчетности) Экспорт
	
	ЦветФона = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки; 
	Если СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат 
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ТребуетсяПодтверждениеПриема Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаТекущейОтправки;// желтый
	ИначеЕсли СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтправленоИзКонтролирующегоОргана
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПриемПодтвержден Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаНеначавшейсяОтправки;// серый
	ИначеЕсли СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаОшибкиОтправки;// красный
	ИначеЕсли СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота Тогда
		ЦветФона = ЦветаСтиля.ЦветФонаУдачнойОтправки;// зеленый
	КонецЕсли;
	
	Возврат ЦветФона;
	
КонецФункции

Функция ЕстьДоступККонтекстуЭДО() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено;
	
КонецФункции

Функция ПолучитьОписьВходящихДокументовПоТребованию(ТребованиеСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.Ссылка 
						  |ИЗ
		|	Справочник.ОписиВходящихДокументовИзНалоговыхОрганов.ВходящиеДокументы КАК ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы
						  |ГДЕ
		|	ОписиВходящихДокументовИзНалоговыхОргановВходящиеДокументы.СсылкаНаОбъект = &ТребованиеСсылка";

	Запрос.УстановитьПараметр("ТребованиеСсылка", ТребованиеСсылка);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция ТипыЦикловОбмена() Экспорт
	
	ТипМассив = Новый Массив;
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаПФР);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Представление);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ИОН);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Документ);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Заявление);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ПисьменноеОбращениеВФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ИОС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ПисьмоНО);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Рассылка);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаГрупповая);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ИндивидуальноеИнформированиеФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаФСГС);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаШаблоновФСГС);
	
	Возврат ТипМассив;
	
КонецФункции

Функция ТипПервичныхСообщений() Экспорт
	
	ТипМассивПервичное = Новый Массив;
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ДокументНО);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаШаблоновФСГС);
	
	Возврат ТипМассивПервичное;
	
КонецФункции

#КонецОбласти

// Функцию нельзя переносить в повторное использование, так как режим могут поменять,
// а функция будет возвращать прежнее значение.
Функция ИспользуетсяРежимТестирования() Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_РежимТестирования) Тогда
		Возврат Константы.ДокументооборотСКонтролирующимиОрганами_РежимТестирования.Получить();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ТипыСодержимогоТранспортногоКонтейнераПервичныхСообщений() Экспорт

	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РассылкаФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ШаблонФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеРассылкиШаблоновФСГС);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
	
	Возврат ТипыВложений;

КонецФункции

Функция ЭтоРегламентированныйОтчетРеестрНДС(СсылкаНаОтчет) Экспорт
	
	Если ТипЗнч(СсылкаНаОтчет)  = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ИсточникОтчета = СсылкаНаОтчет.ИсточникОтчета;
		Возврат Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрНДСПриложение") > 0
			ИЛИ Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрНДСДекларации") > 0;
		
	Иначе
		
		Возврат Ложь;
		
	Конецесли;
	
КонецФункции

Функция ЭтоРегламентированныйОтчетРеестрАкцизы(СсылкаНаОтчет) Экспорт
	
	Если ТипЗнч(СсылкаНаОтчет)  = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ИсточникОтчета = СсылкаНаОтчет.ИсточникОтчета;
		Возврат Найти(ИсточникОтчета, "РегламентированныйОтчетРеестрАкцизыПриложение") > 0;
		
	Иначе
		
		Возврат Ложь;
		
	Конецесли;
	
КонецФункции

Функция ОрганизацияПодключенаКИнспекции(СсылкаНаОбъект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ОрганизацияПодключенаКИнспекции(СсылкаНаОбъект);
	
КонецФункции
	
Функция ПутьКОбъекту() Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		// Нет прав
		Возврат Неопределено;
	Иначе
		Возврат КонтекстЭДОСервер.ПутьКОбъекту;
	КонецЕсли;

КонецФункции

Процедура ВФонеОбработатьИзменившиесяКодыФСГС() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда 
		Если КонтекстЭДОСервер.ЭлектронныйДокументооборотИспользуется() = Ложь Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Задание = "ЭлектронныйДокументооборотСКонтролирующимиОрганами.ФоноваяЗаменаВОрганизацияхИПодразделенияхКодОрганаФСГС";
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить(Истина);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Замена кодов ТОГС";
	
	ДлительныеОперации.ВыполнитьВФоне(Задание, ПараметрыЗапуска, ПараметрыВыполнения);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаявленияВПФР

Функция ВидЗаявленияВПФР(ЗаявлениеПФР) Экспорт
	
	Возврат ЗаявлениеПФР.Вид;
	
КонецФункции

Функция ЗаявленияПоЭДООтправляютсяВПФР() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЗаявленияПоЭДООтправляютсяВПФР(); 
	
КонецФункции

Функция СертификатыОтправляютсяВПФР() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.СертификатыОтправляютсяВПФР();
	
КонецФункции

Процедура ИзменитьОформлениеГруппыСоглашениеСПФР(
		Организация,
		Элемент, 
		Знач СдаватьВПФР = Неопределено, 
		Знач УчитыватьПризнакВторичного = Ложь, 
		Знач ПоддерживаетсяВторичноеЗаявление = Ложь) Экспорт
		
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Элемент.Видимость = Ложь;
	Иначе
		// Чтобы можно было подменить модулем
		КонтекстЭДОСервер.ИзменитьОформлениеГруппыСоглашениеСПФР(
			Организация,
			Элемент, 
			СдаватьВПФР, 
			УчитыватьПризнакВторичного, 
			ПоддерживаетсяВторичноеЗаявление);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ДопКомментарийЭтапаВЗаявленииПФР(Знач Ссылка, Знач Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение параметров прорисовки
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолучатьДаты", Ложь);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", Ложь);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, "ПФР", ДополнительныеПараметры);
	
	Если ТекущееСостояние = Неопределено ИЛИ ТекущееСостояние.ТекущийЭтапОтправки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СостояниеСдачиОтчетности = ТекущееСостояние.ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
	ДокументооборотНеНачат   = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	Если НЕ СостояниеСдачиОтчетности = ДокументооборотНеНачат Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Неопределено;
	Иначе
		Возврат КонтекстЭДОСервер.ПредложениеПодключить1СОтчетностьИзПанели();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
КонецФункции

Функция ПолучитьРеквизит(ОбъектДляЧтения, ИмяРеквизита) Экспорт
	
	МетаданныеОбъекта = ОбъектДляЧтения.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда 
		Возврат ОбъектДляЧтения[ИмяРеквизита];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЭтоПакетСДопДокументами(ОписьИсхДок) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЭтоПакетСДопДокументами(ОписьИсхДок);
	
КонецФункции

#КонецОбласти