
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= Истина;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	БазаТоваров  = Неопределено;
	ФайлОтчета   = Неопределено;
	ФлагВыгрузки = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);
	Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
	Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);

	Если БазаТоваров  = Неопределено
	 Или ФайлОтчета   = Неопределено
	 Или ФлагВыгрузки = Неопределено  Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.'"));
		Результат = Ложь;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Процедура начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Неопределено;
	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;
	Возврат Результат;

КонецФункции

// Процедура начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	
	// Тестирование устройства.
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(Параметры, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером.
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	// Выгрузка товаров в ККМ Offline.
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка	= ВходныеПараметры[1];
		РасширеннаяВыгрузка	= ВходныеПараметры[2];
		НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка);
		
	// Выгрузка данных
	ИначеЕсли Команда = "ВыгрузитьДанные" Тогда
		
		Товары				= ВходныеПараметры.ДанныеДляВыгрузки.ПрайсЛист;
		ЧастичнаяВыгрузка	= НЕ ВходныеПараметры.ДанныеДляВыгрузки.ПрайсЛист.ПолнаяВыгрузка;
		РасширеннаяВыгрузка	= Истина;
		НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка);
		
	// Загрузка данных
	ИначеЕсли Команда = "ЗагрузитьДанные" Тогда
		
		НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	
	// Определяет результат загрузки отчета.
	ИначеЕсли Команда = "УстановитьФлагДанныеЗагружены" Тогда
		НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Очистить базу ККМ Offline.
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
		
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронныеПроцедурыИФункции

// Функция осуществляет очистку товаров на ККМ, подключаемой в режиме Offline.
// 
Функция ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры) 

	Результат = Истина;

	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Файл.ДобавитьСтроку("$$$DELETEALLWARES");
	Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
	Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
	
	Попытка
		
		Файл.Записать(Параметры.БазаТоваров, "windows-1251");
		
		Если Не ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, "windows-1251");
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
	КонецПопытки;

	Возврат Результат;

КонецФункции // ОчиститьТоварыНаККМ()

// Функция осуществляет проверку путей по которым хранятся файлы обмена.
//
Функция ТестУстройства(Параметры, ВыходныеПараметры) 
	
	Результат = Истина;
	ТекстОшибки = "";
	ТекстОшибкиОбщий = "";
	ВремПараметр = "";
	
	Параметры.Свойство("БазаТоваров", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = НСтр("ru='Файл базы товаров не указан.'");
	КонецЕсли;
	
	Параметры.Свойство("ФайлОтчета", ВремПараметр);
	Если ПустаяСтрока(ВремПараметр) Тогда
		Результат = Ложь;
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + ?(ПустаяСтрока(ТекстОшибкиОбщий), "", Символы.ПС); 
		ТекстОшибкиОбщий = ТекстОшибкиОбщий + НСтр("ru='Файл отчета не указан.'") 
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибкиОбщий) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибкиОбщий);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АсинхронныеПроцедурыИФункции

#Область ВыгрузкаТоваров

// Процедура осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьВыгрузкуТоваров(ОповещениеПриЗавершении, Параметры, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры, РасширеннаяВыгрузка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", Параметры.БазаТоваров);
	ДополнительныеПараметры.Вставить("ИмяФайлаФлага", Параметры.ФлагВыгрузки);
	ДополнительныеПараметры.Вставить("Товары", Товары);
	ДополнительныеПараметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
	ДополнительныеПараметры.Вставить("ЧастичнаяВыгрузка", ЧастичнаяВыгрузка);
	
	Налоги = ОфлайнОборудованиеАтолККМВызовСервера.ПолучитьНомераНалоговНаККМПоУмолчанию();
	
	Если Параметры.Свойство("НомерНалога0") И ЗначениеЗаполнено(Параметры.НомерНалога0) Тогда
		Налоги.НомерНалога0 = Параметры.НомерНалога0;
	КонецЕсли;
	
	Если Параметры.Свойство("НомерНалога10") И ЗначениеЗаполнено(Параметры.НомерНалога10) Тогда
		Налоги.НомерНалога10 = Параметры.НомерНалога10;
	КонецЕсли;
	
	Если Параметры.Свойство("НомерНалога18") И ЗначениеЗаполнено(Параметры.НомерНалога18) Тогда
		Налоги.НомерНалога18 = Параметры.НомерНалога18;
	КонецЕсли;
	
	Если Параметры.Свойство("НомерНалогаБезНДС") И ЗначениеЗаполнено(Параметры.НомерНалогаБезНДС) Тогда
		Налоги.НомерНалогаБезНДС = Параметры.НомерНалогаБезНДС;
	КонецЕсли;
	
	Если Параметры.Свойство("НомерНалога20") И ЗначениеЗаполнено(Параметры.НомерНалога20) Тогда
		Налоги.НомерНалога20 = Параметры.НомерНалога20;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Налоги", Налоги);
	
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ДополнительныеПараметры.Вставить("ФорматОбмена", Параметры.ФорматОбмена);
	Иначе
		ДополнительныеПараметры.Вставить("ФорматОбмена", 0);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЧастичнаяВыгрузка Тогда
		НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, Параметры.БазаТоваров); // Проверяем обработанность файла.
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Продолжаем выгрузку.
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПроверкуОбработанностиФайла(ОписаниеОповещения, ИмяФайла) 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаПриПроверкеОбработанностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещенияПриЗавершении = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат Тогда
		
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ОписаниеЗавершенияПолученияСодержания = Новый ОписаниеОповещения("ПроверкаОбработанностиФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеЗавершенияПолученияСодержания, "ANSI");
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, Истина); // Файла не существует.
	КонецЕсли;
	
КонецПроцедуры

// Проверяет обработанность файла.
// 
// Параметры:
// 	Результат - Структура - структура выполнения операции. 
// 	ДополнительныеПараметры - Структура - структура с полями:
// 	*ОписаниеОповещенияПриЗавершении - ОписаниеОповещения - структура с полями:
// 	**ДополнительныеПараметры - Структура - структура с полями:
// 	***ВыходныеПараметры - Массив - массив выходных параметров.
Процедура ПроверкаОбработанностиФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении;
	
	Если Результат.Успешно Тогда
		
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Строка = Файл.ПолучитьСтроку(2);
		
		Если СтрДлина(Строка) = 1 И Найти(Строка,"#") > 0 Тогда
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
			ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'"));
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Нельзя если символ во второй строке "#".		
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина); // Можно если символ во второй строке не "#" (если загрузка произошла, там стоит "@").
		КонецЕсли;
		
	Иначе
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(999);
		ОписаниеОповещения.ДополнительныеПараметры.ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь); // Файл не прочитан, следовательно гарантировать обработанность файла нельзя.
	КонецЕсли;
	
КонецПроцедуры

// Завершает выгрузку товаров.
// 
// Параметры:
// 	Результат - Структура - структура выполнения операции. 
// 	ДополнительныеПараметры - Структура - структура с полями:
// 	*ВыходныеПараметры - Массив - массив выходных параметров.
// 	*РасширеннаяВыгрузка - Булево - признак расширенной выгрузки.
// 	*Товары - ТаблицаЗначений - товары к выгрузке.
// 	*ИмяФайла - Строка- имя файла выгрузки.
// 	*ИмяФайлаФлага - Строка - имф файла флага.
// 	*ФорматОбмена - Число - формат обмена.
// 	*ЧастичнаяВыгрузка - Булево - признак частичной выгрузки.
Процедура ВыгрузкаТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		Разделитель = ПолучитьРазделитель();
		ЧастичнаяВыгрузка = ДополнительныеПараметры.ЧастичнаяВыгрузка;
		РасширеннаяВыгрузка = ДополнительныеПараметры.РасширеннаяВыгрузка;
		Товары = ДополнительныеПараметры.Товары;
		ИмяФайла = ДополнительныеПараметры.ИмяФайла;
		ИмяФайлаФлага = ДополнительныеПараметры.ИмяФайлаФлага;
		ФорматОбмена = ДополнительныеПараметры.ФорматОбмена;
		
		Файл = Новый ТекстовыйДокумент();
		
		Результат = СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, ФорматОбмена, Разделитель, Товары, ВыходныеПараметры);
		
		Если (ФорматОбмена < 4 ИЛИ ФорматОбмена = 7 ИЛИ ФорматОбмена = 8) И НЕ ЧастичнаяВыгрузка Тогда
			СформироватьСтавкиНДС(Файл, ДополнительныеПараметры.Налоги);
		КонецЕсли;
		
		Если Результат Тогда
			
			Попытка
				
				Файл.Записать(ИмяФайла, "windows-1251");
				
				Если Не ПустаяСтрока(ИмяФайлаФлага) Тогда
					Файл.Очистить();
					Файл.Записать(ИмяФайлаФлага, "windows-1251");
				КонецЕсли;
				
			Исключение
				
				ВыходныеПараметры.Добавить(999);
				ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
				ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
				Результат = Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
		
	Иначе
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРасширенногоОтчета

Процедура НачатьЗагрузкуРасширенногоОтчета(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Если Параметры.Свойство("ФорматОбмена") Тогда
		ДополнительныеПараметры.Вставить("ФорматОбмена", Параметры.ФорматОбмена);
	Иначе
		ДополнительныеПараметры.Вставить("ФорматОбмена", 0);
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

// Проверяет существования файла при загрузке отчета.
// 
// Параметры:
// 	Результат - Структура - структура выполнения операции. 
// 	ДополнительныеПараметры - Структура - структура с полями:
// 	*ВыходныеПараметры - Массив - массив выходных параметров.
// 	*РасширеннаяВыгрузка - Булево - признак расширенной выгрузки.
// 	*Товары - ТаблицаЗначений - товары к выгрузке.
// 	*ИмяФайла - Строка- имя файла выгрузки.
// 	*ИмяФайлаФлага - Строка - имф файла флага.
// 	*ФорматОбмена - Число - формат обмена.
// 	*ЧастичнаяВыгрузка - Булево - признак частичной выгрузки.
Процедура ПроверкаСуществованияФайлаПриЗагрузкеРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаРасширенногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, "ANSI");
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует.'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает выгрузку товаров.
// 
// Параметры:
// 	Результат - Структура - структура выполнения операции. 
// 	ДополнительныеПараметры - Структура - структура с полями:
// 	*ОповещениеПриЗавершении - ОписаниеОповещения - оповещение завершения.
// 	*ВыходныеПараметры - Массив - массив выходных параметров.
// 	*РасширеннаяВыгрузка - Булево - признак расширенной выгрузки.
// 	*Товары - ТаблицаЗначений - товары к выгрузке.
// 	*ИмяФайла - Строка- имя файла выгрузки.
// 	*ИмяФайлаФлага - Строка - имф файла флага.
// 	*ФорматОбмена - Число - формат обмена.
// 	*ЧастичнаяВыгрузка - Булево - признак частичной выгрузки.
Процедура ЗагрузкаРасширенногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ФорматОбмена = ДополнительныеПараметры.ФорматОбмена;
	ДанныеИзККМ = Неопределено;
	
	Если НЕ Результат.Успешно Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(Результат.ТекстОшибки);
		Результат = Ложь;
	Иначе
		
		Текст = Результат.СодержаниеФайлов[0].ТекстСодержания;
		
		ТекстИсправленный = СтрЗаменить(Текст, МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1(), МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1());
		
		Файл = Новый ТекстовыйДокумент();
		Файл.УстановитьТекст(ТекстИсправленный);
		
		Результат = РазобратьРасширенныйОтчет(Файл, ФорматОбмена, ВыходныеПараметры);
		
		Если Результат Тогда
			ВыходныеПараметры.Добавить(ДанныеИзККМ);
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ПометкаОтчета

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
//
Процедура НачатьОтчетЗагружен(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры);
	
	ИмяФайла = Параметры.ФайлОтчета;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	Файл = Новый Файл(ИмяФайла);
	
	ОписаниеОповещенияПриЗавершении = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПриЗавершении);
	
КонецПроцедуры

// Завершает выгрузку товаров.
// 
// Параметры:
// 	Результат - Структура - структура выполнения операции. 
// 	ДополнительныеПараметры - Структура - структура с полями:
// 	*ОповещениеПриЗавершении - ОписаниеОповещения - оповещение завершения.
// 	*ВыходныеПараметры - Массив - массив выходных параметров.
// 	*РасширеннаяВыгрузка - Булево - признак расширенной выгрузки.
// 	*Товары - ТаблицаЗначений - товары к выгрузке.
// 	*ИмяФайла - Строка- имя файла выгрузки.
// 	*ИмяФайлаФлага - Строка - имф файла флага.
// 	*ФорматОбмена - Число - формат обмена.
// 	*ЧастичнаяВыгрузка - Булево - признак частичной выгрузки.
Процедура ПроверкаСуществованияФайлаПриПометкеОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	
	Если Результат Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ВыходныеПараметры", ВыходныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтчетЗагруженЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияКлиент.ПолучитьСодержаниеТекстовыхФайлов(ИмяФайла, ОписаниеОповещения, "ANSI");
		
	Иначе
		
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл %Адрес% не существует.'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", ИмяФайла));
		
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает выгрузку товаров.
// 
// Параметры:
// 	Результат - Структура - структура выполнения операции. 
// 	ДополнительныеПараметры - Структура - структура с полями:
// 	*ОповещениеПриЗавершении - ОписаниеОповещения - оповещение завершения.
// 	*ВыходныеПараметры - Массив - массив выходных параметров.
// 	*РасширеннаяВыгрузка - Булево - признак расширенной выгрузки.
// 	*Товары - ТаблицаЗначений - товары к выгрузке.
// 	*ИмяФайла - Строка- имя файла выгрузки.
// 	*ИмяФайлаФлага - Строка - имф файла флага.
// 	*ФорматОбмена - Число - формат обмена.
// 	*ЧастичнаяВыгрузка - Булево - признак частичной выгрузки.
Процедура ОтчетЗагруженЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ВыходныеПараметры = ДополнительныеПараметры.ВыходныеПараметры;
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ТекстОшибки = "";

	Если НЕ Результат.Успешно Тогда
		ТекстОшибки = Результат.ТекстОшибки;
		Результат = Ложь;
	Иначе
		
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(Результат.СодержаниеФайлов[0].ТекстСодержания);
		
		Результат = Истина;
		
		ТД.ЗаменитьСтроку(1, "@");
		
		Попытка
			ТД.Записать(ИмяФайла, "windows-1251");
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Адрес%", ИмяФайла);
			Результат = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТоваров

// Процедура осуществляет очистку таблицы товаров в ККМ, подключенную в режиме Offline.
//
Процедура НачатьОчисткуТоваровНаККМ(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры, ОчисткаНастроек = Ложь)
	
	Результат = ОчиститьТоварыНаККМ(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ТестУстройства

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, Параметры, ВыходныеПараметры)
	
	Результат = ТестУстройства(Параметры, ВыходныеПараметры);
	РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазобратьРасширенныйОтчет(ТекстовыйДокумент, ФорматОбмена, ВыходныеПараметры)
	
	Возврат ОфлайнОборудованиеАтолККМВызовСервера.ОбработатьЗагружаемыеДанныеИзККМ(ТекстовыйДокумент, ФорматОбмена, ВыходныеПараметры);
	
КонецФункции

Функция СформироватьФайлТоваров(Файл, РасширеннаяВыгрузка, ЧастичнаяВыгрузка, ФорматОбмена, Разделитель, Товары, ВыходныеПараметры)
	
	Результат = Истина;
	
	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Если РасширеннаяВыгрузка Тогда
		
		Если ЧастичнаяВыгрузка Тогда
			Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
		Иначе
			
			Файл.ДобавитьСтроку("$$$DELETEALLWARES");
			Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
			Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
			Файл.ДобавитьСтроку("$$$ADDQUANTITY");
			
		КонецЕсли;
		
		Для Каждого ТекГруппа Из Товары.ГруппыТоваров Цикл
			
			ДанныеДляЗаполнения = Новый Структура;
			ДанныеДляЗаполнения.Вставить("Код", Формат(ТекГруппа.Код, "ЧН=0; ЧГ=0"));
			ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(ТекГруппа.Наименование));
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(ТекГруппа.КодГруппы, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, Истина);
			
		КонецЦикла;
			
	Иначе
		
		Если ЧастичнаяВыгрузка Тогда
			Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
		Иначе
			Файл.ДобавитьСтроку("$$$DELETEALLWARES");
			Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
			Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
			Файл.ДобавитьСтроку("$$$ADDQUANTITY");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Товар Из Товары.Товары Цикл
		
		Если Результат Тогда
			
			Параметры = Новый Структура;
			
			Параметры.Вставить("Разделитель", Разделитель);
			Параметры.Вставить("Уровень", "Номенклатура");
			Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
			Параметры.Вставить("ФорматОбмена", ФорматОбмена);
			Параметры.Вставить("Источник", Товар);
			
			Если ЗначениеЗаполнено(Товар.КодЕдиницыИзмерения) Тогда
				
				Для Каждого ЕИ Из Товары.ЕдиницыИзмерения Цикл
					
					Если ЕИ.Код = Товар.КодЕдиницыИзмерения Тогда
						Параметры.Вставить("БазоваяЕИ", ЕИ.Наименование);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				Параметры.Вставить("БазоваяЕИ", "");
			КонецЕсли;
			
			ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает разделитель полей таблицы содержащейся в файле.
//
Функция ПолучитьРазделитель()
	
	Возврат ";";
	
КонецФункции

// Подготавливает строку для выгрузки.
//
Функция ПодготовитьСтроку(Знач ИсходнаяСтрока, МаксимальнаяДлина=100)
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), ПолучитьРазделитель(), " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, МаксимальнаяДлина);
		 
	Возврат ИсходнаяСтрока;
	
КонецФункции

Процедура ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, Знач ДанныеДляЗаполнения = Неопределено)

	Разделитель			= Параметры.Разделитель;
	Уровень				= Параметры.Уровень;
	РасширеннаяВыгрузка	= Параметры.РасширеннаяВыгрузка;
	ФорматОбмена		= Параметры.ФорматОбмена;
	Источник			= Параметры.Источник;
	БазоваяЕИ			= Параметры.БазоваяЕИ;
	
	Если Уровень = "Номенклатура" Тогда
		
		ДанныеДляЗаполнения = Новый Структура;
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("Наименование", ПодготовитьСтроку(Источник.Наименование));
		
		// Иерархия
		Если ФорматОбмена <> 0 Тогда
			// КодРодительскойГруппы
			ДанныеДляЗаполнения.Вставить("КодРодительскойГруппы", Формат(Источник.КодГруппы, "ЧН=0; ЧГ=0"));
		КонецЕсли;
		// Артикул
		ДанныеДляЗаполнения.Вставить("Артикул", ПодготовитьСтроку(Источник.Артикул, 20));
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", "1");
		
		// КодНалога
		ДанныеДляЗаполнения.Вставить("КодНалога", ПолучитьКодНалогаПоСтавкеНДС(Источник.СтавкаНДС));
		
		
		// Признак предмета расчета
		Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 7 ИЛИ ФорматОбмена = 8 Тогда
			ДанныеДляЗаполнения.Вставить("ПризнакПредметаРасчета", ПолучитьКодПризнакаПредметаРасчета(Источник.ПризнакПредметаРасчета));
		Иначе
			ДанныеДляЗаполнения.Вставить("ПризнакПредметаРасчета", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ЭтоАлкоголь) И Источник.ЭтоАлкоголь Тогда
			
			АлкогольныеРеквизиты = Источник.АлкогольныеРеквизиты;
			
			//Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Истина);
			// Маркированная продукция
			ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 1);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", АлкогольныеРеквизиты.Маркируемый);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции);
			// Емкость тары
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", Формат(АлкогольныеРеквизиты.ЕмкостьТары, "ЧДЦ=3; ЧГ=0"));
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", Формат(АлкогольныеРеквизиты.Крепость, "ЧГ=0"));
			// ИННПроизводителя
			ДанныеДляЗаполнения.Вставить("ИННПроизводителя", АлкогольныеРеквизиты.ИННПроизводителя);
			// КПППроизводителя
			ДанныеДляЗаполнения.Вставить("КПППроизводителя", АлкогольныеРеквизиты.КПППроизводителя);
		Иначе
			
			// Маркированная продукция
			Если ЗначениеЗаполнено(Источник.ЭтоМаркированнаяПродукция) И Источник.ЭтоМаркированнаяПродукция Тогда
				Если ФорматОбмена = 8 Тогда
					Если Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 2);
					ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 3);
					ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Табак") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 4);
					ИначеЕсли Источник.ТипМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары") ИЛИ Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Обувь") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 5);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Фотоаппараты") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 8);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Духи") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 9);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.Шины") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 10);
					ИначеЕсли Источник.ВидМаркированнойПродукции = ПредопределенноеЗначение("Перечисление.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность") Тогда
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 11);
					Иначе
						ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 7);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 2);
				КонецЕсли;
			Иначе
				ДанныеДляЗаполнения.Вставить("КодТипаНоменклатуры", 0);
			КонецЕсли;
			// Алкоголь
			ДанныеДляЗаполнения.Вставить("Алкоголь", Ложь);
			// Маркируемый
			ДанныеДляЗаполнения.Вставить("Маркируемый", Ложь);
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("КодВидаАлкогольнойПродукции", "");
			// КодВидаАлкогольнойПродукции
			ДанныеДляЗаполнения.Вставить("ЕмкостьТары", "");
			// Крепость
			ДанныеДляЗаполнения.Вставить("Крепость", "");
			// ИННПроизводителя
			ДанныеДляЗаполнения.Вставить("ИННПроизводителя", "");
			// КПППроизводителя
			ДанныеДляЗаполнения.Вставить("КПППроизводителя", "");
		КонецЕсли;
		
		// ВесовойТовар
		ДанныеДляЗаполнения.Вставить("ВесовойТовар", Источник.ЭтоВесовойТовар);
		// РазрешитьДробноеКоличество
		ДанныеДляЗаполнения.Вставить("РазрешитьДробноеКоличество", ?(Источник.ЭтоВесовойТовар, "1", "0"));
		// КодВидаНоменклатурнойКлассификации
		ДанныеДляЗаполнения.Вставить("КодВидаНоменклатурнойКлассификации", ПодготовитьСтроку(Источник.КодВидаНоменклатурнойКлассификации, 20));
		
		Если Источник.ИмеетУпаковки Тогда
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
					
					Штрихкод = РазложитьШтрихкод(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Штрихкод = "";
					Запятая = "";
					
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						
						Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
						Запятая = ",";
						
					КонецЦикла;
					
				Иначе
					
					Штрихкод = "";
				КонецЕсли;
				
				// Штрихкод
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
				
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Упаковка");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекУпаковка);
				Параметры.Вставить("БазоваяЕИ", БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		ИначеЕсли Источник.ИмеетХарактеристики Тогда
			
			Для Каждого ТекХарактеристика Из Источник.Характеристики Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Характеристика");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекХарактеристика);
				Параметры.Вставить("БазоваяЕИ", БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
				
				Штрихкод = РазложитьШтрихкод(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Штрихкод = "";
				Запятая = "";
				
				Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
					
					Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
					Запятая = ",";
					
				КонецЦикла;
				
			Иначе
				
				Штрихкод = "";
			КонецЕсли;
			
			// Штрихкод
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
		
		КонецЕсли;
		
	ИначеЕсли Уровень = "Характеристика" Тогда
		
		Если Источник.ИмеетУпаковки Тогда
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			
			Если ЗначениеЗаполнено(Источник.Код) Тогда
				
				// Код
				ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
				
				Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
					
					Штрихкод = РазложитьШтрихкод(Источник.Штрихкоды);
					
				ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
					
					Штрихкод = "";
					Запятая = "";
					
					Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
						
						Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
						Запятая = ",";
						
					КонецЦикла;
					
				Иначе
					
					Штрихкод = "";
				КонецЕсли;
				
				// Штрихкод
				ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
				// Цена
				ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
				// Остаток
				ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
				
				ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
				
			КонецЕсли;
			
			Для Каждого ТекУпаковка Из Источник.Упаковки Цикл
				
				Параметры = Новый Структура;
				
				Параметры.Вставить("Разделитель", Разделитель);
				Параметры.Вставить("Уровень", "Упаковка");
				Параметры.Вставить("РасширеннаяВыгрузка", РасширеннаяВыгрузка);
				Параметры.Вставить("ФорматОбмена", ФорматОбмена);
				Параметры.Вставить("Источник", ТекУпаковка);
				Параметры.Вставить("БазоваяЕИ", БазоваяЕИ);
				
				ДополнитьФайл(Результат, Файл, ВыходныеПараметры, Параметры, ДанныеДляЗаполнения);
				
			КонецЦикла;
			
		Иначе
			
			// Наименование
			ДанныеДляЗаполнения.Вставить("НаименованиеХарактеристики", ПодготовитьСтроку(Источник.Наименование));
			// Код
			ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
			// Цена
			ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
			// Остаток
			ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
			
			Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
				
				Штрихкод = РазложитьШтрихкод(Источник.Штрихкоды);
				
			ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
				
				Штрихкод = "";
				Запятая = "";
				
				Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
					
					Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
					Запятая = ",";
					
				КонецЦикла;
				
			Иначе
				
				Штрихкод = "";
			КонецЕсли;
			
			// Штрихкод
			ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
			
			ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
			
		КонецЕсли;
		
	ИначеЕсли Уровень = "Упаковка" Тогда
		
		МассивСтрокУпаковок = Новый Массив;
		
		// Коэффициент
		ДанныеДляЗаполнения.Вставить("Коэффициент", Формат(1, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
		
		// Наименование
		ДанныеДляЗаполнения.Вставить("НаименованиеУпаковки", ПодготовитьСтроку(Источник.Наименование));
		
		// Код
		ДанныеДляЗаполнения.Вставить("Код", Формат(Источник.Код, "ЧН=0; ЧГ=0"));
		// Цена
		ДанныеДляЗаполнения.Вставить("Цена", Формат(Источник.Цена, "ЧЦ=15; ЧДЦ=2; ЧГ=0"));
		// Остаток
		ДанныеДляЗаполнения.Вставить("Остаток", Формат(Источник.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0"));
		
		Если ТипЗнч(Источник.Штрихкоды) = Тип("Строка") Тогда
			
			Штрихкод = РазложитьШтрихкод(Источник.Штрихкоды);
			
		ИначеЕсли ТипЗнч(Источник.Штрихкоды) = Тип("Массив") Тогда
			
			Штрихкод = "";
			Запятая = "";
			
			Для Каждого ДанныеШтрихкода Из Источник.Штрихкоды Цикл
				
				Штрихкод = Штрихкод + Запятая + ДанныеШтрихкода.Штрихкод;
				Запятая = ",";
				
			КонецЦикла;
			
		Иначе
			
			Штрихкод = "";
		КонецЕсли;
			
		// Штрихкод
		ДанныеДляЗаполнения.Вставить("Штрихкод", Формат(Штрихкод, "ЧН=0; ЧГ=0"));
		
		ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодНалогаПоСтавкеНДС(СтавкаНДС)
	
	КодНалога = Неопределено;
	
	Если СтавкаНДС = "0" Тогда
		
		КодНалога = 4;
		
	ИначеЕсли СтавкаНДС = "10" Тогда
		
		КодНалога = 2;
		
	ИначеЕсли СтавкаНДС = "18" Тогда
		
		КодНалога = 5;
		
	ИначеЕсли СтавкаНДС = "none" Тогда
		
		КодНалога = 3;
		
	ИначеЕсли СтавкаНДС = "20" Тогда
		
		КодНалога = 1;
		
	КонецЕсли;
	
	Возврат КодНалога;
	
КонецФункции

Процедура СформироватьСтавкиНДС(ТекстовыйФайл, НалогиНаККМ)
	
	Результат = Истина;
	
	Налоги = СпискиНалоговИКомбинацийНалогов(НалогиНаККМ);
	
	БлокСтавок = "$$$ADDTAXRATES";
	БлокГрупп = "$$$ADDTAXGROUPS";
	БлокСтавокГрупп = "$$$ADDTAXGROUPRATES";
	
	Для Каждого ТекНалог Из Налоги Цикл
		
		Если ТекНалог.Ставки.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='Выгрузка настроек невозможна. Список ставок налога пуст.'");
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		Для Каждого ТекСтавка Из ТекНалог.Ставки Цикл
			
			Текст = ?(СтрДлина(ТекСтавка.Текст)>100, Лев(ТекСтавка.Текст, 100), ТекСтавка.Текст);
			
			БлокСтавок = БлокСтавок
			+ Символы.ПС
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код
			+ Текст + ";"								// Наименование
			+ Текст + ";"								// Текст
			+ "0;"										// Тип налога
			+ Формат(ТекСтавка.Значение, "ЧН=0; ЧГ=0") 
			+ ";"
			+ ТекСтавка.НомерНалогаККМ; 				// Номер налога в ККМ
			
			БлокГрупп = БлокГрупп
			+ Символы.ПС
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";" // Код
			+ Текст + ";"								// Наименование
			+ Текст;									// Текст
			
			БлокСтавокГрупп = БлокСтавокГрупп
			+ Символы.ПС
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код налоговой группы
			+ Формат(ТекСтавка.Код, "ЧДЦ=; ЧГ=0") + ";"	// Код налоговой ставки
			+ "1";										// Смена базы
			
		КонецЦикла;
		
	КонецЦикла;
	
	БлокНалогов = "$$$DELETEALLTAXGROUPRATES
		|$$$DELETEALLTAXGROUPS
		|$$$DELETEALLTAXRATES" + Символы.ПС
		+ БлокСтавок + Символы.ПС
		+ БлокГрупп + Символы.ПС
		+ БлокСтавокГрупп;
	
	
	Если Результат Тогда
		
		Если ТекстовыйФайл.КоличествоСтрок()>0 Тогда
			
			// Определяем и удаляем блок видов оплаты.
			ТекстФайла = ТекстовыйФайл.ПолучитьТекст();
			
			Если Найти(ТекстФайла, "$$$DELETEALLTAXGROUPRATES")<>0 Тогда
				
				Для ИндексСтроки = 3 По ТекстовыйФайл.КоличествоСтрок() Цикл
					
					ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
					
					Если ТекущаяСтрока = "$$$DELETEALLTAXGROUPRATES" Тогда
						
						Пока Истина Цикл
							
							Если ИндексСтроки = ТекстовыйФайл.КоличествоСтрок() + 1 Тогда
								Прервать;
							КонецЕсли;
							
							ТекущаяСтрока = ТекстовыйФайл.ПолучитьСтроку(ИндексСтроки);
							
							Если ТекущаяСтрока <> "$$$REPLACEQUANTITY" И ТекущаяСтрока <> "$$$DELETEALLWARES" Тогда
								ТекстовыйФайл.УдалитьСтроку(ИндексСтроки);
							Иначе
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			// Выгружаем в новый файл
			ТекстовыйФайл.ДобавитьСтроку("##@@&&");
			ТекстовыйФайл.ДобавитьСтроку("#");
		КонецЕсли;
		
		ТекстовыйФайл.ВставитьСтроку(3, БлокНалогов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СпискиНалоговИКомбинацийНалогов(НалогиНаККМ)
	
	Налоги = Новый Массив;
	
	НалогНДС = Новый Структура;
	
	НалогНДС.Вставить("Код");
	НалогНДС.Вставить("Наименование");
	НалогНДС.Вставить("Ставки", Новый Массив);
	
	НалогНДС.Код = "1";
	НалогНДС.Наименование = "НДС";
	
	// 20%
	СтавкаНалога20 = Новый Структура;
	СтавкаНалога20.Вставить("Код", 1);
	СтавкаНалога20.Вставить("Текст", НСтр("ru = 'НДС 20%'"));
	СтавкаНалога20.Вставить("Значение", 20);
	СтавкаНалога20.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога20);
	НалогНДС.Ставки.Добавить(СтавкаНалога20);
	
	// 10%
	СтавкаНалога10 = Новый Структура;
	СтавкаНалога10.Вставить("Код", 2);
	СтавкаНалога10.Вставить("Текст", НСтр("ru = 'НДС 10%'"));
	СтавкаНалога10.Вставить("Значение", 10);
	СтавкаНалога10.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога10);
	НалогНДС.Ставки.Добавить(СтавкаНалога10);
	
	// Без НДС
	СтавкаНалогаБезНДС = Новый Структура;
	СтавкаНалогаБезНДС.Вставить("Код", 3);
	СтавкаНалогаБезНДС.Вставить("Текст", НСтр("ru = 'Без НДС'"));
	СтавкаНалогаБезНДС.Вставить("Значение", 0);
	СтавкаНалогаБезНДС.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалогаБезНДС);
	НалогНДС.Ставки.Добавить(СтавкаНалогаБезНДС);
	
	// 0%
	СтавкаНалога0 = Новый Структура;
	СтавкаНалога0.Вставить("Код", 4);
	СтавкаНалога0.Вставить("Текст", НСтр("ru = 'НДС 0%'"));
	СтавкаНалога0.Вставить("Значение", 0);
	СтавкаНалога0.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога0);
	НалогНДС.Ставки.Добавить(СтавкаНалога0);
	
	// 18%
	СтавкаНалога18 = Новый Структура;
	СтавкаНалога18.Вставить("Код", 5);
	СтавкаНалога18.Вставить("Текст", НСтр("ru = 'НДС 18%'"));
	СтавкаНалога18.Вставить("Значение", 18);
	СтавкаНалога18.Вставить("НомерНалогаККМ", НалогиНаККМ.НомерНалога18);
	НалогНДС.Ставки.Добавить(СтавкаНалога18);
	
	Налоги.Добавить(НалогНДС);
	
	Возврат Налоги;
	
КонецФункции

Процедура ДобавитьСтрокуВФайл(Файл, Разделитель, ДанныеДляЗаполнения, ФорматОбмена, ЭтоГруппа = Ложь)
	
	// ФорматОбмена:
	// 0 - АТОЛ: РМК
	// 1 - Frontol 5
	// 2 - Frontol Win32 v.4.x
	// 3 - Frontol WinCE v.2.x
	// 4 - Frontol xPOS 1.6.x
	// 5 - Frontol xPOS 1.5.x
	// 6 - Frontol xPOS 1.7.x
	// 7 - Frontol xPOS 2.2.x
	// 8 - Frontol 6
	
	Наименование = ДанныеДляЗаполнения.Наименование;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеХарактеристики") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеХарактеристики;
	КонецЕсли;
	
	Если ДанныеДляЗаполнения.Свойство("НаименованиеУпаковки") Тогда
		Наименование = Наименование + " " + ДанныеДляЗаполнения.НаименованиеУпаковки;
	КонецЕсли;
	
	МаксимальнаяДлина = 128;
	Если СтрДлина(Наименование) > МаксимальнаяДлина Тогда
		
		Наименование = Сред(Наименование, 1, МаксимальнаяДлина);
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		Строка =
			ДанныеДляЗаполнения.Код + Разделитель												// Код (1)
			+ Разделитель																		// Штрихкод (2)
			+ Наименование + Разделитель														// Наименование (3)
			+ Наименование + Разделитель														// Текст для чека (4)
			+ Разделитель																		// Цена (5)
			+ Разделитель																		// Остаток (6)
			+ Разделитель																		// Код группы условий скидки (7)
			+ Разделитель																		// Флаги через запятую (8)
			+ Разделитель																		// Минимальная цена (9)
			+ Разделитель																		// Срок годности (10)
			+ Разделитель																		// Код схемы разрезов (11)
			+ Разделитель																		// Вариант использования разрезов (12).
			+ Разделитель																		// Признак предмета расчёта (13).
			+ Разделитель																		// Коэффициент (14)
			+ Разделитель																		// Код базового товара (15)
			+ ?(ФорматОбмена=0, "", ДанныеДляЗаполнения.КодРодительскойГруппы) + Разделитель	// Код родительской группы (16).
			+ "0" + Разделитель																	// Товар или группа: для товара «1» Товар или группа: для группы «0» (17).
			+ Разделитель																		// Номер уровня иерархического списка (18).
			+ Разделитель																		// Код значения первого разреза схемы с кодом «1» (19).
			+ Разделитель																		// Серия номенклатуры (20)
			+ Разделитель																		// Сертификат (21)
			+ Разделитель																		// Код ККМ (22)
			+ Разделитель																		// Код налоговой группы (23)
			+ Разделитель																		// Код весов с ПЭ (24)
			+ Разделитель																		// Код товара в весах ПЭ (25)
			+ Разделитель																		// Артикул (26)
			+ Разделитель																		// Тип скидки/надбавки: (27)
			+ Разделитель																		// Значение товарной скидки/надбавки (28)
			+ Разделитель																		// Максимальная скидка, % (29)
			+ Разделитель																		// Код принтера чеков (30)
			+ Разделитель																		// Файл *.bmp с картинкой (31)
			+ Разделитель																		// Описание (32)
			+ "";																					// Кратность количества (33)
			
	Иначе
		
		Флаги = 
				?(ДанныеДляЗаполнения.ВесовойТовар, "1", "0") + ","							// Дробное количество (весовой) (8.1)
				+ "1,"																		// Продажа (8.2)
				+ "1,"																		// Возврат (8.3)
				+ "0,"																		// Отрицательные остатки / Без ввода количества(8.4)
				+ ?(ФорматОбмена<>3, "0", ?(ДанныеДляЗаполнения.Цена=0, "1", "0")) + ","	// Без ввода количества / Редактирование цены (8.5)
				+ ?(ФорматОбмена=3, "1", "0") + ","											// Списание остатков / Ввод количества вручную(8.6)
				+ ?(ФорматОбмена=3, "", ?(ДанныеДляЗаполнения.Цена=0, "1", "0")) + ","		// Редактирование цены / Печать в чеке (8.7)
				+ ?(ФорматОбмена=3, "", "1");												// Ввод количества вручную / Скидки (8.8)
				
		Если ФорматОбмена > 0 Тогда
			
			Флаги = Флаги + ","
					+ ?(ФорматОбмена=3, "0", "") + ","	// Печатать в документе / Списание остатков (8.9)
					+ ?(ФорматОбмена=3, "0", "");		// Наливаемый товар / Отрицательные остатки(8.10)
					
		КонецЕсли;
		
		Строка =
			ДанныеДляЗаполнения.Код + Разделитель																// Код (1)
			+ ДанныеДляЗаполнения.Штрихкод + Разделитель														// Штрихкод (2)
			+ Наименование + Разделитель																		// Наименование (3)
			+ Наименование + Разделитель																		// Текст для чека (4)
			+ ДанныеДляЗаполнения.Цена + Разделитель															// Цена (5)
			+ ДанныеДляЗаполнения.Остаток + Разделитель															// Остаток (6)
			+ "" + Разделитель																					// Код группы условий скидки (7)
			+ Флаги + Разделитель																				// Флаги через запятую (8)
			+ "" + Разделитель																					// Минимальная цена (9)
			+ "" + Разделитель																					// Срок годности (10)
			+ "" + Разделитель																					// Код схемы разрезов (11)
			+ "" + Разделитель																					// Вариант использования разрезов (12).
			+ ДанныеДляЗаполнения.ПризнакПредметаРасчета + Разделитель											// Признак предмета расчёта (13).
			+ ДанныеДляЗаполнения.Коэффициент + Разделитель														// Коэффициент (14)
			+ "" + Разделитель																					// Код базового товара (15)
			+ ?(ФорматОбмена=0, "", ДанныеДляЗаполнения.КодРодительскойГруппы) + Разделитель					// Код родительской группы (16).
			+ "1" + Разделитель																					// Товар или группа: для товара «1» Товар или группа: для группы «0» (17).
			+ "" + Разделитель																					// Номер уровня иерархического списка (18).
			+ "" + Разделитель																					// Код значения первого разреза схемы с кодом «1» (19).
			+ "" + Разделитель																					// Серия номенклатуры (20)
			+ "" + Разделитель																					// Сертификат (21)
			+ "" + Разделитель																					// Код ККМ (22)
			+ ДанныеДляЗаполнения.КодНалога + Разделитель														// Код налоговой группы (23)
			+ "" + Разделитель																					// Код весов с ПЭ (24)
			+ ?(ДанныеДляЗаполнения.ВесовойТовар И (ФорматОбмена<3 Или ФорматОбмена=8), ДанныеДляЗаполнения.Код, "") + Разделитель	// Код товара в весах ПЭ (25)
			+ ДанныеДляЗаполнения.Артикул + Разделитель															// Артикул (26)
			+ "" + Разделитель																					// Тип скидки/надбавки: (27)
			+ "" + Разделитель																					// Значение товарной скидки/надбавки (28)
			+ "" + Разделитель																					// Максимальная скидка, % (29)
			+ "" + Разделитель																					// Код принтера чеков (30)
			+ "" + Разделитель																					// Файл *.bmp с картинкой (31)
			+ "" + Разделитель																					// Описание (32)
			+ "";																								// Кратность количества (33)
			
			Если ФорматОбмена = 1 ИЛИ ФорматОбмена = 2 ИЛИ ФорматОбмена = 7 Тогда
				
				Строка = Строка + Разделитель
						+ Разделитель																				// Код ценника (34)
						+ Разделитель																				// Тип вознаграждения (35)
						+ Разделитель																				// Значение вознаграждения (36)
						+ Разделитель																				// Номер секции ККМ (37)
						+ Разделитель																				// ГТД (38)
						+ Разделитель																				// Код группы печати чека (39)
						+ Разделитель																				// Код группы печати копии (40)
						+ Разделитель																				// Код группы печати счета (41)
						+ Разделитель																				// Код группы печати марки (42)
						+ Разделитель																				// Код предприятия (43)
						+ Разделитель																				// Не используется (44)
						+ Разделитель																				// Номер сообщения в весах с ПЭ (45)
						+ Разделитель																				// Не используется (46)
						+ Разделитель																				// Значение флага «Визуальный выбор модификаторов при регистрации» (47)
						+ Разделитель																				// Левая граница допустимого суммарного удельного веса модификаторов (48)
						+ Разделитель																				// Правая граница допустимого суммарного удельного веса модификаторов (49)
						+ Разделитель																				// Текстовое сообщение для весов с ПЭ (50)
						+ Разделитель																				// Тип товара (51)
						+ Разделитель																				// Код тарифицируемой услуги (52)
						+ ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + Разделитель								// Код вида алкогольной или спиртосодержащей продукции (53)
						+ ДанныеДляЗаполнения.ЕмкостьТары + Разделитель												// Емкость тары в литрах (54)
						+ ДанныеДляЗаполнения.КодТипаНоменклатуры + Разделитель										// Тип номенклатуры(55)
						+ ?(ДанныеДляЗаполнения.Алкоголь И ДанныеДляЗаполнения.Маркируемый, "0", "1") + Разделитель	// Маркировка алкогольной продукции (56)
						+ ДанныеДляЗаполнения.Крепость + Разделитель												// Крепость алкогольной продукции (57)
						+ "2";																						// Признак способа расчёта (58)
						
			ИначеЕсли ФорматОбмена = 8 Тогда
				
				Строка = Строка + Разделитель
						+ Разделитель																				// Код ценника (34)
						+ Разделитель																				// Тип вознаграждения (35)
						+ Разделитель																				// Значение вознаграждения (36)
						+ Разделитель																				// Номер секции ККМ (37)
						+ Разделитель																				// ГТД (38)
						+ Разделитель																				// Код группы печати чека (39)
						+ Разделитель																				// Код группы печати копии (40)
						+ Разделитель																				// Код группы печати счета (41)
						+ Разделитель																				// Код группы печати марки (42)
						+ Разделитель																				// Код предприятия (43)
						+ Разделитель																				// Не используется (44)
						+ Разделитель																				// Номер сообщения в весах с ПЭ (45)
						+ Разделитель																				// Не используется (46)
						+ Разделитель																				// Значение флага «Визуальный выбор модификаторов при регистрации» (47)
						+ Разделитель																				// Левая граница допустимого суммарного удельного веса модификаторов (48)
						+ Разделитель																				// Правая граница допустимого суммарного удельного веса модификаторов (49)
						+ Разделитель																				// Текстовое сообщение для весов с ПЭ (50)
						+ Разделитель																				// Тип товара (51)
						+ Разделитель																				// Код тарифицируемой услуги (52)
						+ ДанныеДляЗаполнения.КодВидаАлкогольнойПродукции + Разделитель								// Код вида алкогольной или спиртосодержащей продукции (53)
						+ ДанныеДляЗаполнения.ЕмкостьТары + Разделитель												// Емкость тары в литрах (54)
						+ ДанныеДляЗаполнения.КодТипаНоменклатуры + Разделитель										// Тип номенклатуры(55)
						+ ?(ДанныеДляЗаполнения.Алкоголь И ДанныеДляЗаполнения.Маркируемый, "0", "1") + Разделитель	// Маркировка алкогольной продукции (56)
						+ ДанныеДляЗаполнения.Крепость + Разделитель												// Крепость алкогольной продукции (57)
						+ "2"																						// Признак способа расчёта (58)
						+ Разделитель																				// Код реквизитов агента(59)
						+ Разделитель																				// Сумма акциза (60)
						+ Разделитель																				// Код страны происхождения товара(61)
						+ Разделитель																				// Номер таможенной декларации(62)
						+ Разделитель																				// (63)
						+ ДанныеДляЗаполнения.КодВидаНоменклатурнойКлассификации;									// Код вида номенклатурной классификации(64)
			КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ (ФорматОбмена = 0 И ЭтоГруппа) Тогда
		Файл.ДобавитьСтроку(Строка);
	КонецЕсли;
	
КонецПроцедуры

Функция РазложитьШтрихкод(Штрихкод)
	
	Штрихкод = СокрЛП(Штрихкод);
	
	СписокРазделителей = Новый Массив;
	
	СписокРазделителей.Добавить(",");
	СписокРазделителей.Добавить(";");
	СписокРазделителей.Добавить(".");
	СписокРазделителей.Добавить(" ");
	
	Для Каждого Разделитель Из СписокРазделителей Цикл
		
		Если Найти(Штрихкод, Разделитель) > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Штрихкод = СтрЗаменить(СокрЛП(Штрихкод), Разделитель, ",");
	
	Возврат Штрихкод;
	
КонецФункции

Функция ПолучитьКодПризнакаПредметаРасчета(ПризнакПредметаРасчета)
	
	//	Признак предмета расчёта:
	//0 – не используется;
	//1 – товар, кроме подакцизного;
	//2 – подакцизный товар;
	//3 – работа;
	//4 – услуга;
	//5 – товар, состоящий из нескольких признаков;
	//6 – иной товар;
	//7 – аванс, предоплата.
	
	Если ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар") Тогда
		ПризнакПредметаРасчетаКод = 1;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар") Тогда
		ПризнакПредметаРасчетаКод = 2;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа") Тогда
		ПризнакПредметаРасчетаКод = 3;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга") Тогда
		ПризнакПредметаРасчетаКод = 4;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 5;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета") Тогда
		ПризнакПредметаРасчетаКод = 6;
		
	ИначеЕсли ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата") Тогда
		ПризнакПредметаРасчетаКод = 7;
		
	Иначе
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД")
		//ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение")
		
		ПризнакПредметаРасчетаКод = 1;
	КонецЕсли;
	
	Возврат ПризнакПредметаРасчетаКод;
	
КонецФункции

#КонецОбласти
