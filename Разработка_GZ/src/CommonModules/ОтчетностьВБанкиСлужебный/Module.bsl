////////////////////////////////////////////////////////////////////////////////
// ОтчетностьВБанкиСлужебный: Механизм отправки отчетов в банки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет дополнительные параметры в ЗаписьJSON
//
// Параметры:
//  ЗаписьJSON - ЗаписьJSON - запись, в которую добавляются дополнительные параметры;
//  ПараметрыКлиента - Структура - содержит параметры клиентского приложения.
//        * ТипПлатформы - Строка - тип клиентского приложения;
//        * ВерсияОС - Строка - версия ОС на клиенте;
//
Процедура ДобавитьДополнительныеПараметры(ЗаписьJSON, ПараметрыКлиента) Экспорт
	
	ЗаписьJSON.ЗаписатьИмяСвойства("params");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Язык = ТекущийЯзык();
	
	Если Язык = Неопределено Тогда
		Язык = КодОсновногоЯзыкаИнтерфейсаКонфигурации();
	ИначеЕсли ТипЗнч(Язык) = Тип("ОбъектМетаданных") Тогда
		Язык = Язык.КодЯзыка;
	КонецЕсли;
	
	ДобавитьПараметр(ЗаписьJSON,"сonfigLanguage", Язык);
	
	Язык = Метаданные.ОсновнойЯзык.КодЯзыка;
	ДобавитьПараметр(ЗаписьJSON,"сonfigMainLanguage", Язык);
	
	КодЛокализации = КодЛокализацииИнформационнойБазы();
	ДобавитьПараметр(ЗаписьJSON, "сurLocalizationCode", КодЛокализации);

	ЛокализацияПлатформы = ТекущийЯзыкСистемы();
	ДобавитьПараметр(ЗаписьJSON, "systemLanguage", ЛокализацияПлатформы);
	
	СмещениеВремени = Формат((ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()), "ЧГ=0");
	ДобавитьПараметр(ЗаписьJSON, "clientTimeOffsetGMT", СмещениеВремени);

	ДобавитьПараметр(ЗаписьJSON, "clientPlatformType", Строка(ПараметрыКлиента.ТипПлатформы));
	ДобавитьПараметр(ЗаписьJSON, "clientOSVersion", ПараметрыКлиента.ВерсияОС);
	
	СистИнфо = Новый СистемнаяИнформация;
	ДобавитьПараметр(ЗаписьJSON, "serverPlatformType", Строка(СистИнфо.ТипПлатформы));
	ДобавитьПараметр(ЗаписьJSON, "serverOSVersion", СистИнфо.ВерсияОС);
	
	ДобавитьПараметр(ЗаписьJSON, "libraryVersion", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	
	ДобавитьПараметр(ЗаписьJSON, "configName", Метаданные.Имя);
	ДобавитьПараметр(ЗаписьJSON, "configVersion", Метаданные.Версия);
	ДобавитьПараметр(ЗаписьJSON, "vendor", Метаданные.Поставщик);
	ДобавитьПараметр(ЗаписьJSON, "IBID", СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	Если НастройкиСоединения.ДоменРасположенияСерверовИПП = 0 Тогда
		ДоменнаяЗона = "ru";
	ИначеЕсли НастройкиСоединения.ДоменРасположенияСерверовИПП = 1 Тогда
		ДоменнаяЗона = "eu";
	КонецЕсли;

	ДобавитьПараметр(ЗаписьJSON, "domainZone", ДоменнаяЗона);
	ДобавитьПараметр(ЗаписьJSON, "countryId", "");
	
	ДобавитьПараметр(ЗаписьJSON, "PlatformVersion", СистИнфо.ВерсияПриложения);
	ДобавитьПараметр(ЗаписьJSON, "ConfigLanguage", КодЯзыкаИнтерфейсаКонфигурации());
	КодОсновногоЯзыкаИнтерфейса = КодОсновногоЯзыкаИнтерфейсаКонфигурации();
	ДобавитьПараметр(ЗаписьJSON, "ConfigMainLanguage", КодОсновногоЯзыкаИнтерфейса);
	ДобавитьПараметр(ЗаписьJSON, "CurLocalizationCode", ТекущийКодЛокализации());
	ДобавитьПараметр(ЗаписьJSON, "IBUserName", ИмяПользователя());
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

// Обновляет статусы отчетов в фоновом процессе.
//
// Параметры:
//  Параметры - Структура - параметры фоновой процедуры. Содержит поля:
//      * ПараметрыКлиента - Структура - содержит параметры клиентского приложения.
//        ** ТипПлатформы - Строка - тип клиентского приложения;
//        ** ВерсияОС - Строка - версия ОС на клиенте;
//  Адрес - Строка - адрес временного хранилища, в который помещается массив.
//
Процедура ОбновитьСтатусыОтчетов(Параметры, Адрес) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныйОтчет.Идентификатор,
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	НЕ РегламентированныйОтчет.Идентификатор = """"
	               |	И РегламентированныйОтчет.СтатусОтчета = &СтатусОтправлено";
	
	Запрос.УстановитьПараметр("СтатусОтправлено", НСтр("ru = 'Отправлено'"));
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	МассивОтчетов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Ответ          = ПолучитьСтатусОтчетаССервера(Выборка.Идентификатор, Параметры);
		Статус         = Ответ.Статус;
		ТекстОшибки    = Ответ.ЗначениеОшибки;
		ТекстСообщения = Ответ.ПредставлениеОшибки;
		
		Если Статус = "Доставлено" ИЛИ Статус = "Отклонено" Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СтатусОтчета = Статус;
			ДокументОбъект.Записать();
			МассивОтчетов.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МассивОтчетов, Адрес);
	
	Если ЗначениеЗаполнено(ТекстОшибки)Тогда
		ВидОперации = НСтр("ru = 'Получение статуса отчета через сервис Бизнес-сеть.'");
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Получает данные из строки в формате JSON.
// 
// Параметры:
//    Строка - Строка - Строка данных в формате JSON
// 
// Возвращаемое значение:
//    Структура - данные JSON в виде структуры.
//
Функция ДанныеИзСтрокиJSON(Строка) Экспорт
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		Операция = НСтр("ru = 'Чтение ответа от сервиса Бизнес-сеть.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'При чтении ответа от сервиса Бизнес-сеть произошла ошибка:
									|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки);
		ОтчетностьВБанкиСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Отправляет данные через интернет.
//
// Параметры:
//  АдресСервера - Строка - URI;
//  Ресурс - Строка - ресурс, на который отправляются данные;
//  Заголовки - Соответствие - заголовки запроса;
//  Данные - ДвоичныеДанные - тело запроса;
//  ПолучитьТелоКакСтроку - Булево - признак необходимости получения тела как строки;
//  Таймаут - Число - таймаут ожидания ответа сервера;
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Статус - Булево - результат получения файла. Истина - операция выполнена успешно.
//      * Тело - ДвоичныеДанные; Строка; Неопределено - данные ответа сервера.
//      * СообщениеОбОшибке - Строка; Неопределено - сообщение об ошибке, если статус Ложь.
//      * КодСостояния - Число; Неопределено - код состояния HTTP-ответа. Наличие кода означает, что был ответ от сервера.
//
Функция ОтправитьЗапросНаСервер(АдресСервера, Ресурс, Заголовки = Неопределено, Данные = Неопределено, ПолучитьТелоКакСтроку = Ложь, Таймаут = 60) Экспорт
	
	СтруктураВозврата = Новый Структура("Статус, Тело, СообщениеОбОшибке, КодСостояния");
	
	Соединение = СоединениеССервером(АдресСервера, Таймаут);

	Если ЗначениеЗаполнено(Заголовки) Тогда
		HTTPЗапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Иначе
		HTTPЗапрос = Новый HTTPЗапрос(Ресурс);
	КонецЕсли;
	
	Если НЕ Данные = Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Данные);
	КонецЕсли;

	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния = 200 Тогда
		СтруктураВозврата.Статус = Истина;
		Если ПолучитьТелоКакСтроку Тогда
			СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакСтроку();
		Иначе
			СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакДвоичныеДанные();
		КонецЕсли;
	Иначе
		СтруктураВозврата.Статус = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = РасшифровкаКодаСостоянияHTTP(Ответ.КодСостояния);
		СтруктураВозврата.Тело = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	СтруктураВозврата.КодСостояния = Ответ.КодСостояния;

	Возврат СтруктураВозврата;
	
КонецФункции

// Формирует описание счета для электронного представления формата 5.06 подверсии 2.9.
// 
// Параметры:
//  СчетКодСчета - Строка, ПланСчетовСсылка - Код счета или ссылка на счет.
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * КодСчета - Строка - код описываемого счета;
//      * НаименованиеСчета - Строка - наименование описываемого счета;
//      * ТипСчета - Строка - тип описываемого счета (А, П, АП);
//      * КодСчетаР - Строка - код родителя описываемого счета;
//      * ТипСчетаР - Строка - наименование родителя описываемого счета;
//      * КодСчетаРР - Строка - код родителя родителя описываемого счета;
//      * ТипСчетаРР - Строка - наименование родителя родителя описываемого счета.
//
Функция ОписаниеСчетаДляВыгрузки(СчетКодСчета) Экспорт
	
	ОписаниеСчета = Новый Структура;
	
	ОписаниеСчета.Вставить("КодСчета", "");
	ОписаниеСчета.Вставить("НаименованиеСчета", "");
	ОписаниеСчета.Вставить("ТипСчета", "");
	
	ОписаниеСчета.Вставить("КодСчетаР", "");
	ОписаниеСчета.Вставить("ТипСчетаР", "");
	
	ОписаниеСчета.Вставить("КодСчетаРР", "");
	ОписаниеСчета.Вставить("ТипСчетаРР", "");
	
	Счет = Неопределено;
	
	Если ТипЗнч(СчетКодСчета) = Тип("Строка") Тогда
		ОтчетностьВБанкиСлужебныйПереопределяемый.УстановитьСчетУчетаПоКоду(СчетКодСчета, Счет);
	Иначе
		Счет = СчетКодСчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Счет) Тогда
		ОписаниеСчета.Вставить("КодСчета", Счет.Код);
		ОписаниеСчета.Вставить("НаименованиеСчета", Счет.Наименование);
		ОписаниеСчета.Вставить("ТипСчета", КодВидаСчета(Счет));
		
		Если ЗначениеЗаполнено(Счет.Родитель) Тогда
			ОписаниеСчета.Вставить("КодСчетаР", Счет.Родитель.Код);
			ОписаниеСчета.Вставить("ТипСчетаР", КодВидаСчета(Счет.Родитель));
			
			Если ЗначениеЗаполнено(Счет.Родитель.Родитель) Тогда
				ОписаниеСчета.Вставить("КодСчетаРР", Счет.Родитель.Родитель.Код);
				ОписаниеСчета.Вставить("ТипСчетаРР", КодВидаСчета(Счет.Родитель.Родитель));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеСчета;
	
КонецФункции

// Возвращает таблицу счетов для отчета.
//
// Параметры:
//   ВидОтчета - Строка - имя отчета, для которого надо заполнить список счетов.
//   ИмяФормы - Строка - имя формы отчета БухгалтерскаяОтчетностьВБанк, для которой заполняется список счетов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * Включен - Булево - признак включения счета в отчет;
//     * Счет - ПланСчетовСсылка - ссылка на счет плана счетов, в котором ведется бухгалтерский учет;
//     * Наименование - Строка - наименование счета плана счетов, в котором ведется бухгалтерский учет.
//
Функция СчетаЗаполнения(ВидОтчета, ИмяФормы) Экспорт
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Включен", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("Счет");
	ТаблицаСчетов.Колонки.Добавить("Наименование");
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьТаблицуСчетовЗаполнения(ИмяФормы, ВидОтчета, ТаблицаСчетов);
	
	Возврат ТаблицаСчетов;
	
КонецФункции

// Возвращает таблицу с банками расчетных счетов организации.
// Параметры:
//   Организация - СправочникСсылка.Организация - организация, для которой нужно получить таблицу с банками.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * БИК  - Строка - БИК банка.
//     * Банк - ОпределяемыйТип.СправочникБанкиБРО - банк.
//
Функция БанкиРасчетныхСчетовОрганизации(Организация) Экспорт
	
	ТаблицаБанков = Новый ТаблицаЗначений;
	ТаблицаБанков.Колонки.Добавить("БИК");
	ТаблицаБанков.Колонки.Добавить("Банк");
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьТаблицуБанковРасчетныхСчетовОрганизации(
		Организация, ТаблицаБанков);
	
	Возврат ТаблицаБанков;
	
КонецФункции

// Возвращает дерево счетов бухгалтерского учета.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево со счетами бухгалтерского учета.
//	 ВключатьЗабалансовые - Булево - Если установлен в значение Истина, то выгружаются в том числе и забалансовые счета.
//
Функция ДеревоСчетовБУ(ВключатьЗабалансовые = Ложь) Экспорт
	
	ДеревоСчетовБУ = Новый ДеревоЗначений;
	// Не передаем 2-ой параметр, чтобы не требовать обязательное изменение 
	// в переопределяемом модуле конфигураций-потребителей.
	Если ВключатьЗабалансовые Тогда
		МодульОтчетностьВБанкиСлужебныйПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ОтчетностьВБанкиСлужебныйПереопределяемый");
		МодульОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьДеревоСчетовБУ(ДеревоСчетовБУ, ВключатьЗабалансовые);
	Иначе
		ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьДеревоСчетовБУ(ДеревоСчетовБУ);
	КонецЕсли;
	
	Возврат ДеревоСчетовБУ;
	
КонецФункции

// Возвращает ссылку на банк заемщика, используемый по умолчанию.
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка на элемент справочника банков.
//
Функция БанкЗаемщикаПоУмолчанию() Экспорт
	
	БанкОрганизации = Неопределено;
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьБанкПоУмолчанию(БанкОрганизации);
	
	Возврат БанкОрганизации;
	
КонецФункции

// Возвращает массив с перечнем разделов, заполняемых по сведениям информационной базы.
//
// Параметры:
//   ИмяФормы - Строка - имя формы отчета БухгалтерскаяОтчетностьВБанк, для которой заполняется перечень разделов.
//   ЗаполняемыеРазделы - Массив - массив, в который будут добавлены идентификаторы заполняемых разделов.
//
// Возвращаемое значение:
//   Массив - массив с идентификаторами заполняемых разделов.
//
Функция РазделыЗаполняемыеПоСведениямИБ(ИмяФормыОтчета) Экспорт
	
	ЗаполняемыеРазделы = Новый Массив;
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьПереченьЗаполняемыхРазделов(ИмяФормыОтчета, ЗаполняемыеРазделы);
	
	Возврат ЗаполняемыеРазделы;
	
КонецФункции

// Возвращает описание типов для сущности с указанным названием.
//
// Параметры:
//   НазваниеСущности - Строка - название сущности, для которой требуется получить описание типов.
//
// Возвращаемое значение:
//   ОписаниеТипов - описание типов сущности.
//
Функция ТипыСущности(НазваниеСущности) Экспорт
	
	ОписаниеТиповСущности = Новый ОписаниеТипов;
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьТипыСущности(НазваниеСущности, ОписаниеТиповСущности);
	
	Возврат ОписаниеТиповСущности;
	
КонецФункции

Функция ПредставлениеАнализаДенежныхСредствКасса(ШаблонПредставления, ДанныеОтчета, ПостфиксЕдИзм = "") Экспорт
	
	ПредставлениеОтчета = Новый ТабличныйДокумент;
	
	Если ШаблонПредставления.Области.Найти("Заголовок") <> Неопределено Тогда
		Секция_Заголовок = ШаблонПредставления.ПолучитьОбласть("Заголовок");
		ПредставлениеОтчета.Вывести(Секция_Заголовок);
		
		Секция_ПустаяСтрока = ШаблонПредставления.ПолучитьОбласть("ПустаяСтрока");
		ПредставлениеОтчета.Вывести(Секция_ПустаяСтрока);
		
	КонецЕсли;
	
	Если ШаблонПредставления.Области.Найти("ШапкаТаблицыКасса") <> Неопределено Тогда
		Секция_ШапкаТаблицы = ШаблонПредставления.ПолучитьОбласть("ШапкаТаблицыКасса");
	Иначе
		Секция_ШапкаТаблицы = ШаблонПредставления.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	ПредставлениеОтчета.Вывести(Секция_ШапкаТаблицы);
	
	ПредставлениеОтчета.НачатьАвтогруппировкуСтрок();
	
	УровеньСчета = ДанныеОтчета.Строки;
	Для Каждого СтрокаУровняСчета Из УровеньСчета Цикл
		Секция_СтрокаТаблицыСчет = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыСчет" + ПостфиксЕдИзм);
		
		Секция_СтрокаТаблицыСчет.Параметры.КодСчета = СтрокаУровняСчета.Счет.Код;
		Секция_СтрокаТаблицыСчет.Параметры.СНД = СтрокаУровняСчета.СНД;
		Секция_СтрокаТаблицыСчет.Параметры.СНК = СтрокаУровняСчета.СНК;
		
		ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыСчет, 1);
		
		ОборотыПоСчетуДт = 0;
		ОборотыПоСчетуКт = 0;
		
		УровеньПериода = СтрокаУровняСчета.Строки;
		
		Для Каждого СтрокаУровняПериода Из УровеньПериода Цикл
			Секция_СтрокаТаблицыПериод = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыПериод" + ПостфиксЕдИзм);
			
			Секция_СтрокаТаблицыПериод.Параметры.Период = Формат(СтрокаУровняПериода.Период, "ДФ='ММММ гггг ''г.'''");
			Секция_СтрокаТаблицыПериод.Параметры.СНД = СтрокаУровняПериода.СНД;
			Секция_СтрокаТаблицыПериод.Параметры.СНК = СтрокаУровняПериода.СНК;
			
			ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыПериод, 2);
			
			ОборотыПоПериодуДт = 0;
			ОборотыПоПериодуКт = 0;
			
			УровеньКорреспонденции = СтрокаУровняПериода.Строки;
			
			Для Каждого СтрокаУровняКорреспонденции Из УровеньКорреспонденции Цикл
				Если ЗначениеЗаполнено(СтрокаУровняКорреспонденции.КорСчет) Тогда
					Секция_СтрокаТаблицыКорСчет = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыКорСчет" + ПостфиксЕдИзм);
					
					Секция_СтрокаТаблицыКорСчет.Параметры.КодКорСчета = СтрокаУровняКорреспонденции.КорСчет.Код;
					Секция_СтрокаТаблицыКорСчет.Параметры.ДО = СтрокаУровняКорреспонденции.ДО;
					Секция_СтрокаТаблицыКорСчет.Параметры.КО = СтрокаУровняКорреспонденции.КО;
					
					ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыКорСчет, 3);
					
				Иначе
					// Сведения по счету без корреспонденции. Используются для вывода оборотов, так как в запросе
					// итоги по уровню счета задваиваются из-за объединения таблиц со счетами и с корреспонденцией.
					ОборотыПоПериодуДт = СтрокаУровняКорреспонденции.ДО;
					ОборотыПоПериодуКт = СтрокаУровняКорреспонденции.КО;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Секция_СтрокаТаблицыОбороты = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыОбороты" + ПостфиксЕдИзм);
			
			Секция_СтрокаТаблицыОбороты.Параметры.ДО = ОборотыПоПериодуДт;
			Секция_СтрокаТаблицыОбороты.Параметры.КО = ОборотыПоПериодуКт;
			
			ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыОбороты, 2);
			
			Секция_СтрокаТаблицыСальдоКонечное = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыСальдоКонечное" + ПостфиксЕдИзм);
			Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКД = СтрокаУровняПериода.СКД;
			Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКК = СтрокаУровняПериода.СКК;
			
			ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыСальдоКонечное, 2);
			
			ОборотыПоСчетуДт = ОборотыПоСчетуДт + ОборотыПоПериодуДт;
			ОборотыПоСчетуКт = ОборотыПоСчетуКт + ОборотыПоПериодуКт;
			
		КонецЦикла;
		
		Секция_СтрокаТаблицыОбороты = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыОбороты" + ПостфиксЕдИзм);
		
		Секция_СтрокаТаблицыОбороты.Параметры.ДО = ОборотыПоСчетуДт;
		Секция_СтрокаТаблицыОбороты.Параметры.КО = ОборотыПоСчетуКт;
		
		ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыОбороты, 1);
		
		Секция_СтрокаТаблицыСальдоКонечное = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыСальдоКонечное" + ПостфиксЕдИзм);
		Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКД = СтрокаУровняСчета.СКД;
		Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКК = СтрокаУровняСчета.СКК;
		
		ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыСальдоКонечное, 1);
		
	КонецЦикла;
	
	ПредставлениеОтчета.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ПредставлениеОтчета;
	
КонецФункции

Функция ПредставлениеАнализаДенежныхСредств(ШаблонПредставления, ДанныеОтчета, ПостфиксЕдИзм = "") Экспорт
	
	ПредставлениеОтчета = Новый ТабличныйДокумент;
	
	Если ШаблонПредставления.Области.Найти("Заголовок") <> Неопределено Тогда
		Секция_Заголовок = ШаблонПредставления.ПолучитьОбласть("Заголовок");
		ПредставлениеОтчета.Вывести(Секция_Заголовок);
		
		Секция_ПустаяСтрока = ШаблонПредставления.ПолучитьОбласть("ПустаяСтрока");
		ПредставлениеОтчета.Вывести(Секция_ПустаяСтрока);
		
	КонецЕсли;
	
	Секция_ШапкаТаблицы = ШаблонПредставления.ПолучитьОбласть("ШапкаТаблицы");
	ПредставлениеОтчета.Вывести(Секция_ШапкаТаблицы);
	
	ПредставлениеОтчета.НачатьАвтогруппировкуСтрок();
	
	УровеньСчета = ДанныеОтчета.Строки;
	Для Каждого СтрокаУровняСчета Из УровеньСчета Цикл
		Секция_СтрокаТаблицыСчет = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыСчет" + ПостфиксЕдИзм);
		
		Секция_СтрокаТаблицыСчет.Параметры.КодСчета = СтрокаУровняСчета.Счет.Код;
		Секция_СтрокаТаблицыСчет.Параметры.СНД = СтрокаУровняСчета.СНД;
		Секция_СтрокаТаблицыСчет.Параметры.СНК = СтрокаУровняСчета.СНК;
		
		ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыСчет, 1);
		
		ОборотыПоСчетуДт = 0;
		ОборотыПоСчетуКт = 0;
		
		УровеньБанковскогоСчета = СтрокаУровняСчета.Строки;
		
		Для Каждого СтрокаУровняБанковскогоСчета Из УровеньБанковскогоСчета Цикл
			Секция_СтрокаТаблицыБанковскийСчет = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыБанковскийСчет" + ПостфиксЕдИзм);
			
			Секция_СтрокаТаблицыБанковскийСчет.Параметры.БанковскийСчет = СтрокаУровняБанковскогоСчета.БанковскийСчет;
			Секция_СтрокаТаблицыБанковскийСчет.Параметры.СНД = СтрокаУровняБанковскогоСчета.СНД;
			Секция_СтрокаТаблицыБанковскийСчет.Параметры.СНК = СтрокаУровняБанковскогоСчета.СНК;
			
			ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыБанковскийСчет, 2);
			
			УровеньПериода = СтрокаУровняБанковскогоСчета.Строки;
			
			ОборотыПоБанковскомуСчетуДт = 0;
			ОборотыПоБанковскомуСчетуКт = 0;
			
			Для Каждого СтрокаУровняПериода Из УровеньПериода Цикл
				Секция_СтрокаТаблицыПериод = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыПериод" + ПостфиксЕдИзм);
				
				Секция_СтрокаТаблицыПериод.Параметры.Период = Формат(СтрокаУровняПериода.Период, "ДФ='ММММ гггг ''г.'''");
				Секция_СтрокаТаблицыПериод.Параметры.СНД = СтрокаУровняПериода.СНД;
				Секция_СтрокаТаблицыПериод.Параметры.СНК = СтрокаУровняПериода.СНК;
				
				ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыПериод, 3);
				
				ОборотыПоПериодуДт = 0;
				ОборотыПоПериодуКт = 0;
				
				УровеньКорреспонденции = СтрокаУровняПериода.Строки;
				
				Для Каждого СтрокаУровняКорреспонденции Из УровеньКорреспонденции Цикл
					Если ЗначениеЗаполнено(СтрокаУровняКорреспонденции.КорСчет) Тогда
						Секция_СтрокаТаблицыКорСчет = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыКорСчет" + ПостфиксЕдИзм);
						
						Секция_СтрокаТаблицыКорСчет.Параметры.КодКорСчета = СтрокаУровняКорреспонденции.КорСчет.Код;
						Секция_СтрокаТаблицыКорСчет.Параметры.ДО = СтрокаУровняКорреспонденции.ДО;
						Секция_СтрокаТаблицыКорСчет.Параметры.КО = СтрокаУровняКорреспонденции.КО;
						
						ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыКорСчет, 4);
						
					Иначе
						// Сведения по счету без корреспонденции. Используются для вывода оборотов, так как в запросе
						// итоги по уровню счета задваиваются из-за объединения таблиц со счетами и с корреспонденцией.
						ОборотыПоПериодуДт = СтрокаУровняКорреспонденции.ДО;
						ОборотыПоПериодуКт = СтрокаУровняКорреспонденции.КО;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Секция_СтрокаТаблицыОбороты = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыОбороты" + ПостфиксЕдИзм);
				
				Секция_СтрокаТаблицыОбороты.Параметры.ДО = ОборотыПоПериодуДт;
				Секция_СтрокаТаблицыОбороты.Параметры.КО = ОборотыПоПериодуКт;
				
				ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыОбороты, 3);
				
				Секция_СтрокаТаблицыСальдоКонечное = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыСальдоКонечное" + ПостфиксЕдИзм);
				Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКД = СтрокаУровняПериода.СКД;
				Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКК = СтрокаУровняПериода.СКК;
				
				ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыСальдоКонечное, 3);
				
				ОборотыПоБанковскомуСчетуДт = ОборотыПоБанковскомуСчетуДт + ОборотыПоПериодуДт;
				ОборотыПоБанковскомуСчетуКт = ОборотыПоБанковскомуСчетуКт + ОборотыПоПериодуКт;
				
			КонецЦикла;
			
			Секция_СтрокаТаблицыОбороты = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыОбороты" + ПостфиксЕдИзм);
			
			Секция_СтрокаТаблицыОбороты.Параметры.ДО = ОборотыПоБанковскомуСчетуДт;
			Секция_СтрокаТаблицыОбороты.Параметры.КО = ОборотыПоБанковскомуСчетуКт;
			
			ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыОбороты, 2);
			
			Секция_СтрокаТаблицыСальдоКонечное = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыСальдоКонечное" + ПостфиксЕдИзм);
			Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКД = СтрокаУровняБанковскогоСчета.СКД;
			Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКК = СтрокаУровняБанковскогоСчета.СКК;
			
			ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыСальдоКонечное, 2);
			
			ОборотыПоСчетуДт = ОборотыПоСчетуДт + ОборотыПоБанковскомуСчетуДт;
			ОборотыПоСчетуКт = ОборотыПоСчетуКт + ОборотыПоБанковскомуСчетуКт;
			
		КонецЦикла;
		
		Секция_СтрокаТаблицыОбороты = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыОбороты" + ПостфиксЕдИзм);
		
		Секция_СтрокаТаблицыОбороты.Параметры.ДО = ОборотыПоСчетуДт;
		Секция_СтрокаТаблицыОбороты.Параметры.КО = ОборотыПоСчетуКт;
		
		ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыОбороты, 1);
		
		Секция_СтрокаТаблицыСальдоКонечное = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицыСальдоКонечное" + ПостфиксЕдИзм);
		Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКД = СтрокаУровняСчета.СКД;
		Секция_СтрокаТаблицыСальдоКонечное.Параметры.СКК = СтрокаУровняСчета.СКК;
		
		ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицыСальдоКонечное, 1);
		
	КонецЦикла;
	
	ПредставлениеОтчета.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ПредставлениеОтчета;
	
КонецФункции

// Выполняет оправку отчетности в банк из регламентного задания.
//
Процедура ОтправитьОтчетностьВБанк(Параметры) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаОтчетностиВБанк);
	
	Организация = Параметры;
	ПодготовитьИОтправитьОтчетыВБанк(Организация, Ложь);
	
КонецПроцедуры

// Выполняет оправку отчетности в банк по подключенным видам отчетов без учета отправленных ранее.
//
Процедура ОтправитьОтчетностьВБанкПринудительно(Организация) Экспорт
	
	ПодготовитьИОтправитьОтчетыВБанк(Организация, Истина);
	
КонецПроцедуры

// Определяет статус отправленного отчета по идентификатору документа.
//
// Параметры:
//  ИдентификаторДокумента - Строка - идентификатор документа, переданного на сервер.
//  Параметры - Структура - параметры запроса к серверу. Содержит поля:
//      * ПараметрыКлиента - Структура - содержит параметры клиентского приложения.
//        ** ТипПлатформы - Строка - тип клиентского приложения;
//        ** ВерсияОС - Строка - версия ОС на клиенте;
//
// Возвращаемое значение:
//  Структура:
//     Статус - Строка - статус отправленного отчета (Доставлено, Отклонено, Отправлено).
//                       Может быть пустым, если заполнены ЗначениеОшибки или ПредставлениеОшибки 
//     ЗначениеОшибки - Строка - Текст ошибки ошибки для записи в журнал регистрации или др. служебных целей. 
//     ПредставлениеОшибки - Строка - Текст ошибки для отображения пользователю.
//
Функция ПолучитьСтатусОтчетаССервера(ИдентификаторДокумента, Параметры) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Статус", "");
	Результат.Вставить("ЗначениеОшибки", "");
	Результат.Вставить("ПредставлениеОшибки", "");
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ВремФайл);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("reportGuid");
	ЗаписьJSON.ЗаписатьЗначение(ИдентификаторДокумента);
	
	ДобавитьДополнительныеПараметры(ЗаписьJSON, Параметры.ПараметрыКлиента);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	Данные = Новый ДвоичныеДанные(ВремФайл);
	
	Попытка
		УдалитьФайлы(ВремФайл);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отчетность в банки. Ошибка удаления временного файла'"),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Результат = ОтправитьЗапросНаСервер(
		"https://reportbank.1c.ru", "/api/rest/report/checkStatus/", Заголовки, Данные, Истина, 30);
	
	Успех = Ложь;
	ТекстСообщения = "";
	ТекстОшибки = "";
	
	Если Результат.Статус Тогда
		ДанныеОтвета = ДанныеИзСтрокиJSON(Результат.Тело);
		Статус = ДанныеОтвета.status;
		Если Статус = "DELIVERED" Тогда
			Статус = НСтр("ru = 'Доставлено'");
		ИначеЕсли Статус = "REJECTED" Тогда
			Статус = НСтр("ru = 'Отклонено'");
		ИначеЕсли Статус = "SENT" Тогда
			Статус = НСтр("ru = 'Отправлено'");
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Результат.Тело) Тогда
			ДанныеОтвета = ДанныеИзСтрокиJSON(Результат.Тело);
			Если НЕ Данные = Неопределено Тогда
				Если ДанныеОтвета.Свойство("errorText") Тогда
					ТекстСообщения = ДанныеОтвета.errorText;
				Иначе
					ТекстСообщения = НСтр("ru = 'Получена неизвестная ошибка с сервиса Бизнес-сеть.'");
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = НСтр("ru = 'Ошибка получения статуса отчета через сервис Бизнес-сеть.
								|Код состояния: %1
								|%2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.КодСостояния, Результат.Тело);
		Иначе
			ТекстСообщения = Результат.СообщениеОбОшибке;
			ТекстОшибки = НСтр("ru = 'Ошибка получения статуса отчета через сервис Бизнес-сеть.
								|Код состояния: %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.КодСостояния);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Статус", Статус);
	Результат.Вставить("ЗначениеОшибки", ТекстОшибки);
	Результат.Вставить("ПредставлениеОшибки", ТекстСообщения);
	
	Возврат Результат;
	
КонецФункции

// Возвращает счета, по которым производится автоматическая отправка ОСВ по счетам в банки.
//
// Возвращаемое значение:
//  Массив - счета, по которым производится автоматическая отправка ОСВ по счетам в банки
//
Функция СчетаОСВПоСчетам() Экспорт
	
	СчетаОСВПоСчетам = Новый Массив;
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьСчетаОСВПоСчетам(СчетаОСВПоСчетам);
	
	Возврат СчетаОСВПоСчетам;
	
КонецФункции

// Возвращает счет бухгалтерского учета по коду счета
//
// Параметры:
//   КодСчета - Строка - код счета
//
// Возвращаемое значение:
//   ПланСчетовСсылка - ссылка на счет бухгалтерского учета
//
Функция СчетБухУчета(КодСчета) Экспорт
	
	Счет = Неопределено;
	ОтчетностьВБанкиСлужебныйПереопределяемый.УстановитьСчетУчетаПоКоду(КодСчета, Счет);
	
	Возврат Счет;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КодЯзыкаИнтерфейсаКонфигурации()

	Язык = ТекущийЯзык();
	Если Язык = Неопределено Тогда
		// Для пользователя информационной базы не указан язык.
		Возврат КодОсновногоЯзыкаИнтерфейсаКонфигурации();
	КонецЕсли;

	КодЯзыкаВМетаданных = ?(ТипЗнч(Язык) = Тип("Строка"), Язык, Язык.КодЯзыка);
	Возврат КодЯзыкаВМетаданных;

КонецФункции

Функция КодОсновногоЯзыкаИнтерфейсаКонфигурации()

	КодЯзыкаВМетаданных = Метаданные.ОсновнойЯзык.КодЯзыка;
	
	Возврат КодЯзыкаВМетаданных;

КонецФункции

Функция СоединениеССервером(АдресСервера, Таймаут)
	
	Перем ЗащищенноеСоединение;
	
	Адрес = "";
	Протокол = "";
	
	ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = СформироватьПрокси(Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , ,Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

Функция СформироватьПрокси(Протокол)
	
	// НастройкаПроксиСервера - Соответствие:
	//  ИспользоватьПрокси - использовать ли прокси-сервер;
	//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов;
	//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера;
	//  Сервер       - адрес прокси-сервера;
	//  Порт         - порт прокси-сервера;
	//  Пользователь - имя пользователя для авторизации на прокси-сервере;
	//  Пароль       - пароль пользователя.
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				// Ручные настройки прокси-сервера.
				Прокси = Новый ИнтернетПрокси;
				Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
					НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Процедура ОпределитьПараметрыСайта(Знач АдресСайта, ЗащищенноеСоединение, Адрес, Протокол)
	
	АдресСайта = СокрЛП(АдресСайта);
	
	АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
	АдресСайта = СтрЗаменить(АдресСайта, " ", "");
	
	Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
		Протокол = "http";
		Адрес = Сред(АдресСайта,8);
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
		Протокол =  "https";
		Адрес = Сред(АдресСайта,9);
		
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если НЕ ОбщегоНазначения.ЭтоLinuxСервер() И НЕ ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение( , СертификатыУдостоверяющихЦентров);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасшифровкаКодаСостоянияHTTP(КодСостояния)
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'Сервер обнаружил в запросе клиента синтаксическую ошибку.'"));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'Неверные данные аутентификации.'"));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'У клиента нет доступа к ресурсу.'"));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'На сервере нет ресурса по указанному URI.'"));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'Указанный клиентом метод нельзя применить к текущему ресурсу.'"));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'Запрошенный URI не может удовлетворить переданным в заголовке характеристикам.'"));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'Для доступа к серверу требуется аутентификация для прокси-сервера.'"));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'Время ожидания сервером передачи от клиента истекло.'"));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.'"));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'Ресурс был удалён и теперь недоступен.'"));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'Не указан объем передаемых данных в заголовке.'"));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'Ни одно из условных полей заголовка запроса не было выполнено.'"));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'Сервер отказался обработать запрос по причине слишком большого размера тела запроса.'"));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'Сервер не может обработать запрос из-за слишком длинного указанного URL.'"));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'Сервер отказывается работать с указанным типом данных при данном методе.'"));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'Имеется логическая ошибка, из-за которой невозможно произвести операцию.'"));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'Целевой ресурс из запроса заблокирован от применения к нему указанного метода.'"));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'Клиенту на необходимость обновить протокол.'"));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'Клиент попытался отправить слишком много запросов за короткое время.'"));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'Превышена допустимая длина заголовков.'"));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'Запрашиваемый адрес недоступен.'"));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'Поступило недостаточно информации.'"));
	СоответствиеКодов.Вставить(451, НСтр("ru = 'Доступ к ресурсу закрыт по юридическим причинам.'"));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервера.'"));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'Сервер не поддерживает возможностей, необходимых для обработки запроса.'"));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'Сервер, выступая в роли шлюза или прокси-сервера, получил недействительное ответное сообщение от вышестоящего сервера.'"));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'Сервер временно не имеет возможности обрабатывать запросы по техническим причинам.'"));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'Сервер в роли шлюза или прокси-сервера не дождался ответа от вышестоящего сервера для завершения текущего запроса.'"));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'Сервер не поддерживает указанную в запросе версию протокола HTTP.'"));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'Не хватает места для выполнения текущего запроса.'"));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'На сервере отсутствует расширение, которое желает использовать клиент.'"));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'Необходимо авторизоваться в сети провайдера.'"));
	
	Возврат СоответствиеКодов.Получить(КодСостояния);
	
КонецФункции

Процедура ДобавитьПараметр(ЗаписьJSON, НазваниеПараметра, ЗначениеПараметра)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("key");
	ЗаписьJSON.ЗаписатьЗначение(НазваниеПараметра);
	ЗаписьJSON.ЗаписатьИмяСвойства("value");
	ЗаписьJSON.ЗаписатьЗначение(ЗначениеПараметра);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

Функция КодВидаСчета(Счет)
	
	КодВидаСчета = "АП";
	
	Если Счет.Вид = ВидСчета.Активный Тогда
		КодВидаСчета = "А";
	ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
		КодВидаСчета = "П";
	КонецЕсли;
	
	Возврат КодВидаСчета;
	
КонецФункции

#Область ОтправкаОтчетностиИзРегламентногоЗадания

Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправкаОтчетностиВБанк.ИмяМетода);
	
КонецПроцедуры

Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаОтчетностиВБанк;
	Настройка.ДоступноВПодчиненномУзлеРИБ = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.Параметризуется = Истина;
	
КонецПроцедуры

Процедура ПодготовитьИОтправитьОтчетыВБанк(Организация, Принудительно)
	
	МоментОтправки = ТекущаяДатаСеанса();
	
	ПараметрыОтчетов = ПараметрыПредставляемыхОтчетов(Организация, МоментОтправки);
	
	Если НЕ Принудительно Тогда
		// Исключение ранее оправленных отчетов из списка отправки.
		Для Каждого ОтправляемыйОтчет Из ПараметрыОтчетов Цикл
			ВидОтчета = ОтправляемыйОтчет.Ключ;
			ПараметрыОтчета = ОтправляемыйОтчет.Значение;
			
			ЗаписьЖурналаПереданнойОтчетности = РегистрыСведений.ЖурналПереданнойОтчетностиВБанк.СоздатьМенеджерЗаписи();
			ЗаписьЖурналаПереданнойОтчетности.Организация = Организация;
			ЗаписьЖурналаПереданнойОтчетности.ВидОтчета = ВидОтчета;
			ЗаписьЖурналаПереданнойОтчетности.НачалоПериода = ПараметрыОтчета.ПериодРегистрацииОтправки.НачалоПериода;
			ЗаписьЖурналаПереданнойОтчетности.КонецПериода = ПараметрыОтчета.ПериодРегистрацииОтправки.КонецПериода;
			
			ЗаписьЖурналаПереданнойОтчетности.Прочитать();
			Если ЗаписьЖурналаПереданнойОтчетности.Выбран() Тогда
				ПараметрыОтчета.Отправлять = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Если все отчеты отправлены, то пустой пакет отправлять не требуется.
	ТребуетсяОтправитьПакет = Ложь;
	Для Каждого ОтправляемыйОтчет Из ПараметрыОтчетов Цикл
		Если ОтправляемыйОтчет.Значение.Отправлять Тогда
			ТребуетсяОтправитьПакет = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ТребуетсяОтправитьПакет Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование и отправка пакета.
	ПараметрыВыгрузки = ПараметрыЭлектронногоПредставления(Организация, ПараметрыОтчетов, МоментОтправки);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Организация", Организация);
	ПараметрыОтправки.Вставить("ИмяПакета", ПараметрыВыгрузки.ИдФайл);
	ПараметрыОтправки.Вставить("ДатаОтправки", МоментОтправки);
	ПараметрыОтправки.Вставить("ДатаНачала", ПараметрыВыгрузки.НачалоПериода);
	ПараметрыОтправки.Вставить("ДатаОкончания", ПараметрыВыгрузки.КонецПериода);
	
	ЗаписьЖурналаОтправки = РегистрыСведений.ЖурналПередачиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьЖурналаОтправки, ПараметрыОтправки);
	ЗаписьЖурналаОтправки.Состояние = "Ошибка";
	Если НЕ Принудительно Тогда
		// Пессимистичная запись об ошибке при выполнении в регламентном задании.
		// При успешной отправке статус этой записи меняется.
		ЗаписьЖурналаОтправки.Записать();
	КонецЕсли;
	
	ПакетОтправки = ПакетДляНеинтерактивнойОтправкиВБанк(ПараметрыВыгрузки);
	ДвоичныеДанныеПакета = ПакетОтправки.ДвоичныеДанныеПакета;
	ИмяФайлаПакета = ПакетОтправки.ИмяФайлаПакета;
	
	РезультатОтправки = ОтправитьОтчетностьВБанкБезПодписи(Организация, ДвоичныеДанныеПакета, ИмяФайлаПакета);
	
	ЗаписьЖурналаОтправки.ИдентификаторДокумента = РезультатОтправки.ИдентификаторДокумента;
	ЗаписьЖурналаОтправки.Состояние = РезультатОтправки.Статус;
	ЗаписьЖурналаОтправки.Записать();
	
	Если РезультатОтправки.Статус = "Ошибка" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при передаче пакета с отчетностью на сервер.'");
	КонецЕсли;
	
	// Регистрация отправленных отчетов для предотвращения повторной отправки.
	Для Каждого ОтправленныйОтчет Из ПараметрыОтчетов Цикл
		ВидОтчета = ОтправленныйОтчет.Ключ;
		ПараметрыОтчета = ОтправленныйОтчет.Значение;
		
		Если ПараметрыОтчета.Отправлять Тогда
			ЗаписьЖурналаПереданнойОтчетности = РегистрыСведений.ЖурналПереданнойОтчетностиВБанк.СоздатьМенеджерЗаписи();
			ЗаписьЖурналаПереданнойОтчетности.Организация = Организация;
			ЗаписьЖурналаПереданнойОтчетности.ВидОтчета = ВидОтчета;
			ЗаписьЖурналаПереданнойОтчетности.НачалоПериода = ПараметрыОтчета.ПериодРегистрацииОтправки.НачалоПериода;
			ЗаписьЖурналаПереданнойОтчетности.КонецПериода = ПараметрыОтчета.ПериодРегистрацииОтправки.КонецПериода;
			
			ЗаписьЖурналаПереданнойОтчетности.ДатаОтправки = МоментОтправки;
			ЗаписьЖурналаПереданнойОтчетности.ИмяПакета = ПакетОтправки.ИмяФайлаПакета;
			
			ЗаписьЖурналаПереданнойОтчетности.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет передачу пакета с отчетностью в банк без интерактивного взаимодействия с пользователем.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ДвоичныеДанныеПакета - ДвоичныеДанные
//  ИмяФайла - Строка - имя файла отправляемого пакета
//
// Возвращаемое значение:
//   Строка - "Отправлено", если отчет отправлен успешно;
//            "Ошибка", если при отправке отчета произошла ошибка.
//
Функция ОтправитьОтчетностьВБанкБезПодписи(Организация, ДвоичныеДанныеПакета, ИмяФайлаПакета)
	
	БИК = "044525225";
	ПараметрыКлиента = Новый СистемнаяИнформация;
	
	ЭлектроннаяПодписьПодОтчетом = ПолучитьОбщийМакет("ПодписьБанка");
	
	Результат = ОтчетностьВБанкиСлужебныйВызовСервера.СформироватьПакетИОтправитьДанныеВБанк(
		Организация, БИК, ДвоичныеДанныеПакета, ИмяФайлаПакета, ЭлектроннаяПодписьПодОтчетом, ПараметрыКлиента);
	
	Возврат Результат;
	
КонецФункции

Функция ПакетДляНеинтерактивнойОтправкиВБанк(ПараметрыВыгрузки)
	
	ВременныйКаталогПакета = ФайловаяСистема.СоздатьВременныйКаталог();
	
	ИмяФайлаПредставления = ПараметрыВыгрузки.ИдФайл;
	ПолноеИмяФайлаПредставления = ВременныйКаталогПакета + ИмяФайлаПредставления + ".xml";
	
	Компоновщик = НовыйКомпоновщикXML(ПолноеИмяФайлаПредставления);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВывестиГоловныеУзлыПакета(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзлы_ОСВПоСчетам(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки);
	
	ВывестиЗавершающиеУзлыПакета(Компоновщик);
	
	Компоновщик.Закрыть();
	Компоновщик = Неопределено;
	
	ФайлАрхива = Новый ЗаписьZipФайла();
	ФайлАрхива.Добавить(ПолноеИмяФайлаПредставления);
	
	ДвоичныеДанныеФайла = ФайлАрхива.ПолучитьДвоичныеДанные( , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	
	ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталогПакета);
	
	ПакетОтправки = Новый Структура;
	ПакетОтправки.Вставить("ДвоичныеДанныеПакета", ДвоичныеДанныеФайла);
	ПакетОтправки.Вставить("ИмяФайлаПакета", ИмяФайлаПредставления + ".zip");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПакетОтправки;
	
КонецФункции

Функция ПараметрыЭлектронногоПредставления(Организация, ПараметрыОтчетов, ДатаВыгрузки)
	
	ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, НаимЮЛСокр, ФИОРук, ФИО";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаВыгрузки, СтрокаСведений);
	
	Если ЭтоИП Тогда
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.ФИО);
	Иначе
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
	КонецЕсли;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПараметрыОтчетов", ПараметрыОтчетов);
	
	ПараметрыВыгрузки.Вставить("ВерсФорм", "5.12.05");
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ДатаВыгрузки, "ДФ=дд.ММ.гггг"));
	
	ПараметрыВыгрузки.Вставить("ВидДок",         "0");
	ПараметрыВыгрузки.Вставить("НаимОрг",        СокрЛП(НаименованиеОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОргКраткое", СокрЛП(СведенияОбОрганизации.НаимЮЛСокр));
	
	КонецОтчетногоПериода = КонецМесяца(ДатаВыгрузки);
	
	ПараметрыВыгрузки.Вставить("Организация", Организация);
	ПараметрыВыгрузки.Вставить("НачалоПериода", ПараметрыОтчетов.БанковскиеОперации.НачалоПериода);
	ПараметрыВыгрузки.Вставить("КонецПериода", ПараметрыОтчетов.БанковскиеОперации.КонецПериода);
	ПараметрыВыгрузки.Вставить("ДатаВыгрузки", ДатаВыгрузки);
	ПараметрыВыгрузки.Вставить("КонецОтчетногоПериода", КонецОтчетногоПериода);
	
	Если ЭтоИП Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(Организация.ИНН));
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(НаименованиеОрганизации);
		
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИО.Фамилия);
		ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИО.Имя);
		ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИО.Отчество);
		
	Иначе
		ПараметрыВыгрузки.Вставить("ИННОрг", СокрЛП(СведенияОбОрганизации.ИННЮЛ));
		ПараметрыВыгрузки.Вставить("КППОрг", СокрЛП(СведенияОбОрганизации.КППЮЛ));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоИП);
	
	ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	СформироватьИдФайл(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ДатаУтвОтч", Неопределено);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ПараметрыПредставляемыхОтчетов(Организация, ДатаВыгрузки)
	
	ОтправлятьОперацииПоБанковскимСчетам = Ложь;
	ОтправлятьОСВПоСчетам = Ложь;
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиОтчетностиВБанк.СоздатьМенеджерЗаписи();
	НастройкиОтправки.Организация = Организация;
	НастройкиОтправки.Прочитать();
	
	Если НастройкиОтправки.Выбран() Тогда
		ОтправлятьОперацииПоБанковскимСчетам = НастройкиОтправки.ОтправлятьОтчеты;
		ОтправлятьОСВПоСчетам = НастройкиОтправки.ОтправлятьОСВПоСчетам;
		СчетаОСВПоСчетам = НастройкиОтправки.СчетаОСВПоСчетам.Получить();
	КонецЕсли;
	
	ПараметрыОтчетов = Новый Структура;
	
	ПараметрыОтчета = ПараметрыПредставляемыхОтчетов_ОперацииПоБанковскимСчетам(ДатаВыгрузки, ОтправлятьОперацииПоБанковскимСчетам);
	ПараметрыОтчетов.Вставить("БанковскиеОперации", ПараметрыОтчета);
	
	ПараметрыОтчета = ПараметрыПредставляемыхОтчетов_ОСВПоСчетам(ДатаВыгрузки, ОтправлятьОСВПоСчетам, СчетаОСВПоСчетам);
	ПараметрыОтчетов.Вставить("ОСВПоСчетам", ПараметрыОтчета);
	
	Возврат ПараметрыОтчетов;
	
КонецФункции

Функция ПараметрыПредставляемыхОтчетов_ОперацииПоБанковскимСчетам(ДатаВыгрузки, ОтправлятьОтчет)
	
	Если День(ДатаВыгрузки) < 5 Тогда
		// Отложенное выполнение задания
		НачалоПериода = ДобавитьМесяц(НачалоМесяца(ДатаВыгрузки), -14);
	Иначе
		НачалоПериода = ДобавитьМесяц(НачалоМесяца(ДатаВыгрузки), -13);
	КонецЕсли;
	
	КонецПериода = КонецМесяца(ДобавитьМесяц(НачалоПериода, 12));
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода", КонецПериода);
	ПараметрыОтчета.Вставить("Отправлять", ОтправлятьОтчет);
	ПараметрыОтчета.Вставить("ПериодРегистрацииОтправки",
		Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПараметрыПредставляемыхОтчетов_ОСВПоСчетам(ДатаВыгрузки, ОтправлятьОтчет, СчетаОтчета)
	
	// Оборотно-сальдовые ведомости по счетам
	Периоды = Новый Массив;
	
	ГодВыгрузки = Год(ДатаВыгрузки);
	
	ПериодРегистрацииОтправки = Неопределено;
	
	Если ДатаВыгрузки >= Дата(ГодВыгрузки, 4, 30) И ДатаВыгрузки < Дата(ГодВыгрузки, 7, 31) Тогда
		// 1 квартал текущего года
		НачалоПериода = Дата(ГодВыгрузки, 1, 1);
		КонецПериода  = КонецКвартала(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		ПериодРегистрацииОтправки = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
		
	ИначеЕсли ДатаВыгрузки >= Дата(ГодВыгрузки, 7, 31) И ДатаВыгрузки < Дата(ГодВыгрузки, 10, 31) Тогда
		// 2 квартал текущего года
		НачалоПериода = Дата(ГодВыгрузки, 4, 1);
		КонецПериода  = КонецКвартала(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		ПериодРегистрацииОтправки = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
		
		// 6 месяцев текущего года
		НачалоПериода = НачалоГода(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		
	ИначеЕсли ДатаВыгрузки >= Дата(ГодВыгрузки, 10, 31) И ДатаВыгрузки <= Дата(ГодВыгрузки, 12, 31) Тогда
		// 3 квартал текущего года
		НачалоПериода = Дата(ГодВыгрузки, 7, 1);
		КонецПериода  = КонецКвартала(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		ПериодРегистрацииОтправки = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
		
		// 9 месяцев текущего года
		НачалоПериода = НачалоГода(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		
	ИначеЕсли ДатаВыгрузки >= Дата(ГодВыгрузки, 1, 1) И ДатаВыгрузки < Дата(ГодВыгрузки, 3, 31) Тогда
		// 3 квартал предшествующего года
		НачалоПериода = Дата(ГодВыгрузки - 1 , 7, 1);
		КонецПериода  = КонецКвартала(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		ПериодРегистрацииОтправки = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
		
		// 9 месяцев предшествующего года
		НачалоПериода = НачалоГода(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		
	ИначеЕсли ДатаВыгрузки >= Дата(ГодВыгрузки, 3, 31) И ДатаВыгрузки < Дата(ГодВыгрузки, 4, 30) Тогда
		// 4 квартал предшествующего года
		НачалоПериода = Дата(ГодВыгрузки - 1 , 10, 1);
		КонецПериода  = КонецКвартала(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		ПериодРегистрацииОтправки = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
		
		// 12 месяцев предшествующего года
		НачалоПериода = НачалоГода(НачалоПериода);
		Периоды.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));
		
	КонецЕсли;
	
	Счета = Новый Массив;
	Если ОтправлятьОтчет Тогда
		Если СчетаОтчета = Неопределено Тогда
			Счета = СчетаОСВПоСчетам();
		Иначе
			Счета = СчетаОтчета;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Периоды", Периоды);
	ПараметрыОтчета.Вставить("Счета", Счета);
	ПараметрыОтчета.Вставить("Отправлять", ОтправлятьОтчет);
	ПараметрыОтчета.Вставить("ПериодРегистрацииОтправки", ПериодРегистрацииОтправки);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ЗаполнитьСведенияПодписантов(ПараметрыВыгрузки)
	
	ПараметрыВыгрузки.Вставить("ПрПодп", "1");
	
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  "Без");
	ПараметрыВыгрузки.Вставить("ПодпИмя",      "подписи");
	ПараметрыВыгрузки.Вставить("ПодпОтчество", "");
	
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
	
КонецПроцедуры

Процедура СформироватьИдФайл(ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
		ИНН = ПараметрыВыгрузки.ИННФЛ;
		КПП = "000000000";
	Иначе
		ИНН = ПараметрыВыгрузки.ИННОрг;
		КПП = ПараметрыВыгрузки.КППОрг;
	КонецЕсли;
	
	ГодОтчета = Формат(ПараметрыВыгрузки.КонецОтчетногоПериода, "ДФ=гггг");
	КварталОтчета = Строка(Месяц(КонецКвартала(ПараметрыВыгрузки.КонецОтчетногоПериода)) / 3) + "Q";
	
	МоментВыгрузки = Формат(ПараметрыВыгрузки.ДатаВыгрузки, "ДФ=yyyyMMddHHmmss");
	
	ИдФайл = ИНН + "_" + КПП
	       + "_" + ГодОтчета + "_" + КварталОтчета
	       + "_" + МоментВыгрузки + "_TR";
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдФайл);
	
КонецПроцедуры

Процедура ВывестиГоловныеУзлыПакета(Компоновщик, ПараметрыВыгрузки) Экспорт
	
	Компоновщик.ЗаписатьНачалоЭлемента("Файл");
	
	ВывестиАтрибут(Компоновщик, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ВывестиАтрибут(Компоновщик, "ИдФайл",   ПараметрыВыгрузки.ИдФайл);
	ВывестиАтрибут(Компоновщик, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	ВывестиАтрибут(Компоновщик, "ВерсФорм", ПараметрыВыгрузки.ВерсФорм);
	
	Компоновщик.ЗаписатьНачалоЭлемента("Документ");
	
	ВывестиАтрибут(Компоновщик, "КНД", "0710099");
	ВывестиАтрибут(Компоновщик, "ДатаДок", ПараметрыВыгрузки.ДатаДок);
	ВывестиНеобязательныйАтрибут(Компоновщик, "ДатаУтвОтч", ПараметрыВыгрузки.ДатаУтвОтч);
	ВывестиАтрибут(Компоновщик, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	ВывестиСведенияОНалогоплательщике(Компоновщик, ПараметрыВыгрузки);
	ВывестиСведенияОПодписанте(Компоновщик, ПараметрыВыгрузки);
	
	Если ДействуетСВерсииФормата("5.11.01", ПараметрыВыгрузки.ВерсФорм) Тогда
		ВывестиУзел_БухгалтерскиеСчета(Компоновщик);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗавершающиеУзлыПакета(Компоновщик) Экспорт
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Документ
	
	Компоновщик.ЗаписатьКонецЭлемента(); // Файл
	
КонецПроцедуры

Процедура ВывестиСведенияОНалогоплательщике(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("СвНП");
	
	Если ПараметрыВыгрузки.Свойство("ИННФЛ") Тогда
		Компоновщик.ЗаписатьНачалоЭлемента("НПФЛ");
		
		ВывестиАтрибут(Компоновщик, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ);
		
		Компоновщик.ЗаписатьНачалоЭлемента("ФИО");
		
		ВывестиАтрибут(Компоновщик, "Фамилия", ПараметрыВыгрузки.ФЛФамилия);
		ВывестиАтрибут(Компоновщик, "Имя", ПараметрыВыгрузки.ФЛИмя);
		ВывестиНеобязательныйАтрибут(Компоновщик, "Отчество", ПараметрыВыгрузки.ФЛОтчество);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ФИО
		
		Компоновщик.ЗаписатьКонецЭлемента(); // НПФЛ
		
	Иначе
		Компоновщик.ЗаписатьНачалоЭлемента("НПЮЛ");
		
		ВывестиАтрибут(Компоновщик, "НаимОрг", ПараметрыВыгрузки.НаимОрг);
		ВывестиАтрибут(Компоновщик, "НаимОргКраткое", ПараметрыВыгрузки.НаимОргКраткое);
		ВывестиАтрибут(Компоновщик, "ИННЮЛ", ПараметрыВыгрузки.ИННОрг);
		ВывестиАтрибут(Компоновщик, "КПП", ПараметрыВыгрузки.КППОрг);
		
		Компоновщик.ЗаписатьКонецЭлемента(); // НПЮЛ
		
	КонецЕсли;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СвНП
	
КонецПроцедуры

Процедура ВывестиСведенияОПодписанте(Компоновщик, ПараметрыВыгрузки)
	
	Компоновщик.ЗаписатьНачалоЭлемента("Подписант");
	
	ВывестиАтрибут(Компоновщик, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
	
	Компоновщик.ЗаписатьНачалоЭлемента("ФИО");
	
	ВывестиАтрибут(Компоновщик, "Фамилия", ПараметрыВыгрузки.ПодпФамилия);
	ВывестиАтрибут(Компоновщик, "Имя", ПараметрыВыгрузки.ПодпИмя);
	ВывестиНеобязательныйАтрибут(Компоновщик, "Отчество", ПараметрыВыгрузки.ПодпОтчество);
	
	Компоновщик.ЗаписатьКонецЭлемента();
	Компоновщик.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВывестиУзел_БухгалтерскиеСчета(Компоновщик) Экспорт
	
	ДеревоСчетов = ОтчетностьВБанкиСлужебный.ДеревоСчетовБУ();
	
	Если ДеревоСчетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("БухгалтерскиеСчета");
	
	СтрокиУровня1 = ДеревоСчетов.Строки;
	
	Для Каждого Выборка1Уровня Из СтрокиУровня1 Цикл
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		ВывестиАтрибут(Компоновщик, "Код", Выборка1Уровня.Код, "Т,8");
		ВывестиАтрибут(Компоновщик, "Наименование", Выборка1Уровня.Наименование, "Т,120");
		ВывестиАтрибут(Компоновщик, "Тип", Выборка1Уровня.Вид, "Т,2");
		
		СтрокиУровня2 = Выборка1Уровня.Строки;
		
		Для Каждого Выборка2Уровня Из СтрокиУровня2 Цикл
			Если Выборка2Уровня.Ссылка = Выборка1Уровня.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Компоновщик.ЗаписатьНачалоЭлемента("СубСчет");
			
			ВывестиАтрибут(Компоновщик, "Код", Выборка2Уровня.Код, "Т,8");
			ВывестиАтрибут(Компоновщик, "Наименование", Выборка2Уровня.Наименование, "Т,120");
			ВывестиАтрибут(Компоновщик, "Тип", Выборка2Уровня.Вид, "Т,2");
			
			СтрокиУровня3 = Выборка2Уровня.Строки;
			
			Для Каждого Выборка3Уровня Из СтрокиУровня3 Цикл
				Если Выборка3Уровня.Ссылка = Выборка2Уровня.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				Компоновщик.ЗаписатьНачалоЭлемента("СубСубСчет");
				
				ВывестиАтрибут(Компоновщик, "Код", Выборка3Уровня.Код, "Т,8");
				ВывестиАтрибут(Компоновщик, "Наименование", Выборка3Уровня.Наименование, "Т,120");
				ВывестиАтрибут(Компоновщик, "Тип", Выборка3Уровня.Вид, "Т,2");
				
				Компоновщик.ЗаписатьКонецЭлемента(); // СубСубСчет
				
			КонецЦикла;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // СубСчет
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // БухгалтерскиеСчета
	
КонецПроцедуры

#Область ВыводОСВПоСчетам

Процедура ВывестиУзлы_ОСВПоСчетам(Компоновщик, ПараметрыВыгрузки)
	
	Организация = ПараметрыВыгрузки.Организация;
	ПараметрыОтчета = ПараметрыВыгрузки.ПараметрыОтчетов.ОСВПоСчетам;
	
	Если НЕ ПараметрыОтчета.Отправлять Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Период Из ПараметрыОтчета.Периоды Цикл
		НачалоПериода = Период.НачалоПериода;
		КонецПериода =  Период.КонецПериода;
		
		Компоновщик.ЗаписатьНачалоЭлемента("ОСВПоСчетам");
		
		АтрибутыПериода = АтрибутыПериода(НачалоПериода, КонецПериода);
		
		ВывестиАтрибут(Компоновщик, "Период",   АтрибутыПериода.КодПериода);
		ВывестиАтрибут(Компоновщик, "ОтчетГод", АтрибутыПериода.ГодПериода);
		ВывестиАтрибут(Компоновщик, "ОКЕИ", "383");
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
		
		Для Каждого Счет Из ПараметрыОтчета.Счета Цикл
			ПараметрыЗаполнения.Вставить("Счет", Счет);
			
			СведенияОСВПоСчету = СведенияОСВПоСчету(ПараметрыЗаполнения);
			
			ВывестиСтраницуВУзел_ОСВПоСчетам_ОСВПоСчету(Компоновщик, Счет, СведенияОСВПоСчету);
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // ОСВПоСчетам
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСтраницуВУзел_ОСВПоСчетам_ОСВПоСчету(Компоновщик, ВыгружаемыйСчет, СведенияОСВПоСчету)
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОСВПоСчету");
	
	ВывестиАтрибут(Компоновщик, "КодСчета", ВыгружаемыйСчет.Код);
	ВывестиАтрибут(Компоновщик, "НаименованиеСчета", ВыгружаемыйСчет.Наименование);
	
	ВыборкаПоСчетам = СведенияОСВПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		ВыводимыйСубсчет = ВыборкаПоСчетам.Счет;
		
		Компоновщик.ЗаписатьНачалоЭлемента("Счет");
		
		ВывестиАтрибут(Компоновщик, "КодСчета", ВыборкаПоСчетам.КодСчета, "Т,8");
		
		ВывестиАтрибут(Компоновщик, "СНД", ВыборкаПоСчетам.СНД, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СНК", ВыборкаПоСчетам.СНК, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "ДО",  ВыборкаПоСчетам.ДО,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "КО",  ВыборкаПоСчетам.КО,  "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКД", ВыборкаПоСчетам.СКД, "Ч,15,2");
		ВывестиАтрибут(Компоновщик, "СКК", ВыборкаПоСчетам.СКК, "Ч,15,2");
		
		ВыборкаПоСубконто1 = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСубконто1.Следующий() Цикл
			Если ВыборкаПоСубконто1.Субконто1 <> Null Тогда
				Компоновщик.ЗаписатьНачалоЭлемента("Субконто1");
				
				Субконто1Выведено = Ложь;
				ПредставлениеСубконто1 = ВыборкаПоСубконто1.ПредставлениеСубконто1;
				
				ВыборкаПоСубконто2 = ВыборкаПоСубконто1.Выбрать();
				Если ВыборкаПоСубконто2.Количество() = 0 Тогда
					ВывестиАтрибутыУзла_ОСВПоСчетам_ОСВПоСчету_Субконто(Компоновщик, ВыборкаПоСубконто1, ПредставлениеСубконто1, 1);
					Субконто1Выведено = Истина;
				КонецЕсли;
				
				Пока ВыборкаПоСубконто2.Следующий() Цикл
					Если НЕ Субконто1Выведено Тогда
						ПредставлениеСубконто1 = ВыборкаПоСубконто2.ПредставлениеСубконто1;
						ВывестиАтрибутыУзла_ОСВПоСчетам_ОСВПоСчету_Субконто(Компоновщик, ВыборкаПоСубконто1, ПредставлениеСубконто1, 1);
						Субконто1Выведено = Истина;
					КонецЕсли;
					
					Если ВыборкаПоСубконто2.Субконто2Оборотное
					   И ВыборкаПоСубконто2.ДО = 0 И ВыборкаПоСубконто2.КО = 0 Тогда
						// Пропуск строка с остатками по субконто 1 для группировки.
						Продолжить;
					КонецЕсли;
					
					Если Субконто1Выведено И ВыборкаПоСубконто2.Субконто2 <> Null Тогда
						Компоновщик.ЗаписатьНачалоЭлемента("Субконто2");
						
						ПредставлениеСубконто2 = ВыборкаПоСубконто2.ПредставлениеСубконто2;
						ВывестиАтрибутыУзла_ОСВПоСчетам_ОСВПоСчету_Субконто(Компоновщик, ВыборкаПоСубконто2, ПредставлениеСубконто2, 2);
						
						Компоновщик.ЗаписатьКонецЭлемента(); // Субконто2
						
					КонецЕсли;
					
				КонецЦикла;
				
				Компоновщик.ЗаписатьКонецЭлемента(); // Субконто1
				
			КонецЕсли;
			
		КонецЦикла;
		
		Компоновщик.ЗаписатьКонецЭлемента(); // Счет
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ОСВПоСчету
	
КонецПроцедуры

Процедура ВывестиАтрибутыУзла_ОСВПоСчетам_ОСВПоСчету_Субконто(Компоновщик, ВыборкаПоСубконто,
	Знач ПредставлениеСубконто, НомерСубконто)
	
	ПредставлениеСубконто = ПредставлениеСубконтоИННКПП(ВыборкаПоСубконто, ПредставлениеСубконто, НомерСубконто);
	
	ВывестиАтрибут(Компоновщик, "Представление", ПредставлениеСубконто, "Т,1000");
	ВывестиАтрибут(Компоновщик, "ТипСубконто", Строка(ТипЗнч(ВыборкаПоСубконто["Субконто" + НомерСубконто])), "Т,100");
	ВывестиНеобязательныйАтрибут(Компоновщик, "ИНН", ИННКонтрагентаПоСубконто(ВыборкаПоСубконто, НомерСубконто), "Т,12");
	
	ВывестиАтрибут(Компоновщик, "СНД", ВыборкаПоСубконто.СНД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СНК", ВыборкаПоСубконто.СНК, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ДО",  ВыборкаПоСубконто.ДО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "КО",  ВыборкаПоСубконто.КО,  "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКД", ВыборкаПоСубконто.СКД, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СКК", ВыборкаПоСубконто.СКК, "Ч,15,2");
	
КонецПроцедуры

Функция СведенияОСВПоСчету(Параметры)
	
	СведенияОСВПоСчету = Неопределено;
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьСведенияОСВПоСчету(Параметры, СведенияОСВПоСчету);
	
	Возврат СведенияОСВПоСчету;
	
КонецФункции

Функция ПредставлениеСубконтоИННКПП(Выборка, ПредставлениеСубконто, НомерСубконто)
	
	ПредставлениеИНН = СокрЛП(Выборка["Субконто" + НомерСубконто + "ИНН"]);
	ПредставлениеКПП = СокрЛП(Выборка["Субконто" + НомерСубконто + "КПП"]);
	
	Если ЗначениеЗаполнено(ПредставлениеИНН) И ЗначениеЗаполнено(ПредставлениеКПП)
	   И СтрДлина(ПредставлениеИНН) = 10 И СтрДлина(ПредставлениеКПП) = 9 Тогда
		// Корректно указанные ИНН и КПП юридического лица.
		ПредставлениеСубконто = ПредставлениеСубконто
		                      + " " + ПредставлениеИНН
		                      + " " + ПредставлениеКПП;
		
	ИначеЕсли ЗначениеЗаполнено(ПредставлениеИНН) И СтрДлина(ПредставлениеИНН) = 12 Тогда
		// Корректно указанный ИНН физического лица.
		ПредставлениеСубконто = ПредставлениеСубконто
		                      + " " + ПредставлениеИНН;
		
	КонецЕсли;
	
	Возврат ПредставлениеСубконто;
	
КонецФункции

Функция ИННКонтрагентаПоСубконто(Выборка, НомерСубконто)
	
	ИНН = "";
	
	ИмяКолонкиИНН = "Субконто" + НомерСубконто + "ИНН";
	
	Если Выборка.Владелец().Колонки.Найти(ИмяКолонкиИНН) <> Неопределено Тогда
		ПредставлениеИНН = СокрЛП(Выборка[ИмяКолонкиИНН]);
		
		Если ЗначениеЗаполнено(ПредставлениеИНН)
		   И (СтрДлина(ПредставлениеИНН) = 10 ИЛИ СтрДлина(ПредставлениеИНН) = 12) Тогда
			ИНН = ПредставлениеИНН;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИНН;
	
КонецФункции

#КонецОбласти

#Область ВыводОперацийПоБанковскимСчетам

Процедура ВывестиУзел_ОперБанкСч(Компоновщик, ПараметрыВыгрузки)
	
	Организация     = ПараметрыВыгрузки.Организация;
	ПараметрыОтчета = ПараметрыВыгрузки.ПараметрыОтчетов.БанковскиеОперации;
	
	Если НЕ ПараметрыОтчета.Отправлять Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ПараметрыОтчета.НачалоПериода;
	КонецПериода =  ПараметрыОтчета.КонецПериода;
	
	Компоновщик.ЗаписатьНачалоЭлемента("ОперБанкСч");
	
	// Код периода задается по последнему месяцу
	АтрибутыПериода = АтрибутыПериода(НачалоМесяца(КонецПериода), КонецПериода);
	
	ВывестиАтрибут(Компоновщик, "Период",   АтрибутыПериода.КодПериода);
	ВывестиАтрибут(Компоновщик, "ОтчетГод", АтрибутыПериода.ГодПериода);
	ВывестиАтрибут(Компоновщик, "ОКЕИ",       "383");
	
	ПараметрыЗапросаСведений = Новый Структура;
	ПараметрыЗапросаСведений.Вставить("Организация", Организация);
	ПараметрыЗапросаСведений.Вставить("НачалоПериода", НачалоДня(НачалоПериода));
	ПараметрыЗапросаСведений.Вставить("КонецПериода", КонецДня(КонецПериода));
	
	СведенияОбОперациях = СведенияОбОперацияхПоБанковскимСчетам(ПараметрыЗапросаСведений);
	
	СводныеСведения = СведенияОбОперациях.Расчетные.СводныеСведения;
	ДетальныеСведения = СведенияОбОперациях.Расчетные.ДетальныеСведения;
	ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, СводныеСведения, ДетальныеСведения);
	
	СводныеСведения = СведенияОбОперациях.Валютные.СводныеСведения;
	ДетальныеСведения = СведенияОбОперациях.Валютные.ДетальныеСведения;
	ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, СводныеСведения, ДетальныеСведения);
	
	СводныеСведения = СведенияОбОперациях.Специальные.СводныеСведения;
	ДетальныеСведения = СведенияОбОперациях.Специальные.ДетальныеСведения;
	ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, СводныеСведения, ДетальныеСведения);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ОперБанкСч
	
КонецПроцедуры

Процедура ВывестиУзел_ОперБанкСч_СчетУчета(Компоновщик, СводныеСведения, ДетальныеСведения)
	
	СтрокаСчетаВерхнегоУровня = СводныеСведения.Строки[0];
	
	Компоновщик.ЗаписатьНачалоЭлемента("СчетУчета");
	
	ВывестиАтрибут(Компоновщик, "КодСчета",        СтрокаСчетаВерхнегоУровня.Представление);
	ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчетаВерхнегоУровня.СальдоНачальноеДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыДт",       СтрокаСчетаВерхнегоУровня.ОборотыДт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "ОборотыКт",       СтрокаСчетаВерхнегоУровня.ОборотыКт, "Ч,15,2");
	ВывестиАтрибут(Компоновщик, "СальдоКонечное",  СтрокаСчетаВерхнегоУровня.СальдоКонечноеДт, "Ч,15,2");
	
	ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, СтрокаСчетаВерхнегоУровня.Строки, ДетальныеСведения);
	
	Компоновщик.ЗаписатьКонецЭлемента(); // СчетУчета
	
КонецПроцедуры

Процедура ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, СтрокиСчетов, ДетальныеСведения)
	
	ОписаниеТипаБанковскиеСчета = ОтчетностьВБанкиСлужебный.ТипыСущности("БанковскиеСчета");
	
	ВыборкаПоБанковскимСчетам = ДетальныеСведения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСчета Из СтрокиСчетов Цикл
		Если ОписаниеТипаБанковскиеСчета.СодержитТип(ТипЗнч(СтрокаСчета.Счет)) Тогда
			Компоновщик.ЗаписатьНачалоЭлемента("БанкСч");
			
			ВывестиНеобязательныйАтрибут(Компоновщик, "Наименование", СтрокаСчета.Представление, "Т,100");
			ВывестиАтрибут(Компоновщик, "Номер", СтрокаСчета.НомерСчета, "Т,34");
			ВывестиАтрибут(Компоновщик, "БИК", СтрокаСчета.БИКБанка, "Т,9");
			ВывестиНеобязательныйАтрибут(Компоновщик, "Банк", СтрокаСчета.НаименованиеБанка, "Т,100");
			
			Если СтрокаСчета.Валютный Тогда
				ВывестиАтрибут(Компоновщик, "Валюта", СтрокаСчета.КодВалюты, "Т,3");
			КонецЕсли;
			
			ВывестиАтрибут(Компоновщик, "СальдоНачальное", СтрокаСчета.СальдоНачальноеДт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ОборотыДт"      , СтрокаСчета.ОборотыДт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "ОборотыКт"      , СтрокаСчета.ОборотыКт, "Ч,15,2");
			ВывестиАтрибут(Компоновщик, "СальдоКонечное" , СтрокаСчета.СальдоКонечноеДт, "Ч,15,2");
			
			Если СтрокаСчета.Валютный Тогда
				ВывестиАтрибут(Компоновщик, "СальдоНачальноеВал", СтрокаСчета.СальдоНачальноеВалДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыДтВал"      , СтрокаСчета.ОборотыВалДт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "ОборотыКтВал"      , СтрокаСчета.ОборотыВалКт, "Ч,15,2");
				ВывестиАтрибут(Компоновщик, "СальдоКонечноеВал" , СтрокаСчета.СальдоКонечноеВалДт, "Ч,15,2");
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("БанковскийСчет", СтрокаСчета.Счет);
			ВыборкаПоБанковскимСчетам.Сбросить();
			Если ВыборкаПоБанковскимСчетам.НайтиСледующий(СтруктураПоиска) Тогда
				ВыборкаОпераций = ВыборкаПоБанковскимСчетам.Выбрать();
				Пока ВыборкаОпераций.Следующий() Цикл
					СтрокаСекции = ВыборкаОпераций;
					
					Компоновщик.ЗаписатьНачалоЭлемента("Операция");
					
					ТипДокумента = Строка(ТипЗнч(СтрокаСекции.Документ));
					ИдДокумента = СтрокаСекции.Документ.УникальныйИдентификатор();
					
					ВывестиАтрибут(Компоновщик, "ТипДок", ТипДокумента, "Т,255");
					ВывестиАтрибут(Компоновщик, "ИдДок", ИдДокумента, "Т,36");
					
					ВывестиАтрибут(Компоновщик, "Дата", СтрокаСекции.ДатаОперации, "Д");
					Если ЗначениеЗаполнено(СтрокаСекции.НомерДокумента)
					   И ЗначениеЗаполнено(СтрокаСекции.ДатаДокумента) Тогда
						ВывестиНеобязательныйАтрибут(Компоновщик, "ДокНомер", СтрокаСекции.НомерДокумента, "Т,255");
						ВывестиНеобязательныйАтрибут(Компоновщик, "ДокДата", СтрокаСекции.ДатаДокумента, "Д");
					КонецЕсли;
					
					ВывестиНеобязательныйАтрибут(Компоновщик, "ВидОперации", СтрокаСекции.ВидОперации, "Т,255");
					ВывестиНеобязательныйАтрибут(Компоновщик, "Назначение", СтрокаСекции.Назначение, "Т,255");
					
					ВывестиАтрибут(Компоновщик, "ВидДвижения", СтрокаСекции.ВидДвиженияПоСчету, "Ч,1,0");
					
					ВывестиАтрибут(Компоновщик, "СчетДт", СтрокаСекции.СчетДтКод, "Т,8");
					ВывестиАтрибут(Компоновщик, "СчетКт", СтрокаСекции.СчетКтКод, "Т,8");
					ВывестиАтрибут(Компоновщик, "Сумма", СтрокаСекции.Сумма, "Ч,15,2");
					
					Если СтрокаСчета.Валютный Тогда
						ВывестиАтрибут(Компоновщик, "СуммаВал", СтрокаСекции.СуммаВал, "Ч,15,2");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСекции.Контрагент) Тогда
						Компоновщик.ЗаписатьНачалоЭлемента("Контрагент");
						
						ВывестиАтрибут(Компоновщик, "Наименование", СтрокаСекции.Контрагент, "Т,250");
						
						Если ЗначениеЗаполнено(СтрокаСекции.ИНН) Тогда
							Если СтрДлина(СтрокаСекции.ИНН) = 10 И СтрДлина(СтрокаСекции.КПП) = 9 Тогда
								ВывестиАтрибут(Компоновщик, "ИНН", СтрокаСекции.ИНН, "Т,10");
								ВывестиАтрибут(Компоновщик, "КПП", СтрокаСекции.КПП, "Т,9");
								
							ИначеЕсли СтрДлина(СтрокаСекции.ИНН) = 12 Тогда
								ВывестиАтрибут(Компоновщик, "ИНН", СтрокаСекции.ИНН, "Т,12");
								
							КонецЕсли;
							
						КонецЕсли;
						
						ВывестиНеобязательныйАтрибут(Компоновщик, "Договор", СтрокаСекции.Договор, "Т,255");
						
						ВывестиНеобязательныйАтрибут(Компоновщик, "НомерСчета", СтрокаСекции.СчетКонтрагентаНомер, "Т,34");
						ВывестиНеобязательныйАтрибут(Компоновщик, "БИК", СтрокаСекции.СчетКонтрагентаБИК, "Т,9");
						
						Компоновщик.ЗаписатьКонецЭлемента(); // Контрагент
						
					КонецЕсли;
					
					Компоновщик.ЗаписатьКонецЭлемента(); // Операция
					
				КонецЦикла;
				
			КонецЕсли;
			
			Компоновщик.ЗаписатьКонецЭлемента(); // БанкСч
			
		Иначе
			ВывестиУзел_ОперБанкСч_СчетУчета_БанкСч(Компоновщик, СтрокаСчета.Строки, ДетальныеСведения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОбОперацияхПоБанковскимСчетам(Параметры)
	
	СведенияОбОперациях = Новый Структура;
	СведенияОбОперациях.Вставить("Расчетные",   Новый Структура("СчетУчета, СводныеСведения, ДетальныеСведения"));
	СведенияОбОперациях.Вставить("Валютные",    Новый Структура("СчетУчета, СводныеСведения, ДетальныеСведения"));
	СведенияОбОперациях.Вставить("Специальные", Новый Структура("СчетУчета, СводныеСведения, ДетальныеСведения"));
	
	ОтчетностьВБанкиСлужебныйПереопределяемый.ЗаполнитьСведенияОбОперацияхПоБанковскимСчетам(Параметры, СведенияОбОперациях);
	
	Возврат СведенияОбОперациях;
	
КонецФункции

#КонецОбласти

#Область КомпоновщикXML

Функция НовыйКомпоновщикXML(ИмяФайла, Кодировка = "windows-1251")
	
	КомпоновщикXML = Новый ЗаписьXML();
	КомпоновщикXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	Возврат КомпоновщикXML;
	
КонецФункции

Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция АтрибутыПериода(НачалоПериода, КонецПериода)
	
	АтрибутыПериода = Новый Структура;
	
	АтрибутыПериода.Вставить("ГодПериода", Формат(Год(КонецПериода), "ЧЦ=4; ЧВН=; ЧГ=0"));
	
	КодПериода = "00"; // нестандартный период
	
	ЭтоМесяц = (НачалоПериода = НачалоМесяца(КонецПериода));
	ЭтоКвартал = (НачалоПериода = НачалоКвартала(КонецПериода));
	ЭтоПериодСНачалаГода = (НачалоПериода = НачалоГода(КонецПериода));
	
	Если ЭтоМесяц Тогда
		КодыМесяцев = СтрРазделить("35,36,21,38,39,31,41,42,33,44,45,34", ",", Ложь);
		КодПериода = КодыМесяцев[Месяц(КонецПериода) - 1];
		
	ИначеЕсли ЭтоКвартал Тогда
		КодыКварталов = СтрРазделить("51,52,54,56", ",", Ложь);
		НомерКвартала = Месяц(КонецКвартала(КонецПериода)) / 3;
		КодПериода = КодыКварталов[НомерКвартала - 1];
		
	ИначеЕсли ЭтоПериодСНачалаГода Тогда
		КодыПериодовСНачалаГода = СтрРазделить("51,53,55,57", ",", Ложь); // 3 месяца совпадают с 1 кварталом
		НомерКвартала = Месяц(КонецКвартала(КонецПериода)) / 3;
		КодПериода = КодыПериодовСНачалаГода[НомерКвартала - 1];
		
	КонецЕсли;
	
	АтрибутыПериода.Вставить("КодПериода", КодПериода);
	
	Возврат АтрибутыПериода;
	
КонецФункции

Функция ДействуетСВерсииФормата(Знач НомерВерсии, Знач ВерсияОтчета) Экспорт
	
	НомерВерсии  = Число(СтрЗаменить(НомерВерсии, ".", ""));
	ВерсияОтчета = Число(СтрЗаменить(ВерсияОтчета, ".", ""));
	
	Возврат (ВерсияОтчета >= НомерВерсии);
	
КонецФункции

#КонецОбласти

#КонецОбласти
