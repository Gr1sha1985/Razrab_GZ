#Область ПрограммныйИнтерфейс

// Показывает установку права просмотра основного номера держателя карты 
// для текущего пользователя на момент выполнения текущей строчки кода.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право просмотра основного номера держателя карты. 
//           Если в момент выполнения метода установлен привилегированный режим, 
//           то всегда возвращается Истина
//
Функция РазрешенПросмотрПолногоНомераКарты() Экспорт
	Возврат	Справочники.БанковскиеКартыКонтрагентов.РазрешенПросмотрОсновногоНомераДержателяКарты()
КонецФункции

// Возвращает маскированный номер карты (первые 6 и 4 последних цифры номера, остальное - *).
//
// Параметры:
//   Карта - СправочникСсылка.БанковскиеКартыКонтрагентов - карта, номер которой нужно получить
//
// Возвращаемое значение:
//  Строка - маскированный номер карты.
//
Функция МаскированныйНомерКарты(Знач Карта) Экспорт
	Если ТипЗнч(Карта) = Тип("СправочникСсылка.БанковскиеКартыКонтрагентов") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Карта, "Код");
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(ТипЗнч(Карта)));
	КонецЕсли;	
КонецФункции

// Возвращает маскированные номера карт (первые 6 и 4 последних цифры номера, остальное - *).
//
// Параметры:
//   Карты - Массив из СправочникСсылка.БанковскиеКартыКонтрагентов, 
//           ФиксированныйМассив из СправочникСсылка.БанковскиеКартыКонтрагентов - карты, номера которых нужно получить.
//
// Возвращаемое значение:
//  Соответствие:
//      * Ключ     - СправочникСсылка.БанковскиеКартыКонтрагентов, 
//      * Значение - Строка.
//
Функция МаскированныеНомераКарт(Знач Карты) Экспорт
	Если ТипЗнч(Карты) = Тип("Массив") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Карты, "Код");
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(ТипЗнч(Карты)));
	КонецЕсли;	
КонецФункции

// Возвращает полный номер карты (основной номер держателя карты).
//
// Параметры:
//   Карта - СправочникСсылка.БанковскиеКартыКонтрагентов - карта, номер которой нужно получить
//
// Возвращаемое значение:
//  Строка - полный номер карты.
//
Функция ПолныйНомерКарты(Знач Карта) Экспорт
	Если ТипЗнч(Карта) = Тип("СправочникСсылка.БанковскиеКартыКонтрагентов") Тогда
		Возврат Справочники.БанковскиеКартыКонтрагентов.ОсновнойНомерДержателяКарты(Карта);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(ТипЗнч(Карта)));
	КонецЕсли;	
КонецФункции

// Возвращает полные номера карт (основные номера держателей карт).
//
// Параметры:
//   Карты - Массив из СправочникСсылка.БанковскиеКартыКонтрагентов, 
//           ФиксированныйМассив из СправочникСсылка.БанковскиеКартыКонтрагентов - карты, номера которых нужно получить.
//
// Возвращаемое значение:
//  Соответствие:
//      * Ключ     - СправочникСсылка.БанковскиеКартыКонтрагентов, 
//      * Значение - Строка.
//
Функция ПолныеНомераКарт(Знач Карты) Экспорт
	Если ТипЗнч(Карты) = Тип("Массив") Тогда
		Возврат Справочники.БанковскиеКартыКонтрагентов.ОсновныеНомераДержателейКарт(Карты);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(ТипЗнч(Карты)));
	КонецЕсли;	
КонецФункции

// Показывает, что является ли карта национальным платежным инструментом (картой «Мир»).
// Если передана ссылка, то результат определяется значением свойства ЭтоНациональныйПлатежныйИнструмент элемента.
// Если указана строка, то результат вычисляется по БИН переданного номера карты.
//
// Параметры:
//   Карта - СправочникСсылка.БанковскиеКартыКонтрагентов - карта
//         - Строка - полный номер карты (основной номер держателя карты)
//
// Возвращаемое значение:
//  Булево - Истина, если карта является национальным платежным инструментом (картой «Мир»). 
//
Функция ЭтоНациональныйПлатежныйИнструмент(Знач Карта) Экспорт
	Если ТипЗнч(Карта) = Тип("Строка") Тогда
		Возврат БанковскиеКартыСлужебныйКлиентСервер.ЭтоНомерНациональногоПлатежногоИнструмента(Карта);
	ИначеЕсли ТипЗнч(Карта) = Тип("СправочникСсылка.БанковскиеКартыКонтрагентов") Тогда
		Возврат Справочники.БанковскиеКартыКонтрагентов.ЭтоНациональныйПлатежныйИнструмент(Карта);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(ТипЗнч(Карта)));
	КонецЕсли;	
КонецФункции

// Добавляет в хранилище новую банковскую карту с указанным номером или реквизитами.
// Если у владельца уже есть карта с указанным номером, то обновляется существующий элемент справочника.
// Если действующая карта с указанным номером уже зарегистрирована на другого держателя, то возникнет исключение.
//
// Параметры:
//   ДержательКарты - Справочник.ФизическиеЛица - держатель карты.
//   Карта          - Строка    - полный номер карты (основной номер держателя карты)
//                  - Структура, ФиксированнаяСтруктура - основные реквизиты карты, может содержать свойства:
//                  	* ОсновнойНомерДержателяКарты     - Строка - Основной номер держателя карты;        
//                  	* ИмяДержателяКарты               - Строка - Имя держателя карты (эмбоссированный текст);         
//                  	* ДатаИстеченияСрокаДействияКарты - Дата   - Дата истечения срока действия карты         
//   Свойства       - Структура, ФиксированнаяСтруктура - свойства карты, может содержать свойства:
//                  	* ЭтоНациональныйПлатежныйИнструмент - Булево;        
//                  	* ЭтоМеждународнаяПлатежнаяКарта     - Булево;        
//
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеКартыКонтрагентов - созданная карта. 
//
Функция Добавить(Знач ДержательКарты, Знач Карта, Знач Свойства = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДержательКарты) Тогда
		ВызватьИсключение НСтр("ru='Не указан держатель карты'")
	КонецЕсли;
	
	Если ТипЗнч(ДержательКарты) <> Тип("СправочникСсылка.БанковскиеКартыКонтрагентов") Тогда
		ВызватьИсключение 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверный тип значения параметра ДержательКарты (%1)'"), Строка(ТипЗнч(Карта)));
	КонецЕсли;
	
	ОсновныеРеквизитыКарты = Справочники.БанковскиеКартыКонтрагентов.ОсновныеРеквизитыКарты();
	
	Если ТипЗнч(Карта) = Тип("Строка") Тогда
		ОсновныеРеквизитыКарты.ОсновнойНомерДержателяКарты = Карта;
	ИначеЕсли ТипЗнч(Карта) = Тип("Структура") И Карта.Свойство("ОсновнойНомерДержателяКарты") Тогда
		ЗаполнитьЗначенияСвойств(ОсновныеРеквизитыКарты, Карта);
	Иначе
		ВызватьИсключение 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверный тип значения параметра Карта (%1)'"), Строка(ТипЗнч(Карта)));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОсновныеРеквизитыКарты.ОсновнойНомерДержателяКарты) Тогда
		ВызватьИсключение НСтр("ru='Не указан номер карты'")
	КонецЕсли;
	
	Возврат Справочники.БанковскиеКартыКонтрагентов.Добавить(ДержательКарты, ОсновныеРеквизитыКарты, Свойства, Ложь);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.БанковскиеКартыКонтрагентов, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	Описание = Описание + "
	|Справочник.БанковскиеКартыКонтрагентов.Чтение.ГруппыФизическихЛиц
	|Справочник.БанковскиеКартыКонтрагентов.Изменение.ГруппыФизическихЛиц";
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	Справочники.БанковскиеКартыКонтрагентов.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных.
Процедура ЗаполнитьОбластиПерсональныхДанных(ОбластиПерсональныхДанных) Экспорт
	НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
	НоваяОбласть.Имя = "ЛичныеДанные";
	НоваяОбласть.Представление = НСтр("ru = 'Личные данные'");
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами
//
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.БанковскиеКартыКонтрагентов.ПолноеИмя(), "");
КонецПроцедуры

#КонецОбласти

#КонецОбласти
