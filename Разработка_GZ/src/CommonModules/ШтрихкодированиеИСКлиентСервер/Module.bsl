#Область ПрограммныйИнтерфейс

// Возвращает сокращенное представление штрихкода маркируемой продукции
//
// Параметры:
//  Штрихкод - Строка - Штрихкод
// Возвращаемое значение:
//  Строка - Краткое представление штрихкода маркируемой продукции
Функция ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	ПредставлениеШтрихкода = Штрихкод;
	Если СтрДлина(ПредставлениеШтрихкода) > 40 Тогда
		Если СтрНайти(Штрихкод, "(") = 1 Тогда
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 37) + "...";
		Иначе
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 5) + "....." + Прав(ПредставлениеШтрихкода, 8);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

// Определяет принадлежность имени объекта к контексту.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка, ОбработкаМенеджер - контекст.
//  ИмяОбъекта - Строка - Имя объекта.
// Возвращаемое значение:
//  Булево - Истина, если имя объекта принадлежит контексту.
Функция ЭтоКонтекстОбъекта(Контекст, Знач ИмяОбъекта) Экспорт
	
	ДанныеОбъекта = Ложь;
	ЭтоФорма      = Ложь;
	Разделитель   = ".";
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ЭтоФорма       = Истина;
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Контекст.ИмяФормы, Разделитель);
		ИмяФормы       = МассивПодстрок[0] + Разделитель + МассивПодстрок[1];
		
	Иначе
		
		ДанныеОбъекта         = Истина;
		МассивПодстрок    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъекта, Разделитель);
		
		Если МассивПодстрок[0] <> "Документ" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивПодстрок[0] = МассивПодстрок[0] + "Ссылка";
		ИмяОбъекта = СтрСоединить(МассивПодстрок, Разделитель);
		
	КонецЕсли;
	
	Возврат ЭтоФорма И ИмяФормы = ИмяОбъекта Или ДанныеОбъекта И ТипЗнч(Контекст.Ссылка) = Тип(ИмяОбъекта);
	
КонецФункции

// Включает в параметрах сканирования обработку штрихкодов номенклатуры, не относящейся к библиотеке
// 
// Параметры:
//   ПараметрыСканирования - см. БазовыеПараметрыСканирования
//
Процедура ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования) Экспорт
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Структура параметров, необходимых для открытия формы считывания кода маркировки.
//
// Возвращаемое значение:
//  Структура - требуемые параметры:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС
// * МаркируемаяПродукция - Булево - Истина, если продукция маркируемая
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
// * ДанныеШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода
// * Документ - Произвольный - Ссылка на текущий документ
// * РазрешатьДобавлениеБезКодаМарки - Булево - разрешать добавление строки при отказе от ввода кода маркировки
//
Функция ПараметрыОткрытияФормыВводаКодаМаркировки() Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Номенклатура",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("Характеристика",                  Неопределено);
	ПараметрыОткрытияФормы.Вставить("Серия",                           Неопределено);
	ПараметрыОткрытияФормы.Вставить("ВидПродукции",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция",            Истина);
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования",           Неопределено);
	ПараметрыОткрытияФормы.Вставить("ДанныеШтрихкода",                 Неопределено);
	ПараметрыОткрытияФормы.Вставить("Документ",                        Неопределено);
	ПараметрыОткрытияФормы.Вставить("РазрешатьДобавлениеБезКодаМарки", Истина);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

// Инициализирует и возвращает общие параметры сканирования для всех видов продукции.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы
// * СсылкаНаОбъект - ЛюбаяСсылка, Неопределено - Ссылка на объект из которого выполняется сканирование кодов маркировки
// * ИмяКолонкиШтрихкодУпаковки - Строка - Имя колонки хранения штрихкода упаковки в табличной части ИмяТабличнойЧастиШтрихкодыУпаковок
// * ИмяТабличнойЧастиШтрихкодыУпаковок - Строка - Наименование табличной части, где хранятся элементы штрихкодов упаковок
// * Склад - ОпределяемыйТип.Склад - Место хранения
// * Организация - ОпределяемыйТип.Организация - Организация
// * Владелец - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация или контргент (используется в механизме контроля кодов маркировки)
// * ДопустимыйСпособВводаВОборот - ПеречислениеСсылка.СпособыВводаВОборотСУЗ, Неопределено - Допустимый способ ввода в оборот (используется в механизме контроля кодов маркировки)
// * СтатусКодаМаркировкиПоУмолчанию - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки по-умолчанию (используется в механизме контроля кодов маркировки)
// * ПараметрыУказанияСерий - Структура, Неопределено - Произвольные параметры указания серий (может использоваться в конфигурации-потребителе)
// * ОперацияКонтроляАкцизныхМарок - Строка - Доступные типы: "Продажа", "Возврат". "Продажа" - для документов, которые
//                                            отражает расход по складу, "Возврат" - для документов, отражающих приход.
// * ПроверятьДублиКодовМаркировки - Строка - Вариант проверки дублей кодов маркировки
// * КонтрольУникальностиКодовМаркировки - Булево - Признак необходимости контроля дублей кодов маркировки
// * ДополнительныеПараметры - Структура - Параметры необходимые для переопределения обработки прикладных объектов
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево - Истина, если данные выбора по маркируемой продукции используются
// * ДанныеВыбораПоМаркируемойПродукции - Структура, Неопределено - последние данные выбора, которые требовалось запомнить для последующего сканирования
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево - Признак наличия в форме дерева упаковок (только формы проверки и подбора)
// * АдресДанныхДокументаОснования - Строка, Неопределено - адрес во временном хранилище, где хранятся данные документа основания
// * КонтрольРасхожденийСДокументомОснованием - Булево - Истина, если необходимо выполнять контроль и сообщать
//                                                       об ошибках в случае несоответствия документу-основанию.
// * КэшированныеЗначения - Произвольный - Произвольная структура данных для кэширования значений
// * ТолькоМаркируемаяПродукция - Булево - Истина, если документ поддерживает работу только с маркируемой продукцией
// * ВозможнаЗагрузкаТСД - Булево - Истина, если контекст поддерживает работу с ТСД
// * ДокументОснование - ДокументСсылка, Неопределено - Ссылка на документ-основание
// * СоздаватьШтрихкодУпаковки - Булево - Если флаг установлен, то в момент сканирования кода маркировки создается запись в справочнике ШтрихкодыУпаковокТоваров
// * АдресСоответствияАкцизныхМарок - Строка, Неопределено - адрес во временном хранилище, где хранятся обработанные данные по штрихкодам
// * ДопустимыеВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Допустимые виды продукции, которые поддерживает контекст
// * ОтборПоВидуПродукции - Булево - Признак необходимости отбора кодов маркировки по виду продукции.
//                                   Используется при открытии форм проверки из документов конфигурации-потребителя
//                                   или при получении списка кодов маркировки из документов конфигурации-потребителя.
//                                   В документе конфигурации-потребителя может содержаться множество разных видов продукции.
// * КэшМаркируемойПродукции - Соответствие, Неопределено - Используется для защиты от повторного сканирования кодов маркировки
// * РазрешенаОбработкаБезУказанияМарки - Булево - Признак возможности работы с товарами без указания кодов маркировки.
//                                                 Используется в формах сканирования кодов маркировки.
//                                                 Если флаг не установлен, то команда "Добавить без кода маркировки" скрывается.
// * РазрешенаОбработкаКодовСПустойНоменклатурой - Булево - Признак возможности обработки кодов маркировки без указания номенклатуры
// * РазрешеноЗапрашиватьКодМаркировки - Булево - Признак необходимости открытия формы сканирования кода маркировки после сканирования GTIN.
// * СопоставлятьНоменклатуру - Булево - Признак возможности сопоставления номенклатуры после сканирования кода маркировки.
// * ДоступнаПечатьЭтикеток - Булево - Признак доступности печати этикеток после сканирования EAN (Потоковая печать)
// * ДополнительныеВариантыСопоставленияНоменклатуры - Соответствие Из КлючИЗначение:
//    ** Ключ - Строка - Штрихкод EAN
//    ** Значение - Массив Из Структура:
//        *** Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//        *** Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
//        *** Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры
// * ДанныеТаблицыТовары - Неопределено - Данные таблицы товары
// * РазрешенаОбработкаНеНайденныхЛогистическихУпаковок - Булево - Параметр используется в формах проверки и подбора в случае если документ
//                                                                 поддерживает операции агрегации.
// * ПоддерживаютсяОперацииАгрегации - Булево - Параметр работает в паре с параметром РазрешенаОбработкаНеНайденныхЛогистическихУпаковок.
//                                              Если для документ поддерживает операции агрегации, то в форме проверки разрешено работать
//                                              с пустыми упаковками.
// * КонтрольПустыхУпаковок - Булево - Признак необходимости контроля пустых упаковок при операциях сканирования.
//                                     Контроль выполняется для групповых и логистических упаковок.
// * ВыводитьСообщенияОбОшибках - Булево - Ложь, если вывод сообщений об ошибках запрещен
// * ПроверятьАлфавитКодовМаркировки - Булево - Признак необходимости проверки алфавита кодов маркировки
// * КонтролироватьСтандартнуюВложенность - Булево - Признак необходимости контроля стандартной вложенности
// * ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД - Булево - Истина, если необходимо пропускать коды маркировки с ошибками при работе с ТСД
// * ДетализацияСтруктурыХранения - ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Детализация данных сканирования.
Функция БазовыеПараметрыСканирования() Экспорт
	
	БазовыеПараметры = Новый Структура;
	
	БазовыеПараметры.Вставить("ДопустимыеВидыПродукции",                         Новый Массив);
	БазовыеПараметры.Вставить("ОтборПоВидуПродукции",                            Ложь);
	БазовыеПараметры.Вставить("КэшМаркируемойПродукции",                         Неопределено);
	БазовыеПараметры.Вставить("СоздаватьШтрихкодУпаковки",                       Истина);
	БазовыеПараметры.Вставить("ДокументОснование",                               Неопределено);
	БазовыеПараметры.Вставить("ВозможнаЗагрузкаТСД",                             Ложь);
	БазовыеПараметры.Вставить("ТолькоМаркируемаяПродукция",                      Ложь);
	БазовыеПараметры.Вставить("КэшированныеЗначения",                            Неопределено);
	БазовыеПараметры.Вставить("АдресДанныхДокументаОснования",                   Неопределено);
	БазовыеПараметры.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева",   Ложь);
	БазовыеПараметры.Вставить("ДанныеВыбораПоМаркируемойПродукции",              Неопределено);
	БазовыеПараметры.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции",  Ложь);
	БазовыеПараметры.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры", Неопределено); // только для формы проверки и подбора
	БазовыеПараметры.Вставить("ДополнительныеПараметры",                         Новый Структура);
	БазовыеПараметры.Вставить("ОперацияКонтроляАкцизныхМарок",                   "");
	БазовыеПараметры.Вставить("ПараметрыУказанияСерий",                          Неопределено);
	БазовыеПараметры.Вставить("Склад",                                           Неопределено);
	БазовыеПараметры.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",              "АкцизныеМарки");
	БазовыеПараметры.Вставить("ИмяКолонкиШтрихкодУпаковки",                      "АкцизнаяМарка");
	БазовыеПараметры.Вставить("КонтрольРасхожденийСДокументомОснованием",        Ложь);
	БазовыеПараметры.Вставить("РазрешенаОбработкаБезУказанияМарки",              Ложь);
	БазовыеПараметры.Вставить("РазрешеноЗапрашиватьКодМаркировки",               Истина);
	БазовыеПараметры.Вставить("СопоставлятьНоменклатуру",                        Истина);
	БазовыеПараметры.Вставить("Организация",                                     Неопределено);
	БазовыеПараметры.Вставить("ДоступнаПечатьЭтикеток",                          Ложь);
	БазовыеПараметры.Вставить("ДопустимыйСпособВводаВОборот",                    Неопределено);
	БазовыеПараметры.Вставить("ИдентификаторФормы",                              Неопределено);
	БазовыеПараметры.Вставить("Владелец",                                        Неопределено);
	БазовыеПараметры.Вставить("СтатусКодаМаркировкиПоУмолчанию",                 Неопределено);
	БазовыеПараметры.Вставить("ПроверятьДублиКодовМаркировки",                   "НеПроверять");
	БазовыеПараметры.Вставить("ДанныеТаблицыТовары",                             Неопределено);
	БазовыеПараметры.Вставить("СсылкаНаОбъект",                                  Неопределено);
	БазовыеПараметры.Вставить("КонтрольУникальностиКодовМаркировки",             Истина);
	БазовыеПараметры.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой",     Ложь);
	БазовыеПараметры.Вставить("ДетализацияСтруктурыХранения",                    ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПустаяСсылка"));
	
	// Параметр работает в паре с параметром РазрешенаОбработкаНеНайденныхЛогистическихУпаковок.
	// Если для документ поддерживает операции агрегации, то в форме проверки разрешено работать
	// с пустыми упаковками.
	БазовыеПараметры.Вставить("ПоддерживаютсяОперацииАгрегации", Ложь);
	// Признак необходимости контроля пустых упаковок при операциях сканирования.
	// Контроль выполняется для групповых и логистических упаковок.
	БазовыеПараметры.Вставить("КонтрольПустыхУпаковок", Истина);
	// Параметр используется в формах проверки и подбора в случае если документ
	// поддерживает операции агрегации
	БазовыеПараметры.Вставить("РазрешенаОбработкаНеНайденныхЛогистическихУпаковок", Ложь);
	
	БазовыеПараметры.Вставить("ВыводитьСообщенияОбОшибках",                Истина);
	БазовыеПараметры.Вставить("ПроверятьАлфавитКодовМаркировки",           Истина);
	БазовыеПараметры.Вставить("КонтролироватьСтандартнуюВложенность",      Ложь);
	БазовыеПараметры.Вставить("ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД", Ложь);
	
	Возврат БазовыеПараметры;
	
КонецФункции

// Выполняет заполнение базовых параметров сканирования на основании данных контекста.
//  * Заполнение данных выбора (есть реквизит на форме, не выполняется групповая обработка)
//  * Заполнение кеша маркируемой продукции
//  * Заполнение параметров указания серий.
// 
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//  Контекст - ФормаКлиентскогоПриложения, ЛюбаяСсылка - контекст, данные которого будут использованы для заполнения параметров сканирования.
Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ПараметрыСканирования.Вставить("ИдентификаторФормы", Контекст.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ДанныеВыбораПоМаркируемойПродукции") Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Контекст.ДанныеВыбораПоМаркируемойПродукции;
			ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "КэшМаркируемойПродукции") Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = Контекст.КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
		КонецЕсли;
		
	КонецЕсли;
	
	ИсточникДанных = Контекст;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Склад") Тогда
		ПараметрыСканирования.Склад = ИсточникДанных.Склад;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
		ПараметрыСканирования.Владелец    = ИсточникДанных.Организация;
		ПараметрыСканирования.Организация = ИсточникДанных.Организация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНеобходимостьУточненияДанных(ДанныеШтрихкода) Экспорт
	
	Если ДанныеШтрихкода.Свойство("ТребуетсяВыборНоменклатуры")
		И ДанныеШтрихкода.ТребуетсяВыборНоменклатуры
		И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		ДанныеШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
	КонецЕсли;
	
	Если ДанныеШтрихкода.Свойство("ТребуетсяВыборСерии")
		И ДанныеШтрихкода.ТребуетсяВыборСерии
		И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ДанныеШтрихкода.ТребуетсяВыборСерии = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку и кэширование выбора данных после уточнения информации по продукции в диалоговом окне.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - источник вызова.
//  ДанныеВыбора    - Структура                  - Данные сохраненного выбора.
//  ЗапомнитьВыбор  - Булево                     - Истина, если необходимо запомнить выбор.
//
Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Знач ДанныеВыбора, Знач ЗапомнитьВыбор = Неопределено) Экспорт

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДанныеВыбораПоМаркируемойПродукции") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапомнитьВыбор = Неопределено Тогда
		// В качестве данных выбора пришли данные штрихкода после обработки
		Если ДанныеВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// Разбор пришедшей структуры на составляющие Данные выбора / Запомнить выбор
		ДанныеВыбора = ДанныеВыбора.ДополнительныеПараметры;
		Если ТипЗнч(ДанныеВыбора) <> Тип("Структура") Тогда
			Возврат;
		ИначеЕсли Не ДанныеВыбора.Свойство("ЗапомнитьВыбор", ЗапомнитьВыбор) Тогда
			Возврат;
		ИначеЕсли ЗапомнитьВыбор И Не ДанныеВыбора.Свойство("ДанныеВыбора", ДанныеВыбора) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапомнитьВыбор Тогда
		Форма.ДанныеВыбораПоМаркируемойПродукции = ДанныеВыбора;
	Иначе 
		Форма.ДанныеВыбораПоМаркируемойПродукции = Неопределено;
	КонецЕсли;
	
	Форма.СохраненВыборПоМаркируемойПродукции = ЗапомнитьВыбор;
	ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
	
КонецПроцедуры

// Формирует представление сохраненного выбора маркируемой продукции после уточнения информации в диалоговом окне.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма для отображения настроек
Процедура ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ГруппаПредставлениеСохраненногоВыбора") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Форма.ДанныеВыбораПоМаркируемойПродукции;
	
	Если Не Форма.СохраненВыборПоМаркируемойПродукции Тогда
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Ложь;
		
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Сохранен выбор:'"));
		МассивСтрок.Добавить(" ");
		
		ТребуетсяЗапятая = Ложь;
		Если ДанныеВыбора.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Номенклатура), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
		ИначеЕсли ДанныеВыбора.Свойство("ПредставлениеНоменклатуры") И ЗначениеЗаполнено(ДанныеВыбора.ПредставлениеНоменклатуры) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ДанныеВыбора.ПредставлениеНоменклатуры,,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеВыбора.Характеристика) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Характеристика), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьХарактеристику"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Серия") И ЗначениеЗаполнено(ДанныеВыбора.Серия) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Серия), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьСерию"));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ПричинаПеремаркировки")
			И ЗначениеЗаполнено(ДанныеВыбора.ПричинаПеремаркировки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			ТекстПредставления = СтрШаблон("причина: %1", ДанныеВыбора.ПричинаПеремаркировки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПредставления,,));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ДобавлятьНовуюУпаковку") И ДанныеВыбора.ДобавлятьНовуюУпаковку Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'добавлять пустые упаковки'"),,));
		КонецЕсли;
				
		Если ДанныеВыбора.Свойство("ШаблонЭтикетки") И ЗначениеЗаполнено(ДанныеВыбора.ШаблонЭтикетки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			ТекстПредставления = СтрШаблон("шаблон этикетки: %1", ДанныеВыбора.ШаблонЭтикетки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ТекстПредставления,, Форма.ЦветТекстаПоля,, "ОткрытьШаблонЭтикетки"));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("СразуНаПринтер") И ДанныеВыбора.СразуНаПринтер Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'сразу на принтер'"),,));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ИдентификаторПроисхожденияВЕТИС") И ЗначениеЗаполнено(ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС), Ложь),,
				Форма.ЦветТекстаПоля,, ПолучитьНавигационнуюСсылку(ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС)));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ГоденДо") И ЗначениеЗаполнено(ДанныеВыбора.ГоденДо) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			ПредставлениеСрокаГодности = ?(ДанныеВыбора.Свойство("Скоропортящаяся") И ДанныеВыбора.Скоропортящаяся,
				Формат(ДанныеВыбора.ГоденДо, "ДФ='dd.MM.yyyy HH '; ДЛФ=;"), Формат(ДанныеВыбора.ГоденДо, "ДФ='dd.MM.yyyy'; ДЛФ=;"));
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Срок годности: %1'"), ПредставлениеСрокаГодности));
		КонецЕсли;
		
		МассивСтрок.Добавить(". (");
		
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Сбросить'"),
					Новый Шрифт(,,,,Истина),
					Форма.ЦветГиперссылки,,
					"СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции"));
		
		МассивСтрок.Добавить(")");
		
		Форма.ПредставлениеСохраненногоВыбора = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет допустимость обработки вида продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования)
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// Возвращаемое значение:
//  Булево - Истина, если вид продукции допустим.
Функция ДопустимВидПродукции(ПараметрыСканирования, ВидПродукцииИС) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
КонецФункции

// Выполняет проверку на формат GS1. Если штрихкод является штрихкодом GS1 - приводит к формату со скобками.
//
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - Значение штрихкода.
Функция ШтрихкодВФорматеGS1(Штрихкод) Экспорт
	
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
		
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Выполняет проверку на соответствие алфавиту кода маркировки.
//
// Параметры:
//  Код - Строка - Код маркировки.
//  Алфавит - Строка - перечень допустимых символов.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует алфавиту.
Функция КодСоответствуетАлфавиту(Код, Алфавит) Экспорт
	
	ДлинаКода = СтрДлина(Код);
	
	Индекс = 1;
	Пока Индекс <= ДлинаКода Цикл
		
		ПроверяемыйСимвол = Сред(Код, Индекс, 1);
		
		Если СтрНайти(Алфавит, ПроверяемыйСимвол) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  Штрихкод - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(Знач Штрихкод) Экспорт
	
	Если Лев(Штрихкод, 1) = "0" Тогда
		Штрихкод = Сред(Штрихкод, 2); //EAN13
		Если Лев(Штрихкод, 5) = "00000" Тогда
			Штрихкод = Сред(Штрихкод, 6); //EAN8
		КонецЕсли;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция GTINПоШтрихкодуEAN(Знач ШтрихкодEAN) Экспорт
	
	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

Процедура ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода) Экспорт
	
	Если Не ДанныеШтрихкода.Свойство("ФорматBase64")
		Или (ДанныеШтрихкода.Свойство("ФорматBase64")
		И ДанныеШтрихкода.ФорматBase64 = Ложь) Тогда
		
		ДанныеШтрихкода.Штрихкод = ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
		ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода, СохранитьШтрихкодBase64 = Ложь) Экспорт
	
	Если ДанныеШтрихкода.Свойство("ФорматBase64")
		И ДанныеШтрихкода.ФорматBase64 = Истина Тогда
		
		ШтрихкодBase64 = ДанныеШтрихкода.Штрихкод;
		
		ДанныеШтрихкода.Штрихкод = Base64ВШтрихкод(ШтрихкодBase64);
		ДанныеШтрихкода.ФорматBase64 = Ложь;
		
		Если СохранитьШтрихкодBase64 Тогда
			ДанныеШтрихкода.Вставить("ШтрихкодBase64", ШтрихкодBase64);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция Base64ВШтрихкод(Знач ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Кодирует значение штрихкода по алгоритму Base64.
// 
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - штрихкод закодированный по алгоритму Base64.
Функция ШтрихкодВBase64(Знач Штрихкод) Экспорт
	
	ДвоичныеДанные  = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
	ШтрихкодВBase64 = ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(ДвоичныеДанные);
	
	Возврат ШтрихкодВBase64;
	
КонецФункции

// Получает значение перечисления типа штрихкода по строке 
// 
// Параметры:
// 	ТипШтрихкодаСтрокой - Строка - тип штрихкода (например, Code128Формат1, GS1128, GS1DataBarExpandedStacked)
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - тип шаблона
Функция ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрокой) Экспорт
	
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
				Или ТипШтрихкодаСтрокой = "Code128Формат2" 
				Или ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128");	
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1_DataBarExpandedStacked" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked");
	ИначеЕсли ТипШтрихкодаСтрокой = "PDF417" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417");
	ИначеЕсли ТипШтрихкодаСтрокой = "QR" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.QR");
	ИначеЕсли ТипШтрихкодаСтрокой = "DataMatrix" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix");
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN13" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.EAN13");
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1128" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128");
	Иначе
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

// Возвращает параметры открытия формы уточнения данных у пользователя, таких как "Номенклатура", "Характеристика", "Серия".
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// * Склад - ОпределяемыйТип.Склад - Склад, используемый для серий.
// * ПараметрыУказанияСерий - Структура - данные для расчета серий.
// * ШтрихкодEAN - Строка - Штрихкода формата EAN.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Элемент Характеристика.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Элемент Номенклатура.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш кода маркировки.
Функция ПараметрыОткрытияФормыУточненияДанных() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Операция",                               Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыСканирования",                  Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеДляУточненияСведенийПользователя", Неопределено);
	
	ПараметрыОткрытия.Вставить("КодМаркировки",                    Неопределено);
	ПараметрыОткрытия.Вставить("ТипШтрихкода",                     Неопределено);
	ПараметрыОткрытия.Вставить("Номенклатура",                     Неопределено);
	ПараметрыОткрытия.Вставить("Характеристика",                   Неопределено);
	ПараметрыОткрытия.Вставить("ШтрихкодEAN",                      Неопределено);
	ПараметрыОткрытия.Вставить("GTIN",                             Неопределено);
	ПараметрыОткрытия.Вставить("Серия",                            Неопределено);
	ПараметрыОткрытия.Вставить("РежимПечатиЭтикеток",              Ложь);
	ПараметрыОткрытия.Вставить("ВозвращатьШаблонПриПечати",        Ложь);
	ПараметрыОткрытия.Вставить("ШаблонКодаМаркировки",             Неопределено);
	ПараметрыОткрытия.Вставить("ШаблонЭтикетки",                   Неопределено);
	ПараметрыОткрытия.Вставить("СразуНаПринтер",                   Ложь);
	ПараметрыОткрытия.Вставить("Шаблоны",                          Неопределено);
	ПараметрыОткрытия.Вставить("Документ",                         Неопределено);
	ПараметрыОткрытия.Вставить("ХешСуммаКодаМаркировки",           Неопределено);
	ПараметрыОткрытия.Вставить("ПредставлениеНоменклатуры",        Неопределено);
	
	// Групповая товарная или логистическая упаковка без коэффициента и уточнения состава
	ПараметрыОткрытия.Вставить("УточнитьКоэффициент",              Ложь);
	
	// Реквизиты молочной продукции ВетИС
	ПараметрыОткрытия.Вставить("ИдентификаторПроисхожденияВЕТИС",  Неопределено);
	ПараметрыОткрытия.Вставить("ИдентификаторыПроисхожденияВЕТИС", Неопределено);
	ПараметрыОткрытия.Вставить("Скоропортящаяся",                  Ложь);
	ПараметрыОткрытия.Вставить("ГоденДо",                          '00010101');
	
	// Режим подбора из заполненных строк документа
	ПараметрыОткрытия.Вставить("РежимПодбораИзДокумента",          Ложь);
	ПараметрыОткрытия.Вставить("РежимПроизвольногоВвода",          Истина);
	ПараметрыОткрытия.Вставить("ДанныеДокумента",                  Новый Массив);
	// Режим произвольного редактирования
	ПараметрыОткрытия.Вставить("ПроизвольноеРедактированиеРеквизитов", Ложь);
	// Для уточнения упаковок
	ПараметрыОткрытия.Вставить("АдресДереваУпаковок",              "");
	// Новый механизм - отдаем результат обработки кода маркировки
	ПараметрыОткрытия.Вставить("КодМаркировкиДляУточнения", Неопределено);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Определяет является ли штрихкод кодом ввода остатков.
// 
// Параметры:
//  Штрихкод                     - Строка - штрихкод в формате EAN, GTIN или код маркировки.
//  ТолькоВСоставеКодаМаркировки - Булево - Признак проверки наличия GTIN остатков
//                                          только в составе кода маркировки.
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодов ввода остатков.
Функция ЭтоШтрихкодВводаОстатков(Штрихкод, ТолькоВСоставеКодаМаркировки = Ложь) Экспорт
	
	Если СтрНачинаетсяС(Штрихкод, "(") Тогда
		Возврат Сред(Штрихкод,5,3) = "029"; //Код маркировки со скобками
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) > 14 Тогда
		Если СтрНачинаетсяС(Штрихкод, "029") Тогда
			Возврат МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Лев(Штрихкод, 14)); // Табачная пачка
		КонецЕсли;
		Возврат Лев(Штрихкод, 5) = "01029"; // Код маркировки без скобок.
	КонецЕсли;
	
	Если ТолькоВСоставеКодаМаркировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) = 13 Тогда
		Возврат Лев(Штрихкод, 2) = "29"; // Штрихкод EAN.
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) = 14 Тогда
		Возврат Лев(Штрихкод, 3) = "029"; // Штрихкод GTIN.
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Определяет является ли штрихкод внутренним штрих-кодом EAN.
//
//Параметры:
//   Штрихкод - Строка - штрихкод в формате EAN, GTIN или код маркировки.
//
//Возвращаемое значение:
//   Булево - Истина, если штрихкод является внутренним.
Функция ЭтоВнутреннийШтрихкод(Штрихкод) Экспорт
	
	Если СтрДлина(Штрихкод) = 13 Тогда
		Возврат Лев(Штрихкод, 1) = "2"; // Штрихкод EAN.
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) = 14 Тогда
		Возврат Лев(Штрихкод, 2) = "02"; // Штрихкод GTIN.
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Определяет является ли штрихкод штрих-кодом GTIN.
//
//Параметры:
//   Штрихкод - Строка - отсканированный штрихкод
//
//Возвращаемое значение:
//   Булево - Истина, если штрихкод в формате EAN8, EAN13, GTIN14
//
Функция ЭтоEANИлиGTIN(Штрихкод) Экспорт
	
	ТипШтрихкодаСтрокой = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаСтрокой = "ITF14" Тогда
		Возврат Истина;
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN13" Тогда 
		Возврат Истина;
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN8" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Если код маркировки соответствует формату GS1 и может принадлежать альтернативной табачной продукции,
// то вид упаковки в некототорых случаях может быть пустым и принадлежать как потребительской, так и групповой упаковкам.
//
// Параметры:
//   ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Вид упаковки
//   ДанныеРазбора - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
// Возвращаемое значение:
//   Булево - Истина, если Вид упаковки - групповая или если групповая упаковка возможна по данным разбора
Функция ВозможнаГрупповаяУпаковка(ВидУпаковки, ДанныеРазбора) Экспорт
	
	Если ЗначениеЗаполнено(ВидУпаковки) Тогда
		Возврат (ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	КонецЕсли;
	
	Если ДанныеРазбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ДанныеРазбора.ВидыПродукции Цикл
		Если Не ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
			ВидПродукции, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"), ДанныеРазбора) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботасСохраненнымВыбором

Функция ТребуетсяСброситьСохраненныйВыбор(ДанныеВыбора, ДанныеШтрихкода) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(ДанныеВыбора.GTIN) И ДанныеШтрихкода.GTIN <> ДанныеВыбора.GTIN Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		Если ДанныеШтрихкода.Номенклатура <> ДанныеВыбора.Номенклатура Тогда
			Возврат Истина;
		ИначеЕсли ДанныеШтрихкода.Характеристика <> ДанныеВыбора.Характеристика Тогда
			Возврат Истина;
		ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.Серия) И ДанныеШтрихкода.Серия <> ДанныеВыбора.Серия Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка однородности состава кода маркировки
	СохраненныеПоля = ПроверяемыеПоляСоставаКодаМаркировки();
	СохраненныйСостав = ДанныеВыбора.СоставКодаМаркировки;
	Если СохраненныйСостав <> Неопределено Тогда
		Для Каждого Признак Из СохраненныеПоля Цикл
			СохраненныеПоля[Признак.Ключ] = СохраненныйСостав.Свойство(Признак.Ключ) И ЗначениеЗаполнено(СохраненныйСостав[Признак.Ключ]);
		КонецЦикла;
	КонецЕсли;
	ВходящиеПоля = ПроверяемыеПоляСоставаКодаМаркировки();
	ВходящийСостав = ДанныеШтрихкода.СоставКодаМаркировки;
	Если ВходящийСостав <> Неопределено Тогда
		Для Каждого Признак Из ВходящиеПоля Цикл
			ВходящиеПоля[Признак.Ключ] = ВходящийСостав.Свойство(Признак.Ключ) И ЗначениеЗаполнено(ВходящийСостав[Признак.Ключ]);
		КонецЦикла;
	КонецЕсли;
	Для Каждого Признак Из СохраненныеПоля Цикл
		Если Признак.Значение
			И Не (ВходящиеПоля[Признак.Ключ] И СохраненныйСостав[Признак.Ключ]=ВходящийСостав[Признак.Ключ]) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверяемыеПоляСоставаКодаМаркировки()
	Результат = Новый Структура;
	Результат.Вставить("МРЦСтрокой", Ложь);
	Результат.Вставить("ГоденДо", Ложь);
	Результат.Вставить("Скоропортящаяся", Ложь);
	Результат.Вставить("КодАлкогольнойПродукции", Ложь);
	Возврат Результат;
КонецФункции

#КонецОбласти

