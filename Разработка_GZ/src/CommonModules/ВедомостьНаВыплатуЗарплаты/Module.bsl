////////////////////////////////////////////////////////////////////////////////
// Ведомости на выплату зарплаты.
// Процедуры и функции объектов и менеджеров.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает вид места выплаты для указанной ведомости.
//
// Параметры:
//  Ведомость - ДокументСсылка
//            - ДокументОбъект
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
Функция ВидМестаВыплатыПоДокументу(Ведомость) Экспорт
	Если Метаданные.ОпределяемыеТипы.ВедомостьНаВыплатуЗарплаты.Тип.СодержитТип(ТипЗнч(Ведомость.Ссылка)) Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка);
		Возврат МенеджерДокумента.ВидМестаВыплаты(Ведомость)
	Иначе
		Возврат Неопределено
	КонецЕсли	
КонецФункции	

// Возвращает менеджер ведомости на выплату зарплаты, соответствующий указанному виду места выплаты.
//
// Параметры:
//  ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение:
//  ДокументМенеджер
//
Функция МенеджерДокументаПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.МенеджерДокументаПоВидуМестаВыплаты(ВидМестаВыплаты)
КонецФункции

#Область ОплатаВедомостей

// Регистрация оплаты ведомостей.
//
// Параметры:
//	ПлатежныйДокумент - ДокументОбъект - платежный документ.
//	Организация       - СправочникСсылка.Организации - организация, выплачивающая зарплату.
//	Ведомости         - Массив - оплачиваемые ведомости (ОпределяемыйТип.ВедомостьЗарплатаКадры)  
//	ФизическиеЛица    - Массив - физические лица (СправочникСсылка.ФизическиеЛица), получившие выплаты по ведомостям 
//	ДатаОперации      - Дата   - дата фактического выполнения оплаты. 
//	                    Если не указана, используется дата платежного документа.
//	Отказ             - Булево - признак отказа от выполнения операции.
//
Процедура ЗарегистрироватьОплату(
	ПлатежныйДокумент, 
	Организация, 
	Ведомости, 
	ФизическиеЛица = Неопределено, 
	ДатаОперации = Неопределено, 
	Отказ = Ложь) Экспорт
	
	Если Ведомости.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	// Для ведомостей с признаком ввода начальных данных регистрировать оплату не нужно
	ВводНачальныхДанныхВедомостей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ведомости, "ВводНачальныхДанных");
	ВедомостиВводаНачальныхДанных = Новый Массив;
	Для Каждого ВводНачальныхДанныхВедомости Из ВводНачальныхДанныхВедомостей Цикл
		Если ВводНачальныхДанныхВедомости.Значение Тогда
			ВедомостиВводаНачальныхДанных.Добавить(ВводНачальныхДанныхВедомости.Ключ);
		КонецЕсли;
	КонецЦикла;
	РегистрируемыеВедомости = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Ведомости, ВедомостиВводаНачальныхДанных);

	Если РегистрируемыеВедомости.Количество() = 0 Тогда
		Возврат
	КонецЕсли;	
	
	// регистрация в бухгалтерских взаиморасчетах
	ЗарегистрироватьОплатуВВзаиморасчетах(
		ПлатежныйДокумент, 
		Организация, 
		Ведомости, 
		ФизическиеЛица, 
		ДатаОперации, 
		Отказ);
	
	// регистрация удержания налога
	ЗарегистрироватьОплатуВУчетеНДФЛ(
		ПлатежныйДокумент, 
		Организация, 
		Ведомости, 
		ФизическиеЛица, 
		ДатаОперации, 
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

/// Печать

Процедура ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати);
КонецПроцедуры

Процедура ПечатьПриВыплатеНаКарточки(
	МассивОбъектов, 
	ПараметрыПечати, 
	КоллекцияПечатныхФорм, 
	ОбъектыПечати, 
	ПараметрыВывода) Экспорт
	
	ВедомостьНаВыплатуЗарплатыВнутренний.ПечатьПриВыплатеНаКарточки(
		МассивОбъектов, 
		ПараметрыПечати, 
		КоллекцияПечатныхФорм, 
		ОбъектыПечати, 
		ПараметрыВывода)
	
КонецПроцедуры

Процедура ДобавитьКомандыПечатиПриВыплатеНаличными(КомандыПечати) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ДобавитьКомандыПечатиПриВыплатеНаличными(КомандыПечати);
КонецПроцедуры

Процедура ПечатьПриВыплатеНаличными(
	МассивОбъектов, 
	ПараметрыПечати, 
	КоллекцияПечатныхФорм, 
	ОбъектыПечати, 
	ПараметрыВывода) Экспорт
	
	ВедомостьНаВыплатуЗарплатыВнутренний.ПечатьПриВыплатеНаличными(
		МассивОбъектов, 
		ПараметрыПечати, 
		КоллекцияПечатныхФорм, 
		ОбъектыПечати, 
		ПараметрыВывода)
	
КонецПроцедуры

Функция ВыборкаДляПечатиШапкиПриВыплатеБезналично(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.Номер КАК Номер,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель КАК Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	Ведомость.ДолжностьГлавногоБухгалтера КАК ГлавныйБухгалтерДолжность,
	|	Ведомость.Бухгалтер КАК Бухгалтер,
	|	Ведомость.ДолжностьБухгалтера КАК БухгалтерДолжность
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Ведомость.Организация = Организации.Ссылка
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость", ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(
		Запрос.МенеджерВременныхТаблиц, Истина, 
		ИменаПолейОтветственныхЛиц, 
		"ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.НазваниеОрганизации КАК НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО КАК КодПоОКПО,
	|	ДанныеДокументов.Подразделение КАК Подразделение,
	|	ДанныеДокументов.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ДанныеДокументов.СуммаПоДокументу КАК СуммаПоДокументу,
	|	ЕСТЬNULL(ВТФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность КАК РуководительДолжность,
	|	ЕСТЬNULL(ВТФИОГлавБухПоследние.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ДанныеДокументов.ГлавныйБухгалтерДолжность КАК ГлавныйБухгалтерДолжность,
	|	ЕСТЬNULL(ВТФИОБухгалтерПоследние.РасшифровкаПодписи, """") КАК Бухгалтер,
	|	ДанныеДокументов.БухгалтерДолжность КАК БухгалтерДолжность
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОРуководителейПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОРуководителейПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОГлавБухПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОГлавБухПоследние.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ВТФИОГлавБухПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОБухгалтерПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОБухгалтерПоследние.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ВТФИОБухгалтерПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеДокументов.Дата, ГОД),
	|	ДанныеДокументов.Номер,
	|	ДанныеДокументов.Ссылка";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
	
Функция ВыборкаДляПечатиШапкиПриВыплатеНаличными(ИмяТипа, Ведомости) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера, ЗаполнятьКассира, ЗаполнятьБухгалтера");
	КадровыйУчетПереопределяемый.СоздатьВТОтветственныхЛиц(Запрос.МенеджерВременныхТаблиц,
															Ведомости,
															ПорядокЗаполнения);
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("ПустоеФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДолжность",      Справочники.Должности.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.Номер КАК Номер,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	ВЫБОР
	|		КОГДА Ведомость.Руководитель ЕСТЬ NULL
	|				ИЛИ Ведомость.Руководитель = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Руководитель, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.Руководитель
	|	КОНЕЦ КАК Руководитель,
	|	Ведомость.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ВЫБОР
	|		КОГДА Ведомость.ДолжностьРуководителя ЕСТЬ NULL
	|				ИЛИ Ведомость.ДолжностьРуководителя = &ПустаяДолжность
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ДолжностьРуководителя, &ПустаяДолжность)
	|		ИНАЧЕ Ведомость.ДолжностьРуководителя.Наименование
	|	КОНЕЦ КАК РуководительДолжность,
	|	ВЫБОР
	|		КОГДА Ведомость.ГлавныйБухгалтер ЕСТЬ NULL
	|				ИЛИ Ведомость.ГлавныйБухгалтер = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ГлавныйБухгалтер, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.ГлавныйБухгалтер
	|	КОНЕЦ КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Ведомость.Кассир ЕСТЬ NULL
	|				ИЛИ Ведомость.Кассир = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Кассир, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.Кассир
	|	КОНЕЦ КАК Кассир,
	|	ВЫБОР
	|		КОГДА Ведомость.ДолжностьКассира ЕСТЬ NULL
	|				ИЛИ Ведомость.ДолжностьКассира = &ПустаяДолжность
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ДолжностьКассира, &ПустаяДолжность)
	|		ИНАЧЕ Ведомость.ДолжностьКассира
	|	КОНЕЦ КАК КассирДолжность,
	|	ВЫБОР
	|		КОГДА Ведомость.Бухгалтер ЕСТЬ NULL
	|				ИЛИ Ведомость.Бухгалтер = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Бухгалтер, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.Бухгалтер
	|	КОНЕЦ КАК Бухгалтер,
	|	Ведомость.Составил КАК Составил,
	|	Ведомость.ДолжностьСоставившего КАК ДолжностьСоставившего,
	|	Ведомость.Проверил КАК Проверил,
	|	Ведомость.ДолжностьПроверившего КАК ДолжностьПроверившего,
	|	Ведомость.Раздатчик КАК Раздатчик,
	|	Ведомость.ДолжностьРаздатчика КАК ДолжностьРаздатчика
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Ведомость.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ВТОтветственныеЛица
	|		ПО Ведомость.Ссылка = ВТОтветственныеЛица.Документ
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость", ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Кассир");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Составил");
	ИменаПолейОтветственныхЛиц.Добавить("Проверил");
	ИменаПолейОтветственныхЛиц.Добавить("Раздатчик");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(
		Запрос.МенеджерВременныхТаблиц, Истина, 
		ИменаПолейОтветственныхЛиц, 
		"ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ФИОРуководителя.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОКассира.РасшифровкаПодписи, """") КАК Кассир,
	|	ДанныеДокументов.КассирДолжность,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер,
	|	ФИОСоставил.РасшифровкаПодписи КАК СоставилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьСоставившего,
	|	ФИОПроверил.РасшифровкаПодписи КАК ПроверилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьПроверившего,
	|	ФИОРаздатчик.РасшифровкаПодписи КАК РаздатчикРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьРаздатчика
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКассира
	|		ПО ДанныеДокументов.Ссылка = ФИОКассира.Ссылка
	|			И ДанныеДокументов.Кассир = ФИОКассира.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСоставил
	|		ПО ДанныеДокументов.Ссылка = ФИОСоставил.Ссылка
	|			И ДанныеДокументов.Составил = ФИОСоставил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПроверил
	|		ПО ДанныеДокументов.Ссылка = ФИОПроверил.Ссылка
	|			И ДанныеДокументов.Проверил = ФИОПроверил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаздатчик
	|		ПО ДанныеДокументов.Ссылка = ФИОРаздатчик.Ссылка
	|			И ДанныеДокументов.Раздатчик = ФИОРаздатчик.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВыплатыВедомостей(Запрос.МенеджерВременныхТаблиц, Истина, ИмяТипа, Ведомости);

	Запрос.УстановитьПараметр("Ведомости", Ведомости);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Выплаты.ВедомостьДата КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц, Истина, 
		"ТабельныйНомер, ФИОПолные, ФамилияИО");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Ведомость КАК Ведомость,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.ФИОПолные,
	|	КадровыеДанныеСотрудников.ФамилияИО,
	|	Выплаты.Сумма КАК Сумма
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Выплаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Выплаты.ВедомостьДата = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выплаты.Ведомость,
	|	Выплаты.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

#КонецОбласти

#Область ОграничениеИспользованияДокументов

Функция ПредставлениеПометкиОграниченияПриВыплатеНаКарточки() Экспорт
	Возврат НСтр("ru = 'Передан для выплаты'");
КонецФункции

Функция ОперацияОграниченияДокументаПриВыплатеНаКарточки() Экспорт
	// АПК:1297-выкл Не локализуется, идентификаторы.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныйОбменСБанкамиПоЗарплатнымПроектам") Тогда
		Возврат "Выгрузка";     
	Иначе
		Возврат "Отсутствует";
	КонецЕсли;
	// АПК:1297-вкл
КонецФункции

Функция ПредставлениеПометкиОграниченияПриВыплатеНаличными() Экспорт
	Возврат НСтр("ru = 'Передан для выплаты'");
КонецФункции

Функция ОперацияОграниченияДокументаПриВыплатеНаличными() Экспорт
	Возврат "Отсутствует"; // АПК:1297 Не локализуется, идентификатор операции
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоступКВедомостям

Функция ТекстЗапросаДанныеДляОплаты(
	ИмяТипа, 
	ИмяПараметраВедомости = "Ведомости", 
	ИмяПараметраФизическиеЛица = "ФизическиеЛица") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВедомостьЗарплата.КВыплате) КАК КВыплате,
	|	0 КАК ВзысканнаяСумма,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьЗарплата.Ссылка,
	|	ВедомостьЗарплата.ФизическоеЛицо";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВедомостьЗарплата",	ИмяТипа + ".Зарплата");
	
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ИмяПараметраВедомости) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			СтрШаблон("ВедомостьЗарплата.Ссылка В(&%1)", ИмяПараметраВедомости));
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИмяПараметраФизическиеЛица) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			СтрШаблон("ВедомостьЗарплата.ФизическоеЛицо В (&%1)", ИмяПараметраФизическиеЛица));
	КонецЕсли;	
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаДанныеДляОплатыБезналично(
	ИмяТипа, 
	ИмяПараметраВедомости = "Ведомости", 
	ИмяПараметраФизическиеЛица = "ФизическиеЛица") Экспорт
	
	ТекстЗапроса = 		
	"ВЫБРАТЬ
	|	ВедомостьСостав.Ссылка КАК Ссылка,
	|	ВедомостьСостав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	0 КАК КВыплате,
	|	СУММА(ВедомостьСостав.ВзысканнаяСумма) КАК ВзысканнаяСумма,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	#ВедомостьСостав КАК ВедомостьСостав
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьСостав.Ссылка,
	|	ВедомостьСостав.ФизическоеЛицо";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВедомостьСостав",	ИмяТипа + ".Состав");
	
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ИмяПараметраВедомости) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			СтрШаблон("ВедомостьСостав.Ссылка В (&%1)", ИмяПараметраВедомости));
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИмяПараметраФизическиеЛица) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(
			СтрШаблон("ВедомостьСостав.ФизическоеЛицо В (&%1)", ИмяПараметраФизическиеЛица));
	КонецЕсли;	
	
	ТекстыПодзапросов = Новый Массив(2);
	ТекстыПодзапросов[0] = Схема.ПолучитьТекстЗапроса();
	ТекстыПодзапросов[1] = ТекстЗапросаДанныеДляОплаты(ИмяТипа, ИмяПараметраВедомости, ИмяПараметраФизическиеЛица);
			
	ТекстЗапросаДанныеДляОплаты	=
		СтрСоединить(
			ТекстыПодзапросов,
			Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);

	Возврат ТекстЗапросаДанныеДляОплаты		
	
КонецФункции	

Функция ДанныеДляПечати(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВыплатыВедомостей(
		Запрос.МенеджерВременныхТаблиц, Истина, 
		Ведомость.Метаданные().ПолноеИмя(), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ведомость));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Выплаты.НомерСтроки) КАК НомерСтроки,
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Выплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(Выплаты.Сумма) КАК КВыплате
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник,
	|	Выплаты.ФизическоеЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТВыплатыВедомостей(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяТипа, Ведомости)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("Выплаты",   Перечисления.ВидыВзаиморасчетовССотрудниками.Выплаты());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьСостав.Ссылка КАК Ссылка,
	|	ВедомостьСостав.Ссылка.Дата КАК Дата,
	|	ВедомостьСостав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	#ВедомостьСостав КАК ВедомостьСостав
	|ГДЕ
	|	ВедомостьСостав.Ссылка В(&Ведомости)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьСостав.Ссылка,
	|	ВедомостьСостав.Ссылка.Дата,
	|	ВедомостьСостав.ФизическоеЛицо";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав", ИмяТипа + ".Состав");

	// Ничего тайного в дате ведомости и порядке строк нет.
	// RLS по работникам сработает при получении данных из регистра взаиморасчетов.
	УстановитьПривилегированныйРежим(Истина); 
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ведомость,
	|	Ведомость.Дата КАК ВедомостьДата,
	|	Ведомость.НомерСтроки КАК НомерСтроки,
	|	Взаиморасчеты.Сотрудник КАК Сотрудник,
	|	СУММА(Взаиморасчеты.СуммаВзаиморасчетов) КАК Сумма,
	|	Ведомость.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТВыплатыВедомостей
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомость
	|		ПО Взаиморасчеты.Регистратор = Ведомость.Ссылка
	|			И Взаиморасчеты.ФизическоеЛицо = Ведомость.ФизическоеЛицо
	|ГДЕ
	|	Взаиморасчеты.Регистратор В(&Ведомости)
	|	И Взаиморасчеты.ВидВзаиморасчетов В(&Выплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведомость.Ссылка,
	|	Ведомость.Дата,
	|	Ведомость.НомерСтроки,
	|	Взаиморасчеты.Сотрудник,
	|	Ведомость.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТВедомости");
	
КонецПроцедуры

Функция РеквизитСпособовВыплатыВедомостей(Ведомости, Знач Реквизит)

	РеквизитыСпособовВыплатыВедомостей = РеквизитыСпособовВыплатыВедомостей(Ведомости, Реквизит);
	
	// Соответствие ведомость - значение реквизита способа выплаты
	РеквизитСпособовВыплатыВедомостей = Новый Соответствие;
	Для Каждого Ведомость Из Ведомости Цикл
		РеквизитСпособовВыплатыВедомостей.Вставить(
			Ведомость, 
			РеквизитыСпособовВыплатыВедомостей[Ведомость][Реквизит]);
	КонецЦикла;
	
	Возврат РеквизитСпособовВыплатыВедомостей
	
КонецФункции

Функция РеквизитыСпособовВыплатыВедомостей(Ведомости, Знач Реквизиты)
	
	// Соответствие ведомость - способ выплаты
	СпособыВыплатыВедомостей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ведомости, "СпособВыплаты");
	
	// Соответствие способ выплаты - структура значений его реквизитов
	РеквизитыСпособовВыплаты = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ОбщегоНазначения.ВыгрузитьКолонку(СпособыВыплатыВедомостей, "Значение", Истина), 
			Реквизиты);
	
	// Соответствие ведомость - структура значений реквизитов способа выплаты
	РеквизитыСпособовВыплатыВедомостей = Новый Соответствие;
	Для Каждого Ведомость Из Ведомости Цикл
		РеквизитыСпособовВыплатыВедомостей.Вставить(
			Ведомость, 
			РеквизитыСпособовВыплаты[СпособыВыплатыВедомостей[Ведомость]]);
	КонецЦикла;
	
	Возврат РеквизитыСпособовВыплатыВедомостей
	
КонецФункции

Процедура СоздатьВТРеквизитыСпособовВыплатыВедомостей(
	МенеджерВременныхТаблиц, 
	Ведомости, 
	Знач Реквизиты, 
	ИмяВТ = "ВТРеквизитыСпособовВыплатыВедомостей")
	
	РеквизитыСпособовВыплатыВедомостей = РеквизитыСпособовВыплатыВедомостей(Ведомости, Реквизиты);
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить(
		"Ведомость",               
		Метаданные.ОпределяемыеТипы.ВедомостьЗарплатаКадры.Тип);
		
	МетаданныеРеквизитовСпособовВыплаты = Метаданные.Справочники.СпособыВыплатыЗарплаты.Реквизиты;
	Для Каждого Реквизит Из Новый Структура(Реквизиты) Цикл
		ТаблицаРеквизитов.Колонки.Добавить(
			Реквизит.Ключ, 
			МетаданныеРеквизитовСпособовВыплаты.Найти(Реквизит.Ключ).Тип);
	КонецЦикла;	
		
	Для Каждого Ведомость Из Ведомости Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
	    НоваяСтрока.Ведомость               = Ведомость;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСпособовВыплатыВедомостей[Ведомость])
	КонецЦикла;
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(
		МенеджерВременныхТаблиц, 
		ТаблицаРеквизитов, 
		ИмяВТ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты)
КонецПроцедуры

Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	ВедомостьНаВыплатуЗарплатыБазовый.ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Ведомость, Отказ) Экспорт
	
	Если Ведомость.ВводНачальныхДанных Тогда
		Возврат
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Ведомость);
	
	ЗарегистрироватьВыплатуВоВзаиморасчетах(Ведомость, Отказ);
	ЗарегистрироватьВыплатуВУчетеНДФЛ(Ведомость, Отказ);
	
	Для Каждого НаборЗаписей Из Ведомость.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область МестаВыплаты

Функция МестоВыплаты() Экспорт
	
	ВедомостьМестоВыплаты = Новый Структура;
	ВедомостьМестоВыплаты.Вставить("Вид",      Перечисления.ВидыМестВыплатыЗарплаты.ПустаяСсылка());
	ВедомостьМестоВыплаты.Вставить("Значение", Неопределено);
	
	Возврат ВедомостьМестоВыплаты
	
КонецФункции	

Функция МестоВыплатыКасса(Ведомость) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.МестоВыплатыКасса(Ведомость);
КонецФункции

Процедура УстановитьМестоВыплатыКасса(Ведомость, Значение) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.УстановитьМестоВыплатыКасса(Ведомость, Значение)
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляЗаполнения

Функция ПараметрыЗаполнения() Экспорт
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ОписаниеОперации", ОписаниеОперацииВыплаты());
	
	ПараметрыЗаполнения.Вставить("ОтборСотрудников", ОтборСотрудниковДляВыплаты());
	
	ПараметрыЗаполнения.Вставить("ПараметрыРасчетаЗарплаты", ПараметрыРасчетаЗарплаты());
	ПараметрыЗаполнения.Вставить("ПараметрыРасчетаНДФЛ",     ПараметрыРасчетаНДФЛ());
	
	ПараметрыЗаполнения.Вставить("Финансирование", ФинансированиеВыплаты());
	
	Возврат ПараметрыЗаполнения
КонецФункции

// АПК:581-выкл Контроль избыточности экспорта не нужен.
// Функции-конструкторы параметров экспортных функций должны быть доступны извне.

Функция ПараметрыЗаполненияПоОбъекту(Объект) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.ПараметрыЗаполненияПоОбъекту(Объект)
КонецФункции

Функция ОписаниеОперацииВыплаты() Экспорт
	ОписаниеОперации = Новый Структура;
	
	ОписаниеОперации.Вставить("Организация",        Справочники.Организации.ПустаяСсылка());
	ОписаниеОперации.Вставить("ПериодРегистрации",  Дата(1,1,1));
	ОписаниеОперации.Вставить("Дата",               Дата(1,1,1));
	ОписаниеОперации.Вставить("ПорядокВыплаты",     Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка());
	ОписаниеОперации.Вставить("СпособПолучения",    Перечисления.СпособыПолученияЗарплатыКВыплате.ПустаяСсылка());
	ОписаниеОперации.Вставить("ДокументыОснования", Новый Массив);
	ОписаниеОперации.Вставить("ВидДохода",          Перечисления.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка());
	
	Возврат ОписаниеОперации
КонецФункции	

Функция ОтборСотрудниковДляВыплаты() Экспорт
	Параметры = Новый Структура;
	
	Параметры.Вставить("ВидыДоговоров",  Неопределено);
	Параметры.Вставить("Подразделение",  Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Параметры.Вставить("МестоВыплаты",   МестоВыплаты());
	
	Возврат Параметры
КонецФункции

Функция ПараметрыРасчетаЗарплаты() Экспорт
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("Округление",          Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию());
	ПараметрыРасчета.Вставить("ПроцентВыплаты",      100);
	ПараметрыРасчета.Вставить("ТолькоПоложительные", Истина);
	
	ПараметрыРасчета.Вставить("КолонкиГруппировок",  "ФизическоеЛицо");
	
	Возврат ПараметрыРасчета
КонецФункции	

Функция ПараметрыРасчетаНДФЛ() Экспорт
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("ПланируемаяДатаВыплаты", Дата(1,1,1));
	ПараметрыРасчета.Вставить("ОкончательныйРасчет",    Истина);
	
	Возврат ПараметрыРасчета
КонецФункции	

Функция ФинансированиеВыплаты() Экспорт
	Финансирование = Новый Структура;
	
	Финансирование.Вставить("СтатьяФинансирования", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	Финансирование.Вставить("СтатьяРасходов",       Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
	
	Возврат Финансирование
КонецФункции

// АПК:581-вкл 

Функция ЗарплатаКВыплате(
		ОписаниеОперации,
		ОтборСотрудников,
		ПараметрыРасчета,
		Финансирование = Неопределено,
		Регистратор = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников в соответствии с реквизитами шапки ведомости.
	СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников);
	
	// Получаем зарплату к выплате для отобранных сотрудников.
	СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ОписаниеОперации, Финансирование, Регистратор);

	// Формируем отсортированную зарплату сотрудников к выплате.
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц, 
			"ВТСотрудникиДляВедомости");
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.КВыплате КАК КВыплате
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО (ЗарплатаКВыплате.Сотрудник = Сотрудники.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Сотрудник,
	|	ПериодВзаиморасчетов,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	Подразделение,
	|	ДокументОснование";
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "Сотрудники");
	Зарплата = Запрос.Выполнить().Выгрузить();
	Зарплата.Свернуть(
		"ФизическоеЛицо,
		|Сотрудник,
		|ПериодВзаиморасчетов,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|ВидДоходаИсполнительногоПроизводства,
		|Подразделение,
		|ДокументОснование",
		"КВыплате"); 
	
	РассчитатьЗарплату(Зарплата, ПараметрыРасчета);
	
	Возврат Зарплата;
	
КонецФункции

Функция ЗарплатаКВыплатеФизическихЛиц(
		ФизическиеЛица,
		ОписаниеОперации,
		ОтборСотрудников,
		ПараметрыРасчетаЗарплаты,
		Финансирование,
		Регистратор) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников по переданным физическим лицам.
	СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(
		МенеджерВременныхТаблиц, 
		ФизическиеЛица, 
		ОписаниеОперации, 
		ОтборСотрудников);
	
	// Получаем зарплату к выплате для отобранных сотрудников.
	СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ОписаниеОперации, Финансирование, Регистратор);
	
	// Для сотрудников, которым нет зарплаты к выплате, 
	// создаем нулевую выплату со свойствами из кадровой информации и описания операции.
	// Упорядочиваем сотрудников в том порядке, в котором идут заказанные физлица.
	
	ПорядокФизлиц = Новый ТаблицаЗначений;
	ПорядокФизлиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПорядокФизлиц.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	Для Порядок = 0 По ФизическиеЛица.ВГраница() Цикл
		Строка = ПорядокФизлиц.Добавить();
		Строка.ФизическоеЛицо = ФизическиеЛица[Порядок];
		Строка.Порядок = Порядок;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПорядокФизлиц", ПорядокФизлиц);
	
	Запрос.УстановитьПараметр(
		"ПериодРегистрацииПоУмолчанию", 
		ОписаниеОперации.ПериодРегистрации);
	Запрос.УстановитьПараметр(
		"ДокументОснованиеПоУмолчанию", 
		Метаданные.ОпределяемыеТипы.ДокументОснованиеЗарплатыКВыплате.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр(
		"СтатьяФинансированияПоУмолчанию", 
		Финансирование.СтатьяФинансирования);
	Запрос.УстановитьПараметр(
		"СтатьяРасходовПоУмолчанию", 
		Финансирование.СтатьяРасходов);
	Запрос.УстановитьПараметр(
		"ВидДоходаПоУмолчанию",         
		?(ЗначениеЗаполнено(ОписаниеОперации.ВидДохода),
			ОписаниеОперации.ВидДохода, 
			Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения));
			
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПорядокФизлиц.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТПорядокФизлиц
	|ИЗ
	|	&ПорядокФизлиц КАК ПорядокФизлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(ЗарплатаКВыплате.Подразделение, Сотрудники.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ЗарплатаКВыплате.ПериодВзаиморасчетов, &ПериодРегистрацииПоУмолчанию) КАК ПериодВзаиморасчетов,
	|	ЕСТЬNULL(ЗарплатаКВыплате.СтатьяФинансирования, &СтатьяФинансированияПоУмолчанию) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(ЗарплатаКВыплате.СтатьяРасходов, &СтатьяРасходовПоУмолчанию) КАК СтатьяРасходов,
	|	ЕСТЬNULL(ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства, &ВидДоходаПоУмолчанию) КАК ВидДоходаИсполнительногоПроизводства,
	|	ЕСТЬNULL(ЗарплатаКВыплате.ДокументОснование, &ДокументОснованиеПоУмолчанию) КАК ДокументОснование,
	|	ЕСТЬNULL(ЗарплатаКВыплате.КВыплате, 0) КАК КВыплате
	|ИЗ
	|	ВТСотрудникиДляВедомости КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО Сотрудники.Сотрудник = ЗарплатаКВыплате.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокФизлиц КАК ПорядокФизлиц
	|		ПО Сотрудники.ФизическоеЛицо = ПорядокФизлиц.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокФизлиц.Порядок,
	|	Сотрудник,
	|	ПериодВзаиморасчетов,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	Подразделение,
	|	ДокументОснование";
	Зарплата = Запрос.Выполнить().Выгрузить();
	Зарплата.Свернуть(
		"ФизическоеЛицо,
		|Сотрудник,
		|ПериодВзаиморасчетов,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|ВидДоходаИсполнительногоПроизводства,
		|Подразделение,
		|ДокументОснование",
		"КВыплате"); 
	
	РассчитатьЗарплату(Зарплата, ПараметрыРасчетаЗарплаты);
	
	Возврат Зарплата;
		
КонецФункции

Функция НалогиКУдержанию(
	ЗарплатаКВыплате, 
	ОписаниеОперации, 
	ПараметрыРасчета, 
	Финансирование = Неопределено, 
	Регистратор = Неопределено, 
	РанееУдержано = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСписокСотрудниковПоТаблицеЗарплат(
		МенеджерВременныхТаблиц, 
		ЗарплатаКВыплате, 
		ОписаниеОперации.Организация, 
		ОписаниеОперации.ПериодРегистрации, 
		Регистратор);
	
	НДФЛ = 	
		УчетНДФЛ.РассчитатьУдержанныеНалоги(
			Регистратор, 
			ОписаниеОперации.Организация, 
			ОписаниеОперации.Дата, 
			МенеджерВременныхТаблиц, 
			ОписаниеОперации.ПериодРегистрации,
			ПараметрыРасчета.ОкончательныйРасчет,
			ЗарплатаКВыплате);
			
	ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияНалогиКУдержанию();
	ПараметрыРаспределения.ИсключаемыйРегистратор = Регистратор;
	ПараметрыРаспределения.ДатаОперации           = ОписаниеОперации.Дата;
	ПараметрыРаспределения.УжеРаспределено        = РанееУдержано;
	ПараметрыРаспределения.ТаблицаВыплат          = ЗарплатаКВыплате;
	ЗаполнитьЗначенияСвойств(ПараметрыРаспределения.Финансирование, Финансирование);
	ВидыДохода = ЗарплатаКВыплате.Скопировать(, "ВидДоходаИсполнительногоПроизводства");
	ВидыДохода.Свернуть("ВидДоходаИсполнительногоПроизводства");
	ПараметрыРаспределения.Финансирование.ВидДоходаИсполнительногоПроизводства = 
		ВидыДохода.ВыгрузитьКолонку("ВидДоходаИсполнительногоПроизводства");
	
	НДФЛПоСтатьям = ОтражениеЗарплатыВУчете.НалогиКУдержаниюПоСтатьям(НДФЛ, ПараметрыРаспределения);
			
	// Сортировка для воспроизводимости результатов.
	КолонкиСортировки = 
	"ФизическоеЛицо,
	|МесяцНалоговогоПериода,
	|КатегорияДохода,
	|СтавкаНалогообложенияРезидента,
	|КодДохода,
	|Сумма,
	|СуммаСПревышения,
	|Подразделение,
	|ДокументОснование,
	|РегистрацияВНалоговомОргане,
	|СтатьяФинансирования,
	|СтатьяРасходов";

	НДФЛПоСтатьям.Сортировать(КолонкиСортировки, Новый СравнениеЗначений);
	
	Возврат НДФЛПоСтатьям
	
КонецФункции

Функция ВзысканияПоИсполнительнымДокументам(ЗарплатаКВыплате, ПорядокВыплаты)
	
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		Взыскания = ВзысканияПоИсполнительнымДокументамАванс(ЗарплатаКВыплате);
	ИначеЕсли ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда
		Взыскания = ВзысканияПоИсполнительнымДокументамЗарплата(ЗарплатаКВыплате)
	Иначе	
		Взыскания = ВзысканияПоИсполнительнымДокументамМежрасчет(ЗарплатаКВыплате)
	КонецЕсли;	
	
	Возврат Взыскания
	
КонецФункции

Функция ВзысканияПоИсполнительнымДокументамАванс(ЗарплатаКВыплате)
	
	НачисленнаяЗарплата = ВзаиморасчетыССотрудниками.НачисленныйАвансФизическихЛицПоДокументам(ЗарплатаКВыплате);
	УчитываемыеВыплаты  = ВзысканияПоИсполнительнымДокументамУчитываемыеВыплаты(ЗарплатаКВыплате, НачисленнаяЗарплата);
	
	Взыскания = ИсполнительныеЛисты.УдержанныеСуммыФизическихЛицПоДокументамАвансом(УчитываемыеВыплаты.Прямые);
	Взыскания.Свернуть("ФизическоеЛицо", "Сумма");
	
	Возврат Взыскания	
	
КонецФункции	

Функция ВзысканияПоИсполнительнымДокументамМежрасчет(ЗарплатаКВыплате)
	
	НачисленнаяЗарплата = ВзаиморасчетыССотрудниками.НачисленнаяЗарплатаФизическихЛицПоДокументам(ЗарплатаКВыплате);
	УчитываемыеВыплаты  = ВзысканияПоИсполнительнымДокументамУчитываемыеВыплаты(ЗарплатаКВыплате, НачисленнаяЗарплата);
	
	// в межрасчет взыскания берем без учета ограничений
	Взыскания = ИсполнительныеЛисты.УдержанныеСуммыФизическихЛицПоДокументам(УчитываемыеВыплаты.Прямые, Ложь);  
	Взыскания.Свернуть("ФизическоеЛицо", "Сумма");
	
	Возврат Взыскания	
	
КонецФункции	

Функция ВзысканияПоИсполнительнымДокументамЗарплата(ЗарплатаКВыплате)
	
	НачисленнаяЗарплата = ВзаиморасчетыССотрудниками.НачисленнаяЗарплатаФизическихЛицПоДокументам(ЗарплатаКВыплате);
	УчитываемыеВыплаты  = ВзысканияПоИсполнительнымДокументамУчитываемыеВыплаты(ЗарплатаКВыплате, НачисленнаяЗарплата);
	
	// взысканное за месяц в целом, с учетом ограничений
	Взыскания = ИсполнительныеЛисты.УдержанныеСуммыФизическихЛицПоДокументам(УчитываемыеВыплаты.Прямые, Истина);
	Взыскания.Свернуть("ФизическоеЛицо", "Сумма");
	
	// ранее взысканное в аванс
	ВзысканияАвансом  = ИсполнительныеЛисты.УдержанныеСуммыФизическихЛицПоДокументамАвансом(УчитываемыеВыплаты.Сторно);
	ВзысканияАвансом.Свернуть("ФизическоеЛицо", "Сумма");
	
	Взыскания.Индексы.Добавить("ФизическоеЛицо");
	Для Каждого ВзысканоАвансом Из ВзысканияАвансом Цикл
		Взыскание = Взыскания.Найти(ВзысканоАвансом.ФизическоеЛицо, "ФизическоеЛицо");
		Если Взыскание <> Неопределено Тогда
			Взыскание.Сумма = МАКС(Взыскание.Сумма - ВзысканоАвансом.Сумма, 0);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Взыскания	
	
КонецФункции	

Функция ВзысканияПоИсполнительнымДокументамУчитываемыеВыплаты(ЗарплатаКВыплате, НачисленнаяЗарплата)
	
	Разрезы  = "ФизическоеЛицо, ДокументОснование";
	
	// Сворачиваем зарплату к выплате до нужной детализации
	Выплаты = ЗарплатаКВыплате.Скопировать(, СтрШаблон("%1, КВыплате", Разрезы));
	Выплаты.Колонки.КВыплате.Имя = "Сумма";
	Выплаты.Свернуть(Разрезы, "Сумма");
	
	// Разделяем выплаты на
	// - прямые выплаты начислений (удержаний);
	// - сторнирующие (с суммой, обратной начисленному);
	// - не влияющие на получение взысканий, Сторно = Неопределено;
	Выплаты.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево, Null"));
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НачисленнаяЗарплата, Разрезы);
	Отбор = Новый Структура(Разрезы);
	Для Каждого Выплата Из Выплаты Цикл
		Если Не ЗначениеЗаполнено(Выплата.ДокументОснование) Или Выплата.Сумма = 0 Тогда
			// выплаты без оснований или без суммы для взысканий не интересны
			Выплата.Сторно = Неопределено;
			Продолжить
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(Отбор, Выплата);
		НачисленияВыплаты = НачисленнаяЗарплата.НайтиСтроки(Отбор);
		Если НачисленияВыплаты.Количество() = 0 Или НачисленияВыплаты[0].Сумма = 0 Тогда
			// начислений нет, признак сторно определяем по знаку выплаты
			Выплата.Сторно = Выплата.Сумма < 0;
		Иначе	
			// выплаты с суммой, обратной начисленной - сторнирующие
			Выплата.Сторно = Выплата.Сумма * НачисленияВыплаты[0].Сумма < 0 
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат 
		Новый Структура(
			"Прямые,
			|Сторно",
		    Выплаты.Скопировать(Новый Структура("Сторно", Ложь),   Разрезы),
			Выплаты.Скопировать(Новый Структура("Сторно", Истина), Разрезы));
			
КонецФункции

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников)
	ВедомостьНаВыплатуЗарплатыВнутренний.СоздатьВТСотрудникиДляВедомостиПоШапке(
		МенеджерВременныхТаблиц, 
		ОписаниеОперации, 
		ОтборСотрудников)
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(
	МенеджерВременныхТаблиц, 
	ФизическиеЛица, 
	ОписаниеОперации, 
	ОтборСотрудников) 
	
	ВедомостьНаВыплатуЗарплатыВнутренний.СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(
		МенеджерВременныхТаблиц, 
		ФизическиеЛица, 
		ОписаниеОперации, 
		ОтборСотрудников)
	
КонецПроцедуры	

// АПК:581-выкл Экспорт не избыточен - используются в расширенной реализации

Процедура СоздатьВТЗарплатаКВыплате(
	МенеджерВременныхТаблиц, 
	ОписаниеОперации, 
	Финансирование = Неопределено, 
	Регистратор = Неопределено) Экспорт
	
	ВидДоходаПустой   = Перечисления.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка();
	ВидДоходаЗарплата = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения;
	
	// Преобразуем параметры заполнения ведомости в параметры получения зарплаты для взаиморасчетов
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплате();
	ПараметрыПолученияЗарплатыКВыплате.ПорядокВыплаты       = ОписаниеОперации.ПорядокВыплаты;
	ПараметрыПолученияЗарплатыКВыплате.СпособПолучения      = ОписаниеОперации.СпособПолучения;
	ПараметрыПолученияЗарплатыКВыплате.Организация          = ОписаниеОперации.Организация;
	ПараметрыПолученияЗарплатыКВыплате.ПериодРегистрации    = ОписаниеОперации.ПериодРегистрации;
	ПараметрыПолученияЗарплатыКВыплате.Дата                 = ОписаниеОперации.Дата;
	ПараметрыПолученияЗарплатыКВыплате.ДокументыОснования   = ОписаниеОперации.ДокументыОснования;
	Если Финансирование <> Неопределено Тогда
		ПараметрыПолученияЗарплатыКВыплате.СтатьяФинансирования = Финансирование.СтатьяФинансирования;
		ПараметрыПолученияЗарплатыКВыплате.СтатьяРасходов       = Финансирование.СтатьяРасходов;
	КонецЕсли;
	Если ОписаниеОперации.ВидДохода = ВидДоходаЗарплата Тогда 
		ПараметрыПолученияЗарплатыКВыплате.ВидыДоходов.Добавить(ВидДоходаЗарплата);
		ПараметрыПолученияЗарплатыКВыплате.ВидыДоходов.Добавить(ВидДоходаПустой);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОперации.ВидДохода)	Тогда
		ПараметрыПолученияЗарплатыКВыплате.ВидыДоходов.Добавить(ОписаниеОперации.ВидДохода)
	Иначе
		ПараметрыПолученияЗарплатыКВыплате.ВидыДоходов = 
			ОбщегоНазначенияБЗК.ПеречислениеВМассив(Перечисления.ВидыДоходовИсполнительногоПроизводства);
		ПараметрыПолученияЗарплатыКВыплате.ВидыДоходов.Добавить(ВидДоходаПустой);
	КонецЕсли;	
	Если Регистратор <> Неопределено Тогда
		ПараметрыПолученияЗарплатыКВыплате.ИгнорируемыеРегистраторы = 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Регистратор);
	КонецЕсли;	
	
	// Получаем зарплату к выплате для отобранных сотрудников в соответствии с характером выплаты.
	ВзаиморасчетыССотрудниками.СоздатьВТЗарплатаКВыплате(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияЗарплатыКВыплате, "ВТСотрудникиДляВедомости");

	// Ограничиваем зарплату к выплате общей задолженностью перед работником
	ВзаиморасчетыССотрудниками.СоздатьВТЗарплатаКВыплатеОграниченнаяСальдоФизлиц(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияЗарплатыКВыплате);
	
КонецПроцедуры

Процедура РассчитатьЗарплату(Зарплата, ПараметрыРасчета) Экспорт
	
	// Получаем способ округления
	СпособОкругления = ПараметрыРасчета.Округление.ПолучитьОбъект();
	Если СпособОкругления = Неопределено Тогда
		СпособОкругления = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию().ПолучитьОбъект();
	КонецЕсли;	
	
	КолонкиГруппировок = ПараметрыРасчета.КолонкиГруппировок;
	
	// структура для отбора строк зарплаты, попадающих в группу
	ПараметрыОтбораГруппы = Новый Структура(КолонкиГруппировок);
	
	// Переданная зарплата индексируется по колонкам группировки
    Для Каждого Свойство Из ПараметрыОтбораГруппы Цикл
        ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Зарплата, Свойство.Ключ);
    КонецЦикла;
	
	// выделяем группы таблицы зарплат
	Группы = Зарплата.Скопировать(, СтрШаблон("%1, КВыплате", КолонкиГруппировок));
	Группы.Свернуть(КолонкиГруппировок, "КВыплате");
	
	// Рассчитываем суммы групп с учетом процента выплаты и округления.
	// При необходимости запоминаем строки групп с нулевой или отрицательной суммой для последующего удаления.
	// Вычисленную сумму группы разносим по строкам группы.
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого Группа Из Группы Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, Группа); 
		ЗарплатаГруппы = Зарплата.НайтиСтроки(ПараметрыОтбораГруппы);
		
		СуммаГруппы = Группа.КВыплате * ПараметрыРасчета.ПроцентВыплаты/100;
		СуммаГруппы = СпособОкругления.Округлить(СуммаГруппы);
		
		Если ПараметрыРасчета.ТолькоПоложительные И СуммаГруппы <= 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеСтроки, ЗарплатаГруппы);
			Продолжить;
		КонецЕсли;
		
		// обеспечение обратной совместимости при "долевой" выплате.
		Если ПараметрыРасчета.ПроцентВыплаты <> 100 Тогда
			Для Каждого СтрокаЗарплаты Из ЗарплатаГруппы Цикл
				СтрокаЗарплаты.КВыплате = СтрокаЗарплаты.КВыплате * ПараметрыРасчета.ПроцентВыплаты/100
			КонецЦикла;	
		КонецЕсли;
		
		ЗарплатаКадры.РазнестиСуммуПоБазе(СуммаГруппы, ЗарплатаГруппы, "КВыплате");
		
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Зарплата.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// АПК:581-вкл

#КонецОбласти

#Область ЗаполнениеДокумента

Функция МожноЗаполнитьЗарплату(Ведомость) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.МожноЗаполнитьЗарплату(Ведомость);
КонецФункции

Процедура ОчиститьВыплаты(Ведомость) Экспорт
	Ведомость.Состав.Очистить();
	Ведомость.Зарплата.Очистить();
	Ведомость.НДФЛ.Очистить();
КонецПроцедуры

Процедура ЗагрузитьВыплаты(Ведомость, Зарплата, НДФЛ, КлючевыеПоляСостава = "ФизическоеЛицо") Экспорт
	
	ОчиститьВыплаты(Ведомость);
	
	// Структура для отбора строк зарплаты, попадающих в одну строку состава
	ПараметрыОтбораГруппы = Новый Структура(КлючевыеПоляСостава);
	
	// Переданная зарплата индексируется по полям отбора
    Для Каждого Свойство Из ПараметрыОтбораГруппы Цикл
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Зарплата, Свойство.Ключ)
	КонецЦикла;
	
	// Группы зарплаты для строк состава 
	Группы = Зарплата.Скопировать(, КлючевыеПоляСостава);
	Группы.Свернуть(КлючевыеПоляСостава);
	
	// Для каждой группы строк зарплаты создаем строку состава.
	// Зарплату группы связываем с этой строкой состава.
	ИдентификаторыСтрокФизлиц = Новый Соответствие;
	Для Каждого Группа Из Группы Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, Группа); 
		
		СтрокаТЧСостав = НоваяСтрокаСостава(Ведомость, ПараметрыОтбораГруппы);

		ЗарплатаГруппы = Зарплата.НайтиСтроки(ПараметрыОтбораГруппы);
		Для Каждого СтрокаЗарплаты Из ЗарплатаГруппы Цикл
			СтрокаТЧЗарплата = Ведомость.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧЗарплата, СтрокаЗарплаты);
			СтрокаТЧЗарплата.ИдентификаторСтроки = СтрокаТЧСостав.ИдентификаторСтроки;
		КонецЦикла;
		
		Если ИдентификаторыСтрокФизлиц.Получить(Группа.ФизическоеЛицо) = Неопределено Тогда
			ИдентификаторыСтрокФизлиц.Вставить(Группа.ФизическоеЛицо, СтрокаТЧСостав.ИдентификаторСтроки); 
		КонецЕсли;	
	КонецЦикла;
	
	ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц);
	
КонецПроцедуры

Процедура ДобавитьВыплаты(Ведомость, Зарплата, НДФЛ, КлючевыеПоляСостава = "ФизическоеЛицо") Экспорт
	
	// Получаем ключи имеющихся строк состава и их идентификаторы.
	Состав = Ведомость.Состав.Выгрузить(, СтрШаблон("%1, ИдентификаторСтроки", КлючевыеПоляСостава));
	
	// Структура для отбора строк зарплаты, попадающих в одну строку состава
	ПараметрыОтбораГруппы = Новый Структура(КлючевыеПоляСостава);
	
	// Имеющийся состав индексируется по полям отбора
    Для Каждого Свойство Из ПараметрыОтбораГруппы Цикл
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Состав, Свойство.Ключ)
	КонецЦикла;

	// Для каждой строки зарплаты ищем подходящую строку состава,
	// при отсутствии - создаем новую.
	// Строку зарплаты связываем с этой строкой состава.
	ИдентификаторыСтрокФизлиц = Новый Соответствие;
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, СтрокаЗарплаты); 
		
		НайденныеСтроки = Состав.НайтиСтроки(ПараметрыОтбораГруппы);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЧСостав = НайденныеСтроки[0]
		Иначе
			СтрокаТЧСостав = НоваяСтрокаСостава(Ведомость, ПараметрыОтбораГруппы);
			ЗаполнитьЗначенияСвойств(Состав.Добавить(), СтрокаТЧСостав); 
		КонецЕсли;	

		СтрокаТЧЗарплата = Ведомость.Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧЗарплата, СтрокаЗарплаты);
		СтрокаТЧЗарплата.ИдентификаторСтроки = СтрокаТЧСостав.ИдентификаторСтроки;
		
		Если ИдентификаторыСтрокФизлиц.Получить(СтрокаЗарплаты.ФизическоеЛицо) = Неопределено Тогда
			ИдентификаторыСтрокФизлиц.Вставить(СтрокаЗарплаты.ФизическоеЛицо, СтрокаТЧСостав.ИдентификаторСтроки); 
		КонецЕсли;	
	КонецЦикла;
	
	ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц);
	
КонецПроцедуры

Процедура УстановитьНДФЛ(Ведомость, НДФЛ, Знач ФизическиеЛица = Неопределено) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛ, "ФизическоеЛицо", Истина);
	КонецЕсли;
	
	// Очищаем старые налоги указанных физлиц
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаНДФЛ Из Ведомость.НДФЛ Цикл
		Если ФизическиеЛица.Найти(СтрокаНДФЛ.ФизическоеЛицо) <> Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаНДФЛ);
		КонецЕсли;
	КонецЦикла;	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Ведомость.НДФЛ.Удалить(УдаляемаяСтрока)
	КонецЦикла;
	
	// Запоминаем идентификаторы строк для обрабатываемых физлиц
	ИдентификаторыСтрокФизлиц = Новый Соответствие;
	Для Каждого СтрокаТЧСостав Из Ведомость.Состав Цикл
		Если ФизическиеЛица.Найти(СтрокаТЧСостав.ФизическоеЛицо) <> Неопределено Тогда
			ИдентификаторыСтрокФизлиц.Вставить(СтрокаТЧСостав.ФизическоеЛицо, СтрокаТЧСостав.ИдентификаторСтроки)
		КонецЕсли;
	КонецЦикла;	
	
	ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц);
	
КонецПроцедуры	

Процедура ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц)
	
	// Получаем список различных физических лиц в налогах.
	Физлица = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛ, "ФизическоеЛицо", Истина);
	
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НДФЛ, "ФизическоеЛицо");
	
	// Помещаем НДФЛ в ТЧ, связывая с первой строкой состава этого физлица.
	// Если строки состава для физлица нет - создаем.
	Для Каждого Физлицо Из Физлица Цикл
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = Физлицо; 
		
		Если ИдентификаторыСтрокФизлиц.Получить(Физлицо) = Неопределено Тогда
			СтрокаТЧСостав = НоваяСтрокаСостава(Ведомость, ПараметрыОтбораНДФЛ);
			ИдентификаторыСтрокФизлиц.Вставить(Физлицо, СтрокаТЧСостав.ИдентификаторСтроки)
		КонецЕсли;
		
		НФДЛФизлица = НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);

		Для Каждого СтрокаНДФЛ Из НФДЛФизлица Цикл
			СтрокаТЧНДФЛ = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧНДФЛ, СтрокаНДФЛ);
			СтрокаТЧНДФЛ.ИдентификаторСтроки = ИдентификаторыСтрокФизлиц[Физлицо];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВзыскания(Ведомость, Зарплата) Экспорт
	
	// Получаем суммы, взысканные с указанных выплат
	ПорядокВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	Взыскания = ВзысканияПоИсполнительнымДокументам(Зарплата, ПорядокВыплаты);

	// Переносим взыскания в ведомость, связывая с первой строкой состава этого физлица.
	Для Каждого Физлицо Из ОбщегоНазначения.ВыгрузитьКолонку(Зарплата, "ФизическоеЛицо", Истина) Цикл
		СтрокаСостава  = Ведомость.Состав.Найти(Физлицо, "ФизическоеЛицо");
		Если СтрокаСостава = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Взыскание = Взыскания.Найти(Физлицо, "ФизическоеЛицо");
		Если Взыскание = Неопределено Тогда
			СтрокаСостава.ВзысканнаяСумма = 0;
		Иначе	
			СтрокаСостава.ВзысканнаяСумма = Взыскание.Сумма
		КонецЕсли	
	КонецЦикла;
	
КонецПроцедуры	

Функция НоваяСтрокаСостава(Ведомость, ЗначенияКлючевыхПолей)
	СтрокаТЧСостав = Ведомость.Состав.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТЧСостав, ЗначенияКлючевыхПолей);
	СтрокаТЧСостав.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	Возврат СтрокаТЧСостав
КонецФункции

#КонецОбласти

#Область ПроведениеВедомостей

Процедура ЗарегистрироватьВыплатуВоВзаиморасчетах(Ведомость, Отказ)
	
	ОписаниеКолонокЗарплаты = ВзаиморасчетыССотрудниками.НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты();
	ОписаниеКолонокЗарплаты.Сумма = "КВыплате";
	
	Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти(
		Ведомость.Зарплата,
		ОписаниеКолонокЗарплаты);
	
	ПорядокВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьВыплаченнуюЗарплату(
		Ведомость.Движения, 
		Отказ, 
		Ведомость.Организация, 
		Ведомость.ПериодРегистрации, 
		Зарплата,
		ПорядокВыплаты)
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплатуВУчетеНДФЛ(Ведомость, Отказ)
	ВедомостьНаВыплатуЗарплатыВнутренний.ЗарегистрироватьВыплатуВУчетеНДФЛ(Ведомость, Отказ);
КонецПроцедуры

Процедура ЗарегистрироватьНДФЛКПеречислению(Ведомость, Отказ, НаборыЗаписейНДФЛ) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДатаОперации = Ведомость.Дата;
	ДатаВыплаты  = ВедомостьНаВыплатуЗарплатыКлиентСервер.ДатаВыплаты(Ведомость);
	
	// Создание временной таблицы ВТНалогУдержанный
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Ведомость.НДФЛ, ДатаОперации); 
	
	// Получение базы для распределения НДФЛ к перечислению из временной таблицы ВТНалогУдержанный,
	// всегда выполняется до вызова методов подсистемы НДФЛ.
	ДанныеДляДополнения = ОтражениеЗарплатыВУчете.ДанныеДляДополненияНДФЛУдержанногоСтатьями(МенеджерВременныхТаблиц);
	
	МежрасчетныеВыплаты = МежрасчетныеВыплатыДляНФДЛПоДокументу(Ведомость);
	УчетНДФЛ.СформироватьУдержанныйНалогПоВременнойТаблице(
		НаборыЗаписейНДФЛ, Отказ, 
		Ведомость.Организация, ДатаВыплаты, 
		МенеджерВременныхТаблиц,, Ложь,, 
		Ведомость.Ссылка, 
		МежрасчетныеВыплаты);
	УчетНДФЛ.СформироватьНДФЛКПеречислению(Ведомость.Движения, Отказ, НаборыЗаписейНДФЛ);
	
	ОтражениеЗарплатыВУчете.ДополнитьНДФЛКПеречислениюСведениямиОРаспределенииПоСтатьям(
		Ведомость.Движения, 
		ДанныеДляДополнения);

КонецПроцедуры

#КонецОбласти

#Область ОплатаВедомостей

// Процедура регистрирует оплату ведомостей в бухгалтерских взаиморасчетах
//
// Параметры:
//  ПлатежныйДокумент	 - ДокументОбъект - платежный документ, регистрирующий оплату ведомостей.
//  Организация			 - СправочникСсылка.Организации - организация.
//  Ведомости			 - Массив - ведомости, оплату которых требуется зарегистрировать 
//  ФизическиеЛица		 - Массив - физические лица, для которых требуется зарегистрировать оплату. 
//                                  Если не указан - для всех физических лиц.
//  ДатаОперации		 - Дата - дата платежа.
//  Отказ				 - Булево - признак отказа в проведении.
//
Процедура ЗарегистрироватьОплатуВВзаиморасчетах(
	ПлатежныйДокумент, 
	Организация, 
	Ведомости, 
	ФизическиеЛица, 
	ДатаОперации, 
	Отказ) Экспорт
	
	ХарактерВыплатыВедомостей = РеквизитСпособовВыплатыВедомостей(Ведомости, "ХарактерВыплаты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ведомости",	 Ведомости);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Регистратор КАК Ведомость,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение КАК Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Организация = &Организация
	|	И ВзаиморасчетыССотрудниками.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыССотрудниками.Регистратор,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&ФизическиеЛица", 
			"ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ведомость") Цикл
		Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыданнойЗарплаты();
		Пока Выборка.Следующий() Цикл
			СтрокаЗарплаты = Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Выборка);
		КонецЦикла;	
		ВзаиморасчетыССотрудниками.ЗарегистрироватьВыданнуюЗарплату(
			ПлатежныйДокумент.Движения, 
			Отказ, 
			Организация, 
			ДатаОперации, 
			Зарплата, 
			ХарактерВыплатыВедомостей[Выборка.Ведомость])
	КонецЦикла;	

КонецПроцедуры

// Регистрация удержания НДФЛ при оплате ведомостей.
//
// Параметры:
//		ПлатежныйДокумент - ДокументОбъект - платежный документ.
//		Организация       - СправочникСсылка.Организации - организация, выплачивающая зарплату.
//		Ведомости         - Массив - оплачиваемые ведомости на выплату зарплаты
//                          (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//                          ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк и т.д.)
//		ФизическиеЛица    - Массив - физические лица (СправочникСсылка.ФизическиеЛица), получившие выплаты по ведомостям 
//		ДатаОперации      - Дата   - дата фактического выполнения оплаты.
//		Отказ             - Булево - признак отказа от выполнения операции.
//
Процедура ЗарегистрироватьОплатуВУчетеНДФЛ(
	ПлатежныйДокумент, 
	Организация, 
	Ведомости, 
	ФизическиеЛица, 
	ДатаОперации, 
	Отказ)
	
	ПериодРегистрации = ЗарегистрироватьОплатуВУчетеНДФЛПериодРегистрации(Организация, Ведомости, ФизическиеЛица);
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		Возврат
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// удержанные налоги
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(
		МенеджерВременныхТаблиц, 
		ЗапросНДФЛВедомостей(МенеджерВременныхТаблиц, Ведомости, ФизическиеЛица), 
		ДатаОперации); 
		
	// Знание, выполняется ли для ведомости окончательный расчет НДФЛ 
	// необходимо для получения создания таблиц выплат - всех (ВТСписокСотрудников) и межрасчетных.
	СоздатьВТРеквизитыСпособовВыплатыВедомостей(МенеджерВременныхТаблиц, Ведомости, "ОкончательныйРасчетНДФЛ");
		
	// выплачиваемый доход
	СоздатьВТСписокСотрудниковДляНДФЛПоДаннымУчета(
		МенеджерВременныхТаблиц,
		Организация, 
		ПериодРегистрации,
		Ведомости, 
		ФизическиеЛица);		
	
	// в т.ч. межрасчетные выплаты
	МежрасчетныеВыплаты = МежрасчетныеВыплатыДляНФДЛПоДаннымУчета(
		Организация, 
		Ведомости, 
		ФизическиеЛица,
		МенеджерВременныхТаблиц); // менеджер ВТ передается для переиспользования ВТ с реквизитами способов выплаты

	УчетНДФЛ.ЗарегистрироватьУдержанныйНалогПриВыплате(
		ПлатежныйДокумент.Движения, Отказ, 
		Организация, ДатаОперации, 
		ДатаОперации, 
		МенеджерВременныхТаблиц, 
		ПлатежныйДокумент.Ссылка, 
		МежрасчетныеВыплаты);
	
	УчетНДФЛ.СторнироватьНДФЛКПеречислениюПоВедомостям(ПлатежныйДокумент.Движения, Отказ, Ведомости, ФизическиеЛица);
	
КонецПроцедуры

Функция ЗарегистрироватьОплатуВУчетеНДФЛПериодРегистрации(Организация, Ведомости, ФизическиеЛица)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ведомости",   Ведомости);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗарплатаКВыплате.Период) КАК ПериодРегистрации
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	ВыборкаМаксимальногоПериода = Запрос.Выполнить().Выбрать();
	Если ВыборкаМаксимальногоПериода.Следующий() Тогда
		Возврат ВыборкаМаксимальногоПериода.ПериодРегистрации
	Иначе	
		Возврат Неопределено
	КонецЕсли;	
	
КонецФункции

Функция ЗапросНДФЛВедомостей(МенеджерВременныхТаблиц, Ведомости, ФизическиеЛица = Неопределено)
	
	ЗапросНДФЛ = Новый Запрос;
	ЗапросНДФЛ.УстановитьПараметр("Ведомости", Ведомости);
	
	ШаблонЗапросаНФДЛВедомости = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	#ВедомостьНаВыплатуЗарплатыНДФЛ КАК ВедомостьНаВыплатуЗарплатыНДФЛ
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыНДФЛ.Ссылка В(&Ведомости)
	|	И &ФизическиеЛица";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		ШаблонЗапросаНФДЛВедомости = СтрЗаменить(ШаблонЗапросаНФДЛВедомости, 
			"&ФизическиеЛица", 
			"ВедомостьНаВыплатуЗарплатыНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)");
		ЗапросНДФЛ.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		ЗапросНДФЛ.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	
	ТипыВедомостей = Новый Соответствие;
	Для Каждого Ведомость Из Ведомости Цикл
		ТипыВедомостей.Вставить(Ведомость.Метаданные().ПолноеИмя());
	КонецЦикла;
	
	ЗапросыНФДЛВедомостей = Новый Массив;
	Для Каждого ТипВедомости Из ТипыВедомостей Цикл
		ЗапросыНФДЛВедомостей.Добавить(
			СтрЗаменить(
				ШаблонЗапросаНФДЛВедомости, 
				"#ВедомостьНаВыплатуЗарплатыНДФЛ", 
				ТипВедомости.Ключ + ".НДФЛ"));
	КонецЦикла;
	
	ЗапросНДФЛ.Текст = 
		СтрСоединить(
			ЗапросыНФДЛВедомостей,
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|");

	Возврат ЗапросНДФЛ
	
КонецФункции

Процедура СоздатьВТСписокСотрудниковДляНДФЛПоДаннымУчета(
		МенеджерВременныхТаблиц,
		Организация, 
		ПериодРегистрации,
		Ведомости, 
		ФизическиеЛица, 
		Знач ИмяВТРеквизитыСпособовВыплатыВедомостей = "ВТРеквизитыСпособовВыплатыВедомостей")
		
	Если МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТРеквизитыСпособовВыплатыВедомостей) = Неопределено Тогда
		СоздатьВТРеквизитыСпособовВыплатыВедомостей(
			МенеджерВременныхТаблиц, 
			Ведомости, 
			"ОкончательныйРасчетНДФЛ", 
			ИмяВТРеквизитыСпособовВыплатыВедомостей);
	КонецЕсли;
	
	// Получаем выплаты ведомостей 	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ведомости",   Ведомости);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК СуммаВыплаты,
	|	МАКСИМУМ(СпособыВыплаты.ОкончательныйРасчетНДФЛ) КАК ОкончательныйРасчет
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРеквизитыСпособовВыплатыВедомостей КАК СпособыВыплаты
	|		ПО ЗарплатаКВыплате.Регистратор = СпособыВыплаты.Ведомость
	|ГДЕ
	|	ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.ВидДоходаИсполнительногоПроизводства";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	Запрос.Выполнить();
	
	// Дополняем выплаты сведениями о состоянии выплат и помещаем в целевую ВТ
	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, "ВТЗарплатаКВыплате");
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, 
		Организация, ПериодРегистрации, 
		Ведомости, 
		"ВТСписокСотрудников");
	
КонецПроцедуры		

// АПК:581-выкл Экспорт не избыточен - функция нужна в расширенной реализации

Процедура СоздатьВТСписокСотрудниковПоТаблицеЗарплат(
		МенеджерВременныхТаблиц, 
		ТаблицаЗарплат, 
		Организация, 
		ПериодРегистрации, 
		Регистратор = Неопределено, 
		ОкончательныйРасчет = Неопределено) Экспорт

	КолонкиГруппировокСпискаСотрудников = 
		"ФизическоеЛицо, 
		|ДокументОснование, 
		|СтатьяФинансирования, 
		|СтатьяРасходов, 
		|ВидДоходаИсполнительногоПроизводства";
	КолонкиСпискаСотрудников = СтрШаблон("%1, КВыплате", КолонкиГруппировокСпискаСотрудников); 
	Если ТипЗнч(ТаблицаЗарплат) = Тип("ТаблицаЗначений") Тогда
		СписокСотрудников = ТаблицаЗарплат.Скопировать(, КолонкиСпискаСотрудников);
	Иначе
		СписокСотрудников = ТаблицаЗарплат.Выгрузить(, КолонкиСпискаСотрудников);
	КонецЕсли;	
	СписокСотрудников.Свернуть(КолонкиГруппировокСпискаСотрудников, "КВыплате");
	СписокСотрудников.Колонки.КВыплате.Имя = "СуммаВыплаты";
	Если ТипЗнч(ОкончательныйРасчет) = Тип("Булево") Тогда
		СписокСотрудников.Колонки.Добавить("ОкончательныйРасчет", Новый ОписаниеТипов("Булево"));
		СписокСотрудников.ЗаполнитьЗначения(ОкончательныйРасчет, "ОкончательныйРасчет");
	КонецЕсли;
	
	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, СписокСотрудников);
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, 
		Организация, ПериодРегистрации, 
		?(Регистратор = Неопределено, Неопределено, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Регистратор)), 
		"ВТСписокСотрудников");
	
КонецПроцедуры

// АПК:581-вкл

Функция МежрасчетныеВыплатыДляНФДЛПоДаннымУчета(
		Организация, 
		Ведомости, 
		ФизическиеЛица, 
		Знач МенеджерВременныхТаблиц = Неопределено, 
		Знач ИмяВТРеквизитыСпособовВыплатыВедомостей = "ВТРеквизитыСпособовВыплатыВедомостей")
		
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	Если МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТРеквизитыСпособовВыплатыВедомостей) = Неопределено Тогда
		СоздатьВТРеквизитыСпособовВыплатыВедомостей(
			МенеджерВременныхТаблиц, 
			Ведомости, 
			"ОкончательныйРасчетНДФЛ", 
			ИмяВТРеквизитыСпособовВыплатыВедомостей);
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Ведомости",		Ведомости);
	
	// Данные ведомостей 	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРеквизитыСпособовВыплатыВедомостей КАК СпособыВыплаты
	|		ПО ЗарплатаКВыплате.Регистратор = СпособыВыплаты.Ведомость
	|ГДЕ
	|	ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(СпособыВыплаты.ОкончательныйРасчетНДФЛ)";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&ФизическиеЛица", 
			"ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"ВТРеквизитыСпособовВыплатыВедомостей", 
		ИмяВТРеквизитыСпособовВыплатыВедомостей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// АПК:581-выкл Экспорт не избыточен - функция нужна в расширенной реализации

Функция МежрасчетныеВыплатыДляНФДЛПоДокументу(Ведомость) Экспорт
	
	Колонки = 
		"ФизическоеЛицо,
		|Сотрудник,
		|ДокументОснование,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|Подразделение,
		|ПериодВзаиморасчетов";
	
	ОкончательныйРасчетНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Ведомость.СпособВыплаты, 
		"ОкончательныйРасчетНДФЛ");
	
	Если ОкончательныйРасчетНДФЛ Тогда
		МежрасчетныеВыплаты = Ведомость.Зарплата.ВыгрузитьКолонки(Колонки);
	Иначе	
		МежрасчетныеВыплаты = Ведомость.Зарплата.Выгрузить(, Колонки);
	КонецЕсли;

	Возврат МежрасчетныеВыплаты
	
КонецФункции

// АПК:581-вкл

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОчиститьВидыДоходовИсполнительногоПроизводстваЗарплаты(МетаданныеВедомости, ПараметрыОбновления) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр(
		"ДатаНачалаПередачиВидаДоходаБанку", 
		ВидыДоходовИсполнительногоПроизводстваКлиентСервер.ДатаНачалаПередачиВидаДоходаБанку());
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ПериодВзаиморасчетов < &ДатаНачалаПередачиВидаДоходаБанку
	|	И ВедомостьЗарплата.ВидДоходаИсполнительногоПроизводства <> ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка)";
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"#ВедомостьЗарплата",  
		СтрШаблон("%1.Зарплата", МетаданныеВедомости.ПолноеИмя())); 
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(МетаданныеВедомости);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	Иначе
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	КонецЕсли;	
	
	КолонкиСуммирования = ОбщегоНазначенияБЗККлиентСервер.ЗначенияВМассиве("КВыплате", "КомпенсацияЗаЗадержкуЗарплаты");
	КолонкиГруппировок  = ОбщегоНазначения.ВыгрузитьКолонку(МетаданныеВедомости.ТабличныеЧасти.Зарплата.Реквизиты, "Имя");
	КолонкиГруппировок  = ОбщегоНазначенияКлиентСервер.РазностьМассивов(КолонкиГруппировок, КолонкиСуммирования);
	КолонкиГруппировок  = СтрСоединить(КолонкиГруппировок, ",");
	КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ",");
	ОтборНулевыхСтрок = Новый Структура("КВыплате", 0);
	
	ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
	Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
		
		ОписаниеБлокировки.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Ссылка;
		Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Продолжить	
		КонецЕсли;
		
		Ведомость = ВыборкаОбновляемыхДанных.Ссылка.ПолучитьОбъект();
		
		УчетНачисленнойЗарплаты.ОчиститьВидыДоходовИсполнительногоПроизводстваНабораЗаписей(
			Ведомость.Зарплата, 
			"ПериодВзаиморасчетов");
		
		Ведомость.Зарплата.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		Для Каждого НулеваяСтрока Из Ведомость.Зарплата.НайтиСтроки(ОтборНулевыхСтрок) Цикл
			Ведомость.Зарплата.Удалить(НулеваяСтрока)
		КонецЦикла;	
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Ведомость); // АПК:1327 Блокировка в ОбновлениеИБ.НачатьОбновлениеДанных
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);			
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти