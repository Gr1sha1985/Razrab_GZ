///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостейПереопределяемый.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДополнительнаяОбработкаКлассификаторов

// Если после получения и записи классификатора надо что-то сделать, то это можно сделать в этой процедуре.
// Классификатор уже записан в базу данных, поэтому можно менять связанные справочники и регистры сведений.
// Для обеспечения целостности приходящих с серверов 1С данных, обработчика ПередЗаписью нет,
//  т.е. манипулировать отменой записи нельзя. Также отсутствует параметр Отказ.
// Шаблон для переопределения:
// Если ТипЗнч(КлассификаторСсылка) = Тип("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
//	Если НЕ КлассификаторСсылка.Пустая() Тогда
//		//
//	КонецЕсли;
// ИначеЕсли ТипЗнч(КлассификаторСсылка) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
//	Если НЕ КлассификаторСсылка.Пустая() Тогда
//		//
//	КонецЕсли;
// ИначеЕсли ТипЗнч(КлассификаторСсылка) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
//	Если НЕ КлассификаторСсылка.Пустая() Тогда
//		//
//	КонецЕсли;
// КонецЕсли;
//
// Параметры:
//  КлассификаторСсылка - СправочникСсылка - Классификатор, который был только что записан.
//
//@skip-warning
Процедура ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(КлассификаторСсылка) Экспорт
	Если ТипЗнч(КлассификаторСсылка) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		Если НЕ КлассификаторСсылка.Пустая() 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлассификаторСсылка, "Код") = "TaxesAndFees" Тогда
			
			Справочники.РегистрацииВНалоговомОргане.УстановитьОтборНовостейТорговыйСбор();
		КонецЕсли;
 	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДополнительнаяОбработкаТекстаНовости

// Если перед выводом новости пользователю, разработчику надо "доработать" ее текст - заменить какие-то теги, удалить блоки текста и т.п.,
//  то это можно сделать в этой процедуре.
// При формировании текста происходит несколько стадий:
//  вначале компонуется ХТМЛ-текст одной или списка новостей (то, что внутри <body></body>),
//  затем полученный текст обрамляется тегами <html></html> и стилями.
//  В этой процедуре можно обработать текст одной новости, без стилей (то, что внутри <body></body>).
// Здесь можно изменить окончательный текст новости, например:
//   найти теги <div> с идентификатором id="MainOrganization" и заменить на наименование основной организации;
//   найти теги <a> с идентификатором id="Total51AccountTurnover" и заменить на общую сумму оборота по 51 счету;
//   найти комментарий <!-- Вставить здесь html-текст для бухгалтера --> и заменить.
// Примеры:
// // Преобразовать текст ХТМЛ в документДОМ для обработки
// ЧтениеХТМЛ = Новый ЧтениеHTML;
// ЧтениеХТМЛ.УстановитьСтроку(ТекстХТМЛ);
// ПостроительДОМ = Новый ПостроительDOM;
// ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
// // Найти и заменить элементы внутри body (только первого уровня вложенности!)
// Для каждого ТекущийЭлементХТМЛ Из ДокументДОМ.Тело.ДочерниеУзлы Цикл
//	// Дополнение текстов
//	Если ТекущийЭлементХТМЛ.ТипУзла = ТипУзлаDOM.Элемент Тогда
//		Если ВРег(ТекущийЭлементХТМЛ.Идентификатор) = ВРег("MainOrganization") Тогда
//			ТекущийЭлементХТМЛ.ТекстовоеСодержимое = ТекущийЭлементХТМЛ.ТекстовоеСодержимое + ", ...";
//		КонецЕсли;
//	КонецЕсли;
// КонецЦикла;
// // Преобразовать документДОМ обратно в строку
// ЗаписьХТМЛ = Новый ЗаписьHTML;
// ЗаписьХТМЛ.УстановитьСтроку();
// ЗаписьДОМ = Новый ЗаписьDOM;
// ЗаписьДОМ.Записать(ДокументДОМ, ЗаписьХТМЛ);
// ТекстХТМЛ = ЗаписьХТМЛ.Закрыть();
// // Можно обрабатывать текст ХТМЛ как строку - это быстрее чем ДОМ.
// // Заменить "длинную" ссылку на полный текст новости на гиперссылку с надписью "здесь".
// НайденоНачалоБлока = СтрНайти(ТекстХТМЛ, "<div id=""newsHyperlink"">");
// Если НайденоНачалоБлока > 0 Тогда
//	НайденКонецБлока = 0;
//	Для С=НайденоНачалоБлока+24 По СтрДлина(ТекстХТМЛ)-6 Цикл
//		Если ВРег(Сред(ТекстХТМЛ, С, 6)) = ВРег("</div>") Тогда
//			НайденКонецБлока = С;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	Если НайденКонецБлока > 0 Тогда
//		// Все что между - это <a href="...">...</a>, можно заменить
//		НачалоГиперссылки = НайденоНачалоБлока + 24;
//		КонецГиперссылки = НайденКонецБлока;
//		ВременныйТекстХТМЛ =
//			Лев(ТекстХТМЛ, НачалоГиперссылки)
//			+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + "%СсылкаНаПолныйТекстНовости%" + Символы.ПС
//			+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Прав(ТекстХТМЛ, СтрДлина(ТекстХТМЛ) - КонецГиперссылки + 1);
//		Если ПустаяСтрока(ОбъектНовости.СсылкаНаПолныйТекстНовости) Тогда
//			ВременныйТекстХТМЛ = СтрЗаменить(ВременныйТекстХТМЛ, "%СсылкаНаПолныйТекстНовости%", "");
//		Иначе
//			// Всегда писать "здесь"
//			ВременныйТекстХТМЛ = СтрЗаменить(
//				ВременныйТекстХТМЛ,
//				"%СсылкаНаПолныйТекстНовости%",
//				"Полный текст новости <a href=""" + СокрЛП(ОбъектНовости.СсылкаНаПолныйТекстНовости) + """>здесь</a>");
//		КонецЕсли;
//		ТекстХТМЛ = ВременныйТекстХТМЛ;
//	КонецЕсли;
// КонецЕсли; // Конец примера.
// Примечания:
//  - Не рекомендуется для замены использовать СтрШаблон() и СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(),
//     т.к. это может "повредить" ссылки (удалятся "%1", "%2", ...). Пример ссылки, которая может быть повреждена:
//       http://its.1c.ru/news/redirect?utm_source=news_center&utm_medium=prog&url=%2Fdb%2Farbit%23content%3A4506%3Ahdoc.
//
// Параметры:
//  ОбъектНовости - СправочникОбъект.Новости - Новость, для которой необходимо изменить уже подготовленный текст;
//  ТекстХТМЛ     - Строка - уже подготовленный текст, который по-умолчанию будет отображен в форме просмотра новости.
//
// Возвращаемое значение:
//   Строка - окончательный текст новости (то, что внутри <body></body>).
//
//@skip-warning
Процедура ДополнительноОбработатьТекстНовостиПередПоказом(ОбъектНовости, ТекстХТМЛ) Экспорт
	
	// Заменить "длинную" ссылку на полный текст новости на гиперссылку с надписью "здесь"
	ОткрывающийТег = "<div id=""newsHyperlink"">";
	ЗакрывающийТег = "</div>";
	ДлинаОткрывающегоТега = СтрДлина(ОткрывающийТег); // 24 - длина открывающего тега div
	ДлинаЗакрывающегоТега = СтрДлина(ЗакрывающийТег); // 6 - длина закрывающего тега div
	НайденоНачалоБлока = Найти(ТекстХТМЛ, ОткрывающийТег);
	Если НайденоНачалоБлока > 0 Тогда
		НайденКонецБлока = 0;
		Для С=НайденоНачалоБлока + ДлинаОткрывающегоТега По СтрДлина(ТекстХТМЛ) - ДлинаЗакрывающегоТега Цикл // Не включая сами теги
			Если ВРег(Сред(ТекстХТМЛ, С, ДлинаЗакрывающегоТега)) = ВРег(ЗакрывающийТег) Тогда
				НайденКонецБлока = С;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НайденКонецБлока > 0 Тогда
			// Все что между - это <a href="...">...</a>, можно заменить
			НачалоГиперссылки = НайденоНачалоБлока + ДлинаОткрывающегоТега;
			КонецГиперссылки = НайденКонецБлока;
			ВременныйТекстХТМЛ =
				Лев(ТекстХТМЛ, НачалоГиперссылки)
				+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + "%СсылкаНаРесурс%" + Символы.ПС
				+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Прав(ТекстХТМЛ, СтрДлина(ТекстХТМЛ) - КонецГиперссылки + 1);			
			Если ПустаяСтрока(ОбъектНовости.СсылкаНаПолныйТекстНовости) Тогда
				
				// Ссылка на полный текст новости.
				ВременныйТекстХТМЛ = СтрЗаменить(ВременныйТекстХТМЛ, "%СсылкаНаРесурс%", "");
				
			Иначе
				
				// Всегда писать "здесь"
				ВременныйТекстХТМЛ = СтрЗаменить(ВременныйТекстХТМЛ, "%СсылкаНаРесурс%",
					"Полный текст новости <a href=""" + СокрЛП(ОбъектНовости.СсылкаНаПолныйТекстНовости) + """>здесь</a>");
					
			КонецЕсли;

			ТекстХТМЛ = ВременныйТекстХТМЛ;
		КонецЕсли;
	КонецЕсли;
	
	// Заменить предопределенные комментарии
	МассивПредопределенныхКомментариев = Новый Массив;
	МассивПредопределенныхКомментариев.Добавить(
		Новый Структура("ЧтоИскать, ЧемЗаменять",
		"<!-- Где искать кнопку новости -->",
		НСтр("ru='<p>Эту и другие новости можно посмотреть по кнопке ''<b>Новости</b>'' в меню ''<b>Еще</b>''.
		|<br/>Ознакомиться со всеми новостями по разделу можно по ссылке ''<b>Новости</b>'' подраздела ''<b>Информация</b>'' меню функций раздела</p>'")
		)
	);
	Для Каждого ТекущийКомментарий Из МассивПредопределенныхКомментариев Цикл
		
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, ТекущийКомментарий.ЧтоИскать, ТекущийКомментарий.ЧемЗаменять);
		
	КонецЦикла;
	
		// обработать новость про изменения в версии
	Если Найти(ОбъектНовости.Подзаголовок, "Новое в версии") >0 Тогда
		
		// скрытие блоков в зависимости от функциональных опций
		// в тексте новости, блок, зависящий от функциональной опции формируется следующим образом:
		// блок оглавления: <p class="FO НазваниеФункциональной опции">
		// блок раздела:   <div class="НазваниеФункциональной опции">
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(ТекстХТМЛ);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
		ЧтениеHTML.Закрыть();
		ЭлементыР = ДокументDOM.ПолучитьЭлементыПоИмени("p");
		
		МассивСтилей = Новый Массив;
		МассивСтилей.Добавить("<STYLE>");
		
		ИспользуетсяСервисЭлектронныхТрудовыхКнижек = СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек();
		
		Для Каждого ЭлементР Из ЭлементыР Цикл
			ИмяКлассов = ЭлементР.ИмяКласса;
			Если Лев(ИмяКлассов, 2) = "FO" Тогда
				ИмяКлассов = СтрЗаменить(ИмяКлассов,"FO ","");
				МассивКлассов = СтрРазделить(ИмяКлассов,"-");
				СкрыватьЗадачу = Ложь;
				Для ИндексКласса = 0 По МассивКлассов.Количество() - 1 Цикл
					ИмяФО = МассивКлассов.Получить(ИндексКласса);
					ТекущаяФО = Метаданные.ФункциональныеОпции.Найти(ИмяФО);
					Если ТекущаяФО <> Неопределено
						И ТекущаяФО.Хранение.Тип = Новый ОписаниеТипов("Булево")
						И Не ПолучитьФункциональнуюОпцию(ИмяФО) Тогда
						СкрыватьЗадачу = Истина;
					ИначеЕсли ИмяФО = "ТолькоДляКоробочныхВерсий" 
						И ОбщегоНазначения.РазделениеВключено() Тогда
						СкрыватьЗадачу = Истина;
					ИначеЕсли ИмяФО = "ТолькоДляОблачныхВерсий" 
						И Не ОбщегоНазначения.РазделениеВключено() Тогда
						СкрыватьЗадачу = Истина;
					ИначеЕсли ИмяФО = "ЭтоБизнесСтарт"
						И (Не ОбщегоНазначения.РазделениеВключено() 
						ИЛИ Не ОбщегоНазначенияБП.ЭтоВитринаБизнесСтарта()) Тогда
						СкрыватьЗадачу = Истина;
					ИначеЕсли Найти(ИмяФО,"ВерсияКонфигурации")>0 
						И НЕ ОбщегоНазначенияБП.ПолучитьЗначениеФункциональности(ИмяФО) Тогда
						СкрыватьЗадачу = Истина;
					КонецЕсли;
					
					Если ИспользуетсяСервисЭлектронныхТрудовыхКнижек
						И НЕ ИмяФО = "ИнтерфейсЭлектронныхТрудовыхКнижек" Тогда
						СкрыватьЗадачу = Истина;
					КонецЕсли;
				КонецЦикла;
				Если СкрыватьЗадачу Тогда
					МассивСтилей.Добавить("." + ИмяКлассов + " " + "{display: none;}");
				КонецЕсли;
				
			ИначеЕсли ИспользуетсяСервисЭлектронныхТрудовыхКнижек Тогда
				Если Не ПустаяСтрока(ЭлементР.ТекстовоеСодержимое) Тогда
					НачалоОткрывающегоТега = "<a href=""#idPart"; // Ссылка заголовка содержания
					НачалоСтроки = СтрНайти(ТекстХТМЛ, СокрЛП(ЭлементР.ТекстовоеСодержимое));
					ДлинаОткрывающегоТега = 20; // для 3-х значного номера
					ВременныйТекстХТМЛ = Сред(ТекстХТМЛ, НачалоСтроки - ДлинаОткрывающегоТега, ДлинаОткрывающегоТега);
					НайденоНачалоБлока = СтрНайти(ВременныйТекстХТМЛ, НачалоОткрывающегоТега);
					Если НайденоНачалоБлока <> 0 Тогда
						
						ВременныйТекстХТМЛ = Сред(ВременныйТекстХТМЛ, НайденоНачалоБлока);
						
						МассивСтилей.Добавить(".СкрытаяНовость{display: none;}");
						
						ВременныйТекстХТМЛ = СтрЗаменить(ВременныйТекстХТМЛ, НачалоОткрывающегоТега, "");
						ПозицияЗакрывающегоСимвола = СтрНайти(ВременныйТекстХТМЛ, """>");
						НомерСсылки = Сред(ВременныйТекстХТМЛ, 1, ПозицияЗакрывающегоСимвола-1);
						ОткрывающийТег = "<a href=""#idPart" + НомерСсылки + """>";
						
						ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, ОткрывающийТег, "<p class=""FO СкрытаяНовость"">" + ОткрывающийТег);
						
						ЗакрывающийТег = "<h5 id=""idPart" + НомерСсылки + """>";
						НайденКонецБлока = СтрНайти(ТекстХТМЛ, ЗакрывающийТег);
						Если НайденКонецБлока <> 0 Тогда
							ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, ЗакрывающийТег, "<div class=""СкрытаяНовость"">" + ЗакрывающийТег);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "<style>", СтрСоединить(МассивСтилей, Символы.ПС));
		
		// Удаление импортированных данных про дату публикации новости
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "div id=""importance", "div style=""display: none"" id=""importance");
		
	КонецЕсли;
	
КонецПроцедуры

// Если перед выводом новости пользователю, разработчику надо "доработать" ее текст - заменить какие-то теги, стили, удалить блоки текста и т.п.,
//  то это можно сделать в этой процедуре.
// При формировании текста происходит несколько стадий:
//  вначале компонуется ХТМЛ-текст одной или списка новостей (то, что внутри <body></body>),
//  затем полученный текст обрамляется тегами <html></html> и стилями.
//  В этой процедуре можно обработать результирующий текст одной или списка новости, включая заголовки, стили и т.п.
// Здесь можно изменить окончательный текст новости, например:
//   найти теги <div> с идентификатором id="MainOrganization" и заменить на наименование основной организации
//   найти теги <a> с идентификатором id="Total51AccountTurnover" и заменить на общую сумму оборота по 51 счету
//   найти стиль с описанием класса с именем class="ShowOnlyIfAutoUpdateAvailable" и заменить
//     .ShowOnlyIfAutoUpdateAvailable:{display:block} на
//     .ShowOnlyIfAutoUpdateAvailable:{display:none}, в случае, если недоступно автообновление из интернет
//   найти комментарий <!-- Вставить здесь html-текст для бухгалтера --> и заменить.
// // Преобразовать текст ХТМЛ в документДОМ для обработки
// ЧтениеХТМЛ = Новый ЧтениеHTML;
// ЧтениеХТМЛ.УстановитьСтроку(ТекстХТМЛ);
// ПостроительДОМ = Новый ПостроительDOM;
// ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
// // Найти и заменить элементы внутри body (только первого уровня вложенности!)
// Для каждого ТекущийЭлементХТМЛ Из ДокументДОМ.Тело.ДочерниеУзлы Цикл
//	// Дополнение текстов
//	Если ТекущийЭлементХТМЛ.ТипУзла = ТипУзлаDOM.Элемент Тогда
//		Если ВРег(ТекущийЭлементХТМЛ.Идентификатор) = ВРег("MainOrganization") Тогда
//			ТекущийЭлементХТМЛ.ТекстовоеСодержимое = ТекущийЭлементХТМЛ.ТекстовоеСодержимое + ", ...";
//		КонецЕсли;
//	КонецЕсли;
// КонецЦикла;
// // Преобразовать документДОМ обратно в строку
// ЗаписьХТМЛ = Новый ЗаписьHTML;
// ЗаписьХТМЛ.УстановитьСтроку();
// ЗаписьДОМ = Новый ЗаписьDOM;
// ЗаписьДОМ.Записать(ДокументДОМ, ЗаписьХТМЛ);
// ТекстХТМЛ = ЗаписьХТМЛ.Закрыть();
// Примечания:
//  - Можно обрабатывать текст ХТМЛ как строку - это быстрее чем ДОМ.
//  - Не рекомендуется для замены использовать СтрШаблон() и СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(),
//     т.к. это может "повредить" ссылки (удалятся "%1", "%2", ...). Пример ссылки, которая может быть повреждена:
//       http://its.1c.ru/news/redirect?utm_source=news_center&utm_medium=prog&url=%2Fdb%2Farbit%23content%3A4506%3Ahdoc.
//
// Параметры:
//  ТекстХТМЛ     - Строка - уже подготовленный текст, который по-умолчанию будет отображен в форме просмотра новости.
//
// Возвращаемое значение:
//   Строка - окончательный текст одной или списка новости.
//
//@skip-warning
Процедура ДополнительноОбработатьТекстСпискаНовостейПередПоказом(ТекстХТМЛ) Экспорт

КонецПроцедуры

// Если после получения новости надо "доработать" ее текст, реквизиты, категории и т.п.,
//  то это можно сделать в этой процедуре.
// Объект новости еще не записан, можно менять все его реквизиты (например, пометку удаления, чтобы управлять видимостью новости).
// Дополнительно передается НовостьХДТО - на случай, если передаются дополнительные теги, их можно отсюда получить.
// Здесь можно изменить все данные новости перед записью, например:
//   для новостей с определенными идентификаторами, которые в НовостномЦентре выдаются специфическим новостям,
//   изменить тексты новости и т.п.
// Список предопределенных УИН новостей (проверять на равенство СокрЛП(ВРег(ОбъектНовости.УИННовости)) и ВРег(указанный УИН)):
//  - для 7be471d8-3a5d-4a2b-bf67-ca8d632f34d8, сообщается о том, что лента новостей - закрытая,
//      и необходимо ввести логин / пароль для доступа к ней;
//  - для 8cb9d0fa-dd13-49d7-a023-b207d2cbc8c4 сообщается о том, что лента новостей - закрытая,
//      и введенные логин / пароль для доступа к ней неправильные;
//  - для bf94d306-8e11-41c2-a7cb-ebc92e8acb3b сообщается о том, что лента новостей - закрытая,
//      и требуется действующая подписка на ИТС;
//  - для 15796c0d-ed48-4a48-90f0-87aa03a158c6 сообщается о том, что лента новостей - закрытая,
//      а текущая подписка на ИТС уже закончена (просрочена);
//  - для a170042d-a073-456a-91b5-881796995a27 сообщается о том, что текущая конфигурация
//      не находится в списке купленных, хотя доступ к ленте новостей разрешен только тем, кто официально
//      приобрел конфигурацию;
//  - для 41dbfdc8-665b-4944-b771-608809627916 сообщается о том, что переданный URL содержит ошибки;
//  - для 1db8ce78-10e1-4556-b891-44b549fe22d7 сообщается о том, что лента новостей
//      не привязана в новостном центре к текущей конфигурации, а значит не должна пытаться получать новости по ней;
//  - для 505748bb-758a-47a5-9566-e4894f85b382 сообщается о том, что лента новостей не существует;
//  - для e91fabe3-adfd-4fdb-b37d-4799faee32ae сообщается о том, что указан неправильный формат (должен быть atom, rss или atom1c);
//  - для 313f4928-a71c-4cef-96ee-a4b6106c1275 или id=Ошибка сообщается обо всех остальных системных ошибках;
//  - для 6588f3f9-d569-478f-a370-7cd75d833966 сообщается о том, что по ленте новостей
//      давно не были получены новости из-за технических ошибок;
//      Новость должна создаваться самой конфигурацией, но возможны ситуации, что сервер сам предупреждает, что он будет отключен.
//  - для 8f9c7dca-3641-4ce1-88cb-5ea1ad021dfd можно в текст новости вставить тег <a id="ClientDebugInformation" />,
//      который будет заменяться на клиентскую отладочную информацию (в дополнение к информации от сервера).
//
// Параметры:
//  ОбъектНовости - СправочникОбъект.Новости - Новость, у которой необходимо изменить данные;
//  НовостьХДТО   - ОбъектXDTO - полученный объект новости.
//
//@skip-warning
Процедура ДополнительноОбработатьНовостьПослеПолученияПередЗаписью(ОбъектНовости, НовостьХДТО) Экспорт
	
	
КонецПроцедуры

// Если после получения новости надо "доработать" ее текст, реквизиты, категории и т.п.,
//  то это можно сделать в этой процедуре.
// Новость уже записана в базу данных, поэтому можно менять связанные регистры сведений.
// Здесь можно изменить все данные, связанные с новостью, после записью, например регистры сведений.
// Для изменения внутри объекта новости, лучше использовать процедуру ДополнительноОбработатьНовостьПослеПолученияПередЗаписью,
//  которая вызывается ДО записи новости.
//
// Параметры:
//  НовостьСсылка - СправочникСсылка.Новости - Новость, у которой необходимо изменить данные.
//
//@skip-warning
Процедура ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи(НовостьСсылка) Экспорт

	// Найдем привязку новости к версии продукта-основания и добавим такую же привязку, но к нашему отраслевому продукту.
	КатегорияНовостей_ВерсияПродукта = "ProductVersion";
	ПродуктОснование         = "Accounting"; // Продукт, на основании которого создан этот отраслевой продукт.
	ТекущийОтраслевойПродукт = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"); // Наименование отраслевого решения (английскими буквами).
	ПродуктыОснования = Новый Массив;
	ПродуктыОснования.Добавить("Accounting");
	ПродуктыОснования.Добавить("AccountingCorp");
	ПродуктыОснования.Добавить("AccountingBase");
	ПродуктыОснования.Добавить("AccountingOneBase");

	// Это отраслевой продукт, созданный на основании БП?
	// Если ДА, то дополнительно обработать новость.
	Если ПродуктыОснования.Найти(ТекущийОтраслевойПродукт) = Неопределено Тогда

		// Добавлять привязку к текущему отраслевому продукту только для новостей из ленты новостей "Обновления".
		Если НовостьСсылка.ЛентаНовостей.Код = "Version_Changes" Тогда

			// Если новость была только что загружена, то вначале заполняется регистр сведений "КатегорииНовостейИнтервалыВерсийНеобработанные",
			//  а уже потом, регламентным заданием - "КатегорииНовостейИнтервалыВерсий".
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Рег.КатегорияНовостейСтрока КАК КатегорияНовостейСтрока,
				|	Рег.ЛентаНовостей           КАК ЛентаНовостей,
				|	Рег.УИННовости              КАК УИННовости,
				|	Рег.Продукт                 КАК Продукт,
				|	Рег.ВерсияОТ                КАК ВерсияОТ,
				|	Рег.ВерсияДО                КАК ВерсияДО
				|ИЗ
				|	РегистрСведений.КатегорииНовостейИнтервалыВерсийНеобработанные КАК Рег
				|ГДЕ
				|	Рег.КатегорияНовостейСтрока = &КатегорияНовостейСтрока
				|	И Рег.ЛентаНовостей = &ЛентаНовостей
				|	И Рег.УИННовости = &УИННовости
				|	И Рег.Продукт = &ПродуктОснование
				|";
			Запрос.УстановитьПараметр("КатегорияНовостейСтрока", КатегорияНовостей_ВерсияПродукта);
			Запрос.УстановитьПараметр("ЛентаНовостей", НовостьСсылка.ЛентаНовостей);
			Запрос.УстановитьПараметр("УИННовости", НовостьСсылка.УИННовости);
			Запрос.УстановитьПараметр("ПродуктОснование", ПродуктОснование);

			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока Выборка.Следующий() Цикл
					Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
						Запись.КатегорияНовостейСтрока = КатегорияНовостей_ВерсияПродукта;
						Запись.ЛентаНовостей           = НовостьСсылка.ЛентаНовостей;
						Запись.УИННовости              = НовостьСсылка.УИННовости;
						Запись.Продукт                 = ТекущийОтраслевойПродукт;
						// Если версия продукта-основания и текущего продукта совпадают, то перенести
						//  эти данные один-в-один (будет заменен только Запись.Продукт).
						// В противном случае указать интервал версий текущего отраслевого решения,
						//  соответствующего версии продукта-основания.
						Запись.ВерсияОТ = Выборка.ВерсияОТ; // "03.00.002.0000"; //
						Запись.ВерсияДО = Выборка.ВерсияДО; // "03.00.002.9999"; //
					Запись.Записать(Истина);
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Если после сеанса получения новостей надо что-то с ними сделать,
//  то это можно сделать в этой процедуре.
// Новости уже записаны в базу данных, обработки по "пересчету" категорий и отборов уже запущены,
//  поэтому можно менять связанные регистры сведений.
// Должно работать в модели сервиса, т.к. запускается из неразделенного сеанса.
// Здесь можно выполнить какие-либо действия после получения всех новостей, например:
//  проанализировать полученные новости и на основании каких-либо данных;
//  сформировать емейл (пришла новость об обновлении конфигурации - написать письмо администратору) и т.п.
// Для удобства получения списка загруженных новостей есть метод ОбработкаНовостей.ПолучитьЗагруженныеНовости
//
// Параметры:
//  ТаблицаДатЗагрузокНовостейПередПолучением - ТаблицаЗначений - состав колонок соответствует
//    регистру сведений ДатыЗагрузкиПоследнихНовостей.
//
//@skip-warning
Процедура ДополнительноОбработатьНовостиПослеПолучения(ТаблицаДатЗагрузокНовостейПередПолучением) Экспорт


КонецПроцедуры

#КонецОбласти

#Область ДополнительнаяОбработкаСписковНовостей

// Вызывается из ОбработкаНовостей.ПолучитьКонтекстныеНовостиДляФормы после получения массива структур контекстных новостей.
// Можно прописать обработку полученного массива контекстных новостей, например удаление некоторых
//  контекстных новостей или изменение их важности.
// Здесь можно изменить данные в уже полученном массиве контекстных новостей, например:
//   если это новый пользователь, то сбросить важность у новостей, у которых есть категория "Только для новых пользователей = Истина";
//   если это новый пользователь, то удалить строки с определенной лентой новостей.
//
// Параметры:
//  ИдентификаторМетаданных          - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы               - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторыСобытийПриОткрытии - Строка, Массив из Строка - строка или массив строк идентификаторов события "ПриОткрытии".
//                                     Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                     новостей. И если это количество > 0, то открывающая форма инициирует
//                                     открытие формы просмотра таких новостей.
//  МассивСтруктурНовостей           - Массив из Структура - Этот массив новостей можно редактировать. Например, удалить некоторые
//                                       ненужные новости или понизить их важность и т.п. Содержит структуры с ключами:
//   * НомерСтрокиНовости      - Число;
//   * ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//   * Новость                 - СправочникСсылка.Новости;
//   * НовостьНаименование     - Строка;
//   * НовостьПодзаголовок     - Строка;
//   * УИННовости              - Строка;
//   * ДатаПубликации          - Дата;
//   * Важность                - Число;
//   * Актуальность            - Булево;
//   * Метаданные              - Строка;
//   * Форма                   - Строка;
//   * Событие                 - Строка;
//   * ПоказыватьВФормеОбъекта - Булево;
//   * ЭтоПостояннаяНовость    - Булево;
//   * Прочтена                - Булево;
//   * ОповещениеВключено      - Булево.
//
//@skip-warning
Процедура ДополнительноОбработатьМассивКонтекстныхНовостей(
			Знач ИдентификаторМетаданных,
			Знач ИдентификаторФормы,
			Знач ИдентификаторыСобытийПриОткрытии,
			МассивСтруктурНовостей) Экспорт

КонецПроцедуры

// Вызывается из Справочник.Новости.ФормаКонтекстныхНовостей после получения таблицы контекстных новостей.
// Можно прописать обработку полученной таблицы контекстных новостей, например удаление некоторых
//  контекстных новостей или изменение их важности.
// Здесь можно изменить данные в уже полученной таблице контекстных новостей, например:
//   если это новый пользователь, то сбросить важность у новостей, у которых есть категория "Только для новых пользователей = Истина";
//   если это новый пользователь, то удалить строки с определенной лентой новостей;
//   изменить сортировку строк.
//
// Параметры:
//  ИдентификаторМетаданных          - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы               - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторыСобытийПриОткрытии - Строка, Массив из Строка - строка или массив строк идентификаторов события "ПриОткрытии".
//                                     Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                     новостей. И если это количество > 0, то открывающая форма инициирует
//                                     открытие формы просмотра таких новостей.
//  ТаблицаКонтекстныхНовостей       - ТаблицаЗначений - Эту таблицу новостей можно редактировать. Например, удалить некоторые
//                                       ненужные новости или понизить их важность и т.п. Колонки:
//   * НомерСтрокиНовости      - Число;
//   * ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//   * Новость                 - СправочникСсылка.Новости;
//   * НовостьНаименование     - Строка;
//   * НовостьПодзаголовок     - Строка;
//   * УИННовости              - Строка;
//   * ДатаПубликации          - Дата;
//   * Важность                - Число;
//   * Актуальность            - Булево;
//   * Метаданные              - Строка;
//   * Форма                   - Строка;
//   * Событие                 - Строка;
//   * ПоказыватьВФормеОбъекта - Булево;
//   * ЭтоПостояннаяНовость    - Булево;
//   * Прочтена                - Булево;
//   * ОповещениеВключено      - Булево.
//
//@skip-warning
Процедура ДополнительноОбработатьТаблицуКонтекстныхНовостей(
			Знач ИдентификаторМетаданных,
			Знач ИдентификаторФормы,
			Знач ИдентификаторыСобытийПриОткрытии,
			ТаблицаКонтекстныхНовостей) Экспорт

	Если ИдентификаторМетаданных = "ИнформационнаяПанель" Тогда
		
		ЛентаНовостей_ЧтоНового = ИнтернетПоддержкаПользователейБП.ЛентаНовостейЧтоНового();
		
		ИнтерактивныеДействия = Новый Массив;
		
		ТаблицаНовостей = Новый ТаблицаЗначений;
		Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
			
			ПараметрыПолученияНовостей = Новый Структура;
			ПараметрыПолученияНовостей.Вставить("ВариантОтбора",      ИнтернетПоддержкаПользователейБП.ВариантОтбораПоЛентеНовостей());
			ПараметрыПолученияНовостей.Вставить("ЛентаНовостей",      ИнтернетПоддержкаПользователейБП.ЛентаНовостейЧтоНового());
			ПараметрыПолученияНовостей.Вставить("КоличествоНовостей", ИнтернетПоддержкаПользователейБП.КоличествоКонтекстныхНовостей());
			ПараметрыПолученияНовостей.Вставить("ПорядокСортировки",  ИнтернетПоддержкаПользователейБП.ПорядокКонтекстныхНовостей());
			
			Справочники.Новости.ПолучитьСписокНовостей(
				ТаблицаНовостей,
				Пользователи.ТекущийПользователь(),
				ПараметрыПолученияНовостей,
				Новый Массив);
			
		КонецЕсли;
		
		Для Каждого Новость Из ТаблицаНовостей Цикл
			НоваяСтрока = ТаблицаКонтекстныхНовостей.Добавить();
			НоваяСтрока.Новость             = Новость.Ссылка;
			НоваяСтрока.ДатаПубликации      = Новость.ДатаПубликации;
			НоваяСтрока.НовостьНаименование = Новость.Заголовок;
			НоваяСтрока.НовостьПодзаголовок = Новость.Подзаголовок;
			НоваяСтрока.Прочтена            = Новость.Прочтена;
			НоваяСтрока.ЛентаНовостей       = Новость.ЛентаНовостей;
		КонецЦикла;
		
	ИначеЕсли ИдентификаторМетаданных = "БП.РазделУчета.Обновления" И НЕ ПравоДоступа("Просмотр",Метаданные.Общиеформы.ОписаниеИзмененийПрограммы) Тогда
		
		НовостьВводаОстатков = ТаблицаКонтекстныхНовостей.Найти("6b026ea8-7495-11e8-c088-0050569f2f4f","УИННовости");
		Если  НовостьВводаОстатков <> Неопределено  Тогда
			   ТаблицаКонтекстныхНовостей.Удалить(НовостьВводаОстатков);
		КонецЕсли;
	Иначе
		
		// Пересортируем таблицу - вначале по признаку ЭтоПостояннаяНовость, затем по ДатаПубликации (убыв)
		Если ТипЗнч(ТаблицаКонтекстныхНовостей) = Тип("ТаблицаЗначений")
				И (ТаблицаКонтекстныхНовостей.Количество() > 0) Тогда
			
			Если (ТаблицаКонтекстныхНовостей.Колонки.Найти("ЭтоПостояннаяНовость") <> Неопределено)
				И (ТаблицаКонтекстныхНовостей.Колонки.Найти("ДатаПубликации") <> Неопределено) Тогда
				ТаблицаКонтекстныхНовостей.Сортировать("ЭтоПостояннаяНовость УБЫВ, ДатаПубликации УБЫВ");
			КонецЕсли;
			
			// Устанавливаю для новостей признак Прочтена = Истина
			ТаблицаКонтекстныхНовостей.ЗаполнитьЗначения(Истина, "Прочтена");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет список лент новостей, по которым надо получать контекстные новости.
// По-умолчанию (значение Неопределено) контекстные новости "собираются" по всем лентам новостей.
// Необходимо понимать, что этот метод "обходит" стандартные проверки на видимость лент новостей и новостей по этим лентам:
// - Помеченные на удаление ленты новостей не показываются;
// - Лента новостей может быть скрыта от пользователя администратором (настраивается в Справочник.ЛентыНовостей,
//     реквизит ВидимостьПоУмолчанию и табличная часть ИсключенияВидимости);
// - Лента новостей отключена пользователем вручную (регистр сведений ОтключенныеЛентыНовостей).
// Здесь можно изменить список лент новостей для поиска контекстных новостей, например:
//  если это новый пользователь, то сформировать свой список лент новостей;
//  можно "собирать" контекстные новости только из видимых лент новостей.
// Необходимо обратить внимание, что здесь можно переопределить список полностью,
//  т.е. разрешить смотреть отключенные администратором ленты новостей,
//  разрешить смотреть ленты новостей, помеченные на удаление и т.п.
// Если во время сеанса этот список не меняется, то имеет смысл список отдельно готовить в процедуре в модуле
//  с повторно используемыми значениями, а отсюда вызывать эту процедуру.
//
// Параметры:
//  СписокЛентНовостей - СписокЗначений - Список лент новостей, разрешенных для просмотра (рассчитан по-умолчанию, можно изменить).
//
// Возвращаемое значение:
//   СписокЗначений, Массив, Неопределено - список (массив) лент новостей, по которым надо получать контекстные новости,
//         или Неопределено (по-умолчанию), если получать надо по всем лентам новостей.
//
//@skip-warning
Процедура ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей(СписокЛентНовостей = Неопределено) Экспорт

	//СписокЛентНовостей = ИнтернетПоддержкаПользователейБПВызовСервераПовтИсп.ПолучитьСписокЛентНовостейДляКонтекстныхНовостей();

КонецПроцедуры

// Позволяет изменить условное оформление формы контекстных новостей, например добавить свои элементы
//  условного оформления или удалить / изменить уже настроенные элементы.
// Здесь можно изменить условное оформление в форме контекстных новостей, например:
//   если у новости в наименовании есть слово "Видео", то выделить красным;
//   если у новости есть категория "География=Россия", то изменить цвет фона.
//
// Параметры:
//  ФормаКонтекстныхНовостей - ФормаКлиентскогоПриложения - форма контекстных новостей;
//  УсловноеОформлениеФормы  - УсловноеОформление - настройки условного оформления формы.
//
// Пример:
//	// Таблица новостей, которая уже загружена в форму.
//	ТаблицаНовостей = ФормаКонтекстныхНовостей.ТаблицаНовостей; // Убедиться, что имя реквизита не изменилось!
//	МассивПоказываемыхНовостей = ФормаКонтекстныхНовостей.ТаблицаНовостей.Выгрузить(, "Новость").ВыгрузитьКолонку("Новость");
//	// Условное оформление устанавливается при создании формы, поэтому можно посмотреть параметры, переданные в форму;
//	Если СтрНайти(ФормаКонтекстныхНовостей.Параметры.ИмяМетаданных, ".РазделУчета.") > 0 Тогда
//	//
//	КонецЕсли;
//	// Список "особенных" новостей, который можно вычислить каким-нибудь запросом.
//	СписокЗначенийНовостей = Новый СписокЗначений;
//	// Добавить элемент условного оформления по условию "ВСписке"
//	Элемент = УсловноеОформлениеФормы.Элементы.Добавить();
//	// Оформляемые поля
//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНовостейНаименование");
//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНовостейПодзаголовок");
//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНовостейДатаПубликации");
//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНовостейЛентаНовостей");
//	// Отбор
//	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНовостей.Новость");
//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//	ОтборЭлемента.ПравоеЗначение = СписокЗначенийНовостей;
//	// Оформление
//	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ШрифтНовостей, , , Истина)); // Жирный
//	// Использование
//	Элемент.Использование = Истина;
//
//@skip-warning
Процедура ДополнительноУстановитьУсловноеОформлениеФормыКонтекстныхНовостей(ФормаКонтекстныхНовостей, УсловноеОформлениеФормы) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДополнительнаяОбработкаНовостей

// Переопределяет сброс состояния новости при ее записи.
// По-умолчанию, если новость "приходит" заново (в результате перепубликации, например),
//  то ей заново устанавливаются свойства "Не прочтена", "Оповещение включено" и т.п.
// Здесь можно переопределить поведение по-умолчанию и в зависимости от своих условий сбрасывать или не сбрасывать состояние новости.
// Важное замечание: нельзя вносить изменения в ОбъектНовость, т.к. метод вызывается из события ПриЗаписи.
// Если новость новая, то этот метод не вызывается, т.е. нельзя переопределить сброс свойств для новых новостей.
// В ОбъектНовость.ДополнительныеСвойства есть полезное свойство "ВажностьДоЗаписи". Если увеличилась важность,
//  то рекомендуется сбросить свойства новости до "Не прочтена", "Оповещение включено" (т.е. установить СброситьСостояниеНовости = Истина).
// Возможны и более сложные сценарии: например, сбрасывать состояние новости только
//  если в тексте есть комментарий "<!-- Сбросить состояние новости -->".
//
// Параметры:
//  ОбъектНовость            - СправочникОбъект.Новости - записываемая новость;
//  СброситьСостояниеНовости - Булево - В эту переменную необходимо вернуть "Истина", если необходимо установить
//                             свойства "Не прочтена", "Оповещение включено",
//                             или Ложь, если надо оставить эти свойства в текущем состоянии.
//
//@skip-warning
Процедура ПереопределитьСбросСостоянияНовостиПриЗаписи(Знач ОбъектНовость, СброситьСостояниеНовости) Экспорт

	СброситьСостояниеНовости = Ложь;

КонецПроцедуры

// Переопределяет создание новости при неактивности ленты новостей.
//
// Параметры:
//  ЛентаНовостей - СправочникСсылка.ЛентыНовостей - Лента новостей;
//  НовостьОбъект - СправочникОбъект.Новости - заполненный объект справочника Новости, который будет создан или изменен;
//  Отказ         - Булево - в этот параметр надо передать Истина, если создание / изменение новости надо отменить.
//
//@skip-warning
Процедура ПереопределитьДействияКогдаНайденаНеактивнаяЛентаНовостей(ЛентаНовостей, НовостьОбъект, Отказ) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ДополнительнаяОбработкаФормИЭлементовУправления

// В этой процедуре можно переопределить внешний вид созданных элементов управления для вызова контекстных новостей
//  (только в том случае, если они созданы программно) и другие действия с управляемой формой.
//
// Метод выполняет все необходимые действия для управления контекстными новостями. Должна вызываться из ПриСозданииНаСервере().
// Она используется в том случае, если выбрана стратегия расчета списка контекстных новостей в ПриСозданииНаСервере.
// Здесь можно выполнить произвольные действия после включения механизма контекстных новостей.
// Например, изменить внешний вид созданной кнопки / подменю - в заголовке написать общее количество новостей и т.п.
//
// Параметры:
//  Форма                                    - ФормаКлиентскогоПриложения - форма, в которой был включен механизм контекстных новостей;
//  НастройкиЗаполненияНовостями             - Структура - структура, определяющая стратегию получения и хранения новостей.
//                                             Можно получать новости на сервере в ПриСозданииНаСервере - это будет тратить время при каждом
//                                               открытии формы, но позволит реализовать сценарий показа новостей при наступлении клиентских
//                                               событий (ПриИзмененииГалочки, ПриУстановкеДатыБольше2014 и т.п.).
//                                             Можно получать новости в обработчике ожидания после открытия формы, также будет задействован клиентский кэш.
//                                               Это сократит время открытия формы, но некоторые сценарии станут недоступны.
//                                             Ключи:
//   * ПолучатьНовостиНаСервере                - Булево - если Истина, то новости будут получаться в этой процедуре. По-умолчанию = Истина;
//   * ХранитьМассивНовостейТолькоНаСервере    - Булево - если Истина, то на клиента не передается массив новостей.
//                                             Это сокращает размер передаваемых данных, но не дает возможность показывать новости
//                                             по другим событиям, отличным от ПриОткрытии.
//                                             Имеет смысл только если ПолучатьНовостиНаСервере = Истина. По-умолчанию = Ложь.
//  ИдентификаторыСобытийПриОткрытии         - Строка, Массив из Строка - строка или массив строк идентификаторов события "ПриОткрытии".
//                                             Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                             новостей. И если это количество > 0, то открывающая форма инициирует
//                                             открытие формы просмотра таких новостей;
//  СозданнаяКнопкаИлиПодменюНовости         - ГруппаФормы, КнопкаФормы, Неопределено - кнопка или подменю для открытия
//                                             формы контекстных новостей (только в случае, если она создавалась программно);
//  МассивСтруктурНовостей                   - Массив из Структура - Массив структур контекстных новостей для этой формы с ключами:
//   * НомерСтрокиНовости      - Число;
//   * ЛентаНовостей           - СправочникСсылка.ЛентаНовостей;
//   * Новость                 - СправочникСсылка.Новости;
//   * НовостьНаименование     - Строка;
//   * НовостьПодзаголовок     - Строка;
//   * УИННовости              - Строка;
//   * ДатаПубликации          - Дата;
//   * Важность                - Число;
//   * Актуальность            - Булево;
//   * Метаданные              - Строка;
//   * Форма                   - Строка;
//   * Событие                 - Строка;
//   * ПоказыватьВФормеОбъекта - Булево;
//   * ЭтоПостояннаяНовость    - Булево;
//   * Прочтена                - Булево;
//   * ОповещениеВключено      - Булево;
//
//@skip-warning
Процедура ДополнительноОбработатьФормуПриСозданииНаСервере(
			Форма,
			НастройкиЗаполненияНовостями,
			ИдентификаторыСобытийПриОткрытии,
			СозданнаяКнопкаИлиПодменюНовости,
			МассивСтруктурНовостей) Экспорт
		
	// Устанавливаю для новостей признак Прочтена = Истина
	Для Каждого ЭлементМассива Из Форма.Новости.Новости Цикл
		Если ЭлементМассива.НовостьКодЛентыНовостей = "edo_hints" Тогда
			Продолжить;
		КонецЕсли;
		ЭлементМассива.Прочтена = Истина;
	КонецЦикла;
	
КонецПроцедуры

// В этой процедуре можно переопределить состав новостей формы показа новостей и другие действия с управляемой формой.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма просмотра новостей для рабочего стола;
//  Отказ                - Булево - Признак отказа от создания формы. Если установить данному параметру значение Истина,
//                            то форма создана не будет;
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//                            Если в установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//
//@skip-warning
Процедура ДополнительноОбработатьФормуПросмотраНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка) Экспорт

	ИнтернетПоддержкаПользователейБП.СнятиеВыделенияЭлементовДерева(Форма.Папки);
	
	ЭлементыФормы = Форма.Элементы;
	ЭлементыФормы.ГруппаПрочтенные.Видимость = Ложь;
	ЭлементыФормы.ПапкиКонтекстноеМенюКомандаОтметитьКакНепрочтенные.Видимость = Ложь;
	ЭлементыФормы.ПапкиКонтекстноеМенюКомандаОтметитьКакПрочтенные.Видимость = Ложь;
	ЭлементыФормы.НовостиКонтекстноеМенюКомандаОтметитьКакПрочтенные.Видимость = Ложь;
	ЭлементыФормы.НовостиКонтекстноеМенюКомандаОтметитьКакНепрочтенные.Видимость = Ложь;
	
КонецПроцедуры

// В этой процедуре можно переопределить состав новостей формы показа новостей для рабочего стола и другие действия с управляемой формой.
// Пример:
//   ВозвращаемыеЗначения = Новый Структура("ПропуститьЗаполнениеНовостями", Истина);
//   НоваяСтрока = Форма.Новости.Добавить();
//   НоваяСтрока.Наименование = НСтр("ru='Как обновить конфигурацию'");
//   НоваяСтрока.Ссылка = Справочники.Новости.НайтиПоРеквизиту("УИННовости", "123456"); // Новость должна присутствовать в справочнике!
//   НоваяСтрока = Форма.Новости.Добавить();
//   НоваяСтрока.Наименование = НСтр("ru='Как настроить автообновление'");
//   НоваяСтрока.Ссылка = Справочники.Новости.НайтиПоРеквизиту("УИННовости", "234567"); // Новость должна присутствовать в справочнике!
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма просмотра новостей для рабочего стола;
//  ВозвращаемыеЗначения - Структура - структура с возвращаемыми значениями для дальнейшей обработки формой. Может содержать ключи:
//    * ПропуститьЗаполнениеНовостями - Булево - если Истина, то форма рабочего стола не будет проводить заполнение новостями.
//
//@skip-warning
Процедура ДополнительноОбработатьФормуПросмотраНовостейДляРабочегоСтолаПриСозданииНаСервере(
			Форма,
			ВозвращаемыеЗначения) Экспорт

КонецПроцедуры

// В этой процедуре можно переопределить действия с управляемой формой просмотра списка контекстных новостей (ФормаКонтекстныхНовостей).
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма просмотра списка контекстных новостей;
//  Отказ                - Булево - Признак отказа от создания формы. Если установить данному параметру значение Истина,
//                            то форма создана не будет;
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//                            Если в установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//
//@skip-warning
Процедура ДополнительноОбработатьФормуКонтекстныхНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка) Экспорт

КонецПроцедуры

// В этой процедуре можно переопределить действия с управляемой формой просмотра списка
//  очень важных контекстных новостей (ФормаНовостей, ФормаНовостейСоСписком).
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма просмотра списка очень важных контекстных новостей;
//  Отказ                - Булево - Признак отказа от создания формы. Если установить данному параметру значение Истина,
//                            то форма создана не будет;
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//                            Если в установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//
//@skip-warning
Процедура ДополнительноОбработатьФормуОченьВажныхНовостейПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка) Экспорт

КонецПроцедуры

// В этой процедуре можно переопределить действия с управляемой формой просмотра новости.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма просмотра новости;
//  Отказ                - Булево - Признак отказа от создания формы. Если установить данному параметру значение Истина,
//                            то форма создана не будет;
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//                            Если в установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
//
//@skip-warning
Процедура ДополнительноОбработатьФормуНовостиПриСозданииНаСервере(
			Форма,
			Отказ,
			СтандартнаяОбработка) Экспорт

КонецПроцедуры

#Область ПанельКонтекстныхНовостей

// В этой процедуре можно переопределить процедуру расчета списка важных новостей
//  и их порядок для отображения в панели контекстных новостей.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма объекта с панелью важных новостей;
//  ТаблицаНовостейДляПанелиКонтекстныхНовостей - ТаблицаЗначений - незаполненная таблица новостей для панели контекстных новостей.
//                           Список колонок см. ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере;
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения
//                           стандартной (библиотечной) обработки события.
//
//@skip-warning
Процедура ПанельКонтекстныхНовостей_ВыбратьНовости(
			Форма,
			ТаблицаНовостейДляПанелиКонтекстныхНовостей,
			СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтерактивнаяРаботаСТекстомНовости

// В этой процедуре можно переопределить реакцию системы на нажатие гиперссылки в тексте новости.
// По-умолчанию система при нажатии на, например, 1C:ShowPict001 ищет в самой новости действие с таким же идентификатором,
//  что заставляет в каждой новости прописывать действие и его параметры. С помощью этого переопределения можно заполнять
//  параметры в коде на стороне клиента, что упростит написание текстов новостей.
// Здесь можно заполнить параметры Действие и СписокПараметров произвольными значениями, которые будут переданы в
//   ОбработкаНовостейКлиент.ОбработкаНавигационнойСсылки.
//
// Метод заполняет параметры Действие и СписокПараметров для объекта
//  новости по переданному уникальному идентификатору гиперссылки.
// 
// Параметры:
//  Объект           - ДанныеФормыКоллекция, ДокументСсылка.Новости, СправочникСсылка.Новости - ссылка на новость;
//  УИНДействия      - Строка - идентификатор действия;
//  Действие         - Строка - действие;
//  СписокПараметров - СписокЗначений - список параметров действия.
//
//@skip-warning
Процедура ДополнительноПодготовитьПараметрыНавигационнойСсылки(
			Знач Объект,
			УИНДействия,
			Действие,
			СписокПараметров) Экспорт


КонецПроцедуры

#КонецОбласти

#Область ДругиеДополнительныеОбработки

// В этой процедуре можно задать действия при записи пользователя.
// Например, при записи нового пользователя можно определить текущую версию конфигурации
//  и отметить новости для старых версий как прочтенные.
// Здесь можно задать действия при записи пользователя.
// Например, для нового пользователя отметить прочтенными новости для предыдущих версий конфигурации.
//
// Параметры:
//  ПользовательОбъект   - СправочникОбъект.Пользователи - записываемый объект;
//  ЭтоНовыйПользователь - Булево - Истина, если записывается новый пользователь;
//  Отказ                - Булево - установить в Истина, если надо отменить запись.
//
//@skip-warning
Процедура ОбработатьЗаписьПользователя(
			ПользовательОбъект,
			ЭтоНовыйПользователь,
			Отказ) Экспорт
	
	Если ПользовательОбъект.Служебный
		ИЛИ ПользовательОбъект.Недействителен
		ИЛИ ПользовательОбъект.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		ИЛИ (ОбщегоНазначения.РазделениеВключено() И ПользовательОбъект.ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")) Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	// Запись в журнал регистрации
	ТекстСообщения = НСтр("ru='Устанавливаем для нового пользователя признак ОповещениеВключено = Ложь.
		|Параметры:
		|	Наименование: %1
		|	Это новый пользователь: %2
		|	Отказ: %3'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
		ПользовательОбъект.Наименование,
		ЭтоНовыйПользователь,
		Отказ);
		
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Новости. Переопределяемый. ОбработатьЗаписьПользователя. Начало'"), // ИмяСобытия
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая // РежимТранзакцииЗаписиЖурналаРегистрации.*
	);
	
	Если ЭтоНовыйПользователь Тогда
		
		ПользовательСсылка = ПользовательОбъект.Ссылка;
		Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Если НЕ ПользовательСсылка.Пустая() Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				
				// Для нового пользователя включить признак "Прочтена" и отключить "ОповещениеВключено" для всех новостей старых версий этой конфигурации
				Продукт = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName");
				ВерсииПродукта = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion");
				ВерсияПродукта = ВерсииПродукта[ВерсииПродукта.Количество()-1].Значение; // Проверка на точное соответствие, включая номер сборки
				// Найти все новости для этого продукта, у которых ВерсияОТ меньше или равна текущей
				// Если в новости не установлено значение категории Продукт, значит она относится ко всем версиям продукта
				//  и ее нельзя помечать прочтенной
				Запрос = Новый Запрос;
				СписокЛентНовостейГдеНадоСброситьВсеПризнаки = Новый СписокЗначений;
				СписокЛентНовостейГдеНадоСброситьВсеПризнаки.Добавить(Справочники.ЛентыНовостей.НайтиПоКоду("WhatIsNew"));
				Запрос.Текст = "
								|ВЫБРАТЬ РАЗЛИЧНЫЕ
								| Рег.Новость КАК Новость
								|ИЗ
								| РегистрСведений.КатегорииНовостейИнтервалыВерсий КАК Рег
								|ГДЕ
								| Рег.КатегорияНовостей = &КатегорияНовостей
								| И Рег.Продукт = &Продукт
								| И Рег.ВерсияОТ <= &ТекущаяВерсияПродукта
								| И Рег.Новость.ЛентаНовостей В (&СписокЛентНовостейГдеНадоСброситьВсеПризнаки)
								|";
				Запрос.УстановитьПараметр("КатегорияНовостей", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("ProductVersion"));
				Запрос.УстановитьПараметр("Продукт", Продукт);
				Запрос.УстановитьПараметр("ТекущаяВерсияПродукта", ВерсияПродукта);
				Запрос.УстановитьПараметр("СписокЛентНовостейГдеНадоСброситьВсеПризнаки", СписокЛентНовостейГдеНадоСброситьВсеПризнаки);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					НаборЗаписей = РегистрыСведений.СостоянияНовостей.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Пользователь.Установить(ПользовательСсылка, Истина);
					
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Пользователь            = ПользовательСсылка;
						НоваяЗапись.Новость                 = Выборка.Новость;
						НоваяЗапись.Прочтена                = Истина; // Изменить свойство
						НоваяЗапись.ОповещениеВключено      = Ложь; // Изменить свойство
						// Остальные поля (ДатаНачалаОповещения, Пометка, УдаленаИзСпискаНовостей) не трогаем
						
					КонецЦикла;
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Завершаем для нового пользователя установку признака ОповещениеВключено = Ложь.'");
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Новости. Переопределяемый. ОбработатьЗаписьПользователя. Конец'"), // ИмяСобытия
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая // РежимТранзакцииЗаписиЖурналаРегистрации.*
	);
	
КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеСБСП

// Обработчик перехода с другой программы, например с БухгалтерияБазовая на БухгалтерияПРОФ;
// Действия по-умолчанию: в случае перехода с другой программы надо будет загрузить новости
//   по новой программе (БухгалтерияПРОФ) за 1 месяц, для этого необходимо отредактировать
//   данные регистра сведений ДатыЗагрузкиПоследнихНовостей.
// Здесь можно задать действия при переходе с другой программы,
//   если действия по умолчанию (загрузить новости за 1 месяц) не устраивает.
// Например, можно вообще очистить регистр сведений ДатыЗагрузкиПоследнихНовостей.
//
//@skip-warning
Процедура ПриПереходеСДругойПрограммы() Экспорт

КонецПроцедуры

#Область ОбновлениеИБ

// Вызывается при первом запуске библиотеки БИП.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для всех областей данных.
// Здесь можно задать действия при первоначальном запуске ИБ.
// Например, программно добавить новости, или изменить свойства лент новостей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск() Экспорт

КонецПроцедуры

// Вызывается при обновлении библиотеки БИП на любую новую версию.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для всех областей данных.
// Здесь можно задать действия при обновлении ИБ.
// Например, программно добавить новости, или изменить свойства лент новостей, или изменить расписание регламентного задания ВсеОбновленияНовостей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию() Экспорт
	
	МассивДнейНедели = Новый Массив;
	Для С=1 По 7 Цикл
		МассивДнейНедели.Добавить(С);
	КонецЦикла;
	МассивМесяцев = Новый Массив;
	Для С=1 По 12 Цикл
		МассивМесяцев.Добавить(С);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей);
	Если ТекущееРегламентноеЗадание <> Неопределено Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		// Настроить так, чтобы задание выполнялось случайно в течение дня
		// Разброс необходим, чтобы все клиенты не попали на одно и то же время, а были более-менее равномерно распределены			
		Расписание.ВремяНачала = ТекущаяДатаСеанса() + 600; // отложим старт рег. задания на 10 минут
		Расписание.ВремяКонца = ТекущаяДатаСеанса();
		Расписание.ДатаНачала = '00010101000000';
		Расписание.ДатаКонца = '00010101000000';
		Расписание.ДеньВМесяце = 0;
		Расписание.ДеньНеделиВМесяце = 0;
		Расписание.ДетальныеРасписанияДня = Новый Массив;
		Расписание.ДниНедели = МассивДнейНедели;
		Расписание.Месяцы = МассивМесяцев;
		Расписание.ПаузаПовтора = 0;
		Расписание.ПериодНедель = 1;
		Расписание.ПериодПовтораВТечениеДня = 0; // Не повторять в течение дня
		Расписание.ПериодПовтораДней = 1;
		
		Расписание.ИнтервалЗавершения = 3600;
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Расписание.ПериодПовтораВТечениеДня = 28800;
		Иначе
			Расписание.ПериодПовтораВТечениеДня = 0;
		КонецЕсли;
		
		ТекущееРегламентноеЗадание.Расписание = Расписание;
		ТекущееРегламентноеЗадание.Записать();
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Вызывается при обновлении библиотеки БИП на новую версию.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для всех областей данных.
// Здесь можно задать действия при обновлении ИБ.
// Например, программно добавить новости, или изменить свойства лент новостей, или изменить расписание регламентного задания ВсеОбновленияНовостей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_4() Экспорт

КонецПроцедуры

// Вызывается при обновлении библиотеки БИП на новую версию.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для всех областей данных.
// Здесь можно задать действия при обновлении ИБ.
// Например, программно добавить новости, или изменить свойства лент новостей, или изменить расписание регламентного задания ВсеОбновленияНовостей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию_2_1_5() Экспорт

КонецПроцедуры

// Вызывается при первом запуске библиотеки БИП.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для каждой области данных.
// Здесь можно задать действия при первоначальном запуске ИБ.
// Например, произвести настройки пользователей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск() Экспорт
	
	// При запуске в первый раз (например, при создании из cf) надо отметить важные и очень важные новости,
	//  относящиеся к этой версии продукта включительно и ниже для всех пользователей как новости с выключенным напоминанием,
	//  чтобы они не выскакивали при открытии форм

	// Список пользователей
	МассивПользователей = Неопределено; // Для всех пользователей с ролями ЧтениеНовостей и ПолныеПрава

	СписокЛентНовостейГдеНадоСброситьВсеПризнаки = Новый СписокЗначений;
	СписокЛентНовостейГдеНадоСброситьВсеПризнаки.Добавить(Справочники.ЛентыНовостей.НайтиПоКоду("WhatIsNew"));
	// Структура отборов
	ЭтотПродукт = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName");
	ВерсииПродукта = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion");
	ВерсияПродукта = ВерсииПродукта[ВерсииПродукта.Количество()-1].Значение; // Только полная версия продукта (конфигурации)
	СтруктураОтборов = Новый Структура("СписокЛентНовостей,ИнтервалВерсийПродукта",
		СписокЛентНовостейГдеНадоСброситьВсеПризнаки,
		Новый Структура("Продукт, ВерсияОТ, ВерсияДО", 
		ЭтотПродукт,
		"00.00.000.0000",
		ВерсияПродукта
		)
	);

	// Новые значения состояний
	ЗначенияСостояний = Новый Структура("ОповещениеВключено", Ложь);

	// Выполнение
	ОбработкаНовостей.УстановитьСостояниеНовостейДляПользователей(МассивПользователей, СтруктураОтборов, ЗначенияСостояний);
	
КонецПроцедуры

// Вызывается при обновлении библиотеки БИП на любую новую версию.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для каждой области данных.
// Здесь можно задать действия при обновлении ИБ в области данных.
// Например, произвести настройки пользователей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию() Экспорт

КонецПроцедуры

// Вызывается при обновлении библиотеки БИП на новую версию.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для каждой области данных.
// Здесь можно задать действия при обновлении ИБ в области данных.
// Например, произвести настройки пользователей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_4() Экспорт

КонецПроцедуры

// Вызывается при обновлении библиотеки БИП на новую версию.
// Обработчики из библиотеки для общих данных и для области данных уже были вызваны.
// Метод - для каждой области данных.
// Здесь можно задать действия при обновлении ИБ в области данных.
// Например, произвести настройки пользователей.
//
//@skip-warning
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию_2_1_5() Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтерактивныеДействия

// Заполняет "интерактивные действия", которые возвращаются в форму ФормаПросмотраНовостей
//   или ФормаПросмотраНовостейРабочийСтол для дальнейшей обработки на клиенте.
//
// Параметры:
//  ТаблицаНовостей       - ДанныеФормыКоллекция - эту таблицу необходимо заполнить;
//  Пользователь          - СправочникСсылка.Пользователи - текущий пользователь;
//  Отбор                 - Структура - ключи:
//   * ВариантОтбора - значение варианта отбора:
//     - 0 - все новости (без учета корзины);
//     - 1 - по ленте новостей (без учета корзины), должен быть ключ ЛентаНовостей. Если ключа "ЛентаНовостей" нет, или он пустой,
//           или неправильного типа, то будут отобраны все новости (без учета корзины);
//     - 2 - результат поиска. Также должен быть передан ключ "СписокНайденныхНовостей" типа СписокЗначений;
//     - 3 - контекстные новости (новости по объекту метаданных / форме). Также должны быть переданы структура с ключами "Метаданные"
//           и "Форма". Если значение ключа Форма = Неопределено, то будут получены новости по всем формам для этого объекта метаданных;
//     - 4 - Помеченные новости (без учета корзины). Также должен быть передан ключ "Тег" типа Строка.
//           Избранные новости отбираются этим же вариантом отбора, только тег = "Пометка1";
//     - 5 - Важные новости (без учета корзины), у которых важность = "важно" или "очень важно";
//     - 6 - Популярная тема. Также должен быть передан ключ "ИмяТемы" типа Строка;
//     - 7 - Пользовательский отбор. Также должен быть передан ключ "ИмяОтбора" типа Строка
//           (это имя фильтра из ХранилищаНастроек.НастройкиНовостей);
//     - 8 - Корзина.
//  ИнтерактивныеДействия - Массив из Строка - массив, который будет заполнен произвольными интерактивными действиями,
//    которые будут отработаны на клиенте.
//
//@skip-warning
Процедура ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей(
			ТаблицаНовостей,
			Пользователь,
			Отбор,
			ИнтерактивныеДействия) Экспорт

	// Устанавливаю для новостей признак Прочтена = Истина
	Для Каждого СтрокаТаблицы Из ТаблицаНовостей Цикл
		СтрокаТаблицы.Прочтена = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПриНачалеРаботыСистемы

// Вызывается из модуля управляемого приложения,
//  затем ОбработкаНовостейКлиент.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейВызовСервера.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостей.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейПереопределяемый.ПриНачалеРаботыСистемы.
//
//@skip-warning
Процедура ПриНачалеРаботыСистемы() Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПолучениеЗначенийКатегорий

// Переопределяет значение категории, если для нее установлено свойство "ЗаполняетсяАвтоматически".
// Переопределение имеет смысл только если необходимо возвращать значения, отличные от значений по-умолчанию.
//
// Параметры:
//  Категория - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка - категория новостей или ее код;
//  Значение  - Произвольный - значение, которое можно изменить.
//
//@skip-warning
Процедура ЗначениеПредопределеннойКатегории(Категория, Значение) Экспорт

	Если ТипЗнч(Категория) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		КатегорияКод = СокрЛП(Категория.Код);
	ИначеЕсли ТипЗнч(Категория) = Тип("Строка") Тогда
		КатегорияКод = СокрЛП(Категория);
	Иначе
		Возврат;
	КонецЕсли;

	Если ВРег(КатегорияКод) = ВРег("ProductName") Тогда // В плане видов характеристик "КатегорииНовостей" такого элемента нет
		
		Если Не ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
			// Новости прикладного решения предназначены для регулярных пользователей
			Значение = "Unknown";
			Возврат;
		КонецЕсли;
		
		// Определять ИмяКонфигурации английскими буквами!
		Если ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятия") Тогда
			Значение = "Accounting";
		ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятияКОРП") Тогда
			Значение = "AccountingCorp";
		ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятияБазовая") Тогда
			Значение = "AccountingBase";
		ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятияБазовая1") Тогда
			Значение = "AccountingOneBase";
		Иначе // При встраивании в другие конфигурации добавьте другие условия и пропишите точное имя конфигурации английскими буквами
			// Конфигурации с таким кодом нет, поэтому будут получены новости только по платформе и другие подобные новости,
			//  не привязанные ни к какой конфигурации
			Значение = "Unknown";
		КонецЕсли;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("TaxReportID") Тогда // Коды подключенных отчетов
		// Определять список подключенных (возможных) отчетов для сдачи в ИФНС, ПФР и т.п.
		Значение = Новый СписокЗначений;
	ИначеЕсли ВРег(КатегорияКод) = ВРег("TaxAdministration") Тогда // Номера ИФНС
		// Определять список ИФНС (через справочник Организации, или другим способом?)
		Значение = Новый СписокЗначений;
	ИначеЕсли ВРег(КатегорияКод) = ВРег("Bank") Тогда // Список банков
		// Определять список банков (через справочник РасчетныеСчета или другим способом?)
		Значение = Новый СписокЗначений;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСтандартныхДанных

// По имени объекта метаданных дополняет стандартные значения.
// По-умолчанию стандартные значения берутся из макетов с именем "СтандартныеЗначения" для следующих объектов метаданных:
//  - Справочник.ЗначенияКатегорийНовостей,
//  - Справочник.ЛентыНовостей,
//  - ПланВидовХарактеристик.КатегорииНовостей.
// Примеры:
// Если ВРег(ИмяОбъектаМетаданных) = ВРег("Справочники.ЗначенияКатегорийНовостей") Тогда
// 	ИмяМакета = "СтандартныеЗначенияЗначенийКатегорийНовостей";
// 	Макет = Метаданные.Справочники._ДемоОрганизации.Макеты.Найти(ИмяМакета);
// 	Если (Макет <> Неопределено) Тогда
// 		СодержимоеМакета = Справочники._ДемоОрганизации.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
// 		Если НЕ ПустаяСтрока(СодержимоеМакета) Тогда
// 			СтандартныеЗначения.Вставить(
// 				"" + ИмяОбъектаМетаданных + ":Справочники._ДемоОрганизации." + ИмяМакета, // Идентификатор.
// 				СодержимоеМакета);
// 		КонецЕсли;
// 	КонецЕсли;
// ИначеЕсли ВРег(ИмяОбъектаМетаданных) = ВРег("Справочники.ЛентыНовостей") Тогда
// 	ИмяМакета = "СтандартныеЗначенияЛентНовостей";
// 	Макет = Метаданные.Справочники._ДемоОрганизации.Макеты.Найти(ИмяМакета);
// 	Если (Макет <> Неопределено) Тогда
// 		СодержимоеМакета = Справочники._ДемоОрганизации.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
// 		Если НЕ ПустаяСтрока(СодержимоеМакета) Тогда
// 			СтандартныеЗначения.Вставить(
// 				"" + ИмяОбъектаМетаданных + ":Справочники._ДемоОрганизации." + ИмяМакета, // Идентификатор.
// 				СодержимоеМакета);
// 		КонецЕсли;
// 	КонецЕсли;
// ИначеЕсли ВРег(ИмяОбъектаМетаданных) = ВРег("ПланыВидовХарактеристик.КатегорииНовостей") Тогда
// 	ИмяМакета = "СтандартныеЗначенияКатегорийНовостей";
// 	Макет = Метаданные.Справочники._ДемоОрганизации.Макеты.Найти(ИмяМакета);
// 	Если (Макет <> Неопределено) Тогда
// 		СодержимоеМакета = Справочники._ДемоОрганизации.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
// 		Если НЕ ПустаяСтрока(СодержимоеМакета) Тогда
// 			СтандартныеЗначения.Вставить(
// 				"" + ИмяОбъектаМетаданных + ":Справочники._ДемоОрганизации." + ИмяМакета, // Идентификатор.
// 				СодержимоеМакета);
// 		КонецЕсли;
// 	КонецЕсли;
// КонецЕсли;
//
// Параметры:
//  ИмяОбъектаМетаданных - Строка - Имя загружаемого объект метаданных. Возможные значения:
//     - "Справочники.ЗначенияКатегорийНовостей";
//     - "Справочники.ЛентыНовостей";
//     - "ПланыВидовХарактеристик.КатегорииНовостей".
//  СтандартныеЗначения - Соответствие - Сюда необходимо добавить свои тексты стандартных значений.
//                                       Тексты должны быть оформлены в формате XML так же, как это сделано
//                                         в макете СтандартныеЗначения нужного объекта метаданных:
//                                      * Ключ - произвольный идентификатор;
//                                      * Значение - Текст в формате XML.
//
//@skip-warning
Процедура ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов(ИмяОбъектаМетаданных, СтандартныеЗначения) Экспорт

	ТекущийОтраслевойПродукт = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"); // Наименование отраслевого решения (английскими буквами).
	ПродуктОснование         = "Accounting"; // Продукт, на основании которого создан этот отраслевой продукт.
	ВерсияПродуктаОснования  = "03.00.065.0000"; // Версия продукта-основания.
	ПродуктыОснования = Новый Массив;
	ПродуктыОснования.Добавить("Accounting");
	ПродуктыОснования.Добавить("AccountingCorp");
	ПродуктыОснования.Добавить("AccountingBase");
	ПродуктыОснования.Добавить("AccountingOneBase");

	// Это отраслевой продукт, созданный на основании БП?
	// Если ДА, то создать ленту новостей.
	Если ПродуктыОснования.Найти(ТекущийОтраслевойПродукт) = Неопределено Тогда

		Если ВРег(ИмяОбъектаМетаданных) = ВРег("Справочники.ЛентыНовостей") Тогда

			ДобавляемыеЛентыНовостейXML = "<?xml version=""1.0"" encoding=""UTF-8""?>
				|<DefaultData xmlns:ncc=""http://v8.1c.ru/8.1/data/enterprise/current-config"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
				|	<ncc:CatalogObject.ЛентыНовостей xsi:type=""ncc:CatalogObject.ЛентыНовостей"">
				|		<ncc:Ref>38849658-38dc-11e8-138c-0050569f2f4f</ncc:Ref>
				|		<ncc:DeletionMark>false</ncc:DeletionMark>
				|		<ncc:Code>Version_Changes</ncc:Code>
				|		<ncc:Description>Обновления</ncc:Description>
				|		<ncc:ОбязательныйКанал>false</ncc:ОбязательныйКанал>
				|		<ncc:Протокол>https</ncc:Протокол>
				|		<ncc:Сайт>news.webits.1c.ru</ncc:Сайт>
				|		<ncc:ИмяФайла>news/Version_Changes/atom1c?[from]&amp;[config]&amp;[platformVersion]</ncc:ИмяФайла>
				|		<ncc:ВариантЛогинаПароля>БезЛогинаПароля</ncc:ВариантЛогинаПароля>
				|		<ncc:Логин/>
				|		<ncc:Пароль/>
				|		<ncc:УдалитьПароль/>
				|		<ncc:ЗагруженоССервера>true</ncc:ЗагруженоССервера>
				|		<ncc:ВидимостьПоУмолчанию>true</ncc:ВидимостьПоУмолчанию>
				|		<ncc:ЧастотаОбновления>1</ncc:ЧастотаОбновления> <!-- Ежедневно-->
				|		<ncc:Комментарий/>
				|		<ncc:ПропускатьЗагрузкуБинарныхДанных>false</ncc:ПропускатьЗагрузкуБинарныхДанных>
				|		<ncc:ЛокальнаяЛентаНовостей>false</ncc:ЛокальнаяЛентаНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>15fc4e3c-f4fe-11e6-3e88-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>0f649f80-b213-11e6-ac82-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>aeb63118-2f40-47de-b354-efcfe8245819</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>42bc09c7-050c-49e8-a82b-360b17d3ec61</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>15fdb4ca-f4fe-11e6-3e88-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>0f63ba70-b213-11e6-ac82-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>15fd40a8-f4fe-11e6-3e88-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>0f655984-b213-11e6-ac82-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>0f644c1a-b213-11e6-ac82-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>15fcc3d0-f4fe-11e6-3e88-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>0f627ebc-b213-11e6-ac82-0050569f2f4f</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>2371dd39-741f-11e6-a82f-001122987654</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|		<ncc:ДоступныеКатегорииНовостей>
				|			<ncc:КатегорияНовостей>2371dd3d-741f-11e6-a82f-001122987654</ncc:КатегорияНовостей>
				|			<ncc:РазрешеноНастраиватьПользователям>false</ncc:РазрешеноНастраиватьПользователям>
				|			<ncc:ОтборНастраиваетсяНаСервере>false</ncc:ОтборНастраиваетсяНаСервере>
				|		</ncc:ДоступныеКатегорииНовостей>
				|	</ncc:CatalogObject.ЛентыНовостей>
				|</DefaultData>
				|";

			// Начиная с версии библиотеки БИП 2.3.1 реквизит "УдалитьПароль" удален.
			// Проверить - ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки()

			РеквизитУдалитьПарольУдален = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
				ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
				"2.3.1.1") >= 0;
			Если РеквизитУдалитьПарольУдален = Истина Тогда
				ДобавляемыеЛентыНовостейXML = СтрЗаменить(ДобавляемыеЛентыНовостейXML, "<ncc:УдалитьПароль/>", "");
			КонецЕсли;

			// Если номер версии конфигурации не совпадает с номером версии БП, то подставить в строку ниже точную версию БП.
			ДобавляемыеЛентыНовостейXML = СтрЗаменить(
				ДобавляемыеЛентыНовостейXML,
				"[config]",
				ПродуктОснование + "," + ВерсияПродуктаОснования); // Новости от какого продукта получать.

			СтандартныеЗначения.Вставить(
				"" + ИмяОбъектаМетаданных + ":ЛентыНовостейИзБП", // Идентификатор.
				ДобавляемыеЛентыНовостейXML);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// По ссылке на ленту новостей дополняет стандартные значения.
// По-умолчанию стандартные значения берутся из макетов справочника Новости с именем "СтандартныеЗначения_<КодЛентыНовостей>".
// Пример:
// 	ТипЛентаНовостей = Тип("СправочникСсылка.ЛентыНовостей");
// 	Если ТипЗнч(ЛентаНовостей) = ТипЛентаНовостей Тогда
// 		Если ВРег(ЛентаНовостей.Код) = ВРег("Developers") Тогда
// 			ИмяМакета = "СтандартныеЗначенияНовости_ОтРазработчиков";
// 			Макет = Метаданные.Справочники._ДемоОрганизации.Макеты.Найти(ИмяМакета);
// 			Если (Макет <> Неопределено) Тогда
// 				СодержимоеМакета = Справочники._ДемоОрганизации.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
// 				Если НЕ ПустаяСтрока(СодержимоеМакета) Тогда
// 					СтандартныеЗначения.Вставить(
// 						"Справочники._ДемоОрганизации." + ИмяМакета, // Идентификатор.
// 						СодержимоеМакета);
// 				КонецЕсли;
// 			КонецЕсли;
// 		КонецЕсли;
// 	КонецЕсли;
//
// Параметры:
//  ЛентаНовостей - СправочникСсылка.ЛентыНовостей - Ссылка на ленту новостей, в которую необходимо загрузить данные;
//  СтандартныеЗначения - Соответствие - Сюда необходимо добавить свои тексты стандартных значений.
//                                       Тексты должны быть оформлены в формате XML так же, как это сделано
//                                         в макете СтандартныеЗначения нужного объекта метаданных:
//                                      * Ключ - произвольный идентификатор;
//                                      * Значение - Текст в формате XML.
//
//@skip-warning
Процедура ПолучитьДополнительныеСтандартныеЗначенияНовостей(ЛентаНовостей, СтандартныеЗначения) Экспорт


КонецПроцедуры

#КонецОбласти

#Область ДополнительнаяОбработкаЗначенийКатегорий

// После вызова ОбработкаНовостей.ДобавитьПрограммноеЗначениеОтбора_*
//  или ОбработкаНовостей.УдалитьПрограммноеЗначениеОтбора_*
//  эти значения категорий должны попасть в регистры сведений ОтборыПоЛентамНовостей*.
// Чтобы эти значения попали туда автоматически, необходимо заполнить массив кодами категорий,
//   для которых необходимо найти значения категорий в новостях,
//   для дальнейшего расчета соответствия этих значений настройкам базы.
//
// Параметры:
//  КодыКатегорийНовостей - Массив из Строка - Массив кодов категорий новостей;
//  ОбластьВидимости      - Строка - "Общее" или "ДляОбластиДанных". Пользовательские - не заполнять;
//  КонтекстВыполнения    - Структура, Неопределено - структура контекста выполнения.
//
//@skip-warning
Процедура ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей(
			КодыКатегорийНовостей,
			ОбластьВидимости = "Общее",
			КонтекстВыполнения = Неопределено) Экспорт
			
	Если ОбластьВидимости = "ДляОбластиДанных" Тогда
		КодыКатегорийНовостей.Добавить("TaxesAndFees");
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает значение отбора по категории и значению категории для дальнейшего определения,
//  какие новости скрывать в зависимости от категории и значения категории новости.
//
// Параметры:
//  КатегорияНовостей         - ПланВидовХарактеристикСсылка.КатегорииНовостей - категория новостей;
//  КодКатегорииНовостей      - Строка - код категории новостей;
//  ЗначениеКатегорииНовостей - Строка - значение категории новостей;
//  РезультатРасчета          - Булево - в эту переменную будет возвращено значение расчета по категории новостей;
//  ОбластьДанных             - Число, Неопределено - номер области данных или Неопределено для неразделенных значений
//                                или при работе в коробке;
//  КонтекстВыполнения        - Структура, Неопределено - структура контекста выполнения;
//  СтандартнаяОбработка      - Булево - признак выполнения стандартной обработки.
//
//@skip-warning
Процедура РассчитатьОтборПоКатегории(
			КатегорияНовостей,
			КодКатегорииНовостей,
			ЗначениеКатегорииНовостей,
			РезультатРасчета,
			ОбластьДанных = Неопределено,
			КонтекстВыполнения = Неопределено,
			СтандартнаяОбработка = Истина) Экспорт
			
	ИспользоватьНомерОбластиДанных = Ложь;
	// Некоторым категориям не нужна область данных.
	МассивКодовОбщихКатегорий = Новый Массив;
	ЗаполнитьКодыКатегорийДляАвтоматическогоРасчетаОтборовНовостей(
		МассивКодовОбщихКатегорий,
		"Общее",
		КонтекстВыполнения);
	Если ТипЗнч(МассивКодовОбщихКатегорий) <> Тип("Массив") Тогда
		МассивКодовОбщихКатегорий = Новый Массив;
	КонецЕсли;
	МассивКодовОбщихКатегорий.Добавить("SubsystemRealized");
	МассивКодовОбщихКатегорий.Добавить("SubsystemNotRealized");
	МассивКодовОбщихКатегорий.Добавить("FnOptionOn");
	МассивКодовОбщихКатегорий.Добавить("FnOptionOff");
	Если МассивКодовОбщихКатегорий.Найти(КодКатегорииНовостей) = Неопределено Тогда
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Если НЕ вошли в область данных (например, зашли в конфигурацию под пользователем
			// без разделения (и не вошли в область данных)).
			Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ИспользоватьНомерОбластиДанных = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьНомерОбластиДанных
		И ОбластьДанных = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			НСтр(
				"ru='ОбработкаНовостейПереопределяемый.РассчитатьОтборПоКатегории'",
				ОбщегоНазначения.КодОсновногоЯзыка()
			),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОбработкаНовостейПереопределяемый,,
			НСтр("ru='Не передан номер области'", ОбщегоНазначения.КодОсновногоЯзыка())
		);
		Возврат;
	КонецЕсли;
		
	Если ЗначениеКатегорииНовостей = "БП.ОповещениеИнтеграцияСЯндексКассой" Тогда
		
		Если ИспользоватьНомерОбластиДанных Тогда
			// Переключиться в область
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
		КонецЕсли;
		
		ИспользоватьИнтеграциюСЯндексКассой = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексКассой");
		ИнтерфейсТакси = ПолучитьФункциональнуюОпцию("ИнтерфейсТакси");
		
		Если ИспользоватьНомерОбластиДанных Тогда
			// Выйти из области
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
		Если (ВРег(КодКатегорииНовостей) = ВРег("FnOptionDataAreaOn")) Тогда
			СтандартнаяОбработка = Ложь;
			РезультатРасчета = ИнтерфейсТакси И НЕ ИспользоватьИнтеграциюСЯндексКассой;
		ИначеЕсли (ВРег(КодКатегорииНовостей) = ВРег("FnOptionDataAreaOff")) Тогда
			СтандартнаяОбработка = Ложь;
			РезультатРасчета = НЕ (ИнтерфейсТакси И НЕ ИспользоватьИнтеграциюСЯндексКассой);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСпискамиНовостейИКлассификаторов

// Метод возвращает массивы структур очень важных и просто важных новостей
//  с неотключенными напоминаниями, т.е. новостей, которые удовлетворяют настройкам отборов пользователей,
//  не просрочены, напоминания не отключены ранее, и с включенным свойством "Важность" = 1 или 2.
// Если включено разделение данных, то такой список должен получаться только при включенном разделителе.
//
// Параметры:
//  ОченьВажныеНовости - Массив из Структура - массив структур, в который будут возвращены новости с важностью "Очень важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * НовостьКодЛентыНовостей        - Строка - код ленты новостей;
//    * ОповещениеВключено             - Булево - Признак, что оповещение включено;
//    * ИконкаНовости                  - Неопределено - всегда Неопределено;
//  ВажныеНовости      - Массив из Структура - массив структур, в который будут возвращены новости с важностью "Важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор - УИН от ссылки на новость;
//    * НавигационнаяСсылка            - Строка - навигационная ссылка на новость;
//    * НовостьНаименование            - Строка - заголовок новости;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости;
//    * НовостьКодЛентыНовостей        - Строка - код ленты новостей;
//    * ОповещениеВключено             - Булево - Признак, что оповещение включено;
//    * ИконкаНовости                  - Картинка, Неопределено - иконка новости для оповещения пользователю;
//  ДополнительныеПараметры - Произвольный - произвольные параметры;
//  СтандартнаяОбработка    - Булево - признак выполнения стандартной обработки.
//
//@skip-warning
Процедура ПолучитьНовостиСНапоминаниями(
			ОченьВажныеНовости,
			ВажныеНовости,
			ДополнительныеПараметры,
			СтандартнаяОбработка) Экспорт


КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Правила переопределения общих модулей для устаревшей функции не проверяются.
// АПК:288-выкл
// АПК:499-выкл
// АПК:503-выкл

// Устаревший функционал.
// Необходимо использовать ОбработкаНовостейПереопределяемый.ЗначениеПредопределеннойКатегории.
// Возвращает значение категории, если для нее установлено свойство "ЗаполняетсяАвтоматически".
// Переопределение функции имеет смысл только если необходимо возвращать значения, отличные от значений по-умолчанию.
//
// Параметры:
//  Категория           - ПланВидовХарактеристикСсылка.КатегорииНовостей - категория новостей;
//  ПредыдущийРезультат - Произвольный - предыдущее значение, которое можно изменить.
//
// Возвращаемое значение:
//  Произвольное - строка, список значений.
//
Функция ПолучитьЗначениеПредопределеннойКатегории(Категория, Знач ПредыдущийРезультат) Экспорт

	НовыйРезультат = ПредыдущийРезультат;

	Если ТипЗнч(Категория) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		КатегорияКод = СокрЛП(Категория.Код);
	ИначеЕсли ТипЗнч(Категория) = Тип("Строка") Тогда
		КатегорияКод = СокрЛП(Категория);
	Иначе
		Возврат ПредыдущийРезультат;
	КонецЕсли;

	Если ВРег(КатегорияКод) = ВРег("ProductName") Тогда // В плане видов характеристик "КатегорииНовостей" такого элемента нет
		// Определять ИмяКонфигурации английскими буквами!
		НовыйРезультат = "Unknown";

	ИначеЕсли ВРег(КатегорияКод) = ВРег("Product") Тогда
		// В исключительных случаях (когда в Метаданные.Версия записана нестандартная версия, например 1.2.3.4.5 или 1.2.3.4/5.6.7.8),
		//  то переложить получение точной версии на разработчиков.

	ИначеЕсли ВРег(КатегорияКод) = ВРег("ProductVersion") Тогда
		// В исключительных случаях (когда в Метаданные.Версия записана нестандартная версия, например 1.2.3.4.5 или 1.2.3.4/5.6.7.8),
		//  то переложить получение точной версии на разработчиков.

	ИначеЕсли ВРег(КатегорияКод) = ВРег("TaxReportID") Тогда // Коды подключенных отчетов
		// Определять список подключенных (возможных) отчетов для сдачи в ИФНС, ПФР и т.п.
		НовыйРезультат = Новый СписокЗначений;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("TaxAdministration") Тогда // Номера ИФНС
		// Определять список ИФНС (через справочник Организации, или другим способом?).
		НовыйРезультат = Новый СписокЗначений;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("Bank") Тогда // Список банков
		// Определять список банков (через справочник РасчетныеСчета или другим способом?).
		НовыйРезультат = Новый СписокЗначений;

	КонецЕсли;

	Возврат НовыйРезультат;

КонецФункции

// Процедура выполняет все необходимые действия для управления контекстными новостями. Должна вызываться из ПриСозданииНаСервере()
// Она используется в том случае, если выбрана стратегия расчета списка контекстных новостей в ПриСозданииНаСервере
//
// Параметры:
//  Форма                                    - УправляемаяФорма - форма, в которой необходимо включить механизм контекстных новостей
//  ИдентификаторМетаданных                  - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости
//  ИдентификаторФормы                       - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости
//  НастройкиКнопкиНовостей                  - Структура, Неопределено - структура настроек для создания кнопки / подменю новостей
//                                             или Неопределено, если кнопку / подменю создавать не надо. Ключи:
//   * ЭлементФормыДляРазмещениеКомандыНовостей - ЭлементФормы -  Группа формы, в которой необходимо разместить создаваемую кнопку / подменю новостей
//   * ТипЗначенияКомандыНовостей               - Тип, Неопределено - может быть Тип("КнопкаФормы") (для создания кнопки Новости)
//                                                или Тип("ГруппаФормы") для создания подменю новостей,
//                                                или Неопределено, если не надо создавать кнопку / подменю.
//                                                По-умолчанию берется Тип("ГруппаФормы") (для создания подменю новостей)
//  ЗаголовокФормыНовостей                   - Строка - заголовок формы, которая появляется при нажатии на кнопку показа списка контекстных новостей из формы
//  СоздаватьРеквизитФормы                   - Булево - Истина, если надо динамически создать реквизит "Новости" произвольного типа
//  НастройкиЗаполненияНовостями             - Структура - структура, определяющая стратегию получения и хранения новостей.
//                                             Можно получать новости на сервере в ПриСозданииНаСервере - это будет тратить время при каждом
//                                               открытии формы, но позволит реализовать сценарий показа новостей при наступлении клиентских
//                                               событий (ПриИзмененииГалочки, ПриУстановкеДатыБольше2014 и т.п.)
//                                             Можно получать новости в обработчике ожидания после открытия формы, также будет задействован клиентский кэш.
//                                               Это сократит время открытия формы, но некоторые сценари станут недоступны
//                                             Ключи:
//   * ПолучатьНовостиНаСервере                - Булево - если Истина, то новости будут получаться в этой процедуре. По-умолчанию = Истина
//   * ХранитьМассивНовостейТолькоНаСервере    - Булево - если Истина, то на клиента не передается массив новостей.
//                                             Это сокращает размер передаваемых данных, но не дает возможность показывать новости
//                                             по другим событиям, отличным от ПриОткрытии.
//                                             Имеет смысл только если ПолучатьНовостиНаСервере = Истина. По-умолчанию = Ложь
//  ИдентификаторыСобытийПриОткрытии         - Строка, Массив - строка или массив строк идентификаторов события "ПриОткрытии".
//                                             Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                             новостей. И если это количество > 0, то открывающая форма инициирует
//                                             открытие формы просмотра таких новостей
//
Процедура КонтекстныеНовости_ПриСозданииНаСервере(
				Форма,
				ИдентификаторМетаданных,
				ИдентификаторФормы,
				ЗаголовокФормыКонтекстныхНовостей = "",
				ИдентификаторыСобытийПриОткрытии = "ПриОткрытии") Экспорт

	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
		Форма,
		ИдентификаторМетаданных,
		ИдентификаторФормы,
		Неопределено, // НастройкиКнопкиНовостей - кнопка должна быть создана
		ЗаголовокФормыКонтекстныхНовостей,
		Ложь, // НЕ создавать реквизит "Новости", он уже должен быть создан в форме
		Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере",
			Истина, // Получать новости на сервере
			Ложь // Передавать с сервера массив структур новостей
		),
		ИдентификаторыСобытийПриОткрытии // Массив идентификаторов "При открытии" или единственный идентификатор
	);

КонецПроцедуры

// АПК:503-вкл
// АПК:499-вкл
// АПК:288-вкл

#КонецОбласти

#КонецОбласти
