
////////////////////////////////////////////////////////////////////////////////
//  Получение, обработка и проверка реквизитов банковских счета на клиенте
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс 

// Формирует текст сообщения во время интерактивного ввода для поля подсказки номера счета.
//
// Параметры:
//  НомерСчета - Строка - номер проверяемого счета.
//  БИК        - Строка - БИК проверяемого банка.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - форматированный текст подсказки.
//
Функция ПодсказкаВводаПоляНомерСчета(НомерСчета, БИК) Экспорт
	
	ТекстСообщения = Новый ФорматированнаяСтрока("");
	
	КоличествоЦифрВСчете = КоличествоЦифрВСтроке(НомерСчета);

	ДлинаСчетаПоЗакону = БанковскиеПравила.ДлинаНомераСчета();
	
	ТекстСообщения = Нстр("ru = 'Осталось ввести %1'"); 
	
	СклоняемыйТекст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		Нстр("ru = ';%1 цифру;;%1 цифры;%1 цифр;%1 цифры'"), ДлинаСчетаПоЗакону - КоличествоЦифрВСчете);
	
	ТекстСообщения = Новый ФорматированнаяСтрока(СтрШаблон(ТекстСообщения,СклоняемыйТекст));
		
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает реквизиты банка.
//
// Параметры:
//  СсылкаНаБанк - СправочникСсылка.Банки - ссылка на банк, для которого требуется получить реквизиты.
//               - СправочникСсылка.КлассификаторБанков   -  ссылка на банк, для которого требуется получить реквизиты.
//
// Возвращаемое значение:
//  Структура - см. описание возвращаемого значения в модуле БанковскиеСчетаВызовСервера в функции НоваяСтруктураРеквизитовБанка() .
//
Функция ПолучитьДанныеБанка(СсылкаНаБанк) Экспорт
	
	Если ТипЗнч(СсылкаНаБанк) = Тип("СправочникСсылка.Банки") Тогда
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(СсылкаНаБанк);
	ИначеЕсли ТипЗнч(СсылкаНаБанк) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзКлассификатора(СсылкаНаБанк);
	КонецЕсли;
	
	Возврат РеквизитыБанка;
	
КонецФункции

// Переопределяет обработчик АвтоПодбор поля банка для подбора банков одновременно из справочника и классификатора.
//
// Параметры:
//  Текст                - Строка - см. описание параметра обработчика АвтоПодбор.
//  ДанныеВыбора         - Произвольный - см. описание параметра обработчика АвтоПодбор.
//  СтандартнаяОбработка - Булево - см. описание параметра обработчика АвтоПодбор.
//  Параметры            - Структура - см. описание параметра ПараметрыПолученияДанных обработчика АвтоПодбор. 
//
Процедура БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Параметры, Страна = Неопределено, ОкончаниеВводаТекста = Ложь) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) И СтрДлина(Текст) <= 2 Тогда
		ДанныеВыбора = Новый СписокЗначений;
	Иначе
		ДанныеВыбора = БанковскиеСчетаВызовСервера.ДанныеВыбораБанка(Параметры);
	КонецЕсли;
	
	// Код ниже должен работать только для иностранных контрагентов.
	
	ЭтоНерезидент = ЗначениеЗаполнено(Страна) И Страна <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	
	СтрокаПоиска = СокрЛП(Текст);
	ДлинаСтроки  = СтрДлина(СтрокаПоиска);
	ЭтоНовыйБИКТОФК = Не ЭтоНерезидент И Не ЗначениеЗаполнено(ДанныеВыбора)
		И БанковскиеПравила.ПроверитьДлинуБИК(СтрокаПоиска) И БанковскиеПравила.ЭтоБИКТОФК(СтрокаПоиска);
	
	Если ЭтоНовыйБИКТОФК Тогда
		Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		СловаСоздатьБанк = Новый Массив;
		СловаСоздатьБанк.Добавить(НСтр("ru = 'Создать:'"));
		СловаСоздатьБанк.Добавить(" ");
		СловаСоздатьБанк.Добавить(НСтр("ru = 'БИК ТОФК'"));
		СловаСоздатьБанк.Добавить(" ");
		СловаСоздатьБанк.Добавить(СтрокаПоиска);
		СловаСоздатьБанк.Добавить(" ");
		СловаСоздатьБанк.Добавить(" (");
		СловаСоздатьБанк.Добавить(Строка(Страна));
		СловаСоздатьБанк.Добавить(")");
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Страна", Страна);
		ЗначенияЗаполнения.Вставить("Код", СтрокаПоиска);
		
		ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ДанныеВыбора.Добавить(ПараметрыЗаполнения, Новый ФорматированнаяСтрока(СловаСоздатьБанк));
		Возврат;
	ИначеЕсли Не ЭтоНерезидент
		Или ЗначениеЗаполнено(ДанныеВыбора) // Нашли российский банк.
		Или ДлинаСтроки < 6                 // Минимальная длина BIN в ISO/IEC (ГОСТ) 7812.
		Или ДлинаСтроки > 11                // Максимальная длина SWIFT.
		Или БанковскиеПравила.ЭтоБИКБанкаРФ(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваКодаБанка = БанковскиеПравила.СвойстваКодаБанка(СтрокаПоиска);
	Если Не СвойстваКодаБанка.ПохожеНаBIC И Не СвойстваКодаБанка.ПохожеНаSWIFT И Не СвойстваКодаБанка.ЭтоSWIFT
		Или Не СвойстваКодаБанка.ЭтоSWIFT И СтрНайти(Текст, " ") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СловаСоздатьБанк = Новый Массив;
	СловаСоздатьБанк.Добавить(НСтр("ru = 'Создать:'"));
	СловаСоздатьБанк.Добавить(" ");
	Если СвойстваКодаБанка.ЭтоSWIFT Тогда
		СловаСоздатьБанк.Добавить("SWIFT");
		СловаСоздатьБанк.Добавить(" ");
	ИначеЕсли СвойстваКодаБанка.ПохожеНаBIC Тогда
		СловаСоздатьБанк.Добавить(НСтр("ru = 'Код'"));
		СловаСоздатьБанк.Добавить(" ");
	КонецЕсли;
	СловаСоздатьБанк.Добавить(СтрокаПоиска);
	Если СвойстваКодаБанка.ЭтоSWIFT Тогда
		СтранаПоSWIFT = БанковскиеСчетаВызовСервера.СтранаПоSWIFT(СтрокаПоиска);
		Если СтранаПоSWIFT <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			СловаСоздатьБанк.Добавить(" (");
			СловаСоздатьБанк.Добавить(Строка(СтранаПоSWIFT));
			СловаСоздатьБанк.Добавить(")");
		КонецЕсли;
	ИначеЕсли СвойстваКодаБанка.ПохожеНаBIC Тогда
		СловаСоздатьБанк.Добавить(" (");
		СловаСоздатьБанк.Добавить(Строка(Страна));
		СловаСоздатьБанк.Добавить(")");
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура("Страна", Страна);
	Если СвойстваКодаБанка.ЭтоSWIFT Или СвойстваКодаБанка.ПохожеНаSWIFT Тогда
		ЗначенияЗаполнения.Вставить("СВИФТБИК", СтрокаПоиска);
	ИначеЕсли СвойстваКодаБанка.ПохожеНаBIC Тогда
		ЗначенияЗаполнения.Вставить("Код", СтрокаПоиска);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ДанныеВыбора.Добавить(ПараметрыЗаполнения, Новый ФорматированнаяСтрока(СловаСоздатьБанк));
	Если ОкончаниеВводаТекста Тогда
		// Добавляем вторую строку, чтобы в этом режиме не срабатывал автовыбор единственной строки.
		ДанныеВыбора.Добавить("");
	КонецЕсли;
	
КонецПроцедуры

Процедура БанкОкончаниеВводаТекста(Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка, СтранаРегистрации) Экспорт
	
	БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Параметры, СтранаРегистрации, Истина);
	
КонецПроцедуры

// Процедура проверяет и устанавливает данные валютного учета перед записью объекта.
// Если записывается валютный счет по банковским правилам РФ, то проверяется условие 
// включения валютного учета в программе. В случае невыполнения условия,
// пользователю выводится сообщение, содержащее необходимые действия.
//
// Параметры:
//  НомерСчета       - Строка - номер проверяемого счета.
//  БИКБанка         - Строка - БИК банка проверяемого счета.
//  СсылкаНаОбъект   - СправочникСсылка.БанковскиеСчета,СправочникСсылка.Организации,СправочникСсылка.Контрагенты - 
//                     ссылка на записываемый объект.
//  Отказ            - Булево - см. описание параметра в обработчике ПередЗаписью.
//
Процедура ПередЗаписью(НомерСчета, БИКБанка, СсылкаНаОбъект, Отказ) Экспорт
	
	Если НЕ БанковскиеПравила.ЭтоКорректныйСчетБанкаРФ(НомерСчета, БИКБанка)
		ИЛИ БанковскиеПравила.ЭтоРублевыйСчет(НомерСчета) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВалютногоУчета = БанковскиеСчетаВызовСервера.СведенияОВалютномУчете();
	
	Если Не ДанныеВалютногоУчета.ВалютныйУчетИспользуется Тогда
		
		Отказ = Истина;
		ПредложитьВключитьВалютныйУчет(ДанныеВалютногоУчета.ИзменениеВалютногоУчетаРазрешено, СсылкаНаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит диалог, предлагающий включить валютный учет.
//
// Параметры:
//  ИзменениеВалютногоУчетаРазрешено - Булево - признак наличия прав у пользователя на изменение валютного учета.
//  СсылкаНаОбъект                   - СправочникСсылка.Организации  - ссылка на организацию, которой адресовано сообщение.
//                                   - СправочникСсылка.Контрагенты  - ссылка на контрагента, которому адресовано сообщение.
//                                   - СправочникСсылка.БанковскиеСчета - ссылка на банковский счет, которому адресовано сообщение.
//  ДополнительныеПараметры          - Структура - см. описание параметра ДополнительныеПараметры функции ОписаниеОповещения().
//
Процедура ПредложитьВключитьВалютныйУчет(ИзменениеВалютногоУчетаРазрешено, СсылкаНаОбъект) Экспорт
	
	
	СклоняемыйТекст = "";
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		СклоняемыйТекст = НСтр("ru = 'Контрагент не записан.'");
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Организации") Тогда 
		СклоняемыйТекст = НСтр("ru = 'Организация не записана.'");
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СклоняемыйТекст = НСтр("ru = 'Банковский счет не записан.'");
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = '%1
		|Использование банковского счета в валюте возможно только при включенной 
		|функциональности ""Учет по договорам"" и ""Расчеты в валюте и у.е.""
		|
		|%2'");
		
	Если ИзменениеВалютногоУчетаРазрешено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбновитьИнтерфейс", Ложь);
			
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ДополнительныеПараметры.Вставить("ОбновитьИнтерфейс", Истина);
		КонецЕсли;
			
		ОбратныйВызов = Новый ОписаниеОповещения("ОтветВключитьВалютныйУчет", БанковскиеСчетаФормыКлиент, ДополнительныеПараметры);
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Включить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ТекстДействия = НСтр("ru = 'Включить эту функциональность?'");
		ТекстВопроса = СтрШаблон(ТекстСообщения, СклоняемыйТекст, ТекстДействия);
		ПоказатьВопрос(ОбратныйВызов, ТекстВопроса, КнопкиВопроса);
		
	Иначе
		
		ТекстДействия = НСтр("ru = 'Для включения этой функциональности обратитесь к администратору.'");
		ТекстПредупреждения = СтрШаблон(ТекстСообщения, СклоняемыйТекст, ТекстДействия);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаНавигационнойСсылки", открывает форму списка банковских счетов организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой будет установлен отбор на
//                открывающийся список банковских счетов
//  СтандартнаяОбработка - Булево - см. описание одноименного параметра события "ОбработкаНавигационнойСсылки"
//
Процедура ОткрытьСписокСчетовОрганизации(Организация, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыОрганизации = Новый Структура;
	ПараметрыФормыОрганизации.Вставить("Ключ", Организация);
	ФормаОрганизации = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормыОрганизации);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Владелец", Организация));
	ОткрытьФорму(
		"Справочник.БанковскиеСчета.ФормаСписка",
		ПараметрыОткрытия,
		ФормаОрганизации,
		,
		ФормаОрганизации.Окно,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОтветВключитьВалютныйУчет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		БанковскиеСчетаВызовСервера.ВключитьВалютныйУчет();
			
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ОбновитьИнтерфейс") Тогда
			
			ОбновитьИнтерфейс();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет валюту по номеру счета банка РФ.
//
// Параметры:
//  БанковскийСчет - ДанныеФормыСтруктура - банковский счет, в котором требуется изменить валюту счета.
//  ТекстОшибки    - Строка - исходящий, в параметре возвращается описание ошибки, если валюта не найдена.
//
Процедура УстановитьВалютуПодсказкуСчета(БанковскийСчет, Форма, КодБанка, Цвет, ЯвляетсяБанкомРФ) Экспорт

	НомерСчетаКорректен = Ложь;
	
	ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
		БанковскийСчет.НомерСчета, КодБанка, ЯвляетсяБанкомРФ, Цвет, НомерСчетаКорректен);
		
	Если НомерСчетаКорректен И ЯвляетсяБанкомРФ Тогда
		Если БанковскиеПравила.ЭтоРублевыйСчет(БанковскийСчет.НомерСчета) Тогда
			БанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			БанковскийСчет.Валютный = Ложь;
		Иначе
			КодВалюты = БанковскиеПравила.КодВалютыБанковскогоСчета(БанковскийСчет.НомерСчета);
			БанковскийСчет.ВалютаДенежныхСредств = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
			БанковскийСчет.Валютный = Истина;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(БанковскийСчет.ВалютаДенежныхСредств) Тогда
			ТекстСообщения = Нстр("ru = 'Валюта счета неизвестна. Проверьте номер счета'");
			ПодсказкаНомерСчета = Новый ФорматированнаяСтрока(ТекстСообщения,, Цвет);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ПодсказкаНомерСчета = ПодсказкаНомерСчета;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоличествоЦифрВСтроке(ИсходнаяСтрока)
	
	Результат = 0;
	
	Длина = СтрДлина(ИсходнаяСтрока);
	Для НомерСимвола = 1 По Длина Цикл
		
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		
		Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
