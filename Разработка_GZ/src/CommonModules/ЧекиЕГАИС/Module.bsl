
#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//   * Прочее - Структура - Прочие параметры.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыИнформированияЕГАИС.КПередаче);
			
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыИнформированияЕГАИС.ПереданВУТМ;
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыИнформированияЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
			
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыИнформированияЕГАИС.ОтменаПередачи;
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыИнформированияЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ ЕГАИС.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа ЕГАИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	ДобавитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
	               Или ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
	УдалитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
	               Или ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И (ДобавитьДвижения Или УдалитьДвижения) Тогда
		
		ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
		
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДополнительныеСвойстваДляПроведения = Новый Структура;
		ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		ИнтеграцияЕГАИСПереопределяемый.ИнициализироватьДополнительныеСвойстваДляПроведенияЧеков(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		
		МенеджерОбъекта.ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
		НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	// Для списания из регистра №3
	Если ДобавитьДвижения Тогда
		
		ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
		Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
				И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
				АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
				Продолжить;
			КонецЕсли;
			
			ТребуетсяРезервирование = ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
			                        И ИнтеграцияЕГАИС.НетДвижений(СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
			
			ДанныеЗаписиСтатуса = РегистрыСведений.АкцизныеМаркиЕГАИС.ПоляЗаписиСтатусаУпаковки();
			ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
			ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
			ДанныеЗаписиСтатуса.Справка2             = СтрокаТЧ.Справка2;
			ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			
			Если ТребуетсяРезервирование Тогда
				ДанныеЗаписиСтатуса.Статус = Перечисления.СтатусыАкцизныхМарок.ВРезерве;
			Иначе
				ДанныеЗаписиСтатуса.Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
			КонецЕсли;
			
			ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Для восстановления записи в регистре №3
	Если УдалитьДвижения Тогда
		
		ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
		Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
				И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
				АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
				Продолжить;
			КонецЕсли;
			
			ДанныеЗаписиСтатуса = РегистрыСведений.АкцизныеМаркиЕГАИС.ПоляЗаписиСтатусаУпаковки();
			ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
			ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
			ДанныеЗаписиСтатуса.Справка2             = СтрокаТЧ.Справка2;
			ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
			
			ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаЧекаНаВозврат(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	ДобавитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
	УдалитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И (ДобавитьДвижения Или УдалитьДвижения) Тогда
		
		ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
		
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДополнительныеСвойстваДляПроведения = Новый Структура;
		ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		
		МенеджерОбъекта.ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
		НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если Перечисления.ФорматыОбменаЕГАИС.ФорматОбменаНеМенееV3(ПараметрыОбновленияСтатуса.ФорматОбмена) Тогда
		
		// Для восстановления записи в регистре №3
		Если ДобавитьДвижения Тогда
			
			ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
			Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
					И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
				
				ДанныеЗаписиСтатуса = РегистрыСведений.АкцизныеМаркиЕГАИС.ПоляЗаписиСтатусаУпаковки();
				ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
				ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
				ДанныеЗаписиСтатуса.Справка2             = СтрокаТЧ.Справка2;
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
				ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
				
				ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Для списания из регистра №3
		Если УдалитьДвижения Тогда
			
			ШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка);
			Для Каждого СтрокаТЧ Из ШтрихкодыУпаковок.МаркированныеТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Справка2)
					И СтрокаТЧ.Статус = Перечисления.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса Тогда
					АкцизныеМаркиЕГАИС.СообщитьОбОшибкеЧтенияСтатуса(СтрокаТЧ.ШтрихкодУпаковки);
					Продолжить;
				КонецЕсли;
				
				ДанныеЗаписиСтатуса = РегистрыСведений.АкцизныеМаркиЕГАИС.ПоляЗаписиСтатусаУпаковки();
				ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
				ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.ШтрихкодУпаковки;
				ДанныеЗаписиСтатуса.Справка2             = СтрокаТЧ.Справка2;
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
				ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.Реализована;
				
				ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Перечисления.ВидыДокументовЕГАИС.ЧекККМ, ДокументСсылка, Ложь, Ложь);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыИнформированияЕГАИС.КПередаче);
	Результат.Добавить(Перечисления.СтатусыИнформированияЕГАИС.ПереданВУТМ);
	
	Возврат Результат;
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыИнформированияЕГАИС.ПереданВУТМ);
	
	Возврат Результат;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

Функция ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц, Операция = Неопределено) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Если Операция = Неопределено Тогда
		Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ;
	КонецЕсли;
	
	Шапка  = РезультатыЗапроса["Шапка"].Выбрать();
	Товары = РезультатыЗапроса["Товары"].Выгрузить();
	
	Если Шапка.Количество() > 1 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ОрганизацияЕГАИС) Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
	ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		Выборка, МенеджерВременныхТаблиц);
	
	АкцизныеМарки = Новый ТаблицаЗначений;
	АкцизныеМарки.Колонки.Добавить("ИдентификаторСтроки");
	АкцизныеМарки.Колонки.Добавить("АлкогольнаяПродукция");
	АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
	
	Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
		
		НоваяСтрока = АкцизныеМарки.Добавить();
		НоваяСтрока.ИдентификаторСтроки  = СтрокаТЧ.ИдентификаторСтроки;
		НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
		НоваяСтрока.КодАкцизнойМарки     = СтрокаТЧ.Штрихкод;
		
	КонецЦикла;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	АдресТорговогоОбъекта = "";
	ИнтеграцияЕГАИСПереопределяемый.АдресТорговогоОбъекта(АдресТорговогоОбъекта, Шапка);
	
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресТорговогоОбъекта) Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Не заполнен адрес торгового объекта: %1'"), Шапка.ТорговыйОбъект));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЧекXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "inn",      Шапка.ИНН,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kpp",      Шапка.КПП,                           СообщениеXML, Неопределено, Истина);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "address",  АдресТорговогоОбъекта,               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "name",     Строка(Шапка.ТорговыйОбъект),        СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kassa",    Шапка.СерийныйНомерККМ,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "shift",    Шапка.НомерСмены,                    СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "number",   Шапка.НомерЧекаККМ,                  СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "datetime", Формат(Шапка.Дата, "ДФ=ddMMyyHHmm"), СообщениеXML);
	
	АкцизныеМарки.Индексы.Добавить("ИдентификаторСтроки");
	АкцизныеМарки.Индексы.Добавить("АлкогольнаяПродукция");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Цена  = Формат(СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		Объем = Формат(СтрокаТЧ.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		КодыАкцизныхМарок = Новый Массив;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
		НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
			АкцизныеМарки.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		Если КодыАкцизныхМарок.Количество() < СтрокаТЧ.Количество Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
				АкцизныеМарки.Удалить(НайденнаяСтрока);
				Если КодыАкцизныхМарок.Количество() = СтрокаТЧ.Количество Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если КодыАкцизныхМарок.Количество() >= СтрокаТЧ.Количество Тогда
			
			Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
				
				Bottle = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "price"  , Цена,              СообщениеXML);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "barcode", КодАкцизнойМарки,  СообщениеXML);
				
				Если ЭтоШтрихкодEAN(ПространствоИмен, СтрокаТЧ.Штрихкод) Тогда
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", СтрокаТЧ.Штрихкод, СообщениеXML);
				КонецЕсли;
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "volume" , Объем,             СообщениеXML);
				
				ЧекXDTO.Bottle.Добавить(Bottle);
				
			КонецЦикла;
			
		Иначе
			
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ЧекXDTOВXML(ЧекXDTO, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц, Операция = Неопределено) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Если Операция = Неопределено Тогда
		Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ;
	КонецЕсли;
	
	Шапка  = РезультатыЗапроса["Шапка"].Выбрать();
	Товары = РезультатыЗапроса["Товары"].Выгрузить();
	
	Если Шапка.Количество() > 1 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ОрганизацияЕГАИС) Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
	ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		Выборка, МенеджерВременныхТаблиц);
	
	АкцизныеМарки = Новый ТаблицаЗначений;
	АкцизныеМарки.Колонки.Добавить("Номенклатура");
	АкцизныеМарки.Колонки.Добавить("Характеристика");
	АкцизныеМарки.Колонки.Добавить("Серия");
	АкцизныеМарки.Колонки.Добавить("АлкогольнаяПродукция");
	АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
	
	Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
		
		НоваяСтрока = АкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.КодАкцизнойМарки     = СтрокаТЧ.Штрихкод;
		
	КонецЦикла;
	
	АкцизныеМарки.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,Серия");
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	АдресТорговогоОбъекта = "";
	ИнтеграцияЕГАИСПереопределяемый.АдресТорговогоОбъекта(АдресТорговогоОбъекта, Шапка);
	
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресТорговогоОбъекта) Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Не заполнен адрес торгового объекта: %1'"), Шапка.ТорговыйОбъект));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЧекXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "inn",      Шапка.ИНН,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kpp",      Шапка.КПП,                           СообщениеXML, Неопределено, Истина);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "address",  АдресТорговогоОбъекта,               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "name",     Строка(Шапка.ТорговыйОбъект),        СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kassa",    Шапка.СерийныйНомерККМ,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "shift",    Шапка.НомерСмены,                    СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "number",   Шапка.НомерЧекаККМ,                  СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "datetime", Формат(Шапка.Дата, "ДФ=ddMMyyHHmm"), СообщениеXML);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Цена  = Формат(СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		Объем = Формат(СтрокаТЧ.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		КодыАкцизныхМарок = Новый Массив;
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТЧ);
		
		КоличествоМарок = СтрокаТЧ.Количество;
		
		НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если КоличествоМарок > 0 Тогда
				КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
				АкцизныеМарки.Удалить(НайденнаяСтрока);
				КоличествоМарок = КоличествоМарок - 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КодыАкцизныхМарок.Количество() = СтрокаТЧ.Количество Тогда
			
			Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
				
				Bottle = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "price"  , Цена,              СообщениеXML);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "barcode", КодАкцизнойМарки,  СообщениеXML);
				
				Если ЭтоШтрихкодEAN(ПространствоИмен, СтрокаТЧ.Штрихкод) Тогда
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", СтрокаТЧ.Штрихкод, СообщениеXML);
				КонецЕсли;
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "volume" , Объем,             СообщениеXML);
				
				ЧекXDTO.Bottle.Добавить(Bottle);
				
			КонецЦикла;
			
		Иначе
			
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ЧекXDTOВXML(ЧекXDTO, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область ОбработкаШтрихкодов

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов
//
Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2 = Ложь;
	Если Форма.Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		ПараметрыЗаполнения.ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	ПараметрыОтбора.Вставить("Серия",          ДанныеШтрихкода.Серия);
	
	РаспределенноеКоличество = 0;
	Пока РаспределенноеКоличество < ДанныеШтрихкода.Количество Цикл
		
		ОсталосьРаспределить = ДанныеШтрихкода.Количество - РаспределенноеКоличество;
	
		РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
			Форма.Объект.Товары, ПараметрыОтбора,
			Неопределено, ДанныеШтрихкода.АлкогольнаяПродукция, ПараметрыЗаполнения);
		
		СтрокаТЧ                        = РезультатПоиска.ПолноеСоответствие;
		СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
		
		Если СтрокиТЧДляУменьшенияКоличества = Неопределено
			И СтрокаТЧ = Неопределено Тогда
			
			СтрокаТЧ = Форма.Объект.Товары.Добавить();
			СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
			СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
			СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;
			
			СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
			
			АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(
				СтрокаТЧ, ПараметрыЗаполнения,
				ОсталосьРаспределить, ДанныеШтрихкода.МаркируемаяПродукция);
			
			РаспределенноеКоличество = РаспределенноеКоличество + ОсталосьРаспределить;
			
		ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
			И СтрокаТЧ <> Неопределено Тогда
			
			АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(
				СтрокаТЧ, ПараметрыЗаполнения,
				ОсталосьРаспределить, ДанныеШтрихкода.МаркируемаяПродукция);
			
			РаспределенноеКоличество = РаспределенноеКоличество + ОсталосьРаспределить;
			
		Иначе
			
			Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
				
				Если СтрокаТЧДляУменьшенияКоличества.Количество >= ОсталосьРаспределить Тогда
					КоличествоКОбработке = ОсталосьРаспределить;
				Иначе
					КоличествоКОбработке = СтрокаТЧДляУменьшенияКоличества.Количество;
				КонецЕсли;
				
				Если СтрокаТЧДляУменьшенияКоличества.Количество <= КоличествоКОбработке Тогда
					
					Если СтрокаТЧ = Неопределено Тогда
						
						СтрокаТЧ = СтрокаТЧДляУменьшенияКоличества;
						
						СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
						
					Иначе
						
						Форма.Объект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
						
						Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
						Если Индекс <> Неопределено Тогда
							ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
						КонецЕсли;
						
						АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(
							СтрокаТЧ, ПараметрыЗаполнения,
							КоличествоКОбработке, ДанныеШтрихкода.МаркируемаяПродукция);
						
					КонецЕсли;
					
					РаспределенноеКоличество = РаспределенноеКоличество + КоличествоКОбработке;
					
				Иначе
					
					СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - КоличествоКОбработке;
					ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
					
					Если СтрокаТЧ = Неопределено Тогда
						
						СтрокаТЧ = Форма.Объект.Товары.Вставить(Форма.Объект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
						
						СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
						
						АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(
							СтрокаТЧ, ПараметрыЗаполнения,
							КоличествоКОбработке, ДанныеШтрихкода.МаркируемаяПродукция);
						
					Иначе
						
						АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(
							СтрокаТЧ, ПараметрыЗаполнения,
							КоличествоКОбработке, ДанныеШтрихкода.МаркируемаяПродукция);
						
					КонецЕсли;
					
					РаспределенноеКоличество = РаспределенноеКоличество + КоличествоКОбработке;
					
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
			СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеШтрихкода.МаркируемаяПродукция Тогда
		
		АкцизныеМаркиСтрокаТЧ = Форма.Объект.АкцизныеМарки.Добавить();
		АкцизныеМаркиСтрокаТЧ.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
		АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка       = ДанныеШтрихкода.ШтрихкодУпаковки;
		АкцизныеМаркиСтрокаТЧ.Справка2            = ДанныеШтрихкода.Справка2;
		
	КонецЕсли;
	
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаЛогистическойУпаковки(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Если Результат.ЕстьОшибкиВДеревеУпаковок Тогда
		Результат.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ВложенныеШтрихкоды.ДеревоУпаковок, Форма.УникальныйИдентификатор);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2 = Ложь;
	Если Форма.Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		ПараметрыЗаполнения.ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
	
	ЗаполнитьТоварыИАкцизныеМарки(Форма.Объект, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат Результат;
	
КонецФункции

// Функция предназначена для обработки считанного малого штрихкода акцизной марки старого (PDF417) образца
//
Функция ОбработатьДанныеШтрихкодаСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",         ДанныеШтрихкода.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика",       ДанныеШтрихкода.Характеристика);
	ПараметрыОтбора.Вставить("АлкогольнаяПродукция", ДанныеШтрихкода.АлкогольнаяПродукция);
	ПараметрыОтбора.Вставить("Серия",                ДанныеШтрихкода.Серия);
	
	МассивСтрок = Форма.Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТЧ = МассивСтрок[0];
	Иначе
		СтрокаТЧ = Неопределено;
	КонецЕсли;
	
	Если СтрокаТЧ <> Неопределено Тогда
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество + 1;
		
		Результат.ИзмененныеСтроки.Добавить(СтрокаТЧ);
		
	Иначе
		
		СтрокаТЧ = Форма.Объект.Товары.Добавить();
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		СтрокаТЧ.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
		СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;
		
		СтрокаТЧ.КоличествоУпаковок = 1;
		СтрокаТЧ.Количество         = 1;
		
		Результат.ДобавленныеСтроки.Добавить(СтрокаТЧ);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеДокументов

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			СтрокаТЧТовары = ЗаполнитьТоварИзСтроки(ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения, 1);
			
			СтрокаТЧАкцизныеМарки = ДокументОбъект.АкцизныеМарки.Добавить();
			СтрокаТЧАкцизныеМарки.ИдентификаторСтроки = СтрокаТЧТовары.ИдентификаторСтроки;
			СтрокаТЧАкцизныеМарки.АкцизнаяМарка       = СтрокаДерева.ШтрихкодУпаковки;
			СтрокаТЧАкцизныеМарки.Справка2            = СтрокаДерева.Справка2;
			СтрокаТЧАкцизныеМарки.ШтрихкодУпаковки    = УпаковкаВерхнегоУровняСтрокиДерева;
			
		Иначе
			
			ЗаполнитьТоварыИАкцизныеМарки(
				ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
				УпаковкаВерхнегоУровняСтрокиДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть Товары по данным таблицы немаркируемой продукции.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Заполняемый документ.
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ПараметрыЗаполнения - Структура - Параметры, полученные из функции ПараметрыЗаполненияТоваровИАкцизныхМарок.
//
Процедура ЗаполнитьНеМаркируемыеТовары(ДокументОбъект, ТаблицаНеМаркируемойПродукции, ПараметрыЗаполнения) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТаблицаНеМаркируемойПродукции Цикл
		
		ЗаполнитьТоварИзСтроки(ДокументОбъект, СтрокаТаблицы, ПараметрыЗаполнения, СтрокаТаблицы.Количество);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокументов

Функция ЗаполнитьТоварИзСтроки(ДокументОбъект, СтрокаТовара, ПараметрыЗаполнения, Количество)
	
	ЭтоМаркируемаяПродукция = (ТипЗнч(СтрокаТовара) = Тип("СтрокаДереваЗначений"));
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовара, "ИдентификаторСтроки") Тогда
		ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	ВыполнитьПоискПоНоменклатуре = Истина;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ВыполнитьПоискПоНоменклатуре    = Ложь;
			СтрокаТЧТовары                  = НайденныеСтроки[0];
			СтрокиТЧДляУменьшенияКоличества = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполнитьПоискПоНоменклатуре Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТовара.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовара.Характеристика);
		ПараметрыОтбора.Вставить("Серия",          СтрокаТовара.Серия);
		
		РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
			ДокументОбъект.Товары, ПараметрыОтбора,
			Неопределено, СтрокаТовара.АлкогольнаяПродукция, ПараметрыЗаполнения);
		
		СтрокаТЧТовары                  = РезультатПоиска.ПолноеСоответствие;
		СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
		
	КонецЕсли;
	
	Если СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧТовары = Неопределено Тогда
		
		СтрокаТЧТовары = ДокументОбъект.Товары.Добавить();
		
		СтрокаТЧТовары.Номенклатура         = СтрокаТовара.Номенклатура;
		СтрокаТЧТовары.Характеристика       = СтрокаТовара.Характеристика;
		СтрокаТЧТовары.Серия                = СтрокаТовара.Серия;
		
		СтрокаТЧТовары.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
		
		УстановитьИдентификаторСтроки(СтрокаТЧТовары, ИдентификаторСтроки);
		
		АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, Количество, ЭтоМаркируемаяПродукция);
		
	ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧТовары <> Неопределено Тогда
		
		АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, Количество, ЭтоМаркируемаяПродукция);
		
	Иначе
		
		КоличествоКРаспределению = Количество;
		
		Пока КоличествоКРаспределению > 0
			И СтрокиТЧДляУменьшенияКоличества.Количество() > 0 Цикл
			
			ОбработанныеСтроки = Новый Массив;
			
			Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
			
				Если СтрокаТЧДляУменьшенияКоличества.Количество <= КоличествоКРаспределению Тогда
					
					Если СтрокаТЧТовары = Неопределено Тогда
						
						СтрокаТЧТовары = СтрокаТЧДляУменьшенияКоличества;
						
						СтрокаТЧТовары.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
						
					Иначе
						
						ДокументОбъект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
						
						Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
						Если Индекс <> Неопределено Тогда
							ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
						КонецЕсли;
						
					КонецЕсли;
					
					ОбработанныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
					
					СписываемоеКоличество = СтрокаТЧДляУменьшенияКоличества.Количество;
					
					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, СписываемоеКоличество, ЭтоМаркируемаяПродукция);
					
					КоличествоКРаспределению = КоличествоКРаспределению - СписываемоеКоличество;
					
				Иначе
					
					СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - КоличествоКРаспределению;
					ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
					
					Если СтрокаТЧТовары = Неопределено Тогда
						
						СтрокаТЧТовары = ДокументОбъект.Товары.Вставить(ДокументОбъект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
						ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок");
						
						СтрокаТЧТовары.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
						
						УстановитьИдентификаторСтроки(СтрокаТЧТовары, ИдентификаторСтроки);
						
						АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, КоличествоКРаспределению, ЭтоМаркируемаяПродукция);
						
					Иначе
						
						АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, КоличествоКРаспределению, ЭтоМаркируемаяПродукция);
						
					КонецЕсли;
					
					КоличествоКРаспределению = 0;
					
				КонецЕсли;
				
				Если КоличествоКРаспределению <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОбработаннаяСтрока Из ОбработанныеСтроки Цикл
				Индекс = СтрокиТЧДляУменьшенияКоличества.Найти(ОбработаннаяСтрока);
				Если Индекс <> Неопределено Тогда
					СтрокиТЧДляУменьшенияКоличества.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если КоличествоКРаспределению > 0 И СтрокаТЧТовары <> Неопределено Тогда
			АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, КоличествоКРаспределению, ЭтоМаркируемаяПродукция);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаТЧТовары;
	
КонецФункции

Процедура УстановитьИдентификаторСтроки(СтрокаТЧТовары, ИдентификаторСтроки)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧТовары, "ИдентификаторСтроки") Тогда
		Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
			СтрокаТЧТовары.ИдентификаторСтроки = ИдентификаторСтроки;
		Иначе
			СтрокаТЧТовары.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЭтоШтрихкодEAN(ПространствоИмен, Штрихкод)
	
	Если Штрихкод = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипEAN = ФабрикаXDTO.Тип(ПространствоИмен, "EAN");
	
	Попытка
		ТипEAN.Проверить(Штрихкод);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаПроверкиЗаполнения

Процедура ПроверитьОтсутствиеНемаркируемойПродукции(Объект, Отказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция,
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО Товары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|ГДЕ
	|	НЕ КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Маркируемый
	|");
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(, "АлкогольнаяПродукция, НомерСтроки"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерОшибки = 1;
	КоличествоОшибок = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = НСтр("ru = 'В строке %1 указана немаркируемая алкогольная продукция ""%2""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.НомерСтроки, Выборка.АлкогольнаяПродукция);
		
		Если НомерОшибки = КоличествоОшибок Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + 
				НСтр("ru = 'Операции с немаркируемой алкогольной продукцией должны отражаться документами ""%1""'");
			
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
				ТипДокументаДляНемаркируемойПродукции = НСтр("ru = 'Акт списания ЕГАИС'");
			Иначе
				ТипДокументаДляНемаркируемойПродукции = НСтр("ru = 'Акт постановки на баланс ЕГАИС'");
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, ТипДокументаДляНемаркируемойПродукции);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "АлкогольнаяПродукция"),,
			Отказ);
			
		НомерОшибки = НомерОшибки + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
