#Область ПрограммныйИнтерфейс

// Открытие формы создания новой заявки на льготной кредит
//   Организация - СправочникСсылка.Организации - ссылка на организацию для которой нужно создать заявку.
//
Процедура ОткрытьФормуНовойЗаявкиНаЛьготныйКредит(Организация = Неопределено) Экспорт
	
	ЭлементыОтбора = Новый Структура;
	ЭлементыОтбора.Вставить("Организация", Организация);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
	
	ОткрытьФорму("Документ.ЗаявкиНаЛьготныйКредит.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодключитьОбработчикПроверкиСтатусаЛьготнойЗаявки() Экспорт
	
	Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		Интервал1 = 15;
	Иначе
		Интервал1 = 10*60*60; // 10 мин
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОЛьготныхЗаявкахГлобальная", Интервал1, Ложь);
	
	Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		Интервал2 = 5;
	Иначе
		Интервал2 = 7*60*60; // 7 мин
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОКонтактахБанкаГлобальная", Интервал2, Истина);
	
	Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		Интервал3 = 3;
	Иначе
		Интервал3 = 3*60*60; // 3 мин
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОНеправильномСтатусеГлобальная", Интервал3, Истина);
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеОКонтактахБанка() Экспорт
	
	НужноПоказать = ЛьготныеКредитыВызовСервера.НужноПоказатьПредупреждениеОКонтактахБанка();
	Если НужноПоказать Тогда
		ОткрытьФорму("Документ.ЗаявкиНаЛьготныйКредит.Форма.Предупреждение");
	КонецЕсли;
	
КонецПроцедуры

#Область ПредупреждениеОНеправильномСтатусе

Процедура ПоказатьПредупреждениеОНеправильномСтатусе() Экспорт
	
	СтатусыУжеОбновлены = ЛьготныеКредитыВызовСервера.СтатусыУжеОбновленыИзСервиса();
	Если НЕ СтатусыУжеОбновлены Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьПредупреждениеОНеправильномСтатусе_ПроверитьСостояние", 
			ЭтотОбъект); 
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.Интервал = 1;
		
		ДлительнаяОперация = ЛьготныеКредитыВызовСервера.НачатьОпределениеЗаявокВНеправильномСтатусе();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
		
	Иначе
		ПоказатьПредупреждениеОСменеОдобренныхНаОтклоненные();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеОНеправильномСтатусе_ПроверитьСостояние(ДлительнаяОперация, ВходящийКонтекст) Экспорт
	
	Если ДлительнаяОперация <> Неопределено И
		(ДлительнаяОперация.Статус = "Выполнено") Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		Если Результат.ЗаявкиВНеправильномСтатусе.Количество() > 0 Тогда
			ЛьготныеКредитыВызовСервера.ИсправитьСтатусыИЗаписатьЗаявкиСНеправильнымСтатусомВКэш(Результат.ЗаявкиВНеправильномСтатусе);
			ПоказатьПредупреждениеОСменеОдобренныхНаОтклоненные();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеОСменеОдобренныхНаОтклоненные()
	
	ЭтоСменаОдобренныхНаОтклоненные = Истина;
	ЭтоНедоставленныеВБанк = Ложь;
	
	НужноПоказать = ЛьготныеКредитыВызовСервера.НужноПоказатьПредупреждениеОНеправильномСтатусе(ЭтоСменаОдобренныхНаОтклоненные);
	Если НужноПоказать Тогда
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("ЭтоСменаОдобренныхНаОтклоненные", ЭтоСменаОдобренныхНаОтклоненные);
		ДопПараметры.Вставить("ЭтоНедоставленныеВБанк", ЭтоНедоставленныеВБанк);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьПредупреждениеОНедоставленныхВБанк", 
			ЭтотОбъект);
			
		ОткрытьФорму(
			"Документ.ЗаявкиНаЛьготныйКредит.Форма.СообщитьОСменеСтатуса", 
			ДопПараметры,
			,
			,
			,
			,
			ОписаниеОповещения);
		
	Иначе
		
		ПоказатьПредупреждениеОНедоставленныхВБанк(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеОНедоставленныхВБанк(Результат, ВходящийКонтекст) Экспорт
	
	ЭтоСменаОдобренныхНаОтклоненные = Ложь;
	ЭтоНедоставленныеВБанк = Истина;
	
	НужноПоказать = ЛьготныеКредитыВызовСервера.НужноПоказатьПредупреждениеОНеправильномСтатусе(ЭтоСменаОдобренныхНаОтклоненные);
	Если НужноПоказать Тогда
		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("ЭтоСменаОдобренныхНаОтклоненные", ЭтоСменаОдобренныхНаОтклоненные);
		ДопПараметры.Вставить("ЭтоНедоставленныеВБанк", ЭтоНедоставленныеВБанк);
		
		ОткрытьФорму("Документ.ЗаявкиНаЛьготныйКредит.Форма.СообщитьОСменеСтатуса", ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПоказатьПредупреждениеПоЗаявке(Заявки, Номер) Экспорт
	
	Заявка = Заявки[Номер];
	
	ДопПараметры = ЛьготныеКредитыКлиент.ПараметрыОткрытияФормыОтправки();
	ДопПараметры.Вставить("Заявка", Заявка);
	ДопПараметры.Вставить("ЭтоПредупреждение", Истина);
	ДопПараметры.Вставить("Заявки", Заявки);
	ДопПараметры.Вставить("Номер",  Номер);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьПредупреждениеОЛьготныхЗаявках", 
		ЭтотОбъект, 
		ДопПараметры);

	ОткрытьФормуОтправки(ОписаниеОповещения, ДопПараметры, ЭтотОбъект);
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеОЛьготныхЗаявках(Результат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	Если ВходящийКонтекст = Неопределено Тогда
		// Самый первый вызов
		Заявки = ЛьготныеКредитыВызовСервера.ЗаявкиДляПоказа();
		Номер  = 0;
	Иначе
		Заявки = ВходящийКонтекст.Заявки;
		Номер  = ВходящийКонтекст.Номер + 1;
	КонецЕсли;
	
	Если Заявки <> Неопределено И Заявки.Количество() > 0 И Номер < Заявки.Количество() Тогда
		
		ПоказатьПредупреждениеПоЗаявке(Заявки, Номер);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыОтправки() Экспорт
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Заявка",            Неопределено);
	ДопПараметры.Вставить("ЭтоОтправка",       Ложь);
	ДопПараметры.Вставить("ЭтоОбновление",     Ложь);
	ДопПараметры.Вставить("ЭтоПредупреждение", Ложь);
	
	Возврат ДопПараметры;
	
КонецФункции

Функция ОткрытьФормуОтправки(ОписаниеОповещения, Параметры, Владелец) Экспорт
	
	ОткрытьФорму("Документ.ЗаявкиНаЛьготныйКредит.Форма.ОтправкаЗаявки",
		Параметры,
		Владелец,
		,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецФункции

#Область ПолучениеБанков

Процедура ПолучитьБанки(Форма) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьБанки_ПроверитьСостояние",
		ЭтотОбъект,
		Форма); 
		
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	ДлительнаяОперация = ЛьготныеКредитыВызовСервера.НачатьПолучениеБанков();
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьБанки_ПроверитьСостояние(ДлительнаяОперация, Форма) Экспорт
	
	Если ДлительнаяОперация <> Неопределено И
		(ДлительнаяОперация.Статус = "Выполнено") Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		Если ЗначениеЗаполнено(Результат.СсылкаНаБанки) Тогда
			Форма.СсылкаНаБанки = Результат.СсылкаНаБанки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура БанкиСсылкаНажатие(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.СсылкаНаБанки) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Форма.СсылкаНаБанки);
	Иначе
		ГосСайт = "https://www.economy.gov.ru/material/news/aktualnyy_perechen_bankov_po_programme_lgotnogo_kreditovaniya_subektov_msp_po_lgotnoy_stavke_do_85_.html";
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ГосСайт);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляПодписанияМетодамиПлатформы

Процедура ПроверитьНаличиеКриптопровайдера(ВыполняемоеОповещение, ПредлагатьУстановкуРасширения, КриптопровайдерПриКонфликте = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 		ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("КриптопровайдерПриКонфликте", КриптопровайдерПриКонфликте);
	
	Оповещение 	= Новый ОписаниеОповещения(
		"ЗаполнитьСписокКриптопровайдеровЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение,,ПредлагатьУстановкуРасширения);
	
КонецПроцедуры

Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	РезультатПоиска = РезультатПоискаКриптопровайдеров(Результат, ВходящийКонтекст);
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, РезультатПоиска);
	
КонецПроцедуры

Функция РезультатПоискаКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.Свойство("КриптопровайдерПриКонфликте") Тогда
		КриптопровайдерПриКонфликте = ВходящийКонтекст.КриптопровайдерПриКонфликте;
	Иначе
		КриптопровайдерПриКонфликте = Неопределено;
	КонецЕсли;
	
	CryptoProCSPУстановлен	= Ложь;
	ViPNetCSPУстановлен 	= Ложь;
	
	Выполнено = Результат.Выполнено;
	Если Выполнено Тогда
		ЭтоLinux = ОбщегоНазначенияКлиент.ЭтоLinuxКлиент();
		ПоддерживаемыеКриптопровайдеры = КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры(, ЭтоLinux);
		ИндексКриптопровайдеров = Неопределено;
		
		Для каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(
				Криптопровайдер.Имя,
				Криптопровайдер.Тип,
				ПоддерживаемыеКриптопровайдеры,
				ИндексКриптопровайдеров);
			Если СвойстваКриптопровайдера <> Неопределено Тогда
				Если СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
					ViPNetCSPУстановлен 	= Истина;
				ИначеЕсли СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
					CryptoProCSPУстановлен 	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КриптопровайдерПриКонфликтеVipNet = НЕ ЗначениеЗаполнено(КриптопровайдерПриКонфликте)
		ИЛИ КриптопровайдерПриКонфликте = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
		
	КриптопровайдерПриКонфликтеCryptoPro = НЕ ЗначениеЗаполнено(КриптопровайдерПриКонфликте)
		ИЛИ КриптопровайдерПриКонфликте = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
	
	Результат = Новый Структура();
	Результат.Вставить("CryptoProCSPУстановлен", 	CryptoProCSPУстановлен И КриптопровайдерПриКонфликтеCryptoPro);
	Результат.Вставить("ViPNetCSPУстановлен", 		ViPNetCSPУстановлен И КриптопровайдерПриКонфликтеVipNet);
	Результат.Вставить("Выполнено", 				Выполнено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьМенеджерИСертификатКриптографии(СертификатДляПодписания, ВыполняемоеОповещение) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("СертификатДляПодписания", СертификатДляПодписания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьМенеджерИСертификатКриптографии_ПослеПопыткиУстановкиРасширенияРаботыСКриптографией", 
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ПолучитьМенеджерИСертификатКриптографии_ОбработчикОшибкиСертификата",
		ЭтотОбъект);
		
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Ложь, ОписаниеОповещения);
		
КонецПроцедуры
	

Процедура ПолучитьМенеджерИСертификатКриптографии_ПослеПопыткиУстановкиРасширенияРаботыСКриптографией(РасширениеУстановлено, ВходящийКонтекст) Экспорт
	
	Если РасширениеУстановлено = Истина Тогда
		
		// Извлекаем криптопровайдер из сертификата
		МассивИзОдного = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВходящийКонтекст.СертификатДляПодписания);
		ИнформацияОСертификате = КриптографияЭДКОСлужебныйВызовСервера.ИзвлечьИнформациюОКриптопровайдереПоСертификату(
			МассивИзОдного,
			Истина);
			
		Если ИнформацияОСертификате.Количество() > 0 Тогда
			
			СвойстваКриптопровайдера = ИнформацияОСертификате[0].Криптопровайдер;
			
			
			Если СвойстваКриптопровайдера = Неопределено Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПолучитьМенеджерИСертификатКриптографии_ЗаполнитьСписокКриптопровайдеровЗавершение", 
					ЭтотОбъект, 
					ВходящийКонтекст);
					
				ПроверитьНаличиеКриптопровайдера(ОписаниеОповещения, Истина);
				
			Иначе
				
				СвойстваКриптопровайдера = ИнформацияОСертификате[0].Криптопровайдер;
				ПолучитьМенеджерИСертификатКриптографии_НачатьИнициализацию(СвойстваКриптопровайдера, ВходящийКонтекст);
					
			КонецЕсли;
			
		Иначе
			ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(Истина, ВходящийКонтекст);
		КонецЕсли;
		
	Иначе
		
		ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(РасширениеУстановлено, ВходящийКонтекст);
			
	КонецЕсли;
		
КонецПроцедуры


Процедура ПолучитьМенеджерИСертификатКриптографии_ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	CryptoProCSPУстановлен	= Результат.CryptoProCSPУстановлен;
	ViPNetCSPУстановлен 	= Результат.ViPNetCSPУстановлен;
	
	Если CryptoProCSPУстановлен Тогда
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro();
	ИначеЕсли ViPNetCSPУстановлен Тогда
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet();
	КонецЕсли;
	
	Если Криптопровайдер = Неопределено Тогда
		ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(Ложь, ВходящийКонтекст);
		Возврат;
	КонецЕсли;
	
	ПолучитьМенеджерИСертификатКриптографии_НачатьИнициализацию(Криптопровайдер, ВходящийКонтекст);
	
КонецПроцедуры

Процедура ПолучитьМенеджерИСертификатКриптографии_НачатьИнициализацию(СвойстваКриптопровайдера, ВходящийКонтекст)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьМенеджерИСертификатКриптографии_ПослеИнициализацииМенеджераКриптографии", 
		ЭтотОбъект,
		ВходящийКонтекст,
		"ПолучитьМенеджерИСертификатКриптографии_ОбработчикОшибкиСертификата",
		ЭтотОбъект);
	
	МенеджерКриптографии = Новый МенеджерКриптографии();
	МенеджерКриптографии.НачатьИнициализацию(
		ОписаниеОповещения, 
		СвойстваКриптопровайдера.Имя,
		СвойстваКриптопровайдера.Путь,
		СвойстваКриптопровайдера.Тип);
	
КонецПроцедуры


Процедура ПолучитьМенеджерИСертификатКриптографии_ОбработчикОшибкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибки = КраткоеПредставлениеОшибки(ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке));
	ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(Ложь, ВходящийКонтекст, ТекстОшибки);
	
КонецПроцедуры


Процедура ПолучитьМенеджерИСертификатКриптографии_ПослеИнициализацииМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Неопределено);
		ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(Ложь, ВходящийКонтекст);
		
	Иначе
		
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат);
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучитьМенеджерИСертификатКриптографии_ПослеЭкспортаСертификатаВФайл",
			ЭтотОбъект,
			ВходящийКонтекст);
			
		КриптографияЭДКОКлиент.ЭкспортироватьСертификатВФайл(
			ОписаниеОповещения, 
			ВходящийКонтекст.СертификатДляПодписания, 
			, 
			Ложь);
			
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучитьМенеджерИСертификатКриптографии_ПослеЭкспортаСертификатаВФайл(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучитьМенеджерИСертификатКриптографии_ПослеИнициализацииСертификата", 
			ЭтотОбъект,
			ВходящийКонтекст,
			"ПолучитьМенеджерИСертификатКриптографии_ОбработчикОшибкиСертификата",
			ЭтотОбъект);
			
		СертификатКриптографии = Новый СертификатКриптографии;
		СертификатКриптографии.НачатьИнициализацию(ОписаниеОповещения, Результат.ИмяФайлаСертификата); 
		
	Иначе
		ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(Ложь, ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучитьМенеджерИСертификатКриптографии_ПослеИнициализацииСертификата(РезультатИнициализации, ВходящийКонтекст) Экспорт
	
	Если РезультатИнициализации <> Неопределено Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("СертификатКриптографии", 	РезультатИнициализации);
		Результат.Вставить("МенеджерКриптографии", 		ВходящийКонтекст.МенеджерКриптографии);
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Результат);
		
	Иначе
		ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(Ложь, ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучитьМенеджерИСертификатКриптографии_СообщитьОНеготовностиМенеджераКриптографии(РасширениеУстановлено, ВходящийКонтекст, ТекстОшибки = "")
	
	//   РасширениеУстановлено
	//       * Истина - Пользователь подтвердил установку, после установки расширение было успешно подключено.
	//       * Ложь   - Пользователь подтвердил установку, однако после установки расширение не удалось подключить.
	//       * Неопределено - Пользователь отказался от установки.

	Результат = Новый Структура();
	Результат.Вставить("Выполнено",      РасширениеУстановлено);
	Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Результат);

КонецПроцедуры

#КонецОбласти


#КонецОбласти

