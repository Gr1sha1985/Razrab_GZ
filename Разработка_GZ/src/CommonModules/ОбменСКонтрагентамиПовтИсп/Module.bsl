

////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПовтИсп: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Получает актуальные виды электронных документов.
//
// Параметры:
//  Направление - ПеречислениеСсылка.ВидыЭД - направление, по которому необходимо получить
//		актуальные виды электронных документов.
//
// Возвращаемое значение:
//  ФиксированноеСоответствие - виды актуальных ЭД, ключ - вид электронного документа,
// значение - его свойства, см. ОбменСКонтрагентамиСлужебный.НовыеСвойстваЭД.
//
Функция ПолучитьАктуальныеВидыЭД(Направление = Неопределено) Экспорт
	
	АктуальныеВидыЭД = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ИспользуемыеВидыЭлектронныхДокументов(АктуальныеВидыЭД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктуальныеВидыЭД) Тогда
		ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.Подтверждение);
		ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ИзвещениеОПолучении);
		ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.УведомлениеОбУточнении);
		ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ПредложениеОбАннулировании);
	КонецЕсли;
	
	ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	Если ЗначениеЗаполнено(ОбменСКонтрагентамиСлужебный.ПрикладныеВидыЭлектронныхДокументов()) Тогда
		ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ПрикладнойЭД);
	КонецЕсли;
	
	Если Направление = Неопределено Тогда
		ОтфильтрованныеВидыЭД = АктуальныеВидыЭД;
	Иначе 
		ОтфильтрованныеВидыЭД = Новый Соответствие;
		Для каждого КлючИЗначение Из АктуальныеВидыЭД Цикл
			Если ОбменСКонтрагентамиСлужебный.ВидЭДИспользуетсяПоНаправлению(КлючИЗначение.Ключ, Направление, АктуальныеВидыЭД) Тогда
				ОтфильтрованныеВидыЭД.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(ОтфильтрованныеВидыЭД);
	
КонецФункции

// Формирует таблицу сведений о форматах электронных документов.
// Сведения получаются из сервиса настроек 1С:ЭДО 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок указаны в макете Обработки.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
//
Функция СведенияОФорматахЭлектронныхДокументов() Экспорт

	Результат = Новый ТаблицаЗначений;
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	ФорматыЭлектронныхДокументов.Формат КАК ИдентификаторФормата,
		|	ФорматыЭлектронныхДокументов.Представление КАК ПредставлениеФормата,
		|	КОНЕЦПЕРИОДА(ФорматыЭлектронныхДокументов.ДатаОкончанияДействия, ДЕНЬ) < &ТекущаяДата
		|		И ФорматыЭлектронныхДокументов.ДатаОкончанияДействия <> &ПустаяДата КАК Отключен,
		|	ФорматыЭлектронныхДокументов.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ФорматыЭлектронныхДокументов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ФорматыЭлектронныхДокументов.Регламентированный КАК Регламентированный,
		|	ФорматыЭлектронныхДокументов.ПриказОВведенииФормата КАК ПриказОВведенииФормата,
		|	ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата КАК СсылкаНаПриказОВведенииФормата,
		|	ФорматыЭлектронныхДокументов.ЭтоУПД КАК ВозможноИспользованиеУПД,
		|	СвязьВидовИФорматовЭД.Приоритет КАК Приоритет,
		|	ФорматыЭлектронныхДокументов.ПространстваИмен КАК ХранилищеПространстваИмен,
		|	ФорматыЭлектронныхДокументов.ТекстПредупрежденияДляВходящегоДокумента КАК ТекстПредупрежденияДляВходящегоДокумента,
		|	ФорматыЭлектронныхДокументов.ПараметрыПредупрежденияДляВходящегоДокумента КАК ПараметрыПредупрежденияДляВходящегоДокумента,
		|	ФорматыЭлектронныхДокументов.УсловиеВыводаПредупреждения КАК УсловиеВыводаПредупреждения
		|ИЗ
		|	РегистрСведений.СвязьВидовИФорматовЭД КАК СвязьВидовИФорматовЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО СвязьВидовИФорматовЭД.ФорматЭлектронногоДокумента = ФорматыЭлектронныхДокументов.Формат
		|ГДЕ
		|	ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидЭлектронногоДокумента,
		|	Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПустаяДата" , Дата(1, 1, 1));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Колонки.Добавить("ПрикладнойВидЭД" , Метаданные.ОпределяемыеТипы.ПрикладныеВидыЭлектронныхДокументов.Тип);
	Результат.Колонки.Добавить("ПространстваИмен", Новый ОписаниеТипов("Массив"));
	
	ТаблицаПрикладныхФорматов = ОбменСКонтрагентамиСлужебный.ПрикладныеФорматыЭлектронныхДокументов();
	Если ТаблицаПрикладныхФорматов.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрикладныхФорматов, Результат);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Результат Цикл 
		
		СтрокаТЧ.ПространстваИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			СтрокаТЧ.ХранилищеПространстваИмен, ",", Истина, Истина);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает пустую ссылку на справочник.
//
// Параметры:
//  ИмяСправочника - Строка - название справочника.
//
// Возвращаемое значение:
//  Ссылка - пустая ссылка на справочник.
//
Функция ПолучитьПустуюСсылку(ИмяСправочника) Экспорт
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ИмяСправочника);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Результат = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  ИмяПеречисления - Строка - наименование перечисления.
//  ПредставлениеПеречисления - Строка - наименование значения перечисления.
//
// Возвращаемое значение:
//  ПеречислениеСсылка - значение искомого перечисления.
//
Функция НайтиПеречисление(Знач ИмяПеречисления, ПредставлениеПеречисления) Экспорт
	
	НайденноеЗначение = Неопределено;
	
	СоответствиеПеречислений = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьСоответствиеПеречислений(СоответствиеПеречислений);
	
	ИмяПрикладногоПеречисления = СоответствиеПеречислений.Получить(ИмяПеречисления);
	Если ИмяПрикладногоПеречисления = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = НСтр("ru = 'В коде прикладного решения необходимо указать соответствие для перечисления %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяПеречисления);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения,
			"ОбменСКонтрагентами", УровеньЖурналаРегистрации.Предупреждение);
	ИначеЕсли ЗначениеЗаполнено(ИмяПрикладногоПеречисления) Тогда // задано какое-то значение
		ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначениеПеречисления(
			ИмяПрикладногоПеречисления, ПредставлениеПеречисления, НайденноеЗначение);
		Если НайденноеЗначение = Неопределено Тогда
			Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПрикладногоПеречисления].ЗначенияПеречисления Цикл
				Если ВРег(ЭлПеречисления.Синоним) = ВРег(ПредставлениеПеречисления)
					ИЛИ ВРег(ЭлПеречисления.Имя) = ВРег(ПредставлениеПеречисления) Тогда
					НайденноеЗначение = Перечисления[ИмяПрикладногоПеречисления][ЭлПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Функция возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Возвращаемое значение:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Функция ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Экспорт

	ИспользуетсяСправочникПартнеры = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры);
	
	Возврат ИспользуетсяСправочникПартнеры;
	
КонецФункции

Функция ИспользуютсяДоговорыКонтрагентов() Экспорт

	ЕстьСсылочныйТип = Ложь;
	ТипыСущностиДоговор = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип.Типы();
	
	Для Каждого ТипСущности Из ТипыСущностиДоговор Цикл
		Если ОбщегоНазначения.ЭтоСсылка(ТипСущности) Тогда
			ЕстьСсылочныйТип = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьСсылочныйТип;

КонецФункции

// Функция возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Возвращаемое значение:
//  Булево - флаг использования в библиотеке справочника "Характеристики номенклатуры".
//
Функция ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры() Экспорт

	ИспользуетсяСправочникХарактеристикиНоменклатуры = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры);
	
	Возврат ИспользуетсяСправочникХарактеристикиНоменклатуры;
	
КонецФункции

// Функция возвращает признак использования справочника "Упаковки номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Возвращаемое значение:
//  Булево - флаг использования в библиотеке справочника "Упаковки номенклатуры".
//
Функция ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры() Экспорт

	ИспользуетсяСправочникУпаковкиНоменклатуры = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры);
	
	Возврат ИспользуетсяСправочникУпаковкиНоменклатуры;
	
КонецФункции

// Функция возвращает соответствующее переданному параметру значение ставки НДС.
// Если в функцию передан параметр ПредставлениеБЭД, то функция вернет ПрикладноеЗначение ставки НДС и наоборот.
//
// Параметры:
//   ПредставлениеБЭД - Строка - строковое представление ставки НДС.
//   ПрикладноеЗначение - ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - прикладное представление
//     соответствующего значения ставки НДС.
//
// Возвращаемое значение:
//   Строка, ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - соответствующее представление ставки НДС.
//
Функция СтавкаНДСИзСоответствия(ПредставлениеБЭД = "", ПрикладноеЗначение = Неопределено) Экспорт
	
	Соответствие = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(Соответствие);
	Значение = Неопределено;
	Если ЗначениеЗаполнено(ПредставлениеБЭД) Тогда
		Значение = Соответствие.Получить(ПредставлениеБЭД);
	Иначе
		Для Каждого КлючИЗначение Из Соответствие Цикл
			Если КлючИЗначение.Значение = ПрикладноеЗначение Тогда
				Значение = КлючИЗначение.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Функция возвращает соответствующее переданному параметру значение ставки НДС.
//
// Параметры:
//   СтавкаНДС - ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - прикладное представление
//               соответствующего значения ставки НДС.
//
// Возвращаемое значение:
//   Строка, ПеречислениеСсылка.СтавкиНДС, СправочникСсылка.СтавкиНДС - соответствующее представление ставки НДС.
//
Функция СтавкаНДСПеречисление(СтавкаНДС) Экспорт
	
	Соответствие = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(Соответствие);
	
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если КлючИЗначение.Значение = СтавкаНДС Тогда
			Значение = КлючИЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Значение = "0" Или Значение = "10" Или Значение = "18" ИЛИ Значение = "20" Тогда
		Значение = Значение + "%";
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Функция преобразует из представления ставки НДС в значение перечисления.
//
// Параметры:
//  ПредставлениеСтавкиНДС - Число, Строка - представление ставки НДС;
//
// Возвращаемое значение:
//   ПеречислениеСсылка, СправочникСсылка, Неопределено - значение ставки НДС прикладного решения.
//
Функция СтавкаНДСИзПредставления(ПредставлениеСтавкиНДС) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(ПредставлениеСтавкиНДС) = Тип("Строка") Тогда
		СтрСтавкаНДС = СокрЛП(ПредставлениеСтавкиНДС);
	ИначеЕсли ТипЗнч(ПредставлениеСтавкиНДС) = Тип("Число") Тогда
		СтрСтавкаНДС = Строка(ПредставлениеСтавкиНДС);
	Иначе // неправильный тип
		СтрСтавкаНДС = Неопределено;
	КонецЕсли;
	
	Если СтрСтавкаНДС = Неопределено ИЛИ СтрНайти(НСтр("ru ='БЕЗ НДС'"), ВРег(СтрСтавкаНДС)) > 0 Тогда
		ЗначениеНДС = НСтр("ru ='без НДС'");
	Иначе
		СтрСтавкаНДС = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрСтавкаНДС, ",", "."), "\", "/"), " ", ""), "%", "");
		// # - разделитель представлений ставок.
		Если СтрНайти("0", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "0";
		ИначеЕсли СтрНайти("10#0.1#0.10", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "10";
		ИначеЕсли СтрНайти("18#0.18", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "18";
		ИначеЕсли СтрНайти("20#0.2#0.20", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "20";
		ИначеЕсли СтрНайти("10/110#0.0909#9.0909", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "10/110";
		ИначеЕсли СтрНайти("18/118#0.1525#15.2542", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "18/118";
		ИначеЕсли СтрНайти("20/120#0.1667#16.6667", СтрСтавкаНДС) > 0 Тогда
			ЗначениеНДС = "20/120";
		Иначе
			ЗначениеНДС = ПредставлениеСтавкиНДС;
		КонецЕсли;
	КонецЕсли;
	
	СтавкаНДС = СтавкаНДСИзСоответствия(ЗначениеНДС);
	
	Возврат СтавкаНДС;
	
КонецФункции

// Возвращает КНД, соответствующий переданному в параметре Виду ЭД.
//
// Параметры:
//  СвойстваДокумента - Структура - Свойства электронного документа, вида:
//    * ВидЭД               - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//    * ТипЭлементаВерсииЭД - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип элемента комплекта электронных документов.
//    * Подтверждение       - Булево - Признак подтверждения.
//
// Возвращаемое значение:
//  Строка, Неопределено - соответствующий переданному виду ЭД КНД, Неопределено, если для переданного 
//                         вида ЭД не указано соответствие КНД.
//
Функция КНДПоВидуЭД(СвойстваДокумента) Экспорт
	
	ВидЭД = СвойстваДокумента.ВидЭД;
	ТипЭлементаВерсииЭД = СвойстваДокумента.ТипЭлементаВерсииЭД;
	
	Подтверждение = Ложь;
	Если СвойстваДокумента.Свойство("Подтверждение") Тогда
		Подтверждение = Истина;
	КонецЕсли;
	ИмяФайла = "";
	Если СвойстваДокумента.Свойство("ИмяФайла") Тогда
		ИмяФайла = СвойстваДокумента.ИмяФайла;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.УПД Тогда
		
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			КНД = "1115101";
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NSCHFDOPPR") > 0 Тогда
			КНД = "1115131";
			Если Подтверждение Тогда
				КНД = "1115132";
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NSCHFDOPPOK") > 0 Тогда
			КНД = "1115132";
		Иначе
			КНД = "1115125";
			Если Подтверждение Тогда
				КНД = "1115126";
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.УКД Тогда
		
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			КНД = "1115108";
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPR") > 0 Тогда
			КНД = "1115133";
			Если Подтверждение Тогда
				КНД = "1115134";
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPOK") > 0 Тогда
			КНД = "1115134";
		Иначе
			КНД = "1115127";
			Если Подтверждение Тогда
				КНД = "1115128";
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			КНД = "1175004";
			Если Подтверждение Тогда
				КНД = "1175005";
			КонецЕсли;
			
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
			Если СтрНайти(ИмяФайла, "ON_NSCHFDOPPR") > 0 Тогда
				КНД = "1115131";
				Если Подтверждение Тогда
					КНД = "1115132";
				КонецЕсли;
			ИначеЕсли СтрНайти(ИмяФайла, "ON_NSCHFDOPPOK") > 0 Тогда
				КНД = "1115132";
			Иначе
				КНД = "1115125";
				Если Подтверждение Тогда
					КНД = "1115126";
				КонецЕсли;
			КонецЕсли;
		Иначе
			КНД = "1175010";
			Если Подтверждение Тогда
				КНД = "1175011";
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			КНД = "1175006";
			Если Подтверждение Тогда
				КНД = "1175007";
			КонецЕсли;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
			Если Найти(ИмяФайла, "ON_NSCHFDOPPR") > 0 Тогда
				КНД = "1115131";
				Если Подтверждение Тогда
					КНД = "1115132";
				КонецЕсли;
			ИначеЕсли Найти(ИмяФайла, "ON_NSCHFDOPPOK") > 0 Тогда
				КНД = "1115132";
			Иначе
				КНД = "1115125";
				Если Подтверждение Тогда
					КНД = "1115126";
				КонецЕсли;
			КонецЕсли;
		Иначе
			КНД = "1175012";
			Если Подтверждение Тогда
				КНД = "1175013";
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель 
		И ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
		Если СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPR") > 0 Тогда
			КНД = "1115133";
			Если Подтверждение Тогда
				КНД = "1115134";
			КонецЕсли;
		ИначеЕсли СтрНайти(ИмяФайла, "ON_NKORSCHFDOPPOK") > 0 Тогда
			КНД = "1115134";
		Иначе
			КНД = "1115127";
			Если Подтверждение Тогда
				КНД = "1115128";
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		
		КНД = "1175014";
		
	КонецЕсли;
	
	Возврат КНД;
	
КонецФункции

// Возвращает представление документа ИБ для вида электронного документа.
//
// Параметры:
//  ВидЭД - перечисление - вид электронного документа.
//
// Возвращаемое значение:
//  ПредставлениеОснования - строковое имя документа информационной базы, на основании которого формируется исходящий ЭД.
//
Функция ПредставлениеОснованияДляВидаЭД(ВидЭД) Экспорт
	
	АктуальныеВидыЭД = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД);
	
	СоответствиеВидовЭДДокументамИБ = Новый Соответствие;
	Для каждого КлючИЗначение Из АктуальныеВидыЭД Цикл
		ЭлементВидЭД = КлючИЗначение.Ключ;
		Если ЭлементВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И ЭлементВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И ЭлементВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И ЭлементВидЭД <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
			И ЭлементВидЭД <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			И ЭлементВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
			СоответствиеВидовЭДДокументамИБ.Вставить(ЭлементВидЭД, "");
		КонецЕсли;
	КонецЦикла;
	
	ОбменСКонтрагентамиПереопределяемый.СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ПредставлениеИсходящихВидовЭлектронныхДокументов(СоответствиеВидовЭДДокументамИБ);
	КонецЕсли;
	
	СоответствиеПрикладныхВидов = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСоответствияИсходящихПрикладныхВидовДокументамУчета(СоответствиеПрикладныхВидов);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		СоответствиеВидовЭДДокументамИБ, СоответствиеПрикладныхВидов, Ложь);
	
	// Электронное взаимодействие
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ПроизвольныйЭД, НСтр("ru = 'Исходящий произвольный документ'"));
	
	ПредставлениеОснования = СоответствиеВидовЭДДокументамИБ.Получить(ВидЭД);
	Если ПредставлениеОснования = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = НСтр("ru = 'В переопределяемом модуле прикладного решения необходимо указать представление документаИБ(основания) и хоз. операции для вида ЭД %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВидЭД);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, "ЭлектронноеВзаимодействие", УровеньЖурналаРегистрации.Предупреждение);
	КонецЕсли;
	
	Возврат ПредставлениеОснования;
	
КонецФункции

// См. ОбменСКонтрагентамиСлужебный.НастройкиОбменаСКонтрагентами
//
Функция НастройкиОбменаСКонтрагентами() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИспользоватьОзнакомлениеСЭД", 
		Константы.ИспользоватьОзнакомлениеСЭлектроннымиДокументами.Получить());
	Настройки.Вставить("ИспользоватьОтложеннуюОтправкуЭД", 
		Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Получить());
		
	Возврат Новый ФиксированнаяСтруктура(Настройки);
	
КонецФункции

// Формирует таблицу сведений о форматах электронных документов.
// Сведения задаются в макете Обработки.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок указаны в макете Обработки.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
//
Функция СведенияОФорматахЭлектронныхДокументовИзМакета() Экспорт

	Результат = Новый ТаблицаЗначений;
	УстановитьПривилегированныйРежим(Истина);
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ВерсииФорматовЭлектронныхДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	ОбрабатываемыеСсылочныеТипы = Новый Массив;
	ОбрабатываемыеСсылочныеТипы.Добавить("Перечисления");
	ОбрабатываемыеСсылочныеТипы.Добавить("ПланыВидовХарактеристик");
	ОбрабатываемыеСсылочныеТипы.Добавить("Справочники");
	
	// Получим колонки таблицы форматов
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	Для Сч = 1 По ОбластьШапки.ШиринаТаблицы Цикл
		ИмяКолонки = ОбластьШапки.Область(1, Сч).Текст;
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			ПредставлениеТипаКолонки = ОбластьШапки.Область(2, Сч).Текст;
			ТипКолонки = Новый ОписаниеТипов(ПредставлениеТипаКолонки);
			Если ИмяКолонки = "ВидЭлектронногоДокумента" Тогда
				ТипКолонки = Новый ОписаниеТипов(ТипКолонки,
					Метаданные.ОпределяемыеТипы.ПрикладныеВидыЭлектронныхДокументов.Тип.Типы());
			КонецЕсли;
			
			Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним строки
	ОбластьСтрок = Макет.ПолучитьОбласть("Строки");
	Для НомерСтроки = 1 По ОбластьСтрок.ВысотаТаблицы Цикл
		Если ЗначениеЗаполнено(ОбластьСтрок.Область(НомерСтроки, 1).Текст) Тогда
			НоваяСтрока = Результат.Добавить();
			
			Для НомерКолонки = 1 По Результат.Колонки.Количество() Цикл
				Колонка = Результат.Колонки[НомерКолонки - 1];
				
				ТекстЯчейки = СокрЛП(ОбластьСтрок.Область(НомерСтроки, НомерКолонки).Текст);
				
				Если Колонка.Имя = "ВидЭлектронногоДокумента" Тогда
					ТипЗначения = Тип("ПеречислениеСсылка.ВидыЭД");
				Иначе
					ТипЗначения = Колонка.ТипЗначения.Типы()[0];
				КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗначения);
					ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
					ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъекта);
					
					Если ОбрабатываемыеСсылочныеТипы.Найти(ИмяБазовогоТипа) <> Неопределено Тогда
						МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
						ЗначениеЯчейки = МенеджерОбъекта[ТекстЯчейки];
					Иначе
						ШаблонОшибки = НСтр("ru='В макете %1 использован неподдерживаемый ссылочный тип (%2)'");
						СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, 
							Метаданные.Обработки.ОбменСКонтрагентами.Макеты.ВерсииФорматовЭлектронныхДокументов.Синоним, ПолноеИмяОбъекта);
						ВызватьИсключение СтрокаОшибки;
					КонецЕсли;
				Иначе	
					Если ТипЗначения = Тип("Дата") И ЗначениеЗаполнено(ТекстЯчейки) Тогда
						ЗначениеЯчейки = ОбменСКонтрагентамиВнутренний.ДатаИзСтроки(ТекстЯчейки);
					ИначеЕсли ТипЗначения = Тип("Массив") И ЗначениеЗаполнено(ТекстЯчейки) Тогда
						ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЯчейки, ",", Истина, Истина);
					Иначе
						ЗначениеЯчейки = Колонка.ТипЗначения.ПривестиЗначение(ТекстЯчейки);
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока[Колонка.Имя] = ЗначениеЯчейки;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПрикладныхФорматов = ОбменСКонтрагентамиСлужебный.ПрикладныеФорматыЭлектронныхДокументов();
	Если ТаблицаПрикладныхФорматов.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПрикладныхФорматов, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу сведений об операторах ЭДО.
// Сведения задаются в макете Обработки.ОбменСКонтрагентами.ОператорыЭДО.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок указаны в макете Обработки.ОбменСКонтрагентами.ОператорыЭДО.
//
Функция СведенияОбОператорахЭДО() Экспорт

	Результат = Новый ТаблицаЗначений;
	УстановитьПривилегированныйРежим(Истина);
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("ОператорыЭДО");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	УстановитьПривилегированныйРежим(Ложь);
	ОбрабатываемыеСсылочныеТипы = Новый Массив;
	ОбрабатываемыеСсылочныеТипы.Добавить("Перечисления");
	
	// Получим колонки таблицы форматов
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	Для Сч = 1 По ОбластьШапки.ШиринаТаблицы Цикл
		ИмяКолонки = ОбластьШапки.Область(1, Сч).Текст;
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			ПредставлениеТипаКолонки = ОбластьШапки.Область(2, Сч).Текст;
			ТипКолонки = Новый ОписаниеТипов(ПредставлениеТипаКолонки);
			
			Результат.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним строки
	ОбластьСтрок = Макет.ПолучитьОбласть("Строки");
	Для НомерСтроки = 1 По ОбластьСтрок.ВысотаТаблицы Цикл
		Если ЗначениеЗаполнено(ОбластьСтрок.Область(НомерСтроки, 1).Текст) Тогда
			НоваяСтрока = Результат.Добавить();
			
			Для НомерКолонки = 1 По Результат.Колонки.Количество() Цикл
				Колонка = Результат.Колонки[НомерКолонки - 1];
				
				ТекстЯчейки = СокрЛП(ОбластьСтрок.Область(НомерСтроки, НомерКолонки).Текст);
				
				Если Колонка.Имя = "СпособОбменаЭД" Тогда
					ТипЗначения = Тип("ПеречислениеСсылка.СпособыОбменаЭД");
				Иначе
					ТипЗначения = Колонка.ТипЗначения.Типы()[0];
				КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
					МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗначения);
					ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
					ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъекта);
					
					Если ОбрабатываемыеСсылочныеТипы.Найти(ИмяБазовогоТипа) <> Неопределено И Не ПустаяСтрока(ТекстЯчейки) Тогда
						МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
						ЗначениеЯчейки = МенеджерОбъекта[ТекстЯчейки];
					ИначеЕсли Не ПустаяСтрока(ТекстЯчейки) Тогда
						ШаблонОшибки = НСтр("ru='В макете %1 использован неподдерживаемый ссылочный тип (%2)'");
						СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, 
							Метаданные.Обработки.ОбменСКонтрагентами.Макеты.ВерсииФорматовЭлектронныхДокументов.Синоним, ПолноеИмяОбъекта);
						ВызватьИсключение СтрокаОшибки;
					КонецЕсли;
				Иначе
					Если ТипЗначения = Тип("Массив") И ЗначениеЗаполнено(ТекстЯчейки) Тогда
						ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЯчейки, ",", Истина, Истина);
					Иначе
						ЗначениеЯчейки = Колонка.ТипЗначения.ПривестиЗначение(ТекстЯчейки);
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока[Колонка.Имя] = ЗначениеЯчейки;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// См. ОбменСКонтрагентамиВнутренний.ПолучитьСоединение
//
Функция ПолучитьСоединение(СпособОбменаЭД, Таймаут = 30, НоваяВерсияАПИСервиса1СЭДО = Ложь) Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		НастройкиСервисаЭДО = ОбменСКонтрагентамиВнутренний.СтруктураНастроекТакском();
	
	ИначеЕсли СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		НастройкиСервисаЭДО = ОбменСКонтрагентамиВнутренний.СтруктураНастроек1СЭДО(НоваяВерсияАПИСервиса1СЭДО);
		
	Иначе
		НастройкиСервисаЭДО = ОбменСКонтрагентамиВнутренний.СтруктураНастроекСервисаНастроек1С();
	
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(
		НастройкиСервисаЭДО.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронноеВзаимодействиеСлужебный.СформироватьПрокси(Протокол);
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

// Возвращает массив всех видов электронных документов.
// 
// Возвращаемое значение:
// Массив - все виды электронных документов.
//
Функция ВсеВидыЭД() Экспорт
	
	ВидыЭД = Новый Массив;
	
	ПропускаемыеВиды = Новый Массив;
	ПропускаемыеВиды.Добавить(Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления.Внутренний);
	
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления Цикл
		Если Не СтрНачинаетсяС(НРег(ЗначениеПеречисления.Имя), "удалить") И ПропускаемыеВиды.Найти(ЗначениеПеречисления) = Неопределено Тогда
			ВидыЭД.Добавить(Перечисления.ВидыЭД[ЗначениеПеречисления.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЭД;
	
КонецФункции

#КонецОбласти
