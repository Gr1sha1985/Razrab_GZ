////////////////////////////////////////////////////////////////////////////////
// РАЗРЕЗЫ УЧЕТА

// Возвращает разрезы, в которых ведется бухгалтерский учет
//
// Возвращаемое значение:
//  Структура. Ключ - имя разреза, значение - его тип.
//
Функция РазрезыУчета() Экспорт
	
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	
	РазрезыУчета = Новый Структура;
	РазрезыУчета.Вставить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РазрезыУчета.Вставить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	РазрезыУчета.Вставить("Субконто1",     ОписаниеТиповСубконто);
	РазрезыУчета.Вставить("Субконто2",     ОписаниеТиповСубконто);
	РазрезыУчета.Вставить("Субконто3",     ОписаниеТиповСубконто);
	
	Возврат РазрезыУчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СПИСКИ СЧЕТОВ УЧЕТА ЗАТРАТ

// Возвращает предопределенные счета учета запасов, оценка стоимости которых выполняется в ходе закрытия месяца
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаЗапасов() Экспорт
	
	// Счета учета, образующие раздел учета Запасы
	СчетаЗапасов = Новый Массив;
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);              // 07
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // 08.04.1
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Материалы);                           // 10.* (есть исключения)
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);                       // 21
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.Товары);                              // 41.* (есть исключения)
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);                    // 43
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);                   // 45
	СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);    // 20.02
	
	Возврат СчетаЗапасов;
	
КонецФункции

// Возвращает предопределенные счета-группы учета расходов на производство, закрываемые автоматически.
// Подчиненные счета могут содержать счета-исключения
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаРасходов() Экспорт
	
	СчетаРасходов = Новый Массив();
	
	СчетаПрямыхРасходов = ПредопределенныеСчетаПрямыхРасходов();
	Для Каждого Счет Из СчетаПрямыхРасходов Цикл
		СчетаРасходов.Добавить(Счет);
	КонецЦикла;
	
	СчетаКосвенныхРасходов = ПредопределенныеСчетаКосвенныхРасходов();
	Для Каждого Счет Из СчетаКосвенныхРасходов Цикл
		СчетаРасходов.Добавить(Счет);
	КонецЦикла;
	
	Возврат СчетаРасходов;

КонецФункции

// Возвращает предопределенные счета учета расходов основного, вспомогательного и обслуживающего производства, закрываемые автоматически
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаПрямыхРасходов() Экспорт
	
	СчетаРасходов = Новый Массив();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаРасходов, УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаРасходов, УчетЗатрат.ПредопределенныеСчетаОбслуживающиеПроизводства());
	РасширеннаяАналитикаЗатрат.ДобавитьСчетБракВПроизводстве(СчетаРасходов);
	
	Возврат СчетаРасходов;
	
КонецФункции

// Возвращает предопределенные счета учета расходов основного и вспомогательного производства, закрываемые автоматически
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеКалькуляционныеСчета() Экспорт
	
	СчетаРасходов = Новый Массив();
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_); // 20.*, есть исключения
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	Возврат СчетаРасходов;
	
КонецФункции

// Возвращает предопределенные счета учета расходов обслуживающего производства, закрываемые автоматически
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаОбслуживающиеПроизводства() Экспорт
	
	СчетаРасходов = Новый Массив();
	РасходыОбслуживающихПроизводств.ДобавитьСчетОбслуживающиеПроизводства(СчетаРасходов);
	
	Возврат СчетаРасходов;
	
КонецФункции

// Возвращает предопределенные счета учета общепроизводственных и общехозяйственных расходов, закрываемые автоматически
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаКосвенныхРасходов() Экспорт
	
	СчетаРасходов = Новый Массив();
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Возврат СчетаРасходов;
	
КонецФункции

// Возвращает предопределенные счета учета расходов на продажу, закрываемые автоматически
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаРасходовНаПродажу() Экспорт
	
	СчетаРасходов = Новый Массив;
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	
	Возврат СчетаРасходов;
	
КонецФункции

// Возвращает счета учета расходов на производство и продажу, закрываемые автоматически
//
// Параметры:
//  ПредопределенныеСчета - Массив, ФиксированныйМассив - перечень предопределенных счетов,
//                          результат функций вида ПредопределенныеСчетаРасходов(),
//                          ПредопределенныеСчетаРасходовНаПродажу()
// 
// Возвращаемое значение:
//  ФиксированныйМассив - значения типа ПланСчетовСсылка.Хозрасчетный
//
Функция СчетаРасходов(ПредопределенныеСчета) Экспорт
	
	СчетаРасходов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПредопределенныеСчета", ПредопределенныеСчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ПредопределенныеСчета)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетаРасходов.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(СчетаРасходов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ТИПЫ

// Возвращает тип идентификатора, за которым можно скрыть набор значений аналитики учета
// Значение -1 - служебное, см. ИдентификаторВершиныНеопределено()
//
Функция ТипИдентификатораВершины() Экспорт
	
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Любой);
	
КонецФункции

// Возвращает служебное значение идентификатора (порядкового номера), обозначающего неопределенное (не заполненное) значение.
// Такое значение - меньше нуля.
// 
Функция ИдентификаторВершиныНеопределено() Экспорт
	
	Возврат -1;
	
КонецФункции

#Область АналитикаЗатрат

// Методы этой области работают с коллекцией АналитикаЗатрат, описывающей некоторое состояние затрат и включающей счет учета, субконто, другие измерения.
// Другими словами АналитикаЗатрат - это набор значений (свойств), характеризующих затрату.
//
// Ключи этой коллекции - вид аналитики затрат, разрезы учета.
// Допустимые значения:
//  - Тип("ПланСчетовСсылка.Хозрасчетный") - указывает на то, что эта аналитика - счет учета
//  - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - вид субконто
//  - Строка - имя измерения, "Подразделения".
//
// Значения этой коллекции - значения каждого из разрезов учета (видов аналитики затрат).
// Эти значения можно назвать свойствами аналитики затрат.
// Тип определяется видом аналитики затрат (ключем коллекции) - см. ТипЗначенияАналитикиЗатрат()

// Определяет тип значения аналитики затрат по виду аналитики
//
// Параметры:
//  ВидАналитики - Тип, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные, Строка - см. комментарий к области АналитикаЗатрат
// 
// Возвращаемое значение:
//  ОписаниеТипов - типы, допустимые для значений этого разреза учета
//
Функция ТипЗначенияАналитикиЗатрат(ВидАналитики) Экспорт
	
	Если ВидАналитики = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Возврат Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидАналитики));
	ИначеЕсли ТипЗнч(ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
		Возврат ВидАналитики.ТипЗначения;
	ИначеЕсли ВидАналитики = "Подразделения" Тогда
		Возврат Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СправочникСсылка.ПодразделенияОрганизаций"));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Определяет значение одного из свойств аналитики затрат.
//
// Параметры:
//  АналитикаЗатрат - Соответствие - набор значений, характеризующих затрату, см. комментарий к области АналитикаЗатрат
//  ВидАналитики - Тип, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные, Строка - запрашиваемый вид аналитики затрат,
//                                                                               см. комментарий к области АналитикаЗатрат
// 
// Возвращаемое значение:
//  Ссылка - значение аналитики, тип см. в ТипЗначенияАналитикиЗатрат.
//
Функция ЗначениеАналитикиЗатрат(АналитикаЗатрат, ВидАналитики) Экспорт
	
	ТипЗначения = ТипЗначенияАналитикиЗатрат(ВидАналитики);
	
	Если ТипЗначения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТипЗначения.ПривестиЗначение(АналитикаЗатрат[ВидАналитики]);
	
КонецФункции

// Дополняет аналитику затрат значениями, которые пока не отображаются пользователю,
// но должны быть записаны в информационную базу, так как могут понадобиться
// (будут отображаться) после добавления записей в НСИ.
//
// Параметры:
//  АналитикаЗатрат - Соответствие - набор значений, характеризующих затрату, см. комментарий к области АналитикаЗатрат
// 
// Возвращаемое значение:
//  АналитикаЗатрат - набор значений, характеризующих затрату, дополненный значениями, не отображаемыми пользователю
//
Функция АналитикаЗатратДляЗаписи(АналитикаЗатрат) Экспорт
	
	АналитикаЗатратДляЗаписи = ОбщегоНазначения.СкопироватьРекурсивно(АналитикаЗатрат);
	ДополнитьАналитикуЗатратНоменклатурнойГруппой(АналитикаЗатратДляЗаписи);
	
	Возврат АналитикаЗатратДляЗаписи;
	
КонецФункции

Процедура ДополнитьАналитикуЗатратНоменклатурнойГруппой(АналитикаЗатрат)
	
	Если Не БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу() Тогда
		// Если пользователь управляет этим разрезом аналитики, то дополнять ничего не требуется.
		Возврат;
	КонецЕсли;
	
	АналитикаЗатрат.Вставить(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы,
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	
КонецПроцедуры

// Конвертирует аналитику затрат в форму "Счет и три субконто", где вид субконто определяется его порядковым номером на счете.
//
// Параметры:
//  АналитикаЗатрат - Соответствие - набор значений, характеризующих затрату, см. комментарий к области АналитикаЗатрат
// 
// Возвращаемое значение:
//  Структура - набор значений, характеризующих затрату.
//   Ключи добавляются в коллекцию при необходимости (см. описание ключей)
//   Возможные ключи:
//    * Счет           - ПланСчетовСсылка.Хозрасчетный - счет затрат, если задан в АналитикаЗатрат.
//                       Если счет затрат не задан, то коллекция не заполнена.
//    * Подразделение  - СправочникСсылка.ПодразделенияОрганизаций -
//                       подразделение, если учет на счете ведется по подразделениям.
//    * Субконто1      - Характеристика.ВидыСубконтоХозрасчетные,
//    * Субконто2      - Характеристика.ВидыСубконтоХозрасчетные,
//    * Субконто3      - Характеристика.ВидыСубконтоХозрасчетные - субконто, заданные в АналитикаЗатрат
//
Функция АналитикаЗатратНомераСубконто(АналитикаЗатрат) Экспорт
	
	АналитикаНомераСубконто = Новый Структура;
	
	Счет = ЗначениеАналитикиЗатрат(АналитикаЗатрат, Тип("ПланСчетовСсылка.Хозрасчетный"));
		
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат АналитикаНомераСубконто;
	КонецЕсли;
		
	АналитикаНомераСубконто.Вставить("Счет", Счет);
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		Подразделение = ЗначениеАналитикиЗатрат(АналитикаЗатрат, "Подразделение");
		АналитикаНомераСубконто.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		КлючСубконто = XMLСтрока(НомерСубконто);
		
		Если СвойстваСчета.КоличествоСубконто < НомерСубконто Тогда
			ЗначениеСубконто = Неопределено;
		Иначе
			ВидСубконто = СвойстваСчета["ВидСубконто" + КлючСубконто];
			ЗначениеСубконто = ЗначениеАналитикиЗатрат(АналитикаЗатрат, ВидСубконто);
		КонецЕсли;
		
		АналитикаНомераСубконто.Вставить("Субконто" + КлючСубконто, ЗначениеСубконто);
		
	КонецЦикла;
	
	Возврат АналитикаНомераСубконто;
	
КонецФункции

// Возвращает соответствие для получения аналитики затрат по счету и 3 субконто.
//
// Параметры:
//  СчетИСубконто	 - Структура - Набор значений, характеризующих затрату.
//    * Счет           - ПланСчетовСсылка.Хозрасчетный - счет затрат, если задан в АналитикаЗатрат.
//    * Подразделение  - СправочникСсылка.ПодразделенияОрганизаций -
//                       подразделение, если учет на счете ведется по подразделениям.
//    * Субконто1      - Характеристика.ВидыСубконтоХозрасчетные,
//    * Субконто2      - Характеристика.ВидыСубконтоХозрасчетные,
//    * Субконто3      - Характеристика.ВидыСубконтоХозрасчетные - субконто, заданные в АналитикаЗатрат.
// 
// Возвращаемое значение:
//   - Соответствие - набор значений, характеризующих затрату, см. комментарий к области АналитикаЗатрат.
//
Функция АналитикаЗатратПоСчетуИСубконто(СчетИСубконто) Экспорт
	
	АналитикаЗатрат = Новый Соответствие;
	Если Не СчетИСубконто.Свойство("Счет")
		Или Не ЗначениеЗаполнено(СчетИСубконто.Счет) Тогда
		Возврат АналитикаЗатрат;
	КонецЕсли;
	
	АналитикаЗатрат.Вставить(Тип("ПланСчетовСсылка.Хозрасчетный"), СчетИСубконто.Счет);
	
	ОписаниеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетИСубконто.Счет);
	Для НомерСубконто = 1 По 3 Цикл
		ИдСубконто = XMLСтрока(НомерСубконто);
		ЗначениеСубконто = СчетИСубконто["Субконто" + ИдСубконто];
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			ВидСубконто = ОписаниеСчета["ВидСубконто" + ИдСубконто];
			АналитикаЗатрат.Вставить(ВидСубконто, ЗначениеСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеСчета.УчетПоПодразделениям И ЗначениеЗаполнено(СчетИСубконто.Подразделение) Тогда
		АналитикаЗатрат.Вставить("Подразделение", СчетИСубконто.Подразделение);
	КонецЕсли;
	
	Возврат АналитикаЗатрат;
	
КонецФункции

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СПЕЦИАЛЬНЫЕ, СЛУЖЕБНЫЕ

Функция ОтладитьЗапрос(Запрос) Экспорт
	
	ИсходныйТекстЗапроса = "" + Запрос.Текст;
	
	МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	// Разложим пакет на несколько запросов
	ПакетЗапросов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсходныйТекстЗапроса, ";");
	
	ОписаниеЗапросов = Новый Массив;
	Для Каждого ТекстЗапроса Из ПакетЗапросов Цикл
		
		СловаЗапроса = Новый Массив;
		// Разложим запрос на слова
		Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
			
			Строка = СокрЛП(СтрПолучитьСтроку(ТекстЗапроса, НомерСтроки));
			Если ПустаяСтрока(Строка) Тогда
				Продолжить;
			КонецЕсли;
			
			// Отсечем заведомые комментарии (но не все комментарии удастся так найти)
			Если Лев(Строка, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			// Разложим строку на слова, разделенные пробелами
			Для Каждого Слово Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, " ") Цикл
				СловаЗапроса.Добавить(Слово);
			КонецЦикла;
			
		КонецЦикла;
		
		// Текст запроса должен начинаться с определенных ключевых слов
		Если СловаЗапроса.Количество() = 0 
			Или (СловаЗапроса[0] <> "ВЫБРАТЬ" И СловаЗапроса[0] <> "УНИЧТОЖИТЬ") Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим тип запроса и имя временной таблицы.
		Уничтожить = СловаЗапроса.Найти("УНИЧТОЖИТЬ");
		Поместить  = СловаЗапроса.Найти("ПОМЕСТИТЬ");
		
		Если Уничтожить <> Неопределено Тогда
			
			ТипЗапроса = "УНИЧТОЖИТЬ";
			ИмяВременнойТаблицы = СловаЗапроса[Уничтожить + 1];
			
		ИначеЕсли Поместить <> Неопределено Тогда
			
			ТипЗапроса = "ПОМЕСТИТЬ";
			ИмяВременнойТаблицы = СловаЗапроса[Поместить + 1];
			
		Иначе
			
			ТипЗапроса = "ВЫБРАТЬ";
			ИмяВременнойТаблицы = "";
			
		КонецЕсли;
		
		ОписаниеЗапроса = Новый Структура;
		ОписаниеЗапроса.Вставить("Текст",               ТекстЗапроса);
		ОписаниеЗапроса.Вставить("Тип",                 ТипЗапроса);
		ОписаниеЗапроса.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
		
		ОписаниеЗапросов.Добавить(ОписаниеЗапроса);
		
	КонецЦикла;
	
	// Уничтожим временные таблицы, если они созданы (будут созданы) в этом пакете,
	// чтобы сохранить состав временных таблиц таким же, как до отладки
	ВременныеТаблицы = Новый Массив;
	Для Каждого ОписаниеЗапроса Из ОписаниеЗапросов Цикл
		Если ОписаниеЗапроса.Тип = "ПОМЕСТИТЬ" Тогда
			ВременныеТаблицы.Добавить(ОписаниеЗапроса.ИмяВременнойТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	// Последовательно выполняем каждый пакет и складываем его результат в коллекцию.
	Для Каждого ОписаниеЗапроса Из ОписаниеЗапросов Цикл
		
		// Запросы разных типов выполняем по-разному
		Если ОписаниеЗапроса.Тип = "УНИЧТОЖИТЬ" Тогда
		
			// Для того, чтобы снизить влияние принципа неопределенности,
			// выполняем этот запрос, только если уничтожается таблица, созданная в этой процедуре.
			// Иначе после отладки выполнять код будет нельзя
			
			ВременнаяТаблица = ВременныеТаблицы.Найти(ОписаниеЗапроса.ИмяВременнойТаблицы);
			
			Если ВременнаяТаблица = Неопределено Тогда
				
				ОписаниеЗапроса.Вставить("Результат", Ложь);
				
			Иначе
				
				Запрос.Текст = ОписаниеЗапроса.Текст;
				Запрос.Выполнить();
				
				ВременныеТаблицы.Удалить(ВременнаяТаблица);
				
				ОписаниеЗапроса.Вставить("Результат", Истина);
				
			КонецЕсли;
			
		ИначеЕсли ОписаниеЗапроса.Тип = "ПОМЕСТИТЬ" Тогда
		
			Запрос.Текст = ОписаниеЗапроса.Текст;
			Запрос.Выполнить();
			
			// Выгрузим результат запроса в таблицу значений
			ТаблицаЗапроса = МенеджерВременныхТаблиц.Таблицы.Найти(ОписаниеЗапроса.ИмяВременнойТаблицы);
			ОписаниеЗапроса.Вставить("Результат", ТаблицаЗапроса.ПолучитьДанные().Выгрузить());
			
		Иначе // Выборка данных
			
			Запрос.Текст = ОписаниеЗапроса.Текст;
			ОписаниеЗапроса.Вставить("Результат", Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Убираем следы
	// 1. Уничтожаем созданные временные таблицы, которых не было до выполнения пакета
	Запрос.Текст = "";
	Для Каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		Запрос.Текст = Запрос.Текст + "УНИЧТОЖИТЬ " + ИмяТаблицы + ";";
	КонецЦикла;
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		ОписаниеЗапросов.Добавить(Запрос.Текст);
		Запрос.Выполнить();
	КонецЕсли;
	
	// 2. Восстанавлиаем текст запроса
	Запрос.Текст = ИсходныйТекстЗапроса;
	
	Возврат ОписаниеЗапросов;
	
КонецФункции
