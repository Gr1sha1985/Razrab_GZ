////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции интерфейсов взаимодействия БРО
// с другими библиотеками/конфигурациями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Предназначена для получения сведений об уполномоченном представителе организации в налоговом органе.
// Параметры:
//	 РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - должно быть непустым значением.
//	 ДатаПодписи - дата - дата, по состоянию на которую будут читаться данные представителя-физлица.
//
// Возвращаемое значение: 
//   Структура - структура с полями: 
//	   * ТипПодписанта - строка со значениями "1", "2";
//	   * ПредставительЮрЛицо - Булево - признак представителя юр. лица; 
//	   * НаименованиеОрганизацииПредставителя - Строка - наименование организации представителя;
//	   * ДокументПредставителя - Строка - документ представителя;
//	   * Фамилия - Строка - фамилия;
//	   * Имя - Строка - имя;
//	   * Отчество - Строка - отчество;
//	   * ФИОПредставителя - Строка - ФИО представителя.
//
Функция СведенияОПредставителеПоРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане, ДатаПодписи) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПодписанта", "1");
	Результат.Вставить("ПредставительЮрЛицо", Истина);
	Результат.Вставить("НаименованиеОрганизацииПредставителя", "");
	Результат.Вставить("ДокументПредставителя", "");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("ФИОПредставителя", "");

	Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Представитель, УполномоченноеЛицоПредставителя, ДокументПредставителя");
	
	Если НЕ ЗначениеЗаполнено(ДанныеРегистрации.Представитель) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Представитель = ДанныеРегистрации.Представитель;
	Результат.Вставить("ТипПодписанта", "2");
	
	Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Представитель) Тогда
		
		ИмяПоля = ?(Представитель.Метаданные().Реквизиты.Найти("НаименованиеПолное") <> Неопределено, "НаименованиеПолное", "Наименование");
		Результат.Вставить("НаименованиеОрганизацииПредставителя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Представитель, ИмяПоля));
		Результат.Вставить("ФИОПредставителя", СокрЛП(ДанныеРегистрации.УполномоченноеЛицоПредставителя));
		СтрокиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеРегистрации.УполномоченноеЛицоПредставителя, " ");
		
		Если СтрокиФИО.Количество() > 0 Тогда
			
			Результат.Фамилия = СокрЛП(СтрокиФИО[0]);
			
			Если СтрокиФИО.Количество() > 1 Тогда
				
				Результат.Имя = СокрЛП(СтрокиФИО[1]);
				
				Если СтрокиФИО.Количество() > 2 Тогда
					
					Для ИндСтроки = 2 По СтрокиФИО.ВГраница() Цикл
						Результат.Отчество = Результат.Отчество + ?(ЗначениеЗаполнено(Результат.Отчество), " ", "") + СтрокиФИО[ИндСтроки]
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("ПредставительЮрЛицо", Ложь);
		ЗаполнитьЗначенияСвойств(Результат, РегламентированнаяОтчетность.ПолучитьФИОФизЛица(Представитель, ДатаПодписи));
		Результат.Вставить("ФИОПредставителя", СокрЛП(СокрЛП(Результат.Фамилия) + " " + СокрЛП(Результат.Имя) + " " + СокрЛП(Результат.Отчество)));
		
	КонецЕсли;
	
	Результат.Вставить("ДокументПредставителя", ДанныеРегистрации.ДокументПредставителя);
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату подключения учетной записи документооборота для организации или наименьшую дату одобрения заявления.
Функция ДатаПодключения1СОтчетности(Организация) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация,
			"ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Если РеквизитыОрганизации.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			ИЛИ НЕ ЗначениеЗаполнено(РеквизитыОрганизации.УчетнаяЗаписьОбмена) Тогда
			
			Возврат Неопределено;
		КонецЕсли;
		
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыОрганизации.УчетнаяЗаписьОбмена,
			"ДатаПодключения");
		
		ДатаПодключенияИзЗаявления = Неопределено;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ДатаПолученияОтвета КАК ДатаПолученияОтвета
			|ИЗ
			|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
			|ГДЕ
			|	ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
			|	И ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено)
			|	И ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
			|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	ЗаявлениеАбонентаСпецоператораСвязи.ДатаПолученияОтвета");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаПодключенияИзЗаявления = Выборка.ДатаПолученияОтвета;
			
			Если НЕ ЗначениеЗаполнено(Результат)
			ИЛИ (ЗначениеЗаполнено(ДатаПодключенияИзЗаявления) И ДатаПодключенияИзЗаявления < Результат) Тогда
				Результат = ДатаПодключенияИзЗаявления;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Предназначена для получения информации о регистрации заявления о ввозе товаров в налоговом органе.
// Параметры:
//	 ЗаявлениеОВвозеТоваровИлиМассив - ДокументСсылка.ЗаявлениеОВвозеТоваров, Массив.
//
// Возвращаемое значение:
//   Структура, Массив:
//	   * Выполнено              - Булево - если Истина, то функция успешно выполнена и получен результат, иначе см. ОписаниеОшибки.
//	   * ОписаниеОшибки         - Строка - описание ошибки (недостаточно прав, некорректная структура квитанции).
//	   * ЗаявлениеОВвозеТоваров - ДокументСсылка.ЗаявлениеОВвозеТоваров.
//	   * ЕстьКвитанцияОПриеме   - Булево.
//	   * РегНом                 - Строка - регистрационный номер заявления, присвоенный налоговым органом, регламентирован формат
//	                                       до 16 символов.
//	   * ДатаРег                - Строка - дата регистрации заявления в налоговом органе, регламентирован формат ДД.ММ.ГГГГ.
//
Функция СведенияКвитанцииОПриемеЗаявления(ЗаявлениеОВвозеТоваровИлиМассив) Экспорт
	
	МассивРезультатов = Новый Массив;
	ЭтоМассивСсылок = (ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("Массив")
		ИЛИ ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("ФиксированныйМассив")
		ИЛИ ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("СписокЗначений"));
	МассивЗаявленийОВвозеТоваров = ?(ЭтоМассивСсылок, ЗаявлениеОВвозеТоваровИлиМассив,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаявлениеОВвозеТоваровИлиМассив));
	
	ИменаСвойствКвитанции = Новый Массив;
	ИменаСвойствКвитанции.Добавить("РегНом");
	ИменаСвойствКвитанции.Добавить("ДатаРег");
	
	ИменаСвойствКвитанцииВРег = Новый Массив;
	Для каждого ИмяСвойстваКвитанции Из ИменаСвойствКвитанции Цикл
		ИмяСвойстваКвитанцииВРег = ВРег(ИмяСвойстваКвитанции);
		ИменаСвойствКвитанцииВРег.Добавить(ИмяСвойстваКвитанцииВРег);
	КонецЦикла;
	
	ИндексЗаявленияОВвозеТоваров = -1;
	КонтекстЭДО = Неопределено;
	ТекстСообщенияПолучитьОбработкуЭДО = "";
	
	Для каждого ЗаявлениеОВвозеТоваров Из МассивЗаявленийОВвозеТоваров Цикл
		СсылкаНаЗаявлениеОВвозеТоваров = ?(ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("СписокЗначений"),
			ЗаявлениеОВвозеТоваров.Значение, ЗаявлениеОВвозеТоваров);
		ИндексЗаявленияОВвозеТоваров = ИндексЗаявленияОВвозеТоваров + 1;
		
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", 				Ложь);
		Результат.Вставить("ОписаниеОшибки", 			"");
		Результат.Вставить("ЗаявлениеОВвозеТоваров", 	СсылкаНаЗаявлениеОВвозеТоваров);
		Результат.Вставить("ЕстьКвитанцияОПриеме", 		Ложь);
		Для каждого ИмяСвойстваКвитанции Из ИменаСвойствКвитанции Цикл
			Результат.Вставить(ИмяСвойстваКвитанции, Неопределено);
		КонецЦикла;
		
		// получаем вложение транспортного сообщения результата приема последней отправки
		
		Если ИндексЗаявленияОВвозеТоваров = 0 Тогда
			КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
		КонецЕсли;
		Если КонтекстЭДО = Неопределено Тогда
			Результат.ОписаниеОшибки = ТекстСообщенияПолучитьОбработкуЭДО;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Отправка = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаЗаявлениеОВвозеТоваров);
		Если НЕ ЗначениеЗаполнено(Отправка) Тогда
			Результат.Выполнено = Истина;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Сообщения = КонтекстЭДО.ПолучитьСообщенияЦиклаОбмена(Отправка, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
		Если Сообщения.Количество() = 0 Тогда
			Результат.Выполнено = Истина;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		СсылкаНаСообщение = Сообщения[0].Ссылка;
		
		Вложения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(СсылкаНаСообщение, Истина,
			Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления);
		Если Вложения.Количество() = 0 Тогда
			Результат.Выполнено = Истина;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Результат.ЕстьКвитанцияОПриеме = Истина;
		ДанныеВложения = Вложения[0].Данные;
		
		ФайлВложения = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеВложения = ДанныеВложения.Получить();
		Если ДвоичныеДанныеВложения = Неопределено Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML квитанции о приеме: пустое содержимое квитанции.'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		ДвоичныеДанныеВложения.Записать(ФайлВложения);
		
		// загружаем и анализируем XML
		
		ОписаниеОшибки = "";
		ДеревоXML = КонтекстЭДО.ЗагрузитьXMLВДеревоЗначений(ФайлВложения,, ОписаниеОшибки);
		Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
			Результат.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка разбора XML квитанции о приеме:%1'"),
				Символы.ПС + ОписаниеОшибки);
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
		Если НЕ ЗначениеЗаполнено(УзелФайл) Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""Файл"".'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
		Если НЕ ЗначениеЗаполнено(УзелДокумент) Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""Документ"".'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		УзелСвКвит = УзелДокумент.Строки.Найти("СвКвит", "Имя");
		Если НЕ ЗначениеЗаполнено(УзелСвКвит) Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""СвКвит"".'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Результат.Выполнено = Истина;
		
		// разбираем узел с общими сведениями
		
		Для каждого УзелОбщСвед Из УзелСвКвит.Строки Цикл
			ИмяСвойстваКвитанцииВРег = ВРег(УзелОбщСвед.Имя);
			Если ИменаСвойствКвитанцииВРег.Найти(ИмяСвойстваКвитанцииВРег) <> Неопределено Тогда
				ЗначениеСвойстваКвитанции = СокрЛП(УзелОбщСвед.Значение);
				Результат.Вставить(УзелОбщСвед.Имя, ЗначениеСвойстваКвитанции);
			КонецЕсли;
		КонецЦикла;
		
		МассивРезультатов.Добавить(Результат);
	КонецЦикла;
	
	Возврат ?(ЭтоМассивСсылок, МассивРезультатов, МассивРезультатов[0]);
	
КонецФункции

// Предназначена для получения квитанций и протоколов отчета.
// Параметры:
//   СсылкаНаОтчет - Ссылка из определяемого типа ПредметЦиклаОбмена - например,
//                                            ДокументСсылка.РегламентированныйОтчет,
//                                            СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов,
//                                            ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
//   ТипТранспортногоСообщения - Перечисления.ТипыТранспортныхСообщений - например,
//                                            Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
//                             - Строка - контролирующий орган и имя поля объекта отправки, например "ФССКвитанция",
//                                        значение ТипыСодержимогоТранспортногоКонтейнера в этом случае не учитывается
//   ТипыСодержимогоТранспортногоКонтейнера - Перечисления.ТипыСодержимогоТранспортногоКонтейнера - например,
//                                            Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР
//                                            для получения XML протокола СЗВ-ТД,
//                                            Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР
//                                            для получения XML и HTML приложений к протоколу СЗВ-М
//
// Возвращаемое значение:
//   Структура:
//     * Выполнено      - Булево          - если Истина, то функция успешно выполнена, иначе см. ОписаниеОшибки.
//     * ОписаниеОшибки - Строка          - описание ошибки, например, недостаточно прав.
//     * Сведения       - ТаблицаЗначений - содержимое РегистрСведений.СодержимоеТранспортныхКонтейнеров,
//                                          основные колонки (при строковом значении параметра "ТипТранспортногоСообщения"
//                                          возващается одна запись только с этими колонками):
//                                          ИмяФайла - Строка
//                                          ВАрхиве  - Булкво - при Истина содерджмое недоступно
//                                          Данные   - ХранилищеЗначения - ДвоичныеДанные квитанции/протокола
//                                          ТипСодержимогоФайла - Перечисления.ТипыСодержимогоФайлов - например,
//                                            Перечисления.ТипыСодержимогоФайлов.Xml
//                                          Содержимое - колонка присутствует при строковом значении параметра
//                                            "ТипТранспортногоСообщения", при значении "ФССКвитанция" для реестра
//                                            стимулирующих выплат медицинским и социальным работникам содержит
//                                            структуру:
//                                              ИдентификаторОтправки - Строка - значение узла "recriveID",
//                                              СтатусОбработки - Число - значение узла "statusGeneral",
//                                              ДатаВремяОбработки - Дата - значение узла "dateTimeReceive",
//                                              СообщенияОбОшибках - Строка - все сообщения из узла "firstErrorList"
//                                              с кодами ошибок в скобках, разделенные переводами строк,
//                                              ОшибкиПервичнойОбработки - Массив - из узла "firstErrorList":
//                                                КодОшибки - Строка - узел "errorCode",
//                                                ОписаниеОшибки - Строка - узел "errorDescription",
//                                              ПротоколОбработки - Массив - из узла "protocol" - "failedList" - 
//                                              "failedBatchNoDetail":
//                                                НомерЗаписи - Строка - узел "batchNo",
//                                                ОшибкиОбработки - Массив - из узла "errorList":
//                                                  КодОшибки - Строка - узел "errorCode",
//                                                  ОписаниеОшибки - Строка - узел "errorDescription".
//
Функция СведенияКвитанцийОтчета(
		СсылкаНаОтчет,
		ТипТранспортногоСообщения,
		ТипыСодержимогоТранспортногоКонтейнера = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 		Ложь);
	Результат.Вставить("Сведения", 			Неопределено);
	Результат.Вставить("ОписаниеОшибки", 	"");
	
	ТекстСообщенияПолучитьОбработкуЭДО = "";
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
	Если КонтекстЭДО = Неопределено Тогда
		Результат.ОписаниеОшибки = ТекстСообщенияПолучитьОбработкуЭДО;
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ТипТранспортногоСообщения) = Тип("Строка") И (ВРег(Лев(ТипТранспортногоСообщения, 3)) = "ФСС"
		ИЛИ ВРег(Лев(ТипТранспортногоСообщения, 5)) = "ФСРАР" ИЛИ ВРег(Лев(ТипТранспортногоСообщения, 3)) = "РПН"
		ИЛИ ВРег(Лев(ТипТранспортногоСообщения, 3)) = "ФТС") Тогда
		
		ДлинаПрефикса = ?(ВРег(Лев(ТипТранспортногоСообщения, 5)) = "ФСРАР", 5, 3);
		КонтролирующийОрган = Лев(ТипТранспортногоСообщения, ДлинаПрефикса);
		РеквизитОтправки = Сред(ТипТранспортногоСообщения, ДлинаПрефикса + 1);
		
		ПоследняяОтправка = КонтекстЭДО.ПолучитьПоследнююОтправкуОтчета(КонтролирующийОрган, СсылкаНаОтчет);
		Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПоследняяОтправка, РеквизитОтправки
				+ ", ВидОтчета");
			Результат.Сведения = Новый ТаблицаЗначений;
			Результат.Сведения.Колонки.Добавить("ИмяФайла");
			Результат.Сведения.Колонки.Добавить("ВАрхиве");
			Результат.Сведения.Колонки.Добавить("Данные");
			Результат.Сведения.Колонки.Добавить("ТипСодержимогоФайла");
			Результат.Сведения.Колонки.Добавить("Содержимое");
			
			СтрокаСведений = Результат.Сведения.Добавить();
			СтрокаСведений.ИмяФайла = РеквизитОтправки;
			СтрокаСведений.ВАрхиве = Ложь;
			СтрокаСведений.Данные = ЗначенияРеквизитов[РеквизитОтправки];
			СтрокаСведений.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.Xml;
			СтрокаСведений.Содержимое = Неопределено;
			
			Если ВРег(РеквизитОтправки) = ВРег("Квитанция") И ЗначенияРеквизитов.ВидОтчета =
				Справочники.ВидыОтправляемыхДокументов.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам Тогда
				
				ДвоичныеДанныеРезультата = ЗначенияРеквизитов[РеквизитОтправки].Получить();
				ТекстРезультата = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеРезультата);
				СтрокаСведений.Содержимое =
					КонтекстЭДО.РезультатыОтправкиРеестраСтимулирующихВыплатМедицинскимИСоциальнымРаботникам(ТекстРезультата);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Отправка = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	Если НЕ ЗначениеЗаполнено(Отправка) Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Сообщения = КонтекстЭДО.ПолучитьСообщенияЦиклаОбмена(Отправка, ТипТранспортногоСообщения);
	Если Сообщения.Количество() = 0 Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	СсылкаНаСообщение = Сообщения[0].Ссылка;
	
	Вложения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(СсылкаНаСообщение, Истина,
		ТипыСодержимогоТранспортногоКонтейнера);
	Если Вложения.Количество() = 0 Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Результат.Сведения = Вложения;
	Возврат Результат;
	
КонецФункции

// Возвращает форму для уведомления
// Например: Отчет.РегламентированноеУведомлениеЛьготаТранспортЗемля.Форма.Форма2019_1
// Параметры:
//              ВидУведомления - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения.
//              ДатаСведений - Дата, на какую дату нужна форма
Функция ПолучитьИмяФормыУведомленияПоУмолчанию(ВидУведомления, ДатаСведений) Экспорт 
	Попытка
		ОтчетИмя = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ПолучитьСоответствиеВидовУведомленийИменамОтчетов()[ВидУведомления];
		ТаблицаФорм = Отчеты[ОтчетИмя].ПолучитьТаблицуФорм();
		Если ТаблицаФорм.Количество() = 1 Тогда 
			Возврат "Отчет." + ОтчетИмя + ".Форма." + ТаблицаФорм[0].ИмяФормы;
		ИначеЕсли ТаблицаФорм.Количество() = 0 Тогда 
			Возврат Отчеты[ОтчетИмя].ПолучитьФормуПоУмолчанию();
		Иначе
			ИмяФормы = "";
			Для Каждого Стр Из ТаблицаФорм Цикл 
				Если (ЗначениеЗаполнено(Стр.ДатаНачала) И Стр.ДатаНачала > ДатаСведений)
					Или (ЗначениеЗаполнено(Стр.ДатаКонца) И Стр.ДатаКонца < ДатаСведений) Тогда 

					Продолжить;
				КонецЕсли;
				ИмяФормы = Стр.ИмяФормы;
			КонецЦикла;

			Возврат "Отчет." + ОтчетИмя + ".Форма." + ИмяФормы;
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

// Получает процедуры таможенного декларирования товаров с сайта ФТС.
//
// Параметры:
//   ПараметрыОтправки - Структура - параметр структуры "ПараметрыОтправки", возвращаемый процедурой
//                                   ИнтерфейсыВзаимодействияБРОКлиент.ПолучитьПроцедурыДекларированияФТС
//                                   при РежимыРаботы.ТолькоПолучитьНастройки = Истина;
//   ПараметрыСоединения - Структура - параметр структуры "ПараметрыСоединения", возвращаемый процедурой
//                                   ИнтерфейсыВзаимодействияБРОКлиент.ПолучитьПроцедурыДекларированияФТС
//                                   при РежимыРаботы.ТолькоПолучитьНастройки = Истина.
//
// Возвращаемое значение:
//   Массив из структур с процедурами декларирования для передачи в процедуру
//   ИнтерфейсыВзаимодействияБРОКлиент.ОбработатьРезультатыПолученияПроцедурДекларированияФТС.
//
Функция ПолучитьПроцедурыДекларированияФТСССервера(Знач ПараметрыОтправки, ПараметрыСоединения) Экспорт
	
	Результат = Неопределено;
	ТекстСообщенияПолучитьОбработкуЭДО = "";
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
	Если КонтекстЭДО <> Неопределено Тогда
		Результат = КонтекстЭДО.ПолучитьПроцедурыДекларированияФТСССервера(ПараметрыОтправки, ПараметрыСоединения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросВФНСНаПроверкуСведенийРаботников

Функция СформироватьФайлЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	
	ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров);
	
	Если НЕ СтруктураПараметров.Свойство("СведенияОРаботниках") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ДатаПодписи") Тогда
		СтруктураПараметров.Вставить("ДатаПодписи", ТекущаяДатаСеанса());
	КонецЕсли;
	
	МассивТекстов = ТекстФайлаЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров);
	
	Если МассивТекстов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ПолучаемыеФайлы", Новый Массив);
	
	Для каждого СведенияДляФайла Из МассивТекстов Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(СведенияДляФайла.СтрокаXML);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Результат.ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(
		СведенияДляФайла.ИмяФайлаЗапроса + ".xml", АдресФайла));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("РасчетПоСтраховымВзносам") Тогда
		
		СохраненныйДокумент = СтруктураПараметров.РасчетПоСтраховымВзносам.ПолучитьОбъект();
		СохраненныеДанные = СохраненныйДокумент.ДанныеОтчета.Получить();
		
		ДанныеТитульного = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		
		Если СохраненныеДанные.Свойство("ОкружениеСохранения") Тогда
			
			// Случай данных отчета, сохраненного в 2.0.
			
		Иначе
			
			СтруктураПараметров.Вставить("СведенияОРаботниках", СохраненныеДанные.ДанныеМногоуровневыхРазделов.Раздел3);
			СтруктураПараметров.Вставить("КодНалоговогоОргана", СокрЛП(ДанныеТитульного.НалоговыйОрган));
			СтруктураПараметров.Вставить("ИНН", СокрЛП(ДанныеТитульного.ИНН));
			СтруктураПараметров.Вставить("КПП", СокрЛП(ДанныеТитульного.КПП));
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.Свойство("Организация") Тогда
		
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(
		СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстФайлаЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров)
	
	МассивТекстов = Новый Массив;
	
	// Общая часть.
	СведенияОРаботниках = СтруктураПараметров.СведенияОРаботниках;
	
	Если ТипЗнч(СведенияОРаботниках) = Тип("ДеревоЗначений") Тогда
		СведенияОРаботниках = СведенияОРаботниках.Строки;
		Если СтруктураПараметров.Свойство("РасчетПоСтраховымВзносам") Тогда
			ИмяФормы = СтруктураПараметров.РасчетПоСтраховымВзносам.ВыбраннаяФорма;
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
				ВерсияСоставаПоказателей = "5.03";
			ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв1") Тогда
				ВерсияСоставаПоказателей = "5.02";
			Иначе
				ВерсияСоставаПоказателей = "5.01";
			КонецЕсли;
		Иначе
			ДанныеПервойСтраницы = СведенияОРаботниках[0].Данные;
			Если ДанныеПервойСтраницы.Свойство("П000310002001") Тогда
				ВерсияСоставаПоказателей = "5.03";
			Иначе
				ВерсияСоставаПоказателей = "5.01";
			КонецЕсли;
		КонецЕсли;
		Если ВерсияСоставаПоказателей = "5.03" ИЛИ ВерсияСоставаПоказателей = "5.02" Тогда
			ИмяПок_ИННФЛ          = "П000310002001";
			ИмяПок_СНИЛС          = "П000310003001";
			ИмяПок_Фамилия        = "П000310004001";
			ИмяПок_Имя            = "П000310005001";
			ИмяПок_Отчество       = "П000310006001";
			ИмяПок_ДатаРожд       = "П000310007001";
			ИмяПок_КодВидДок      = "П000310010001";
			ИмяПок_СерияДокумента = "П000310011001";
			ИмяПок_НомерДокумента = "П000310011002";
		Иначе// ВерсияСоставаПоказателей = "5.01"
			ИмяПок_ИННФЛ          = "П000310006001";
			ИмяПок_СНИЛС          = "П000310007001";
			ИмяПок_Фамилия        = "П000310008001";
			ИмяПок_Имя            = "П000310009001";
			ИмяПок_Отчество       = "П000310010001";
			ИмяПок_ДатаРожд       = "П000310011001";
			ИмяПок_КодВидДок      = "П000310014001";
			ИмяПок_СерияДокумента = "П000310015001";
			ИмяПок_НомерДокумента = "П000310015002";
		КонецЕсли;
	Иначе
		ИмяПок_Фамилия        = "Фамилия";
		ИмяПок_Имя            = "Имя";
		ИмяПок_Отчество       = "Отчество";
		ИмяПок_ИННФЛ          = "ИНН";
		ИмяПок_СНИЛС          = "СтраховойНомерПФР";
		ИмяПок_ДатаРожд       = "ДатаРождения";
		ИмяПок_КодВидДок      = "ВидДокумента";
		ИмяПок_СерияДокумента = "СерияДокумента";
		ИмяПок_НомерДокумента = "НомерДокумента";
	КонецЕсли;
	
	КодНалоговогоОргана = СокрЛП(СтруктураПараметров.КодНалоговогоОргана);
	ДатаПодписи = СтруктураПараметров.ДатаПодписи;
	ИНН = СокрЛП(СтруктураПараметров.ИНН);
	КПП = СокрЛП(СтруктураПараметров.КПП);
	
	ЛеваяЧасть_ИмяФайлаЗапроса = "VO_ZAPRRAB"
	+ "_" + КодНалоговогоОргана
	+ "_" + (ИНН + КПП)
	+ "_" + Формат(ДатаПодписи, "ДФ=ггггММдд");
	
	ПредельноеКоличествоСведенийВОдномФайле = 200;
	Если СтруктураПараметров.Свойство("РазмерПачки") Тогда
		ПредельноеКоличествоСведенийВОдномФайле = СтруктураПараметров.РазмерПачки;
	КонецЕсли;
	
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматЗапросаВФНСНаПроверкуСведенийРаботников");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	// Начало формирования первой строки XML.
	//
	ИмяФайлаЗапроса = ЛеваяЧасть_ИмяФайлаЗапроса + "_" + Новый УникальныйИдентификатор();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФорматаXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДеревоФормата = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ДеревоВыгрузки = Новый ДеревоЗначений;
	ДеревоВыгрузки.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	ДеревоВыгрузки.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайлаЗапроса);
	Атрибуты.Вставить("ВерсФорм", "4.02");
	Атрибуты.Вставить("ТипИнф", "ЗАПР_ПРОВ_РАБ");
	Атрибуты.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	УзелСправки = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	ФорматНабораЗаписейФизЛицо = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ПолучДох");
	
	Для каждого СтрокаСведений Из СведенияОРаботниках Цикл
		
		СведенияОРаботнике
		= ?(ТипЗнч(СтрокаСведений) = Тип("СтрокаДереваЗначений"), СтрокаСведений.Данные, СтрокаСведений);
		
		НаборЗаписейФизЛицо = ОбщегоНазначения.СкопироватьРекурсивно(ФорматНабораЗаписейФизЛицо);
		
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СведенияОРаботнике[ИмяПок_Фамилия];
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СведенияОРаботнике[ИмяПок_Имя];
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СведенияОРаботнике[ИмяПок_Отчество];
		
		Если НЕ ЗначениеЗаполнено(СведенияОРаботнике[ИмяПок_ИННФЛ]) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СведенияОРаботнике[ИмяПок_ИННФЛ];
		КонецЕсли;
		
		НаборЗаписейФизЛицо.СНИЛС.Значение = СведенияОРаботнике[ИмяПок_СНИЛС];
		
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СведенияОРаботнике[ИмяПок_ДатаРожд];
		
		Если ТипЗнч(СведенияОРаботниках) = Тип("КоллекцияСтрокДереваЗначений")
			И НЕ СведенияОРаботнике.Свойство(ИмяПок_НомерДокумента) Тогда
			// Особая обработка: номер документа, удостоверяющего личность.
			СведенияОРаботнике.Вставить(ИмяПок_НомерДокумента, "");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СокрЛП(СведенияОРаботнике[ИмяПок_КодВидДок]
			+ СведенияОРаботнике[ИмяПок_СерияДокумента]
			+ СведенияОРаботнике[ИмяПок_НомерДокумента])) Тогда
			НаборЗаписейФизЛицо.Удалить("УдЛичнФЛ");
		Иначе
			НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;
			НаборЗаписейДокУдЛичности.КодВидДок = СведенияОРаботнике[ИмяПок_КодВидДок];
			НаборЗаписейДокУдЛичности.СерНомДок
			= СокрЛП(СведенияОРаботнике[ИмяПок_СерияДокумента]) + " "
			+ СокрЛП(СведенияОРаботнике[ИмяПок_НомерДокумента]);
		КонецЕсли;
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейФизЛицо);
		УзелФЛ = ДобавитьУзелВДеревоXML(УзелСправки, "СвРаб", "", Атрибуты);
		ДобавитьИнформациюВДерево(УзелФЛ, НаборЗаписейФизЛицо);
		
		НомерСтрокиСведений = СведенияОРаботниках.Индекс(СтрокаСведений) + 1;
		
		Если (НомерСтрокиСведений % ПредельноеКоличествоСведенийВОдномФайле = 0)
			ИЛИ (НомерСтрокиСведений = СведенияОРаботниках.Количество()) Тогда
			
			СтруктураПараметров.Удалить("СведенияОРаботниках");
			
			ПотокВыгрузкиXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
			ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
			СтрокаXML = ПотокВыгрузкиXML.Закрыть();
			
			// Строка XML сформирована.
			//
			МассивТекстов.Добавить(Новый Структура("СтрокаXML, ИмяФайлаЗапроса", СтрокаXML, ИмяФайлаЗапроса));
			
		КонецЕсли;
		
		Если (НомерСтрокиСведений % ПредельноеКоличествоСведенийВОдномФайле = 0)
			И (НомерСтрокиСведений <> СведенияОРаботниках.Количество()) Тогда
			
			// Начало формирования дополнительной строки XML (количество записей в
			// "СведенияОРаботниках" превысило "ПредельноеКоличествоСведенийВОдномФайле").
			//
			ИмяФайлаЗапроса = ЛеваяЧасть_ИмяФайлаЗапроса + "_" + Новый УникальныйИдентификатор();
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ТекстФорматаXML);
			
			ПостроительDOM = Новый ПостроительDOM;
			ДеревоФормата = ПостроительDOM.Прочитать(ЧтениеXML);
			
			ДеревоВыгрузки = Новый ДеревоЗначений;
			ДеревоВыгрузки.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
			ДеревоВыгрузки.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
			
			Атрибуты = Новый Соответствие;
			Атрибуты.Вставить("ИдФайл", ИмяФайлаЗапроса);
			Атрибуты.Вставить("ВерсФорм", "4.02");
			Атрибуты.Вставить("ТипИнф", "ЗАПР_ПРОВ_РАБ");
			Атрибуты.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
			
			УзелСправки = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
			
			ФорматНабораЗаписейФизЛицо = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ПолучДох");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивТекстов;
	
КонецФункции

Функция ДобавитьУзелВДеревоXML(Ветка, Имя, Значение, СписокАтрибутов = Неопределено, ТипДанных = "", ЗначениеЗаписи = Неопределено)
	
	ПустаяДата = Дата(1,1,1);
	
	НовыйУзел = Ветка.Строки.Добавить();
	НовыйУзел.Имя = Имя;
	НовыйУзел.Значение = Значение;
	
	Если СписокАтрибутов <> Неопределено Тогда
		ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
		ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
		ВеткаАтрибутов.Значение = Неопределено;
		
		Для Каждого ЭлементСпискаАтрибутов Из СписокАтрибутов Цикл
			ЛистАтрибутов = ВеткаАтрибутов.Строки.Добавить();
			ЛистАтрибутов.Имя = ЭлементСпискаАтрибутов.Ключ;
			
			ЛистАтрибутов.Значение = Строка(ЭлементСпискаАтрибутов.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипДанных = "СТРОКА" И ЗначениеЗаписи <> Неопределено Тогда
		ЗначениеЗаписи = "";
	ИначеЕсли ТипДанных = "ЧИСЛО" И ЗначениеЗаписи <> Неопределено Тогда
		Если ТипЗнч(ЗначениеЗаписи) = Тип("Число") Тогда
			ЗначениеЗаписи = 0;
		Иначе
			ЗначениеЗаписи = "";
		КонецЕсли;
	ИначеЕсли ТипДанных = "ДАТА" И ЗначениеЗаписи <> Неопределено Тогда
		ЗначениеЗаписи = ПустаяДата;
	КонецЕсли;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ЗагрузитьФорматНабораЗаписей(Знач ДеревоФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1)
	ФорматНабора = Новый Структура();
	
	УзлыФормата = ДеревоФормата.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени(ИмяНабораЗаписей)[0].ДочерниеУзлы;
	
	Для Каждого УзелФормата Из УзлыФормата Цикл
		
		Если ТипЗнч(УзелФормата) <> Тип("ЭлементDOM") Тогда
			Продолжить;
		КонецЕсли;
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ЭлементНеОбязателен, ТипЭлемента, НеВыводитьВФайл");
		
		// Имя записи хранится в 4 колонке.
		ИмяЗаписи =  УзелФормата.ДочерниеУзлы[3].ТекстовоеСодержимое;
		
		// Тип данных хранится во 2 колонке.
		ТипДанных = ВРег(УзелФормата.ДочерниеУзлы[1].ТекстовоеСодержимое);
		
		// Признак обязательности элемента хранится в 5-й колонке.
		ЭлементНеОбязателен = (ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "НЕ ОБЯЗАТЕЛЬНО" Или ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "Н");
		
		Если УзелФормата.ДочерниеУзлы.Количество() = 7 И УзелФормата.ДочерниеУзлы[6].ИмяУзла = "ТипЭлемента" Тогда
			ТипЭлемента = ВРег(УзелФормата.ДочерниеУзлы[6].ТекстовоеСодержимое);
		Иначе
			ТипЭлемента = "С";
		КонецЕсли;
		
		Если ТипДанных = "" Тогда// если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = СтрНайти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ТипДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипДанных, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ПозицияРазделителя = СтрНайти(ИмяЗаписи,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ЭлементНеОбязателен = ЭлементНеОбязателен;
		ФорматЗаписи.ТипЭлемента = ТипЭлемента;
		ФорматЗаписи.НеВыводитьВФайл = Ложь;
		// Размер хранится в 3 колонке.
		СтрРазмерПоля =  УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" Тогда
			
			// В колонке "размер" должно указываться значение константы.
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" Тогда
			
			ПозицияТочки = СтрНайти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 Тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;
			
			ФорматЗаписи.Значение = 0;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" Тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" Тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" Тогда
			
			// Имя области-описания формата полей таблицы или структуры хранится в колонке размер.
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиИзДереваФормата(ДеревоФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ТАБЛИЦА" Тогда
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля);
				Иначе	
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						ОписаниеТиповПоля = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти));
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						ОписаниеТиповПоля = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Поле.Размер));
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						ОписаниеТиповПоля = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
					КонецЕсли; 
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля);
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" Тогда
			
			ПозицияРазделителя = СтрНайти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = СтрНайти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				СтрРазмерПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрРазмерПоля, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			
			// Имя области-описания формата полей таблицы или структуры хранится в колонке размер.
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиИзДереваФормата(ДеревоФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
				Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке.
			ИмяНабора = УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
			ПозицияРазделителя = СтрНайти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяНабора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяНабора, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = СтрНайти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, ИмяНабора, НомерВыбираемогоЭлемента);
			
		КонецЕсли;
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;
	
	Возврат ФорматНабора;
	
КонецФункции

Функция ПолучитьФорматЗаписиИзДереваФормата(Знач ДеревоФормата, Знач ИмяЗаписи)
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипЭлемента",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен", Новый ОписаниеТипов("Булево"));
	ТаблицаФормаЗаписи.Колонки.Добавить("НеВыводитьВФайл", Новый ОписаниеТипов("Булево"));
	
	УзлыФормата = ДеревоФормата.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени(ИмяЗаписи)[0].ДочерниеУзлы;
	
	Для Каждого УзелФормата Из УзлыФормата Цикл
		
		Если ТипЗнч(УзелФормата) <> Тип("ЭлементDOM") Тогда
			Продолжить;
		КонецЕсли;
		
		// Имя поля хранится в 4-ой колонке.
		ИмяПоля = УзелФормата.ДочерниеУзлы[3].ТекстовоеСодержимое;
		Если ИмяПоля <> "" Тогда
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			// Тип данных хранится во 2-ой колонке.
			НовоеПоле.ТипДанных = ВРег(УзелФормата.ДочерниеУзлы[1].ТекстовоеСодержимое);
			
			НовоеПоле.НеВыводитьВФайл = Ложь;
			
			Если УзелФормата.ДочерниеУзлы.Количество() = 7 И УзелФормата.ДочерниеУзлы[6].ИмяУзла = "ТипЭлемента" Тогда
				НовоеПоле.ТипЭлемента = ВРег(УзелФормата.ДочерниеУзлы[6].ТекстовоеСодержимое);
			Иначе
				НовоеПоле.ТипЭлемента = "С";
			КонецЕсли;
			
			// Размер поля хранится в 3-ей колонке.
			СтрРазмерПоля = УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
			// Если указан размер поля, сохраним его.
			Если (НовоеПоле.ТипДанных = "ЧИСЛО" Или НовоеПоле.ТипДанных = "СТРОКА") И СтрРазмерПоля <> "" Тогда
				ПозицияТочки = СтрНайти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 Тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;
			КонецЕсли;
			// Признак обязательности элемента хранится в 5-й колонке.
			НовоеПоле.ЭлементНеОбязателен = (ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "НЕ ОБЯЗАТЕЛЬНО" Или ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "Н");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции

Функция ДанныеВыгружаемыеКакАтрибуты(СтруктураДанных)
	
	Атрибуты = Новый Структура;
	Для каждого Поле Из СтруктураДанных Цикл
		Если Поле.Значение.ТипЭлемента = "А" Тогда
			Данные = Поле.Значение.Значение;
			Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
				Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
			ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
				Если Не ЗначениеЗаполнено(Данные) Тогда
					Данные = ""
				Иначе
					Данные = Формат(Данные,"ДЛФ=D");
				КонецЕсли;
			КонецЕсли;
			Атрибуты.Вставить(Поле.Ключ, Данные);
			СтруктураДанных.Удалить(Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Атрибуты
	
КонецФункции

Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей)
	
	ПустаяДата = Дата(1,1,1);
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		
		Запись = ЭлементНабора.Значение;
		
		Если Запись.НеВыводитьВФайл Тогда 
			Запись.НеВыводитьВФайл = Ложь;
			Продолжить;
		КонецЕсли;
		
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение, , ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			// для проверок
			// Запись.Размер 
			// Запись.РазрядностьДробнойЧасти
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"), , ТипДанных, Запись.Значение);
			Запись.НеВыводитьВФайл = Ложь;
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			// для проверок
			// Запись.Размер 
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение, ,ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Запись.Значение = ПустаяДата,"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")), ,ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Атрибуты = Новый Структура;
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					Если Поле.ТипЭлемента = "А" И НЕ Поле.НеВыводитьВФайл Тогда
						Атрибуты.Вставить(Поле.ИмяПоля, Данные);
					КонецЕсли;
					
				КонецЦикла;
				
				ВеткаСтрокиТЗ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ТипЭлемента = "А" Тогда
						Поле.НеВыводитьВФайл = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если Поле.НеВыводитьВФайл Тогда
						Поле.НеВыводитьВФайл = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавитьИнформациюВДерево(ВеткаСтрокиТЗ, СтрокаТЗ[Поле.ИмяПоля])
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда
			МассивДанных = Новый Массив;
			Атрибуты = Новый Структура;
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ЭлементНеОбязателен И Не ЗначениеЗаполнено(Данные) Тогда
					Продолжить;
				КонецЕсли;
				
				ПустоеЗначение = "";
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Если ТипЗнч(Данные) = Тип("Число") Тогда
						ПустоеЗначение = 0;	
					КонецЕсли;
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0");
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						ПустоеЗначение = '00010101';
					КонецЕсли;
				КонецЕсли;
				
				Если Поле.ТипЭлемента = "А" И НЕ Поле.НеВыводитьВФайл  Тогда
					Атрибуты.Вставить(Поле.ИмяПоля, Данные);
				ИначеЕсли НЕ Поле.НеВыводитьВФайл Тогда 
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("ИмяПоля", Поле.ИмяПоля);
					СтруктураДанных.Вставить("Значение", Запись.Значение[Поле.ИмяПоля]);
					СтруктураДанных.Вставить("Данные", Данные);
					СтруктураДанных.Вставить("ТипДанных", Поле.ТипДанных);
					МассивДанных.Добавить(СтруктураДанных);
				КонецЕсли;
				Поле.НеВыводитьВФайл = Ложь;
				Запись.Значение[Поле.ИмяПоля] = ПустоеЗначение;
			КонецЦикла; 
				
			ВеткаСтруктуры = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
			
			Для Каждого Поле Из МассивДанных Цикл
				ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Поле.Данные, ,Поле.ТипДанных, Поле.Данные);
			КонецЦикла;
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			Значение = Запись.Значение;
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Значение Цикл
				Если Поле.Значение.ТипЭлемента = "А" И НЕ Поле.Значение.НеВыводитьВФайл  Тогда
					Данные = Поле.Значение.Значение;
					Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					Атрибуты.Вставить(Поле.Ключ, Данные);
					Значение.Удалить(Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты), Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено)
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Имя);	
			Если ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено Тогда
				ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			КонецЕсли;
			СписокАтрибутов = СтрокаДерева.Строки.Найти("АтрибутыXMLУзла", "Имя", Ложь);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист Из СтрокаДерева.Строки Цикл
		Если Лист.Имя = "АтрибутыXMLУзла" Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбИзмененииОКТМО

Функция ТребуетсяВыводУведомлениеОбИзмененииОКТМО46(Организация) Экспорт
	
	// Пользователь отключил уведомление по организации.
	НеПоказыватьПоОрганизации = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзменениеОКТМО46",
		"УведомлениеОбИзменениеОКТМО46_НеПоказыватьДляОрганизации_" + Организация.УникальныйИдентификатор());
	
	Если НеПоказыватьПоОрганизации = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Список регистрации в налоговых органах пустой, КПП или ИНН начинается с 50 (Московская область).
	ЗапросПоРегистрациям = Новый Запрос;
	ЗапросПоРегистрациям.УстановитьПараметр("Организация", Организация);
	
	ЗапросПоРегистрациям.Текст =
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
		|	И РегистрацииВНалоговомОргане.Владелец = &Организация";
	
	РегистрацийНет = ЗапросПоРегистрациям.Выполнить().Пустой();
	
	Если РегистрацийНет Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Организация, ТекущаяДата(), "ИННЮЛ, КППЮЛ");
			
		ЭтоОрганизацияМО = (Лев(СведенияОбОрганизации.КППЮЛ, 2) = "50" ИЛИ Лев(СведенияОбОрганизации.ИННЮЛ, 2) = "50");
		
		Если НЕ ЭтоОрганизацияМО Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		НовыеОКТМО = "46729000,46744000,46747000,46748000,46759000,46766000,46733000,46738000,46750000,46776000,46784000,46786000";
		НовыеОКТМО = СтрРазделить(НовыеОКТМО, ",", Ложь);
		
		ЗапросПоРегистрациям.УстановитьПараметр("НовыеОКТМО", НовыеОКТМО);
		
		ЗапросПоРегистрациям.Текст =
			"ВЫБРАТЬ
			|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
			|ГДЕ
			|	НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
			|	И РегистрацииВНалоговомОргане.Владелец = &Организация
			|	И НЕ РегистрацииВНалоговомОргане.КодПоОКТМО В (&НовыеОКТМО)
			|	И РегистрацииВНалоговомОргане.КодПоОКТМО ПОДОБНО ""46%""";
		
		РегистрацийНет = ЗапросПоРегистрациям.Выполнить().Пустой();
		
		Если РегистрацийНет Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти