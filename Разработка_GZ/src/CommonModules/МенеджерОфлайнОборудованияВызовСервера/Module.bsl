#Область ПрограммныйИнтерфейс

Функция ПодключаемоеОборудованиеЭвотор(ИдентификаторУстройства) Экспорт
	
	Если Не ИдентификаторУстройства.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1СЭвоторККМOffline Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьИсториюЗагрузкиУстройства(ИдентификаторУстройства) Экспорт
	
	Если Не ПодключаемоеОборудованиеЭвотор(ИдентификаторУстройства) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ДатаЗагрузкиОтчетовКассЭвотор.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КассаЭвотор.Значение = ИдентификаторУстройства;
	НаборЗаписей.Отбор.КассаЭвотор.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсСлужебный

Функция ПолучитьДанныеДляВыгрузки(Контекст) Экспорт
	
	ОфлайнОборудование = Контекст.ИдентификаторУстройства;
	НаборВыгружаемыхДанных = Контекст.НаборВыгружаемыхДанных;
	
	НастройкиККМ 	= Неопределено;
	ПрайсЛист 		= Неопределено;
	Заказы 			= Неопределено;
	
	Если НаборВыгружаемыхДанных.Настройки Тогда
		НастройкиККМ = МенеджерОфлайнОборудования.ПолучитьНастройкиККМ();
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеНастроек(ОфлайнОборудование, НастройкиККМ);
		
		ПараметрыУстройства = Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(ОфлайнОборудование);
		
		Если ПараметрыУстройства.Свойство("ПараметрыДрайвераККМ") И НЕ ПараметрыУстройства.ПараметрыДрайвераККМ = Неопределено Тогда
			
			НастройкиККМ.Вставить("ПараметрыДрайвераККМ", ПараметрыУстройства.ПараметрыДрайвераККМ);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НаборВыгружаемыхДанных.ПрайсЛист Тогда
		
		ПрайсЛист = МенеджерОфлайнОборудования.ПолучитьПрайсЛистККМ();
		ПолнаяВыгрузкаПрайсЛиста = Ложь;
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеПрайсЛиста(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузкаПрайсЛиста);
		ПрайсЛист.Вставить("ПолнаяВыгрузка", Ложь);
		
	ИначеЕсли НаборВыгружаемыхДанных.ПолныйПрайсЛист Тогда
		
		ПрайсЛист = МенеджерОфлайнОборудования.ПолучитьПрайсЛистККМ();
		ПолнаяВыгрузкаПрайсЛиста = Истина;
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеПрайсЛиста(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузкаПрайсЛиста);
		ПрайсЛист.Вставить("ПолнаяВыгрузка", Истина);
		
	КонецЕсли;
	
	Если НаборВыгружаемыхДанных.ПрайсЛист ИЛИ НаборВыгружаемыхДанных.ПолныйПрайсЛист Тогда
		
		СортироватьПрайсЛист(ПрайсЛист);
		
	КонецЕсли;
	
	Если НаборВыгружаемыхДанных.Заказы Тогда
		Заказы = МенеджерОфлайнОборудования.ПолучитьЗаказыККМ();
		МенеджерОфлайнОборудованияПереопределяемый.ПриВыгрузкеЗаказов(ОфлайнОборудование, Заказы);
	КонецЕсли;
	
	
	ДанныеДляВыгрузки = Новый Структура;
	ДанныеДляВыгрузки.Вставить("НастройкиККМ", 	НастройкиККМ);
	ДанныеДляВыгрузки.Вставить("ПрайсЛист", 	ПрайсЛист);
	ДанныеДляВыгрузки.Вставить("Заказы", 		Заказы);
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

Функция ПередатьДанныеЗагрузки(Контекст) Экспорт
	
	ОфлайнОборудование = Контекст.ИдентификаторУстройства;
	ДанныеИзККМ = Контекст.ДанныеИзККМ;
	
	ОтчетыОПродажах = ДанныеИзККМ.ОтчетыОПродажах;
	
	СортироватьДанныеОПродажах(ОтчетыОПродажах);
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	
	МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОПродажахИзККМ(
		ОфлайнОборудование,
		ОтчетыОПродажах,
		Отказ,
		СообщениеОбОшибке
	);
	
	Если НЕ Отказ Тогда
		МенеджерОфлайнОборудованияПереопределяемый.ПриЗагрузкеДанныхОВскрытияхАлкогольнойТарыИзККМ(
			ОфлайнОборудование,
			ДанныеИзККМ.ВскрытияАлкогольнойТары,
			Отказ,
			СообщениеОбОшибке
		);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", НЕ Отказ);
	Результат.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	Возврат Результат;
	
КонецФункции

Процедура ОповеститьОбУдачнойВыгрузке(ОфлайнОборудование, Набор) Экспорт
	
	НаборВыгруженныхДанных = МенеджерОфлайнОборудования.ПолучитьНаборВыгруженныхДанных();
	
	Если Набор.Свойство("Настройки") И Набор.Настройки Тогда
		НаборВыгруженныхДанных.Настройки = Истина;
	КонецЕсли;
	
	Если Набор.Свойство("ПрайсЛист") И Набор.ПрайсЛист Тогда
		НаборВыгруженныхДанных.ПрайсЛист = Истина;
		
	ИначеЕсли Набор.Свойство("ПолныйПрайсЛист") И Набор.ПолныйПрайсЛист Тогда
		НаборВыгруженныхДанных.ПрайсЛист = Истина;
		
	КонецЕсли;
	
	Если Набор.Свойство("Заказы") И Набор.Заказы Тогда
		НаборВыгруженныхДанных.Заказы = Истина;
	КонецЕсли;
	
	МенеджерОфлайнОборудованияПереопределяемый.ПослеУспешнойВыгрузкиДанных(ОфлайнОборудование, НаборВыгруженныхДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

Процедура СортироватьПрайсЛист(ПрайсЛист)
	
	Если ПрайсЛист.ГруппыТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппыТоваров = ПрайсЛист.ГруппыТоваров;
	ОтсортированныеГруппы = Новый Массив;
	КэшПоиска = Новый Массив;
	
	СортироватьИерархиюГруппРекурсивно(ГруппыТоваров, ОтсортированныеГруппы, КэшПоиска);
	
	ПрайсЛист.ГруппыТоваров = ОтсортированныеГруппы;
	
КонецПроцедуры

Процедура СортироватьИерархиюГруппРекурсивно(ГруппыТоваров, ОтсортированныеГруппы, КэшПоиска)
	
	ИндексыПеремещаемыхГруппы = Новый СписокЗначений;
	
	Индекс = 0;
	Для Каждого Группа Из ГруппыТоваров Цикл
		
		Если НЕ ЗначениеЗаполнено(Группа.КодГруппы) Тогда
			
			ОтсортированныеГруппы.Добавить(Группа);
			КэшПоиска.Добавить(Группа.Код);
			ИндексыПеремещаемыхГруппы.Добавить(Индекс);
			
		Иначе
			
			Если НЕ КэшПоиска.Найти(Группа.КодГруппы) = Неопределено Тогда
				
				ОтсортированныеГруппы.Добавить(Группа);
				КэшПоиска.Добавить(Группа.Код);
				ИндексыПеремещаемыхГруппы.Добавить(Индекс);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ИндексыПеремещаемыхГруппы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексыПеремещаемыхГруппы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого ИндексПеремещеннойГруппы Из ИндексыПеремещаемыхГруппы Цикл
		
		ГруппыТоваров.Удалить(ИндексПеремещеннойГруппы.Значение);
		
	КонецЦикла;
	
	СортироватьИерархиюГруппРекурсивно(ГруппыТоваров, ОтсортированныеГруппы, КэшПоиска);
	
КонецПроцедуры

Процедура СортироватьДанныеОПродажах(ДанныеОПродажах)
	
	СписокОтчетов = Новый СписокЗначений;
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		
		// сортировка чеков
		СписокЧеков = Новый СписокЗначений;
		
		Для Каждого Чек Из ОтчетОПродажах.Чеки Цикл
			СписокЧеков.Добавить(Чек, Чек.ДатаЧека);
		КонецЦикла;
		СписокЧеков.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ОтчетОПродажах.Чеки = СписокЧеков.ВыгрузитьЗначения();
		
		// сортировка движений ДС
		СписокДвиженийДС = Новый СписокЗначений;
		
		Для Каждого ДвижениеДС Из ОтчетОПродажах.ДвиженияДС Цикл
			СписокДвиженийДС.Добавить(ДвижениеДС, ДвижениеДС.Дата);
		КонецЦикла;
		СписокДвиженийДС.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ОтчетОПродажах.ДвиженияДС = СписокДвиженийДС.ВыгрузитьЗначения();
		
		
		СписокОтчетов.Добавить(ОтчетОПродажах, ОтчетОПродажах.ДатаЗакрытияСмены);
	КонецЦикла;
	
	// сортировка отчетов
	СписокОтчетов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	ДанныеОПродажах = СписокОтчетов.ВыгрузитьЗначения();
	
КонецПроцедуры

#КонецОбласти
