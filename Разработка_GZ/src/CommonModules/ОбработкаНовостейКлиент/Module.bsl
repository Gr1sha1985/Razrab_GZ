///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостейКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСоСпискомНовостей

// Процедура показывает список значений новостей, из которого можно открыть новость или перейти к списку новостей.
//
// Параметры:
//  ФормаВладелец          - ФормаКлиентскогоПриложения - форма, в которой нужно открыть список значений;
//  СписокЛентНовостей     - СписокЗначений, Массив из СправочникСсылка.ЛентыНовостей, Неопределено - в каких лентах новостей искать новость;
//  ИмяМетаданных          - Строка - имя метаданных, обязательная часть идентификатора новости;
//  ИмяФормы               - Строка, Неопределено - имя формы, необязательная часть идентификатора новости;
//  ИмяСобытия             - Строка, Неопределено - имя события, необязательная часть идентификатора новости;
//  ПараметрыОткрытияФормы - Структура - структура, передаваемая форме контекстных новостей с ключами:
//    * ЗаголовокФормы                - Строка - заголовок формы контекстных новостей;
//    * СкрыватьКолонкуЛентаНовостей  - Булево - Истина, если надо скрыть колонку "ЛентаНовостей";
//    * СкрыватьКолонкуПодзаголовок   - Булево - Истина, если надо скрыть колонку "Подзаголовок";
//    * СкрыватьКолонкуДатаПубликации - Булево - Истина, если надо скрыть колонку "ДатаПубликации";
//    * ПоказыватьПанельПоиска        - Булево - Истина, если надо показать группу поиска текста в новостях;
//    * ПоказыватьПанельНавигации     - Булево - Истина, если надо показать гиперссылку перехода к списку всех новостей;
//    * ИнициаторОткрытияНовости      - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях;
//    * РежимОткрытияОкна             - Строка - режим открытия окна ("Независимый", "БлокироватьОкноВладельца" (по-умолчанию),
//                                         "БлокироватьВесьИнтерфейс");
//    * СписокНовостей                - СписокЗначений - Если передан непустой список новостей, то он полностью заменяет или дополняет
//                                         список контекстных новостей (в зависимости от параметра ПропуститьЗаполнениеНовостями);
//                                         Никакого контроля списка новостей (пометка на удаление, просроченность и т.п.) не осуществляется;
//    * СортировкаСпискаНовостей      - Строка - поля сортировки. Работает только если заполнен СписокНовостей;
///   * ПропуститьЗаполнениеНовостями - Булево - если Истина, то стандартного расчета списка контекстных новостей
//                                         производиться НЕ будет - все новости будут взяты из СписокНовостей.
//
Процедура ПоказатьКонтекстныеНовости(
			ФормаВладелец,
			СписокЛентНовостей,
			ЗНАЧ ИмяМетаданных,
			ЗНАЧ ИмяФормы = Неопределено,
			ЗНАЧ ИмяСобытия = Неопределено,
			ПараметрыОткрытияФормы = Неопределено) Экспорт

#Область Инициализация

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	НовыеПараметрыОткрытияФормы = Новый Структура;
		НовыеПараметрыОткрытияФормы.Вставить("СписокЛентНовостей"           , СписокЛентНовостей);
		// Если не преобразовать Неопределено в "", то форма откроется > 1 раза для одинаковых ключевых параметров и ключа уникальности.
		НовыеПараметрыОткрытияФормы.Вставить("ИмяМетаданных"                , ?(ИмяМетаданных = Неопределено, "", ИмяМетаданных));
		НовыеПараметрыОткрытияФормы.Вставить("ИмяФормы"                     , ?(ИмяФормы = Неопределено, "", ИмяФормы));
		НовыеПараметрыОткрытияФормы.Вставить("ИмяСобытия"                   , ?(ИмяСобытия = Неопределено, "", ИмяСобытия));
		НовыеПараметрыОткрытияФормы.Вставить("СписокНовостей"               , Новый СписокЗначений);
		НовыеПараметрыОткрытияФормы.Вставить("СортировкаСпискаНовостей"     , "");
		НовыеПараметрыОткрытияФормы.Вставить("ПропуститьЗаполнениеНовостями", Ложь);

	ТипСтрока         = Тип("Строка");
	ТипСтруктура      = Тип("Структура");
	ТипСписокЗначений = Тип("СписокЗначений");
	ТипБулево         = Тип("Булево");

#КонецОбласти

#Область Обработка

	Если ТипЗнч(ПараметрыОткрытияФормы) = ТипСтруктура Тогда
		Если ПараметрыОткрытияФормы.Свойство("ЗаголовокФормы")
				И ТипЗнч(ПараметрыОткрытияФормы.ЗаголовокФормы) = ТипСтрока
				И НЕ ПустаяСтрока(ПараметрыОткрытияФормы.ЗаголовокФормы) Тогда
			НовыеПараметрыОткрытияФормы.Вставить("ЗаголовокФормы", ПараметрыОткрытияФормы.ЗаголовокФормы);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СкрыватьКолонкуДатаПубликации")
				И ПараметрыОткрытияФормы.СкрыватьКолонкуДатаПубликации = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуДатаПубликации", ПараметрыОткрытияФормы.СкрыватьКолонкуДатаПубликации);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СкрыватьКолонкуПодзаголовок")
				И ПараметрыОткрытияФормы.СкрыватьКолонкуПодзаголовок = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуПодзаголовок", ПараметрыОткрытияФормы.СкрыватьКолонкуПодзаголовок);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СкрыватьКолонкуЛентаНовостей")
				И ПараметрыОткрытияФормы.СкрыватьКолонкуЛентаНовостей = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("СкрыватьКолонкуЛентаНовостей", ПараметрыОткрытияФормы.СкрыватьКолонкуЛентаНовостей);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("ПоказыватьПанельПоиска")
				И ПараметрыОткрытияФормы.ПоказыватьПанельПоиска = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("ПоказыватьПанельПоиска", ПараметрыОткрытияФормы.ПоказыватьПанельПоиска);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("ПоказыватьПанельНавигации")
				И ПараметрыОткрытияФормы.ПоказыватьПанельНавигации = Истина Тогда
			НовыеПараметрыОткрытияФормы.Вставить("ПоказыватьПанельНавигации", ПараметрыОткрытияФормы.ПоказыватьПанельНавигации);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("ИнициаторОткрытияНовости")
				И ТипЗнч(ПараметрыОткрытияФормы.ИнициаторОткрытияНовости) = ТипСтрока
				И НЕ ПустаяСтрока(ПараметрыОткрытияФормы.ИнициаторОткрытияНовости) Тогда
			НовыеПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", ПараметрыОткрытияФормы.ИнициаторОткрытияНовости);
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("РежимОткрытияОкна") Тогда
			Если ТипЗнч(ПараметрыОткрытияФормы.РежимОткрытияОкна) = ТипСтрока Тогда
				НовыеПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", ПараметрыОткрытияФормы.РежимОткрытияОкна);
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СписокНовостей") Тогда
			Если (ТипЗнч(ПараметрыОткрытияФормы.СписокНовостей) = ТипСписокЗначений)
				И (ПараметрыОткрытияФормы.СписокНовостей.Количество() > 0) Тогда
				НовыеПараметрыОткрытияФормы.Вставить("СписокНовостей", ПараметрыОткрытияФормы.СписокНовостей);
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("СортировкаСпискаНовостей") Тогда
			Если ТипЗнч(ПараметрыОткрытияФормы.СортировкаСпискаНовостей) = ТипСтрока Тогда
				НовыеПараметрыОткрытияФормы.Вставить("СортировкаСпискаНовостей", ПараметрыОткрытияФормы.СортировкаСпискаНовостей);
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыОткрытияФормы.Свойство("ПропуститьЗаполнениеНовостями") Тогда
			Если ТипЗнч(ПараметрыОткрытияФормы.ПропуститьЗаполнениеНовостями) = ТипБулево Тогда
				НовыеПараметрыОткрытияФормы.Вставить("ПропуститьЗаполнениеНовостями", ПараметрыОткрытияФормы.ПропуститьЗаполнениеНовостями);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаКонтекстныхНовостей"; // ИмяФормы
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыСпискаКонтекстныхНовостей(
		ИмяОткрываемойФормы,
		НовыеПараметрыОткрытияФормы);

	ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		НовыеПараметрыОткрытияФормы, // Параметры
		ФормаВладелец, // Владелец
		ИмяМетаданных); // Уникальность, если Ложь - то уникальность по-умолчанию

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытий

// В процедуре прописываются вызовы процедур и функций, обязательные для чтения новостей.
// После обработки стандартных событий, управление передается в переопределяемый модуль.
//
// Параметры:
//  НовостьСсылка    - СправочникСсылка.Новости - Ссылка на новость;
//  Форма            - ФормаКлиентскогоПриложения - Форма-владелец, откуда вызывается обработчик;
//  СписокПараметров - СписокЗначений - произвольный список параметров.
//
Процедура ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров) Экспорт

	ПропуститьПереопределение = Ложь;

	ТипСписокЗначений = Тип("СписокЗначений");

	Если ТипЗнч(СписокПараметров) = ТипСписокЗначений Тогда
		НайденноеДействие = НайтиЭлементСпискаЗначений(
			СписокПараметров,
			Новый Структура("ВариантПоиска, ЗначениеПоиска",
				"ПоПредставлениюБезУчетаРегистра",
				"Действие"));
		Если НайденноеДействие <> Неопределено Тогда
			Если НайденноеДействие.Значение = "ОткрытьОбработку" Тогда
				ОткрываемаяФорма = НайтиЭлементСпискаЗначений(
					СписокПараметров,
					Новый Структура("ВариантПоиска, ЗначениеПоиска",
						"ПоПредставлениюБезУчетаРегистра",
						"ИмяФормы"));
				Если ТипЗнч(ОткрываемаяФорма) = Тип("ЭлементСпискаЗначений") Тогда
					ОткрытьФорму(ОткрываемаяФорма.Значение);
				КонецЕсли;
				ПропуститьПереопределение = Истина;
			ИначеЕсли НайденноеДействие.Значение = "ОткрытьОбработкуОбновления" Тогда
				// ////? Реализовать запуск обработки обновления конфигурации
				ПропуститьПереопределение = Истина;
			ИначеЕсли НайденноеДействие.Значение = "Предупреждение" Тогда
				Текст = НайтиЭлементСпискаЗначений(
					СписокПараметров,
					Новый Структура("ВариантПоиска, ЗначениеПоиска",
						"ПоПредставлениюБезУчетаРегистра",
						"Текст"));
				Если ТипЗнч(Текст) = Тип("ЭлементСпискаЗначений") Тогда
					Текст = Текст.Значение;
					Заголовок = НайтиЭлементСпискаЗначений(
						СписокПараметров,
						Новый Структура("ВариантПоиска, ЗначениеПоиска",
							"ПоПредставлениюБезУчетаРегистра",
							"Заголовок"));
					Если ТипЗнч(Заголовок) = Тип("ЭлементСпискаЗначений") Тогда
						Заголовок = Заголовок.Значение;
					Иначе
						Заголовок = НСтр("ru='Информация'");
					КонецЕсли;
					ПоказатьПредупреждение(
						,
						Текст,
						0,
						Заголовок);
				КонецЕсли;
				ПропуститьПереопределение = Истина;
			Иначе
				// Другие действия.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойНовости

// Функция показывает новость в отдельном окне.
//
// Параметры:
//  НовостьСсылка          - СправочникСсылка.Новости - открываемая новость;
//  ПараметрыОткрытияФормы - Структура - параметры открытия формы новости. Можно заполнять:
//    * Ключ - Ссылка на новость;
//    * РежимОткрытияОкна - Строка - "БлокироватьОкноВладельца" или любое другое значение (которое будет воспринято как "Независимое");
//    * ИнициаторОткрытияНовости - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях.
//  ФормаВладелец          - ФормаКлиентскогоПриложения - форма, из которой нужно открыть форму новости;
//  Уникальность           - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения, Неопределено - форма с новостью.
//
Функция ПоказатьНовость(
			НовостьСсылка,
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", "Неизвестно"); // Идентификатор.
	КонецЕсли;

	Если НЕ ПараметрыОткрытияФормы.Свойство("Ключ") Тогда
		ПараметрыОткрытияФормы.Вставить("Ключ", НовостьСсылка);
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаНовости"; // ИмяФормы
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыНовости(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормы);

	ФормаНовости = ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности

	Возврат ФормаНовости;

КонецФункции

// Функция показывает несколько новостей в отдельном окне.
//
// Параметры:
//  ПараметрыОткрытияФормы   - Структура - параметры открытия формы новости. Можно заполнять:
//     * РежимОткрытияОкна    - Строка - или "БлокироватьОкноВладельца", или любое другое значение (которое будет воспринято как "Независимое");
//     * Заголовок            - Строка - Заголовок формы просмотра очень важных новостей;
//     * СписокНовостей       - СписокЗначений - Список новостей (дополняет параметр "АдресМассиваНовостей").
//                              Если передан список новостей, то в нем не производится отбор по идентификатору формы или идентификатору события,
//                                а также не осуществляется никакого другого контроля (пометка на удаление, просроченность и т.п.);
//     * АдресМассиваНовостей - Строка - Адрес временного хранилища с массивом структур новостей;
//     * ИдентификаторФормы   - Строка - идентификатор формы. Имеет смысл только вместе с параметром АдресМассиваНовостей;
//     * ИдентификаторСобытия - Строка - идентификатор события. Имеет смысл только вместе с параметром АдресМассиваНовостей;
//     * ИнициаторОткрытияНовости - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях.
//  ФормаВладелец            - ФормаКлиентскогоПриложения - форма, из которой нужно открыть форму новости;
//  Уникальность             - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения, Неопределено - форма со списком новостей.
//
Функция ПоказатьНовости(
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", "Неизвестно"); // Идентификатор.
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаНовостейСоСписком"; //"Справочник.Новости.Форма.ФормаНовостей", // ИмяФормы
	ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыСпискаОченьВажныхКонтекстныхНовостей(
		ИмяОткрываемойФормы,
		ПараметрыОткрытияФормы);

	ФормаНовостей = ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности

	Возврат ФормаНовостей;

КонецФункции

// Функция показывает основную форму новостей с возможностью позиционирования на папке.
//
// Параметры:
//  ПараметрыОткрытияФормы   - Структура - параметры открытия формы новости. Можно заполнять:
//     * АктивироватьПапку_ВариантОтбора  - Число - 0 (позиционироваться на "Все новости") или 1 (позиционироваться на выбранной ленте новостей);
//     * АктивироватьПапку_ЗначениеОтбора - Неопределено, СправочникСсылка.ЛентыНовостей - значение ленты новостей (если выбран вариант позиционирования 1).
//  ФормаВладелец            - ФормаКлиентскогоПриложения - форма, из которой нужно открыть форму новости;
//  Уникальность             - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения, Неопределено - форма с новостью.
//
Функция ПоказатьОсновнуюФормуНовостей(
			ПараметрыОткрытияФормы = Неопределено,
			ФормаВладелец = Неопределено,
			Уникальность = Ложь) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ПараметрыОткрытияФормы) <> ТипСтруктура Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;

	ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаПросмотраНовостей"; // ИмяФормы

	ФормаНовостей = ОткрытьФорму(
		ИмяОткрываемойФормы, // ИмяФормы
		ПараметрыОткрытияФормы,
		ФормаВладелец, // Владелец
		Уникальность); // Уникальность, если Ложь - то уникальность по-умолчанию, Истина - нет проверки уникальности
	Если ФормаНовостей.ЭтоПовторноеОткрытие = Истина Тогда
		Если ПараметрыОткрытияФормы.Свойство("АктивироватьПапку_ВариантОтбора")
				И ПараметрыОткрытияФормы.Свойство("АктивироватьПапку_ЗначениеОтбора") Тогда
			ФормаНовостей.НайтиИАктивизироватьПапку(Новый Структура("ВариантОтбора, ЗначениеОтбора",
				ПараметрыОткрытияФормы.АктивироватьПапку_ВариантОтбора,
				ПараметрыОткрытияФормы.АктивироватьПапку_ЗначениеОтбора));
		КонецЕсли;
	КонецЕсли;

	Возврат ФормаНовостей;

КонецФункции

#КонецОбласти

#Область БСПНастройкиПрограммы

// Обработчик события ПриИзменении() элемента БИПВключитьРаботуСНовостями
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//	Элемент - ПолеФормы - элементы управления формы панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_ВключитьРаботуСНовостямиПриИзменении(Форма, Элемент) Экспорт

	Если НЕ Форма.БИПВключитьРаботуСНовостями Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru='Настоятельно <b>не рекомендуется</b> отключать общую опцию получения новостей.'")));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(НСтр("ru='Это позволит оперативно получать важную информацию от службы поддержки фирмы 1С.'"));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(НСтр("ru='Отключить опцию получения новостей?'"));
		ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Отключить", НСтр("ru='Отключить'"));
		СписокКнопок.Добавить("НеОтключать", НСтр("ru='Оставить включенной'"));
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
			"ИнтернетПоддержкаИСервисы_ВключитьРаботуСНовостямиПриОтключении", // Имя процедуры.
			ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент"),
			ДополнительныеПараметры);
		ПоказатьВопрос(
			ОписаниеОповещенияОЗавершении,
			ТекстВопроса,
			СписокКнопок,
			,
			"НеОтключать", // Идентификатор.
			НСтр("ru='Предупреждение'"));
	Иначе
		// Обработка изменения ФО "РазрешенаРаботаСНовостями".
		ОбработкаНовостейВызовСервера.ИнтернетПоддержкаИСервисы_ВключитьРаботуСНовостямиПриИзменении(
			Форма.БИПВключитьРаботуСНовостями);
		Форма.Элементы.БИПУправлениеНовостями.Видимость =
			Форма.БИПВключитьРаботуСНовостями;
		ОбновитьПовторноИспользуемыеЗначения();
		// Конец Обработка изменения ФО "РазрешенаРаботаСНовостями".
	КонецЕсли;

КонецПроцедуры

// Обработчик команды БИПУправлениеНовостями
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//	Команда - КомандаФормы - команда на панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_УправлениеНовостями(Форма, Команда) Экспорт

	ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма",
		,
		ЭтотОбъект,
		"",
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Процедура обрабатывает нажатие кнопки, принадлежащей механизму контекстных новостей.
// Должна вызываться из Подключаемый_ОбработкаНовости(Команда).
// После обработки стандартных событий, управление передается в переопределяемый модуль.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать нажатие на кнопку механизма контекстных новостей;
//  Команда - КомандаФормы, Структура - вызванная команда или Структура с ключом "Имя".
//
Процедура КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");

	ПропуститьПереопределение = Ложь;

	// По имени команды открыть новость.

	Если (Команда.Имя = "Команда_Новость_Список") ИЛИ (Команда.Имя = "КонтекстныеНовостиСписок") Тогда
		ПараметрыОткрытияФормыКонтекстныхНовостей = Новый Структура;
		ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("ЗаголовокФормы", Форма.Новости.ЗаголовокФормыКонтекстныхНовостей);
		ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СкрыватьКолонкуЛентаНовостей", Истина);
		ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СкрыватьКолонкуПодзаголовок", Ложь);
		ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("СкрыватьКолонкуДатаПубликации", Ложь);
		ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("ПоказыватьПанельНавигации", Ложь);
		ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца"); // Идентификатор.
		ПараметрыОткрытияФормыКонтекстныхНовостей.Вставить("ИнициаторОткрытияНовости",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"КонтекстныеНовостиОткрытиеСпискаИзМеню/Метаданные=%1/Форма=%2", // Идентификатор.
				Форма.Новости.Метаданные,
				Форма.Новости.Форма));
		ОбработкаНовостейКлиентПереопределяемый.ПереопределитьПараметрыОткрытияФормыКонтекстныхНовостей(ПараметрыОткрытияФормыКонтекстныхНовостей);
		ПоказатьКонтекстныеНовости(
			Форма, // ФормаВладелец
			Неопределено, // СписокЛентНовостей = По всем. Форма контекстных новостей сама рассчитает список лент новостей, исходя из их видимости пользователю.
			Форма.Новости.Метаданные, // ИмяМетаданных
			Форма.Новости.Форма, // ИмяФормы
			, // ИмяСобытия = По всем
			ПараметрыОткрытияФормыКонтекстныхНовостей); // ПараметрыОткрытия
		ПропуститьПереопределение = Истина;

	ИначеЕсли (Команда.Имя = "ВидимостьПанелиКонтекстныхНовостей") Тогда
		ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, НЕ Форма.Элементы.ПанельКонтекстныхНовостей.Видимость);

	ИначеЕсли СтрНайти(ВРег(Команда.Имя), ВРег("Команда_Новость_")) = 1 Тогда
		Идентификатор = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя)-16));
		Если ТипЗнч(Форма.Новости.Новости) = ТипМассив Тогда
			НайденнаяНовость = Неопределено;
			Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
				Если ТекущаяНовость.НомерСтрокиНовости = Идентификатор Тогда
					НайденнаяНовость = ТекущаяНовость;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Форма.Новости.Новости = Неопределено Тогда
			// Такое возможно, когда в форму передается не массив новостей, а адрес хранилища.
			НайденнаяНовость = Неопределено;
			Если (ТипЗнч(Форма.Новости.АдресМассиваНовостей) = ТипСтрока)
					И (НЕ ПустаяСтрока(Форма.Новости.АдресМассиваНовостей)) Тогда
				НайденнаяНовость = ОбработкаНовостейВызовСервера.НайтиКонтекстнуюНовостьВМассиве(Форма.Новости.АдресМассиваНовостей, Идентификатор);
			КонецЕсли;
		Иначе // Таблица значений
			НайденнаяНовость = Форма.Новости.Новости.НайтиПоИдентификатору(Идентификатор);
		КонецЕсли;
		Если НайденнаяНовость <> Неопределено Тогда
			Форма.Новости.ТекущаяНовость = НайденнаяНовость.Новость;
			// Одна и та же новость может относиться к разным формам одного объекта метаданных.
			// Чтобы определить, в каком окне открывать новость - надо найти все новости, связанные с этой формой.
			// Если хотя бы в одной строке для этой новости есть галочка "Показывать в форме объекта", Тогда вывести новость в форме объекта.
			ПоказыватьВФормеОбъекта = Ложь;
			// Если новостей > 20, то это может привести к неявному вызову сервера.
			Если ТипЗнч(Форма.Новости.Новости) = ТипМассив Тогда
				МассивНовостейДляЭтойФормы = Новый Массив;
				Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
					Если ТекущаяНовость.Форма = Форма.Новости.Форма Тогда
						МассивНовостейДляЭтойФормы.Добавить(ТекущаяНовость);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Форма.Новости.Новости = Неопределено Тогда
				// Такое возможно, когда в форму передается не массив новостей, а адрес хранилища.
				// ////? При показе новостей в форме, в которой хранится только адрес временного хранилища, а не массив новостей
				//  всегда открывать новость в отдельном окне.
				ПоказыватьВФормеОбъекта = Ложь;
			Иначе // Таблица значений
				МассивНовостейДляЭтойФормы = Форма.Новости.Новости.НайтиСтроки(
					Новый Структура("Форма", Форма.Новости.Форма));
			КонецЕсли;
			Для каждого ТекущаяНовостьДляЭтойФормы Из МассивНовостейДляЭтойФормы Цикл
				Если ТекущаяНовостьДляЭтойФормы.ПоказыватьВФормеОбъекта = Истина Тогда
					ПоказыватьВФормеОбъекта = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПоказыватьВФормеОбъекта = Истина Тогда
				Форма.ТекстНовостиХТМЛ = ПолучитьХТМЛТекстНовостей(НайденнаяНовость.Новость);
				Если ПустаяСтрока(Форма.ТекстНовостиХТМЛ) Тогда
					Форма.Элементы.ГруппаТекстНовости.Видимость = Ложь;
				Иначе
					Форма.Элементы.ГруппаТекстНовости.Видимость = Истина;
				КонецЕсли;
			Иначе
				Если НЕ НайденнаяНовость.Новость.Пустая() Тогда
					ПараметрыОткрытияФормы = Новый Структура;
					ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"КонтекстныеНовостиОткрытиеИзМеню/Метаданные=%1/Форма=%2", // Идентификатор.
							Форма.Новости.Метаданные,
							Форма.Новости.Форма));
					ПараметрыОткрытияФормы.Вставить("НовостьНаименование", НайденнаяНовость.НовостьНаименование); // Заголовок новости.
					ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", НайденнаяНовость.НовостьКодЛентыНовостей); // Код ленты новостей.
					ПоказатьНовость(
						НайденнаяНовость.Новость, // НовостьСсылка
						, // ПараметрыОткрытияФормы. БлокироватьОкноВладельца не нужно, т.к. неизвестно что будет за владелец
						       // и блокировать первое попавшееся окно неправильно.
						Форма, // ФормаВладелец.
						Ложь); // Уникальность по-умолчанию (по ссылке).
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПропуститьПереопределение = Истина;

	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда);
	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает оповещение, приходящее в форму через обработчик ОбработкаОповещения.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать оповещение;
//  ИмяСобытия   - Произвольный - данные обработчика оповещения;
//  Параметр     - Произвольный - данные обработчика оповещения;
//  Источник     - Произвольный - данные обработчика оповещения.
//
Процедура КонтекстныеНовости_ОбработкаОповещения(
			Форма,
			ИмяСобытия,
			Параметр,
			Источник) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура      = Тип("Структура");
	ТипМассив         = Тип("Массив");
	ТипСоответствие   = Тип("Соответствие");
	ТипСтрока         = Тип("Строка");
	ТипЧисло          = Тип("Число");
	ТипСписокЗначений = Тип("СписокЗначений");

	ПропуститьПереопределение = Ложь;

	Если ИмяСобытия = "Новости. Изменена пометка списка новостей" Тогда // АПК:761 Идентификатор.
		//
	ИначеЕсли ИмяСобытия = "Новости. Новость прочтена" Тогда // АПК:761 Идентификатор.
		// Параметр = новое значение "НовостьПрочтена".
		// Источник = Новость.
		Если (ТипЗнч(Форма.Новости) = ТипСтруктура) Тогда
			// Если новости хранятся на клиенте (Форма.Новости.Новости).
			Если (Форма.Новости.Свойство("Новости"))
					И (ТипЗнч(Форма.Новости.Новости) = ТипМассив) Тогда // Новости хранятся на клиенте
				Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
					Если ТекущаяНовость.Новость = Источник Тогда
						ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
						// Прерывать цикл не нужно, т.к. одна новость может быть привязана к разным событиям.
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			// Панель контекстных новостей.
			Если (Форма.Новости.Свойство("НовостиДляПанелиКонтекстныхНовостей"))
					И (ТипЗнч(Форма.Новости.НовостиДляПанелиКонтекстныхНовостей) = ТипМассив) Тогда // Новости хранятся на клиенте
				Для Каждого ТекущаяНовость Из Форма.Новости.НовостиДляПанелиКонтекстныхНовостей Цикл
					Если ТекущаяНовость.Новость = Источник Тогда
						ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
						Прервать; // Здесь новости не должны повторяться.
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Если в форме отображается панель контекстных новостей, то перерисовать ее.
			Если (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей")
					ИЛИ (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
					ИЛИ (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание") Тогда
				ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
			КонецЕсли;

			// Новости могут рассчитываться на клиенте (в ПриОткрытии), а не на сервере (в ПриСозданииНаСервере)
			//  и хранятся в кэше (в глобальной переменной ПараметрыПриложения),
			//  в таком случае необходимо найти новость в кэше и там исправить этот признак.
			Если (Форма.Новости.Свойство("Метаданные"))
					И (Форма.Новости.Свойство("Форма")) Тогда // Есть идентификаторы метаданных и формы
				ИдентификаторМетаданных = Форма.Новости.Метаданные;
				ИдентификаторФормы      = Форма.Новости.Форма;
				Если (Форма.Новости.Свойство("ПолучатьНовостиНаСервере"))
						И (Форма.Новости.ПолучатьНовостиНаСервере = Ложь) Тогда // Новости рассчитываются в ПриОткрытии
					// ПараметрыПриложения - глобальная переменная.
					Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
						ПараметрыПриложения = Новый Соответствие;
					КонецЕсли;
					ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
					ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];
					Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
						НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
						Если ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие Тогда
							НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
							Если ТипЗнч(НайденноеЗначениеДляФормы) = ТипСтруктура Тогда
								// На срок заполнения данных и на другие реквизиты не обращаем внимания.
								Если НайденноеЗначениеДляФормы.Свойство("Новости")
										И ТипЗнч(НайденноеЗначениеДляФормы.Новости) = ТипМассив Тогда
									Для Каждого ТекущаяНовость Из НайденноеЗначениеДляФормы.Новости Цикл
										Если ТипЗнч(ТекущаяНовость) = ТипСтруктура Тогда
											Если ТекущаяНовость.Свойство("Новость")
													И ТекущаяНовость.Новость = Источник Тогда
												Если ТекущаяНовость.Свойство("Прочтена") Тогда // Прочтена, ОповещениеВключено
													ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
													// Прерывать цикл не нужно, т.к. одна новость может быть привязана к разным событиям.
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Если новости хранятся на сервере (Форма.Новости.Новости - пусто,
			//  Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина и
			//  Форма.Новости.АдресМассиваНовостей - заполнено адресом),
			//  тогда необходимо заполнить специальные реквизиты "СписокНовостейИзменениеПризнака_Прочтена" и "СписокНовостейИзменениеПризнака_ОповещениеВключено",
			//  и в дальнейшем анализировать эти реквизиты вместе с массивом структур новостей, хранимой на сервере.
			Если (Форма.Новости.Свойство("ХранитьМассивНовостейТолькоНаСервере"))
					И (Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина) Тогда // Новости хранятся на сервере
				Если (Форма.Новости.Свойство("АдресМассиваНовостей"))
						И (ТипЗнч(Форма.Новости.АдресМассиваНовостей) = ТипСтрока)
						И (НЕ (ПустаяСтрока(Форма.Новости.АдресМассиваНовостей))) Тогда // Новости хранятся на сервере, заполнен адрес хранилища.
					Если (Форма.Новости.Свойство("СписокНовостейИзменениеПризнака_Прочтена"))
							И (ТипЗнч(Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена) = ТипСписокЗначений) Тогда // Есть хранилище для списка изменения.
						НайденнаяНовость = Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена.НайтиПоЗначению(Источник);
						Если НайденнаяНовость = Неопределено Тогда
							Форма.Новости.СписокНовостейИзменениеПризнака_Прочтена.Добавить(Источник, , ?(Параметр = Истина, Истина, Ложь));
						Иначе
							НайденнаяНовость.Пометка = ?(Параметр = Истина, Истина, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Новости. Изменено состояние оповещения о новости" Тогда // АПК:761 Идентификатор.
		// Параметр = новое значение "ОповещениеВключено".
		// Источник = Новость.
		Если (ТипЗнч(Форма.Новости) = ТипСтруктура) Тогда
			// Если новости хранятся на клиенте (Форма.Новости.Новости).
			Если (Форма.Новости.Свойство("Новости"))
					И (ТипЗнч(Форма.Новости.Новости) = ТипМассив) Тогда // Новости хранятся на клиенте
				Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
					Если ТекущаяНовость.Новость = Источник Тогда
						ТекущаяНовость.ОповещениеВключено = ?(Параметр = Истина, Истина, Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Новости могут рассчитываться на клиенте (в ПриОткрытии), а не на сервере (в ПриСозданииНаСервере)
			//  и хранятся в кэше (в глобальной переменной ПараметрыПриложения),
			//  в таком случае необходимо найти новость в кэше и там исправить этот признак.
			Если (Форма.Новости.Свойство("Метаданные"))
					И (Форма.Новости.Свойство("Форма")) Тогда // Есть идентификаторы метаданных и формы
				ИдентификаторМетаданных = Форма.Новости.Метаданные;
				ИдентификаторФормы      = Форма.Новости.Форма;
				Если (Форма.Новости.Свойство("ПолучатьНовостиНаСервере"))
						И (Форма.Новости.ПолучатьНовостиНаСервере = Ложь) Тогда // Новости рассчитываются в ПриОткрытии.
					// ПараметрыПриложения - глобальная переменная.
					Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
						ПараметрыПриложения = Новый Соответствие;
					КонецЕсли;
					ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
					ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];
					Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
						НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
						Если ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие Тогда
							НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
							Если ТипЗнч(НайденноеЗначениеДляФормы) = ТипСтруктура Тогда
								// На срок заполнения данных и на другие реквизиты не обращаем внимания.
								Если НайденноеЗначениеДляФормы.Свойство("Новости")
										И ТипЗнч(НайденноеЗначениеДляФормы.Новости) = ТипМассив Тогда
									Для Каждого ТекущаяНовость Из НайденноеЗначениеДляФормы.Новости Цикл
										Если ТипЗнч(ТекущаяНовость) = ТипСтруктура Тогда
											Если ТекущаяНовость.Свойство("Новость")
													И ТекущаяНовость.Новость = Источник Тогда
												Если ТекущаяНовость.Свойство("ОповещениеВключено") Тогда // Прочтена, ОповещениеВключено
													ТекущаяНовость.Прочтена = ?(Параметр = Истина, Истина, Ложь);
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Если новости хранятся на сервере (Форма.Новости.Новости - пусто,
			//  Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина и
			//  Форма.Новости.АдресМассиваНовостей - заполнено адресом),
			//  тогда необходимо заполнить специальные реквизиты "СписокНовостейИзменениеПризнака_Прочтена" и "СписокНовостейИзменениеПризнака_ОповещениеВключено",
			//  и в дальнейшем анализировать эти реквизиты вместе с массивом структур новостей, хранимой на сервере.
			Если (Форма.Новости.Свойство("ХранитьМассивНовостейТолькоНаСервере"))
					И (Форма.Новости.ХранитьМассивНовостейТолькоНаСервере = Истина) Тогда // Новости хранятся на сервере
				Если (Форма.Новости.Свойство("АдресМассиваНовостей"))
						И (ТипЗнч(Форма.Новости.АдресМассиваНовостей) = ТипСтрока)
						И (НЕ (ПустаяСтрока(Форма.Новости.АдресМассиваНовостей))) Тогда // Новости хранятся на сервере, заполнен адрес хранилища.
					Если (Форма.Новости.Свойство("СписокНовостейИзменениеПризнака_ОповещениеВключено"))
							И (ТипЗнч(Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено) = ТипСписокЗначений) Тогда // Есть хранилище для списка изменения.
						НайденнаяНовость = Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено.НайтиПоЗначению(Источник);
						Если НайденнаяНовость = Неопределено Тогда
							Форма.Новости.СписокНовостейИзменениеПризнака_ОповещениеВключено.Добавить(Источник, , ?(Параметр = Истина, Истина, Ложь));
						Иначе
							НайденнаяНовость.Пометка = ?(Параметр = Истина, Истина, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Новости. Собрать информацию об открытых окнах" Тогда // АПК:761 Идентификатор.
		// Для целей отладки форма обработки "УправлениеНовостями" рассылает такое оповещение.
		// Если в форму встроен механизм контекстных новостей, то в реквизит "ИнформацияОбОткрытыхОкнах" формы обработки
		//  надо добавить информацию об открытой форме, загруженных на текущий момент контекстных новостях, идентификаторах и т.п.
		// Так как мы знаем источник, и уверены, что в нем есть реквизит "ИнформацияОбОткрытыхОкнах" типа "СписокЗначений",
		//  то пишем в этот реквизит напрямую.
		Попытка
			Источник.ИнформацияОбОткрытыхОкнах.Добавить(Форма.Новости, Форма.ИмяФормы);
		Исключение
			Источник.ИнформацияОбОткрытыхОкнах.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Форма.ИмяФормы);
		КонецПопытки;
	ИначеЕсли ИмяСобытия = "Новости. Продолжить автолистание в Панели контекстных новостей" Тогда // АПК:761 Идентификатор.
		// Панель контекстных новостей.
		Если Параметр = Форма.УникальныйИдентификатор Тогда
			// Если в свойствах контекстных новостей формы установлен признак автолистания,
			//  то показать следующую новость из списка (или первую, если достигли конца).
			ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = 0;
			КоличествоНовостейДляПанелиКонтекстныхНовостей = 0;
			СпособОтображенияПанелиКонтекстныхНовостей = "";
			Форма.Новости.Свойство("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей", ИндексТекущейНовостиДляПанелиКонтекстныхНовостей);
			Форма.Новости.Свойство("КоличествоНовостейДляПанелиКонтекстныхНовостей", КоличествоНовостейДляПанелиКонтекстныхНовостей);
			Форма.Новости.Свойство("СпособОтображенияПанелиКонтекстныхНовостей", СпособОтображенияПанелиКонтекстныхНовостей);
			Если СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание" Тогда // Идентификатор.
				Если ТипЗнч(ИндексТекущейНовостиДляПанелиКонтекстныхНовостей) <> ТипЧисло Тогда
					ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = 0;
				КонецЕсли;
				Если ТипЗнч(КоличествоНовостейДляПанелиКонтекстныхНовостей) <> ТипЧисло Тогда
					КоличествоНовостейДляПанелиКонтекстныхНовостей = 0;
				КонецЕсли;
				Если КоличествоНовостейДляПанелиКонтекстныхНовостей > 1 Тогда // Для единственной новости не имеет смысла что-то перелистывать.
					ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = ИндексТекущейНовостиДляПанелиКонтекстныхНовостей + 1;
					Если (ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = КоличествоНовостейДляПанелиКонтекстныхНовостей) Тогда
						ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = 0;
					КонецЕсли;
					Форма.Новости.Вставить("ИндексТекущейНовостиДляПанелиКонтекстныхНовостей", ИндексТекущейНовостиДляПанелиКонтекстныхНовостей);
					ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Новости. Выключить анимацию иконки в Панели контекстных новостей" Тогда // АПК:761 Идентификатор.
		// Панель контекстных новостей.
		Если Параметр = Форма.УникальныйИдентификатор Тогда
			// Если видна декорация "ПанельКонтекстныхНовостей_КартинкаНовостиИнформация",
			//  то заменить картинку в ней на "ИнформацияНовости16Статичная".
			// Это односторонняя замена, обратной замены (на анимированную картинку) не предусмотрено.
			НайденнаяДекорацияКартинки = Форма.Элементы.Найти("ПанельКонтекстныхНовостей_КартинкаНовостиИнформация");
			Если (НайденнаяДекорацияКартинки <> Неопределено)
					И (НайденнаяДекорацияКартинки.Видимость = Истина) Тогда
				НайденнаяДекорацияКартинки.Картинка = БиблиотекаКартинок.ИнформацияНовости16Статичная;
				// Переключение иконки из анимированной в статичную - однократное,
				//  поэтому можно удалить запись о необходимости переключения картинки.
				// ПараметрыПриложения - глобальная переменная.
				Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
					ПараметрыПриложения = Новый Соответствие;
				КонецЕсли;
				ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
				ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
				Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
					ПараметрыАнимированныхИконок = Новый Соответствие;
				КонецЕсли;
				ПараметрыАнимированныхИконок.Удалить(Форма.УникальныйИдентификатор);
				ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ОбработкаОповещения(
			Форма,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при открытии формы с контекстными новостями.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие ПриОткрытии.
//
Процедура КонтекстныеНовости_ПриОткрытии(Форма) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПриОткрытии_ПередСтандартнойОбработкой(Форма, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;

	ТипДата         = Тип("Дата");
	ТипСтруктура    = Тип("Структура");
	ТипСоответствие = Тип("Соответствие");

	ПропуститьПереопределение = Ложь;

	Если (ТипЗнч(Форма.Новости) = ТипСтруктура)
			И (
				((Форма.Новости.Свойство("КоличествоОченьВажныхНовостейПриОткрытии"))
					И (Форма.Новости.КоличествоОченьВажныхНовостейПриОткрытии > 0))
				ИЛИ ((Форма.Новости.Свойство("КоличествоВажныхНовостейПриОткрытии"))
					И (Форма.Новости.КоличествоВажныхНовостейПриОткрытии > 0))
				ИЛИ ((Форма.Новости.Свойство("ПолучатьНовостиНаСервере"))
					И (Форма.Новости.ПолучатьНовостиНаСервере = Ложь))) Тогда

		ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей = 0.5;

		// Если в параметрах запуска передали "ОтложитьПоказНовостей=ХХ;", то необходимо начать показ всех важных и очень важных новостей
		//  только после этого интервала.
		// Для этого в глобальной переменной ПараметрыПриложения сохраняется значение времени начала показа новостей.
		// ПараметрыПриложения - глобальная переменная.
		Если ТипЗнч(ПараметрыПриложения) = ТипСоответствие Тогда
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.ВремяНачалаПоказаНовостей";
			ВремяНачалаПоказаНовостей = ПараметрыПриложения.Получить(ИмяПараметраПриложения);
			Если (ТипЗнч(ВремяНачалаПоказаНовостей) = ТипДата) Тогда
				// Эта дата - в будущем?
				ТекущаяВремяНачалаПоказаНовостей = ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей;
				Если ВремяНачалаПоказаНовостей > ТекущаяВремяНачалаПоказаНовостей Тогда
					ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей = (ВремяНачалаПоказаНовостей - ТекущаяВремяНачалаПоказаНовостей);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ОбработкаНовостейКлиентСерверПереопределяемый.ПереопределитьИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей(ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей);
		Форма.ПодключитьОбработчикОжидания(
			"Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии",
			ИнтервалПодключенияОбработчикаПроверкиКонтекстныхНовостей,
			Истина); // Однократно

	КонецЕсли;

	// Панель контекстных новостей.
	ПанельКонтекстныхНовостей_УправлениеГлобальнымиОбработчиками(Форма);

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПриОткрытии_ПослеСтандартнойОбработки(Форма);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается из подключаемой процедуры показа контекстных новостей для отображения
//  важных и очень важных новостей при открытии формы.
//
// Параметры:
//  Форма                            - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие ПриОткрытии;
//  ИдентификаторыСобытийПриОткрытии - Строка, Массив из Строка - идентификаторы событий, по которым необходимо отбирать контекстные новости;
//  НастройкиПолученияНовостей       - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей     - Булево - если Истина, то в реквизите формы будут также сохраняться категории новостей.
//                                       Это может быть полезно для реализации особенного отбора новостей,
//                                         который невозможно реализовать с помощью регистров сведений ОтборыПоЛентамНовостей*.
//
Процедура КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(
			Форма,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей = Неопределено) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПередСтандартнойОбработкой(
		Форма,
		ИдентификаторыСобытийПриОткрытии,
		СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;

	ПропуститьПереопределение = Ложь;

	// Если новости еще не получены, то получить их.
	Если (Форма.Новости.ПолучатьНовостиНаСервере = Ложь) Тогда
		Форма_Новости_ИзКэша = ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			Форма.Новости.Метаданные,
			Форма.Новости.Форма,
			Форма.Новости.ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);
		ЗаполнитьЗначенияСвойств(
			Форма.Новости,
			Форма_Новости_ИзКэша,
			"Новости, КоличествоНовостей, КоличествоВажныхНовостейПриОткрытии, КоличествоОченьВажныхНовостейПриОткрытии, "
				+ "МассивСтруктурВажныхНовостей");
		// Следующие свойства НЕ будут скопированы (весь список ключей - в ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере):
		//   ЗаголовокФормыКонтекстныхНовостей,
		//   Метаданные,
		//   Форма,
		//   ТекущаяНовость,
		//   КоличествоНепрочитанныхНовостей,
		//   КоличествоПостоянныхНовостей,
		//   ПолучатьНовостиНаСервере,
		//   ХранитьМассивНовостейТолькоНаСервере,
		//   АдресМассиваНовостей,
		//   МассивСтруктурПостоянныхНовостей,
		//   СписокНовостейИзменениеПризнака_Прочтена,
		//   СписокНовостейИзменениеПризнака_ОповещениеВключено.
	КонецЕсли;

	// Показать важные и очень важные новости.
	Если (Форма.Новости.КоличествоВажныхНовостейПриОткрытии > 0)
			ИЛИ (Форма.Новости.КоличествоОченьВажныхНовостейПриОткрытии > 0) Тогда
		КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриПроизвольномСобытии(
			Форма,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);
	КонецЕсли;

	// Переопределение.
	Если ПропуститьПереопределение <> Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии_ПослеСтандартнойОбработки(Форма, ИдентификаторыСобытийПриОткрытии);
	КонецЕсли;

КонецПроцедуры

// Процедура отбирает новости по имени формы и имени события и, в зависимости от важности, отображает их.
// Эту процедуру следует вызывать, если в форме на клиенте хранится массив всех контекстных новостей.
// Если же на клиенте хранится только адрес временного хранилища всех новостей, то будет
//  невозможно просмотреть список важных новостей.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения, Структура - форма-владелец, в которой должен быть определен реквизит Новости произвольного типа (со структурой) с ключами:
//   * Новости                                  - Массив из Структура - массив структур всех новостей (со всеми важностями);
//   * АдресМассиваНовостей                     - Строка - адрес во временном хранилище (если массив Новости пустой);
//   * Метаданные                               - Строка - Имя метаданных этой формы;
//   * Форма                                    - Строка - Имя формы, по которому надо отбирать новости;
//   * ПолучатьНовостиНаСервере                 - Булево - Признак того, что новости были рассчитаны на сервере (Истина) или хранятся в кэше на клиенте (Ложь);
//   * ЗаголовокФормыКонтекстныхНовостей        - Строка - заголовок формы;
//   * МассивСтруктурВажныхНовостей             - Массив из Структура - Массив важных новостей для последовательного показа. Если он пустой, то перезаполняется заново;
//  ИдентификаторыСобытий - Строка, Массив из Строка - Имя события (имена событий), по которым надо отбирать новости;
//  НастройкиПолученияНовостей   - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей - Булево - если Истина, то в реквизите формы будут также сохраняться категории новостей.
//                                  Это может быть полезно для реализации особенного отбора новостей,
//                                    который невозможно реализовать с помощью регистров сведений ОтборыПоЛентамНовостей*.
//
Процедура КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриПроизвольномСобытии(
			Форма,
			ИдентификаторыСобытий,
			НастройкиПолученияНовостей = Неопределено) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтрока = Тип("Строка");
	ТипМассив = Тип("Массив");

	ЛокальныеИдентификаторыСобытий = Новый Массив;
	Если ТипЗнч(ИдентификаторыСобытий) = ТипСтрока Тогда
		ЛокальныеИдентификаторыСобытий.Добавить(СокрЛП(Лев(ИдентификаторыСобытий, 50))); // Ограничение на длину события
	ИначеЕсли ТипЗнч(ИдентификаторыСобытий) = ТипМассив Тогда
		ЛокальныеИдентификаторыСобытий = ИдентификаторыСобытий;
	Иначе
		Возврат;
	КонецЕсли;

	// Может быть три варианта хранения новостей в форме:
	// - массив структур новостей (больше данных передается с клиента на сервер и обратно, но можно вызывать просмотр новостей на клиентские события);
	// - адрес временного хранилища (меньше данных передается с клиента на сервер и обратно, но нельзя вызывать просмотр новостей на клиентские события);
	// - клиентский кэш (в глобальной переменной "ПараметрыПриложения").
	ИдентификаторМетаданных = Форма.Новости.Метаданные;
	ИдентификаторФормы      = Форма.Новости.Форма;

	// Из списка новостей вывести на экран важные и очень важные непрочтенные новости.
	МассивВажныхНовостейСВключеннымиНапоминаниями      = Форма.Новости.МассивСтруктурВажныхНовостей;
	СписокОченьВажныхНовостейСВключеннымиНапоминаниями = Новый СписокЗначений;

	Если Форма.Новости.ПолучатьНовостиНаСервере = Истина Тогда
		МассивСтруктурНовостей = Форма.Новости.Новости; // Массив структур всех новостей или Неопределено, если передан адрес временного хранилища.
		АдресМассиваНовостей   = Форма.Новости.АдресМассиваНовостей; // Адрес временного хранилища с массивом структур новостей.
	Иначе // Новости хранятся в кэше на клиенте.
		Форма_Новости_ИзКэша = ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			Форма.Новости.ЗаголовокФормыКонтекстныхНовостей,
			Неопределено, // События "ПриОткрытии" - оставить пустым, т.е. брать по-умолчанию
			НастройкиПолученияНовостей);
		МассивСтруктурНовостей = Форма_Новости_ИзКэша.Новости;
		АдресМассиваНовостей   = ""; // Адрес временного хранилища оставим пустым
	КонецЕсли;

	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
		Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
			Если СокрЛП(ВРег(ТекущаяНовость.Форма)) = СокрЛП(ВРег(ИдентификаторФормы)) Тогда
				Если ТекущаяНовость.Важность = 1 Тогда // Очень важная новость
					Если ТекущаяНовость.ОповещениеВключено = Истина Тогда
						Для Каждого ТекущийИдентификаторСобытия Из ЛокальныеИдентификаторыСобытий Цикл
							Если СокрЛП(ВРег(ТекущаяНовость.Событие)) = СокрЛП(ВРег(ТекущийИдентификаторСобытия)) Тогда
								// В массиве новостей могут храниться новости с одинаковым идентификатором Метаданные / Форма,
								//  но для разных событий. Исключить задвоение новостей.
								НайденнаяНовость = СписокОченьВажныхНовостейСВключеннымиНапоминаниями.НайтиПоЗначению(ТекущаяНовость.Новость);
								Если НайденнаяНовость = Неопределено Тогда
									// При формировании списка новостей надо отмечать прочтенные галочкой (Пометка = Истина).
									СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Добавить(ТекущаяНовость.Новость, , ТекущаяНовость.Прочтена);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Если есть массив структур новостей, то смотреть его, иначе - по адресу временного хранилища.
	Если ЛокальныеИдентификаторыСобытий.Количество() = 0 Тогда
		ИнициаторОткрытияНовостиСобытие = "Отсутствует"; // Идентификатор.
	ИначеЕсли ЛокальныеИдентификаторыСобытий.Количество() = 1 Тогда
		ИнициаторОткрытияНовостиСобытие = ЛокальныеИдентификаторыСобытий[0];
	Иначе // > 1
		ИнициаторОткрытияНовостиСобытие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Массив(%1)",
			ЛокальныеИдентификаторыСобытий.Количество());
	КонецЕсли;
	ИнициаторОткрытияНовости = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"КонтекстныеНовостиОткрытиеПриСобытии/Метаданные=%1/Форма=%2/Событие=%3", // Идентификатор.
		ИдентификаторМетаданных,
		ИдентификаторФормы,
		ИнициаторОткрытияНовостиСобытие);
	Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда // Массив структур новостей
		// При просмотре глобальных очень важных новостей, открывать каждую в отдельной форме.
		// Про просмотре контекстных очень важных новостей, их можно открывать в одной форме.
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца"); // Идентификатор.
		ПараметрыОткрытияФормы.Вставить("Заголовок", Форма.Новости.ЗаголовокФормыКонтекстныхНовостей);
		ПараметрыОткрытияФормы.Вставить("СписокНовостей", СписокОченьВажныхНовостейСВключеннымиНапоминаниями);
		ПараметрыОткрытияФормы.Вставить("ВремяПереносаПоказатьПозжеМинут", 15);
		ПараметрыОткрытияФормы.Вставить("СкрыватьСписокНовостейДляОднойНовости", Ложь);
		ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", ИнициаторОткрытияНовости);
		Если СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Количество() > 1 Тогда
			ПоказатьНовости(
				ПараметрыОткрытияФормы,
				Форма, // ФормаВладелец
				Истина); // Не проверять уникальность
		ИначеЕсли СписокОченьВажныхНовостейСВключеннымиНапоминаниями.Количество() = 1 Тогда
			// Контекстную новость, даже если она одна, все равно показывать в форме
			//  с кнопками (Показать позже, Не показывать), без возможности установки флажка.
			// Показ единственной новости осуществляется функцией ПоказатьНовость.
			ПоказатьНовости(
				ПараметрыОткрытияФормы,
				Форма, // ФормаВладелец
				Истина); // Не проверять уникальность
		Иначе // Нет очень важных новостей.
		КонецЕсли;
	ИначеЕсли ТипЗнч(АдресМассиваНовостей) = ТипСтрока Тогда // Адрес временного хранилища.
		// Проверка на наличие очень важных новостей ПриОткрытии осуществляется
		//  в КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии.
		// При других событиях форма будет открываться всегда и если новостей нет, то открытие формы будет отменяться.
		СписокИдентификаторыСобытий = Новый СписокЗначений;
		СписокИдентификаторыСобытий.ЗагрузитьЗначения(ЛокальныеИдентификаторыСобытий);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца"); // Идентификатор.
		ПараметрыОткрытияФормы.Вставить("Заголовок", Форма.Новости.ЗаголовокФормыКонтекстныхНовостей);
		ПараметрыОткрытияФормы.Вставить("АдресМассиваНовостей", АдресМассиваНовостей);
		ПараметрыОткрытияФормы.Вставить("ИдентификаторФормы", Форма.Новости.Форма);
		ПараметрыОткрытияФормы.Вставить("ИдентификаторыСобытий", СписокИдентификаторыСобытий);
		ПараметрыОткрытияФормы.Вставить("ВремяПереносаПоказатьПозжеМинут", 15);
		ПараметрыОткрытияФормы.Вставить("СкрыватьСписокНовостейДляОднойНовости", Ложь);
		ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", ИнициаторОткрытияНовости);
		ПоказатьНовости(
			ПараметрыОткрытияФормы,
			Форма, // ФормаВладелец
			Истина); // Не проверять уникальность
	КонецЕсли;

	// Для ситуации, когда массив важных новостей заранее не рассчитан (это будет для всех событий, кроме ПриОткрытии),
	//  но новости уже хранятся на клиенте в памяти формы, то заполнить массив таких важных новостей заново.
	Если (ТипЗнч(МассивВажныхНовостейСВключеннымиНапоминаниями) <> ТипМассив)
			ИЛИ (ЛокальныеИдентификаторыСобытий.Найти(ВРег("ПриОткрытии")) <> Неопределено) Тогда
		Если ТипЗнч(МассивСтруктурНовостей) = ТипМассив Тогда
			МассивВажныхНовостейСВключеннымиНапоминаниями = Новый Массив; // Пересчитывать заново
			Для Каждого ТекущаяНовость Из МассивСтруктурНовостей Цикл
				Если СокрЛП(ВРег(ТекущаяНовость.Форма)) = СокрЛП(ВРег(ИдентификаторФормы)) Тогда
					Если ТекущаяНовость.Важность = 2 Тогда // Важная новость
						Если ТекущаяНовость.ОповещениеВключено = Истина Тогда
							Для Каждого ТекущийИдентификаторСобытия Из ЛокальныеИдентификаторыСобытий Цикл
								Если СокрЛП(ВРег(ТекущаяНовость.Событие)) = СокрЛП(ВРег(ТекущийИдентификаторСобытия)) Тогда
									МассивВажныхНовостейСВключеннымиНапоминаниями.Добавить(ТекущаяНовость);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(МассивВажныхНовостейСВключеннымиНапоминаниями) = ТипМассив Тогда
		Если МассивВажныхНовостейСВключеннымиНапоминаниями.Количество() > 0 Тогда
			НачатьПоследовательныйПоказВажныхНовостей(МассивВажныхНовостейСВключеннымиНапоминаниями);
		КонецЕсли;
	КонецЕсли;
	Форма.Новости.Вставить("МассивСтруктурВажныхНовостей", Неопределено); // После однократного показа очистить ключ, чтобы не передавался между клиентом и сервером

КонецПроцедуры

#КонецОбласти

#Область ПанельКонтекстныхНовостей

// Процедура обрабатывает нажатие на элементах управления в элементе ПанельКонтекстныхНовостей.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие Нажатие;
//  Элемент - ЭлементУправления - элемент управления, на котором произвели нажатие мышкой.
//
Процедура ПанельКонтекстныхНовостей_ЭлементПанелиНовостейНажатие(Форма, Элемент) Экспорт

	ТипСоответствие = Тип("Соответствие");

	СтандартнаяОбработка = Истина;
	ОбработкаНовостейКлиентПереопределяемый.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейНажатие(
		Форма,
		Элемент,
		СтандартнаяОбработка);

	Если СтандартнаяОбработка <> Ложь Тогда

		Если ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаНовостиИнформация") Тогда
			// Ничего не делать.

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаСтрелкаВлево") Тогда
			// Показать предыдущую новость (если эта - не первая).
			Если Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей > 0 Тогда
				Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей - 1;
				ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
			КонецЕсли;

			// Если включен режим автолистания, то приостановить автолистание на 1 минуту.
			ТекущаяДатаСеансаДляПриостановки = ОбщегоНазначенияКлиент.ДатаСеанса() + 1*60;
			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
				ПараметрыАвтолистания = Новый Соответствие;
			КонецЕсли;
			ПараметрыАвтолистания.Вставить(Форма.УникальныйИдентификатор, ТекущаяДатаСеансаДляПриостановки);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаСтрелкаВправо") Тогда
			// Показать следующую новость (если эта - не последняя).
			Если Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей+1 < Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей Тогда
				Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей + 1;
				ОбработкаНовостейКлиентСервер.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма);
			КонецЕсли;

			// Если включен режим автолистания, то приостановить автолистание на 1 минуту.
			ТекущаяДатаСеансаДляПриостановки = ОбщегоНазначенияКлиент.ДатаСеанса() + 1*60;
			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
				ПараметрыАвтолистания = Новый Соответствие;
			КонецЕсли;
			ПараметрыАвтолистания.Вставить(Форма.УникальныйИдентификатор, ТекущаяДатаСеансаДляПриостановки);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаВесьСписок") Тогда
			// Показать список контекстных новостей.
			Команда = Новый Структура("Имя", "Команда_Новость_Список");
			КонтекстныеНовости_ОбработкаКомандыНовости(Форма, Команда);

		ИначеЕсли ВРег(Элемент.Имя) = ВРег("ПанельКонтекстныхНовостей_КартинкаЗакрыть") Тогда
			ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Ложь);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает переход по навигационным ссылкам в элементе ПанельКонтекстныхНовостей.
//
// Параметры:
//  Форма                          - ФормаКлиентскогоПриложения - форма, в которой необходимо обработать событие Нажатие;
//  Элемент                        - ЭлементУправления - элемент управления, на котором произвели нажатие мышкой;
//  НавигационнаяСсылкаЭлемента    - Строка - навигационная ссылка;
//  СтандартнаяОбработкаПлатформой - Булево - признак выполнения стандартной обработки.
//
Процедура ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
			Форма,
			Элемент,
			НавигационнаяСсылкаЭлемента,
			СтандартнаяОбработкаПлатформой) Экспорт

	// В навигационной ссылке может быть ссылка на контекстную новость в специальном формате.

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	СтандартнаяОбработкаПлатформой = Ложь;

	СтандартнаяОбработкаПодсистемой = Истина;
	ОбработкаНовостейКлиентПереопределяемый.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		Форма,
		Элемент,
		НавигационнаяСсылкаЭлемента,
		СтандартнаяОбработкаПлатформой,
		СтандартнаяОбработкаПодсистемой);

	Если СтандартнаяОбработкаПодсистемой <> Ложь Тогда

		Если СтрНайти(ВРег(НавигационнаяСсылкаЭлемента), ВРег("news1C:Open?")) >= 1 Тогда // Ссылка на новость
			Описатель = "news1C:Open?";
			ГдеОписатель = СтрНайти(ВРег(НавигационнаяСсылкаЭлемента), ВРег(Описатель));
			НомерНовости = Прав(НавигационнаяСсылкаЭлемента, СтрДлина(НавигационнаяСсылкаЭлемента) - ГдеОписатель - СтрДлина(Описатель) + 1);
			Если ТипЗнч(Форма.Новости) = ТипСтруктура Тогда
				Если Форма.Новости.Свойство("Новости")
						И ТипЗнч(Форма.Новости.Новости) = ТипМассив Тогда
					Для Каждого ТекущаяНовость Из Форма.Новости.Новости Цикл
						Если ТипЗнч(ТекущаяНовость) = ТипСтруктура Тогда
							Если ТекущаяНовость.Свойство("НомерСтрокиНовости") И Строка(ТекущаяНовость.НомерСтрокиНовости) = НомерНовости Тогда
								ПараметрыОткрытияФормы = Новый Структура;
								ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "БлокироватьОкноВладельца");
								ИнициаторОткрытияНовости = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									"КонтекстныеНовостиОткрытиеИзПанелиКонтекстныхНовостей/Метаданные=%1/Форма=%2", // Идентификатор.
									Форма.Новости.Метаданные,
									Форма.Новости.Форма);
								ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", ИнициаторОткрытияНовости);
								ПараметрыОткрытияФормы.Вставить("НовостьНаименование", ТекущаяНовость.НовостьНаименование); // Заголовок новости.
								ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", ТекущаяНовость.НовостьКодЛентыНовостей); // Код ленты новостей.
								Уникальность = "";
								ПоказатьНовость(
									ТекущаяНовость.Новость,
									ПараметрыОткрытияФормы,
									Форма,
									Уникальность);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(НавигационнаяСсылкаЭлемента) = ВРег("news1C:Close") Тогда
			ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Ложь);
		ИначеЕсли ВРег(НавигационнаяСсылкаЭлемента) = ВРег("news1C:Show") Тогда
			ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Истина);
		ИначеЕсли ВРег(НавигационнаяСсылкаЭлемента) = ВРег("news1C:ShowList") Тогда
			КонтекстныеНовости_ОбработкаКомандыНовости(
				Форма,
				Новый Структура("Имя", "Команда_Новость_Список"));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФункциональныеОпции

// Функция возвращает результат - можно ли работать с новостями.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями.
//
Функция РазрешенаРаботаСНовостями() Экспорт

	Результат = ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостями();

	Возврат Результат;

КонецФункции

// Функция возвращает результат - можно ли работать с новостями текущему пользователю.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь
//   И задан параметр сеанса ТекущийПользователь (т.е. мы не зашли в базу с отключенным списком пользователей).
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если есть возможность работы с новостями текущему пользователю.
//
Функция РазрешенаРаботаСНовостямиТекущемуПользователю() Экспорт

	Результат = ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю();

	// Разрешено "отключать" подсистему, если она включена. Например, для работы "стартовых помощников".
	// Если же подсистема уже отключена, то запретить переопределение.
	Если Результат = Истина Тогда
		ОбработкаНовостейКлиентПереопределяемый.РазрешенаРаботаСНовостямиТекущемуПользователю(Результат);
	КонецЕсли;

	Возврат (Результат = Истина);

КонецФункции

// Функция возвращает результат - можно ли работать с новостями через интернет.
// Это результат функциональной опции "РазрешенаРаботаСНовостямиЧерезИнтернет"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если разрешена работа с новостями через интернет, ЛОЖЬ, если можно работать только с локальными новостями.
//
Функция РазрешенаРаботаСНовостямиЧерезИнтернет() Экспорт

	Результат = ОбработкаНовостейКлиентПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет();

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСТекстомНовости

// Функция возвращает ХТМЛ или простой текст новости по ссылке на новость.
//
// Параметры:
//  Новости              - СправочникСсылка.Новости, Структура, Массив из СправочникСсылка.Новости - данные новости или списка новостей;
//  ПараметрыОтображения - Структура, Неопределено - параметры для отображения новости. Список возможных параметров:
//    * ОтображатьЗаголовок - Булево.
//
// Возвращаемое значение:
//  Строка - текст новости / новостей в формате HTML.
//
Функция ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения = Неопределено) Экспорт

	ТипМассив = Тип("Массив");

	Если ТипЗнч(Новости) = ТипМассив Тогда
		// ПовтИсп для массива - запрещено.
		Результат = ОбработкаНовостейВызовСервера.ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения);
	Иначе
		Результат = ОбработкаНовостейКлиентПовтИсп.ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПоискДанных

// Функция возвращает ссылку на ленту новостей по ее коду.
//
// Параметры:
//  ЛентаНовостейКод - Строка - код ленты новостей.
//
// Возвращаемое значение:
//   СправочникСсылка.ЛентыНовостей - ссылка на ленту новостей или пустая ссылка, если нет ленты новостей с таким кодом.
//
Функция ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод) Экспорт

	Результат = ОбработкаНовостейКлиентПовтИсп.ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиНовостейНаКлиенте

// Подключает необходимые для подсистемы Новости обработчики.
// Вызывается из ПриНачалеРаботыСистемы.
// Также необходимо вызывать после изменения значения, возвращаемого
//  ОбработкаНовостейКлиентПереопределяемый.РазрешенаРаботаСНовостямиТекущемуПользователю(Результат).
//
Процедура ПодключитьРаботуСНовостямиНаКлиенте() Экспорт

	// Подключение обработчика проверки новостей на клиенте.
	// В процедуре проверяется установка функциональной опции "РазрешенаРаботаСНовостями".
	ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях_ПервыйЗапуск();

	// Подключение обработчика оптимизации контекстных новостей, которые хранятся в кэше на клиенте
	//  (в случае, если в формах используется получение новостей не на сервере, а на клиенте).
	// В процедуре проверяется установка функциональной опции "РазрешенаРаботаСНовостями".
	ПодключитьОбработчикОптимизацииКонтекстныхНовостей();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПриНачалеРаботыСистемы

// Процедура вызывается из модуля управляемого приложения,
//  затем ОбработкаНовостейКлиент.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейВызовСервера.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостей.ПриНачалеРаботыСистемы,
//  затем ОбработкаНовостейПереопределяемый.ПриНачалеРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	ПодключитьРаботуСНовостямиНаКлиенте();

	// Все серверные проверки вынесены в отдельную процедуру.
	ОбработкаНовостейВызовСервера.ПриНачалеРаботыСистемы();

КонецПроцедуры

#КонецОбласти

#Область ПолучениеНастроекКонфигурации

// Возвращает адрес команды открытия списка новостей.
// Если подсистема ИПП выключена из командного интерфейса, то вернуть
//   e1cib/command/Справочник.Новости.Команда.КомандаСписокНовостей.
// Если подсистема ИнтернетПоддержкаПользователей включена в командный интерфейс (хотя может быть и не видна), то вернуть
//   e1cib/navigationpoint/ИнтернетПоддержкаПользователей/Справочник.Новости.Команда.КомандаСписокНовостей.
// Так как наша система должна быть выключена из командного интерфейса, то всегда возвращать первый вариант.
// В случае внедрения в демобазу (когда подсистема включена в командный интерфейс), использовать:
//   Результат = "e1cib/navigationpoint/ИнтернетПоддержкаПользователей/Справочник.Новости.Команда.КомандаСписокНовостей";
//
// Возвращаемое значение
//  Строка - актуальный адрес команды открытия формы списка новостей.
//
Функция ПолучитьНавигационнуюСсылкуСпискаНовостей() Экспорт

	Результат = "e1cib/command/Справочник.Новости.Команда.КомандаСписокНовостей"; // Если подсистема НЕ внедрена в командный интерфейс

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Функция ищет первый элемент в списке значений по условиям.
//
// Параметры:
//  Список          - СписокЗначений - Список значений параметров;
//  ПараметрыПоиска - Структура - структура, описывающая условия поиска:
//    * ВариантПоиска - Строка - "ПоЗначению", "ПоПредставлению", "ПоПредставлениюБезУчетаРегистра";
//    * ЗначениеПоиска - Строка - Значение или представление, которое необходимо найти.
//
// Возвращаемое значение:
//   ЭлементСпискаЗначений - значение элемента списка значений, или Неопределено, если элемент не найден.
//
Функция НайтиЭлементСпискаЗначений(Список, ПараметрыПоиска) Экспорт

	ТипСписокЗначений = Тип("СписокЗначений");
	ТипСтруктура      = Тип("Структура");

	Результат = Неопределено;
	ВариантПоиска = "ПоЗначению";
	ЗначениеПоиска = Неопределено;

	Если ТипЗнч(Список) = ТипСписокЗначений Тогда
		Если ТипЗнч(ПараметрыПоиска) = ТипСтруктура Тогда
			Если ПараметрыПоиска.Свойство("ВариантПоиска") Тогда
				Если ВРег(ПараметрыПоиска.ВариантПоиска) = ВРег("ПоЗначению") Тогда
					// Значение по-умолчанию. Уже установлено.
				ИначеЕсли ВРег(ПараметрыПоиска.ВариантПоиска) = ВРег("ПоПредставлению") Тогда
					ВариантПоиска = "ПоПредставлению";
				ИначеЕсли ВРег(ПараметрыПоиска.ВариантПоиска) = ВРег("ПоПредставлениюБезУчетаРегистра") Тогда
					ВариантПоиска = "ПоПредставлениюБезУчетаРегистра";
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыПоиска.Свойство("ЗначениеПоиска") Тогда
				ЗначениеПоиска = ПараметрыПоиска.ЗначениеПоиска;
			Иначе
				Возврат Результат;
			КонецЕсли;
		Иначе
			Возврат Результат;
		КонецЕсли;
		Если ВариантПоиска = "ПоЗначению" Тогда
			Результат = Список.НайтиПоЗначению(ЗначениеПоиска);
		ИначеЕсли ВариантПоиска = "ПоПредставлению" Тогда
			Для каждого ТекущийЭлементСписка Из Список Цикл
				Если ТекущийЭлементСписка.Представление = ЗначениеПоиска Тогда
					Результат = ТекущийЭлементСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВариантПоиска = "ПоПредставлениюБезУчетаРегистра" Тогда
			Для каждого ТекущийЭлементСписка Из Список Цикл
				Если ВРег(ТекущийЭлементСписка.Представление) = ВРег(ЗначениеПоиска) Тогда
					Результат = ТекущийЭлементСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриНачалеРаботыСистемы

// Процедура переподключает обработчик проверки загруженных новостей (которые уже находятся в справочнике Новости).
// Эта процедура должна запускаться только при старте программы, потом она сама подключает
//  другой обработчик - ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях.
//
Процедура ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях_ПервыйЗапуск()

	ТипЧисло        = Тип("Число");
	ТипСоответствие = Тип("Соответствие");

	ОтключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями_ПервыйЗапуск");

	// Обработчик
	Если РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		ИнтервалСекунд = 2;
		ОбработкаНовостейКлиентПереопределяемый.ПереопределитьВремяПервогоПоказаВажныхИОченьВажныхНовостейПриСтартеПрограммы(ИнтервалСекунд);
		Если (ТипЗнч(ИнтервалСекунд) = ТипЧисло)
				И (ИнтервалСекунд > 0) Тогда
			// После первого показа новостей будет подключен обработчик ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях().
			// Если передан параметр запуска /C"ОтложитьПоказНовостей=ХХ;", то ИнтервалСекунд будет заменен на ХХ,
			//  где ХХ - число секунд, на которое необходимо отложить показ новостей.
			//  Если ХХ не в интервале от 2 до 999, то этот параметр запуска будет округлен до крайних значений интервала.
			ИдентификаторПараметраЗапускаНачало = "ОтложитьПоказНовостей="; // Идентификатор.
			ГдеНачало = СтрНайти(ВРег(ПараметрЗапуска), ВРег(ИдентификаторПараметраЗапускаНачало));
			Если ГдеНачало > 0 Тогда
				ГдеКонец = СтрНайти(ВРег(ПараметрЗапуска), ВРег(";"), , ГдеНачало);
				Если ГдеКонец > 0 Тогда
					ГдеНачалоЧисла = ГдеНачало + СтрДлина(ИдентификаторПараметраЗапускаНачало);
					ИнтервалСекундСтрокой = Сред(ПараметрЗапуска, ГдеНачалоЧисла, ГдеКонец - ГдеНачалоЧисла);
					Попытка
						ИнтервалСекундЧислом = Число(ИнтервалСекундСтрокой);
						Если ИнтервалСекундЧислом < 2 Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Показ важных и очень важных новостей будет отложен на 2 секунды
									|(переданное в параметре значение %1 было увеличено до 2)'"),
								ИнтервалСекундЧислом);
							ПоказатьОповещениеПользователя(
								НСтр("ru='Изменено время первого показа новостей'"),
								,
								ТекстСообщения);
							ИнтервалСекундЧислом = 2;
						ИначеЕсли ИнтервалСекундЧислом > 999 Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Показ важных и очень важных новостей будет отложен на 999 секунд
									|(переданное в параметре значение %1 было уменьшено до 999)'"),
								ИнтервалСекундЧислом);
							ПоказатьОповещениеПользователя(
								НСтр("ru='Изменено время первого показа новостей'"),
								,
								ТекстСообщения);
							ИнтервалСекундЧислом = 999;
						Иначе
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Показ важных и очень важных новостей будет отложен на %1 секунд'"),
								ИнтервалСекундЧислом);
							ПоказатьОповещениеПользователя(
								НСтр("ru='Изменено время первого показа новостей'"),
								,
								ТекстСообщения);
						КонецЕсли;
						ИнтервалСекунд = ИнтервалСекундЧислом;
						// Этот интервал необходимо также сохранить в глобальной переменной, чтобы все остальные контекстные новости
						//  также откладывали показ.
						ВремяНачалаПоказаНовостей = ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалСекунд;
						// ПараметрыПриложения - глобальная переменная.
						Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
							ПараметрыПриложения = Новый Соответствие;
						КонецЕсли;
						ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.ВремяНачалаПоказаНовостей";
						ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ВремяНачалаПоказаНовостей);
					Исключение
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не удалось преобразовать параметр запуска (сдвиг показа новостей): %1.
								|Строка параметра: %2.
								|Необходимо указать время в секундах, от 2 до 999'"),
							ИнтервалСекундСтрокой,
							Сред(ПараметрЗапуска, ГдеНачало, ГдеКонец - ГдеНачало + 1));
						ПоказатьОповещениеПользователя(
							НСтр("ru='Ошибка изменения времени первого показа новостей'"),
							,
							ТекстСообщения);
					КонецПопытки;
				Иначе
					ТекстСообщения = НСтр("ru='Для сдвига показа важных и очень важных новостей,
						|необходимо в параметре запуска /C передать
						|ОтложитьПоказНовостей=ХХ;
						|где ХХ - число секунд от 2 до 999.
						|Параметр должен заканчиваться точкой с запятой.'");
					ПоказатьОповещениеПользователя(
						НСтр("ru='Ошибка изменения времени первого показа новостей'"),
						,
						ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			ПодключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями_ПервыйЗапуск", ИнтервалСекунд, Истина);
		Иначе
			// Этот обработчик должен быть подключен в любом случае.
			ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура переподключает обработчик проверки загруженных новостей (которые уже находятся в справочнике Новости).
//
Процедура ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях() Экспорт

	ОтключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями");

	Если РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		СтруктураНастроекПоказаНовостей = ОбработкаНовостейВызовСервера.ПолучитьНастройкиПоказаНовостейНастроенныеАдминистратором();
		ИнтервалАвтообновленияСекунд = 60 * СтруктураНастроекПоказаНовостей.СписокНовостей_ИнтервалАвтообновления;
		ПодключитьОбработчикОжидания("ПроверитьВажныеНовостиСВключеннымиНапоминаниями", ИнтервалАвтообновленияСекунд, Ложь);
	КонецЕсли;

КонецПроцедуры

// Процедура переподключает обработчик оптимизации контекстных новостей
// (глобальная переменная ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"]).
//
Процедура ПодключитьОбработчикОптимизацииКонтекстныхНовостей()

	ОтключитьОбработчикОжидания("ОптимизацияВременногоХранилищаКонтекстныхНовостей");

	Если РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		ИнтервалАвтообновленияСекунд = 15 * 60; // 15 минут
		ПодключитьОбработчикОжидания("ОптимизацияВременногоХранилищаКонтекстныхНовостей", ИнтервалАвтообновленияСекунд, Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПомеченнымиНовостями

// Процедура помечает несколько новостей пометкой (число 0..9, где 0 = нет пометки).
//
// Параметры:
//  МассивНовостей - Массив;
//  Пометка        - Число 0..9, где 0 - неотмеченная новость.
//
Процедура ИзменитьПометкуНовостей(МассивНовостей, Пометка = 1) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПометкуНовостей(МассивНовостей, Пометка);

	Оповестить(
		"Новости. Изменена пометка списка новостей",
		Пометка,
		МассивНовостей);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомПрочтенности

// Процедура изменяет признак прочтенности у новостей.
//
// Параметры:
//  МассивНовостей      - Массив;
//  ПризнакПрочтенности - Булево.
//
Процедура ИзменитьПризнакПрочтенностиНовостей(Знач МассивНовостей, ПризнакПрочтенности = Истина) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПризнакПрочтенностиНовостей(МассивНовостей, ПризнакПрочтенности);

	Оповестить(
		"Новости. Изменена прочтенность списка новостей", // Идентификатор.
		ПризнакПрочтенности,
		МассивНовостей);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПризнакомУдаленияИзСписка

// Процедура изменяет признак удаления из списка у новостей.
//
// Параметры:
//  МассивНовостей          - Массив;
//  ПризнакУдаленияИзСписка - Булево.
//
Процедура ИзменитьПризнакУдаленияИзСпискаНовостей(Знач МассивНовостей, Знач ПризнакУдаленияИзСписка = Истина) Экспорт

	ОбработкаНовостейВызовСервера.ИзменитьПризнакУдаленияИзСпискаНовостей(МассивНовостей, ПризнакУдаленияИзСписка);

	Оповестить(
		"Новости. Изменен признак удаления из списка новостей", // Идентификатор.
		ПризнакУдаленияИзСписка,
		МассивНовостей);

	// ////? Для помеченных на удаление новостей очистить кэш контекстных новостей.

КонецПроцедуры

#КонецОбласти

#Область ПоискНовостей

// Выполняет полнотекстовый поиск по новостям. Возможна передача дополнительных параметров (период поиска и т.п.).
//
// Параметры:
//  СтруктураПараметровПоиска - Структура с ключами:
//    * СтрокПоиска - Строка;
//    * ПоискДатаОТ - Дата;
//    * ПоискДатаДО - Дата;
//    * НовостиОбластьПоиска - Неопределено, Массив из СправочникСсылка.Новости - массив ссылок на новости, в которых надо искать;
//        Если не заполнено, то поиск будет во всех новостях. Если передан массив ссылок на новости,
//         то поиск будет осуществляться только в этих новостях.
//        Имеет смысл заполнять для форм контекстных новостей, когда поиск осуществляется только среди уже отобранных новостей.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Новости.
//
Функция НайтиНовости(СтруктураПараметровПоиска) Экспорт

	Результат = ОбработкаНовостейВызовСервера.НайтиНовости(СтруктураПараметровПоиска);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнтерактивнаяРаботаСНовостью

// Функция ищет вверх по иерархии элемент (узел) с id="NewsEntry" и возвращает атрибут news_id.
//
// Параметры:
//  Узел               - COMObject - описание текущего узла;
//  ТекущаяВложенность - Число - Текущий уровень вложенности, уменьшается с каждый вложенным вызовом функции.
//
// Возвращаемое значение:
//   Строка - Идентификатор новости или пустая строка, если идентификатор не найден.
//
Функция НайтиУИННовостиХТМЛ(Узел, ТекущаяВложенность)

	Если ТекущаяВложенность <= 0 Тогда
		// Достигли предела поиска верха иерархии, но так и не нашли идентификатор новости.
		УИННовости = "";
	Иначе
		Если (Узел.parentElement <> Неопределено) Тогда
			Если (ВРег(Узел.parentElement.id) = ВРег("newsEntry")) Тогда
				// У родителя id = newsEntry, значит должен быть атрибут news_id.
				Атрибут = Узел.parentElement.attributes["news_id"];
				Если Атрибут <> Неопределено Тогда
					УИННовости = Атрибут.value;
				Иначе
					// Что-то пошло не так и не удалось получить атрибут news_id.
					УИННовости = "";
				КонецЕсли;
			Иначе
				УИННовости = НайтиУИННовостиХТМЛ(Узел.parentElement, ТекущаяВложенность - 1);
			КонецЕсли;
		Иначе
			// Достигли верха иерархии, но так и не нашли идентификатор новости.
			УИННовости = "";
		КонецЕсли;
	КонецЕсли;

	Возврат УИННовости;

КонецФункции

// Обработка нажатия на навигационную ссылку в форматированной строке - полном тексте новости.
//
// Параметры:
//  НовостьСсылка    - СправочникСсылка.Новости - Ссылка на новость;
//  Форма            - ФормаКлиентскогоПриложения - Форма-владелец, откуда вызывается обработчик;
//  Действие         - Строка;
//  СписокПараметров - СписокЗначений - произвольный список параметров.
//
// Возможные значения Действие и параметры:
// - Переход по навигационной ссылке:
//   - Необходим как минимум один параметр с именем "Навигационная ссылка";
//   - Остальные параметры будут проигнорированы.
// - Запуск процедуры с параметрами:
//   - Все параметры будут переданы как список значений в процедуру
//         ОбработкаНовостейКлиент.ОбработкаСобытияНовости(СписокПараметров).
// - Открытие раздела справки:
//   - Необходим только один параметр с именем "Раздел справки";
//   - Остальные параметры будут проигнорированы.
// - Оповещение:
//   - Необходим как минимум один параметр "ИмяСобытия";
//   - Остальные параметры ("Параметр", "Источник") могут быть переданы списком значений.
// - Переход по интернет ссылке:
//   - Необходим как минимум один параметр "URL", могут быть переданы списком значений;
//   - Гиперссылки на web-ресурсы можно передавать в новости как обычный href="", но сама ссылка должна начинаться с http или https.
// - Открытие новости:
//   - Необходим как минимум один параметр "УИННовости";
//   - Если передать параметр "ЛентаНовостей" строкового типа, то он будет являться доп.условием для поиска новости по УИН,
//      то есть новость будет искаться в этой ленте новостей. Параметр описывает Код ленты новостей (английские буквы без пробелов).
//     Если также передать параметр "ИдентификаторМеста", то будет выполнена попытка не просто открыть новость, но и позиционироваться
//       на тэге с указанным идентификатором.
// - Показать картинку:
//   - Необходим как минимум один параметр "УИН" - идентификатор картинки из табличной части БинарныеДанные.
//
Процедура ОбработкаНавигационнойСсылки(НовостьСсылка, Форма, Действие, СписокПараметров) Экспорт

	Если Действие = "Переход по навигационной ссылке" Тогда // Идентификатор.
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("Навигационная ссылка") Тогда
				Попытка
					ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущийПараметр.Значение);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Произошла ошибка при обработке действия %1 с параметрами %2.
							|Подробная информация об ошибке:
							|%3'"),
						Действие,
						СписокПараметров,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
						"Ошибка", // УровеньЖурналаРегистрации строкой
						"", // ОбъектМетаданных строкой
						"", // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Запуск процедуры с параметрами" Тогда
		ОбработкаСобытия(НовостьСсылка, Форма, СписокПараметров);

	ИначеЕсли Действие = "Оповещение" Тогда
		ИмяСобытия = "";
		Параметры = Новый СписокЗначений;
		Источники = Новый СписокЗначений;
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("ИмяСобытия") Тогда
				// Имя события может быть только строковое. Если передали несколько значений, то взять последнее.
				ИмяСобытия = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Параметр") Тогда
				Параметры.Добавить(ТекущийПараметр.Значение);
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Источник") Тогда
				Источники.Добавить(ТекущийПараметр.Значение);
			КонецЕсли;
		КонецЦикла;
		// Всегда добавлять уникальный идентификатор текущей формы.
		Источники.Добавить("УИНФормы=" + СокрЛП(Форма.УникальныйИдентификатор)); // Идентификатор.
		Оповестить(ИмяСобытия, Параметры, Источники);

	ИначеЕсли Действие = "Открытие раздела справки" Тогда
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("Раздел справки") Тогда
				Попытка
					ОткрытьСправку(ТекущийПараметр.Значение);
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Произошла ошибка при обработке действия %1 с параметрами %2.
							|Подробная информация об ошибке:
							|%3'"),
						Действие,
						СписокПараметров,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
						НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
						"Ошибка", // УровеньЖурналаРегистрации строкой
						"", // ОбъектМетаданных строкой
						"", // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Переход по интернет ссылке" Тогда
		// Возможно, передадут несколько ссылок - открыть их все.
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("URL") Тогда
				ПерейтиПоИнтернетСсылке(ТекущийПараметр.Значение);
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Открытие новости" Тогда
		УИННовости         = "";
		ЛентаНовостейКод   = "";
		ИдентификаторМеста = "";
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление))=ВРег("УИННовости") Тогда
				// УИН новости может быть только строковым. Если передали несколько значений, то взять последнее.
				УИННовости = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(ТекущийПараметр.Представление) = ВРег("ЛентаНовостей") Тогда
				// Лента новостей может быть только строковой. Если передали несколько значений, то взять последнее.
				ЛентаНовостейКод = ТекущийПараметр.Значение;
			ИначеЕсли ВРег(ТекущийПараметр.Представление) = ВРег("ИдентификаторМеста") Тогда
				// ИдентификаторМеста может быть только строковый. Если передали несколько значений, то взять последнее.
				ИдентификаторМеста = ТекущийПараметр.Значение;
			КонецЕсли;
		КонецЦикла;
		СписокНовостей = ОбработкаНовостейВызовСервера.ПолучитьНовостиПоУИН(УИННовости, ЛентаНовостейКод);
		Для каждого ТекущаяНовость Из СписокНовостей Цикл
			ПараметрыОткрытияФормы = Новый Структура;
			Если НЕ ПустаяСтрока(ИдентификаторМеста) Тогда
				ПараметрыОткрытияФормы.Вставить("ИдентификаторМеста", ИдентификаторМеста);
			КонецЕсли;
			Если НЕ ТекущаяНовость.Значение.Пустая() Тогда
				ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ДругаяНовость/ЛентаНовостей=%1/УИН=%2",
						ЛентаНовостейКод,
						УИННовости)); // Идентификатор.
				ПараметрыОткрытияФормы.Вставить("НовостьНаименование", СокрЛП(ТекущаяНовость.Значение)); // Заголовок новости.
				ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", ЛентаНовостейКод); // Код ленты новостей.
				ПоказатьНовость(
					ТекущаяНовость.Значение, // НовостьСсылка
					ПараметрыОткрытияФормы, // ПараметрыОткрытияФормы. БлокироватьОкноВладельца не нужно, т.к. неизвестно что будет за владелец
					       // и блокировать первое попавшееся окно неправильно.
					Форма, // ФормаВладелец
					Ложь); // Уникальность по-умолчанию (по ссылке)
			КонецЕсли;
		КонецЦикла;

	ИначеЕсли Действие = "Показать картинку" Тогда
		СписокУИНКартинок = Новый СписокЗначений;
		СписокКартинок = Новый СписокЗначений;
		Для каждого ТекущийПараметр Из СписокПараметров Цикл
			Если ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("УИН") Тогда
				// УИН картинки может быть только строковым.
				// Если передали несколько значений, то обработать их все.
				// Таким образом, может быть передано несколько параметров "УИН",
				//  а для каждого УИН может быть несколько картинок с таким УИН в табличной части БинарныеДанные,
				//  и необходимо отобразить все эти комбинации.
				СписокУИНКартинок.Добавить(ТекущийПараметр.Значение);
			ИначеЕсли ВРег(СокрЛП(ТекущийПараметр.Представление)) = ВРег("Картинка") Тогда
				Если ТекущийПараметр.Картинка.Вид <> ВидКартинки.Пустая Тогда
					СписокКартинок.Добавить(ТекущийПараметр.Значение, , , ТекущийПараметр.Картинка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если (СписокУИНКартинок.Количество() > 0)
				ИЛИ (СписокКартинок.Количество() > 0) Тогда
			ИмяОткрываемойФормы = "Справочник.Новости.Форма.ФормаКартинки";
			ОткрытьФорму(
				ИмяОткрываемойФормы, // ИмяФормы
				Новый Структура("Ключ, СписокУИН, СписокКартинок",
					НовостьСсылка,
					СписокУИНКартинок,
					СписокКартинок), // Параметры
				Форма, // Владелец
				Ложь); // Уникальность, если Ложь - то уникальность по-умолчанию // НовостьСсылка
		КонецЕсли;

	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действие %1 с параметрами %2 не обрабатывается.'"),
			Действие,
			СписокПараметров);
		ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ОбработкаНавигационнойСсылки'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
			"Предупреждение", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			"", // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

// Обработчик нажатия мышкой в тексте новости.
//
// Параметры:
//  Новости                        - ДанныеФормыСтруктура, СправочникСсылка.Новости, ДокументСсылка.Новости, СписокЗначений - Новость,
//                                    в которой произошло нажатие.
//                                   Если передано значение типа СписокЗначений (где Значение - СправочникСсылка.Новости,
//                                   ДокументСсылка.Новости, а представление - УИННовости), то определить,
//                                    к какой новости относится это нажатие.
//  ДанныеСобытия                  - COMОбъект - описатель события нажатия;
//  СтандартнаяОбработкаПлатформой - Булево - признак выполнения стандартной обработки нажатия платформой;
//  Форма                          - ФормаКлиентскогоПриложения - форма, в которой произошло нажатие;
//  ЭлементФормы                   - ЭлементыФормы - Элементы формы типа ПолеHTMLдокумента. // АПК:216 слово содержит и русские и английские символы.
//
Процедура ОбработкаНажатияВТекстеНовости(Новости, ДанныеСобытия, СтандартнаяОбработкаПлатформой, Форма, ЭлементФормы) Экспорт

	Перем Действие, СписокПараметров;

#Область Переопределение

	СтандартнаяОбработкаПодсистемой = Истина;
	ОбработкаНовостейКлиентПереопределяемый.ОбработкаНажатияВТекстеНовости(
		Новости,
		ДанныеСобытия,
		Форма,
		ЭлементФормы,
		СтандартнаяОбработкаПлатформой,
		СтандартнаяОбработкаПодсистемой);

	Если СтандартнаяОбработкаПодсистемой = Ложь Тогда
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область ОпределениеСпискаНовостей

	ТипСписокЗначений = Тип("СписокЗначений");
	ТипСтрока         = Тип("Строка");

	Если ТипЗнч(Новости) = ТипСписокЗначений Тогда
		// Определить, в какой новости произошло нажатие на гиперссылку.
		УИННовости = "";
		// Допустим, что вложенность гиперссылки не более нескольких (допустим, 10) уровней.
		Если (ДанныеСобытия.Anchor <> Неопределено) Тогда
			УИННовости = НайтиУИННовостиХТМЛ(ДанныеСобытия.Anchor, 10);
		ИначеЕсли (ДанныеСобытия.Element <> Неопределено) Тогда
			УИННовости = НайтиУИННовостиХТМЛ(ДанныеСобытия.Element, 10);
		КонецЕсли;
		Если (ТипЗнч(УИННовости) = ТипСтрока)
				И (НЕ ПустаяСтрока(УИННовости)) Тогда
			Для Каждого ТекущийЭлементСписка Из Новости Цикл
				Если ВРег(ТекущийЭлементСписка.Представление) = ВРег(УИННовости) Тогда
					НовостьОбъект = ТекущийЭлементСписка.Значение;
					Прервать; // Новость найдена. Дальнейший поиск не нужен.
				КонецЕсли;
			КонецЦикла;
			Если НовостьОбъект.Пустая() Тогда
				// Не удалось определить, к какой новости относится нажатие мышкой, поэтому нельзя корректно отработать это нажатие.
				// Прервать дальнейшую обработку.
				СтандартнаяОбработкаПлатформой = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
			// Не удалось определить, к какой новости относится нажатие мышкой, поэтому нельзя корректно отработать это нажатие.
			// Прервать дальнейшую обработку.
			СтандартнаяОбработкаПлатформой = Ложь;
			Возврат;
		КонецЕсли;
	Иначе // ДокументСсылка, СправочникСсылка, ДанныеФормыСтруктура
		НовостьОбъект = Новости;
	КонецЕсли;

#КонецОбласти

#Область АнализГиперссылки

	// Гиперссылка может быть:
	// - на внешний ресурс (http(s):);
	// - на внутренний ресурс (e1c:, e1cib/);
	// - на якорь внутри новости (#);
	// - специальная ссылка (1С:).
	// В зависимости от того, это тонкий клиент или веб-клиент, может различаться набор значений в ДанныеСобытия.Anchor.
	// Необходимо и в тонком и в веб-клиенте уметь переходить по всем таким ссылкам.

	СтандартнаяОбработкаПлатформой = Ложь;
	ОшибкиПереходаПоСсылке         = Новый Массив;
	ИнформацияПереходаПоСсылке     = Новый Массив;

	СтруктураГиперссылки = Новый Структура;
#Если ВебКлиент Тогда
		СтруктураГиперссылки.Вставить("ЭтоВебКлиент"             , Истина);
#Иначе
		СтруктураГиперссылки.Вставить("ЭтоВебКлиент"             , Ложь);
#КонецЕсли
		СтруктураГиперссылки.Вставить("Href"                     , "");
		СтруктураГиперссылки.Вставить("HrefБезBaseURI"           , "");
		СтруктураГиперссылки.Вставить("BaseURIИзСтрокиСоединения", Ложь);
		СтруктураГиперссылки.Вставить("BaseURI"                  , "");
		СтруктураГиперссылки.Вставить("BaseURIБезСлеша"          , "");
		СтруктураГиперссылки.Вставить("Hash"                     , ""); // Текст после # (якорь)
		СтруктураГиперссылки.Вставить("Host"                     , "");
		СтруктураГиперссылки.Вставить("ЭтоЯкорь"                 , Ложь);

	Если (ДанныеСобытия.Anchor <> Неопределено) Тогда

		ИнформацияПереходаПоСсылке.Добавить(НСтр("ru='Анализ Anchor'"));

		СтруктураГиперссылки.Hash = ДанныеСобытия.Anchor.hash; // Текст после # (якорь)
		СтруктураГиперссылки.Host = ДанныеСобытия.Anchor.host;

		Попытка
			BaseURI = ДанныеСобытия.Anchor.baseURI; // АПК:1353 Английский идентификатор.
		Исключение
			BaseURI = ""; // АПК:1353 Английский идентификатор.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОшибкиПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка получения BaseURI по причине:
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецПопытки;

		// В InternetExplorer BaseURI может быть = Неопределено.
		// В старых версиях платформы свойства BaseURI вообще может не быть.
		Если (BaseURI = Неопределено) ИЛИ ПустаяСтрока(BaseURI) Тогда // АПК:1353 Английский идентификатор.
			BaseURI = ""; // АПК:1353 Английский идентификатор.
			Если СтруктураГиперссылки.ЭтоВебКлиент = Истина Тогда
				ПараметрыСтрокиСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
				Если ПараметрыСтрокиСоединения.Свойство("ws") Тогда
					BaseURI = ПараметрыСтрокиСоединения.ws; // АПК:1353 Английский идентификатор.
					СтруктураГиперссылки.BaseURIИзСтрокиСоединения = Истина;
				КонецЕсли;
			ИначеЕсли СтруктураГиперссылки.ЭтоВебКлиент = Ложь Тогда
				// Для файловой версии e1c:/filev/ПутьЧерезДробь или e1c:/file/ИмяБазы;
				// Для клиент-сервера: e1c://server/ИмяСервера/ИмяБазы.
				ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(
					СтрокаСоединенияИнформационнойБазы());
				Если ПараметрыПодключения.ВариантРаботыИнформационнойБазы = 0 Тогда // Файловая
					КаталогИнформационнойБазы = ПараметрыПодключения.КаталогИнформационнойБазы;
					КаталогИнформационнойБазы = СтрЗаменить(КаталогИнформационнойБазы, ":\", "/");
					КаталогИнформационнойБазы = СтрЗаменить(КаталогИнформационнойБазы, "\", "/");
					Если НЕ СтрЗаканчиваетсяНа(КаталогИнформационнойБазы, "/") Тогда
						КаталогИнформационнойБазы = КаталогИнформационнойБазы + "/";
					КонецЕсли;
					BaseURI = "e1c://filev/" // АПК:1353 Английский идентификатор.
						+ КаталогИнформационнойБазы;
				Иначе // Клиент-сервер
					BaseURI = "e1c://server/" // АПК:1353 Английский идентификатор.
						+ ПараметрыПодключения.ИмяСервера1СПредприятия + "/"
						+ ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия + "/";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		BaseURIБезСлеша = BaseURI;
		Если СтрЗаканчиваетсяНа(BaseURIБезСлеша, "/") Тогда
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(BaseURIБезСлеша, 1);
		КонецЕсли;

		// Возможно наличие "about:blank" в начале. Удалить "about:blank".
		Href = ДанныеСобытия.Anchor.Href; // АПК:1353 Английский идентификатор.
		СтрокаДляПоиска = "about:blank";
		Если СтрНачинаетсяС(НРег(Href), СтрокаДляПоиска) Тогда
			Href = Прав(Href, СтрДлина(Href) - СтрДлина(СтрокаДляПоиска)); // АПК:1353 Английский идентификатор.
			ИнформацияПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Только ссылка без about:blank = %1'"),
					Href));
		КонецЕсли;

		// Некоторые гиперссылки дополняются спереди адресом базы (BaseURI),
		//  причем адрес базы может оканчиваться на "/".
		ЭтоВнутренняяСсылка = Ложь;
		HrefБезBaseURI = Href;
		Если (НЕ ПустаяСтрока(BaseURI))
				И (СтрНачинаетсяС(ВРег(HrefБезBaseURI), ВРег(BaseURI))) Тогда
			HrefБезBaseURI = Прав(HrefБезBaseURI, СтрДлина(HrefБезBaseURI) - СтрДлина(BaseURI));
			ЭтоВнутренняяСсылка = Истина;
		ИначеЕсли (НЕ ПустаяСтрока(BaseURIБезСлеша))
				И (СтрНачинаетсяС(ВРег(HrefБезBaseURI), ВРег(BaseURIБезСлеша))) Тогда
			HrefБезBaseURI = Прав(HrefБезBaseURI, СтрДлина(HrefБезBaseURI) - СтрДлина(BaseURIБезСлеша));
			ЭтоВнутренняяСсылка = Истина;
		КонецЕсли;
		// Если BaseURI был получен из строки соединения, то он не включает код языка.
		// Проверить наличие "/КодЯзыка/", и если есть, то удалить его.
		// Если ссылка внешняя (в ней отсутствует BaseURIБезСлеша), то не удалять ничего.
		Если (СтруктураГиперссылки.ЭтоВебКлиент = Истина)
				И (СтруктураГиперссылки.BaseURIИзСтрокиСоединения = Истина)
				И (ЭтоВнутренняяСсылка = Истина) Тогда
			ГдеРазделитель = СтрНайти(HrefБезBaseURI, "/", , 2); // Начинать искать со второго символа, т.к. может быть "/ru_RU/#Tag".
			Если ГдеРазделитель > 0 Тогда
				HrefБезBaseURI = Прав(HrefБезBaseURI, СтрДлина(HrefБезBaseURI) - ГдеРазделитель);
			КонецЕсли;
		КонецЕсли;

		СтруктураГиперссылки.Href            = Href;
		СтруктураГиперссылки.HrefБезBaseURI  = HrefБезBaseURI;
		СтруктураГиперссылки.BaseURI         = BaseURI;
		СтруктураГиперссылки.BaseURIБезСлеша = BaseURIБезСлеша;

		// Если host пустое, то это ссылка вида mailto: и т.п.
		Если ПустаяСтрока(СтруктураГиперссылки.Host) Тогда
			Если (СтрНачинаетсяС(ВРег(СтруктураГиперссылки.Href), ВРег("mailto:")))
					ИЛИ (СтрНачинаетсяС(ВРег(СтруктураГиперссылки.Href), ВРег("javascript:"))) Тогда // Специальная ссылка типа "mailto:" или "javascript:".
				СтандартнаяОбработкаПлатформой = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			// Если HrefБезBaseURI пустой (для тонкого клиента старой версии платформы),
			//  или начинается с "#" (для веб-клиента или тонкого клиента новой версии платформы), и заполнен hash, то это только якорь.
			Если (СтруктураГиперссылки.ЭтоВебКлиент = Ложь)
					И (
						(ПустаяСтрока(СтруктураГиперссылки.HrefБезBaseURI))
						ИЛИ (СтрНачинаетсяС(СтруктураГиперссылки.HrefБезBaseURI, "#")))
					И (НЕ ПустаяСтрока(СтруктураГиперссылки.Hash)) Тогда
				СтруктураГиперссылки.ЭтоЯкорь = Истина;
			// Если HrefБезBaseURI пустой (для тонкого клиента), или начинается с "#" для веб-клиента, и заполнен hash, то это только якорь.
			ИначеЕсли (СтруктураГиперссылки.ЭтоВебКлиент = Истина)
					И (СтрНачинаетсяС(СтруктураГиперссылки.HrefБезBaseURI, "#"))
					И (НЕ ПустаяСтрока(СтруктураГиперссылки.Hash)) Тогда
				СтруктураГиперссылки.ЭтоЯкорь = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (ДанныеСобытия.Element <> Неопределено) Тогда

		ИнформацияПереходаПоСсылке.Добавить(НСтр("ru='Анализ Element'"));

		Если (ВРег(ДанныеСобытия.Element.tagName) = ВРег("area")) Тогда
			СтруктураГиперссылки.Href           = ДанныеСобытия.Element.Href;
			СтруктураГиперссылки.HrefБезBaseURI = ДанныеСобытия.Element.Href;
		Иначе
			СтандартнаяОбработкаПлатформой = Истина;
			Возврат;
		КонецЕсли;

	Иначе

		СтандартнаяОбработкаПлатформой = Истина;
		Возврат;

	КонецЕсли;

#КонецОбласти

#Область Переход

	ИнформацияПереходаПоСсылке.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Структура гиперссылки:
				|%1'"),
			ОбработкаНовостейКлиентСервер.ПредставлениеЗначения(СтруктураГиперссылки, "=", Символы.ПС)));

	Если СтруктураГиперссылки.ЭтоЯкорь = Истина Тогда

		ЭлементЯкорь = Неопределено;
		ИдентификаторЭлемента = Прав(СтруктураГиперссылки.Hash, СтрДлина(СтруктураГиперссылки.Hash) - 1);
		Попытка
			ИнформацияПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Попытка поиска элемента с идентификатором [%1]'"),
					ИдентификаторЭлемента));
			ЭлементЯкорь = ЭлементФормы.Документ.getElementById(ИдентификаторЭлемента);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОшибкиПереходаПоСсылке.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка получения элемента якоря с идентификатором [%1] по причине:
						|%2'"),
					ИдентификаторЭлемента,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
		КонецПопытки;

		Если ЭлементЯкорь <> Неопределено Тогда
			Попытка
				ИнформацияПереходаПоСсылке.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Попытка перехода к элементу с идентификатором [%1]'"),
						ИдентификаторЭлемента));
				// Не все браузеры поддерживают метод scrollIntoView, наличие которого нет возможности проверить заранее.
				ЭлементЯкорь.scrollIntoView(Истина); // Не все браузеры поддерживают этот метод.
				Если ДанныеСобытия.Event.ctrlKey = Истина Тогда // Был нажат Ctrl.
					// Отображать элемент сверху экрана.
					ЭлементЯкорь.scrollIntoView(Ложь); // Не все браузеры поддерживают этот метод.
				КонецЕсли;
			Исключение
				// Не все браузеры поддерживают метод scrollIntoView, наличие которого нет возможности проверить заранее.
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОшибкиПереходаПоСсылке.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка перехода к якорю с идентификатором [%1] по причине:
							|%2'"),
						ИдентификаторЭлемента,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
			КонецПопытки;
		КонецЕсли;

	Иначе

		Если СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("http")) Тогда
			ПерейтиПоИнтернетСсылке(СтруктураГиперссылки.HrefБезBaseURI);
			СтандартнаяОбработкаПлатформой = Ложь;
		ИначеЕсли СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("e1c://")) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СтруктураГиперссылки.HrefБезBaseURI);
			СтандартнаяОбработкаПлатформой = Ложь;
		ИначеЕсли СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("e1cib/")) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СтруктураГиперссылки.HrefБезBaseURI);
			СтандартнаяОбработкаПлатформой = Ложь;
		ИначеЕсли СтрНачинаетсяС(ВРег(СтруктураГиперссылки.HrefБезBaseURI), ВРег("1C:")) Тогда // 1C - "С" - английская
			// Запустить ОбработкаНавигационнойСсылки с параметрами.
			// При открытии из формы элемента справочника / документа.
			ОбработкаНовостейВызовСервера.ПодготовитьПараметрыНавигационнойСсылки(НовостьОбъект, СтруктураГиперссылки.HrefБезBaseURI, Действие, СписокПараметров);
			Если ТипЗнч(НовостьОбъект) = Тип("СправочникСсылка.Новости") Тогда
				ОбработкаНавигационнойСсылки(НовостьОбъект, Форма, Действие, СписокПараметров);
			Иначе
				ОбработкаНавигационнойСсылки(НовостьОбъект.Ссылка, Форма, Действие, СписокПараметров);
			КонецЕсли;
			СтандартнаяОбработкаПлатформой = Ложь;
		Иначе
			СтандартнаяОбработкаПлатформой = Истина;
			Возврат;
		КонецЕсли;

	КонецЕсли;

#КонецОбласти

#Область ОбработкаОшибок

	Если ОшибкиПереходаПоСсылке.Количество() > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произошла ошибка при переходе по ссылке [%1].
				|Подробная информация об ошибке:
				|%2
				|
				|%3'"),
			СтруктураГиперссылки.Href,
			СтрСоединить(ОшибкиПереходаПоСсылке, Символы.ПС),
			СтрСоединить(ИнформацияПереходаПоСсылке, Символы.ПС));
		ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ПерейтиПоИнтернетСсылке'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
			"Ошибка", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			СтруктураГиперссылки.Href, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область ОбработкаОповещений

// Обработчик оповещения в формах показа новостей.
// Как правило, используется для интерактивной обработки представления новости в случае срабатывания действий новости типа "Оповещение".
//
// Параметры:
//  ИмяСобытия - Строка - произвольные параметры;
//  Параметр   - СписокЗначений - произвольные параметры;
//  Источник   - СписокЗначений - произвольные параметры;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой произошло оповещение.
//
Процедура ПросмотрНовости_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт

	СтандартнаяОбработка = Истина;

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	// Подготовим список объектов ДокументHTML:
	МассивДокументовХТМЛ = Новый Массив;
	Если Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаДокумента" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ПримерНовостиДляВнешнихИсточников.Документ);
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ПримерНовостиДля1С.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаНовостей" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовостей.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаНовостейСоСписком" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовости.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаНовости" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовости.Документ);
	ИначеЕсли Форма.ИмяФормы = "Справочник.Новости.Форма.ФормаПросмотраНовостей" Тогда
		МассивДокументовХТМЛ.Добавить(Форма.Элементы.ТекстНовостиХТМЛ.Документ);
	Иначе
		// Для остальных форм массив документов ХТМЛ останется пустым.
	КонецЕсли;

	ОбработкаНовостейКлиентПереопределяемый.ПросмотрНовости_ОбработкаОповещения(
		ИмяСобытия,
		Параметр,
		Источник,
		Форма,
		МассивДокументовХТМЛ,
		СтандартнаяОбработка);

	ТипСписокЗначений = Тип("СписокЗначений");

	Если СтандартнаяОбработка = Истина Тогда

		Если ИмяСобытия = "Новости. Скрыть показать блок" Тогда // Идентификатор.
			// Собрать остальные параметры.
			// Для показа / скрытия блока в HTML необходимы следующие настройки:
			// Параметры:
			// - УИНБлока         - обязательная настройка;
			// - УИНМаркера       - необязательная настройка;
			// - МаркерРазвернуто - необязательная настройка;
			// - МаркерСвернуто   - необязательная настройка;
			// Источник:
			// - УИНФормы         - обязательная настройка.
			// Все настройки записываются в списке значений в Значении. В представлении пишется имя параметра.
			// Надо последовательно найти форму по идентификатору. В форме (в зависимости от ее имени) определить поле HTML документа.
			// А далее оперировать Документом HTML:
			// - найти элемент УИНБлока по идентификатору. Потом переключить класс найденного элемента (с "hidden" на "" и наоборот).
			// - при наличии элемента УИНМаркера установить ему текст.
			УИНБлока         = "";
			УИНМаркера       = "";
			МаркерРазвернуто = "";
			МаркерСвернуто   = "";
			УИНФормы         = "";
			Если ТипЗнч(Источник) = ТипСписокЗначений Тогда
				Для Каждого ТекущийЭлементСписка Из Источник Цикл
					Если СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("УИНФормы=")) Тогда
						УИНФормы = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 9);
						Попытка
							УИНФормы = Новый УникальныйИдентификатор(УИНФормы);
						Исключение
							УИНФормы = Неопределено;
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если Форма.УникальныйИдентификатор = УИНФормы Тогда
				Если ТипЗнч(Параметр) = ТипСписокЗначений Тогда
					Для Каждого ТекущийЭлементСписка Из Параметр Цикл
						Если СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("УИНБлока=")) Тогда
							УИНБлока = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 9);
						ИначеЕсли СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("УИНМаркера=")) Тогда
							УИНМаркера = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 11);
						ИначеЕсли СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("МаркерРазвернуто=")) Тогда
							МаркерРазвернуто = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 17);
						ИначеЕсли СтрНачинаетсяС(ВРег(ТекущийЭлементСписка.Значение), ВРег("МаркерСвернуто=")) Тогда
							МаркерСвернуто = Прав(ТекущийЭлементСписка.Значение, СтрДлина(ТекущийЭлементСписка.Значение) - 15);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если МассивДокументовХТМЛ.Количество() > 0 Тогда
					Если НЕ ПустаяСтрока(УИНБлока) Тогда
						Для Каждого ТекущийДокументХТМЛ Из МассивДокументовХТМЛ Цикл
							ЭлементРаздел = ТекущийДокументХТМЛ.getElementById(УИНБлока);
							Если ЭлементРаздел <> Неопределено Тогда
								СтароеИмяКласса = ЭлементРаздел.className;
								Если ВРег(СтароеИмяКласса) = ВРег("hidden") Тогда
									НовоеИмяКласса = "";
								Иначе
									НовоеИмяКласса = "hidden";
								КонецЕсли;
								ЭлементРаздел.className = НовоеИмяКласса;
								// Если введен идентификатор раздела маркера состояния, то установить ему значение текущего состояния.
								Если НЕ ПустаяСтрока(УИНМаркера) Тогда
									ЭлементРаздел = ТекущийДокументХТМЛ.getElementById(УИНМаркера);
									Если ЭлементРаздел <> Неопределено Тогда
										Если НовоеИмяКласса = "hidden" Тогда // Сейчас - скрыто.
											ЭлементРаздел.innerHTML = МаркерСвернуто;
										Иначе // Сейчас - раскрыто.
											ЭлементРаздел.innerHTML = МаркерРазвернуто;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РазныеПроцедурыИФункции

// Процедура выполняет переход по интернет ссылке (http, https).
// Если эта ссылка ведет на сайт с поддержкой авторизации ВебИТС,
//  то организовать переход таким образом. чтобы пользователю не пришлось повторно вводить логин / пароль.
//
// Параметры:
//  ИнтернетСсылка - Строка - URL, по которому необходимо перейти.
//
Процедура ПерейтиПоИнтернетСсылке(ИнтернетСсылка) Экспорт

	// ////? Определить, поддерживает ли сайт возможность авторизации (по логину/хэшу пароля или по идентификатору сессии).
	// Если сайт поддерживает пре-авторизацию (чтобы окно логина не выскакивало при переходе по ссылке),
	//  то пройти процедуру авторизации предварительно и передать сайту только служебную информацию.

	// Если необходимо динамически подставлять utm-метки и другие параметры для URL,
	//  то это лучше делать на сервере следующими процедурами процедурами:
	// - ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТекстНовостиПередПоказом;
	// - ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТекстСпискаНовостейПередПоказом.

	Попытка
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ИнтернетСсылка);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произошла ошибка при переходе по ссылке %1.
				|Подробная информация об ошибке:
				|%2'"),
			ИнтернетСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Клиент'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИмяСобытия.
			НСтр("ru='Новости. Клиент. ОбработкаНовостейКлиент. ПерейтиПоИнтернетСсылке'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), // ИдентификаторШага.
			"Ошибка", // УровеньЖурналаРегистрации строкой
			"", // ОбъектМетаданных строкой
			ИнтернетСсылка, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейКлиентПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецПопытки;

КонецПроцедуры

// Функция возвращает описание оповещения открытия файла по его имени.
// Можно пользоваться для формирования гиперссылок открытия файла в окне показа оповещений пользователю.
//
// Параметры:
//  ПолноеИмяФайла - Строка - Полное имя файла, который необходимо открыть;
//  СпособОткрытия - Строка - Способ открытия файла, возможные значения:
//   * СредствамиОС - будет вызвано НачатьЗапускПриложения, но может быть ошибка о том. что нет соответствия расширению файла;
//   * КакТекстВ1С  - файл будет открыт как текстовый документ в 1С.
//
// Возвращаемое значение:
//   ОписаниеОповещения - указатель на функцию, открывающую файл.
//
Функция ПолучитьДействиеОткрытияФайла(ПолноеИмяФайла, СпособОткрытия) Экспорт

	ЛокальныйСпособОткрытия = СпособОткрытия;
	Если ВРег(СпособОткрытия) = ВРег("КакТекстВ1С") Тогда
		ЛокальныйСпособОткрытия = "КакТекстВ1С"; // Идентификатор.
	Иначе
		ЛокальныйСпособОткрытия = "СредствамиОС"; // Идентификатор.
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура("ПолноеИмяФайла, СпособОткрытия",
		СокрЛП(ПолноеИмяФайла),
		ЛокальныйСпособОткрытия);

	Результат = Новый ОписаниеОповещения(
		"ПриВыбореФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);

	Возврат Результат;

КонецФункции

// Процедура открывает файл средствами операционной системы или в 1С как текстовый документ.
//
// Параметры:
//  ДополнительныеПараметры - Структура - структура с ключами:
//   * ПолноеИмяФайла - Строка - Полное имя файла, который необходимо открыть.
//   * СпособОткрытия - Строка - Способ открытия файла, возможные значения:
//     ** СредствамиОС - будет вызвано НачатьЗапускПриложения, но может быть ошибка о том. что нет соответствия расширению файла;
//     ** КакТекстВ1С  - файл будет открыт как текстовый документ в 1С.
//
Процедура ПриВыбореФайла(ДополнительныеПараметры) Экспорт

	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда

	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(ДополнительныеПараметры) = ТипСтруктура Тогда
		Если (ДополнительныеПараметры.Свойство("ПолноеИмяФайла"))
				И (НЕ ПустаяСтрока(ДополнительныеПараметры.ПолноеИмяФайла))
				И (ДополнительныеПараметры.Свойство("СпособОткрытия"))
				И (НЕ ПустаяСтрока(ДополнительныеПараметры.СпособОткрытия)) Тогда
			Если ВРег(ДополнительныеПараметры.СпособОткрытия) = ВРег("КакТекстВ1С") Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ДополнительныеПараметрыОткрытияФайла = Новый Структура;
				ДополнительныеПараметрыОткрытияФайла.Вставить("ЗаголовокОкна", ДополнительныеПараметры.ПолноеИмяФайла);
				ДополнительныеПараметрыОткрытияФайла.Вставить("ПолноеИмяФайла", ДополнительныеПараметры.ПолноеИмяФайла);
				ДополнительныеПараметрыОткрытияФайла.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПриПоказеФайла",
					ЭтотОбъект,
					ДополнительныеПараметрыОткрытияФайла);
				ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещения, ДополнительныеПараметры.ПолноеИмяФайла, "UTF-8", Символы.ПС);
			Иначе
				ФайловаяСистемаКлиент.ОткрытьФайл(ДополнительныеПараметры.ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры

// Процедура открывает файл средствами 1С как текстовый документ.
//
// Параметры:
//  ДополнительныеПараметры - Структура - структура с ключами:
//   * ПолноеИмяФайла - Строка - Полное имя файла, который необходимо открыть;
//   * ЗаголовокОкна  - Строка - Заголовок окна, в котором надо открыть текстовый файл.
//
Процедура ПриПоказеФайла(ДополнительныеПараметры) Экспорт

	ТипСтруктура = Тип("Структура");

	ПолноеИмяФайла    = "";
	ЗаголовокОкна     = "";
	ТекстовыйДокумент = Неопределено;

	Если ТипЗнч(ДополнительныеПараметры) = ТипСтруктура Тогда
		Если (ДополнительныеПараметры.Свойство("ПолноеИмяФайла"))
				И (ДополнительныеПараметры.Свойство("ЗаголовокОкна"))
				И (ДополнительныеПараметры.Свойство("ТекстовыйДокумент")) Тогда
			ПолноеИмяФайла    = ДополнительныеПараметры.ПолноеИмяФайла;
			ЗаголовокОкна     = ДополнительныеПараметры.ЗаголовокОкна;
			ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
			Если ТипЗнч(ТекстовыйДокумент) = Тип("ТекстовыйДокумент") Тогда
				ТекстовыйДокумент.Показать(
					ЗаголовокОкна, // Заголовок.
					ПолноеИмяФайла); // Имя файла.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

// Процедура выполняет интерактивные действия, которые невозможно выполнить на сервере - оповещения и т.п.
//
// Параметры:
//  МассивДействий - Массив.
//
Процедура ВыполнитьИнтерактивныеДействия(МассивДействий) Экспорт

	Перем Действие, ПараметрыДействия;

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(МассивДействий) = ТипМассив Тогда
		Для каждого ТекущееДействие Из МассивДействий Цикл

			ПропуститьПереопределение = Ложь;

			Если ТипЗнч(ТекущееДействие) = ТипСтруктура Тогда
				ТекущееДействие.Свойство("Действие", Действие);
				ТекущееДействие.Свойство("ПараметрыДействия", ПараметрыДействия);
				Если Действие = "Оповещение пользователю" Тогда
					Если ТипЗнч(ПараметрыДействия) = ТипСтруктура Тогда
						ТекстСообщения      = "";
						НавигационнаяСсылка = "";
						ТекстПояснения      = "";
						Картинка            = БиблиотекаКартинок.Новости;
						СтатусОповещения    = "";
						ПараметрыДействия.Свойство("Текст", ТекстСообщения);
						ПараметрыДействия.Свойство("НавигационнаяСсылка", НавигационнаяСсылка);
						ПараметрыДействия.Свойство("Пояснение", ТекстПояснения);
						ПараметрыДействия.Свойство("Картинка", Картинка);
						ПараметрыДействия.Свойство("СтатусОповещения", СтатусОповещения);
						Если ВРег(СтатусОповещения) = ВРег("Важное") Тогда
							СтатусОповещения = СтатусОповещенияПользователя.Важное;
						Иначе
							СтатусОповещения = СтатусОповещенияПользователя.Информация;
						КонецЕсли;
						ПоказатьОповещениеПользователя(
							ТекстСообщения, // Текст;
							НавигационнаяСсылка, // НавигационнаяСсылка;
							ТекстПояснения, // Пояснение;
							Картинка, // Картинка;
							СтатусОповещения,
							НавигационнаяСсылка); // КлючУникальности.
						ПропуститьПереопределение = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Переопределение.
			Если ПропуститьПереопределение <> Истина Тогда
				ОбработкаНовостейКлиентПереопределяемый.ВыполнитьИнтерактивноеДействие(ТекущееДействие);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонтекстныеНовости

// Функция получает контекстные новости из кэша. В случае необходимости кэш перезаполняется.
// Она используется в том случае, если выбрана стратегия отказа от расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  ИдентификаторМетаданных           - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы                - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости;
//  ЗаголовокФормыКонтекстныхНовостей - Строка - ;
//  ИдентификаторыСобытийПриОткрытии  - Строка, Массив - строка или массив строк идентификаторов события "ПриОткрытии".
//                                        Если передано какое-то значение, то будет подсчитано количество очень важных контекстных
//                                        новостей. И если это количество > 0, то открывающая форма инициирует
//                                        открытие формы просмотра таких новостей;
//  НастройкиПолученияНовостей        - Структура, Неопределено - структура с ключами:
//   * ПолучатьКатегорииНовостей      - Булево - если Истина, то в реквизите формы будут также сохраняться категории новостей.
//                                        Это может быть полезно для реализации особенного отбора новостей,
//                                          который невозможно реализовать с помощью регистров сведений ОтборыПоЛентамНовостей*.
//
// Возвращаемое значение:
//   Структура - структура контекстных новостей для указанной комбинации ИдентификаторМетаданных / ИдентификаторФормы.
//       Ключи см. в ОбработкаНовостей.ПолучитьКонтекстныеНовостиДляФормы.
//
Функция ПолучитьКонтекстныеНовостиИзКэшаПриложения(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей = "",
			ИдентификаторыСобытийПриОткрытии = "ПриОткрытии",
			НастройкиПолученияНовостей = Неопределено)

	// В памяти клиента в переменной ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"])
	//  должно храниться соответствие следующей структуры:
	// Ключ: ИдентификаторМетаданных;
	// Значение: Соответствие:
	//   Ключ: ИдентификаторФормы;
	//   Значение: Структура:
	//     Ключ: ДатаЗаполнения, если прошло много времени, то обновить;
	//     Ключ: Новости (массив структур);
	//     Ключ: ЗаголовокФормыКонтекстныхНовостей;
	//     Ключ: КоличествоНовостей;
	//     Ключ: КоличествоНепрочитанныхНовостей;
	//     Ключ: КоличествоВажныхНовостейПриОткрытии;
	//     Ключ: КоличествоОченьВажныхНовостейПриОткрытии;
	//     Ключ: КоличествоПостоянныхНовостей;
	//     Ключ: МассивСтруктурВажныхНовостей;
	//     Ключ: МассивСтруктурПостоянныхНовостей.
	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");
	РассчитатьДляФормы = Ложь;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		Если (НайденноеЗначениеДляМетаданных = Неопределено)
				ИЛИ (ТипЗнч(НайденноеЗначениеДляМетаданных) <> ТипСоответствие) Тогда // Заполнить
			ЛокальныйКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, Новый Соответствие);
			РассчитатьДляФормы = Истина;
		Иначе
			НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
			Если (НайденноеЗначениеДляФормы = Неопределено)
					ИЛИ (ТипЗнч(НайденноеЗначениеДляФормы) <> ТипСтруктура) Тогда // Заполнить
				РассчитатьДляФормы = Истина;
			Иначе
				// Когда последний раз обновлялось?
				Если НайденноеЗначениеДляФормы.Свойство("ДатаЗаполнения")
						И (ТипЗнч(НайденноеЗначениеДляФормы.ДатаЗаполнения) = ТипДата)
						И (НайденноеЗначениеДляФормы.ДатаЗаполнения >= (ОбщегоНазначенияКлиент.ДатаСеанса() - 1*60*60)) Тогда
					// Проверить остальные реквизиты.
					Если НайденноеЗначениеДляФормы.Свойство("Новости")
							И НайденноеЗначениеДляФормы.Свойство("ЗаголовокФормыКонтекстныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоНовостей")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоНепрочитанныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоВажныхНовостейПриОткрытии")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоОченьВажныхНовостейПриОткрытии")
							И НайденноеЗначениеДляФормы.Свойство("КоличествоПостоянныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("МассивСтруктурВажныхНовостей")
							И НайденноеЗначениеДляФормы.Свойство("МассивСтруктурПостоянныхНовостей") Тогда
						// Ничего не делать.
					Иначе
						РассчитатьДляФормы = Истина;
					КонецЕсли;
				Иначе
					РассчитатьДляФормы = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе // Неопределено или неправильный тип.
		ЛокальныйКэшКонтекстныхНовостей = Новый Соответствие;
		ЛокальныйКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, Новый Соответствие);
		РассчитатьДляФормы = Истина;
	КонецЕсли;

	Если РассчитатьДляФормы = Истина Тогда
		НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		НайденноеЗначениеДляФормы = ОбработкаНовостейВызовСервера.ПолучитьКонтекстныеНовостиДляФормы(
			ИдентификаторМетаданных,
			ИдентификаторФормы,
			ЗаголовокФормыКонтекстныхНовостей,
			ИдентификаторыСобытийПриОткрытии,
			НастройкиПолученияНовостей);
		НайденноеЗначениеДляМетаданных.Вставить(ИдентификаторФормы, НайденноеЗначениеДляФормы);
		ЛокальныйКэшКонтекстныхНовостей.Вставить(ИдентификаторМетаданных, НайденноеЗначениеДляМетаданных);
	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);

	Возврат НайденноеЗначениеДляФормы;

КонецФункции

// Процедура удаляет контекстные новости из кэша. Потом кэш перезаполняется.
// Ее надо запускать в том случае, когда у новостей изменился признак оповещения, чтобы кэш контекстных новостей перезаполнился.
// Она используется в том случае, если выбрана стратегия отказа от расчета списка контекстных новостей в ПриСозданииНаСервере.
//
// Параметры:
//  ИдентификаторМетаданных - Строка - Идентификатор метаданных, должен совпадать с таким же идентификатором в самой новости;
//  ИдентификаторФормы      - Строка - Идентификатор формы, должен совпадать с таким же идентификатором в самой новости.
//                                     Если Неопределено, то удаляются все контекстные новости для этого ИдентификаторМетаданных.
//
Процедура УдалитьКонтекстныеНовостиИзКэшаПриложения(
				ИдентификаторМетаданных,
				ИдентификаторФормы = Неопределено) Экспорт

	ТипСоответствие = Тип("Соответствие");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		НайденноеЗначениеДляМетаданных = ЛокальныйКэшКонтекстныхНовостей.Получить(ИдентификаторМетаданных);
		Если (НайденноеЗначениеДляМетаданных <> Неопределено)
				И (ТипЗнч(НайденноеЗначениеДляМетаданных) = ТипСоответствие) Тогда
			Если ИдентификаторФормы = Неопределено Тогда
				ЛокальныйКэшКонтекстныхНовостей.Удалить(ИдентификаторМетаданных);
			Иначе
				НайденноеЗначениеДляФормы = НайденноеЗначениеДляМетаданных.Получить(ИдентификаторФормы);
				Если (НайденноеЗначениеДляФормы <> Неопределено) Тогда // Заполнить
					НайденноеЗначениеДляМетаданных.Удалить(ИдентификаторФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);
	Иначе
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, Новый Соответствие);
	КонецЕсли;

КонецПроцедуры

// Процедура запускает оптимизацию кэша контекстных новостей
//  (глобальной переменной ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей"])).
// Оптимизация заключается в:
// 1) Если есть структуры, полученные > 1 часа назад, то удалить их;
// 2) Если количество структур Метаданные / Форма >= 50, то удалить самые старые (по времени получения), чтобы осталось 40 структур.
//
Процедура ОптимизацияКонтекстныхНовостейВКэшеПриложения() Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");

	СписокСтруктур = Новый СписокЗначений;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.КэшКонтекстныхНовостей";
	ЛокальныйКэшКонтекстныхНовостей = ПараметрыПриложения[ИмяПараметраПриложения];

	// 1. Удалить все устаревшие кэши контекстных новостей (полученные более часа назад).
	// Параллельно собрать данные для удаления кэша по времени или по количеству.
	Если ТипЗнч(ЛокальныйКэшКонтекстныхНовостей) = ТипСоответствие Тогда
		Для Каждого ЛокальноеИмяМетаданных Из ЛокальныйКэшКонтекстныхНовостей Цикл
			Если ТипЗнч(ЛокальноеИмяМетаданных.Значение) = ТипСоответствие Тогда
				Для Каждого ЛокальноеИмяФормы Из ЛокальноеИмяМетаданных.Значение Цикл
					Если ТипЗнч(ЛокальноеИмяФормы.Значение) = ТипСтруктура Тогда
						Если ЛокальноеИмяФормы.Значение.Свойство("ДатаЗаполнения")
								И ТипЗнч(ЛокальноеИмяФормы.Значение.ДатаЗаполнения) = ТипДата
								И ЛокальноеИмяФормы.Значение.ДатаЗаполнения >= (ОбщегоНазначенияКлиент.ДатаСеанса() - 1*60*60) Тогда
							// Данные актуальны, сохранить их для следующей проверки
							СписокСтруктур.Добавить(
								Новый Структура("ИдентификаторМетаданных, ИдентификаторФормы",
									ЛокальноеИмяМетаданных.Ключ,
									ЛокальноеИмяФормы.Ключ),
								Формат(ЛокальноеИмяФормы.Значение.ДатаЗаполнения, "ДФ=yyyyMMddhhmmss"));
						Иначе
							УдалитьКонтекстныеНовостиИзКэшаПриложения(ЛокальноеИмяМетаданных.Ключ, ЛокальноеИмяФормы.Ключ);
						КонецЕсли;
					Иначе
						УдалитьКонтекстныеНовостиИзКэшаПриложения(ЛокальноеИмяМетаданных.Ключ, ЛокальноеИмяФормы.Ключ);
					КонецЕсли;
				КонецЦикла;
			Иначе
				УдалитьКонтекстныеНовостиИзКэшаПриложения(ЛокальноеИмяМетаданных.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЛокальныйКэшКонтекстныхНовостей = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ЛокальныйКэшКонтекстныхНовостей);

	// 2. Удалить самые старые кэши контекстных новостей, если общее количество кэшей > 50, чтобы осталось 40 кэшей.
	Если СписокСтруктур.Количество() >= 50 Тогда
		СписокСтруктур.СортироватьПоПредставлению(НаправлениеСортировки.Убыв); // Самые старые - в конце
		СколькоУдалить = СписокСтруктур.Количество() - 40;
		Для С=0 По СколькоУдалить-1 Цикл
			УдалитьКонтекстныеНовостиИзКэшаПриложения(
				СписокСтруктур[40+С].Значение.ИдентификаторМетаданных,
				СписокСтруктур[40+С].Значение.ИдентификаторФормы);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПанельКонтекстныхНовостей

// Процедура регулярно оповещает открытые формы о том, что надо "перелистнуть" новость в панели контекстных новостей.
//
Процедура ПанельКонтекстныхНовостей_Автолистание() Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСоответствие = Тип("Соответствие");

	ТекущаяДатаСеансаДляПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПараметрыОбработчиковПанелиКонтекстныхНовостей = ПанельКонтекстныхНовостей_ПараметрыОбработчиков();
	ИнтервалАвтолистанияСекунд = ПараметрыОбработчиковПанелиКонтекстныхНовостей.ИнтервалАвтолистанияСекунд;

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
		ПараметрыАвтолистания = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАвтолистания.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей");
	Иначе
		Для Каждого ТекущаяФорма Из ПараметрыАвтолистания Цикл
			Если ТекущаяФорма.Значение <= ТекущаяДатаСеансаДляПроверки Тогда
				Оповестить("Новости. Продолжить автолистание в Панели контекстных новостей", ТекущаяФорма.Ключ); // АПК:761 Идентификатор.
				ПараметрыАвтолистания.Вставить(ТекущаяФорма.Ключ, ТекущаяДатаСеансаДляПроверки + ИнтервалАвтолистанияСекунд);
			КонецЕсли;
		КонецЦикла;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);
	КонецЕсли;

КонецПроцедуры

// Процедура регулярно проверяет открытые формы и меняет
//  анимированную иконку "ИнформацияНовости16Анимированная" на "ИнформацияНовости16Статичная".
// Данные хранятся в ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"].
//
Процедура ПанельКонтекстныхНовостей_ВыключениеАнимированныхИконок() Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСоответствие = Тип("Соответствие");

	ТекущаяДатаСеансаДляПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
		ПараметрыАнимированныхИконок = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАнимированныхИконок.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей");
	Иначе
		БылиУдаления = Истина;
		Пока БылиУдаления = Истина Цикл
			БылиУдаления = Ложь;
			Для Каждого ТекущаяФорма Из ПараметрыАнимированныхИконок Цикл
				ПараметрыАнимированныхИконок.Удалить(ТекущаяФорма.Ключ);
				Если ТекущаяФорма.Значение <= ТекущаяДатаСеансаДляПроверки Тогда
					Оповестить("Новости. Выключить анимацию иконки в Панели контекстных новостей", ТекущаяФорма.Ключ); // АПК:761 Идентификатор.
					БылиУдаления = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);
	КонецЕсли;

КонецПроцедуры

// Процедура регулярно проверяет открытые формы и очищает глобальные переменные
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"]
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"]
//  от устаревших (закрытых форм).
//
Процедура ПанельКонтекстныхНовостей_ОптимизацияОбработчиков() Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСоответствие = Тип("Соответствие");

#Область Автолистание

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
		ПараметрыАвтолистания = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАвтолистания.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей");
	Иначе
		НовыеПараметрыАвтолистания = Новый Соответствие;
		// Формы закрывают, поэтому надо регулярно очищать соответствие.
		// Пройдем по открытым формам, и если для нее есть соответствие, то скопируем его в новый набор соответствий.
		ВсеОкна = ПолучитьОкна();
		Если ВсеОкна <> Неопределено Тогда
			Для Каждого ТекущееОкно Из ВсеОкна Цикл
				Если (НЕ ТекущееОкно.НачальнаяСтраница) И (НЕ ТекущееОкно.Основное) Тогда
					Для Каждого ТекущаяФорма Из ТекущееОкно.Содержимое Цикл
						НайденноеСоответствие = ПараметрыАвтолистания.Получить(ТекущаяФорма.УникальныйИдентификатор);
						Если НайденноеСоответствие <> Неопределено Тогда
							НовыеПараметрыАвтолистания.Вставить(ТекущаяФорма.УникальныйИдентификатор, НайденноеСоответствие);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, НовыеПараметрыАвтолистания);
		ПараметрыАвтолистания = НовыеПараметрыАвтолистания;
	КонецЕсли;

#КонецОбласти

#Область ВыключениеАнимированныхИконок

	// ПараметрыПриложения - глобальная переменная.
	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
	ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
		ПараметрыАнимированныхИконок = Новый Соответствие;
	КонецЕсли;

	Если ПараметрыАнимированныхИконок.Количество() = 0 Тогда
		ОтключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей");
	Иначе
		НовыеПараметрыАнимированныхИконок = Новый Соответствие;
		// Формы закрывают, поэтому надо регулярно очищать соответствие.
		// Пройдем по открытым формам, и если для нее есть соответствие, то скопируем его в новый набор соответствий.
		ВсеОкна = ПолучитьОкна();
		Если ВсеОкна <> Неопределено Тогда
			Для Каждого ТекущееОкно Из ВсеОкна Цикл
				Если (НЕ ТекущееОкно.НачальнаяСтраница) И (НЕ ТекущееОкно.Основное) Тогда
					Для Каждого ТекущаяФорма Из ТекущееОкно.Содержимое Цикл
						НайденноеСоответствие = ПараметрыАнимированныхИконок.Получить(ТекущаяФорма.УникальныйИдентификатор);
						Если НайденноеСоответствие <> Неопределено Тогда
							НовыеПараметрыАнимированныхИконок.Вставить(ТекущаяФорма.УникальныйИдентификатор, НайденноеСоответствие);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, НовыеПараметрыАнимированныхИконок);
		ПараметрыАнимированныхИконок = НовыеПараметрыАнимированныхИконок;
	КонецЕсли;

#КонецОбласти

	Если (ПараметрыАнимированныхИконок.Количество() = 0)
			И (ПараметрыАвтолистания.Количество() = 0) Тогда
		ОтключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей");
	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью панели контекстных новостей в форме, а также сохраняет настройки (дату закрытия),
//  чтобы через некоторое время снова открыть панель.
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой необходимо изменить видимость панели контекстных новостей;
//  Видимость - Булево - новое состояние видимости.
//
Процедура ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма, Видимость)

	// Изменить видимость на форме.
	Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = (Видимость = Истина);
	Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
		Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Пометка = Форма.Элементы.ПанельКонтекстныхНовостей.Видимость;
	КонецЕсли;

	// Сохранить состояние в регистре сведений.
	// Здесь же будут обновлены параметры реквизита Форма.Новости:
	// - ВидимостьПанелиКонтекстныхНовостей;
	// - ДатаОтключенияПанелиКонтекстныхНовостей;
	// - ДатаПоследнейНовостиПанелиКонтекстныхНовостей.
	ОбработкаНовостейВызовСервера.ПанельКонтекстныхНовостей_ИзменитьВидимость(Форма.Новости, Видимость);

	// Подключить или удалить обработчики автолистания и замены анимированной иконки на статичную.
	ПанельКонтекстныхНовостей_УправлениеГлобальнымиОбработчиками(Форма);

КонецПроцедуры

// Возвращает основные параметры обработчиков панели контекстных новостей.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//    * ИнтервалАвтолистанияСекунд - Число - частота автолистания, 10..999 секунд. По-умолчанию - 15;
//    * ПаузаАвтолистанияПриРучнойПеремоткеСекунд - Число - пауза перед возобновлением автолистания,
//                если пользователь вручную переключился на другую новость, 10..999 секунд. По-умолчанию - 60 секунд;
//    * ВыключениеАнимированнойИконкиСекунд - Число - время, через которое анимированная иконка
//                станет статичной, 10...999 секунд. По-умолчанию - 30 секунд.
//
Функция ПанельКонтекстныхНовостей_ПараметрыОбработчиков()

	ТипЧисло     = Тип("Число");
	ТипСтруктура = Тип("Структура");

	Результат = Новый Структура;
	Результат.Вставить("ИнтервалАвтолистанияСекунд", 15);
	Результат.Вставить("ПаузаАвтолистанияПриРучнойПеремоткеСекунд", 60);
	Результат.Вставить("ВыключениеАнимированнойИконкиСекунд", 30);

	ОбработкаНовостейКлиентПереопределяемый.ПанельКонтекстныхНовостей_ПараметрыОбработчиков(Результат);

	Если ТипЗнч(Результат) = ТипСтруктура Тогда
		Если Результат.Свойство("ИнтервалАвтолистанияСекунд")
				И (ТипЗнч(Результат.ИнтервалАвтолистанияСекунд) = ТипЧисло)
				И (Результат.ИнтервалАвтолистанияСекунд >= 10)
				И (Результат.ИнтервалАвтолистанияСекунд <= 999) Тогда
			// Ничего делать не нужно.
		Иначе
			Результат.Вставить("ИнтервалАвтолистанияСекунд", 15);
		КонецЕсли;
		Если Результат.Свойство("ПаузаАвтолистанияПриРучнойПеремоткеСекунд")
				И (ТипЗнч(Результат.ПаузаАвтолистанияПриРучнойПеремоткеСекунд) = ТипЧисло)
				И (Результат.ПаузаАвтолистанияПриРучнойПеремоткеСекунд >= 10)
				И (Результат.ПаузаАвтолистанияПриРучнойПеремоткеСекунд <= 999) Тогда
			// Ничего делать не нужно.
		Иначе
			Результат.Вставить("ПаузаАвтолистанияПриРучнойПеремоткеСекунд", 60);
		КонецЕсли;
		Если Результат.Свойство("ВыключениеАнимированнойИконкиСекунд")
				И (ТипЗнч(Результат.ВыключениеАнимированнойИконкиСекунд) = ТипЧисло)
				И (Результат.ВыключениеАнимированнойИконкиСекунд >= 10)
				И (Результат.ВыключениеАнимированнойИконкиСекунд <= 999) Тогда
			// Ничего делать не нужно.
		Иначе
			Результат.Вставить("ВыключениеАнимированнойИконкиСекунд", 30);
		КонецЕсли;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("ИнтервалАвтолистанияСекунд", 15);
		Результат.Вставить("ПаузаАвтолистанияПриРучнойПеремоткеСекунд", 60);
		Результат.Вставить("ВыключениеАнимированнойИконкиСекунд", 30);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Подключает / отключает глобальные обработчики:
//  - автолистание;
//  - замена анимированной иконки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, которую надо подключить / отключить от глобальных обработчиков.
//
Процедура ПанельКонтекстныхНовостей_УправлениеГлобальнымиОбработчиками(Форма)

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура    = Тип("Структура");
	ТипСоответствие = Тип("Соответствие");

	// Если есть больше одной новости для панели контекстных новостей, включен режим листание, автолистание или список новостей,
	//  и панель контекстных новостей не скрыта,
	//  то подключить глобальные обработчики автолистания и замены анимированной иконки.
	Если (ТипЗнч(Форма.Новости) = ТипСтруктура)
			И (Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей > 0)
			И (Форма.Новости.ВидимостьПанелиКонтекстныхНовостей = Истина) Тогда
		ПараметрыОбработчиковПанелиКонтекстныхНовостей = ПанельКонтекстныхНовостей_ПараметрыОбработчиков();
		Если (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание") Тогда
			// Заполнить нужные данные для глобального перелистывания.
			// В параметре хранится соответствие, где ключ = идентификатор формы, а значение - дата/время начала автолистания.
			// Если пользователь вручную перелистнет новости, то автолистание остановится на 1 минуту.

			ИнтервалАвтолистанияСекунд = ПараметрыОбработчиковПанелиКонтекстныхНовостей.ИнтервалАвтолистанияСекунд;

			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
				ПараметрыАвтолистания = Новый Соответствие;
			КонецЕсли;
			// Автолистание нужно только если новостей больше одной.
			Если (Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей > 1) Тогда
				ПараметрыАвтолистания.Вставить(Форма.УникальныйИдентификатор, ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалАвтолистанияСекунд - 1);
			КонецЕсли;
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

			// Раз мы явно подключили автолистание, то подключить необходимые глобальные обработчики.
			// При необходимости эти обработчики отключатся самостоятельно.
			ОтключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("АвтолистаниеВПанелиКонтекстныхНовостей", ИнтервалАвтолистанияСекунд, Ложь);
			ИнтервалОптимизацииОбработчиковСекунд = 10;
			ОтключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей", ИнтервалОптимизацииОбработчиковСекунд, Ложь);

		ИначеЕсли (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
				ИЛИ (Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей") Тогда

			// Заполнить нужные данные для выключения анимированных иконок.
			// В параметре хранится соответствие, где ключ = идентификатор формы, а значение - дата/время начала анимирования.

			ИнтервалВыключенияИконокСекунд = ПараметрыОбработчиковПанелиКонтекстныхНовостей.ВыключениеАнимированнойИконкиСекунд;

			// ПараметрыПриложения - глобальная переменная.
			Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
				ПараметрыПриложения = Новый Соответствие;
			КонецЕсли;
			ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
			ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
			Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
				ПараметрыАнимированныхИконок = Новый Соответствие;
			КонецЕсли;
			ПараметрыАнимированныхИконок.Вставить(Форма.УникальныйИдентификатор, ОбщегоНазначенияКлиент.ДатаСеанса() + ИнтервалВыключенияИконокСекунд - 1);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);

			// Раз мы явно подключили выключение анимированных иконок, то подключить необходимые глобальные обработчики.
			// При необходимости эти обработчики отключатся самостоятельно.
			ОтключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("ВыключениеАнимированныхИконокВПанелиКонтекстныхНовостей", ИнтервалВыключенияИконокСекунд, Ложь);
			ИнтервалОптимизацииОбработчиковСекунд = 10;
			ОтключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей");
			ПодключитьОбработчикОжидания("ОптимизацияОбработчиковПанелейКонтекстныхНовостей", ИнтервалОптимизацииОбработчиковСекунд, Ложь);

		КонецЕсли;

	Иначе // Удалить обработчики

		// Явно отключать обработчики не обязательно - они отключатся сами, когда не будет данных.

		// ПараметрыПриложения - глобальная переменная.
		Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
			ПараметрыПриложения = Новый Соответствие;
		КонецЕсли;
		ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АвтолистаниеДляПанелейКонтекстныхНовостей"; // Идентификатор.
		ПараметрыАвтолистания = ПараметрыПриложения[ИмяПараметраПриложения];
		Если ТипЗнч(ПараметрыАвтолистания) <> ТипСоответствие Тогда
			ПараметрыАвтолистания = Новый Соответствие;
		КонецЕсли;
		// Автолистание нужно только если новостей больше одной.
		ПараметрыАвтолистания.Удалить(Форма.УникальныйИдентификатор);
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАвтолистания);

		// ПараметрыПриложения - глобальная переменная.
		Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
			ПараметрыПриложения = Новый Соответствие;
		КонецЕсли;
		ИмяПараметраПриложения = "ИнтернетПоддержкаПользователей.Новости.АнимированныеИконкиДляПанелейКонтекстныхНовостей"; // Идентификатор.
		ПараметрыАнимированныхИконок = ПараметрыПриложения[ИмяПараметраПриложения];
		Если ТипЗнч(ПараметрыАнимированныхИконок) <> ТипСоответствие Тогда
			ПараметрыАнимированныхИконок = Новый Соответствие;
		КонецЕсли;
		ПараметрыАнимированныхИконок.Удалить(Форма.УникальныйИдентификатор);
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПараметрыАнимированныхИконок);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегулярнаяПроверкаНовостейТребующихПрочтения

// Начиная с 8.3.10.2168 все важные новости просто выводятся в цикле, и сама платформа отображает их пачками по 3 штуки.
// Подробности: https://wonderland.v8.1c.ru/blog/mekhanizm-opoveshcheniy-polzovatelya-i-tsentr-opoveshcheniy/.
//
// Параметры:
//  ВажныеНовости      - Массив структур - новости с важностью "Важная", где:
//    * Новость                        - СправочникСсылка.Новости - ссылка на новость, обязательный ключ;
//    * НовостьУникальныйИдентификатор - УникальныйИдентификатор, Неопределено - УИН от ссылки на новость, НЕобязательный ключ;
//    * НавигационнаяСсылка            - Строка - навигационная ссылка на новость, обязательный ключ;
//    * НовостьНаименование            - Строка - заголовок новости, обязательный ключ;
//    * НовостьПодзаголовок            - Строка - подзаголовок новости, обязательный ключ;
//    * ОповещениеВключено             - Булево, Неопределено - Признак, что оповещение включено, НЕобязательный ключ;
//    * ИконкаНовости                  - Картинка, Неопределено - иконка новости для оповещения пользователю.
//
Процедура НачатьПоследовательныйПоказВажныхНовостей(ВажныеНовостиСВключеннымиНапоминаниями) Экспорт

	ТипМассив   = Тип("Массив");
	ТипКартинка = Тип("Картинка");

	Если ТипЗнч(ВажныеНовостиСВключеннымиНапоминаниями) = ТипМассив Тогда
		// В этот список должны попадать только новости с включенными напоминаниями,
		//  поэтому дополнительная проверка на ОповещениеВключено не проводится.
		Для Каждого ТекущаяНовость Из ВажныеНовостиСВключеннымиНапоминаниями Цикл
			Если (ТекущаяНовость.Свойство("ИконкаНовости"))
					И (ТипЗнч(ТекущаяНовость.ИконкаНовости) = ТипКартинка) Тогда
				ИконкаНовости = ТекущаяНовость.ИконкаНовости;
			Иначе
				ИконкаНовости = БиблиотекаКартинок.ВажностьНовостиВажная;
			КонецЕсли;
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Ключ", ТекущаяНовость.Новость);
			ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна", "Независимое"); // Идентификатор.
			ПараметрыОткрытияФормы.Вставить("ИнициаторОткрытияНовости", "ВажнаяНовость"); // Идентификатор.
			ПараметрыОткрытияФормы.Вставить("НовостьНаименование", ТекущаяНовость.НовостьНаименование); // Заголовок новости.
			ПараметрыОткрытияФормы.Вставить("НовостьКодЛентыНовостей", ТекущаяНовость.НовостьКодЛентыНовостей); // Код ленты новостей.
			ПараметрыОткрытияНовости = Новый Структура;
			ПараметрыОткрытияНовости.Вставить("НовостьСсылка", ТекущаяНовость.Новость);
			ПараметрыОткрытияНовости.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
			ПараметрыОткрытияНовости.Вставить("Уникальность", ТекущаяНовость.НавигационнаяСсылка);
			ДействиеПриНажатии = Новый ОписаниеОповещения(
				"ПоказатьВажнуюНовость",
				ОбработкаНовостейКлиент,
				ПараметрыОткрытияНовости);
			ПоказатьОповещениеПользователя(
				СокрЛП(ТекущаяНовость.НовостьНаименование), // Текст, Новость.Наименование
				ДействиеПриНажатии, // НавигационнаяСсылка
				СокрЛП(ТекущаяНовость.НовостьПодзаголовок), // Пояснение, Новость.Подзаголовок
				ИконкаНовости, // Картинка
				СтатусОповещенияПользователя.Важное, // СтатусОповещенияПользователя
				ТекущаяНовость.НавигационнаяСсылка); // КлючУникальности
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура показывает важную новость. Является "оболочкой" для функции ПоказатьНовость.
//
// Параметры:
//  ПараметрыОткрытияНовости - Структура - структура с ключами:
//   * НовостьСсылка          - СправочникСсылка.Новости - открываемая новость;
//   * ПараметрыОткрытияФормы - Структура - параметры открытия формы новости. Можно заполнять:
//     ** Ключ - Ссылка на новость;
//     ** РежимОткрытияОкна - Строка - "БлокироватьОкноВладельца" или любое другое значение (которое будет воспринято как "Независимое");
//     ** ИнициаторОткрытияНовости - Строка - произвольное значение для дальнейшей обработки в переопределяемых модулях.
//   * Уникальность           - Произвольный - Уникальность открываемой формы. Ложь для уникальности по-умолчанию.
//
Процедура ПоказатьВажнуюНовость(ПараметрыОткрытияНовости) Экспорт

	Если НЕ РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		Возврат;
	КонецЕсли;

	ПоказатьНовость(
		ПараметрыОткрытияНовости.НовостьСсылка,
		ПараметрыОткрытияНовости.ПараметрыОткрытияФормы,
		Неопределено, // Форма-владелец.
		ПараметрыОткрытияНовости.Уникальность);

КонецПроцедуры

#КонецОбласти

#Область БСПНастройкиПрограммы

// Процедура обрабатывает нажатие кнопки в подтверждении отключения ФО "РазрешенаРаботаСНовостями".
//
// Параметры:
//  РезультатВопроса        - Строка - код ответа. Возможные значения: "Отключить", "НеОтключать";
//  ДополнительныеПараметры - Структура - структура с ключами:
//   * Форма - ФормаКлиентскогоПриложения - указатель на форму настроек;
//   * Элемент - ПолеФормы - элемент управления.
//
Процедура ИнтернетПоддержкаИСервисы_ВключитьРаботуСНовостямиПриОтключении(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;

	Если РезультатВопроса = "НеОтключать" Тогда // Идентификатор.
		Форма.БИПВключитьРаботуСНовостями = НЕ Форма.БИПВключитьРаботуСНовостями;
	КонецЕсли;

	// Обработка изменения ФО "РазрешенаРаботаСНовостями".
	ОбработкаНовостейВызовСервера.ИнтернетПоддержкаИСервисы_ВключитьРаботуСНовостямиПриИзменении(
		Форма.БИПВключитьРаботуСНовостями);
	Форма.Элементы.БИПУправлениеНовостями.Видимость =
		Форма.БИПВключитьРаботуСНовостями;
	ОбновитьПовторноИспользуемыеЗначения();
	// Конец Обработка изменения ФО "РазрешенаРаботаСНовостями".

КонецПроцедуры

#КонецОбласти

#Область ЛогИОтладка

// Функция возвращает массив всех возможных событий журнала регистрации для событий подсистемы.
// Нужно для формирования журнала регистрации из Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации.
//
// Возвращаемое значение:
//   Массив - Массив всех возможных событий.
//
Функция ПолучитьСписокВсехСобытийЖурналаРегистрации() Экспорт // АПК:559 не вызывается на сервере. // АПК:307 Список - не тип данных.

	Результат = Новый Массив;
		Результат.Добавить("БИП:Новости.Разное");
		Результат.Добавить("БИП:Новости.Клиент");
		Результат.Добавить("БИП:Новости.Отладка");
		Результат.Добавить("БИП:Новости.Все обновления новостей");
		Результат.Добавить("БИП:Новости.Сервис и регламент");
		Результат.Добавить("БИП:Новости.Обновление ИБ");
		Результат.Добавить("БИП:Новости.Загрузка новостей");
		Результат.Добавить("БИП:Новости.Загрузка классификаторов");
		Результат.Добавить("БИП:Новости.Хранилище настроек новостей");
		Результат.Добавить("БИП:Новости.Переопределяемый");
		Результат.Добавить("БИП:Новости.Изменение данных");

	Возврат Результат;

КонецФункции

// Функция возвращает массив всех возможных событий изменения данных журнала регистрации для событий подсистемы.
// Нужно для формирования журнала регистрации из Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации.
//
// Возвращаемое значение:
//   Массив - Массив всех возможных событий.
//
Функция ПолучитьСписокВсехСобытийИзмененияДанныхЖурналаРегистрации() Экспорт // АПК:559 не вызывается на сервере. // АПК:307 Список - не тип данных.

	Результат = Новый Массив;
		Результат.Добавить("_$Data$_.Delete");
		Результат.Добавить("_$Data$_.New");
		Результат.Добавить("_$Data$_.Post");
		Результат.Добавить("_$Data$_.Unpost");
		Результат.Добавить("_$Data$_.Update");
		Результат.Добавить("_$Job$_.Cancel");
		Результат.Добавить("_$Job$_.Fail");
		Результат.Добавить("_$Job$_.Start");
		Результат.Добавить("_$Job$_.Succeed");
		Результат.Добавить("_$Job$_.Terminate");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СостояниеПодсистемы

// Получает состояние подсистемы.
//
// Возвращаемое значение:
//   Строка - см. параметр "СостояниеПодсистемы", метод ОбработкаНовостей.УстановитьСостояниеПодсистемы().
//
Функция ПолучитьСостояниеПодсистемы() Экспорт

	Результат = ОбработкаНовостейКлиентПовтИсп.ПолучитьСостояниеПодсистемы();

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
