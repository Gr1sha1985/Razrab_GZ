////////////////////////////////////////////////////////////////////////////////
// ПрограммныйИнтерфейсСервиса: выполнение штатных функций МС прикладным кодом
// через внешний API 
////////////////////////////////////////////////////////////////////////////////
// @strict-types

#Область ПрограммныйИнтерфейс

// Возвращает свойства версии программного интерфейса менеджера сервиса.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура - свойства версии внешнего программного интерфейса:
//   * Версия - Число - номер версии внешнего программного интерфейса.
//   * ВерсияМенеджераСервиса - Строка - номер версии менеджера сервиса.
//   * ЧасовойПоясМенеджераСервиса - Строка - часовой пояс менеджера сервиса.
//
Функция СвойстваВерсииИнтерфейса() Экспорт
КонецФункции

#Область Account

// Возвращает список тарифов обслуживающей организации.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодБазовогоТарифа - Строка - код базового тарифа
//   * КраткоеОписание - Строка - краткое описание тарифа
//
Функция ТарифыОбслуживающейОрганизации(КодОО) Экспорт
КонецФункции

// Возвращает список рекомендуемых тарифов, определенных обслуживающей организацией.
// Реализует метод внешнего программного интерфейса - account/servants/recommended_tariffs
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов:
//   * КодТарифаПровайдера - Строка - код тарифа провайдера
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации.
Функция РекомендуемыеТарифы(КодОО) Экспорт
КонецФункции
 
// Возвращает HTML-страницу выбора тарифа обслуживающей организации абонента этого приложения.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Строка - HTML-страница выбора тарифа обслуживающей организации.
//
Функция СтраницаВыбораТарифаОбслуживающейОрганизации(КодОО,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Возвращает список обслуживающих организаций абонента этого приложения.
// @skip-warning ПустойМетод - особенность реализации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - обслуживающие организации абонента:
//   * Код - Число - код (номер) обслуживающей организации
//   * Наименование - Строка - наименование обслуживающей организации
//   * Город - Строка - город
//   * Сайт - Строка - сайт
//   * Почта - Строка - электронная почта
//   * Телефон - Строка - телефон
//   * РазрешеноПодписыватьНаТарифы - Булево - разрешено подписывать на тарифы
//   * РазрешеноАвтоматическоеВыставлениеСчетов - Булево - разрешено автоматическое выставление счетов
//   * РазрешеноПереопределениеТарифов - Булево - разрешено переопределение тарифов
//
Функция ОбслуживающиеОрганизацииАбонента() Экспорт
КонецФункции

// Возвращает список пользователей абонента этого приложения.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи абонента:
//   * Логин - Строка - логин (имя) пользователя
//   * ПолноеИмя - Строка - полное имя пользователя
//   * Почта - Строка - электронная почта пользователя
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль пользователя
//   * РазрешенноеКоличествоСеансов - Число - разрешенное количество сеансов
//   * ВременныйДоступ - Булево - временный доступ
//
Функция ПользователиАбонента() Экспорт
КонецФункции

// Возвращает свойства пользователя абонента по логину.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
// 
// Возвращаемое значение:
//  Структура - свойства пользователя абонента:
//   * Логин - Строка - логин (имя) пользователя
//   * ПолноеИмя - Строка - полное имя пользователя
//   * Почта - Строка - электронная почта пользователя
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роли пользователя
//   * РазрешенноеКоличествоСеансов - Число - разрешенное количество сеансов
//   * ВременныйДоступ - Булево - временный доступ
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты пользователя абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
Функция СвойстваПользователяАбонента(Логин) Экспорт
КонецФункции

// Создает новую учетную запись пользователя сервиса и подключает созданного пользователя к абоненту этого приложения. 
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ПараметрыСоздания - см. НовыйПараметрыСозданияПользователя
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - признак создания учетной записи Истина - создана, Ложь - произошла ошибка.
//
Функция СоздатьПользователяАбонента(ПараметрыСоздания,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Устанавливает указанному пользователю абонента этого приложения указанную роль.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Логин - Строка - логин (имя) пользователя. 
//  Роль - ПеречислениеСсылка.РолиПользователейАбонентов - устанавливаемая роль пользователя.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Булево - установки роли Истина - установлено, Ложь - произошла ошибка.
//
Функция УстановитьРольПользователяАбонента(Логин, Роль,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Обновляет дополнительные реквизиты пользователя абонента
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Логин - Строка - логин (имя) пользователя. 
//  ДопРеквизиты - ТаблицаЗначений - дополнительные реквизиты пользователя абонента:
//     * Ключ - Строка - имя дополнительного реквизита
//     * Тип - Строка - тип значения 
//     * Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Булево - установка доп. реквизитов: Истина - установлено, Ложь - произошла ошибка.
Функция ОбновитьДопРеквизитыПользователяАбонента(Логин, ДопРеквизиты,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Возвращает список абонентов текущего пользователя.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список абонентов:
//    * Наименование - Строка - наименование абонента
//    * Код - Число - код абонента
//    * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль текущего пользователя абонента.
//
Функция Абоненты() Экспорт
КонецФункции

// Возвращает дополнительные сведения (реквизиты и свойства) абонента этого приложения.
// Реализует метод внешнего программного интерфейса - account/attached_info.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Структура - дополнительные реквизиты и свойства абонента:
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента:
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Тип - Строка - тип значения
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
//
Функция ДополнительныеСведенияАбонента(ВызыватьИсключениеПриОшибке = Истина,
		КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Возвращает информацию о тарифе обслуживающей организаций.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодОО - Число - код обслуживающей организации.
//  КодТарифа - Строка - код тарифа обслуживающей организации. 
// 
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * КодТарифаПровайдера - Строка - код тарифа провайдера
//   * КраткоеОписание - Строка - краткое описание тарифа
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость
//     ** Рекомендуемый - Булево - признак того, что период является рекомендуемым к покупке
//     ** Комментарий - Строка - комментарий к периоду действия
//
Функция ТарифОбслуживающейОрганизации(КодОО, КодТарифа) Экспорт
КонецФункции

#Область Customers

// Возвращает список обслуживаемых абонентов.
// Реализует метод внешнего программного интерфейса - account/customers/list
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Наименование - Строка - наименование абонента (длина - 64)
//   * Код - Строка - код (номер) обслуживаемого абонента (длина - 12).
Функция ОбслуживаемыеАбоненты(КодОО = Неопределено, 
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Возвращает свойства обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customers/info
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодАбонента - Число - код (номер) обслуживаемого абонента.
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура:
//   * Наименование - Строка - наименование абонента (длина - 64)
//   * Код - Строка - код (номер) обслуживаемого абонента (длина - 12)
//   * Сайт - Строка - сайт из КИ (длина - 500)
//   * Город - Строка - город из КИ (длина - 500)
//   * Почта - Строка - почта из КИ (длина - 500)
//   * Телефон - Строка - телефон из КИ (длина - 500)
//
Функция СвойстваОбслуживаемогоАбонента(КодАбонента, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Возвращает дополнительные сведения (реквизиты и свойства) обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customers/attached_info
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодАбонента - Число - код (номер) обслуживаемого абонента.
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Структура - дополнительные реквизиты и свойства абонента:
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента:
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Тип - Строка - тип значения
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
Функция ДопСведенияОбслуживаемогоАбонента(КодАбонента, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Обновляет дополнительные сведения (реквизиты и свойства) обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customers/update_attached_info.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ДопСведения - см. НовыйДопСведенияОбслуживаемогоАбонента
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Булево - установка доп. сведений: Истина - установлено, Ложь - произошла ошибка.
Функция ОбновитьДопСведенияОбслуживаемогоАбонента(ДопСведения, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

#КонецОбласти

#Область CustomerSubscriptions

// Возвращает список подписок на тарифы обслуживаемых абонентов.
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/list
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Отбор - см. НовыйОтборПодписокНаТарифы
//  КодОО - Число - код (номер) ведущего абонента (если не указан, используется абонент текущего приложения).
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - существующие подписки на тарифы:
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия
//   * Количество - Число - количество тарифов в подписке
//   * НомерОсновнойПодписки - Строка - номер основной подписки, если текущая подписка на тариф-расширение.
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса - тип подписки
//
Функция ПодпискиНаТарифы(Отбор, КодОО = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Возвращает свойства подписки на тариф обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/info
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
//  НомерПодписки - Строка - номер подписки.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Структура - свойства подписки на тариф:
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия
//   * Количество - Число - количество тарифов в подписке
//   * НомерОсновнойПодписки - Строка - номер основной подписки, если текущая подписка на тариф-расширение.
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса - тип подписки
Функция СвойстваПодпискиНаТариф(НомерПодписки,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Создает новую подписку на основной тариф обслуживаемого абонента
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/create
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ДанныеПодписки - см. НовыйШаблонПодпискиНаОсновнойТариф
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Неопределено, Структура - если оформление подписки успешно выполнено:
//   * Номер - Строка - номер созданной подписки.
//   * ДатаОтключения - Дата - дата отключения созданной подписки.
Функция СоздатьПодпискуНаОсновнойТариф(ДанныеПодписки,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Метод создает новую подписку или несколько подписок на расширение тарифа обслуживаемого абонента.
// Реализует метод внешнего программного интерфейса - account/customer_subscriptions/create_enhanced
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ДанныеРасширенияТарифа - см. НовыйШаблонПодпискиНаРасширениеТарифа
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - если оформление подписки успешно выполнено:
//   * Номер - Строка - номер созданной подписки.
//   * ДатаОтключения - Дата - дата отключения созданной подписки.
Функция СоздатьПодпискуНаРасширениеТарифа(ДанныеРасширенияТарифа,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Application

// Возвращает список прикладных конфигураций, доступных абоненту этого приложения.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные конфигурации:
//    * Код - Строка - код конфигурации
//    * Наименование - Строка - синоним конфигурации 
//    * Имя - Строка - имя конфигурации (как оно задано в конфигураторе).
//    * Описание - Строка - описание конфигурации 
//    * КодАбонента - Число - код абонента. 
//
Функция Конфигурации() Экспорт
КонецФункции

#КонецОбласти

#Область Bill

// Возвращает список счетов на оплату
// Реализует метод внешнего программного интерфейса - bill/list
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
//  Отбор - см. НовыйОтборСчетовНаОплату
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - список счетов на оплату:
//	 * Номер - Строка - номер счета
//	 * Дата - Дата - дата создания счета
//	 * ДатаИзменения - Дата - дата изменения счета
//	 * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
Функция СписокСчетовНаОплату(Отбор = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Возвращает данные счета на оплату по номеру или идентификатору счета.
// Реализует метод внешнего программного интерфейса - bill/info
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета (не указывается, если передан номер счета)
//  НомерСчета - Строка - номер счета (не указывается, если передан идентификатор счета)
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
// 
// Возвращаемое значение:
//  Структура - данные счета:
//	 * Номер - Строка - номер счета
//	 * Дата - Дата - дата создания счета
//	 * ДатаИзменения - Дата - дата изменения счета
//	 * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** Количество - Число - количество тарифов в подписке
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//     ** НомерОснования - Строка - номер подписки-основания
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения 
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//	 * Состояние - Структура - данные состояния счета:
//     ** Ошибка - Булево - признак ошибки
//     ** Описание - Строка - описание состояния
//     ** Имя - Строка - имя состояния:
//         "created" - создан
//         "wait_sending" - ожидание отправки
//         "wait_registration" - ожидание оформления
//         "wait_payment" - ожидание оплаты
//         "paid" - оплачен
//         "billing_error" - ошибка выставления счета.
Функция ДанныеСчетаНаОплату(ИдентификаторСчета = Неопределено, НомерСчета = Неопределено,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Создает новый счет на оплату.
// Реализует метод внешнего программного интерфейса - bill/create
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
//  ДанныеСчета - Структура:
//	 * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** Количество - Число - количество тарифов в подписке
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//     ** НомерОснования - Строка - номер подписки-основания
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура:
//   * Номер - Строка - номер созданного счета на оплату
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор созданного счета на оплату.	
Функция СоздатьСчетНаОплату(ДанныеСчета,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Изменяет существующий счет на оплату.
// Реализует метод внешнего программного интерфейса - bill/update
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
//  ДанныеСчета - Структура:
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//   * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** Количество - Число - количество тарифов в подписке
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//     ** НомерОснования - Строка - номер подписки-основания
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//
// Возвращаемое значение:
//  Структура:
//   * Номер - Строка - номер измененного счета на оплату
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор измененного счета на оплату.	
Функция ИзменитьСчетНаОплату(ДанныеСчета,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции	

// Возвращает талон на загрузку файла в существующий счет на оплату
// Реализует метод внешнего программного интерфейса - bill/file_token/upload
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ПараметрыПолучения - см. НовыйПараметрыПолученияТалонаНаЗагрузкуФайла
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message".
//  
// Возвращаемое значение:
//  Структура:
//  * НомерСчета - Строка - номер счета
//  * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//  * НаправлениеПередачиДанных - Строка - направление передачи файла = "upload"
//  * ТалонНаЗагрузкуФайла - Строка - талон на загрузку файла
//  * АдресДляЗагрузки - Строка - URL для загрузки файла методом PUT
Функция СчетНаОплатуФайлыТалонНаЗагрузку(ПараметрыПолучения,
	ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

#КонецОбласти

#Область Tenant

// Возвращает данные абонента этого приложения.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - пользователь абонента которого требуется определить	
// 
// Возвращаемое значение:
//  Структура - данные абонента:
//    * Наименование - Строка - наименование абонента
//    * Код - Число - код абонента
//    * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль текущего пользователя абонента.
//
Функция АбонентЭтогоПриложения(Знач Пользователь = Неопределено) Экспорт
КонецФункции

// Возвращает список приложений, доступных пользователю абонента этого приложения. 
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - доступные приложения:
//   * Код - Число - код (номер) приложения
//   * Наименование - Строка - наименование
//   * КодАбонентаВладельца - Число - код абонента, владельца приложения
//   * КодКонфигурации - Число - код конфигурации
//   * ВерсияКонфигурации - Строка - версия конфигурации
//   * НаименованиеКонфигурации - Строка - наименование конфигурации
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения
//   * АдресПриложения - Строка - URL-адрес приложения
//   * ЧасовойПояс - Строка - часовой пояс приложения
//
Функция Приложения() Экспорт
КонецФункции

// Возвращает информацию об указанном приложении.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодПриложения - Строка - код приложения (номер области).
// 
// Возвращаемое значение:
//  Структура - свойства приложения:
//   * Код - Число - код (номер) приложения
//   * Наименование - Строка- наименование
//   * КодАбонентаВладельца - Число - код абонента, владельца приложения
//   * КодКонфигурации - Число - код конфигурации
//   * ВерсияКонфигурации - Строка - версия конфигурации
//   * НаименованиеКонфигурации - Строка - наименование конфигурации
//   * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения
//   * АдресПриложения - Строка - URL-адрес приложения
//   * ЧасовойПояс - Строка - часовой пояс приложения
//
Функция СвойстваПриложения(КодПриложения) Экспорт
КонецФункции

// Возвращает список пользователей, которым разрешен доступ к указанному приложению.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодПриложения - Число - код приложения (номер области)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пользователи, которым разрешен доступ:
//   * Логин - Строка - логин (имя) пользователя
//   * Роль - ПеречислениеСсылка.ПраваПользователяПриложения - право пользователя на текущее приложение в менеджере сервиса 
//
Функция ПользователиПриложения(КодПриложения) Экспорт
КонецФункции

// Устанавливает пользователю с указанным логином доступ к указанному приложению 
// и назначает указанную роль для работы в приложении.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ПараметрыДобавления - см. НовыйПараметрыДобавленияПользователяВПриложение
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат установки права доступа к приложению: Истина - право установлено, Ложь - произошла ошибка.
//
Функция ДобавитьПользователяВПриложение(ПараметрыДобавления,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Отменяет пользователю с указанным логином доступ к указанному приложению.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Логин - Строка - Логин (Имя) пользователя.
//  КодПриложения - Число - код приложения (номер области)
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат отмены права доступа к приложению: Истина - право отменено, Ложь - произошла ошибка.
//
Функция УдалитьПользователяИзПриложения(Логин, КодПриложения,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Метод создает новое приложение с указанной прикладной конфигурацией.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ПараметрыСоздания - см. НовыйПараметрыСозданияПриложения
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Структура - результат создания приложения:
//  * Код - Число - код созданного приложения (номер области)
//  * СостояниеПриложения - ПеречислениеСсылка.СостоянияПриложений - состояние приложения после создания.
//  * АдресПриложения - Строка - адрес созданного приложения.
//
Функция СоздатьПриложение(ПараметрыСоздания,
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

#КонецОбласти

#Область Tariff

// Возвращает информацию о тарифе сервиса по коду тарифа.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  КодТарифа - Строка - код тарифа.
//
// Возвращаемое значение:
//  Структура - информация о тарифе:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * ОписаниеДляОбслуживающихОрганизаций - Строка - описание тарифа для обслуживающей организации.
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ДатаНачалаДействия - Дата - дата начала действия тарифа.
//   * ДатаОкончанияДействия - Дата - дата окончания действия тарифа.
//   * ПериодДействияПродлевающейПодписки - Число - период (в днях), в течение которого действует продлевающая подписка (если разрешено продление).
//   * ПериодДействияРасширяющейПодписки - Число - период (в днях), в течение которого действует расширяющая подписка.
//   * ПериодДобавленияПродлевающейПодписки - Число - период (в днях) после завершения действия подписки, в течение которого можно создать продлевающую подписку.
//   * РасширениеТарифа - Булево - признак, что тариф является расширением
//   * Платный - Булево - признак, что тариф является платным (содержит платные периоды действия)
//   * Тестовый - Булево - признак, что тариф является тестовым
//   * ЕстьУсловие - Булево - признак, что для использования тарифа требуется соблюдение условия использования.
//   * ПериодическаяОплата - Булево - признак, что тариф использует периодическую оплату
//   * ПериодичностьОплаты - Строка - код периода периодичности оплаты
//   * Услуги - ТаблицаЗначений - услуги тарифа:
//     ** Код - Строка - код услуги
//     ** Наименование - Строка - Наименование услуги
//     ** ТипУслуги - ПеречислениеСсылка.ТипыУслуг - тип услуги
//     ** Описание - Строка - Описание услуги
//     ** КоличествоЛицензий - Число - количество лицензий на услугу, включенное в тариф
//     ** КоличествоДопЛицензийРасширяющейПодписки - Число - количество лицензий на услугу, которое может быть предоставлено расширяющей подпиской
//     ** ИдентификаторПоставщика - Строка - идентификатор поставщика услуги
//     ** НаименованиеПоставщика - Строка - наименование поставщика услуги
//   * Расширения - ТаблицаЗначений - расширения тарифа:
//     ** Код - Строка - код тарифа-расширения
//     ** Наименование - Строка - наименование тарифа-расширения
//   * Конфигурации - ТаблицаЗначений - конфигурации тарифа:
//     ** Код - Строка - код конфигурации
//     ** Наименование - Строка - имя конфигурации
//     ** Описание - Строка - описание конфигурации
//   * ПериодыДействия - ТаблицаЗначений - периоды действия тарифа:
//     ** Код - Строка - код периода действия
//     ** Наименование - Строка - наименование периода действия
//     ** Сумма - Число - стоимость
//     ** Комментарий - Строка - комментарий к периоду действия
//   * ПериодыОповещенийОбОкончанииПодписки - ТаблицаЗначений - периоды оповещений об окончании подписки на тариф:
//     ** КоличествоДней - Число - количество дней, когда оповещать пользователя.
//
Функция ТарифСервиса(КодТарифа) Экспорт
КонецФункции

// Возвращает список тарифов сервиса, доступных абоненту этого приложения.
// @skip-warning ПустойМетод - особенность реализации.
//
// Возвращаемое значение:
//  ТаблицаЗначений - список тарифов сервиса:
//   * Код - Строка - код тарифа
//   * Наименование - Строка - наименование тарифа
//   * ОписаниеДляОбслуживающихОрганизаций - Строка - описание тарифа для обслуживающей организации.
//   * ОписаниеДляАбонентов - ФорматированныйДокумент - описание тарифа для абонентов.
//   * ДатаНачалаДействия - Дата - дата начала действия тарифа.
//   * ДатаОкончанияДействия - Дата - дата окончания действия тарифа.
//   * ПериодДействияПродлевающейПодписки - Число - период (в днях), в течение которого действует продлевающая подписка (если разрешено продление).
//   * ПериодДействияРасширяющейПодписки - Число - период (в днях), в течение которого действует расширяющая подписка.
//   * ПериодДобавленияПродлевающейПодписки - Число - период (в днях) после завершения действия подписки, в течение которого можно создать продлевающую подписку.
//   * РасширениеТарифа - Булево - признак, что тариф является расширением
//   * Платный - Булево - признак, что тариф является платным (содержит платные периоды действия)
//   * Тестовый - Булево - признак, что тариф является тестовым
//   * ЕстьУсловие - Булево - признак, что для использования тарифа требуется соблюдение условия использования.
//   * ПериодическаяОплата - Булево - признак, что тариф использует периодическую оплату
//   * ПериодичностьОплаты - Строка - код периода периодичности оплаты
//
Функция ТарифыСервиса() Экспорт
КонецФункции

#КонецОбласти

#Область Subscription

// Возвращает список существующих подписок абонента текущего приложения.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Отбор - см. НовыйОтборПодписокНаТарифы
//
// Возвращаемое значение:
//  ТаблицаЗначений - существующие подписки абонента:
//   * КодАбонента - Число - код (номер) абонента
//   * Номер - Строка - номер подписки
//   * Дата - Дата - дата регистрации подписки
//   * ТипПодписки - ПеречислениеСсылка.ТипыПодписокСервиса - тип подписки
//   * КодОбслуживающейОрганизации - Число - код (номер) абонента обслуживающей организации
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * КодТарифа - Строка - код тарифа в подписке
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодПериодаДействия - Строка - код периода действия
//   * Количество - Число - количество тарифов в подписке
//   * НомерОсновнойПодписки - Строка - номер основной подписки, если текущая подписка на тариф-расширение.
//
Функция ПодпискиАбонента(Отбор = Неопределено) Экспорт
КонецФункции

#КонецОбласти

#Область Promo_code

// Выполняет активацию указанного промо-кода для абонента текущего приложения.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Промокод - Строка - используемый промокод.
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат использования: Истина - промокод активирован, Ложь - произошла ошибка.
//
Функция ИспользоватьПромокод(Промокод, ВызыватьИсключениеПриОшибке = Истина,
		КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
КонецФункции

// Выполняет активацию указанного промо-кода для абонента текущего приложения.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  Промокод - Строка - используемый промокод.
//  Метка - Строка - дополнительная информация о промо-коде
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат использования: Истина - промокод активирован, Ложь - произошла ошибка.
//
Функция ИспользоватьПромокодСМеткой(Промокод, Метка, ВызыватьИсключениеПриОшибке,
		КодСостояния, КодОтвета, Сообщение) Экспорт
КонецФункции

#КонецОбласти

#Область Sessions

// Выполняет завершение сеансов пользователей.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Параметры:
// 	НомераСеансов - Массив Из Число - номера сеансов, которые требуется завершить.
// 	Пользователь - СправочникСсылка.Пользователи - пользователь абонента, от имени которого выполняется операция.
// 
Процедура ЗавершитьСеансы(Знач НомераСеансов, Знач Пользователь = Неопределено) Экспорт
КонецПроцедуры

#КонецОбласти

#Область Task

// Возвращает список активных задач плользователя из МС, относящихся к текущей области пользователя
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//	* НомерЗадачи - Строка - номер задачи
//	* НаименованиеЗадачи - Строка - номер задачи
Функция Задачи() Экспорт

КонецФункции

// Возвращает описание задачи пользователя.
// @skip-warning ПустойМетод - особенность реализации.
// Параметры:
//  НомерЗадачи - Строка - номер задачи, для которой требуется получить данные.
// Возвращаемое значение:
//  Структура:
//	* type - Строка - тип задачи
//	* author - Строка - автор задачи
//	* description - Строка - описание задачи
//	* tenant - Строка - Наименование приложения
//	* subscriber - Строка - Наименование ведущего абонента (Абонент ОО или ЛК)
//	* backup_type - Строка - вид запрашиваемой резервной копии (Для тех.поддержки или нет)
Функция СвойстваЗадачи(НомерЗадачи) Экспорт
	
КонецФункции

// Выполнение задачи пользователя, отказ или согласование.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. метод ПрограммныйИнтерфейсСервиса.НовыйПараметрыДобавленияПользователяВПриложение
//  ВызыватьИсключениеПриОшибке - Булево - признак вызова исключения при ошибке получения данных.
//  КодСостояния - Число - возвращаемый параметр - код состояния ответа HTTP-сервиса.
//  КодОтвета - Число - возвращаемый параметр - заполняется из ответа значением свойства "general.response".
//  Сообщение - Строка - возвращаемый параметр - заполняется из ответа значением свойства "general.message". 
// 
// Возвращаемое значение:
//  Булево - результат выполнения задачи: Истина - задача выполнена, Ложь - произошла ошибка.
Функция ВыполнитьЗадачу(ПараметрыЗапроса, 
		ВызыватьИсключениеПриОшибке = Истина, КодСостояния = 0, КодОтвета = 0, Сообщение = "") Экспорт
		
КонецФункции

#КонецОбласти

#Область Srv

// Получает параметры для составной загрузки
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ИмяФайла - Строка 
//  РазмерФайла - Число
//  ТипФайла - Строка
//  Владелец - Произвольный
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//    * ИдентитификаторФайла - Строка
//    * Тип - Строка
//    * Адрес - Строка
//    * Заголовки - Соответствие из КлючИЗначение:
//      ** Ключ - Строка
//      ** Значение - Строка
Функция НачатьСоставнуюЗагрузку(ИмяФайла, РазмерФайла, ТипФайла, Владелец) Экспорт
	
КонецФункции

// Получает параметры для новой части
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ИдентификаторФайла - Строка - 
//  НомерЧасти - Строка - 
// 
// Возвращаемое значение:
//  Структура - структура с ключами:
//    * Тип - Строка -
//    * Адрес - Строка - 
//    * Заголовки - Соответствие из КлючИЗначение:
//      ** Ключ - Строка
//      ** Значение - Строка
Функция НоваяЧасть(ИдентификаторФайла, НомерЧасти) Экспорт
	
КонецФункции

// Завершает составную загрузку
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ИдентификаторФайла - Строка - 
//  Части - Массив из Строка -
Процедура ЗавершитьСоставнуюЗагрузку(ИдентификаторФайла, Части) Экспорт
	
КонецПроцедуры

// Отменяет составную загрузку
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ИдентификаторФайла - Строка -
Процедура ОтменитьСоставнуюЗагрузку(ИдентификаторФайла) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Возвращает шаблон параметров создания пользователя для метода ПрограммныйИнтерфейсСервиса.СоздатьПользователяАбонента.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания пользователя:
//	 * Логин - Строка - логин (имя пользователя)
//	 * Пароль - Строка - пароль пользователя
//   * ПочтаОбязательна - Булево - признак обязательной установки почты (по умолчанию = Истина)
//   * Почта - Строка - электронная почта
//   * РольПользователя - ПеречислениеСсылка.РолиПользователейАбонентов - роль (по умолчанию = ПользовательАбонента)
//   * ПолноеИмя - Строка - полное имя (наименование) пользователя
//   * Телефон - Строка - телефон пользователя
//   * ЧасовойПояс - Строка - рабочий часовой пояс пользователя
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты пользователя абонента:
//     ** Ключ - Строка - имя реквизита
//     ** Тип - Строка - тип реквизита. 
//              Простые: string, decimal, date, boolean
//              Ссылочные: user, subscriber, tariff, service_provider_tariff, tariff_period, 
//                         subscription, service, additional_value, additional_value_group.
//     ** Значение - Строка, Число, Дата, Булево - значение реквизита.
//
Функция НовыйПараметрыСозданияПользователя() Экспорт
КонецФункции

// Возвращает шаблон параметров создания приложения для метода ПрограммныйИнтерфейсСервиса.СоздатьПриложение.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров создания приложения:
//	 * Наименование - Строка - наименование создаваемого приложения.
//	 * КодКонфигурации - Строка - кон конфигурации (вид приложения) 
//   * ЧасовойПояс - Строка - рабочий часовой пояс приложения
Функция НовыйПараметрыСозданияПриложения() Экспорт
КонецФункции

// Возвращает шаблон параметров добавления пользователя в приложение для метода
// ПрограммныйИнтерфейсСервиса.ДобавитьПользователяВПриложение.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура - шаблон параметров добавления пользователя в приложение:
//	 * КодПриложения - Строка - наименование создаваемого приложения.
//	 * Логин - Строка - логин (имя пользователя) 
//   * Право - ПеречислениеСсылка.ПраваПользователяПриложения - право пользователя на приложение в менеджере сервиса 
//
Функция НовыйПараметрыДобавленияПользователяВПриложение() Экспорт
КонецФункции

// Возвращает шаблон отбора счетов на оплату.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура:
//   * КодПородавца - Число - код абонента-продавца
//   * КодПокупателя - Число - код абонента-покупателя
//   * НачалоПериода - Дата - дата начала периода
//   * КонецПериода - Дата - дата конца периода 
//   
Функция НовыйОтборСчетовНаОплату() Экспорт
КонецФункции

// Возвращает шаблон нового счета на оплату.
// @skip-warning ПустойМетод - особенность реализации.
//
// Возвращаемое значение:
//  Структура:
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета
//	 * КодПродавца - Число - код (номер) абонента-продавца
//	 * КодПокупателя - Число - код (номер) абонента-покупателя
//	 * Сумма - Число - сумма счета
//	 * Продление - Булево - признак продления
//	 * ПлатежнаяСсылка - Строка - платежная ссылка
//	 * Оплачен - Булево - признак оплаты счета
//	 * ДополнительнаяИнформация - Строка - дополнительная информация по счету
//	 * Комментарий - Строка - комментарий счета
//   * Тарифы - ТаблицаЗначений - тарифы:
//     ** КодТарифаПровайдера - Строка - код тарифа провайдера
//     ** КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//     ** КодПериодаДействия - Строка - код периода действия тарифа
//     ** НомерОснования - Строка - номер подписки-основания
//     ** Сумма - Число - стоимость тарифа с учетом периода действия
//   * Услуги - ТаблицаЗначений - услуги:
//     ** Услуга - Строка - наименование услуги
//     ** Сумма - Число - стоимость услуги
//   * Файлы - ТаблицаЗначений - файлы представления текущего счета на оплату:
//     ** Идентификатор - УникальныйИдентификатор - идентификатор файла
//     ** Описание - Строка - имя файла представления счета
//   * ДополнительныеРеквизиты - ТаблицаЗначений - дополнительные реквизиты счета:
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
Функция НовыйШаблонСчетаНаОплату() Экспорт
КонецФункции

// Возвращает шаблон параметров получения талона на загрузку файла.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура:
//   * НомерСчета - Строка - номер счета (не указывается, если передан идентификатор счета)
//   * ИдентификаторСчета - УникальныйИдентификатор - идентификатор счета (не указывается, если передан номер счета)
//   * ИмяФайла - Строка - имя файла с расширением
//   * Размер - Строка - размер файла в байтах.
Функция НовыйПараметрыПолученияТалонаНаЗагрузкуФайла() Экспорт
КонецФункции

// Возвращает шаблон отбора подписок на тарифы обслуживаемых абонентов.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура:
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента 
//										   (не используется, если вызывается для метода ПодпискиАбонента)
//   * ТолькоАктивные - Булево - получение только активных подписок
//   * ТолькоОсновные - Булево - получение только основных подписок
//   * НачалоПериода - Дата - дата начала периода
//   * КонецПериода - Дата - дата конца периода
Функция НовыйОтборПодписокНаТарифы() Экспорт
КонецФункции

// Возвращает шаблон новой подписки на основной тариф обслуживаемого абонента.
// @skip-warning ПустойМетод - особенность реализации.
//
// Возвращаемое значение:
//  Структура:
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
Функция НовыйШаблонПодпискиНаОсновнойТариф() Экспорт
КонецФункции

// Возвращает шаблон новой подписки на расширение тарифа обслуживаемого абонента.
// @skip-warning ПустойМетод - особенность реализации.
//
// Возвращаемое значение:
//  Структура:
//   * КодВедущегоАбонента - Число - код (номер) ведущего абонента
//   * КодОбслуживаемогоАбонента - Число - код (номер) обслуживаемого абонента
//   * КодТарифаОбслуживающейОрганизации - Строка - код тарифа обслуживающей организации
//   * КодТарифаПровайдера - Строка - код тарифа в подписке
//   * КодПериодаДействия - Строка - код периода действия подписки
//   * ДатаПодключения - Дата - дата подключения тарифа по подписке
//   * ДатаОтключения - Дата - дата отключения тарифа
//   * НомерОсновнойПодписки - Строка - номер подписки на основной тариф
//   * Количество - Число - количество тарифов в подписке.
Функция НовыйШаблонПодпискиНаРасширениеТарифа() Экспорт
КонецФункции

// Возвращает шаблон дополнительных сведений обслуживаемого абонента.
// @skip-warning ПустойМетод - особенность реализации.
// 
// Возвращаемое значение:
//  Структура:
//   * КодАбонента - Число - код обслуживаемого абонента
//   * ПубличныйИдентификатор - Строка - публичный идентификатор абонента (длина - 36)
//   * Реквизиты - ТаблицаЗначений - дополнительные реквизиты абонента: 
//     ** Ключ - Строка - имя дополнительного реквизита
//     ** Тип - Строка - тип значения (не обязательно, если у доп. реквизита один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного реквизита
//   * Свойства - ТаблицаЗначений - дополнительные свойства абонента: 
//     ** Ключ - Строка - имя дополнительного свойства
//     ** Тип - Строка - тип значения (не обязательно, если у доп. свойства один тип значения)
//     ** Значение - Строка, Число, Дата, Булево - значение дополнительного свойства
Функция НовыйДопСведенияОбслуживаемогоАбонента() Экспорт
КонецФункции
 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание типа значения дополнительного свойства по имени.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  ИмяТипа	- Строка - имя типа значения дополнительного свойства.
// 
// Возвращаемое значение:
//  ОписаниеТипов - описание типа значения.
Функция ТипЗначенияДополнительногоСвойстваПоИмени(ИмяТипа) Экспорт
КонецФункции

// Заполняет список выбора типов значений дополнительных свойств.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список выбора на форме.
Процедура ЗаполнитьСписокВыбораТиповЗначенийДополнительныхСвойств(СписокВыбора) Экспорт
КонецПроцедуры

// Заполняет условное оформление поля типа дополнительного свойства по значению.
// @skip-warning ПустойМетод - особенность реализации.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы.
//  ИмяРеквизита - Строка - имя реквизита формы
//  ИмяПоля - Строка - имя поля формы
//
Процедура УстановитьОформлениеПоляТипаДополнительногоСвойства(УсловноеОформление, ИмяРеквизита, ИмяПоля) Экспорт
КонецПроцедуры
    
#КонецОбласти 
