
Функция URIПространстваИменПакетаXDTO() Экспорт
	
	Возврат "http://www.1c.ru/EA/MobileEntrepreneur";
	
КонецФункции

//Получает данные МП с сообщением обмена, обрабатывает их, выполяняя необходимые проверки/настройки/инициализацию и прием сообщения,
//в К-С варианте запускает фоновое задание, в котором выполняется формирование ответного сообщения обмена (с записью во временный файл)
Функция НачатьСинхронизацию(ДанныеМобильногоПриложения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Разберем структуру входных параметров
	ПараметрыСтруктура = ДанныеМобильногоПриложения.Получить();
	
	КодМобильногоУстройства				= ПараметрыСтруктура.КодМобильногоУстройства;
	НомерУспешноПринятогоИзЦБСообщения	= ПараметрыСтруктура.НомерУспешноПринятогоИзЦБСообщения;
	ДатаНачалаХраненияДанных			= ПараметрыСтруктура.ДатаНачалаХраненияДанных;
	ПервичныйОбмен						= ПараметрыСтруктура.ПервичныйОбмен;
	СообщениеОбменаСтрокаXML			= ПараметрыСтруктура.СообщениеОбменаСтрокаXML;
	ВерсияКонфигурации					= ПараметрыСтруктура.ВерсияКонфигурации;
	
	//Подготовим структуру - шаблон ответа операции
	ОтветСтруктура = Новый Структура;
	ОтветСтруктура.Вставить("ОбменНевозможен",				Ложь);
	ОтветСтруктура.Вставить("ПричинаОтказаВОбмене",			"");
	ОтветСтруктура.Вставить("ИдентификаторЗадания",			"");
	ОтветСтруктура.Вставить("ИмяВременногоФайлаОбмена",		"");
	
	УзелОбмена = МобильноеПриложениеПредпринимательПереопределяемый.НайтиУзелОбмена(КодМобильногоУстройства);
	
	//Если поступил запрос на первичный обмен, настроим узел и зарегистрируем нужные объекты к отправке
	Если ПервичныйОбмен Тогда
		МобильноеПриложениеПредпринимательПереопределяемый.ИнициализироватьПервичныйОбмен(УзелОбмена, КодМобильногоУстройства, ДатаНачалаХраненияДанных, ВерсияКонфигурации);
	КонецЕсли;
	
	Если УзелОбмена.Пустая() Тогда
		
		ОтветСтруктура.ОбменНевозможен = Истина;
		ОтветСтруктура.ПричинаОтказаВОбмене = НСтр("ru='Ошибка настройки синхронизации: не найден узел обмена данными'");
		
	Иначе
		
		//Если из мобильного приложения пришло сообщение обмена, прочитаем его и запишем данные
		Если СообщениеОбменаСтрокаXML <> Неопределено Тогда
			ПрочитатьСообщениеОбменаИЗаписатьДанныеМобильногоПриложения(УзелОбмена, СообщениеОбменаСтрокаXML)
		КонецЕсли;
		
		//Если изменилась ДатаНачалаХраненияДанных в мобильном приложении, сохраним новое значение и,
		//если дата изменилась на более раннюю, зарегистрируем соответствующие объекты к отправке
		МобильноеПриложениеПредпринимательПереопределяемый.ПроверитьОбработатьИзменениеДатыНачалаХраненияДанных(УзелОбмена, ДатаНачалаХраненияДанных);
		
		//Если изменилась версия в мобильном приложении, сохраним новое значение и,
		//если надо, зарегистрируем новые объекты 
		МобильноеПриложениеПредпринимательПереопределяемый.ПроверитьОбработатьИзменениеВерсииМобильногоПриложения(УзелОбмена, ВерсияКонфигурации);
		
		//Подготовим данные для отправки в мобильное приложение в фоновом задании
		ИмяВременногоФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
		ОтветСтруктура.ИмяВременногоФайлаОбмена		= ИмяВременногоФайлаОбмена;
		
		ПараметрыЭкспортнойПроцедуры = Новый Массив;
		ПараметрыЭкспортнойПроцедуры.Добавить(УзелОбмена);
		ПараметрыЭкспортнойПроцедуры.Добавить(НомерУспешноПринятогоИзЦБСообщения);
		ПараметрыЭкспортнойПроцедуры.Добавить(ИмяВременногоФайлаОбмена);
		
		ИмяФоновогоЗадания = НСтр("ru='Синхронизация данных с мобильным устройством'");
			
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			"МобильноеПриложениеПредприниматель.ПодготовитьДанныеОбменаВФоне",
			ПараметрыЭкспортнойПроцедуры, 
			,
			ИмяФоновогоЗадания);
			
		ОтветСтруктура.ИдентификаторЗадания			= Строка(ФоновоеЗадание.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(ОтветСтруктура, Новый СжатиеДанных(9));
	
КонецФункции

//Получает данные МП с необходимыми идентификаторами, по которым проверяется выполнение задания обмена и возвращаются данные файла с сообщением для МП
Функция ПолучитьПодготовленныеДанныеОбмена(ДанныеМобильногоПриложения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Разберем структуру входных параметров
	ПараметрыСтруктура = ДанныеМобильногоПриложения.Получить();
	
	КодМобильногоУстройства					= ПараметрыСтруктура.КодМобильногоУстройства;
	ИдентификаторЗадания					= ПараметрыСтруктура.ИдентификаторЗадания;
	ИмяВременногоФайлаОбмена				= ПараметрыСтруктура.ИмяВременногоФайлаОбмена;
	НомерУспешноПринятогоИзЦБСообщения		= ПараметрыСтруктура.НомерУспешноПринятогоИзЦБСообщения;
	
	//Подготовим структуру - шаблон ответа
	ОтветСтруктура = Новый Структура;
	ОтветСтруктура.Вставить("ДанныеОбмена",				Неопределено);
	ОтветСтруктура.Вставить("ЗаданиеЕщеВыполняется",	Истина);
	ОтветСтруктура.Вставить("СообщениеОбОшибке",		"");
	ОтветСтруктура.Вставить("ИдентификаторЗадания",		ИдентификаторЗадания);
	
	УзелОбмена = МобильноеПриложениеПредпринимательПереопределяемый.НайтиУзелОбмена(КодМобильногоУстройства);
	
	//Если задание обмена выполнено, получим (вернем мобильному приложению) закэшированный результат
	УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	ФоновоеЗаданиеОбмена = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
	Если ФоновоеЗаданиеОбмена = Неопределено Тогда
		ОтветСтруктура.ЗаданиеЕщеВыполняется	= Ложь;
		ОтветСтруктура.СообщениеОбОшибке		= НСтр("ru='Не найдено задание обмена'");
	ИначеЕсли ФоновоеЗаданиеОбмена.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		ОтветСтруктура.ЗаданиеЕщеВыполняется	= Ложь;
		ОтветСтруктура.ДанныеОбмена				= Новый ДвоичныеДанные(ИмяВременногоФайлаОбмена);
	ИначеЕсли ФоновоеЗаданиеОбмена.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОтветСтруктура.ЗаданиеЕщеВыполняется	= Ложь;
		ОтветСтруктура.СообщениеОбОшибке		= НСтр("ru='Синхронизация завершена аварийно'");
	ИначеЕсли ФоновоеЗаданиеОбмена.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ОтветСтруктура.ЗаданиеЕщеВыполняется	= Ложь;
		ОтветСтруктура.СообщениеОбОшибке		= НСтр("ru='Задание обмена отменено администратором'");
	КонецЕсли;
	Если НЕ ОтветСтруктура.ЗаданиеЕщеВыполняется Тогда
		УдалитьФайлы(ИмяВременногоФайлаОбмена);
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(ОтветСтруктура, Новый СжатиеДанных(9));
	
КонецФункции

//Получает от МП mxl печатной формы и формат (напр. "pdf"), в который конвертирует полученный mxl, возвращает данные файла соответствуюшего формата
Функция ПолучитьФайлПечатнойФормыВТребуемомФормате(ПечатнаяФорма, Формат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныйТабличныйДокумент = ПечатнаяФорма.Получить();
	
	Если НРег(Формат) = "pdf" Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
		ИсходныйТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ИначеЕсли НРег(Формат) = "xls" Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xls");
		ИсходныйТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	ИначеЕсли НРег(Формат) = "xlsx" Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
		ИсходныйТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	КонецЕсли;
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));
	
КонецФункции

//Готовит сообщение обмена для отправки в МП, в параметрах указывается узел-получатель и имя временного файла для записи сообщения,
//а также номер последнего успешно принятого в МП сообщения для очистки устаревшей регистрации изменений
Процедура ПодготовитьДанныеОбменаВФоне(УзелОбмена, НомерУспешноПринятогоИзЦБСообщения, ИмяВременногоФайлаОбмена) Экспорт
				
	//Удаляем все изменения, зарегистрированные до последнего успешного обмена
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НомерУспешноПринятогоИзЦБСообщения);
	
	//Сообщение обмена записывается во временный файл, который затем будет передан в мобильного приложение
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайлаОбмена);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("", URIПространстваИменПакетаXDTO());
	
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьИзмененияЗарегистрированныеЧерезПланОбмена(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьЗадолженностиКонтрагентов(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьОстаткиНоменклатуры(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьОбщиеПоказатели(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьПостоянныеДанные(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

//Производит прием сообщения обмена, полученного от МП, в параметрах указывается строка с сообщением и узел-отправитель МП, последний нужен для
// указания в свойстве ОбменДанными.Отправитель, чтобы при записи не регистрировались изменения для узла, из кот. они только что пришли
Процедура ПрочитатьСообщениеОбменаИЗаписатьДанныеМобильногоПриложения(УзелОбмена, СообщениеОбменаСтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СообщениеОбменаСтрокаXML);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	URIПространстваИмен = URIПространстваИменПакетаXDTO();
	
	НастройкиУведомлений = Неопределено;
	
	Пока ЧтениеXML.URIПространстваИмен = URIПространстваИмен Цикл
		
		ТипОбъектаXDTO	= ФабрикаXDTO.Тип(URIПространстваИмен, ЧтениеXML.Имя);
		ОбъектXDTO		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		
		Если ОбъектXDTO.Тип().Имя = "СчетНаОплатуПокупателю" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьСчетНаОплатуПокупателю(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РеализацияТоваровУслуг" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьРеализацияТоваровУслуг(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "АктСверкиВзаиморасчетов" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьАктСверкиВзаиморасчетов(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Контрагент" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьКонтрагента(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Договор" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьДоговор(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Номенклатура" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьНоменклатуру(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ОсновнойВидНоменклатуры" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьОсновнойВидНоменклатуры(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ОсновнойВидНоменклатурыУслуга" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьОсновнойВидНоменклатурыУслуга(ОбъектXDTO, УзелОбмена);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкиУведомлений" Тогда
			НастройкиУведомлений = ПолученныеНастройкиУведомлений(ОбъектXDTO);
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЦеныНоменклатуры" Тогда
			МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьЦеныНоменклатуры(ОбъектXDTO, УзелОбмена);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьНастройкиУведомлений(НастройкиУведомлений, УзелОбмена);
	
КонецПроцедуры

#Область СинхронизацияСРазбивкойСообщенийНаБлоки

// Выполняет актуализацию данных монитора руководителя и задач бухгалтера для подготовки их к передаче в МП.
//
Процедура АктуализироватьДанныеМонитораРуководителяИЗадачиБухгалтера() Экспорт

	МобильноеПриложениеПредпринимательПереопределяемый.ОбновитьДанныеМонитораРуководителя();
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыОбновления.Вставить("БыстроеОбновление", Истина);
	БлокиИнформационнойПанели.ОбновитьЗадачи(ПараметрыОбновления);

КонецПроцедуры

//Готовит сообщение обмена для отправки в МП, в параметрах указывается узел-получатель и имя временного файла для записи сообщения,
//а также номер последнего успешно принятого в МП сообщения для очистки устаревшей регистрации изменений
Процедура ПодготовитьДанныеДляВыгрузки(СтруктураПараметров, СообщениеОбОшибке) Экспорт
				
	УзелОбмена 							= СтруктураПараметров.УзелОбмена;
	НомерУспешноПринятогоИзЦБСообщения 	= СтруктураПараметров.НомерУспешноПринятогоИзЦБСообщения;
	
	КаталогВременныхФайлов = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
	Если КаталогВременныхФайлов = СокрЛП(КаталогВременныхФайлов()) Тогда
		// Если создаем файл в стандартном каталоге, то имя файла формируем стандартным методом.
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xml");		
	Иначе
		// Если создаем файл в отдельно выделенном каталоге, то имя файла формируем самостоятельно.
		ИмяФайла = Строка(Новый УникальныйИдентификатор()) + ".xml";
		ПолноеИмяФайла         = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяФайла);
	КонецЕсли;
	
	//Удаляем все изменения, зарегистрированные до последнего успешного обмена
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НомерУспешноПринятогоИзЦБСообщения);
	
	//Сообщение обмена записывается во временный файл, который затем будет передан в мобильного приложение
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("", URIПространстваИменПакетаXDTO());
	
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьВерсиюФормата(ЗаписьXML);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьИзмененияЗарегистрированныеЧерезПланОбмена(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьЗадолженностиКонтрагентов(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьОстаткиНоменклатуры(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьСписокЗадач(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьОбщиеПоказатели(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	МобильноеПриложениеПредпринимательПереопределяемый.ЗаписатьПостоянныеДанные(УзелОбмена, ЗаписьXML, ЗаписьСообщения);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поместить файл во временное хранилище.
	ИдентификаторФайлаВоВременномХранилище = Строка(ОбменДаннымиСервер.ПоместитьФайлВХранилище(ПолноеИмяФайла));
	
	// Создаем временный каталог для хранения частей файла данных.
	ВременныйКаталог                     = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(
		ИдентификаторФайлаВоВременномХранилище);
	ИмяНеразделенногоФайла               = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		ВременныйКаталог, ИдентификаторФайлаВоВременномХранилище + ".xml");
		
	СоздатьКаталог(ВременныйКаталог);
	КопироватьФайл(ПолноеИмяФайла, ИмяНеразделенногоФайла);
	
	
	// Разделение файла на части.
	ИменаФайлов = РазделитьФайл(ИмяНеразделенногоФайла, СтруктураПараметров.РазмерЧастиФайла * 1024);
	
	ВозвращаемоеЗначение = "%1$%2";
	ВозвращаемоеЗначение = СтрШаблон(ВозвращаемоеЗначение, Формат(ИменаФайлов.Количество(), "ЧН=; ЧГ=0"), ИдентификаторФайлаВоВременномХранилище);
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ВозвращаемоеЗначение;
	Сообщение.Сообщить();
	
	// Удалим исходный XML файл, т.к. он больше не требуется.
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение
		// Зарегистрируем факт того, что не получилось удалить файл, но не будет из-за этого прерывать работу.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'МобильноеПриложениеПредприниматель.ПодготовитьДанныеДляВыгрузки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрШаблон(НСтр("ru = 'Не удалось удалить файл %1: %2'",ОбщегоНазначения.КодОсновногоЯзыка()), 
				ПолноеИмяФайла,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаPushУведомлений

Процедура ОтправитьУведомленияОЗадачах() Экспорт
	
	НастройкиОтправки = РегистрыСведений.НастройкиОтправкиPushУведомлений.ТекущиеНастройки();
	ВариантОтправки   = НастройкиОтправки.ВариантОтправкиPushУведомлений;
	Если ВариантОтправки = Перечисления.ВариантыОтправкиPushУведомлений.НеОтправлять Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАутентификации = РегистрыСведений.НастройкиОтправкиPushУведомлений.ДанныеАутентификации(НастройкиОтправки);
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = ВсеПолучателиУведомлений(НастройкиОтправки);
	Если Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУведомлений = ДанныеУведомленийОЗадачах();
	
	Для каждого ДанныеУведомления Из ДанныеУведомлений.НовыеЗадачи Цикл
		ОтправитьУведомление(ДанныеУведомления, ВариантОтправки, ДанныеАутентификации, Получатели);
	КонецЦикла;
	
	Для каждого ДанныеУведомления Из ДанныеУведомлений.СрочныеЗадачи Цикл
		ОтправитьУведомление(ДанныеУведомления, ВариантОтправки, ДанныеАутентификации, Получатели);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьУведомление(ДанныеУведомления, ВариантОтправки, ДанныеАутентификации, Получатели)
	
	Уведомление = Новый ДоставляемоеУведомление;
	Для каждого Получатель Из Получатели Цикл
		Уведомление.Получатели.Добавить(Получатель);
	КонецЦикла;
	Уведомление.Текст  = ДанныеУведомления.Текст;
	Уведомление.Данные = ДанныеУведомления.Данные;
	Уведомление.ЗвуковоеОповещение = ЗвуковоеОповещение.Нет;
	
	ИспользоватьСервис1С = ВариантОтправки = Перечисления.ВариантыОтправкиPushУведомлений.ОтправлятьЧерезВспомогательныйСервис;
	Попытка
		ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации, , ИспользоватьСервис1С);
	Исключение
		ИмяСобытия  = НСтр("ru='Отправка Push-уведомлений'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ВсеПолучателиУведомлений(НастройкиОтправки)
	
	ВсеПолучатели = Новый Массив;
	Если НЕ ПравоДоступа("Чтение", Метаданные.ПланыОбмена.МобильноеПриложениеПредприниматель) Тогда
		Возврат ВсеПолучатели;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложениеПредприниматель.ЭтотУзел());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МобильноеПриложениеПредприниматель.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеПредприниматель КАК МобильноеПриложениеПредприниматель
	|ГДЕ
	|	НЕ МобильноеПриложениеПредприниматель.ПометкаУдаления
	|	И МобильноеПриложениеПредприниматель.Ссылка <> &ЭтотУзел
	|	И МобильноеПриложениеПредприниматель.ПолучаетPushУведомления";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВсеПолучатели;
	КонецЕсли;
	
	ВариантОтправки  = НастройкиОтправки.ВариантОтправкиPushУведомлений;
	ИспользоватьAPNS = НастройкиОтправки.ИспользоватьAPNS;
	ИспользоватьGCM  = НастройкиОтправки.ИспользоватьGCM;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторПодписчика = Выборка.Узел.ИдентификаторПодписчикаУведомлений;
		Если НЕ ЗначениеЗаполнено(ИдентификаторПодписчика) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИдентификатора = ИдентификаторПодписчика.Получить();
		Если ТипЗнч(ДанныеИдентификатора) <> Тип("ИдентификаторПодписчикаДоставляемыхУведомлений") Тогда
			Продолжить;
		КонецЕсли;
		Если ВариантОтправки = Перечисления.ВариантыОтправкиPushУведомлений.ОтправлятьЧерезВспомогательныйСервис
			ИЛИ ДанныеИдентификатора.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.APNS И ИспользоватьAPNS
			ИЛИ ДанныеИдентификатора.ТипПодписчика = ТипПодписчикаДоставляемыхУведомлений.GCM И ИспользоватьGCM Тогда
			ВсеПолучатели.Добавить(ДанныеИдентификатора);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеПолучатели;
	
КонецФункции

Функция ДанныеУведомленийОЗадачах()
	
	ДанныеУведомлений = Новый Структура;
	ДанныеУведомлений.Вставить("НовыеЗадачи",   Новый Массив);
	ДанныеУведомлений.Вставить("СрочныеЗадачи", Новый Массив);
	НесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет");
	ДатаТекущейОтправки = ТекущаяДатаСеанса();
	СрокСегодня = НачалоДня(ДатаТекущейОтправки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПоследнейОтправкиУведомлений = Константы.ДатаПоследнейОтправкиУведомлений.Получить();
	
	// Новые задачи
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНовыхЗадач", ДатаПоследнейОтправкиУведомлений);
	Запрос.УстановитьПараметр("ПустаяДата",     '00010101');
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Организация.Наименование КАК НаименованиеОрганизации,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ ЗадачиБухгалтера.Срок = &ПустаяДата
	|	И НЕ ЗадачиБухгалтера.ДатаСоздания = &ПустаяДата
	|	И ЗадачиБухгалтера.ДатаСоздания >= &ДатаНовыхЗадач
	|
	|УПОРЯДОЧИТЬ ПО
	|	Срок";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеУведомления = НовыеДанныеУведомления();
			ТекстЗадачи = Выборка.Наименование 
				+ ?(НесколькоОрганизаций, ", " + Выборка.НаименованиеОрганизации, "");
			ДанныеУведомления.Текст  = СтрШаблон(НСтр("ru='Новая задача (до %1)'"), Формат(Выборка.Срок, "ДЛФ=D")) + ":" 
				+ Символы.ПС + ТекстЗадачи;
			ДанныеУведомления.Данные = "НоваяЗадача"
				+ "&" + СериализоватьСсылку(Выборка.Организация)
				+ "&" + Формат(Выборка.Срок, "ДФ=yyyyMMdd");
			ДанныеУведомлений.НовыеЗадачи.Добавить(ДанныеУведомления);
		КонецЦикла;
	КонецЕсли;
	
	// Срочные задачи
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальныйСрок",  НачалоДня(ДатаПоследнейОтправкиУведомлений) + 7*24*60*60);
	Запрос.УстановитьПараметр("МаксимальныйСрок", СрокСегодня + 7*24*60*60);
	Запрос.УстановитьПараметр("Сегодня",          СрокСегодня);
	Запрос.УстановитьПараметр("ДатаНовыхЗадач",   ДатаПоследнейОтправкиУведомлений);
	Запрос.УстановитьПараметр("ПустаяДата",       '00010101');
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Организация.Наименование КАК НаименованиеОрганизации,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Срок > &МинимальныйСрок
	|	И ЗадачиБухгалтера.Срок <= &МаксимальныйСрок
	|	И ЗадачиБухгалтера.Срок >= &Сегодня
	|	И (ЗадачиБухгалтера.ДатаСоздания = &ПустаяДата
	|			ИЛИ ЗадачиБухгалтера.ДатаСоздания < &ДатаНовыхЗадач)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Срок";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеУведомления = НовыеДанныеУведомления();
			ТекстЗадачи = Выборка.Наименование 
				+ ?(НесколькоОрганизаций, ", " + Выборка.НаименованиеОрганизации, "");
			ДанныеУведомления.Текст  = ТекстСколькоОсталось(Выборка.Срок, СрокСегодня) + ":" 
				+ Символы.ПС + ТекстЗадачи;
			ДанныеУведомления.Данные = "СрочнаяЗадача" 
				+ "&" + СериализоватьСсылку(Выборка.Организация)
				+ "&" + Формат(Выборка.Срок, "ДФ=yyyyMMdd");
			ДанныеУведомлений.СрочныеЗадачи.Добавить(ДанныеУведомления);
		КонецЦикла;
	КонецЕсли;

	Константы.ДатаПоследнейОтправкиУведомлений.Установить(ДатаТекущейОтправки);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеУведомлений;

КонецФункции

Функция НовыеДанныеУведомления()

	Возврат Новый Структура("Текст,Данные"); 

КонецФункции

Функция ТекстСколькоОсталось(Срок, Сегодня)
	
	ОсталосьДней = (Срок - Сегодня) / (24*60*60);
	Если ОсталосьДней = 7 Тогда
		Возврат НСтр("ru='Осталась неделя'");
	ИначеЕсли ОсталосьДней = 0 Тогда
		Возврат НСтр("ru='Сегодня'");
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			Нстр("ru = ';Остался %1 день;;Осталось %1 дня;Осталось %1 дней;Осталось %1 дня'"), ОсталосьДней);
	КонецЕсли;
	
КонецФункции

Функция СериализоватьСсылку(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаСериализованная = Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		СсылкаСериализованная = "";
	КонецЕсли;
	
	Возврат СсылкаСериализованная;
	
КонецФункции

Функция ПолученныеНастройкиУведомлений(ОбъектXDTO)
	
	Результат = Новый Структура;
	Результат.Вставить("ПолучаетPushУведомления", ОбъектXDTO.ПолучаетPushУведомления);
	ИдентификаторПодписчика = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO.ИдентификаторПодписчикаУведомлений);
	Результат.Вставить("ИдентификаторПодписчикаУведомлений", ИдентификаторПодписчика);
	Возврат Результат;
	
КонецФункции

#КонецОбласти
