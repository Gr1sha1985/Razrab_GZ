////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТЧЕТНОСТИ ДЛЯ БАНКОВ
// Модуль предназначен для заполнения отчета
// "Бухгалтерская отчетность для предоставления в банк".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру для заполнения ссылками, объектами и значениями, 
// необходимыми при заполнении отчетности в банки для формы ФормаОтчета2017Кв3.
//
// Возвращаемое значение:
//   Структура - Структура со свойствами:
//      * Организация - элемент для хранения ссылки на организацию, по которой заполняется отчет.
//      * КонецПериодаОтчета - элемент для хранения даты, на которую заполняется отчет.
//      * ДанныеОтчета - элемент для хранения дерева значений, в котором размещаются данные отчета.
//      * Интервалы - элемент для хранения таблицы значений с интервалами определения просроченной
//                    задолженности по срокам.
//
Функция НовыйКонтекстЗаполнения2017Кв3() Экспорт
	
	КонтекстЗаполнения = Новый Структура;
	КонтекстЗаполнения.Вставить("Организация");
	КонтекстЗаполнения.Вставить("КонецПериодаОтчета");
	КонтекстЗаполнения.Вставить("ДанныеОтчета");
	КонтекстЗаполнения.Вставить("Интервалы");
	
	Возврат КонтекстЗаполнения;
	
КонецФункции

Функция НовоеДеревоДанныхОтчета2017Кв3_Дебиторская(Интервалы) Экспорт
	
	ДеревоДанныхОтчета = НовоеДеревоДанныхОтчета2017Кв3_ОбщаяЧасть(Интервалы);
	ДеревоДанныхОтчета.Колонки.Добавить("Резерв", Новый ОписаниеТипов("Число"));
	
	Возврат ДеревоДанныхОтчета;
	
КонецФункции

Функция НовоеДеревоДанныхОтчета2017Кв3_Кредиторская(Интервалы) Экспорт
	
	ДеревоДанныхОтчета = НовоеДеревоДанныхОтчета2017Кв3_ОбщаяЧасть(Интервалы);
	
	Возврат ДеревоДанныхОтчета;
	
КонецФункции

Процедура Заполнить2017Кв3_Дебиторская(КонтекстЗаполнения) Экспорт
	
	Организация = КонтекстЗаполнения.Организация;
	КонецПериодаОтчета = КонтекстЗаполнения.КонецПериодаОтчета;
	Интервалы = КонтекстЗаполнения.Интервалы;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьУниверсальныеПараметрыВЗапросе2017Кв3(КонтекстЗаполнения, Запрос);
	
	ПросроченнаяЗадолженность = ПросроченнаяДебиторскаяЗадолженность(Организация, КонецПериодаОтчета, Интервалы);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТ_Просроченная
		|ИЗ
		|	&ПросроченнаяЗадолженность КАК ПросроченнаяЗадолженность
		|
		|// токен дополнения запроса таблицей ВТ_ДанныеДоговоровПереопределяемый";
	
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	Запрос.Выполнить();
	
	СписокСчетовРезервов = "63";
	СчетаРезервов = ЗаполнениеБухгалтерскойОтчетности.МассивСчетовВИерархииИзСписка(СписокСчетовРезервов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Резерв,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка
		|ПОМЕСТИТЬ ВТ_Резервы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаРезервов), &СубконтоКонтрагентыДоговоры, Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтрагентСсылка,
		|	ДоговорСсылка";
	
	Запрос.УстановитьПараметр("СчетаРезервов", СчетаРезервов);
	
	Запрос.Выполнить();
	
	КонтекстЗаполнения.Вставить("Запрос", Запрос);
	
	Заполнить2017Кв3_Дебиторская_Долгосрочная(КонтекстЗаполнения);
	
	Заполнить2017Кв3_Дебиторская_Краткосрочная(КонтекстЗаполнения);
	
	КонтекстЗаполнения.Удалить("ПросроченнаяЗадолженность");
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Кредиторская(КонтекстЗаполнения) Экспорт
	
	Организация = КонтекстЗаполнения.Организация;
	КонецПериодаОтчета = КонтекстЗаполнения.КонецПериодаОтчета;
	Интервалы = КонтекстЗаполнения.Интервалы;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьУниверсальныеПараметрыВЗапросе2017Кв3(КонтекстЗаполнения, Запрос);
	
	ПросроченнаяЗадолженность = ПросроченнаяКредиторскаяЗадолженность(Организация, КонецПериодаОтчета, Интервалы);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТ_Просроченная
		|ИЗ
		|	&ПросроченнаяЗадолженность КАК ПросроченнаяЗадолженность
		|
		|// токен дополнения запроса таблицей ВТ_ДанныеДоговоровПереопределяемый";
	
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	Запрос.Выполнить();
	
	КонтекстЗаполнения.Вставить("Запрос", Запрос);
	
	Заполнить2017Кв3_Кредиторская_Долгосрочная(КонтекстЗаполнения);
	
	Заполнить2017Кв3_Кредиторская_Краткосрочная(КонтекстЗаполнения);
	
	КонтекстЗаполнения.Удалить("ПросроченнаяЗадолженность");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеФормаОтчета2017Кв3

Функция НовоеДеревоДанныхОтчета2017Кв3_ОбщаяЧасть(Интервалы)
	
	ДеревоДанныхОтчета = Новый ДеревоЗначений;
	ДеревоДанныхОтчета.Колонки.Добавить("ВидЗадолженности", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхОтчета.Колонки.Добавить("ПредметУчета", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхОтчета.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхОтчета.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхОтчета.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхОтчета.Колонки.Добавить("Договор", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхОтчета.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДеревоДанныхОтчета.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхОтчета.Колонки.Добавить("ДатаВозникновения", Новый ОписаниеТипов("Дата"));
	ДеревоДанныхОтчета.Колонки.Добавить("Задолженность", Новый ОписаниеТипов("Число"));
	ДеревоДанныхОтчета.Колонки.Добавить("Просроченная", Новый ОписаниеТипов("Число"));
	Для Каждого Интервал Из Интервалы Цикл
		ДеревоДанныхОтчета.Колонки.Добавить("ПросроченнаяПоСроку" + Интервал.Код, Новый ОписаниеТипов("Число"));
	КонецЦикла;
	
	Возврат ДеревоДанныхОтчета;
	
КонецФункции

Процедура Заполнить2017Кв3_Дебиторская_Долгосрочная(КонтекстЗаполнения)
	
	ДанныеОтчета = КонтекстЗаполнения.ДанныеОтчета;
	Запрос       = КонтекстЗаполнения.Запрос;
	Интервалы    = КонтекстЗаполнения.Интервалы;
	
	БлокПодраздела = ДанныеОтчета.Строки.Добавить();
	БлокПодраздела.ВидЗадолженности = "Долгосрочная";
	
	Запрос.Текст = ЗаполнениеОтчетностиВБанкиПереопределяемый.ТекстЗапроса2017Кв3_ДебДолгосрочная(Интервалы);
	
	УничтожаемыеВременныеТаблицы = Новый Массив;
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьПоДокументам");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьБезДокументов");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ВсяЗадолженность");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_Задолженность");
	
	ВидЗадолженности = "Расчеты";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Авансы";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Лизинг";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Прочая";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	РассчитатьИтогиБлокаПодраздела(БлокПодраздела);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Дебиторская_Краткосрочная(КонтекстЗаполнения)
	
	ДанныеОтчета = КонтекстЗаполнения.ДанныеОтчета;
	Запрос       = КонтекстЗаполнения.Запрос;
	Интервалы    = КонтекстЗаполнения.Интервалы;
	
	БлокПодраздела = ДанныеОтчета.Строки.Добавить();
	БлокПодраздела.ВидЗадолженности = "Краткосрочная";
	
	Запрос.Текст = ЗаполнениеОтчетностиВБанкиПереопределяемый.ТекстЗапроса2017Кв3_ДебКраткосрочная(Интервалы);
	
	УничтожаемыеВременныеТаблицы = Новый Массив;
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьПоДокументам");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьБезДокументов");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ВсяЗадолженность");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_Задолженность");
	
	ВидЗадолженности = "Расчеты";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Авансы";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Платежи";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Учредители";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Лизинг";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Прочая";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_ДебКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	РассчитатьИтогиБлокаПодраздела(БлокПодраздела);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Кредиторская_Долгосрочная(КонтекстЗаполнения)
	
	ДанныеОтчета = КонтекстЗаполнения.ДанныеОтчета;
	Запрос       = КонтекстЗаполнения.Запрос;
	Интервалы    = КонтекстЗаполнения.Интервалы;
	
	БлокПодраздела = ДанныеОтчета.Строки.Добавить();
	БлокПодраздела.ВидЗадолженности = "Долгосрочная";
	
	Запрос.Текст = ЗаполнениеОтчетностиВБанкиПереопределяемый.ТекстЗапроса2017Кв3_КредДолгосрочная(Интервалы);
	
	УничтожаемыеВременныеТаблицы = Новый Массив;
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьПоДокументам");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьБезДокументов");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ВсяЗадолженность");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_Задолженность");
	
	ВидЗадолженности = "Расчеты";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Авансы";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Лизинг";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Прочая";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредДср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	РассчитатьИтогиБлокаПодраздела(БлокПодраздела);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Кредиторская_Краткосрочная(КонтекстЗаполнения)
	
	ДанныеОтчета = КонтекстЗаполнения.ДанныеОтчета;
	Запрос       = КонтекстЗаполнения.Запрос;
	Интервалы    = КонтекстЗаполнения.Интервалы;
	
	БлокПодраздела = ДанныеОтчета.Строки.Добавить();
	БлокПодраздела.ВидЗадолженности = "Краткосрочная";
	
	Запрос.Текст = ЗаполнениеОтчетностиВБанкиПереопределяемый.ТекстЗапроса2017Кв3_КредКраткосрочная(Интервалы);
	
	УничтожаемыеВременныеТаблицы = Новый Массив;
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьПоДокументам");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ЗадолженностьБезДокументов");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_ВсяЗадолженность");
	УничтожаемыеВременныеТаблицы.Добавить("ВТ_Задолженность");
	
	ВидЗадолженности = "Расчеты";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Авансы";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Платежи";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Учредители";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Лизинг";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	ВидЗадолженности = "Прочая";
	СчетаЗапроса = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетаУчета2017Кв3_КредКср(ВидЗадолженности);
	ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ВидЗадолженности);
	УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы);
	
	РассчитатьИтогиБлокаПодраздела(БлокПодраздела);
	
КонецПроцедуры

Процедура ВывестиСведения2017Кв3_ПоАналитике(БлокПодраздела, РезультатЗапроса, ВидЗадолженности)
	
	ВыборкаПоВиду = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаПоВиду.Следующий() Тогда
		ЗадолженностьПоВиду = БлокПодраздела.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ЗадолженностьПоВиду, ВыборкаПоВиду);
		ЗадолженностьПоВиду.ВидЗадолженности = ВидЗадолженности;
		
		ВыборкаПоКонтрагентам = ВыборкаПоВиду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагентам.Следующий() Цикл
			СтрокаЗадолженности = ЗадолженностьПоВиду.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗадолженности, ВыборкаПоКонтрагентам);
			
			ВыбокаПоДоговорам = ВыборкаПоКонтрагентам.Выбрать();
			Пока ВыбокаПоДоговорам.Следующий() Цикл
				СтрокаЗадолженностиПоДоговорам = СтрокаЗадолженности.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗадолженностиПоДоговорам, ВыбокаПоДоговорам);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУниверсальныеПараметрыВЗапросе2017Кв3(КонтекстЗаполнения, Запрос)
	
	Организация = КонтекстЗаполнения.Организация;
	КонецПериодаОтчета = КонтекстЗаполнения.КонецПериодаОтчета;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	КонецПериода = Новый Граница(КонецПериодаОтчета, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	СубконтоКонтрагенты = Новый Массив;
	СубконтоКонтрагенты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("СубконтоКонтрагенты", СубконтоКонтрагенты);
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	
	СубконтоКонтрагентыДоговорыДокументы = Новый Массив;
	СубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговорыДокументы", СубконтоКонтрагентыДоговорыДокументы);
	
	СубконтоВидыПлатежей = Новый Массив;
	СубконтоВидыПлатежей.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("СубконтоВидыПлатежей", СубконтоВидыПлатежей);
	
	СубконтоВидыПлатежейУровни = Новый Массив;
	СубконтоВидыПлатежейУровни.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоВидыПлатежейУровни.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	Запрос.УстановитьПараметр("СубконтоВидыПлатежейУровни", СубконтоВидыПлатежейУровни);
	
	СубконтоУчредители = Новый Массив;
	СубконтоУчредители.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители);
	Запрос.УстановитьПараметр("СубконтоУчредители", СубконтоУчредители);
	
	СубконтоРаботники = Новый Массив;
	СубконтоРаботники.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос.УстановитьПараметр("СубконтоРаботники", СубконтоРаботники);
	
	СубконтоРезервы = Новый Массив;
	СубконтоРезервы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы);
	Запрос.УстановитьПараметр("СубконтоРезервы", СубконтоРезервы);
	
	СубконтоРасходыБудущихПериодов = Новый Массив;
	СубконтоРасходыБудущихПериодов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("СубконтоРасходыБудущихПериодов", СубконтоРасходыБудущихПериодов);
	
	СчетаСДокументомРасчетов = СчетаСДокументомРасчетов();
	Запрос.УстановитьПараметр("СчетаСДокументомРасчетов", СчетаСДокументомРасчетов);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаПоСчетам(Запрос, СчетаЗапроса)
	
	ИменаПараметров = Новый Массив;
	ИменаПараметров.Добавить("СчетаУчетаКонтрагенты");
	ИменаПараметров.Добавить("СчетаУчетаКонтрагентыДоговоры");
	ИменаПараметров.Добавить("СчетаУчетаКонтрагентыДоговорыБезСрока");
	ИменаПараметров.Добавить("СчетаУчетаВидыПлатежей");
	ИменаПараметров.Добавить("СчетаУчетаВидыПлатежейУровни");
	ИменаПараметров.Добавить("СчетаУчетаУчредители");
	ИменаПараметров.Добавить("СчетаУчетаРаботники");
	ИменаПараметров.Добавить("СчетаУчетаРезервы");
	ИменаПараметров.Добавить("СчетаУчетаРасходыБудущихПериодов");
	ИменаПараметров.Добавить("СчетаУчетаБезАналитики");
	ИменаПараметров.Добавить("СчетаУчетаБезАналитикиРазвернуто");
	ИменаПараметров.Добавить("СчетаУчетаНДСАвансов");
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		Если СчетаЗапроса.Свойство(ИмяПараметра) Тогда
			Счета = ЗаполнениеБухгалтерскойОтчетности.МассивСчетовВИерархииИзСписка(СчетаЗапроса[ИмяПараметра]);
			Запрос.УстановитьПараметр(ИмяПараметра, Счета);
			
		Иначе
			Запрос.УстановитьПараметр(ИмяПараметра, Новый Массив);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СчетаСДокументомРасчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто_Контрагенты.Ссылка КАК Счет,
		|	ХозрасчетныйВидыСубконто_Договоры.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный КАК ЕстьДоговор
		|ПОМЕСТИТЬ СчетаКонтрагентыИДоговоры
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Договоры
		|		ПО ХозрасчетныйВидыСубконто_Контрагенты.Ссылка = ХозрасчетныйВидыСубконто_Договоры.Ссылка
		|ГДЕ
		|	ХозрасчетныйВидыСубконто_Контрагенты.ВидСубконто = &ВидСубконтоКонтрагенты
		|	И ХозрасчетныйВидыСубконто_Договоры.ВидСубконто = &ВидСубконтоДоговоры
		|	И НЕ ХозрасчетныйВидыСубконто_Контрагенты.Ссылка.Забалансовый
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйВидыСубконто_Документы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СчетаДокументыРасчетов
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Документы
		|ГДЕ
		|	ХозрасчетныйВидыСубконто_Документы.ВидСубконто = &ВидСубконтоДокументРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаКонтрагентыИДоговоры.Счет КАК Счет,
		|	ЕСТЬNULL(СчетаДокументыРасчетов.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный, ЛОЖЬ) КАК ЕстьДокументРасчетов
		|ПОМЕСТИТЬ Счета
		|ИЗ
		|	СчетаКонтрагентыИДоговоры КАК СчетаКонтрагентыИДоговоры
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаДокументыРасчетов КАК СчетаДокументыРасчетов
		|		ПО СчетаКонтрагентыИДоговоры.Счет = СчетаДокументыРасчетов.Ссылка
		|ГДЕ
		|	СчетаКонтрагентыИДоговоры.ЕстьДоговор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Счета.Счет КАК Счет
		|ИЗ
		|	Счета КАК Счета
		|ГДЕ
		|	Счета.ЕстьДокументРасчетов";
	
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидСубконтоДокументРасчетов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат.Количество() = 4 Тогда
		Счета = Результат[3].Выгрузить().ВыгрузитьКолонку("Счет");
	Иначе
		Счета = Новый Массив;
	КонецЕсли;
	
	Возврат Счета;
	
КонецФункции

Процедура УничтожитьВременныеТаблицы(Запрос, УничтожаемыеВременныеТаблицы)
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	
	ТекстЗапроса = "";
	Для Каждого УничтожаемаяТаблица Из УничтожаемыеВременныеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса
		             + "; УНИЧТОЖИТЬ " + УничтожаемаяТаблица;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 3);
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.Выполнить();
		
		Запрос.Текст = ИсходныйТекстЗапроса;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗапросИВывестиСведения(БлокПодраздела, Запрос, СчетаЗапроса, ИмяСекции)
	
	УстановитьПараметрыЗапросаПоСчетам(Запрос, СчетаЗапроса);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВывестиСведения2017Кв3_ПоАналитике(БлокПодраздела, Результат, ИмяСекции);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьИтогиБлокаПодраздела(БлокПодраздела)
	
	Колонки = БлокПодраздела.Владелец().Колонки;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	СуммируемыеКолонки = Новый Массив;
	
	Для Каждого Колонка Из Колонки Цикл
		Если Колонка.ТипЗначения = ТипЧисло Тогда
			СуммируемыеКолонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПоВиду Из БлокПодраздела.Строки Цикл
		Для Каждого Колонка Из СуммируемыеКолонки Цикл
			БлокПодраздела[Колонка] = БлокПодраздела[Колонка]
			                        + СтрокаПоВиду[Колонка];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПросроченнаяЗадолженность

Функция ПросроченнаяДебиторскаяЗадолженность(Организация, ДатаЗадолженности, Интервалы)
	
	Возврат ЗаполнениеОтчетностиВБанкиПереопределяемый.ПросроченнаяЗадолженность(
		Организация, ДатаЗадолженности, 1, Интервалы);
	
КонецФункции

Функция ПросроченнаяКредиторскаяЗадолженность(Организация, ДатаЗадолженности, Интервалы)
	
	Возврат ЗаполнениеОтчетностиВБанкиПереопределяемый.ПросроченнаяЗадолженность(
		Организация, ДатаЗадолженности, 2, Интервалы);
	
КонецФункции

#КонецОбласти

#КонецОбласти
