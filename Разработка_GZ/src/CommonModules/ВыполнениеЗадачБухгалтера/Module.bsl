#Область ПрограммныйИнтерфейс

// Описывает действие, которое необходимо выполнить для события
//
// Параметры:
//  Событие - Структура - см. ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи()
// Возвращаемое значение:
//  Структура - состав см. в теле функции
//
Функция ОписаниеДействия(Событие) Экспорт
	
	Если ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		Возврат ОписаниеДействияРегулярныйПлатеж(Событие);
		
	ИначеЕсли ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.Патенты") Тогда
		
		Возврат ОписаниеДействияПомощникОплатыПатента(Событие);
		
	ИначеЕсли ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.ПравилаФинОтчетности") Тогда
		
		Возврат ОписаниеДействияФинОтчетность(Событие);
		
	Иначе
		
		Возврат ОписаниеДействияНалоговыйПлатеж(Событие);
		
	КонецЕсли
	
КонецФункции

Функция НовыйОписаниеПлатежа() Экспорт
	
	ОписаниеПлатежа = Новый Структура;
	ОписаниеПлатежа.Вставить("Организация",                Справочники.Организации.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("Налог",                      Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ОписаниеПлатежа.Вставить("СпособОплаты",               Перечисления.СпособыУплатыНалогов.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ИмяЗадачи",                  "");
	ОписаниеПлатежа.Вставить("Период",                     '00010101');
	ОписаниеПлатежа.Вставить("ПоказательПериода",          "");
	ОписаниеПлатежа.Вставить("Аванс",                      Ложь);
	ОписаниеПлатежа.Вставить("КБК",                        "");
	ОписаниеПлатежа.Вставить("ОКАТО",                      "");
	ОписаниеПлатежа.Вставить("КПППлательщика",             "");
	ОписаниеПлатежа.Вставить("Сумма",                      0);
	ОписаниеПлатежа.Вставить("Описание",                   "");
	ОписаниеПлатежа.Вставить("Декларация",                 Документы.РегламентированныйОтчет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ДатаДекларации",             '00010101');
	ОписаниеПлатежа.Вставить("КодНалоговогоОргана",        "");
	ОписаниеПлатежа.Вставить("ОплатаЗадолженности",        Ложь);
	
	Возврат ОписаниеПлатежа;
	
КонецФункции

// Функция-конструктор таблицы платежей
//
Функция НовыйТаблицаПлатежи() Экспорт
	
	Платежи = Новый ТаблицаЗначений;
	
	Платежи.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Платежи.Колонки.Добавить("Период",       Новый ОписаниеТипов("Дата"));
	// По колонкам "КБК" и "ОКАТО" предполагается индекирование, получаем тип из метаданных
	Платежи.Колонки.Добавить("КБК",          Метаданные.Документы.ПлатежноеПоручение.Реквизиты.КодБК.Тип);
	Платежи.Колонки.Добавить("ОКАТО",        Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
	Платежи.Колонки.Добавить("Сумма",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Платежи.Колонки.Добавить("Аванс",        Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("КодНалоговогоОргана",        Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Платежи.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Платежи.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Строка"));
	
	Возврат Платежи;
	
КонецФункции

Функция ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа) Экспорт
	
	ПравилаЗаполнения = ПлатежиВБюджетНастройки.ПравилаЗаполненияРеквизитовПлатежа(ОписаниеПлатежа.Налог);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) И ПравилаЗаполнения.ЗаполнятьПолучателя Тогда
		// Если нужно заполнять получателя и не заполен Код налогового органа, попробуем получить его из сведений об организации.
		ВидГосударственногоОргана           = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(ОписаниеПлатежа.КБК);
		ОписаниеПлатежа.КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
			ОписаниеПлатежа.Организация,
			ВидГосударственногоОргана);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеПлатежа.ОКАТО) И ПравилаЗаполнения.ЗаполнятьКодТерриторииПоРегистрации Тогда
		ОписаниеПлатежа.ОКАТО = Справочники.Организации.КодТерриторииМестаРегистрации(ОписаниеПлатежа.Организация);
	КонецЕсли;
	
	ДанныеПлатежногоДокумента = Новый Структура;
	// Контекст
	ДанныеПлатежногоДокумента.Вставить("Организация", ОписаниеПлатежа.Организация);
	Если НЕ ПустаяСтрока(ОписаниеПлатежа.КПППлательщика) Тогда
		ДанныеПлатежногоДокумента.Вставить("КПППлательщика", ОписаниеПлатежа.КПППлательщика);
	КонецЕсли;
	ДанныеПлатежногоДокумента.Вставить("Налог", ОписаниеПлатежа.Налог);
	ДанныеПлатежногоДокумента.Вставить("ВидНалоговогоОбязательства", ОписаниеПлатежа.ВидНалоговогоОбязательства);
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		
		ДанныеПлатежногоДокумента.Вставить("ВидОперации", Перечисления.ВидыОперацийРКО.УплатаНалога);
		ДанныеПлатежногоДокумента.Вставить("СчетКасса",   ПланыСчетов.Хозрасчетный.КассаОрганизации);
		ДанныеПлатежногоДокумента.Вставить("НалоговыйПериод", НачалоМесяца(ОписаниеПлатежа.Период));
		
		Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОписаниеПлатежа.Организация) Тогда
			ПредпринимательФИО = Справочники.Организации.ФамилияИмяОтчествоПредпринимателя(ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
			ДанныеПлатежногоДокумента.Вставить("Выдать", ПредпринимательФИО);
		КонецЕсли;
		
	Иначе
		ДанныеПлатежногоДокумента.Вставить("ПеречислениеВБюджет", Истина);
		ДанныеПлатежногоДокумента.Вставить("ВидОперации",         Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	КонецЕсли;
	
	ДанныеПлатежногоДокумента.Вставить("ВалютаДокумента", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", ПлатежиВБюджетКлиентСервер.ВидПеречисления(ОписаниеПлатежа.КБК, ОписаниеПлатежа.Период));
	
	// Известны из декларации
	ДанныеПлатежногоДокумента.Вставить("СуммаДокумента",    ОписаниеПлатежа.Сумма);
	ПоказательДаты = ПлатежиВБюджетКлиентСервер.ПреобразоватьДатуКСтроке(ОписаниеПлатежа.ДатаДекларации);
	ДанныеПлатежногоДокумента.Вставить("ПоказательДаты",    ПоказательДаты);
	ДанныеПлатежногоДокумента.Вставить("ДокументОснование", ОписаниеПлатежа.Декларация);
	
	// Зависят от налога, но известны из декларации
	ДанныеПлатежногоДокумента.Вставить("КодБК",             ОписаниеПлатежа.КБК);
	ДанныеПлатежногоДокумента.Вставить("КодОКАТО",          ОписаниеПлатежа.ОКАТО);
	ДанныеПлатежногоДокумента.Вставить("ПоказательПериода", ОписаниеПлатежа.ПоказательПериода);
	
	Если ЗначениеЗаполнено(ОписаниеПлатежа.Налог) И ОписаниеПлатежа.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы 
		И ОписаниеПлатежа.ИмяЗадачи <> "Патент_Уплата" Тогда
		
		ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
			ОписаниеПлатежа.ПоказательПериода);
			
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период, ПредставлениеНалоговогоПериода);
			
	Иначе
		НазначениеПлатежа = ОписаниеПлатежа.Описание;
	КонецЕсли;
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ДанныеПлатежногоДокумента.Вставить("Основание", НазначениеПлатежа);
	Иначе
		ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	КонецЕсли;
	
	Если ОписаниеПлатежа.Аванс И Не ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ОбщегоНазначения.ТекущаяДатаПользователя()) Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательТипа", ПлатежиВБюджетКлиентСервер.ТипПлатежаАванс());
	КонецЕсли;
	
	// Зависят от налога, но не известны из декларации
	НастройкиУплатыНалога = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.НайтиПоКБК(
		ОписаниеПлатежа.Организация,
		ОписаниеПлатежа.КБК,
		ОписаниеПлатежа.ОКАТО);
	
	ДанныеПлатежногоДокумента.Вставить("СтатьяДвиженияДенежныхСредств",
		УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДанныеПлатежногоДокумента.ВидОперации));
	Если НастройкиУплатыНалога <> Неопределено И ОписаниеПлатежа.Налог = НастройкиУплатыНалога.Налог Тогда
		Если ЗначениеЗаполнено(НастройкиУплатыНалога.СтатьяДвиженияДенежныхСредств) Тогда
			ДанныеПлатежногоДокумента.Вставить("СтатьяДвиженияДенежныхСредств", НастройкиУплатыНалога.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НастройкиУплатыНалога.НазначениеПлатежа) Тогда
			Если НастройкиУплатыНалога.ВидПеречисленияВБюджет <> Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
				ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
			Иначе
				ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
					ДанныеПлатежногоДокумента.ПоказательПериода);
				Если НЕ ПустаяСтрока(ПредставлениеНалоговогоПериода) Тогда
					НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 %2'"),
						НастройкиУплатыНалога.НазначениеПлатежа,
						ПредставлениеНалоговогоПериода);
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
				Иначе
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", НастройкиУплатыНалога.ВидПеречисленияВБюджет);
		Если ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "Получатель", "Контрагент") Тогда
			ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "СчетПолучателя", "СчетКонтрагента");
		КонецЕсли;
		
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "СтатусСоставителя");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательТипа");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ОчередностьПлатежа");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательОснования");
		
		Если НастройкиУплатыНалога.Свойство("КодОКАТО") И ЗначениеЗаполнено(НастройкиУплатыНалога.КодОКАТО) 
			И (Не ДанныеПлатежногоДокумента.Свойство("КодОКАТО") Или Не ЗначениеЗаполнено(ДанныеПлатежногоДокумента.КодОКАТО))Тогда
			ДанныеПлатежногоДокумента.Вставить("КодОКАТО", НастройкиУплатыНалога.КодОКАТО);
		КонецЕсли;
		
		// ПоказательПериода точнее определяется из декларации, чем задан в настройке
		Если НЕ ЗначениеЗаполнено(ОписаниеПлатежа.Декларация)
			И ДанныеПлатежногоДокумента.Свойство("ПоказательПериода") И НЕ ЗначениеЗаполнено(ДанныеПлатежногоДокумента.ПоказательПериода) Тогда
			ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательПериода");
		КонецЕсли;
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
				НастройкиУплатыНалога.СчетУчета,
				ОписаниеПлатежа.Организация,
				ОписаниеПлатежа.КБК,
				ОписаниеПлатежа.КодНалоговогоОргана,
				ОписаниеПлатежа.Период,
				ОписаниеПлатежа.ВидНалоговогоОбязательства);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) Тогда
			ВидГосоргана = Справочники.Контрагенты.ВидГосударственногоОрганаПоКБК(ДанныеПлатежногоДокумента.КодБК);
			ДанныеПлатежногоДокумента.Вставить("КодНалоговогоОргана", ОписаниеПлатежа.КодНалоговогоОргана);
			
			//определяем получателя по данным информационной базы
			НалоговыйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидГосоргана, ОписаниеПлатежа.КодНалоговогоОргана);
			Если ЗначениеЗаполнено(НалоговыйОрган.Ссылка) Тогда
				ДанныеПлатежногоДокумента.Вставить("Контрагент",      НалоговыйОрган.Ссылка);
				ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", НалоговыйОрган.ПлатежныеРеквизиты.БанковскийСчет);
			Иначе
				//Определяем данные получателя из веб-сервиса
				Если ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				Иначе
					Реквизиты = Неопределено;
				КонецЕсли;
				Если Реквизиты <> Неопределено
					И НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					
					Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					Иначе
						ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(Реквизиты);
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОписаниеПлатежа.КБК);
			СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ОписаниеПлатежа.Период);
			Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
					СчетУчетаРасчетовСКонтрагентом,
					ОписаниеПлатежа.Организация,
					ОписаниеПлатежа.КБК,
					ОписаниеПлатежа.КодНалоговогоОргана,
					ОписаниеПлатежа.Период,
					ОписаниеПлатежа.ВидНалоговогоОбязательства);
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеПлатежа.ОплатаЗадолженности Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательОснования",
			ПлатежиВБюджетКлиентСервер.ОснованиеПлатежаДобровольноеПогашениеЗадолженности());
	КонецЕсли;
	
	Возврат ДанныеПлатежногоДокумента;
	
КонецФункции

Функция ТребованияНеВыполняемыеБРО() Экспорт
	
	НевыполнимыеТребования = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК ИдентификаторНалогаОтчета,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК ИдентификаторПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК ВладелецРеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРеквизитДопУпорядочивания,
	|	РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяТребования = Выборка.ИдентификаторНалогаОтчета + "." + Выборка.ИдентификаторПравила;
		Если Не ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ИмяТребования) Тогда
			НевыполнимыеТребования.Добавить(ИмяТребования);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НевыполнимыеТребования;
	
КонецФункции

Функция ПлатежиПоЗадачам(Организация, РабочаяДата, ГоризонтПланирования) Экспорт
	
	ЗадачиБухгалтера = ЗадачиДляКалендаря(Организация, РабочаяДата, ГоризонтПланирования);
	
	Платежи = Новый Структура;
	
	Платежи.Вставить("РегулярныеПлатежи", РегулярныеПлатежи(ЗадачиБухгалтера.РегулярныеПлатежи));
	Платежи.Вставить("УплатаНалогов",     НалоговыеПлатежи(ЗадачиБухгалтера.УплатаНалогов));
	Платежи.Вставить("Зарплата",          ЗарплатныеПлатежи(ЗадачиБухгалтера.Зарплата));
	
	Возврат Платежи;
	
КонецФункции

Функция СрокВыполненияЗадачи(Организация, Правило, ТекущийПериод) Экспорт
	
	ПериодичностьПравила = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Периодичность");
	
	НачалоОтчетногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		ПериодичностьПравила, ТекущийПериод);
	ОкончаниеОтчетногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
			ПериодичностьПравила, ТекущийПериод);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Правило", Правило);
	Запрос.Параметры.Вставить("НачалоПериода", НачалоОтчетногоПериода);
	Запрос.Параметры.Вставить("ОкончаниеПериода", ОкончаниеОтчетногоПериода);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.ПериодСобытия >= &НачалоПериода
	|	И ЗадачиБухгалтера.ПериодСобытия <= &ОкончаниеПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Срок;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Дополняет таблицу платежей по декларации платежными документами
// Добавляет в переданную таблицу "Платежи" колонки:
//   * ПлатежноеПоручение - ДокументСсылка.ПлатежноеПоручение, ДокументСсылка.РасходныйКассовыйОрдер - ссылка на документ уплаты.
//   * СуммаОплачено - Число - сумма документа уплаты
//   * Оплачено - Булево - флаг, что документ уплаты в состоянии "Оплачено"
//
// Параметры:
//  Платежи - ТаблицаЗначений - см. НовыйТаблицаПлатежи()
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов, СправочникСсылка.Патенты - правило уплаты налога, подготовки отчета.
//  ПериодСобытия - Дата - период события
//  Организация - СправочникСсылка.Организации - организация
//  СведенияПоДекларации - Структура - для платежей по декларации, ключи:
//    * Ссылка - ссылка на регламентированный отчет
//    * ПоказательПериода - Строка
//
Процедура ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация, СведенияПоДекларации = Неопределено) Экспорт
	
	ИмяЗадачи = Правило.Владелец.Код;
	ПлатежПоДекларации = ЗначениеЗаполнено(СведенияПоДекларации);
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Платежи.Колонки.Добавить("Индекс",             Новый ОписаниеТипов("Число"));
	Платежи.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	Платежи.Колонки.Добавить("СуммаОплачено",      Новый ОписаниеТипов("Число"));
	Платежи.Колонки.Добавить("Оплачено",           Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаПлатежа Из Платежи Цикл
		СтрокаПлатежа.Индекс = Платежи.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Правило",       Правило);
	Запрос.УстановитьПараметр("Платежи",       Платежи);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	Если ПлатежПоДекларации Тогда
		Запрос.УстановитьПараметр("Декларация",        СведенияПоДекларации.Ссылка);
		Запрос.УстановитьПараметр("ПоказательПериода", СведенияПоДекларации.ПоказательПериода);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Платежи.Период КАК Период,
	|	Платежи.КБК КАК КБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.Аванс КАК Аванс,
	|	Платежи.Индекс КАК ИндексПлатежа
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПлатежПоДекларации Тогда
		ДополнитьТекстЗапросаПлатежиПоДекларации(ТекстЗапроса);
	Иначе
		ДополнитьТекстЗапросаПлатежи(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТПлатежныеПоручения
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.КодБК КАК КБК,
	|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
	|	ИСТИНА КАК Оплачено
	|ПОМЕСТИТЬ ПлатежиПоПравилу
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПлатежныеПоручения.Ссылка,
	|	ВТПлатежныеПоручения.Дата,
	|	ВТПлатежныеПоручения.КодБК,
	|	ВТПлатежныеПоручения.КодОКАТО,
	|	ВТПлатежныеПоручения.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ВТПлатежныеПоручения КАК ВТПлатежныеПоручения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ВТПлатежныеПоручения.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	Платежи.ОКАТО КАК ОКАТОДекларации,
	|	ПлатежиПоПравилу.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоПравилу.ОКАТО КАК ОКАТОПлатежа,
	|	ПлатежиПоПравилу.Оплачено КАК Оплачено,
	|	ПлатежиПоПравилу.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	ПлатежиПоПравилу КАК ПлатежиПоПравилу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборТекущиеПлатежи КАК Платежи
	|		ПО ПлатежиПоПравилу.КБК = Платежи.КБК
	|			И ПлатежиПоПравилу.ОКАТО = Платежи.ОКАТО
	|			И (&УсловиеПоПериоду)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежиПоПравилу.СуммаДокумента УБЫВ
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Если ПлатежПоДекларации И ИмяЗадачи = "НДС" Тогда
		// Особенность НДС в том, что он уплачивается несколькими платежами.
		// Поэтому дополнительно проверяем месяц платежного поручения.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду",
			"НАЧАЛОПЕРИОДА(Платежи.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПлатежиПоПравилу.Дата, МЕСЯЦ)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			Платеж = Платежи[Выборка.ИндексПлатежа];
			Платеж.ПлатежноеПоручение = Выборка.ПлатежноеПоручение;
			Платеж.СуммаОплачено      = Выборка.СуммаДокумента;
			Платеж.Оплачено           = Выборка.Оплачено;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Колонки.Удалить("Индекс");
	
КонецПроцедуры

Функция ОписаниеДействияДекларация(Правило, ПериодСобытия, Организация, РегистрацияВНалоговомОргане, ДлительностьБазовогоПериода = Неопределено) Экспорт
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, ПериодСобытия);
	КонецПериода  = КонецДня(ПериодСобытия);
	Периодичность = ?(ЗначениеЗаполнено(ДлительностьБазовогоПериода), ДлительностьБазовогоПериода, Правило.Периодичность);
	
	ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		НачалоПериода,
		КонецПериода,
		Периодичность);
	
	Если ОписаниеФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
	ОписаниеДействия.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Возвращает способ уплаты налога для организации и ИП
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов - если возможно несколько способов уплаты,
//  то возвращает пустую ссылку
//
Функция СпособУплатыНалогаВзноса(Организация) Экспорт
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	Если ЭтоЮрЛицо Тогда
		СпособУплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
	Иначе
		Если Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(Организация) > 0 Тогда
			// Возможно несколько способов оплаты
			СпособУплаты = Перечисления.СпособыУплатыНалогов.ПустаяСсылка();
		Иначе
			СпособУплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособУплаты;
	
КонецФункции

// Определяет особые способы выполнения задачи в помощнике уплаты налога.
//
// При этом стандартными способами считаются
// - уплата налога на основании декларации или другого регулярного отчета
// - выполнение действий, не связанных с уплатой налога, таких как
//   -- представление отчета, не предусматривающего уплату, например, статотчетности
//   -- выплата зарплаты
//   -- регулярные платежи поставщикам.
//
// Остальные случаи - особые, имеют свое имя способа выполнения задачи.
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов или СправочникСсылка.Патенты
//
// Возвращаемое значение:
//  Строка - имя способа выполнения задачи
//
Функция СпособВыполненияЗадачи(ПараметрыЗадачи) Экспорт
	
	Правило = ПараметрыЗадачи.ПравилоУплаты;
	
	// Уплату патента определяем по типу правила.
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.Патенты") Тогда
		Возврат "УплатаПатента";
	КонецЕсли;
	
	Если Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		Возврат "";
	КонецЕсли;
	
	ИдентификаторЗадачи = Правило.Владелец.Код;
	
	Если ИдентификаторЗадачи = "НДФЛ_Агент_Уплата" Тогда
		Возврат "УплатаНДФЛ"; // по данным о суммах, удержанных с физических лиц
	ИначеЕсли ИдентификаторЗадачи = "СтраховыеВзносы" Тогда 
		Возврат "УплатаСтраховыхВзносов"; // по данным о начисленной заработной плате
	ИначеЕсли (ИдентификаторЗадачи = "НалогНаИмущество" ИЛИ ИдентификаторЗадачи = "ТранспортныйНалог" ИЛИ ИдентификаторЗадачи = "ЗемельныйНалог") 
		И НЕ ЗначениеЗаполнено(ПараметрыЗадачи.ПравилоОтчета) Тогда
		// В соответствии с 63-ФЗ от 15.04.2019:
		//  - с 2020 года отменены налоговые расчеты по авансам по налогу на имущество.
		//  - с 2021 года (т.е. за налоговый период 2020 год и позже) отменены налоговые декларации по земельному и транспортному налогам.
		// Поэтому за периоды до 2020 года каждому правилу уплаты налога на имущество соответствует правило представления отчета,
		// а с 2020 года при уплате авансов по имуществу правило представления отчета отсутствует (декларация требуется только за год).
		// Также за период 2020 год и последующие налоговые периоды отсутстствуют правила представления декларации по транспортному и земельному налогу.
		// Таким образом, ориентируемся на наличие правила по представлению отчета: 
		// если его нет, то сумма налогового платежа берется из данных расчета налога.
		Возврат "УплатаИмущественныхНалогов";
	ИначеЕсли ИдентификаторЗадачи = "ТорговыйСбор" Тогда
		Возврат "УплатаТорговогоСбора"; // по данным уведомления об открытии торговой точки, представляемым единовременно
	ИначеЕсли ИдентификаторЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход() Тогда 
		Возврат "УплатаНалогаНаПрофессиональныйДоход"; // по данным уведомления
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Проверяет является ли правило уплатой/отчетом по страховым взносам
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов или СправочникСсылка.Патенты
//
// Возвращаемое значение:
//  Булево - признак того является ли правило платой/отчетом по страхвым взносам или нет
//
Функция ЭтоСтраховыеВзносы(Правило) Экспорт
	
	Если ТипЗнч(Правило) <> Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		Возврат Ложь;
	Иначе
		Возврат Правило.Владелец.Код = "СтраховыеВзносы";
	КонецЕсли;
	
КонецФункции

// Возвращает состояние сверки по задаче
//
// Параметры:
//  ПараметрыЗадачи - Структура - см. НовыйПараметрыЗадачиДляСверки()
//
// Возвращаемое значение:
//  Структура - Структура с ключами:
//    * СверкаВыполнена - Булево - признак того, что по задаче выполнена сверка
//    * ОписаниеДействияСверка - Структура с ключами: Наименование - Строка, ИмяФормы - Строка, ПараметрыФормы - Структура
//    * ЗапросНаСверкуСсылка - ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика,
//      ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя - ссылка на документ-запрос на сверку
//    * ЗапросНаСверкуНаименование - Строка - представление документа-запроса на сверку
//
Функция СведенияОСверке(ПараметрыЗадачи) Экспорт
	
	СведенияОСверке = Новый Структура();
	
	СведенияОСверке.Вставить("СверкаВыполнена",            Ложь);
	СведенияОСверке.Вставить("ОписаниеДействияСверка",     Новый Структура);
	СведенияОСверке.Вставить("ЗапросНаСверкуСсылка",       Неопределено);
	СведенияОСверке.Вставить("ЗапросНаСверкуНаименование", "");
	СведенияОСверке.Вставить("МожноВыполнятьСверку",       Истина);
	
	Если Не РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		Возврат СведенияОСверке;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.Патенты") Тогда
		СведенияОСверке.МожноВыполнятьСверку = Ложь;
		Возврат СведенияОСверке;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("ИдентификаторЗадачи, Действие", ПараметрыЗадачи.ИдентификаторЗадачи, ПараметрыЗадачи.Правило.Действие);
	Если НЕ Справочники.ЗадачиБухгалтера.МожноВыполнятьСверку(ПараметрыКоманды) Тогда
		СведенияОСверке.МожноВыполнятьСверку = Ложь;
		Возврат СведенияОСверке;
	КонецЕсли;
	
	ЗапросНаСверкуНаименование = "";
	НаименованиеДействия       = "";
	
	Если ЭтоСтраховыеВзносы(ПараметрыЗадачи.Правило)
		И НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ТекущаяДатаСеанса()) Тогда
		КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		НаименованиеДействия = НСтр("ru = 'Запросить сверку с ПФР'");
	Иначе
		КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		НаименованиеДействия = НСтр("ru = 'Запросить сверку с ФНС'");
	КонецЕсли;
	
	// Проверим подключение документооборота с контролирующим органом.
	ДокументооборотПодключен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			ПараметрыЗадачи.Организация,
			КонтролирующийОрган);
			
	Если НЕ ДокументооборотПодключен Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ПараметрыЗадачи.Организация);
		
		СведенияОСверке.ОписаниеДействияСверка.Вставить("Наименование",   НаименованиеДействия);
		СведенияОСверке.ОписаниеДействияСверка.Вставить("ИмяФормы",       "Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ПредложениеОформитьЗаявлениеНаПодключение");
		СведенияОСверке.ОписаниеДействияСверка.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		Возврат СведенияОСверке;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ПараметрыЗадачи.Организация);
	ИмяФормы = "";
	
	// Если это задача за прошедший год, то запрос о сверке формируем на конец года.
	Если Год(ПараметрыЗадачи.Срок) > Год(ПараметрыЗадачи.ПериодСобытия) Тогда
		ПараметрыФормы.Вставить("ПериодСобытия", КонецГода(ПараметрыЗадачи.ПериодСобытия));
	Иначе
		// Запрос о сверке на дату выполнения задачи.
		ПараметрыФормы.Вставить("ПериодСобытия", ПараметрыЗадачи.Срок);
	КонецЕсли;
	
	Если КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЗадачи.РегистрацияВНалоговомОргане) Тогда
			ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		Иначе
			ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", ПараметрыЗадачи.Организация.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыФормы.РегистрацияВНалоговомОргане) Тогда
			ПараметрыФормы.Вставить("ОКТМО", ПараметрыФормы.РегистрацияВНалоговомОргане.КодПоОКТМО);
		Иначе
			ПараметрыФормы.Вставить("ОКТМО", "");
		КонецЕсли;
		
		ИдентификаторЗадачиДляКБК = ?(ПараметрыЗадачи.ИдентификаторЗадачи = "НДФЛ_Агент",
			"НДФЛ_Агент_Уплата", ПараметрыЗадачи.ИдентификаторЗадачи);
		
		СписокКБК = ПолучитьКБКДляСверки(
			ИдентификаторЗадачиДляКБК,
			ПараметрыФормы.Организация,
			ПараметрыФормы.ПериодСобытия,
			ПараметрыЗадачи.ВидыНалогов,
			ПараметрыЗадачи.ВидыНалоговыхОбязательств);
		
		Если СписокКБК.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("СписокКБК", СписокКБК);
		КонецЕсли;
		
		ИмяФормы = "Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаДокумента";
		
	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		
		ПараметрыФормы.Вставить("ВидСверки", Перечисления.ВидыУслугПриИОС.СправкаОСостоянииРасчетов);
		
		КодОрганаПФР = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
			ПараметрыФормы.Организация,
			Перечисления.ВидыГосударственныхОрганов.ОрганПФР);
			
		Если ЗначениеЗаполнено(КодОрганаПФР) Тогда
			ОрганПФР = Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
			Если ЗначениеЗаполнено(ОрганПФР) Тогда
				ПараметрыФормы.Вставить("ОрганПФР", ОрганПФР);
			КонецЕсли;
		КонецЕсли;
		
		ИмяФормы = "Документ.ЗапросНаИнформационноеОбслуживаниеСтрахователя.Форма.ФормаДокумента";
		
	КонецЕсли;
	
	ПериодНачалаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
		ПараметрыФормы.ПериодСобытия, ПараметрыЗадачи.Правило.Периодичность, -1);
	ПараметрыФормы.Вставить("ПериодНачалаСобытия", НачалоМесяца(ПериодНачалаСобытия));
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("Наименование", НаименованиеДействия);
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормы);
	
	ЗапросНаСверкуСсылка = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьСуществующуюСверку(ПараметрыФормы, Строка(КонтролирующийОрган));
	Если ЗапросНаСверкуСсылка = Неопределено Тогда
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	Иначе
		СведенияОСверке.СверкаВыполнена = Истина;
		ЗапросНаСверкуНаименование = ПредставлениеЗапросаНаСверку(ЗапросНаСверкуСсылка);
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗапросНаСверкуСсылка));
	КонецЕсли;
	
	СведенияОСверке.ОписаниеДействияСверка     = ОписаниеДействия;
	СведенияОСверке.ЗапросНаСверкуСсылка       = ЗапросНаСверкуСсылка;
	СведенияОСверке.ЗапросНаСверкуНаименование = ЗапросНаСверкуНаименование;
	
	Возврат СведенияОСверке;
	
КонецФункции

// Функция-конструктор структуры, описывающей параметры сверки
//
Функция НовыйПараметрыЗадачиДляСверки() Экспорт
	
	ПараметрыЗадачиДляСверки = Новый Структура();
	
	ПараметрыЗадачиДляСверки.Вставить("Организация",                 Справочники.Организации.ПустаяСсылка());
	ПараметрыЗадачиДляСверки.Вставить("Правило",                     Неопределено);
	ПараметрыЗадачиДляСверки.Вставить("Периодичность",               Перечисления.Периодичность.ПустаяСсылка());
	ПараметрыЗадачиДляСверки.Вставить("ПериодСобытия",               '00010101');
	ПараметрыЗадачиДляСверки.Вставить("Срок",                        '00010101');
	ПараметрыЗадачиДляСверки.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыЗадачиДляСверки.Вставить("ИдентификаторЗадачи",         "");
	
	ПараметрыЗадачиДляСверки.Вставить("ВидыНалогов",                 Новый Массив);
	ПараметрыЗадачиДляСверки.Вставить("ВидыНалоговыхОбязательств",   Новый Массив);
	
	Возврат ПараметрыЗадачиДляСверки;
	
КонецФункции

// Возвращает данные для платежа по декларации
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  Организация - СправочникСсылка.Организации
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ПериодСобытия - Дата
//  Срок - Дата
//  ПоказательПериода - Строка
//
// Возвращаемое значение:
//  ДанныеДекларации - Структура - ключи см. ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога().
//    Для задач "НДС" дополняется ключами:
//       * СуммаНДСПоДекларации - Число - сумма НДС по декларации
//    Таблица в ключе "Платежи" дополнена колонками:
//       * Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - ссылка на налог, соответствующий виду налога
//       * КодНалоговогоОргана - Строка - код налогового органа
//       * Наименование - Строка - представление налога
//
Функция ДанныеДляУплатыНалогаПоДекларации(Правило, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода) Экспорт
	
	ЭтоНДС = (Правило.Владелец.Код = "НДС");
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	ДлительностьБазовогоПериода = Показатели.ДлительностьБазовогоПериода;
	НачалоБазовогоПериода       = Показатели.НачалоБазовогоПериода;
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ПолноеИмяПравила  = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ДанныеДекларации = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		КонецБазовогоПериода);
		
	Если ДанныеДекларации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Удалим строки, не относящиеся к заданному периоду
	КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
	
	ДанныеДекларации.Платежи.Колонки.Добавить("Налог", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ДанныеДекларации.Платежи.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеДекларации.Платежи.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	// Для НДС отдельно добавим итог по декларации
	Если ЭтоНДС Тогда
		ДанныеДекларации.Вставить("СуммаНДСПоДекларации", ДанныеДекларации.Платежи.Итог("Сумма"));
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки];
		Если ЭтоНДС Тогда
			// Особенность НДС в том, что он уплачивается несколькими платежами.
			// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
			ПериодПлатежа = ПериодСобытия;
		Иначе
			ПериодПлатежа = Платеж.Период;
		КонецЕсли;
		
		КБКЗаполнен = ЗначениеЗаполнено(Платеж.КБК);
		КодЗадачи = КодЗадачиПоПравилу(Правило);
		
		Если ЗначениеЗаполнено(Платеж.ВидНалога) Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Платеж.ВидНалога);
		ИначеЕсли КБКЗаполнен И КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель() Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(
				Платеж.КБК, ,
				ПлатежиВБюджетКлиентСервер.СтатусПлательщикаНалоговИСборовИП());
		ИначеЕсли КБКЗаполнен Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		Иначе
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(КодЗадачи, Организация, ПериодСобытия);
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		КонецЕсли;
		
		Если Не КБКЗаполнен Тогда
			
			Платеж.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Платеж.Налог, , КонецПериода);
			
		КонецЕсли;
		
		Платеж.Наименование = Строка(Платеж.Налог);
		
		Платеж.КодНалоговогоОргана = ?(ДанныеДекларации.Свойство("КодНалоговогоОргана"),
			ДанныеДекларации.КодНалоговогоОргана, "");
		
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(Платеж.ОКАТО, Платеж.Период);
		
		ЧужойПериод = ПериодПлатежа < НачалоПериода Или ПериодПлатежа > КонецПериода;
		Если ЧужойПериод Тогда
			ДанныеДекларации.Платежи.Удалить(Платеж);
		КонецЕсли;
	КонецЦикла;
	
	// Возможно, платежные документы уже созданы
	Если ДанныеДекларации.Платежи.Количество() > 0 Тогда
		СведенияПоДекларации = Новый Структура;
		СведенияПоДекларации.Вставить("Ссылка", ДанныеДекларации.Ссылка);
		СведенияПоДекларации.Вставить("ПоказательПериода", ПоказательПериода);
		ДополнитьНачисленияПлатежнымиДокументами(
			ДанныеДекларации.Платежи, Правило, ПериодСобытия, Организация, СведенияПоДекларации);
	КонецЕсли;
	
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими платежами.
		// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
		Для Каждого Платеж Из ДанныеДекларации.Платежи Цикл
			Если НачалоМесяца(Платеж.Период) = НачалоМесяца(Срок) Тогда
				Платеж.Период = ПериодСобытия;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим строки, по которым нет платежей
	Если НЕ ЭтоНДС // Для задач уплаты и отчетности по НДС всегда возвращаем список платежей
		И ДанныеДекларации.Платежи.Количество() > 1 Тогда
		КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки];
			Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				ДанныеДекларации.Платежи.Удалить(Платеж);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

// Возвращает данные для уплаты страховых взносов
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
//
// Возвращаемое значение:
//  Платежи - Структура - см. НовыйТаблицаПлатежи()
//
Функция ДанныеДляУплатыСтраховыхВзносов(Правило, Организация, ПериодСобытия) Экспорт
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, КонецМесяца(ПериодСобытия)+1);
	
	ПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов(ПериодСобытия);
	
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	// Для получения остатков.
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто", ЗначенияСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидНалоговогоОбязательства,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаСтраховыхВзносов),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПериодСобытия);
	КодыГосударственныхОрганов = Новый Соответствие; // Кешируем в функции
	
	Платежи   = НовыйТаблицаПлатежи();
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Организация = Организация;
		Платеж.ОКАТО       = КодТерритории;
		Платеж.Аванс       = Истина;
		
		СтруктураПоиска = Новый Структура("СчетУчета, ВидНалоговогоОбязательства");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
		Если РеквизитыПоСчету.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
		КонецЕсли;
		
		ШаблонНаименования    = НСтр("ru = '%1%2'");
		НаименованиеНалога    = Строка(Платеж.Налог);
		УточнениеНаименования = "";
		Если Выборка.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки Тогда
			УточнениеНаименования = НСтр("ru = ' (без спецоценки)'");
		КонецЕсли;
		Платеж.Наименование = СтрШаблон(ШаблонНаименования, НаименованиеНалога, УточнениеНаименования);
		
		ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(Платеж.КБК);
		КодГосударственногоОргана = КодыГосударственныхОрганов[ВидГосударственногоОргана];
		Если КодГосударственногоОргана = Неопределено Тогда
			КодГосударственногоОргана =
				ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана);
			КодыГосударственныхОрганов.Вставить(ВидГосударственногоОргана, КодГосударственногоОргана);
		КонецЕсли;
		Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
		
	Возврат Платежи;
	
КонецФункции

// Возвращает данные для уплаты имущественных налогов (транспортного и земельного налогов, налога на имущество)
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
//  Срок - Дата
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  Платежи - Структура - см. НовыйТаблицаПлатежи()
//
Функция ДанныеДляУплатыИмущественныхНалогов(Правило, Организация, ПериодСобытия, Срок, РегистрацияВНалоговомОргане) Экспорт
	
	ИмяЗадачи     = Правило.Владелец.Код;
	// Актуальный расчет налога всегда находится в интервале последнего квартала
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Квартал, ПериодСобытия);     
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Квартал, ПериодСобытия);    
	ВидНалога     = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, Организация, КонецПериода);
	Налог         = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК           = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		Организация,
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.УстановитьПараметр("НалоговыйОрган", РегистрацияВНалоговомОргане);
	
	Если ИмяЗадачи = "НалогНаИмущество" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетНалогаНаИмущество.ПериодРасчета КАК Период,
		|	РасчетНалогаНаИмущество.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) КАК Сумма,
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ИФНС.Код, """") КАК КодНалоговогоОргана,
		|	РасчетНалогаНаИмущество.КБК КАК КБК
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|ГДЕ
		|	РасчетНалогаНаИмущество.Организация = &Организация
		|	И РасчетНалогаНаИмущество.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетНалогаНаИмущество.СуммаНалогаКУплате > 0
		|	И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетНалогаНаИмущество.ПериодРасчета,
		|	РасчетНалогаНаИмущество.КодПоОКТМО,
		|	РасчетНалогаНаИмущество.КБК,
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ИФНС.Код, """")";
		
	ИначеЕсли ИмяЗадачи = "ТранспортныйНалог" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетТранспортногоНалога.ПериодРасчета КАК Период,
		|	РасчетТранспортногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, """") КАК КодНалоговогоОргана,
		|	"""" КАК КБК
		|ИЗ
		|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
		|ГДЕ
		|	РасчетТранспортногоНалога.Организация = &Организация
		|	И РасчетТранспортногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетТранспортногоНалога.СуммаНалогаКУплате > 0
		|	И РасчетТранспортногоНалога.ИФНС = &НалоговыйОрган
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетТранспортногоНалога.ПериодРасчета,
		|	РасчетТранспортногоНалога.КодПоОКТМО,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, """")";
		
	ИначеЕсли ИмяЗадачи = "ЗемельныйНалог" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетЗемельногоНалога.ПериодРасчета КАК Период,
		|	РасчетЗемельногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """") КАК КодНалоговогоОргана
		|ИЗ
		|	РегистрСведений.РасчетЗемельногоНалога КАК РасчетЗемельногоНалога
		|ГДЕ
		|	РасчетЗемельногоНалога.Организация = &Организация
		|	И РасчетЗемельногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетЗемельногоНалога.СуммаНалогаКУплате > 0
		|	И РасчетЗемельногоНалога.ИФНС = &НалоговыйОрган
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетЗемельногоНалога.ПериодРасчета,
		|	РасчетЗемельногоНалога.КодПоОКТМО,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """")";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Платежи   = НовыйТаблицаПлатежи();
	
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Налог = Налог;
		Платеж.Наименование = Строка(Платеж.Налог);
		Платеж.КБК   = ?(ЗначениеЗаполнено(Выборка.КБК), Выборка.КБК, КБК);
		Платеж.КодНалоговогоОргана = ?(ЗначениеЗаполнено(Выборка.КодНалоговогоОргана),
			Выборка.КодНалоговогоОргана, КодНалоговогоОргана);
		Платеж.Аванс = Истина;
		
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(Платеж.ОКАТО, Платеж.Период);
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
	
	Возврат Платежи;
	
КонецФункции

// Возвращает показатель периода для платежа по декларации
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  ПериодСобытия - Дата
//  Срок - Дата
//
// Возвращаемое значение:
//  ПоказательПериода - Строка
//
Функция ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок) Экспорт
	
	ЭтоНДС = (Правило.Владелец.Код = "НДС");
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими (ежемесячными) платежами,
		// каждый из которых относится к одному и тому же периоду (кварталу).
		// Из текста правил оформления  документов нельзя сделать однозначный вывод, что указывать в данном случае - месяц или квартал.
		// Сейчас местные УФНС рекомендуют указывать значение "КВ" (квартал).
		НалоговыйПериодДляПлатежейВБюджет = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли Правило.Владелец.Код = "НДФЛ_Предприниматель" Тогда
		
		// Если по годовому платежу предусматривается более одного срока уплаты налогового платежа
		// и установлены конкретные даты уплаты, то указываются эти даты.
		
		НалоговыйПериодДляПлатежейВБюджет = Неопределено;
		
	КонецЕсли;
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() 
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	Возврат ПоказательПериода;
	
КонецФункции

// Записывает в журнал регистрации факт попытки пользователем выполнения действия.
//
// Параметры:
//	ТекстКомментария - Строка - Текст комментария записи журнала регистрации.
//
Процедура ЗарегистрироватьСобытиеВЖурнале(ТекстКомментария) Экспорт

	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ТекстКомментария);

КонецПроцедуры

// Возвращает массив правил уплаты авансовых платежей по НДФЛ с доходов от предпринимательской деятельности ИП на ОСНО.
//
// Возвращаемое значение:
//   Массив - массив элементов с типом "СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов".
//
Функция ПравилаУплатыАвансовПоНДФЛ() Экспорт
	
	ИдентификаторыПравил = Новый Массив;
	ИдентификаторыПравил.Добавить("2013_ИП_Аванс_1Полугодие");
	ИдентификаторыПравил.Добавить("2013_ИП_Аванс_2Полугодие");
	ИдентификаторыПравил.Добавить("2020_ИП_УплатаАвансов");
	
	МассивПравил = Новый Массив;
	
	Для Каждого Идентификатор Из ИдентификаторыПравил Цикл
		
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Предприниматель", Идентификатор);
		Если Правило <> Неопределено Тогда
			МассивПравил.Добавить(Правило);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПравил;
	
КонецФункции

Функция ПравилаПредоставленияОтчетаУплатыНДФЛПредпринимателя(Период = Неопределено) Экспорт
	
	Правила = Новый Структура;
	Правила.Вставить("Задача", "НДФЛ_Предприниматель");
	Правила.Вставить("Отчет", "2013_ИП_Декларация");
	Правила.Вставить("Уплата", "2013_ИП_Налог");
	
	Возврат Правила;
	
КонецФункции

Функция ИдентификаторПравилаСтраховыеВзносыИПСДоходов() Экспорт
	
	Возврат "2013_Уплата_СДоходов";
	
КонецФункции

// Возвращает порядок уплаты налога или взноса
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация
//   Период - Дата - период уплаты
//   ВидНалога - ПеречислениеСсылка.ВидыНалогов - налог, для которого необходимо определить порядок уплаты
//
// Возвращаемое значение:
//   Структура
//     * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//     * Срок - Дата
//
Функция ПорядокУплатыНалога(Организация, Период, ВидНалога) Экспорт
	
	Перем СвойстваЗадачи;
	
	ПорядокУплаты = Новый Структура;
	ПорядокУплаты.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	ПорядокУплаты.Вставить("Срок", Дата(1, 1, 1));
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Период) Тогда
		
		СвойстваЗадачи = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
			Организация, ВидНалога, Период);
	КонецЕсли;
	
	Если СвойстваЗадачи <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПорядокУплаты, СвойстваЗадачи);
	КонецЕсли;
	
	Возврат ПорядокУплаты;
	
КонецФункции

// Определяет возможность отправки отчета средствами конфигурации.
//
// Параметры:
//  КодЗадачи             - Строка - идентификатор задачи (код)
//  Код                   - Строка - идентификатор правила (код)
//  ИсполнителиТребований - Соответствие - возвращаемое РеглОтчетыИсполнителиТребований().
//                           Следует передавать, если функция используется многократно (в цикле).
// 
// Возвращаемое значение:
//  Булево - Истина, если отправка отчета в конфигурации невозможна.
//
Функция ОтправкаОтчетаОграничена(КодЗадачи, Код, ИсполнителиТребований = Неопределено) Экспорт
	
	Требование = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(КодЗадачи, Код);
	ИмяОтчета  = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(Требование, ИсполнителиТребований);
	Если Не ЗначениеЗаполнено(ИмяОтчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не ИнтерфейсыВзаимодействияБРОКлиентСервер.ВозможнаОтправкаЭлектронногоДокумента(ИмяОтчета);
	
КонецФункции

// Возвращает список статусов, соответствующих выполненным задачам.
//
// Возвращаемое значение:
//   Массив - массив статусов.
//
Функция СтатусыВыполненныхЗадач() Экспорт
	
	СтатусыВыполненныхЗадач = Новый Массив;
	СтатусыВыполненныхЗадач.Добавить("Сдано");
	СтатусыВыполненныхЗадач.Добавить("Оплачено");
	СтатусыВыполненныхЗадач.Добавить("Выплачено");
	
	Возврат СтатусыВыполненныхЗадач;
	
КонецФункции

// Возвращает описание действия помощника уплаты НДФЛ прошлых периодов.
//
// Параметры:
//   Структура:
//     * Организация   - СправочникСсылка.Организации - Организация, для которой действует событие
//     * ПериодСобытия - Дата - Период действия события
//     * Правило       - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Действующее правило обработки события
//
// Возвращаемое значение:
//   Структура:
//     * ПараметрыФормы - Структура - Параметры формы
//     * ИмяФормы
//
Функция ОписаниеДействияПомощникОплатыНДФЛПрошлыхПериодов(Событие) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	ПараметрыФормы.Вставить("Период",      Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",     Событие.Правило);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникЗаполнения3НДФЛ.Форма.УплатаНалогаПрошлыхЛет");
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Определяет краткое представление налога в родительном падеже
//
// Параметры:
//  КодЗадачи - Строка - идентификатор задачи (код)
// 
// Возвращаемое значение:
//  Строка - представление. Если передан неизвестный код, то возвращается пустая строка
//
Функция ПредставлениеНалогаРодительныйПадеж(КодЗадачи) Экспорт
	
	Если КодЗадачи = "НДФЛ_Предприниматель" Тогда
		Возврат НСтр("ru = 'НДФЛ'");
	ИначеЕсли КодЗадачи = "НалогНаПрибыль" Тогда
		Возврат НСтр("ru = 'налога на прибыль'");
	ИначеЕсли КодЗадачи = "НДС" Тогда
		Возврат НСтр("ru = 'НДС'");
	ИначеЕсли КодЗадачи = "УСН" Тогда
		Возврат НСтр("ru = 'УСН'");
	ИначеЕсли КодЗадачи = "НалогНаПрофессиональныйДоход" Тогда
		Возврат НСтр("ru = 'налога на профессиональный доход'");
	ИначеЕсли КодЗадачи = "ЕНВД" Тогда
		Возврат НСтр("ru = 'ЕНВД'");
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиПатент() Тогда
		Возврат НСтр("ru = 'налога по патенту'");
	ИначеЕсли КодЗадачи = "НалогНаИмущество" Тогда
		Возврат НСтр("ru = 'налога на имущество'");
	ИначеЕсли КодЗадачи = "ТорговыйСбор" Тогда
		Возврат НСтр("ru = 'торгового сбора'");
	ИначеЕсли КодЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
		Возврат НСтр("ru = 'фиксированных страховых взносов'");
	ИначеЕсли КодЗадачи = "СтраховыеВзносы" Тогда
		Возврат НСтр("ru = 'страховых взносов'");
	ИначеЕсли КодЗадачи = "ТранспортныйНалог" Тогда
		Возврат НСтр("ru = 'транспортного налога'");
	ИначеЕсли КодЗадачи = "ЗемельныйНалог" Тогда
		Возврат НСтр("ru = 'земельного налога'");
	ИначеЕсли КодЗадачи = "Акцизы" Тогда
		Возврат НСтр("ru = 'акцизов'");
	ИначеЕсли КодЗадачи = "ВодныйНалог" Тогда
		Возврат НСтр("ru = 'водного налога'");
	ИначеЕсли КодЗадачи = "НалогНаИгорныйБизнес" Тогда
		Возврат НСтр("ru = 'налога на игорный бизнес'");
	ИначеЕсли КодЗадачи = "ЕСХН" Тогда
		Возврат НСтр("ru = 'ЕСХН'");
	ИначеЕсли КодЗадачи = "НДПИ" Тогда
		Возврат НСтр("ru = 'НДПИ'");
	ИначеЕсли КодЗадачи = "ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду" Тогда
		Возврат НСтр("ru = 'экологических платежей'");
	ИначеЕсли КодЗадачи = "ЭкологическийСбор" Тогда
		Возврат НСтр("ru = 'экологического сбора'");
	Иначе
		Возврат НСтр("ru = 'налога'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеДействий

// Описывает действие, которое необходимо выполнить для налогового платежа
//
// Параметры:
//  Событие - Структура - см. ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи()
// Возвращаемое значение:
//  Структура - состав см. в теле функции
//
Функция ОписаниеДействияНалоговыйПлатеж(Событие)
	
	Правило   = Событие.Правило;
	ИмяЗадачи = Правило.Владелец.Код;
	Действие  = Правило.Действие;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	Если Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		
		Если (ПолноеИмяПравила = "СтраховыеВзносы.2013_ОтчетностьПФР"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРБумажная"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРЭлектронная")
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияОтчетПФР(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2016_СведенияПФРЕжемесячные"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияПФРЕжемесячные" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияПФРЕжемесячные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияСтажСотрудниковОрганизации"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияСтажСотрудниковПредприниматели" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияПФРЕжегодные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2013_Отчет_Допвзносы_Накопительная_ПФР" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияРеестрДСВ3(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2013_2НДФЛ" 
			Или ПолноеИмяПравила = "НДФЛ_Агент.2013_2НДФЛ_Неудержанный"
			Или ПолноеИмяПравила = "НДФЛ_Агент.2016_2НДФЛ_Неудержанный" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействия2НДФЛ(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2020_СведенияЭТКЕжемесячные"
			ИЛИ  ПолноеИмяПравила = "СтраховыеВзносы.2020_СведенияЭТКЕжедневные" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияЭТКЕжемесячные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "КосвенныеНалогиТамСоюз.2010_Статформа" Тогда
			
			// Открываем форму списка заявлений о ввозе
			Возврат ОписаниеДействияЗаявленияОВвозе(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДС.СверкаНДС" Тогда
		
			// Открываем форму обработки "Сверка данных НДС"
			Возврат ОписаниеДействияСверкаНДС(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДС.2015_ЖурналСчетовФактур" Тогда
			
			// Открываем форму документа "Журнал счетов-фактур для передачи в электронном виде"
			Возврат ОписаниеДействияЖурналСчетовФактур(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтатистическаяОтчетность.ПроверитьПереченьФормФизлица"
			Или ПолноеИмяПравила = "СтатистическаяОтчетность.ПроверитьПереченьФормЮрлица" Тогда
			
			// Проверить можно, сформировав уведомление на специальном сайте Росстата
			Возврат Новый Структура("Переход", "https://websbor.gks.ru/online/#!/gs/statistic-codes");
			
		ИначеЕсли ПолноеИмяПравила = "Патент.2020_ЗаявлениеНаПатент"
			Или ПолноеИмяПравила = "Патент.2021_ЗаявлениеНаПатент" Тогда
			
			Возврат ОписаниеДействияПомощникЗаявленияНаПолучениеПатента(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "УСН.2020_УведомлениеУСН" Тогда
			
			Возврат ОписаниеДействияУведомлениеУСН(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) Тогда
			
			Если ЭтоОтчетПрошлогоПериода(Событие) Тогда
				// Открываем помощник прошлых периодов
				Возврат ОписаниеДействияПомощникПодготовкиОтчетностиПрошлыхПериодов(Событие);
			Иначе
				// Открываем форму обработки "Помощник расчета налога УСН"
				Возврат ОписаниеДействияПомощникРасчетаУСН(Событие);
			КонецЕсли;
			
		ИначеЕсли ИмяЗадачи = "ЕНВД" Тогда
			
			Возврат ОписаниеДействияРасчетЕНВД(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыАвансовыхПлатежейНДФЛ(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникЗаполнения3НДФЛ(Событие);
			
		ИначеЕсли ИмяЗадачи = "НДС" Тогда
			
			Возврат ОписаниеДействияПомощникРасчетаНДС(Событие);
			
		ИначеЕсли ИмяЗадачи = "ЛьготыПоТранспортномуЗемельномуНалогу" Тогда
			
			Возврат ОписаниеДействияЗаявлениеОЛьготеПоТранспортномуЗемельномуНалогу(
				Событие.Организация,
				Событие.ПериодСобытия);
			
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНалога(Событие);
			
		ИначеЕсли ИмяЗадачи = "СтатистическаяОтчетность" Тогда
			
			// Отчеты, для которых бро не предоставляет возможности использовать "универсальный помощник",
			// могут быть предоставлены Росстату с помощью "универсального отчета".
			// Покажем пользователю информацию про универсальный отчет.
			Возврат Новый Структура("Переход", "http://buh.ru/articles/faq/40735/");
			
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата Тогда
		
		Если ИмяЗадачи = "НДФЛ_Агент_Уплата" 
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
			Если ПолноеИмяПравила = "НДФЛ_Агент_Уплата.Аванс" Тогда
				Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Истина);
			Иначе
				Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Ложь);
			КонецЕсли;
			
		Иначе
			Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить()
				И ПолноеИмяПравила = "НДФЛ_Агент_Уплата.Аванс" Тогда
				Возврат Новый Структура("Переход", "https://its.1c.ru/bmk/staff/advance");
			Иначе
				Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		Если ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			Возврат ОписаниеДействияРасчетСтраховыхВзносовИП(Событие);
		
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) Тогда
			
			Если ЭтоОплатаНалогаЗаПрошлыйПериод(Событие) Тогда
				Возврат ОписаниеДействияПомощникОплатыНалогаПрошлыхПериодов(Событие);
			Иначе
				// Открываем форму обработки "Помощник расчета налога УСН"
				Возврат ОписаниеДействияПомощникРасчетаУСН(Событие);
			КонецЕсли;
			
		ИначеЕсли ИмяЗадачи = "ЕНВД" Тогда
			
			Возврат ОписаниеДействияРасчетЕНВД(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыАвансовыхПлатежейНДФЛ(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Событие) Тогда
			
			Возврат ОписаниеДействияПомощникЗаполнения3НДФЛ(Событие);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы"
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить()Тогда
			
			Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Ложь);
			
		ИначеЕсли ИмяЗадачи = "НДС" Тогда
			
			Возврат ОписаниеДействияПомощникРасчетаНДС(Событие);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыНПД(Правило, ИмяЗадачи) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНПД(Событие);
						
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНалога(Событие);
			
		Иначе
			
			Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Правило.Наименование) Тогда
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("Предупреждение", Правило.Наименование);
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Возврат Новый Структура; // Никакое действие не можем выполнить
	
КонецФункции

Функция ОписаниеДействияЗаявленияОВвозе(Событие)
	
	ОписаниеДействия = Новый Структура;

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ЗаявлениеОВвозеТоваров.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;

КонецФункции 

Функция ОписаниеДействияРегулярныйПлатеж(Событие)
	
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	// В качестве шаблона для ввода новой платежки ищем последний введенный по текущему правилу документ.
	ШаблонПравила = РегистрыСведений.РегулярныеПлатежи.ШаблонПравила(
		Событие.Организация, Событие.Правило, Событие.ПериодСобытия);
	Если ШаблонПравила = Неопределено Тогда
		
		Возврат ОписаниеДействия;
		
	ИначеЕсли ШаблонПравила.ПериодСобытия = Событие.ПериодСобытия Тогда
		
		// Если по правилу вводился документ в ПериодСобытия, то открываем его
		ПараметрыФормы.Вставить("Ключ", ШаблонПравила.ПлатежноеПоручение);
		
	Иначе
		
		// Если в периоде документ не вводился, вводим новый копированием последнего введенного по правилу платежного поручения
		ПараметрыФормы.Вставить("ЗначениеКопирования", ШаблонПравила.ПлатежноеПоручение);
		
		ПараметрыФормы.Вставить("Правило",       Событие.Правило);
		ПараметрыФормы.Вставить("ПериодСобытия", Событие.ПериодСобытия);
		
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ПлатежноеПоручение.ФормаОбъекта");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияФинОтчетность(Событие)
	
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	Правило = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие.Правило,
		"Организация, Получатель, Периодичность, ИдентификаторКомплекта, КраткоеПредставлениеКомплекта");
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, Событие.ПериодСобытия-1);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, Событие.ПериодСобытия-1);
	
	СуществующийДокумент = Документы.ФинОтчетВБанк.НайтиПоРеквизитам(Правило.Организация,
		Правило.Получатель, Правило.ИдентификаторКомплекта, КонецПериода);
	
	Если СуществующийДокумент <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", СуществующийДокумент);
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация",                   Правило.Организация);
		ЗначенияЗаполнения.Вставить("Банк",                          Правило.Получатель);
		ЗначенияЗаполнения.Вставить("НачалоПериода",                 НачалоПериода);
		ЗначенияЗаполнения.Вставить("КонецПериода",                  КонецПериода);
		ЗначенияЗаполнения.Вставить("ИдентификаторКомплекта",        Правило.ИдентификаторКомплекта);
		ЗначенияЗаполнения.Вставить("КраткоеПредставлениеКомплекта", Правило.КраткоеПредставлениеКомплекта);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("Правило", Событие.Правило);
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ФинОтчетность", Истина);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоДаннымДекларации(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Срок, Правило, ПериодСобытия, Описание) Экспорт
	
	ИмяФормыПлатежногоДокумента = Перечисления.СпособыУплатыНалогов.ИмяФормыПлатежногоДокумента(СпособОплаты);
	
	ОписаниеДействия = Новый Структура;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	ДлительностьБазовогоПериода = Показатели.ДлительностьБазовогоПериода;
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ИдентификаторЗадачи  = "";
	ИдентификаторПравила = "";
	ПолноеИмяПравила     = "";
	
	Идентификаторы = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Правило);
	
	Если Идентификаторы <> Неопределено Тогда
		ИдентификаторЗадачи  = Идентификаторы.ИдентификаторЗадачи;
		ИдентификаторПравила = Идентификаторы.ИдентификаторПравила;
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			ИдентификаторЗадачи, ИдентификаторПравила);
	КонецЕсли;
	
	ОКАТО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(ОКАТО, ПериодСобытия);
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Организация  = Организация;
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи    = Правило.Владелец.Код;
	ОписаниеПлатежа.ОКАТО        = ОКАТО;
	
	ПоказательПериода = ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации  = ДанныеДляУплатыНалогаПоДекларации(
		Правило,
		Организация,
		РегистрацияВНалоговомОргане,
		ПериодСобытия,
		Срок,
		ПоказательПериода);
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// Декларации нет.
		// Надо предложить пользователю заполнить декларацию
		// Но быть готовым, что он не согласится и придется заполнять платежку без декларации.
		
		ШаблонТекста = НСтр("ru = 'Перед оформлением платежного документа рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|В этом случае сумма и реквизиты платежа будут взяты из отчета.'");
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, КонецБазовогоПериода));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ОписаниеДействия.Вставить("Вопрос",      СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста));
		ОписаниеДействия.Вставить("ВариантДа",   НСтр("ru = 'Подготовить отчет'"));
		ОписаниеДействия.Вставить("ВариантНет",  НСтр("ru = 'Оформить платежный документ'"));
		ОписаниеДействия.Вставить("ДействиеДа",  Новый Структура);
		ОписаниеДействия.Вставить("ДействиеНет", Новый Структура);
		
		// Откроем форму отчета
		ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
			ПолноеИмяПравила,
			Организация,
			РегистрацияВНалоговомОргане,
			НачалоНалоговогоПериода,
			КонецБазовогоПериода,
			ДлительностьБазовогоПериода);
		ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
		ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
		
		// Откроем пустой документ
		
		ОписаниеПлатежа.Период            = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода = ПоказательПериода;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.ДействиеНет.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		ОписаниеДействия.ДействиеНет.Вставить("ПараметрыФормы",
			Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило",
				ЗначенияЗаполнения,
				ПериодСобытия,
				Правило));
		
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	Если ДанныеДекларации.Платежи.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// По декларации ничего не надо платить.
		// Откроем пустую платежку
		
		ОписаниеПлатежа.Период              = ПериодСобытия;
		ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
		ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
		ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.Описание            = Описание;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли ДанныеДекларации.Платежи.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = ДанныеДекларации.Платежи[0];
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			
			// Откроем существующую платежку
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", Платеж.ПлатежноеПоручение));
			
		Иначе
			
			// Создадим платежку по данным декларации
			
			ОписаниеПлатежа.Период              = ПериодСобытия;
			ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
			ОписаниеПлатежа.Аванс               = Платеж.Аванс;
			ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
			ОписаниеПлатежа.Сумма               = Платеж.Сумма;
			ОписаниеПлатежа.Описание            = Описание;
			ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
			ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
			ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
			ОписаниеПлатежа.Налог               = Платеж.Налог;
			ОписаниеПлатежа.КБК                 = Платеж.КБК;
			
			ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
			
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
			
		КонецЕсли;
		
	Иначе
		
		// Откроем форму списка платежей
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",       Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",     ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",           Правило);
		ПараметрыФормы.Вставить("СпособОплаты",      СпособОплаты);
		ПараметрыФормы.Вставить("Декларация",        ДанныеДекларации.Ссылка);
		ПараметрыФормы.Вставить("ДатаДекларации",    ДанныеДекларации.ДатаПодписи);
		ПараметрыФормы.Вставить("ОписаниеДействия",  Описание);
		ПараметрыФормы.Вставить("ПоказательПериода", ПоказательПериода);
		ПараметрыФормы.Вставить("ВидНалога",         РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период));
		ПараметрыФормы.Вставить("Платежи",           ПоместитьВоВременноеХранилище(ДанныеДекларации.Платежи));
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма.УплатаПоДекларации");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияОтчетПФР(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",    Событие.Организация);
	ПараметрыФормы.Вставить("ОтчетныйПериод", НачалоКвартала(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, ПредставлениеОтчета)
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат;
	КонецЕсли;
		
	ТекстПредупреждения = НСтр("ru = 'В настройках параметров учета указано, что учет заработной платы ведется во внешней программе.
		|Подготовьте %1 в той программе, в которой начисляете зарплату'");
	
	ОписаниеДействия.Вставить(
		"Предупреждение",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ПредставлениеОтчета));
	
КонецПроцедуры

Функция ОписаниеДействияСведенияПФРЕжемесячные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",    Событие.Организация);
	Отбор.Вставить("ОтчетныйПериод", НачалоМесяца(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОЗастрахованныхЛицахСЗВ_М.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСведенияПФРЕжегодные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Новый Структура));
	
	ОписаниеДействия.ПараметрыФормы.Отбор.Вставить("Организация",    Событие.Организация);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРеестрДСВ3(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'реестр ДСВ-3'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.РеестрДСВ_3.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСведенияЭТКЕжемесячные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",    Событие.Организация);
	Отбор.Вставить("ОтчетныйПериод", НачалоМесяца(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействия2НДФЛ(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'справки 2-НДФЛ'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",     Событие.Организация);
	Отбор.Вставить("НалоговыйПериод", Год(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРасчетСтраховыхВзносовИП(Событие)
	
	ПомощникПубликуется = Ложь;
	
	Если УчетСтраховыхВзносовИП.ЭтоИПНулевка(Событие.Организация) Тогда
		
		ПериодСобытия = ТекущаяДатаСеанса();

		СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(
			Событие.Организация, ПериодСобытия);
		Если СведенияОбОрганизации.РегистрацияВЭтомГоду 
			Или ЗначениеЗаполнено(СведенияОбОрганизации.СостояниеПомощника) Тогда
			
			ИмяФормыПомощника = "Обработка.РасчетСтраховыхВзносовИП.Форма.ФормаВзносыИПНулевка";
		Иначе
			ИмяФормыПомощника = "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоВзносамЗаПрошлыеПериоды";
		КонецЕсли;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правило", Событие.Правило);
		ПараметрыФормы.Вставить("АдресСведенийОбОрганизации",
			ПоместитьВоВременноеХранилище(СведенияОбОрганизации, Новый УникальныйИдентификатор));
	
	Иначе
		
		ПериодСобытия = КонецКвартала(Событие.ПериодСобытия);
		Если ЭтоОплатаНалогаЗаПрошлыйПериод(Событие)
			И УчетнаяПолитика.ПрименяетсяУСН(Событие.Организация, ТекущаяДатаСеанса()) Тогда
			
			ИмяФормыПомощника = "Обработка.ПомощникУплатыНалоговВзносовПрошлыхЛет.Форма.ФормаОплатыЗаПрошлыеПериоды";
		Иначе
			// Конечное имя формы определяетя видом страховых взносов
			ИмяФормыПомощника = "Обработка.РасчетСтраховыхВзносовИП.Форма";
			ПомощникПубликуется = Истина;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",      Событие.Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",    ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",          Событие.Правило);
		ПараметрыФормы.Вставить("Срок",             Событие.Срок);
		ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
		ПараметрыФормы.Вставить("Заголовок",        Событие.Наименование);
	
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",                 ИмяФормыПомощника);
	ОписаниеДействия.Вставить("ПараметрыФормы",           ПараметрыФормы);
	
	Если ПомощникПубликуется Тогда
		ОписаниеДействия.Вставить("ПубликуемыйИдентификатор", Обработки.РасчетСтраховыхВзносовИП.ПубликуемыйИдентификатор());
		
		ВходящиеНастройкиПубликуемыхДанных = Обработки.РасчетСтраховыхВзносовИП.ВходящиеНастройкиПубликуемыхДанных(
			Событие.Организация, ПериодСобытия);
		ОписаниеДействия.Вставить("ВходящиеНастройкиПубликуемыхДанных", ВходящиеНастройкиПубликуемыхДанных);
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов, Налог, ВидНалоговогоОбязательства = Неопределено, ПериодСобытия)
	
	Если ВидНалоговогоОбязательства = Неопределено Тогда
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	КонецЕсли;
	
	СчетУчетаВзносов = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПериодСобытия);
	Если ЗначениеЗаполнено(СчетУчетаВзносов) Тогда
		НоваяСтрока = ТаблицаСчетовСтраховыхВзносов.Добавить();
		НоваяСтрока.Налог                      = Налог;
		НоваяСтрока.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
		НоваяСтрока.СчетУчета                  = СчетУчетаВзносов;
		НоваяСтрока.КБК                        = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, ВидНалоговогоОбязательства, ПериодСобытия);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСтраховыхВзносов(Знач ПериодСобытия) Экспорт
	
	ТаблицаСчетовСтраховыхВзносов = Новый ТаблицаЗначений;
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("СчетУчета",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("КБК",                        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("НазначениеПлатежа",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(210)));
	
	// 69.01
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);
		
	// 69.02.7
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);
		
		// 69.11
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ),
		,
		ПериодСобытия);
		
	// 69.03.1
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);

	Если УчетЗарплаты.ИспользуетсяТрудЧленовЛетныхЭкипажей() Тогда
		// 69.02.3
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуетсяТрудШахтеров() Тогда	
		// 69.02.4
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуютсяРаботыСДосрочнойПенсией() Тогда
		// 69.02.5
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки,
			ПериодСобытия);
		
		// 69.02.6
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.УдерживаютсяДобровольныеВзносыВПФР() Тогда
		// 69.05.2
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Возврат ТаблицаСчетовСтраховыхВзносов;
	
КонецФункции

Функция ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Аванс)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("ОписаниеДействия", НСтр("ru = 'Выплата зарплаты и уплата НДФЛ'"));
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	ПараметрыФормы.Вставить("Описание",         Событие.Наименование);
	ПараметрыФормы.Вставить("Аванс",            Аванс);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУчетаЗарплаты.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСверкаНДС(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Событие.Организация);
	ПараметрыФормы.Вставить("НалоговыйПериод", Событие.ПериодСобытия);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.СверкаДанныхУчетаНДС.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоПатенту(Организация, Патент, Сумма, СпособОплаты, ПериодСобытия) Экспорт
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПериодичностьГод();
	ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	
	РеквизитыПлатежа = Справочники.Патенты.РеквизитыНалоговогоПлатежа(Патент);
	
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		РеквизитыПлатежа.Налог, РеквизитыПлатежа.ВидНалога, Организация)
			+ РеквизитыПлатежа.Описание;
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	
	ОписаниеПлатежа.Организация         = Организация;
	ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи           = "Патент_Уплата";
	ОписаниеПлатежа.Описание            = НазначениеПлатежа;
	ОписаниеПлатежа.Период              = ПериодСобытия;
	ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
	ОписаниеПлатежа.КБК                 = РеквизитыПлатежа.КБК;
	ОписаниеПлатежа.Налог               = РеквизитыПлатежа.Налог;
	ОписаниеПлатежа.ОКАТО               = РеквизитыПлатежа.ОКАТО;
	ОписаниеПлатежа.Сумма               = Сумма;
	ОписаниеПлатежа.КодНалоговогоОргана = РеквизитыПлатежа.КодНалоговогоОргана;
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
	ПараметрыФормы.Вставить("ПериодСобытия",      ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",            Патент);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникРасчетаУСН(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникРасчетаНалогаУСН.Форма.Форма");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("КонецПериода",                КонецКвартала(Событие.ПериодСобытия));
	ПараметрыФормы.Вставить("КонтекстныйВызов",            Истина);
	ПараметрыФормы.Вставить("Заголовок",                   Событие.Наименование);
	ПараметрыФормы.Вставить("ДействиеКалендаряБухгалтера", Событие.Действие);
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ОписаниеДействия.Вставить("ИдентификаторФормы", Событие.Организация.УникальныйИдентификатор());
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Событие.Организация);
	
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов)
		Или Событие.ПериодСобытия > ГраницаОтчетностиПрошлыхПериодов Тогда
		
		// В том случае, если период события находится в периоде, когда пользователь уже работал в программе,
		// добавляем данные публикации ссылки на программный интерфейс помощника расчета налога УСН.
		
		ОписаниеДействия.Вставить("ПубликуемыйИдентификатор", Обработки.ПомощникРасчетаНалогаУСН.ПубликуемыйИдентификатор());
		
		ВходящиеНастройкиПубликуемыхДанных = Обработки.ПомощникРасчетаНалогаУСН.ВходящиеНастройкиПубликуемыхДанных(
			Событие.Организация, КонецКвартала(Событие.ПериодСобытия));
		ОписаниеДействия.Вставить("ВходящиеНастройкиПубликуемыхДанных", ВходящиеНастройкиПубликуемыхДанных);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникОплатыНалогаПрошлыхПериодов(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНалоговВзносовПрошлыхЛет.Форма.ФормаОплатыЗаПрошлыеПериоды");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежУСН(Организация, Сумма, СпособОплаты, ВидНалога, ПериодСобытия, ОплатаЗадолженности) Экспорт
	
	ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(ПериодСобытия));
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК   = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецКвартала(ПериодСобытия));
	Аванс = КонецГода(ПериодСобытия) <> КонецКвартала(ПериодСобытия);
	ОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(ОКТМО, ПериодСобытия);
	
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(Организация, Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	
	ОписаниеПлатежа.Организация = Организация;
	
	ПоказательПериода = ПоказательПериодаПлатежаПоПравилу(ПорядокУплаты.Периодичность, ПорядокУплаты.Срок, ПериодСобытия);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", Перечисления.СпособыУплатыНалогов.ИмяФормыПлатежногоДокумента(СпособОплаты));
	
	// Создадим платежку по данным операции
	ОписаниеПлатежа.Налог               = Налог;
	ОписаниеПлатежа.Период              = ПериодСобытия;
	ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
	ОписаниеПлатежа.Аванс               = Аванс;
	ОписаниеПлатежа.КБК                 = КБК;
	ОписаниеПлатежа.ОКАТО               = ОКТМО;
	ОписаниеПлатежа.Сумма               = Сумма;
	ОписаниеПлатежа.Описание            = ПорядокУплаты.Наименование;
	ОписаниеПлатежа.КодНалоговогоОргана = КодНалоговогоОргана;
	ОписаниеПлатежа.ОплатаЗадолженности = ОплатаЗадолженности;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ЭтоОтчетПрошлогоПериода(Событие)
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(
		Событие.Организация);
	Если ГраницаОтчетностиПрошлыхПериодов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		Событие.Периодичность, Событие.ПериодСобытия);
	
	// Задача по событию, которое началось уже точно после начала ведения учета.
	Если НачалоПериодаСобытия > ГраницаОтчетностиПрошлыхПериодов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Срок события наступил до того, как пользователь начал вести учет.
	Если КонецДня(Событие.Срок) <= ГраницаОтчетностиПрошлыхПериодов Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Событие относится к прошлому периоду (НачалоПериодаСобытия > КонецПрошлогоПериода),
	// но его срок наступил после начала ведения учета.
	// Возможно, эта задача была создана помощником подготовки отчетности прошлых периодов.
	
	Возврат РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ЗадачаВведенаПомощникомПрошлыхПериодов(
		Событие.Организация, Событие.Правило, Событие.ПериодСобытия);
	
КонецФункции

Функция ЭтоОплатаНалогаЗаПрошлыйПериод(Событие)

	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(
		Событие.Организация);
		
	Если ГраницаОтчетностиПрошлыхПериодов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонецПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		Событие.Периодичность, Событие.ПериодСобытия);
		
	// Событие завершилось до начала ведения учета
	Если КонецПериодаСобытия <= КонецДня(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ОписаниеДействияПомощникПодготовкиОтчетностиПрошлыхПериодов(Событие) Экспорт
	
	ОписаниеДействия = Новый Структура;
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПодготовкаОтчетностиПрошлыхПериодов.Форма.Форма");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	ОписаниеДействия.Вставить("ИдентификаторФормы", Событие.Организация.УникальныйИдентификатор());
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПоказательПериодаПлатежаПоПравилу(ПериодичностьПравила, Срок, ПериодСобытия)
	
	ПоказательПериода = "";
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(ПериодичностьПравила);
	
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(КонецКвартала(ПериодСобытия), ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	Возврат ПоказательПериода;
	
КонецФункции

Функция ОписаниеДействияРасчетЕНВД(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	ПараметрыФормы.Вставить("Правило",     Событие.Правило);
	ПараметрыФормы.Вставить("Период",      Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("ВызовИзСпискаЗадач", Истина);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникРасчетаЕНВД.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникЗаполнения3НДФЛ(Событие)
	
	Если Событие.ПериодСобытия < Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения()
		Или СтрНайти(НРег(Событие.ИдентификаторПравила), "_аванс_") <> 0 Тогда
		
		ОписаниеДействия = ОписаниеДействияПомощникУплатыНалога(Событие)
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Событие.Организация);
		ПараметрыФормы.Вставить("Период", НачалоГода(Событие.ПериодСобытия));
		ПараметрыФормы.Вставить("ДействиеКалендаряБухгалтера", Событие.Правило.Действие);
		ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
		
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникЗаполнения3НДФЛ.Форма");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		ОписаниеДействия.Вставить("ИдентификаторФормы", Неопределено); // Не создавать уникальный идентификатор для корректной работы навигации помошника.
	
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыАвансовыхПлатежейНДФЛ(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникЗаполнения3НДФЛ.Форма.УплатаАвансовыхПлатежейНДФЛ");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникЗаявленияНаПолучениеПатента(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	Отбор.Вставить("ВидУведомления",
		Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
	
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	Уведомления.Сортировать("Дата Убыв, Ссылка Убыв", Новый СравнениеЗначений);
	
	Для Индекс = 0 По Уведомления.Количество() - 1 Цикл
		
		СтрокаУведомление = Уведомления[Индекс];
		Если СтрокаУведомление.Дата >= НачалоГода(Событие.ПериодСобытия) 
			И СтрокаУведомление.Дата <= КонецМесяца(Событие.Срок) Тогда
			
			СсылкаНаУведомление = СтрокаУведомление.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Ключ", СсылкаНаУведомление);
	ПараметрыФормы.Вставить("СоздатьНовоеЗаявление", Не ЗначениеЗаполнено(СсылкаНаУведомление));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУведомлениеУСН(Событие)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	Отбор.Вставить("ВидУведомления",
		Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН);
	
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	Уведомления.Сортировать("Дата Убыв, Ссылка Убыв", Новый СравнениеЗначений);
	
	СсылкаНаУведомление = Неопределено;
	Для Индекс = 0 По Уведомления.Количество() - 1 Цикл
		
		СтрокаУведомление = Уведомления[Индекс];
		Если СтрокаУведомление.Дата >= НачалоГода(Событие.ПериодСобытия) 
			И СтрокаУведомление.Дата <= КонецМесяца(Событие.Срок) Тогда
			
			СсылкаНаУведомление = СтрокаУведомление.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СсылкаНаУведомление) Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
		ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
		ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
		ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
		ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
		ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
		ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
		ПараметрыФормы.Вставить("Ключ", СсылкаНаУведомление);
		
		ОписаниеДействия = Новый Структура;
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	Иначе
		
		Возврат ОписаниеДействияДекларация(
			Событие.Правило,
			Событие.ПериодСобытия,
			Событие.Организация,
			Событие.РегистрацияВНалоговомОргане);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыНалога(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНалога.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило) Экспорт
	
	Показатели = Новый Структура;
	
	СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Правило);
	ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Правило);
	
	ДлительностьБазовогоПериода = Правило.Периодичность;
	
	Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
		// Базовый период и релевантный период совпадают
		НачалоБазовогоПериода = НачалоПериода;
		КонецБазовогоПериода  = КонецПериода;
	Иначе
		
		// Базовый и релевантный периоды не совпадают.
		// Базовый период включает в себя один или несколько релевантных.
		Если Не ПростойБазовыйПериод Тогда
			ДлительностьБазовогоПериода = Правило.БазовыйПериод;
		КонецЕсли;
		
		// Базовый период всегда предшествует сроку
		ОтставаниеБазовогоПериода = Правило.ОтставаниеБазовогоПериода;
		КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
			ОтставаниеБазовогоПериода,
			ДлительностьБазовогоПериода,
			Правило.СрокМесяцев);
		
		// авансы за первое полугодие 2013 платим по данным 2012 года. СрокМесяцев = 0, ОтставаниеБазовогоПериода = 0
		// прогноз на май даем в апреле по данным за март. СрокМесяцев = -2, ОтставаниеБазовогоПериода = 1 (или 0)
		// авансы в апреле платим по данным 1 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 0
		// авансы в феврале платим по данным 3 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 1
		ОпережениеРелевантногоПериода = 1 +  ОтставаниеБазовогоПериода;
		
		БазовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			НачалоПериода,
			ДлительностьБазовогоПериода,
			-ОпережениеРелевантногоПериода);
		
		НачалоБазовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДлительностьБазовогоПериода, БазовыйПериод);
		КонецБазовогоПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ДлительностьБазовогоПериода,  БазовыйПериод);
		
	КонецЕсли;
	
	Показатели.Вставить("ДлительностьБазовогоПериода", ДлительностьБазовогоПериода);
	Показатели.Вставить("НачалоБазовогоПериода", НачалоБазовогоПериода);
	Показатели.Вставить("КонецБазовогоПериода", КонецБазовогоПериода);
	
	Возврат Показатели;
	
КонецФункции

Функция ЗаполнитьПоДаннымНастройки(Настройка, ДанныеПлатежногоДокумента, ИмяИсходного, ИмяРеквизита = "")
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ИмяРеквизита = ИмяИсходного;
	КонецЕсли;
	
	РеквизитОбъектЗаполненИсходнымиДанными = Ложь;
	Если Настройка.Свойство(ИмяИсходного) И ЗначениеЗаполнено(Настройка[ИмяИсходного]) Тогда
		ДанныеПлатежногоДокумента.Вставить(ИмяРеквизита, Настройка[ИмяИсходного]);
		РеквизитОбъектЗаполненИсходнымиДанными = Истина;
	КонецЕсли;
	
	Возврат РеквизитОбъектЗаполненИсходнымиДанными;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Событие)
	
	Если Событие.ИдентификаторЗадачи <> "НДФЛ_Предприниматель" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Событие.ПериодСобытия < Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения()
		Или СтрНайти(НРег(Событие.ИдентификаторПравила), "_аванс_") <> 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Событие)
	
	Если Событие.ИдентификаторЗадачи <> ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПредприниматель()
		Или Событие.ПериодСобытия < УчетНДФЛПредпринимателя.ДатаНачалаРасчетаАвансовыхПлатежейНДФЛ()
		Или Найти(Событие.ИдентификаторПравила, "УплатаАвансов") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомЕНВД(Правило, ИмяЗадачи = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ИмяЗадачи = "ЕНВД" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Если ПолноеИмяПравила = "УСН.2013_ДекларацияОрганизация" 
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаОрганизация"
		ИЛИ ПолноеИмяПравила = "УСН.2013_ДекларацияПредприниматель"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаПредприниматель"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаАвансов" Тогда
		
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(Правило, ИмяЗадачи = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУчетаЗарплаты(Правило, ИмяЗадачи = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Возврат (ИмяЗадачи = "СтраховыеВзносы");
	
КонецФункции

Функция ПравилоВыполняетсяУниверсальнымПомощником(
		Правило, ИмяЗадачи = Неопределено, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Если ИмяЗадачи = "СтраховыеВзносы"
		ИЛИ ИмяЗадачи = "НДФЛ_Агент_Уплата"
		ИЛИ ПолноеИмяПравила = "ТранспортныйНалог.2013_УплатаАванс"
		ИЛИ ПолноеИмяПравила = "ЗемельныйНалог.2013_Аванс" 
		ИЛИ ПолноеИмяПравила = "ЗемельныйНалог.2015_Аванс" 
		ИЛИ ПолноеИмяПравила = "ТорговыйСбор.2015_Уплата"
		ИЛИ ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ПолноеИмяПравила)
		И НЕ ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход()
		И Не ПравилоВыполняетсяПомощникомУплатыНПД(Правило, ИмяЗадачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПравилоУСНАвансовыйПлатеж(ПолноеИмяПравила) Экспорт
	
	Если ПолноеИмяПравила = "УСН.2013_УплатаОрганизация"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаПредприниматель"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаАвансов" Тогда
		
		Возврат Истина
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ОписаниеДействияПомощникОплатыПатента(Событие) Экспорт
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",        Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",      Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Патент",             Событие.Правило);
	ПараметрыФормы.Вставить("Срок",               Событие.Срок);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникОплатыПатента.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникРасчетаНДС(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	ПараметрыФормы.Вставить("Срок",             Событие.Срок);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	ПараметрыФормы.Вставить("ИсточникВызова",   "ОткрытиеПомощникаНДССписокЗадач");
	
	Если Событие.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникРасчетаНДС.Форма.ФормаОплата");
	Иначе
		ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникРасчетаНДС.Форма.Форма");
	КонецЕсли;
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыНПД(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("КонтекстныйВызов",            Истина);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНПД.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомУплатыНПД(Правило, Знач ИмяЗадачи = Неопределено)
	
	Если ИмяЗадачи = Неопределено Тогда
		ИмяЗадачи = Правило.Владелец.Код;
	КонецЕсли;
	
	Возврат ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход()
		И ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые");
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомРасчетаНДС(Правило, ПолноеИмяПравила = Неопределено) Экспорт
	
	Если ПолноеИмяПравила = Неопределено Тогда
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	КонецЕсли;
	
	Если ПолноеИмяПравила = "НДС.2013_Декларация" 
		ИЛИ ПолноеИмяПравила = "НДС.2013_Уплата1"
		ИЛИ ПолноеИмяПравила = "НДС.2013_Уплата2"
		ИЛИ ПолноеИмяПравила = "НДС.2013_Уплата2"
		ИЛИ ПолноеИмяПравила = "НДС.2015_Декларация" 
		ИЛИ ПолноеИмяПравила = "НДС.2015_Уплата1" 
		ИЛИ ПолноеИмяПравила = "НДС.2015_Уплата2" 
		ИЛИ ПолноеИмяПравила = "НДС.2015_Уплата3" Тогда
		
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОписаниеДействияЗаявлениеОЛьготеПоТранспортномуЗемельномуНалогу(Организация, Период) Экспорт 
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеЛьготаТранспортЗемля;
	
	ЗаявленияОЛьготах = Документы.УведомлениеОСпецрежимахНалогообложения.АктуальныеУведомления(
		Организация,
		ВидУведомления);
		
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	Если ЗаявленияОЛьготах = Неопределено Тогда
		// Создаем новое заявление
		ОписаниеДействия.Вставить("ИмяФормы", ИнтерфейсыВзаимодействияБРОВызовСервера.ПолучитьИмяФормыУведомленияПоУмолчанию(
			ВидУведомления,
			Период)); 
				
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
		ПараметрыФормы.Вставить("ЗаполнитьПриОткрытии", Истина);
	ИначеЕсли ЗаявленияОЛьготах.Количество() > 1 Тогда
		// Ранее уже было подговлено несколько заявлений - открываем список заявлений
		ОписаниеДействия.Вставить("ИмяФормы", "ОбщаяФорма.РегламентированнаяОтчетность");
		
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("Раздел", Перечисления.СтраницыЖурналаОтчетность.Уведомления);
		ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
	Иначе	
		// Открываем единственное найденное заявление
		ОписаниеДействия.Вставить("ИмяФормы", "Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта");
		ПараметрыФормы.Вставить("Ключ", ЗаявленияОЛьготах[0]);
	КонецЕсли; 	
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

#Область Статусы

Процедура ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиОтчета(Документ, СтатусОтправки) Экспорт
	
	ПеренестиВАрхив = Ложь;
	
	Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан
		Или СтатусОтправки = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой() Тогда
		
		Если ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
			И ЗначениеЗаполнено(Документ)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Документ.Метаданные()) Тогда
			
			// При интеграции с банками переносим задачи в архив автоматически
			ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
			ПеренестиВАрхив = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияОрганизацииВключена(ОрганизацияДокумента);
			
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаЗадач = ЗадачиСвязанныеСОтчетом(Документ);
	Если ТаблицаЗадач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если отчет отправлен через 1С-Отчетность и ему присвоен статус "Сдан",
	// то автоматически меняем статус у задач, связанных с отчетом, на "Сдано".
	Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
		Для Каждого Задача Из ТаблицаЗадач Цикл
			Задача.Статус = "Сдано";
		КонецЦикла;
	Иначе
		ДобавитьСтатусыЗадач(ТаблицаЗадач);
	КонецЕсли;
	
	ЕстьПросроченныеЗадачи = Ложь;
	Если ЗначениеЗаполнено(Документ) И ОбщегоНазначения.ЕстьРеквизитОбъекта("Вид", Документ.Метаданные()) Тогда
		ВидОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Вид");
	Иначе
		ВидОтчета = 0;
	КонецЕсли;
	ТекущийДень = НачалоДня(ТекущаяДатаСеанса());
	Для Каждого Задача Из ТаблицаЗадач Цикл
		ЗаписатьНовыйСтатусЗадачи(Задача, ПеренестиВАрхив);
		Если ВидОтчета = 0 И НачалоДня(Задача.Срок) < ТекущийДень Тогда
			ЕстьПросроченныеЗадачи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПросроченныеЗадачи Тогда
		ЗанестиСведенияОНарушенииСрокаПодачиРегламентированногоОтчета(Документ, ТекущийДень);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиПлатежа(ДокументСсылка, ПараметрыРасчетаСтатусов = Неопределено) Экспорт
	
	РеквизитыПлатежа = РеквизитыПлатежаПоДаннымДокумента(ДокументСсылка);
	
	Если РеквизитыПлатежа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтатусЗадачиПодготовкиПлатежа(РеквизитыПлатежа, ПараметрыРасчетаСтатусов);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСтатусаЗадачиФинОтчетности(Документ, Статус) Экспорт
	
	Если Статус <> Перечисления.СтатусыОтправкиФинОтчетностиВБанки.Сдано Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"Организация, Банк, ИдентификаторКомплекта, Дата");
	
	Правило = Справочники.ПравилаФинОтчетности.НайтиПоРеквизитам(РеквизитыДокумента.Организация,
		РеквизитыДокумента.Банк, РеквизитыДокумента.ИдентификаторКомплекта, РеквизитыДокумента.Дата);
	
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.УстановитьПараметр("ДатаДокумента", РеквизитыДокумента.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.ФинОтчетность) КАК Действие,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Правило = &Правило
	|	И ЗадачиБухгалтера.ПериодСобытия = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, МЕСЯЦ, 1), МЕСЯЦ)";
	ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
	
	Для каждого Задача Из ТаблицаЗадач Цикл
		Задача.Статус = "Сдано";
		ЗаписатьНовыйСтатусЗадачи(Задача, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусЗадачиПодготовкиПлатежа(РеквизитыПлатежа, ПараметрыРасчетаСтатусов = Неопределено)
	
	ТаблицаЗадач = ЗадачиСвязанныеСПлатежом(РеквизитыПлатежа, ПараметрыРасчетаСтатусов);
	Если ТаблицаЗадач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтатусыЗадач(ТаблицаЗадач);
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		ЗаписатьНовыйСтатусЗадачи(Задача, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСтатусаЗадачУплатыПатента(Организация, ОтборПатент) Экспорт
	
	ТаблицаЗадач = ЗадачиУплатыПатента(Организация, ОтборПатент);
	
	ДобавитьСтатусыЗадач(ТаблицаЗадач);
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		ЗаписатьНовыйСтатусЗадачи(Задача, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНовыйСтатусЗадачи(Задача, ПеренестиВАрхив)
	
	КлючиЗаписи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	
	ЗаполнитьЗначенияСвойств(КлючиЗаписи, Задача);
	
	КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(КлючиЗаписи);
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючиЗаписи);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Статус = Задача.Статус;
			Если ПеренестиВАрхив Тогда
				МенеджерЗаписи.ВАрхиве = Истина;
			КонецЕсли;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
	Исключение
		
		ТекстСобытия = НСтр("ru = 'Задачи бухгалтера'", ОбщегоНазначения.КодОсновногоЯзыка());
		ШаблонОшибки = НСтр("ru = 'Не удалось обновить статус задачи ""%1"" по причине:
			|%2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Задача.Наименование, ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		ЗаписьЖурналаРегистрации(ТекстСобытия, УровеньЖурналаРегистрации.Ошибка, , Задача.Наименование, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Добавляет статусы задач бухгалтера по подготовке отчетов.
// Переданной таблице добавляется колонка Статус.
//
//  Параметры:
//   ТаблицаЗадач - ТаблицаЗначений:
//     * Организация                 - СправочникСсылка.Организации
//     * ПериодСобытия               - Дата
//     * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//     * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//     * Действие                    - ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера
//     * Периодичность               - ПеречислениеСсылка.Периодичность
//
Процедура ДобавитьСтатусыЗадач(ТаблицаЗадач) Экспорт
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗадач.Колонки.Найти("Статус") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	ОтборПоДействиюОтчет         = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	ОтборПоДействиюУплата        = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
	ОтборПоДействиюРегПлатеж     = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж);
	ОтборПоДействиюЗарплата      = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата);
	ОтборПоДействиюФинОтчетность = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.ФинОтчетность);
	
	ЗадачиПодготовкаОтчета = ТаблицаЗадач.Скопировать(ОтборПоДействиюОтчет);
	ЗадачиУплатаНалога     = ТаблицаЗадач.Скопировать(ОтборПоДействиюУплата);
	ЗадачиРегПлатежи       = ТаблицаЗадач.Скопировать(ОтборПоДействиюРегПлатеж);
	ЗадачиЗарплата         = ТаблицаЗадач.Скопировать(ОтборПоДействиюЗарплата);
	ЗадачиФинОтчетность    = ТаблицаЗадач.Скопировать(ОтборПоДействиюФинОтчетность);
	
	КлючиЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоПодготовкеОтчетов(ЗадачиПодготовкаОтчета) Цикл
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоУплатеНалогов(ЗадачиУплатаНалога) Цикл
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоПодготовкеРегПлатежей(ЗадачиРегПлатежи) Цикл
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоВыплатеЗарплаты(ЗадачиЗарплата) Цикл
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЗадачаСоСтатусом Из СтатусыЗадачПоФинОтчетности(ЗадачиФинОтчетность) Цикл
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ЗадачаСоСтатусом);
		
		Для Каждого Задача Из ТаблицаЗадач.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = ЗадачаСоСтатусом.Статус;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет является ли записанный в базу статус правильным, если статус неактуальный – записывает правильный статус.
//  Параметры:
//   ПараметрыЗадачи - Структура
//    * Организация
//    * Правило
//    * ПериодСобытия
//    * РегистрацияВНалоговомОргане
//   НовыйСтатус - Строка
//
Процедура ПроверитьАктуальностьСтатуса(ПараметрыЗадачи, НовыйСтатус) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыЗадачи.Организация)
		Или Не ЗначениеЗаполнено(ПараметрыЗадачи.Правило) Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		
		ИдентификаторыПравила =
			Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(ПараметрыЗадачи.Правило);
		
		КодЗадачи = ИдентификаторыПравила.ИдентификаторЗадачи;
		
	ИначеЕсли ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.Патенты")
		Или ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей")
		Или ТипЗнч(ПараметрыЗадачи.Правило) = Тип("ПеречислениеСсылка.ЗадачиНачалаРаботы") Тогда
		
		КодЗадачи = "";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	КодЗадачиВзносы = "СтраховыеВзносы";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                 ПараметрыЗадачи.Организация);
	Запрос.УстановитьПараметр("Правило",                     ПараметрыЗадачи.Правило);
	Запрос.УстановитьПараметр("КодЗадачи",                   КодЗадачи);
	Запрос.УстановитьПараметр("ПериодСобытия",               ПараметрыЗадачи.ПериодСобытия);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ПараметрыЗадачи.РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("КодЗадачиВзносы",             КодЗадачиВзносы);
	Запрос.УстановитьПараметр("НовыйСтатус",                 НовыйСтатус);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Статус,
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Наименование
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И &УсловиеНаПравило
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ЗадачиБухгалтера.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И ЗадачиБухгалтера.Статус <> &НовыйСтатус";
	Если КодЗадачи = КодЗадачиВзносы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПравило",
			"ЗадачиБухгалтера.Правило.Владелец.Код = &КодЗадачиВзносы "
			+ "И ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПравило", "ЗадачиБухгалтера.Правило = &Правило");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если КодЗадачи = КодЗадачиВзносы Тогда
		ПараметрыЗадачи.Правило = Выборка.Правило;
	КонецЕсли;
	
	КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(ПараметрыЗадачи);
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗадачи);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Статус = НовыйСтатус;
		МенеджерЗаписи.Записать();
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
	Исключение
		
		ТекстСобытия = НСтр("ru = 'Задачи бухгалтера'", ОбщегоНазначения.КодОсновногоЯзыка());
		ШаблонОшибки = НСтр("ru = 'Не удалось обновить статус задачи ""%1"" по причине:
			|%2'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Выборка.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ТекстСобытия, УровеньЖурналаРегистрации.Ошибка, , Выборка.Наименование, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЗадачиСвязанныеСОтчетом(Документ)
	
	СвойстваОтчета = ИнтерфейсыВзаимодействияБРО.СвойстваОтчета(Документ);
	
	ИсточникОтчета = СвойстваОтчета.ИсточникОтчета;
	Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВсеИдентификаторыТребований = СоответствияПравилИФормОтчетов();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		ИдентификаторыПравилВыполняющихсяНеРеглОтчетами(), ВсеИдентификаторыТребований);
	
	ИдентификаторыТребованийПоОтчету = ВсеИдентификаторыТребований.Скопировать(
		Новый Структура("ФормаОтчета", ИсточникОтчета), "ИдентификаторПравила, ИдентификаторЗадачи");
	
	Если ИдентификаторыТребованийПоОтчету.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Организация = СвойстваОтчета.Организация;
	ПериодСобытия = СвойстваОтчета.ДатаОкончанияОП;
	ДатаСобытия   = НачалоДня(СвойстваОтчета.ДатаСоздания);
	Если СвойстваОтчета.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		КодНалоговогоОргана = СвойстваОтчета.КодКонтролирующегоОргана;
	Иначе
		КодНалоговогоОргана = "";
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, "", КодНалоговогоОргана);
	
	ОтборНалоговыеОрганы = Новый Массив;
	ОтборНалоговыеОрганы.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ОтборНалоговыеОрганы.Добавить(РегистрацияВНалоговомОргане);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыТребованийПоОтчету", ИдентификаторыТребованийПоОтчету);
	Запрос.УстановитьПараметр("ВсеИдентификаторыТребований",      ВсеИдентификаторыТребований);
	Запрос.УстановитьПараметр("Организация",                      Организация);
	Запрос.УстановитьПараметр("ОтборНалоговыеОрганы",             ОтборНалоговыеОрганы);
	Запрос.УстановитьПараметр("ФормаОтчета",                      ИсточникОтчета);
	
	// Текст запроса может модифицироваться схемой запроса
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИдентификаторыТребований.ФормаОтчета КАК ФормаОтчета,
	|	ИдентификаторыТребований.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыТребований.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ВсеИдентификаторыТребований
	|ИЗ
	|	&ВсеИдентификаторыТребований КАК ИдентификаторыТребований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыТребований.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыТребований.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ИдентификаторыТребований
	|ИЗ
	|	&ИдентификаторыТребованийПоОтчету КАК ИдентификаторыТребований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыТребований.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ОтборПоЗадаче
	|ИЗ
	|	ИдентификаторыТребований КАК ИдентификаторыТребований
	|ГДЕ
	|	ИдентификаторыТребований.ИдентификаторПравила = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыТребований.ИдентификаторЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило
	|ПОМЕСТИТЬ ПравилаОбрабатываемыеДругимиОтчетами
	|ИЗ
	|	ВсеИдентификаторыТребований КАК ИдентификаторыТребований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборПоЗадаче КАК ОтборПоЗадаче
	|		ПО ИдентификаторыТребований.ИдентификаторЗадачи = ОтборПоЗадаче.ИдентификаторЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ИдентификаторыТребований.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|			И ИдентификаторыТребований.ИдентификаторПравила = ПравилаПредставленияОтчетовУплатыНалогов.Код
	|ГДЕ
	|	ИдентификаторыТребований.ФормаОтчета <> &ФормаОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	ИдентификаторыТребований КАК ИдентификаторыТребований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ИдентификаторыТребований.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|			И ИдентификаторыТребований.ИдентификаторПравила = ПравилаПредставленияОтчетовУплатыНалогов.Код
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	ОтборПоЗадаче КАК ОтборПоЗадаче
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ОтборПоЗадаче.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Ссылка В
	|				(ВЫБРАТЬ
	|					ПравилаОбрабатываемыеДругимиОтчетами.Правило
	|				ИЗ
	|					ПравилаОбрабатываемыеДругимиОтчетами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Статус КАК Статус,
	|	ЗадачиБухгалтера.Наименование КАК Наименование,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет) КАК Действие,
	|	ЗадачиБухгалтера.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Правило В
	|			(ВЫБРАТЬ
	|				Правила.Правило
	|			ИЗ
	|				Правила)
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.РегистрацияВНалоговомОргане В(&ОтборНалоговыеОрганы)";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		
		Запрос.Текст = ТекстЗапроса;
		ВсеЗадачи = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		// Добавляем отбор по периоду в последний запрос пакета
		Условия = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1].Операторы[0].Отбор;
		Условия.Добавить("ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия");
		Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() И ТипЗнч(Документ) = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД") Тогда
			Условия.Удалить(Условия.Количество()-1);
			// Задача с периодичностью "День"
			Условия.Добавить("ЗадачиБухгалтера.Периодичность = &Периодичность");
			Запрос.УстановитьПараметр("Периодичность", Перечисления.Периодичность.День);
			// Период сдачи отчета 2 дня с учетом даты события
			Условия.Добавить("ЗадачиБухгалтера.Срок = &ПериодСобытия ИЛИ ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия");
			Запрос.УстановитьПараметр("ПериодСобытия", ДатаСобытия);
			
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
			
			Запрос.Текст = ТекстЗапроса;
			РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;
		
		ВсеЗадачи = РезультатЗапроса.Выгрузить();
		
	КонецЕсли;
	
	Возврат ВсеЗадачи;
	
КонецФункции

Функция ЗадачиСвязанныеСПлатежом(РеквизитыПлатежа, ПараметрыРасчетаСтатусов)
	
	ТаблицаЗадач = НоваяТаблицаЗадачСвязанныхСПлатежами();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		СвязанныеЗадачиПодготовкиРегулярныхПлатежей(РеквизитыПлатежа),
		ТаблицаЗадач);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		СвязанныеЗадачиУплатыНалога(РеквизитыПлатежа, ПараметрыРасчетаСтатусов),
		ТаблицаЗадач);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		СвязанныеЗадачиВыплатыЗарплаты(РеквизитыПлатежа),
		ТаблицаЗадач);
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция СвязанныеЗадачиПодготовкиРегулярныхПлатежей(РеквизитыДокумента)
	
	Если ТипЗнч(РеквизитыДокумента.Ссылка) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегулярныеПлатежи.Организация КАК Организация,
	|	РегулярныеПлатежи.Правило КАК Правило,
	|	РегулярныеПлатежи.ПериодСобытия КАК ПериодСобытия,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.РегулярныйПлатеж) КАК Действие
	|ИЗ
	|	РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|ГДЕ
	|	РегулярныеПлатежи.Организация = &Организация
	|	И РегулярныеПлатежи.ПлатежноеПоручение = &Ссылка
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СвязанныеЗадачиУплатыНалога(РеквизитыДокумента, ПараметрыРасчетаСтатусов)
	
	ТаблицаЗадач = НоваяТаблицаЗадачСвязанныхСПлатежами();
	
	ДокументОбрабатывается = ЭтоУплатаНалога(РеквизитыДокумента.ВидОперации)
		И РеквизитыДокумента.ВидНалога <> Перечисления.ВидыНалогов.НДФЛ
		И РеквизитыДокумента.ВидНалога <> Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины;
	
	Если Не ДокументОбрабатывается Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	ТекущаяЗадача = ТекущаяЗадачаНалоговогоПлатежа(РеквизитыДокумента);
	
	НоваяЗадача = НоваяЗадачаНалоговогоПлатежа(РеквизитыДокумента, ТекущаяЗадача, ПараметрыРасчетаСтатусов);
	
	ПропуститьОбновлениеСвязиДокументЗадача = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыРасчетаСтатусов, "ПропуститьОбновлениеСвязиДокументЗадача", Ложь);
	
	// Зарегистрируем новое состояние платежа в регистре исполнения задач ЗадачиБухгалтераНалоговыеПлатежи.
	
	Если НоваяЗадача <> Неопределено Тогда
		
		// Новое исполнение при записи заместит предыдущее.
		
		ОплатаЗадолженности = ЭтоПогашениеНалоговойЗадолженности(РеквизитыДокумента);
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			РеквизитыДокумента.Организация,
			РеквизитыДокумента.Ссылка,
			НоваяЗадача.Правило,
			НоваяЗадача.ПериодСобытия,
			ОплатаЗадолженности);
		
	ИначеЕсли ТекущаяЗадача <> Неопределено
		И ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыДокумента.ВидНалога)
		И Не ПропуститьОбновлениеСвязиДокументЗадача Тогда
		
		// Для указанного налога в указанный период задачи отсутствуют.
		// Если связанные задачи по налогу обновляются автоматически, старую запись исполнения необходимо удалить.
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.УдалитьЗапись(
			РеквизитыДокумента.Организация, РеквизитыДокумента.Ссылка);
		
	КонецЕсли;
	
	// Заполним таблицу задач, для которых необходимо обновить статусы
	
	Если ТекущаяЗадача <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаЗадач.Добавить(), ТекущаяЗадача);
	КонецЕсли;
	
	Если НоваяЗадача <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаЗадач.Добавить(), НоваяЗадача);
	КонецЕсли;
	
	// Особые ситуации
	
	// Задача по оплате патента регистрируется только из помощника оплаты патента.
	// Авторегистрация новой задачи на оплату патента не поддерживается.
	// Поэтому патент может содержаться только в правиле текущей задачи.
	ДополнитьЗадачиОплатыПатента(ТекущаяЗадача, ТаблицаЗадач);
	
	// При уплате фиксированных взносов может измениться статус и задачи на уплату "постоянной" части в пределах года,
	// и статус задачи на уплату взносов с доходов.
	ДополнитьЗадачиУплатыФиксированныхВзносов(ТаблицаЗадач);
	
	ТаблицаЗадач.Свернуть(ИменаКолонокСтрокой(ТаблицаЗадач.Колонки));
	
	ЗаполнитьРегистрациюВНалоговомОргане(ТаблицаЗадач, РеквизитыДокумента);
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция СвязанныеЗадачиВыплатыЗарплаты(РеквизитыДокумента)
	
	ДокументОбрабатывается = ЭтоВыплатаЗарплаты(РеквизитыДокумента.ВидОперации)
		ИЛИ (ЭтоУплатаНалога(РеквизитыДокумента.ВидОперации)
			И (РеквизитыДокумента.ВидНалога = Перечисления.ВидыНалогов.НДФЛ
				ИЛИ РеквизитыДокумента.ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ДоходыСвышеПредельнойВеличины));
	
	Если Не ДокументОбрабатывается Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",        РеквизитыДокумента.Организация);
	Запрос.УстановитьПараметр("ПравилоАванс",       ПравилоВыплатыЗарплатыАванс());
	Запрос.УстановитьПараметр("СпособВыплатыАванс", Справочники.СпособыВыплатыЗарплаты.Аванс());
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ПлатежнаяВедомость) Тогда
		
		Запрос.УстановитьПараметр("Ведомость", РеквизитыДокумента.ПлатежнаяВедомость);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиБухгалтера.Организация КАК Организация,
		|	ЗадачиБухгалтера.Правило КАК Правило,
		|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
		|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ЗадачиБухгалтера.Правило.Действие КАК Действие
		|ИЗ
		|	Документ.%Ведомость% КАК ВедомостьНаВыплатуЗарплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
		|		ПО ВедомостьНаВыплатуЗарплаты.Организация = ЗадачиБухгалтера.Организация
		|			И КОНЕЦПЕРИОДА(ВедомостьНаВыплатуЗарплаты.ПериодРегистрации, МЕСЯЦ) = КОНЕЦПЕРИОДА(ЗадачиБухгалтера.ПериодСобытия, МЕСЯЦ)
		|			И &УсловиеАванс
		|			И (ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов)
		|			И (ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата))
		|ГДЕ
		|	ВедомостьНаВыплатуЗарплаты.Ссылка = &Ведомость";
		
		ВедомостьМетаданные = РеквизитыДокумента.ПлатежнаяВедомость.Метаданные();
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Ведомость%", ВедомостьМетаданные.Имя);
		Если ВедомостьМетаданные.Реквизиты.Найти("СпособВыплаты") <> Неопределено Тогда
			
			ТекстЗамены = "(ВЫБОР
			|				КОГДА ВедомостьНаВыплатуЗарплаты.СпособВыплаты = &СпособВыплатыАванс
			|					ТОГДА ЗадачиБухгалтера.Правило = &ПравилоАванс
			|				ИНАЧЕ ЗадачиБухгалтера.Правило <> &ПравилоАванс
			|			КОНЕЦ)";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАванс", ТекстЗамены);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАванс", "ИСТИНА");
		КонецЕсли;
		
		ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
		
	Иначе
		// Если ведомость не заполнена, то это уплата НДФЛ.
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(РеквизитыДокумента.ПоказательПериода);
		Периодичность   = ПериодичностьПоПоказателюПериода(ОписаниеПериода.Периодичность);
		ПериодСобытия   = НачалоДня(ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ОписаниеПериода.Дата));
		
		Запрос.УстановитьПараметр("ПериодСобытияЗарплата", ПериодСобытия);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиБухгалтера.Организация КАК Организация,
		|	ЗадачиБухгалтера.Правило КАК Правило,
		|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
		|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата) КАК Действие
		|ИЗ
		|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
		|ГДЕ
		|	ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
		|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытияЗарплата
		|	И ЗадачиБухгалтера.Организация = &Организация
		|	И ЗадачиБухгалтера.Правило <> &ПравилоАванс";
		
		ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
		
		// Убедимся, что документ уплаты НДФЛ добавлен в служебный регистр "ЗадачиБухгалтераНалоговыеПлатежи"
		Для Каждого Задача Из ТаблицаЗадач Цикл
			РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
				Задача.Организация, РеквизитыДокумента.Ссылка, Задача.Правило, Задача.ПериодСобытия);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

// Возвращает таблицу с параметрами задач по подготовке отчетов и статусами.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение: ТаблицаЗначений, копия переданной таблицы, дополненная колонкой Статус.
//  Колонки:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Статус                      - Строка
//
Функция СтатусыЗадачПоПодготовкеОтчетов(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	КлючиЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	
	ЗадачиСоСтатусами = ТаблицаЗадач.Скопировать();
	
	Если ЗадачиСоСтатусами.Колонки.Найти("Статус") = Неопределено Тогда
		ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	СостояниеОтчетностиСдано = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
	СтатусБРОСдано = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
	
	Для Каждого ВыполнениеЗадачи Из ВыполнениеЗадачПоПодготовкеОтчетов(ЗадачиСоСтатусами) Цикл
		
		Статус = "";
		
		Если ВыполнениеЗадачи.Документы.Количество() > 0 Тогда
			Если ВыполнениеЗадачи.Периодичность = Перечисления.Периодичность.День Тогда
				// Все задачи дня должны быть выполнены
				Для Каждого Документ ИЗ ВыполнениеЗадачи.Документы Цикл
					Если Документ.СостояниеСдачиОтчетности = СостояниеОтчетностиСдано
						Или Документ.Статус = СтатусБРОСдано Тогда
						Статус = "Сдано";
					Иначе
						Статус = "";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Созданные отчеты отсортированы по убыванию даты подписи, определяем статус по самому последнему
				Если ВыполнениеЗадачи.Документы[0].СостояниеСдачиОтчетности = СостояниеОтчетностиСдано
					Или ВыполнениеЗадачи.Документы[0].Статус = СтатусБРОСдано Тогда
					Статус = "Сдано";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ВыполнениеЗадачи);
		
		Для Каждого Задача Из ЗадачиСоСтатусами.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с параметрами задач по уплате налогов и статусами.
//
// Параметры:
//  КлючиЗадач - ТаблицаЗначений
//   * Организация
//   * РегистрацияВНалоговомОргане
//   * ПериодСобытия
//   * Правило
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадач()
//
Функция СтатусыЗадачПоУплатеНалогов(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗадач",      ТаблицаЗадач);
	Запрос.УстановитьПараметр("КодЗадачиВзносы",   ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗадач.Организация КАК Организация,
	|	ТаблицаЗадач.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаЗадач.ПериодСобытия КАК ПериодСобытия,
	|	ТаблицаЗадач.Правило КАК Правило
	|ПОМЕСТИТЬ ТаблицаЗадач
	|ИЗ
	|	&ТаблицаЗадач КАК ТаблицаЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадач.Организация КАК Организация,
	|	ТаблицаЗадач.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ТаблицаЗадач.ПериодСобытия КАК ПериодСобытия,
	|	ТаблицаЗадач.Правило КАК Правило,
	|	ЕСТЬNULL(Правила.Периодичность, ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)) КАК Периодичность,
	|	ЕСТЬNULL(Правила.Ссылка.Владелец.Код, """") КАК ИдентификаторЗадачи,
	|	ЕСТЬNULL(Правила.Ссылка.Код, """") КАК ИдентификаторПравила
	|ПОМЕСТИТЬ ЗадачиСИдентификаторами
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ПО ТаблицаЗадач.Правило = Правила.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиСИдентификаторами.Организация КАК Организация,
	|	ЗадачиСИдентификаторами.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиСИдентификаторами.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиСИдентификаторами.Правило КАК Правило,
	|	ЗадачиСИдентификаторами.Правило КАК ПравилоУплаты,
	|	ЕСТЬNULL(ЗадачиБухгалтера.Периодичность, ЗадачиСИдентификаторами.Периодичность) КАК Периодичность,
	|	ЕСТЬNULL(ЗадачиБухгалтера.Срок, ДАТАВРЕМЯ(1,1,1)) КАК Срок,
	|	ЗадачиСИдентификаторами.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ЗадачиСИдентификаторами.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ЗадачиСИдентификаторами.ИдентификаторЗадачи + ""."" + ЗадачиСИдентификаторами.ИдентификаторПравила КАК ПолноеИмяПравила
	|ИЗ
	|	ЗадачиСИдентификаторами КАК ЗадачиСИдентификаторами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ЗадачиСИдентификаторами.Организация = ЗадачиБухгалтера.Организация
	|			И ЗадачиСИдентификаторами.РегистрацияВНалоговомОргане = ЗадачиБухгалтера.РегистрацияВНалоговомОргане
	|			И ЗадачиСИдентификаторами.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|			И (ВЫБОР
	|				КОГДА ЗадачиСИдентификаторами.ИдентификаторЗадачи = &КодЗадачиВзносы
	|					ТОГДА ЗадачиБухгалтера.Правило.Владелец.Код = &КодЗадачиВзносы
	|							И ЗадачиБухгалтера.Правило.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|				ИНАЧЕ ЗадачиСИдентификаторами.Правило = ЗадачиБухгалтера.Правило
	|			КОНЕЦ)";
	
	ПараметрыЗадач = Новый Структура;
	
	ПараметрыЗадач.Вставить("СтраховыеВзносыИП",     Обработки.РасчетСтраховыхВзносовИП.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("ЕНВД",                  Обработки.ПомощникРасчетаЕНВД.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("УСН",                   Обработки.ПомощникРасчетаНалогаУСН.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("НДФЛ_ИП",               Обработки.ПомощникЗаполнения3НДФЛ.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("Патент",                Обработки.ПомощникОплатыПатента.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("УчетЗарплаты",          Обработки.ПомощникУчетаЗарплаты.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("НДС",                   Обработки.ПомощникРасчетаНДС.НовыеПараметрыЗадач());
	ПараметрыЗадач.Вставить("УниверсальныйПомощник", Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадач());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Правило             = Выборка.Правило;
		ИдентификаторЗадачи = Выборка.ИдентификаторЗадачи;
		ПолноеИмяПравила    = Выборка.ПолноеИмяПравила;
		
		ГруппаПараметров = Неопределено;
		
		Если ТипЗнч(Правило) = Тип("СправочникСсылка.Патенты") Тогда
			
			ГруппаПараметров = "Патент";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(Правило, ИдентификаторЗадачи) Тогда
			
			ГруппаПараметров = "СтраховыеВзносыИП";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомЕНВД(Правило, ИдентификаторЗадачи) Тогда
			
			ГруппаПараметров = "ЕНВД";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "УСН";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУплатыАвансовыхПлатежейНДФЛ(Выборка)
			Или ПравилоВыполняетсяПомощникомЗаполнения3НДФЛ(Выборка) Тогда
			
			ГруппаПараметров = "НДФЛ_ИП";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомУчетаЗарплаты(Правило, ИдентификаторЗадачи) Тогда
			
			ГруппаПараметров = "УчетЗарплаты";
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНДС(Правило, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "НДС";
			
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило, ИдентификаторЗадачи, ПолноеИмяПравила) Тогда
			
			ГруппаПараметров = "УниверсальныйПомощник";
			
		КонецЕсли;
		
		Если ГруппаПараметров <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыЗадач[ГруппаПараметров].Добавить(), Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Обработки.РасчетСтраховыхВзносовИП.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.СтраховыеВзносыИП);
	Обработки.ПомощникРасчетаНалогаУСН.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.УСН);
	Обработки.ПомощникЗаполнения3НДФЛ.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.НДФЛ_ИП);
	Обработки.ПомощникРасчетаЕНВД.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.ЕНВД);
	Обработки.ПомощникОплатыПатента.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.Патент);
	Обработки.ПомощникУплатыНалога.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.УниверсальныйПомощник);
	Обработки.ПомощникУчетаЗарплаты.ЗаполнитьСтатусыЗадачУплатыВБюджет(ПараметрыЗадач.УчетЗарплаты);
	Обработки.ПомощникРасчетаНДС.ЗаполнитьСтатусыЗадач(ПараметрыЗадач.НДС);
	
	// Для определения статусов в алгоритмах универсального помощника используется имя ПравилоУплаты.
	// В остальных помощниках используется имя Правило.
	// При объединении всех задач необходимо переименовать колонку таблицы параметров помощника.
	ПараметрыЗадач.УниверсальныйПомощник.Колонки.ПравилоУплаты.Имя = "Правило";
	
	ЗадачиСоСтатусами = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Для Каждого ГруппаПараметровЗадач Из ПараметрыЗадач Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ГруппаПараметровЗадач.Значение, ЗадачиСоСтатусами);
	КонецЦикла;
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с параметрами задач по уплате налогов и статусами.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений
//   * Организация
//   * ПериодСобытия
//   * Правило
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадач()
//
Функция СтатусыЗадачПоПодготовкеРегПлатежей(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	ВЫБОР
	|		КОГДА НЕ СостоянияБанковскихДокументов.Состояние ЕСТЬ NULL
	|				И СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ""Оплачено""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|			ПО РегулярныеПлатежи.ПлатежноеПоручение = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|				И РегулярныеПлатежи.Организация = СостоянияБанковскихДокументов.Организация
	|		ПО Задачи.Организация = РегулярныеПлатежи.Организация
	|			И Задачи.Правило = РегулярныеПлатежи.Правило
	|			И Задачи.ПериодСобытия = РегулярныеПлатежи.ПериодСобытия";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу с параметрами задач по выплате зарплаты и статусами.
//
// Параметры:
//  КлючиЗадач - ТаблицаЗначений
//   * Организация
//   * РегистрацияВНалоговомОргане
//   * ПериодСобытия
//   * Правило
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Организация
//   * РегистрацияВНалоговомОргане
//   * ПериодСобытия
//   * Правило
//   * Статус
//
Функция СтатусыЗадачПоВыплатеЗарплаты(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	ПравилоАванс = ПравилоВыплатыЗарплатыАванс();
	
	ЗадачиСоСтатусами = ТаблицаЗадач.Скопировать();
	
	Если ЗадачиСоСтатусами.Колонки.Найти("Статус") = Неопределено Тогда
		ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	// Добавим колонки для корректного расчета статусов задач в помощнике. Будут удалены в конце процедуры.
	ЗадачиСоСтатусами.Колонки.Добавить("ПериодРегистрации", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ЗадачиСоСтатусами.Колонки.Добавить("Аванс",             Новый ОписаниеТипов("Булево"));
	
	Для Каждого Задача Из ЗадачиСоСтатусами Цикл
		
		Задача.ПериодРегистрации = Задача.ПериодСобытия;
		Задача.Аванс             = (Задача.Правило = ПравилоАванс);
		
	КонецЦикла;
	
	Обработки.ПомощникУчетаЗарплаты.ЗаполнитьСтатусыЗадачВыплатыЗарплаты(ЗадачиСоСтатусами);
	
	// Удалим временные колонки
	ЗадачиСоСтатусами.Колонки.Удалить("ПериодРегистрации");
	ЗадачиСоСтатусами.Колонки.Удалить("Аванс");
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает таблицу с параметрами задач по ФинОтчетности и статусами.
//
// Параметры:
//  ТаблицаЗадач - ТаблицаЗначений
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаФинОтчетности
//
// Возвращаемое значение: ТаблицаЗначений, копия переданной таблицы, дополненная колонкой Статус.
//  Колонки:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаФинОтчетности
//   * Статус                      - Строка
//
Функция СтатусыЗадачПоФинОтчетности(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	КлючиЗадачи = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадачСтруктурой();
	
	ЗадачиСоСтатусами = ТаблицаЗадач.Скопировать();
	
	Если ЗадачиСоСтатусами.Колонки.Найти("Статус") = Неопределено Тогда
		ЗадачиСоСтатусами.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	КонецЕсли;
	
	Для каждого ВыполнениеЗадачи Из ВыполнениеЗадачПоПодготовкеОтчетов(ЗадачиСоСтатусами) Цикл
		
		Статус = "";
		
		Правило = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыполнениеЗадачи.Правило,
			"Организация, Получатель, Периодичность, ИдентификаторКомплекта, КраткоеПредставлениеКомплекта");
		
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ВыполнениеЗадачи.ПериодСобытия-1);
		
		Отчет = Документы.ФинОтчетВБанк.НайтиПоРеквизитам(Правило.Организация,
			Правило.Получатель, Правило.ИдентификаторКомплекта, КонецПериода);
		
		Если ЗначениеЗаполнено(Отчет)
			И ФинОтчетностьВБанки.СтатусОтчета(Отчет) = Перечисления.СтатусыОтправкиФинОтчетностиВБанки.Сдано Тогда
			Статус = НСтр("ru = 'Сдано'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ВыполнениеЗадачи);
		
		Для каждого Задача Из ЗадачиСоСтатусами.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = Статус;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗадачиСоСтатусами;
	
КонецФункции

// Возвращает описание правил с указанием исполнителей, задачи по которым не обрабатываются интерфейсом БРО.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаСоответствияПравилИФормОтчетов()
//
Функция ИдентификаторыПравилВыполняющихсяНеРеглОтчетами() Экспорт
	
	Идентификаторы = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыПравилСведенияОЗастрахованныхЛицах(), Идентификаторы);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыПравилСправкиНДФЛ(), Идентификаторы);
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает идентификаторы правил, задачи по которым выполняются документами
// СведенияОЗастрахованныхЛицахСЗВ_М, СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ и РеестрДСВ_3.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаСоответствияПравилИФормОтчетов()
//
Функция ИдентификаторыПравилСведенияОЗастрахованныхЛицах()
	
	Идентификаторы = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОЗастрахованныхЛицахСЗВ_М";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2016_СведенияПФРЕжемесячные";
	НоваяСтрока.ИмяИсточника = "СведенияОЗастрахованныхЛицахСЗВ_М";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОЗастрахованныхЛицахСЗВ_М";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2017_СведенияПФРЕжемесячные";
	НоваяСтрока.ИмяИсточника = "СведенияОЗастрахованныхЛицахСЗВ_М";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2017_СведенияСтажСотрудниковОрганизации";
	НоваяСтрока.ИмяИсточника = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2017_СведенияСтажСотрудниковПредприниматели";
	НоваяСтрока.ИмяИсточника = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.РеестрДСВ_3";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2013_Отчет_Допвзносы_Накопительная_ПФР";
	НоваяСтрока.ИмяИсточника = "РеестрДСВ_3";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2020_СведенияЭТКЕжемесячные";
	НоваяСтрока.ИмяИсточника = "СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД";
	НоваяСтрока.ИдентификаторЗадачи = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2020_СведенияЭТКЕжедневные";
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает идентификаторы правил, задачи по которым выполняются документом СправкиНДФЛДляПередачиВНалоговыйОрган.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаСоответствияПравилИФормОтчетов()
//
Функция ИдентификаторыПравилСправкиНДФЛ()
	
	Идентификаторы = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.ИдентификаторЗадачи = "НДФЛ_Агент";
	НоваяСтрока.ИдентификаторПравила = "2013_2НДФЛ";
	НоваяСтрока.ИмяИсточника = "СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.СложноеУсловиеПроверки = Истина;
	НоваяСтрока.УсловиеПроверки =
		"ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ЕжегоднаяОтчетность)";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.ИдентификаторЗадачи = "НДФЛ_Агент";
	НоваяСтрока.ИдентификаторПравила = "2013_2НДФЛ_Неудержанный";
	НоваяСтрока.ИмяИсточника = "СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.СложноеУсловиеПроверки = Истина;
	НоваяСтрока.УсловиеПроверки =
		"ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ)";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ФормаОтчета = "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.ИдентификаторЗадачи = "НДФЛ_Агент";
	НоваяСтрока.ИдентификаторПравила = "2016_2НДФЛ_Неудержанный";
	НоваяСтрока.ИмяИсточника = "СправкиНДФЛДляПередачиВНалоговыйОрган";
	НоваяСтрока.СложноеУсловиеПроверки = Истина;
	НоваяСтрока.УсловиеПроверки =
		"ОснованиеДляПредставленияСправок = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПредставленияСправок2НДФЛ.ОНевозможностиУдержанияНДФЛ)";
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает таблицу с документами, которыми выполняются задачи бухгалтера по подготовке отчетов.
//  Параметры:
//   ТаблицаЗадач - ТаблицаЗначений:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * Периодичность               - ПеречислениеСсылка.Периодичность
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   
//  ТолькоАктуальныеФормыОтчетов   - Булево - Если Истина, отбирать отчеты только по форме, действующей в отчетном периоде.
//
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * Индекс                      - Число
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Документы - ТаблицаЗначений:
//     * Документ                 - ДокументСсылка.РегламентированныйОтчет
//     * Дата                     - Дата документа
//     * Статус                   - Строка
//     * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности
//
Функция ВыполнениеЗадачПоПодготовкеОтчетов(ТаблицаЗадач, ТолькоАктуальныеФормыОтчетов = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.УстановитьПараметр("СоответствияПравилИФормОтчетов", СоответствияПравилИФормОтчетов());
	Запрос.УстановитьПараметр("ИдентификаторыПравилВыполняющихсяНеРеглОтчетами",
		ИдентификаторыПравилВыполняющихсяНеРеглОтчетами());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияПравилИФормОтчетов.ФормаОтчета КАК ФормаОтчета,
	|	СоответствияПравилИФормОтчетов.ИдентификаторПравила КАК ИдентификаторПравила,
	|	СоответствияПравилИФормОтчетов.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ СоответствияПравилИФормОтчетов
	|ИЗ
	|	&СоответствияПравилИФормОтчетов КАК СоответствияПравилИФормОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПравил.ФормаОтчета КАК ФормаОтчета,
	|	ИдентификаторыПравил.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыПравил.ИдентификаторЗадачи КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ИдентификаторыПравилНеОбрабатываемыхБРО
	|ИЗ
	|	&ИдентификаторыПравилВыполняющихсяНеРеглОтчетами КАК ИдентификаторыПравил
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	ВЫРАЗИТЬ(Задачи.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов) КАК Правило,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.Периодичность КАК Периодичность
	|ПОМЕСТИТЬ ЗадачиБезИдентификаторов
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.Правило.Код КАК ИдентификаторПравила,
	|	ЗадачиБухгалтера.Код КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ПараметрыЗадач
	|ИЗ
	|	ЗадачиБезИдентификаторов КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Задачи.Правило.Владелец = ЗадачиБухгалтера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПоискПоПолномуИдентификатору.ФормаОтчета, ПоискПоИдентификаторуЗадачи.ФормаОтчета) КАК ИсточникОтчета,
	|	ПараметрыЗадач.Организация КАК Организация,
	|	ПараметрыЗадач.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыЗадач.Правило КАК Правило,
	|	ПараметрыЗадач.Периодичность КАК Периодичность,
	|	ПараметрыЗадач.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПараметрыЗадач.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ПараметрыЗадач.ИдентификаторПравила КАК ИдентификаторПравила
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	ПараметрыЗадач КАК ПараметрыЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК ПоискПоПолномуИдентификатору
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = ПоискПоПолномуИдентификатору.ИдентификаторЗадачи
	|			И ПараметрыЗадач.ИдентификаторПравила = ПоискПоПолномуИдентификатору.ИдентификаторПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК ПоискПоИдентификаторуЗадачи
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = ПоискПоИдентификаторуЗадачи.ИдентификаторЗадачи
	|			И (ПоискПоИдентификаторуЗадачи.ИдентификаторПравила = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.ИсточникОтчета КАК ИсточникОтчета,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ДатаОкончания,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИСТИНА КАК ОбрабатываетсяБРО
	|ИЗ
	|	Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыПравилНеОбрабатываемыхБРО КАК ПравилаИсключения
	|		ПО Задачи.ИдентификаторЗадачи = ПравилаИсключения.ИдентификаторЗадачи
	|			И Задачи.ИдентификаторПравила = ПравилаИсключения.ИдентификаторПравила
	|ГДЕ
	|	НЕ Задачи.ИсточникОтчета ЕСТЬ NULL
	|	И ПравилаИсключения.ФормаОтчета ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаИсключения.ФормаОтчета КАК ИсточникОтчета,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ПериодСобытия КАК ДатаОкончания,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Правило КАК Правило,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ЛОЖЬ КАК ОбрабатываетсяБРО
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыПравилНеОбрабатываемыхБРО КАК ПравилаИсключения
	|		ПО Задачи.ИдентификаторЗадачи = ПравилаИсключения.ИдентификаторЗадачи
	|			И Задачи.ИдентификаторПравила = ПравилаИсключения.ИдентификаторПравила";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Задачи, обслуживаемые БРО, обрабатываем отдельно от остальных
	ВыполнениеЗадач = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
	
	Для Каждого Задача Из ВыполнениеЗадач Цикл
		Задача.ДатаОкончания = РелевантныйПериодСобытияДляОтчета(Задача);
	КонецЦикла;
	
	ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты(ВыполнениеЗадач, ТолькоАктуальныеФормыОтчетов);
	
	// Обработаем задачи, не обслуживаемые БРО
	ЗадачиНеОбрабатываемыеБРО = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	ЗаполнитьВыполнениеЗадачНеОбрабатываемыхБРО(ЗадачиНеОбрабатываемыеБРО);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗадачиНеОбрабатываемыеБРО, ВыполнениеЗадач);
	
	Возврат ВыполнениеЗадач;
	
КонецФункции

// В переданной таблице заполняет колонку "Документы" информацией о документах, выполняющих задачи.
//
// Параметры:
//   ТаблицаЗадач - таблица значений:
//      * Индекс - Число - Индекс строк таблицы значений
//      * ИсточникОтчета - Строка - имя объекта метаданных - исполнителя задачи
//      * Организация - СправочникСсылка.Организации - организация
//      * ДатаОкончания - Дата - Дата события
//      * ОбрабатываетсяБРО - Булево - признак того, что задача выполняется объектами БРО
//      * Документы - Таблица значений, содержащая информацию о документах, выполняющих задачу:
//         * Ссылка - ДокументСсылка, СправочникСсылка - ссылка на объект, связанный с задачей
//         * Дата - Дата - Налоговый период документа
//         * Статус - Строка - строковый статус документа
//         * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности - состояние сдачи отчетности через ЭДКО
//
Процедура ЗаполнитьВыполнениеЗадачНеОбрабатываемыхБРО(ТаблицаЗадач)
	
	Если ТаблицаЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Описание таблицы документов, заполняемой для каждой задачи.
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка", Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы.Измерения.Ссылка.Тип);
	ТаблицаДокументы.Колонки.Добавить("Дата",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("СостояниеСдачиОтчетности",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	
	ТаблицаЗадач.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	// Индекс нужен для группировки нескольких документов по одному набору параметров.
	ТаблицаЗадач.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	
	// Служебная колонка, удаляется в конце процедуры.
	// Предназначена для поиска отчетов, выполняющих задачу.
	ТаблицаЗадач.Колонки.Добавить("ИсполнительЗадачи", Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы.Измерения.Ссылка.Тип);
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Если Не Задача.ОбрабатываетсяБРО Тогда
			Задача.Документы = ТаблицаДокументы.СкопироватьКолонки();
		КонецЕсли;
		
		Задача.Индекс = ТаблицаЗадач.Индекс(Задача);
		
		Если Не ПустаяСтрока(Задача.ИсточникОтчета)
			И Не Задача.ОбрабатываетсяБРО
			И Метаданные.НайтиПоПолномуИмени(Задача.ИсточникОтчета) <> Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Задача.ИсточникОтчета);
			Задача.ИсполнительЗадачи = МенеджерОбъекта.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.УстановитьПараметр("ИдентификаторыПравилВыполняющихсяНеРеглОтчетами",
		ИдентификаторыПравилВыполняющихсяНеРеглОтчетами());
		
	// Готовим временную таблицу с обрабатываемыми задачами ЗадачиСИсключениями
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ДатаОкончания КАК ДатаОкончания,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Периодичность КАК Периодичность,
	|	Задачи.ИсточникОтчета КАК ИсточникОтчета,
	|	Задачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила КАК ИдентификаторПравила
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|ГДЕ
	|	НЕ Задачи.ОбрабатываетсяБРО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыПравил.ФормаОтчета КАК ИсточникОтчета,
	|	ИдентификаторыПравил.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ИдентификаторыПравил.ИдентификаторПравила КАК ИдентификаторПравила,
	|	ИдентификаторыПравил.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	ИдентификаторыПравил.УсловиеПроверки КАК УсловиеПроверки
	|ПОМЕСТИТЬ ИдентификаторыПравилНеОбрабатываемыхБРО
	|ИЗ
	|	&ИдентификаторыПравилВыполняющихсяНеРеглОтчетами КАК ИдентификаторыПравил
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.Организация КАК Организация,
	|	Задачи.ДатаОкончания КАК ДатаОкончания,
	|	ПравилаИсключения.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	ПравилаИсключения.УсловиеПроверки КАК УсловиеПроверки,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Периодичность КАК Периодичность
	|ПОМЕСТИТЬ ЗадачиСИсключениями
	|ИЗ
	|	Задачи КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыПравилНеОбрабатываемыхБРО КАК ПравилаИсключения
	|		ПО Задачи.ИсточникОтчета = ПравилаИсключения.ИсточникОтчета
	|			И Задачи.ИдентификаторЗадачи = ПравилаИсключения.ИдентификаторЗадачи
	|			И Задачи.ИдентификаторПравила = ПравилаИсключения.ИдентификаторПравила";
	
	Запрос.Выполнить();
	
	// Получаем статусы отправки отчетов
	// Основной запрос - задачи со стандартным отчетным периодом ("Месяц", "Квартал", "Полугодие", "Год"...)
	ТекстРезультирующегоЗапроса =
	"ВЫБРАТЬ
	|	Задачи.Индекс КАК Индекс,
	|	Задачи.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	Задачи.УсловиеПроверки КАК УсловиеПроверки,
	|	ЖурналОтчетовСтатусы.Ссылка КАК Ссылка,
	|	ЖурналОтчетовСтатусы.Статус КАК Статус,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
	|	ЖурналОтчетовСтатусы.ДатаОкончания КАК Дата,
	|	Задачи.ПериодСобытия КАК ПериодСобытия,
	|	Задачи.Периодичность КАК Периодичность,
	|	ЖурналОтчетовСтатусы.ВариантОтчета КАК ВариантОтчета
	|ПОМЕСТИТЬ ЗадачиСоСтатусами
	|ИЗ
	|	ЗадачиСИсключениями КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО (ЖурналОтчетовСтатусы.Организация = Задачи.Организация)
	|			И (ЖурналОтчетовСтатусы.ДатаОкончания = Задачи.ДатаОкончания)
	|			И (Задачи.Периодичность <> ЗНАЧЕНИЕ(Перечисление.Периодичность.День))
	|ГДЕ
	|	НЕ ЖурналОтчетовСтатусы.ПометкаУдаления";
	
	// Дополнительные запросы по задачам с периодичностью "День"
	ПодготовитьТаблицыПоЕжедневнымЗадачам(Запрос, ТекстРезультирующегоЗапроса);
	
	Запрос.Текст = ТекстРезультирующегоЗапроса;
	Запрос.Выполнить();
	
	// Итоговый запрос по статусам
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиСоСтатусами.Индекс КАК Индекс,
	|	ЗадачиСоСтатусами.СложноеУсловиеПроверки КАК СложноеУсловиеПроверки,
	|	ЗадачиСоСтатусами.УсловиеПроверки КАК УсловиеПроверки,
	|	ЗадачиСоСтатусами.Ссылка КАК Ссылка,
	|	ЗадачиСоСтатусами.Статус КАК Статус,
	|	ЗадачиСоСтатусами.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности,
	|	ЗадачиСоСтатусами.Дата КАК Дата,
	|	ЗадачиСоСтатусами.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиСоСтатусами.Периодичность КАК Периодичность,
	|	ЗадачиСоСтатусами.ВариантОтчета КАК ВариантОтчета
	|ИЗ
	|	ЗадачиСоСтатусами КАК ЗадачиСоСтатусами
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	ВариантОтчета УБЫВ
	|ИТОГИ ПО
	|	Индекс";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВсеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(ВсеДокументы);
	НепроведенныеДокументы = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ВсеДокументы);
	
	ВыборкаИндекс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИндекс.Следующий() Цикл
		
		Задача = ТаблицаЗадач[ВыборкаИндекс.Индекс];
		Задача.Документы = ТаблицаДокументы.СкопироватьКолонки();
		
		Выборка = ВыборкаИндекс.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НепроведенныеДокументы.Найти(Выборка.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Выборка.Ссылка) <> ТипЗнч(Задача.ИсполнительЗадачи) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.СложноеУсловиеПроверки
				И Не СложноеУсловиеПроверкиВыполняется(Выборка.Ссылка, Выборка.УсловиеПроверки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Периодичность = Перечисления.Периодичность.День
				И Не УсловиеЗадачиПериодичностьДеньВыполняется(Выборка.Ссылка, Выборка.ПериодСобытия) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Задача.Документы.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Удалим служебные колонки.
	ТаблицаЗадач.Колонки.Удалить("ИсполнительЗадачи");
	
КонецПроцедуры

Процедура ПодготовитьТаблицыПоЕжедневнымЗадачам(Запрос, ТекстРезультирующегоЗапроса)
	
	// Во временной таблице обязательно должны присутствовать поля шаблона
	ШаблонОбъединения = "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЖурналОтчетовСтатусы.Индекс,
		|	ВТ_ЖурналОтчетовСтатусы.СложноеУсловиеПроверки,
		|	ВТ_ЖурналОтчетовСтатусы.УсловиеПроверки,
		|	ВТ_ЖурналОтчетовСтатусы.Ссылка,
		|	ВТ_ЖурналОтчетовСтатусы.Статус,
		|	ВТ_ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности,
		|	ВТ_ЖурналОтчетовСтатусы.ДатаОкончания,
		|	ВТ_ЖурналОтчетовСтатусы.ПериодСобытия,
		|	ВТ_ЖурналОтчетовСтатусы.Периодичность,
		|	ВТ_ЖурналОтчетовСтатусы.ВариантОтчета
		|ИЗ
		|	ВТ_ЖурналОтчетовСтатусы КАК ВТ_ЖурналОтчетовСтатусы";
	
	МассивИменВременныхТаблиц = Новый Массив;
	
	ИмяТаблицы = "ВТ_ЖурналОтчетовСтатусыКадровыеМероприятия";
	УчетЗарплаты.ВТЗадачиПоКадровымМероприятиям(Запрос, ИмяТаблицы);
	МассивИменВременныхТаблиц.Добавить(ИмяТаблицы);
	
	Для Каждого ИмяВРеменнойТаблицы ИЗ МассивИменВременныхТаблиц Цикл
		ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + 
			СтрЗаменить(ШаблонОбъединения, "ВТ_ЖурналОтчетовСтатусы", ИмяВРеменнойТаблицы);
	КонецЦикла;
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + ";";
	
КонецПроцедуры

Функция СложноеУсловиеПроверкиВыполняется(СсылкаНаОбъект, УсловиеПроверки)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Или ПустаяСтрока(УсловиеПроверки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ОператорЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	
	ОператорЗапроса.Источники.Добавить(СсылкаНаОбъект.Метаданные().ПолноеИмя());
	
	ОператорЗапроса.ВыбираемыеПоля.Добавить("ИСТИНА");
	
	ОператорЗапроса.Отбор.Добавить("Ссылка = &Ссылка");
	ОператорЗапроса.Отбор.Добавить(УсловиеПроверки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция УсловиеЗадачиПериодичностьДеньВыполняется(СсылкаНаОбъект, ПериодСобытия)
	
	ДатаСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Дата");
	Если НачалоДня(ДатаСобытия) = НачалоДня(ПериодСобытия) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РелевантныйПериодСобытияДляОтчета(СвойстваЗадачи)
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
		СвойстваЗадачи.ИдентификаторЗадачи, СвойстваЗадачи.ИдентификаторПравила);
	
	Если ПолноеИмяПравила = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации"
		И ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		// Отчет всегда имеет периодичность год, но для вновь созданных организаций также предоставляется на 1 число месяца,
		// следующего за месяцем регистрации организации.
		Периодичность = Перечисления.Периодичность.Год;
		Возврат ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, СвойстваЗадачи.ПериодСобытия);
	Иначе
		Возврат СвойстваЗадачи.ПериодСобытия;
	КонецЕсли;
	
КонецФункции

Функция ТекущаяЗадачаНалоговогоПлатежа(РеквизитыДокумента)
	
	// Задача для документа уже может присутствовать в служебном регистре ЗадачиБухгалтераНалоговыеПлатежи.
	// Записи добавляются в регистр, когда платежные документы создаются из помощников
	// или регистрируются автоматически в качестве исполнителей налоговых платежей.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", РеквизитыДокумента.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация КАК Организация,
	|	ЗадачиБухгалтераНалоговыеПлатежи.Правило КАК Правило,
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия КАК ПериодСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Задача = НоваяЗадачаСвязаннаяСПлатежом();
		ЗаполнитьЗначенияСвойств(Задача, Выборка);
		
		Возврат Задача;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НоваяЗадачаНалоговогоПлатежа(РеквизитыДокумента, ПредыдущаяЗадача, ПараметрыРасчетаСтатусов)
	
	// Если платеж еще не зарегистрирован в регистре ЗадачиБухгалтераНалоговыеПлатежи,
	// или для данного налога поддерживается обновление задач при любом изменении платежа -
	// определим свойства новой задачи, которую исполнит документ.
	
	ТребуетсяОбновитьЗадачу = (ПредыдущаяЗадача = Неопределено)
		Или (ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыДокумента.ВидНалога)
			И Не ЭтоПлатежноеПоручениеНаОснованииСписанияСоСчета(РеквизитыДокумента));
	
	// Если задача выполняется из помощника, то она уже зарегистрирована в регистре ЗадачиБухгалтераНалоговыеПлатежи.
	// В таком случае не нужно искать новую задачу и регистрировать новую связь с документом.
	// Кроме того, если не изменились ключевые реквизиты, влияющие на связь между документом и задачей,
	// в таком случае тоже не нужно искать связанную с документом задачу.
	
	ПропуститьОбновлениеЗадачи = ПредыдущаяЗадача <> Неопределено
		И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыРасчетаСтатусов, "ПропуститьОбновлениеСвязиДокументЗадача", Ложь);
	
	Если Не ТребуетсяОбновитьЗадачу Или ПропуститьОбновлениеЗадачи Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредыдущееПравило       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредыдущаяЗадача, "Правило", Неопределено);
	ПредыдущийПериодСобытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредыдущаяЗадача, "ПериодСобытия", Неопределено);
	
	НовыйПериодСобытия = ПериодСобытияПлатежа(РеквизитыДокумента, ПредыдущееПравило, ПредыдущийПериодСобытия);
	
	ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
		РеквизитыДокумента.Организация, РеквизитыДокумента.ВидНалога, НовыйПериодСобытия);
	
	Если ПорядокУплаты = Неопределено Тогда
		// Для платежа с данными реквизитами исполняемая задача отсутствует.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяЗадача = НоваяЗадачаСвязаннаяСПлатежом();
	
	НоваяЗадача.Организация   = РеквизитыДокумента.Организация;
	НоваяЗадача.Правило       = ПорядокУплаты.Правило;
	НоваяЗадача.ПериодСобытия = ПорядокУплаты.ПериодСобытия;
	НоваяЗадача.Действие      = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
	
	Возврат НоваяЗадача;
	
КонецФункции

Функция ПериодСобытияПлатежа(РеквизитыДокумента, ПравилоДоИзменения, ПериодСобытияДоИзменения)
	
	Перем ДатаСобытия;
	
	Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(РеквизитыДокумента.ПоказательПериода) Тогда
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(РеквизитыДокумента.ПоказательПериода);
		
		ДатаСобытия   = ОписаниеПериода.Дата;
		Периодичность = ПериодичностьПоПоказателюПериода(ОписаниеПериода.Периодичность);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.НалоговыйПериод) Тогда
		
		ДатаСобытия   = РеквизитыДокумента.НалоговыйПериод;
		Периодичность = ПериодичностьУплатыНалогаВзноса(
			РеквизитыДокумента.ВидНалога,
			РеквизитыДокумента.Организация,
			РеквизитыДокумента.НалоговыйПериод);
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносыВФСС(РеквизитыДокумента.ВидНалога)
		И УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата) Тогда
		
		// Добровольные взносы ИП в ФСС уплачиваются в течение страхового года.
		ДатаСобытия = РеквизитыДокумента.Дата;
		Периодичность = Перечисления.Периодичность.Год;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(РеквизитыДокумента.ВидНалога) Тогда
		
		Если Не ЗначениеЗаполнено(ПериодСобытияДоИзменения) Тогда
			
			// Платеж создан не из помощника.
			// При ежеквартальной уплате в пределах года платеж регистрируется тем кварталом, в котором он создан.
			// Если же платеж оформлен в следующем году - он регистрируется в последнем квартале оплачиваемого страхового года.
			ДатаСобытия = Мин(КонецГода(ДатаСобытия), КонецКвартала(РеквизитыДокумента.Дата));
			
		ИначеЕсли (Год(ДатаСобытия) = Год(ПериодСобытияДоИзменения))
			И (ЗначениеЗаполнено(ПравилоДоИзменения)
				И ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(ПравилоДоИзменения)) Тогда
			
			// Платежи по фиксированным взносам могут уплачиваться ежеквартально - сведения о квартале хранятся в ЗадачиБухгалтераНалоговыеПлатежи.
			// Но показатель периода или налоговый период в документах содержат информацию только о страховом годе.
			// Поэтому в случае, если налог не менялся и страховой год в реквизитах платежа остался прежним,
			// период события для фиксированных взносов не обновляем.
			Возврат ПериодСобытияДоИзменения;
			
		КонецЕсли;
		
		Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
			РеквизитыДокумента.Организация, ДатаСобытия);
		
	КонецЕсли;
	
	Возврат РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(Периодичность, ДатаСобытия);
	
КонецФункции

Процедура ДополнитьЗадачиОплатыПатента(ЗадачаПлатежа, ТаблицаЗадач)
	
	Если ЗадачаПлатежа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// При изменении платежа по патенту в периоде действия вычета по онлайн-кассам
	// могут измениться статусы всех задач, связанных с данным патентом.
	
	Если ТипЗнч(ЗадачаПлатежа.Правило) = Тип("СправочникСсылка.Патенты")
		И УчетПСН.ПрименяетсяВычетПоОнлайнКассам(ЗадачаПлатежа.Организация, ЗадачаПлатежа.ПериодСобытия) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ЗадачиУплатыПатента(ЗадачаПлатежа.Организация, ЗадачаПлатежа.Правило),
			ТаблицаЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьЗадачиУплатыФиксированныхВзносов(ТаблицаЗадач)
	
	ПериодыУплатыВзносов = Новый ТаблицаЗначений;
	ПериодыУплатыВзносов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПериодыУплатыВзносов.Колонки.Добавить("СтраховойГод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ИдентификаторПравилаВзносыСДоходов = ИдентификаторПравилаСтраховыеВзносыИПСДоходов();
	
	СтраховыеПериоды = Новый Массив;
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Если ТипЗнч(Задача.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")
			И ПравилоВыполняетсяПомощникомРасчетСтраховыхВзносовИП(Задача.Правило)
			И Не Задача.Правило.Код = ИдентификаторПравилаВзносыСДоходов Тогда
			
			НоваяСтрока = ПериодыУплатыВзносов.Добавить();
			НоваяСтрока.Организация  = Задача.Организация;
			НоваяСтрока.СтраховойГод = КонецГода(Задача.ПериодСобытия); // Взносы с доходов уплачиваются всегда за полный год.
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПериодыУплатыВзносов.Свернуть(ИменаКолонокСтрокой(ПериодыУплатыВзносов.Колонки));
	
	ОтборПравила = Новый Структура;
	ОтборПравила.Вставить("Задача", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	ОтборПравила.Вставить("Уплата", ИдентификаторПравилаВзносыСДоходов);
	
	Для Каждого ПериодУплаты Из ПериодыУплатыВзносов Цикл
		
		Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			ПериодУплаты.Организация,
			ОтборПравила,
			ПериодУплаты.СтраховойГод,
			Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога);
		
		ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Уплата", Неопределено);
		
		Если ПорядокУплаты <> Неопределено Тогда
			
			НоваяЗадача = ТаблицаЗадач.Добавить();
			
			НоваяЗадача.Организация   = ПериодУплаты.Организация;
			НоваяЗадача.Правило       = ПорядокУплаты.Правило;
			НоваяЗадача.ПериодСобытия = ПорядокУплаты.ПериодСобытия;
			НоваяЗадача.Действие      = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОргане(ТаблицаЗадач, РеквизитыДокумента)
	
	// Для задач уплаты местных налогов РегистрацияВНалоговомОргане должна быть заполнена.
	// Для других задач РегистрацияВНалоговомОргане должна быть пустой.
	// С такими значениями задачи записываются в регистр ЗадачиБухгалтера.
	// Соответственно, при поиске задач это нужно учесть.
	
	КодыЗадачМестныхНалогов = РегистрыСведений.ПорядокУплатыНалоговНаМестах.КодыНалоговПорядокКоторыхУстанавливаетсяНаМестах();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		ИдентификаторыПравила
			= Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Задача.Правило);
		
		Если ИдентификаторыПравила <> Неопределено
			И КодыЗадачМестныхНалогов.Найти(ИдентификаторыПравила.ИдентификаторЗадачи) <> Неопределено Тогда
			
			Задача.РегистрацияВНалоговомОргане =
				Документы.ПлатежноеПоручение.РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(
					РеквизитыДокумента.Организация, РеквизитыДокумента.Контрагент, РеквизитыДокумента.КПППлательщика);
			
		Иначе
			
			Задача.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоУплатаНалога(ВидОперацииДокумента)
	
	Возврат ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийРКО.УплатаНалога;
	
КонецФункции

Функция ЭтоВыплатаЗарплаты(ВидОперацииДокумента)
	
	Возврат ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
	
КонецФункции

Функция ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(ВидНалога)
	
	// Сейчас для большинства налогов действуют ограничения:
	//  - регистрируются в исполнении задач только платежи, содержащие бюджетные реквизиты (показатель периода и т.п.);
	//  - при изменении реквизитов платежа исполняемая задача и ее статус не обновляются.
	
	// В данной функции проверяются налоги-исключения, для которых ограничения сняты.
	
	ВидыНалоговСАвтообновлениемЗадач = ВидыНалоговСПоддержкойАвтообновленияСвязанныхЗадач();
	
	Возврат ВидыНалоговСАвтообновлениемЗадач.Найти(ВидНалога) <> Неопределено;
	
КонецФункции

Функция ВидыНалоговСПоддержкойАвтообновленияСвязанныхЗадач()
	
	// Для указанных налогов поддерживается обновление исполняемой задачи и ее статуса
	// при вводе и изменении любого платежа, кроме ручной операции.
	
	ВидыНалогов = Новый Массив;
	
	// УСН
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыНалогов,
		ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН());
	
	// Фиксированные страховые взносы ИП
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыНалогов,
		ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговФиксированныеВзносы());
	
	// НДФЛ ИП
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ИП"));
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины"));
	
	Возврат ВидыНалогов;
	
КонецФункции

Функция НоваяЗадачаСвязаннаяСПлатежом()
	
	ТаблицаЗадач = НоваяТаблицаЗадачСвязанныхСПлатежами();
	СтрокаЗадачи = ТаблицаЗадач.Добавить();
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаЗадачи);
	
КонецФункции

Функция НоваяТаблицаЗадачСвязанныхСПлатежами()
	
	ТаблицаЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	ТаблицаЗадач.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера"));
	
	Возврат ТаблицаЗадач;
	
КонецФункции

#КонецОбласти

#Область ПлатежныйКалендарь

Функция ЗадачиДляКалендаря(Организация, РабочаяДата, ГоризонтПланирования)
	
	Запрос = Новый Запрос;
	
	ИдентификаторыЗадачЗарплаты = Новый Массив;
	ИдентификаторыЗадачЗарплаты.Добавить("НДФЛ_Уплата");
	ИдентификаторыЗадачЗарплаты.Добавить("НДФЛ_Агент_Уплата");
	
	ИдентификаторыЗадачЗарплатыАванс = Новый Массив;
	ИдентификаторыЗадачЗарплатыАванс.Добавить("Аванс");
	
	ДоступныеОрганизации = Справочники.Организации.ДоступныеОрганизацииДляОтбора(Организация);
	
	Запрос.УстановитьПараметр("СписокОрганизаций",           ДоступныеОрганизации);
	Запрос.УстановитьПараметр("РабочаяДата",                 РабочаяДата);
	Запрос.УстановитьПараметр("ГоризонтПланирования",        ГоризонтПланирования);
	Запрос.УстановитьПараметр("СтатусыВыполненныхЗадач",     СтатусыВыполненныхЗадач());
	Запрос.УстановитьПараметр("ИдентификаторыЗадачЗарплаты", ИдентификаторыЗадачЗарплаты);
	Запрос.УстановитьПараметр("ИдентификаторыЗадачЗарплатыАванс", ИдентификаторыЗадачЗарплатыАванс);
	Запрос.УстановитьПараметр("УчетЗарплатыСредствамиБухгалтерии", ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии"));
	Запрос.УстановитьПараметр("ПредыдущийМесяц", ДобавитьМесяц(НачалоМесяца(РабочаяДата), -1));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.НачалоВыполнения
	|ПОМЕСТИТЬ ЗадачиИзСписка
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Срок МЕЖДУ &РабочаяДата И &ГоризонтПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.НачалоВыполнения
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве
	|	И НЕ ЗадачиБухгалтера.Статус В(&СтатусыВыполненныхЗадач)
	|	И ЗадачиБухгалтера.Срок < &РабочаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка,
	|	Правила.Владелец КАК Задача,
	|	Правила.Владелец.Наименование КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Код КАК ИдентификаторПравила,
	|	Правила.Описание,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС
	|ПОМЕСТИТЬ ПравилаУплатыНалогов
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|	И НЕ Правила.Код В (&ИдентификаторыЗадачЗарплаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка,
	|	Правила.Владелец КАК Задача,
	|	Правила.Владелец.Наименование КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Код КАК ИдентификаторПравила,
	|	Правила.Описание,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС,
	|	ЛОЖЬ КАК ЭтоАванс
	|ПОМЕСТИТЬ ПравилаВыплатыЗарплаты
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
	|	И Правила.Код В(&ИдентификаторыЗадачЗарплаты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Правила.Ссылка,
	|	Правила.Владелец КАК Задача,
	|	Правила.Владелец.Наименование КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Код КАК ИдентификаторПравила,
	|	Правила.Описание,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС,
	|	ИСТИНА КАК ЭтоАванс
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	&УчетЗарплатыСредствамиБухгалтерии
	|	И НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
	|	И Правила.Код В(&ИдентификаторыЗадачЗарплатыАванс)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Патенты.Владелец КАК Организация,
	|	Патенты.Ссылка
	|ПОМЕСТИТЬ Патенты
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.Владелец В(&СписокОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Организация,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Периодичность,
	|	РегулярныеПлатежи.ПериодСобытия,
	|	РегулярныеПлатежи.ПлатежноеПоручение
	|ПОМЕСТИТЬ РегулярныеПлатежи
	|ИЗ
	|	Справочник.ПравилаРегулярныхПлатежей КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО Правила.Ссылка = РегулярныеПлатежи.Правило
	|			И Правила.Организация = РегулярныеПлатежи.Организация
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Выполняется
	|	И Правила.Организация В(&СписокОрганизаций)
	|	И РегулярныеПлатежи.ПериодСобытия <= &ГоризонтПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.Периодичность,
	|	ВЫБОР
	|		КОГДА ЗадачиИзСписка.ПериодСобытия = РегулярныеПлатежиПодходитПериод.ПериодСобытия
	|			ТОГДА РегулярныеПлатежиПодходитПериод.ПлатежноеПоручение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ЗадачиИзСписка.ПериодСобытия = РегулярныеПлатежиПодходитПериод.ПериодСобытия
	|			ТОГДА РегулярныеПлатежиПодходитПериод.ПлатежноеПоручение
	|		ИНАЧЕ РегулярныеПлатежи.ПлатежноеПоручение
	|	КОНЕЦ КАК ПлатежноеПоручение
	|ПОМЕСТИТЬ РегулярныеПлатежиСПлатежкой
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО (РегулярныеПлатежи.Правило = ЗадачиИзСписка.Правило)
	|			И (РегулярныеПлатежи.Организация = ЗадачиИзСписка.Организация)
	|			И (РегулярныеПлатежи.ПериодСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегулярныеПлатежи КАК РегулярныеПлатежиПодходитПериод
	|		ПО (РегулярныеПлатежиПодходитПериод.Правило = ЗадачиИзСписка.Правило)
	|			И (РегулярныеПлатежиПодходитПериод.Организация = ЗадачиИзСписка.Организация)
	|			И (РегулярныеПлатежиПодходитПериод.ПериодСобытия = ЗадачиИзСписка.ПериодСобытия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегулярныеПлатежи.Организация,
	|	РегулярныеПлатежи.ДатаПлатежа,
	|	РегулярныеПлатежи.Просрочен,
	|	РегулярныеПлатежи.Правило,
	|	РегулярныеПлатежи.ПериодСобытия,
	|	РегулярныеПлатежи.Периодичность,
	|	РегулярныеПлатежи.ПлатежныйДокумент,
	|	РегулярныеПлатежи.ПлатежноеПоручение,
	|	РегулярныеПлатежи.ПлатежноеПоручение.Контрагент КАК Расшифровка,
	|	РегулярныеПлатежи.ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	РегулярныеПлатежи.ПлатежноеПоручение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РегулярныеПлатежи.ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	""Регулярный платеж"" КАК Описание,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУплатыНалогов.БанковскийПеревод) КАК СпособОплаты,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегулярныеПлатежиСПлатежкой КАК РегулярныеПлатежи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие,
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Наименование КАК НаименованиеЗадачиИзСписка,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане,
	|	Правила.Задача,
	|	Правила.НаименованиеЗадачиБухгалтера КАК Расшифровка,
	|	Правила.НаименованиеЗадачиБухгалтера,
	|	Правила.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Правила.Задача.Код КАК ИдентификаторЗадачи,
	|	Правила.Описание КАК ОписаниеПравила,
	|	Правила.ЕстьИнформацияНаИТС,
	|	ЗадачиИзСписка.НачалоВыполнения
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаУплатыНалогов КАК Правила
	|		ПО ЗадачиИзСписка.Правило = Правила.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога),
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок < &РабочаяДата,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане,
	|	NULL,
	|	""Патент"",
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗадачиИзСписка.НачалоВыполнения
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Патенты КАК Патенты
	|		ПО ЗадачиИзСписка.Организация = Патенты.Организация
	|			И ЗадачиИзСписка.Правило = Патенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие,
	|	ВЫБОР
	|		КОГДА Правила.ЭтоАванс
	|			ТОГДА ЕСТЬNULL(ВыплаченныеАвансы.СуммаКВыплатеРасход, 0)
	|		ИНАЧЕ ЕСТЬNULL(НачисленныеСуммы.СуммаОборотКт, 0) - ЕСТЬNULL(ВыплаченныеАвансы.СуммаКВыплатеРасход, 0)
	|	КОНЕЦ КАК Сумма,
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Наименование КАК НаименованиеЗадачиИзСписка,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане,
	|	Правила.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Правила.Задача.Код КАК ИдентификаторЗадачи,
	|	Правила.Задача,
	|	ВЫБОР
	|		КОГДА Правила.ЭтоАванс
	|			ТОГДА ""Зарплата, аванс""
	|		ИНАЧЕ ""Зарплата""
	|	КОНЕЦ КАК Расшифровка,
	|	Правила.НаименованиеЗадачиБухгалтера,
	|	Правила.Описание КАК ОписаниеПравила,
	|	Правила.ЕстьИнформацияНаИТС,
	|	Правила.ЭтоАванс
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаВыплатыЗарплаты КАК Правила
	|		ПО ЗадачиИзСписка.Правило = Правила.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ПредыдущийМесяц, , Месяц, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда), , Организация В (&СписокОрганизаций), , ) КАК НачисленныеСуммы
	|		ПО ЗадачиИзСписка.Организация = НачисленныеСуммы.Организация
	|			И (НАЧАЛОПЕРИОДА(ЗадачиИзСписка.ПериодСобытия, МЕСЯЦ) = НачисленныеСуммы.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаКВыплатеАвансом.Обороты(&ПредыдущийМесяц, , , Организация В (&СписокОрганизаций)) КАК ВыплаченныеАвансы
	|		ПО ЗадачиИзСписка.Организация = ВыплаченныеАвансы.Организация
	|			И (НАЧАЛОПЕРИОДА(ЗадачиИзСписка.ПериодСобытия, МЕСЯЦ) = ВыплаченныеАвансы.ПериодВзаиморасчетов)
	|			И &УчетЗарплатыСредствамиБухгалтерии";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗадачиБухгалтера = Новый Структура;
	
	ЗадачиБухгалтера.Вставить("РегулярныеПлатежи", РезультатЗапроса[6].Выгрузить());
	ЗадачиБухгалтера.Вставить("УплатаНалогов",     РезультатЗапроса[7].Выгрузить());
	ЗадачиБухгалтера.Вставить("Зарплата",          РезультатЗапроса[8].Выгрузить());
	
	Возврат ЗадачиБухгалтера;
	
КонецФункции

Функция РегулярныеПлатежи(ТаблицаЗадач)
	
	РегулярныеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Платеж = РегулярныеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
	КонецЦикла;
	
	Возврат РегулярныеПлатежи;
	
КонецФункции

Функция ЗарплатныеПлатежи(ТаблицаЗадач)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", ТаблицаЗадач);
	Запрос.УстановитьПараметр("СпособВыплатыЗарплата", Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию());
	Запрос.УстановитьПараметр("СпособВыплатыАванс", Справочники.СпособыВыплатыЗарплаты.Аванс());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Правило,
	|	Задачи.Организация,
	|	НАЧАЛОПЕРИОДА(Задачи.ПериодСобытия, МЕСЯЦ) КАК ПериодРегистрации,
	|	Задачи.ЭтоАванс
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Правило КАК Правило,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ведомость,
	|	Задачи.Организация,
	|	Задачи.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ Ведомости
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО Задачи.Организация = ВедомостьНаВыплатуЗарплатыВБанк.Организация
	|			И (Задачи.ПериодРегистрации = НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ))
	|			И ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты = &СпособВыплатыЗарплата
	|ГДЕ
	|	НЕ Задачи.ЭтоАванс
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задачи.Правило КАК Правило,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ведомость,
	|	Задачи.Организация,
	|	Задачи.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО Задачи.Организация = ВедомостьНаВыплатуЗарплатыВБанк.Организация
	|			И (Задачи.ПериодРегистрации = НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ))
	|			И ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты = &СпособВыплатыАванс
	|ГДЕ
	|	Задачи.ЭтоАванс
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Правило КАК Правило,
	|	Ведомости.Организация,
	|	Ведомости.ПериодРегистрации КАК Период
	|ИЗ
	|	Ведомости КАК Ведомости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО (Ведомости.Ведомость = ПлатежноеПоручение.ДокументОснование
	|				ИЛИ Ведомости.Ведомость = ПлатежноеПоручение.ПлатежнаяВедомость)
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведомости.Правило,
	|	Ведомости.Организация,
	|	Ведомости.ПериодРегистрации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПериодыЕстьПлатежка = РезультатЗапроса.Выгрузить();
	
	ЗарплатныеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Платеж = ЗарплатныеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
		Если Платеж.Сумма = 0 И НЕ ЗначениеЗаполнено(Платеж.Примечание) Тогда
			Платеж.Примечание = РекомендацияПоНачислениюЗарплаты(Задача.Организация, Задача.ПериодСобытия, Задача.ЭтоАванс);
		КонецЕсли;
		
		Если Платеж.Сумма <> 0 И ПериодыЕстьПлатежка.Количество() <> 0 Тогда
			
			ПараметрыОтбора = Новый Структура("Правило, Организация, Период",
				Задача.Правило, Задача.Организация, НачалоМесяца(Задача.ПериодСобытия));
			
			Платеж.ЕстьПлатежныйДокумент = ПериодыЕстьПлатежка.НайтиСтроки(ПараметрыОтбора).Количество() <> 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗарплатныеПлатежи;
	
КонецФункции

Функция НалоговыеПлатежи(ТаблицаЗадач)
	
	НалоговыеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из ТаблицаЗадач Цикл
		
		Платеж = НалоговыеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.Расшифровка = ВРег(Лев(Платеж.Расшифровка, 1)) + Сред(Платеж.Расшифровка, 2);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		Если Задача.Просрочен Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
		ИмяЗадачи = Задача.ИдентификаторЗадачи;
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Задача.Правило);
		
		Если ИмяЗадачи = "СтраховыеВзносы" Тогда
			
			ДополнитьПлатежУплатаСтраховыхВзносов(Платеж, Задача);
			
		ИначеЕсли ПолноеИмяПравила = "ТранспортныйНалог.2013_УплатаАванс"
			Или ПолноеИмяПравила = "ЗемельныйНалог.2013_Аванс" 
			Или ПолноеИмяПравила = "ЗемельныйНалог.2015_Аванс" 
			Или ПолноеИмяПравила = "НалогНаИмущество.2013_Аванс" Тогда
			
			ДополнитьПлатежУплатаАвансовПоИмущественнымНалогам(Платеж, Задача);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			ДополнитьПлатежУплатаСтраховыхВзносовИП(Платеж, Задача);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Задача.Правило) Тогда
			
			ДополнитьПлатежУплатаНалогаУСН(Платеж, Задача);
			
		ИначеЕсли ПолноеИмяПравила = "ТорговыйСбор.2015_Уплата" Тогда
			
			ДополнитьПлатежУплатаТорговогоСбора(Платеж, Задача);
			
		ИначеЕсли ТипЗнч(Задача.Правило) = Тип("СправочникСсылка.Патенты") Тогда
			
			ДополнитьПлатежОплатаПатента(Платеж, Задача);
			
		ИначеЕсли ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ПолноеИмяПравила) Тогда
			
			ДополнитьПлатежПоДаннымДекларации(Платеж, Задача);
			
		КонецЕсли;
		
		Если Платеж.Сумма = 0 И НЕ ЗначениеЗаполнено(Платеж.Примечание) Тогда
			Платеж.Примечание = НСтр("ru = 'Нет данных для определения суммы платежа'");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НалоговыеПлатежи;
	
КонецФункции

Процедура ДополнитьПлатежПоДаннымДекларации(ПлатежПоЗадаче, Задача)
	
	Срок                        = Задача.ДатаПлатежа;
	Правило                     = Задача.Правило;
	Организация                 = Задача.Организация;
	ПериодСобытия               = Задача.ПериодСобытия;
	РегистрацияВНалоговомОргане = Задача.РегистрацияВНалоговомОргане;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ПолноеИмяПравила  = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ПоказательПериода = ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации  = ДанныеДляУплатыНалогаПоДекларации(Правило, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода);
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// В примечании надо указать на то, что нет декларации.
		
		ШаблонТекста = НСтр("ru = 'Рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|Тогда будет возможно определить сумму платежа.'");
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, КонецБазовогоПериода));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ПлатежПоЗадаче.Примечание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		
		Возврат;
		
	КонецЕсли;
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(ДанныеДекларации.Платежи);
	ПлатежПоЗадаче.Сумма = ДанныеДекларации.Платежи.Итог("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаАвансовПоИмущественнымНалогам(ПлатежПоЗадаче, Задача)
	
	Срок          = Задача.Срок;
	Организация   = Задача.Организация;
	Правило       = Задача.Правило;
	ПериодСобытия = Задача.ПериодСобытия;
	
	Платежи = ДанныеДляУплатыИмущественныхНалогов(Правило, Организация, ПериодСобытия, Срок, Задача.РегистрацияВНалоговомОргане);
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(Платежи);
	ПлатежПоЗадаче.Сумма = Платежи.Итог("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаСтраховыхВзносов(ПлатежПоЗадаче, Задача)
	
	Организация   = Задача.Организация;
	ПериодСобытия = Задача.ПериодСобытия;
	Правило       = Задача.Правило;
	
	Если НЕ ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия) Тогда
		
		ПлатежПоЗадаче.Примечание = РекомендацияПоНачислениюЗарплаты(Организация, ПериодСобытия);
		
		Возврат; // начислений нет.
	КонецЕсли;
	
	Платежи = ДанныеДляУплатыСтраховыхВзносов(Правило, Организация, ПериодСобытия);
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(Платежи);
	ПлатежПоЗадаче.Сумма = Платежи.Итог("Сумма")
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаСтраховыхВзносовИП(ПлатежПоЗадаче, Задача)
	
	Организация   = Задача.Организация;
	Период        = Задача.ПериодСобытия;
	Периодичность = Задача.Периодичность;
	ТекущаяДата   = ОбщегоНазначения.ТекущаяДатаПользователя();
		
	Если ЭтоОплатаНалогаЗаПрошлыйПериод(ПлатежПоЗадаче.ПараметрыКоманды)
		И УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДата) Тогда
		
		ПлатежПоЗадаче.Сумма = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ЗадолженностьПоНалогамВзносамЗаПрошлыйПериод(Задача);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Платежи
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.Дата >= &ДатаНачалаОбзора
		|	И ПлатежноеПоручение.Проведен
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.Организация = &Организация
		|	И ПлатежноеПоручение.ВидОперации = &ВидОперации
		|	И ПлатежноеПоручение.СуммаДокумента > 0
		|	И ПОДСТРОКА(ПлатежноеПоручение.ПоказательПериода, 0, 5) = ""ГД.00""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
		|ИЗ
		|	ВТ_Платежи КАК ПлатежныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
		|		ПО ПлатежныйДокумент.Ссылка = ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение
		|ГДЕ
		|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
		|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
		|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило");
		
		Запрос.УстановитьПараметр("Правило", Задача.Правило);
		Запрос.УстановитьПараметр("ПериодСобытия", Период);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
		Запрос.УстановитьПараметр("ДатаНачалаОбзора", Дата(Год(ТекущаяДата) - 3, 1, 1));
		
	Иначе
		
		// Фиксированная часть страховых взносов
		Взносы = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
			Организация, Период, Периодичность);
		
		// Страховые взносы, исчисленные с суммы доходов
		СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
			Организация, НачалоГода(Период), КонецКвартала(Период));
			
		СтраховыеВзносы = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
			Организация, Период, СтруктураДоходов, Ложь);
		
		ПлатежПоЗадаче.Сумма = Взносы.СуммаВзносаПФР + Взносы.СуммаВзносаФФОМС
			+ Взносы.СуммаВзносаФСС + СтраховыеВзносы.СуммаВзносаПФРсДоходов;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.Организация = &Организация
		|	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, КВАРТАЛ) = &НачалоВыполнения
		|	И ПлатежноеПоручение.Налог.ВидНалога В(&ВидыНалогов)";
		
		ВидыНалогов = Новый Массив;
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
		
		Запрос.УстановитьПараметр("ВидыНалогов", ВидыНалогов);
		Запрос.УстановитьПараметр("НачалоВыполнения", Задача.НачалоВыполнения);
		
	КонецЕсли;
		
	Если ПлатежПоЗадаче.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск платежного поручения
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаНалогаУСН(ПлатежПоЗадаче, Задача)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация = Задача.Организация;
	ПараметрыПроверки.Период      = КонецКвартала(Задача.ПериодСобытия);
	ПараметрыПроверки.АктуализироватьВесьПериод = Истина;
	
	Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне(ПараметрыПроверки, АдресХранилища);
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не РезультатПроверки.ТребуетсяАктуализация Тогда
		
		Показатели = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(Задача.Организация, Задача.ПериодСобытия);
		
		ПлатежПоЗадаче.Сумма = Показатели.НалогКУплате;
		
		ДокументыУплатыНалога = Обработки.ПомощникРасчетаНалогаУСН.ДокументыУплатыНалогов(
			Задача.Организация, Задача.ПериодСобытия, Задача.Правило);
		
		ЕстьПлатежноеПоручение = Ложь;
		Для Каждого Платеж Из ДокументыУплатыНалога Цикл
			Если ТипЗнч(Платеж.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				ЕстьПлатежноеПоручение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежноеПоручение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаТорговогоСбора(ПлатежПоЗадаче, Задача)
	
	ТаблицаТорговыйСбор = ТорговыйСбор.СуммаТорговогоСбора(
	Задача.Организация, НачалоКвартала(Задача.ПериодСобытия), КонецКвартала(Задача.ПериодСобытия));
	
	ПлатежПоЗадаче.Сумма = ТаблицаТорговыйСбор.Итог("Сумма");
	
	// Поиск платежного поручения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, КВАРТАЛ) = &НачалоВыполнения
	|	И ПлатежноеПоручение.Налог.ВидНалога В(&ВидыНалогов)";
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ТорговыйСбор);
	
	Запрос.УстановитьПараметр("НачалоВыполнения", Задача.НачалоВыполнения);
	Запрос.УстановитьПараметр("Организация",      Задача.Организация);
	Запрос.УстановитьПараметр("ВидыНалогов",      ВидыНалогов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежОплатаПатента(ПлатежПоЗадаче, Задача)
	
	ДанныеПатента = Обработки.ПомощникОплатыПатента.ПоказателиПатента(Задача.Правило, Задача.Срок);
	
	// Поиск платежного поручения
	ДокументыУплатыНалога = Обработки.ПомощникОплатыПатента.ДокументыУплатыПатента(
		Задача.Организация,
		Задача.Правило,
		Задача.ПериодСобытия,
		ДанныеПатента.ВидНалога);
	
	СуммаКОплате = ДанныеПатента.ТекущийПлатеж + ДанныеПатента.ПредыдущийПлатеж - ДанныеПатента.РасходыУменьшающиеНалог;
	Оплачено = ДокументыУплатыНалога.Скопировать(Новый Структура("Оплачено", Истина), "Сумма").Итог("Сумма");
	
	ПлатежПоЗадаче.Сумма = Макс(0, СуммаКОплате - Оплачено);
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = (ДокументыУплатыНалога.НайтиСтроки(Новый Структура("Оплачено", Ложь)).Количество() > 0);
	
	Если ПлатежПоЗадаче.Сумма = 0 И СуммаКОплате <> 0 Тогда
		ПлатежПоЗадаче.Примечание = НСтр("ru = 'Оплачено'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

Функция ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия, ДокументЗарплаты = Неопределено, НесколькоДокументов = Ложь) Экспорт
	
	ОперацияВыполнена = Ложь;
	
	ИмяДокумента = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ПериодСобытия);
	Запрос.УстановитьПараметр("Документ",    ИмяДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НачислениеЗарплаты.Ссылка,
	|	НачислениеЗарплаты.Проведен КАК Проведен
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	&Документ = ""НачислениеЗарплаты""
	|	И НЕ НачислениеЗарплаты.ПометкаУдаления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И НачислениеЗарплаты.МесяцНачисления МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВБухучете.Ссылка,
	|	ОтражениеЗарплатыВБухучете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВБухучете""
	|	И НЕ ОтражениеЗарплатыВБухучете.ПометкаУдаления
	|	И ОтражениеЗарплатыВБухучете.Организация = &Организация
	|	И ОтражениеЗарплатыВБухучете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВУчете.Ссылка,
	|	ОтражениеЗарплатыВУчете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете КАК ОтражениеЗарплатыВУчете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВУчете""
	|	И НЕ ОтражениеЗарплатыВУчете.ПометкаУдаления
	|	И ОтражениеЗарплатыВУчете.Организация = &Организация
	|	И ОтражениеЗарплатыВУчете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проведен УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.Проведен Тогда
			ОперацияВыполнена = Истина;
		Иначе
			Если Выборка.Количество() = 1 Тогда
				ДокументЗарплаты = Выборка.Ссылка;
			ИначеЕсли Выборка.Количество() = 2 Тогда
				НесколькоДокументов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОперацияВыполнена;
	
КонецФункции

Функция ЕстьПлатежныйДокумент(Платежи)
	
	Если Платежи.Колонки.Найти("ПлатежноеПоручение") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеПлатежныеДокументы = Платежи.Скопировать(,"ПлатежноеПоручение");
	ВсеПлатежныеДокументы.Свернуть("ПлатежноеПоручение");
	
	Возврат ВсеПлатежныеДокументы.Количество() > 1 
		Или ВсеПлатежныеДокументы.Количество() = 1 И ЗначениеЗаполнено(ВсеПлатежныеДокументы[0].ПлатежноеПоручение);
	
КонецФункции

Функция РекомендацияПоНачислениюЗарплаты(Организация, ПериодСобытия, ЭтоАванс = Ложь)
	
	ИмяДокумента = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	Если ИмяДокумента = "НачислениеЗарплаты" Тогда
		// начисляем в БП
		Если ЭтоАванс Тогда
			Рекомендация = НСтр("ru = 'рассчитать аванс'")
		Иначе
			Рекомендация = НСтр("ru = 'начислить зарплату'");
		КонецЕсли;
		
	ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
		// загружаем из ЗУП 2.5
		
		Рекомендация = НСтр("ru = 'загрузить данные'");
		
	Иначе
		// вводим вручную
		Рекомендация = НСтр("ru = 'ввести данные'");
	КонецЕсли;
	
	ШаблонТекста = НСтр("ru = 'Рекомендуется [Рекомендация] за [Период]
		|Тогда будет возможно определить сумму платежа.'");
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Рекомендация", Рекомендация);
	ПараметрыТекста.Вставить("Период",
		КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(ПериодСобытия), КонецМесяца(ПериодСобытия)));
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецФункции

Функция ДополнитьТекстЗапросаПлатежиПоДекларации(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Декларация) КАК СвязанныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежныйДокумент
	|		ПО СвязанныеДокументы.Ссылка = ПлатежныйДокумент.Ссылка
	|			И (ПлатежныйДокумент.ПоказательПериода = &ПоказательПериода)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежныйДокумент
	|		ПО ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение = ПлатежныйДокумент.Ссылка
	|			И (ПлатежныйДокумент.ПоказательПериода = &ПоказательПериода)
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросаПлатежи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьКБКДляСверки(ИдентификаторЗадачи, Организация, Знач Период, Знач ВидыНалогов = Неопределено, Знач ВидыНалоговыхОбязательств = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ВидыНалогов) Тогда
		ВидыНалогов = РасчетыСБюджетом.ВидыНалоговПоКодуЗадачи(ИдентификаторЗадачи, Организация, Период);
	КонецЕсли;
	
	// Сформируем массив видов платежей для получения необходимого КБК.
	Если НЕ ЗначениеЗаполнено(ВидыНалоговыхОбязательств) Тогда
		ВидыНалоговыхОбязательств = Новый Массив;
		ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
		ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Проценты);
		ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
		ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	КонецЕсли;
	
	КоличествоВидов = ВидыНалогов.Количество();
	Если КоличествоВидов > 1 Тогда
		ДанныеКлассификатора = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочитатьПоставляемыеДанныеКлассификатора(Период,, Истина);
		ДанныеКлассификатора.Индексы.Добавить("ВидНалога");
	КонецЕсли;
	
	МассивКБК = Новый Массив;
	Для каждого ВидНалога Из ВидыНалогов Цикл
		Если КоличествоВидов = 1 Тогда
			// Если вид налога один, то получим данные из макета справочника.
			ДанныеПоВидуНалога = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоставляемыеДанные(ВидНалога,,, Период);
		Иначе
			// Если видов налога несколько, то получим данные из проиндексированной таблицы.
			ДанныеПоВидуНалога = ДанныеКлассификатора.Найти(ВидНалога, "ВидНалога");
		КонецЕсли;
		
		Если ДанныеПоВидуНалога = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ВидНалоговогоОбязательства Из ВидыНалоговыхОбязательств Цикл
			КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(ДанныеПоВидуНалога.КодБК, ВидНалога, ВидНалоговогоОбязательства, Период);
			
			Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КодБК) <> ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
				МассивКБК.Добавить(КодБК);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКБК);
	
КонецФункции

Функция ПредставлениеЗапросаНаСверку(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента <> Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
		И ТипДокумента <> Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда 
		Возврат "";
	КонецЕсли;
	
	СостояниеОтправки = ИнтерфейсыВзаимодействияБРО.ПредставлениеСостоянияДокумента(ДокументСсылка);
		
	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Запрос на сверку (%1)'"),
				СостояниеОтправки);
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

Функция ОписаниеДействияЖурналСчетовФактур(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Событие.Организация);
	ПараметрыФормы.Вставить("НалоговыйПериод", Событие.ПериодСобытия);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Форма.ФормаДокумента");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
КонецФункции

Функция СобытиеЖурналаРегистрации()

	Возврат НСтр("ru = 'ЗадачиБухгалтера.ВыполнениеДействия'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

// Возвращает таблицу с соответствием форм регл отчетов и идентификаторами задач и правил подготовки отчетов.
// Возвращаемое значение:
//  ТаблицаЗначений
//   ФормаОтчета          - Строка
//   ИдентификаторПравила - Строка
//   ИдентификаторЗадачи  - Строка
//
Функция СоответствияПравилИФормОтчетов() Экспорт
	
	СоответствияПравилИФормОтчетов = НоваяТаблицаСоответствияПравилИФормОтчетов();
	
	Для Каждого ОтчетПравило Из ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиТребований() Цикл
		
		НоваяСтрока = СоответствияПравилИФормОтчетов.Добавить();
		НоваяСтрока.ФормаОтчета = ОтчетПравило.Значение;
		
		ЭлементыИмени = СтрРазделить(ОтчетПравило.Ключ, ".");
		ЭлементыИмени.Добавить(""); // На случай отсутствия имени правила в ключе.
		
		НоваяСтрока.ИдентификаторЗадачи  = ЭлементыИмени[0];
		НоваяСтрока.ИдентификаторПравила = ЭлементыИмени[1];
		
		НоваяСтрока.ИмяИсточника = НоваяСтрока.ФормаОтчета;
		
	КонецЦикла;
	
	Возврат СоответствияПравилИФормОтчетов;
	
КонецФункции

Функция ТекущееПравилоЗадачи(ИдентификаторЗадачи, ПериодРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", ИдентификаторЗадачи);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИдентификаторЗадачи
	|	И ВЫБОР
	|			КОГДА ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) = 1
	|					ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия >= &Период
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|			ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ЗадачиУплатыПатента(Организация, ОтборПатент)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ОтборПатент) = Тип("СправочникСсылка.Патенты") Тогда
		Патенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборПатент);
	ИначеЕсли ТипЗнч(ОтборПатент) = Тип("Массив") Тогда
		Патенты = ОтборПатент;
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Патенты",     Патенты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В(&Патенты)
	|	И НЕ ЗадачиБухгалтера.ВАрхиве";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает периодичность для периодичности из показателя периода платежного поручения.
//
// Параметры:
//  ПериодичностьИзПоказателяПериода - Строка
//
// Возвращаемое значение:
//  Периодичность - ПеречислениеСсылка.Периодичность
//
Функция ПериодичностьПоПоказателюПериода(ПериодичностьИзПоказателяПериода) Экспорт
	
	Периодичность = Перечисления.Периодичность.ПустаяСсылка();
	
	Если ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал() Тогда
		
		Периодичность = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьГод() Тогда
		
		Периодичность = Перечисления.Периодичность.Год;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц() Тогда
		
		Периодичность = Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПериодичностьПолугодие() Тогда
		
		Периодичность = Перечисления.Периодичность.Полугодие;
		
	ИначеЕсли ПериодичностьИзПоказателяПериода = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() Тогда
		
		Периодичность = Перечисления.Периодичность.День;
		
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции

Функция ПравилоВыплатыЗарплатыАванс()
	
	ПравилоАванс = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторАванса", "Аванс");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код = &ИдентификаторАванса
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПравилоАванс = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПравилоАванс;
	
КонецФункции

Функция НоваяТаблицаСоответствияПравилИФормОтчетов()
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	
	ТаблицаПравил.Колонки.Добавить("ФормаОтчета",          ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПравил.Колонки.Добавить("ИдентификаторПравила", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПравил.Колонки.Добавить("ИдентификаторЗадачи",  ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПравил.Колонки.Добавить("ИмяИсточника",         ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	// В некоторых случаях несколько задач может выполняться одним объектом.
	// При этом, принадлежность к конкретной задачи может зависеть от значений реквизитов объекта.
	// К примеру, правила НДФЛ_Агент.2013_2НДФЛ и НДФЛ_Агент.2016_2НДФЛ_Неудержанный
	// выполняются одним документом и разделяются значениями реквизита "ОснованиеДляПредставленияСправок" документа.
	// "УсловиеПроверки" описывает дополнительную проверку, которую можно выполнить запросом к данным объекта.
	ТаблицаПравил.Колонки.Добавить("СложноеУсловиеПроверки", Новый ОписаниеТипов("Булево"));
	ТаблицаПравил.Колонки.Добавить("УсловиеПроверки",        ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ТаблицаПравил;
	
КонецФункции

Функция ПериодичностьУплатыНалогаВзноса(ВидНалога, Организация, Период)
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(ВидНалога) Тогда
		
		Возврат Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ВидНалога) Тогда
		
		Возврат УчетУСН.ПериодичностьНалоговогоПлатежа(Период);
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
		
		Возврат УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоОбязательныеСтраховыеВзносы(ВидНалога) Тогда
		
		Возврат Перечисления.Периодичность.Месяц;
		
	ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоТорговыйСбор(ВидНалога) Тогда
		
		Возврат Перечисления.Периодичность.Квартал;
		
	ИначеЕсли УчетДенежныхСредствКлиентСервер.ЭтоУплатаНалогаНаПрибыль(ВидНалога) Тогда
		
		Возврат НалоговыйУчет.ПериодичностьУплатыНалога(Период, Организация);
		
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.НДС Тогда
		
		Возврат Перечисления.Периодичность.Квартал;
		
	Иначе
		
		Возврат ПериодичностьУплатыНалогаПоУмолчанию();
		
	КонецЕсли;
	
КонецФункции

Функция ПериодичностьУплатыНалогаПоУмолчанию()
	
	Возврат Перечисления.Периодичность.Квартал;
	
КонецФункции

Функция ИменаКолонокСтрокой(КолонкиТаблицы)
	
	ИменаКолонок = Новый Массив;
	
	Для Каждого Колонка Из КолонкиТаблицы Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат СтрСоединить(ИменаКолонок, ",");
	
КонецФункции

Процедура ЗанестиСведенияОНарушенииСрокаПодачиРегламентированногоОтчета(Документ, ТекущийДень)
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Документ.Метаданные()) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОтчетностьСНарушеннымСрокомПодачи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.РегламентированныйОтчет = Документ;
	МенеджерЗаписи.Дата = ТекущийДень;
	МенеджерЗаписи.Записать();
		
КонецПроцедуры

// Возвращает код задачи по правилу представления отчетов, уплаты налогов
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило, по которому вычисляется код задачи
//
// Возвращаемое значение:
//   Строка
//
Функция КодЗадачиПоПравилу(Правило)
	
	Идентификаторы = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Правило);
	
	Если Идентификаторы = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Идентификаторы.ИдентификаторЗадачи;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПлатежей

Процедура УстановитьСвойстваПлатежаПриРегистрации(ДокументОбъект, Правило, ПериодСобытия, ПропуститьОбновлениеСтатуса = Ложь) Экспорт
	
	Если НЕ ДокументВыполняетЗадачу(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Правило) ИЛИ НЕ ЗначениеЗаполнено(ПериодСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПравилоУплатыНалогов", Правило);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПериодСобытияКалендаря", ПериодСобытия);
	
	Если ПропуститьОбновлениеСтатуса Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеСтатусаЗадачи");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюПлатежа(ДокументОбъект) Экспорт
	
	Если Не ДокументВыполняетЗадачу(ДокументОбъект) Или ДокументОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоУплатыНалогов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "ПравилоУплатыНалогов");
	
	ПериодСобытияКалендаря = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "ПериодСобытияКалендаря");
	
	Если ЗначениеЗаполнено(ПравилоУплатыНалогов) И ЗначениеЗаполнено(ПериодСобытияКалендаря) Тогда
		// Правило и период задачи переданы из помощника, такой сценарий не требует читать реквизиты платежа до изменения.
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежа = РеквизитыПлатежаПоДаннымДокумента(ДокументОбъект.Ссылка);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("РеквизитыПлатежаДоИзменения", РеквизитыПлатежа);
	
КонецПроцедуры

Процедура ПриЗаписиПлатежа(ДокументОбъект) Экспорт
	
	Если Не ДокументВыполняетЗадачу(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежа = РеквизитыПлатежаПоДаннымОбъекта(ДокументОбъект);
	РеквизитыПлатежаДоИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДокументОбъект.ДополнительныеСвойства, "РеквизитыПлатежаДоИзменения");
	
	ПараметрыРасчетаСтатусов = Новый Структура;
	
	ЗарегистрироватьИсполнениеЗадачиПриЗаписиПлатежа(
		РеквизитыПлатежа, ДокументОбъект.ДополнительныеСвойства, ПараметрыРасчетаСтатусов);
		
	Если ЗарегистрированоИсполнениеЗадачи(РеквизитыПлатежа, ДокументОбъект.ДополнительныеСвойства)
		И Не ИзменилисьРеквизитыПлатежаВлияющиеНаСтатусЗадачи(РеквизитыПлатежаДоИзменения, РеквизитыПлатежа) Тогда
		ПараметрыРасчетаСтатусов.Вставить("ПропуститьОбновлениеСвязиДокументЗадача", Истина);
	КонецЕсли;
	
	Если ИзменятьСтатусыЗадачПриЗаписиПлатежа(РеквизитыПлатежа, ДокументОбъект.ДополнительныеСвойства) Тогда
		ОбновитьСтатусЗадачиПодготовкиПлатежа(РеквизитыПлатежа, ПараметрыРасчетаСтатусов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИсполнениеЗадачиПриЗаписиПлатежа(РеквизитыПлатежа, ДополнительныеСвойства, ПараметрыРасчетаСтатусов)
	
	ПравилоУплатыНалогов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПравилоУплатыНалогов");
	ПериодСобытияКалендаря = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПериодСобытияКалендаря");
	
	Если ЗначениеЗаполнено(ПравилоУплатыНалогов) И ЗначениеЗаполнено(ПериодСобытияКалендаря) Тогда
		
		// Правило и период задачи переданы из помощника, можно сразу регистрировать документ.
		ПараметрыРасчетаСтатусов.Вставить("ПропуститьОбновлениеСвязиДокументЗадача", Истина);
		
		ОплатаЗадолженности = ЭтоПогашениеНалоговойЗадолженности(РеквизитыПлатежа);
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			РеквизитыПлатежа.Организация,
			РеквизитыПлатежа.Ссылка,
			ПравилоУплатыНалогов,
			ПериодСобытияКалендаря,
			ОплатаЗадолженности);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗарегистрированоИсполнениеЗадачи(РеквизитыПлатежа, ДополнительныеСвойства)
	
	ПравилоУплатыНалогов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПравилоУплатыНалогов");
	ПериодСобытияКалендаря = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ПериодСобытияКалендаря");
	
	Если ЗначениеЗаполнено(ПравилоУплатыНалогов) И ЗначениеЗаполнено(ПериодСобытияКалендаря) Тогда
		
		// Правило и период задачи переданы из помощника, значит документ уже зарегистрирован в регистре.
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат ТекущаяЗадачаНалоговогоПлатежа(РеквизитыПлатежа) <> Неопределено;
	
КонецФункции

Функция ИзменилисьРеквизитыПлатежаВлияющиеНаСтатусЗадачи(СтарыеРеквизитыПлатежа, НовыеРеквизитыПлатежа)
	
	Если Не ЗначениеЗаполнено(СтарыеРеквизитыПлатежа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НачалоКвартала(СтарыеРеквизитыПлатежа.Дата) <> НачалоКвартала(НовыеРеквизитыПлатежа.Дата) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КонтролируемыеРеквизиты = "Организация, ВидОперации, Налог, ВидНалога, 
		|ПоказательПериода, НалоговыйПериод, ПоказательОснования, ПлатежнаяВедомость";
	
	СтарыеДанные = Новый Структура(КонтролируемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтарыеДанные, СтарыеРеквизитыПлатежа);
	УдалитьПустыеЭлементыСтруктуры(СтарыеДанные);
	
	НовыеДанные = Новый Структура(КонтролируемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(НовыеДанные, НовыеРеквизитыПлатежа);
	УдалитьПустыеЭлементыСтруктуры(НовыеДанные);
	
	Возврат Не ОбщегоНазначения.ДанныеСовпадают(СтарыеДанные, НовыеДанные);
	
КонецФункции

Процедура УдалитьПустыеЭлементыСтруктуры(СтруктураДляОбработки)
	
	ПустыеКлючи = Новый Массив;
	Для Каждого КлючЗначение Из СтруктураДляОбработки Цикл
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			ПустыеКлючи.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ Из ПустыеКлючи Цикл
		СтруктураДляОбработки.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ИзменятьСтатусыЗадачПриЗаписиПлатежа(РеквизитыПлатежа, ДополнительныеСвойства)
	
	Если ДополнительныеСвойства.Свойство("ПропуститьОбновлениеСтатусаЗадачи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РеквизитыПлатежа.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		
		Возврат Истина;
		
	ИначеЕсли РеквизитыПлатежа.ВидДокумента = "ПлатежноеПоручение" Тогда
		
		ОбновлятьСвязанныеЗадачи = ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыПлатежа.ВидНалога);
		
		Если ОбновлятьСвязанныеЗадачи Тогда
			ТекущееСостояние = РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(РеквизитыПлатежа.Ссылка);
			НовоеСостояние   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "Состояние");
			
			// Обновление задач имеет смысл только при изменении оплаченного документа без изменения его состояния.
			// Если состояние изменилось - обновление задач вызывается при записи нового состояния.
			ИзменяетсяОплаченныйДокумент = (НовоеСостояние = ТекущееСостояние)
				И ТекущееСостояние = Перечисления.СостоянияБанковскихДокументов.Оплачено;
		Иначе
			ИзменяетсяОплаченныйДокумент = Ложь;
		КонецЕсли;
		
		ПлатежноеПоручениеВведеноНаОснованииСписания = ЭтоПлатежноеПоручениеНаОснованииСписанияСоСчета(РеквизитыПлатежа);
		
		Возврат ОбновлятьСвязанныеЗадачи И ИзменяетсяОплаченныйДокумент И НЕ ПлатежноеПоручениеВведеноНаОснованииСписания;
		
	ИначеЕсли РеквизитыПлатежа.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
		
		// Обновлять статусы требуется, если платится налог, для которого все платежи влияют на состояние задач,
		// и уплата произведена непосредственно списанием с расчетного счета без платежного поручения.
		
		ОбновлятьСвязанныеЗадачи = ПлатежиПоНалогуВсегдаОбновляютСвязанныеЗадачи(РеквизитыПлатежа.ВидНалога);
		
		ЭтоСписаниеБезПлатежногоПоручения =
			(НЕ ЗначениеЗаполнено(РеквизитыПлатежа.ДокументОснование)
				ИЛИ ТипЗнч(РеквизитыПлатежа.ДокументОснование) <> Тип("ДокументСсылка.ПлатежноеПоручение"));
		
		Возврат ОбновлятьСвязанныеЗадачи И ЭтоСписаниеБезПлатежногоПоручения;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ДокументВыполняетЗадачу(ДокументОбъект)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ВидОперации") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоУплатаНалога(ДокументОбъект.ВидОперации)
		ИЛИ ЭтоВыплатаЗарплаты(ДокументОбъект.ВидОперации);
	
КонецФункции

Функция ЭтоПлатежноеПоручениеНаОснованииСписанияСоСчета(РеквизитыПлатежа)
	
	Возврат РеквизитыПлатежа.ВидДокумента = "ПлатежноеПоручение"
		И ЗначениеЗаполнено(РеквизитыПлатежа.ДокументОснование)
		И ТипЗнч(РеквизитыПлатежа.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета");
	
КонецФункции

Функция ЭтоПогашениеНалоговойЗадолженности(РеквизитыПлатежа)
	
	ПоказательОснования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыПлатежа, "ПоказательОснования", "");
	
	Возврат ПлатежиВБюджетКлиентСервер.ЭтоДобровольноеПогашениеЗадолженности(ПоказательОснования);
	
КонецФункции

Функция РеквизитыПлатежаПоДаннымОбъекта(ДокументОбъект)
	
	РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
	
	ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, ДокументОбъект);
	
	// Особенные реквизиты, не содержащиеся в объекте непосредственно.
	
	РеквизитыПлатежа.ВидДокумента = ДокументОбъект.Метаданные().Имя;
	
	Если ЗначениеЗаполнено(РеквизитыПлатежа.Налог) Тогда
		РеквизитыПлатежа.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПлатежа.Налог, "ВидНалога");
	КонецЕсли;
	
	Возврат РеквизитыПлатежа;
	
КонецФункции

Функция РеквизитыПлатежаПоДаннымДокумента(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		Возврат РеквизитыПлатежногоПоручения(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Возврат РеквизитыРасходногоКассовогоОрдера(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Возврат РеквизитыСписанияСРасчетногоСчета(ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РеквизитыПлатежногоПоручения(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументУплаты.Ссылка КАК Ссылка,
	|	""ПлатежноеПоручение"" КАК ВидДокумента,
	|	ДокументУплаты.ДокументОснование КАК ДокументОснование,
	|	ДокументУплаты.Дата КАК Дата,
	|	ДокументУплаты.Организация КАК Организация,
	|	ДокументУплаты.ВидОперации КАК ВидОперации,
	|	ДокументУплаты.Налог КАК Налог,
	|	ДокументУплаты.Налог.ВидНалога КАК ВидНалога,
	|	ДокументУплаты.Контрагент КАК Контрагент,
	|	ДокументУплаты.КПППлательщика КАК КПППлательщика,
	|	ДокументУплаты.ПоказательПериода КАК ПоказательПериода,
	|	ДокументУплаты.ПоказательОснования КАК ПоказательОснования,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК НалоговыйПериод,
	|	ДокументУплаты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ДокументУплаты
	|ГДЕ
	|	ДокументУплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, Выборка);
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыРасходногоКассовогоОрдера(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументУплаты.Ссылка КАК Ссылка,
	|	""РасходныйКассовыйОрдер"" КАК ВидДокумента,
	|	ДокументУплаты.ДокументОснование КАК ДокументОснование,
	|	ДокументУплаты.Дата КАК Дата,
	|	ДокументУплаты.Организация КАК Организация,
	|	ДокументУплаты.ВидОперации КАК ВидОперации,
	|	ДокументУплаты.Налог КАК Налог,
	|	ДокументУплаты.Налог.ВидНалога КАК ВидНалога,
	|	ДокументУплаты.Контрагент КАК Контрагент,
	|	"""" КАК КПППлательщика,
	|	ДокументУплаты.ПоказательПериода КАК ПоказательПериода,
	|	ДокументУплаты.ПоказательОснования КАК ПоказательОснования,
	|	ДокументУплаты.НалоговыйПериод КАК НалоговыйПериод,
	|	ДокументУплаты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДокументУплаты
	|ГДЕ
	|	ДокументУплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, Выборка);
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыСписанияСРасчетногоСчета(ДокументСсылка)
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументУплаты.Ссылка КАК Ссылка,
	|	""СписаниеСРасчетногоСчета"" КАК ВидДокумента,
	|	ДокументУплаты.ДокументОснование КАК ДокументОснование,
	|	ДокументУплаты.Дата КАК Дата,
	|	ДокументУплаты.Организация КАК Организация,
	|	ДокументУплаты.ВидОперации КАК ВидОперации,
	|	ДокументУплаты.Налог КАК Налог,
	|	ДокументУплаты.Налог.ВидНалога КАК ВидНалога,
	|	ДокументУплаты.Контрагент КАК Контрагент,
	|	"""" КАК КПППлательщика,
	|	"""" КАК ПоказательПериода,
	|	"""" КАК ПоказательОснования,
	|	ДокументУплаты.НалоговыйПериод КАК НалоговыйПериод,
	|	ДокументУплаты.ПлатежнаяВедомость КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК ДокументУплаты
	|ГДЕ
	|	ДокументУплаты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеквизитыПлатежа = НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи();
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежа, Выборка);
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НовыйРеквизитыПлатежаВлияющиеНаСтатусЗадачи()
	
	ОписаниеРеквизитов = Новый Структура;
	
	ОписаниеРеквизитов.Вставить("Ссылка", Неопределено);
	ОписаниеРеквизитов.Вставить("ВидДокумента", "");
	ОписаниеРеквизитов.Вставить("ДокументОснование", Неопределено);
	ОписаниеРеквизитов.Вставить("Дата", '00010101');
	ОписаниеРеквизитов.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("ВидОперации", Неопределено);
	ОписаниеРеквизитов.Вставить("Налог", Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("ВидНалога", Перечисления.ВидыНалогов.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ОписаниеРеквизитов.Вставить("КПППлательщика", "");
	ОписаниеРеквизитов.Вставить("ПоказательПериода", "");
	ОписаниеРеквизитов.Вставить("НалоговыйПериод", '00010101');
	ОписаниеРеквизитов.Вставить("ПлатежнаяВедомость", Неопределено);
	ОписаниеРеквизитов.Вставить("ПоказательОснования", "");
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

#КонецОбласти

