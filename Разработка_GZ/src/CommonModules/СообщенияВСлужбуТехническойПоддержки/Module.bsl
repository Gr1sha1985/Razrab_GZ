///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сообщения в службу технической поддержки".
// ОбщийМодуль.СообщенияВСлужбуТехническойПоддержки.
//
// Серверные процедуры и функции отправки сообщений в 
// службу технической поддержки:
//  - подготовка вложений сообщений;
//  - отправка сообщений на Портал 1С:ИТС;
//  - формирование URL для перехода на страницу отправки.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует сообщение для отправки сообщения в службу технической
// поддержки. В параметрах передаются данные заполнения, вложения
// и параметры выгрузки журнала регистрации.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения:
//   *Тема - Строка - тема сообщения;
//   *Сообщение  - Строка - тело текст сообщения для отправки;
//   *Получатель - Строка - условное имя получателя сообщения. Возможные значения:
//        - "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
//          необходимый адрес выбирается в соответствии с настройками доменной зоны
//          серверов Интернет-поддержки;
//        - "taxcom" - соответствует адресу "taxcom@1c.ru";
//        - "backup" - соответствует адресу "support.backup@1c.ru";
//  Вложения - Массив Из Структура, Неопределено - файлы вложений. Важно: допускаются только
//              текстовые вложения (*.txt). Поля структуры элемента вложения:
//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
//   *ВидДанных - Строка - определяет преобразование переданных данных.
//                Возможна передача одного из значений:
//                  - ИмяФайла - Строка - полное имя файла вложения;
//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//                  - Текст - Строка - текст вложения;
//   *Данные - Строка - данные для формирования вложения;
//  ЖурналРегистрации - Структура, Неопределенно - настройки выгрузки журнала регистрации:
//    *ДатаНачала    - Дата - начало периода журнала;
//    *ДатаОкончания - Дата - конец периода журнала;
//    *События       - Массив - список событий;
//    *Метаданные    - Массив, Неопределенно - массив метаданных для отбора;
//    *Уровень       - Строка - уровень важности событий журнала регистрации. Возможные значения:
//       - "Ошибка" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Ошибка;
//       - "Предупреждение" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Предупреждение;
//       - "Информация" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Информация;
//       - "Примечание" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Примечание.
//
// Возвращаемое значение:
//  Структура - результат отправки сообщения:
//   *КодОшибки - Строка - идентификатор ошибки при отправки:
//                          - <Пустая строка> - отправка выполнена успешно;
//                          - "НеверныйФорматЗапроса" - переданы некорректные параметры сообщения
//                             сообщения в техническую поддержку;
//                          - "ПревышенМаксимальныйРазмер" - превышен максимальный размер вложения;
//                          - "НеизвестнаяОшибка" - при отправке сообщения возникли ошибки;
//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//   *URLСтраницы - Строка - URL страницы отправки сообщения.
//
Функция ПодготовитьСообщение(
		ДанныеСообщения,
		Вложения = Неопределено,
		ЖурналРегистрации = Неопределено) Экспорт
	
	Результат = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.РезультатПроверкиПараметровОтправки(
		ДанныеСообщения,
		Вложения,
		ЖурналРегистрации);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеВложений = Новый Массив;
	
	// Подготовить переданные вложения.
	Результат = ПодготовитьВложения(
		Вложения,
		ДанныеВложений);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Дополнить вложения журналом регистрации при необходимости.
	Результат = ПодготовитьТекстЖурналаРегистрации(
		ЖурналРегистрации,
		ДанныеВложений);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Добавить текст технической информации.
	ПараметрыВложения = Новый Структура;
	ПараметрыВложения.Вставить("Представление", НСтр("ru = 'Техническая информация.txt'"));
	ПараметрыВложения.Вставить("Текст",         ТекстВложенияТехническаяИнформация());
	ДанныеВложений.Добавить(ПараметрыВложения);
	
	// Отправить данные на Портал 1С:ИТС
	Результат = ОперацияОтправкиДанных(
		ДанныеСообщения,
		ДанныеВложений);
	
	// Подготовить URL для перехода на страницу отправки
	// сообщения.
	Если ПустаяСтрока(Результат.КодОшибки) Тогда
		ЗаполнитьПараметрыСтраницы(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// Вызывается из обработчика ПриСозданииНаСервере панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.Элементы.БИПСообщениеВСлужбуТехническойПоддержки.Видимость = Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.РазделениеВключено();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеСообщений

// Получает события журнала регистрации по отбору, выполняет проверку получения и передает результат
// в виде текста.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий;
//   * Метаданные    - Массив, Неопределено - массив метаданных для отбора;
//   *Уровень       - УровеньЖурналаРегистрации - уровень важности событий журнала регистрации;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *Представление - Строка - представление вложения;
//   *Текст - Строка - текст файла вложения.
//
// Возвращаемое значение:
//  Структура - результат подготовки:
//    *КодОшибки - Строка - идентификатор ошибки при отправки:
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПодготовитьТекстЖурналаРегистрации(ПараметрыОтбора, ДанныеВложений)
	
	Результат = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.НовыйРезультатОперации();
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("ДатаНачала, ДатаОкончания, Событие, Метаданные, Уровень");
	
	ЗаполнитьЗначенияСвойств(
		Отбор,
		ПараметрыОтбора,
		"ДатаНачала, ДатаОкончания, Метаданные");
	
	Отбор.Событие = ПараметрыОтбора.События;
	
	Если Не ЗначениеЗаполнено(Отбор.ДатаНачала) Тогда
		Отбор.ДатаНачала = ТекущаяДатаСеанса() - 60;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отбор.ДатаОкончания) Тогда
		Отбор.ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОтбора.Уровень) Тогда
		Отбор.Удалить("Уровень");
	Иначе
		Отбор.Уровень = УровеньЖурналаРегистрации[ПараметрыОтбора.Уровень];
	КонецЕсли;
	
	Если (ТипЗнч(Отбор.Метаданные) <> Тип("Массив"))
		Или (ТипЗнч(Отбор.Метаданные) = Тип("Массив")
			И Отбор.Метаданные.Количество() = 0) Тогда
		Отбор.Удалить("Метаданные");
	КонецЕсли;
	
	Если (ТипЗнч(Отбор.Событие) <> Тип("Массив"))
		Или (ТипЗнч(Отбор.Событие) = Тип("Массив")
			И Отбор.Событие.Количество() = 0) Тогда
		Отбор.Удалить("Событие");
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ВыгрузитьЖурналРегистрации(
			ИмяВременногоФайла,
			Отбор);
			
		УстановитьПривилегированныйРежим(Ложь);
		
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		Если Не ВременныйФайл.Существует() Тогда
			Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
			Результат.СообщениеОбОшибке = НСтр("ru = 'Файл выгрузки журнала регистрации не обнаружен. Обратитесь к администратору.'");
			Возврат Результат;
		КонецЕсли;
		
		Если ВременныйФайл.Размер() > МаксимальныйРазмерФайла() Тогда
			Результат.КодОшибки = КодОшибкиПревышенМаксимальныйРазмер();
			Результат.СообщениеОбОшибке = НСтр("ru = 'Превышен максимально допустимы размер файла журнала регистрации. Измените параметры выгрузки данных.'");
			Возврат Результат;
		КонецЕсли;
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("Представление", НСтр("ru = 'Журнал регистрации.xml'"));
		ПараметрыВложения.Вставить("Текст",         ЧтениеТекста.Прочитать());
		ДанныеВложений.Добавить(ПараметрыВложения);
		
		ЧтениеТекста.Закрыть();
		
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось выгрузить события журнала регистрации в файл по причине:
					|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось выгрузить события журнала регистрации. Обратитесь к администратору.'");
		
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписатьИнформациюВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает текст для формирования вложений из переданных данных.
//
// Параметры:
//  Вложения - Массив Из Структура, Неопределено - файлы вложений.  Важно: допускаются только
//             текстовые вложения (*.txt). Поля структуры элемента вложения:
//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
//   *ВидДанных - Строка - определяет преобразование переданных данных.
//                         Возможна передача одного из значений:
//                           - ИмяФайла - Строка - полное имя файла вложения;
//                           - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//                           - Текст - Строка - текст вложения;
//   *Данные - Строка - данные для формирования вложения;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *Представление - Строка - представление вложения;
//   *Текст - Строка - текст файла вложения.
//
// Возвращаемое значение:
//  Структура - результат подготовки:
//    *КодОшибки - Строка - идентификатор ошибки при отправки:
//    *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция ПодготовитьВложения(Вложения, ДанныеВложений)
	
	Результат = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.НовыйРезультатОперации();
	
	Если Вложения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
		
	Для Каждого Вложение Из Вложения Цикл
		
		Если Вложение.ВидДанных = "Адрес" Тогда
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(Вложение.Данные);
			Если ДанныеФайла.Размер() > МаксимальныйРазмерФайла() Тогда
				Результат.КодОшибки = КодОшибкиПревышенМаксимальныйРазмер();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышен максимально допустимы размер файла %1.'"),
					Вложение.Представление);
				Возврат Результат;
			КонецЕсли;
			
			ТекстВложения = ПолучитьСтрокуИзДвоичныхДанных(ДанныеФайла);
			
		ИначеЕсли Вложение.ВидДанных = "ИмяФайла" Тогда
			
			ФайлНаДиске = Новый Файл(Вложение.Данные);
			Если Не ФайлНаДиске.Существует() Тогда
				Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл %1 не найден .'"),
					Вложение.Представление);
				Возврат Результат;
			ИначеЕсли ФайлНаДиске.Размер() > МаксимальныйРазмерФайла() Тогда
				Результат.КодОшибки = КодОшибкиПревышенМаксимальныйРазмер();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышен максимально допустимы размер файла %1.'"),
					Вложение.Представление);
				Возврат Результат;
			КонецЕсли;
			
			ЧтениеТекста = Новый ЧтениеТекста(Вложение.Данные);
			ТекстВложения = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
		Иначе
			ТекстВложения = Вложение.Данные;
		КонецЕсли;
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("Представление", Вложение.Представление);
		ПараметрыВложения.Вставить("Текст",         ТекстВложения);
		ДанныеВложений.Добавить(ПараметрыВложения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует текст обращения в службу технической поддержки.
//
// Параметры:
//  Сообщение - Строка - сообщение пользователя
//
// Возвращаемое значение:
//  Строка - текст сообщения подготовленный по шаблону.
//
Функция ШаблонТекстаСообщения(Сообщение)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Здравствуйте!
			|
			|%1
			|
			|Регистрационный номер программного продукта: <Укажите рег. номер>;
			|Организация: <Укажите название организации>.
			|С уважением,
			|.'"),
		Сообщение);
	
КонецФункции

// Формирует текст описания технических параметров программы.
//
// Возвращаемое значение:
//  Строка - данные для формирования вложения "Техническая информация.txt".
//
Функция ТекстВложенияТехническаяИнформация()
	
	// Общие технические параметры и информация о сеансе
	СистИнфо = Новый СистемнаяИнформация;
	ЭтоФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяПрограммы = Строка(ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы());
	Если ИмяПрограммы = "Unknown" Тогда
		ИмяПрограммы = НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
	ПараметрыКлиента = ИнтернетПоддержкаПользователей.ПараметрыКлиента();
	
	ВидПриложенияПредставление = "";
	Если ПараметрыКлиента.ВидПриложения = "ВебКлиент" Тогда
		ВидПриложенияПредставление = НСтр("ru = 'Веб-клиент'");
	ИначеЕсли ПараметрыКлиента.ВидПриложения = "ТолстыйКлиентОбычноеПриложение" Тогда
		ВидПриложенияПредставление = НСтр("ru = 'Толстый клиент, обычное приложение'");
	ИначеЕсли ПараметрыКлиента.ВидПриложения = "ТолстыйКлиентУправляемоеПриложение" Тогда
		ВидПриложенияПредставление = НСтр("ru = 'Толстый клиент, управляемое приложение'");
	ИначеЕсли ПараметрыКлиента.ВидПриложения = "ТонкийКлиент" Тогда
		ВидПриложенияПредставление = НСтр("ru = 'Тонкий клиент'");
	КонецЕсли;
	
	// Общая информация:
	Результат = НСтр("ru = 'Техническая информация о программе:
		|Название программы: %1
		|Имя программы: %2;
		|Версия программы: %3;
		|Поставщик: %4;
		|Версия Платформы 1С:Предприятие: %5;
		|Версия Библиотеки Интернет-поддержки: %6;
		|Версия Библиотеки стандартных подсистем: %7;
		|Вид приложения: %8;
		|Режим: %9;'");
	
	Результат = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Результат,
			Метаданные.Синоним,
			ИмяПрограммы
				+ " (" + Строка(ИнтернетПоддержкаПользователей.ИмяКонфигурации()) + ")",
			Строка(ИнтернетПоддержкаПользователей.ВерсияКонфигурации()),
			Метаданные.Поставщик,
			Строка(СистИнфо.ВерсияПриложения),
			ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
			СтандартныеПодсистемыСервер.ВерсияБиблиотеки(),
			ВидПриложенияПредставление,
			?(ЭтоФайловаяИБ, НСтр("ru = 'Файловый'"), НСтр("ru = 'Серверный'")));
	
	// Права:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Полные права: %1;
				|Права администратора: %2;
				|Права для подключения Интернет-поддержки: %3;'"),
			?(Пользователи.ЭтоПолноправныйПользователь(, Ложь, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")),
			?(Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")),
			?(ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП(), НСтр("ru = 'есть'"), НСтр("ru = 'нет'")));
	
	// Личные данные:
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин для подключения Интернет-поддержки: %1;
				|Пароль для подключения Интернет-поддержки: %2;
				|Регистрационный номер программного продукта: %3;'"),
			?(ЗначениеЗаполнено(ДанныеАутентификации),
				ДанныеАутентификации.Логин,
				НСтр("ru = 'не заполнен'")),
			?(ЗначениеЗаполнено(ДанныеАутентификации) И ЗначениеЗаполнено(ДанныеАутентификации.Пароль),
				НСтр("ru = 'заполнен'"),
				НСтр("ru = 'не заполнен'")),
			ИнтернетПоддержкаПользователей.РегистрационныйНомерПрограммногоПродукта());
	
	// Настройки соединения:
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(                       
			НСтр("ru = 'Настройки соединения с серверами Интернет-поддержки:
				|	Доменная зона: %1'"),
			?(НастройкиСоединения.ДоменРасположенияСерверовИПП = 1, "1c.eu", "1c.ru"));
	
	// Настройки прокси:
	НастройкиПрокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкиПрокси = Неопределено Тогда
		ЗначениеНастройкиПрокси = НСтр("ru = 'не используется'");
	Иначе
		Если НастройкиПрокси.Получить("ИспользоватьПрокси") Тогда
			ЗначениеНастройкиПрокси = ?(НастройкиПрокси.Получить("ИспользоватьСистемныеНастройки"),
				НСтр("ru = 'автоматические'"),
				НСтр("ru = 'ручные'"));
		Иначе
			ЗначениеНастройкиПрокси = НСтр("ru = 'не используется'");
		КонецЕсли;
	КонецЕсли;
	
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки прокси-сервера: %1'"),
			ЗначениеНастройкиПрокси);
	Результат = Результат
		+ Символы.ПС
		+ НСтр("ru = 'Установленные расширения:'")
		+ Символы.ПС
		+ ТекстОписаниеУстановленныхРасширений();
	
	ИдентификаторЦентрМониторинга = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
		ИдентификаторЦентрМониторинга = МодульЦентрМониторинга.ИдентификаторИнформационнойБазы();
	КонецЕсли;
	
	Результат = Результат
		+ Символы.ПС
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идентификатор ИБ: %1'"),
			?(ЗначениеЗаполнено(ИдентификаторЦентрМониторинга),
				ИдентификаторЦентрМониторинга,
				НСтр("ru = '<Нет>'")));
	
	// Настройки клиента лицензирования:
	Если ИнтернетПоддержкаПользователей.ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		ИДКонфигурации = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ИДКонфигурации();
		Если Не ПустаяСтрока(ИДКонфигурации) Тогда
			Результат = Результат + Символы.ПС
				+ НСтр("ru = 'Имя клиента лицензирования:'") + " "
				+ КлиентЛицензирования.ИмяКлиентаЛицензирования()
				+ Символы.ПС + НСтр("ru = 'Идентификатор конфигурации:'")
				+ Символы.ПС + ИДКонфигурации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет описание используемых расширений.
//
// Возвращаемое значение:
//  Строка - информация о расширениях.
//
Функция ТекстОписаниеУстановленныхРасширений()
	
	ОписаниеРасширенийМассивСтр = Новый Массив;
	
	// Обращение в тех поддержку может формировать
	// не только администратор ИБ.
	УстановитьПривилегированныйРежим(Истина);
	УстановленныеРасширения = РасширенияКонфигурации.Получить();
	
	Для Каждого Расширение Из УстановленныеРасширения Цикл
		ОписаниеРасширенийМассивСтр.Добавить(
			Символы.Таб
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2); Акт.: %3; Распр. ИБ: %4; БР: %5'"),
				Расширение.Имя,
				Расширение.Назначение,
				Расширение.Активно,
				Расширение.ИспользуетсяВРаспределеннойИнформационнойБазе,
				Расширение.БезопасныйРежим));
	КонецЦикла;
	
	Если ОписаниеРасширенийМассивСтр.Количество() = 0 Тогда
		ОписаниеРасширенийМассивСтр.Добавить(НСтр("ru = '<Нет>'"));
	КонецЕсли;
	
	Возврат СтрСоединить(ОписаниеРасширенийМассивСтр, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийСервиса

// Выполняет вызов операции отправки сообщения
// в службу технической поддержки.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения:
//   *Тема - Строка - тема сообщения;
//   *Сообщение  - Строка - тело текст сообщения для отправки;
//   *Получатель - Строка - условное имя получателя сообщения;
//  ДанныеВложений - Массив Из Структура - подготовленные данные вложений:
//   *Представление - Строка - представление вложения;
//   *Текст - Строка - текст файла вложения.
//
// Возвращаемое значение:
//  Структура - результат вызова операции:
//   *КодОшибки - Строка - идентификатор ошибки;
//   *СообщениеОбОшибке - Строка - сообщение об ошибке для пользователя;
//   *ТокенДанных - Строка - идентификатор обращения для перехода на Портал 1С:ИТС.
//
Функция ОперацияОтправкиДанных(
		ДанныеСообщения,
		ДанныеВложений)
	
	// Может вызываться перед началом работы системы, поэтому необходимо
	// зачитать настройки соединения с серверами.
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"           , "");
	Результат.Вставить("СообщениеОбОшибке"   , "");
	Результат.Вставить("ТокенДанных"         , "");
	
	// Проверка доступности сервиса.
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИмяОшибки"         , "");
	РезультатПроверки.Вставить("СообщениеОбОшибке" , "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(
		URLОперацииОтправитьPing(НастройкиСоединения.ДоменРасположенияСерверовИПП),
		Неопределено,
		"HEAD");
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса отправки сообщений.
					|%1'"),
				РезультатПроверки.ИнформацияОбОшибке));
		
		Результат.КодОшибки = РезультатПроверки.ИмяОшибки;
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса.
					|%1'"),
				РезультатПроверки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДанныеJSON = ПараметрыSaveTechSupportRequestJSON(
		ДанныеСообщения.Тема,
		ШаблонТекстаСообщения(ДанныеСообщения.Сообщение),
		ДанныеСообщения.Получатель,
		ДанныеВложений);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "PUT");
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеJSON);
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 300);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперацииОтправитьДанные(
			НастройкиСоединения.ДоменРасположенияСерверовИПП),
		,
		,
		ДопПараметрыЗапроса);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке));
		
		Если РезультатОтправки.КодСостояния = 400 Тогда
			Результат.КодОшибки = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.КодОшибкиНеверныйФорматЗапроса();
		Иначе
			Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		КонецЕсли;
		
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		РезультатВызова = РезультатSaveTechSupportRequestИзJSON(РезультатОтправки.Содержимое);
	Исключение
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Ошибка при обработке ответа сервиса.
					|Некорректный ответ сервиса отправки сообщений.
					|%1
					|Тело ответа: %2'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РезультатОтправки.Содержимое));
		
		Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если РезультатВызова.success <> Истина Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в службу технической поддержки.
				|Сервис сообщил об ошибке.
				|Ответ сервиса: %1'"),
			РезультатОтправки.Содержимое));
		
		Результат.КодОшибки = КодОшибкиНеизвестнаяОшибка();
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в службу технической поддержки.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ТокенДанных = РезультатВызова.uuid;
	
	Возврат Результат;

КонецФункции

// Формирует URL для перехода на страницу отправки сообщения.
//
// Параметры:
//  ПараметрыСообщения - Структура - данные сообщения
//   *КодОшибки - Строка - идентификатор ошибки;
//   *СообщениеОбОшибке - Строка - сообщение об ошибке для пользователя;
//   *ТокенДанных - Строка - идентификатор обращения для перехода на Портал 1С:ИТС.
//
Процедура ЗаполнитьПараметрыСтраницы(ПараметрыСообщения)
	
	// Может вызываться перед началом работы системы, поэтому необходимо
	// зачитать настройки соединения с серверами.
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
	ПараметрыСообщения.Вставить("URLСтраницы", "");
	ПараметрыСообщения.URLСтраницы = URLСтраницыОтправкиСообщения(
		НастройкиСоединения.ДоменРасположенияСерверовИПП,
		ПараметрыСообщения.ТокенДанных);
	
	Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета =
			ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ПараметрыСообщения.URLСтраницы);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ЗначениеЗаполнено(РезультатПолученияТикета.Тикет) Тогда
			ПараметрыСообщения.URLСтраницы = ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
				"/ticket/auth?token=" + РезультатПолученияТикета.Тикет,
				НастройкиСоединения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет хост для вызова отправки сообщений
// в службу технической поддержки.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисовТехническойПоддержки(Домен) Экспорт
	
	
	Если Домен = 0 Тогда
		Возврат "portal-support.1c.ru";
	Иначе
		Возврат "portal-support.1c.eu";
	КонецЕсли;
	
КонецФункции

// Определяет URL для вызова отправки сообщений
// в службу технической поддержки.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииОтправитьДанные(Домен)
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/request";
	
КонецФункции

// Определяет URL для вызова операции ping.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииОтправитьPing(Домен)
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/ping";
	
КонецФункции

// Определяет URL перехода на страницу отправки сообщения.
//
// Параметры:
//  Домен - Число  - идентификатор домена;
//  ТокенДанных - Строка - идентификатор обращения для перехода на Портал 1С:ИТС.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLСтраницыОтправкиСообщения(Домен, ТокенДанных)

	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/confirm?uuid=" + ТокенДанных;

КонецФункции

// Формирует параметры запроса для операции
// /rest/request.
//
Функция ПараметрыSaveTechSupportRequestJSON(Тема, Тело, Получатель, ТекстовыеВложения)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("theme");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тема);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("text");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тело);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("language");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(КодЯзыка(ТекущийЯзыкСистемы()));

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Получатель);

	// Добавление вложений
	Если ТекстовыеВложения <> Неопределено Тогда

		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportAdditionalDtoList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();

		Для Каждого ТекВложение Из ТекстовыеВложения Цикл
			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("name");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Представление);
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Текст);
			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		КонецЦикла;

		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();

	КонецЕсли;

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

// Чтение ответа операции /rest/request.
//
Функция РезультатSaveTechSupportRequestИзJSON(ТелоJSON)

	ОтветОбъект  = Новый Структура("success, errorMessage, uuid", "false", "", "");
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
			ОтветОбъект.Вставить(ИмяСвойства, ЧтениеОтвета.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	ЧтениеОтвета.Закрыть();

	Возврат ОтветОбъект;

КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет максимальный размер файла вложения.
//
// Возвращаемое значение:
//  Число - максимальный размер файла в байтах.
//
Функция МаксимальныйРазмерФайла()
	
	Возврат 10485760; // 10 МБ.
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка()
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "ПревышенМаксимальныйРазмер".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиПревышенМаксимальныйРазмер()
	
	Возврат "ПревышенМаксимальныйРазмер";
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка";
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено) Экспорт
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Сообщения в службу технической поддержки'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Формирует идентификатор языка для отправки сообщения.
//
// Параметры:
//  ЯзыкИСтрана - Строка - идентификатор языка.
//
// Возвращаемое значение:
//  Строка - преобразованное значение.
//
Функция КодЯзыка(ЯзыкИСтрана)

	ПозицияПодчеркивание = СтрНайти(ЯзыкИСтрана, "_");
	Если ПозицияПодчеркивание = 0 Тогда
		Возврат ЯзыкИСтрана;
	Иначе
		Возврат Лев(ЯзыкИСтрана, ПозицияПодчеркивание - 1);
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти
