
////////////////////////////////////////////////////////////////////////////////
// Универсальные методы для формы записи регистра и формы настройки налогов
//
// Серверные методы формы записи регистра сведений НастройкиУчетаНалогаНаПрибыль
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	АктивныйЭлемент = Неопределено;
	Форма.Параметры.Свойство("АктивныйЭлемент", АктивныйЭлемент);
	
	Если ТипЗнч(АктивныйЭлемент) = Тип("Строка") Тогда
		Если АктивныйЭлемент = "ПорядокУплатыАвансов" Тогда
			Форма.ТекущийЭлемент = Форма.Элементы.ПорядокУплатыАвансов;
		КонецЕсли;
	КонецЕсли;
	
	Запись = Форма.НастройкиУчетаНалогаНаПрибыль;
	
	Форма.ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ГоловнаяОрганизация");
		
	ПодготовитьФормуНаСервере(Форма);
	
КонецПроцедуры

Процедура ПодготовитьФормуНаСервере(Форма) Экспорт
	
	Запись = Форма.НастройкиУчетаНалогаНаПрибыль;
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(Запись.Организация) Тогда
		Запись.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Форма.ПравоРедактированияСпискаПрямыхРасходов = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ);
	
	Если Элементы.Найти("ТекущаяДата") <> Неопределено Тогда
		ПериодЧтенияНастройки = Форма.ТекущаяДата;
	Иначе
		ПериодЧтенияНастройки = Запись.Период;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма,
		НастройкиУчетаНалогаНаПрибыльФормыВызовСервера.НастройкиСистемыНалогообложения(
		Запись.Организация, ПериодЧтенияНастройки));
		
	Элементы.ГруппаПорядокПодачиДекларации.Видимость = НалоговыйУчет.ЕстьОбособленныеПодразделения(Форма.ГоловнаяОрганизация);
		
	НастройкиУчетаНалогаНаПрибыльФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполнения

Процедура НастроитьЭлементыУказанияРегиона(ТребуетсяУказаниеРегиона, СписокРегионов, КодРегиона = Неопределено) Экспорт 
	
	ТребуетсяУказаниеРегиона = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
	Если ТребуетсяУказаниеРегиона Тогда
		ЗаполнитьСписокВыбораРегиона(СписокРегионов, Ложь, КодРегиона);
	КонецЕсли;

КонецПроцедуры

// Заполняет переданный список регионов значениями из адресного классификатора
// Параметры:
//  СписокРегионов	 	 - СписокЗначений 
//  ТолькоИспользуемые	 - Булево: 	Истина - в списке будут только те регионы, которые выбраны в регистрациях в налоговых органах
//									Ложь - все регионы из адресного классификатора
//	КодРегиона 			 - Строка - код текущего выбранного региона. Если указан, то в список добавляется только этот 1 регион								
//
Процедура ЗаполнитьСписокВыбораРегиона(СписокРегионов, ТолькоИспользуемые = Ложь, КодРегиона = Неопределено) Экспорт 
	
	СписокРегионов.Очистить();
	
	Если ЗначениеЗаполнено(КодРегиона) И КодРегиона <> "00" Тогда
		
		ШаблонПредставления = НСтр("ru='%1'");  //например: "Москва г"
		
		НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеРегиона);
			
		СписокРегионов.Добавить(КодРегиона, Представление);
		Возврат;
		
	КонецЕсли;	
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	
	Если НЕ ТолькоИспользуемые Тогда
		
		ТаблицаРегионов = КлассификаторСубъектовРФ;
		
	Иначе
		
		// Запрос выбирает все коды регионов, которые выбраны в справочнике регистраций в налоговом органе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацииВНалоговомОргане.КодРегиона КАК КодРегиона
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|";

		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;	
		
		ВыборкаРегионов = РезультатЗапроса.Выбрать();
		
		ТаблицаРегионов = КлассификаторСубъектовРФ.СкопироватьКолонки();
		Пока ВыборкаРегионов.Следующий() Цикл
			
			СтрокаРегиона = ТаблицаРегионов.Добавить();
			СтрокаРегиона.КодСубъектаРФ = ВыборкаРегионов.КодРегиона;
			
			СтрокаКлассификатора = КлассификаторСубъектовРФ.Найти(СтрокаРегиона.КодСубъектаРФ, "КодСубъектаРФ");
			Если СтрокаКлассификатора <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРегиона, СтрокаКлассификатора);
			КонецЕсли;	
			
		КонецЦикла;	
					   			
	КонецЕсли; 

	ШаблонПредставления = НСтр("ru='%1 %2'");  //например: "Москва г"
	Для Каждого Регион Из ТаблицаРегионов Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Регион.Наименование,
			Регион.Сокращение);
		СписокРегионов.Добавить(Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН="), Представление);
	КонецЦикла;
	
	// Сортируем по наименованию региона
	СписокРегионов.СортироватьПоПредставлению();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
