///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРК".
// ОбщийМодуль.СПАРКРискиКлиент.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет возможность использования сервиса в соответствии с текущим
// режимом работы и правами пользователя.
//
// Возвращаемое значение:
//  Булево - Истина - использование разрешено, Ложь - в противном случае.
//
Функция ИспользованиеРазрешено() Экспорт

	Возврат СПАРКРискиКлиентПовтИсп.ИспользованиеРазрешено();

КонецФункции

// Открывает список справок 1СПАРК Риски.
//
// Параметры:
//	Контрагент - ОпределяемыйТип.КонтрагентБИП - отбор по контрагенту;
//	ДополнительныеПараметры - Структура - дополнительные параметры открытия формы.
//		* ПоказыватьОтбор - Булево - Истина - показывать отбор в списке,
//			Ложь - в противном случае;
//		* Источник - ОкноКлиентскогоПриложения, ФормаКлиентскогоПриложения - содержит окно
//			или форму, из которой вызвана команда;
//		* Уникальность - Булево - соответствует обработчику команды;
//		* Окно - ОкноКлиентскогоПриложения - соответствует обработчику команды;
//		* НавигационнаяСсылка - Строка - соответствует обработчику команды.
//
Процедура ОткрытьСписокСправок1СПАРКРиски(
	Контрагент = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Источник            = Неопределено;
	Уникальность        = Неопределено;
	Окно                = Неопределено;
	НавигационнаяСсылка = Неопределено;
	
	ПоказыватьОтбор = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ПоказыватьОтбор"    , ПоказыватьОтбор);
		ДополнительныеПараметры.Свойство("Источник"           , Источник);
		ДополнительныеПараметры.Свойство("Уникальность"       , Уникальность);
		ДополнительныеПараметры.Свойство("Окно"               , Окно);
		ДополнительныеПараметры.Свойство("НавигационнаяСсылка", НавигационнаяСсылка);
	КонецЕсли;
	
	ПараметрыФормы = Неопределено;
	Если Контрагент <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Контрагент", Контрагент);
		Если Окно = Неопределено Тогда
			ПараметрыФормы.Вставить("ПоказыватьОтбор", Истина);
		ИначеЕсли ПоказыватьОтбор <> Неопределено Тогда
			ПараметрыФормы.Вставить("ПоказыватьОтбор", ПоказыватьОтбор);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.СправкиСПАРКРиски.Форма.ФормаСписка",
		ПараметрыФормы,
		Источник,
		Уникальность,
		Окно,
		НавигационнаяСсылка);
	
КонецПроцедуры

// Открывает отчет со списком событий по контрагенту.
//
// Параметры:
//	Контрагент - ОпределяемыйТип.КонтрагентБИП - отбор по контрагенту;
//	ДополнительныеПараметры - Структура - дополнительные параметры открытия формы.
//		* Источник - ОкноКлиентскогоПриложения, ФормаКлиентскогоПриложения - содержит окно
//			или форму, из которой вызвана команда;
//		* Уникальность - Булево - соответствует обработчику команды;
//		* Окно - ОкноКлиентскогоПриложения - соответствует обработчику команды;
//		* НавигационнаяСсылка - Строка - соответствует обработчику команды.
//
Процедура ОткрытьСобытияМониторинга1СПАРКРиски(
	Контрагент = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Источник            = Неопределено;
	Уникальность        = Неопределено;
	Окно                = Неопределено;
	НавигационнаяСсылка = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("Источник"           , Источник);
		ДополнительныеПараметры.Свойство("Уникальность"       , Уникальность);
		ДополнительныеПараметры.Свойство("Окно"               , Окно);
		ДополнительныеПараметры.Свойство("НавигационнаяСсылка", НавигационнаяСсылка);
	КонецЕсли;
	
	ПараметрыФормы = Неопределено;
	Если Контрагент <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Контрагент", Контрагент);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	Если Контрагент <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент", Контрагент);
		ПараметрыФормы.Вставить("Отбор", Отбор);
	КонецЕсли;
	
	ОткрытьФорму(
		"Отчет.СобытияМониторингаСПАРКРиски.Форма",
		ПараметрыФормы,
		Источник,
		Уникальность,
		Окно,
		НавигационнаяСсылка);
	
КонецПроцедуры

#Область ИндексыСПАРККонтрагента

// Возвращает информацию о контрагенте (индексы и прочая информация).
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения - форма, инициировавшая запрос на получение индексов СПАРК Риски;
//  Контрагент - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ВидКонтрагента - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
// Возвращаемое значение:
//  Структура - Ключи см. СПАРКРискиКлиентСервер.НовыйДанныеИндексов().
//
Функция ИндексыСПАРККонтрагента(Форма, Контрагент, ВидКонтрагента, ПризнакЗагрузкиДанных = Истина) Экспорт

	// В памяти клиента в переменной ПараметрыПриложения[ИдентификаторКэшаИндексов()])
	//  должно храниться соответствие следующей структуры:
	// Ключ: Контрагент;
	// Значение: Структура (СПАРКРискиКлиентСервер.НовыйДанныеИндексов()).

	Результат = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
	// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
	//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
	Результат.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());

	Если НЕ ИспользованиеРазрешено() Тогда
		Результат.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));
		Возврат Результат;
	КонецЕсли;

	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");

	НеобходимоПолучитьРезультатССервера = Истина;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = ИдентификаторКэшаИндексов();
	КэшИндексов = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(КэшИндексов) = ТипСоответствие Тогда
		НайденноеЗначениеДляКонтрагента = КэшИндексов.Получить(Контрагент);
		Если НайденноеЗначениеДляКонтрагента <> Неопределено
			И ТипЗнч(НайденноеЗначениеДляКонтрагента) = ТипСтруктура
			И НайденноеЗначениеДляКонтрагента.ВидКонтрагента = ВидКонтрагента Тогда
			// Когда последний раз обновлялось?
			Если НайденноеЗначениеДляКонтрагента.Свойство("ДатаЗаполненияКлиентскогоКэша")
					И (ТипЗнч(НайденноеЗначениеДляКонтрагента.ДатаЗаполненияКлиентскогоКэша) = ТипДата)
					И (НайденноеЗначениеДляКонтрагента.ДатаЗаполненияКлиентскогоКэша >= (ОбщегоНазначенияКлиент.ДатаСеанса() - 1*60*60)) Тогда
				Результат = НайденноеЗначениеДляКонтрагента;
				НеобходимоПолучитьРезультатССервера = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе // Неопределено или неправильный тип.
		КэшИндексов = Новый Соответствие;
	КонецЕсли;

	Если НеобходимоПолучитьРезультатССервера = Истина Тогда
		Результат = СПАРКРискиВызовСервера.ИндексыСПАРККонтрагента(
			Контрагент,
			ВидКонтрагента,
			Истина);
		Результат.Вставить("ДатаЗаполненияКлиентскогоКэша", ОбщегоНазначенияКлиент.ДатаСеанса());
		Форма.ИндексыСПАРКРиски = Результат;
		// В КешИндексов вставлять только уже полученные данные, а не состояние ожидания фонового задания.
		Если (Результат.ИдентификаторФоновогоЗадания = Неопределено)
			И ((Результат.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша"))
			ИЛИ (Результат.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания"))) Тогда
			КэшИндексов.Вставить(Контрагент, Результат);
		Иначе
			ДобавитьЗаданиеНаПроверкуЗавершенностиФоновогоЗадания(Форма);
			// После добавления проверки фонового задания может оказаться, что фоновое задание уже выполнено, и в Форма.ИндексыСПАРКРиски
			//  уже хранится состояние "ПолученоИзФоновогоЗадания".
			// Поэтому перезапишем Результат из Форма.ИндексыСПАРКРиски.
			Результат = Форма.ИндексыСПАРКРиски;
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, КэшИндексов);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выводит информацию об индексах СПАРК Риски в элемент управления.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  Контрагент - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ВидКонтрагента - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//                   В этой форме должен присутствовать реквизит "ИндексыСПАРКРиски" произвольного типа
//                     и (если заполнение будет осуществляться стандартным библиотечным способом), то элементы с именами:
//    * ДекорацияИндексыСПАРКРиски - Декорация текст;
//    * КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски - Декорация картинка;
//  ПараметрыОтображения - Структура - прочие параметры. Возможные ключи:
//    * ВариантОтображения - Строка - см. СПАРКРискиКлиентСервер.ОтобразитьИндексыСПАРК;
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
Процедура ОтобразитьИндексыСПАРК(
			РезультатИндексыКонтрагента,
			КонтрагентОбъект,
			Контрагент,
			ВидКонтрагента,
			Форма,
			ПараметрыОтображения = Неопределено,
			ПризнакЗагрузкиДанных = Истина) Экспорт

	ТипСтруктура = Тип("Структура");
	ТипСтрока    = Тип("Строка");

	ИспользованиеРазрешено = ИспользованиеРазрешено();
	Если НЕ ИспользованиеРазрешено Тогда

		Если ТипЗнч(РезультатИндексыКонтрагента) <> ТипСтруктура Тогда
			РезультатИндексыКонтрагента = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
			// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
			//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
			РезультатИндексыКонтрагента.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		РезультатИндексыКонтрагента.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));

	Иначе

		// УслугаПодключена - только для модели сервиса.
		УслугаПодключена = ИнтернетПоддержкаПользователейВызовСервера.УслугаПодключена(
			СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска(),
			Неопределено); // Предполагаем, что клиент всегда запущен в какой-то области данных, поэтому явно можно не передавать номер области.
		Если УслугаПодключена <> Истина Тогда
			РезультатИндексыКонтрагента = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
			// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
			//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
			РезультатИндексыКонтрагента.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
			РезультатИндексыКонтрагента.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит"));
			РезультатИндексыКонтрагента.Вставить("СообщениеОбОшибке", НСтр("ru = 'Услуга не подключена.'"));
			РезультатИндексыКонтрагента.Вставить("РаботаВМоделиСервиса", Истина);
			РезультатИндексыКонтрагента.Вставить("ИнформацияОбОшибке", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить индексы 1СПАРК Риски.
					|Услуга с идентификатором %1 не подключена.'"),
				СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска()));
		КонецЕсли;

		Если ТипЗнч(Контрагент) = ТипСтрока Тогда
			ЛокальныйКонтрагент = СокрЛП(Контрагент);
		Иначе
			ЛокальныйКонтрагент = Контрагент;
		КонецЕсли;

		Если ИспользованиеРазрешено И ТипЗнч(РезультатИндексыКонтрагента) <> ТипСтруктура Тогда
			РезультатИндексыКонтрагента = ИндексыСПАРККонтрагента(
				Форма,
				ЛокальныйКонтрагент,
				ВидКонтрагента,
				ПризнакЗагрузкиДанных);
		КонецЕсли;

	КонецЕсли;

	// Если фоновое задание успело выполниться, то оно уже оповестило форму и заполнило реквизит формы.
	// В таком случае не следует перезаписывать реквизит формы значением, возвращаемым функцией ИндексыСПАРККонтрагента.
	ОбновитьРеквизитФормы = Истина;
	Если ТипЗнч(Форма.ИндексыСПАРКРиски) = ТипСтруктура Тогда
		Если (Форма.ИндексыСПАРКРиски.СостояниеВыводаДанных = ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания"))
				И (РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание")) Тогда
			Если Форма.ИндексыСПАРКРиски.ДатаОбновления >= РезультатИндексыКонтрагента.ДатаОбновления Тогда
				ОбновитьРеквизитФормы = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ОбновитьРеквизитФормы = Истина Тогда
		Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	КонецЕсли;
	СПАРКРискиКлиентСервер.ОтобразитьИндексыСПАРК(
		РезультатИндексыКонтрагента,
		КонтрагентОбъект,
		ЛокальныйКонтрагент,
		Форма,
		ИспользованиеРазрешено,
		ПараметрыОтображения);

КонецПроцедуры

// Возвращает информацию об индексах СПАРК Риски в виде структуры форматированных строк.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  Контрагент - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ВидКонтрагента - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//  ИнициироватьЗагрузкуДанных - Булево - в случае, если данных нет или они просрочены, то запустить фоновое задание загрузки данных.
//
// Возвращаемое значение:
//   Структура - Структура представлений индексов и других показателей с ключами, как СПАРКРискиКлиентСервер.НовыйПредставленияИндексов().
//
Функция ПолучитьПредставленияИндексов(
			РезультатИндексыКонтрагента,
			Контрагент,
			ВидКонтрагента,
			Форма,
			ИнициироватьЗагрузкуДанных = Истина) Экспорт

	ТипСтруктура = Тип("Структура");

	Результат = СПАРКРискиКлиентСервер.НовыйПредставленияИндексов();
	Результат.Вставить("Контрагент", Контрагент);

	Если НЕ ИспользованиеРазрешено() Тогда
		РезультатИндексыКонтрагента.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(РезультатИндексыКонтрагента) <> ТипСтруктура Тогда
		РезультатИндексыКонтрагента = ИндексыСПАРККонтрагента(
			Форма,
			Контрагент,
			ВидКонтрагента,
			ИнициироватьЗагрузкуДанных);
	КонецЕсли;

	Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("ИспользованиеРазрешено", ИспользованиеРазрешено());
	Результат = СПАРКРискиКлиентСервер.ПолучитьПредставленияИндексов(
		РезультатИндексыКонтрагента,
		Контрагент,
		Форма,
		КонтекстВыполнения);

	Возврат Результат;

КонецФункции

// Отображает значения индексов контрагента в отдельной форме.
//
// Параметры:
//	ИндексыСПАРКРиски - Структура - см. описание возвращаемого значения
//		функции СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
//	ВладелецФормы - ФормаКлиентскогоПриложения - владелец формы просмотра индексов.
//
Процедура ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ВладелецФормы = Неопределено) Экспорт
	
	Если ИндексыСПАРКРиски = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет информации для отображения.'"));
		Возврат;
	ИначеЕсли ИндексыСПАРКРиски.ПодлежитПроверке <> Истина Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный контрагент не подлежит проверке в сервисе 1СПАРК Риски.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ИндексыСПАРКРиски.Форма.ПросмотрИндексовКонтрагента",
		Новый Структура("ИндексыСПАРКРиски", ИндексыСПАРКРиски),
		ВладелецФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ИндексыСПАРКРиски

// Вызывается из форм, в которые встроен показ индексов 1СПАРК Риски.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой инициировано событие;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//
Процедура ПриОткрытии(Форма, КонтрагентОбъект = Неопределено) Экспорт
	
	Если Не ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	Если КонтрагентОбъект <> Неопределено Тогда
		СвойстваКонтрагента = СПАРКРискиКлиентСервер.СвойстваКонтрагентаВОбъекте(КонтрагентОбъект, Форма);
	Иначе
		СвойстваКонтрагента = СПАРКРискиКлиентСервер.НовыйСвойстваКонтрагента();
		СвойстваКонтрагента.Вставить("ПодлежитПроверке", Истина);
	КонецЕсли;

	// Если фоновое задание еще работает, то подключить глобальную проверку.
	Если СвойстваКонтрагента.ПодлежитПроверке = Истина Тогда
		Если (ТипЗнч(Форма.ИндексыСПАРКРиски) = ТипСтруктура)
				И (Форма.ИндексыСПАРКРиски.Свойство("ИдентификаторФоновогоЗадания"))
				И (Форма.ИндексыСПАРКРиски.ИдентификаторФоновогоЗадания <> Неопределено) Тогда
			ДобавитьЗаданиеНаПроверкуЗавершенностиФоновогоЗадания(Форма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик события "ОбработкаНавигационнойСсылки" любой формы.
//
// Параметры:
//  Форма               - ФормаКлиентскогоПриложения - форма, в которой инициировано событие;
//  ЭлементФормы        - ПолеФормы - элемент формы, в котором инициировано событие;
//  НавигационнаяСсылка - Строка - навигационная ссылка. Возможные стандартные значения:
//    - SPARK:WhatIsIndexOfDueDiligence - ИДО;
//    - SPARK:WhatIsFailureScore - ИФР;
//    - SPARK:WhatIsPaymentIndex - ИПД;
//    - SPARK:About - информация о сервисе;
//    - SPARK:OpenStatusDescription - расшифровка статуса;
//    - SPARK:WhatIsCompositeIndex - сводный индекс;
//    - SPARK:NoInfo - причины отсутствия информации;
//  СтандартнаяОбработкаФормой      - Булево - в этот параметр возвратить Ложь, если надо
//                                    запретить стандартную обработку события формой.
//
Процедура ОбработкаНавигационнойСсылки(
		Форма,
		ЭлементФормы,
		НавигационнаяСсылка,
		СтандартнаяОбработкаФормой) Экспорт

	СтандартнаяОбработкаБиблиотекой = Истина;
	
	ИнтеграцияПодсистемБИПКлиент.ОбработкаНавигационнойСсылкиСПАРКРиски(
		Форма,
		ЭлементФормы,
		НавигационнаяСсылка,
		СтандартнаяОбработкаФормой,
		СтандартнаяОбработкаБиблиотекой);
	
	СПАРКРискиКлиентПереопределяемый.ОбработкаНавигационнойСсылки(
		Форма,
		ЭлементФормы,
		НавигационнаяСсылка,
		СтандартнаяОбработкаФормой,
		СтандартнаяОбработкаБиблиотекой);
	
	Если СтандартнаяОбработкаБиблиотекой = Истина Тогда
		Настройки = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
		// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
		//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
		Настройки.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
		Если ВРег(НавигационнаяСсылка) = ВРег(Настройки.ИДОНавигационнаяСсылкаПодсказки) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Настройки.ИДОАдресКомандыПодсказки);
			СтандартнаяОбработкаФормой = Ложь;
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.ИФРНавигационнаяСсылкаПодсказки) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Настройки.ИФРАдресКомандыПодсказки);
			СтандартнаяОбработкаФормой = Ложь;
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.ИПДНавигационнаяСсылкаПодсказки) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Настройки.ИПДАдресКомандыПодсказки);
			СтандартнаяОбработкаФормой = Ложь;
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.СводныйИндикаторНавигационнаяСсылкаПодсказки) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Настройки.СводныйИндикаторАдресКомандыПодсказки);
			СтандартнаяОбработкаФормой = Ложь;
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.БухгалтерскаяОтчетностьНавигационнаяСсылкаПодсказки) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Настройки.БухгалтерскаяОтчетностьАдресКомандыПодсказки);
			СтандартнаяОбработкаФормой = Ложь;
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег("SPARK:About") Тогда // Подробнее о сервисе.
			ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
				СПАРКРискиКлиентСервер.АдресСтраницыОписанияСервисаСПАРКРиски());
			СтандартнаяОбработкаФормой = Ложь;
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.ПодключитьНавигационнаяСсылкаПодсказки) Тогда // Подключение тестового периода.
			
			СтандартнаяОбработкаФормой = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма",               Форма);
			ДополнительныеПараметры.Вставить("ИдентификаторВызова", "Индексы");
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПодключитьТестовыйПериодЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			МодульПодключениеСервисовСопровожденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
				"ПодключениеСервисовСопровожденияКлиент");
			МодульПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(
				СПАРКРискиКлиентСервер.ИдентификаторСервиса(),
				Форма,
				ОписаниеОповещения);
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.ОписаниеСтатусаНавигационнаяСсылкаПодсказки) Тогда // Открыть описание статуса
			СтандартнаяОбработкаФормой = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Статус", Форма.ИндексыСПАРКРиски.Статус);
			ПараметрыФормы.Вставить("ВидФормы", "SPARK:StatusDescription");
			ОткрытьФорму("Обработка.СправкаСПАРКРиски.Форма.РасшифровкаДанныхСПАКРРиски", ПараметрыФормы, Форма);
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.ПоказатьЗначенияИндексов) Тогда // Открыть форму с индексами
			СтандартнаяОбработкаФормой = Ложь;
			ПоказатьЗначенияИндексовКонтрагента(Форма.ИндексыСПАРКРиски, Форма);
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.НетИнформацииНавигационнаяСсылкаПодсказки) Тогда // Причины отсутствия информации о контрагенте.
			СтандартнаяОбработкаФормой = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидФормы", "SPARK:NoInfo");
			ОткрытьФорму("Обработка.СправкаСПАРКРиски.Форма.РасшифровкаДанныхСПАКРРиски", ПараметрыФормы);
		ИначеЕсли ВРег(НавигационнаяСсылка) = ВРег(Настройки.ПерейтиКПокупкеСервиса) Тогда // Переход к покупке сервиса.
			СтандартнаяОбработкаФормой = Ложь;
			ПерейтиКПокупкеСервиса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаОповещения" любой формы.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма, в которой инициировано событие;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если это форма элемента справочника, а не форма документа.
//  ИмяСобытия       - Произвольный - имя события;
//  Параметр         - Произвольный - параметр оповещения;
//  Источник         - Произвольный - источник оповещения.
//
Процедура ОбработкаОповещения(Форма, КонтрагентОбъект, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Форма.ИндексыСПАРКРиски = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтрагентОбъект <> Неопределено Тогда
		СвойстваКонтрагента = СПАРКРискиКлиентСервер.СвойстваКонтрагентаВОбъекте(
			КонтрагентОбъект,
			Форма);
	Иначе
		СвойстваКонтрагента = СПАРКРискиКлиентСервер.НовыйСвойстваКонтрагента();
		СвойстваКонтрагента.Вставить("ПодлежитПроверке", Истина);
	КонецЕсли;

	Если СвойстваКонтрагента.ПодлежитПроверке = Истина Тогда

		ТипСтруктура    = Тип("Структура");
		ТипСоответствие = Тип("Соответствие");

		СтандартнаяОбработкаБиблиотекой = Истина;
		
		ИнтеграцияПодсистемБИПКлиент.ОбработкаОповещенияСПАРКРиски(
			Форма,
			КонтрагентОбъект,
			ИмяСобытия,
			Параметр,
			Источник,
			СтандартнаяОбработкаБиблиотекой);
		
		СПАРКРискиКлиентПереопределяемый.ОбработкаОповещения(
			Форма,
			КонтрагентОбъект,
			ИмяСобытия,
			Параметр,
			Источник,
			СтандартнаяОбработкаБиблиотекой);

		Если СтандартнаяОбработкаБиблиотекой = Истина Тогда
			Если ВРег(ИмяСобытия) = ВРег("СПАРКРиски:ИзмененоСостояниеФоновогоЗадания") Тогда
				Если Источник = Форма.УникальныйИдентификатор Тогда
					// Параметр - Структура с ключами, как описано в НовыйПроверкаЗавершенностиФоновогоЗадания.
					Если Параметр.Статус = "Выполнено" Тогда
						Если НЕ ПустаяСтрока(Параметр.АдресХранилищаФоновогоЗадания) Тогда
							// Во временном хранилище хранится структура возврата СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов.
							// Там есть таблица значений, которую необходимо преобразовать в структуру вида СПАРКРискиКлиентСервер.НовыйДанныеИндексов.
							Форма.ИндексыСПАРКРиски = СПАРКРискиВызовСервера.ПолучитьПервыйИндекс(Параметр.АдресХранилищаФоновогоЗадания);
							Если ТипЗнч(Форма.ИндексыСПАРКРиски) = ТипСтруктура Тогда
								Если Не Форма.ИндексыСПАРКРиски.ДоступностьПодключенияТестовогоПериода = "Подключение" Тогда
									// Сохранить полученное значение в кэше.
									Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
										ПараметрыПриложения = Новый Соответствие;
									КонецЕсли;
									ИмяПараметраПриложения = ИдентификаторКэшаИндексов();
									КэшИндексов = ПараметрыПриложения[ИмяПараметраПриложения];
									Если ТипЗнч(КэшИндексов) <> ТипСоответствие Тогда
										КэшИндексов = Новый Соответствие;
									КонецЕсли;
									Форма.ИндексыСПАРКРиски.Вставить("ДатаЗаполненияКлиентскогоКэша", ОбщегоНазначенияКлиент.ДатаСеанса());
									КэшИндексов.Вставить(Форма.ИндексыСПАРКРиски.Контрагент, Форма.ИндексыСПАРКРиски);
									ПараметрыПриложения.Вставить(ИмяПараметраПриложения, КэшИндексов);
								КонецЕсли;
							Иначе
								Форма.ИндексыСПАРКРиски = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
								// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
								//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
								Форма.ИндексыСПАРКРиски.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
							КонецЕсли;
							// ВидОшибки заполнился из временного хранилища (из таблицы).
							Форма.ИндексыСПАРКРиски.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания"));
							Форма.ИндексыСПАРКРиски.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка"));
							Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина); // Перерисовать форму.
						Иначе
						КонецЕсли;
					ИначеЕсли Параметр.Статус = "Отменено" Тогда
						Если Форма.ИндексыСПАРКРиски <> ТипСтруктура Тогда
							Форма.ИндексыСПАРКРиски = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
							// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
							//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
							Форма.ИндексыСПАРКРиски.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
						КонецЕсли;
						Форма.ИндексыСПАРКРиски.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка"));
						Форма.ИндексыСПАРКРиски.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных"));
						Форма.ИндексыСПАРКРиски.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания"));
						Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина); // Перерисовать форму.
					ИначеЕсли Параметр.Статус = "Ошибка" Тогда
						Если Форма.ИндексыСПАРКРиски <> ТипСтруктура Тогда
							Форма.ИндексыСПАРКРиски = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
							// После вызова функции необходимо самостоятельно дозаполнить ключ ДатаОбновления:
							//  ТекущаяДатаСеанса() - для сервера или ОбщегоНазначенияКлиент.ДатаСеанса() - для клиента.
							Форма.ИндексыСПАРКРиски.Вставить("ДатаОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
						КонецЕсли;
						Форма.ИндексыСПАРКРиски.Вставить("ТекстОшибки", Параметр.ПодробноеПредставлениеОшибки);
						Форма.ИндексыСПАРКРиски.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка"));
						Форма.ИндексыСПАРКРиски.Вставить("СостояниеВыводаДанных", ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных"));
						Форма.ИндексыСПАРКРиски.Вставить("СостояниеЗагрузкиДанных", ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания"));
						Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина); // Перерисовать форму.
					ИначеЕсли Параметр.Статус = "Выполняется" Тогда
						// Об этом статусе не должно сообщаться. На него никак не надо реагировать.
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКомандыФормыКонтрагента

// Выполняет подключаемую команду в форме карточки контрагента и форме
// списка контрагентов.
//
// Параметры:
//	Команда - КомандыФормы - выполняемая команда;
//	Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется команда;
//	Источник - ДанныеФормыСтруктура - объект контрагент в карточке контрагента;
//			 - ТаблицаФормы - список контрагентов в форме списка.
//	ДополнительныеПараметры - Структура - дополнительные параметры выполнения команды.
//		Поля структуры:
//		* КонтрагентСсылка - ОпределяемыйТип.КонтрагентБИП - ссылка на элемент справочника
//			контрагентов, для которого выполняется команда. Необходимо использовать в том
//			случае, если реквизит Ссылка в параметре Источник не соответствует контрагенту.
//
Процедура ВыполнитьПодключаемуюКоманду(Команда, Форма, Источник, ДополнительныеПараметры = Неопределено) Экспорт
	
	КонтрагентСсылка = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("КонтрагентСсылка") Тогда
		КонтрагентСсылка = ДополнительныеПараметры.КонтрагентСсылка;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если КонтрагентСсылка = Неопределено Тогда
			КонтрагентСсылка = Источник.Ссылка;
		КонецЕсли;
		
		Если Источник.Ссылка.Пустая() Или Форма.Модифицированность Тогда
			
			Если Команда.Имя = "СПАРКРиски_ОткрытьСписокСправокКонтрагента" Тогда
				ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
					|Переход к ""Справки"" возможен только после записи данных.
					|Данные будут записаны.'");
			ИначеЕсли Команда.Имя = "СПАРКРиски_СобытияМониторингаПоКонтрагенту" Тогда
				ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
					|Переход к ""События мониторинга"" возможен только после записи данных.
					|Данные будут записаны.'");
			ИначеЕсли Команда.Имя = "СПАРКРиски_ВключитьМониторингСобытий" Тогда
				ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
					|Включение мониторинга событий возможно только после записи данных.
					|Данные будут записаны.'");
			КонецЕсли;
			
			ОписаниеКоманды = Новый Структура;
			ОписаниеКоманды.Вставить("Команда"                , Команда);
			ОписаниеКоманды.Вставить("Форма"                  , Форма);
			ОписаниеКоманды.Вставить("Источник"               , Источник);
			ОписаниеКоманды.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПодключаемаяКомандаПриОтветеНаВопросОЗаписи",
				ЭтотОбъект,
				ОписаниеКоманды);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если КонтрагентСсылка = Неопределено Тогда
			КонтрагентСсылка = Источник.ТекущаяСтрока;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Команда.Имя = "СПАРКРиски_ОткрытьСписокСправокКонтрагента" Тогда
		ОткрытьСписокСправок1СПАРКРиски(КонтрагентСсылка);
	ИначеЕсли Команда.Имя = "СПАРКРиски_СобытияМониторингаПоКонтрагенту" Тогда
		ОткрытьСобытияМониторинга1СПАРКРиски(КонтрагентСсылка);
	ИначеЕсли Команда.Имя = "СПАРКРиски_ВключитьМониторингСобытий" Тогда
		
		КнопкаМеню = Форма.Элементы.СПАРКРиски_ВключитьМониторингСобытий;
		ВключитьМониторинг = Не КнопкаМеню.Пометка;
		КнопкаМеню.Пометка = ВключитьМониторинг;
		СПАРКРискиВызовСервера.ВключитьОтключитьМониторингСобытийКонтрагента(КонтрагентСсылка, ВключитьМониторинг);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БСПНастройкиПрограммы

// Обработчик события ПриИзменении() элемента БИПИспользоватьСервисСПАРКРиски
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма панели администрирования;
//	Элемент - ПолеФормы - элементы управления формы панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_ИспользоватьСервисСПАРКРискиПриИзменении(Форма, Элемент) Экспорт

	СПАРКРискиВызовСервера.ИнтернетПоддержкаИСервисы_ИспользоватьСервисСПАРКРискиПриИзменении(
		Форма.БИПИспользоватьСервисСПАРКРиски);
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

#КонецОбласти

#Область БСПВариантыОтчетов

// См. ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента.
//
Процедура ПриОбработкеВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка) Экспорт
	
	Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Расшифровка = "ПодключитьТестовыйПериодСПАРК" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",              ФормаОтчета);
		ДополнительныеПараметры.Вставить("ИдентификаторВызова", "Отчет");
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодключитьТестовыйПериодЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		МодульПодключениеСервисовСопровожденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ПодключениеСервисовСопровожденияКлиент");
		МодульПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(
			СПАРКРискиКлиентСервер.ИдентификаторСервиса(),
			ФормаОтчета,
			ОписаниеОповещения);
	ИначеЕсли Область.Расшифровка = "ПереходКПокупкеСервиса" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПерейтиКПокупкеСервиса();
		
	ИначеЕсли Область.Расшифровка = "ПодключитьИнтернетПоддержкуПользователей" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ФормаОтчета", ФормаОтчета);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеПодключенияИнтернетПоддержкиПользователей",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ФормаОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки.
//
Процедура ПриОбработкеРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Если ФормаОтчета.НастройкиОтчета.ПолноеИмя = "Отчет.СобытияМониторингаСПАРКРиски" Тогда
		АдресОтчета = СПАРКРискиВызовСервера.ОпределитьДанныеРасшифровкиСобытияМониторингаСПАРКРиски(
			ФормаОтчета.ОтчетДанныеРасшифровки,
			Расшифровка,
			СтандартнаяОбработка);
		Если ЗначениеЗаполнено(АдресОтчета) Тогда
			ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(
				АдресОтчета + "?needAccessToken=true");
		КонецЕсли;
	ИначеЕсли ФормаОтчета.НастройкиОтчета.ПолноеИмя = "Отчет.НадежностьВходящегоНДССПАРКРиски"
		Или ФормаОтчета.НастройкиОтчета.ПолноеИмя = "Отчет.НадежностьДебиторовСПАРКРиски" Тогда
		ПараметрыРасшифровки = СПАРКРискиВызовСервера.ОпределитьДанныеРасшифровкиИндексовСПАРКРиски(
			ФормаОтчета.ОтчетДанныеРасшифровки,
			Расшифровка,
			СтандартнаяОбработка);
		Если ПараметрыРасшифровки.ОткрытьФорму Тогда
			ОткрытьФорму(
				ПараметрыРасшифровки.Форма,
				ПараметрыРасшифровки.ПараметрыФормы,
				ФормаОтчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриНачалеРаботыСистемы

// Процедура вызывается из модуля управляемого приложения,
//  затем СПАРКРискиКлиент.ПриНачалеРаботыСистемы.
//
// Параметры:
//  Нет.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	// Подключение обработчика оптимизации кэша 1СПАРК Риски.
	ПодключитьОбработчикОптимизацииКэшаСПАРКРиски();

КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРККонтрагента_КэшИндексов

// Процедура запускает оптимизацию кэша СПАРК Риски
//  (глобальной переменной ПараметрыПриложения[ИдентификаторКэшаИндексов()])).
// Оптимизация заключается в:
// 1) Если есть данные, полученные > 15 минут назад, то удалить их;
// 2) Если количество данных >= 120, то удалить самые старые (по времени получения), чтобы осталось 100 структур данных.
//
// Параметры:
//  Нет.
//
Процедура ОптимизацияКэшаСПАРКРиски() Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");
	ТипДата         = Тип("Дата");

	СписокСтруктурДанных = Новый СписокЗначений;

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = ИдентификаторКэшаИндексов();
	КэшИндексов = ПараметрыПриложения[ИмяПараметраПриложения];

	// 1. Удалить все устаревшие кэши индексов (полученные более 15 минут назад).
	// Параллельно собрать данные для удаления кэша по времени или по количеству.
	Если ТипЗнч(КэшИндексов) = ТипСоответствие Тогда
		Для Каждого лкКонтрагент Из КэшИндексов Цикл
			Если ТипЗнч(лкКонтрагент.Значение) = ТипСтруктура Тогда
				Если лкКонтрагент.Значение.Свойство("ДатаОбновления")
						И ТипЗнч(лкКонтрагент.Значение.ДатаОбновления) = ТипДата
						И лкКонтрагент.Значение.ДатаОбновления >= (ОбщегоНазначенияКлиент.ДатаСеанса() - 15*60) Тогда
					// Данные актуальны, сохранить их для следующей проверки
					СписокСтруктурДанных.Добавить(
						лкКонтрагент.Ключ,
						Формат(лкКонтрагент.Значение.ДатаОбновления, "ДФ=yyyyMMddhhmmss"));
				Иначе
					УдалитьИндексыИзКэшаСПАРКРиски(лкКонтрагент.Ключ);
				КонецЕсли;
			Иначе
				УдалитьИндексыИзКэшаСПАРКРиски(лкКонтрагент.Ключ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		КэшИндексов = Новый Соответствие;
	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, КэшИндексов);

	// 2. Удалить самые старые кэши индексов, если общее количество кэшей > 120, чтобы осталось 100 кэшей.
	Если СписокСтруктурДанных.Количество() >= 120 Тогда
		СписокСтруктурДанных.СортироватьПоПредставлению(НаправлениеСортировки.Убыв); // Самые старые - в конце
		СколькоУдалить = СписокСтруктурДанных.Количество() - 100;
		Для С=0 По СколькоУдалить-1 Цикл
			УдалитьИндексыИзКэшаСПАРКРиски(СписокСтруктурДанных[100+С].Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРККонтрагента_ПроверкаФоновыхЗаданий

// Процедура предназначена для проверки завершенности фоновых заданий.
// Проверка завершения фоновых заданий действует в несколько этапов:
//  - если задание завершено / отменено / ошибка, то вызывается "Оповестить";
//  - форма ловит оповещение и запускает обработчик;
//  - обработчик уже занимается перерисовкой.
// В таком длинном сценарии можно исключить ошибку, когда форму в процессе выполнения фонового задания
//  уже закрыли (тогда оповещение просто не дойдет до адресата).
// Если исключить оповещения, а напрямую искать форму с идентификатором, то это может быть дольше.
//
// Параметры:
//  Нет.
//
Процедура ПроверкаЗавершенностиФоновыхЗаданий() Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипМассив       = Тип("Массив");
	ТипЧисло        = Тип("Число");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = ИдентификаторПроверяемыхФоновыхЗаданий();
	ПроверяемыеФоновыеЗадания = ПараметрыПриложения[ИмяПараметраПриложения];
	Если ТипЗнч(ПроверяемыеФоновыеЗадания) <> ТипМассив Тогда
		ПроверяемыеФоновыеЗадания = Новый Массив;
	КонецЕсли;

	ОтключитьОбработчикОжидания("ОбработчикПроверкиЗавершенностиФоновыхЗаданийСПАРКРиски");

	ОставшиесяФоновыеЗадания = Новый Массив;

	// Есть фоновые задания, по которым необходимо провести проверку?
	Если ПроверяемыеФоновыеЗадания.Количество() > 0 Тогда

		КоличествоПроверок = 30;
		ИнтервалПроверки   = 1;
		ИнтеграцияПодсистемБИПКлиент.ПереопределитьПараметрыПроверкиФоновыхЗаданийСПАРКРиски(
			КоличествоПроверок,
			ИнтервалПроверки);
		СПАРКРискиКлиентПереопределяемый.ПереопределитьПараметрыПроверкиФоновыхЗаданий(
			КоличествоПроверок,
			ИнтервалПроверки);
		Если (ТипЗнч(ИнтервалПроверки) <> ТипЧисло)
				ИЛИ ((ТипЗнч(ИнтервалПроверки) = ТипЧисло)
					И ((ИнтервалПроверки < 1) ИЛИ (ИнтервалПроверки > 30))) Тогда
			ИнтервалПроверки = 1;
		КонецЕсли;
		Если (ТипЗнч(КоличествоПроверок) <> ТипЧисло)
				ИЛИ ((ТипЗнч(КоличествоПроверок) = ТипЧисло)
					И ((КоличествоПроверок < 1) ИЛИ (КоличествоПроверок > 40))) Тогда
			КоличествоПроверок = 30;
		КонецЕсли;

		ПроверяемыеФоновыеЗадания = СПАРКРискиВызовСервера.ПроверкаЗавершенностиФоновыхЗаданий(ПроверяемыеФоновыеЗадания);
		Для Каждого ТекущееПроверяемоеФоновоеЗадание Из ПроверяемыеФоновыеЗадания Цикл
			Если ТекущееПроверяемоеФоновоеЗадание.Статус = "Выполняется" Тогда
				Если ТекущееПроверяемоеФоновоеЗадание.КоличествоПроверок < КоличествоПроверок Тогда
					ОставшиесяФоновыеЗадания.Добавить(ТекущееПроверяемоеФоновоеЗадание);
				Иначе
					// Отменить выполнение фонового задания (это может сделать или администратор, или тот, кто запустил фоновое задание).
					// Оповестить форму о статусе задания.
					// Не смотря на то, что задание выполняется, оповестить о его отмене.
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Отменено");
					Оповестить("СПАРКРиски:ИзмененоСостояниеФоновогоЗадания", ТекущееПроверяемоеФоновоеЗадание, ТекущееПроверяемоеФоновоеЗадание.ИдентификаторФормы);
				КонецЕсли;
			ИначеЕсли ТекущееПроверяемоеФоновоеЗадание.Статус = "Выполнено" Тогда
				// Оповестить форму о статусе задания.
				Оповестить("СПАРКРиски:ИзмененоСостояниеФоновогоЗадания", ТекущееПроверяемоеФоновоеЗадание, ТекущееПроверяемоеФоновоеЗадание.ИдентификаторФормы);
			ИначеЕсли ТекущееПроверяемоеФоновоеЗадание.Статус = "Ошибка" Тогда
				// Оповестить форму о статусе задания.
				Оповестить("СПАРКРиски:ИзмененоСостояниеФоновогоЗадания", ТекущееПроверяемоеФоновоеЗадание, ТекущееПроверяемоеФоновоеЗадание.ИдентификаторФормы);
			ИначеЕсли ТекущееПроверяемоеФоновоеЗадание.Статус = "Отменено" Тогда
				// Оповестить форму о статусе задания.
				Оповестить("СПАРКРиски:ИзмененоСостояниеФоновогоЗадания", ТекущееПроверяемоеФоновоеЗадание, ТекущееПроверяемоеФоновоеЗадание.ИдентификаторФормы);
			КонецЕсли;
		КонецЦикла;

		// Остались фоновые задания, по которым необходимо провести проверку?
		Если ОставшиесяФоновыеЗадания.Количество() > 0 Тогда
			ПодключитьОбработчикОжидания("ОбработчикПроверкиЗавершенностиФоновыхЗаданийСПАРКРиски", ИнтервалПроверки, Истина); // Однократно
		КонецЕсли;

	КонецЕсли;

	ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ОставшиесяФоновыеЗадания);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция АдресСтраницыПокупкиСервисаНаПортале1С()
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/public/purchase/1C-Spark-risks/create?needAccessToken=true");
	
КонецФункции

Функция АдресСтраницыВыбораПартнераДляПокупкеСервиса()
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/public/purchase/1C-Spark-risks/partners");
	
КонецФункции

// Добавляет глобальную проверку на завершенность фонового задания.
//
// Параметры:
//  Форма - Управляемая форма - форма, инициировавшая запрос на получение индексов СПАРК Риски.
//
Процедура ДобавитьЗаданиеНаПроверкуЗавершенностиФоновогоЗадания(Форма)

	ТипСоответствие = Тип("Соответствие");
	ТипМассив       = Тип("Массив");
	ТипUIN          = Тип("УникальныйИдентификатор");

	Если ТипЗнч(Форма.ИндексыСПАРКРиски.ИдентификаторФоновогоЗадания) = ТипUIN Тогда

		// Найти в списке фоновых заданий для проверки это фоновое задание. Если его нет - добавить.
		Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
			ПараметрыПриложения = Новый Соответствие;
		КонецЕсли;
		ИмяПараметраПриложения = ИдентификаторПроверяемыхФоновыхЗаданий();
		ПроверяемыеФоновыеЗадания = ПараметрыПриложения[ИмяПараметраПриложения];
		Если ТипЗнч(ПроверяемыеФоновыеЗадания) <> ТипМассив Тогда
			ПроверяемыеФоновыеЗадания = Новый Массив;
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПроверяемыеФоновыеЗадания);
		КонецЕсли;

		Найдено = Ложь;
		Для Каждого ТекущееПроверяемоеФоновоеЗадание Из ПроверяемыеФоновыеЗадания Цикл
			Если ТекущееПроверяемоеФоновоеЗадание.ИдентификаторФоновогоЗадания = Форма.ИндексыСПАРКРиски.ИдентификаторФоновогоЗадания Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Найдено = Ложь Тогда
			ПроверяемоеФоновоеЗадание = НовыйПроверкаЗавершенностиФоновогоЗадания();
			ПроверяемоеФоновоеЗадание.Вставить("ИдентификаторФормы",            Форма.УникальныйИдентификатор);
			ПроверяемоеФоновоеЗадание.Вставить("ИдентификаторФоновогоЗадания",  Форма.ИндексыСПАРКРиски.ИдентификаторФоновогоЗадания);
			ПроверяемоеФоновоеЗадание.Вставить("АдресХранилищаФоновогоЗадания", Форма.ИндексыСПАРКРиски.АдресХранилищаФоновогоЗадания);
			ПроверяемыеФоновыеЗадания.Добавить(ПроверяемоеФоновоеЗадание);
			ПараметрыПриложения.Вставить(ИмяПараметраПриложения, ПроверяемыеФоновыеЗадания);
		КонецЕсли;

		// Если список не пустой, инициировать регулярную проверку.
		Если ПроверяемыеФоновыеЗадания.Количество() > 0 Тогда
			ПроверкаЗавершенностиФоновыхЗаданий(); // Подключение / отключение обработчиков ожидания.
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКомандыФормыКонтрагента

Процедура ПодключаемаяКомандаПриОтветеНаВопросОЗаписи(КодВозврата, ОписаниеКоманды) Экспорт
	
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОписаниеКоманды.Форма.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПодключаемуюКоманду(
		ОписаниеКоманды.Команда,
		ОписаниеКоманды.Форма,
		ОписаниеКоманды.Источник,
		ОписаниеКоманды.ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРККонтрагента_КэшИндексов

// Функция возвращает идентификатор кэша индексов, который хранит последние использованные данные индексов 1СПАРКРиски.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Строка - идентификатор кэша индексов.
//
Функция ИдентификаторКэшаИндексов()

	Возврат "ИнтернетПоддержкаПользователей.СПАРКРиски.КэшИндексов"; // Идентификатор.

КонецФункции

// Процедура удаляет данные по контрагенту из кэша. Потом кэш перезаполняется.
// Ее надо запускать в том случае, когда у контрагента изменился признак ФизЛицо / ЮрЛицо или ИНН для
// начального заполнения кэша. Также процедура запускается при оптимизации кэша
// индексов для удаления устаревших данных.
//
// Параметры:
//  Контрагент - ОпределяемыеТипы.КонтрагентБИП - контрагент, у которого необходимо удалить кэш индексов.
//
Процедура УдалитьИндексыИзКэшаСПАРКРиски(Контрагент)

	ТипСоответствие = Тип("Соответствие");
	ТипСтруктура    = Тип("Структура");

	Если ТипЗнч(ПараметрыПриложения) <> ТипСоответствие Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	ИмяПараметраПриложения = ИдентификаторКэшаИндексов();
	КэшИндексов = ПараметрыПриложения[ИмяПараметраПриложения];

	Если ТипЗнч(КэшИндексов) = ТипСоответствие Тогда
		НайденноеЗначениеДляКонтрагента = КэшИндексов.Получить(Контрагент);
		Если (НайденноеЗначениеДляКонтрагента <> Неопределено)
				И (ТипЗнч(НайденноеЗначениеДляКонтрагента) = ТипСтруктура) Тогда
			КэшИндексов.Удалить(Контрагент);
		КонецЕсли;
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, КэшИндексов);
	Иначе
		ПараметрыПриложения.Вставить(ИмяПараметраПриложения, Новый Соответствие);
	КонецЕсли;

КонецПроцедуры

// Подключает обработчик оптимизации кэша 1СПАРК Риски.
// (глобальная переменная ПараметрыПриложения["ИдентификаторКэшаИндексов()"]).
//
// Параметры:
//  Нет.
//
Процедура ПодключитьОбработчикОптимизацииКэшаСПАРКРиски()

	ОтключитьОбработчикОжидания("ОбработчикОптимизацииКэшаСПАРКРиски");

	ИнтервалАвтообновленияСекунд = 15 * 60; // каждые 15 минут.
	ПодключитьОбработчикОжидания("ОбработчикОптимизацииКэшаСПАРКРиски", ИнтервалАвтообновленияСекунд, Ложь);

КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРККонтрагента_ПроверкаФоновыхЗаданий

// Функция возвращает идентификатор проверяемых фоновых заданий.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Строка - идентификатор списка проверяемых фоновых заданий.
//
Функция ИдентификаторПроверяемыхФоновыхЗаданий()

	Возврат "ИнтернетПоддержкаПользователей.СПАРКРиски.ПроверяемыеФоновыеЗадания";

КонецФункции

// Возвращает структуру для хранения параметров фонового задания для проверки.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//    * ИдентификаторФормы            - УникальныйИдентификатор;
//    * ИдентификаторФоновогоЗадания  - УникальныйИдентификатор;
//    * АдресХранилищаФоновогоЗадания - Строка;
//    * КоличествоПроверок            - Число;
//    * Статус                        - Строка - одно из значений: Выполняется, Выполнено, Ошибка, Отменено;
//    * ПодробноеПредставлениеОшибки  - Строка.
//
Функция НовыйПроверкаЗавершенностиФоновогоЗадания()

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФормы",            Неопределено);
	Результат.Вставить("ИдентификаторФоновогоЗадания",  Неопределено);
	Результат.Вставить("АдресХранилищаФоновогоЗадания", Неопределено);
	Результат.Вставить("КоличествоПроверок",            0);
	Результат.Вставить("Статус",                        "Выполняется");
	Результат.Вставить("ПодробноеПредставлениеОшибки",  "");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИндексыСПАРККонтрагента_Отчет

// Обрабатывает состояние подключения тестового периода.
//
// Параметры:
//  Результат - Перечисление.СостоянияПодключенияСервисов - результат подключения;
//  ДополнительныеПараметры - Структура - содержит информацию для формирования отчета.
//
Процедура ПодключитьТестовыйПериодЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен")
		Или Результат = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключение")
		Или Результат = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.ОшибкаПодключения")
		Или Результат = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.ПодключениеНедоступно") Тогда
		
		ИмяПараметраПриложения = ИдентификаторКэшаИндексов();
		ПараметрыПриложения[ИмяПараметраПриложения] = Неопределено;
		
		Если ДополнительныеПараметры.ИдентификаторВызова = "Отчет" Тогда
			ОтчетыКлиент.СформироватьОтчет(ДополнительныеПараметры.Форма);
		ИначеЕсли ДополнительныеПараметры.ИдентификаторВызова = "Индексы" Тогда
			ДополнительныеПараметры.Форма.ИндексыСПАРКРиски = Неопределено;
			ДополнительныеПараметры.Форма.ПодключитьОбработчикОжидания(
				"Подключаемый_ОбновитьОтображениеИндексыСПАРК",
				0.1,
				Истина); // Перерисовать форму.
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПокупкаСервисаСПАРК

// Показывает предложение пользователю по переходу к покупке сервиса сервиса 1СПАРК Риски.
//
Процедура ПерейтиКПокупкеСервиса()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерейтиКПокупкеСервисаЗавершение",
		СПАРКРискиКлиент);
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("ЗаказатьПартнера", НСтр("ru = 'Заказать у партнера'"));
	КнопкиВопроса.Добавить("КупитьВ1С",       НСтр("ru = 'Купить в 1С'"));
	КнопкиВопроса.Добавить("Отмена",          НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Вы можете заказать сервис у партнера, либо купить сервис непосредственно в фирме 1С'"),
		КнопкиВопроса,
		,
		,
		НСтр("ru = 'Покупка сервиса'"));
	
КонецПроцедуры

// Выполняет обработку ответа пользователя на предложение перейти к попке сервиса 1СПАРК Риски.
//
// Параметры:
//  Результат - Строка - результат выбора пользователя;
//  ДополнительныеПараметры - Структура - дополнительные параметры вопроса.
//
Процедура ПерейтиКПокупкеСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "КупитьВ1С" Тогда
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			АдресСтраницыПокупкиСервисаНаПортале1С());
	ИначеЕсли Результат = "ЗаказатьПартнера" Тогда
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
			АдресСтраницыВыбораПартнераДляПокупкеСервиса());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет формирование отчета после ввода данных аутентификации.
//
// Параметры:
//  Результат - Строка - результат ввода логина и пароля;
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПослеПодключенияИнтернетПоддержкиПользователей(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ОтчетыКлиент.СформироватьОтчет(ДополнительныеПараметры.ФормаОтчета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
